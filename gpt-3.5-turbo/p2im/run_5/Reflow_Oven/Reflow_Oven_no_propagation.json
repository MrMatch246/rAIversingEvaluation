{
    "functions": {
        "FUN_08007004": {
            "renaming": {
                "FUN_08007004": "initialize_param1_with_result_08007004",
                "iVar2": "function_result",
                "param_1": "result",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "data_ptr"
            },
            "code": "void initialize_param1_with_result_08007004(int *result, undefined4 arg2, undefined4 arg3, undefined4 arg4) {\n  undefined *data_ptr = PTR_DAT_08007024;\n  *(undefined4 *)PTR_DAT_08007024 = 0;\n  int function_result = FUN_0800571a(arg2, arg3, arg3, 0, arg4);\n  if (function_result == -1 && *(int *)data_ptr != 0) {\n    *result = *(int *)data_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_0800571a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007004",
            "calling": [
                "FUN_08006dc8"
            ],
            "imported": true,
            "current_name": "initialize_param1_with_result_08007004"
        },
        "FUN_08002470": {
            "renaming": {
                "FUN_08002470": "updateValue_08002470",
                "PTR_08002490": "ptr",
                "param_1": "value",
                "DAT_08002490": "DAT"
            },
            "code": "void updateValue_08002470(uint value) {\n  uint* PTR_08002490 = (uint*)(DAT_08002490_08002490 + 0xc);\n  uint maskedValue = *(PTR_08002490) & 0xf8ff;\n  uint newValue = (value & 7) << 8 | maskedValue | 0x5fa0000;\n  *(PTR_08002490) = newValue;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002470",
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "imported": true,
            "current_name": "updateValue_08002470"
        },
        "FUN_08006394": {
            "renaming": {
                "FUN_08006394": "FUNC_08006394"
            },
            "code": "\nint FUNC_08006394(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_08006cb4();\n  }\n  if (param_2 == PTR_DAT_080065a0) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_080065a8) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_080065ac) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = FUN_080069e4(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080063d6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = FUN_08006370(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08006580;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = FUN_08006e90(PTR_s___0__080065a4,*pbVar5);\n    puVar1 = PTR_DAT_080065b0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__080065a4 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_080064b0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_080064b0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = FUN_08006e90(PTR_DAT_080065b0,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = FUN_08006e90(PTR_s_efgEFG_080065b4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_080066b0(param_1,&local_88,param_2,DAT_080065bc,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080065b8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08006532;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08006580;\nLAB_08006532:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080063d6;\n}\n\n",
            "called": [
                "FUN_080066b0",
                "FUN_08006cb4",
                "FUN_080069e4",
                "FUN_08006e90",
                "FUN_08006370"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006394",
            "calling": [
                "FUN_08006174",
                "FUN_080068f0"
            ],
            "imported": true,
            "current_name": "FUNC_08006394"
        },
        "FUN_08005740": {
            "renaming": {
                "FUN_08005740": "set_pointer_to_sixteen_08005740",
                "PTR_DAT_0800574c": "pointer_to_dat"
            },
            "code": "void set_pointer_to_sixteen_08005740(void)\n{\n  int* PTR_DAT_0800574c = PTR_DAT_0800574c;\n  *PTR_DAT_0800574c = 22;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005740",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": true,
            "current_name": "set_pointer_to_sixteen_08005740"
        },
        "FUN_08006158": {
            "renaming": {
                "FUN_08006158": "convert_uint_to_ull_08006158",
                "param_1": "input",
                "param_2": "flag",
                "DAT_08006170": "flag"
            },
            "code": "unsigned long long convert_uint_to_ull_08006158(unsigned int input, uint8_t DAT_08006170) {\n  if (DAT_08006170 != 0) {\n    return CONCAT44(input,2);\n  }\n  return (unsigned long long)input << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006158",
            "calling": [
                "FUN_08006112"
            ],
            "imported": true,
            "current_name": "convert_uint_to_ull_08006158"
        },
        "FUN_08004ec4": {
            "renaming": {
                "iVar1": "function_ptr",
                "*(char *)(iVar1 + 0x2c)": "condition_2",
                "(**(code **)(iVar1 + 0x60))(iVar1 + 0x68)": "call_function_with_pointer",
                "*(char *)(iVar1 + 0x5c)": "condition_1",
                "FUN_08004ec4": "check_and_call_function_if_valid_08004ec4",
                "*(code **)(iVar1 + 0x60)": "function_pointer",
                "param_1": "input_parameter",
                "FUN_08004e70": "get_function_pointer",
                "FUN_08002c10": "perform_additional_task"
            },
            "code": "void check_and_call_function_if_valid_08004ec4(int param_1)\n{\n  int function_ptr = get_function_pointer();\n  if (((*(code **)(function_ptr + 0x60) != (code *)0x0) && (*(char *)(function_ptr + 0x5c) == '\\x01')) && (*(char *)(function_ptr + 0x2c) != ' ')) {\n    (**(code **)(function_ptr + 0x60))(function_ptr + 0x68);\n  }\n  perform_additional_task(param_1);\n  return;\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ec4",
            "calling": [
                "FUN_0800316c",
                "FUN_080032b4",
                "FUN_08002d1c"
            ],
            "imported": true,
            "current_name": "check_and_call_function_if_valid_08004ec4"
        },
        "FUN_08003688": {
            "renaming": {
                "FUN_08003688": "FUNC_08003688"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08003688(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08003948;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 4) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) != 0)))) {\n      if (((*DAT_08003948 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08003948 = *DAT_08003948 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08003948 = *DAT_08003948 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = FUN_08001cc4();\n        while ((*DAT_08003948 & 0x20000) != 0) {\n          iVar4 = FUN_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = FUN_08001cc4();\n        while ((*DAT_08003948 & 0x20000) == 0) {\n          iVar4 = FUN_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 0) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) == 0)))) {\n      if (((*DAT_08003948 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_0800394c = 0;\n      iVar3 = FUN_08001cc4();\n      while ((*DAT_08003948 & 2) != 0) {\n        iVar4 = FUN_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_0800394c = 1;\n      iVar3 = FUN_08001cc4();\n      while ((*DAT_08003948 & 2) == 0) {\n        iVar4 = FUN_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003950 = 0;\n      iVar3 = FUN_08001cc4();\n      while ((DAT_08003948[9] & 2) != 0) {\n        iVar4 = FUN_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003950 = 1;\n      iVar3 = FUN_08001cc4();\n      while ((DAT_08003948[9] & 2) == 0) {\n        iVar4 = FUN_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      FUN_0800365c(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08003948[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08003948[7] = DAT_08003948[7] | 0x10000000;\n    }\n    if ((*DAT_08003954 & 0x100) == 0) {\n      *DAT_08003954 = *DAT_08003954 | 0x100;\n      iVar3 = FUN_08001cc4();\n      while ((*DAT_08003954 & 0x100) == 0) {\n        iVar4 = FUN_08001cc4();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08003a60;\n    puVar1 = DAT_08003948;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08003948[8] = DAT_08003948[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08003a60[8] = DAT_08003a60[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08003948[8] = DAT_08003948[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = FUN_08001cc4();\n      while ((DAT_08003a60[8] & 2) != 0) {\n        iVar4 = FUN_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = FUN_08001cc4();\n      while ((DAT_08003948[8] & 2) == 0) {\n        iVar4 = FUN_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08003a60[7] = DAT_08003a60[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08003a60[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_08003a64 = 0;\n    iVar3 = FUN_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003a60[1] = DAT_08003a60[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08003a60[1] = DAT_08003a60[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_08003a64 = 1;\n        iVar3 = FUN_08001cc4();\n        do {\n          if ((*DAT_08003a60 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = FUN_08001cc4();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = FUN_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_08003a64 = 0;\n    iVar3 = FUN_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = FUN_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_08001cc4",
                "FUN_0800365c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003688",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "FUNC_08003688"
        },
        "FUN_08000178": {
            "renaming": {
                "pcVar2": "end_ptr",
                "pcVar3": "current_ptr",
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "str",
                "cVar1": "current_char"
            },
            "code": "char* find_end_of_string_08000178(char* str) {\n  char current_char;\n  char* current_ptr;\n  char* end_ptr;\n\n  current_ptr = str;\n  do {\n    end_ptr = current_ptr + 1;\n    current_char = *current_ptr;\n    current_ptr = end_ptr;\n  } while (current_char != '\\0');\n  return end_ptr + (-1 - (int)str);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_08005c96",
                "FUN_08005ce8"
            ],
            "imported": true,
            "current_name": "find_end_of_string_08000178"
        },
        "FUN_08004418": {
            "renaming": {
                "FUN_08004418": "do_nothing_08004418"
            },
            "code": "\nvoid do_nothing_08004418(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004418",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": true,
            "current_name": "do_nothing_08004418"
        },
        "FUN_08006c88": {
            "renaming": {
                "iVar2": "block_offset",
                "FUN_08006288": "allocate_memory",
                "param_1": "num_blocks",
                "FUN_080061e0": "initialize_memory_block",
                "FUN_08006c88": "allocate_memory_block_08006c88",
                "param_2": "block_size",
                "puVar1": "memory_block"
            },
            "code": "undefined4* allocate_memory_block_08006c88(int num_blocks, int block_size)\n{\n  undefined4 *memory_block;\n  int block_offset = (num_blocks - 1) * 0x68;\n  memory_block = (undefined4 *)allocate_memory(block_offset + 0x74);\n  if (memory_block != (undefined4 *)0x0) {\n    *memory_block = 0;\n    memory_block[1] = num_blocks;\n    memory_block[2] = memory_block + 3;\n    initialize_memory_block(memory_block + 3, 0, block_offset + 0x68);\n  }\n  return memory_block;\n}",
            "called": [
                "FUN_08006288",
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c88",
            "calling": [
                "FUN_08006d14"
            ],
            "imported": true,
            "current_name": "allocate_memory_block_08006c88"
        },
        "FUN_080060e4": {
            "renaming": {
                "FUN_08005f8c": "get_index",
                "iVar1": "index",
                "PTR_DAT_08006100": "PTR_DAT",
                "ptr": "ptr",
                "*ptr": "*ptr",
                "notify_error": "FUN_080060d4",
                "FUN_080060e4": "check_if_valid_080060e4"
            },
            "code": "void check_if_valid_080060e4() {\n  int index = get_index();\n  int* ptr = (int*)(PTR_DAT_08006100_08006100 + index * 0x14 + 0xc);\n  if (*ptr != 0) {\n    notify_error();\n  }\n  return;\n}",
            "called": [
                "FUN_08005f8c",
                "FUN_080060d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060e4",
            "calling": [
                "FUN_0800282c"
            ],
            "imported": true,
            "current_name": "check_if_valid_080060e4"
        },
        "FUN_0800258c": {
            "renaming": {
                "uVar1": "result",
                "puVar2": "setting_value",
                "param_1": "settings",
                "DAT_08002620": "SETTING_TYPES",
                "FUN_0800258c": "initialize_settings_0800258c",
                "DAT_0800261c": "SETTING_VALUES"
            },
            "code": "int initialize_settings_0800258c(uint **settings)\n{\n  int result;\n  uint *setting_value;\n  char *setting_type;\n  const uint *DAT_0800261c = (uint *)0x0800261c;\n  const char *DAT_08002620 = (char *)0x08002620;\n\n  setting_type = (char *)(*settings + 0x21);\n  if (*setting_type != 0x02) {\n    (*settings)[0xe] = 4;\n    result = 1;\n  }\n  else {\n    **settings &= 0xfffffff1;\n    **settings &= 0xfffffffe;\n\n    setting_value = *settings;\n    if (setting_value == DAT_0800261c) {\n      result = 1;\n    }\n    else if (setting_value == DAT_0800261c + 5) {\n      result = 0x10;\n    }\n    else if (setting_value == DAT_0800261c + 10) {\n      result = 0x100;\n    }\n    else if (setting_value == DAT_0800261c + 0xf) {\n      result = 0x1000;\n    }\n    else if (setting_value == DAT_0800261c + 0x14) {\n      result = 0x10000;\n    }\n    else if (setting_value == DAT_0800261c + 0x19) {\n      result = 0x100000;\n    }\n    else {\n      result = 0x1000000;\n    }\n    *(uint *)(DAT_08002620 + 4) = result;\n    *setting_type = 1;\n    (*settings)[8] = 0;\n    if (settings[0xd] != (uint *)0x0) {\n      (*(void (*)())settings[0xd])();\n      result = 0;\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800258c",
            "calling": [
                "FUN_080046b8",
                "FUN_0800316c"
            ],
            "imported": true,
            "current_name": "initialize_settings_0800258c"
        },
        "FUN_08004e20": {
            "renaming": {
                "FUN_08003f18": "executeFunction",
                "FUN_08004e20": "checkIfPointerIsNull_08004e20",
                "PTR_DAT_08004e30": "ptr"
            },
            "code": "void checkIfPointerIsNull_08004e20(void)\n{\n  int* PTR_DAT_08004e30 = (int*)PTR_DAT_08004e30;\n  if (*PTR_DAT_08004e30 != 0) {\n    executeFunction();\n  }\n  return;\n}",
            "called": [
                "FUN_08003f18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e20",
            "calling": [],
            "imported": true,
            "current_name": "checkIfPointerIsNull_08004e20"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "infiniteLoop_0800573c"
            },
            "code": "void infiniteLoop_0800573c(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_0800573c",
                "FUN_08006ac0"
            ],
            "imported": true,
            "current_name": "infiniteLoop_0800573c"
        },
        "FUN_080032b4": {
            "renaming": {
                "puVar2": "ptr_input_data",
                "puVar3": "ptr_input_data_9",
                "param_1": "input_data",
                "cVar1": "current_char",
                "FUN_080032b4": "process_input_080032b4"
            },
            "code": "uint32_t process_input_080032b4(uint32_t **input_data) {\n  char current_char = *(char *)((int)input_data + 0x3d);\n  (*input_data)[1] &= 0xfffff8ff;\n  **input_data |= 1;\n  **input_data &= 0xfffffbff;\n  uint32_t *ptr_input_data = *input_data;\n  if ((ptr_input_data[1] & 0x800) != 0) {\n    if ((*(char *)((int)input_data + 0x3d) == '\"') || (*(char *)((int)input_data + 0x3d) == '*')) {\n      *(int16_t *)((int)input_data + 0x2a) = (int16_t)*(uint32_t *)(*input_data[0xe] + 4);\n    }\n    else {\n      *(int16_t *)((int)input_data + 0x2a) = (int16_t)*(uint32_t *)(*input_data[0xd] + 4);\n    }\n  }\n  if (*(int16_t *)((int)input_data + 0x2a) != 0) {\n    if ((ptr_input_data[5] & 4) != 0) {\n      uint8_t *ptr_input_data_9 = (uint8_t *)input_data[9];\n      input_data[9] = (uint32_t *)((int)ptr_input_data_9 + 1);\n      *(char *)ptr_input_data_9 = (char)ptr_input_data[4];\n      *(int16_t *)((int)input_data + 0x2a) += -1;\n    }\n    if (((*input_data)[5] & 0x40) != 0) {\n      uint8_t *ptr_input_data_9 = (uint8_t *)input_data[9];\n      input_data[9] = (uint32_t *)((int)ptr_input_data_9 + 1);\n      *(char *)ptr_input_data_9 = (char)(*input_data)[4];\n      *(int16_t *)((int)input_data + 0x2a) += -1;\n    }\n    input_data[0x10] = (uint32_t *)((uint32_t)input_data[0x10] | 4);\n  }\n  if (input_data[0x10] == (uint32_t *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      input_data[0xb] = PTR_080033b4;\n      input_data[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      *(undefined *)((int)input_data + 0x3e) = 0;\n      FUN_08004ec4();\n    }\n    else if ((input_data[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n      input_data[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      *(undefined *)((int)input_data + 0x3e) = 0;\n      do_nothing_08002ca4();\n    }\n  }\n  else {\n    FUN_0800316c();\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004ec4",
                "FUN_08002ca4",
                "FUN_0800316c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032b4",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "process_input_080032b4"
        },
        "FUN_08004d06": {
            "renaming": {
                "param_1": "value1",
                "param_2": "value2",
                "FUN_08004d06": "find_different_value_08004d06"
            },
            "code": "int find_different_value_08004d06(int value1, int value2) {\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d06",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": true,
            "current_name": "find_different_value_08004d06"
        },
        "FUN_080056d8": {
            "renaming": {
                "iVar1": "current_offset",
                "puVar2": "new_ptr",
                "param_1": "input_offset",
                "&stack0x00000000": "stack_ptr",
                "FUN_080056d8": "calculate_offset_080056d8"
            },
            "code": "int calculate_offset_080056d8(int input_offset)\n{\n  int current_offset = 0;\n  undefined *stack_ptr = &stack0x00000000;\n  \n  if (*(int *)PTR_DAT_08005708 == 0) {\n    *(undefined **)PTR_DAT_08005708 = PTR_DAT_0800570c;\n  }\n  current_offset = *(int *)PTR_DAT_08005708;\n  undefined *new_ptr = (undefined *)(input_offset + current_offset);\n  if (new_ptr <= stack_ptr) {\n    *(undefined **)PTR_DAT_08005708 = new_ptr;\n    return current_offset;\n  }\n  *(undefined4 *)PTR_DAT_08005710 = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d8",
            "calling": [
                "FUN_08006920"
            ],
            "imported": true,
            "current_name": "calculate_offset_080056d8"
        },
        "FUN_080019f6": {
            "renaming": {
                "FUN_080019f6": "update_values_080019f6",
                "iVar1": "result",
                "param_1": "arg",
                "*(undefined4 *)(param_1 + 0x3c))[1]": "ptr2",
                "*(undefined4 *)(param_1 + 0x38)": "ptr3",
                "uVar3": "value2",
                "uVar2": "value1",
                "uVar5": "value4",
                "*(undefined4 *)(param_1 + 0x3c)": "ptr1",
                "*(undefined4 *)(param_1 + 0x38))[1]": "ptr4",
                "uVar4": "value3"
            },
            "code": "void update_values_080019f6(int param_1)\n{\n  int iVar;\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  undefined4 *ptr4;\n  \n  ptr1 = *(undefined4 **)(param_1 + 0x3c);\n  ptr2 = ptr1 + 1;\n  ptr3 = *(undefined4 **)(param_1 + 0x38);\n  ptr4 = ptr3 + 1;\n  *(undefined4 *)(param_1 + 0x48) = *ptr1;\n  *(undefined4 *)(param_1 + 0x4c) = *ptr2;\n  *(undefined4 *)(param_1 + 0x50) = *ptr3;\n  *(undefined4 *)(param_1 + 0x54) = *ptr4;\n  iVar = FUN_08000a18(*ptr1,*ptr2,*(undefined4 *)(param_1 + 0x68),*(undefined4 *)(param_1 + 0x6c));\n  if (iVar == 0) {\n    iVar = FUN_080009dc(*ptr1,*ptr2,*(undefined4 *)(param_1 + 0x60),*(undefined4 *)(param_1 + 100));\n    if (iVar != 0) {\n      *(undefined4 *)(param_1 + 0x48) = *(undefined4 *)(param_1 + 0x60);\n      *(undefined4 *)(param_1 + 0x4c) = *(undefined4 *)(param_1 + 100);\n    }\n    return;\n  }\n  *(undefined4 *)(param_1 + 0x48) = *(undefined4 *)(param_1 + 0x68);\n  *(undefined4 *)(param_1 + 0x4c) = *(undefined4 *)(param_1 + 0x6c);\n  return;\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019f6",
            "calling": [
                "FUN_08001a44"
            ],
            "imported": true,
            "current_name": "update_values_080019f6"
        },
        "FUN_08005510": {
            "renaming": {
                "iVar1": "result",
                "FUN_08005510": "update_data_08005510",
                "param_1": "data_ptr",
                "param_2": "new_data",
                "param_3": "unknown_param",
                "param_4": "unknown_param2",
                "uVar2": "index",
                "char_value": "char_value"
            },
            "code": "void update_data_08005510(int data_ptr, int new_data, int unknown_param, int unknown_param2)\n{\n  int result = FUN_0800548c();\n  if (data_ptr != 0 && result == 0) {\n    int index = *(byte *)(data_ptr + 0x44);\n    *(int *)(PTR_DAT_08005560 + index * 4) = data_ptr;\n    *(int *)(PTR_DAT_0800555c + index * 4) = new_data;\n    int char_value = *(char *)(data_ptr + 0x5a);\n    FUN_08002494(char_value, 0, 1, index, unknown_param2);\n    FUN_080024f8(char_value);\n    FUN_080045a2(*(int *)(PTR_DAT_08005564 + index * 4), data_ptr + 0x45, 1);\n  }\n}",
            "called": [
                "FUN_08002494",
                "FUN_080045a2",
                "FUN_080024f8",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005510",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": true,
            "current_name": "update_data_08005510"
        },
        "FUN_08002f9c": {
            "renaming": {
                "FUN_08002f9c": "process_string_08002f9c",
                "offset": "offset",
                "next_char": "next_char",
                "length": "length",
                "param_1": "params",
                "puVar1": "param_ptr",
                "current_char": "current_char"
            },
            "code": "int process_string_08002f9c(uint **params) {\n  uint *param_ptr;\n  char current_char = *(char *)((int)params + 0x3d);\n  if (current_char == '\"') {\n    ushort length = *(ushort *)((int)params + 0x2a);\n    if (length < 4) {\n      ushort offset = length - 2;\n      if (offset < 2) {\n        if (params[0xb] == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x800;\n        }\n        (*params)[1] = (*params)[1] & 0xfffffbff;\n      }\n      else {\n        if (params[0xb] == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n        (*params)[1] = (*params)[1] & 0xfffff8ff;\n        param_ptr = params[9];\n        params[9] = (uint *)((int)param_ptr + 1);\n        *(char *)param_ptr = (char)(*params)[4];\n        *(ushort *)((int)params + 0x2a) = *(ushort *)((int)params + 0x2a) + -1;\n        *(char *)((int)params + 0x3d) = 0x20;\n        params[0xc] = (uint *)0x0;\n        char next_char = *(char *)((int)params + 0x3e);\n        *(char *)((int)params + 0x3e) = 0;\n        if (next_char == '@') {\n          do_nothing_08002f9a();\n        }\n        else {\n          do_nothing_08002c50();\n        }\n      }\n    }\n    else {\n      param_ptr = params[9];\n      params[9] = (uint *)((int)param_ptr + 1);\n      *(char *)param_ptr = (char)(*params)[4];\n      *(ushort *)((int)params + 0x2a) = *(ushort *)((int)params + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "process_string_08002f9c"
        },
        "FUN_08005750": {
            "renaming": {
                "FUN_08005750": "returnOne_08005750",
                "undefined4": "int"
            },
            "code": "int returnOne_08005750(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005750",
            "calling": [
                "thunk_FUN_08005750"
            ],
            "imported": true,
            "current_name": "returnOne_08005750"
        },
        "FUN_08002f9a": {
            "renaming": {
                "FUN_08002f9a": "do_nothing_08002f9a"
            },
            "code": "\nvoid do_nothing_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9a",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": true,
            "current_name": "do_nothing_08002f9a"
        },
        "FUN_08002cf2": {
            "renaming": {
                "FUN_08002cf2": "FUNC_08002cf2"
            },
            "code": "\nundefined4 FUNC_08002cf2(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined2 uVar1;\n  uint uVar2;\n  \n  uVar2 = *(uint *)(*param_1 + 0x18);\n  if ((uVar2 & 0x80) == 0) {\n    uVar1 = *(undefined2 *)(param_1 + 3);\n  }\n  else {\n    uVar1 = *(undefined2 *)(param_1 + 6);\n  }\n  FUN_08004e74(param_1,(*(uint *)(*param_1 + 0x18) & 4) == 0,uVar1,uVar2,param_4);\n  return 0;\n}\n\n",
            "called": [
                "FUN_08004e74"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08002cf2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "FUNC_08002cf2"
        },
        "FUN_08006288": {
            "renaming": {
                "iVar4": "padding_size",
                "FUN_08006288": "allocate_memory_block_08006288",
                "puVar3": "data_ptr",
                "param_1": "out_pointer",
                "puVar5": "prev_ptr",
                "puVar7": "prev_ptr",
                "param_2": "size",
                "puVar1": "unused_pointer",
                "uVar2": "result",
                "uVar6": "diff",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_block_08006288(undefined4 *out_pointer, uint size) {\n  uint aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *out_pointer = 0xc;\n  }\n  else {\n    do_nothing_08006eac();\n    uint *data_ptr = *(uint **)PTR_DAT_0800633c;\n    uint *prev_ptr = *(uint **)PTR_DAT_0800633c;\n    while (data_ptr != (uint *)0x0) {\n      uint diff = *data_ptr - aligned_size;\n      if (-1 < (int)diff) {\n        if (diff < 0xc) {\n          if (prev_ptr == data_ptr) {\n            uint next_ptr = prev_ptr[1];\n            *(uint *)PTR_DAT_0800633c = next_ptr;\n          }\n          else {\n            uint next_ptr = data_ptr[1];\n          }\n          if (prev_ptr != data_ptr) {\n            prev_ptr[1] = next_ptr;\n            prev_ptr = data_ptr;\n          }\n        }\n        else {\n          *data_ptr = diff;\n          *(uint *)((int)data_ptr + diff) = aligned_size;\n          prev_ptr = (uint *)((int)data_ptr + diff);\n        }\n        goto LAB_080062ec;\n      }\n      prev_ptr = data_ptr;\n      data_ptr = (uint *)data_ptr[1];\n    }\n    if (*(int *)PTR_DAT_08006340 == 0) {\n      uint result = FUN_08006920(out_pointer);\n      *(uint *)PTR_DAT_08006340 = result;\n    }\n    uint *new_ptr = (uint *)FUN_08006920(out_pointer,aligned_size);\n    if ((new_ptr != (uint *)0xffffffff) &&\n       ((prev_ptr = (uint *)((int)new_ptr + 3U & 0xfffffffc), new_ptr == prev_ptr ||\n        (int diff = FUN_08006920(out_pointer,(int)prev_ptr - (int)new_ptr), diff != -1)))) {\n      *prev_ptr = aligned_size;\nLAB_080062ec:\n      do_nothing_08006eae(out_pointer);\n      uint aligned_end = (int)prev_ptr + 0xbU & 0xfffffff8;\n      int padding_size = aligned_end - (int)(prev_ptr + 1);\n      if (padding_size != 0) {\n        *(int *)((int)prev_ptr + padding_size) = -padding_size;\n        return aligned_end;\n      }\n      return aligned_end;\n    }\n    *out_pointer = 0xc;\n    do_nothing_08006eae(out_pointer);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006920",
                "FUN_08006eae",
                "FUN_08006eac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006288",
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "imported": true,
            "current_name": "allocate_memory_block_08006288"
        },
        "FUN_08002004": {
            "renaming": {
                "iVar1": "result",
                "FUN_08002004": "check_and_update_08002004",
                "puVar2": "ptr",
                "param_1": "config",
                "DAT_080020ec": "PTR_DAT_080020ec",
                "DAT_080020e8": "PTR_DAT_080020e8"
            },
            "code": "int check_and_update_08002004(undefined4 *config)\n{\n  int result;\n  undefined4 *ptr;\n  char flag = *(char *)(config + 9);\n  if (flag != 1) {\n    *(undefined *)(config + 9) = 1;\n    result = check_version();\n    if (result == 0) {\n      config[10] = (config[10] & 0xfffffcfe) | 0x100;\n      ptr = (undefined4 *)*config;\n      if ((ptr == DAT_080020e8) && ((DAT_080020e8[-0xff] & 0xf0000) != 0)) {\n        config[10] |= 0x100000;\n        if ((*(uint *)(DAT_080020ec + 4) & 0x400) != 0) {\n          config[10] = (config[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      else {\n        config[10] &= 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          config[10] = (config[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      if ((config[10] & 0x1000) == 0) {\n        config[11] = 0;\n      }\n      else {\n        config[11] &= 0xfffffff9;\n      }\n      *(undefined *)(config + 9) = 0;\n      *ptr = 0xfffffffd;\n      ptr = (undefined4 *)*config;\n      if (((ptr[2] & 0xe0000) == 0xe0000) && ((ptr != DAT_080020e8 || ((DAT_080020e8[-0xff] & 0xf0000) == 0)))) {\n        ptr[2] |= 0x500000;\n      }\n      else {\n        ptr[2] |= 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(config + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08001f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002004",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "check_and_update_08002004"
        },
        "FUN_08005754": {
            "renaming": {
                "bVar1": "is_valid_index",
                "FUN_08005754": "get_data_08005754",
                "param_1": "data_index",
                "cVar2": "data_value",
                "uVar3": "result",
                "uVar4": "data_size"
            },
            "code": "uint get_data_08005754(uint data_index)\n{\n  bool is_valid_index;\n  char data_value;\n  uint result;\n  \n  if (data_index < 14) {\n    if (data_index + 46 < 60) {\n      is_valid_index = true;\n    }\n    else {\n      is_valid_index = false;\n    }\n  }\n  else {\n    is_valid_index = data_index < 60;\n  }\n  if (is_valid_index) {\n    if (data_index < 14) {\n      data_index += 46;\n    }\n    data_value = PTR_DAT_080057ac[data_index];\n  }\n  else {\n    data_value = -1;\n  }\n  if (data_value == -1) {\n    result = 0;\n  }\n  else {\n    result = FUN_08004a4c();\n    uint data_size = *(uint *)PTR_DAT_080057b0;\n    if (data_size != 12) {\n      if (data_size < 12) {\n        return result >> (12 - data_size & 0xff);\n      }\n      return result << (data_size - 12 & 0xff);\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08004a4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005754",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "get_data_08005754"
        },
        "FUN_08005fc8": {
            "renaming": {
                "PTR_DAT_08006068": "data_start_ptr",
                "PTR_LAB_08005fa0_1_08006070": "label_start_ptr",
                "FUN_08005fc8": "initialize_data_08005fc8",
                "param_1": "argc",
                "PTR_DAT_0800606c": "data_label_ptr",
                "param_2": "selected_index",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "data_ptr"
            },
            "code": "void initialize_data_08005fc8(int argc, int selected_index, undefined4 param_3, undefined4 param_4)\n{\n  undefined *data_ptr;\n  data_ptr = PTR_DAT_08006068;\n  if (argc != 1) {\n    return;\n  }\n  if (selected_index == 0xffff) {\n    *PTR_DAT_08006068 = 6;\n    *(undefined4 *)(data_ptr + 0xc) = 0;\n    data_ptr[0x14] = 7;\n    *(undefined4 *)(data_ptr + 0x20) = 0;\n    data_ptr[0x28] = 8;\n    *(undefined4 *)(data_ptr + 0x34) = 0;\n    data_ptr[0x3c] = 9;\n    *(undefined4 *)(data_ptr + 0x48) = 0;\n    data_ptr[0x50] = 10;\n    *(undefined4 *)(data_ptr + 0x5c) = 0;\n    data_ptr[100] = 0x17;\n    *(undefined4 *)(data_ptr + 0x70) = 0;\n    data_ptr[0x78] = 0x17;\n    *(undefined4 *)(data_ptr + 0x84) = 0;\n    data_ptr[0x8c] = 0x17;\n    *(undefined4 *)(data_ptr + 0x98) = 0;\n    data_ptr[0xa0] = 0x17;\n    *(undefined4 *)(data_ptr + 0xac) = 0;\n    data_ptr[0xb4] = 0x17;\n    *(undefined4 *)(data_ptr + 0xc0) = 0;\n    data_ptr[200] = 0x28;\n    *(undefined4 *)(data_ptr + 0xd4) = 0;\n    data_ptr[0xdc] = 0x28;\n    *(undefined4 *)(data_ptr + 0xe8) = 0;\n    data_ptr[0xf0] = 0x28;\n    *(undefined4 *)(data_ptr + 0xfc) = 0;\n    data_ptr[0x104] = 0x28;\n    *(undefined4 *)(data_ptr + 0x110) = 0;\n    data_ptr[0x118] = 0x28;\n    *(undefined4 *)(data_ptr + 0x124) = 0;\n    data_ptr[300] = 0x28;\n    *(undefined4 *)(data_ptr + 0x138) = 0;\n    initialize_data_08005fc8_helper(0, PTR_LAB_08005fa0_1_08006070, PTR_DAT_0800606c, data_ptr, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08006112"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fc8",
            "calling": [],
            "imported": true,
            "current_name": "initialize_data_08005fc8"
        },
        "FUN_08002ab8": {
            "renaming": {
                "param_1": "ptr_array",
                "FUN_08002ab8": "increment_byte_at_pointer_08002ab8",
                "pbVar1": "byte_ptr",
                "*(short *)((int)param_1 + 0x2a)": "count",
                "*(uint *)(*param_1 + 0x10)": "target_ptr"
            },
            "code": "int increment_byte_at_pointer_08002ab8(int *ptr_array)\n{\n  short *count = (short *)((int)ptr_array + 0x2a);\n  if (*count != 0) {\n    byte *byte_ptr = (byte *)ptr_array[9];\n    ptr_array[9] = (int)(byte_ptr + 1);\n    uint *target_ptr = (uint *)(*ptr_array + 0x10);\n    *target_ptr = (uint)*byte_ptr;\n    *count -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ab8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "increment_byte_at_pointer_08002ab8"
        },
        "FUN_080068f0": {
            "renaming": {
                "process": "process",
                "iVar1": "ptr_data",
                "uStack_8": "data_3",
                "param_1": "data_1",
                "uStack_4": "data_4",
                "FUN_080068f0": "process_data_080068f0",
                "uStack_c": "data_2",
                "param_2": "data_2",
                "param_3": "data_3",
                "cleanup": "cleanup",
                "param_4": "data_4",
                "uVar2": "data_1",
                "PTR_PTR_DAT_0800691c": "PTR_PTR_DAT_0800691c"
            },
            "code": "void process_data_080068f0(int data_1, int data_2, int data_3, int data_4)\n{\n  int ptr_data = *(int *)PTR_PTR_DAT_0800691c;\n  if ((ptr_data != 0) && (*(int *)(ptr_data + 0x18) == 0)) {\n    cleanup(ptr_data);\n  }\n  process(ptr_data, *(int *)(ptr_data + 8), data_1, &data_2, data_1, &data_2);\n  return;\n}",
            "called": [
                "FUN_08006cb4",
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068f0",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": true,
            "current_name": "process_data_080068f0"
        },
        "FUN_080066b0": {
            "renaming": {
                "FUN_080066b0": "FUNC_080066b0"
            },
            "code": "\nuint FUNC_080066b0(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800686a;\n          if (bVar1 != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\nLAB_080067fa:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08006790:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080066e0;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08006700;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08006700:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080067d6;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08006740:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08006766:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08006774;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08006774:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08006790;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08006726:\n            puVar5 = PTR_s_0123456789abcdef_080068e8;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08006766;\n          if (bVar1 == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08006740;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = FUN_08006e90(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08006856;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08006856:\n    *puVar3 = uVar6;\n  }\nLAB_0800686a:\n  param_2[4] = 0;\nLAB_080067d6:\n  iVar2 = FUN_080065c0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080067ea:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080067ea;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080066b0",
            "calling": [
                "FUN_08006394"
            ],
            "imported": true,
            "current_name": "FUNC_080066b0"
        },
        "FUN_08002c52": {
            "renaming": {
                "FUN_08002c52": "do_nothing_08002c52"
            },
            "code": "\nvoid do_nothing_08002c52(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c52",
            "calling": [
                "FUN_08002c54",
                "FUN_08002d1c"
            ],
            "imported": true,
            "current_name": "do_nothing_08002c52"
        },
        "FUN_0800138e": {
            "renaming": {
                "bVar1": "current_flag_value",
                "FUN_08001310": "call_function",
                "param_1": "data_ptr",
                "param_2": "flag_value",
                "param_3": "param_3",
                "FUN_0800138e": "set_flag_and_call_function_0800138e",
                "param_4": "param_4"
            },
            "code": "void set_flag_and_call_function_0800138e(int data_ptr, int flag_value, int param_3, int param_4) {\n  byte current_flag_value = *(byte *)(data_ptr + 0x14);\n  *(byte *)(data_ptr + 0x14) = current_flag_value | flag_value;\n  call_function(data_ptr, current_flag_value | 0xc, param_3, param_4);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800138e",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": true,
            "current_name": "set_flag_and_call_function_0800138e"
        },
        "FUN_08002c50": {
            "renaming": {
                "FUN_08002c50": "do_nothing_08002c50"
            },
            "code": "\nvoid do_nothing_08002c50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c50",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": true,
            "current_name": "do_nothing_08002c50"
        },
        "FUN_0800598a": {
            "renaming": {
                "iVar1": "status",
                "param_1": "data_ptr",
                "local_9": "new_data",
                "FUN_0800598a": "update_data_0800598a",
                "uVar2": "index"
            },
            "code": "void update_data_0800598a(int data_ptr)\n{\n  int status;\n  ushort index;\n  undefined new_data;\n\n  status = get_data_at_ptr(data_ptr, &new_data);\n  if ((status == 0) && (index = *(short *)(data_ptr + 0x60) + 1U & 0x3f, index != *(ushort *)(data_ptr + 0x62))) {\n    *(undefined *)(*(int *)(data_ptr + 0x5c) + (uint)*(ushort *)(data_ptr + 0x60)) = new_data;\n    *(ushort *)(data_ptr + 0x60) = index;\n  }\n  return;\n}",
            "called": [
                "FUN_080054d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800598a",
            "calling": [],
            "imported": true,
            "current_name": "update_data_0800598a"
        },
        "FUN_08001c88": {
            "renaming": {
                "FUN_08002470": "call_function_A",
                "FUN_08001c3c": "call_function_B",
                "FUN_08001c88": "set_flag_and_call_functions_08001c88",
                "*DAT_08001ca8": "data_pointer",
                "do_nothing_08001c3a": "do_nothing"
            },
            "code": "void set_flag_and_call_functions_08001c88(void)\n{\n  **DAT_08001ca8 = **DAT_08001ca8 | 0x10;\n  call_function_A(3);\n  call_function_B(0xf);\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08002470",
                "FUN_08001c3a",
                "FUN_08001c3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c88",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": true,
            "current_name": "set_flag_and_call_functions_08001c88"
        },
        "FUN_08001a44": {
            "renaming": {
                "uVar1": "flag_value",
                "param_1": "flag_address",
                "param_2": "value",
                "FUN_08001a44": "set_flag_08001a44"
            },
            "code": "void set_flag_08001a44(int flag_address, int value) {\n  if (value == 1) {\n    bool flag_value = true;\n    if (*(char *)(flag_address + 0x70) == '\\0') {\n      initialize_flag();\n    }\n  }\n  else {\n    bool flag_value = false;\n  }\n  *(bool *)(flag_address + 0x70) = flag_value;\n  return;\n}",
            "called": [
                "FUN_080019f6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a44",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "set_flag_08001a44"
        },
        "FUN_08002c54": {
            "renaming": {
                "param_1": "input_array",
                "pbVar2": "input_bytes",
                "cVar1": "closing_parenthesis",
                "FUN_08002c54": "process_input_08002c54"
            },
            "code": "int process_input_08002c54(int *input_array)\n{\n  char closing_parenthesis = *(char *)((int)input_array + 0x3d);\n  if (*(short *)((int)input_array + 0x2a) != 0) {\n    byte *input_bytes = (byte *)input_array[9];\n    input_array[9] = (int)(input_bytes + 1);\n    uint input_value = (uint)*input_bytes;\n    *(uint *)(*input_array + 0x10) = input_value;\n    *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n    if ((*(short *)((int)input_array + 0x2a) == 0) && (closing_parenthesis == ')')) {\n      *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n      input_array[0xc] = 0x21;\n      *(undefined *)((int)input_array + 0x3d) = 0x28;\n      do_nothing_08002c52();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "process_input_08002c54"
        },
        "FUN_080043b4": {
            "renaming": {
                "iVar1": "result",
                "param_1": "param_array",
                "param_2": "size_param_array",
                "param_3": "bool_param",
                "param_4": "int_param",
                "param_5": "uint_param",
                "FUN_080043b4": "check_parameters_080043b4"
            },
            "code": "uint32_t check_parameters_080043b4(uint32_t **param_array, uint32_t size_param_array, uint32_t bool_param, int int_param, uint32_t uint_param) {\n  int32_t result;\n  do {\n    if (((size_param_array & ~**param_array) == 0) != bool_param) {\n      return 0;\n    }\n  } while ((uint_param == 0xffffffff) || ((uint_param != 0 && (result = get_difference(), (uint32_t)(result - int_param) <= uint_param))));\n  (*param_array)[3] &= 0xfffffe5f;\n  (*param_array)[5] &= 0xfffffffe;\n  *(uint8_t *)((int32_t)param_array + 0x39) = 0x20;\n  *(uint8_t *)((int32_t)param_array + 0x3a) = 0x20;\n  *(uint32_t *)(param_array + 0xe) = 0;\n  return 3;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043b4",
            "calling": [
                "FUN_08004478"
            ],
            "imported": true,
            "current_name": "check_parameters_080043b4"
        },
        "FUN_0800441a": {
            "renaming": {
                "param_1": "ptr_param_1",
                "FUN_0800441a": "clear_and_reset_0800441a"
            },
            "code": "int clear_and_reset_0800441a(int *ptr_param_1)\n{\n    if (ptr_param_1 != NULL)\n    {\n        if (*(char *)((int)ptr_param_1 + 0x39) == '\\0')\n        {\n            *(undefined *)(ptr_param_1 + 0xe) = 0;\n            do_nothing_08004418();\n        }\n        *(undefined *)((int)ptr_param_1 + 0x39) = 0x24;\n        *(uint *)(*ptr_param_1 + 0xc) &= 0xffffdfff;\n        FUN_08004204(ptr_param_1);\n        *(uint *)(*ptr_param_1 + 0x10) &= 0xffffb7ff;\n        *(uint *)(*ptr_param_1 + 0x14) &= 0xffffffd5;\n        *(uint *)(*ptr_param_1 + 0xc) |= 0x2000;\n        ptr_param_1[0xf] = 0;\n        *(undefined *)((int)ptr_param_1 + 0x39) = 0x20;\n        *(undefined *)((int)ptr_param_1 + 0x3a) = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08004204",
                "FUN_08004418"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800441a",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": true,
            "current_name": "clear_and_reset_0800441a"
        },
        "FUN_08004d18": {
            "renaming": {
                "code": "function_pointer",
                "**(code **)PTR_DAT_08004d28": "dereferenced_function_pointer",
                "PTR_DAT_08004d28": "function_pointer_data",
                "*(undefined4 *)PTR_DAT_08004d2c": "dereferenced_parameter",
                "PTR_DAT_08004d2c": "parameter_data",
                "FUN_08004d18": "execute_code_if_valid_08004d18"
            },
            "code": "void execute_code_if_valid_08004d18(void)\n{\n  code* function_pointer = *(code**)PTR_DAT_08004d28;\n  if (function_pointer != nullptr)\n  {\n    int parameter = *(int*)PTR_DAT_08004d2c;\n    (*function_pointer)(parameter);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d18",
            "calling": [
                "FUN_08003ea0"
            ],
            "imported": true,
            "current_name": "execute_code_if_valid_08004d18"
        },
        "FUN_080006d4": {
            "renaming": {
                "shift": "shift",
                "temp_var": "temp_var",
                "param_1": "input_1",
                "temp2": "temp2",
                "temp3": "temp3",
                "temp1": "temp1",
                "unaff_r4": "unaff_r4",
                "uVar3": "temp5",
                "limit": "limit",
                "uVar2": "temp_var",
                "in_r12": "in_r12",
                "result2": "result2",
                "result1": "result1",
                "mask": "mask",
                "bVar4": "check1",
                "uVar1": "temp6",
                "temp6": "temp6",
                "temp7": "temp7",
                "temp4": "temp4",
                "temp5": "temp5",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "FUN_080006d4": "calculate_result_080006d4"
            },
            "code": "ulonglong calculate_result_080006d4(uint input_1, uint input_2, uint input_3, uint input_4) {\n  uint temp1 = input_1;\n  uint temp2 = input_2;\n  uint temp3 = input_3;\n  uint temp4 = input_4;\n  bool check1 = false;\n  bool check2 = false;\n  uint mask = 0x80000000;\n  uint result1;\n  uint result2;\n  uint shift = 0x14;\n  uint limit = 0x100000;\n\n  uint temp_var = in_r12 & (temp4 >> shift);\n  if ((unaff_r4 != in_r12) && (temp_var != in_r12)) {\n    check1 = (input_1 | (input_2 << 1)) == 0;\n    if (!check1) {\n      check1 = (input_3 | (input_4 << 1)) == 0;\n    }\n    if (check1) {\n      result1 = (temp2 ^ temp4) & mask;\n      return (ulonglong)result1 << 0x20;\n    }\n    if (unaff_r4 == 0) {\n      uint temp5 = temp2 & mask;\n      do {\n        uint temp6 = temp1 & mask;\n        temp1 = temp1 << 1;\n        temp2 = temp2 * 2 + (uint)(temp6 != 0);\n      } while ((temp2 & limit) == 0);\n      temp2 = temp2 | temp5;\n      if (temp_var != 0) {\n        return CONCAT44(temp2,temp1);\n      }\n    }\n    do {\n      uint temp7 = temp3 & mask;\n      temp3 = temp3 << 1;\n      temp4 = temp4 * 2 + (uint)(temp7 != 0);\n    } while ((temp4 & limit) == 0);\n    result1 = temp2;\n    result2 = temp1;\n    return CONCAT44(result1,result2);\n  }\n  check1 = (input_1 | (input_2 << 1)) == 0;\n  if (check1) {\n    temp2 = input_4;\n    temp1 = input_3;\n  }\n  if (!check1) {\n    check2 = (input_3 | (input_4 << 1)) == 0;\n  }\n  uint result3 = temp2;\n  if (((!check2) && ((unaff_r4 != in_r12 || ((input_1 | (input_2 << 0xc)) == 0)))) && ((temp_var != in_r12 || (temp1 = input_3, result3 = input_4, ((input_3 | (input_4 << 0xc)) == 0))))) {\n    result1 = (temp2 ^ temp4) & mask | 0x7ff00000;\n    return (ulonglong)result1 << 0x20;\n  }\n  result1 = result3;\n  result2 = temp1;\n  return CONCAT44(result1,result2) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006d4",
            "calling": [
                "FUN_080004f8"
            ],
            "imported": true,
            "current_name": "calculate_result_080006d4"
        },
        "FUN_08000190": {
            "renaming": {
                "FUN_08000190": "FUNC_08000190"
            },
            "code": "\nulonglong FUNC_08000190(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_080002a0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000190",
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001a66",
                "FUN_080016b4"
            ],
            "imported": true,
            "current_name": "FUNC_08000190"
        },
        "FUN_08006174": {
            "renaming": {
                "FUN_08006174": "execute_function_with_args_and_result_08006174",
                "uStack_8": "result",
                "param_1": "function_pointer",
                "uStack_4": "arg5",
                "PTR_PTR_DAT_08006194": "function_pointer",
                "param_2": "arg1",
                "param_3": "arg3",
                "param_4": "arg5"
            },
            "code": "void execute_function_with_args_and_result_08006174(void* PTR_PTR_DAT_08006194, int arg1, int arg2, int* arg3, int arg4, int* arg5)\n{\n  int result = 0;\n  *arg5 = result;\n  ((int (*)(int, int, int*, int, int*))PTR_PTR_DAT_08006194)(arg1, arg2, arg3, arg4, arg5);\n  return;\n}",
            "called": [
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006174",
            "calling": [
                "FUN_0800611c"
            ],
            "imported": true,
            "current_name": "execute_function_with_args_and_result_08006174"
        },
        "FUN_08007028": {
            "renaming": {
                "FUN_08007028": "processInput_08007028",
                "iVar2": "result",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "ptr"
            },
            "code": "void processInput_08007028(int *output, undefined4 input)\n{\n  undefined *ptr = PTR_DAT_08007044;\n  *(undefined4 *)PTR_DAT_08007044 = 0;\n  int result = findInput(input);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08005724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007028",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": true,
            "current_name": "processInput_08007028"
        },
        "FUN_08000194": {
            "renaming": {
                "FUN_08000194": "FUNC_08000194"
            },
            "code": "\nulonglong FUNC_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000194",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_080015f8",
                "FUN_080016b4"
            ],
            "imported": true,
            "current_name": "FUNC_08000194"
        },
        "FUN_08002494": {
            "renaming": {
                "DAT_080024f0": "data_pointer_1",
                "uVar1": "shift_amount",
                "FUN_08002494": "set_bits_08002494",
                "param_1": "bit_index",
                "param_2": "bit_mask",
                "param_3": "value",
                "uVar2": "bits_to_set",
                "DAT_080024f4": "data_pointer_2"
            },
            "code": "void set_bits_08002494(uint bit_index, uint bit_mask, uint value) {\n  uint shift_amount = (*(int *)(DAT_080024f0 + 0xc) << 0x15) >> 0x1d;\n  uint bits_to_set = 7 - shift_amount;\n  if (bits_to_set > 3) {\n    bits_to_set = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  uint bits_to_keep = (1 << (shift_amount & 0xff)) - 1U & value;\n  uint bits_to_insert = (bit_mask & (1 << (bits_to_set & 0xff)) - 1U) << (shift_amount & 0xff);\n  uint result = bits_to_keep | bits_to_insert;\n  if ((int)bit_index < 0) {\n    *(char *)(DAT_080024f4 + (bit_index & 0xf)) = (char)(result << 4);\n  }\n  else {\n    *(char *)(bit_index + 0xe000e400) = (char)(result << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002494",
            "calling": [
                "FUN_08005510",
                "FUN_08005568",
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "imported": true,
            "current_name": "set_bits_08002494"
        },
        "FUN_08002c4e": {
            "renaming": {
                "FUN_08002c4e": "do_nothing_08002c4e"
            },
            "code": "\nvoid do_nothing_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c4e",
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "imported": true,
            "current_name": "do_nothing_08002c4e"
        },
        "FUN_08004f4c": {
            "renaming": {
                "FUN_08004f4c": "FUNC_08004f4c"
            },
            "code": "\nvoid FUNC_08004f4c(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = FUN_08004c78((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n    iVar3 = FUN_08004c78((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      FUN_080068f0(PTR_s_ERROR__at_least_one_UART_pin_has_0800521c,iVar3);\n    }\n    else {\n      iVar4 = FUN_08004d06(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08005214;\n      iVar3 = DAT_08005210;\n      iVar2 = DAT_0800520c;\n      if (iVar4 == 0) {\n        FUN_080068f0(PTR_s_ERROR__U_S_ART_pins_mismatch_08005220);\n      }\n      else {\n        if (iVar4 == DAT_0800520c) {\n          *(uint *)(DAT_0800520c + 0xd80c) = *(uint *)(DAT_0800520c + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_08005210) {\n          *(uint *)(DAT_08005210 + 0x1cc10) = *(uint *)(DAT_08005210 + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08005214) {\n          *(uint *)(DAT_08005214 + 0x1c810) = *(uint *)(DAT_08005214 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = FUN_08004884((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = FUN_08004cce((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08005218 + 0x18) = *(uint *)(DAT_08005218 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        FUN_08002624(uVar5,&local_20);\n        uVar5 = FUN_08004884((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = FUN_08004cce((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        FUN_08002624(uVar5,&local_20);\n        *(int **)(PTR_DAT_08005228 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        FUN_0800441a(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800441a",
                "FUN_08004d06",
                "FUN_080068f0",
                "FUN_08002624",
                "FUN_08004cce",
                "FUN_08004c78",
                "FUN_08004884"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004f4c",
            "calling": [
                "FUN_08005a68",
                "FUN_08005384"
            ],
            "imported": true,
            "current_name": "FUNC_08004f4c"
        },
        "FUN_080055bc": {
            "renaming": {
                "uVar1": "index_found",
                "FUN_080055bc": "find_index_of_value_080055bc",
                "param_1": "value_to_find"
            },
            "code": "uint find_index_of_value_080055bc(int value_to_find)\n{\n  uint index_found;\n  if (value_to_find == 0) {\n    index_found = 5;\n  }\n  else {\n    index_found = 0;\n    while( true ) {\n      if (4 < index_found) {\n        return index_found;\n      }\n      if (value_to_find == *(int *)(PTR_DAT_080055dc + index_found * 4)) break;\n      index_found = index_found + 1 & 0xff;\n    }\n  }\n  return index_found;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055bc",
            "calling": [
                "FUN_080055e0",
                "FUN_08005604"
            ],
            "imported": true,
            "current_name": "find_index_of_value_080055bc"
        },
        "FUN_08001960": {
            "renaming": {
                "iVar1": "result",
                "puVar2": "ptr_1",
                "FUN_08001960": "set_params_08001960",
                "param_1": "val_1",
                "result_2": "result_1",
                "result_3": "result_2",
                "result_4": "result_3",
                "result_5": "result_4",
                "param_6": "val_6",
                "param_2": "val_2",
                "param_3": "val_3",
                "param_4": "val_4",
                "param_5": "val_5",
                "uVar3": "ptr_2_val_1",
                "uVar5": "ptr_3_val_1",
                "uVar4": "ptr_2_val_2",
                "uVar6": "ptr_3_val_2"
            },
            "code": "void set_params_08001960(int obj_address, undefined4 unused_param, undefined4 param_1, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\\n  int result = FUN_08000a04(param_1, param_2, param_3, param_4, param_2);\\n  if (result == 0) {\\n    *(undefined4 *)(obj_address + 0x60) = param_1;\\n    *(undefined4 *)(obj_address + 100) = param_2;\\n    *(undefined4 *)(obj_address + 0x68) = param_3;\\n    *(undefined4 *)(obj_address + 0x6c) = param_4;\\n    if (*(char *)(obj_address + 0x70) != \"\\0\") {\\n      undefined4 *ptr_1 = *(undefined4 **)(obj_address + 0x3c);\\n      undefined4 ptr_2_val_1 = *ptr_1;\\n      undefined4 ptr_2_val_2 = ptr_1[1];\\n      int result_2 = FUN_080009dc(param_3, param_4, ptr_2_val_1, ptr_2_val_2);\\n      if (result_2 == 0) {\\n        int result_3 = FUN_08000a18(param_1, param_2, ptr_2_val_1, ptr_2_val_2);\\n        if (result_3 != 0) {\\n          *ptr_1 = param_1;\\n          ptr_1[1] = param_2;\\n        }\\n      }\\n      else {\\n        *ptr_1 = param_3;\\n        ptr_1[1] = param_4;\\n      }\\n      undefined4 ptr_3_val_1 = *(undefined4 *)(obj_address + 0x48);\\n      undefined4 ptr_3_val_2 = *(undefined4 *)(obj_address + 0x4c);\\n      undefined4 ptr_4_val_1 = *(undefined4 *)(obj_address + 0x68);\\n      undefined4 ptr_4_val_2 = *(undefined4 *)(obj_address + 0x6c);\\n      int result_4 = FUN_08000a18(ptr_3_val_1, ptr_3_val_2, ptr_4_val_1, ptr_4_val_2);\\n      if (result_4 != 0) {\\n        *(undefined4 *)(obj_address + 0x48) = ptr_4_val_1;\\n        *(undefined4 *)(obj_address + 0x4c) = ptr_4_val_2;\\n        return;\\n      }\\n      undefined4 ptr_5_val_1 = *(undefined4 *)(obj_address + 0x60);\\n      undefined4 ptr_5_val_2 = *(undefined4 *)(obj_address + 100);\\n      int result_5 = FUN_080009dc(ptr_3_val_1, ptr_3_val_2, ptr_5_val_1, ptr_5_val_2);\\n      if (result_5 != 0) {\\n        *(undefined4 *)(obj_address + 0x48) = ptr_5_val_1;\\n        *(undefined4 *)(obj_address + 0x4c) = ptr_5_val_2;\\n      }\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08000a18",
                "FUN_08000a04",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001960",
            "calling": [
                "FUN_08000cd0",
                "FUN_08001ab0"
            ],
            "imported": true,
            "current_name": "set_params_08001960"
        },
        "FUN_08004ca2": {
            "renaming": {
                "FUN_08004c8a": "get_result",
                "uVar1": "result",
                "FUN_08004ca2": "check_parameter_08004ca2",
                "param_1": "param"
            },
            "code": "int check_parameter_08004ca2(int param) {\n  int result = 0xffffffff;\n  if (param != 0) {\n    result = get_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ca2",
            "calling": [
                "FUN_08005b54",
                "FUN_08005384"
            ],
            "imported": true,
            "current_name": "check_parameter_08004ca2"
        },
        "FUN_08002810": {
            "renaming": {
                "undefined4": "int",
                "param_1": "ptr1",
                "uint": "uint32_t",
                "FUN_08002810": "is_param2_bit_set_in_ptr1_plus_8_08002810",
                "param_2": "param2",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ is_param2_bit_set_in_ptr1_plus_8_08002810(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002810",
            "calling": [
                "FUN_08004c48"
            ],
            "imported": true,
            "current_name": "is_param2_bit_set_in_ptr1_plus_8_08002810"
        },
        "FUN_0800224c": {
            "renaming": {
                "iVar1": "result",
                "param_1": "settings",
                "FUN_080020f0": "check_value",
                "FUN_0800224c": "check_and_modify_settings_0800224c"
            },
            "code": "int check_and_modify_settings_0800224c(int *settings)\n{\n  int result;\n  if (settings == NULL) {\n    result = 1;\n  }\n  else {\n    settings[10] |= 2;\n    result = check_value();\n    if (result == 0) {\n      *(undefined4 *)*settings = 0xffffffe0;\n      *(uint *)(*settings + 4) &= 0x3fffff;\n      *(uint *)(*settings + 8) &= 0x3fffff;\n      *(uint *)(*settings + 0xc) &= 0xff000000;\n      *(uint *)(*settings + 0x10) &= 0xc0000000;\n      *(uint *)(*settings + 0x14) &= 0xfffff000;\n      *(uint *)(*settings + 0x18) &= 0xfffff000;\n      *(uint *)(*settings + 0x1c) &= 0xfffff000;\n      *(uint *)(*settings + 0x20) &= 0xfffff000;\n      *(uint *)(*settings + 0x24) &= 0xfffff000;\n      *(uint *)(*settings + 0x28) &= 0xfffff000;\n      *(uint *)(*settings + 0x2c) &= 0xff000000;\n      *(uint *)(*settings + 0x30) &= 0xc0000000;\n      *(uint *)(*settings + 0x34) &= 0xc0000000;\n      *(uint *)(*settings + 0x38) &= 0xffc00000;\n      clear_settings(settings);\n      settings[0xb] = 0;\n      settings[10] = 0;\n    }\n    *(undefined *)(settings + 9) = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800224c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "check_and_modify_settings_0800224c"
        },
        "FUN_080054b0": {
            "renaming": {
                "uVar1": "result",
                "param_1": "input",
                "PTR_DAT_080054d0": "data_ptr",
                "FUN_080054b0": "is_valid_080054b0"
            },
            "code": "bool is_valid_080054b0(int input)\n{\n  uint32_t index = *(uint8_t *)(PTR_DAT_080054d0 + (uint32_t)*(byte *)(input + 0x44) * 4);\n  uint32_t result = FUN_080047e8(index);\n  return (result & 0x21) == 0x21;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b0",
            "calling": [],
            "imported": true,
            "current_name": "is_valid_080054b0"
        },
        "FUN_08006f00": {
            "renaming": {
                "iVar4": "function_ptr",
                "param_1": "data",
                "piVar3": "data_ptr",
                "puVar6": "data_ptr_2",
                "PTR_PTR_DAT_08006f0c": "data_ptr_ptr",
                "unaff_r5": "register_r5",
                "unaff_r4": "register_r4",
                "PTR_DAT_08006f30": "data_ptr_3",
                "puVar1": "data_ptr_1",
                "uVar2": "result",
                "pcVar5": "function",
                "in_lr": "register_lr",
                "FUN_08006f00": "process_data_08006f00"
            },
            "code": "int process_data_08006f00(uint data)\n{\n  int *data_ptr = *(int **)PTR_PTR_DAT_08006f0c;\n  if (data > 31) {\n    *data_ptr = 22;\n    return -1;\n  }\n  int function_ptr = data_ptr[17];\n  if ((function_ptr != 0) && (*(code **)(function_ptr + data * 4) != (code *)0x0)) {\n    code *function = *(code **)(function_ptr + data * 4);\n    if (function != (code *)0x1) {\n      if (function == (code *)0xffffffff) {\n        *data_ptr = 22;\n        return 1;\n      }\n      *(int *)(function_ptr + data * 4) = 0;\n      (*function)(data);\n    }\n    return 0;\n  }\n  undefined *data_ptr_2 = PTR_PTR_DAT_08006f0c;\n  undefined4 result = thunk_FUN_08005750(data_ptr);\n  undefined *PTR_DAT_08006f30 = PTR_DAT_08006f30;\n  *(undefined4 *)PTR_DAT_08006f30 = 0;\n  int result_2 = FUN_08005740(result, data, data, 0, data_ptr_2, unaff_r4, unaff_r5, in_lr);\n  if ((result_2 == -1) && (*(int *)PTR_DAT_08006f30 != 0)) {\n    *data_ptr = *(int *)PTR_DAT_08006f30;\n  }\n  return result_2;\n}",
            "called": [
                "thunk_FUN_08005750",
                "FUN_08005740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f00",
            "calling": [
                "FUN_08006ac0"
            ],
            "imported": true,
            "current_name": "process_data_08006f00"
        },
        "FUN_080016b4": {
            "renaming": {
                "uVar10": "var9",
                "uVar12": "var10",
                "iVar2": "var1",
                "uVar13": "var11",
                "iVar3": "var2",
                "uVar14": "var12",
                "uVar15": "var13",
                "uVar16": "var14",
                "uVar17": "var15",
                "uVar18": "var16",
                "param_1": "input_param",
                "uStack_34": "var18",
                "local_38": "var17",
                "cVar1": "character",
                "uVar5": "var4",
                "uVar4": "var3",
                "uVar7": "var6",
                "uVar6": "var5",
                "cVar11": "character2",
                "FUN_080016b4": "check_character_080016b4",
                "uVar9": "var8",
                "uVar8": "var7"
            },
            "code": "char check_character_080016b4(int input_param)\n{\n  char character;\n  int var1;\n  int var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  undefined4 var7;\n  undefined4 var8;\n  undefined4 var9;\n  char character2;\n  undefined4 var10;\n  undefined4 var11;\n  undefined4 var12;\n  undefined8 var13;\n  undefined8 var14;\n  undefined8 var15;\n  undefined8 var16;\n  undefined4 var17;\n  undefined4 var18;\n  character = *(char *)(input_param + 0x70);\n  if (character != '\\0') {\n    var1 = function1();\n    if ((uint)(var1 - *(int *)(input_param + 0x44)) < *(uint *)(input_param + 0x58)) {\n      character = '\\0';\n    }\n    else {\n      var4 = **(undefined4 **)(input_param + 0x38);\n      var7 = (*(undefined4 **)(input_param + 0x38))[1];\n      var13 = function2(**(undefined4 **)(input_param + 0x40),(*(undefined4 **)(input_param + 0x40))[1]);\n      var12 = (undefined4)((ulonglong)var13 >> 0x20);\n      var14 = function2(var4,var7,*(undefined4 *)(input_param + 0x50),*(undefined4 *)(input_param + 0x54));\n      var3 = (undefined4)((ulonglong)var14 >> 0x20);\n      var15 = function3((int)var13,var12,*(undefined4 *)(input_param + 0x20),*(undefined4 *)(input_param + 0x24));\n      var15 = function2((int)var15,(int)((ulonglong)var15 >> 0x20),*(undefined4 *)(input_param + 0x48),*(undefined4 *)(input_param + 0x4c));\n      *(undefined8 *)(input_param + 0x48) = var15;\n      character2 = *(char *)(input_param + 0x71);\n      if (character2 == '\\0') {\n        var16 = function2((int)var15,(int)((ulonglong)var15 >> 0x20),*(undefined4 *)(input_param + 0x18),*(undefined4 *)(input_param + 0x1c));\n        var15 = function2((int)var15,(int)((ulonglong)var15 >> 0x20),(int)var16,(int)((ulonglong)var16 >> 0x20));\n        *(undefined8 *)(input_param + 0x48) = var15;\n      }\n      var5 = *(undefined4 *)(input_param + 0x48);\n      var8 = *(undefined4 *)(input_param + 0x4c);\n      var10 = *(undefined4 *)(undefined8 *)(input_param + 0x68);\n      var11 = *(undefined4 *)(input_param + 0x6c);\n      var15 = *(undefined8 *)(input_param + 0x68);\n      var2 = function4(var5,var8,var10,var11);\n      if (var2 == 0) {\n        var6 = *(undefined4 *)(input_param + 0x60);\n        var9 = *(undefined4 *)(input_param + 100);\n        var2 = function5(var5,var8);\n        if (var2 != 0) {\n          *(undefined4 *)(input_param + 0x48) = var6;\n          *(undefined4 *)(input_param + 0x4c) = var9;\n        }\n      }\n      else {\n        *(undefined4 *)(input_param + 0x48) = var10;\n        *(undefined4 *)(input_param + 0x4c) = var11;\n      }\n      if (character2 == '\\0') {\n        var13 = 0;\n      }\n      else {\n        var13 = function2((int)var13,var12,*(undefined4 *)(input_param + 0x18),*(undefined4 *)(input_param + 0x1c));\n      }\n      var18 = (undefined4)((ulonglong)var13 >> 0x20);\n      var17 = (undefined4)var13;\n      var12 = *(undefined4 *)(input_param + 0x48);\n      var5 = *(undefined4 *)(input_param + 0x4c);\n      var13 = function2((int)var14,var3,*(undefined4 *)(input_param + 0x28),*(undefined4 *)(input_param + 0x2c));\n      var13 = function2(var12,var5,(int)var13,(int)((ulonglong)var13 >> 0x20));\n      var13 = function2(var17,var18,(int)var13,(int)((ulonglong)var13 >> 0x20));\n      var12 = (undefined4)((ulonglong)var13 >> 0x20);\n      var2 = function5(var10,var11,(int)var13,var12);\n      if (var2 == 0) {\n        var15 = *(undefined8 *)(input_param + 0x60);\n        var2 = function5((int)var13,var12,*(undefined4 *)(undefined8 *)(input_param + 0x60),*(undefined4 *)(input_param + 100));\n        if (var2 == 0) {\n          var15 = var13;\n        }\n      }\n      **(undefined8 **)(input_param + 0x3c) = var15;\n      *(undefined4 *)(input_param + 0x50) = var4;\n      *(undefined4 *)(input_param + 0x54) = var7;\n      *(int *)(input_param + 0x44) = var1;\n    }\n  }\n  return character;\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080004f8",
                "FUN_080058e0",
                "FUN_080009dc",
                "FUN_08000194",
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016b4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "check_character_080016b4"
        },
        "FUN_0800074c": {
            "renaming": {
                "FUN_0800074c": "FUNC_0800074c"
            },
            "code": "\nulonglong FUNC_0800074c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = FUN_080008ba();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800086a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800086a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_080008ba"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800074c",
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "imported": true,
            "current_name": "FUNC_0800074c"
        },
        "FUN_080018f8": {
            "renaming": {
                "FUN_080018f8": "execute_main_function_080018f8",
                "FUN_08001814": "initialize_system"
            },
            "code": "void execute_main_function_080018f8(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_08001814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "execute_main_function_080018f8"
        },
        "FUN_08005890": {
            "renaming": {
                "FUN_08005890": "is_valid_character_08005890",
                "PTR_DAT_080058d8": "character_array",
                "iVar2": "hash",
                "param_1": "character_index",
                "cVar1": "is_valid",
                "uVar3": "shifted_value",
                "PTR_DAT_080058dc": "hash_table",
                "uVar4": "character_value"
            },
            "code": "bool is_valid_character_08005890(uint character_index) {\n  bool is_valid = false;\n  uint character_value;\n\n  if (character_index < 0x3c) {\n    character_value = (uint)(char)PTR_DAT_080058d8[character_index];\n  }\n  else {\n    character_value = 0xffffffff;\n  }\n\n  if (character_value != 0xffffffff) {\n    int hash = FUN_080047f4(character_value, PTR_DAT_080058dc);\n    if (hash != 0) {\n      uint shifted_value = (character_value << 0x18) >> 0x1c;\n      uint mask = 1 << (character_value & 0xf) & 0xffff;\n      uint result = FUN_08004c48(shifted_value, mask);\n      is_valid = (result != 0);\n    }\n  }\n\n  return is_valid;\n}",
            "called": [
                "FUN_080047f4",
                "FUN_08004c48",
                "FUN_08004848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005890",
            "calling": [
                "FUN_08000cd0",
                "FUN_080015b2"
            ],
            "imported": true,
            "current_name": "is_valid_character_08005890"
        },
        "FUN_08005da0": {
            "renaming": {
                "FUN_08005da0": "execute_main_function_08005da0",
                "FUN_08005d8a": "initialize_data_structures"
            },
            "code": "void execute_main_function_08005da0(void)\n{\n  initialize_data_structures();\n  return;\n}",
            "called": [
                "FUN_08005d8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da0",
            "calling": [],
            "imported": true,
            "current_name": "execute_main_function_08005da0"
        },
        "FUN_08004cb2": {
            "renaming": {
                "FUN_08004cb2": "find_param_in_string_08004cb2",
                "undefined4": "unsigned int",
                "param_1": "param_to_find",
                "*param_2": "*string_to_search",
                "param_2": "string_to_search"
            },
            "code": "unsigned int find_param_in_string_08004cb2(int param_to_find, char *string_to_search)\n{\n  while( true ) {\n    if (*string_to_search == -1) {\n      return 0xffffffff;\n    }\n    if (*string_to_search == param_to_find) break;\n    string_to_search = string_to_search + 0xc;\n  }\n  return *(unsigned int *)(string_to_search + 8);\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb2",
            "calling": [
                "FUN_08004cce",
                "FUN_08004cb2"
            ],
            "imported": true,
            "current_name": "find_param_in_string_08004cb2"
        },
        "FUN_08004ef4": {
            "renaming": {
                "*(char *)(iVar1 + 0x5d)": "*(char *)(function_result + 0x5d)",
                "iVar1": "function_result",
                "FUN_08004ef4": "check_and_call_function_if_not_called_before_08004ef4",
                "param_1": "param",
                "FUN_08004e70": "get_function_result",
                "FUN_08002c10": "call_function"
            },
            "code": "void check_and_call_function_if_not_called_before_08004ef4(undefined4 param_1)\\n{\\n  int function_result = get_function_result();\\n  if (*(char *)(function_result + 0x5d) == \"\\0\") {\\n    call_function(param_1);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": true,
            "current_name": "check_and_call_function_if_not_called_before_08004ef4"
        },
        "FUN_08001294": {
            "renaming": {
                "FUN_08001294": "set_params_at_offset_08001294",
                "param_1": "object_offset",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5"
            },
            "code": "void set_params_at_offset_08001294(int object_offset, undefined param_2, undefined param_3, undefined param_4, undefined param_5)\n{\n  *(undefined *)(object_offset + 0x18) = param_2;\n  *(undefined *)(object_offset + 0x19) = param_3;\n  *(undefined *)(object_offset + 0x1a) = param_4;\n  *(undefined *)(object_offset + 0x1b) = param_5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001294",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": true,
            "current_name": "set_params_at_offset_08001294"
        },
        "FUN_08002384": {
            "renaming": {
                "iVar1": "status",
                "iVar3": "current_time",
                "iVar4": "start_time",
                "FUN_08002384": "process_data_08002384",
                "param_1": "data",
                "uVar2": "divisor",
                "uVar5": "first_time",
                "local_14": "second_time"
            },
            "code": "int process_data_08002384(int *data)\n{\n  int status = 0;\n  uint divisor = 0;\n  int current_time = 0;\n  int start_time = FUN_080020f0();\n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  if (start_time == 0) {\n    data[10] &= 0xffffeefdU;\n    data[10] |= 2;\n    divisor = *(uint *)PTR_DAT_0800246c;\n    divisor = FUN_08003da4(2);\n    current_time = divisor / divisor << 1;\n    while (current_time != 0) {\n      current_time--;\n    }\n    FUN_08001f84(data);\n    *(uint *)(*data + 8) |= 8;\n    int first_time = FUN_08001cc4();\n    while ((*(uint *)(*data + 8) & 8) != 0) {\n      int second_time = FUN_08001cc4();\n      if (10 < (uint)(second_time - first_time)) {\n        data[10] &= 0xffffffedU;\n        data[10] |= 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(second_time + 8) |= 4;\n    int third_time = FUN_08001cc4();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      int fourth_time = FUN_08001cc4();\n      if (10 < (uint)(fourth_time - third_time)) {\n        data[10] &= 0xffffffedU;\n        data[10] |= 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] &= 0xfffffffcU;\n    data[10] |= 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return start_time;\n}",
            "called": [
                "FUN_08001cc4",
                "FUN_08001f84",
                "FUN_080020f0",
                "FUN_08003da4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002384",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "process_data_08002384"
        },
        "FUN_08005650": {
            "renaming": {
                "FUN_08005650": "do_nothing_08005650"
            },
            "code": "\nvoid do_nothing_08005650(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005650",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": true,
            "current_name": "do_nothing_08005650"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "increment_and_store_value_08002ad8",
                "param_1": "ptr_param1",
                "PTR_": "",
                "puVar1": "ptr_char",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ increment_and_store_value_08002ad8(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_9DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_9DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_-DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "increment_and_store_value_08002ad8"
        },
        "FUN_08004204": {
            "renaming": {
                "value2": "param2_value",
                "value1": "param1_value",
                "var9": "temp_var9",
                "var8": "temp_var8",
                "value3": "param3_value",
                "var7": "temp_var7",
                "ptr_value": "ptr_value",
                "FUN_08004204": "calculate_values_08004204",
                "calculated_value": "calculated_value",
                "var10": "temp_var10",
                "param_1": "param_array",
                "DAT_080043ac": "PTR_DAT_080043ac",
                "var6": "temp_var6",
                "var5": "temp_var5",
                "var4": "temp_var4",
                "var3": "temp_var3",
                "var2": "temp_var2",
                "var1": "temp_var1"
            },
            "code": "void calculate_values_08004204(int *param_array)\n{\n  uint32_t value1 = *(uint32_t *)(*param_array + 0x10);\n  value1 = value1 & 0xffffcfff | param_array[3];\n  uint32_t value2 = *(uint32_t *)(*param_array + 0xc);\n  value2 = value2 | param_array[2] | param_array[4] | param_array[5];\n  value2 = value2 & 0xffffe9f3;\n  uint32_t value3 = *(uint32_t *)(*param_array + 0x14);\n  value3 = value3 & 0xfffffcff | param_array[6];\n  int ptr_value = *param_array;\n  if (ptr_value != DAT_080043ac) {\n    int var1 = FUN_08003c50();\n    uint32_t var2 = DAT_080043b0;\n    int var3 = param_array[1];\n    int var4 = FUN_08003c50();\n    int var5 = param_array[1];\n    int var6 = FUN_08003c50();\n    int var7 = param_array[1];\n    int var8 = FUN_08003c50();\n    int var9 = param_array[1];\n    int var10 = FUN_08003c50();\n    uint32_t calculated_value = ((uint32_t)((uint64_t)var2 * (uint64_t)(((uint64_t)var8 << 34) / ((uint64_t)var5 << 2) + ((uint64_t)var2 * (((uint64_t)var10 << 34) / ((uint64_t)var7 << 2)) >> 41) * -100 + 0x32000000) >> 32) << 23) >> 28;\n    calculated_value += (uint32_t)((uint64_t)var2 * (uint64_t)(((uint64_t)var4 << 34) / ((uint64_t)var3 << 2) + ((uint64_t)var2 * (((uint64_t)var6 << 34) / ((uint64_t)var9 << 2)) >> 41) * -100 + 0x32000000) >> 37) & 0xF0;\n    calculated_value += (uint32_t)((uint64_t)DAT_080043b0 * (uint64_t)(((uint64_t)var1 << 34) / ((uint64_t)param_array[1] << 2)) >> 41) * 0x10;\n    *(uint32_t *)(ptr_value + 8) = calculated_value;\n    return;\n  }\n  int var1 = FUN_08003c70();\n  uint32_t var2 = DAT_080043b0;\n  int var3 = param_array[1];\n  int var4 = FUN_08003c70();\n  int var5 = param_array[1];\n  int var6 = FUN_08003c70();\n  int var7 = param_array[1];\n  int var8 = FUN_08003c70();\n  int var9 = param_array[1];\n  int var10 = FUN_08003c70();\n  uint32_t calculated_value = ((uint32_t)((uint64_t)var2 * (uint64_t)(((uint64_t)var8 << 34) / ((uint64_t)var5 << 2) + ((uint64_t)var2 * (((uint64_t)var10 << 34) / ((uint64_t)var7 << 2)) >> 41) * -100 + 0x32000000) >> 32) << 23) >> 28;\n  calculated_value += (uint32_t)((uint64_t)var2 * (uint64_t)(((uint64_t)var4 << 34) / ((uint64_t)var3 << 2) + ((uint64_t)var2 * (((uint64_t)var6 << 34) / ((uint64_t)var9 << 2)) >> 41) * -100 + 0x32000000) >> 37) & 0xF0;\n  calculated_value += (uint32_t)((uint64_t)DAT_080043b0 * (uint64_t)(((uint64_t)var1 << 34) / ((uint64_t)param_array[1] << 2)) >> 41) * 0x10;\n  *(uint32_t *)(ptr_value + 8) = calculated_value;\n  return;\n}",
            "called": [
                "FUN_08003c70",
                "FUN_08003c50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": true,
            "current_name": "calculate_values_08004204"
        },
        "FUN_08005da8": {
            "renaming": {
                "FUN_08000a18": "check_data_2",
                "PTR_DAT_08005f28": "constant_7",
                "iVar1": "result",
                "iVar3": "temp_2",
                "PTR_DAT_08005f20": "constant_1",
                "FUN_08000a2c": "check_data",
                "param_1": "data_1",
                "FUNC_0800074c": "do_something",
                "PTR_DAT_08005f24": "constant_8",
                "FUN_08005cb6": "process_data_5",
                "FUN_08000aa8": "get_constant",
                "DAT_08005f08": "constant_2",
                "FUN_08005c96": "process_data_3",
                "uVar2": "temp_1",
                "uVar7": "temp_6",
                "FUN_0800042c": "get_constant_3",
                "uVar6": "temp_5",
                "FUN_0800040c": "get_constant_2",
                "lVar5": "temp_4",
                "constant_8": "constant_8",
                "constant_7": "constant_7",
                "bVar4": "temp_3",
                "constant_9": "constant_9",
                "constant_4": "constant_4",
                "constant_3": "constant_3",
                "constant_6": "constant_6",
                "constant_5": "constant_5",
                "FUN_08005da8": "process_data_08005da8",
                "constant_2": "constant_2",
                "FUNC_08000194": "process_data_6",
                "constant_1": "constant_1",
                "DAT_08005f0c": "constant_3",
                "FUN_080009dc": "process_data_4",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "param_5": "data_5",
                "FUN_080009f0": "process_data_2",
                "DAT_08005f10": "constant_4",
                "PTR_DAT_08005f1c": "constant_9",
                "FUN_080004f8": "do_something_else",
                "DAT_08005f14": "constant_5"
            },
            "code": "int process_data_08005da8(int data_1, int data_2, int data_3, uint data_4, byte data_5) {\n  int result;\n  int temp_1;\n  byte temp_2;\n  long long temp_3;\n  undefined8 temp_4;\n  undefined8 temp_5;\n  result = check_data(data_3, data_4, data_3, data_4);\n  if (result == 0) {\n    temp_1 = check_data(data_3, data_4 & 0x7fffffff, 0xffffffff, PTR_DAT_08005f20);\n    if ((temp_1 == 0) &&\n       (temp_1 = check_data(data_3, data_4 & 0x7fffffff, 0xffffffff, PTR_DAT_08005f20), temp_1 == 0)) {\n      result = process_data_08005da8_2(data_1, DAT_08005f08);\n    }\n    else {\n      temp_1 = check_data(data_3, data_4, 0xe0000000, DAT_08005f0c);\n      if (temp_1 == 0) {\n        temp_1 = check_data(data_3, data_4, 0xe0000000, DAT_08005f10);\n        if (temp_1 == 0) {\n          temp_1 = check_data(data_3, data_4, 0, 0);\n          if (temp_1 == 0) {\n            result = 0;\n          }\n          else {\n            result = process_data_08005da8_2(data_1, 0x2d);\n            data_4 += 0x80000000;\n          }\n          temp_3 = (long long)DAT_08005f14 << 0x20;\n          for (temp_2 = 0; temp_2 < data_5; temp_2++) {\n            temp_3 = do_something(temp_3, (undefined4)((long long)temp_3 >> 0x20), 0, constant_6);\n          }\n          temp_4 = process_data_08005da8_3(data_3, data_4, (int)temp_3, (undefined4)((long long)temp_3 >> 0x20));\n          temp_5 = get_constant();\n          temp_4 = process_data_08005da8_4((int)temp_4, (int)((long long)temp_4 >> 0x20), (int)temp_5,\n                               (int)((long long)temp_5 >> 0x20));\n          result += process_data_08005da8_5(data_1, temp_4, 10);\n          if (data_5 != 0) {\n            result += process_data_08005da8_2(data_1, PTR_DAT_08005f28);\n          }\n          while (data_5 != 0) {\n            temp_4 = do_something_else((int)temp_4, (int)((long long)temp_4 >> 0x20), 0, constant_6);\n            temp_1 = get_DAT_08005f08();\n            result += process_data_08005da8_6(data_1, temp_1, 10);\n            temp_5 = get_DAT_08005f0c(temp_1);\n            temp_4 = process_data_08005da8_4((int)temp_4, (int)((long long)temp_4 >> 0x20), (int)temp_5,\n                                 (int)((long long)temp_5 >> 0x20));\n            data_5--;\n          }\n        }\n        else {\n          result = process_data_08005da8_2(data_1, PTR_DAT_08005f24);\n        }\n      }\n      else {\n        result = process_data_08005da8_2(data_1, PTR_DAT_08005f24);\n      }\n    }\n  }\n  else {\n    result = process_data_08005da8_2(data_1, PTR_DAT_08005f1c);\n  }\n  return result;\n}\n",
            "called": [
                "FUN_08005d8a",
                "FUN_0800040c",
                "FUN_08005c96",
                "FUN_08000a18",
                "FUN_080004f8",
                "FUN_080009f0",
                "FUN_080009dc",
                "FUN_08000a2c",
                "FUN_08005d82",
                "FUN_08000aa8",
                "FUN_0800042c",
                "FUN_08000a58",
                "FUN_0800074c",
                "FUN_08000194",
                "FUN_08005cb6",
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da8",
            "calling": [
                "FUN_08005f2c"
            ],
            "imported": true,
            "current_name": "process_data_08005da8"
        },
        "FUN_080045fe": {
            "renaming": {
                "param_ptr": "unsigned_int_ptr",
                "param_39": "unsigned_char_ptr",
                "FUN_080045fe": "clear_bit_and_set_space_in_param_080045fe",
                "param_1": "param_array",
                "uint": "unsigned int",
                "undefined": "unsigned_char",
                "*param_1": "*param_array"
            },
            "code": "undefined4 clear_bit_and_set_space_in_param_080045fe(int *param_array)\n{\n  uint *param_ptr = (uint *)(*param_array + 0xc);\n  *param_ptr = *param_ptr & 0xffffffbf;\n  undefined *param_39 = (undefined *)((int)param_array + 0x39);\n  *param_39 = 0x20;\n  FUN_08005604();\n  return 0;\n}",
            "called": [
                "FUN_08005604"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045fe",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": true,
            "current_name": "clear_bit_and_set_space_in_param_080045fe"
        },
        "FUN_08005f2c": {
            "renaming": {
                "FUN_08005da8": "call_helper_function",
                "FUN_08005f2c": "call_function_and_return_08005f2c"
            },
            "code": "void call_function_and_return_08005f2c(void)\n{\n  call_helper_function();\n  return;\n}",
            "called": [
                "FUN_08005da8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f2c",
            "calling": [
                "FUN_08000cd0",
                "FUN_08005f40"
            ],
            "imported": true,
            "current_name": "call_function_and_return_08005f2c"
        },
        "FUN_080055e0": {
            "renaming": {
                "uVar1": "value",
                "PTR_DAT_080055fc": "FUNCTION_PTR_ARRAY",
                "FUN_080055e0": "execute_function_based_on_value_080055e0",
                "PTR_DAT_08005600": "FUNCTION_ARG_ARRAY"
            },
            "code": "void execute_function_based_on_value_080055e0(void)\n{\n  uint8_t value = get_value();\n  if (value < 5) {\n    void (*function_pointer)(void) = *(void (**)(void))(PTR_DAT_080055fc + value * 4);\n    uint32_t function_argument = *(uint32_t *)(PTR_DAT_08005600 + value * 4);\n    function_pointer(function_argument);\n  }\n  return;\n}",
            "called": [
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "FUN_08004618"
            ],
            "imported": true,
            "current_name": "execute_function_based_on_value_080055e0"
        },
        "FUN_08005f40": {
            "renaming": {
                "iVar1": "first_value",
                "iVar2": "second_value",
                "FUN_08005cc0": "get_second_value",
                "param_1": "value",
                "FUN_08005f2c": "get_first_value",
                "FUN_08005f40": "calculate_sum_of_two_values_08005f40"
            },
            "code": "int calculate_sum_of_two_values_08005f40(undefined4 value){\n  int first_value = get_first_value();\n  int second_value = get_second_value(value);\n  return first_value + second_value;\n}",
            "called": [
                "FUN_08005f2c",
                "FUN_08005cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f40",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "calculate_sum_of_two_values_08005f40"
        },
        "FUN_0800213c": {
            "renaming": {
                "iVar1": "ret",
                "DAT_08002244": "DATA_08002244",
                "param_1": "params",
                "DAT_08002248": "DATA_08002248",
                "FUN_0800213c": "check_param_integrity_0800213c",
                "uVar3": "value",
                "uVar2": "flags"
            },
            "code": "int check_param_integrity_0800213c(int *params)\n{\n  int result = 0;\n  int flag = params[10];\n  if (params == NULL) {\n    result = 1;\n  }\n  else if (params[10] == 0) {\n    params[11] = 0;\n    *(undefined *)(params + 9) = 0;\n    do_something();\n  }\n  else {\n    int ret = check_param(params);\n    if ((flag & 0x10) == 0 && ret == 0) {\n      params[10] = (flag & 0xffffeefd) | 2;\n      uint uVar2 = params[1] | params[7] | params[3] << 1;\n      uint uVar3 = 0;\n      if (params[2] == 0x100 || params[2] == 1) {\n        uVar3 = 0x100;\n      }\n      if (params[5] == 1) {\n        if (params[3] == 0) {\n          uVar3 |= (params[6] - 1) * 0x2000 | 0x800;\n        }\n        else {\n          params[10] |= 0x20;\n          params[11] |= 1;\n        }\n      }\n      *(uint *)(*params + 4) = uVar3 | *(uint *)(*params + 4) & 0xffff16ff;\n      *(uint *)(*params + 8) = DAT_08002244 & *(uint *)(*params + 8) | uVar2;\n      if (params[2] == 0x100 || params[2] == 1) {\n        uVar3 = (params[4] - 1) * 0x100000;\n      }\n      *(uint *)(*params + 0x2c) = uVar3 | *(uint *)(*params + 0x2c) & 0xff0fffff;\n      if (uVar2 != (DAT_08002248 & *(uint *)(*params + 8))) {\n        params[10] = (flag & 0xffffffed) | 0x10;\n        params[11] |= 1;\n        result = 1;\n      }\n      else {\n        params[11] = 0;\n        params[10] = (flag & 0xfffffffc) | 1;\n      }\n    }\n    else {\n      params[10] |= 0x10;\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08004974",
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800213c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "check_param_integrity_0800213c"
        },
        "FUN_0800455a": {
            "renaming": {
                "*(short *)(param_1 + 9)": "param_array[9]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*param_array + 0xc)",
                "param_1[8]": "param_array[8]",
                "param_1": "param_array",
                "*(undefined *)((int)param_1 + 0x39)": "param_array[9]",
                "param_1[0xf]": "param_array[15]",
                "param_2": "param1",
                "param_3": "param2",
                "FUN_0800455a": "set_param_0800455a",
                "*(char *)((int)param_1 + 0x39)": "param_array[9]",
                "*(char *)(param_1 + 0xe)": "param_array[14]",
                "*(undefined *)(param_1 + 0xe)": "param_array[14]",
                "*(short *)((int)param_1 + 0x26)": "param_array[10]"
            },
            "code": "int set_param_0800455a(int *param_array, int param1, int param2)\n{\n    if (param_array[9] != ' ')\n    {\n        return 2;\n    }\n    if (param1 == 0 || param2 == 0)\n    {\n        return 1;\n    }\n    if (param_array[14] != 1)\n    {\n        param_array[8] = param1;\n        param_array[9] = (short)param2;\n        param_array[10] = (short)param2;\n        param_array[15] = 0;\n        param_array[9] = '!';\n        param_array[14] = 0;\n        *(uint *)(*param_array + 0xc) = *(uint *)(*param_array + 0xc) | 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800455a",
            "calling": [
                "FUN_08005568",
                "FUN_08005604"
            ],
            "imported": true,
            "current_name": "set_param_0800455a"
        },
        "FUN_08001a66": {
            "renaming": {
                "uVar1": "result",
                "param_1": "data_ptr",
                "has_data": "has_data",
                "param_2": "new_data",
                "param_3": "param_3",
                "param_4": "param_4",
                "current_data": "current_data",
                "FUN_08001a66": "update_data_08001a66"
            },
            "code": "void update_data_08001a66(int data_ptr, int new_data, undefined4 param_3, undefined4 param_4)\n{\n  undefined8 result;\n  char has_data = *(char *)(data_ptr + 0x70);\n  int current_data = *(int *)(data_ptr + 0x30);\n  if (has_data && current_data != new_data) {\n    result = FUNC_08000190(0, 0, *(undefined4 *)(data_ptr + 0x18), *(undefined4 *)(data_ptr + 0x1c), param_4);\n    *(undefined8 *)(data_ptr + 0x18) = result;\n    result = FUNC_08000190(0, 0, *(undefined4 *)(data_ptr + 0x20), *(undefined4 *)(data_ptr + 0x24));\n    *(undefined8 *)(data_ptr + 0x20) = result;\n    result = FUNC_08000190(0, 0, *(undefined4 *)(data_ptr + 0x28), *(undefined4 *)(data_ptr + 0x2c));\n    *(undefined8 *)(data_ptr + 0x28) = result;\n  }\n  *(int *)(data_ptr + 0x30) = new_data;\n  return;\n}",
            "called": [
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a66",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": true,
            "current_name": "update_data_08001a66"
        },
        "FUN_08003c44": {
            "renaming": {
                "PTR_DAT_08003c4c": "data_pointer",
                "FUN_08003c44": "get_data_from_pointer_08003c44"
            },
            "code": "get_data_from_pointer_08003c44() {\n  return *(undefined4 *)PTR_DAT_08003c4c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c44",
            "calling": [
                "FUN_08003c70",
                "FUN_08003c50",
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "get_data_from_pointer_08003c44"
        },
        "FUN_080028d2": {
            "renaming": {
                "undefined4": "void",
                "param_1": "param_array",
                "param_1[0x11]": "param_array[0x11]",
                "*param_1": "*param_array",
                "*(uint *)(*param_1 + 0x10)": "*param_ptr",
                "FUN_080028d2": "set_param_value_from_array_080028d2",
                "0xff": "0xff"
            },
            "code": "void set_param_value_from_array_080028d2(int *param_array)\n{\n    uint8_t value = param_array[0x11] & 0xff;\n    uint32_t* param_ptr = (uint32_t*)(param_array + 0x10);\n    *param_ptr = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "set_param_value_from_array_080028d2"
        },
        "FUN_08000a18": {
            "renaming": {
                "FUN_08000a18": "is_end_of_string_08000a18",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08000a18(void)\n{\n  char current_char;\n  execute_function_080009a8();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a18",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001960",
                "FUN_080019f6",
                "FUN_080016b4"
            ],
            "imported": true,
            "current_name": "is_end_of_string_08000a18"
        },
        "FUN_08005384": {
            "renaming": {
                "FUN_08005384": "update_data_08005384",
                "iVar4": "index",
                "puVar2": "data_array",
                "cVar1": "current_char",
                "uVar3": "updated_char",
                "uVar5": "value"
            },
            "code": "void update_data_08005384(void)\n{\n  char current_char = data_array[1];\n  int index = find_index(current_char, lookup_array);\n  if (index != 0) {\n    int value = find_value(current_char, lookup_array);\n    char updated_char = transform(value, transformation_array);\n    data_array[0x59] = updated_char;\n    data_array[0x58] = current_char;\n    data_array[0x48] = 0x2580;\n    data_array[0x54] = 0;\n    data_array[0x4c] = 0;\n    data_array[0x50] = 0;\n    execute_function(data_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08004c78",
                "FUN_08004f4c",
                "FUN_08004ca2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005384",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": true,
            "current_name": "update_data_08005384"
        },
        "FUN_08005b3c": {
            "renaming": {
                "FUN_08005b3c": "set_value_at_index_08005b3c",
                "uVar1": "value_to_set",
                "param_1": "index",
                "param_2": "value"
            },
            "code": "void set_value_at_index_08005b3c(int index, uint value)\n{\n  undefined value_to_set;\n  if (value < 0x3c) {\n    value_to_set = PTR_DAT_08005b50[value];\n  }\n  else {\n    value_to_set = 0xff;\n  }\n  *(undefined *)(index + 300) = value_to_set;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": true,
            "current_name": "set_value_at_index_08005b3c"
        },
        "FUN_080046b8": {
            "renaming": {
                "FUN_080046b8": "process_input_080046b8",
                "iVar1": "result",
                "FUN_08004198": "process_case2",
                "puVar3": "data_ptr",
                "param_1": "input_data",
                "FUN_080045fe": "process_case3",
                "FUN_08004618": "process_case1",
                "FUN_0800417c": "process_case4",
                "uVar2": "data2",
                "uVar5": "data1",
                "uVar4": "check_result",
                "do_nothing_08005650": "do_nothing"
            },
            "code": "void process_input_080046b8(uint **input_data)\n{\n  int condition1, condition2, condition3, condition4, condition5;\n  uint *data_ptr = *input_data;\n  uint data1 = *data_ptr;\n  uint data2 = data_ptr[3];\n  \n  condition1 = (data1 & 0xf) == 0;\n  condition2 = (data1 & 0x20) != 0;\n  condition3 = (data2 & 0x20) != 0;\n  if (condition1 && condition2 && condition3) {\n    process_case1(input_data);\n    return;\n  }\n  \n  condition4 = (data1 & 0xf) == 0;\n  condition5 = (data_ptr[5] & 1) == 0 && ((data2 & 0x120) == 0);\n  if (condition4 || condition5) {\n    if ((data1 & 0x80) != 0 && (data2 & 0x80) != 0) {\n      process_case2(input_data);\n      return;\n    }\n    if ((data1 & 0x40) != 0 && (data2 & 0x40) != 0) {\n      process_case3(input_data);\n    }\n  }\n  else {\n    if ((data1 & 1) != 0 && (data2 & 0x100) != 0) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 1);\n    }\n    if ((data1 & 4) != 0 && (data_ptr[5] & 1) != 0) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 2);\n    }\n    if ((data1 & 2) != 0 && (data_ptr[5] & 1) != 0) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 4);\n    }\n    if ((data1 & 8) != 0 && (data_ptr[5] & 1) != 0) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 8);\n    }\n    if (input_data[0xf] != (uint *)0x0) {\n      if ((data1 & 0x20) != 0 && (data2 & 0x20) != 0) {\n        process_case1(input_data);\n      }\n      if (((uint)input_data[0xf] & 8) == 0 && ((**input_data)[5] & 0x40) == 0) {\n        do_nothing(input_data);\n        input_data[0xf] = (uint *)0x0;\n        return;\n      }\n      process_case4(input_data);\n      data_ptr = *input_data;\n      if ((data_ptr[5] & 0x40) == 0) {\n        do_nothing(input_data);\n        return;\n      }\n      data_ptr[5] = data_ptr[5] & 0xffffffbf;\n      if (input_data[0xd] == (uint *)0x0) {\n        do_nothing(input_data);\n        return;\n      }\n      input_data[0xd][0xd] = (uint)PTR_LAB_080047d8_1_080047d4;\n      int result = process_data(input_data[0xd]);\n      if (result != 0) {\n        (*(code *)input_data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004198",
                "FUN_0800417c",
                "FUN_08005650",
                "FUN_080045fe",
                "FUN_08004618",
                "FUN_0800258c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b8",
            "calling": [],
            "imported": true,
            "current_name": "process_input_080046b8"
        },
        "FUN_08004c8a": {
            "renaming": {
                "FUN_08004c8a": "find_parameter_value_by_id_08004c8a",
                "*(int *)(param_2 + 4)": "*(int*)(parameter_list + 4)",
                "param_1": "id",
                "*param_2": "*(parameter_list)",
                "param_2": "parameter_list"
            },
            "code": "int find_parameter_value_by_id_08004c8a(int id, char* parameter_list)\n{\n    while(true)\n    {\n        if (*(int*)(parameter_list + 4) == 0)\n        {\n            return -1;\n        }\n        if (*(int*)(parameter_list + 4) == id)\n        {\n            break;\n        }\n        parameter_list = parameter_list + 0xc;\n    }\n    return (int)*parameter_list;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8a",
            "calling": [
                "FUN_08004c8a",
                "FUN_08004ca2"
            ],
            "imported": true,
            "current_name": "find_parameter_value_by_id_08004c8a"
        },
        "FUN_08001cd0": {
            "renaming": {
                "iVar1": "start_time",
                "FUN_08001cd0": "process_data_08001cd0",
                "iVar3": "elapsed_time",
                "param_1": "data",
                "puVar5": "current_data",
                "local_1c": "i",
                "DAT_08001e3c": "some_constant",
                "DAT_08001e38": "some_constant",
                "PTR_DAT_08001e2c": "some_pointer",
                "param_2": "length",
                "DAT_08001e30": "some_constant",
                "uVar2": "current_data",
                "uVar4": "return_value",
                "DAT_08001e34": "some_constant",
                "uVar6": "some_constant"
            },
            "code": "uint32_t process_data_08001cd0(uint32_t **data, uint32_t length) {\n  int start_time = get_start_time();\n  uint32_t *current_data = *data;\n  uint32_t flag = current_data[2];\n  if ((flag & 0x100) == 0) {\n    uint32_t flag1 = current_data[1];\n    uint32_t flag2 = current_data[0xb];\n    if ((flag1 & 0x100) == 0 && (flag2 & 0xf00000) == 0) {\n      while ((*data)[0][0] & 2) {\n        if (length != 0xffffffff && (length == 0 || get_start_time() - start_time > length)) {\n          (*data)[10] |= 4;\n          (*data)[9] = 0;\n          return 3;\n        }\n      }\n      (*data)[10] |= 4;\n      (*data)[9] = 0;\n      return 3;\n    } else {\n      uint32_t var1 = *(uint32_t *)PTR_DAT_08001e2c;\n      uint32_t var2 = FUN_08003da4(2);\n      uint32_t flag3 = current_data[4];\n      uint32_t flag4 = current_data[3];\n      uint32_t var3;\n      if ((flag3 & DAT_08001e30) == 0 && (flag4 & (DAT_08001e30 + 0xdc000000)) == 0) {\n        if ((flag3 & DAT_08001e34) == 0) {\n          if ((flag4 & DAT_08001e38) == 0) {\n            var3 = 0x14;\n          } else {\n            var3 = 0x29;\n          }\n        } else {\n          var3 = 0x29;\n        }\n      } else if ((flag3 & DAT_08001e34) == 0 && (flag4 & (DAT_08001e34 + 0xee000000)) == 0) {\n        var3 = 0x54;\n      } else if ((DAT_08001e3c & flag3) == 0) {\n        if ((DAT_08001e3c & flag4) == 0) {\n          var3 = 0x54;\n        } else {\n          var3 = 0xfc;\n        }\n      } else {\n        var3 = 0xfc;\n      }\n      uint32_t limit = (var1 / var2) * var3;\n      for (uint32_t i = 0; i <= limit; i++) {\n        if (length != 0xffffffff && (length == 0 || get_start_time() - start_time > length)) {\n          (*data)[10] |= 4;\n          (*data)[9] = 0;\n          return 3;\n        }\n      }\n      (*data)[0][0] = 0xffffffed;\n      (*data)[10] |= 0x200;\n      uint32_t flag5 = (*data)[2];\n      if ((flag5 & 0xe0000) == 0xe0000) {\n        if ((*data)[3] == NULL) {\n          (*data)[10] &= 0xfffffeff;\n          if (((*data)[10] & 0x1000) == 0) {\n            (*data)[10] |= 1;\n            return 0;\n          }\n          return 0;\n        }\n        return 0;\n      }\n      return 0;\n    }\n  } else {\n    (*data)[10] |= 0x20;\n    (*data)[9] = 0;\n    return 1;\n  }\n}",
            "called": [
                "FUN_08001cc4",
                "FUN_08003da4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cd0",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "process_data_08001cd0"
        },
        "FUN_08004178": {
            "renaming": {
                "FUN_08004178": "do_nothing_08004178"
            },
            "code": "\nvoid do_nothing_08004178(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004178",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": true,
            "current_name": "do_nothing_08004178"
        },
        "FUN_08004a4c": {
            "renaming": {
                "FUN_08001e48": "strtol",
                "FUN_08001cd0": "unused",
                "FUN_08004a4c": "extract_value_from_data_08004a4c",
                "param_1": "data",
                "FUN_080061e0": "memset",
                "local_2c": "unused",
                "local_28": "unused",
                "PTR_DAT_08004b30": "unused",
                "FUN_0800224c": "unused",
                "local_20": "unused",
                "local_40": "is_second_value_present",
                "local_46": "status",
                "local_24": "unused",
                "FUN_0800492c": "unused",
                "local_44": "num_bytes",
                "FUN_08002384": "unused",
                "FUN_08002004": "unused",
                "local_1c": "unused",
                "local_3c": "is_second_value_valid",
                "FUN_08002348": "unused",
                "local_38": "buffer",
                "FUN_0800213c": "extract_data",
                "FUN_08001f80": "unused",
                "local_10": "unused",
                "PTR_DAT_08004b2c": "unused",
                "local_30": "unused",
                "FUN_08001e40": "unused",
                "FUN_08004c78": "unused",
                "local_34": "unused"
            },
            "code": "int extract_value_from_data_08004a4c(uint8_t data)\n{\n  int status = 0;\n  uint8_t buffer[48];\n  memset(buffer, 0, sizeof(buffer));\n  int num_bytes = extract_data(data, buffer);\n  if (num_bytes < 0x12) {\n    uint8_t* end_ptr;\n    long value = strtol(buffer, &end_ptr, 10);\n    if (value > 0 && value <= 0xFFFFF && *end_ptr == '\\n') {\n      status = 1;\n      if (value & 0x200) {\n        status = extract_data(data, buffer);\n        if (status > 0) {\n          long sub_value = strtol(buffer, &end_ptr, 10);\n          if (sub_value >= 0 && sub_value <= 0xFFFFF && *end_ptr == '\\n') {\n            status = sub_value;\n          }\n          else {\n            status = 0;\n          }\n        }\n      }\n      else {\n        status = value;\n      }\n    }\n  }\n  return status;\n}",
            "called": [
                "FUN_08002004",
                "FUN_0800492c",
                "FUN_08001cd0",
                "FUN_08002384",
                "FUN_08002348",
                "FUN_08001f80",
                "FUN_080061e0",
                "FUN_08004c78",
                "FUN_08001e48",
                "FUN_0800224c",
                "FUN_08001e40",
                "FUN_0800213c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a4c",
            "calling": [
                "FUN_08005754"
            ],
            "imported": true,
            "current_name": "extract_value_from_data_08004a4c"
        },
        "FUN_08006112": {
            "renaming": {
                "FUN_08006158": "memcpy",
                "FUN_08006112": "copy_parameters_to_destination_08006112",
                "param_1": "destination",
                "param_2": "source"
            },
            "code": "void copy_parameters_to_destination_08006112(void* destination, const void* source) {\n  memcpy(destination, source, sizeof(destination));\n  return;\n}",
            "called": [
                "FUN_08006158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006112",
            "calling": [
                "FUN_08005fc8"
            ],
            "imported": true,
            "current_name": "copy_parameters_to_destination_08006112"
        },
        "FUN_08004974": {
            "renaming": {
                "iVar2": "DAT_080049ec",
                "FUN_08004974": "set_flags_08004974",
                "param_1": "flag_ptr",
                "local_18": "bit_position",
                "param_2": "flag_value",
                "puVar1": "flag_ptr2",
                "uVar3": "function_result",
                "local_10": "flag_value",
                "uVar5": "current_flag",
                "uVar4": "flag_mask",
                "local_14": "flag_mask"
            },
            "code": "void set_flags_08004974(uint *flag_ptr, undefined4 flag_value)\n{\n  uint current_flag = *flag_ptr;\n  uint flag_mask;\n  uint flag_bit;\n  uint bit_position;\n  undefined *flag_ptr2;\n  undefined4 function_result;\n  flag_bit = (uint)((int)(char)*PTR_DAT_080049e8 << 0x18) >> 0x1c;\n  if (current_flag == DAT_080049e0) {\n    flag_mask = *(uint *)(DAT_080049ec + 0x18) | 0x200;\n    *(uint *)(DAT_080049ec + 0x18) = flag_mask;\n    bit_position = *(uint *)(DAT_080049ec + 0x18) & 0x200;\n  }\n  else {\n    flag_mask = DAT_080049e4;\n    if (current_flag == DAT_080049e4) {\n      flag_mask = *(uint *)(DAT_080049ec + 0x18) | 0x400;\n      *(uint *)(DAT_080049ec + 0x18) = flag_mask;\n      bit_position = *(uint *)(DAT_080049ec + 0x18) & 0x400;\n    }\n  }\n  flag_ptr2 = PTR_DAT_080049e8;\n  function_result = FUN_08004884(flag_bit, flag_value, flag_mask, bit_position);\n  bit_position = 1 << ((byte)*flag_ptr2 & 0xf) & 0xffff;\n  flag_mask = 3;\n  flag_value = 0;\n  FUN_08002624(function_result, &bit_position);\n  return;\n}",
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004974",
            "calling": [
                "FUN_0800213c"
            ],
            "imported": true,
            "current_name": "set_flags_08004974"
        },
        "FUN_08003520": {
            "renaming": {
                "puVar2": "parameter_pointer",
                "FUN_08003520": "process_flags_08003520",
                "param_1": "parameters",
                "cVar1": "character",
                "uVar3": "flags1",
                "uVar4": "flags2",
                "DAT_080035f8": "FLAG_1"
            },
            "code": "void process_flags_08003520(uint **parameters)\n{\n  char character;\n  uint *parameter_pointer;\n  uint flags1;\n  uint flags2;\n  \n  parameter_pointer = *parameters;\n  flags1 = parameter_pointer[5];\n  flags2 = parameter_pointer[1];\n  if (((flags1 & DAT_080035f8) != 0) && ((flags2 & 0x100) != 0)) {\n    parameters[16] = (uint *)((uint)parameters[16] | 1);\n    parameter_pointer[5] = 0xfffffeff;\n    **parameters = **parameters | 0x8000;\n  }\n  if (((flags1 & FLAG_2) != 0) && ((flags2 & 0x100) != 0)) {\n    parameters[16] = (uint *)((uint)parameters[16] | 2);\n    (*parameters)[5] = 0xfffffdff;\n  }\n  if (((flags1 & FLAG_3) != 0) && ((flags2 & 0x100) != 0)) {\n    character = *(char *)((int)parameters + 0x3d);\n    if (((*(char *)((int)parameters + 0x3e) == ' ') && (*(short *)((int)parameters + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (parameters[0xc] == (uint *)0x21)))))) {\n      execute_function(parameters);\n    }\n    else {\n      parameters[16] = (uint *)((uint)parameters[16] | 4);\n      if (*(char *)((int)parameters + 0x3e) == '\\x10') {\n        **parameters = **parameters | 0x200;\n      }\n      (*parameters)[5] = 0xfffffbff;\n    }\n  }\n  if (((flags1 & FLAG_4) != 0) && ((flags2 & 0x100) != 0)) {\n    parameters[16] = (uint *)((uint)parameters[16] | 8);\n    (*parameters)[5] = 0xfffff7ff;\n  }\n  if (parameters[16] != (uint *)0x0) {\n    execute_another_function(parameters);\n  }\n  return;\n}",
            "called": [
                "FUN_0800316c",
                "FUN_08002d1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003520",
            "calling": [],
            "imported": true,
            "current_name": "process_flags_08003520"
        },
        "FUN_08002ca6": {
            "renaming": {
                "puVar2": "current_position",
                "param_1": "input_array",
                "FUN_08002ca6": "process_input_08002ca6",
                "cVar1": "last_char"
            },
            "code": "int process_input_08002ca6(int *input_array)\n{\n  char last_char = *(char *)((int)input_array + 0x3d);\n  if (*(short *)((int)input_array + 0x2a) != 0) {\n    undefined *current_position = (undefined *)input_array[9];\n    input_array[9] = (int)(current_position + 1);\n    *current_position = (char)*(undefined4 *)(*input_array + 0x10);\n    *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n    if ((*(short *)((int)input_array + 0x2a) == 0) && (last_char == '*')) {\n      *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n      input_array[0xc] = 0x22;\n      *(undefined *)((int)input_array + 0x3d) = 0x28;\n      do_nothing();\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002ca4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca6",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "process_input_08002ca6"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "do_nothing_08002ca4"
            },
            "code": "\nvoid do_nothing_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [
                "FUN_080032b4",
                "FUN_08002ca6"
            ],
            "imported": true,
            "current_name": "do_nothing_08002ca4"
        },
        "FUN_08007328": {
            "renaming": {
                "FUN_08007328": "do_nothing_08007328"
            },
            "code": "\nvoid do_nothing_08007328(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007328",
            "calling": [
                "FUN_08006198",
                "FUN_0800010c"
            ],
            "imported": true,
            "current_name": "do_nothing_08007328"
        },
        "FUN_08005b54": {
            "renaming": {
                "FUN_08005b3c": "set_array",
                "uVar1": "byte1",
                "PTR_DAT_08005bac": "PTR_DAT_08005bac",
                "param_1": "array_ptr",
                "FUN_08004ca2": "get_byte",
                "FUN_08005b54": "initialize_array_08005b54",
                "FUN_08005b24": "initialize_array",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "PTR_DAT_08005ba4": "PTR_DAT_08005ba4",
                "PTR_PTR_LAB_080059c8_1_08005ba0": "PTR_PTR_LAB_080059c8_1_08005ba0",
                "PTR_DAT_08005ba8": "PTR_DAT_08005ba8"
            },
            "code": "undefined4* initialize_array_08005b54(undefined4 *array_ptr, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  undefined byte1;\n  array_ptr[1] = 0;\n  array_ptr[2] = 1000;\n  *array_ptr = PTR_PTR_LAB_080059c8_1_08005ba0;\n  if (array_ptr == (undefined4*) PTR_DAT_08005ba4) {\n    initialize_array_08005b54(array_ptr, 0, arg3, PTR_DAT_08005ba4, arg4);\n    set_array(array_ptr, 1);\n  }\n  else {\n    byte1 = get_byte(arg2, PTR_DAT_08005ba8);\n    *(undefined *)((int)array_ptr + 0x12d) = byte1;\n    byte1 = get_byte(arg2, PTR_DAT_08005bac);\n    *(undefined *)(array_ptr + 0x4b) = byte1;\n  }\n  finalize_array(array_ptr);\n  return array_ptr;\n}",
            "called": [
                "FUN_08005a44",
                "FUN_08005b3c",
                "FUN_08005b24",
                "FUN_08004ca2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b54",
            "calling": [
                "FUN_08005bb0"
            ],
            "imported": true,
            "current_name": "initialize_array_08005b54"
        },
        "FUN_08004618": {
            "renaming": {
                "sVar2": "remaining",
                "data": "data_value",
                "puVar3": "output",
                "param_1": "input",
                "type": "data_type",
                "remaining": "remaining_iterations",
                "pbVar1": "output_byte",
                "output": "output_ptr",
                "FUN_08004618": "process_input_08004618"
            },
            "code": "int process_input_08004618(int *input) {\n  char quote = *(char *)((int)input + 0x3a);\n  if (quote != '\"') {\n    return 2;\n  }\n  int type = input[2];\n  int data = *(int *)(*input + 4);\n  int *output = (int *)input[10];\n  if (input[4] == 0) {\n    if (type == 0x1000) {\n      *(unsigned short *)output = (unsigned short)((data << 0x17) >> 0x17);\n      output += 2;\n    }\n    else {\n      *(unsigned short *)output = (unsigned short)data & 0xff;\n      output++;\n    }\n  }\n  else {\n    byte *output_byte = (byte *)output;\n    *output_byte = (byte)data & 0x7f;\n    output++;\n  }\n  short remaining = *(short *)((int)input + 0x2e) - 1;\n  *(short *)((int)input + 0x2e) = remaining;\n  if (remaining != 0) {\n    return 0;\n  }\n  *(unsigned int *)(*input + 0xc) &= 0xffffffdf;\n  *(unsigned int *)(*input + 0xc) &= 0xfffffeff;\n  *(unsigned int *)(*input + 0x14) &= 0xfffffffe;\n  *(char *)((int)input + 0x3a) = 0x20;\n  finalize_processing();\n  return 0;\n}",
            "called": [
                "FUN_080055e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004618",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": true,
            "current_name": "process_input_08004618"
        },
        "FUN_08006c40": {
            "renaming": {
                "uVar1": "unused_variable",
                "param_1": "data_structure",
                "param_2": "value1",
                "FUN_08006c40": "initialize_data_structure_08006c40",
                "param_3": "value2"
            },
            "code": "void initialize_data_structure_08006c40(undefined4 *data_structure, undefined2 value1, undefined2 value2)\n{\n  // Initialize first 3 elements to 0\n  data_structure[0] = 0;\n  data_structure[1] = 0;\n  data_structure[2] = 0;\n  // Set values of next two elements\n  *(undefined2 *)(data_structure + 3) = value1;\n  *(undefined2 *)((int)data_structure + 0xe) = value2;\n  // Initialize next 3 elements to 0\n  data_structure[4] = 0;\n  data_structure[5] = 0;\n  data_structure[6] = 0;\n  // Call function to initialize remaining elements\n  FUN_080061e0(data_structure + 0x17, 0, 8);\n  // Set values of last 5 elements\n  data_structure[8] = data_structure;\n  data_structure[9] = DAT_08006c78;\n  data_structure[10] = PTR_FUN_08006f5a_1_08006c7c;\n  data_structure[0xb] = PTR_FUN_08006f92_1_08006c80;\n  data_structure[0xc] = PTR_LAB_08006fb6_1_08006c84;\n}",
            "called": [
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c40",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": true,
            "current_name": "initialize_data_structure_08006c40"
        },
        "FUN_0800157c": {
            "renaming": {
                "param_1": "buffer",
                "FUN_08005848": "call_function2",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "FUN_0800157c": "set_values_0800157c",
                "FUN_080057b4": "call_function1"
            },
            "code": "char* set_values_0800157c(char* buffer, int value1, char value2, char value3)\n{\n  *buffer = (char)value1;\n  buffer[1] = value2;\n  buffer[2] = value3;\n  call_function1(value1);\n  call_function1(buffer[1]);\n  call_function1(buffer[2]);\n  call_function2(value2);\n  call_function2(value3);\n  return buffer;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": true,
            "current_name": "set_values_0800157c"
        },
        "FUN_080045a2": {
            "renaming": {
                "*(char *)((int)param_1 + 0x3a)": "input_array[15]",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*input_array + 0x14)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[15]",
                "param_1": "input_array",
                "*(short *)((int)param_1 + 0x2e)": "*(short *)((int)input_array + 0x2e)",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[14]",
                "param_2": "array_size",
                "param_3": "short_value",
                "FUN_080045a2": "validate_input_080045a2",
                "*(short *)(param_1 + 0xb)": "input_array[11]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]"
            },
            "code": "int validate_input_080045a2(int *input_array, int array_size, int short_value)\n{\n    if (input_array[15] != ' ')\n    {\n        return 2;\n    }\n    if (array_size == 0)\n    {\n        return 1;\n    }\n    if (short_value == 0)\n    {\n        return 1;\n    }\n    if (input_array[14] != 1)\n    {\n        input_array[10] = array_size;\n        input_array[11] = (short)short_value;\n        input_array[14] = 0;\n        input_array[15] = 0x22;\n        *(uint *)(*input_array + 0xc) |= 0x100;\n        *(uint *)(*input_array + 0x14) |= 1;\n        *(uint *)(*input_array + 0xc) |= 0x20;\n        *(short *)((int)input_array + 0x2e) = (short)short_value;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045a2",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": true,
            "current_name": "validate_input_080045a2"
        },
        "FUN_08001c32": {
            "renaming": {
                "FUN_08004c52": "execute_startup_routine",
                "FUN_08001c32": "initialize_program_08001c32"
            },
            "code": "void initialize_program_08001c32(void)\n{\n  execute_startup_routine();\n  return;\n}",
            "called": [
                "FUN_08004c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c32",
            "calling": [
                "FUN_08005f5e"
            ],
            "imported": true,
            "current_name": "initialize_program_08001c32"
        },
        "FUN_080047e8": {
            "renaming": {
                "*(byte *)(param_1 + 0x39)": "byte2",
                "param_1": "address",
                "FUN_080047e8": "combine_bytes_080047e8",
                "*(byte *)(param_1 + 0x3a)": "byte1"
            },
            "code": "byte combine_bytes_080047e8(int address) {\n  byte byte1 = *(byte *)(address + 0x3a);\n  byte byte2 = *(byte *)(address + 0x39);\n  return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047e8",
            "calling": [
                "FUN_080054b0",
                "FUN_0800548c"
            ],
            "imported": true,
            "current_name": "combine_bytes_080047e8"
        },
        "FUN_080057b4": {
            "renaming": {
                "iVar1": "function_result",
                "iVar3": "char_value",
                "puVar2": "data_ptr",
                "param_1": "data_index",
                "param_2": "mode",
                "param_3": "flag",
                "param_4": "data_array",
                "FUN_080057b4": "process_data_080057b4"
            },
            "code": "void process_data_080057b4(uint data_index, uint mode, uint flag, char* data_array)\n{\n  int char_value;\n  char* data_ptr;\n  int function_result;\n  \n  if (data_index < 0x3c) {\n    char_value = (int)(char)PTR_DAT_08005838[data_index];\n    data_ptr = PTR_DAT_08005838;\n  }\n  else {\n    char_value = -1;\n    data_ptr = data_array;\n  }\n  if (char_value != -1) {\n    function_result = FUN_080047f4(char_value,PTR_DAT_0800583c,flag,data_ptr,data_array);\n    if (function_result != 0) {\n      function_result = FUN_08004ce2(char_value,PTR_DAT_08005840);\n      if (function_result != 0) {\n        FUN_08004b3c(char_value);\n      }\n      FUN_08004828(char_value,PTR_DAT_0800583c);\n    }\n    switch(mode) {\n    case 0:\n      FUN_08004bb0(char_value,0);\n      break;\n    case 1:\n      FUN_08004bb0(char_value,1,0);\n      break;\n    case 2:\n      FUN_08004bb0(char_value,0,1);\n      break;\n    case 3:\n      FUN_08004bb0(char_value,0,2);\n    }\n    FUN_0800480a(char_value,PTR_DAT_08005844);\n  }\n  return;\n}",
            "called": [
                "FUN_08004b3c",
                "FUN_080047f4",
                "FUN_08004ce2",
                "FUN_08004bb0",
                "FUN_08004828",
                "FUN_0800480a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057b4",
            "calling": [
                "FUN_08000bcc",
                "FUN_0800157c",
                "FUN_080013a4"
            ],
            "imported": true,
            "current_name": "process_data_080057b4"
        },
        "FUN_08007334": {
            "renaming": {
                "FUN_08007334": "do_nothing_08007334"
            },
            "code": "\nvoid do_nothing_08007334(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007334",
            "calling": [],
            "imported": true,
            "current_name": "do_nothing_08007334"
        },
        "FUN_08001b18": {
            "renaming": {
                "FUN_08001b18": "execute_function_08001b18",
                "FUN_08001ab0": "initialize_function",
                "param_1": "input_param"
            },
            "code": "undefined4 execute_function_08001b18(undefined4 input_param)\n{\n  initialize_function();\n  return input_param;\n}",
            "called": [
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b18",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": true,
            "current_name": "execute_function_08001b18"
        },
        "thunk_FUN_08005750": {
            "renaming": {
                "thunk_FUN_08005750": "get_default_value_thunk_08005750"
            },
            "code": "int get_default_value_thunk_08005750(void)\n{\n  return 1;\n}",
            "called": [
                "FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f34",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": true,
            "current_name": "get_default_value_thunk_08005750"
        },
        "FUN_0800092c": {
            "renaming": {
                "bVar2": "horizontal_collision",
                "FUN_0800092c": "check_collision_0800092c",
                "bVar3": "vertical_collision",
                "uVar1": "xor_result",
                "param_1": "x1",
                "param_2": "y1",
                "param_3": "x2",
                "param_4": "y2"
            },
            "code": "uint check_collision_0800092c(uint x1, uint y1, uint x2, uint y2)\n{\n  bool horizontal_collision = (x1 | (x2 << 1)) == 0 || x1 == x2 || ((x1 ^ x2) > 0 && y1 == y2);\n  bool vertical_collision = (y1 | (y2 << 1)) == 0 || y1 == y2 || ((y1 ^ y2) > 0 && x1 == x2);\n  return (horizontal_collision && vertical_collision) ? 1 : 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800092c",
            "calling": [
                "FUN_080009b8"
            ],
            "imported": true,
            "current_name": "check_collision_0800092c"
        },
        "FUN_08005d8a": {
            "renaming": {
                "FUN_08005d8a": "process_data_08005d8a",
                "param_1": "data_ptr",
                "FUN_08005ce8": "call_func",
                "param_2": "data_size",
                "param_3": "flag",
                "param_4": "func_ptr"
            },
            "code": "void process_data_08005d8a(uint32_t *data_ptr, uint32_t data_size, uint32_t flag, uint32_t func_ptr)\n{\n  if (flag != 0) {\n    call_func(data_ptr, data_size, flag & 0xff);\n    return;\n  }\n  (**(code **)*data_ptr)(data_ptr, data_size & 0xff, 0, *(code **)*data_ptr, func_ptr);\n  return;\n}",
            "called": [
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d8a",
            "calling": [
                "FUN_08005da8",
                "FUN_08005da0"
            ],
            "imported": true,
            "current_name": "process_data_08005d8a"
        },
        "FUN_08002560": {
            "renaming": {
                "DAT_0800257c": "flag",
                "FUN_08002560": "update_flag_08002560",
                "param_1": "flag_value"
            },
            "code": "void update_flag_08002560(int DAT_0800257c_value) {\n  if (DAT_0800257c_value != 4) {\n    *DAT_0800257c = *DAT_0800257c & 0xfffffffb;\n    return;\n  }\n  *DAT_0800257c = *DAT_0800257c | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002560",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "update_flag_08002560"
        },
        "FUN_08006e90": {
            "renaming": {
                "pcVar2": "current_char_ptr",
                "pcVar1": "current_char",
                "FUN_08006e90": "find_character_in_string_08006e90",
                "param_1": "string",
                "param_2": "character_to_find",
                "param_3": "string_length"
            },
            "code": "char* find_character_in_string_08006e90(char* string, char character_to_find, int string_length) {\n  char* current_char = string;\n  while (current_char != string + string_length) {\n    if (*current_char == character_to_find) {\n      return current_char;\n    }\n    current_char++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e90",
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "imported": true,
            "current_name": "find_character_in_string_08006e90"
        },
        "FUN_0800417a": {
            "renaming": {
                "FUN_0800417a": "do_nothing_0800417a"
            },
            "code": "\nvoid do_nothing_0800417a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417a",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": true,
            "current_name": "do_nothing_0800417a"
        },
        "FUN_08006920": {
            "renaming": {
                "iVar2": "error_code",
                "param_1": "result",
                "FUN_08006920": "check_for_error_and_set_value_08006920",
                "PTR_DAT_0800693c": "pointer",
                "param_2": "value",
                "puVar1": "pointer",
                "FUN_080056d8": "check_value"
            },
            "code": "void check_for_error_and_set_value_08006920(int *result, undefined4 value) {\n  undefined *PTR_DAT_0800693c = PTR_DAT_0800693c;\n  *(undefined4 *)PTR_DAT_0800693c = 0;\n  int error_code = check_value(value);\n  if ((error_code == -1) && (*(int *)PTR_DAT_0800693c != 0)) {\n    *result = *(int *)PTR_DAT_0800693c;\n  }\n  return;\n}",
            "called": [
                "FUN_080056d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006920",
            "calling": [
                "FUN_08006288"
            ],
            "imported": true,
            "current_name": "check_for_error_and_set_value_08006920"
        },
        "FUN_080008ba": {
            "renaming": {
                "bVar4": "is_a_b_zero",
                "uVar1": "temp_a",
                "param_1": "a",
                "FUN_080008ba": "calculate_double_from_uints_080008ba",
                "unaff_r4": "mask",
                "param_2": "b",
                "param_3": "c",
                "param_4": "d",
                "uVar3": "temp_b",
                "uVar2": "masked_d",
                "in_r12": "constant"
            },
            "code": "ulonglong calculate_double_from_uints_080008ba(uint a, uint b, uint c, uint d)\n{\n  uint mask = c >> 0x14;\n  uint temp_b = b;\n  if (d != a || mask != a) {\n    if (d == a) {\n      if (((a | b << 0xc) == 0) && (a = c, temp_b = d, mask != a)) {\n        return (ulonglong)((b ^ d) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (mask == a) {\n      a = c;\n      temp_b = d;\n      if ((c | d << 0xc) == 0) {\n        return (ulonglong)((b ^ d) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      bool is_a_b_zero = (a | b << 1) == 0;\n      if (!is_a_b_zero) {\n        is_a_b_zero = (c | d << 1) == 0;\n      }\n      if (!is_a_b_zero) {\n        if (d == 0) {\n          temp_b = b & 0x80000000;\n          do {\n            uint temp_a = a & 0x80000000;\n            a = a << 1;\n            b = b * 2 + (uint)(temp_a != 0);\n          } while ((b & 0x100000) == 0);\n          b |= temp_b;\n          if (mask != 0) {\n            return CONCAT44(b,a);\n          }\n        }\n        do {\n          temp_b = c & 0x80000000;\n          c = c << 1;\n          d = d * 2 + (uint)(temp_b != 0);\n        } while ((d & 0x100000) == 0);\n        return CONCAT44(b,a);\n      }\n      if ((a | b << 1) != 0) goto LAB_0800072c;\n      if ((c | d << 1) != 0) goto LAB_080006f0;\n    }\n  }\n  return CONCAT44(temp_b,a) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ba",
            "calling": [
                "FUN_0800074c"
            ],
            "imported": true,
            "current_name": "calculate_double_from_uints_080008ba"
        },
        "FUN_08002d1c": {
            "renaming": {
                "param_1": "params",
                "uint": "unsigned int",
                "FUN_08002d1c": "set_param_values_08002d1c",
                "DAT_08002dac": "PTR_DAT_08002dac"
            },
            "code": "int set_param_values_08002d1c(uint **params) {\n    if (((*params)[11] == (uint *)0x4) || ((*params)[11] == (uint *)0x8)) &&\n        (params[0][0x3d] == '(')) {\n        (*params)[11] = DAT_08002dac;\n        (*params)[1] &= 0xfffff8ff;\n        (*params)[5] = 0xfffffbff;\n        **params &= 0xfffffbff;\n        params[0][0xc] = (uint *)0x0;\n        params[0][0x3d] = 0x20;\n        params[0][0x3e] = 0;\n        FUN_08004ec4();\n    }\n    else if (params[0][0x3d] == '!') {\n        (*params)[11] = DAT_08002dac;\n        params[0][0xc] = (uint *)0x21;\n        params[0][0x3d] = 0x20;\n        params[0][0x3e] = 0;\n        (*params)[1] &= 0xfffff8ff;\n        (*params)[5] = 0xfffffbff;\n        **params &= 0xfffffbff;\n        do_nothing_08002c52();\n    }\n    else {\n        (*params)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004ec4",
                "FUN_08002c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d1c",
            "calling": [
                "FUN_08003520"
            ],
            "imported": true,
            "current_name": "set_param_values_08002d1c"
        },
        "FUN_08005714": {
            "renaming": {
                "undefined4": "int32_t",
                "FUN_08005714": "return_error_code_08005714",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "PTR_DPTR_APTR_TPTR__PTR_iPTR_DPTR_APTR_TPTR__PTR_nPTR_DPTR_APTR_TPTR__PTR_tPTR_DPTR_APTR_TPTR__PTR_3PTR_DPTR_APTR_TPTR__PTR_2PTR_DPTR_APTR_TPTR__PTR__PTR_DPTR_APTR_TPTR__PTR_tPTR_DPTR_APTR_TPTR__PTR_ return_error_code_08005714(PTR_DPTR_APTR_TPTR__PTR_vPTR_DPTR_APTR_TPTR__PTR_oPTR_DPTR_APTR_TPTR__PTR_iPTR_DPTR_APTR_TPTR__PTR_dPTR_DPTR_APTR_TPTR__PTR_)PTR_DPTR_APTR_TPTR__PTR_\nPTR_DPTR_APTR_TPTR__PTR_{PTR_DPTR_APTR_TPTR__PTR_\nPTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_iPTR_DPTR_APTR_TPTR__PTR_nPTR_DPTR_APTR_TPTR__PTR_tPTR_DPTR_APTR_TPTR__PTR_3PTR_DPTR_APTR_TPTR__PTR_2PTR_DPTR_APTR_TPTR__PTR__PTR_DPTR_APTR_TPTR__PTR_tPTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_ePTR_DPTR_APTR_TPTR__PTR_rPTR_DPTR_APTR_TPTR__PTR_rPTR_DPTR_APTR_TPTR__PTR_oPTR_DPTR_APTR_TPTR__PTR_rPTR_DPTR_APTR_TPTR__PTR__PTR_DPTR_APTR_TPTR__PTR_cPTR_DPTR_APTR_TPTR__PTR_oPTR_DPTR_APTR_TPTR__PTR_dPTR_DPTR_APTR_TPTR__PTR_ePTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_=PTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_-PTR_DPTR_APTR_TPTR__PTR_1PTR_DPTR_APTR_TPTR__PTR_;PTR_DPTR_APTR_TPTR__PTR_\nPTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_rPTR_DPTR_APTR_TPTR__PTR_ePTR_DPTR_APTR_TPTR__PTR_tPTR_DPTR_APTR_TPTR__PTR_uPTR_DPTR_APTR_TPTR__PTR_rPTR_DPTR_APTR_TPTR__PTR_nPTR_DPTR_APTR_TPTR__PTR_ PTR_DPTR_APTR_TPTR__PTR_ePTR_DPTR_APTR_TPTR__PTR_rPTR_DPTR_APTR_TPTR__PTR_rPTR_DPTR_APTR_TPTR__PTR_oPTR_DPTR_APTR_TPTR__PTR_rPTR_DPTR_APTR_TPTR__PTR__PTR_DPTR_APTR_TPTR__PTR_cPTR_DPTR_APTR_TPTR__PTR_oPTR_DPTR_APTR_TPTR__PTR_dPTR_DPTR_APTR_TPTR__PTR_ePTR_DPTR_APTR_TPTR__PTR_;PTR_DPTR_APTR_TPTR__PTR_\nPTR_DPTR_APTR_TPTR__PTR_}PTR_DPTR_APTR_TPTR__PTR_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": true,
            "current_name": "return_error_code_08005714"
        },
        "FUN_08003da4": {
            "renaming": {
                "uVar1": "result",
                "uStack_14": "stack_value3",
                "param_1": "input",
                "FUN_08003da4": "calculate_value_08003da4",
                "abStack_20": "local_value2",
                "uStack_18": "stack_value2",
                "uStack_1c": "stack_value1",
                "local_24": "local_value1"
            },
            "code": "uint calculate_value_08003da4(int input)\n{\n  uint result;\n  undefined2 local_value1;\n  byte local_value2[4];\n  undefined4 stack_value1;\n  undefined4 stack_value2;\n  undefined4 stack_value3;\n  \n  stack_value3 = *(undefined4 *)(PTR_DAT_08003e8c + 8);\n  stack_value2 = *(undefined4 *)(PTR_DAT_08003e8c + 4);\n  stack_value1 = *(undefined4 *)PTR_DAT_08003e8c;\n  local_value1 = *(undefined2 *)(PTR_DAT_08003e8c + 0x10);\n  if (input == 2) {\n    result = calculate_division();\n    result = result / ((((DAT_08003e90[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((*DAT_08003e90 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08003e9c;\n      if ((DAT_08003e90[1] & 0x10000) != 0) {\n        result = DAT_08003e94 / *(byte *)((int)&local_value1 - ((int)(DAT_08003e90[1] << 0xe) >> 0x1f));\n      }\n      result = result * local_value2[(DAT_08003e90[1] << 10) >> 0x1c];\n      if ((DAT_08003e90[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08003e98 * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((DAT_08003e90[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08003e90[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08003e90[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08003e90 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003da4",
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "imported": true,
            "current_name": "calculate_value_08003da4"
        },
        "FUN_08005a44": {
            "renaming": {
                "*(int *)(param_1 + 0x138)": "ptr3",
                "param_1": "param",
                "*(undefined2 *)(param_1 + 0x134)": "ptr2",
                "*(undefined2 *)(param_1 + 0x136)": "ptr2",
                "FUN_08005a44": "initialize_params_08005a44",
                "*(int *)(param_1 + 0x130)": "ptr1",
                "*(undefined2 *)(param_1 + 0x13c)": "ptr2",
                "*(undefined2 *)(param_1 + 0x13e)": "ptr2"
            },
            "code": "void initialize_params_08005a44(int param_1)\n{\n  int* ptr1 = (int*)(param_1 + 0x130);\n  *ptr1 = param_1 + 0x11;\n  short* ptr2 = (short*)(param_1 + 0x134);\n  *ptr2 = 0;\n  ptr2 = (short*)(param_1 + 0x136);\n  *ptr2 = 0;\n  int* ptr3 = (int*)(param_1 + 0x138);\n  *ptr3 = param_1 + 0x51;\n  ptr2 = (short*)(param_1 + 0x13c);\n  *ptr2 = 0;\n  ptr2 = (short*)(param_1 + 0x13e);\n  *ptr2 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a44",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": true,
            "current_name": "initialize_params_08005a44"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009b8": "execute_preprocessing",
                "in_CY": "current_character",
                "FUN_080009dc": "is_end_of_string_080009dc"
            },
            "code": "bool is_end_of_string_080009dc(void)\n{\n  char current_character;\n  execute_preprocessing();\n  return current_character == '\\0';\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001960",
                "FUN_080019f6",
                "FUN_080016b4"
            ],
            "imported": true,
            "current_name": "is_end_of_string_080009dc"
        },
        "FUN_0800417c": {
            "renaming": {
                "*(uint *)(*param_1 + 0x14)": "*flag2",
                "0xfffffedf": "0b11111111111111111111111111101111",
                "*(uint *)(*param_1 + 0xc)": "*flag1",
                "((int)param_1 + 0x3a)": "((int)flagPtr + 0x3a)",
                "param_1": "flagPtr",
                "uint": "uint32_t",
                "0xfffffffe": "0b11111111111111111111111111111110",
                "undefined": "char",
                "*param_1": "*flagPtr",
                "FUN_0800417c": "clearFlags_0800417c"
            },
            "code": "void clearFlags_0800417c(int *flagPtr)\n{\n  uint32_t *flag1 = (uint32_t *)(*flagPtr + 0xc);\n  uint32_t *flag2 = (uint32_t *)(*flagPtr + 0x14);\n  *flag1 = *flag1 & 0xfffffedf;\n  *flag2 = *flag2 & 0xfffffffe;\n  *(char *)((int)flagPtr + 0x3a) = ' ';\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417c",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": true,
            "current_name": "clearFlags_0800417c"
        },
        "FUN_08004b94": {
            "renaming": {
                "FUN_08001cc4": "initialize_database",
                "FUN_08004b94": "initialize_application_08004b94"
            },
            "code": "void initialize_application_08004b94(void)\n{\n  initialize_database();\n  return;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b94",
            "calling": [
                "FUN_080058e0"
            ],
            "imported": true,
            "current_name": "initialize_application_08004b94"
        },
        "FUN_080058e0": {
            "renaming": {
                "FUN_08004b94": "initialize_system",
                "FUN_080058e0": "execute_main_function_080058e0"
            },
            "code": "void execute_main_function_080058e0(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_08004b94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e0",
            "calling": [
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_08001ab0",
                "FUN_080016b4"
            ],
            "imported": true,
            "current_name": "execute_main_function_080058e0"
        },
        "FUN_08001918": {
            "renaming": {
                "uVar1": "temp_1",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "arg_3",
                "FUN_08001918": "process_data_08001918",
                "param_4": "arg_4",
                "uVar3": "data_ptr_2",
                "uVar2": "data_ptr_1"
            },
            "code": "void process_data_08001918(int data_ptr, int data_size, undefined4 arg_3, undefined4 arg_4)\n{\n  undefined4 temp_1;\n  undefined8 data_ptr_1;\n  undefined8 data_ptr_2;\n  \n  if (data_size > 0) {\n    data_ptr_1 = FUN_0800042c(data_size);\n    data_ptr_2 = FUN_0800040c(*(undefined4 *)(data_ptr + 0x58));\n    data_ptr_1 = FUNC_0800074c((int)data_ptr_1, (int)((ulonglong)data_ptr_1 >> 0x20), (int)data_ptr_2, (int)((ulonglong)data_ptr_2 >> 0x20), arg_4);\n    temp_1 = (undefined4)((ulonglong)data_ptr_1 >> 0x20);\n    data_ptr_2 = FUNC_080004f8((int)data_ptr_1, temp_1, *(undefined4 *)(data_ptr + 0x20), *(undefined4 *)(data_ptr + 0x24));\n    *(undefined8 *)(data_ptr + 0x20) = data_ptr_2;\n    data_ptr_1 = FUNC_0800074c(*(undefined4 *)(data_ptr + 0x28), *(undefined4 *)(data_ptr + 0x2c), (int)data_ptr_1, temp_1);\n    *(undefined8 *)(data_ptr + 0x28) = data_ptr_1;\n    *(int *)(data_ptr + 0x58) = data_size;\n  }\n  return;\n}",
            "called": [
                "FUN_0800040c",
                "FUN_0800042c",
                "FUN_080004f8",
                "FUN_0800074c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001918",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "process_data_08001918"
        },
        "FUN_0800611c": {
            "renaming": {
                "uVar1": "stack_pointer_value",
                "puVar2": "assertion_string_ptr",
                "param_1": "assertion_type",
                "param_2": "line_number",
                "param_3": "file_name",
                "FUN_0800611c": "assert_failed_0800611c",
                "param_4": "error_code",
                "uVar3": "current_time",
                "uVar4": "error_code_copy"
            },
            "code": "void assert_failed_0800611c(undefined4 assertion_type, undefined4 line_number, undefined *file_name, undefined4 error_code)\n{\n  undefined4 stack_pointer_value;\n  undefined *assertion_string_ptr;\n  undefined8 current_time;\n  undefined4 error_code_copy;\n  \n  stack_pointer_value = *(undefined4 *)(*(int *)PTR_PTR_DAT_08006148 + 0xc);\n  assertion_string_ptr = PTR_s_assertion___s__failed__file___s__08006150;\n  error_code_copy = error_code;\n  if (file_name == (undefined *)0x0) goto LAB_08006140;\n  do {\n    FUN_08006174(stack_pointer_value, assertion_string_ptr, error_code, assertion_type, line_number, PTR_s___function__0800614c, file_name, error_code_copy);\n    current_time = FUN_08006ac0();\n    line_number = (undefined4)((ulonglong)current_time >> 0x20);\n    stack_pointer_value = (undefined4)current_time;\nLAB_08006140:\n    file_name = PTR_s__08006154;\n    assertion_string_ptr = PTR_s__08006154;\n  } while(true);\n}",
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800611c",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": true,
            "current_name": "assert_failed_0800611c"
        },
        "FUN_080047f4": {
            "renaming": {
                "param_1": "value",
                "param_2": "position",
                "PTR_": "ptr",
                "DAT_": "masked_value",
                "FUN_080047f4": "get_bit_at_position_080047f4"
            },
            "code": "uint get_bit_at_position_080047f4(uint value, int position) {\n  uint* PTR_ = (uint*)(position + ((value << 0x18) >> 0x1c) * 4);\n  uint DAT_ = *PTR_ >> (value & 0xf) & 1;\n  return DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08005890",
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "imported": true,
            "current_name": "get_bit_at_position_080047f4"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009b8": "check_carry_flag",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "FUN_080009f0": "check_for_zero_or_carry_flag_080009f0"
            },
            "code": "bool check_for_zero_or_carry_flag_080009f0(void)\n{\n  bool zero_flag = check_zero_flag();\n  bool carry_flag = check_carry_flag();\n  return !carry_flag || zero_flag;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "check_for_zero_or_carry_flag_080009f0"
        },
        "FUN_0800134e": {
            "renaming": {
                "FUN_08001310": "send_data",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "confirmation",
                "param_4": "confirmation_data",
                "FUN_0800134e": "send_data_and_confirm_0800134e"
            },
            "code": "int send_data_and_confirm_0800134e(int *data, int data_length, int confirmation, int *confirmation_data)\n{\n  send_data(data, data_length, confirmation, confirmation_data);\n  return 1;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800134e",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "send_data_and_confirm_0800134e"
        },
        "FUN_08002c10": {
            "renaming": {
                "param_1": "ptr_param",
                "puVar1": "data_ptr",
                "FUN_08002c10": "set_flags_08002c10"
            },
            "code": "int set_flags_08002c10(uint **ptr_param) {\n  uint *data_ptr;\n\n  if (*(char *)((int)ptr_param + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)ptr_param + 0x3d) = 0x28;\n  data_ptr = *ptr_param;\n  if ((*data_ptr & 1) == 0) {\n    *data_ptr = *data_ptr | 1;\n  }\n  **ptr_param = **ptr_param | 0x400;\n  (*ptr_param)[1] = (*ptr_param)[1] | 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c10",
            "calling": [
                "FUN_08004ec4",
                "FUN_08004ef4"
            ],
            "imported": true,
            "current_name": "set_flags_08002c10"
        },
        "FUN_08006be0": {
            "renaming": {
                "bVar10": "is_flag_set",
                "iVar2": "offset",
                "uVar1": "result",
                "iVar6": "param_c",
                "iVar8": "param_8",
                "param_1": "data",
                "piVar3": "param_2",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "param_2": "params",
                "param_4": "param_4",
                "pcVar7": "func_ptr",
                "uVar5": "flags",
                "FUN_08006be0": "process_data_08006be0",
                "uVar4": "num_bytes",
                "uVar9": "param_1"
            },
            "code": "uint32_t process_data_08006be0(uint32_t *data, int32_t *params)\n{\n  uint32_t result;\n  int32_t param_4;\n  int32_t *param_2;\n  uint32_t param_1;\n  uint16_t flags;\n  uint32_t num_bytes;\n  int32_t offset;\n  uint32_t *func_ptr;\n  int32_t param_8;\n  int32_t param_c;\n  uint32_t *jump_table;\n  bool is_flag_set;\n  \n  param_4 = params[4];\n  if (param_4 != 0) {\n    if ((data != NULL) && (data[6] == 0)) {\n      do_something();\n    }\n    if (params == (int32_t *)PTR_DAT_08006c28) {\n      param_2 = (int32_t *)data[1];\n    }\n    else if (params == (int32_t *)PTR_DAT_08006c2c) {\n      param_2 = (int32_t *)data[2];\n    }\n    else if (params == (int32_t *)PTR_DAT_08006c30) {\n      param_2 = (int32_t *)data[3];\n    }\n    flags = *(uint16_t *)(param_2 + 3);\n    if (flags != 0) {\n      num_bytes = (uint32_t)flags;\n      if ((int)(num_bytes << 0x1c) < 0) {\n        offset = param_4;\n        if (offset != 0) {\n          param_c = num_bytes << 0x1e;\n          is_flag_set = param_c == 0;\n          if (is_flag_set) {\n            param_c = 0;\n          }\n          param_8 = *param_2;\n          if (!is_flag_set) {\n            param_c = param_2[5];\n          }\n          *param_2 = offset;\n          param_2[2] = param_c;\n          for (param_8 = param_8 - offset; param_8 > 0; param_8 = param_8 - param_c) {\n            func_ptr = (uint32_t *)param_2[10];\n            result = (*func_ptr)(data, param_2[8], offset, param_8, unaff_r4, unaff_r5);\n            if (result < 1) {\n              flags = *(uint16_t *)(param_2 + 3);\n              goto LAB_08006bc6;\n            }\n            offset = offset + result;\n          }\n        }\n      }\n      else if (((params[1] > 0) || (params[0x10] > 0)) && ((func_ptr = (uint32_t *)param_2[0xb]) != NULL)) {\n        param_1 = *data;\n        *data = 0;\n        if ((flags & 0x1000) == 0) {\n          result = (*func_ptr)(data, param_2[8], num_bytes & 0x1000, 1);\n          if ((result == -1) && ((param_1 = *data) != 0)) {\n            if ((param_1 != 0x1d) && (param_1 != 0x16)) {\n              flags = *(uint16_t *)(param_2 + 3);\n              flags |= 0x40;\n              jump_table = (uint32_t *)UNRECOVERED_JUMPTABLE_00;\n              result = (*jump_table)();\n              return result;\n            }\n            *data = param_1;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          result = params[0x15];\n        }\n        if (((int)((uint)flags << 0x1d) < 0) && ((result = result - params[1]), (param_2[0xd] != 0))) {\n          result = result - params[0x10];\n        }\n        result = (*func_ptr)(data, param_2[8], result, 0);\n        flags = *(uint16_t *)(param_2 + 3);\n        if ((result == -1) && ((num_bytes = *data) > 0x1d || (-1 < (int)((DAT_08006bdc >> (num_bytes & 0xff)) << 0x1f))))) {\n          flags |= 0x40;\n          jump_table = (uint32_t *)UNRECOVERED_JUMPTABLE_00;\n          result = (*jump_table)(0xffffffff);\n          return result;\n        }\n        params[1] = 0;\n        *params = param_4;\n        if (((int)((uint)flags << 0x13) < 0) && ((result != -1) || (*data == 0))) {\n          params[0x15] = result;\n        }\n        param_2 = (int32_t *)param_2[0xd];\n        *data = param_1;\n        if (param_2 != NULL) {\n          if (param_2 != params + 0x11) {\n            do_something(data);\n          }\n          params[0xd] = 0;\n          jump_table = (uint32_t *)UNRECOVERED_JUMPTABLE_00;\n          result = (*jump_table)();\n          return result;\n        }\n      }\nLAB_08006aea:\n      jump_table = (uint32_t *)UNRECOVERED_JUMPTABLE_00;\n      result = (*jump_table)(0);\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006be0",
            "calling": [
                "FUN_08006344"
            ],
            "imported": true,
            "current_name": "process_data_08006be0"
        },
        "FUN_080012e8": {
            "renaming": {
                "uVar1": "bit_index",
                "param_1": "data_address",
                "FUN_08005848": "process_byte_and_bit",
                "param_2": "bit_mask",
                "FUN_080012a2": "finalize_process",
                "FUN_080012e8": "process_bits_and_bytes_080012e8"
            },
            "code": "void process_bits_and_bytes_080012e8(int data_address, int bit_mask) {\n  uint bit_index;\n  for (bit_index = 0; (int)bit_index < 8; bit_index++) {\n    uint8_t byte = *(uint8_t *)(data_address + bit_index + 0xb);\n    uint8_t bit = bit_mask >> (bit_index & 0xff) & 1;\n    process_byte_and_bit(byte, bit);\n  }\n  finalize_process(data_address);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012e8",
            "calling": [
                "FUN_08001310"
            ],
            "imported": true,
            "current_name": "process_bits_and_bytes_080012e8"
        },
        "FUN_080058e8": {
            "renaming": {
                "FUN_080058e8": "do_nothing_080058e8"
            },
            "code": "\nvoid do_nothing_080058e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e8",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": true,
            "current_name": "do_nothing_080058e8"
        },
        "FUN_08006370": {
            "renaming": {
                "iVar1": "result",
                "iVar3": "index",
                "puVar2": "data_end",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "data",
                "param_4": "data_length",
                "FUN_08006370": "process_data_08006370"
            },
            "code": "int process_data_08006370(int param1, int param2, char *data, int data_length) {\n  int index = 0;\n  char *data_end = data + data_length;\n  do {\n    if (data == data_end) {\n      return 0;\n    }\n    int result = process_byte(param1, *data, param2, data_length, index);\n    index = result + 1;\n    data++;\n  } while (index != 0);\n  return result;\n}",
            "called": [
                "FUN_08006344"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006370",
            "calling": [
                "FUN_08006394"
            ],
            "imported": true,
            "current_name": "process_data_08006370"
        },
        "FUN_080024f8": {
            "renaming": {
                "param_1": "bit_index",
                "DAT_08002510": "bit_array_ptr",
                "FUN_080024f8": "set_bit_at_index_080024f8"
            },
            "code": "void set_bit_at_index_080024f8(uint bit_index){\n  if (bit_index >= 0) {\n    int array_index = bit_index >> 5;\n    int bit_position = bit_index & 0x1f;\n    int* DAT_08002510 = DAT_08002510;\n    int bit_mask = 1 << bit_position;\n    DAT_08002510[array_index] = DAT_08002510[array_index] | bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024f8",
            "calling": [
                "FUN_08005510",
                "FUN_08005568"
            ],
            "imported": true,
            "current_name": "set_bit_at_index_080024f8"
        },
        "FUN_08001ab0": {
            "renaming": {
                "param_11": "arg_10",
                "param_12": "arg_11",
                "param_10": "arg_9",
                "FUN_08001ab0": "update_data_08001ab0",
                "param_1": "data_ptr",
                "FUN_08001960": "init_data",
                "param_6": "arg_5",
                "param_7": "arg_6",
                "param_8": "arg_7",
                "param_9": "arg_8",
                "FUN_08001814": "update_data_helper",
                "param_2": "new_data",
                "param_3": "data_size",
                "FUN_080058e0": "get_data_end",
                "param_4": "data_offset",
                "param_5": "arg_4",
                "FUN_08001a66": "set_data",
                "extraout_r1": "data_end"
            },
            "code": "int update_data_08001ab0(int data_ptr, int new_data, int data_size, int data_offset, int arg_4, int arg_5, int arg_6, int arg_7, int arg_8, int arg_9, int arg_10, int arg_11){\n  int data_end;\n  data_end = data_ptr + data_size;\n  *(int *)(data_ptr + 0x3c) = data_offset;\n  *(int *)(data_ptr + 0x38) = new_data;\n  *(int *)(data_ptr + 0x40) = arg_4;\n  *(char *)(data_ptr + 0x70) = 0;\n  init_data(data_ptr,new_data,0,0,DAT_08001b10,DAT_08001b14);\n  *(int *)(data_ptr + 0x58) = 100;\n  set_data(data_ptr,arg_11);\n  update_data_08001ab0_helper(data_ptr,data_end,arg_5,arg_6,arg_7,arg_8,arg_9,arg_10);\n  return data_ptr;\n}",
            "called": [
                "FUN_08001814",
                "FUN_08001a66",
                "FUN_08001960",
                "FUN_080058e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001b18"
            ],
            "imported": true,
            "current_name": "update_data_08001ab0"
        },
        "FUN_08006ac0": {
            "renaming": {
                "uVar10": "data_u_2",
                "bVar11": "bool_val",
                "uVar12": "undefined_val",
                "FUN_08006ac0": "process_data_08006ac0",
                "iVar2": "data_i",
                "piVar4": "int_ptr_2",
                "iVar7": "data_i_2",
                "piVar3": "int_ptr_1",
                "iVar9": "data_i",
                "UNRECOVERED_JUMPTABLE_00": "jumptable_ptr",
                "puVar1": "data_ptr",
                "uVar5": "data_u",
                "uVar6": "data_s",
                "pcVar8": "code_ptr_1"
            },
            "code": "void process_data_08006ac0(void)\n{\n  uint *data_ptr;\n  int i;\n  int *int_ptr_1;\n  int *int_ptr_2;\n  uint data_u;\n  ushort data_s;\n  int data_i;\n  code *code_ptr_1;\n  int data_i_2;\n  uint data_u_2;\n  code *jumptable_ptr;\n  bool bool_val;\n  undefined8 undefined_val;\n  \n  init_function(6);\n  jumptable_ptr = (code *)0x8006acf;\n  undefined_val = get_data(1);\n  int_ptr_1 = (int *)((ulonglong)undefined_val >> 0x20);\n  data_ptr = (uint *)undefined_val;\n  data_s = *(ushort *)(int_ptr_1 + 3);\n  data_u = (uint)data_s;\n  if ((int)(data_u << 0x1c) < 0) {\n    data_i = int_ptr_1[4];\n    if (data_i != 0) {\n      data_i_2 = data_u << 0x1e;\n      bool_val = data_i_2 != 0;\n      if (bool_val) {\n        data_i_2 = 0;\n      }\n      data_i = *int_ptr_1;\n      if (!bool_val) {\n        data_i_2 = int_ptr_1[5];\n      }\n      *int_ptr_1 = data_i;\n      int_ptr_1[2] = data_i_2;\n      for (data_i = data_i - data_i; 0 < data_i; data_i = data_i - data_i_2) {\n        data_i_2 = (*(code *)int_ptr_1[10])(data_ptr,int_ptr_1[8],data_i,data_i - data_i_2);\n        if (data_i_2 < 1) {\n          data_s = *(ushort *)(int_ptr_1 + 3);\n          goto LAB_08006bc6;\n        }\n        data_i = data_i + data_i_2;\n      }\n    }\n  }\n  else if (((0 < int_ptr_1[1]) || (0 < int_ptr_1[0x10])) &&\n          (code_ptr_1 = (code *)int_ptr_1[0xb], code_ptr_1 != (code *)0x0)) {\n    data_u_2 = *data_ptr;\n    *data_ptr = 0;\n    if ((data_s & 0x1000) == 0) {\n      data_i = (*code_ptr_1)(data_ptr,int_ptr_1[8],data_u & 0x1000,1);\n      if ((data_i == -1) && (data_u = *data_ptr, data_u != 0)) {\n        if ((data_u != 0x1d) && (data_u != 0x16)) {\n          *(ushort *)(int_ptr_1 + 3) = *(ushort *)(int_ptr_1 + 3) | 0x40;\n          jumptable_ptr();\n          return;\n        }\n        *data_ptr = data_u_2;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      data_i = int_ptr_1[0x15];\n    }\n    if (((int)((uint)*(ushort *)(int_ptr_1 + 3) << 0x1d) < 0) &&\n       (data_i = data_i - int_ptr_1[1], int_ptr_1[0xd] != 0)) {\n      data_i = data_i - int_ptr_1[0x10];\n    }\n    data_i = (*(code *)int_ptr_1[0xb])(data_ptr,int_ptr_1[8],data_i,0);\n    data_s = *(ushort *)(int_ptr_1 + 3);\n    if ((data_i == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((DAT_08006bdc >> (*data_ptr & 0xff)) << 0x1f)))) {\nLAB_08006bc6:\n      *(ushort *)(int_ptr_1 + 3) = data_s | 0x40;\n      jumptable_ptr(0xffffffff);\n      return;\n    }\n    int_ptr_1[1] = 0;\n    *int_ptr_1 = int_ptr_1[4];\n    if (((int)((uint)data_s << 0x13) < 0) && ((data_i != -1 || (*data_ptr == 0)))) {\n      int_ptr_1[0x15] = data_i;\n    }\n    int_ptr_2 = (int *)int_ptr_1[0xd];\n    *data_ptr = data_u_2;\n    if (int_ptr_2 != (int *)0x0) {\n      if (int_ptr_2 != int_ptr_1 + 0x11) {\n        cleanup_data(data_ptr);\n      }\n      int_ptr_1[0xd] = 0;\n      jumptable_ptr();\n      return;\n    }\n  }\nLAB_08006aea:\n  jumptable_ptr(0);\n  return;\n}",
            "called": [
                "FUN_0800573c",
                "FUN_080061f0",
                "FUN_08006f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_0800611c",
                "FUN_08007090"
            ],
            "imported": true,
            "current_name": "process_data_08006ac0"
        },
        "FUN_08004198": {
            "renaming": {
                "sVar1": "counter",
                "FUN_08004198": "process_data_08004198",
                "first_char": "first_char",
                "param_1": "data",
                "pbVar2": "byte_ptr",
                "data_type": "data_type",
                "value": "value",
                "data_ptr": "data_ptr"
            },
            "code": "int process_data_08004198(int *data)\n{\n  char first_char = *(char *)((int)data + 0x39);\n  if (first_char != '!') {\n    return 2;\n  }\n  int data_type = data[2];\n  int *data_ptr = (int *)*data;\n  if (data_type == 0x1000) {\n    int value = *(unsigned short *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n    *(unsigned int *)(data_ptr + 1) = value;\n  }\n  else {\n    byte *byte_ptr = (byte *)data[8];\n    data[8] = (int)(byte_ptr + 1);\n    *(unsigned int *)(data_ptr + 1) = (unsigned int)*byte_ptr;\n  }\n  short counter = *(short *)((int)data + 0x26) - 1;\n  *(short *)((int)data + 0x26) = counter;\n  if (counter == 0) {\n    *(unsigned int *)(data_ptr + 3) &= 0xffffff7f;\n    *(unsigned int *)(data_ptr + 3) |= 0x40;\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004198",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": true,
            "current_name": "process_data_08004198"
        },
        "FUN_08001c3c": {
            "renaming": {
                "iVar1": "result",
                "byte": "byte_divisor",
                "FUN_08002494": "set_value",
                "FUN_08001c3c": "check_param_and_set_value_08001c3c",
                "PTR_DAT_08001c7c": "byte_divisor_ptr",
                "param_1": "new_param",
                "PTR_DAT_08001c84": "value_ptr",
                "PTR_DAT_08001c80": "divisor_ptr",
                "0xf": "MAX_PARAM_VALUE"
            },
            "code": "int check_param_and_set_value_08001c3c(uint new_param)\n{\n  uint divisor = *(uint *)PTR_DAT_08001c80 / (1000 / (byte)*PTR_DAT_08001c7c);\n  int result = FUN_08002514(divisor);\n  if (result != 0) {\n    return 1;\n  }\n  if (new_param > 0xf) {\n    return 1;\n  }\n  FUN_08002494(0xffffffff, new_param, 0);\n  *(uint *)PTR_DAT_08001c84 = new_param;\n  return 0;\n}",
            "called": [
                "FUN_08002494",
                "FUN_08002514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3c",
            "calling": [
                "FUN_08003afa",
                "FUN_08001c88"
            ],
            "imported": true,
            "current_name": "check_param_and_set_value_08001c3c"
        },
        "FUN_08001c3a": {
            "renaming": {
                "FUN_08001c3a": "do_nothing_08001c3a"
            },
            "code": "\nvoid do_nothing_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3a",
            "calling": [
                "FUN_08001c88"
            ],
            "imported": true,
            "current_name": "do_nothing_08001c3a"
        },
        "FUN_08000a2c": {
            "renaming": {
                "FUN_08000a2c": "is_valid_input_08000a2c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08000a2c(uint input1, int input2, uint input3, int input4)\n{\n  bool is_input2_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n  bool is_input4_valid = ((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0));\n\n  if (is_input2_valid && is_input4_valid) {\n    return 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a2c",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": true,
            "current_name": "is_valid_input_08000a2c"
        },
        "FUN_08001366": {
            "renaming": {
                "FUN_08001366": "print_character_at_offset_08001366",
                "param_1": "buffer_offset",
                "param_2": "character_to_print",
                "param_3": "max_offset",
                "param_4": "param_4",
                "cVar1": "character_from_buffer"
            },
            "code": "void print_character_at_offset_08001366(int buffer_offset,char character_to_print,uint max_offset,undefined4 param_4)\n{\n  char character_from_buffer;\n  \n  if (max_offset > 3) {\n    max_offset = 3;\n  }\n  if ((int)(uint)*(byte *)(buffer_offset + 0x17) <= (int)max_offset) {\n    max_offset = *(byte *)(buffer_offset + 0x17) - 1 & 0xff;\n  }\n  character_from_buffer = *(char *)(max_offset + buffer_offset + 0x18);\n  print_character(buffer_offset, character_to_print + character_from_buffer | 0x80, 0, character_from_buffer, param_4);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001366",
            "calling": [
                "FUN_08000bcc",
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "print_character_at_offset_08001366"
        },
        "FUN_08005848": {
            "renaming": {
                "iVar1": "index",
                "puVar3": "data_pointer",
                "param_1": "input_index",
                "FUN_08005848": "process_input_08005848",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "input_data",
                "uVar2": "character_value",
                "uVar4": "character_index"
            },
            "code": "void process_input_08005848(uint input_index, undefined4 value_1, undefined4 value_2, undefined *input_data)\n{\n  int index;\n  undefined4 character_value;\n  undefined *data_pointer;\n  uint character_index;\n  \n  if (input_index < 0x3c) {\n    character_index = (uint)(char)PTR_DAT_08005888[input_index];\n    data_pointer = PTR_DAT_08005888;\n  }\n  else {\n    character_index = 0xffffffff;\n    data_pointer = input_data;\n  }\n  \n  if ((character_index != 0xffffffff) && (index = decode_character(character_index, PTR_DAT_0800588c, value_2, data_pointer, input_data), index != 0)) {\n    character_value = get_character_value((character_index << 0x18) >> 0x1c);\n    set_bit(character_value, 1 << (character_index & 0xf) & 0xffff, value_1);\n  }\n  return;\n}",
            "called": [
                "FUN_080047f4",
                "FUN_08004c30",
                "FUN_08004848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005848",
            "calling": [
                "FUN_08001310",
                "FUN_08000bcc",
                "FUN_080012c0",
                "FUN_08000cd0",
                "FUN_0800157c",
                "FUN_080012a2",
                "FUN_080012e8",
                "FUN_080013a4",
                "FUN_080015b2"
            ],
            "imported": true,
            "current_name": "process_input_08005848"
        },
        "FUN_08000ae8": {
            "renaming": {
                "FUN_08000ae8": "send_software_interrupt_08000ae8",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void send_software_interrupt_08000ae8(void)\n{\n  software_interrupt(SOFTWARE_INTERRUPT_NUMBER);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ae8",
            "calling": [
                "FUN_08000aec"
            ],
            "imported": true,
            "current_name": "send_software_interrupt_08000ae8"
        },
        "FUN_08003ed8": {
            "renaming": {
                "param_1": "data",
                "FUN_08003ed8": "process_data_08003ed8",
                "puVar1": "data_ptr"
            },
            "code": "void process_data_08003ed8(uint **data){\n  uint *data_ptr;\n  data[0][61] = 2;\n  data_ptr = *data;\n  if((data_ptr[8] & 0x1111) == 0){\n    if((data_ptr[8] & 0x444) == 0){\n      *data_ptr = *data_ptr & 0xfffffffe;\n    }\n  }\n  execute_subroutine(data);\n  data[0][61] = 0;\n  data[0][15] = 0;\n  return;\n}",
            "called": [
                "FUN_08004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ed8",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": true,
            "current_name": "process_data_08003ed8"
        },
        "FUN_080061e0": {
            "renaming": {
                "param_1": "memory",
                "FUN_080061e0": "fill_memory_with_value_080061e0",
                "*param_1": "*memory",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "end_address"
            },
            "code": "void fill_memory_with_value_080061e0(unsigned char *memory, unsigned char value, int length) {\n  unsigned char *end_address = memory + length;\n  for (; memory != end_address; memory++) {\n    *memory = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061e0",
            "calling": [
                "FUN_08004a4c",
                "FUN_08006c88",
                "FUN_08006d14",
                "FUN_08006c40"
            ],
            "imported": true,
            "current_name": "fill_memory_with_value_080061e0"
        },
        "FUN_08005604": {
            "renaming": {
                "iVar2": "result",
                "iVar3": "selected_item",
                "uVar1": "random_index",
                "PTR_DAT_0800564c": "value_list_pointer",
                "FUN_08005604": "select_and_execute_operation_08005604",
                "PTR_DAT_08005644": "item_list_pointer",
                "PTR_DAT_08005648": "operation_list_pointer"
            },
            "code": "void select_and_execute_operation_08005604(void)\n{\n  uint random_index = get_random_index();\n  int selected_item = *(int *)(PTR_DAT_08005644 + random_index * 4);\n  if ((random_index < 5) && (selected_item != -1)) {\n    int result = (**(code **)(PTR_DAT_08005648 + random_index * 4))(selected_item);\n    if (result != -1) {\n      uint byte_offset = *(byte *)(selected_item + 0x44);\n      uint dword_offset = *(ushort *)(selected_item + 0x6a);\n      uint value = *(int *)(PTR_DAT_0800564c + byte_offset * 4);\n      uint final_value = value + dword_offset;\n      execute_operation(final_value, 1);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080055bc",
                "FUN_0800455a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080045fe"
            ],
            "imported": true,
            "current_name": "select_and_execute_operation_08005604"
        },
        "FUN_08005724": {
            "renaming": {
                "undefined4": "int",
                "FUN_08005724": "returnOne_08005724"
            },
            "code": "int returnOne_08005724(void) {\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005724",
            "calling": [
                "FUN_08007028"
            ],
            "imported": true,
            "current_name": "returnOne_08005724"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "returnZero_08005728"
            },
            "code": "int32_t returnZero_08005728(void)\n{\n  int32_t result = 0;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08007048"
            ],
            "imported": true,
            "current_name": "returnZero_08005728"
        },
        "FUN_0800135a": {
            "renaming": {
                "FUN_08001310": "execute_function_with_four_parameters",
                "param_1": "function",
                "param_2": "parameter1",
                "param_3": "parameter2",
                "param_4": "parameter3",
                "FUN_0800135a": "execute_function_with_parameters_0800135a"
            },
            "code": "void execute_function_with_parameters_0800135a(undefined4 function, undefined4 parameter1, undefined4 parameter2, undefined4 parameter3)\n{\n  execute_function_with_four_parameters(function, 1, 0, parameter3, parameter3);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800135a",
            "calling": [
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_080013a4"
            ],
            "imported": true,
            "current_name": "execute_function_with_parameters_0800135a"
        },
        "FUN_08005c96": {
            "renaming": {
                "uVar1": "arg_3",
                "param_1": "function_ptr",
                "param_2": "arg_count",
                "param_3": "arg_1",
                "param_4": "arg_2",
                "FUN_08005c96": "execute_function_08005c96"
            },
            "code": "int execute_function_08005c96(int *function_ptr, int arg_count, undefined4 arg_1, undefined4 arg_2)\n{\n  undefined4 result;\n  if (arg_count != 0) {\n    undefined4 arg_3 = FUN_08000178(arg_count);\n    result = (**(code **)(*function_ptr + 4))(function_ptr, arg_count, arg_3, *(code **)(*function_ptr + 4), arg_2);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c96",
            "calling": [
                "FUN_08005da8",
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_08005cd4"
            ],
            "imported": true,
            "current_name": "execute_function_08005c96"
        },
        "FUN_0800571a": {
            "renaming": {
                "undefined4": "int",
                "param_1": "address",
                "param_2": "flags",
                "PTR_": "",
                "DAT_": "",
                "FUN_0800571a": "set_memory_protection_flags_0800571a"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ set_memory_protection_flags_0800571a(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_zDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800571a",
            "calling": [
                "FUN_08007004"
            ],
            "imported": true,
            "current_name": "set_memory_protection_flags_0800571a"
        },
        "FUN_08002efc": {
            "renaming": {
                "param_1": "input_data",
                "puVar1": "flag_ptr",
                "FUN_08002efc": "process_input_08002efc"
            },
            "code": "int process_input_08002efc(uint **input_data) {\n  uint *flag_ptr;\n  flag_ptr = input_data[11];\n  if (*(char *)((int)input_data + 61) == '!') {\n    if (*(short *)((int)input_data + 42) == 0) {\n      if (((flag_ptr == (uint *)0x4) || (flag_ptr == (uint *)0x8)) || (flag_ptr == (uint *)0xffff0000)) {\n        (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n        **input_data = **input_data | 0x200;\n        input_data[12] = (uint *)0x0;\n        *(undefined *)((int)input_data + 61) = 0x20;\n        if (*(char *)((int)input_data + 62) == '@') {\n          *(undefined *)((int)input_data + 62) = 0;\n          do_nothing_08002db0();\n        }\n        else {\n          *(undefined *)((int)input_data + 62) = 0;\n          do_nothing_08002c4e();\n        }\n      }\n      else {\n        (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n        input_data[12] = (uint *)0x11;\n        *(undefined *)((int)input_data + 62) = 0;\n        *(undefined *)((int)input_data + 61) = 0x20;\n        do_nothing_08002c4e();\n      }\n    }\n    else {\n      flag_ptr = input_data[9];\n      input_data[9] = (uint *)((int)flag_ptr + 1);\n      (*input_data)[4] = (uint)*(byte *)flag_ptr;\n      *(short *)((int)input_data + 42) = *(short *)((int)input_data + 42) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efc",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "process_input_08002efc"
        },
        "FUN_0800365c": {
            "renaming": {
                "PTR_DAT_08003680": "pointer_variable",
                "param_1": "num",
                "local_4": "countdown",
                "DAT_08003684": "constant_factor",
                "FUN_0800365c": "count_down_0800365c"
            },
            "code": "void count_down_0800365c(int num) {\n  int countdown = num * ((unsigned long long)DAT_08003684 * (unsigned long long)*PTR_DAT_08003680 >> 0x29);\n  do {\n    countdown--;\n  } while (countdown != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800365c",
            "calling": [
                "FUN_08003688"
            ],
            "imported": true,
            "current_name": "count_down_0800365c"
        },
        "FUN_080033b8": {
            "renaming": {
                "iVar1": "data_ptr",
                "param_1": "data",
                "DAT_08003504": "DATA_FLAG2",
                "FUN_08002ca6": "process_data_10",
                "uVar3": "flag2",
                "uVar2": "flag1",
                "FUN_08002efc": "process_data_7",
                "uVar4": "flag3",
                "FUN_080032b4": "process_data_9",
                "FUN_080033b8": "process_data_080033b8",
                "DAT_0800350c": "DATA_FLAG3",
                "DAT_08003518": "DATA_FLAG1",
                "FUN_08002f9c": "process_data_4",
                "FUN_08002cf2": "process_data_8",
                "FUN_08002db2": "process_data_6",
                "FUN_08002ad8": "process_data_11",
                "DAT_08003510": "DATA_FLAG6",
                "FUN_080028de": "process_data_1",
                "DAT_08003514": "DATA_FLAG5",
                "FUN_08002ab8": "process_data_13",
                "FUN_08002848": "process_data_3",
                "FUN_0800306c": "process_data_5",
                "FUN_08002c54": "process_data_12",
                "DAT_0800351c": "DATA_FLAG4",
                "FUN_080028d2": "process_data_2"
            },
            "code": "void process_data_080033b8(int *data)\n{\n  int data_ptr = *data;\n  uint flag1 = *(uint *)(data_ptr + 0x18);\n  uint flag2 = *(uint *)(data_ptr + 0x14);\n  uint flag3 = *(uint *)(data_ptr + 4);\n  \n  if ((*(char *)((int)data + 0x3e) == '\\x10') || (*(char *)((int)data + 0x3e) == '@')) {\n    if (((flag2 & 0x10001) == 0) || ((flag3 & 0x200) == 0)) {\n      if (((DAT_08003518 & flag2) == 0) || ((flag3 & 0x200) == 0)) {\n        if (((DAT_08003504 & flag2) != 0) && ((flag3 & 0x200) != 0)) {\n          process_data_080033b8_1(data);\n        }\n      }\n      else {\n        process_data_080033b8_2(data);\n      }\n    }\n    else {\n      process_data_080033b8_3(data);\n    }\n    if ((DAT_0800350c & flag1) == 0) {\n      if ((((DAT_0800351c & flag2) != 0) && ((flag3 & 0x400) != 0)) && ((DAT_08003514 & flag2) == 0)) {\n        process_data_080033b8_4(data);\n        return;\n      }\n      if (((DAT_08003514 & flag2) != 0) && ((flag3 & 0x200) != 0)) {\n        process_data_080033b8_5(data);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_08003510 & flag2) != 0) && ((flag3 & 0x400) != 0)) && ((DAT_08003514 & flag2) == 0)) {\n        process_data_080033b8_6(data);\n        return;\n      }\n      if (((DAT_08003514 & flag2) != 0) && ((flag3 & 0x200) != 0)) {\n        process_data_080033b8_7(data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_08003504 & flag2) != 0) && ((flag3 & 0x200) != 0)) {\n      process_data_080033b8_8();\n      return;\n    }\n    if (((DAT_0800350c & flag2) != 0) && ((flag3 & 0x200) != 0)) {\n      process_data_080033b8_9(data);\n      return;\n    }\n    if ((DAT_0800350c & flag1) == 0) {\n      if ((((DAT_0800351c & flag2) != 0) && ((flag3 & 0x400) != 0)) && ((DAT_08003514 & flag2) == 0)) {\n        process_data_080033b8_10(data);\n        return;\n      }\n      if (((DAT_08003514 & flag2) != 0) && ((flag3 & 0x200) != 0)) {\n        process_data_080033b8_11(data);\n      }\n    }\n    else {\n      if ((((DAT_08003510 & flag2) != 0) && ((flag3 & 0x400) != 0)) && ((DAT_08003514 & flag2) == 0)) {\n        process_data_080033b8_12(data);\n        return;\n      }\n      if (((DAT_08003514 & flag2) != 0) && ((flag3 & 0x200) != 0)) {\n        process_data_080033b8_13(data);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002ab8",
                "FUN_080028de",
                "FUN_08002cf2",
                "FUN_08002db2",
                "FUN_08002efc",
                "FUN_08002ad8",
                "FUN_08002c54",
                "FUN_080032b4",
                "FUN_0800306c",
                "FUN_080028d2",
                "FUN_08002848",
                "FUN_08002f9c",
                "FUN_08002ca6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033b8",
            "calling": [],
            "imported": true,
            "current_name": "process_data_080033b8"
        },
        "FUN_080069e4": {
            "renaming": {
                "iVar3": "message_buffer",
                "uVar1": "result",
                "param_1": "output",
                "param_2": "input",
                "uVar2": "flags",
                "FUN_080069e4": "decode_message_080069e4"
            },
            "code": "uint decode_message_080069e4(undefined4 *output, undefined4 *input) {\n    uint result;\n    ushort flags;\n    int message_buffer;\n    message_buffer = *(int *)PTR_PTR_DAT_08006ab0;\n    if ((message_buffer != 0) && (*(int *)(message_buffer + 0x18) == 0)) {\n        clean_message_buffer(message_buffer);\n    }\n    if (input == (undefined4 *)PTR_DAT_08006ab4) {\n        input = *(undefined4 **)(message_buffer + 4);\n    }\n    else if (input == (undefined4 *)PTR_DAT_08006ab8) {\n        input = *(undefined4 **)(message_buffer + 8);\n    }\n    else if (input == (undefined4 *)PTR_DAT_08006abc) {\n        input = *(undefined4 **)(message_buffer + 0xc);\n    }\n    flags = *(ushort *)(input + 3);\n    result = (uint)flags;\n    if (-1 < (int)(result << 0x1c)) {\n        if (-1 < (int)(result << 0x1b)) {\n            *output = 9;\n            goto LAB_08006a14;\n        }\n        if ((int)(result << 0x1d) < 0) {\n            if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n                if ((undefined4 *)input[0xd] != input + 0x11) {\n                    handle_error(output);\n                }\n                input[0xd] = 0;\n            }\n            *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n            input[1] = 0;\n            *input = input[4];\n        }\n        *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n    }\n    if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n        handle_error(output, input);\n    }\n    flags = *(ushort *)(input + 3);\n    result = flags & 1;\n    if ((flags & 1) == 0) {\n        if (-1 < (int)((uint)flags << 0x1e)) {\n            result = input[5];\n        }\n        input[2] = result;\n    }\n    else {\n        input[2] = 0;\n        input[6] = -input[5];\n    }\n    if (input[4] == 0) {\n        flags = *(ushort *)(input + 3);\n        result = (int)(short)flags & 0x80;\n        if (result != 0) {\n            *(ushort *)(input + 3) = flags | 0x40;\n            return 0xffffffff;\n        }\n    }\n    else {\n        result = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_08006cb4",
                "FUN_080061f0",
                "FUN_08006e10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "imported": true,
            "current_name": "decode_message_080069e4"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "do_nothing_08002580"
            },
            "code": "\nvoid do_nothing_08002580(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_08002582"
            ],
            "imported": true,
            "current_name": "do_nothing_08002580"
        },
        "FUN_08004b9e": {
            "renaming": {
                "FUN_08004b9e": "initialize_program_08004b9e",
                "FUN_08002582": "load_user_settings",
                "do_nothing_08004b9c": "do_nothing",
                "FUN_08001cac": "setup_initial_configuration"
            },
            "code": "void initialize_program_08004b9e(void)\n{\n  setup_initial_configuration();\n  load_user_settings();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08004b9c",
                "FUN_08002582",
                "FUN_08001cac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9e",
            "calling": [],
            "imported": true,
            "current_name": "initialize_program_08004b9e"
        },
        "FUN_08004b9c": {
            "renaming": {
                "FUN_08004b9c": "do_nothing_08004b9c"
            },
            "code": "\nvoid do_nothing_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9c",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": true,
            "current_name": "do_nothing_08004b9c"
        },
        "FUN_08005730": {
            "renaming": {
                "FUN_08005730": "execute_function_with_params_and_double_08005730",
                "param_1": "function_id",
                "param_2": "first_param",
                "param_3": "second_param",
                "param_4": "third_param"
            },
            "code": "void execute_function_with_params_and_double_08005730(undefined4 function_id, float first_param, float second_param, double third_param, double fourth_param)\n{\n  call_function_with_params(function_id, first_param, second_param, third_param, fourth_param);\n  return;\n}",
            "called": [
                "FUN_080053d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005730",
            "calling": [
                "FUN_08006f5a"
            ],
            "imported": true,
            "current_name": "execute_function_with_params_and_double_08005730"
        },
        "FUN_08002582": {
            "renaming": {
                "FUN_08002582": "do_nothing_and_return_08002582"
            },
            "code": "void do_nothing_and_return_08002582(void)\n{\n  do_nothing_08002580();\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002582",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": true,
            "current_name": "do_nothing_and_return_08002582"
        },
        "FUN_08004884": {
            "renaming": {
                "DAT_08004928": "flag_4_return_value",
                "DAT_08004914": "flag_ptr",
                "uVar1": "return_value",
                "DAT_08004918": "flag_0_return_value",
                "DAT_08004920": "flag_2_return_value",
                "FUN_08004884": "set_flag_08004884",
                "param_1": "flag_index",
                "DAT_08004924": "flag_3_return_value",
                "DAT_0800491c": "flag_1_return_value"
            },
            "code": "uint32_t set_flag_08004884(uint32_t flag_index) {\n  uint32_t* DAT_08004914 = (uint32_t*) DAT_08004914;\n  switch(flag_index) {\n    case 0:\n      *DAT_08004914 |= 0x4;\n      return DAT_08004918;\n    case 1:\n      *DAT_08004914 |= 0x8;\n      return DAT_0800491c;\n    case 2:\n      *DAT_08004914 |= 0x10;\n      return DAT_08004920;\n    case 3:\n      *DAT_08004914 |= 0x20;\n      return DAT_08004924;\n    case 4:\n      *DAT_08004914 |= 0x40;\n      return DAT_08004928;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08004974",
                "FUN_08004bb0",
                "FUN_08004f4c"
            ],
            "imported": true,
            "current_name": "set_flag_08004884"
        },
        "FUN_08001be8": {
            "renaming": {
                "iVar1": "index",
                "puVar2": "ptr1",
                "FUN_08001be8": "copy_and_clear_memory_08001be8",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_and_clear_memory_08001be8(void)\n{\n  int index;\n  undefined4 *ptr1;\n  code *jump_table;\n  for (index = 0; PTR_DAT_08001c20 + index < DAT_08001c24; index += 4) {\n    *(undefined4 *)(PTR_DAT_08001c20 + index) = *(undefined4 *)(DAT_08001c1c + index);\n  }\n  for (ptr1 = (undefined4 *)PTR_DAT_08001c28; ptr1 < PTR_DAT_08001c2c; ptr1++) {\n    *ptr1 = 0;\n  }\n  FUN_08004d44();\n  FUN_08006198();\n  jump_table = (code *)0x8001c1a;\n  FUN_08005f6c();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08005f6c",
                "FUN_08006198",
                "FUN_08004d44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": true,
            "current_name": "copy_and_clear_memory_08001be8"
        },
        "FUN_080061f0": {
            "renaming": {
                "piVar4": "node_data",
                "param_1": "head",
                "FUN_080061f0": "add_to_linked_list_080061f0",
                "ppiVar6": "next_node",
                "ppiVar7": "current_node",
                "param_2": "new_node_data",
                "param_3": "size_of_node_data",
                "param_4": "error_code",
                "puVar1": "pointer_to_linked_list",
                "ppiVar2": "next_node",
                "extraout_r1": "next_node",
                "ppiVar3": "next_node_end",
                "ppiVar5": "current_head"
            },
            "code": "void add_to_linked_list_080061f0(int **head, int *new_node_data, int size_of_node_data, int *error_code) {\n  if (size_of_node_data == 0) {\n    return;\n  }\n  int **current_node = (int **)(size_of_node_data + -4 + (int)new_node_data);\n  if (*(int *)(size_of_node_data + -4 + (int)new_node_data) < 0) {\n    current_node = (int **)((int)current_node + *(int *)(size_of_node_data + -4 + (int)new_node_data));\n  }\n  do_nothing_08006eac();\n  int **current_head = *head;\n  if (current_head == (int **)0x0) {\n    current_node[1] = (int *)0x0;\n    *head = current_node;\n    int **next_node = NULL;\n  } else if (current_node < current_head) {\n    int **next_node = *current_node;\n    int **next_node_end = (int **)((int)current_node + (int)next_node);\n    if (current_head == next_node_end) {\n      int *node_data = *current_head;\n      current_head = (int **)current_head[1];\n      next_node_end = (int **)((int)node_data + (int)next_node);\n      *current_node = (int *)next_node_end;\n    }\n    current_node[1] = (int *)current_head;\n    *head = current_node;\n  } else {\n    int **next_node = current_head;\n    while (next_node != (int **)0x0 && next_node <= current_node) {\n      current_head = next_node;\n      next_node = (int **)next_node[1];\n    }\n    int **next_node_end = (int **)((int)current_head + (int)*current_head);\n    if (current_node == next_node_end) {\n      int *node_data = *next_node;\n      next_node = (int **)next_node[1];\n      next_node_end = (int **)((int)node_data + (int)*current_head);\n      *current_head = (int *)next_node_end;\n      current_head[1] = (int *)next_node;\n    } else if (current_node < next_node_end) {\n      *error_code = 0xc;\n      return;\n    } else {\n      current_node[1] = (int *)next_node;\n      current_head[1] = (int *)current_node;\n    }\n  }\n  do_nothing_08006eae(error_code,next_node,next_node_end,NULL);\n  return;\n}",
            "called": [
                "FUN_08006eae",
                "FUN_08006eac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061f0",
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "imported": true,
            "current_name": "add_to_linked_list_080061f0"
        },
        "FUN_08002348": {
            "renaming": {
                "0xffffeefe": "mask",
                "iVar1": "result",
                "*(undefined *)(param_1 + 0x24)": "flag_value",
                "param_1": "input_param",
                "*(char *)(param_1 + 0x24)": "flag",
                "FUN_08002348": "check_and_set_flag_08002348",
                "*(uint *)(param_1 + 0x28)": "data",
                "1": "FLAG_BIT",
                "2": "FLAG_SET",
                "FUN_080020f0": "call_function"
            },
            "code": "int check_and_set_flag_08002348(int input_param)\n{\n  int result;\n  bool flag = (*(char *)(input_param + 0x24) == '\\x01');\n  if (flag) {\n    result = 2;\n  }\n  else {\n    *(undefined *)(input_param + 0x24) = 1;\n    result = call_function();\n    if (result == 0) {\n      *(uint *)(input_param + 0x28) = *(uint *)(input_param + 0x28) & 0xffffeefe | 1;\n    }\n    *(undefined *)(input_param + 0x24) = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002348",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "check_and_set_flag_08002348"
        },
        "FUN_080060d4": {
            "renaming": {
                "FUN_08005f8c": "get_result_index",
                "iVar1": "index",
                "param_1": "func_param",
                "FUN_080060d4": "execute_function_080060d4",
                "FUN_08007090": "perform_initialization"
            },
            "code": "void execute_function_080060d4(int func_param) {\n  int index = *(int *)(func_param + 8);\n  if (index != 0) {\n    (**(code **)(func_param + 0xc))();\n    return;\n  }\n  perform_initialization();\n  int result_index = get_result_index();\n  if (*(int *)(PTR_DAT_08006100 + result_index * 0x14 + 0xc) != 0) {\n    execute_function_080060d4();\n  }\n  return;\n}",
            "called": [
                "FUN_08007090"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060d4",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": true,
            "current_name": "execute_function_080060d4"
        },
        "FUN_08005a68": {
            "renaming": {
                "bVar1": "mask",
                "iVar2": "count",
                "param_1": "flags",
                "UNRECOVERED_JUMPTABLE": "jumptable",
                "unaff_r6": "unaff_r6",
                "FUN_08005a68": "set_flags_08005a68",
                "pbVar3": "pb",
                "unaff_r4": "value",
                "param_2": "param_2",
                "param_3": "action",
                "extraout_r1": "index"
            },
            "code": "void set_flags_08005a68(int flags, undefined4 param_2, byte action)\n{\n  uint index = 0;\n  byte mask = action & 7;\n  int count = 0;\n  int value = 0;\n  if (mask == 4) {\n    count = 7;\n  }\n  else if (mask == 6) {\n    count = 8;\n  }\n  else if (mask == 2) {\n    count = 6;\n  }\n\n  if ((action & 0x30) == 0x30) {\n    value = 0x600;\n    count++;\n  }\n  else if ((action & 0x20) == 0) {\n    value = 0;\n  }\n  else {\n    value = 0x400;\n    count++;\n  }\n\n  if ((action & 8) == 0) {\n    *(undefined4 *)(flags + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(flags + 0x124) = 0x2000;\n  }\n\n  if (count == 8) {\n    *(undefined4 *)(flags + 0x120) = 0;\n  }\n  else if (count == 9) {\n    *(undefined4 *)(flags + 0x120) = 0x1000;\n  }\n\n  if (count != 0) {\n    FUNC_08004f4c(flags + 0xd4);\n    FUN_08005510(flags + 0xd4,uRam08005b14);\n    return;\n  }\n\n  code *jumptable = (code *)0x8005b12;\n  int index2 = iRam08005b1c;\n  FUN_0800611c(uRam08005b20,299,iRam08005b1c,uRam08005b18);\n  byte *pbVar3 = *(byte **)(index + unaff_r6);\n  *(undefined *)(index2 + 0x1e) = unaff_r4;\n  *(undefined *)(*pbVar3 + 0x1e) = 0;\n  if (index < 0x3c) {\n    uRam0000012d = PTR_DAT_08005b38[index];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n  (*jumptable)();\n  return;\n}",
            "called": [
                "FUN_0800611c",
                "FUN_08005510",
                "FUN_08004f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": true,
            "current_name": "set_flags_08005a68"
        },
        "FUN_08001814": {
            "renaming": {
                "bVar4": "is_not_single",
                "iVar1": "status",
                "param_1": "data",
                "param_6": "param_6",
                "param_7": "param_7",
                "param_8": "param_8",
                "FUN_08001814": "initialize_data_08001814",
                "param_9": "param_9",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "uVar3": "uVar1",
                "uVar2": "result2",
                "uVar5": "result1",
                "uVar7": "result5",
                "uVar6": "result3"
            },
            "code": "void initialize_data_08001814(undefined4 *data, undefined4 param_2, undefined4 param_3, undefined4 param_4, undefined4 param_5, undefined4 param_6, undefined4 param_7, undefined4 param_8, int param_9) {\n  int status;\n  undefined uVar1;\n  bool is_not_single = param_9 != 1;\n  status = FUN_080009dc(param_3, param_4, 0, 0);\n  if ((status == 0) && (status = FUN_080009dc(param_5, param_6, 0, 0), status == 0) && (status = FUN_080009dc(param_7, param_8, 0, 0), status == 0)) {\n    data[13] = param_9;\n    uVar1 = is_not_single ? 0 : 1;\n    *(undefined *)((int)data + 0x71) = uVar1;\n    *data = param_3;\n    data[1] = param_4;\n    data[2] = param_5;\n    data[3] = param_6;\n    data[4] = param_7;\n    data[5] = param_8;\n    undefined8 result1 = FUN_0800040c(data[22]);\n    result1 = FUNC_0800074c((int)result1, (int)((ulonglong)result1 >> 0x20), 0, DAT_080018f4);\n    undefined4 result2 = (undefined4)((ulonglong)result1 >> 0x20);\n    data[6] = param_3;\n    data[7] = param_4;\n    undefined8 result3 = FUNC_080004f8(param_5, param_6, (int)result1, result2);\n    *(undefined8 *)(data + 8) = result3;\n    undefined8 result4 = FUNC_0800074c(param_7, param_8, (int)result1, result2);\n    *(undefined8 *)(data + 10) = result4;\n    if (data[12] == 1) {\n      undefined8 result5 = FUNC_08000190(0, 0, param_3, param_4);\n      *(undefined8 *)(data + 6) = result5;\n      result3 = FUNC_08000190(0, 0, (int)result3, (int)((ulonglong)result3 >> 0x20));\n      *(undefined8 *)(data + 8) = result3;\n      result4 = FUNC_08000190(0, 0, (int)result4, (int)((ulonglong)result4 >> 0x20));\n      *(undefined8 *)(data + 10) = result4;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001814",
            "calling": [
                "FUN_080018f8",
                "FUN_08001ab0"
            ],
            "imported": true,
            "current_name": "initialize_data_08001814"
        },
        "FUN_08000aec": {
            "renaming": {
                "uVar1": "result",
                "param_1": "input_param1",
                "FUN_08000ae8": "call_function",
                "FUN_08000aec": "check_and_call_function_08000aec",
                "param_4": "input_param4"
            },
            "code": "int check_and_call_function_08000aec(int input_param1, int input_param4) {\n  int result;\n  if (*(int *)PTR_DAT_08000b04 != 0) {\n    result = 0;\n  }\n  else {\n    result = call_function(1, input_param1, 0, 0, input_param4);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000ae8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": true,
            "current_name": "check_and_call_function_08000aec"
        },
        "FUN_0800572c": {
            "renaming": {
                "FUN_0800572c": "returnZero_0800572c"
            },
            "code": "int returnZero_0800572c(void) {\n  int result = 0;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800572c",
            "calling": [
                "FUN_0800706c"
            ],
            "imported": true,
            "current_name": "returnZero_0800572c"
        },
        "FUN_08004e12": {
            "renaming": {
                "iVar1": "function_ptr_address",
                "FUN_08004df4": "get_function_ptr_address",
                "(code *)0x0": "null_pointer",
                "FUN_08004e12": "execute_function_if_not_null_08004e12",
                "*(code **)(iVar1 + 0x48)": "function_pointer"
            },
            "code": "void execute_function_if_not_null_08004e12(void)\n{\n  int function_ptr_address = get_function_ptr_address();\n  if (*(code **)(function_ptr_address + 0x48) != (code *)0x0) {\n    (**(code **)(function_ptr_address + 0x48))();\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": true,
            "current_name": "execute_function_if_not_null_08004e12"
        },
        "FUN_08000a58": {
            "renaming": {
                "iVar2": "shifted_value",
                "uVar1": "shift_amount",
                "param_1": "integer_part",
                "param_2": "fractional_part",
                "uVar3": "result",
                "FUN_08000a58": "convert_to_signed_fixed_point_08000a58"
            },
            "code": "uint convert_to_signed_fixed_point_08000a58(uint integer_part, uint fractional_part)\n{\n  uint shift_amount;\n  int shifted_value;\n  uint result;\n  \n  shifted_value = fractional_part * 2 + 0x200000;\n  if (fractional_part * 2 < 0xffe00000) {\n    if (shifted_value >= 0) {\n      return 0;\n    }\n    shift_amount = (-shifted_value >> 0x15) - 0x3e1;\n    if (shift_amount < 0xfffffc20 && shift_amount != 0) {\n      result = (fractional_part << 0xb | 0x80000000 | integer_part >> 0x15) >> (shift_amount & 0xff);\n      if ((fractional_part & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((integer_part | fractional_part << 0xc) != 0) {\n    return 0;\n  }\n  fractional_part = fractional_part & 0x80000000;\n  if (fractional_part == 0) {\n    fractional_part = 0x7fffffff;\n  }\n  return fractional_part;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a58",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": true,
            "current_name": "convert_to_signed_fixed_point_08000a58"
        },
        "FUN_08001b48": {
            "renaming": {
                "iVar1": "result",
                "local_c": "array2[4]",
                "local_4c": "array3[1]",
                "local_1c": "array2[1]",
                "local_3c": "array4[2]",
                "local_38": "array4[3]",
                "local_10": "array2[3]",
                "local_54": "array3",
                "uVar2": "value",
                "local_20": "array2[0]",
                "local_30": "array1",
                "local_40": "array4[1]",
                "local_14": "array2[2]",
                "local_34": "array4[4]",
                "FUN_08001b48": "initialize_08001b48",
                "local_44": "array4[0]"
            },
            "code": "void initialize_08001b48(){\n  int result;\n  uint value;\n  int array1[1] = {2};\n  int array2[4] = {0x10, 2, 0, 0x380000};\n  int array3[2] = {2, 0x8000};\n  int array4[5] = {0xf, 2, 0, 0x400, 0};\n  result = FUNC_08003688(array1);\n  if (result != 0) {\n    FUN_08004d40(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x88);\n  }\n  result = FUN_08003ad4(array4);\n  if (result != 0) {\n    FUN_08004d40(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x95);\n  }\n  result = FUN_08003c90(array3);\n  if (result != 0) {\n    FUN_08004d40(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x9c);\n  }\n  value = FUN_08003c44();\n  FUN_08002514((uint)((ulonglong)DAT_08001be0 * (ulonglong)value >> 0x26));\n  FUN_08002560(4);\n  FUN_08002494(0xffffffff,0);\n}",
            "called": [
                "FUN_08003c90",
                "FUN_08002494",
                "FUN_08002560",
                "FUN_08004d40",
                "FUN_08003c44",
                "FUN_08003ad4",
                "FUN_08002514",
                "FUN_08003688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": true,
            "current_name": "initialize_08001b48"
        },
        "FUN_08004092": {
            "renaming": {
                "*(uint *)(param_1 + 0x20)": "*data",
                "param_1": "data",
                "~(1 << (param_2 & 0xff))": "~mask",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "param_3 << (param_2 & 0xff)": "bit_value << (bit_position & 0xff)",
                "FUN_08004092": "set_bit_08004092"
            },
            "code": "void set_bit_08004092(uint32_t *data, uint8_t bit_position, uint8_t bit_value) {\n  uint32_t mask = 1 << (bit_position & 0xff);\n  *data = (*data & ~mask) | (bit_value << (bit_position & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004092",
            "calling": [
                "FUN_080040b0"
            ],
            "imported": true,
            "current_name": "set_bit_08004092"
        },
        "FUN_08005cd4": {
            "renaming": {
                "FUN_08005cd4": "calculate_sum_of_functions_08005cd4",
                "iVar1": "first_value",
                "iVar2": "second_value",
                "FUN_08005cc0": "calculate_value",
                "param_1": "input_param",
                "FUN_08005c96": "get_first_value"
            },
            "code": "int calculate_sum_of_functions_08005cd4(int input_param)\n{\n  int first_value = get_first_value();\n  int second_value = calculate_value(input_param);\n  return second_value + first_value;\n}",
            "called": [
                "FUN_08005c96",
                "FUN_08005cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cd4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "calculate_sum_of_functions_08005cd4"
        },
        "FUN_08005bb0": {
            "renaming": {
                "FUN_08005bb0": "process_data_08005bb0",
                "param_1": "input_value",
                "FUN_08005b54": "process_data_helper",
                "param_2": "limit"
            },
            "code": "void process_data_08005bb0(int input_value, int limit, undefined4 param_3, undefined4 param_4)\n{\n  if (input_value != 1) {\n    return;\n  }\n  if (limit == 0xffff) {\n    process_data_08005bb0_helper(PTR_DAT_08005bd0, DAT_08005bcc, param_3, 0xffff, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08005b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb0",
            "calling": [],
            "imported": true,
            "current_name": "process_data_08005bb0"
        },
        "FUN_080014ba": {
            "renaming": {
                "param_11": "value9",
                "param_12": "value10",
                "param_10": "value8",
                "param_13": "value11",
                "FUN_080014ba": "set_parameters_080014ba",
                "param_1": "address",
                "param_6": "value4",
                "param_7": "value5",
                "param_8": "value6",
                "param_9": "value7",
                "param_2": "flag",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "value3"
            },
            "code": "void set_parameters_080014ba(int address, int flag, undefined value1, undefined4 value2, undefined value3,\n                 undefined value4, undefined value5, undefined value6, undefined value7,\n                 undefined value8, undefined value9, undefined value10, undefined value11)\n{\n  *(undefined *)(address + 8) = value1;\n  *(char *)(address + 9) = (char)value2;\n  *(undefined *)(address + 10) = value3;\n  *(undefined *)(address + 0xb) = value4;\n  *(undefined *)(address + 0xc) = value5;\n  *(undefined *)(address + 0xd) = value6;\n  *(undefined *)(address + 0xe) = value7;\n  *(undefined *)(address + 0xf) = value8;\n  *(undefined *)(address + 0x10) = value9;\n  *(undefined *)(address + 0x11) = value10;\n  *(undefined *)(address + 0x12) = value11;\n  *(undefined *)(address + 0x13) = (flag == 0) ? 0x10 : 0;\n  FUN_080013a4(address, 0x10, 1, 0, (char)value2);\n  return;\n}",
            "called": [
                "FUN_080013a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ba",
            "calling": [
                "FUN_08001510"
            ],
            "imported": true,
            "current_name": "set_parameters_080014ba"
        },
        "FUN_08003c90": {
            "renaming": {
                "iVar2": "var1",
                "iVar3": "var2",
                "DAT_08003da0": "ptr",
                "param_1": "flags",
                "FUN_08003c90": "set_flags_08003c90",
                "*ptr": "ptr_value",
                "DAT_08003d9c": "DAT_08003d9c",
                "start_time": "start_time",
                "puVar1": "ptr",
                "DAT_08003d98": "DAT_08003d98",
                "uVar4": "value",
                "bVar5": "is_bit_set",
                "current_time": "current_time",
                "mask": "mask"
            },
            "code": "int set_flags_08003c90(uint *flags)\n{\n  bool is_bit_set;\n  int start_time;\n  int current_time;\n  uint value;\n  uint mask;\n  uint *DAT_08003da0;\n  int var1;\n  int var2;\n\n  is_bit_set = (*flags & 1) != 0;\n  if (is_bit_set) {\n    value = *(uint *)(DAT_08003d98 + 0x1c);\n    mask = 0x10000000;\n    if ((value & mask) == 0) {\n      *(uint *)(DAT_08003d98 + 0x1c) = value | mask;\n    }\n    if ((*DAT_08003d9c & 0x100) == 0) {\n      *DAT_08003d9c |= 0x100;\n      start_time = FUN_08001cc4();\n      while ((*DAT_08003d9c & 0x100) == 0) {\n        current_time = FUN_08001cc4();\n        if (current_time - start_time > 100) {\n          return 3;\n        }\n      }\n    }\n    DAT_08003da0 = DAT_08003da0;\n    var1 = DAT_08003d98;\n    value = *(uint *)(var1 + 0x20) & 0x300;\n    if (value != 0 && value != (flags[1] & 0x300)) {\n      value = *(uint *)(var1 + 0x20);\n      *DAT_08003da0 = 1;\n      *(uint *)(var1 + 0x20) = value & 0xfffffcff;\n      *DAT_08003da0 = 0;\n      if ((value & 1) != 0) {\n        var1 = FUN_08001cc4();\n        while ((*(uint *)(DAT_08003d98 + 0x20) & 2) == 0) {\n          var2 = FUN_08001cc4();\n          if (var2 - var1 > 5000) {\n            return 3;\n          }\n        }\n      }\n    }\n    var1 = DAT_08003d98;\n    *(uint *)(var1 + 0x20) = (*(uint *)(var1 + 0x20) & 0xfffffcff) | flags[1];\n    if ((value & mask) == 0) {\n      *(uint *)(var1 + 0x1c) &= 0xefffffff;\n    }\n  }\n  if ((*flags & 2) != 0) {\n    *(uint *)(DAT_08003d98 + 4) = (*(uint *)(DAT_08003d98 + 4) & 0xffff3fff) | flags[2];\n  }\n  if ((*flags & 0x10) != 0) {\n    *(uint *)(DAT_08003d98 + 4) = (*(uint *)(DAT_08003d98 + 4) & 0xffbfffff) | flags[3];\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c90",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "set_flags_08003c90"
        },
        "FUN_08002514": {
            "renaming": {
                "DAT_08002538": "param_array_ptr",
                "param_1": "param",
                "FUN_08002514": "check_param_08002514",
                "puVar1": "param_array_ptr",
                "DAT_0800253c": "unknown_data_array"
            },
            "code": "int check_param_08002514(unsigned int param) {\n  unsigned int* DAT_08002538 = DAT_08002538;\n  if (param - 1U < 0x1000000) {\n    DAT_08002538[1] = param - 1U;\n    *(unsigned char *)(DAT_0800253c + 0x23) = 0xf0;\n    DAT_08002538[2] = 0;\n    *DAT_08002538 = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002514",
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "imported": true,
            "current_name": "check_param_08002514"
        },
        "FUN_08005c1c": {
            "renaming": {
                "param_1": "buffer",
                "FUN_08005c1c": "copy_data_to_buffer_08005c1c",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_3",
                "param_5": "data_4"
            },
            "code": "void copy_data_to_buffer_08005c1c(void **buffer, char data_1, char data_2, char data_3, char data_4)\n{\n  *buffer = PTR_PTR_LAB_08005be2_1_08005c34;\n  *(char *)(buffer + 1) = data_1;\n  *(char *)((int)buffer + 5) = data_2;\n  *(char *)((int)buffer + 6) = data_3;\n  *(char *)((int)buffer + 7) = data_4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c1c",
            "calling": [
                "FUN_08005c38"
            ],
            "imported": true,
            "current_name": "copy_data_to_buffer_08005c1c"
        },
        "FUN_08006dc8": {
            "renaming": {
                "auStack_4c": "file_type_check_stack",
                "iVar1": "file_type_check_result",
                "param_1": "file_path",
                "FUN_08006dc8": "check_file_permissions_and_type_08006dc8",
                "local_48": "file_type_check_flag",
                "param_2": "file_info_offset",
                "param_3": "permission_flags",
                "param_4": "is_executable",
                "uVar2": "permission_flags_result"
            },
            "code": "int check_file_permissions_and_type_08006dc8(void* file_path, int file_info_offset, uint* permission_flags, uint* is_executable) {\n  int file_type_offset = 0xe;\n  int file_permissions_offset = 0xc;\n  int file_type = *(short*)(file_info_offset + file_type_offset);\n  if (file_type < 0 || FUN_08007004(file_path, file_type, NULL) < 0) {\n    *is_executable = 0;\n    if (((uint)*(ushort*)(file_info_offset + file_permissions_offset) << 0x18) < 0) {\n      *permission_flags = 0x40;\n      return 0;\n    }\n  }\n  else {\n    *is_executable = (uint)((file_type & 0xf000) == 0x2000);\n  }\n  *permission_flags = 0x400;\n  return 0;\n}",
            "called": [
                "FUN_08007004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc8",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": true,
            "current_name": "check_file_permissions_and_type_08006dc8"
        },
        "FUN_0800412c": {
            "renaming": {
                "DAT_08004a64": "0x1111",
                "PTR_DAT_08004a6c": "data_ptr[17]",
                "PTR_DAT_08004a68": "data_ptr[8]",
                "param_1": "ptr_param",
                "DAT_08004a60": "0x444",
                "*param_1": "*ptr_param",
                "param_2": "param_value",
                "PTR_FUN_08004110": "FUN_08004110",
                "FUN_0800412c": "clear_flags_0800412c",
                "puVar1": "data_ptr"
            },
            "code": "int clear_flags_0800412c(uint **ptr_param, int param_value) {\n  uint *data_ptr = *ptr_param;\n  int flag1 = PTR_DAT_08004a68 & DAT_08004a64;\n  int flag2 = PTR_DAT_08004a68 & DAT_08004a60;\n  if (flag1 == 0 && flag2 == 0) {\n    PTR_DAT_08004a6c &= 0xffff7fff;\n  }\n  data_ptr = *ptr_param;\n  flag1 = PTR_DAT_08004a68 & DAT_08004a64;\n  flag2 = PTR_DAT_08004a68 & DAT_08004a60;\n  if (flag1 == 0 && flag2 == 0) {\n    *data_ptr &= 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800412c",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": true,
            "current_name": "clear_flags_0800412c"
        },
        "FUN_08007090": {
            "renaming": {
                "PTR_DAT_08007130": "variable_2",
                "PTR_DAT_08007144": "variable_7",
                "PTR_DAT_08007154": "variable_11",
                "PTR_DAT_08007134": "variable_3",
                "PTR_DAT_08007148": "variable_8",
                "PTR_DAT_08007158": "variable_12",
                "PTR_DAT_08007140": "variable_6",
                "PTR_DAT_08007150": "variable_10",
                "PTR_DAT_0800713c": "variable_5",
                "PTR_DAT_0800714c": "variable_9",
                "PTR_DAT_0800712c": "variable_1",
                "PTR_DAT_08007138": "variable_4",
                "FUN_08007090": "call_function_with_warning_08007090"
            },
            "code": "void call_function_with_warning_08007090(void)\n{\n  code *function_pointer;\n  function_pointer = call_function_with_warning_08007090;\n  initialize_variable_if_less_than(&PTR_DAT_0800712c, 1);\n  initialize_variable_if_less_than(&PTR_DAT_08007130, 1);\n  initialize_variable_if_less_than(&PTR_DAT_08007134, 1);\n  initialize_variable_if_less_than(&PTR_DAT_08007138, 1);\n  initialize_variable_if_less_than(&PTR_DAT_0800713c, 1);\n  initialize_variable_if_less_than(&PTR_DAT_08007140, 1);\n  initialize_variable_if_less_than(&PTR_DAT_08007144, 1);\n  initialize_variable_if_less_than(&PTR_DAT_08007148, 1);\n  initialize_variable_if_less_than(&PTR_DAT_0800714c, 1);\n  initialize_variable_if_less_than(&PTR_DAT_08007150, 1);\n  initialize_variable_if_less_than(&PTR_DAT_08007154, 1);\n  initialize_variable_if_less_than(&PTR_DAT_08007158, 1);\n  call_function_pointer(function_pointer);\n  return;\n}\n\nvoid initialize_variable_if_less_than(int *variable, int value)\n{\n  if (*variable < value << 0x1f) {\n    *variable = value;\n  }\n}\n\nvoid call_function_pointer(code *function_pointer)\n{\n  function_pointer();\n}",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007090",
            "calling": [
                "FUN_080060d4"
            ],
            "imported": true,
            "current_name": "call_function_with_warning_08007090"
        },
        "FUN_0800492c": {
            "renaming": {
                "iVar1": "shifted_val",
                "param_1": "input_val",
                "param_2": "N/A",
                "param_3": "N/A",
                "param_4": "N/A",
                "uVar2": "masked_val",
                "FUN_0800492c": "calculate_shifted_value_0800492c"
            },
            "code": "uint calculate_shifted_value_0800492c(uint input_val){\n  int shifted_val = call_function(input_val, PTR_DAT_08004944, 0, input_val, input_val);\n  uint masked_val = (uint)(shifted_val << 12) >> 27;\n  if (masked_val > 15) {\n    masked_val = 0;\n  }\n  return masked_val;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800492c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "calculate_shifted_value_0800492c"
        },
        "FUN_0800480a": {
            "renaming": {
                "uVar1": "array_index",
                "1 << (param_1 & 0xf)": "bit_mask",
                "param_1": "bit_index",
                "param_2": "array",
                "*(uint *)(param_2 + uVar1 * 4)": "array_ptr",
                "FUN_0800480a": "set_bit_in_array_0800480a"
            },
            "code": "void set_bit_in_array_0800480a(uint bit_index, int* array) {\n  uint array_index = (bit_index << 0x18) >> 0x1c;\n  uint* array_ptr = (uint*)(array + array_index * 4);\n  uint bit_mask = 1 << (bit_index & 0xf);\n  *array_ptr = *array_ptr | bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800480a",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": true,
            "current_name": "set_bit_in_array_0800480a"
        },
        "FUN_080015f8": {
            "renaming": {
                "uVar1": "random_val",
                "DAT_0800169c": "global_val_1",
                "param_1": "input_val",
                "FUNC_08000194": "get_concat_val",
                "DAT_08001698": "global_val_2",
                "FUNC_080004f8": "get_func_val",
                "DAT_080016ac": "global_val_10",
                "DAT_080016a4": "global_val_8",
                "param_2": "flag",
                "param_3": "param_3",
                "DAT_080016a8": "global_val_9",
                "param_4": "param_4",
                "uVar3": "concat_val",
                "uVar2": "masked_val",
                "DAT_080016b0": "global_val_11",
                "DAT_080016a0": "global_val_7",
                "FUN_080015b2": "get_random_val",
                "FUN_0800040c": "get_func_val",
                "FUN_080015f8": "get_data_080015f8"
            },
            "code": "uint32_t get_data_080015f8(uint32_t param_1, int32_t param_2, uint32_t param_3, uint32_t param_4) {\n  uint32_t random_val = get_random_val();\n  uint64_t concat_val = ((uint64_t)DAT_0800169c << 32) | DAT_08001698;\n  if ((random_val & 0x10000) == 0) {\n    uint32_t masked_val = random_val >> 0x12 & 0x1fff;\n    uint64_t func_val = get_func_val(masked_val);\n    if ((random_val & 0x2000) != 0) {\n      uint32_t inverted_val = ~masked_val & 0x1fff;\n      uint64_t func_val2 = get_func_val(inverted_val, param_4);\n      func_val2 = (func_val2 & 0xffffffff) | ((uint64_t)((int64_t)func_val2 >> 0x20) + 0x80000000) << 0x20;\n      concat_val = get_concat_val(func_val2);\n    }\n    concat_val = get_concat_val(get_func_val(func_val, param_3));\n    if (param_2 == 1) {\n      concat_val = get_concat_val(get_func_val(get_func_val(get_func_val(concat_val, param_4), DAT_080016ac), DAT_080016b0));\n      return concat_val;\n    }\n  }\n  else {\n    uint32_t masked_val = random_val & 7;\n    if (masked_val == 2) {\n      return ((uint64_t)global_val_3 << 32) | global_val_4;\n    }\n    if (masked_val == 4) {\n      return ((uint64_t)global_val_5 << 32) | global_val_6;\n    }\n    if (masked_val == 1) {\n      return concat_val;\n    }\n  }\n  return concat_val;\n}",
            "called": [
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_0800074c",
                "FUN_080015b2",
                "FUN_08000194"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "get_data_080015f8"
        },
        "FUN_08005c38": {
            "renaming": {
                "param_1": "input_type",
                "FUN_08005c1c": "execute_process",
                "param_2": "input_value",
                "FUN_08005c38": "process_input_08005c38"
            },
            "code": "void process_input_08005c38(int input_type, int input_value) {\n  if ((input_type == 1) && (input_value == 0xffff)) {\n    execute_process(PTR_DAT_08005c60,0,0,0,0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08005c1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c38",
            "calling": [],
            "imported": true,
            "current_name": "process_input_08005c38"
        },
        "FUN_08005f8c": {
            "renaming": {
                "FUN_08005f8c": "find_binary_length_08005f8c",
                "param_1": "number",
                "cVar1": "length"
            },
            "code": "char find_binary_length_08005f8c(uint number) {\n  char length = 0;\n  while (number != 1) {\n    number = number >> 1;\n    length++;\n  }\n  return length;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f8c",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": true,
            "current_name": "find_binary_length_08005f8c"
        },
        "FUN_08006f5a": {
            "renaming": {
                "FUN_08006f5a": "process_data_08006f5a",
                "sVar1": "data_value",
                "iVar3": "result",
                "write_output": "write_output",
                "PTR_DAT_08006fe0": "PTR_DAT_08006fe0",
                "calculate_data": "calculate_data",
                "puVar2": "ptr",
                "param_1": "output",
                "unaff_r5": "unaff_r5",
                "unaff_r4": "unaff_r4",
                "param_2": "input_data",
                "param_3": "arg_2",
                "param_4": "arg_3",
                "in_lr": "in_lr"
            },
            "code": "void process_data_08006f5a(int *output, int input_data, undefined4 arg_2, undefined4 arg_3)\n{\n  short data_value;\n  undefined *ptr;\n  int result;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 in_lr;\n  \n  if ((int)((uint)*(ushort *)(input_data + 0xc) << 0x17) < 0) {\n    write_output(output,(int)*(short *)(input_data + 0xe),0,2);\n  }\n  *(ushort *)(input_data + 0xc) = *(ushort *)(input_data + 0xc) & 0xefff;\n  ptr = PTR_DAT_08006fe0;\n  data_value = *(short *)(input_data + 0xe);\n  *(undefined4 *)PTR_DAT_08006fe0 = 0;\n  result = calculate_data((int)data_value,arg_2,arg_3,arg_3,arg_3,unaff_r4,unaff_r5,in_lr);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08005730",
                "FUN_08007048"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f5a",
            "calling": [],
            "imported": true,
            "current_name": "process_data_08006f5a"
        },
        "FUN_08000b08": {
            "renaming": {
                "PTR_DAT_08000bac": "data_ptr_9",
                "FUN_08000b08": "execute_if_input_valid_08000b08",
                "PTR_DAT_08000bbc": "data_ptr_15",
                "PTR_DAT_08000b88": "value_2",
                "PTR_DAT_08000b98": "data_ptr_2",
                "PTR_DAT_08000b8c": "value_1",
                "PTR_DAT_08000b9c": "data_ptr_1",
                "param_1": "input_1",
                "PTR_DAT_08000ba4": "data_ptr_7",
                "PTR_DAT_08000bb4": "data_ptr_11",
                "PTR_DAT_08000bc4": "data_ptr_13",
                "param_2": "input_2",
                "PTR_DAT_08000ba0": "data_ptr_6",
                "PTR_DAT_08000bb0": "data_ptr_10",
                "PTR_DAT_08000bc0": "data_ptr_14",
                "PTR_DAT_08000b84": "value_3",
                "PTR_DAT_08000b94": "data_ptr_3",
                "PTR_DAT_08000b90": "data_ptr_4",
                "PTR_DAT_08000ba8": "data_ptr_8",
                "PTR_DAT_08000bb8": "data_ptr_5",
                "PTR_DAT_08000bc8": "data_ptr_12"
            },
            "code": "void execute_if_input_valid_08000b08(int input_1, int input_2){\n  if ((input_1 == 1) && (input_2 == 0xffff)) {\n    execute_function_1(PTR_DAT_08000b9c, PTR_DAT_08000b98, PTR_DAT_08000b94, PTR_DAT_08000b90, PTR_DAT_08000b8c, PTR_DAT_08000b88, PTR_DAT_08000b84, value_4, value_5, value_6, 0);\n    execute_function_2(PTR_DAT_08000bb8, *PTR_DAT_08000ba0, *PTR_DAT_08000ba4, *PTR_DAT_08000ba8, *PTR_DAT_08000bac, *PTR_DAT_08000bb0, *PTR_DAT_08000bb4);\n    execute_function_3(PTR_DAT_08000bc8, *PTR_DAT_08000bc4, *PTR_DAT_08000bc0, *PTR_DAT_08000bbc);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b08",
            "calling": [],
            "imported": true,
            "current_name": "execute_if_input_valid_08000b08"
        },
        "FUN_08006cb4": {
            "renaming": {
                "FUN_08006cb4": "initialize_data_structure_08006cb4",
                "bVar3": "is_current_data_structure",
                "iVar2": "current_data_structure_ptr",
                "uVar1": "new_data",
                "param_1": "data_structure_ptr"
            },
            "code": "void initialize_data_structure_08006cb4(int data_structure_ptr)\n{\n  if (*(int *)(data_structure_ptr + 0x18) == 0) {\n    *(int *)(data_structure_ptr + 0x48) = 0;\n    *(int *)(data_structure_ptr + 0x4c) = 0;\n    *(int *)(data_structure_ptr + 0x50) = 0;\n    int current_data_structure_ptr = *(int *)PTR_PTR_DAT_08006d0c;\n    *(void **)(data_structure_ptr + 0x28) = PTR_LAB_08006c34_1_08006d10;\n    bool is_current_data_structure = data_structure_ptr == current_data_structure_ptr;\n    if (is_current_data_structure) {\n      current_data_structure_ptr = 1;\n    }\n    if (is_current_data_structure) {\n      *(int *)(data_structure_ptr + 0x18) = current_data_structure_ptr;\n    }\n    int uVar1 = FUN_08006d14();\n    *(int *)(data_structure_ptr + 4) = uVar1;\n    uVar1 = FUN_08006d14(data_structure_ptr);\n    *(int *)(data_structure_ptr + 8) = uVar1;\n    uVar1 = FUN_08006d14(data_structure_ptr);\n    *(int *)(data_structure_ptr + 0xc) = uVar1;\n    FUN_08006c40(*(int *)(data_structure_ptr + 4),4,0);\n    FUN_08006c40(*(int *)(data_structure_ptr + 8),9,1);\n    FUN_08006c40(*(int *)(data_structure_ptr + 0xc),0x12,2);\n    *(int *)(data_structure_ptr + 0x18) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_08006d14",
                "FUN_08006c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cb4",
            "calling": [
                "FUN_08006344",
                "FUN_080068f0",
                "FUN_080069e4",
                "FUN_08006d14",
                "FUN_08006394",
                "FUN_08006be0"
            ],
            "imported": true,
            "current_name": "initialize_data_structure_08006cb4"
        },
        "FUN_08004c5e": {
            "renaming": {
                "FUN_08004c5e": "get_value_by_key_08004c5e",
                "undefined4": "int",
                "param_1": "key",
                "*param_2": "*data",
                "param_2": "data"
            },
            "code": "int get_value_by_key_08004c5e(int key, char *data)\n{\n  while(true) {\n    if (*data == -1) {\n      return 0;\n    }\n    if (*data == key) {\n      break;\n    }\n    data = data + 0xc;\n  }\n  return *(int *)(data + 4);\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c5e",
            "calling": [
                "FUN_08004c78",
                "FUN_08004c5e"
            ],
            "imported": true,
            "current_name": "get_value_by_key_08004c5e"
        },
        "FUN_08004b3c": {
            "renaming": {
                "iVar1": "status",
                "local_50": "results",
                "FUN_08004b3c": "process_data_08004b3c",
                "param_1": "data",
                "FUN_08003ed8": "finalize_results",
                "FUN_080040b0": "process_results",
                "FUN_08004948": "check_status",
                "FUN_0800412c": "process_alternate_results",
                "uVar2": "flags",
                "FUN_08004cce": "get_flags",
                "FUN_08004c78": "get_data",
                "PTR_DAT_08004b90": "data_pointer"
            },
            "code": "void process_data_08004b3c(uint32_t data)\n{\n  int status;\n  uint32_t results[17];\n  results[0] = get_data(data, PTR_DAT_08004b90);\n  if ((results[0] != 0) && ((((status = check_status(data), status == 0 || status == 4) || status == 8) || ((status == 0xc || status == 0x18))))){\n    uint32_t flags = get_flags(data, PTR_DAT_08004b90);\n    if ((flags & 0x100000) == 0) {\n      process_results(results, status);\n    }\n    else {\n      process_alternate_results(results, status);\n    }\n    finalize_results(results);\n  }\n  return;\n}",
            "called": [
                "FUN_0800412c",
                "FUN_080040b0",
                "FUN_08004948",
                "FUN_08004cce",
                "FUN_08004c78",
                "FUN_08003ed8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b3c",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": true,
            "current_name": "process_data_08004b3c"
        },
        "FUN_08001550": {
            "renaming": {
                "iVar1": "i",
                "FUN_08001550": "fill_buffer_with_bytes_08001550",
                "param_1": "buffer",
                "param_2": "buffer_size",
                "param_3": "bytes_to_fill",
                "*(undefined *)(param_3 + iVar1)": "*(uint8_t *)(fill_byte + i)",
                "**(code **)*param_1": "*(void (*)(void *, uint8_t))(*byte_buffer)"
            },
            "code": "void fill_buffer_with_bytes_08001550(void *buffer, uint buffer_size, int bytes_to_fill) {\n  int i;\n  uint8_t *byte_buffer = buffer;\n  uint8_t fill_byte = (bytes_to_fill & 7) << 3 | 0x40;\n  for (i = 0; i < 8; i++) {\n    (*(void (*)(void *, uint8_t))(*byte_buffer))(byte_buffer, *(uint8_t *)(fill_byte + i));\n  }\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001550",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": true,
            "current_name": "fill_buffer_with_bytes_08001550"
        },
        "FUN_08000cd0": {
            "renaming": {
                "FUN_08000cd0": "FUNC_08000cd0"
            },
            "code": "\nvoid FUNC_08000cd0(void)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  int iVar7;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 uVar8;\n  undefined8 uVar9;\n  \n  uVar5 = FUN_080058e0();\n  if (*(uint *)PTR_DAT_08000f50 < uVar5) {\n    *(uint *)PTR_DAT_08000f50 = *(uint *)PTR_DAT_08000f50 + 1000;\n    uVar9 = FUN_080015f8(PTR_DAT_08000f74,0);\n    uVar8 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar6 = (undefined4)uVar9;\n    *(undefined8 *)PTR_DAT_08000f6c = uVar9;\n    iVar7 = FUN_080009c8(uVar6,uVar8,DAT_08000f18,DAT_08000f1c);\n    if (((iVar7 != 0) || (iVar7 = FUN_080009c8(uVar6,uVar8,DAT_08000f20,DAT_08000f24), iVar7 != 0))\n       || (iVar7 = FUN_080009c8(uVar6,uVar8,DAT_08000f28,DAT_08000f2c), iVar7 != 0)) {\n      *PTR_DAT_08000f64 = 7;\n      *PTR_DAT_08000f58 = 0;\n    }\n  }\n  uVar5 = FUN_080058e0();\n  if (*(uint *)PTR_DAT_08000f54 < uVar5) {\n    *(uint *)PTR_DAT_08000f54 = *(uint *)PTR_DAT_08000f54 + 1000;\n    if (*PTR_DAT_08000f58 == '\\x01') {\n      uVar8 = *(undefined4 *)PTR_DAT_08000f5c;\n      uVar6 = FUN_08005890(uVar8);\n      uVar5 = count_leading_zeroes(uVar6);\n      FUN_08005848(uVar8,uVar5 >> 5);\n      iVar7 = *(int *)PTR_DAT_08000f78;\n      *(int *)PTR_DAT_08000f78 = iVar7 + 1;\n      puVar2 = PTR_DAT_08000f7c;\n      FUN_08005d82(PTR_DAT_08000f7c,iVar7 + 1,10);\n      puVar3 = PTR_DAT_08000f80;\n      FUN_08005c96(puVar2,PTR_DAT_08000f80);\n      FUN_08005f2c(puVar2,extraout_r1,*(undefined4 *)PTR_DAT_08000f84,\n                   *(undefined4 *)(PTR_DAT_08000f84 + 4),2);\n      FUN_08005c96(puVar2,puVar3);\n      FUN_08005f2c(puVar2,extraout_r1_00,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      FUN_08005c96(puVar2,puVar3);\n      FUN_08005f40(puVar2,extraout_r1_01,*(undefined4 *)PTR_DAT_08000f88,\n                   *(undefined4 *)(PTR_DAT_08000f88 + 4),2);\n    }\n    else {\n      FUN_08005848(*(undefined4 *)PTR_DAT_08000f5c,1);\n    }\n    puVar2 = PTR_DAT_08000f60;\n    FUN_0800135a(PTR_DAT_08000f60);\n    puVar4 = PTR_DAT_08000f64;\n    FUN_08005c96(puVar2,*(undefined4 *)\n                         (PTR_PTR_s_Ready_08000f68 + (uint)(byte)*PTR_DAT_08000f64 * 4));\n    FUN_08001366(puVar2,0,1);\n    puVar3 = PTR_DAT_08000f60;\n    if (*puVar4 == '\\a') {\n      FUN_08005c96(puVar2,PTR_s_TC_Error__08000f8c);\n    }\n    else {\n      FUN_08005f2c(PTR_DAT_08000f60,2,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      FUN_0800134e(puVar3,0);\n      FUN_08005c96(puVar3,PTR_DAT_08000f70);\n    }\n  }\n  if ((byte)*PTR_DAT_08000f64 < 8) {\n                    /* WARNING: Could not recover jumptable at 0x08000d5c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_08000d5c::switchdataD_08000d60 +\n              (&switchD_08000d5c::switchdataD_08000d60)[(byte)*PTR_DAT_08000f64]))();\n    return;\n  }\n  if ((*PTR_DAT_08001274 == '\\x01') && (*PTR_DAT_0800126c == '\\x01')) {\n    *PTR_DAT_0800126c = 0;\n    *PTR_DAT_08001258 = 0;\n  }\n  cVar1 = *PTR_DAT_08001278;\n  if (cVar1 == '\\x01') {\n    iVar7 = FUN_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      iVar7 = FUN_080058e0();\n      if (0x32 < (uint)(iVar7 - *(int *)PTR_DAT_08001284)) {\n        *PTR_DAT_08001278 = 2;\n      }\n    }\n    else {\n      *PTR_DAT_08001278 = 0;\n    }\n  }\n  else if (cVar1 == '\\0') {\n    *PTR_DAT_08001274 = 0;\n    iVar7 = FUN_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      uVar6 = FUN_080058e0();\n      *(undefined4 *)PTR_DAT_08001284 = uVar6;\n      *PTR_DAT_08001278 = 1;\n    }\n  }\n  else if ((cVar1 == '\\x02') && (iVar7 = FUN_08005754(*(undefined4 *)PTR_DAT_08001280), iVar7 != 0))\n  {\n    *PTR_DAT_08001274 = 1;\n    *PTR_DAT_08001278 = 0;\n  }\n  if (*PTR_DAT_0800126c == '\\x01') {\n    iVar7 = FUN_080058e0();\n    FUN_080016b4(PTR_DAT_08001250);\n    if (*(uint *)PTR_DAT_0800128c < (uint)(iVar7 - *(int *)PTR_DAT_08001288)) {\n      *(uint *)PTR_DAT_08001288 = *(int *)PTR_DAT_08001288 + *(uint *)PTR_DAT_0800128c;\n    }\n    uVar9 = FUN_0800040c(iVar7 - *(int *)PTR_DAT_08001288);\n    iVar7 = FUN_080009dc((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),*(undefined4 *)PTR_DAT_08001290,\n                         *(undefined4 *)(PTR_DAT_08001290 + 4));\n    if (iVar7 == 0) {\n      FUN_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n    }\n    else {\n      FUN_08005848(*(undefined4 *)PTR_DAT_0800127c,1);\n    }\n  }\n  else {\n    FUN_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08005c96",
                "FUN_08005f2c",
                "FUN_08001960",
                "FUN_080015f8",
                "FUN_080009dc",
                "FUN_08005754",
                "FUN_08005d82",
                "FUN_08001366",
                "FUN_0800135a",
                "FUN_08005cd4",
                "FUN_08000194",
                "FUN_0800134e",
                "FUN_0800040c",
                "FUN_08005890",
                "FUN_08001918",
                "FUN_08000a18",
                "FUN_08000a04",
                "FUN_080009f0",
                "FUN_08005f40",
                "FUN_08005848",
                "FUN_0800042c",
                "FUN_080018f8",
                "FUN_080058e0",
                "FUN_080009c8",
                "FUN_08001a44",
                "FUN_080016b4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cd0",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": true,
            "current_name": "FUNC_08000cd0"
        },
        "FUN_08001310": {
            "renaming": {
                "FUN_08001310": "process_data_08001310",
                "param_1": "data_index",
                "FUN_08005848": "send_data",
                "param_2": "data_value",
                "PTR_": "",
                "param_3": "param_3",
                "param_4": "param_4",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ process_data_08001310(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_9DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_-DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_9DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ process_data_08001310_DAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ process_data_08001310_DAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ process_data_08001310_DAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "FUN_080012c0",
                "FUN_08005848",
                "FUN_080012e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001310",
            "calling": [
                "FUN_0800138e",
                "FUN_08001366",
                "FUN_0800135a",
                "FUN_080013a4",
                "FUN_08001550",
                "FUN_0800134e"
            ],
            "imported": true,
            "current_name": "process_data_08001310"
        },
        "FUN_080009a8": {
            "renaming": {
                "FUN_080009a8": "swap_integers_080009a8",
                "param_1": "first_integer",
                "param_2": "second_integer",
                "param_3": "temp"
            },
            "code": "void swap_integers_080009a8(int* first_integer, int* second_integer)\n{\n    int temp = *first_integer;\n    *first_integer = *second_integer;\n    *second_integer = temp;\n    return;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a8",
            "calling": [
                "FUN_08000a18",
                "FUN_08000a04"
            ],
            "imported": true,
            "current_name": "swap_integers_080009a8"
        },
        "FUN_08004d90": {
            "renaming": {
                "DAT_08004dec": "FLAG_4",
                "DAT_08004de8": "FLAG_3",
                "param_1": "flag_value",
                "FUN_08004d90": "check_flags_08004d90",
                "uint": "unsigned int",
                "0xfffffffb": "MASK_4",
                "0x1c": "OFFSET_2",
                "0xfffffffd": "MASK_3",
                "0xfffffffe": "MASK_2",
                "DAT_08004df0": "DATA_START",
                "DAT_08004de4": "FLAG_1",
                "0x18": "OFFSET_1",
                "0xfffff7ff": "MASK_1"
            },
            "code": "void check_flags_08004d90(int *flag_value) {\n  if (*flag_value == DAT_08004de4) {\n    *(uint *)(DAT_08004df0 + 0x18) &= 0xfffff7ff;\n  }\n  if (*flag_value == FLAG_2) {\n    *(uint *)(DAT_08004df0 + 0x1c) &= 0xfffffffe;\n  }\n  if (*flag_value == DAT_08004de8) {\n    *(uint *)(DAT_08004df0 + 0x1c) &= 0xfffffffd;\n  }\n  if (*flag_value == DAT_08004dec) {\n    *(uint *)(DAT_08004df0 + 0x1c) &= 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d90",
            "calling": [
                "FUN_08004b34"
            ],
            "imported": true,
            "current_name": "check_flags_08004d90"
        },
        "FUN_08005ce8": {
            "renaming": {
                "param_1": "param_array",
                "FUN_08005ce8": "convert_base10_to_baseN_08005ce8",
                "local_15": "converted_num",
                "param_2": "num_to_convert",
                "param_3": "new_base",
                "uVar3": "remainder",
                "uVar2": "converted_num_length",
                "uVar4": "quotient",
                "pcVar5": "current_digit"
            },
            "code": "uint32_t convert_base10_to_baseN_08005ce8(int32_t *param_array, uint32_t num_to_convert, uint32_t new_base)\n{\n  char converted_num[9];\n  uint32_t quotient;\n  uint32_t remainder;\n  char *current_digit = converted_num + 1;\n  \n  converted_num[1] = 0;\n  if ((int)new_base < 2) {\n    new_base = 10;\n  }\n  do {\n    quotient = num_to_convert / new_base;\n    remainder = (num_to_convert & 0xff) - (quotient * new_base & 0xff) & 0xff;\n    current_digit = current_digit + -1;\n    char digit_char = (char)remainder;\n    if (remainder < 10) {\n      digit_char = digit_char + '0';\n    }\n    else {\n      digit_char = digit_char + '7';\n    }\n    *current_digit = digit_char;\n    num_to_convert = quotient;\n  } while (quotient != 0);\n  if (current_digit == (char *)0x0) {\n    return 0;\n  }\n  else {\n    uint32_t converted_num_length = FUN_08000178(current_digit);\n    return (**(code **)(*param_array + 4))(param_array,current_digit,converted_num_length);\n  }\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ce8",
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "imported": true,
            "current_name": "convert_base10_to_baseN_08005ce8"
        },
        "FUN_0800316c": {
            "renaming": {
                "iVar1": "count",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "param_1": "data",
                "FUN_0800316c": "process_data_0800316c"
            },
            "code": "void process_data_0800316c(uint **data)\n{\n  int count;\n  uint *ptr1;\n  uint *ptr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[12] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[12] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  ptr2 = *data;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[16] = (uint *)0x0;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      do_nothing(data);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      process_data_0800316c_2(data);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)data[13] + 0x21) == '\\x01') {\n      data[14][0xd] = (uint)PTR_LAB_080035fc_1_080032ac;\n      count = FUN_0800258c(data[14]);\n      if (count != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          ptr2 = data[9];\n          data[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[14][0xd])();\n      }\n    }\n    else {\n      data[13][0xd] = (uint)PTR_LAB_080035fc_1_080032ac;\n      count = FUN_0800258c(data[13]);\n      if (count != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[13][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[16] & 4) != 0)) {\n    data[11] = DAT_080032b0;\n    data[12] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    process_data_0800316c_3(data);\n  }\n  return;\n}",
            "called": [
                "FUN_0800316a",
                "FUN_08004ef4",
                "FUN_08004ec4",
                "FUN_0800258c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_080032b4",
                "FUN_08003520"
            ],
            "imported": true,
            "current_name": "process_data_0800316c"
        },
        "FUN_08004828": {
            "renaming": {
                "uVar1": "bit_index",
                "param_1": "index",
                "*(uint *)(param_2 + uVar1 * 4) & ~(1 << (param_1 & 0xf))": "*word & mask",
                "FUN_08004828": "update_bit_at_index_08004828",
                "param_2": "array",
                "*(uint *)(param_2 + uVar1 * 4)": "word"
            },
            "code": "void update_bit_at_index_08004828(uint index, int* array) {\n  uint bit_index = (index << 0x18) >> 0x1c;\n  uint* word = (uint*)(array + bit_index * 4);\n  uint mask = ~(1 << (index & 0xf));\n  *word = *word & mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004828",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": true,
            "current_name": "update_bit_at_index_08004828"
        },
        "FUN_08003afa": {
            "renaming": {
                "flag_value": "flag",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "status_register": "status_register",
                "param_1": "status_flags",
                "data_register": "data_register",
                "FUN_08003afa": "check_status_and_execute_08003afa",
                "param_2": "param_2",
                "puVar1": "data_register",
                "uVar4": "result"
            },
            "code": "uint check_status_and_execute_08003afa(uint *status_flags, uint param_2)\n{\n  uint *status_register = DAT_08003c38;\n  int start_time = FUN_08001cc4();\n  uint uVar4;\n  \n  if ((*status_flags & 2) != 0) {\n    status_register[1] = status_register[1] & 0xffffff0f | status_flags[2];\n  }\n  if ((*status_flags & 1) != 0) {\n    uint flag_value = status_flags[1];\n    if (flag_value == 1) {\n      if ((*status_register & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((flag_value != 2) && ((*status_register & 2) == 0)) {\n      return 1;\n    }\n    status_register[1] = flag_value | status_register[1] & 0xfffffffc;\n    if (flag_value == 1) {\n      while ((status_register[1] & 0xc) != 4) {\n        int current_time = FUN_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (flag_value == 2) {\n      while ((status_register[1] & 0xc) != 8) {\n        int current_time = FUN_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((status_register[1] & 0xc) != 0) {\n        int current_time = FUN_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  uint *data_register = DAT_08003c34;\n  if ((param_2 < (*data_register & 7)) &&\n     (*data_register = *data_register & 0xfffffff8 | param_2, param_2 != (*data_register & 7))) {\n    return 1;\n  }\n  if ((*status_flags & 4) != 0) {\n    status_register[1] = status_register[1] & 0xfffff8ff | status_flags[3];\n  }\n  if ((*status_flags & 8) != 0) {\n    status_register[1] = status_register[1] & 0xffffc7ff | status_flags[4] << 3;\n  }\n  uVar4 = FUN_08003a68();\n  *(uint *)PTR_DAT_08003c40 = uVar4 >> PTR_DAT_08003c3c[(status_register[1] << 0x18) >> 0x1c];\n  FUN_08001c3c(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08003a68",
                "FUN_08001cc4",
                "FUN_08001c3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003afa",
            "calling": [
                "FUN_08003ad4"
            ],
            "imported": true,
            "current_name": "check_status_and_execute_08003afa"
        },
        "FUN_08004948": {
            "renaming": {
                "iVar1": "result",
                "param_1": "input_1",
                "FUN_08004948": "get_result_08004948",
                "param_2": "N/A",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar2": "shifted_result"
            },
            "code": "int get_result_08004948(uint32_t input_1, uint32_t input_3, uint32_t input_4) {\n    int result = calculate(input_1, PTR_DAT_08004970, input_3, input_4, input_4);\n    uint32_t shifted_result = (uint32_t)(result << 0xc) >> 0x1b;\n    if (shifted_result == 3) {\n        return 8;\n    }\n    if (shifted_result != 4) {\n        if (shifted_result != 2) {\n            return 0;\n        }\n        return 4;\n    }\n    return 0xc;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004948",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": true,
            "current_name": "get_result_08004948"
        },
        "FUN_0800316a": {
            "renaming": {
                "FUN_0800316a": "do_nothing_0800316a"
            },
            "code": "\nvoid do_nothing_0800316a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316a",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": true,
            "current_name": "do_nothing_0800316a"
        },
        "FUN_08005b24": {
            "renaming": {
                "uVar1": "color_value",
                "PTR_DAT_08005b38": "color_palette",
                "param_1": "image_address",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "FUN_08005b24": "apply_color_to_image_08005b24",
                "param_2": "color_index"
            },
            "code": "void apply_color_to_image_08005b24(int image_address, uint32_t color_index)\n{\n  uint8_t color_value;\n  code *jump_table;\n\n  if (color_index < 0x3c) {\n    color_value = PTR_DAT_08005b38[color_index];\n  }\n  else {\n    color_value = 0xff;\n  }\n  *(uint8_t *)(image_address + 0x12d) = color_value;\n  (*jump_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b24",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": true,
            "current_name": "apply_color_to_image_08005b24"
        },
        "FUN_080049f0": {
            "renaming": {
                "iVar1": "current_flags",
                "*param_1": "*flag_value",
                "FUN_080049f0": "update_flags_080049f0"
            },
            "code": "void update_flags_080049f0(int *flag_value)\n{\n  int current_flags = DAT_08004a48;\n  if (*flag_value != DAT_08004a40) {\n    if (*flag_value == DAT_08004a44) {\n      *(uint *)(DAT_08004a48 + 0xc) |= 0x400;\n      *(uint *)(current_flags + 0xc) &= 0xfffffbff;\n      *(uint *)(current_flags + 0x18) &= 0xfffffbff;\n      *(uint *)(current_flags + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  *(uint *)(DAT_08004a48 + 0xc) |= 0x200;\n  *(uint *)(current_flags + 0xc) &= 0xfffffdff;\n  *(uint *)(current_flags + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049f0",
            "calling": [
                "FUN_0800224c"
            ],
            "imported": true,
            "current_name": "update_flags_080049f0"
        },
        "FUN_08001e40": {
            "renaming": {
                "param_1": "base_address",
                "FUN_08001e40": "get_value_at_offset_0x4c_08001e40"
            },
            "code": "int get_value_at_offset_0x4c_08001e40(int *base_address)\n{\n  int *target_address = base_address + 0x4c;\n  return *target_address;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e40",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "get_value_at_offset_0x4c_08001e40"
        },
        "FUN_08003a68": {
            "renaming": {
                "uVar1": "result",
                "uStack_14": "stack_var_3",
                "local_1c": "local_var_1",
                "uStack_10": "stack_var_2",
                "uStack_c": "stack_var_1",
                "uVar2": "stack_var_1",
                "abStack_18": "stack_array",
                "FUN_08003a68": "calculate_result_08003a68"
            },
            "code": "uint calculate_result_08003a68(void)\n{\n  uint result = 0;\n  uint stack_var_1 = *(uint *)(DAT_08003ac8 + 4);\n  uint stack_var_2 = DAT_08003ad0;\n  uint stack_var_3 = 0;\n  undefined2 local_var_1 = *(undefined2 *)(PTR_DAT_08003ac4 + 0x10);\n  byte stack_array[4];\n  stack_var_3 = *(undefined4 *)PTR_DAT_08003ac4;\n  stack_var_2 = *(undefined4 *)(PTR_DAT_08003ac4 + 4);\n  stack_var_1 = *(undefined4 *)(PTR_DAT_08003ac4 + 8);\n  if ((stack_var_1 & 0xc) == 8) {\n    if ((stack_var_1 & 0x10000) == 0) {\n      result = DAT_08003acc * (uint)stack_array[(stack_var_1 << 10) >> 0x1c];\n    }\n    else {\n      result = (DAT_08003ad0 * stack_array[(stack_var_1 << 10) >> 0x1c]) / (uint)*(byte *)((int)&local_var_1 - ((*(int *)(DAT_08003ac8 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a68",
            "calling": [
                "FUN_08003afa"
            ],
            "imported": true,
            "current_name": "calculate_result_08003a68"
        },
        "FUN_080012a2": {
            "renaming": {
                "param_1": "address",
                "PTR_": "",
                "DAT_": "",
                "FUN_080012a2": "print_twice_080012a2"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ print_twice_080012a2(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012a2",
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "imported": true,
            "current_name": "print_twice_080012a2"
        },
        "FUN_08004c78": {
            "renaming": {
                "FUN_08004c5e": "get_result",
                "uVar1": "result",
                "param_1": "input_param",
                "FUN_08004c78": "check_param_08004c78"
            },
            "code": "int check_param_08004c78(int input_param)\n{\n  int result = 0;\n  if (input_param != -1) {\n    result = get_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c78",
            "calling": [
                "FUN_08004b3c",
                "FUN_08004a4c",
                "FUN_080053d4",
                "FUN_08005384",
                "FUN_08004f4c"
            ],
            "imported": true,
            "current_name": "check_param_08004c78"
        },
        "FUN_08001e48": {
            "renaming": {
                "*(uint *)(param_1 + 10)": "*(uint32_t *)(params + 10)",
                "FUN_08001e48": "update_values_08001e48",
                "*(uint *)(*param_1 + 0xc)": "*(uint32_t *)(*params + 0xc)",
                "local_c": "local_var",
                "iVar3": "local_var",
                "uVar1": "result",
                "DAT_08001f7c": "params[13]",
                "param_1": "params",
                "*(uint *)(iVar3 + 8)": "*(uint32_t *)(local_var + 8)",
                "*(uint *)(*param_1 + 0x2c)": "*(uint32_t *)(*params + 0x2c)",
                "PTR_DAT_08001f78": "params[14]",
                "*param_1": "*params",
                "*(char *)(param_1 + 9)": "*(char *)(params + 9)",
                "param_2": "values",
                "*(undefined *)(param_1 + 9)": "*(char *)(params + 9)",
                "uVar2": "value",
                "*(uint *)(*param_1 + 0x30)": "*(uint32_t *)(*params + 0x30)",
                "DAT_08001f74": "params[12]",
                "*(uint *)(*param_1 + 0x10)": "*(uint32_t *)(*params + 0x10)",
                "*(uint *)(*param_1 + 0x34)": "*(uint32_t *)(*params + 0x34)"
            },
            "code": "uint32_t update_values_08001e48(int *params, uint32_t *values)\n{\n    uint32_t result;\n    uint32_t value;\n    uint32_t index;\n    uint32_t shift;\n    uint32_t mask;\n    int local_var;\n    if (*(char *)(params + 9) == 1)\n    {\n        result = 2;\n    }\n    else\n    {\n        *(char *)(params + 9) = 1;\n        value = values[1];\n        if (value < 7)\n        {\n            index = value * 5 - 5;\n            mask = 0x1f << (index & 0xff);\n            shift = *values << (index & 0xff);\n            *(uint32_t *)(*params + 0x34) = shift | *(uint32_t *)(*params + 0x34) & ~mask;\n        }\n        else if (value < 0xd)\n        {\n            index = value * 5 - 0x23;\n            mask = 0x1f << (index & 0xff);\n            shift = *values << (index & 0xff);\n            *(uint32_t *)(*params + 0x30) = shift | *(uint32_t *)(*params + 0x30) & ~mask;\n        }\n        else\n        {\n            index = value * 5 - 0x41;\n            mask = 0x1f << (index & 0xff);\n            shift = *values << (index & 0xff);\n            *(uint32_t *)(*params + 0x2c) = shift | *(uint32_t *)(*params + 0x2c) & ~mask;\n        }\n        value = *values;\n        if (value < 10)\n        {\n            index = value * 3;\n            mask = 7 << (index & 0xff);\n            shift = values[2] << (index & 0xff);\n            *(uint32_t *)(*params + 0x10) = shift | *(uint32_t *)(*params + 0x10) & ~mask;\n        }\n        else\n        {\n            index = value * 3 - 0x1e;\n            mask = 7 << (index & 0xff);\n            shift = values[2] << (index & 0xff);\n            *(uint32_t *)(*params + 0xc) = shift | *(uint32_t *)(*params + 0xc) & ~mask;\n        }\n        value = *values;\n        if (value - 0x10 < 2)\n        {\n            local_var = *params;\n            if (local_var == DAT_08001f74)\n            {\n                if ((*(uint32_t *)(local_var + 8) & 0x800000) == 0)\n                {\n                    *(uint32_t *)(local_var + 8) = *(uint32_t *)(local_var + 8) | 0x800000;\n                    if (*values == 0x10)\n                    {\n                        for (local_var = (uint32_t)((uint64_t)DAT_08001f7c * (uint64_t)*(uint32_t *)(PTR_DAT_08001f78) >> 0x32) * 10; local_var != 0; local_var = local_var + -1)\n                        {\n                        }\n                        result = 0;\n                    }\n                    else\n                    {\n                        result = 0;\n                    }\n                }\n                else\n                {\n                    result = 0;\n                }\n            }\n            else\n            {\n                params[10] = params[10] | 0x20;\n                result = 1;\n            }\n        }\n        else\n        {\n            result = 0;\n        }\n        *(char *)(params + 9) = 0;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e48",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "update_values_08001e48"
        },
        "FUN_080009b8": {
            "renaming": {
                "FUN_0800092c": "initialize_system",
                "FUN_080009b8": "execute_function_080009b8",
                "param_1": "input_param"
            },
            "code": "undefined4 execute_function_080009b8(undefined4 input_param)\n{\n  initialize_system();\n  return input_param;\n}",
            "called": [
                "FUN_0800092c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b8",
            "calling": [
                "FUN_080009a8",
                "FUN_080009f0",
                "FUN_080009dc",
                "FUN_080009c8"
            ],
            "imported": true,
            "current_name": "execute_function_080009b8"
        },
        "FUN_08000aa8": {
            "renaming": {
                "iVar1": "numerator_times_two_plus_constant",
                "param_1": "numerator",
                "FUN_08000aa8": "convert_to_integer_08000aa8",
                "param_2": "denominator",
                "uVar2": "shift_amount"
            },
            "code": "uint convert_to_integer_08000aa8(uint numerator, uint denominator) {\n  int numerator_times_two_plus_constant = denominator * 2 + 0x200000;\n  if ((denominator & 0x80000000) != 0 || denominator * 2 < 0xffe00000 || (numerator | denominator << 0xc) != 0 || -1 < numerator_times_two_plus_constant) {\n    return 0xffffffff;\n  }\n  uint shift_amount = -(numerator_times_two_plus_constant >> 0x15) - 0x3e1;\n  if (-1 < (int)shift_amount) {\n    return (denominator << 0xb | 0x80000000 | numerator >> 0x15) >> (shift_amount & 0xff);\n  }\n  return 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": true,
            "current_name": "convert_to_integer_08000aa8"
        },
        "FUN_08000a04": {
            "renaming": {
                "in_ZR": "is_ZR_nonzero",
                "FUN_080009a8": "call_function",
                "in_CY": "is_CY_zero",
                "FUN_08000a04": "check_for_zero_08000a04"
            },
            "code": "bool check_for_zero_08000a04(void)\n{\n  bool is_CY_zero;\n  bool is_ZR_nonzero;\n  \n  call_function();\n  return is_CY_zero || !is_ZR_nonzero;\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "FUN_08000cd0",
                "FUN_08001960"
            ],
            "imported": true,
            "current_name": "check_for_zero_08000a04"
        },
        "FUN_0800010c": {
            "renaming": {
                "param_1": "param",
                "DAT_08000128": "some_data",
                "PTR_DAT_08000124": "initialized_flag_ptr",
                "PTR_FUN_0800012c": "some_function_ptr",
                "FUN_0800010c": "check_and_set_initialized_flag_if_not_set_0800010c"
            },
            "code": "undefined* check_and_set_initialized_flag_if_not_set_0800010c(undefined* param){\n    if (*PTR_DAT_08000124 == \"\\0\") {\n        if (DAT_08000128 != 0) {\n            param = PTR_FUN_0800012c;\n        }\n        *PTR_DAT_08000124 = 1;\n    }\n    return param;\n}",
            "called": [
                "FUN_08007328"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": true,
            "current_name": "check_and_set_initialized_flag_if_not_set_0800010c"
        },
        "FUN_08003f14": {
            "renaming": {
                "FUN_08003f14": "do_nothing_08003f14"
            },
            "code": "\nvoid do_nothing_08003f14(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f14",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": true,
            "current_name": "do_nothing_08003f14"
        },
        "FUN_08001cac": {
            "renaming": {
                "PTR_DAT_08001cbc": "uint_ptr",
                "PTR_DAT_08001cc0": "byte_ptr",
                "FUN_08001cac": "compute_new_value_08001cac"
            },
            "code": "void compute_new_value_08001cac(void)\n{\n\tuint8_t byte_value = *PTR_DAT_08001cc0;\n\tint32_t* int_ptr = (int32_t*)int_ptr;\n\tuint32_t* PTR_DAT_08001cbc = (uint32_t*)PTR_DAT_08001cbc;\n\t*PTR_DAT_08001cbc = (uint32_t)byte_value + *int_ptr;\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cac",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": true,
            "current_name": "compute_new_value_08001cac"
        },
        "FUN_08003f12": {
            "renaming": {
                "FUN_08003f12": "do_nothing_08003f12"
            },
            "code": "\nvoid do_nothing_08003f12(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": true,
            "current_name": "do_nothing_08003f12"
        },
        "FUN_08005a18": {
            "renaming": {
                "FUN_0800591e": "callFunction",
                "PTR_DAT_08005a40": "functionPointer",
                "DAT_08005a3c": "isReady",
                "FUN_08005a18": "checkAndCall_08005a18"
            },
            "code": "void checkAndCall_08005a18(void)\n{\n  if (DAT_08005a3c != 0) {\n    callFunction(PTR_DAT_08005a40);\n  }\n  return;\n}",
            "called": [
                "FUN_0800591e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a18",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": true,
            "current_name": "checkAndCall_08005a18"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "process_flags_08003f18",
                "iVar1": "flags",
                "do_nothing_0800417a": "do_nothing4",
                "FUN_08004df8": "do_something1",
                "param_1": "params",
                "do_nothing_08003f12": "do_nothing2",
                "do_nothing_08003f14": "do_nothing",
                "do_nothing_08003f16": "do_nothing5",
                "FUN_08004e12": "do_something3",
                "do_nothing_08004178": "do_nothing6"
            },
            "code": "void process_flags_08003f18(int *params) {\n  int flags = *params;\n  if (((*(uint *)(flags + 0x10) & 2) != 0) && ((*(uint *)(flags + 0xc) & 2) != 0)) {\n    *(undefined4 *)(flags + 0x10) = 0xfffffffd;\n    *(undefined *)(params + 7) = 1;\n    if ((*(uint *)(*params + 0x18) & 3) == 0) {\n      do_something1(params);\n      do_nothing(params);\n    }\n    else {\n      do_nothing2(params);\n    }\n    *(undefined *)(params + 7) = 0;\n  }\n  flags = *params;\n  if (((*(uint *)(flags + 0x10) & 4) != 0) && ((*(uint *)(flags + 0xc) & 4) != 0)) {\n    *(undefined4 *)(flags + 0x10) = 0xfffffffb;\n    *(undefined *)(params + 7) = 2;\n    if ((*(uint *)(*params + 0x18) & 0x300) == 0) {\n      do_something1(params);\n      do_nothing(params);\n    }\n    else {\n      do_nothing2(params);\n    }\n    *(undefined *)(params + 7) = 0;\n  }\n  flags = *params;\n  if (((*(uint *)(flags + 0x10) & 8) != 0) && ((*(uint *)(flags + 0xc) & 8) != 0)) {\n    *(undefined4 *)(flags + 0x10) = 0xfffffff7;\n    *(undefined *)(params + 7) = 4;\n    if ((*(uint *)(*params + 0x1c) & 3) == 0) {\n      do_something1(params);\n      do_nothing(params);\n    }\n    else {\n      do_nothing2(params);\n    }\n    *(undefined *)(params + 7) = 0;\n  }\n  flags = *params;\n  if (((*(uint *)(flags + 0x10) & 0x10) != 0) && ((*(uint *)(flags + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(flags + 0x10) = 0xffffffef;\n    *(undefined *)(params + 7) = 8;\n    if ((*(uint *)(*params + 0x1c) & 0x300) == 0) {\n      do_something1(params);\n      do_nothing(params);\n    }\n    else {\n      do_nothing2(params);\n    }\n    *(undefined *)(params + 7) = 0;\n  }\n  flags = *params;\n  if (((*(uint *)(flags + 0x10) & 1) != 0) && ((*(uint *)(flags + 0xc) & 1) != 0)) {\n    *(undefined4 *)(flags + 0x10) = 0xfffffffe;\n    do_something3(params);\n  }\n  flags = *params;\n  if (((*(uint *)(flags + 0x10) & 0x80) != 0) && ((*(uint *)(flags + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(flags + 0x10) = 0xffffff7f;\n    do_nothing4(params);\n  }\n  flags = *params;\n  if (((*(uint *)(flags + 0x10) & 0x40) != 0) && ((*(uint *)(flags + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(flags + 0x10) = 0xffffffbf;\n    do_nothing5(params);\n  }\n  flags = *params;\n  if (((*(uint *)(flags + 0x10) & 0x20) != 0) && ((*(uint *)(flags + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(flags + 0x10) = 0xffffffdf;\n    do_nothing6(params);\n  }\n  return;\n}",
            "called": [
                "FUN_08004178",
                "FUN_08004e12",
                "FUN_08003f12",
                "FUN_08003f16",
                "FUN_08003f14",
                "FUN_08004df8",
                "FUN_0800417a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08004e20"
            ],
            "imported": true,
            "current_name": "process_flags_08003f18"
        },
        "FUN_08003f16": {
            "renaming": {
                "FUN_08003f16": "do_nothing_08003f16"
            },
            "code": "\nvoid do_nothing_08003f16(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f16",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": true,
            "current_name": "do_nothing_08003f16"
        },
        "FUN_0800591e": {
            "renaming": {
                "*(short *)(param_1 + 0x136)": "second_value",
                "FUN_0800591e": "calculate_offset_0800591e",
                "*(short *)(param_1 + 0x134)": "first_value",
                "param_1": "base_address",
                "result": "result"
            },
            "code": "ushort calculate_offset_0800591e(int base_address)\n{\n    short first_value = *(short *)(base_address + 0x134);\n    short second_value = *(short *)(base_address + 0x136);\n    short result = (first_value + 0x40) - second_value;\n    return result & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800591e",
            "calling": [
                "FUN_08005a18"
            ],
            "imported": true,
            "current_name": "calculate_offset_0800591e"
        },
        "FUN_08002540": {
            "renaming": {
                "FUN_08002540": "set_bit_in_array_08002540",
                "PTR_DAT_0800255c": "array_start_ptr",
                "param_1": "bit_index",
                "DAT_0800255c": "array_start"
            },
            "code": "void set_bit_in_array_08002540(uint bit_index)\n{\n  if (bit_index >= 0) {\n    uint array_index = (bit_index >> 5) + 0x60;\n    uint* array_ptr = (uint*)(DAT_0800255c + array_index * 4);\n    uint bit_mask = 1 << (bit_index & 0x1f);\n    *array_ptr = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002540",
            "calling": [],
            "imported": true,
            "current_name": "set_bit_in_array_08002540"
        },
        "FUN_08006344": {
            "renaming": {
                "PTR_DAT_080069d8": "BUFFER_PTR_1",
                "iVar1": "buffer_offset",
                "FUN_08006344": "process_input_08006344",
                "param_1": "input_length",
                "pbVar2": "buffer_ptr",
                "pbVar3": "buffer_ptr_2",
                "param_2": "input_char",
                "param_3": "buffer",
                "PTR_DAT_080069e0": "BUFFER_PTR_3",
                "PTR_DAT_080069dc": "BUFFER_PTR_2",
                "uVar4": "result"
            },
            "code": "unsigned int process_input_08006344(int input_length, unsigned char input_char, unsigned char **buffer){\n  int buffer_offset = (int)(*buffer)[2] - 1;\n  (*buffer)[2] = (unsigned char)buffer_offset;\n  if(buffer_offset >= -1 || (buffer_offset >= (int)(*buffer)[6] && input_char != 0xa)){\n    unsigned char *buffer_ptr = *buffer;\n    *buffer = buffer_ptr + 1;\n    *buffer_ptr = input_char;\n    return (unsigned int)input_char;\n  }\n  if(input_length != 0 && *(int *)(input_length + 0x18) == 0){\n    cleanup();\n  }\n  if(buffer == (unsigned char **)PTR_DAT_080069d8){\n    buffer = *(unsigned char ***)(input_length + 4);\n  }\n  else if(buffer == (unsigned char **)PTR_DAT_080069dc){\n    buffer = *(unsigned char ***)(input_length + 8);\n  }\n  else if(buffer == (unsigned char **)PTR_DAT_080069e0){\n    buffer = *(unsigned char ***)(input_length + 0xc);\n  }\n  (*buffer)[2] = (*buffer)[6];\n  unsigned char *buffer_ptr_2 = (unsigned char *)(unsigned int)*(unsigned short *)(buffer + 3);\n  int buffer_offset_2 = (int)buffer_ptr_2 << 0x1c;\n  if((buffer_offset_2 < 0 && (buffer_ptr_2 = buffer[4]) != (unsigned char *)0x0) || (buffer_offset_2 = process_buffer(input_length, buffer, buffer_offset_2, buffer_ptr_2, buffer_ptr), buffer_offset_2 == 0)){\n    unsigned int result = (unsigned int)input_char;\n    buffer_offset_2 = (int)(*buffer) - (int)(*buffer)[4];\n    if(buffer_offset_2 < (int)(*buffer)[5] || (buffer_offset_2 = process_buffer(input_length, buffer), buffer_offset_2 == 0)){\n      (*buffer)[2] = (unsigned char)buffer_offset;\n      unsigned char *buffer_ptr = *buffer;\n      *buffer = buffer_ptr + 1;\n      *buffer_ptr = input_char;\n      if((unsigned int)(buffer_offset_2 + 1) != (*buffer)[5]){\n        if(buffer_ptr_2 << 0x1f >= 0){\n          return result;\n        }\n        if(result != 10){\n          return result;\n        }\n      }\n      buffer_offset_2 = process_buffer(input_length, buffer);\n      if(buffer_offset_2 == 0){\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_08006cb4",
                "FUN_080069e4",
                "FUN_08006be0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006344",
            "calling": [
                "FUN_08006370"
            ],
            "imported": true,
            "current_name": "process_input_08006344"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009b8": "call_function_to_get_input_char",
                "FUN_080009c8": "check_input_char_not_null_080009c8",
                "in_ZR": "input_char"
            },
            "code": "bool check_input_char_not_null_080009c8(void)\\n{\\n  char input_char;\\n  call_function_to_get_input_char();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "check_input_char_not_null_080009c8"
        },
        "FUN_08002db2": {
            "renaming": {
                "FUN_08002db2": "parse_input_08002db2",
                "puVar2": "ptr_b",
                "param_1": "input",
                "cVar1": "current_char"
            },
            "code": "uint parse_input_08002db2(uint **input)\n{\n    char current_char = *(char *)((int)input + 0x3d);\n    uint *ptr_b = input[0xb];\n    \n    if ((*(short *)(input + 10) == 0) && (current_char == '!'))\n    {\n        if ((ptr_b == (uint *)0x4) || ((ptr_b == (uint *)0x8 || (ptr_b == (uint *)0xffff0000))))\n        {\n            (*input)[1] = (*input)[1] & 0xfffff8ff;\n            **input = **input | 0x200;\n            input[0xc] = (uint *)0x0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            \n            if (*(char *)((int)input + 0x3e) == '@')\n            {\n                *(undefined *)((int)input + 0x3e) = 0;\n                do_nothing_08002db0();\n            }\n            else\n            {\n                *(undefined *)((int)input + 0x3e) = 0;\n                do_nothing_08002c4e();\n            }\n        }\n        else\n        {\n            (*input)[1] = (*input)[1] & 0xfffff8ff;\n            input[0xc] = (uint *)0x11;\n            *(undefined *)((int)input + 0x3e) = 0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            do_nothing_08002c4e();\n        }\n    }\n    else if ((current_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (current_char == '\"'))))\n    {\n        if (*(short *)((int)input + 0x2a) == 0)\n        {\n            (*input)[1] = (*input)[1] & 0xfffffbff;\n        }\n        else if (*(char *)((int)input + 0x3e) == '@')\n        {\n            if (input[0x14] == (uint *)0x0)\n            {\n                if (input[0x13] == (uint *)0x1)\n                {\n                    (*input)[4] = (uint)input[0x12] & 0xff;\n                    input[0x14] = (uint *)((int)input[0x14] + 2);\n                }\n                else\n                {\n                    (*input)[4] = (uint)((int)input[0x12] << 0x10) >> 0x18;\n                    input[0x14] = (uint *)((int)input[0x14] + 1);\n                }\n            }\n            else if (input[0x14] == (uint *)0x1)\n            {\n                (*input)[4] = (uint)input[0x12] & 0xff;\n                input[0x14] = (uint *)((int)input[0x14] + 1);\n            }\n            else if (input[0x14] == (uint *)0x2)\n            {\n                if (*(char *)((int)input + 0x3d) == '\"')\n                {\n                    **input = **input | 0x100;\n                }\n                else if (*(char *)((int)input + 0x3d) == '!')\n                {\n                    uint *ptr_9 = input[9];\n                    input[9] = (uint *)((int)ptr_9 + 1);\n                    (*input)[4] = (uint)*(byte *)ptr_9;\n                    *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n                }\n            }\n        }\n        else\n        {\n            uint *ptr_9 = input[9];\n            input[9] = (uint *)((int)ptr_9 + 1);\n            (*input)[4] = (uint)*(byte *)ptr_9;\n            *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "parse_input_08002db2"
        },
        "FUN_08001cc4": {
            "renaming": {
                "PTR_DAT_08001ccc": "pointer_to_data",
                "FUN_08001cc4": "get_value_from_pointer_08001cc4"
            },
            "code": "get_value_from_pointer_08001cc4() {\n  return *(undefined4 *)PTR_DAT_08001ccc;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cc4",
            "calling": [
                "FUN_08003c90",
                "FUN_080043b4",
                "FUN_08001cd0",
                "FUN_08003afa",
                "FUN_08001f84",
                "FUN_08002384",
                "FUN_080020f0",
                "FUN_08004b94",
                "FUN_08004478",
                "FUN_080053d4",
                "FUN_08003688"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_08001cc4"
        },
        "FUN_08002db0": {
            "renaming": {
                "FUN_08002db0": "do_nothing_08002db0"
            },
            "code": "\nvoid do_nothing_08002db0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db0",
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "imported": true,
            "current_name": "do_nothing_08002db0"
        },
        "FUN_08003ea0": {
            "renaming": {
                "**param_1": "**flags",
                "DAT_08003ed4": "DATA_START",
                "undefined4": "uint",
                "FUN_08003ea0": "check_and_update_flags_08003ea0",
                "param_1": "flags",
                "(*param_1)[1]": "(*flags)[1]",
                "undefined": "uchar",
                "FUN_08004d18": "execute_flag_update"
            },
            "code": "void check_and_update_flags_08003ea0(uint **flags)\n{\n    if (((**flags & FLAG_1) != 0) && (((*flags)[1] & FLAG_1) != 0)) {\n        execute_flag_update();\n        (*flags)[1] = 0xfffffffd;\n    }\n    *(uint *)(DAT_08003ed4 + 0x14) = 0x20000;\n    *(uchar *)((int)flags + 0x11) = 1;\n    return;\n}",
            "called": [
                "FUN_08004d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ea0",
            "calling": [],
            "imported": true,
            "current_name": "check_and_update_flags_08003ea0"
        },
        "FUN_0800306c": {
            "renaming": {
                "param_1": "params",
                "FUN_0800306c": "update_flags_0800306c",
                "puVar1": "flag_ptr"
            },
            "code": "int update_flags_0800306c(uint **params)\n{\n  uint *flag_ptr;\n  flag_ptr = params[11];\n  if (*(short *)((int)params + 0x2a) == 3) {\n    if (((flag_ptr == (uint *)0x4) || (flag_ptr == (uint *)0x8)) || (flag_ptr == (uint *)0xffff0000)) {\n      **params = **params & 0xfffffbff;\n    }\n    flag_ptr = params[9];\n    params[9] = (uint *)((int)flag_ptr + 1);\n    *(char *)flag_ptr = (char)(*params)[4];\n    *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n  }\n  else if (*(short *)((int)params + 0x2a) == 2) {\n    if (((flag_ptr == (uint *)0x4) || (flag_ptr == (uint *)0x8)) || (flag_ptr == (uint *)0xffff0000)) {\n      (*params)[1] = (*params)[1] & 0xfffffcff;\n      **params = **params | 0x200;\n    }\n    else {\n      if (flag_ptr == (uint *)0x2) {\n        **params = **params | 0x400;\n      }\n      else {\n        **params = **params & 0xfffffbff;\n      }\n      (*params)[1] = (*params)[1] & 0xfffffcff;\n    }\n    flag_ptr = params[9];\n    params[9] = (uint *)((int)flag_ptr + 1);\n    *(char *)flag_ptr = (char)(*params)[4];\n    *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n    flag_ptr = params[9];\n    params[9] = (uint *)((int)flag_ptr + 1);\n    *(char *)flag_ptr = (char)(*params)[4];\n    *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n    *(undefined *)((int)params + 0x3d) = 0x20;\n    params[12] = (uint *)0x0;\n    if (*(char *)((int)params + 0x3e) == '@') {\n      *(undefined *)((int)params + 0x3e) = 0;\n      do_nothing_08002f9a();\n    }\n    else {\n      *(undefined *)((int)params + 0x3e) = 0;\n      do_nothing_08002c50();\n    }\n  }\n  else {\n    flag_ptr = params[9];\n    params[9] = (uint *)((int)flag_ptr + 1);\n    *(char *)flag_ptr = (char)(*params)[4];\n    *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "update_flags_0800306c"
        },
        "FUN_0800548c": {
            "renaming": {
                "uVar1": "flag_data",
                "byte": "byte_val",
                "param_1": "param",
                "DAT_080054ac": "flag_data",
                "result": "flag_result",
                "FUN_0800548c": "is_flag_set_at_0x44_0800548c",
                "PTR_DAT_080054ac": "flag_data_ptr",
                "0x44": "flag_offset",
                "0x22": "flag_mask"
            },
            "code": "bool is_flag_set_at_0x44_0800548c(int param){\n    uint32_t DAT_080054ac = *(uint32_t *)(PTR_DAT_080054ac + (uint32_t)*(uint8_t *)(param + 0x44) * 4);\n    uint32_t flag_mask = 0x22;\n    uint32_t result = DAT_080054ac & flag_mask;\n    return (result == flag_mask);\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800548c",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": true,
            "current_name": "is_flag_set_at_0x44_0800548c"
        },
        "FUN_08004848": {
            "renaming": {
                "param_1": "index",
                "DAT_08004874": "data_2",
                "DAT_08004878": "data_3",
                "FUN_08004848": "get_data_at_index_08004848",
                "DAT_08004880": "data_1",
                "DAT_08004870": "data_0",
                "DAT_0800487c": "data_4"
            },
            "code": "int get_data_at_index_08004848(int index) {\n  switch(index) {\n    case 0:\n      return DAT_08004870;\n    case 1:\n      return DAT_08004880;\n    case 2:\n      return DAT_08004874;\n    case 3:\n      return DAT_08004878;\n    case 4:\n      return DAT_0800487c;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004848",
            "calling": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "imported": true,
            "current_name": "get_data_at_index_08004848"
        },
        "FUN_08005d82": {
            "renaming": {
                "FUN_08005d42": "initialize_graphics",
                "FUN_08005d82": "initialize_game_08005d82"
            },
            "code": "void initialize_game_08005d82(void)\n{\n  initialize_graphics();\n  return;\n}",
            "called": [
                "FUN_08005d42"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d82",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": true,
            "current_name": "initialize_game_08005d82"
        },
        "FUN_08006f92": {
            "renaming": {
                "iVar1": "result",
                "bVar3": "is_result_negative",
                "param_1": "data",
                "param_2": "data_ptr",
                "FUN_08006f92": "check_and_update_data_08006f92",
                "uVar2": "flags"
            },
            "code": "void check_and_update_data_08006f92(undefined4 data, int data_ptr) {\\\n  int result = FUN_08007048(data, (int)*(short *)(data_ptr + 0xe));\\\n  bool is_result_negative = result == -1;\\\n  ushort flags = *(ushort *)(data_ptr + 0xc);\\\n  if (is_result_negative) {\\\n    flags &= 0xefff;\\\n  }\\\n  else {\\\n    *(int *)(data_ptr + 0x54) = result;\\\n    flags |= 0x1000;\\\n  }\\\n  *(ushort *)(data_ptr + 0xc) = flags;\\\n}",
            "called": [
                "FUN_08007048"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f92",
            "calling": [],
            "imported": true,
            "current_name": "check_and_update_data_08006f92"
        },
        "FUN_080012c0": {
            "renaming": {
                "uVar1": "bit_index",
                "param_1": "data_address",
                "FUN_08005848": "call_function_with_data_and_bit",
                "param_2": "bit_mask",
                "FUN_080012c0": "process_bits_and_call_function_080012c0",
                "FUN_080012a2": "call_cleanup_function"
            },
            "code": "void process_bits_and_call_function_080012c0(int data_address, int bit_mask) {\n  uint bit_index;\n  for (bit_index = 0; (int)bit_index < 4; bit_index++) {\n    uint bit = bit_mask >> (bit_index & 0xff) & 1;\n    char data = *(char *)(data_address + bit_index + 0xb);\n    call_function_with_data_and_bit(data, bit);\n  }\n  call_cleanup_function(data_address);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012c0",
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "imported": true,
            "current_name": "process_bits_and_call_function_080012c0"
        },
        "FUN_08001f80": {
            "renaming": {
                "param_1": "base_address",
                "*(undefined4 *)(param_1 + 0x28)": "value_pointer",
                "FUN_08001f80": "get_value_at_offset_08001f80"
            },
            "code": "int get_value_at_offset_08001f80(int base_address, int offset) {\n    int* value_pointer = (int*)(base_address + offset);\n    return *value_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f80",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": true,
            "current_name": "get_value_at_offset_08001f80"
        },
        "FUN_08001f84": {
            "renaming": {
                "iVar1": "new_result",
                "iVar3": "data_ptr",
                "param_1": "data",
                "param_2": "flag",
                "FUN_08001f84": "set_flag_and_check_08001f84",
                "local_14": "counter"
            },
            "code": "int set_flag_and_check_08001f84(int * data, uint32_t flag) {\n  int data_ptr = *data;\n  if ((*(uint32_t *)(data_ptr + 8) & 1) == 0) {\n    *(uint32_t *)(data_ptr + 8) |= 1;\n    uint32_t counter = (uint32_t)((uint64_t)DAT_08002000 * (uint64_t)*(uint32_t *)PTR_DAT_08001ffc >> 0x32);\n    while (counter != 0) {\n      counter--;\n    }\n    int result = FUN_08001cc4(data, flag, (int)((uint64_t)DAT_08002000 * (uint64_t)*(uint32_t *)PTR_DAT_08001ffc));\n    do {\n      if ((*(uint32_t *)(*data + 8) & 1) != 0) {\n        return 0;\n      }\n      int new_result = FUN_08001cc4();\n      if ((uint32_t)(new_result - result) >= 3) {\n        data[10] |= 0x10;\n        data[0xb] |= 1;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    } while (true);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f84",
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "imported": true,
            "current_name": "set_flag_and_check_08001f84"
        },
        "FUN_08000bcc": {
            "renaming": {
                "PTR_DAT_08000cac": "ptr6",
                "PTR_DAT_08000c98": "ptr3",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "PTR_DAT_08000c9c": "ptr4",
                "PTR_DAT_08000cb4": "ptr8",
                "PTR_DAT_08000ca0": "ptr5",
                "PTR_DAT_08000cb0": "ptr7",
                "puVar1": "ptr1",
                "PTR_DAT_08000c94": "ptr2",
                "FUN_08000bcc": "initialize_system_08000bcc",
                "uVar4": "oven_temp",
                "PTR_DAT_08000c90": "ptr1",
                "PTR_DAT_08000cb8": "ptr9"
            },
            "code": "void initialize_system_08000bcc(void)\n{\n  int oven_temp = 2000;\n  int reflow_temp = 0;\n  int delay_time = 8;\n  int delay_count = 2;\n  char* reflow_string = \"Reflow\";\n  char* oven_string = \"Oven 1-2\";\n  char* oven_temp_string = \"Oven Temperature\";\n  char* reflow_temp_string = \"Reflow Temperature\";\n  char* delay_string = \"Delay\";\n  char* delay_count_string = \"Delay Count\";\n  char* PTR_DAT_08000c90 = PTR_DAT_08000c90;\n  char* PTR_DAT_08000c94 = PTR_DAT_08000c94;\n  char* PTR_DAT_08000c98 = PTR_DAT_08000c98;\n  char* PTR_DAT_08000c9c = PTR_DAT_08000c9c;\n  char* PTR_DAT_08000ca0 = PTR_DAT_08000ca0;\n  char* PTR_DAT_08000cac = PTR_DAT_08000cac;\n  char* PTR_DAT_08000cb0 = PTR_DAT_08000cb0;\n  char* PTR_DAT_08000cb4 = PTR_DAT_08000cb4;\n  char* PTR_DAT_08000cb8 = PTR_DAT_08000cb8;\n  FUN_08005848(*(int*)PTR_DAT_08000c90,0);\n  FUN_080057b4(*(int*)PTR_DAT_08000c90,1);\n  FUN_08005848(*(int*)PTR_DAT_08000c94,0);\n  FUN_080057b4(*(int*)PTR_DAT_08000c94,1);\n  FUN_08005848(*(int*)PTR_DAT_08000c98,0);\n  FUN_080057b4(*(int*)PTR_DAT_08000c98,1);\n  FUN_08005848(*(int*)PTR_DAT_08000c94,1);\n  FUN_080013a4(PTR_DAT_08000c9c, delay_time, delay_count, reflow_temp);\n  FUN_08001550(PTR_DAT_08000c9c, reflow_temp, PTR_DAT_08000ca0);\n  FUN_0800135a(PTR_DAT_08000c9c);\n  FUN_08005c96(PTR_DAT_08000c9c, reflow_string);\n  FUN_08001366(PTR_DAT_08000c9c, 0, 1);\n  FUN_08005c96(PTR_DAT_08000c9c, oven_string);\n  FUN_08005848(*(int*)PTR_DAT_08000c94,0);\n  do_nothing_080058e8(0x9c4);\n  FUN_0800135a(PTR_DAT_08000c9c);\n  FUN_08005a68(PTR_DAT_08000cac, oven_temp, 6);\n  FUN_08005848(*(int*)PTR_DAT_08000c98,1);\n  *PTR_DAT_08000cb0 = oven_temp;\n  *PTR_DAT_08000cb4 = FUN_080058e0();\n  *PTR_DAT_08000cb8 = FUN_080058e0();\n  FUN_08000aec(0);\n  return;\n}",
            "called": [
                "FUN_08005c96",
                "FUN_08005848",
                "FUN_080058e0",
                "FUN_08001366",
                "FUN_080013a4",
                "FUN_0800135a",
                "FUN_08001550",
                "FUN_080057b4",
                "FUN_080058e8",
                "FUN_08005a68",
                "FUN_08000aec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000bcc",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": true,
            "current_name": "initialize_system_08000bcc"
        },
        "FUN_0800281e": {
            "renaming": {
                "FUN_0800281e": "assign_value_to_memory_0800281e",
                "param_1": "memory_location",
                "* (int *) (param_1 + 0x10)": "*(int *) (memory_location + 0x10)",
                "param_2": "value",
                "param_3": "shift_bits"
            },
            "code": "void assign_value_to_memory_0800281e(int memory_location, int value, int shift_bits)\n{\n  if (shift_bits == 0) {\n    *(int *)(memory_location + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(memory_location + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800281e",
            "calling": [
                "FUN_08004c30"
            ],
            "imported": true,
            "current_name": "assign_value_to_memory_0800281e"
        },
        "FUN_08006198": {
            "renaming": {
                "FUN_08006198": "execute_all_functions_08006198",
                "do_nothing_08007328": "do_nothing",
                "PTR_DAT_080061dc": "post_function_list_end",
                "iVar2": "function_list_size",
                "iVar3": "i",
                "PTR_DAT_080061d8": "post_function_list_start",
                "PTR_DAT_080061d0": "function_list_start",
                "PTR_DAT_080061d4": "function_list_end",
                "puVar1": "function_list_start"
            },
            "code": "void execute_all_functions_08006198(void)\n{\n  undefined *PTR_DAT_080061d0 = PTR_DAT_080061d0;\n  int function_list_size = (int)PTR_DAT_080061d4 - (int)PTR_DAT_080061d0;\n  for (int i = 0; i < function_list_size / 4; i++) {\n    (**(code **)(PTR_DAT_080061d0 + i * 4))();\n  }\n  do_nothing_08007328();\n  undefined *PTR_DAT_080061d8 = PTR_DAT_080061d8;\n  int post_function_list_size = (int)PTR_DAT_080061dc - (int)PTR_DAT_080061d8;\n  for (int i = 0; i < post_function_list_size / 4; i++) {\n    (**(code **)(PTR_DAT_080061d8 + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_08007328",
                "FUN_08005f5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006198",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": true,
            "current_name": "execute_all_functions_08006198"
        },
        "FUN_08007048": {
            "renaming": {
                "FUN_08007048": "execute_and_get_result_08007048",
                "iVar2": "execution_result",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptr"
            },
            "code": "void execute_and_get_result_08007048(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *ptr = PTR_DAT_08007068;\n  *(undefined4 *)PTR_DAT_08007068 = 0;\n  int execution_result = execute(param_2, param_3, param_4, param_4, param_4);\n  if ((execution_result == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007048",
            "calling": [
                "FUN_08006f5a",
                "FUN_08006f92"
            ],
            "imported": true,
            "current_name": "execute_and_get_result_08007048"
        },
        "FUN_08003c50": {
            "renaming": {
                "uVar1": "shifted_value",
                "PTR_DAT_08003c6c": "data_pointer",
                "FUN_08003c50": "calculate_shifted_value_08003c50",
                "DAT_08003c68": "data_pointer",
                "FUN_08003c44": "get_shifted_value"
            },
            "code": "uint calculate_shifted_value_08003c50(void)\n{\n  uint shifted_value;\n  shifted_value = get_shifted_value();\n  uint index = (uint)(*(int *)(PTR_DAT_08003c6c + 4) << 0x15) >> 0x1d;\n  uint shifted_value_after_index = shifted_value >> PTR_DAT_08003c6c[index];\n  return shifted_value_after_index;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c50",
            "calling": [
                "FUN_08004204"
            ],
            "imported": true,
            "current_name": "calculate_shifted_value_08003c50"
        },
        "FUN_080065c0": {
            "renaming": {
                "bVar4": "should_skip_initial_data",
                "iVar1": "encoding_result",
                "param_1": "data",
                "FUN_080065c0": "encode_data_080065c0",
                "param_2": "encoded_data_size",
                "param_3": "encoded_data",
                "param_4": "encoding_type",
                "param_5": "encoder_func",
                "uVar3": "data_to_encode",
                "uVar2": "max_encoded_data_size"
            },
            "code": "uint32_t encode_data_080065c0(uint32_t data, uint32_t *encoded_data_size, uint32_t *encoded_data, uint32_t encoding_type, code *encoder_func)\\n{\\n  uint32_t max_encoded_data_size = encoded_data[4];\\n  if ((int)encoded_data[4] < (int)encoded_data[2]) {\\n    max_encoded_data_size = encoded_data[2];\\n  }\\n  *encoded_data_size = max_encoded_data_size;\\n  if (*(char *)((int)encoded_data + 0x43) != \"\\0\") {\\n    *encoded_data_size = max_encoded_data_size + 1;\\n  }\\n  if ((int)(data << 0x1a) < 0) {\\n    *encoded_data_size = *encoded_data_size + 2;\\n  }\\n  uint32_t data_to_encode = data & 6;\\n  if (data_to_encode == 0) {\\n    for (; (int)data_to_encode < (int)(encoded_data[3] - *encoded_data_size); data_to_encode = data_to_encode + 1) {\\n      int32_t encoding_result = (*encoder_func)(data, encoding_type, (int)encoded_data + 0x19, 1);\\n      if (encoding_result == -1) {\\n        return 0xffffffff;\\n      }\\n    }\\n  }\\n  uint32_t should_encode_additional_byte = (uint32_t)*(byte *)((int)encoded_data + 0x43);\\n  if (should_encode_additional_byte != 0) {\\n    should_encode_additional_byte = 1;\\n  }\\n  uint32_t encoded_data_offset = should_encode_additional_byte;\\n  if ((int)(data << 0x1a) < 0) {\\n    *(undefined *)((int)encoded_data + should_encode_additional_byte + 0x43) = 0x30;\\n    encoded_data_offset = should_encode_additional_byte + 2;\\n    *(undefined *)((int)encoded_data + should_encode_additional_byte + 0x44) = *(undefined *)((int)encoded_data + 0x45);\\n  }\\n  int32_t encoding_result = (*encoder_func)(data, encoding_type, (int)encoded_data + 0x43, encoded_data_offset);\\n  if (encoding_result != -1) {\\n    uint32_t remaining_encoded_data_size = encoded_data[3];\\n    bool should_skip_initial_data = (data & 6) != 4;\\n    if (should_skip_initial_data) {\\n      remaining_encoded_data_size = 0;\\n    }\\n    uint32_t bytes_to_encode = 0;\\n    if (!should_skip_initial_data) {\\n      bytes_to_encode = remaining_encoded_data_size - *encoded_data_size;\\n    }\\n    if (!should_skip_initial_data) {\\n      bytes_to_encode = bytes_to_encode & ~((int)bytes_to_encode >> 0x1f);\\n    }\\n    if ((int)encoded_data[4] < (int)encoded_data[2]) {\\n      bytes_to_encode = bytes_to_encode + (encoded_data[2] - encoded_data[4]);\\n    }\\n    while(true) {\\n      if (bytes_to_encode == remaining_encoded_data_size) {\\n        return 0;\\n      }\\n      int32_t encoding_result = (*encoder_func)(data, encoding_type, (int)encoded_data + 0x1a, 1);\\n      if (encoding_result == -1) break;\\n      remaining_encoded_data_size = remaining_encoded_data_size + 1;\\n    }\\n  }\\n  return 0xffffffff;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080065c0",
            "calling": [
                "FUN_080066b0"
            ],
            "imported": true,
            "current_name": "encode_data_080065c0"
        },
        "FUN_080054d4": {
            "renaming": {
                "iVar1": "value",
                "*(undefined *)(param_1 + 0x45)": "*buffer",
                "param_1": "offset",
                "PTR_DAT_0800550c": "PTR_DAT_0800550c",
                "FUN_0800548c": "get_value_from_buffer",
                "FUN_080054d4": "get_value_at_offset_080054d4",
                "param_2": "buffer",
                "param_3": "buffer_size",
                "param_4": "default_value",
                "FUN_080045a2": "copy_value_to_buffer",
                "*(undefined4 *)(PTR_DAT_0800550c + (uint)*(byte *)(param_1 + 0x44) * 4)": "*(int *)(PTR_DAT_0800550c + (uint)*(byte *)(offset + 0x44) * 4)"
            },
            "code": "int get_value_at_offset_080054d4(int offset, char *buffer, int buffer_size, int default_value) {\n  if (offset == 0) {\n    return -1;\n  }\n  int value = get_value_from_buffer();\n  if (value == 0) {\n    *buffer = *(char *)(offset + 0x45);\n    copy_value_to_buffer(*(undefined4 *)(PTR_DAT_0800550c + (uint)*(byte *)(param_1 + 0x44) * 4), offset + 0x45, 1, PTR_DAT_0800550c, default_value);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054d4",
            "calling": [
                "FUN_0800598a"
            ],
            "imported": true,
            "current_name": "get_value_at_offset_080054d4"
        },
        "FUN_08004d40": {
            "renaming": {
                "FUN_08004d40": "wait_forever_08004d40"
            },
            "code": "void wait_forever_08004d40(void) \n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "FUN_08004d40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d40",
            "calling": [
                "FUN_08004d40",
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "wait_forever_08004d40"
        },
        "FUN_08004d44": {
            "renaming": {
                "puVar1": "flags",
                "FUN_08004d44": "set_flags_08004d44"
            },
            "code": "void set_flags_08004d44(void)\n{\n  uint *flags = DAT_08004d84;\n  *flags |= 1;\n  flags[1] &= DAT_08004d88;\n  *flags &= 0xfef6ffff;\n  *flags &= 0xfffbffff;\n  flags[1] &= 0xff80ffff;\n  flags[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08004d8c + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d44",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": true,
            "current_name": "set_flags_08004d44"
        },
        "FUN_0800282c": {
            "renaming": {
                "param_1": "new_param",
                "DAT_08002844": "data_offset",
                "FUN_0800282c": "update_param_0800282c",
                "data_ptr": "data_pointer",
                "call_function": "call_external_function"
            },
            "code": "void update_param_0800282c(uint new_param) {\n  uint* data_ptr = (uint*)(DAT_08002844 + 0x14);\n  if ((*data_ptr & new_param) != 0) {\n    *data_ptr = new_param;\n    call_function();\n  }\n  return;\n}",
            "called": [
                "FUN_080060e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800282c",
            "calling": [],
            "imported": true,
            "current_name": "update_param_0800282c"
        },
        "FUN_080015b2": {
            "renaming": {
                "FUN_08005890": "get_bit_value",
                "iVar1": "bit_value",
                "param_1": "data",
                "FUN_08005848": "set_bit",
                "uVar3": "bits_set",
                "uVar2": "bit_index",
                "FUN_080015b2": "check_bits_set_to_1_080015b2"
            },
            "code": "uint check_bits_set_to_1_080015b2(uint8_t *data)\n{\n  int bit_index;\n  uint bits_set = 0;\n\n  set_bit(data[1], 0);\n  for (bit_index = 31; bit_index >= 0; bit_index--) {\n    set_bit(data[2], 1);\n    int bit_value = get_bit_value(*data);\n    if (bit_value != 0) {\n      bits_set = bits_set | 1 << bit_index;\n    }\n    set_bit(data[2], 0);\n  }\n  set_bit(data[1], 1);\n  return bits_set;\n}\n",
            "called": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b2",
            "calling": [
                "FUN_080015f8"
            ],
            "imported": true,
            "current_name": "check_bits_set_to_1_080015b2"
        },
        "FUN_0800040c": {
            "renaming": {
                "iVar3": "leading_zeroes_count",
                "uVar1": "shifted_number",
                "param_1": "number_to_shift",
                "uVar2": "shift_amount",
                "uVar4": "shift_amount_adjusted",
                "bVar6": "is_shift_amount_adjusted_zero",
                "bVar5": "is_shift_amount_adjusted_negative",
                "FUN_0800040c": "shift_bits_left_0800040c",
                "in_r12": "shift_amount_complement",
                "bVar7": "is_shift_amount_negative"
            },
            "code": "ulonglong shift_bits_left_0800040c(uint number_to_shift) {\n  uint leading_zeroes_count = count_leading_zeroes(number_to_shift);\n  uint shift_amount = leading_zeroes_count + 21;\n  bool is_shift_amount_negative = shift_amount < 32;\n  uint shift_amount_adjusted = leading_zeroes_count - 11;\n  bool is_shift_amount_adjusted_negative = (int)shift_amount_adjusted < 0;\n  bool is_shift_amount_adjusted_zero = shift_amount_adjusted == 0;\n  uint shifted_number = 0;\n  if (number_to_shift == 0) {\n    return 0;\n  }\n  if (is_shift_amount_negative) {\n    is_shift_amount_negative = (shift_amount_adjusted + 12) < 0;\n    shift_amount_adjusted++;\n    is_shift_amount_adjusted_negative = shift_amount_adjusted < 0;\n    is_shift_amount_adjusted_zero = shift_amount_adjusted == 0;\n    shift_amount = shift_amount_adjusted + 32;\n    if (!is_shift_amount_adjusted_zero && is_shift_amount_adjusted_negative == is_shift_amount_negative) {\n      shifted_number = number_to_shift << (shift_amount_adjusted & 0xff);\n      number_to_shift = number_to_shift >> ((0x1c - leading_zeroes_count) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_shift_amount_adjusted_zero || is_shift_amount_adjusted_negative != is_shift_amount_negative) {\n    uint shift_amount_complement = 32 - shift_amount_adjusted;\n    number_to_shift = number_to_shift << (shift_amount_adjusted & 0xff);\n    shifted_number = (shift_amount_adjusted == 0) ? 0 : (0U >> (shift_amount_complement & 0xff));\n    if (is_shift_amount_adjusted_zero || is_shift_amount_adjusted_negative != is_shift_amount_negative) {\n      shifted_number = 0 << (shift_amount_adjusted & 0xff);\n    }\n  }\nLAB_08000318:\n  if (shift_amount < 1075) {\n    return CONCAT44(number_to_shift + (1074 - shift_amount) * 0x100000, shifted_number);\n  }\n  uint shift_amount_complement = ~(1074 - shift_amount);\n  if (0x1e < shift_amount_complement) {\n    return (ulonglong)(number_to_shift >> ((shift_amount_complement - 31) & 0xff));\n  }\n  int shift_amount_adjusted2 = shift_amount_complement - 19;\n  if (shift_amount_adjusted2 == 0 || shift_amount_adjusted2 < 0 != SCARRY4(shift_amount_complement - 31, 0xc)) {\n    shift_amount_complement++;\n    return CONCAT44(number_to_shift >> (shift_amount_complement & 0xff), shifted_number >> (shift_amount_complement & 0xff) | number_to_shift << ((0x20 - shift_amount_complement) & 0xff));\n  }\n  return (ulonglong)(shifted_number >> ((0x20 - (0xcU - shift_amount_adjusted2)) & 0xff) | number_to_shift << ((0xcU - shift_amount_adjusted2) & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800040c",
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "imported": true,
            "current_name": "shift_bits_left_0800040c"
        },
        "FUN_08004df4": {
            "renaming": {
                "FUN_08004df4": "subtract_four_08004df4",
                "param_1": "input_num",
                "return": "result"
            },
            "code": "int subtract_four_08004df4(int input_num) {\n  int result = input_num - 4;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df4",
            "calling": [
                "FUN_08004e12",
                "FUN_08004df8"
            ],
            "imported": true,
            "current_name": "subtract_four_08004df4"
        },
        "FUN_08004bb0": {
            "renaming": {
                "uVar1": "processed_data",
                "FUN_08004bb0": "process_data_08004bb0",
                "param_1": "data_index",
                "local_1c": "data_1",
                "local_18": "data_2",
                "local_20": "bit_mask",
                "local_14": "data_3"
            },
            "code": "void process_data_08004bb0(uint data_index, undefined4 param_2, undefined4 param_3)\n{\n  uint bit_mask;\n  undefined4 processed_data;\n  undefined4 data_1;\n  undefined4 data_2;\n  undefined4 data_3;\n  \n  processed_data = get_processed_data((data_index << 0x18) >> 0x1c);\n  bit_mask = 1 << (data_index & 0xf) & 0xffff;\n  data_3 = 3;\n  *(uint *)(DAT_08004c28 + 0x18) = *(uint *)(DAT_08004c28 + 0x18) | 1;\n  if ((data_index - 0xd & 0xff) < 2) {\n    *(uint *)(DAT_08004c2c + 4) = *(uint *)(DAT_08004c2c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  if (((data_index == 0xf) || (data_index == 0x13)) || (data_index == 0x14)) {\n    *(uint *)(DAT_08004c2c + 4) = *(uint *)(DAT_08004c2c + 4) & 0xf8ffffff | 0x2000000;\n  }\n  data_1 = param_2;\n  data_2 = param_3;\n  process_data_08004bb0_helper(processed_data,&bit_mask);\n  return;\n}",
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bb0",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": true,
            "current_name": "process_data_08004bb0"
        },
        "FUN_08004df8": {
            "renaming": {
                "iVar1": "function_pointer",
                "*(code **)(iVar1 + 0x4c)": "function",
                "FUN_08004df4": "get_function_pointer",
                "FUN_08004df8": "execute_function_if_condition_met_08004df8",
                "param_1": "param",
                "*(char *)(param_1 + 0x1c)": "condition"
            },
            "code": "void execute_function_if_condition_met_08004df8(int param){\n  int function_pointer = get_function_pointer();\n  code* function = *(code**)(function_pointer + 0x4c);\n  char condition = *(char*)(param + 0x1c);\n  if (function != nullptr && condition == '\\x01') {\n    (*function)(function_pointer, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df8",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": true,
            "current_name": "execute_function_if_condition_met_08004df8"
        },
        "FUN_08001510": {
            "renaming": {
                "FUN_08001510": "initialize_array_with_function_pointer_08001510",
                "param_1": "array",
                "FUN_080014ba": "call_function_with_parameters",
                "param_6": "param_6",
                "param_7": "param_7",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "PTR_PTR_FUN_0800134e_1_0800154c": "function_pointer",
                "param_5": "param_5"
            },
            "code": "undefined4* initialize_array_with_function_pointer_08001510(undefined4* array, undefined4 param_2, undefined4 param_3, undefined4 param_4, undefined param_5, undefined param_6, undefined param_7)\n{\n    array[1] = 0;\n    *array = PTR_PTR_FUN_0800134e_1_0800154c;\n    call_function_with_parameters(array, 1, param_2, 0xff, param_3, param_4, param_5, param_6, param_7, 0, 0, 0, 0);\n    return array;\n}",
            "called": [
                "FUN_080014ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001510",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": true,
            "current_name": "initialize_array_with_function_pointer_08001510"
        },
        "FUN_08002af8": {
            "renaming": {
                "uVar1": "result",
                "puVar2": "ptr_var_1",
                "FUN_08002af8": "check_params_and_set_values_08002af8",
                "param_1": "ptr_param_1",
                "param_2": "ptr_param_2",
                "param_3": "param_3",
                "param_4": "ptr_param_4"
            },
            "code": "int check_params_and_set_values_08002af8(uint **ptr_param_1, uint *ptr_param_2, int param_3, uint *ptr_param_4) {\n  int result;\n  uint *ptr_var_1;\n  \n  if (*(char *)((int)ptr_param_1 + 0x3d) == '(') {\n    if (ptr_param_2 == (uint *)0x0 || param_3 == 0 || *(char *)(ptr_param_1 + 0xf) == '\\x01') {\n      if (ptr_param_2 == (uint *)0x0 || param_3 == 0) {\n        result = 1;\n      }\n      else {\n        result = 2;\n      }\n    }\n    else {\n      *(undefined *)(ptr_param_1 + 0xf) = 1;\n      ptr_var_1 = *ptr_param_1;\n      if ((*ptr_var_1 & 1) == 0) {\n        *ptr_var_1 = *ptr_var_1 | 1;\n      }\n      **ptr_param_1 = **ptr_param_1 & 0xfffff7ff;\n      *(undefined *)((int)ptr_param_1 + 0x3d) = 0x29;\n      *(undefined *)((int)ptr_param_1 + 0x3e) = 0x20;\n      result = 0;\n      ptr_param_1[0x10] = (uint *)0x0;\n      ptr_param_1[9] = ptr_param_2;\n      *(short *)((int)ptr_param_1 + 0x2a) = (short)param_3;\n      ptr_param_1[0xb] = ptr_param_4;\n      *(undefined2 *)(ptr_param_1 + 10) = *(undefined2 *)((int)ptr_param_1 + 0x2a);\n      *(undefined *)(ptr_param_1 + 0xf) = 0;\n      (*ptr_param_1)[1] = (*ptr_param_1)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002af8",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": true,
            "current_name": "check_params_and_set_values_08002af8"
        },
        "FUN_080028de": {
            "renaming": {
                "param_1": "params",
                "FUN_080028de": "update_flags_080028de",
                "puVar1": "flag_ptr"
            },
            "code": "uint32_t update_flags_080028de(uint32_t **params)\n{\n  uint32_t *flag_ptr;\n  flag_ptr = params[11];\n  if ((*(char *)((int)params + 0x3d) == '\"') && ((params[20] != (uint32_t *)0x0 || (*(char *)((int)params + 0x3e) != '@')))) {\n    if ((params[20] == (uint32_t *)0x0) && (params[4] == (uint32_t *)0xc000)) {\n      **params = **params | 0x100;\n      params[20] = (uint32_t *)((int)params[20] + 1);\n    }\n    else {\n      if (*(short *)((int)params + 0x2a) == 0) {\n        **params = **params | 0x200;\n      }\n      else if (*(short *)((int)params + 0x2a) == 1) {\n        if (flag_ptr == (uint32_t *)0xffff0000) {\n          **params = **params & 0xfffffbff;\n          flag_ptr = *params;\n          if ((flag_ptr[1] & 0x800) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (params[12] == (uint32_t *)0x12)) {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x200;\n        }\n        else if (params[11] == (uint32_t *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)params + 0x2a) == 2) {\n        if (params[11] == (uint32_t *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params | 0x800;\n          **params = **params & 0xfffffbff;\n        }\n        flag_ptr = *params;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **params = **params | 0x400;\n        flag_ptr = *params;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      params[20] = (uint32_t *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028de",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "update_flags_080028de"
        },
        "FUN_08002848": {
            "renaming": {
                "undefined4": "uint8_t",
                "param_1": "data",
                "uint": "uint32_t",
                "FUN_08002848": "calculate_checksum_08002848",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ calculate_checksum_08002848(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_'DAT_PDAT_TDAT_RDAT__DAT_@DAT_PDAT_TDAT_RDAT__DAT_'DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_UDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_'DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_'DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_UDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_7DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_6DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_7DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_6DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": true,
            "current_name": "calculate_checksum_08002848"
        },
        "FUN_08004e70": {
            "renaming": {
                "param_1": "value",
                "FUN_08004e70": "subtract_four_08004e70"
            },
            "code": "int subtract_four_08004e70(int value)\n{\n  return value - 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e70",
            "calling": [
                "FUN_08004ec4",
                "FUN_08004ef4",
                "FUN_08004e74"
            ],
            "imported": true,
            "current_name": "subtract_four_08004e70"
        },
        "FUN_080020f0": {
            "renaming": {
                "iVar1": "var_i_1",
                "iVar2": "var_i_2",
                "param_1": "ptr_param_1",
                "FUN_080020f0": "toggle_bit_and_set_flag_080020f0"
            },
            "code": "int toggle_bit_and_set_flag_080020f0(int *ptr_param_1)\n{\n  int var_i_1;\n  int var_i_2;\n  var_i_2 = *ptr_param_1;\n  if ((*(uint *)(var_i_2 + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(var_i_2 + 8) &= 0xfffffffe;\n  var_i_2 = FUN_08001cc4();\n  do {\n    if ((*(uint *)(*ptr_param_1 + 8) & 1) == 0) {\n      return 0;\n    }\n    var_i_1 = FUN_08001cc4();\n  } while ((uint)(var_i_1 - var_i_2) < 3);\n  ptr_param_1[10] |= 0x10;\n  ptr_param_1[0xb] |= 1;\n  return 1;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080020f0",
            "calling": [
                "FUN_08002384",
                "FUN_08002348",
                "FUN_0800224c",
                "FUN_0800213c"
            ],
            "imported": true,
            "current_name": "toggle_bit_and_set_flag_080020f0"
        },
        "FUN_08006e10": {
            "renaming": {
                "iVar2": "result",
                "uVar1": "flag",
                "param_1": "input",
                "local_18": "value1",
                "FUN_08006e10": "validate_08006e10",
                "param_2": "output",
                "local_14": "value2"
            },
            "code": "void validate_08006e10(int input, int *output)\n{\n  ushort flag;\n  int value1;\n  int *value2;\n  \n  if ((uint)*(ushort *)(output + 3) << 0x1e > 0xffffffff80000000) {\n    value1 = input;\n    value2 = output;\n    flag = extract_values(input,output,&value1,&value2);\n    int result = compute_result(input,value1);\n    if (result != 0) {\n      *(undefined **)(input + 0x28) = PTR_LAB_08006c34_1_08006e8c;\n      *output = result;\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x80;\n      output[4] = result;\n      output[5] = value1;\n      if ((value2 != (int *)0x0) &&\n         (result = check_value(input,(int)*(short *)((int)output + 0xe)), result != 0)) {\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(output + 3) = flag | *(ushort *)(output + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(output + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xfffc | 2;\n  }\n  *output = (int)output + 0x47;\n  output[4] = (int)output + 0x47;\n  output[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08006288",
                "FUN_08007028",
                "FUN_08006dc8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e10",
            "calling": [
                "FUN_080069e4"
            ],
            "imported": true,
            "current_name": "validate_08006e10"
        },
        "FUN_08004e74": {
            "renaming": {
                "iVar1": "obj_ptr",
                "*(int *)(param_1 + 0xc)": "*(int *)(data_ptr + 0xc)",
                "param_1": "data_ptr",
                "FUN_08002af8": "copy_data",
                "*(undefined *)(iVar1 + 0x5c)": "*(undefined *)(obj_ptr + 0x5c)",
                "FUN_08004e70": "create_object",
                "param_2": "flag",
                "FUN_08004e74": "process_data_08004e74",
                "param_3": "data_len",
                "param_4": "param_4",
                "*(code **)(iVar1 + 100)": "*(code **)(obj_ptr + 100)",
                "FUN_08002b84": "process_data",
                "*(undefined *)(iVar1 + 0x88)": "*(undefined *)(obj_ptr + 0x88)",
                "**(code **)(iVar1 + 100)": "**(code **)(obj_ptr + 100)"
            },
            "code": "void process_data_08004e74(int data_ptr,int flag,int data_len,undefined4 param_4)\n{\n  int obj_ptr = create_object();\n  if (data_len == *(int *)(data_ptr + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(obj_ptr + 0x88) = 0;\n      *(undefined *)(obj_ptr + 0x5c) = 0;\n      if (*(code **)(obj_ptr + 100) != (code *)0x0) {\n        (**(code **)(obj_ptr + 100))();\n      }\n      copy_data(data_ptr,obj_ptr + 0x68,*(undefined *)(obj_ptr + 0x88),8);\n      return;\n    }\n    *(undefined *)(obj_ptr + 0x5c) = 1;\n    process_data_08004e74(data_ptr,obj_ptr + 0x68,0x20,8,param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08002b84",
                "FUN_08002af8",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08002cf2"
            ],
            "imported": true,
            "current_name": "process_data_08004e74"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_0800281e": "execute_function",
                "param_1": "function_param_1",
                "param_2": "function_param_2",
                "param_3": "condition_param",
                "param_4": "data_param",
                "FUN_08004c30": "apply_condition_and_execute_function_08004c30"
            },
            "code": "void apply_condition_and_execute_function_08004c30(undefined4 function_param_1, undefined2 function_param_2, int condition_param, undefined4 data_param) {\n  if (condition_param == 0) {\n    execute_function(function_param_1, function_param_2, 0, data_param, data_param);\n    return;\n  }\n  execute_function(function_param_1, function_param_2, 1, data_param, data_param);\n  return;\n}",
            "called": [
                "FUN_0800281e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "FUN_08005848"
            ],
            "imported": true,
            "current_name": "apply_condition_and_execute_function_08004c30"
        },
        "FUN_08006f38": {
            "renaming": {
                "iVar1": "index",
                "bVar3": "is_positive",
                "param_1": "value",
                "param_2": "data",
                "FUN_08006f38": "update_value_08006f38",
                "uVar2": "new_value"
            },
            "code": "void update_value_08006f38(int value, int* data){\n  int index = get_index(value, *(short *)(data + 0xe));\n  bool is_positive = index >= 0;\n  uint new_value = is_positive ? *(int *)(data + 0x54) + index : *(ushort *)(data + 0xc) & 0xffffefff;\n  if (is_positive) {\n    *(uint *)(data + 0x54) = new_value;\n  }\n  if (!is_positive) {\n    *(short *)(data + 0xc) = (short)new_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800706c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f38",
            "calling": [],
            "imported": true,
            "current_name": "update_value_08006f38"
        },
        "FUN_08004cce": {
            "renaming": {
                "FUN_08004cb2": "calculate_result",
                "uVar1": "result",
                "param_1": "input_value",
                "FUN_08004cce": "get_result_08004cce"
            },
            "code": "int get_result_08004cce(int input_value) {\n  int result;\n  if (input_value == -1) {\n    result = -1;\n  }\n  else {\n    result = calculate_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cce",
            "calling": [
                "FUN_08004b3c",
                "FUN_0800492c",
                "FUN_08004948",
                "FUN_08004f4c"
            ],
            "imported": true,
            "current_name": "get_result_08004cce"
        },
        "FUN_08006eac": {
            "renaming": {
                "FUN_08006eac": "do_nothing_08006eac"
            },
            "code": "\nvoid do_nothing_08006eac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eac",
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "imported": true,
            "current_name": "do_nothing_08006eac"
        },
        "FUN_08006eae": {
            "renaming": {
                "FUN_08006eae": "do_nothing_08006eae"
            },
            "code": "\nvoid do_nothing_08006eae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eae",
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "imported": true,
            "current_name": "do_nothing_08006eae"
        },
        "FUN_08005f5c": {
            "renaming": {
                "FUN_08005f5c": "do_nothing_08005f5c"
            },
            "code": "\nvoid do_nothing_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5c",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": true,
            "current_name": "do_nothing_08005f5c"
        },
        "FUN_08003ad4": {
            "renaming": {
                "iVar2": "start_time",
                "FUN_08003ad4": "process_input_08003ad4",
                "iVar3": "current_time",
                "FUN_08001c3c": "set_status",
                "FUN_08001cc4": "get_time",
                "param_1": "input",
                "param_2": "input_size",
                "PTR_DAT_08003c40": "data_output",
                "puVar1": "data_ptr",
                "PTR_DAT_08003c3c": "data_shift",
                "uVar4": "input_type",
                "DAT_08003c34": "data_start",
                "FUN_08003a68": "process_data",
                "DAT_08003c38": "data_flags"
            },
            "code": "uint32_t process_input_08003ad4(uint32_t *input, uint32_t input_size)\n{\n  uint32_t *data_ptr = DAT_08003c34;\n  if (((*data_ptr & 7) < input_size) && (*data_ptr = *data_ptr & 0xfffffff8 | input_size, input_size != (*data_ptr & 7))) {\n    return 1;\n  }\n  if ((*input & 2) != 0) {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xffffff0f | input[2];\n  }\n  if ((*input & 1) != 0) {\n    uint32_t uVar4 = input[1];\n    if (uVar4 == 1) {\n      if ((*DAT_08003c38 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((uVar4 != 2) && ((*DAT_08003c38 & 2) == 0)) {\n      return 1;\n    }\n    DAT_08003c38[1] = uVar4 | DAT_08003c38[1] & 0xfffffffc;\n    int32_t start_time = get_time();\n    if (input[1] == 1) {\n      while ((DAT_08003c38[1] & 0xc) != 4) {\n        int32_t current_time = get_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (input[1] == 2) {\n      while ((DAT_08003c38[1] & 0xc) != 8) {\n        int32_t current_time = get_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((DAT_08003c38[1] & 0xc) != 0) {\n        int32_t current_time = get_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  data_ptr = DAT_08003c34;\n  if ((input_size < (*data_ptr & 7)) && (*data_ptr = *data_ptr & 0xfffffff8 | input_size, input_size != (*data_ptr & 7))) {\n    return 1;\n  }\n  if ((*input & 4) != 0) {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xfffff8ff | input[3];\n  }\n  if ((*input & 8) != 0) {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xffffc7ff | input[4] << 3;\n  }\n  uint32_t processed_input = process_data();\n  *(uint32_t *)PTR_DAT_08003c40 = processed_input >> PTR_DAT_08003c3c[(DAT_08003c38[1] << 0x18) >> 0x1c];\n  set_status(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08003afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ad4",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "process_input_08003ad4"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "updateBitwiseValueAtOffset_08004110",
                "*(uint *)(param_1 + 0x20)": "bitwiseValue",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "newValue",
                "param_3 << (param_2 & 0xff)": "shiftedValue",
                "~(4 << (param_2 & 0xff))": "mask"
            },
            "code": "void updateBitwiseValueAtOffset_08004110(int baseAddress, uint offset, int newValue) {\n  uint* bitwiseValue = (uint*)(baseAddress + 0x20);\n  uint mask = ~(4 << (offset & 0xff));\n  uint shiftedValue = newValue << (offset & 0xff);\n  *bitwiseValue = (*bitwiseValue & mask) | shiftedValue;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_0800412c"
            ],
            "imported": true,
            "current_name": "updateBitwiseValueAtOffset_08004110"
        },
        "FUN_08004ce2": {
            "renaming": {
                "FUN_08004ce2": "check_character_in_string_08004ce2",
                "param_1": "character",
                "*param_2": "*string",
                "param_2": "string"
            },
            "code": "int check_character_in_string_08004ce2(int character, char *string)\n{\n  if (character == -1) {\n    return 0;\n  }\n  while(*string != -1) {\n    if (character == *string) {\n      return 1;\n    }\n    string += 12;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ce2",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": true,
            "current_name": "check_character_in_string_08004ce2"
        },
        "FUN_08005568": {
            "renaming": {
                "bVar1": "index",
                "int_val": "int_value",
                "FUN_08005568": "process_data_08005568",
                "PTR_DAT_080055b4": "ptr_data_2",
                "param_1": "data_ptr",
                "char_val": "char_value",
                "PTR_DAT_080055b8": "ptr_val_ptr",
                "ptr_val": "ptr_value",
                "param_2": "value",
                "PTR_DAT_080055b0": "ptr_data_1"
            },
            "code": "void process_data_08005568(int data_ptr, int value) {\n  if (data_ptr != 0) {\n    int index = *(char *)(data_ptr + 0x44);\n    int* PTR_DAT_080055b0 = (int*)(PTR_DAT_080055b0 + index * 4);\n    *PTR_DAT_080055b0 = value;\n    int* PTR_DAT_080055b4 = (int*)(PTR_DAT_080055b4 + index * 4);\n    *PTR_DAT_080055b4 = data_ptr;\n    int char_val = *(char *)(data_ptr + 0x5a);\n    send_data(char_val, 0, 2);\n    send_data(char_val);\n    int ptr_val = *(int*)(PTR_DAT_080055b8 + index * 4);\n    int int_val = *(int *)(data_ptr + 100) + *(ushort *)(data_ptr + 0x6a);\n    send_data(ptr_val, int_val, 1);\n  }\n}",
            "called": [
                "FUN_0800455a",
                "FUN_08002494",
                "FUN_080024f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005568",
            "calling": [],
            "imported": true,
            "current_name": "process_data_08005568"
        },
        "FUN_08004478": {
            "renaming": {
                "iVar2": "status",
                "uVar1": "data_block",
                "FUN_08004478": "process_data_08004478",
                "param_1": "data_ptr",
                "param_2": "input_ptr",
                "param_3": "input_len",
                "param_4": "param_4"
            },
            "code": "int process_data_08004478(int *data_ptr, ushort *input_ptr, int input_len, undefined4 param_4)\n{\n  undefined4 uVar1;\n  int status;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (input_ptr == (ushort *)0x0) {\n      status = 1;\n    }\n    else if (input_len == 0) {\n      status = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      uVar1 = get_data(data_ptr);\n      *(short *)(data_ptr + 9) = (short)input_len;\n      *(short *)((int)data_ptr + 0x26) = (short)input_len;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          status = process_data_08004478_block(data_ptr,0x80,0,uVar1,param_4);\n          if (status != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *input_ptr & 0x1ff;\n          if (data_ptr[4] == 0) {\n            input_ptr = input_ptr + 1;\n          }\n          else {\n            input_ptr = (ushort *)((int)input_ptr + 1);\n          }\n        }\n        else {\n          status = process_data_08004478_block(data_ptr,0x80,0,uVar1,param_4);\n          if (status != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)input_ptr;\n          input_ptr = (ushort *)((int)input_ptr + 1);\n        }\n      }\n      status = process_data_08004478_block(data_ptr,0x40,0,uVar1,param_4);\n      if (status == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n      }\n      else {\n        status = 3;\n      }\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}",
            "called": [
                "FUN_080043b4",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004478",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": true,
            "current_name": "process_data_08004478"
        },
        "FUN_08005f5e": {
            "renaming": {
                "FUN_08002470": "set_difficulty_level",
                "FUN_08005f5e": "initialize_game_08005f5e",
                "FUN_08001c32": "load_game_resources"
            },
            "code": "void initialize_game_08005f5e(void)\n{\n  set_difficulty_level(3);\n  load_game_resources();\n  return;\n}",
            "called": [
                "FUN_08002470",
                "FUN_08001c32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5e",
            "calling": [
                "FUN_08006198"
            ],
            "imported": true,
            "current_name": "initialize_game_08005f5e"
        },
        "FUN_08005cb6": {
            "renaming": {
                "param_1": "function_pointer",
                "FUN_08005cb6": "execute_function_pointer_08005cb6"
            },
            "code": "void execute_function_pointer_08005cb6(void *function_pointer) {\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb6",
            "calling": [
                "FUN_08005da8",
                "FUN_08005d42"
            ],
            "imported": true,
            "current_name": "execute_function_pointer_08005cb6"
        },
        "FUN_08003c70": {
            "renaming": {
                "PTR_DAT_08003c8c": "shift_amounts",
                "uVar1": "result",
                "FUN_08003c70": "calculate_shifted_result_08003c70",
                "DAT_08003c88": "data",
                "FUN_08003c44": "get_shifted_value"
            },
            "code": "uint calculate_shifted_result_08003c70() {\n  uint result;\n  uint shifted_value = get_shifted_value();\n  uint shift_amount = PTR_DAT_08003c8c[(uint)(*(int *)(DAT_08003c88 + 4) << 0x12) >> 0x1d];\n  result = shifted_value >> shift_amount;\n  return result;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c70",
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "imported": true,
            "current_name": "calculate_shifted_result_08003c70"
        },
        "FUN_080053d4": {
            "renaming": {
                "PTR_DAT_08005480": "data_array",
                "iVar2": "start_time",
                "iVar3": "data_int",
                "PTR_DAT_08005484": "data_array",
                "param_1": "data",
                "param_2": "value",
                "FUN_080053d4": "check_data_080053d4",
                "PTR_DAT_0800547c": "data_array",
                "cVar1": "data_char",
                "PTR_DAT_08005488": "data_array",
                "uVar4": "i"
            },
            "code": "uint check_data_080053d4(uint data, uint value)\n{\n  int start_time = get_time();\n  char data_char = PTR_DAT_0800547c[1];\n  int data_int = find_data(data_char, PTR_DAT_0800547c);\n  if (data_int == 0) {\n    return 0;\n  }\n  uint i = 0;\n  while ((i < 5 && ((*(int *)(PTR_DAT_0800547c + i * 4) == 0 || (data_int = find_data(data_char, PTR_DAT_0800547c), **(int **)(PTR_DAT_0800547c + i * 4) != data_int))))) {\n    i = i + 1 & 0xff;\n  }\n  if (4 < i) {\n    if ((4 < (byte)PTR_DAT_0800547c[0x44]) && (log_error(), 4 < (byte)PTR_DAT_0800547c[0x44])) {\n      return 0;\n    }\n    i = (uint)(byte)PTR_DAT_0800547c[0x44];\n  }\n  do {\n    data_int = send_data(*(uint *)(PTR_DAT_0800547c + i * 4), data, value & 0xffff, 1000);\n    if (data_int == 0) {\n      return value;\n    }\n    data_int = get_time();\n  } while ((uint)(data_int - start_time) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08001cc4",
                "FUN_08004c78",
                "FUN_08004478",
                "FUN_08005384"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "FUN_08005730"
            ],
            "imported": true,
            "current_name": "check_data_080053d4"
        },
        "FUN_08002b84": {
            "renaming": {
                "uVar1": "result",
                "puVar2": "array_ptr",
                "param_1": "input_array",
                "param_2": "input_value",
                "param_3": "input_length",
                "FUN_08002b84": "validate_input_and_initialize_08002b84",
                "param_4": "output_array"
            },
            "code": "int validate_input_and_initialize_08002b84(uint **input_array, uint *input_value, int input_length, uint *output_array) {\n  int result;\n  uint *array_ptr;\n  char first_char;\n\n  first_char = *(char *)((int)input_array + 0x3d);\n  if (first_char == '(') {\n    if (input_value == (uint *)0x0 || input_length == 0 || *(char *)(input_array + 0xf) == '\\x01') {\n      result = 1;\n    }\n    else {\n      *(undefined *)(input_array + 0xf) = 1;\n      array_ptr = *input_array;\n      if ((*array_ptr & 1) == 0) {\n        *array_ptr = *array_ptr | 1;\n      }\n      **input_array = **input_array & 0xfffff7ff;\n      *(undefined *)((int)input_array + 0x3d) = 0x2a;\n      *(undefined *)((int)input_array + 0x3e) = 0x20;\n      result = 0;\n      input_array[0x10] = (uint *)0x0;\n      input_array[9] = input_value;\n      *(short *)((int)input_array + 0x2a) = (short)input_length;\n      input_array[0xb] = output_array;\n      *(undefined2 *)(input_array + 10) = *(undefined2 *)((int)input_array + 0x2a);\n      *(undefined *)(input_array + 0xf) = 0;\n      (*input_array)[1] = (*input_array)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b84",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": true,
            "current_name": "validate_input_and_initialize_08002b84"
        },
        "FUN_08004c48": {
            "renaming": {
                "param_1": "param1",
                "FUN_08002810": "call_function_with_4_params",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "FUN_08004c48": "call_function_with_params_08004c48"
            },
            "code": "void call_function_with_params_08004c48(undefined4 param1, undefined2 param2, undefined4 param3, undefined4 param4)\n{\n  call_function_with_4_params(param1, param2, param3, param4, param4);\n  return;\n}",
            "called": [
                "FUN_08002810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_08005890"
            ],
            "imported": true,
            "current_name": "call_function_with_params_08004c48"
        },
        "FUN_0800042c": {
            "renaming": {
                "uVar1": "bit_count",
                "iVar4": "count",
                "param_1": "num",
                "uVar3": "shift_count",
                "SCARRY4": "addition_overflow",
                "uVar2": "abs_num",
                "bVar9": "is_overflow",
                "SBORROW4": "subtraction_overflow",
                "uVar5": "temp",
                "FUN_0800042c": "calculate_bits_0800042c",
                "uVar6": "sign_bit",
                "in_r12": "remaining_bits",
                "bVar8": "is_zero",
                "bVar7": "is_negative"
            },
            "code": "ulonglong calculate_bits_0800042c(uint num) {\n  int count = 0;\n  while(num) {\n    num >>= 1;\n    count++;\n  }\n  return 0x20 - count;\n}\n\nulonglong calculate_bits_0800042c(uint num) {\n  uint sign_bit = num & 0x80000000;\n  uint abs_num = num;\n  if ((int)sign_bit < 0) {\n    abs_num = -num;\n  }\n  uint shift_count = calculate_bits_0800042c(abs_num) + 0x15;\n  uint bit_count = shift_count - 0xb;\n  if ((int)shift_count < 0x20) {\n    shift_count += 1;\n    if ((int)bit_count < 0) {\n      bit_count = 0;\n    }\n    abs_num <<= (shift_count & 0xff);\n    abs_num >>= (0xcU - shift_count & 0xff);\n    return (abs_num | sign_bit) << 0x20 | bit_count << (shift_count & 0xff);\n  }\n  uint remaining_bits = 0x20 - bit_count;\n  abs_num <<= (bit_count & 0xff);\n  abs_num |= 0U >> (remaining_bits & 0xff);\n  if (bit_count == 0) {\n    return sign_bit << 0x20;\n  }\n  return (abs_num | sign_bit) << 0x20 | 0 << (bit_count & 0xff);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800042c",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "imported": true,
            "current_name": "calculate_bits_0800042c"
        },
        "FUN_08005f6c": {
            "renaming": {
                "FUN_08005f6c": "do_nothing_and_call_function_08005f6c",
                "FUNC_08000cd0": "perform_operation",
                "DAT_08005f88": "data",
                "FUN_08000bcc": "call_function",
                "FUN_08005a18": "perform_another_operation"
            },
            "code": "void do_nothing_and_call_function_08005f6c(void)\n{\n  do_nothing();\n  call_function();\n  do {\n    do {\n      perform_operation();\n    } while (DAT_08005f88 == 0);\n    perform_another_operation();\n  } while(true);\n}",
            "called": [
                "FUN_08005a18",
                "FUN_08005f5c",
                "FUN_08000bcc",
                "FUN_08000cd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f6c",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": true,
            "current_name": "do_nothing_and_call_function_08005f6c"
        },
        "FUN_08005cc0": {
            "renaming": {
                "FUN_08005cc0": "call_function_at_pointer_08005cc0",
                "param_1": "function_pointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "code": "void call_function_at_pointer_08005cc0(int *function_pointer, int arg1, int arg2, int arg3)\n{\n  (**(function_pointer + 4))(function_pointer, PTR_DAT_08005cd0, 2, (**(function_pointer + 4)), arg3);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cc0",
            "calling": [
                "FUN_08005cd4",
                "FUN_08005f40"
            ],
            "imported": true,
            "current_name": "call_function_at_pointer_08005cc0"
        },
        "FUN_0800706c": {
            "renaming": {
                "iVar2": "status",
                "FUN_0800706c": "initialize_param_0800706c",
                "param_1": "result",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "ptr"
            },
            "code": "void initialize_param_0800706c(int *result, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  undefined *ptr = PTR_DAT_0800708c;\n  *(undefined4 *)PTR_DAT_0800708c = 0;\n  int status = execute_function(arg2, arg3, arg4, arg4, arg4);\n  if ((status == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_0800572c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800706c",
            "calling": [
                "FUN_08006f38"
            ],
            "imported": true,
            "current_name": "initialize_param_0800706c"
        },
        "FUN_08002624": {
            "renaming": {
                "iVar8": "shift",
                "param_1": "bits",
                "iVar10": "index",
                "FUN_08002624": "map_bits_to_values_08002624",
                "param_2": "values",
                "puVar1": "value_ptr",
                "uVar3": "value",
                "uVar2": "bit_mask",
                "uVar5": "bit_index",
                "uVar4": "offset",
                "uVar7": "unused",
                "uVar6": "i",
                "uVar9": "other_value"
            },
            "code": "void map_bits_to_values_08002624(uint* bits, uint* values) {\n  uint* value_ptr;\n  uint bit_index;\n  uint bit_mask;\n  uint value;\n  uint offset;\n  uint shift;\n  int i;\n\n  offset = 0;\n  for (i = 0; i <= 15; i++) {\n    if (i > 15) {\n      return;\n    }\n    bit_mask = 1 << i;\n    if ((*values & bit_mask) == bit_mask) {\n      value = values[1];\n      if (value == 0x12) {\n        offset = values[3] + 0xc;\n      } else if (value < 0x13) {\n        if (value == 2) {\n          offset = values[3] + 8;\n        } else if (value < 3) {\n          if (value == 0) goto LAB_08002776;\n          if (value == 1) {\n            offset = values[3];\n          }\n        } else if (value == 3) {\n          offset = 0;\n        } else if (value == 0x11) {\n          offset = values[3] + 4;\n        }\n      } else {\n        if (value != values[4]) {\n          if (values[4] < value) {\n            if (value == values[5]) goto LAB_08002776;\n            value_ptr = values + 5;\n            offset = values[5] + 0x10000;\n          } else {\n            value_ptr = values + 4;\n            offset = values[4] - 0x100000;\n          }\n          if ((value != offset) && (value != (*value_ptr - 0xf0000))) goto LAB_0800263a;\n        }\n      }\n\n      bit_index = i;\n      shift = (bit_index & 0xff) << 2;\n      if (0xff < bit_mask) {\n        bit_index -= 8;\n        shift = (bit_index & 0xff) << 2;\n        value_ptr = bits + 1;\n      } else {\n        value_ptr = bits;\n      }\n      *value_ptr = (*value_ptr & ~(0xf << shift)) | (offset << shift);\n      if ((values[1] & 0x10000000) != 0) {\n        *(uint *)(values[6] + 0x18) |= 1;\n        if (bits == values[7]) {\n          i = 0;\n        } else if (bits == values[7] + 0x100) {\n          i = 1;\n        } else if (bits == values[7] + 0x200) {\n          i = 2;\n        } else if (bits == values[7] + 0x300) {\n          i = 3;\n        } else {\n          i = 4;\n        }\n        *(uint *)(values[8] + ((bit_index >> 2) + 2) * 4) = (*(uint *)(values[8] + ((bit_index >> 2) + 2) * 4) & ~(0xf << ((bit_index & 3) << 2))) | (i << ((bit_index & 3) << 2));\n        if ((values[1] & 0x10000) == 0) {\n          *values[9] &= ~bit_mask;\n        } else {\n          *values[9] |= bit_mask;\n        }\n        if ((values[1] & 0x20000) == 0) {\n          values[9][1] &= ~bit_mask;\n        } else {\n          values[9][1] |= bit_mask;\n        }\n        if ((values[1] & 0x100000) == 0) {\n          values[9][2] &= ~bit_mask;\n        } else {\n          values[9][2] |= bit_mask;\n        }\n        if ((values[1] & 0x200000) == 0) {\n          values[9][3] &= ~bit_mask;\n        } else {\n          values[9][3] |= bit_mask;\n        }\n      }\n    }\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002624",
            "calling": [
                "FUN_08004974",
                "FUN_08004bb0",
                "FUN_08004f4c"
            ],
            "imported": true,
            "current_name": "map_bits_to_values_08002624"
        },
        "FUN_080040b0": {
            "renaming": {
                "param_1": "data",
                "FUN_080040b0": "set_flags_080040b0",
                "param_2": "flag",
                "puVar1": "ptr_data"
            },
            "code": "int set_flags_080040b0(uint **data, int flag)\n{\n  uint *ptr_data = *data;\n  FUN_08004092(ptr_data, flag, 0);\n  if (((ptr_data == PTR_DAT_0800410c) && ((ptr_data[8] & 0x1111) == 0)) && ((ptr_data[8] & 0x444) == 0)) {\n    ptr_data[17] = ptr_data[17] & 0xffff7fff;\n  }\n  ptr_data = *data;\n  if (((ptr_data[8] & 0x1111) == 0) && ((ptr_data[8] & 0x444) == 0)) {\n    *ptr_data = *ptr_data & 0xfffffffe;\n  }\n  *(undefined *)((int)data + 0x3d) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08004092"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b0",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": true,
            "current_name": "set_flags_080040b0"
        },
        "FUN_08005d42": {
            "renaming": {
                "iVar1": "result",
                "iVar2": "sign",
                "param_1": "array",
                "FUN_08005ce8": "calculate_value",
                "FUN_08005cb6": "get_sign",
                "FUN_08005d42": "get_value_at_index_08005d42",
                "param_2": "index",
                "param_3": "base"
            },
            "code": "int get_value_at_index_08005d42(uint* array, uint index, uint base) {\n  int result;\n  if (base == 0) {\n    result = (**(code **)*array)(array,index & 0xff);\n    return result;\n  }\n  if (base != 10) {\n    result = calculate_value(array, index, base & 0xff);\n    return result;\n  }\n  if (-1 < (int)index) {\n    result = calculate_value(array, index, 10);\n    return result;\n  }\n  int sign = get_sign(array, 0x2d);\n  int absolute_value = calculate_value(array, -index, 10);\n  return absolute_value + sign;\n}",
            "called": [
                "FUN_08005ce8",
                "FUN_08005cb6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d42",
            "calling": [
                "FUN_08005d82"
            ],
            "imported": true,
            "current_name": "get_value_at_index_08005d42"
        },
        "FUN_08004b34": {
            "renaming": {
                "FUN_08004d90": "call_helper_function",
                "FUN_08004b34": "call_function_and_return_08004b34"
            },
            "code": "void call_function_and_return_08004b34(void)\n{\n  call_helper_function();\n  return;\n}",
            "called": [
                "FUN_08004d90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b34",
            "calling": [
                "FUN_08003ed8"
            ],
            "imported": true,
            "current_name": "call_function_and_return_08004b34"
        },
        "FUN_08004c52": {
            "renaming": {
                "FUN_08004c52": "initialize_system_08004c52",
                "FUN_08001c88": "initialize_network",
                "FUN_08001b48": "initialize_database"
            },
            "code": "void initialize_system_08004c52(void)\n{\n  initialize_network();\n  initialize_database();\n  return;\n}",
            "called": [
                "FUN_08001c88",
                "FUN_08001b48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c52",
            "calling": [
                "FUN_08001c32"
            ],
            "imported": true,
            "current_name": "initialize_system_08004c52"
        },
        "FUN_080013a4": {
            "renaming": {
                "iVar1": "data_length",
                "iVar2": "index",
                "FUN_08001294": "copy_data",
                "param_1": "data_pointer",
                "FUN_08005848": "end_data_transfer",
                "param_2": "data_size",
                "param_3": "channel_pointer",
                "param_4": "channel_size",
                "FUN_080012c0": "set_data_length",
                "FUN_080013a4": "print_data_080013a4",
                "FUN_080057b4": "send_data"
            },
            "code": "void print_data_080013a4(int data_pointer, int data_size, int channel_pointer, int channel_size)\n{\n  int index = 0;\n  if (data_size > 1) {\n    *(byte *)(data_pointer + 0x13) = *(byte *)(data_pointer + 0x13) | 8;\n  }\n  *(char *)(data_pointer + 0x17) = (char)data_size;\n  copy_data(data_pointer,0,0x40,channel_pointer,channel_pointer + 0x40);\n  if ((channel_size != 0) && (data_size == 1)) {\n    *(byte *)(data_pointer + 0x13) = *(byte *)(data_pointer + 0x13) | 4;\n  }\n  send_data(*(undefined *)(data_pointer + 8),1);\n  if (*(char *)(data_pointer + 9) != -1) {\n    send_data(*(char *)(data_pointer + 9),1);\n  }\n  send_data(*(undefined *)(data_pointer + 10),1);\n  while( true ) {\n    int data_length = (*(byte *)(data_pointer + 0x13) & 0x10) == 0 ? 4 : 8;\n    if (data_length <= index) break;\n    send_data(*(undefined *)(data_pointer + index + 0xb),1);\n    index = index + 1;\n  }\n  end_data_transfer(*(undefined *)(data_pointer + 8),0);\n  end_data_transfer(*(undefined *)(data_pointer + 10),0);\n  if (*(char *)(data_pointer + 9) != -1) {\n    end_data_transfer(*(char *)(data_pointer + 9),0);\n  }\n  if ((*(byte *)(data_pointer + 0x13) & 0x10) == 0) {\n    set_data_length(data_pointer,3);\n    set_data_length(data_pointer,3);\n    set_data_length(data_pointer,3);\n    set_data_length(data_pointer,2);\n  }\n  else {\n    set_data_length_with_flag(data_pointer,*(byte *)(data_pointer + 0x13) | 0x20,0);\n    set_data_length_with_flag(data_pointer,*(byte *)(data_pointer + 0x13) | 0x20,0);\n    set_data_length_with_flag(data_pointer,*(byte *)(data_pointer + 0x13) | 0x20,0);\n  }\n  set_data_length_with_flag(data_pointer,*(byte *)(data_pointer + 0x13) | 0x20,0);\n  *(undefined *)(data_pointer + 0x14) = 4;\n  end_data_transfer(data_pointer);\n  end_data_transfer(data_pointer);\n  *(undefined *)(data_pointer + 0x15) = 2;\n  set_data_length_with_flag(data_pointer,6,0);\n  return;\n}",
            "called": [
                "FUN_08001310",
                "FUN_080012c0",
                "FUN_0800138e",
                "FUN_08005848",
                "FUN_08001294",
                "FUN_0800135a",
                "FUN_080057b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080013a4",
            "calling": [
                "FUN_08000bcc",
                "FUN_080014ba"
            ],
            "imported": true,
            "current_name": "print_data_080013a4"
        },
        "FUN_08006d14": {
            "renaming": {
                "iVar3": "data_structure_address",
                "piVar2": "current_ptr",
                "param_1": "error_code",
                "piVar1": "data_structure_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "size",
                "FUN_08006d14": "initialize_data_structure_08006d14",
                "ppiVar4": "next_ptr_ptr"
            },
            "code": "int* initialize_data_structure_08006d14(undefined4 *error_code, undefined4 param_2, undefined4 param_3, undefined4 size)\n{\n  int* data_structure_ptr;\n  int* current_ptr;\n  int data_structure_address;\n  int** next_ptr_ptr;\n\n  data_structure_address = *(int*)PTR_PTR_DAT_08006d88;\n  if (*(int*)(data_structure_address + 0x18) == 0)\n  {\n    initialize_data_structure_08006d14(data_structure_address);\n  }\n  next_ptr_ptr = (int**)(data_structure_address + 0x48);\n  do\n  {\n    current_ptr = next_ptr_ptr[2];\n    data_structure_ptr = next_ptr_ptr[1];\n    while (data_structure_ptr = (int*)((int)data_structure_ptr + -1), -1 < (int)data_structure_ptr)\n    {\n      if (*(short*)(current_ptr + 3) == 0)\n      {\n        *(undefined2*)((int)current_ptr + 0xe) = 0xffff;\n        current_ptr[0x19] = 0;\n        *(undefined2*)(current_ptr + 3) = 1;\n        *current_ptr = 0;\n        current_ptr[2] = 0;\n        current_ptr[1] = 0;\n        current_ptr[4] = 0;\n        current_ptr[5] = 0;\n        current_ptr[6] = 0;\n        initialize_data_structure_08006d14(current_ptr + 0x17, 0, 8, 1, size);\n        current_ptr[0xd] = 0;\n        current_ptr[0xe] = 0;\n        current_ptr[0x12] = 0;\n        current_ptr[0x13] = 0;\n        return current_ptr;\n      }\n      current_ptr = current_ptr + 0x1a;\n    }\n    if (*next_ptr_ptr == (int*)0x0)\n    {\n      data_structure_ptr = (int*)allocate_memory(error_code, 4);\n      *next_ptr_ptr = data_structure_ptr;\n      if (data_structure_ptr == (int*)0x0)\n      {\n        *error_code = 0xc;\n        return (int*)0x0;\n      }\n    }\n    next_ptr_ptr = (int**)*next_ptr_ptr;\n  } while(true);\n}",
            "called": [
                "FUN_08006cb4",
                "FUN_08006c88",
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d14",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": true,
            "current_name": "initialize_data_structure_08006d14"
        },
        "FUN_080004f8": {
            "renaming": {
                "FUN_080004f8": "FUNC_080004f8"
            },
            "code": "\nulonglong FUNC_080004f8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = FUN_080006d4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006d4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004f8",
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8",
                "FUN_080016b4"
            ],
            "imported": true,
            "current_name": "FUNC_080004f8"
        }
    },
    "used_tokens": 228299,
    "layers": [
        [
            "FUN_08002470",
            "FUN_08007004",
            "FUN_08005740",
            "FUN_08006158",
            "FUN_08004ec4",
            "FUN_08000178",
            "FUN_08006c88",
            "FUN_080060e4",
            "FUN_0800258c",
            "FUN_08004e20",
            "FUN_0800573c",
            "FUN_080032b4",
            "FUN_08004d06",
            "FUN_080056d8",
            "FUN_080019f6",
            "FUN_08002f9c",
            "FUN_08005510",
            "FUN_08005750",
            "FUN_08002cf2",
            "FUN_08006288",
            "FUN_08002004",
            "FUN_08005754",
            "FUN_08005fc8",
            "FUN_08002ab8",
            "FUN_080068f0",
            "FUN_0800138e",
            "FUN_0800598a",
            "FUN_08001c88",
            "FUN_08001a44",
            "FUN_08002c54",
            "FUN_080043b4",
            "FUN_0800441a",
            "FUN_08004d18",
            "FUN_080006d4",
            "FUN_08006174",
            "FUN_08007028",
            "FUN_08002494",
            "FUN_080055bc",
            "FUN_08001960",
            "FUN_08004ca2",
            "FUN_08002810",
            "FUN_0800224c",
            "FUN_080054b0",
            "FUN_08006f00",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08005890",
            "FUN_08005da0",
            "FUN_08004cb2",
            "FUN_08004ef4",
            "FUN_08001294",
            "FUN_08002384",
            "FUN_08002ad8",
            "FUN_08004204",
            "FUN_08005da8",
            "FUN_080045fe",
            "FUN_08005f2c",
            "FUN_080055e0",
            "FUN_08005f40",
            "FUN_0800213c",
            "FUN_0800455a",
            "FUN_08001a66",
            "FUN_08003c44",
            "FUN_080028d2",
            "FUN_08000a18",
            "FUN_08005384",
            "FUN_08005b3c",
            "FUN_080046b8",
            "FUN_08004c8a",
            "FUN_08001cd0",
            "FUN_08004a4c",
            "FUN_08006112",
            "FUN_08004974",
            "FUN_08003520",
            "FUN_08002ca6",
            "FUN_08005b54",
            "FUN_08004618",
            "FUN_08006c40",
            "FUN_0800157c",
            "FUN_080045a2",
            "FUN_08001c32",
            "FUN_080047e8",
            "FUN_080057b4",
            "FUN_08001b18",
            "thunk_FUN_08005750",
            "FUN_0800092c",
            "FUN_08005d8a",
            "FUN_08002560",
            "FUN_08006e90",
            "FUN_08006920",
            "FUN_080008ba",
            "FUN_08002d1c",
            "FUN_08005714",
            "FUN_08003da4",
            "FUN_08005a44",
            "FUN_080009dc",
            "FUN_0800417c",
            "FUN_08004b94",
            "FUN_080058e0",
            "FUN_08001918",
            "FUN_0800611c",
            "FUN_080047f4",
            "FUN_080009f0",
            "FUN_0800134e",
            "FUN_08002c10",
            "FUN_08006be0",
            "FUN_080012e8",
            "FUN_08006370",
            "FUN_080024f8",
            "FUN_08001ab0",
            "FUN_08006ac0",
            "FUN_08004198",
            "FUN_08001c3c",
            "FUN_08000a2c",
            "FUN_08001366",
            "FUN_08005848",
            "FUN_08000ae8",
            "FUN_08003ed8",
            "FUN_080061e0",
            "FUN_08005604",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800135a",
            "FUN_08005c96",
            "FUN_0800571a",
            "FUN_08002efc",
            "FUN_0800365c",
            "FUN_080033b8",
            "FUN_080069e4",
            "FUN_08004b9e",
            "FUN_08005730",
            "FUN_08002582",
            "FUN_08004884",
            "FUN_08001be8",
            "FUN_080061f0",
            "FUN_08002348",
            "FUN_080060d4",
            "FUN_08005a68",
            "FUN_08001814",
            "FUN_08000aec",
            "FUN_0800572c",
            "FUN_08004e12",
            "FUN_08000a58",
            "FUN_08001b48",
            "FUN_08004092",
            "FUN_08005cd4",
            "FUN_08005bb0",
            "FUN_080014ba",
            "FUN_08003c90",
            "FUN_08002514",
            "FUN_08005c1c",
            "FUN_08006dc8",
            "FUN_0800412c",
            "FUN_08007090",
            "FUN_0800492c",
            "FUN_0800480a",
            "FUN_080015f8",
            "FUN_08005c38",
            "FUN_08005f8c",
            "FUN_08006f5a",
            "FUN_08000b08",
            "FUN_08006cb4",
            "FUN_08004c5e",
            "FUN_08004b3c",
            "FUN_08001550",
            "FUN_08001310",
            "FUN_080009a8",
            "FUN_08004d90",
            "FUN_08005ce8",
            "FUN_0800316c",
            "FUN_08004828",
            "FUN_08003afa",
            "FUN_08004948",
            "FUN_08005b24",
            "FUN_080049f0",
            "FUN_08001e40",
            "FUN_08003a68",
            "FUN_080012a2",
            "FUN_08004c78",
            "FUN_08001e48",
            "FUN_080009b8",
            "FUN_08000aa8",
            "FUN_08000a04",
            "FUN_0800010c",
            "FUN_08001cac",
            "FUN_08005a18",
            "FUN_08003f18",
            "FUN_0800591e",
            "FUN_08002540",
            "FUN_08006344",
            "FUN_080009c8",
            "FUN_08002db2",
            "FUN_08001cc4",
            "FUN_08003ea0",
            "FUN_0800306c",
            "FUN_0800548c",
            "FUN_08004848",
            "FUN_08005d82",
            "FUN_08006f92",
            "FUN_080012c0",
            "FUN_08001f80",
            "FUN_08001f84",
            "FUN_08000bcc",
            "FUN_0800281e",
            "FUN_08006198",
            "FUN_08007048",
            "FUN_08003c50",
            "FUN_080065c0",
            "FUN_080054d4",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_0800282c",
            "FUN_080015b2",
            "FUN_0800040c",
            "FUN_08004df4",
            "FUN_08004bb0",
            "FUN_08004df8",
            "FUN_08001510",
            "FUN_08002af8",
            "FUN_080028de",
            "FUN_08002848",
            "FUN_08004e70",
            "FUN_080020f0",
            "FUN_08006e10",
            "FUN_08004e74",
            "FUN_08004c30",
            "FUN_08006f38",
            "FUN_08004cce",
            "FUN_08003ad4",
            "FUN_08004110",
            "FUN_08004ce2",
            "FUN_08005568",
            "FUN_08004478",
            "FUN_08005f5e",
            "FUN_08005cb6",
            "FUN_08003c70",
            "FUN_080053d4",
            "FUN_08002b84",
            "FUN_08004c48",
            "FUN_0800042c",
            "FUN_08005f6c",
            "FUN_08005cc0",
            "FUN_0800706c",
            "FUN_08002624",
            "FUN_080040b0",
            "FUN_08005d42",
            "FUN_08004b34",
            "FUN_08004c52",
            "FUN_080013a4",
            "FUN_08006d14"
        ]
    ],
    "locked_functions": []
}