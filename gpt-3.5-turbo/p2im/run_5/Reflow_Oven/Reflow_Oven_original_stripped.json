{
    "functions": {
        "FUN_08002470": {
            "renaming": {
                "FUN_08002470": "set_priority_group_08002470",
                "PriorityGroup": "group",
                "*(uint32_t *)(DAT_08002490 + 0xc)": "priority",
                "*(uint *)(DAT_08002490 + 0xc)": "masked",
                "PriorityGroup & 7": "group & 7",
                "(PriorityGroup & 7) << 8": "shifted",
                "0xf8ff": "masked",
                "0x5fa0000": "0x5fa0000"
            },
            "code": "void set_priority_group_08002470(uint32_t *)(DAT_08002490 + 0xc)_group(uint32_t group) {\n    uint32_t* *(uint32_t *)(DAT_08002490 + 0xc) = (uint32_t*)(DAT_08002490 + 0xc);\n    uint32_t *(uint *)(DAT_08002490 + 0xc) = *(uint *)(DAT_08002490 + 0xc) & 0xf8ff;\n    uint32_t shifted = (group & 7) << 8;\n    **(uint32_t *)(DAT_08002490 + 0xc) = shifted | *(uint *)(DAT_08002490 + 0xc) | 0x5fa0000;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002470",
            "calling": [
                "premain",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "set_priority_group_08002470"
        },
        "FUN_08007004": {
            "renaming": {
                "FUN_08007004": "get_file_status_08007004",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_info",
                "puVar1": "errno_ptr",
                "iVar2": "status"
            },
            "code": "void get_file_status_08007004(int* error_code, int file_descriptor, stat* file_info)\n{\n  int* errno_ptr = PTR_errno_08007024;\n  *errno_ptr = 0;\n  int status = _fstat(file_descriptor, file_info);\n  if (status == -1 && *errno_ptr != 0)\n  {\n    *error_code = *errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007004",
            "calling": [
                "__swhatbuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_08007004"
        },
        "FUN_08006394": {
            "renaming": {
                "FUN_08006394": "FUNC_08006394"
            },
            "code": "\nint FUNC_08006394(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  bool bVar1;\n  undefined *puVar2;\n  int iVar3;\n  void *pvVar4;\n  int *piVar5;\n  byte *pbVar6;\n  byte *pbVar7;\n  int unaff_r9;\n  int iVar8;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    __sinit();\n  }\n  if (param_2 == PTR___sf_fake_stdin_080065a0) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR___sf_fake_stdout_080065a8) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR___sf_fake_stderr_080065ac) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar8 = __swsetup_r(param_1,param_2), iVar8 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar6 = param_3;\nLAB_080063d6:\n  pbVar7 = pbVar6;\n  if (*pbVar7 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  pbVar6 = pbVar7 + 1;\n  if (*pbVar7 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  iVar8 = (int)pbVar7 - (int)param_3;\n  if (iVar8 != 0) {\n    iVar3 = __sfputs_r(param_1,param_2,param_3,iVar8);\n    if (iVar3 == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar8;\n  }\n  if (*pbVar7 == 0) goto LAB_08006580;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar6 = pbVar7 + 1;\n  while( true ) {\n    pvVar4 = memchr(PTR_s___0__080065a4,(uint)*pbVar6,5);\n    puVar2 = PTR_DAT_080065b0;\n    param_3 = pbVar6 + 1;\n    if (pvVar4 == (void *)0x0) break;\n    local_88 = 1 << ((int)pvVar4 - (int)PTR_s___0__080065a4 & 0xffU) | local_88;\n    pbVar6 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar6 == 0x2a) {\n    piVar5 = local_8c + 1;\n    iVar8 = *local_8c;\n    local_8c = piVar5;\n    if (-1 < iVar8) goto LAB_080064b0;\n    local_7c = -iVar8;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar1 = false;\n    iVar8 = local_7c;\n    param_3 = pbVar6;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n      bVar1 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar1) {\nLAB_080064b0:\n      local_7c = iVar8;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar5 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar5;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar1 = false;\n      iVar8 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n        bVar1 = true;\n      }\n      if (bVar1) {\n        local_84 = iVar8;\n      }\n    }\n  }\n  pvVar4 = memchr(PTR_DAT_080065b0,(uint)*param_3,3);\n  if (pvVar4 != (void *)0x0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << ((int)pvVar4 - (int)puVar2 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  pvVar4 = memchr(PTR_s_efgEFG_080065b4,(uint)local_70,6);\n  if (pvVar4 == (void *)0x0) {\n    iVar8 = _printf_i(param_1,&local_88,param_2,DAT_080065bc,&local_8c);\n  }\n  else {\n    iVar8 = param_1;\n    if (DAT_080065b8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar8 = unaff_r9;\n      goto LAB_08006532;\n    }\n  }\n  if (iVar8 == -1) goto LAB_08006580;\nLAB_08006532:\n  local_74 = local_74 + iVar8;\n  pbVar6 = param_3;\n  unaff_r9 = iVar8;\n  goto LAB_080063d6;\n}\n\n",
            "called": [
                "__sinit",
                "__swsetup_r",
                "memchr",
                "__sfputs_r",
                "_printf_i"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006394",
            "calling": [
                "fiprintf",
                "iprintf"
            ],
            "imported": false,
            "current_name": "FUNC_08006394"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "reset_I2C_DMA_080035fc",
                "hdma": "i2c_handle",
                "hi2c": "i2c",
                "CR1": "control_register_1",
                "XferCount": "transfer_count",
                "hdmatx": "dma_tx_handle",
                "hdmarx": "dma_rx_handle",
                "State": "i2c_state",
                "HAL_I2C_STATE_ABORT": "I2C_ABORTED",
                "HAL_I2C_STATE_READY": "I2C_READY",
                "Mode": "i2c_mode",
                "HAL_I2C_MODE_NONE": "I2C_NONE",
                "ErrorCode": "error_code",
                "HAL_I2C_ErrorCallback": "I2C_error_callback",
                "HAL_I2C_AbortCpltCallback": "I2C_abort_complete_callback"
            },
            "code": "void reset_I2C_DMA_080035fc(I2C_HandleTypeDef *i2c_handle)\n{\n  I2C_HandleTypeDef *i2c;\n  i2c = (I2C_HandleTypeDef *)i2c_handle->Parent;\n  i2c->Instance->CR1 &= ~(1 << 10);\n  i2c->XferCount = 0;\n  i2c->hdmatx->XferAbortCallback = NULL;\n  i2c->hdmarx->XferAbortCallback = NULL;\n  if (i2c->State != HAL_I2C_STATE_ABORT) {\n    i2c->State = HAL_I2C_STATE_READY;\n    i2c->Mode = HAL_I2C_MODE_NONE;\n    i2c->Instance->CR1 &= ~(1 << 0);\n    HAL_I2C_ErrorCallback(i2c);\n    return;\n  }\n  i2c->State = HAL_I2C_STATE_READY;\n  i2c->Mode = HAL_I2C_MODE_NONE;\n  i2c->ErrorCode = 0;\n  i2c->Instance->CR1 &= ~(1 << 0);\n  HAL_I2C_AbortCpltCallback(i2c);\n  return;\n}",
            "called": [
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [],
            "imported": false,
            "current_name": "reset_I2C_DMA_080035fc"
        },
        "FUN_08005740": {
            "renaming": {
                "FUN_08005740": "set_errno_08005740",
                "pid_UNUSED": "pid_unused",
                "sig_UNUSED": "sig_unused",
                "PTR_errno_0800574c": "PTR_errno_0800574c"
            },
            "code": "int set_errno_08005740(int pid_unused, int sig_unused)\n{\n  *(int *)PTR_errno_0800574c = 22;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005740",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "set_errno_08005740"
        },
        "FUN_08006158": {
            "renaming": {
                "FUN_08006158": "calculate_value_if_data_not_null_08006158",
                "param_1": "input_value",
                "param_2": "data_value",
                "DAT_08006170": "data_not_null_check"
            },
            "code": "unsigned long long calculate_value_if_data_not_null_08006158(unsigned int input_value, unsigned int data_value) {\n  if (DAT_08006170 != 0) {\n    return CONCAT44(input_value, 2);\n  }\n  return (unsigned long long)data_value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006158",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "calculate_value_if_data_not_null_08006158"
        },
        "FUN_08006d8c": {
            "renaming": {
                "FUN_08006d8c": "process_data_08006d8c",
                "param_1": "data_size",
                "param_2": "callback_func",
                "param_3": "arg1",
                "param_4": "arg2",
                "piVar3": "data_ptr",
                "iVar4": "data_entry",
                "iVar6": "data_count",
                "uVar1": "callback_result",
                "uVar5": "result"
            },
            "code": "uint process_data_08006d8c(int data_size, code* callback_func, undefined4 arg1, undefined4 arg2)\n{\n  uint result = 0;\n  int* data_ptr;\n  int data_entry;\n  int data_count;\n  \n  data_count = 0;\n  for (data_ptr = (int *)(data_size + 0x48); data_ptr != (int *)0x0; data_ptr = (int *)*data_ptr) {\n    data_entry = data_ptr[2];\n    data_count = data_ptr[1];\n    while (data_count = data_count - 1, -1 < data_count) {\n      if ((1 < *(ushort *)(data_entry + 0xc)) && (data_entry = *(short *)(data_entry + 0xe) + 1, data_entry != 0)) {\n        uint callback_result = (*callback_func)(data_size, data_entry, arg1, data_entry, arg2);\n        result = result | callback_result;\n      }\n      data_entry = data_entry + 0x68;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d8c",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_data_08006d8c"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "handle_i2c_event_interrupt_08004f2c",
                "PTR_i2c_handles_08004f38": "PTR_i2c_handles",
                "*(I2C_HandleTypeDef **)(PTR_i2c_handles_08004f38 + 4)": "i2c_handle"
            },
            "code": "void handle_i2c_event_interrupt_08004f2c(I2C_HandleTypeDef* *(I2C_HandleTypeDef **)(PTR_i2c_handles_08004f38 + 4))\n{\n  HAL_I2C_EV_IRQHandler(*(I2C_HandleTypeDef **)(PTR_i2c_handles_08004f38 + 4));\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_event_interrupt_08004f2c"
        },
        "FUN_08003688": {
            "renaming": {
                "FUN_08003688": "FUNC_08003688"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nHAL_StatusTypeDef_conflict FUNC_08003688(RCC_OscInitTypeDef_conflict *RCC_OscInitStruct)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  HAL_StatusTypeDef_conflict HVar3;\n  uint32_t uVar4;\n  uint32_t uVar5;\n  bool bVar6;\n  uint32_t tmpreg;\n  \n  puVar1 = DAT_08003948;\n  if ((RCC_OscInitStruct->OscillatorType & 1) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 4) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) != 0)))) {\n      if (((*DAT_08003948 & 0x20000) != 0) && (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      uVar5 = RCC_OscInitStruct->HSEState;\n      if (uVar5 == 0x10000) {\n        *DAT_08003948 = *DAT_08003948 | 0x10000;\n      }\n      else if (uVar5 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar5 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08003948 = *DAT_08003948 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (RCC_OscInitStruct->HSEState == 0) {\n        uVar5 = HAL_GetTick();\n        while ((*DAT_08003948 & 0x20000) != 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar5) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        uVar5 = HAL_GetTick();\n        while ((*DAT_08003948 & 0x20000) == 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar5) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 2) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 0) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) == 0)))) {\n      if (((*DAT_08003948 & 2) != 0) && (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n    else if (RCC_OscInitStruct->HSIState == 0) {\n      *DAT_0800394c = 0;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08003948 & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_0800394c = 1;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08003948 & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 8) != 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      *DAT_08003950 = 0;\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003948[9] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08003950 = 1;\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003948[9] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 4) != 0) {\n    bVar6 = (DAT_08003948[7] & 0x10000000) == 0;\n    if (bVar6) {\n      DAT_08003948[7] = DAT_08003948[7] | 0x10000000;\n    }\n    if ((*DAT_08003954 & 0x100) == 0) {\n      *DAT_08003954 = *DAT_08003954 | 0x100;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08003954 & 0x100) == 0) {\n        uVar4 = HAL_GetTick();\n        if (100 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    puVar2 = DAT_08003a60;\n    puVar1 = DAT_08003948;\n    uVar5 = RCC_OscInitStruct->LSEState;\n    if (uVar5 == 1) {\n      DAT_08003948[8] = DAT_08003948[8] | 1;\n    }\n    else if (uVar5 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar5 == 5) {\n      DAT_08003a60[8] = DAT_08003a60[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08003948[8] = DAT_08003948[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (RCC_OscInitStruct->LSEState == 0) {\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003a60[8] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003948[8] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (bVar6) {\n      DAT_08003a60[7] = DAT_08003a60[7] & 0xefffffff;\n    }\n  }\n  uVar5 = (RCC_OscInitStruct->PLL).PLLState;\n  if (uVar5 == 0) {\n    HVar3 = HAL_OK;\n  }\n  else if ((DAT_08003a60[1] & 0xc) == 8) {\n    HVar3 = HAL_ERROR;\n  }\n  else if (uVar5 == 2) {\n    *DAT_08003a64 = 0;\n    uVar5 = HAL_GetTick();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        if ((RCC_OscInitStruct->PLL).PLLSource == 0x10000) {\n          DAT_08003a60[1] = DAT_08003a60[1] & 0xfffdffff | RCC_OscInitStruct->HSEPredivValue;\n        }\n        DAT_08003a60[1] =\n             DAT_08003a60[1] & 0xffc2ffff |\n             (RCC_OscInitStruct->PLL).PLLSource | (RCC_OscInitStruct->PLL).PLLMUL;\n        *DAT_08003a64 = 1;\n        uVar5 = HAL_GetTick();\n        do {\n          if ((*DAT_08003a60 & 0x2000000) != 0) {\n            return HAL_OK;\n          }\n          uVar4 = HAL_GetTick();\n        } while (uVar4 - uVar5 < 3);\n        return HAL_TIMEOUT;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar5 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  else {\n    *DAT_08003a64 = 0;\n    uVar5 = HAL_GetTick();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        return HAL_OK;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar5 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  return HVar3;\n}\n\n",
            "called": [
                "HAL_GetTick",
                "RCC_Delay"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003688",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_08003688"
        },
        "FUN_08004ec4": {
            "renaming": {
                "FUN_08004ec4": "receive_data_from_slave_08004ec4",
                "hi2c": "i2c_handle",
                "piVar1": "i2c_object",
                "uVar2": "remaining_data_size",
                "get_i2c_obj": "get_i2c_object",
                "i2c_onSlaveReceive": "on_slave_receive",
                "slaveMode": "mode",
                "i2cTxRxBuffer": "transmit_receive_buffer",
                "HAL_I2C_EnableListen_IT": "HAL_I2C_EnableListen_IT"
            },
            "code": "void receive_data_from_slave_08004ec4(I2C_HandleTypeDef *i2c_handle)\n{\n  i2c_t *i2c_object;\n  uint8_t remaining_data_size;\n\n  i2c_object = get_i2c_object(i2c_handle);\n  if (((i2c_object->on_slave_receive != (_func_void_uint8_t_ptr_int *)0x0) &&\n      (i2c_object->mode == '\\x01')) &&\n     (remaining_data_size = 0x20 - *(uint8_t *)&(i2c_object->handle).XferSize & 0xff, remaining_data_size != 0)) {\n    (*i2c_object->on_slave_receive)(i2c_object->transmit_receive_buffer, remaining_data_size);\n  }\n  HAL_I2C_EnableListen_IT(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ec4",
            "calling": [
                "I2C_Slave_AF",
                "I2C_ITError",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "receive_data_from_slave_08004ec4"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "count_characters_08000178",
                "__s": "string",
                "pcVar3": "string_start",
                "pcVar2": "next_character",
                "cVar1": "current_character"
            },
            "code": "size_t count_characters_08000178(char *string) {\n  char current_character;\n  char *next_character;\n  char *string_start = string;\n  do {\n    next_character = string + 1;\n    current_character = *string;\n    string = next_character;\n  } while (current_character != '\\0');\n  return (size_t)(next_character + (-1 - (int)string_start));\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "print",
                "printNumber"
            ],
            "imported": false,
            "current_name": "count_characters_08000178"
        },
        "FUN_08004418": {
            "renaming": {
                "FUN_08004418": "do_nothing_08004418"
            },
            "code": "\nvoid do_nothing_08004418(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004418",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08004418"
        },
        "FUN_08006c88": {
            "renaming": {
                "FUN_08006c88": "allocate_memory_for_struct_08006c88",
                "param_1": "num_structs",
                "param_2": "struct_size",
                "puVar1": "struct_ptr",
                "iVar2": "total_size"
            },
            "code": "undefined4 * allocate_memory_for_struct_08006c88(int num_structs, int struct_size){\n  undefined4 *struct_ptr;\n  int total_size = (num_structs - 1) * struct_size + 0x74;\n  struct_ptr = (undefined4 *)_malloc_r(num_structs, total_size);\n  if (struct_ptr != (undefined4 *)0x0) {\n    *struct_ptr = 0;\n    struct_ptr[1] = num_structs;\n    struct_ptr[2] = struct_ptr + 3;\n    memset(struct_ptr + 3, 0, total_size - 0x0c);\n  }\n  return struct_ptr;\n}",
            "called": [
                "_malloc_r",
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c88",
            "calling": [
                "__sfp"
            ],
            "imported": false,
            "current_name": "allocate_memory_for_struct_08006c88"
        },
        "FUN_080060e4": {
            "renaming": {
                "FUN_080060e4": "process_gpio_interrupt_080060e4",
                "GPIO_Pin": "pin_number",
                "bVar1": "pin_id",
                "PTR_gpio_irq_conf_08006100": "irq_conf_ptr",
                "function_void___": "std::function<void()>"
            },
            "code": "void process_gpio_interrupt_080060e4(uint16_t pin_number) {\n  uint8_t pin_id = get_pin_id(pin_number);\n  uint32_t* PTR_gpio_irq_conf_08006100 = PTR_gpio_irq_conf_08006100 + pin_id * 0x14 + 0xc;\n  if (*PTR_gpio_irq_conf_08006100 != 0) {\n    std::function<void()>* func_ptr = (std::function<void()>*)(PTR_gpio_irq_conf_08006100 + pin_id * 0x14 + 4);\n    func_ptr->operator()();\n  }\n}",
            "called": [
                "operator()",
                "get_pin_id"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060e4",
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "imported": false,
            "current_name": "process_gpio_interrupt_080060e4"
        },
        "FUN_0800258c": {
            "renaming": {
                "FUN_0800258c": "dma_reset_channel_0800258c",
                "hdma": "dma_handle",
                "uVar1": "channel_flags",
                "pDVar2": "dma_channel",
                "HAL_DMA_STATE_BUSY": "HAL_DMA_STATE_BUSY",
                "hdma->ErrorCode": "dma_handle->ErrorCode",
                "4": "HAL_DMA_ERROR_BUSY",
                "HAL_ERROR": "HAL_ERROR",
                "hdma->Instance->CCR": "dma_channel->CCR",
                "0xfffffff1": "~(DMA_CCR_EN | DMA_CCR_DIR)",
                "0xfffffffe": "~DMA_CCR_EN",
                "DAT_0800261c": "PTR_DAT_0800261c",
                "DMA_Channel_TypeDef": "DMA_Channel_TypeDef",
                "&DAT_0800261c[1].CNDTR": "(DMA_Channel_TypeDef *)&PTR_DAT_0800261c[1].CNDTR",
                "&DAT_0800261c[2].CPAR": "(DMA_Channel_TypeDef *)&PTR_DAT_0800261c[2].CPAR",
                "&DAT_0800261c[3].CMAR": "(DMA_Channel_TypeDef *)&PTR_DAT_0800261c[3].CMAR",
                "DAT_0800261c + 5": "PTR_DAT_0800261c + 5",
                "&DAT_0800261c[6].CNDTR": "(DMA_Channel_TypeDef *)&PTR_DAT_0800261c[6].CNDTR",
                "0x10": "0x10",
                "0x100": "0x100",
                "0x1000": "0x1000",
                "0x10000": "0x10000",
                "0x100000": "0x100000",
                "0x1000000": "0x1000000",
                "DAT_08002620 + 4": "PTR_DAT_08002620[1]",
                "HAL_DMA_STATE_READY": "HAL_DMA_STATE_READY",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "hdma->XferAbortCallback": "dma_handle->XferAbortCallback",
                "(_func_void___DMA_HandleTypeDef_ptr *)0x0": "(void (*)(DMA_HandleTypeDef *))0",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef dma_reset_channel_0800258c(DMA_HandleTypeDef *dma_handle)\n{\n  uint32_t channel_flags;\n  DMA_Channel_TypeDef *dma_channel;\n  \n  if (dma_handle->State != HAL_DMA_STATE_BUSY) {\n    dma_handle->ErrorCode = HAL_DMA_ERROR_BUSY;\n    return HAL_ERROR;\n  }\n  dma_channel = dma_handle->Instance;\n  dma_channel->CCR &= ~(DMA_CCR_EN | DMA_CCR_DIR);\n  if (dma_channel == DAT_0800261c) {\n    channel_flags = 1;\n  }\n  else if (dma_channel == &DAT_0800261c[1].CNDTR) {\n    channel_flags = 0x10;\n  }\n  else if (dma_channel == &DAT_0800261c[2].CPAR) {\n    channel_flags = 0x100;\n  }\n  else if (dma_channel == &DAT_0800261c[3].CMAR) {\n    channel_flags = 0x1000;\n  }\n  else if (dma_channel == DAT_0800261c + 5) {\n    channel_flags = 0x10000;\n  }\n  else if (dma_channel == &DAT_0800261c[6].CNDTR) {\n    channel_flags = 0x100000;\n  }\n  else {\n    channel_flags = 0x1000000;\n  }\n  DAT_08002620 + 4 = channel_flags;\n  dma_handle->State = HAL_DMA_STATE_READY;\n  dma_handle->Lock = HAL_UNLOCKED;\n  if (dma_handle->XferAbortCallback != (void (*)(DMA_HandleTypeDef *))0) {\n    (*dma_handle->XferAbortCallback)(dma_handle);\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800258c",
            "calling": [
                "I2C_ITError",
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "dma_reset_channel_0800258c"
        },
        "FUN_08004e20": {
            "renaming": {
                "FUN_08004e20": "check_timer_status_08004e20",
                "PTR_timer_handles_08004e30": "timer_handle_ptr"
            },
            "code": "void check_timer_status_08004e20(void)\n{\n  TIM_HandleTypeDef **PTR_timer_handles_08004e30 = (TIM_HandleTypeDef **)PTR_timer_handles_08004e30;\n  if (*PTR_timer_handles_08004e30 != NULL) {\n    HAL_TIM_IRQHandler(*PTR_timer_handles_08004e30);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e20",
            "calling": [],
            "imported": false,
            "current_name": "check_timer_status_08004e20"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "wait_for_status_update_0800573c",
                "status_UNUSED": "status"
            },
            "code": "void wait_for_status_update_0800573c(int status_UNUSED)\n{\n  while( true )\n  {\n    // Do nothing, just wait for a status update\n  }\n}",
            "called": [
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "_exit",
                "abort"
            ],
            "imported": false,
            "current_name": "wait_for_status_update_0800573c"
        },
        "FUN_080032b4": {
            "renaming": {
                "FUN_080032b4": "handle_i2c_interrupt_080032b4",
                "hi2c": "i2c_handle",
                "HVar1": "current_state",
                "pIVar2": "i2c_instance",
                "puVar3": "buffer_ptr",
                "tmpreg": "tmpreg"
            },
            "code": "HAL_StatusTypeDef handle_i2c_interrupt_080032b4(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_StateTypeDef current_state = i2c_handle->State;\n  I2C_TypeDef *i2c_instance = i2c_handle->Instance;\n  uint8_t *buffer_ptr;\n  uint32_t tmpreg;\n\n  i2c_instance->CR2 &= 0xfffff8ff;\n  i2c_instance->CR1 |= 1;\n  i2c_instance->CR1 &= 0xfffffbff;\n\n  if ((i2c_instance->CR2 & 0x800) != 0) {\n    if ((current_state == HAL_I2C_STATE_BUSY_RX) || (current_state == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2c_handle->XferCount = (uint16_t)i2c_handle->hdmarx->Instance->CNDTR;\n    }\n    else {\n      i2c_handle->XferCount = (uint16_t)i2c_handle->hdmatx->Instance->CNDTR;\n    }\n  }\n\n  if (i2c_handle->XferCount != 0) {\n    if ((i2c_instance->SR1 & 4) != 0) {\n      buffer_ptr = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = buffer_ptr + 1;\n      *buffer_ptr = (uint8_t)i2c_instance->DR;\n      i2c_handle->XferCount--;\n    }\n    if ((i2c_instance->SR1 & 0x40) != 0) {\n      buffer_ptr = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = buffer_ptr + 1;\n      *buffer_ptr = (uint8_t)i2c_instance->DR;\n      i2c_handle->XferCount--;\n    }\n    i2c_handle->ErrorCode |= 4;\n  }\n\n  if (i2c_handle->ErrorCode == 0) {\n    if (((current_state == HAL_I2C_STATE_LISTEN) || (current_state == HAL_I2C_STATE_BUSY_RX_LISTEN)) ||\n       (current_state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2c_handle->XferOptions = i2c_handle->XferOptions;\n      i2c_handle->PreviousState = 0;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_ListenCpltCallback(i2c_handle);\n    }\n    else if ((i2c_handle->PreviousState == 0x22) || (current_state == HAL_I2C_STATE_BUSY_RX)) {\n      i2c_handle->PreviousState = 0;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_SlaveRxCpltCallback(i2c_handle);\n    }\n  }\n  else {\n    I2C_ITError(i2c_handle);\n  }\n  return HAL_OK;\n}",
            "called": [
                "I2C_ITError",
                "HAL_I2C_SlaveRxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032b4",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_interrupt_080032b4"
        },
        "FUN_08004d06": {
            "renaming": {
                "FUN_08004d06": "get_non_null_pointer_08004d06",
                "a": "ptr1",
                "b": "ptr2"
            },
            "code": "void * get_non_null_pointer_08004d06(void *ptr1, void *ptr2)\n{\n  if (ptr1 != ptr2) {\n    if (ptr1 == NULL) {\n      return ptr2;\n    }\n    if (ptr2 == NULL) {\n      return ptr1;\n    }\n    ptr1 = NULL;\n  }\n  return ptr1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d06",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "get_non_null_pointer_08004d06"
        },
        "FUN_080056d8": {
            "renaming": {
                "FUN_080056d8": "allocate_memory_080056d8",
                "incr": "increment",
                "pcVar1": "current_pointer",
                "pcVar2": "new_pointer"
            },
            "code": "caddr_t allocate_memory_080056d8(int increment)\n{\n  caddr_t current_pointer;\n  caddr_t new_pointer;\n  \n  if (*(int *)PTR_heap_end_08005708 == 0) {\n    *(undefined **)PTR_heap_end_08005708 = PTR__ebss_0800570c;\n  }\n  current_pointer = *(caddr_t *)PTR_heap_end_08005708;\n  new_pointer = current_pointer + increment;\n  if (new_pointer <= &stack0x00000000) {\n    *(caddr_t *)PTR_heap_end_08005708 = new_pointer;\n    return current_pointer;\n  }\n  *(undefined4 *)PTR_errno_08005710 = 0xc;\n  return (caddr_t)0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d8",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080056d8"
        },
        "FUN_080019f6": {
            "renaming": {
                "FUN_080019f6": "updateOutput_080019f6",
                "this": "pid",
                "myOutput": "currentOutputAndPreviousOutput",
                "myInput": "currentInputAndPreviousInput",
                "outputSum": "outputSum",
                "lastInput": "lastInput",
                "outMax": "outputMax",
                "outMin": "outputMin",
                "iVar1": "comparisonResult",
                "uVar2": "outputLimit1",
                "uVar3": "currentOutput",
                "uVar4": "previousOutput",
                "uVar5": "outputLimit2",
                "__aeabi_dcmpgt": "__aeabi_fcmpgt",
                "__aeabi_dcmplt": "__aeabi_fcmplt"
            },
            "code": "void __thiscall updateOutput_080019f6(PID *pid)\n{\n  float currentOutput = *(float *)pid->myOutput;\n  float previousOutput = *(float *)((int)pid->myOutput + 4);\n  pid->outputSum = currentOutput;\n  *((float *)&pid->outputSum + 1) = previousOutput;\n  float currentInput = *(float *)((int)pid->myInput + 4);\n  pid->lastInput = *(float *)pid->myInput;\n  *((float *)&pid->lastInput + 1) = currentInput;\n  float outputMax = *(float *)&pid->outMax;\n  float outputMax2 = *(float *)((int)&pid->outMax + 4);\n  int isCurrentOutputGreaterThanPreviousOutput = __aeabi_fcmpgt(currentOutput, previousOutput);\n  if (isCurrentOutputGreaterThanPreviousOutput == 0) {\n    float outputMin = *(float *)&pid->outMin;\n    float outputMin2 = *(float *)((int)&pid->outMin + 4);\n    int isCurrentOutputLessThanPreviousOutput = __aeabi_fcmplt(currentOutput, previousOutput);\n    if (isCurrentOutputLessThanPreviousOutput != 0) {\n      pid->outputSum = outputMin;\n      *((float *)&pid->outputSum + 1) = outputMin2;\n    }\n    return;\n  }\n  pid->outputSum = outputMax;\n  *((float *)&pid->outputSum + 1) = outputMax2;\n  return;\n}",
            "called": [
                "__aeabi_dcmpgt",
                "__aeabi_dcmplt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019f6",
            "calling": [
                "SetMode"
            ],
            "imported": false,
            "current_name": "updateOutput_080019f6"
        },
        "FUN_08002f9c": {
            "renaming": {
                "FUN_08002f9c": "handleI2CRx_08002f9c",
                "hi2c": "handle",
                "puVar1": "bufferPointer",
                "hi2c->State": "currentState",
                "hi2c->XferCount": "transferCount",
                "hi2c->XferOptions": "options",
                "hi2c->Instance->CR1": "controlRegister1",
                "hi2c->Instance->CR2": "controlRegister2",
                "hi2c->pBuffPtr": "bufferPointer",
                "hi2c->PreviousState": "previousState",
                "hi2c->Mode": "mode",
                "HAL_I2C_STATE_BUSY_RX": "HAL_I2C_STATE_BUSY_RX",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_MODE_MEM": "HAL_I2C_MODE_MEM",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "HAL_I2C_MasterRxCpltCallback": "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback": "HAL_I2C_MemRxCpltCallback",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef handleI2CRx_08002f9c(I2C_HandleTypeDef *handle)\n{\n  uint8_t *bufferPointer;\n  uint8_t options = handle->XferOptions;\n  uint16_t *controlRegister1 = &handle->Instance->CR1;\n  uint16_t *controlRegister2 = &handle->Instance->CR2;\n  uint8_t transferCount = handle->XferCount;\n  uint8_t currentState = handle->State;\n  uint8_t previousState = handle->PreviousState;\n  uint16_t dataRegister = handle->Instance->DR;\n  if (currentState == HAL_I2C_STATE_BUSY_RX) {\n    if (transferCount < 4) {\n      if (transferCount - 2 < 2) {\n        if (options == 2) {\n          *controlRegister1 |= 0x400;\n        }\n        else {\n          *controlRegister1 &= 0xfffffbff;\n          *controlRegister1 |= 0x800;\n        }\n        *controlRegister2 &= 0xfffffbff;\n      }\n      else {\n        if (options == 2) {\n          *controlRegister1 |= 0x400;\n        }\n        else {\n          *controlRegister1 &= 0xfffffbff;\n        }\n        *controlRegister2 &= 0xfffff8ff;\n        bufferPointer = handle->pBuffPtr;\n        handle->pBuffPtr = bufferPointer + 1;\n        *bufferPointer = (uint8_t)dataRegister;\n        handle->XferCount = transferCount - 1;\n        handle->State = HAL_I2C_STATE_READY;\n        handle->PreviousState = 0;\n        if (handle->Mode == HAL_I2C_MODE_MEM) {\n          handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemRxCpltCallback(handle);\n        }\n        else {\n          handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterRxCpltCallback(handle);\n        }\n      }\n    }\n    else {\n      bufferPointer = handle->pBuffPtr;\n      handle->pBuffPtr = bufferPointer + 1;\n      *bufferPointer = (uint8_t)dataRegister;\n      handle->XferCount = transferCount - 1;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9c",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handleI2CRx_08002f9c"
        },
        "FUN_08005510": {
            "renaming": {
                "FUN_08005510": "set_serial_rx_callback_08005510",
                "obj": "serial_obj",
                "callback": "callback_func_ptr",
                "bVar1": "index",
                "uVar2": "rx_active",
                "PTR_rx_callback_0800555c": "rx_callback_func_ptr",
                "PTR_rx_callback_obj_08005560": "rx_callback_serial_obj_ptr",
                "PTR_uart_handlers_08005564": "uart_handler_ptr"
            },
            "code": "void set_serial_rx_callback_08005510(serial_t *serial_obj, _func_void_serial_t_ptr *callback_func_ptr) {\n  if (serial_obj != NULL) {\n    uint8_t rx_active = serial_rx_active(serial_obj);\n    if (rx_active == 0) {\n      uint8_t index = serial_obj->index;\n      _func_void_serial_t_ptr **PTR_rx_callback_0800555c = (_func_void_serial_t_ptr **)(PTR_rx_callback_0800555c + (uint)index * 4);\n      *PTR_rx_callback_0800555c = callback_func_ptr;\n      serial_t **PTR_rx_callback_obj_08005560 = (serial_t **)(PTR_rx_callback_obj_08005560 + (uint)index * 4);\n      *PTR_rx_callback_obj_08005560 = serial_obj;\n      HAL_NVIC_SetPriority(serial_obj->irq, 0, 1);\n      HAL_NVIC_EnableIRQ(serial_obj->irq);\n      UART_HandleTypeDef **PTR_uart_handlers_08005564 = (UART_HandleTypeDef **)(PTR_uart_handlers_08005564 + (uint)serial_obj->index * 4);\n      HAL_UART_Receive_IT(*PTR_uart_handlers_08005564, &(serial_obj->recv), 1);\n    }\n  }\n}",
            "called": [
                "serial_rx_active",
                "HAL_UART_Receive_IT",
                "HAL_NVIC_SetPriority",
                "HAL_NVIC_EnableIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005510",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "set_serial_rx_callback_08005510"
        },
        "FUN_08002f9a": {
            "renaming": {
                "FUN_08002f9a": "do_nothing_08002f9a"
            },
            "code": "\nvoid do_nothing_08002f9a(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9a",
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_08002f9a"
        },
        "FUN_08005750": {
            "renaming": {
                "FUN_08005750": "get_process_id_08005750"
            },
            "code": "__pid_t get_process_id_08005750(void)\n{\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005750",
            "calling": [
                "_getpid_r"
            ],
            "imported": false,
            "current_name": "get_process_id_08005750"
        },
        "FUN_08002cf2": {
            "renaming": {
                "FUN_08002cf2": "handle_address_match_08002cf2",
                "hi2c": "i2c_handle",
                "AddrMatchCode": "address_match_code",
                "hi2c->Instance->SR2": "i2c_handle->Instance->SR2",
                "hi2c->Init": "i2c_handle->Init",
                "hi2c->Init.OwnAddress1": "i2c_handle->Init.OwnAddress1",
                "hi2c->Init.OwnAddress2": "i2c_handle->Init.OwnAddress2",
                "HAL_I2C_AddrCallback": "HAL_I2C_AddrCallback",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef handle_address_match_08002cf2(I2C_HandleTypeDef *i2c_handle)\n{\n  uint16_t address_match_code;\n  if ((i2c_handle->Instance->SR2 & 0x80) == 0) {\n    address_match_code = *(uint16_t *)&(i2c_handle->Init).OwnAddress1;\n  }\n  else {\n    address_match_code = *(uint16_t *)&(i2c_handle->Init).OwnAddress2;\n  }\n  HAL_I2C_AddrCallback(i2c_handle,(i2c_handle->Instance->SR2 & 4) == 0,address_match_code);\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cf2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_address_match_08002cf2"
        },
        "FUN_08006288": {
            "renaming": {
                "FUN_08006288": "allocate_memory_block_08006288",
                "param_1": "out_ptr",
                "param_2": "requested_size",
                "puVar1": "malloc_sbrk_start",
                "uVar2": "brk_result",
                "puVar3": "current_block",
                "iVar4": "sbrk_result",
                "puVar5": "free_block",
                "uVar6": "block_size",
                "puVar7": "previous_block",
                "uVar8": "adjusted_size"
            },
            "code": "uint allocate_memory_block_08006288(uint *out_ptr, uint requested_size)\n{\n  uint *current_block;\n  uint *previous_block;\n  uint block_size;\n  uint adjusted_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (adjusted_size < 0xc) {\n    adjusted_size = 0xc;\n  }\n  if (((int)adjusted_size < 0) || (adjusted_size < requested_size)) {\n    *out_ptr = 0xc;\n  }\n  else {\n    __malloc_lock();\n    previous_block = *(uint **)PTR___malloc_free_list_0800633c;\n    current_block = previous_block;\n    while (current_block != (uint *)0x0) {\n      block_size = *current_block - adjusted_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (previous_block == current_block) {\n            block_size = previous_block[1];\n            *(uint *)PTR___malloc_free_list_0800633c = block_size;\n          }\n          else {\n            block_size = current_block[1];\n          }\n          if (previous_block != current_block) {\n            previous_block[1] = block_size;\n            previous_block = current_block;\n          }\n        }\n        else {\n          *current_block = block_size;\n          *(uint *)((int)current_block + block_size) = adjusted_size;\n          previous_block = (uint *)((int)current_block + block_size);\n        }\n        goto exit;\n      }\n      previous_block = current_block;\n      current_block = (uint *)current_block[1];\n    }\n    if (*(int *)PTR___malloc_sbrk_start_08006340 == 0) {\n      uint brk_result = _sbrk_r(out_ptr);\n      *(uint *)PTR___malloc_sbrk_start_08006340 = brk_result;\n    }\n    current_block = (uint *)_sbrk_r(out_ptr,adjusted_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (_sbrk_r(out_ptr,(int)previous_block - (int)current_block) != -1)))) {\n      *previous_block = adjusted_size;\n      exit:\n      __malloc_unlock(out_ptr);\n      uint aligned_block_end = (int)previous_block + 0xbU & 0xfffffff8;\n      int padding_size = aligned_block_end - (int)(previous_block + 1);\n      if (padding_size != 0) {\n        *(int *)((int)previous_block + padding_size) = -padding_size;\n        return aligned_block_end;\n      }\n      return aligned_block_end;\n    }\n    *out_ptr = 0xc;\n    __malloc_unlock(out_ptr);\n  }\n  return 0;\n}",
            "called": [
                "__malloc_unlock",
                "__malloc_lock",
                "_sbrk_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006288",
            "calling": [
                "__smakebuf_r",
                "__sfmoreglue"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08006288"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "FUNC_08000188"
            },
            "code": "\nulonglong FUNC_08000188(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar4 = param_2 ^ 0x80000000;\n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((uVar4 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = uVar4;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((uVar4 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        uVar4 = param_4;\n      }\n      return CONCAT44(uVar4,param_1);\n    }\n    if (uVar4 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(uVar4,uVar4) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(uVar4 + 0x100000,param_1);\n    }\n    uVar4 = uVar4 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(uVar4 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar12 = uVar4;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar12 = param_4;\n    param_3 = param_1;\n    param_4 = uVar4;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar12,uVar8);\n  }\n  uVar9 = uVar12 & 0xfffff | 0x100000;\n  if ((uVar12 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar4 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar4 = uVar4 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar5 = uVar4 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar5;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar4 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar11 = uVar4 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar4 = (int)uVar4 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar4;\n    uVar9 = uVar9 + ((int)uVar4 >> 0x1f) + (uint)CARRY4(uVar8,uVar4);\n  }\n  uVar4 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | uVar4,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar3 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar3 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar3 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar3 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar3 = uVar3 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | uVar4,uVar3);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar3 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(uVar4 | uVar7 >> (uVar10 & 0xff),\n                    uVar3 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000188",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000188"
        },
        "FUN_08002004": {
            "renaming": {
                "FUN_08002004": "enable_ADC_08002004",
                "hadc": "adc",
                "HVar1": "status",
                "pAVar2": "instance"
            },
            "code": "HAL_StatusTypeDef_conflict enable_ADC_08002004(ADC_HandleTypeDef *adc)\n{\n  HAL_StatusTypeDef_conflict status;\n  ADC_TypeDef *instance;\n  if (adc->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  adc->Lock = HAL_LOCKED;\n  status = ADC_Enable(adc);\n  if (status == HAL_OK) {\n    adc->State &= 0xFFFFFCFE;\n    adc->State |= 0x100;\n    instance = adc->Instance;\n    if ((instance == PTR_080020e8) && ((PTR_080020e8[-0xD].JOFR1 & 0xF0000) != 0)) {\n      adc->State |= 0x100000;\n      if ((*(uint *)(PTR_080020ec + 4) & 0x400) != 0) {\n        adc->State &= 0xFFFFCFFF;\n        adc->State |= 0x1000;\n      }\n    }\n    else {\n      adc->State &= 0xFFEFFFFF;\n      if ((instance->CR1 & 0x400) != 0) {\n        adc->State &= 0xFFFFCFFF;\n        adc->State |= 0x1000;\n      }\n    }\n    if ((adc->State & 0x1000) == 0) {\n      adc->ErrorCode = 0;\n    }\n    else {\n      adc->ErrorCode &= 0xFFFFFFF9;\n    }\n    adc->Lock = HAL_UNLOCKED;\n    instance->SR = 0xFFFFFFFD;\n    instance = adc->Instance;\n    if (((instance->CR2 & 0xE0000) == 0xE0000) && ((instance != PTR_080020e8) || ((PTR_080020e8[-0xD].JOFR1 & 0xF0000) == 0))) {\n      instance->CR2 |= 0x500000;\n    }\n    else {\n      instance->CR2 |= 0x100000;\n    }\n  }\n  else {\n    adc->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [
                "ADC_Enable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002004",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "enable_ADC_08002004"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "handle_i2c_errors_08004f3c",
                "PTR_i2c_handles_08004f48": "PTR_i2c_handles",
                "*(I2C_HandleTypeDef **)(PTR_i2c_handles_08004f48 + 4)": "i2c_handle"
            },
            "code": "void handle_i2c_errors_08004f3c(I2C_HandleTypeDef **(I2C_HandleTypeDef **)(PTR_i2c_handles_08004f48 + 4)) {\n  HAL_I2C_ER_IRQHandler(*(I2C_HandleTypeDef **)(PTR_i2c_handles_08004f48 + 4));\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_errors_08004f3c"
        },
        "FUN_08005754": {
            "renaming": {
                "FUN_08005754": "read_analog_pin_08005754",
                "ulPin": "pin_number",
                "bVar1": "is_valid_pin",
                "pin": "pin_name",
                "uVar2": "adc_value",
                "uVar3": "read_value",
                "uVar4": "resolution_bits"
            },
            "code": "uint32_t read_analog_pin_08005754(uint32_t pin_number)\n{\n  bool is_valid_pin;\n  PinName_conflict pin_name;\n  uint16_t adc_value;\n  uint32_t read_value;\n  uint resolution_bits;\n  \n  if (pin_number < 14) {\n    if (pin_number + 46 < 60) {\n      is_valid_pin = true;\n    }\n    else {\n      is_valid_pin = false;\n    }\n  }\n  else {\n    is_valid_pin = pin_number < 60;\n  }\n  \n  if (is_valid_pin) {\n    if (pin_number < 14) {\n      pin_number += 46;\n    }\n    pin_name = PTR_digitalPin_080057ac[pin_number];\n  }\n  else {\n    pin_name = NC;\n  }\n  \n  if (pin_name == NC) {\n    read_value = 0;\n  }\n  else {\n    adc_value = adc_read_value(pin_name);\n    read_value = (uint32_t)adc_value;\n    resolution_bits = *(uint*)PTR__readResolution_080057b0;\n    \n    if (resolution_bits != 12) {\n      if (resolution_bits < 12) {\n        return (uint)(adc_value >> (12 - resolution_bits & 0xff));\n      }\n      return read_value << (resolution_bits - 12 & 0xff);\n    }\n  }\n  \n  return read_value;\n}",
            "called": [
                "adc_read_value"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005754",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "read_analog_pin_08005754"
        },
        "FUN_08005fc8": {
            "renaming": {
                "FUN_08005fc8": "initialize_gpio_irq_configuration_08005fc8",
                "__initialize_p": "should_initialize",
                "__priority": "priority",
                "puVar1": "gpio_irq_conf_ptr"
            },
            "code": "void initialize_gpio_irq_configuration_08005fc8(int should_initialize, int priority) {\n  undefined *gpio_irq_conf_ptr;\n  gpio_irq_conf_ptr = PTR_gpio_irq_conf_08006068;\n  if (should_initialize != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    *PTR_gpio_irq_conf_08006068 = 6;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xc) = 0;\n    gpio_irq_conf_ptr[0x14] = 7;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x20) = 0;\n    gpio_irq_conf_ptr[0x28] = 8;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x34) = 0;\n    gpio_irq_conf_ptr[0x3c] = 9;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x48) = 0;\n    gpio_irq_conf_ptr[0x50] = 10;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x5c) = 0;\n    gpio_irq_conf_ptr[100] = 0x17;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x70) = 0;\n    gpio_irq_conf_ptr[0x78] = 0x17;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x84) = 0;\n    gpio_irq_conf_ptr[0x8c] = 0x17;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x98) = 0;\n    gpio_irq_conf_ptr[0xa0] = 0x17;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xac) = 0;\n    gpio_irq_conf_ptr[0xb4] = 0x17;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xc0) = 0;\n    gpio_irq_conf_ptr[200] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xd4) = 0;\n    gpio_irq_conf_ptr[0xdc] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xe8) = 0;\n    gpio_irq_conf_ptr[0xf0] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0xfc) = 0;\n    gpio_irq_conf_ptr[0x104] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x110) = 0;\n    gpio_irq_conf_ptr[0x118] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x124) = 0;\n    gpio_irq_conf_ptr[300] = 0x28;\n    *(undefined4 *)(gpio_irq_conf_ptr + 0x138) = 0;\n    __aeabi_atexit(0, DAT_08006070, PTR___dso_handle_0800606c);\n  }\n  return;\n}",
            "called": [
                "__aeabi_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fc8",
            "calling": [
                "_GLOBAL__sub_I__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm"
            ],
            "imported": false,
            "current_name": "initialize_gpio_irq_configuration_08005fc8"
        },
        "FUN_08002ab8": {
            "renaming": {
                "FUN_08002ab8": "transfer_byte_08002ab8",
                "hi2c": "i2c_handle",
                "pbVar1": "buffer_ptr",
                "DR": "data"
            },
            "code": "HAL_StatusTypeDef transfer_byte_08002ab8(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t *buffer_ptr;\n  HAL_StatusTypeDef status = HAL_OK;\n  if (i2c_handle->XferCount != 0) {\n    buffer_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_ptr + 1;\n    uint8_t data = (uint8_t)*buffer_ptr;\n    if(HAL_OK != HAL_I2C_Master_Transmit(i2c_handle->Instance, i2c_handle->Init.OwnAddress1, &data, 1, 1000))\n        status = HAL_ERROR;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ab8",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transfer_byte_08002ab8"
        },
        "FUN_080068f0": {
            "renaming": {
                "FUN_080068f0": "print_formatted_string_080068f0",
                "__format": "format",
                "in_r1": "arg1",
                "in_r2": "arg2",
                "in_r3": "arg3",
                "uStack_c": "arg4",
                "uStack_8": "arg5",
                "uStack_4": "arg6",
                "PTR__impure_ptr_0800691c": "PTR__impure_ptr_0800691c"
            },
            "code": "int print_formatted_string_080068f0(char *format, ...)\n{\n  int impure_ptr = *(int *)PTR__impure_ptr_0800691c;\n  char *format_string = format;\n  undefined4 arg1 = in_r1;\n  undefined4 arg2 = in_r2;\n  undefined4 arg3 = in_r3;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  if ((impure_ptr != 0) && (*(int *)(impure_ptr + 0x18) == 0)) {\n    __sinit(impure_ptr);\n  }\n  int result = _vfprint_r(impure_ptr, *(undefined4 *)(impure_ptr + 8), format, &uStack_c, format_string, &uStack_c);\n  return result;\n}",
            "called": [
                "__sinit",
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068f0",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "print_formatted_string_080068f0"
        },
        "FUN_080066b0": {
            "renaming": {
                "FUN_080066b0": "FUNC_080066b0"
            },
            "code": "\nuint FUNC_080066b0(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  void *pvVar4;\n  int iVar5;\n  undefined *puVar6;\n  uint uVar7;\n  uint **ppuVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined *puVar11;\n  undefined *__s;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  __s = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800686a;\n          if (bVar1 != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar6 = PTR_s_0123456789ABCDEF_080068ec;\nLAB_080067fa:\n          uVar7 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar7 & 0x80) == 0) && ((int)(uVar7 << 0x19) < 0)) {\n            uVar9 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar9 = *puVar3;\n          }\n          if ((int)(uVar7 << 0x1f) < 0) {\n            *param_2 = uVar7 | 0x20;\n          }\n          if (uVar9 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar7 = 0x10;\nLAB_08006790:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080066e0;\n          uVar9 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar9 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar9 & 0x40) == 0) goto LAB_08006700;\n            uVar9 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08006700:\n            uVar9 = *puVar3;\n          }\n          if ((int)uVar9 < 0) {\n            uVar9 = -uVar9;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar7 = 10;\n          puVar6 = PTR_s_0123456789ABCDEF_080068ec;\n        }\n        uVar10 = param_2[1];\n        param_2[2] = uVar10;\n        puVar11 = __s;\n        if ((int)uVar10 < 0) {\n          if (uVar9 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(undefined *)((int)param_2 + 0x42) = *puVar6;\n          puVar11 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar9 == 0) {\n            if (uVar10 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              uVar10 = uVar9 / uVar7;\n              puVar11 = puVar11 + -1;\n              *puVar11 = puVar6[uVar9 - uVar7 * uVar10];\n              uVar9 = uVar10;\n            } while (uVar10 != 0);\n          }\n        }\n        if (((uVar7 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar11[-1] = 0x30;\n          puVar11 = puVar11 + -1;\n        }\n        param_2[4] = (int)__s - (int)puVar11;\n        __s = puVar11;\n        goto LAB_080067d6;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08006740:\n      __s = (undefined *)((int)param_2 + 0x42);\n      uVar9 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08006766:\n            uVar9 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar9 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar9 & 0x40) == 0) goto LAB_08006774;\n              uVar9 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08006774:\n              uVar9 = *puVar3;\n            }\n            puVar6 = PTR_s_0123456789ABCDEF_080068ec;\n            if (bVar1 == 0x6f) {\n              uVar7 = 8;\n            }\n            else {\n              uVar7 = 10;\n            }\n            goto LAB_08006790;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08006726:\n            puVar6 = PTR_s_0123456789abcdef_080068e8;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08006766;\n          if (bVar1 == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08006740;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      __s = (undefined *)*puVar3;\n      pvVar4 = memchr(__s,0,param_2[1]);\n      if (pvVar4 != (void *)0x0) {\n        param_2[1] = (int)pvVar4 - (int)__s;\n      }\n      uVar9 = param_2[1];\n    }\n    param_2[4] = uVar9;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  uVar9 = *param_2;\n  ppuVar8 = (uint **)*param_5;\n  uVar7 = param_2[5];\n  if ((uVar9 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\n    if ((uVar9 & 0x40) == 0) goto LAB_08006856;\n    *(short *)puVar3 = (short)uVar7;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\nLAB_08006856:\n    *puVar3 = uVar7;\n  }\nLAB_0800686a:\n  param_2[4] = 0;\nLAB_080067d6:\n  iVar2 = _printf_common(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,__s,param_2[4]), iVar2 == -1)) {\nLAB_080067ea:\n    uVar9 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar5 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar5 == -1) goto LAB_080067ea;\n      }\n    }\n    uVar9 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar9 = local_24[0];\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "memchr",
                "_printf_common"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080066b0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080066b0"
        },
        "FUN_08002c52": {
            "renaming": {
                "FUN_08002c52": "do_nothing_08002c52"
            },
            "code": "\nvoid do_nothing_08002c52(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c52",
            "calling": [
                "I2C_Slave_AF",
                "I2C_SlaveTransmit_TXE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c52"
        },
        "FUN_0800138e": {
            "renaming": {
                "FUN_0800138e": "setCursorVisible_0800138e",
                "_FUN_0800138econtrol": "controlByte"
            },
            "code": "void __thiscall setCursorVisible_0800138e(LiquidCrystal *lcd)\\n{\\n  byte controlByte;\\n  controlByte = lcd->controlByte;\\n  lcd->controlByte = controlByte | 4;\\n  send(lcd, controlByte | 0xc, \"\\0\");\\n  return;\\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800138e",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "setCursorVisible_0800138e"
        },
        "FUN_08002c50": {
            "renaming": {
                "FUN_08002c50": "do_nothing_08002c50"
            },
            "code": "\nvoid do_nothing_08002c50(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c50",
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c50"
        },
        "FUN_0800598a": {
            "renaming": {
                "FUN_0800598a": "receiveSerialData_0800598a",
                "*obj": "*serialObject",
                "iVar1": "receivedByte",
                "uVar2": "nextRxHead",
                "c": "receivedChar"
            },
            "code": "void receiveSerialData_0800598a(serial_t_conflict *serialObject) {\n  int receivedByte;\n  ushort nextRxHead;\n  uchar receivedChar;\n  receivedByte = uart_getc((serial_t *)serialObject, &receivedChar);\n  if ((receivedByte == 0) && (nextRxHead = serialObject->rx_head + 1 & 0x3f, nextRxHead != serialObject->rx_tail)) {\n    serialObject->rx_buff[serialObject->rx_head] = receivedChar;\n    serialObject->rx_head = nextRxHead;\n  }\n}",
            "called": [
                "uart_getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800598a",
            "calling": [],
            "imported": false,
            "current_name": "receiveSerialData_0800598a"
        },
        "FUN_08001c88": {
            "renaming": {
                "FUN_08001c88": "configure_interrupts_08001c88",
                "HAL_NVIC_SetPriorityGrouping": "NVIC_SetPriorityGrouping",
                "FUN_08001c88Tick": "configure_interrupts_tick",
                "HAL_MspInit": "HAL_MspInit",
                "DAT_08001ca8": "data_pointer"
            },
            "code": "HAL_StatusTypeDef configure_interrupts_08001c88(void)\n{\n  uint32_t *DAT_08001ca8 = DAT_08001ca8;\n  *DAT_08001ca8 |= 0x10;\n  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n  configure_interrupts_08001c88_tick(0xf);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_InitTick",
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c88",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "configure_interrupts_08001c88"
        },
        "FUN_08004e34": {
            "renaming": {
                "FUN_08004e34": "handle_timer_interrupt_08004e34",
                "PTR_timer_handles_08004e44": "PTR_timer_handles_08004e44",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler"
            },
            "code": "void handle_timer_interrupt_08004e34(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_08004e44 + 4);\n  if (timer_handle != NULL)\n  {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e34",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e34"
        },
        "FUN_08001a44": {
            "renaming": {
                "FUN_08001a44": "setAutoMode_08001a44",
                "this": "self",
                "Mode": "mode",
                "bVar1": "isAuto",
                "inAuto": "autoMode",
                "Initialize": "initialize"
            },
            "code": "void __thiscall setAutoMode_08001a44(PID *this, int mode) {\n  bool isAuto;\n  if (mode == 1) {\n    isAuto = true;\n    if (!this->inAuto) {\n      initialize(this);\n    }\n  }\n  else {\n    isAuto = false;\n  }\n  this->inAuto = isAuto;\n  return;\n}",
            "called": [
                "Initialize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a44",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "setAutoMode_08001a44"
        },
        "FUN_08002c54": {
            "renaming": {
                "FUN_08002c54": "i2c_transfer_08002c54",
                "*hi2c": "*i2c_handle",
                "HVar1": "i2c_state",
                "pbVar2": "buffer_ptr",
                "hi2c->State": "i2c_handle->State",
                "hi2c->XferCount": "i2c_handle->XferCount",
                "hi2c->pBuffPtr": "i2c_handle->pBuffPtr",
                "hi2c->Instance->DR": "i2c_handle->Instance->DR",
                "hal_ok": "HAL_OK",
                "HAL_I2C_STATE_BUSY_TX_LISTEN": "HAL_I2C_STATE_BUSY_TX_LISTEN",
                "hi2c->Instance->CR2": "i2c_handle->Instance->CR2",
                "hi2c->PreviousState": "i2c_handle->PreviousState",
                "0x21": "0x21",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "HAL_I2C_SlaveTxCpltCallback": "HAL_I2C_SlaveTxCpltCallback",
                "hi2c": "i2c_handle"
            },
            "code": "HAL_StatusTypeDef i2c_transfer_08002c54(I2C_HandleTypeDef *i2c_handle) {\n  HAL_I2C_StateTypeDef i2c_state;\n  uint8_t *buffer_ptr;\n  i2c_state = i2c_handle->State;\n  if (i2c_handle->XferCount != 0) {\n    buffer_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_ptr + 1;\n    i2c_handle->Instance->DR = (uint8_t)*buffer_ptr;\n    i2c_handle->XferCount--;\n    if ((i2c_handle->XferCount == 0) && (i2c_state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2c_handle->Instance->CR2 &= 0xfffffbff;\n      i2c_handle->PreviousState = 0x21;\n      i2c_handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveTxCpltCallback(i2c_handle);\n    }\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_transfer_08002c54"
        },
        "FUN_080043b4": {
            "renaming": {
                "FUN_080043b4": "check_uart_flag_080043b4",
                "*huart": "*uart_handle",
                "Flag": "flag",
                "Status": "status",
                "Tickstart": "start_time",
                "Timeout": "timeout",
                "uVar1": "current_time"
            },
            "code": "HAL_StatusTypeDef check_uart_flag_080043b4(UART_HandleTypeDef *uart_handle, uint32_t flag, FlagStatus status, uint32_t start_time, uint32_t timeout)\n{\n  uint32_t current_time;\n  while ((timeout == 0xffffffff) || ((timeout != 0) && ((current_time = HAL_GetTick()) - start_time <= timeout))) {\n    if (((flag & ~uart_handle->Instance->SR) == 0) != (bool)status) {\n      return HAL_OK;\n    }\n  }\n  uart_handle->Instance->CR1 &= 0xfffffe5f;\n  uart_handle->Instance->CR3 &= 0xfffffffe;\n  uart_handle->gState = HAL_UART_STATE_READY;\n  uart_handle->RxState = HAL_UART_STATE_READY;\n  uart_handle->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043b4",
            "calling": [
                "HAL_UART_Transmit"
            ],
            "imported": false,
            "current_name": "check_uart_flag_080043b4"
        },
        "FUN_0800441a": {
            "renaming": {
                "FUN_0800441a": "initialize_uart_0800441a",
                "huart": "uart",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "HAL_UART_MspInit": "initialize_uart_msp",
                "gState": "global_state",
                "Lock": "lock",
                "Instance": "instance",
                "CR1": "control_register_1",
                "CR2": "control_register_2",
                "CR3": "control_register_3",
                "ErrorCode": "error_code",
                "RxState": "receive_state"
            },
            "code": "HAL_StatusTypeDef initialize_uart_0800441a(UART_HandleTypeDef *uart)\n{\n  if (uart != NULL) {\n    if (uart->gState == HAL_UART_STATE_RESET) {\n      uart->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(uart);\n    }\n    uart->gState = HAL_UART_STATE_BUSY;\n    uart->Instance->CR1 &= ~(1 << 13);\n    UART_SetConfig(uart);\n    uart->Instance->CR2 &= ~(1 << 11);\n    uart->Instance->CR3 &= ~(1 << 2);\n    uart->Instance->CR1 |= (1 << 13);\n    uart->ErrorCode = 0;\n    uart->gState = HAL_UART_STATE_READY;\n    uart->RxState = HAL_UART_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800441a",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "initialize_uart_0800441a"
        },
        "FUN_08004d18": {
            "renaming": {
                "FUN_08004d18": "call_RTC_user_callback_08004d18",
                "hrtc": "rtc_handler",
                "PTR_RTCUserCallback_08004d28": "user_callback_ptr",
                "PTR_callbackUserData_08004d2c": "callback_user_data"
            },
            "code": "void call_RTC_user_callback_08004d18(RTC_HandleTypeDef *rtc_handler){\n  if (*(code **)PTR_RTCUserCallback_08004d28 != (code *)0x0) {\n    (**(code **)PTR_RTCUserCallback_08004d28)(*(undefined4 *)PTR_callbackUserData_08004d2c);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d18",
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "imported": false,
            "current_name": "call_RTC_user_callback_08004d18"
        },
        "FUN_080006d4": {
            "renaming": {
                "FUN_080006d4": "calculate_bitwise_xor_080006d4",
                "param_1": "first_operand",
                "param_2": "second_operand",
                "param_3": "third_operand",
                "param_4": "fourth_operand",
                "uVar1": "temp_var1",
                "unaff_r4": "temp_var2",
                "uVar2": "shift_value",
                "uVar3": "temp_var4",
                "in_r12": "constant_value",
                "bVar4": "is_operand_zero"
            },
            "code": "ulonglong calculate_bitwise_xor_080006d4(uint first_operand, uint second_operand, uint third_operand, uint fourth_operand)\n{\n  uint shift_value = fourth_operand >> 0x14;\n  bool is_first_operand_zero = (first_operand | second_operand << 1) == 0;\n  bool is_third_operand_zero = (third_operand | fourth_operand << 1) == 0;\n  if (second_operand != fourth_operand && shift_value != fourth_operand) {\n    if (is_first_operand_zero || !is_third_operand_zero) {\n      return (ulonglong)((second_operand ^ fourth_operand) & 0x80000000) << 0x20;\n    }\n    if (second_operand == 0) {\n      uint temp_var = first_operand & 0x80000000;\n      do {\n        uint temp_var2 = first_operand & 0x80000000;\n        first_operand = first_operand << 1;\n        second_operand = second_operand * 2 + (uint)(temp_var2 != 0);\n      } while ((second_operand & 0x100000) == 0);\n      second_operand = second_operand | temp_var;\n      if (shift_value != 0) {\n        return CONCAT44(second_operand,first_operand);\n      }\n    }\n    do {\n      uint temp_var3 = third_operand & 0x80000000;\n      third_operand = third_operand << 1;\n      fourth_operand = fourth_operand * 2 + (uint)(temp_var3 != 0);\n    } while ((fourth_operand & 0x100000) == 0);\n    return CONCAT44(second_operand,first_operand);\n  }\n  if (is_first_operand_zero) {\n    second_operand = fourth_operand;\n    first_operand = third_operand;\n  }\n  bool is_fourth_operand_zero = (third_operand | fourth_operand << 1) == 0;\n  uint temp_var4 = second_operand;\n  if (!is_first_operand_zero) {\n    if (!is_third_operand_zero) {\n      if (second_operand != fourth_operand || ((first_operand | second_operand << 0xc) != 0)) {\n        if (shift_value != fourth_operand || (first_operand = third_operand, temp_var4 = fourth_operand, (third_operand | fourth_operand << 0xc) != 0)) {\n          return (ulonglong)((second_operand ^ fourth_operand) & 0x80000000 | 0x7ff00000) << 0x20;\n        }\n      }\n    }\n    else {\n      temp_var4 = fourth_operand;\n    }\n  }\n  else if (!is_fourth_operand_zero) {\n    first_operand = third_operand;\n  }\n  return CONCAT44(temp_var4,first_operand) | 0x7ff8000000000000;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006d4",
            "calling": [
                "__muldf3"
            ],
            "imported": false,
            "current_name": "calculate_bitwise_xor_080006d4"
        },
        "FUN_08000190": {
            "renaming": {
                "FUN_08000190": "FUNC_08000190"
            },
            "code": "\nulonglong FUNC_08000190(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_080002a0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000190",
            "calling": [
                "SetTunings",
                "printFloat",
                "SetControllerDirection",
                "Compute"
            ],
            "imported": false,
            "current_name": "FUNC_08000190"
        },
        "FUN_08006174": {
            "renaming": {
                "FUN_08006174": "read_formatted_input_08006174",
                "__stream": "__stream",
                "__format": "__format",
                "iVar1": "result",
                "in_r2": "in_register_2",
                "in_r3": "in_register_3",
                "uStack_8": "stack_arg_1",
                "uStack_4": "stack_arg_2"
            },
            "code": "int read_formatted_input_08006174(FILE* __stream, char* __format, ...)\n{\n  int result;\n  undefined4 in_r2;\n  undefined4 in_r3;\n  undefined4 stack_arg_1;\n  undefined4 stack_arg_2;\n  \n  stack_arg_1 = in_r2;\n  stack_arg_2 = in_r3;\n  result = _vread_formatted_input_08006174_r(*(undefined4 *)PTR__impure_ptr_08006194, __stream, __format, &stack_arg_1, __stream, &stack_arg_2);\n  return result;\n}\n",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006174",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "read_formatted_input_08006174"
        },
        "FUN_08007028": {
            "renaming": {
                "FUN_08007028": "check_if_terminal_08007028",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "errno_ptr",
                "iVar2": "is_terminal"
            },
            "code": "void check_if_terminal_08007028(int *error_code, int file_descriptor) {\n  undefined *errno_ptr;\n  int is_terminal;\n  errno_ptr = PTR_errno_08007044;\n  *(undefined4 *)PTR_errno_08007044 = 0;\n  is_terminal = _isatty(file_descriptor);\n  if ((is_terminal == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007028",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_if_terminal_08007028"
        },
        "FUN_08000194": {
            "renaming": {
                "FUN_08000194": "FUNC_08000194"
            },
            "code": "\nulonglong FUNC_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000194",
            "calling": [
                "printFloat",
                "readThermocouple",
                "Compute",
                "__aeabi_drsub",
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_08000194"
        },
        "FUN_08002494": {
            "renaming": {
                "FUN_08002494": "set_interrupt_priority_08002494",
                "IRQn": "IRQn",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "irq_num",
                "uVar2": "group_priority_bits",
                "uVar3": "group_priority",
                "priority_mask": "priority_mask",
                "sub_priority_bits": "sub_priority_bits",
                "preempt_bits": "preempt_bits",
                "sub_bits": "sub_bits"
            },
            "code": "void set_interrupt_priority_08002494(IRQn_Type_conflict IRQn, uint32_t preempt_priority, uint32_t sub_priority) {\n  uint32_t irq_num = (uint32_t)IRQn;\n  uint32_t group_priority_bits = (*(int *)(DAT_080024f0 + 0xc) << 0x15) >> 0x1d;\n  uint32_t group_priority = 7 - group_priority_bits;\n  if (group_priority > 3) {\n    group_priority = 4;\n  }\n  uint32_t sub_priority_bits = group_priority_bits + 4 < 7 ? 0 : group_priority_bits - 3;\n  uint32_t priority_mask = (1 << (group_priority & 0xff)) - 1U;\n  uint32_t preempt_bits = (preempt_priority & priority_mask) << (sub_priority_bits & 0xff);\n  uint32_t sub_bits = (1 << (sub_priority_bits & 0xff)) - 1U & sub_priority;\n  if ((int32_t)irq_num < 0) {\n    *(char *)(DAT_080024f4 + (irq_num & 0xf)) = (char)(preempt_bits << 4);\n  }\n  else {\n    *(char *)(irq_num + 0xe000e400) = (char)(preempt_bits << 4);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002494",
            "calling": [
                "uart_attach_rx_callback",
                "HAL_InitTick",
                "SystemClock_Config",
                "uart_attach_tx_callback"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08002494"
        },
        "FUN_08002c4e": {
            "renaming": {
                "FUN_08002c4e": "do_nothing_08002c4e"
            },
            "code": "\nvoid do_nothing_08002c4e(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c4e",
            "calling": [
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c4e"
        },
        "FUN_08004f4c": {
            "renaming": {
                "FUN_08004f4c": "FUNC_08004f4c"
            },
            "code": "\nvoid FUNC_08004f4c(serial_t *obj)\n\n{\n  USART_TypeDef *pUVar1;\n  USART_TypeDef *pUVar2;\n  USART_TypeDef *pUVar3;\n  void *a;\n  void *b;\n  USART_TypeDef *pUVar4;\n  GPIO_TypeDef *pGVar5;\n  uint32_t uVar6;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  \n  if (obj != (serial_t *)0x0) {\n    a = pinmap_peripheral(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08005204);\n    b = pinmap_peripheral(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08005208);\n    if ((b == (void *)0x0) || (a == (void *)0x0)) {\n      iprintf(PTR_s_ERROR__at_least_one_UART_pin_has_0800521c);\n    }\n    else {\n      pUVar4 = (USART_TypeDef *)pinmap_merge_peripheral(a,b);\n      obj->uart = pUVar4;\n      pUVar3 = DAT_08005214;\n      pUVar2 = DAT_08005210;\n      pUVar1 = DAT_0800520c;\n      if (pUVar4 == (USART_TypeDef *)0x0) {\n        iprintf(PTR_s_ERROR__U_S_ART_pins_mismatch_08005220);\n      }\n      else {\n        if (pUVar4 == DAT_0800520c) {\n          DAT_0800520c[0x7b7].BRR = DAT_0800520c[0x7b7].BRR | 0x4000;\n          pUVar1[0x7b7].BRR = pUVar1[0x7b7].BRR & 0xffffbfff;\n          pUVar1[0x7b7].CR3 = pUVar1[0x7b7].CR3 | 0x4000;\n          obj->index = '\\0';\n          obj->irq = USART1_IRQn;\n        }\n        else if (pUVar4 == DAT_08005210) {\n          DAT_08005210[0x106e].BRR = DAT_08005210[0x106e].BRR | 0x20000;\n          pUVar2[0x106e].BRR = pUVar2[0x106e].BRR & 0xfffdffff;\n          pUVar2[0x106e].CR3 = pUVar2[0x106e].CR3 | 0x20000;\n          obj->index = '\\x01';\n          obj->irq = USART2_IRQn;\n        }\n        else if (pUVar4 == DAT_08005214) {\n          DAT_08005214[0x1049].CR3 = DAT_08005214[0x1049].CR3 | 0x40000;\n          pUVar3[0x1049].CR3 = pUVar3[0x1049].CR3 & 0xfffbffff;\n          pUVar3[0x104a].DR = pUVar3[0x104a].DR | 0x40000;\n          obj->index = '\\x02';\n          obj->irq = USART3_IRQn;\n        }\n        pGVar5 = set_GPIO_Port_Clock((uint)((int)obj->pin_rx << 0x18) >> 0x1c);\n        uVar6 = pinmap_function(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08005208);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_rx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        GPIO_InitStruct.Pull = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08005218 + 0x18) = *(uint *)(DAT_08005218 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        GPIO_InitStruct.Speed = 3;\n        HAL_GPIO_Init(pGVar5,&GPIO_InitStruct);\n        pGVar5 = set_GPIO_Port_Clock((uint)((int)obj->pin_tx << 0x18) >> 0x1c);\n        uVar6 = pinmap_function(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08005204);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_tx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        GPIO_InitStruct.Pull = (uVar6 << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(pGVar5,&GPIO_InitStruct);\n        *(UART_HandleTypeDef **)(PTR_uart_handlers_08005228 + (uint)obj->index * 4) = &obj->handle;\n        (obj->handle).Instance = obj->uart;\n        (obj->handle).Init.BaudRate = obj->baudrate;\n        (obj->handle).Init.WordLength = obj->databits;\n        (obj->handle).Init.StopBits = obj->stopbits;\n        (obj->handle).Init.Parity = obj->parity;\n        (obj->handle).Init.Mode = 0xc;\n        (obj->handle).Init.HwFlowCtl = 0;\n        (obj->handle).Init.OverSampling = 0;\n        HAL_UART_Init(&obj->handle);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "pinmap_merge_peripheral",
                "set_GPIO_Port_Clock",
                "pinmap_function",
                "HAL_GPIO_Init",
                "iprintf",
                "HAL_UART_Init",
                "pinmap_peripheral"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004f4c",
            "calling": [
                "begin",
                "uart_debug_init"
            ],
            "imported": false,
            "current_name": "FUNC_08004f4c"
        },
        "FUN_080055bc": {
            "renaming": {
                "FUN_080055bc": "get_uart_handler_index_080055bc",
                "huart": "uart_handler",
                "uVar1": "index"
            },
            "code": "uint8_t get_uart_handler_index_080055bc(UART_HandleTypeDef *uart_handler) {\n  uint8_t index = 0;\n  if (uart_handler == NULL) {\n    index = 5;\n  }\n  else {\n    while (index < 5) {\n      if (uart_handler == *(UART_HandleTypeDef **)(PTR_uart_handlers_080055dc + index * 4)) {\n        break;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055bc",
            "calling": [
                "HAL_UART_TxCpltCallback",
                "HAL_UART_RxCpltCallback"
            ],
            "imported": false,
            "current_name": "get_uart_handler_index_080055bc"
        },
        "FUN_08001960": {
            "renaming": {
                "FUN_08001960": "setOutputLimits_08001960",
                "this": "pid",
                "Min": "minOutput",
                "Max": "maxOutput",
                "iVar1": "comparisonResult",
                "in_r2": "minOutput._0_4_",
                "in_r3": "minOutput._4_4_",
                "pdVar2": "outputPointer",
                "uVar3": "pid->outputSum._0_4_",
                "uVar4": "pid->outputSum._4_4_",
                "uVar5": "pid->outMax._0_4_",
                "uVar6": "pid->outMax._4_4_"
            },
            "code": "void setOutputLimits_08001960(PID *pid, double minOutput, double maxOutput)\n{\n  int comparisonResult;\n  double *outputPointer;\n\n  comparisonResult = __aeabi_dcmpge(maxOutput, minOutput);\n  if (comparisonResult == 0) {\n    pid->outMin = minOutput;\n    pid->outMax = maxOutput;\n    if (pid->inAuto != false) {\n      outputPointer = pid->myOutput;\n      comparisonResult = __aeabi_dcmplt(minOutput._0_4_, minOutput._4_4_, *(undefined4 *)outputPointer, *(undefined4 *)((int)outputPointer + 4));\n      if (comparisonResult == 0) {\n        comparisonResult = __aeabi_dcmpgt(maxOutput._0_4_, maxOutput._4_4_, *(undefined4 *)outputPointer, *(undefined4 *)((int)outputPointer + 4));\n        if (comparisonResult != 0) {\n          *(undefined4 *)outputPointer = minOutput._0_4_;\n          *(undefined4 *)((int)outputPointer + 4) = minOutput._4_4_;\n        }\n      }\n      else {\n        *outputPointer = minOutput;\n      }\n      comparisonResult = __aeabi_dcmpgt(pid->outputSum._0_4_, pid->outputSum._4_4_, maxOutput._0_4_, maxOutput._4_4_);\n      if (comparisonResult != 0) {\n        pid->outputSum = maxOutput;\n        return;\n      }\n      comparisonResult = __aeabi_dcmplt(pid->outputSum._0_4_, pid->outputSum._4_4_, minOutput._0_4_, minOutput._4_4_);\n      if (comparisonResult != 0) {\n        pid->outputSum = minOutput;\n      }\n    }\n  }\n}\n",
            "called": [
                "__aeabi_dcmpgt",
                "__aeabi_dcmplt",
                "__aeabi_dcmpge"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001960",
            "calling": [
                "PID",
                "loop"
            ],
            "imported": false,
            "current_name": "setOutputLimits_08001960"
        },
        "FUN_08004ca2": {
            "renaming": {
                "FUN_08004ca2": "get_pin_name_08004ca2",
                "PinMap_conflict": "PinMap",
                "PinName_conflict": "PinName",
                "map": "pin_map",
                "PVar1": "pin_name",
                "pinmap_find_pin": "find_pin_name"
            },
            "code": "PinName get_pin_name_08004ca2(void *peripheral, PinMap *pin_map) {\n  PinName pin_name;\n  if (peripheral != NULL) {\n    pin_name = find_pin_name(peripheral, pin_map);\n    return pin_name;\n  }\n  return NC;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ca2",
            "calling": [
                "uart_debug_init",
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "get_pin_name_08004ca2"
        },
        "FUN_08002810": {
            "renaming": {
                "FUN_08002810": "check_GPIO_pin_state_08002810",
                "GPIOx": "GPIO_port",
                "GPIO_Pin": "pin_number",
                "GPIO_PIN_RESET": "GPIO_PIN_STATE_RESET",
                "GPIO_PIN_SET": "GPIO_PIN_STATE_SET"
            },
            "code": "GPIO_PinState check_GPIO_pin_state_08002810(GPIO_TypeDef *GPIO_port, uint16_t pin_number) {\n  if ((pin_number & GPIO_port->IDR) == 0) {\n    return GPIO_PIN_RESET;\n  }\n  return GPIO_PIN_SET;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002810",
            "calling": [
                "digital_io_read"
            ],
            "imported": false,
            "current_name": "check_GPIO_pin_state_08002810"
        },
        "FUN_0800224c": {
            "renaming": {
                "FUN_0800224c": "stop_adc_conversion_0800224c",
                "hadc": "adc",
                "HVar1": "status",
                "ADC_CR1_CLEAR_MASK": "0xfff0feff",
                "ADC_CR2_CLEAR_MASK": "0xfff1f7fd"
            },
            "code": "HAL_StatusTypeDef_conflict stop_adc_conversion_0800224c(ADC_HandleTypeDef *adc)\n{\n  HAL_StatusTypeDef_conflict status;\n  if (adc == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    adc->State |= ADC_STATE_BUSY;\n    status = ADC_ConversionStop_Disable(adc);\n    if (status == HAL_OK) {\n      adc->Instance->SR = 0xffffffe0;\n      adc->Instance->CR1 = ADC_CR1_CLEAR_MASK & adc->Instance->CR1;\n      adc->Instance->CR2 = ADC_CR2_CLEAR_MASK & adc->Instance->CR2;\n      adc->Instance->SMPR1 = adc->Instance->SMPR1 & 0xff000000;\n      adc->Instance->SMPR2 = adc->Instance->SMPR2 & 0xc0000000;\n      adc->Instance->JOFR1 = adc->Instance->JOFR1 & 0xfffff000;\n      adc->Instance->JOFR2 = adc->Instance->JOFR2 & 0xfffff000;\n      adc->Instance->JOFR3 = adc->Instance->JOFR3 & 0xfffff000;\n      adc->Instance->JOFR4 = adc->Instance->JOFR4 & 0xfffff000;\n      adc->Instance->HTR = adc->Instance->HTR & 0xfffff000;\n      adc->Instance->LTR = adc->Instance->LTR & 0xfffff000;\n      adc->Instance->SQR1 = adc->Instance->SQR1 & 0xff000000;\n      adc->Instance->SQR2 = adc->Instance->SQR2 & 0xc0000000;\n      adc->Instance->SQR3 = adc->Instance->SQR3 & 0xc0000000;\n      adc->Instance->JSQR = adc->Instance->JSQR & 0xffc00000;\n      HAL_ADC_MspDeInit(adc);\n      adc->ErrorCode = 0;\n      adc->State = ADC_STATE_READY;\n    }\n    adc->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [
                "HAL_ADC_MspDeInit",
                "ADC_ConversionStop_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800224c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "stop_adc_conversion_0800224c"
        },
        "FUN_080054b0": {
            "renaming": {
                "FUN_080054b0": "is_uart_transmit_complete_080054b0",
                "obj": "serial",
                "HVar1": "uart_state",
                "PTR_uart_handlers_080054d0": "PTR_uart_handlers_080054d0",
                "index": "index"
            },
            "code": "bool is_uart_transmit_complete_080054b0(serial_t *serial) {\n  HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(*(UART_HandleTypeDef **)(PTR_uart_handlers_080054d0 + (uint)serial->index * 4));\n  return (uart_state & 0x21U) == 0x21;\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b0",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "is_uart_transmit_complete_080054b0"
        },
        "FUN_08006f00": {
            "renaming": {
                "FUN_08006f00": "signal_handler_08006f00",
                "__sig": "signal_number",
                "PTR__impure_ptr_08006f0c": "impure_ptr",
                "iVar1": "result",
                "_FUN_08006f00_r": "_signal_handler_r"
            },
            "code": "int signal_handler_08006f00(int signal_number) {\n  int result = _signal_handler_08006f00_r(*(undefined4 *)PTR__impure_ptr_08006f0c,__sig);\n  return result;\n}",
            "called": [
                "_raise_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f00",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "signal_handler_08006f00"
        },
        "FUN_080016b4": {
            "renaming": {
                "PID::FUN_080016b4": "calculatePID",
                "this": "pid",
                "bVar1": "inAuto",
                "uVar2": "currentTime",
                "iVar3": "elapsedTime",
                "uVar4": "errorHigh32",
                "uVar5": "inputLow32",
                "uVar6": "outputLow32",
                "uVar7": "outMinLow32",
                "uVar8": "inputHigh32",
                "uVar9": "outputHigh32",
                "uVar10": "outMinHigh32",
                "uVar12": "outMaxLow32",
                "uVar13": "outMaxHigh32",
                "uVar14": "setpointHigh32",
                "uVar15": "setpointLow32",
                "uVar16": "inputDeltaHigh32",
                "uVar17": "outputDeltaLow32",
                "local_38": "kpErrorLow32",
                "uStack_34": "kpErrorHigh32",
                "cVar11": "inAuto",
                "dVar18": "output",
                "dVar19": "outputDelta",
                "PID::myInput": "pid->myInput",
                "PID::mySetpoint": "pid->mySetpoint",
                "PID::lastInput": "pid->lastInput",
                "PID::lastError": "pid->lastError",
                "PID::lastTime": "pid->lastTime",
                "PID::SampleTime": "pid->SampleTime",
                "PID::kp": "pid->kp",
                "PID::ki": "pid->ki",
                "PID::kd": "pid->kd",
                "PID::outMin": "pid->outMin",
                "PID::outMax": "pid->outMax",
                "PID::outputSum": "pid->outputSum",
                "PID::pOnE": "pid->pOnE",
                "PID::myOutput": "pid->myOutput",
                "FUN_080016b4": "calculatePID_080016b4"
            },
            "code": "bool __thiscall calculatePID_080016b4(PID *pid)\n{\n  bool inAuto = pid->inAuto;\n  if (!inAuto)\n  {\n    return false;\n  }\n  uint32_t currentTime = millis();\n  uint32_t elapsedTime = currentTime - pid->lastTime;\n  if (elapsedTime < pid->SampleTime)\n  {\n    return false;\n  }\n  double input = (double) *pid->myInput;\n  double setpoint = (double) *pid->mySetpoint;\n  double error = setpoint - input;\n  double inputDelta = input - pid->lastInput;\n  double outputDelta = (error - pid->lastError) / elapsedTime;\n  pid->outputSum += pid->ki * error * pid->SampleTime;\n  if (pid->pOnE)\n  {\n    pid->outputSum += pid->kp * error - pid->kd * inputDelta;\n  }\n  else\n  {\n    pid->outputSum += pid->kp * outputDelta - pid->kd * inputDelta;\n  }\n  pid->lastInput = input;\n  pid->lastError = error;\n  double output = pid->outputSum;\n  if (output > pid->outMax)\n  {\n    output = pid->outMax;\n    pid->outputSum = output - pid->kp * error * pid->SampleTime;\n  }\n  else if (output < pid->outMin)\n  {\n    output = pid->outMin;\n    pid->outputSum = output - pid->kp * error * pid->SampleTime;\n  }\n  *pid->myOutput = output;\n  pid->lastTime = currentTime;\n  return true;\n}",
            "called": [
                "__subdf3",
                "__muldf3",
                "__aeabi_dcmpgt",
                "__aeabi_dcmplt",
                "millis",
                "__aeabi_dadd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016b4",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculatePID_080016b4"
        },
        "FUN_08004e48": {
            "renaming": {
                "FUN_08004e48": "handle_timer_interrupt_08004e48",
                "PTR_timer_handles_08004e58": "PTR_timer_handles",
                "*PTR_timer_handles_08004e58": "timer_handle",
                "TIM_HandleTypeDef": "TIM_handle"
            },
            "code": "void handle_timer_interrupt_08004e48(void)\n{\n  TIM_HandleTypeDef* *PTR_timer_handles_08004e58 = *(TIM_HandleTypeDef**)(PTR_*PTR_timer_handles_08004e58s_08004e58_08004e58 + 8);\n  if (*PTR_timer_handles_08004e58 != NULL)\n  {\n    HAL_TIM_IRQHandler(*PTR_timer_handles_08004e58);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e48",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e48"
        },
        "FUN_0800074c": {
            "renaming": {
                "FUN_0800074c": "FUNC_0800074c"
            },
            "code": "\nulonglong FUNC_0800074c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_double_from_uints_080008ba();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800086a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800086a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_080008ba"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800074c",
            "calling": [
                "SetSampleTime",
                "SetTunings",
                "printFloat",
                "readThermocouple"
            ],
            "imported": false,
            "current_name": "FUNC_0800074c"
        },
        "FUN_080018f8": {
            "renaming": {
                "FUN_080018f8": "calculatePID_080018f8",
                "this": "pid",
                "Kp": "proportionalGain",
                "Ki": "integralGain",
                "Kd": "derivativeGain",
                "in_stack_ffffffec": "tempVariable"
            },
            "code": "void calculatePID_080018f8(PID *pid, double Kp, double Ki, double Kd)\n{\n  double proportionalTerm = Kp;\n  double integralTerm = Ki * (double)pid->pOn;\n  double derivativeTerm = Kd / (double)pid->pOn;\n  calculatePID_080018f8(pid, proportionalTerm, integralTerm, derivativeTerm, pid->pOn);\n  return;\n}",
            "called": [
                "SetTunings"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018f8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculatePID_080018f8"
        },
        "FUN_08005890": {
            "renaming": {
                "FUN_08005890": "read_digital_pin_08005890",
                "ulPin": "pin",
                "_Var1": "is_pin_configured",
                "port": "port",
                "uVar2": "pin_value",
                "uVar3": "pin_config"
            },
            "code": "int read_digital_pin_08005890(uint32_t pin)\n{\n  bool is_pin_configured;\n  GPIO_TypeDef *port;\n  uint32_t pin_config;\n  uint8_t pin_value;\n  \n  if (pin < 0x3c) {\n    pin_config = (uint32_t)(char)PTR_digitalPin_080058d8[pin];\n  }\n  else {\n    pin_config = 0xffffffff;\n  }\n  if (pin_config == 0xffffffff) {\n    pin_value = 0;\n  }\n  else {\n    is_pin_configured = is_pin_configured((PinName_conflict)pin_config,(uint32_t *)PTR_g_digPinConfigured_080058dc);\n    if (is_pin_configured) {\n      port = get_GPIO_Port((pin_config << 0x18) >> 0x1c);\n      pin_value = digital_io_read(port,1 << (pin_config & 0xf) & 0xffff) & 0xff;\n    }\n    else {\n      pin_value = 0;\n    }\n  }\n  if (pin_value != 0) {\n    pin_value = 1;\n  }\n  return pin_value;\n}",
            "called": [
                "get_GPIO_Port",
                "is_pin_configured",
                "digital_io_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005890",
            "calling": [
                "readData",
                "loop"
            ],
            "imported": false,
            "current_name": "read_digital_pin_08005890"
        },
        "FUN_08005da0": {
            "renaming": {
                "FUN_08005da0": "print_08005da0",
                "this": "this",
                "b": "character",
                "base": "base",
                "sVar1": "size"
            },
            "code": "size_t __thiscall print_08005da0(Print *this, uchar character, int base) {\n  size_t size;\n  size = print_08005da0(this, (uint)character, base);\n  return size;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da0",
            "calling": [
                "printTo"
            ],
            "imported": false,
            "current_name": "print_08005da0"
        },
        "FUN_08004cb2": {
            "renaming": {
                "FUN_08004cb2": "find_pin_function_08004cb2",
                "pin": "target_pin",
                "map": "pin_map"
            },
            "code": "uint32_t find_pin_function_08004cb2(PinName_conflict target_pin, PinMap_conflict *pin_map) {\n  while(true) {\n    if(pin_map->pin == NC) {\n      return 0xffffffff;\n    }\n    if(pin_map->pin == target_pin) {\n      break;\n    }\n    pin_map = pin_map + 1;\n  }\n  return pin_map->function;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb2",
            "calling": [
                "pinmap_find_function",
                "pinmap_function"
            ],
            "imported": false,
            "current_name": "find_pin_function_08004cb2"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "enable_i2c_listen_interrupt_08004ef4",
                "hi2c": "i2c_handle",
                "piVar1": "i2c_object",
                "get_i2c_obj": "get_i2c_object",
                "isMaster": "is_master"
            },
            "code": "void enable_i2c_listen_interrupt_08004ef4(I2C_HandleTypeDef *i2c_handle)\\n{\\n  i2c_t *i2c_object = get_i2c_object(i2c_handle);\\n  if (i2c_object->isMaster == \"\\0\") {\\n    HAL_I2C_EnableListen_IT(i2c_handle);\\n  }\\n  return;\\n}",
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "enable_i2c_listen_interrupt_08004ef4"
        },
        "FUN_08001294": {
            "renaming": {
                "FUN_08001294": "set_row_offsets_08001294",
                "this": "lcd",
                "row0": "first_row_offset",
                "row1": "second_row_offset",
                "row2": "third_row_offset",
                "row3": "fourth_row_offset",
                "_row_offsets": "row_offsets"
            },
            "code": "void set_row_offsets_08001294(LiquidCrystal *lcd, int first_row_offset, int second_row_offset, int third_row_offset, int fourth_row_offset) {\n  lcd->row_offsets[0] = (uint8_t)first_row_offset;\n  lcd->row_offsets[1] = (uint8_t)second_row_offset;\n  lcd->row_offsets[2] = (uint8_t)third_row_offset;\n  lcd->row_offsets[3] = (uint8_t)fourth_row_offset;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001294",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "set_row_offsets_08001294"
        },
        "FUN_08002384": {
            "renaming": {
                "FUN_08002384": "halt_adc_conversion_08002384",
                "hadc": "adc_handle",
                "HVar1": "status",
                "uVar2": "sys_clock_freq",
                "uVar3": "current_time",
                "pAVar4": "adc_instance",
                "uVar5": "wait_loop_index"
            },
            "code": "HAL_StatusTypeDef_conflict halt_adc_conversion_08002384(ADC_HandleTypeDef *adc_handle)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t sys_clock_freq, wait_loop_index;\n  ADC_TypeDef *adc_instance;\n  uint32_t start_time, current_time;\n\n  if (adc_handle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  adc_handle->Lock = HAL_LOCKED;\n  status = ADC_ConversionStop_Disable(adc_handle);\n  if (status == HAL_OK) {\n    adc_handle->State &= 0xffffeefd;\n    adc_handle->State |= 2;\n    sys_clock_freq = HAL_RCCEx_GetPeriphCLKFreq(2);\n    wait_loop_index = HAL_RCC_GetHCLKFreq() / sys_clock_freq << 1;\n    while (wait_loop_index--) {\n    }\n    ADC_Enable(adc_handle);\n    adc_instance = adc_handle->Instance;\n    adc_instance->CR2 |= 8;\n    start_time = HAL_GetTick();\n    while ((adc_instance->CR2 & 8) != 0) {\n      current_time = HAL_GetTick();\n      if (current_time - start_time > 10) {\n        adc_handle->State &= 0xffffffed;\n        adc_handle->State |= 0x10;\n        adc_handle->Lock = HAL_UNLOCKED;\n        return HAL_ERROR;\n      }\n    }\n    adc_instance->CR2 |= 4;\n    start_time = HAL_GetTick();\n    while ((adc_instance->CR2 & 4) != 0) {\n      current_time = HAL_GetTick();\n      if (current_time - start_time > 10) {\n        adc_handle->State &= 0xffffffed;\n        adc_handle->State |= 0x10;\n        adc_handle->Lock = HAL_UNLOCKED;\n        return HAL_ERROR;\n      }\n    }\n    adc_handle->State &= 0xfffffffc;\n    adc_handle->State |= 1;\n  }\n  adc_handle->Lock = HAL_UNLOCKED;\n  return status;\n}",
            "called": [
                "HAL_GetTick",
                "ADC_ConversionStop_Disable",
                "ADC_Enable",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002384",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "halt_adc_conversion_08002384"
        },
        "FUN_08005650": {
            "renaming": {
                "FUN_08005650": "initialize_uart_08005650",
                "huart": "uart_handle",
                "tmpval": "temp_value"
            },
            "code": "void initialize_uart_08005650(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t temp_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005650",
            "calling": [
                "HAL_UART_IRQHandler",
                "UART_DMAAbortOnError"
            ],
            "imported": false,
            "current_name": "initialize_uart_08005650"
        },
        "FUN_08006fb6": {
            "renaming": {
                "FUN_08006fb6": "close_file_descriptor_08006fb6",
                "param_1": "stream",
                "param_2": "file_descriptor_offset"
            },
            "code": "void close_file_descriptor_08006fb6(void* stream, int file_descriptor_offset) {\n  _close_r(stream, (int)*(short *)(file_descriptor_offset + 0xe));\n  return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006fb6",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_08006fb6"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "update_i2c_buffer_08002ad8",
                "*hi2c": "*i2c_handler",
                "puVar1": "buffer_pointer",
                "hi2c->pBuffPtr": "i2c_handler->buffer_pointer",
                "hi2c->XferCount": "i2c_handler->transfer_count",
                "hi2c->Instance->DR": "i2c_handler->instance->data_register"
            },
            "code": "HAL_StatusTypeDef_conflict update_i2c_buffer_08002ad8(I2C_HandleTypeDef *i2c_handler)\n{\n  uint8_t *buffer_pointer;\n  \n  if (i2c_handler->transfer_count != 0) {\n    buffer_pointer = i2c_handler->buffer_pointer;\n    i2c_handler->buffer_pointer = buffer_pointer + 1;\n    *buffer_pointer = (uint8_t)i2c_handler->instance->data_register;\n    i2c_handler->transfer_count = i2c_handler->transfer_count - 1;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "update_i2c_buffer_08002ad8"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "set_uart_config_08004204",
                "huart": "uart_handle",
                "huart->Instance": "uart_handle->Instance",
                "huart->Init": "uart_handle->Init",
                "USART_TypeDef": "USART",
                "CR1": "control_register_1",
                "CR2": "control_register_2",
                "CR3": "control_register_3",
                "BRR": "baud_rate_register",
                "StopBits": "stop_bits",
                "WordLength": "word_length",
                "Parity": "parity",
                "Mode": "mode",
                "HwFlowCtl": "hw_flow_control",
                "DAT_080043ac": "USART1",
                "DAT_080043b0": "25"
            },
            "code": "void set_uart_config_08004204(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t pclk_freq;\n  uint32_t baud_rate;\n  uint32_t brr_value;\n  USART_TypeDef *uart_instance = uart_handle->Instance;\n\n  uart_instance->CR2 = (uart_instance->CR2 & 0xffffcfff) | (uart_handle->Init).StopBits;\n  uart_instance->CR1 = (uart_handle->Init).WordLength | (uart_handle->Init).Parity | (uart_handle->Init).Mode | (uart_instance->CR1 & 0xffffe9f3);\n  uart_instance->CR3 = (uart_instance->CR3 & 0xfffffcff) | (uart_handle->Init).HwFlowCtl;\n\n  if (uart_instance != DAT_080043ac) {\n    pclk_freq = HAL_RCC_GetPCLK1Freq();\n    baud_rate = (uart_handle->Init).BaudRate;\n  } else {\n    pclk_freq = HAL_RCC_GetPCLK2Freq();\n    baud_rate = (uart_handle->Init).BaudRate;\n  }\n\n  brr_value = ((DAT_080043b0 * pclk_freq) / (4 * baud_rate)) + 0.5;\n  uart_instance->BRR = (brr_value & 0xFFFF0000) | ((brr_value & 0x000F) << 1) | (((brr_value & 0x0007) >> 3) & 0x000F);\n}\n",
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "set_uart_config_08004204"
        },
        "FUN_08005da8": {
            "renaming": {
                "FUN_08005da8": "print_double_08005da8",
                "this": "printer",
                "number": "number",
                "digits": "digits",
                "iVar1": "is_nan",
                "n": "integer_part",
                "sVar2": "count",
                "sVar3": "count",
                "bVar4": "digit",
                "lVar5": "unused",
                "uVar6": "fraction_part",
                "uVar7": "unused"
            },
            "code": "size_t print_double_08005da8(Print *printer, double number, uint8_t digits) {\n  int is_nan = isnan(number);\n  if (is_nan) {\n    return print(printer, \"nan\");\n  }\n  int is_inf = isinf(number);\n  if (is_inf) {\n    return print(printer, number < 0 ? \"-inf\" : \"inf\");\n  }\n  if (number == 0) {\n    return print(printer, \"0\");\n  }\n  int is_negative = number < 0;\n  if (is_negative) {\n    number = -number;\n    print(printer, '-');\n  }\n  int integer_part = (int)number;\n  double fraction_part = number - integer_part;\n  size_t count = print(printer, integer_part);\n  if (digits > 0) {\n    count += print(printer, '.');\n    for (int i = 0; i < digits; i++) {\n      fraction_part *= 10;\n      int digit = (int)fraction_part;\n      count += print(printer, digit);\n      fraction_part -= digit;\n    }\n  }\n  return count;\n}",
            "called": [
                "print",
                "print",
                "__subdf3",
                "__aeabi_dcmplt",
                "__floatunsidf",
                "print",
                "print",
                "__fixunsdfsi",
                "__fixdfsi",
                "__muldf3",
                "__aeabi_dcmpgt",
                "__unorddf2",
                "__divdf3",
                "__floatsidf",
                "__aeabi_dadd",
                "__aeabi_dcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da8",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_double_08005da8"
        },
        "FUN_080045fe": {
            "renaming": {
                "FUN_080045fe": "set_uart_to_ready_state_080045fe",
                "huart": "uart_handle",
                "Instance": "instance",
                "CR1": "control_register_1",
                "gState": "global_state",
                "HAL_UART_STATE_READY": "UART_STATE_READY",
                "HAL_UART_TxCpltCallback": "UART_transmission_complete_callback",
                "HAL_OK": "HAL_operation_successful"
            },
            "code": "HAL_StatusTypeDef set_uart_to_ready_state_080045fe(UART_HandleTypeDef *uart_handle)\n{\n  uart_handle->Instance->CR1 &= ~USART_CR1_TE;\n  uart_handle->gState = HAL_UART_STATE_READY;\n  HAL_UART_TxCpltCallback(uart_handle);\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045fe",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_uart_to_ready_state_080045fe"
        },
        "FUN_08005f2c": {
            "renaming": {
                "FUN_08005f2c": "printDouble_08005f2c",
                "this": "printObject",
                "n": "number",
                "digits": "decimalPlaces",
                "sVar1": "size"
            },
            "code": "size_t printDouble_08005f2c(Print *printObject, double number, int decimalPlaces) {\n  size_t size;\n  size = printDouble_08005f2cFloat(printObject, (double)(uint64_t)(number), (uint32_t)((number - (double)(uint64_t)(number)) * pow(10, decimalPlaces)));\n  return size;\n}",
            "called": [
                "printFloat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f2c",
            "calling": [
                "println",
                "loop"
            ],
            "imported": false,
            "current_name": "printDouble_08005f2c"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "process_uart_data_080055e0",
                "*huart": "*uart_handle",
                "bVar1": "uart_index_value",
                "uVar2": "callback_index",
                "PTR_rx_callback_080055fc": "rx_callback_ptr",
                "PTR_rx_callback_obj_08005600": "rx_callback_obj_ptr"
            },
            "code": "void process_uart_data_080055e0(UART_HandleTypeDef *uart_handle)\n{\n  uint8_t uart_index_value = get_uart_index(uart_handle);\n  uint8_t callback_index = (uint8_t)uart_index_value;\n  if (callback_index < 5) {\n    (**(code **)(PTR_rx_callback_080055fc + callback_index * 4))(*(undefined4 *)(PTR_rx_callback_obj_08005600 + callback_index * 4));\n  }\n  return;\n}",
            "called": [
                "uart_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "UART_Receive_IT"
            ],
            "imported": false,
            "current_name": "process_uart_data_080055e0"
        },
        "FUN_08005f40": {
            "renaming": {
                "FUN_08005f40": "print_double_with_precision_08005f40",
                "this": "printer",
                "num": "number",
                "digits": "decimal_places",
                "sVar1": "s1",
                "sVar2": "s2",
                "in_stack_ffffffec": "decimal_places"
            },
            "code": "size_t print_double_with_precision_08005f40(Print *printer, double number, int decimal_places) {\n  size_t s1 = print(printer, (double)((ulonglong)number & 0xffffffff | (ulonglong)decimal_places << 0x20), number._0_4_);\n  size_t s2 = print_double_with_precision_08005f40(printer);\n  return s2 + s1;\n}",
            "called": [
                "print",
                "println"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f40",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "print_double_with_precision_08005f40"
        },
        "FUN_08006f10": {
            "renaming": {
                "FUN_08006f10": "kill_process_if_running_08006f10",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal_code",
                "puVar1": "error_ptr",
                "iVar2": "kill_result"
            },
            "code": "void kill_process_if_running_08006f10(int *error_code, int process_id, int signal_code) {\n  undefined *error_ptr;\n  int kill_result;\n  error_ptr = PTR_errno_08006f30;\n  *(undefined4 *)PTR_errno_08006f30 = 0;\n  kill_result = _kill(process_id, signal_code);\n  if ((kill_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f10",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "kill_process_if_running_08006f10"
        },
        "FUN_0800213c": {
            "renaming": {
                "FUN_0800213c": "initialize_ADC_0800213c",
                "hadc": "adc",
                "HVar1": "status",
                "uVar2": "flags_1",
                "uVar3": "flags_2",
                "uVar4": "flags_3",
                "uVar5": "flags_4"
            },
            "code": "HAL_StatusTypeDef_conflict initialize_ADC_0800213c(ADC_HandleTypeDef *adc)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t state_flags;\n  uint32_t cr1_flags;\n  uint32_t cr2_flags;\n  uint32_t sqr1_flags;\n  uint32_t continuous_conv_mode;\n  uint32_t discontinuous_conv_mode;\n  uint32_t data_align;\n  uint32_t external_trig_conv;\n  uint32_t scan_conv_mode;\n  uint32_t nbr_of_conv;\n  uint32_t nbr_of_disc_conv;\n\n  if (adc == NULL) {\n    return HAL_ERROR;\n  }\n\n  if (adc->State == 0) {\n    adc->ErrorCode = 0;\n    adc->Lock = HAL_UNLOCKED;\n    HAL_ADC_MspInit(adc);\n  }\n\n  status = ADC_ConversionStop_Disable(adc);\n  state_flags = adc->State & 0x10;\n\n  if ((state_flags == 0) && (status == HAL_OK)) {\n    adc->State = adc->State & 0xffffeefd | 2;\n    continuous_conv_mode = (adc->Init).ContinuousConvMode;\n    data_align = (adc->Init).DataAlign;\n    external_trig_conv = (adc->Init).ExternalTrigConv;\n    scan_conv_mode = (adc->Init).ScanConvMode;\n    nbr_of_conv = (adc->Init).NbrOfConversion;\n    nbr_of_disc_conv = (adc->Init).NbrOfDiscConversion;\n\n    if (scan_conv_mode == 0x100 || scan_conv_mode == 1) {\n      sqr1_flags = (nbr_of_conv - 1) * 0x100000;\n    }\n    else {\n      sqr1_flags = 0;\n    }\n\n    if (discontinuous_conv_mode == 1) {\n      if (continuous_conv_mode == 0) {\n        sqr1_flags = sqr1_flags | (nbr_of_disc_conv - 1) * 0x2000 | 0x800;\n      }\n      else {\n        adc->State = adc->State | 0x20;\n        adc->ErrorCode = adc->ErrorCode | 1;\n      }\n    }\n\n    cr1_flags = (scan_conv_mode == 0x100 || scan_conv_mode == 1) ? 0x100 : 0;\n    cr2_flags = external_trig_conv | data_align | (continuous_conv_mode << 1);\n    adc->Instance->CR1 = cr1_flags | (adc->Instance->CR1 & 0xffff16ff);\n    adc->Instance->CR2 = (adc->Instance->CR2 & DAT_08002244) | cr2_flags;\n    adc->Instance->SQR1 = sqr1_flags | (adc->Instance->SQR1 & 0xff0fffff);\n\n    if (cr2_flags != (DAT_08002248 & adc->Instance->CR2)) {\n      adc->State = adc->State & 0xffffffed | 0x10;\n      adc->ErrorCode = adc->ErrorCode | 1;\n      return HAL_ERROR;\n    }\n\n    adc->ErrorCode = 0;\n    adc->State = adc->State & 0xfffffffc | 1;\n    return HAL_OK;\n  }\n\n  adc->State = adc->State | 0x10;\n  return HAL_ERROR;\n}",
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800213c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "initialize_ADC_0800213c"
        },
        "FUN_0800455a": {
            "renaming": {
                "FUN_0800455a": "uart_transmit_0800455a",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "HAL_UART_STATE_READY": "HAL_UART_STATE_READY",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "pTxBuffPtr": "tx_buffer_pointer",
                "TxXferSize": "tx_transfer_size",
                "TxXferCount": "tx_transfer_count",
                "ErrorCode": "error_code",
                "gState": "global_state",
                "Instance": "instance"
            },
            "code": "HAL_StatusTypeDef uart_transmit_0800455a(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size) {\n  if (huart->gState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (data == NULL) {\n    return HAL_ERROR;\n  }\n  if (size == 0) {\n    return HAL_ERROR;\n  }\n  if (huart->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  huart->pTxBuffPtr = data;\n  huart->TxXferSize = size;\n  huart->TxXferCount = size;\n  huart->ErrorCode = 0;\n  huart->gState = HAL_UART_STATE_BUSY_TX;\n  huart->Lock = HAL_UNLOCKED;\n  huart->Instance->CR1 |= 0x80;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800455a",
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "imported": false,
            "current_name": "uart_transmit_0800455a"
        },
        "FUN_08004d30": {
            "renaming": {
                "FUN_08004d30": "handle_rtc_alarm_interrupt_08004d30",
                "PTR_RtcHandle_08004d3c": "PTR_rtc_handle"
            },
            "code": "void handle_rtc_alarm_interrupt_08004d30(void)\n{\n  HAL_RTC_AlarmIRQHandler((RTC_HandleTypeDef *)PTR_RtcHandle_08004d3c);\n  return;\n}",
            "called": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d30",
            "calling": [],
            "imported": false,
            "current_name": "handle_rtc_alarm_interrupt_08004d30"
        },
        "FUN_08001a66": {
            "renaming": {
                "FUN_08001a66": "updateControllerConstants_08001a66",
                "this": "pid",
                "Direction": "newDirection",
                "dVar1": "negKp/negKi/negKd"
            },
            "code": "void __thiscall updateControllerConstants_08001a66(PID *pid, int newDirection) {\n  double negKp, negKi, negKd;\n  if ((pid->inAuto != false) && (pid->controllerDirection != newDirection)) {\n    negKp = -1.0 * pid->kp;\n    negKi = -1.0 * pid->ki;\n    negKd = -1.0 * pid->kd;\n    pid->kp = negKp;\n    pid->ki = negKi;\n    pid->kd = negKd;\n  }\n  pid->controllerDirection = newDirection;\n  return;\n}",
            "called": [
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a66",
            "calling": [
                "PID"
            ],
            "imported": false,
            "current_name": "updateControllerConstants_08001a66"
        },
        "FUN_08003c44": {
            "renaming": {
                "FUN_08003c44": "getSystemCoreClock_08003c44",
                "PTR_SystemCoreClock_08003c4c": "PTR_SystemCoreClock_08003c4c"
            },
            "code": "uint32_t getSystemCoreClock_08003c44(void)\n{\n  uint32_t* ptr = (uint32_t*) PTR_SystemCoreClock_08003c4c;\n  return *ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c44",
            "calling": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "getSystemCoreClock_08003c44"
        },
        "FUN_08006074": {
            "renaming": {
                "FUN_08006074": "handle_GPIO_interrupt_08006074",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ handle_GPIO_interrupt_08006074(DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_HDAT_PDAT_TDAT_RDAT__DAT_ADAT_PDAT_TDAT_RDAT__DAT_LDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_GDAT_PDAT_TDAT_RDAT__DAT_PDAT_PDAT_TDAT_RDAT__DAT_IDAT_PDAT_TDAT_RDAT__DAT_ODAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_EDAT_PDAT_TDAT_RDAT__DAT_XDAT_PDAT_TDAT_RDAT__DAT_TDAT_PDAT_TDAT_RDAT__DAT_IDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_IDAT_PDAT_TDAT_RDAT__DAT_RDAT_PDAT_TDAT_RDAT__DAT_QDAT_PDAT_TDAT_RDAT__DAT_HDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_GDAT_PDAT_TDAT_RDAT__DAT_PDAT_PDAT_TDAT_RDAT__DAT_IDAT_PDAT_TDAT_RDAT__DAT_ODAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_PDAT_PDAT_TDAT_RDAT__DAT_IDAT_PDAT_TDAT_RDAT__DAT_NDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006074",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_interrupt_08006074"
        },
        "FUN_080028d2": {
            "renaming": {
                "FUN_080028d2": "set_i2c_device_address_080028d2",
                "hi2c": "i2c_handle",
                "hi2c->Instance->DR": "i2c_handle->Instance->DR",
                "hi2c->Devaddress": "device_address"
            },
            "code": "HAL_StatusTypeDef_conflict set_i2c_device_address_080028d2(I2C_HandleTypeDef *i2c_handle, uint8_t device_address)\n{\n  i2c_handle->Instance->DR = device_address & 0xff;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_i2c_device_address_080028d2"
        },
        "FUN_08000a18": {
            "renaming": {
                "FUN_08000a18": "isEndOfString_08000a18",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_08000a18(char* str)\n{\n  char currentChar = *str;\n  __aeabi_cdrcmple();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a18",
            "calling": [
                "SetOutputLimits",
                "printFloat",
                "Compute",
                "Initialize",
                "loop"
            ],
            "imported": false,
            "current_name": "isEndOfString_08000a18"
        },
        "FUN_08005384": {
            "renaming": {
                "FUN_08005384": "initialize_uart_debug_08005384",
                "pin": "tx_pin",
                "obj": "serial_debug",
                "PVar1": "rx_pin",
                "pvVar2": "peripheral"
            },
            "code": "void initialize_uart_debug_08005384(void)\n{\n  PinName_conflict tx_pin = PTR_digitalPin_080053c4[1];\n  void *peripheral = pinmap_peripheral(tx_pin, (PinMap_conflict *)PTR_PinMap_UART_TX_080053c8);\n  if (peripheral != (void *)0x0) {\n    void *rx_peripheral = pinmap_peripheral(tx_pin, (PinMap_conflict *)PTR_PinMap_UART_TX_080053c8);\n    PinName_conflict rx_pin = pinmap_pin(rx_peripheral, (PinMap_conflict *)PTR_PinMap_UART_RX_080053cc);\n    undefined *serial_debug = PTR_serial_debug_080053d0;\n    serial_debug[0x59] = rx_pin;\n    serial_debug[0x58] = tx_pin;\n    *(undefined4 *)(serial_debug + 0x48) = 0x2580;\n    *(undefined4 *)(serial_debug + 0x54) = 0;\n    *(undefined4 *)(serial_debug + 0x4c) = 0;\n    *(undefined4 *)(serial_debug + 0x50) = 0;\n    uart_init((serial_t *)serial_debug);\n  }\n  return;\n}",
            "called": [
                "pinmap_pin",
                "uart_init",
                "pinmap_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005384",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "initialize_uart_debug_08005384"
        },
        "FUN_08005b3c": {
            "renaming": {
                "FUN_08005b3c": "set_tx_pin_08005b3c",
                "_tx": "tx_pin_index",
                "PVar1": "tx_pin",
                "PTR_digitalPin_08005b50": "digitalPinList"
            },
            "code": "void __thiscall set_tx_pin_08005b3c(HardwareSerial *this, uint32_t tx_pin_index) {\n  PinName tx_pin;\n  if (tx_pin_index < 0x3c) {\n    tx_pin = PTR_digitalPin_08005b50[tx_pin_index];\n  }\n  else {\n    tx_pin = NC;\n  }\n  (this->_serial).pin_tx = tx_pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "set_tx_pin_08005b3c"
        },
        "FUN_0800091c": {
            "renaming": {
                "FUN_0800091c": "check_params_0800091c",
                "param_1": "x1",
                "param_2": "x2",
                "param_3": "y1",
                "param_4": "y2",
                "uVar1": "xor_res",
                "bVar2": "is_zero",
                "bVar3": "is_ordered"
            },
            "code": "uint check_params_0800091c(uint x1, uint x2, uint y1, uint y2) {\n  uint xor_res;\n  bool is_zero;\n  bool is_ordered;\n  \n  if (((int)(x2 << 1) >> 0x15 == -1 || (int)(y2 << 1) >> 0x15 == -1) &&\n     ((((int)(x2 << 1) >> 0x15 == -1 && ((x1 | x2 << 0xc) != 0)) ||\n      (((int)(y2 << 1) >> 0x15 == -1 && ((y1 | y2 << 0xc) != 0)))))) {\n    return 0xffffffff;\n  }\n  is_zero = (x1 | x2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (y1 | y2 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = x2 == y2;\n  }\n  if (is_zero) {\n    is_zero = x1 == y1;\n  }\n  if (!is_zero) {\n    xor_res = x2 ^ y2;\n    is_zero = xor_res == 0;\n    if (-1 < (int)xor_res) {\n      is_zero = x2 == y2;\n    }\n    is_ordered = -1 < (int)xor_res && y2 <= x2;\n    if (is_zero) {\n      is_ordered = y1 <= x1;\n    }\n    y2 = (int)y2 >> 0x1f;\n    if (!is_ordered) {\n      y2 = ~y2;\n    }\n    return y2 | 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800091c",
            "calling": [],
            "imported": false,
            "current_name": "check_params_0800091c"
        },
        "FUN_080046b8": {
            "renaming": {
                "FUN_080046b8": "process_uart_data_080046b8",
                "huart": "uart_handle",
                "HVar1": "status",
                "uVar2": "cr1_reg",
                "pUVar3": "uart_instance",
                "uVar4": "cr3_bit",
                "uVar5": "sr_reg",
                "DAT_080047d4": "dma_abort_callback"
            },
            "code": "void process_uart_data_080046b8(UART_HandleTypeDef *uart_handle)\n{\n  HAL_StatusTypeDef status;\n  uint32_t sr_reg;\n  USART_TypeDef *uart_instance;\n  uint32_t cr1_reg;\n  uint32_t cr3_reg;\n  uint32_t error_code;\n  uint32_t DAT_080047d4;\n\n  uart_instance = uart_handle->Instance;\n  sr_reg = uart_instance->SR;\n  cr1_reg = uart_instance->CR1;\n  cr3_reg = uart_instance->CR3;\n  error_code = uart_handle->ErrorCode;\n  DAT_080047d4 = (uint32_t)uart_handle->hdmarx->XferAbortCallback;\n\n  if (((sr_reg & USART_SR_RXNE) == USART_SR_RXNE) && ((cr1_reg & USART_CR1_RXNEIE) == USART_CR1_RXNEIE)) {\n    UART_Receive_IT(uart_handle);\n    return;\n  }\n\n  if (((sr_reg & USART_SR_TXE) == USART_SR_TXE) || ((cr3_reg & USART_CR3_EIE) == 0) || ((cr1_reg & (USART_CR1_TE | USART_CR1_TXEIE)) == 0)) {\n    if (((sr_reg & USART_SR_TXE) == USART_SR_TXE) && ((cr1_reg & USART_CR1_TXEIE) == USART_CR1_TXEIE)) {\n      UART_Transmit_IT(uart_handle);\n      return;\n    }\n    if (((sr_reg & USART_SR_TC) == USART_SR_TC) && ((cr1_reg & USART_CR1_TCIE) == USART_CR1_TCIE)) {\n      UART_EndTransmit_IT(uart_handle);\n    }\n  }\n  else {\n    if (((sr_reg & USART_SR_PE) == USART_SR_PE) && ((cr1_reg & USART_CR1_PEIE) == USART_CR1_PEIE)) {\n      error_code |= USART_ERROR_PE;\n    }\n    if (((sr_reg & USART_SR_FE) == USART_SR_FE) && ((cr3_reg & USART_CR3_EIE) != 0)) {\n      error_code |= USART_ERROR_FE;\n    }\n    if (((sr_reg & USART_SR_NE) == USART_SR_NE) && ((cr3_reg & USART_CR3_EIE) != 0)) {\n      error_code |= USART_ERROR_NE;\n    }\n    if (((sr_reg & USART_SR_ORE) == USART_SR_ORE) && ((cr3_reg & USART_CR3_EIE) != 0)) {\n      error_code |= USART_ERROR_ORE;\n    }\n    if (error_code != 0) {\n      if (((sr_reg & USART_SR_RXNE) == USART_SR_RXNE) && ((cr1_reg & USART_CR1_RXNEIE) == USART_CR1_RXNEIE)) {\n        UART_Receive_IT(uart_handle);\n      }\n      if (((error_code & USART_ERROR_ORE) == 0) && ((cr3_reg & USART_CR3_DMAR) == 0)) {\n        HAL_UART_ErrorCallback(uart_handle);\n        uart_handle->ErrorCode = 0;\n        return;\n      }\n      UART_EndRxTransfer(uart_handle);\n      uart_instance = uart_handle->Instance;\n      if ((uart_instance->CR3 & USART_CR3_DMAR) == 0) {\n        HAL_UART_ErrorCallback(uart_handle);\n        return;\n      }\n      uart_instance->CR3 = uart_instance->CR3 & ~USART_CR3_DMAR;\n      if (uart_handle->hdmarx == NULL) {\n        HAL_UART_ErrorCallback(uart_handle);\n        return;\n      }\n      uart_handle->hdmarx->XferAbortCallback = (void (*)(DMA_HandleTypeDef *))DAT_080047d4;\n      status = HAL_DMA_Abort_IT(uart_handle->hdmarx);\n      if (status != HAL_OK) {\n        (*uart_handle->hdmarx->XferAbortCallback)(uart_handle->hdmarx);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "HAL_DMA_Abort_IT",
                "UART_Transmit_IT",
                "UART_Receive_IT",
                "UART_EndRxTransfer",
                "UART_EndTransmit_IT",
                "HAL_UART_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b8",
            "calling": [
                "USART1_IRQHandler",
                "USART2_IRQHandler",
                "USART3_IRQHandler"
            ],
            "imported": false,
            "current_name": "process_uart_data_080046b8"
        },
        "FUN_08004c8a": {
            "renaming": {
                "FUN_08004c8a": "find_pin_08004c8a",
                "PinName_conflict": "PinName",
                "map": "PinMap",
                "peripheral": "device"
            },
            "code": "PinName find_pin_08004c8a(void *device, PinMap *map)\n{\n  while(true) {\n    if (map->device == (void *)0x0) {\n      return NC;\n    }\n    if (map->device == device) break;\n    map++;\n  }\n  return map->pin;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8a",
            "calling": [
                "pinmap_pin",
                "pinmap_find_pin"
            ],
            "imported": false,
            "current_name": "find_pin_08004c8a"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "checkADCConversionStatus_08001cd0",
                "hadc": "adcHandle",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "startTime",
                "pAVar5": "adcInstance",
                "uVar6": "clockFrequency",
                "Conversion_Timeout_CPU_cycles": "conversionTimeoutCycles",
                "uVar3": "currentTime",
                "iVar4": "sampleTime"
            },
            "code": "HAL_StatusTypeDef_conflict checkADCConversionStatus_08001cd0(ADC_HandleTypeDef *adcHandle, uint32_t timeout)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t startTime;\n  uint32_t currentTime;\n  int sampleTime;\n  ADC_TypeDef *adcInstance;\n  uint clockFrequency;\n  uint32_t conversionTimeoutCycles;\n  conversionTimeoutCycles = 0;\n  startTime = HAL_GetTick();\n  adcInstance = adcHandle->Instance;\n  if ((adcInstance->CR2 & 0x100) == 0) {\n    if (((adcInstance->CR1 & 0x100) == 0) && ((adcInstance->SQR1 & 0xf00000) == 0)) {\n      do {\n        if ((adcHandle->Instance->SR & 2) != 0) goto conversionComplete;\n      } while ((timeout == 0xffffffff) || ((timeout != 0 && (currentTime = HAL_GetTick(), currentTime - startTime <= timeout))));\n      adcHandle->State = adcHandle->State | 4;\n      adcHandle->Lock = HAL_UNLOCKED;\n      status = HAL_TIMEOUT;\n    }\n    else {\n      clockFrequency = *(uint *)PTR_SystemCoreClock_08001e2c;\n      currentTime = HAL_RCCEx_GetPeriphCLKFreq(2);\n      adcInstance = adcHandle->Instance;\n      if (((adcInstance->SMPR2 & DAT_08001e30) == 0) && ((adcInstance->SMPR1 & DAT_08001e30 + 0xdc000000) == 0)) {\n        if ((adcInstance->SMPR2 & DAT_08001e34) == 0) {\n          if ((adcInstance->SMPR1 & DAT_08001e38) == 0) {\n            sampleTime = 0x14;\n          }\n          else {\n            sampleTime = 0x29;\n          }\n        }\n        else {\n          sampleTime = 0x29;\n        }\n      }\n      else if (((adcInstance->SMPR2 & DAT_08001e34) == 0) && ((adcInstance->SMPR1 & DAT_08001e34 + 0xee000000) == 0)) {\n        sampleTime = 0x54;\n      }\n      else if ((DAT_08001e3c & adcInstance->SMPR2) == 0) {\n        if ((DAT_08001e3c & adcInstance->SMPR1) == 0) {\n          sampleTime = 0x54;\n        }\n        else {\n          sampleTime = 0xfc;\n        }\n      }\n      else {\n        sampleTime = 0xfc;\n      }\n      clockFrequency = (clockFrequency / currentTime) * sampleTime;\n      for (; conversionTimeoutCycles <= clockFrequency && clockFrequency - conversionTimeoutCycles != 0; conversionTimeoutCycles = conversionTimeoutCycles + 1) {\n        if ((timeout != 0xffffffff) && ((timeout == 0 || (currentTime = HAL_GetTick(), timeout < currentTime - startTime)))) {\n          adcHandle->State = adcHandle->State | 4;\n          adcHandle->Lock = HAL_UNLOCKED;\n          return HAL_TIMEOUT;\n        }\n      }\n      conversionComplete:\n      adcHandle->Instance->SR = 0xffffffed;\n      adcHandle->State = adcHandle->State | 0x200;\n      if ((adcHandle->Instance->CR2 & 0xe0000) == 0xe0000) {\n        if ((adcHandle->Init).ContinuousConvMode == 0) {\n          adcHandle->State = adcHandle->State & 0xfffffeff;\n          if ((adcHandle->State & 0x1000) == 0) {\n            adcHandle->State = adcHandle->State | 1;\n            status = HAL_OK;\n          }\n          else {\n            status = HAL_OK;\n          }\n        }\n        else {\n          status = HAL_OK;\n        }\n      }\n      else {\n        status = HAL_OK;\n      }\n    }\n  }\n  else {\n    adcHandle->State = adcHandle->State | 0x20;\n    adcHandle->Lock = HAL_UNLOCKED;\n    status = HAL_ERROR;\n  }\n  return status;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cd0",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "checkADCConversionStatus_08001cd0"
        },
        "FUN_08004178": {
            "renaming": {
                "FUN_08004178": "do_nothing_08004178"
            },
            "code": "\nvoid do_nothing_08004178(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004178",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004178"
        },
        "FUN_08000130": {
            "renaming": {
                "FUN_08000130": "execute_code_if_possible_08000130",
                "DAT_08000164": "data_available",
                "PTR__edata_08000170": "data_pointer",
                "DAT_08000174": "code_pointer",
                "PTR_object_8672_0800016c": "object_pointer"
            },
            "code": "void execute_code_if_possible_08000130(){\n  int data = *reinterpret_cast<int*>(PTR__edata_08000170);\n  if (DAT_08000164 == 0) {\n    return;\n  }\n  else if (data != 0 && DAT_08000174 != (code*)0x0) {\n    (*DAT_08000174)(PTR__edata_08000170, PTR_object_8672_0800016c);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000130",
            "calling": [],
            "imported": false,
            "current_name": "execute_code_if_possible_08000130"
        },
        "FUN_08004a4c": {
            "renaming": {
                "FUN_08004a4c": "readADC_08004a4c",
                "pin": "pin",
                "HVar1": "halStatus",
                "uVar2": "state",
                "uhADCxConvertedValue": "convertedValue",
                "AdcChannelConf": "channelConfig",
                "AdcHandle": "adcHandle"
            },
            "code": "uint16_t readADC_08004a4c(PinName_conflict pin)\n{\n  HAL_StatusTypeDef_conflict halStatus;\n  uint32_t state;\n  uint16_t convertedValue = 0;\n  ADC_ChannelConfTypeDef channelConfig;\n  ADC_HandleTypeDef adcHandle;\n  memset(&adcHandle, 0, sizeof(ADC_HandleTypeDef));\n  channelConfig.Channel = 0;\n  channelConfig.Rank = 0;\n  channelConfig.SamplingTime = 0;\n  adcHandle.Instance = (ADC_TypeDef *)pinmap_peripheral(pin, (PinMap_conflict *)PTR_PinMap_ADC_08004b2c);\n  if (adcHandle.Instance == (ADC_TypeDef *)0x0) {\n    convertedValue = 0;\n  }\n  else {\n    adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;\n    adcHandle.Init.ScanConvMode = DISABLE;\n    adcHandle.Init.ContinuousConvMode = DISABLE;\n    adcHandle.Init.DiscontinuousConvMode = DISABLE;\n    adcHandle.Init.ExternalTrigConv = ADC_SOFTWARE_START;\n    adcHandle.State = 0;\n    adcHandle.Init.NbrOfConversion = 1;\n    adcHandle.Init.NbrOfDiscConversion = 0;\n    *PTR_g_current_pin_08004b30 = pin;\n    halStatus = HAL_ADC_Init(&adcHandle);\n    if (halStatus == HAL_OK) {\n      channelConfig.Channel = get_adc_channel(pin);\n      if (channelConfig.Channel < 0x12) {\n        channelConfig.Rank = 1;\n        channelConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;\n        halStatus = HAL_ADC_ConfigChannel(&adcHandle, &channelConfig);\n        if (halStatus == HAL_OK) {\n          halStatus = HAL_ADCEx_Calibration_Start(&adcHandle);\n          if (halStatus == HAL_OK) {\n            halStatus = HAL_ADC_Start(&adcHandle);\n            if (halStatus == HAL_OK) {\n              halStatus = HAL_ADC_PollForConversion(&adcHandle, 10);\n              if (halStatus == HAL_OK) {\n                state = HAL_ADC_GetState(&adcHandle);\n                if ((state & ADC_FLAG_EOC) != 0) {\n                  state = HAL_ADC_GetValue(&adcHandle);\n                  convertedValue = (uint16_t)state;\n                }\n                halStatus = HAL_ADC_Stop(&adcHandle);\n                if (halStatus != HAL_OK) {\n                  convertedValue = 0;\n                }\n              }\n              else {\n                convertedValue = 0;\n              }\n            }\n            else {\n              convertedValue = 0;\n            }\n          }\n          else {\n            convertedValue = 0;\n          }\n        }\n        else {\n          convertedValue = 0;\n        }\n      }\n      else {\n        convertedValue = 0;\n      }\n      halStatus = HAL_ADC_DeInit(&adcHandle);\n      if (halStatus != HAL_OK) {\n        convertedValue = 0;\n      }\n    }\n    else {\n      convertedValue = 0;\n    }\n  }\n  return convertedValue;\n}",
            "called": [
                "memset",
                "HAL_ADC_PollForConversion",
                "HAL_ADC_Init",
                "HAL_ADC_DeInit",
                "get_adc_channel",
                "HAL_ADC_ConfigChannel",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_GetValue",
                "HAL_ADC_GetState",
                "HAL_ADC_Start",
                "HAL_ADC_Stop",
                "pinmap_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a4c",
            "calling": [
                "analogRead"
            ],
            "imported": false,
            "current_name": "readADC_08004a4c"
        },
        "FUN_08006112": {
            "renaming": {
                "FUN_08006112": "register_exit_function_08006112",
                "param_1": "func",
                "param_2": "arg"
            },
            "code": "void register_exit_function_08006112(void (*func)(void), void *arg)\n{\n  __cxa_atexit(func, arg);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006112",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "register_exit_function_08006112"
        },
        "FUN_08004974": {
            "renaming": {
                "FUN_08004974": "set_GPIO_Pin_Mode_08004974",
                "hadc": "adc_handler",
                "puVar1": "current_pin_ptr",
                "GPIOx": "gpio_port",
                "tmpreg": "tmpreg",
                "tmpreg_1": "tmpreg_1",
                "GPIO_InitStruct": "GPIO_Init_Config",
                "DAT_080049e0": "ADC1",
                "DAT_080049e4": "ADC2"
            },
            "code": "void set_GPIO_Pin_Mode_08004974(ADC_HandleTypeDef *adc_handler)\n{\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  GPIO_InitTypeDef GPIO_Init_Config;\n  \n  if (adc_handler->Instance == DAT_080049e0) {\n    *(uint *)(g_current_pin_port + 0x18) = *(uint *)(g_current_pin_port + 0x18) | 0x200;\n  }\n  else if (adc_handler->Instance == DAT_080049e4) {\n    *(uint *)(g_current_pin_port + 0x18) = *(uint *)(g_current_pin_port + 0x18) | 0x400;\n  }\n  uint8_t *current_pin = current_pin_ptr;\n  GPIO_TypeDef *gpio_port = set_GPIO_Port_Clock((uint)((int)(char)*current_pin << 0x18) >> 0x1c);\n  GPIO_Init_Config.Pin = 1 << (*current_pin & 0xf) & 0xffff;\n  GPIO_Init_Config.Mode = GPIO_MODE_ANALOG;\n  GPIO_Init_Config.Pull = GPIO_NOPULL;\n  HAL_GPIO_Init(gpio_port, &GPIO_Init_Config);\n  return;\n}",
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004974",
            "calling": [
                "HAL_ADC_Init"
            ],
            "imported": false,
            "current_name": "set_GPIO_Pin_Mode_08004974"
        },
        "FUN_08003520": {
            "renaming": {
                "FUN_08003520": "handle_i2c_errors_08003520",
                "hi2c": "i2c_handle",
                "HVar1": "i2c_state",
                "pIVar2": "i2c_instance",
                "uVar3": "sr1_reg",
                "uVar4": "cr2_reg",
                "DAT_080035f8": "I2C_SR1_AF",
                "I2C_Slave_AF": "i2c_slave_AF",
                "HAL_I2C_MODE_SLAVE": "HAL_I2C_MODE_SLAVE",
                "HAL_I2C_MODE_MASTER": "HAL_I2C_MODE_MASTER",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "HAL_I2C_STATE_BUSY_TX_LISTEN": "HAL_I2C_STATE_BUSY_TX_LISTEN",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "hi2c->ErrorCode": "i2c_handle->ErrorCode",
                "hi2c->Instance": "i2c_handle->Instance",
                "hi2c->Mode": "i2c_handle->Mode",
                "hi2c->XferCount": "i2c_handle->XferCount",
                "hi2c->State": "i2c_handle->State",
                "hi2c->PreviousState": "i2c_handle->PreviousState"
            },
            "code": "void handle_i2c_errors_08003520(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_StateTypeDef i2c_state;\n  I2C_TypeDef *i2c_instance;\n  uint16_t sr1_reg;\n  uint16_t cr2_reg;\n\n  i2c_instance = i2c_handle->Instance;\n  sr1_reg = i2c_instance->SR1;\n  cr2_reg = i2c_instance->CR2;\n\n  if (((sr1_reg & DAT_080035f8) != 0) && ((cr2_reg & I2C_CR2_LAST) != 0)) {\n    i2c_handle->ErrorCode |= I2C_ERROR_AF;\n    i2c_instance->SR1 = 0xfffffeff;\n    i2c_instance->CR1 |= I2C_CR1_PE;\n  }\n  if (((sr1_reg & I2C_SR1_TIMEOUT) != 0) && ((cr2_reg & I2C_CR2_LAST) != 0)) {\n    i2c_handle->ErrorCode |= I2C_ERROR_TIMEOUT;\n    i2c_instance->SR1 = 0xfffffdff;\n  }\n  if (((sr1_reg & I2C_SR1_BERR) != 0) && ((cr2_reg & I2C_CR2_LAST) != 0)) {\n    i2c_state = i2c_handle->State;\n    if (((i2c_handle->Mode == HAL_I2C_MODE_SLAVE) && (i2c_handle->XferCount == 0)) && (((i2c_state == HAL_I2C_STATE_BUSY_TX) || (i2c_state == HAL_I2C_STATE_BUSY_TX_LISTEN)) || ((i2c_state == HAL_I2C_STATE_LISTEN) && (i2c_handle->PreviousState == I2C_STATE_ADDR_10)))) {\n      I2C_Slave_AF(i2c_handle);\n    }\n    else {\n      i2c_handle->ErrorCode |= I2C_ERROR_BERR;\n      if (i2c_handle->Mode == HAL_I2C_MODE_MASTER) {\n        i2c_instance->CR1 |= I2C_CR1_START;\n      }\n      i2c_instance->SR1 = 0xfffffbff;\n    }\n  }\n  if (((sr1_reg & I2C_SR1_ARLO) != 0) && ((cr2_reg & I2C_CR2_LAST) != 0)) {\n    i2c_handle->ErrorCode |= I2C_ERROR_ARLO;\n    i2c_instance->SR1 = 0xfffff7ff;\n  }\n  if (i2c_handle->ErrorCode != 0) {\n    I2C_ITError(i2c_handle);\n  }\n  return;\n}",
            "called": [
                "I2C_Slave_AF",
                "I2C_ITError"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003520",
            "calling": [
                "I2C1_ER_IRQHandler",
                "I2C2_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_errors_08003520"
        },
        "FUN_08002ca6": {
            "renaming": {
                "FUN_08002ca6": "handle_i2c_transfer_08002ca6",
                "hi2c": "i2c_handle",
                "HVar1": "i2c_state",
                "puVar2": "buffer_pointer"
            },
            "code": "HAL_StatusTypeDef handle_i2c_transfer_08002ca6(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_StateTypeDef i2c_state;\n  uint8_t *buffer_pointer;\n  i2c_state = i2c_handle->State;\n  if (i2c_handle->XferCount != 0) {\n    buffer_pointer = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = buffer_pointer + 1;\n    *buffer_pointer = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount--;\n    if ((i2c_handle->XferCount == 0) && (i2c_state == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2c_handle->Instance->CR2 &= 0xfffffbff;\n      i2c_handle->PreviousState = 0x22;\n      i2c_handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveRxCpltCallback(i2c_handle);\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca6",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_transfer_08002ca6"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "do_nothing_08002ca4"
            },
            "code": "\nvoid do_nothing_08002ca4(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "do_nothing_08002ca4"
        },
        "FUN_08007328": {
            "renaming": {
                "FUN_08007328": "do_nothing_08007328"
            },
            "code": "\nvoid do_nothing_08007328(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007328",
            "calling": [
                "__do_global_dtors_aux",
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "do_nothing_08007328"
        },
        "FUN_08005b54": {
            "renaming": {
                "FUN_08005b54::FUN_08005b54": "initialize_UART",
                "this": "uart_instance",
                "peripheral": "peripheral_address",
                "PVar1": "pin_name",
                "extraout_r1": "context_1",
                "ctx": "context_2",
                "extraout_r1_00": "context_3",
                "FUN_08005b54": "initialize_UART_08005b54"
            },
            "code": "initialize_UART_08005b54* __thiscall initialize_UART_08005b54(initialize_UART_08005b54* this, void* peripheral)\n{\n  PinName_conflict rx_pin;\n  EVP_PKEY_CTX* ctx_1;\n  EVP_PKEY_CTX* ctx_2;\n  EVP_PKEY_CTX* ctx_3;\n  \n  (this->super_Stream).super_Print.write_error = 0;\n  (this->super_Stream)._timeout = 1000;\n  (this->super_Stream).super_Print._vptr_Print = (_func_int_varargs **)PTR_PTR_write_1_08005ba0;\n  \n  if (this == (initialize_UART_08005b54*)PTR_Serial2_08005ba4)\n  {\n    setRx(this, 0);\n    setTx(this, 1);\n    ctx_1 = extraout_r1_00;\n  }\n  else\n  {\n    rx_pin = pinmap_pin(peripheral, (PinMap_conflict*)PTR_PinMap_UART_RX_08005ba8);\n    (this->_serial).pin_rx = rx_pin;\n    PinName_conflict tx_pin = pinmap_pin(peripheral, (PinMap_conflict*)PTR_PinMap_UART_TX_08005bac);\n    (this->_serial).pin_tx = tx_pin;\n    ctx_1 = extraout_r1;\n  }\n  \n  ctx_2 = ctx_1;\n  ctx_3 = ctx_2;\n  \n  initialize(this, ctx_3);\n  return this;\n}",
            "called": [
                "pinmap_pin",
                "init",
                "setTx",
                "setRx"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b54",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_UART_08005b54"
        },
        "FUN_08004618": {
            "renaming": {
                "FUN_08004618": "receive_data_08004618",
                "huart": "uart",
                "pbVar1": "rx_buffer_ptr",
                "uVar2": "remaining_data_count",
                "puVar3": "rx_buffer_ptr",
                "HAL_UART_STATE_BUSY_RX": "HAL_BUSY",
                "HAL_UART_STATE_READY": "HAL_OK",
                "WordLength": "UART_WORDLENGTH_9B",
                "Parity": "UART_PARITY_NONE",
                "pRxBuffPtr": "rx_buffer_ptr",
                "DR": "received_data",
                "RxState": "uart->RxState",
                "RxXferCount": "uart->RxXferCount",
                "Instance": "uart->Instance",
                "CR1": "uart->Instance->CR1",
                "CR3": "uart->Instance->CR3",
                "HAL_UART_RxCpltCallback": "HAL_UART_RxCpltCallback"
            },
            "code": "HAL_StatusTypeDef receive_data_08004618(UART_HandleTypeDef *uart)\n{\n  uint8_t *rx_buffer_ptr;\n  uint16_t remaining_data_count;\n  uint16_t received_data;\n  if (uart->RxState != HAL_UART_STATE_BUSY_RX) {\n    return HAL_BUSY;\n  }\n  if ((uart->Init).WordLength == UART_WORDLENGTH_9B) {\n    if ((uart->Init).Parity == UART_PARITY_NONE) {\n      received_data = (uint16_t)((uart->Instance->DR << 0x17) >> 0x17);\n      *(uint16_t *)uart->pRxBuffPtr = received_data;\n      uart->pRxBuffPtr += 2;\n    }\n    else {\n      received_data = (uint16_t)uart->Instance->DR & 0xff;\n      *(uint16_t *)uart->pRxBuffPtr = received_data;\n      uart->pRxBuffPtr++;\n    }\n  }\n  else if ((uart->Init).Parity == UART_PARITY_NONE) {\n    rx_buffer_ptr = uart->pRxBuffPtr;\n    uart->pRxBuffPtr++;\n    *rx_buffer_ptr = (uint8_t)uart->Instance->DR;\n  }\n  else {\n    rx_buffer_ptr = uart->pRxBuffPtr;\n    uart->pRxBuffPtr++;\n    *rx_buffer_ptr = (uint8_t)uart->Instance->DR & 0x7f;\n  }\n  remaining_data_count = uart->RxXferCount - 1;\n  uart->RxXferCount = remaining_data_count;\n  if (remaining_data_count != 0) {\n    return HAL_OK;\n  }\n  uart->Instance->CR1 &= ~USART_CR1_RXNEIE;\n  uart->Instance->CR1 &= ~USART_CR1_PEIE;\n  uart->Instance->CR3 &= ~USART_CR3_EIE;\n  uart->RxState = HAL_UART_STATE_READY;\n  HAL_UART_RxCpltCallback(uart);\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004618",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_08004618"
        },
        "FUN_080060a6": {
            "renaming": {
                "FUN_080060a6": "handle_GPIO_EXTI_IRQ_for_multiple_pins_080060a6",
                "uVar1": "pin_mask"
            },
            "code": "void handle_GPIO_EXTI_IRQ_for_multiple_pins_080060a6(void)\n{\n  uint16_t pin_mask = 0x20;\n  while (pin_mask < 0x201) {\n    HAL_GPIO_EXTI_IRQHandler(pin_mask);\n    pin_mask = pin_mask << 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060a6",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_EXTI_IRQ_for_multiple_pins_080060a6"
        },
        "FUN_08001c30": {
            "renaming": {
                "FUN_08001c30": "wait_forever_08001c30"
            },
            "code": "void wait_forever_08001c30(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c30",
            "calling": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "imported": false,
            "current_name": "wait_forever_08001c30"
        },
        "FUN_08005c72": {
            "renaming": {
                "__thiscall Print::FUN_08005c72": "printBuffer",
                "this": "printObj",
                "buffer": "buffer",
                "size": "bufferSize",
                "pPVar1": "currentPrintObj",
                "sVar2": "bytesPrinted",
                "FUN_08005c72": "Print::printBuffer_08005c72"
            },
            "code": "size_t __thiscall Print::printBuffer_08005c72(Print *printObj, uint8_t *buffer, size_t bufferSize) {\n  Print *currentPrintObj = printObj;\n  size_t bytesPrinted = 0;\n  while(bufferSize > 0) {\n    currentPrintObj = (Print *)(**printObj->_vptr_Print)(currentPrintObj, (uint)*buffer);\n    if (currentPrintObj == (Print *)0x0) {\n      break;\n    }\n    bytesPrinted++;\n    buffer++;\n    bufferSize--;\n  }\n  return bytesPrinted;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c72",
            "calling": [],
            "imported": false,
            "current_name": "Print::printBuffer_08005c72"
        },
        "FUN_08006c40": {
            "renaming": {
                "std_isra_0": "initialize_data",
                "param_1": "data_array",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "unused_variable",
                "FUN_08006c40": "initialize_data_08006c40"
            },
            "code": "void initialize_data_08006c40(undefined4 *data_array, undefined2 value1, undefined2 value2) {\n  data_array[0] = 0;\n  data_array[1] = 0;\n  data_array[2] = 0;\n  *(undefined2 *)(data_array + 3) = value1;\n  data_array[0x19] = 0;\n  *(undefined2 *)((int)data_array + 0xe) = value2;\n  data_array[4] = 0;\n  data_array[5] = 0;\n  data_array[6] = 0;\n  memset(data_array + 0x17, 0, 8);\n  data_array[8] = data_array;\n  data_array[9] = DAT_08006c78;\n  data_array[10] = DAT_08006c7c;\n  data_array[0xb] = DAT_08006c80;\n  data_array[0xc] = DAT_08006c84;\n  return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c40",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "initialize_data_08006c40"
        },
        "FUN_0800048c": {
            "renaming": {
                "FUN_0800048c": "calculate_double_0800048c",
                "param_1": "a",
                "param_2": "b",
                "iVar7": "shift_count",
                "uVar8": "shift_b",
                "uVar4": "shift_a",
                "uVar2": "sum_a_b",
                "bVar1": "bit",
                "bVar9": "is_negative",
                "bVar10": "is_carry",
                "bVar11": "is_overflow"
            },
            "code": "ulonglong calculate_double_0800048c(uint a, uint b)\n{\n  byte bit;\n  uint shift_a;\n  uint shift_b;\n  int shift_count;\n  uint sum_a_b;\n  uint carry;\n  bool is_carry;\n  bool is_negative;\n  bool is_overflow;\n  if ((a | b) == 0) {\n    return CONCAT44(b, a);\n  }\n  shift_count = 0x432;\n  shift_b = b >> 0x16;\n  if (shift_b != 0) {\n    shift_count = 3;\n    if (b >> 0x19 != 0) {\n      shift_count = 6;\n    }\n    if (b >> 0x1c != 0) {\n      shift_count += 3;\n    }\n    shift_a = 0x20 - ((shift_count - ((int)b >> 0x1f)) & 0xff);\n    shift_b = (b << shift_count) & 0xffffffff;\n    shift_a = a >> (shift_count & 0xff) | shift_b << shift_a;\n    shift_b = shift_b >> (shift_count & 0xff);\n    shift_count += 0x432;\n  }\n  if (0xfffff < shift_b) {\n    if (0x1fffff < shift_b) {\n      bit = (byte)a;\n      sum_a_b = (uint)(b & 1) << 0x1f | a >> 1;\n      carry = (uint)(bit & 1) << 0x1f | shift_a >> 1;\n      is_overflow = 0xffbfffff < (uint)(shift_count * 0x200000);\n      if (is_overflow) {\n        return 0x7ff0000000000000;\n      }\n    }\n    else {\n      is_overflow = false;\n      carry = 0;\n      sum_a_b = CONCAT31((byte)0, a) + b;\n    }\n    is_negative = 0x7fffffff < shift_a;\n    if (shift_a == 0x80000000) {\n      is_negative = (sum_a_b & 1) != 0;\n    }\n    return CONCAT44(shift_b + (shift_count * 0x100000) + (uint)CARRY4(sum_a_b, (uint)is_negative), sum_a_b + (uint)is_negative);\n  }\n  is_negative = (shift_b & 0x80000000) != 0;\n  shift_b = shift_b << 1;\n  sum_a_b = a * 2 + (uint)is_negative;\n  carry = (a * 2 + (uint)is_negative) >> 0x20;\n  shift_a = shift_b + (uint)(CARRY4(a, a) || CARRY4(a * 2, (uint)is_negative));\n  shift_count -= 1;\n  if ((shift_a & 0x100000) != 0) {\n    is_carry = true;\n  }\n  else {\n    is_carry = false;\n  }\n  if (shift_b == 0) {\n    shift_count = count_leading_zeroes(a);\n    if (shift_b == 0) {\n      shift_count += 0x20;\n    }\n    shift_a = shift_count - 0xb;\n    is_overflow = SBORROW4(shift_a, 0x20);\n    shift_count = shift_count - 0x2b;\n    is_negative = (int)shift_count < 0;\n    is_carry = shift_count == 0;\n    if ((int)shift_a < 0x20) {\n      is_overflow = SCARRY4(shift_count, 0xc);\n      shift_count = shift_count - 0x1f;\n      is_negative = shift_count < 0;\n      is_carry = shift_count == 0;\n      shift_a = shift_a & 0xff;\n      shift_b = shift_b << shift_a;\n      shift_b = shift_b | (sum_a_b >> (0xcU - shift_count & 0xff));\n      shift_a = sum_a_b << (shift_a & 0xff);\n    }\n  }\n  if ((int)shift_a <= shift_count) {\n    return CONCAT44(shift_b + (shift_count - shift_a) * 0x100000, sum_a_b);\n  }\n  shift_a = ~(shift_count - shift_a);\n  if (0x1e < (int)shift_a) {\n    return (ulonglong) (shift_b >> (shift_a - 0x1f & 0xff));\n  }\n  shift_count = shift_a - 0x13;\n  if (shift_count == 0 || shift_count < 0 != SCARRY4(shift_a - 0x1f, 0xc)) {\n    shift_a += 1;\n    return CONCAT44(shift_b >> (shift_a & 0xff), sum_a_b >> (shift_a & 0xff) | shift_b << (0x20 - shift_a & 0xff));\n  }\n  return (ulonglong) (sum_a_b >> (0x20 - (0xcU - shift_count) & 0xff) | shift_b << (0xcU - shift_count & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800048c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_double_0800048c"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c::FUN_0800157c": "initialize_pins",
                "this": "this_instance",
                "SO": "so_pin",
                "CS": "cs_pin",
                "SCK": "sck_pin",
                "PTR_": "this_instance->",
                "DAT_": "",
                "FUN_0800157c": "DAT_iDAT_nDAT_iDAT_tDAT_iDAT_aDAT_lDAT_iDAT_zDAT_eDAT__DAT_pDAT_iDAT_nDAT_sDAT__0800157c"
            },
            "code": "DAT_FDAT_UDAT_NDAT__DAT_0DAT_8DAT_0DAT_0DAT_1DAT_5DAT_7DAT_cDAT_*DAT_ DAT__DAT__DAT_tDAT_hDAT_iDAT_sDAT_cDAT_aDAT_lDAT_lDAT_ DAT_iDAT_nDAT_iDAT_tDAT_iDAT_aDAT_lDAT_iDAT_zDAT_eDAT__DAT_pDAT_iDAT_nDAT_sDAT__0800157c(DAT_FDAT_UDAT_NDAT__DAT_0DAT_8DAT_0DAT_0DAT_1DAT_5DAT_7DAT_cDAT_*DAT_ DAT_tDAT_hDAT_iDAT_sDAT__DAT_iDAT_nDAT_sDAT_tDAT_aDAT_nDAT_cDAT_eDAT_,DAT_ DAT_uDAT_cDAT_hDAT_aDAT_rDAT_ DAT_sDAT_oDAT__DAT_pDAT_iDAT_nDAT_,DAT_ DAT_uDAT_cDAT_hDAT_aDAT_rDAT_ DAT_cDAT_sDAT__DAT_pDAT_iDAT_nDAT_,DAT_ DAT_uDAT_cDAT_hDAT_aDAT_rDAT_ DAT_sDAT_cDAT_kDAT__DAT_pDAT_iDAT_nDAT_)DAT_\nDAT_{DAT_\nDAT_ DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_oDAT__DAT_pDAT_iDAT_nDAT_ DAT_=DAT_ DAT_sDAT_oDAT__DAT_pDAT_iDAT_nDAT_;DAT_\nDAT_ DAT_ DAT_PDAT_TDAT_RDAT__DAT_cDAT_sDAT__DAT_pDAT_iDAT_nDAT_ DAT_=DAT_ DAT_cDAT_sDAT__DAT_pDAT_iDAT_nDAT_;DAT_\nDAT_ DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_cDAT_kDAT__DAT_pDAT_iDAT_nDAT_ DAT_=DAT_ DAT_sDAT_cDAT_kDAT__DAT_pDAT_iDAT_nDAT_;DAT_\nDAT_ DAT_ DAT_pDAT_iDAT_nDAT_MDAT_oDAT_dDAT_eDAT_(DAT_(DAT_uDAT_iDAT_nDAT_tDAT_)DAT_sDAT_oDAT__DAT_pDAT_iDAT_nDAT_,DAT_ DAT_IDAT_NDAT_PDAT_UDAT_TDAT_)DAT_;DAT_\nDAT_ DAT_ DAT_pDAT_iDAT_nDAT_MDAT_oDAT_dDAT_eDAT_(DAT_(DAT_uDAT_iDAT_nDAT_tDAT_)DAT_cDAT_sDAT__DAT_pDAT_iDAT_nDAT_,DAT_ DAT_ODAT_UDAT_TDAT_PDAT_UDAT_TDAT_)DAT_;DAT_\nDAT_ DAT_ DAT_pDAT_iDAT_nDAT_MDAT_oDAT_dDAT_eDAT_(DAT_(DAT_uDAT_iDAT_nDAT_tDAT_)DAT_sDAT_cDAT_kDAT__DAT_pDAT_iDAT_nDAT_,DAT_ DAT_ODAT_UDAT_TDAT_PDAT_UDAT_TDAT_)DAT_;DAT_\nDAT_ DAT_ DAT_dDAT_iDAT_gDAT_iDAT_tDAT_aDAT_lDAT_WDAT_rDAT_iDAT_tDAT_eDAT_(DAT_(DAT_uDAT_iDAT_nDAT_tDAT_)DAT_cDAT_sDAT__DAT_pDAT_iDAT_nDAT_,DAT_ DAT_HDAT_IDAT_GDAT_HDAT_)DAT_;DAT_\nDAT_ DAT_ DAT_dDAT_iDAT_gDAT_iDAT_tDAT_aDAT_lDAT_WDAT_rDAT_iDAT_tDAT_eDAT_(DAT_(DAT_uDAT_iDAT_nDAT_tDAT_)DAT_sDAT_cDAT_kDAT__DAT_pDAT_iDAT_nDAT_,DAT_ DAT_LDAT_ODAT_WDAT_)DAT_;DAT_\nDAT_ DAT_ DAT_rDAT_eDAT_tDAT_uDAT_rDAT_nDAT_ DAT_tDAT_hDAT_iDAT_sDAT__DAT_iDAT_nDAT_sDAT_tDAT_aDAT_nDAT_cDAT_eDAT_;DAT_\nDAT_}DAT_",
            "called": [
                "digitalWrite",
                "pinMode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "DAT_iDAT_nDAT_iDAT_tDAT_iDAT_aDAT_lDAT_iDAT_zDAT_eDAT__DAT_pDAT_iDAT_nDAT_sDAT__0800157c"
        },
        "FUN_080045a2": {
            "renaming": {
                "FUN_080045a2": "receive_data_080045a2",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "RxState": "rx_state",
                "HAL_UART_STATE_READY": "HAL_UART_STATE_READY",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_ERROR": "HAL_ERROR",
                "Lock": "lock_status",
                "HAL_LOCKED": "HAL_LOCKED",
                "pRxBuffPtr": "rx_buffer_pointer",
                "RxXferSize": "rx_transfer_size",
                "RxXferCount": "rx_transfer_count",
                "ErrorCode": "error_code",
                "HAL_UART_STATE_BUSY_RX": "HAL_UART_STATE_BUSY_RX",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "Instance": "instance",
                "CR1": "CR1",
                "CR3": "CR3"
            },
            "code": "HAL_StatusTypeDef receive_data_080045a2(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size)\n{\n  if (uart_handle->rx_state != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (data == NULL) {\n    return HAL_ERROR;\n  }\n  if (size == 0) {\n    return HAL_ERROR;\n  }\n  if (uart_handle->lock_status != HAL_LOCKED) {\n    uart_handle->rx_buffer_pointer = data;\n    uart_handle->rx_transfer_size = size;\n    uart_handle->rx_transfer_count = size;\n    uart_handle->error_code = 0;\n    uart_handle->rx_state = HAL_UART_STATE_BUSY_RX;\n    uart_handle->lock_status = HAL_UNLOCKED;\n    uart_handle->instance->CR1 |= 0x100;\n    uart_handle->instance->CR3 |= 1;\n    uart_handle->instance->CR1 |= 0x20;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045a2",
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "imported": false,
            "current_name": "receive_data_080045a2"
        },
        "FUN_08001c32": {
            "renaming": {
                "FUN_08001c32": "initialize_EVP_PKEY_CTX_08001c32",
                "ctx": "context",
                "hw_config_FUN_08001c32": "hardware_configuration"
            },
            "code": "int initialize_EVP_PKEY_CTX_08001c32(EVP_PKEY_CTX *context)\n{\n  hardware_configuration();\n  return (int)context;\n}",
            "called": [
                "hw_config_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c32",
            "calling": [
                "premain"
            ],
            "imported": false,
            "current_name": "initialize_EVP_PKEY_CTX_08001c32"
        },
        "FUN_080047e8": {
            "renaming": {
                "FUN_080047e8": "get_uart_rx_and_global_state_080047e8",
                "*huart": "*huart",
                "huart->RxState": "rx_state",
                "huart->gState": "global_state"
            },
            "code": "HAL_UART_StateTypeDef get_uart_rx_and_global_state_080047e8(UART_HandleTypeDef *huart)\n{\n  HAL_UART_StateTypeDef rx_state = huart->RxState;\n  HAL_UART_StateTypeDef global_state = huart->gState;\n  return rx_state | global_state;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047e8",
            "calling": [
                "serial_rx_active",
                "serial_tx_active"
            ],
            "imported": false,
            "current_name": "get_uart_rx_and_global_state_080047e8"
        },
        "FUN_080057b4": {
            "renaming": {
                "FUN_080057b4": "configure_pin_080057b4",
                "ulPin": "pin_number",
                "ulMode": "mode",
                "_Var1": "is_pin_configured",
                "pin": "pin_name",
                "PTR_digitalPin_08005838": "digitalPin_map",
                "NC": "NC",
                "is_pin_configured": "is_pin_configured",
                "PTR_g_anOutputPinConfigured_0800583c": "output_pin_configured_array",
                "pin_in_pinmap": "pin_in_pinmap",
                "PinMap_conflict": "PWM_pin_map_array",
                "pwm_stop": "pwm_stop",
                "reset_pin_configured": "reset_pin_configured",
                "switch": "switch",
                "digital_io_init": "digital_io_init",
                "set_pin_configured": "set_pin_configured",
                "PTR_g_digPinConfigured_08005844": "digital_pin_configured_array"
            },
            "code": "void configure_pin_080057b4(uint32_t pin_number, uint32_t mode)\n{\n  _Bool is_pin_configured;\n  PinName_conflict pin_name;\n  if (pin_number < 0x3c) {\n    pin_name = PTR_digitalPin_08005838[pin_number];\n  }\n  else {\n    pin_name = NC;\n  }\n  if (pin_name != NC) {\n    is_pin_configured = is_pin_configured(pin_name, (uint32_t *)PTR_g_anOutputPinConfigured_0800583c);\n    if (is_pin_configured) {\n      is_pin_PWM = pin_in_pinmap(pin_name,(PinMap_conflict *)PWM_pin_map_array);\n      if (is_pin_PWM) {\n        pwm_stop(pin_name);\n      }\n      reset_pin_configured(pin_name,(uint32_t *)PTR_g_anOutputPinConfigured_0800583c);\n    }\n    switch(mode) {\n    case 0:\n      digital_io_init(pin_name,0,0);\n      break;\n    case 1:\n      digital_io_init(pin_name,1,0);\n      break;\n    case 2:\n      digital_io_init(pin_name,0,1);\n      break;\n    case 3:\n      digital_io_init(pin_name,0,2);\n    }\n    set_pin_configured(pin_name,(uint32_t *)PTR_g_digPinConfigured_08005844);\n  }\n  return;\n}",
            "called": [
                "set_pin_configured",
                "pin_in_pinmap",
                "digital_io_init",
                "is_pin_configured",
                "pwm_stop",
                "reset_pin_configured"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057b4",
            "calling": [
                "MAX31855",
                "begin",
                "setup"
            ],
            "imported": false,
            "current_name": "configure_pin_080057b4"
        },
        "FUN_08007334": {
            "renaming": {
                "FUN_08007334": "do_nothing_08007334"
            },
            "code": "\nvoid do_nothing_08007334(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007334",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08007334"
        },
        "FUN_08001b18": {
            "renaming": {
                "FUN_08001b18": "compute_controller_output_08001b18",
                "this": "output",
                "Input": "input",
                "Output": "output",
                "Setpoint": "setpoint",
                "Kp": "Kp",
                "Ki": "Ki",
                "Kd": "Kd",
                "ControllerDirection": "controller_direction"
            },
            "code": "double* compute_controller_output_08001b18(double* input, double* output, double* setpoint, double Kp, double Ki, double Kd, int controller_direction) {\n  compute_controller_output_08001b18(input, output, setpoint, Kp, Ki, Kd, 1, controller_direction);\n  return output;\n}",
            "called": [
                "PID"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b18",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "compute_controller_output_08001b18"
        },
        "FUN_0800092c": {
            "renaming": {
                "FUN_0800092c": "check_collision_0800092c",
                "param_1": "x1",
                "param_2": "y1",
                "param_3": "x2",
                "param_4": "y2",
                "uVar1": "x_diff",
                "bVar2": "is_x1y1_zero",
                "bVar3": "is_y2_less_than_y1"
            },
            "code": "uint check_collision_0800092c(uint x1, uint y1, uint x2, uint y2)\n{\n  bool is_collision = false;\n  if (((int)(y1 << 1) >> 0x15 == -1 || (int)(y2 << 1) >> 0x15 == -1) && ((((int)(y1 << 1) >> 0x15 == -1 && ((x1 | y1 << 0xc) != 0)) || (((int)(y2 << 1) >> 0x15 == -1 && ((x2 | y2 << 0xc) != 0)))))) {\n    return 1;\n  }\n  bool is_x1y1_zero = (x1 | y1 << 1) == 0;\n  if (is_x1y1_zero) {\n    is_x1y1_zero = (x2 | y2 << 1) == 0;\n  }\n  if (!is_x1y1_zero) {\n    is_x1y1_zero = y1 == y2;\n  }\n  if (is_x1y1_zero) {\n    is_x1y1_zero = x1 == x2;\n  }\n  if (!is_x1y1_zero) {\n    uint x_diff = x1 ^ x2;\n    is_x1y1_zero = x_diff == 0;\n    if (-1 < (int)x_diff) {\n      is_x1y1_zero = y1 == y2;\n    }\n    bool is_y2_less_than_y1 = -1 < (int)x_diff && y2 <= y1;\n    if (is_x1y1_zero) {\n      is_y2_less_than_y1 = x2 <= x1;\n    }\n    y2 = (int)y2 >> 0x1f;\n    if (!is_y2_less_than_y1) {\n      y2 = ~y2;\n    }\n    return y2 | 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800092c",
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "imported": false,
            "current_name": "check_collision_0800092c"
        },
        "FUN_08005d8a": {
            "renaming": {
                "__thiscall Print::FUN_08005d8a": "print_number",
                "this": "printer",
                "n": "number",
                "base": "base",
                "sVar1": "size",
                "FUN_08005d8aNumber": "print_number_base",
                "uint8_t": "unsigned char",
                "FUN_08005d8a": "print_number_08005d8a"
            },
            "code": "size_t print_number_08005d8a(Print *printer, ulong number, int base) {\n  size_t size;\n  if (base != 0) {\n    size = print_number_08005d8a_base(printer, number, (uint8_t)base);\n  } else {\n    size = (**printer->_vptr_Print)(printer, number & 0xff);\n  }\n  return size;\n}",
            "called": [
                "printNumber"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d8a",
            "calling": [
                "print",
                "printFloat"
            ],
            "imported": false,
            "current_name": "print_number_08005d8a"
        },
        "FUN_08002560": {
            "renaming": {
                "FUN_08002560": "set_clock_source_08002560",
                "CLKSource": "clock_source",
                "DAT_0800257c": "clock_register"
            },
            "code": "void set_clock_source_08002560(uint32_t clock_source) {\n  if (clock_source != 4) {\n    *DAT_0800257c = *DAT_0800257c & 0xfffffffb;\n    return;\n  }\n  *DAT_0800257c = *DAT_0800257c | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002560",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_clock_source_08002560"
        },
        "FUN_08006e90": {
            "renaming": {
                "FUN_08006e90": "find_byte_in_memory_08006e90",
                "__s": "memory",
                "__c": "byte_to_find",
                "__n": "size",
                "pbVar1": "byte_ptr",
                "pbVar2": "current_byte_ptr"
            },
            "code": "void * find_byte_in_memory_08006e90(void *memory, int byte_to_find, size_t size)\n{\n  unsigned char *byte_ptr = (unsigned char *)memory;\n  for (size_t i = 0; i < size; i++)\n  {\n    if (*byte_ptr == byte_to_find)\n    {\n      return (void *)byte_ptr;\n    }\n    byte_ptr++;\n  }\n  return (void *)0x0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e90",
            "calling": [
                "_vfiprintf_r",
                "_printf_i"
            ],
            "imported": false,
            "current_name": "find_byte_in_memory_08006e90"
        },
        "FUN_0800417a": {
            "renaming": {
                "FUN_0800417a": "do_nothing_0800417a"
            },
            "code": "\nvoid do_nothing_0800417a(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417a",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800417a"
        },
        "FUN_08006920": {
            "renaming": {
                "FUN_08006920": "allocate_memory_08006920",
                "param_1": "memory_address",
                "param_2": "size",
                "puVar1": "error_ptr",
                "pcVar2": "sbrk_result"
            },
            "code": "void allocate_memory_08006920(int *memory_address, int size)\n{\n  undefined *error_ptr;\n  caddr_t sbrk_result;\n  error_ptr = PTR_errno_0800693c;\n  *(undefined4 *)PTR_errno_0800693c = 0;\n  sbrk_result = _sbrk(size);\n  if ((sbrk_result == (caddr_t)0xffffffff) && (*(int *)error_ptr != 0)) {\n    *memory_address = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006920",
            "calling": [
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08006920"
        },
        "FUN_080008ba": {
            "renaming": {
                "FUN_080008ba": "calculate_double_from_uints_080008ba",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "temp10",
                "unaff_r4": "unaff_r4",
                "uVar2": "temp8",
                "uVar3": "temp2",
                "in_r12": "in_r12",
                "bVar4": "temp9"
            },
            "code": "ulonglong calculate_double_from_uints_080008ba(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n  uint temp1 = third_param | fourth_param << 0xc;\n  uint temp2 = first_param | second_param << 1;\n  uint temp3 = second_param & 0x80000000;\n  uint temp4 = 0x100000;\n  uint temp5 = 0x7ff00000;\n  uint temp6 = 0x80000000;\n  uint temp7 = 0x7ff8000000000000;\n  uint temp8 = in_r12 & fourth_param >> 0x14;\n  if (unaff_r4 != in_r12 || temp8 != in_r12) {\n    if (unaff_r4 == in_r12) {\n      if (temp2 == 0 && temp1 == 0 && temp8 != in_r12) {\n        return (ulonglong)((second_param ^ fourth_param) & temp6 | temp5) << 0x20;\n      }\n    }\n    else if (temp8 == in_r12) {\n      if (temp1 == 0) {\n        return (ulonglong)((second_param ^ fourth_param) & temp6) << 0x20;\n      }\n      first_param = third_param;\n      second_param = fourth_param;\n      goto LAB_0800087c;\n    }\n    else {\n      bool temp9 = temp2 == 0;\n      if (!temp9) {\n        temp9 = temp1 == 0;\n      }\n      if (!temp9) {\n        if (unaff_r4 == 0) {\n          do {\n            uint temp10 = first_param & 0x80000000;\n            first_param <<= 1;\n            second_param = second_param * 2 + (uint)(temp10 != 0);\n          } while ((second_param & temp4) == 0);\n          second_param |= temp3;\n          if (temp8 != 0) {\n            return CONCAT44(second_param, first_param);\n          }\n        }\n        do {\n          uint temp11 = third_param & 0x80000000;\n          third_param <<= 1;\n          fourth_param = fourth_param * 2 + (uint)(temp11 != 0);\n        } while ((fourth_param & temp4) == 0);\n        first_param = second_param;\n        second_param = first_param | temp5;\n        return CONCAT44(fourth_param, third_param);\n      }\n      if (temp2 != 0 || temp1 != 0) {\n        goto LAB_0800087c;\n      }\n      if (temp1 == 0 && temp2 == 0) {\n        if (temp8 != in_r12) {\n          return (ulonglong)((second_param ^ fourth_param) & temp6 | temp5) << 0x20;\n        }\n        goto LAB_08000880;\n      }\n    }\n  }\n  first_param = second_param | temp7;\nLAB_0800087c:\n  return CONCAT44(fourth_param, third_param) | first_param;\nLAB_08000880:\n  return temp7;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ba",
            "calling": [
                "__divdf3"
            ],
            "imported": false,
            "current_name": "calculate_double_from_uints_080008ba"
        },
        "FUN_08002d1c": {
            "renaming": {
                "FUN_08002d1c": "handle_i2c_conflict_08002d1c",
                "*hi2c": "*handle",
                "XferOptions": "transfer_options",
                "Instance": "instance",
                "CR2": "control_register_2",
                "SR1": "status_register_1",
                "CR1": "control_register_1",
                "PreviousState": "previous_state",
                "State": "state",
                "Mode": "mode",
                "HAL_I2C_ListenCpltCallback": "HAL_I2C_listen_complete_callback",
                "HAL_I2C_SlaveTxCpltCallback": "HAL_I2C_slave_transmit_complete_callback"
            },
            "code": "HAL_StatusTypeDef handle_i2c_conflict_08002d1c(I2C_HandleTypeDef *handle)\n{\n  if (((handle->transfer_options == I2C_TRANSFER_OPTIONS_OTHER) || (handle->transfer_options == I2C_TRANSFER_OPTIONS_OTHER)) &&\n     (handle->state == I2C_STATE_LISTENING)) {\n    handle->transfer_options = DATA_08002dac;\n    handle->instance->CR2 = handle->instance->CR2 & 0xfffff8ff;\n    handle->instance->SR1 = 0xfffffbff;\n    handle->instance->CR1 = handle->instance->CR1 & 0xfffffbff;\n    handle->previous_state = 0;\n    handle->state = I2C_STATE_READY;\n    handle->mode = I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(handle);\n  }\n  else if (handle->state == I2C_STATE_BUSY_TRANSMITTING) {\n    handle->transfer_options = DATA_08002dac;\n    handle->previous_state = 0x21;\n    handle->state = I2C_STATE_READY;\n    handle->mode = I2C_MODE_NONE;\n    handle->instance->CR2 = handle->instance->CR2 & 0xfffff8ff;\n    handle->instance->SR1 = 0xfffffbff;\n    handle->instance->CR1 = handle->instance->CR1 & 0xfffffbff;\n    HAL_I2C_SlaveTxCpltCallback(handle);\n  }\n  else {\n    handle->instance->SR1 = 0xfffffbff;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d1c",
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_conflict_08002d1c"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "return_error_code_08005714",
                "file_UNUSED": "file_descriptor",
                "return": "error_code"
            },
            "code": "int return_error_code_08005714(int file_descriptor) {\n  int error_code = -1;\n  return error_code;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_error_code_08005714"
        },
        "FUN_08003da4": {
            "renaming": {
                "FUN_08003da4": "calculatePeripheralClock_08003da4",
                "PeriphClk": "periphClock",
                "uVar1": "result",
                "uVar2": "usbPrescaler",
                "aPredivFactorTable": "predivFactorTable",
                "aPLLMULFactorTable": "pllMulFactorTable"
            },
            "code": "uint32_t calculatePeripheralClock_08003da4(uint32_t periphClock)\n{\n  uint32_t result = 0;\n  uint8_t predivFactorTable[2];\n  uint8_t pllMulFactorTable[16];\n  pllMulFactorTable[0] = *(uint32_t *)(PTR_DAT_08003e8c);\n  pllMulFactorTable[1] = *(uint32_t *)(PTR_DAT_08003e8c + 4);\n  pllMulFactorTable[2] = *(uint32_t *)(PTR_DAT_08003e8c + 8);\n  predivFactorTable[0] = *(uint8_t *)(PTR_DAT_08003e8c + 16);\n  predivFactorTable[1] = *(uint8_t *)(PTR_DAT_08003e8c + 17);\n  if (periphClock == 2)\n  {\n    uint32_t pclk2 = HAL_RCC_GetPCLK2Freq();\n    uint8_t predivValue = (DAT_08003e90[1] << 0x10) >> 0x1e;\n    result = pclk2 / ((predivValue + 1) * 2);\n  }\n  else if (periphClock == 16)\n  {\n    if ((*DAT_08003e90 & 0x1000000) == 0)\n    {\n      result = 0;\n    }\n    else\n    {\n      uint8_t predivIndex = -((int)(DAT_08003e90[1] << 0xe) >> 0x1f);\n      uint32_t pllMulValue = pllMulFactorTable[(DAT_08003e90[1] << 10) >> 0x1c];\n      uint32_t pllInputClock = DAT_08003e94 / predivFactorTable[predivIndex];\n      result = pllInputClock * pllMulValue;\n      if ((DAT_08003e90[1] & 0x400000) == 0)\n      {\n        result = (uint32_t)((uint64_t)DAT_08003e98 * (uint64_t)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (periphClock == 1)\n  {\n    if ((DAT_08003e90[8] & 0x302) == 0x102)\n    {\n      result = 0x8000;\n    }\n    else\n    {\n      uint8_t usbPrescaler = DAT_08003e90[8] & 0x300;\n      if ((usbPrescaler == 0x200) && ((DAT_08003e90[9] & 2) != 0))\n      {\n        result = 32000;\n      }\n      else if (usbPrescaler == 0x300)\n      {\n        if ((*DAT_08003e90 & 0x20000) == 0)\n        {\n          result = 0;\n        }\n        else\n        {\n          result = 0xf424;\n        }\n      }\n      else\n      {\n        result = 0;\n      }\n    }\n  }\n  else\n  {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003da4",
            "calling": [
                "HAL_ADC_PollForConversion",
                "HAL_ADCEx_Calibration_Start"
            ],
            "imported": false,
            "current_name": "calculatePeripheralClock_08003da4"
        },
        "FUN_08005a44": {
            "renaming": {
                "FUN_08005a44": "initializeSerialBuffers_08005a44",
                "this": "serial",
                "ctx": "context",
                "_serial": "serial",
                "_rx_buffer": "rx_buffer",
                "_tx_buffer": "tx_buffer",
                "rx_buff": "rx_buffer",
                "rx_head": "rx_head",
                "rx_tail": "rx_tail",
                "tx_buff": "tx_buffer",
                "tx_head": "tx_head",
                "tx_tail": "tx_tail"
            },
            "code": "int __thiscall initializeSerialBuffers_08005a44(HardwareSerial *serial, EVP_PKEY_CTX *context)\n{\n  serial->rx_buffer = serial->_rx_buffer;\n  serial->rx_head = 0;\n  serial->rx_tail = 0;\n  serial->tx_buffer = serial->_tx_buffer;\n  serial->tx_head = 0;\n  serial->tx_tail = 0;\n  return (int)serial;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a44",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "initializeSerialBuffers_08005a44"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "isEndOfString_080009dc",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_080009dc(char* str) {\n  char currentChar = *str;\n  __aeabi_cdcmpeq();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [
                "SetTunings",
                "SetOutputLimits",
                "printFloat",
                "Compute",
                "Initialize",
                "loop"
            ],
            "imported": false,
            "current_name": "isEndOfString_080009dc"
        },
        "FUN_0800417c": {
            "renaming": {
                "FUN_0800417c": "reset_uart_0800417c",
                "huart": "uart_handle",
                "CR1": "cr1_mask",
                "CR3": "cr3_mask",
                "RxState": "receive_state",
                "HAL_UART_STATE_READY": "UART_STATE_READY"
            },
            "code": "void reset_uart_0800417c(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t cr1_mask = 0xfffffedf;\n  uint32_t cr3_mask = 0xfffffffe;\n  uart_handle->Instance->CR1 &= cr1_mask;\n  uart_handle->Instance->CR3 &= cr3_mask;\n  uart_handle->RxState = HAL_UART_STATE_READY;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "reset_uart_0800417c"
        },
        "FUN_08004b94": {
            "renaming": {
                "FUN_08004b94": "get_current_tick_08004b94",
                "uVar1": "current_tick"
            },
            "code": "uint32_t get_current_tick_08004b94(void)\n{\n  uint32_t current_tick = HAL_GetTick();\n  return current_tick;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b94",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "get_current_tick_08004b94"
        },
        "FUN_080058e0": {
            "renaming": {
                "FUN_080058e0": "get_current_milli_seconds_080058e0",
                "uVar1": "current_milli_seconds"
            },
            "code": "uint32_t get_current_milli_seconds_080058e0(void)\n{\n  uint32_t current_milli_seconds = GetCurrentMilli();\n  return current_milli_seconds;\n}",
            "called": [
                "GetCurrentMilli"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e0",
            "calling": [
                "Compute",
                "PID",
                "loop",
                "setup"
            ],
            "imported": false,
            "current_name": "get_current_milli_seconds_080058e0"
        },
        "FUN_08001918": {
            "renaming": {
                "FUN_08001918": "calculatePID_08001918",
                "this": "pid",
                "NewSampleTime": "newSampleTime",
                "uVar1": "kiFloat",
                "uVar2": "newSampleTimeFloat",
                "uVar3": "sampleTimeFloat",
                "dVar4": "kdFloat",
                "SampleTime": "sampleTime"
            },
            "code": "void __thiscall calculatePID_08001918(PID *pid, int newSampleTime)\n{\n  if (newSampleTime > 0) {\n    double newSampleTimeFloat = (double)newSampleTime;\n    double sampleTimeFloat = (double)pid->sampleTime;\n    double sampleTimeRatio = newSampleTimeFloat / sampleTimeFloat;\n    double kiFloat = pid->ki * sampleTimeRatio;\n    double kdFloat = pid->kd / sampleTimeRatio;\n    pid->ki = kiFloat;\n    pid->kd = kdFloat;\n    pid->sampleTime = newSampleTime;\n  }\n  return;\n}",
            "called": [
                "__muldf3",
                "__floatunsidf",
                "__divdf3",
                "__floatsidf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001918",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculatePID_08001918"
        },
        "FUN_0800611c": {
            "renaming": {
                "FUN_0800611c": "print_assertion_failed_0800611c",
                "param_1": "file_name",
                "param_2": "line_number",
                "param_3": "message",
                "param_4": "error_code",
                "puVar1": "file_name_default",
                "puVar2": "function_name_default",
                "PTR_s__08006154": "function_name",
                "PTR_s___function__0800614c": "function_name_default",
                "PTR_s_assertion___s__failed__file___s__08006150": "assertion_message",
                "PTR__impure_ptr_08006148": "file_pointer"
            },
            "code": "void print_assertion_failed_0800611c(FILE* file, const char* assertion, const char* file_name, int line_number, const char* PTR_s__08006154, const char* message, int error_code)\n{\n  const char* PTR_s___function__0800614c = \"<unknown>\";\n  const char* message_default = \"\";\n  const char* file_name_default = \"<unknown>\";\n  const int line_number_default = 0;\n  const int error_code_default = 0;\n  const char* function = PTR_s__08006154 != NULL ? PTR_s__08006154 : PTR_s___function__0800614c;\n  const char* msg = message != NULL ? message : message_default;\n  const char* file = file_name != NULL ? file_name : file_name_default;\n  const int line = line_number != 0 ? line_number : line_number_default;\n  const int error = error_code != 0 ? error_code : error_code_default;\n  fprintf(file, \"%s:%d: %s: Assertion '%s' failed. %s\\n\", file, line, function, assertion, msg);\n  abort();\n}",
            "called": [
                "fiprintf",
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800611c",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "print_assertion_failed_0800611c"
        },
        "FUN_0800049c": {
            "renaming": {
                "FUN_0800049c": "calculate_double_precision_number_0800049c",
                "param_1": "numerator",
                "param_2": "denominator",
                "uVar2": "numerator_copy_copy",
                "uVar3": "quotient",
                "uVar4": "denominator_copy_copy",
                "iVar5": "leading_zeroes",
                "uVar6": "shift_amount",
                "iVar7": "exponent",
                "uVar8": "sign_bit",
                "bVar1": "carry_bit",
                "bVar10": "is_shift_amount_negative",
                "bVar11": "is_quotient_greater_than_max",
                "bVar12": "is_shift_amount_zero",
                "is_numerator_nonzero": "is_numerator_nonzero"
            },
            "code": "ulonglong calculate_double_precision_number_0800049c(uint numerator, uint denominator)\n{\n  byte carry_bit;\n  uint numerator_copy;\n  uint denominator_copy;\n  int shift_amount;\n  uint quotient;\n  int exponent;\n  uint sign_bit;\n  bool is_numerator_nonzero = numerator != 0;\n  if ((numerator | denominator) == 0) {\n    return CONCAT44(denominator, numerator);\n  }\n  sign_bit = denominator & 0x80000000;\n  denominator_copy = denominator;\n  if ((int)sign_bit < 0) {\n    numerator_copy = -numerator;\n    denominator_copy = -denominator - (uint)is_numerator_nonzero;\n  }\n  exponent = 0x432;\n  quotient = denominator_copy >> 0x16;\n  if (quotient != 0) {\n    exponent = 3;\n    if (denominator_copy >> 0x19 != 0) {\n      exponent = 6;\n    }\n    if (denominator_copy >> 0x1c != 0) {\n      exponent = exponent + 3;\n    }\n    shift_amount = exponent - ((int)denominator_copy >> 0x1f);\n    numerator_copy = numerator << (0x20 - shift_amount & 0xff);\n    numerator = numerator >> (shift_amount & 0xff) | denominator_copy << (0x20 - shift_amount & 0xff);\n    denominator_copy = denominator_copy >> (shift_amount & 0xff);\n    exponent = shift_amount + 0x432;\n  }\n  if (0xfffff < denominator_copy) {\n    if (0x1fffff < denominator_copy) {\n      carry_bit = (byte)numerator;\n      numerator = numerator >> 1 | (uint)(denominator_copy & 1) << 0x1f;\n      numerator_copy = numerator_copy >> 1 | (uint)(carry_bit & 1) << 0x1f;\n      exponent = exponent + 1;\n      if (0xffbfffff < (uint)(exponent * 0x200000)) {\n        return (ulonglong)(sign_bit | 0x7ff00000) << 0x20;\n      }\n    }\nLAB_080002a0:\n    bool is_quotient_greater_than_max = 0x7fffffff < numerator_copy;\n    if (numerator_copy == 0x80000000) {\n      is_quotient_greater_than_max = (numerator & 1) != 0;\n    }\n    return CONCAT44(denominator_copy + exponent * 0x100000 + (uint)CARRY4(numerator, (uint)is_quotient_greater_than_max) | sign_bit, numerator + is_quotient_greater_than_max);\n  }\n  bool is_quotient_negative = (quotient & 0x80000000) != 0;\n  quotient = quotient << 1;\n  carry_bit = CARRY4(numerator, numerator);\n  numerator = numerator * 2 + (uint)is_quotient_negative;\n  denominator_copy = denominator_copy * 2 + (uint)(carry_bit || CARRY4(numerator * 2, (uint)is_quotient_negative));\n  exponent = exponent + -1;\n  if ((denominator_copy & 0x100000) != 0) goto LAB_080002a0;\n  uint numerator_copy_copy = numerator;\n  uint denominator_copy_copy = denominator_copy;\n  if (denominator_copy == 0) {\n    numerator_copy_copy = 0;\n    denominator_copy_copy = numerator;\n  }\n  int leading_zeroes = count_leading_zeroes(denominator_copy_copy);\n  if (denominator_copy == 0) {\n    leading_zeroes = leading_zeroes + 0x20;\n  }\n  shift_amount = leading_zeroes - 0xb;\n  bool is_shift_amount_negative = shift_amount < 0;\n  bool is_shift_amount_zero = shift_amount == 0;\n  if (leading_zeroes < 0x20) {\n    is_shift_amount_negative = SCARRY4(leading_zeroes, 0xc);\n    leading_zeroes = leading_zeroes + -0x1f;\n    is_shift_amount_zero = leading_zeroes == 0;\n    shift_amount = shift_amount = leading_zeroes;\n    if (!is_shift_amount_zero && is_shift_amount_negative == SBORROW4(shift_amount, 0x20)) {\n      numerator_copy_copy = denominator_copy_copy << (shift_amount & 0xff);\n      denominator_copy_copy = denominator_copy_copy >> (0xcU - leading_zeroes & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_shift_amount_zero || is_shift_amount_negative != SBORROW4(shift_amount - 0x1f, 0xc)) {\n    shift_amount = 0x20 - leading_zeroes;\n  }\n  denominator_copy_copy = denominator_copy_copy << (leading_zeroes & 0xff);\n  if (is_shift_amount_zero || is_shift_amount_negative != SBORROW4(shift_amount - 0x1f, 0xc)) {\n    denominator_copy_copy = denominator_copy_copy | numerator_copy >> (shift_amount & 0xff);\n  }\n  if (is_shift_amount_zero || is_shift_amount_negative != SBORROW4(shift_amount - 0x1f, 0xc)) {\n    numerator_copy = numerator_copy << (leading_zeroes & 0xff);\n  }\nLAB_08000318:\n  if (leading_zeroes <= exponent) {\n    return CONCAT44(denominator_copy_copy + (exponent - leading_zeroes) * 0x100000 | sign_bit, numerator_copy);\n  }\n  int shift_amount_copy = ~(exponent - leading_zeroes);\n  if (0x1e < shift_amount_copy) {\n    return CONCAT44(denominator, denominator_copy_copy >> (shift_amount_copy - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  int shift_amount_copy_copy = shift_amount_copy - 0x13;\n  if (shift_amount_copy_copy == 0 || shift_amount_copy_copy < 0 != SCARRY4(shift_amount_copy - 0x1f, 0xc)) {\n    shift_amount_copy = shift_amount_copy + 1;\n    return CONCAT44(sign_bit | denominator_copy_copy >> (shift_amount_copy & 0xff), numerator_copy >> (shift_amount_copy & 0xff) | denominator_copy_copy << (0x20 - shift_amount_copy & 0xff));\n  }\n  return CONCAT44(denominator, numerator_copy >> (0x20 - (0xcU - shift_amount_copy_copy) & 0xff) | denominator_copy_copy << (0xcU - shift_amount_copy_copy & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800049c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_double_precision_number_0800049c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "is_pin_high_080047f4",
                "pin": "pin_name",
                "map": "pin_map",
                "(byte)": "(uint32_t)",
                "(uint)": "(uint32_t)",
                "(int)": "(uint32_t)",
                "& 1": "!= 0",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "_Bool is_pin_high_080047f4(PinName_conflict pin, uint32_t *pin_map) {\n    uint32_t pin_index = (uint32_t)pin << 24;\n    uint32_t map_index = pin_index >> 28;\n    uint32_t pin_mask = (uint32_t)pin & 0x0F;\n    uint32_t mask = 1 << pin_mask;\n    uint32_t value = pin_map[map_index] & mask;\n    return (_Bool)(value != 0);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "digitalRead",
                "digitalWrite",
                "pinMode"
            ],
            "imported": false,
            "current_name": "is_pin_high_080047f4"
        },
        "FUN_08002c10": {
            "renaming": {
                "FUN_08002c10": "configureI2C_08002c10",
                "*hi2c": "*i2c_handle",
                "pIVar1": "i2c_instance",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_I2C_STATE_LISTEN": "HAL_I2C_STATE_LISTEN",
                "I2C_CR1_PE": "I2C_CR1_PE",
                "RESET": "RESET",
                "I2C_CR1_ACK": "I2C_CR1_ACK",
                "I2C_CR2_AUTOEND": "I2C_CR2_AUTOEND",
                "I2C_CR2_NBYTES_Pos": "I2C_CR2_NBYTES_Pos",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef configureI2C_08002c10(I2C_HandleTypeDef *i2c_handle)\n{\n  I2C_TypeDef *i2c_instance;\n  \n  if (i2c_handle->State != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  i2c_handle->State = HAL_I2C_STATE_LISTEN;\n  i2c_instance = i2c_handle->Instance;\n  if ((i2c_instance->CR1 & I2C_CR1_PE) == RESET) {\n    i2c_instance->CR1 |= I2C_CR1_PE;\n  }\n  i2c_instance->CR1 |= I2C_CR1_ACK;\n  i2c_instance->CR2 |= (I2C_CR2_AUTOEND | (1U << I2C_CR2_NBYTES_Pos));\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c10",
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "imported": false,
            "current_name": "configureI2C_08002c10"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "check_if_equal_080009f0",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_nonzero"
            },
            "code": "bool check_if_equal_080009f0(void)\n{\n  bool is_CY_zero;\n  bool is_ZR_nonzero;\n  __aeabi_cdcmpeq();\n  return !is_CY_zero || is_ZR_nonzero;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "printFloat",
                "loop"
            ],
            "imported": false,
            "current_name": "check_if_equal_080009f0"
        },
        "FUN_0800134e": {
            "renaming": {
                "FUN_0800134e": "sendValue_0800134e",
                "this": "lcd",
                "value": "valueToSend"
            },
            "code": "size_t __thiscall sendValue_0800134e(LiquidCrystal *lcd, uint8_t valueToSend) {\n  send(lcd, valueToSend, '\\x01');\n  return 1;\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800134e",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "sendValue_0800134e"
        },
        "FUN_08006be0": {
            "renaming": {
                "FUN_08006be0": "flush_if_buffer_full_08006be0",
                "param_1": "file_descriptor",
                "param_2": "file_stream",
                "param_3": "mode",
                "param_4": "flags",
                "uVar1": "result",
                "PTR___sf_fake_stdin_08006c28": "PTR___sf_fake_stdin_08006c28",
                "PTR___sf_fake_stdout_08006c2c": "PTR___sf_fake_stdout_08006c2c",
                "PTR___sf_fake_stderr_08006c30": "PTR___sf_fake_stderr_08006c30",
                "file_descriptor_ptr": "file_descriptor_ptr",
                "mode_ptr": "mode_ptr",
                "short_ptr": "short_ptr"
            },
            "code": "int flush_if_buffer_full_08006be0(int file_descriptor, char *file_stream, int mode, int flags) {\n  int result = 0;\n  int *file_descriptor_ptr = (int *)(file_stream + 0x10);\n  if (*file_descriptor_ptr != 0) {\n    int *mode_ptr = (int *)(file_descriptor + 0x18);\n    if (file_descriptor != 0 && *mode_ptr == 0) {\n      __sinit();\n    }\n    if (file_stream == PTR___sf_fake_stdin_08006c28) {\n      file_stream = *(char **)(file_descriptor + 4);\n    }\n    else if (file_stream == PTR___sf_fake_stdout_08006c2c) {\n      file_stream = *(char **)(file_descriptor + 8);\n    }\n    else if (file_stream == PTR___sf_fake_stderr_08006c30) {\n      file_stream = *(char **)(file_descriptor + 0xc);\n    }\n    short *short_ptr = (short *)(file_stream + 0xc);\n    if (*short_ptr != 0) {\n      result = __sflush_r(file_descriptor, file_stream, mode, flags);\n    }\n  }\n  return result;\n}",
            "called": [
                "__sinit",
                "__sflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006be0",
            "calling": [
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "flush_if_buffer_full_08006be0"
        },
        "FUN_080012e8": {
            "renaming": {
                "FUN_080012e8": "writeToDataPins_080012e8",
                "this": "lcd",
                "value": "value",
                "uVar1": "bit_index",
                "_data_pins": "_data_pins",
                "digitalWrite": "digitalWrite",
                "pulseEnable": "pulseEnable"
            },
            "code": "void __thiscall writeToDataPins_080012e8(LiquidCrystal *lcd,uint8_t value)\n{\n  uint8_t bit_index;\n  for (bit_index = 0; bit_index < 8; bit_index++) {\n    uint8_t data_pin = lcd->_data_pins[bit_index];\n    uint8_t bit_value = (uint8_t)(value >> bit_index) & 1;\n    digitalWrite((uint)data_pin, (int)bit_value);\n  }\n  pulseEnable(lcd);\n  return;\n}",
            "called": [
                "pulseEnable",
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012e8",
            "calling": [
                "send"
            ],
            "imported": false,
            "current_name": "writeToDataPins_080012e8"
        },
        "FUN_080058e8": {
            "renaming": {
                "FUN_080058e8": "do_nothing_080058e8"
            },
            "code": "\nvoid do_nothing_080058e8(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e8",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "do_nothing_080058e8"
        },
        "FUN_08006370": {
            "renaming": {
                "FUN_08006370": "write_string_to_stream_08006370",
                "param_1": "stream",
                "param_2": "character_encoding",
                "param_3": "string",
                "param_4": "string_length",
                "iVar1": "write_count",
                "puVar2": "string_end_ptr",
                "iVar3": "current_position"
            },
            "code": "int write_string_to_stream_08006370(int stream, int character_encoding, char *string, int string_length)\n{\n  int write_count;\n  char *string_end_ptr;\n  int current_position;\n  \n  string_end_ptr = string + string_length;\n  current_position = string_length;\n  do {\n    if (string == string_end_ptr) {\n      return 0;\n    }\n    write_count = __sfputc_r(stream, *string, character_encoding, string_length, current_position);\n    string_length = write_count + 1;\n    string = string + 1;\n  } while (write_count != 0);\n  return write_count;\n}",
            "called": [
                "__sfputc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006370",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "write_string_to_stream_08006370"
        },
        "FUN_080024f8": {
            "renaming": {
                "FUN_080024f8": "set_interrupt_handler_080024f8",
                "IRQn": "interrupt_number",
                "uVar1": "interrupt_index",
                "DAT_08002510": "interrupt_data_address"
            },
            "code": "void set_interrupt_handler_080024f8(IRQn_Type_conflict interrupt_number)\n{\n  uint32_t interrupt_index = (uint32_t)interrupt_number;\n  if (interrupt_index >= 0) {\n    uint32_t interrupt_word_index = interrupt_index >> 5;\n    uint32_t interrupt_bit_index = interrupt_index & 0x1f;\n    *(int *)(DAT_08002510 + interrupt_word_index * 4) = 1 << interrupt_bit_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024f8",
            "calling": [
                "uart_attach_rx_callback",
                "uart_attach_tx_callback"
            ],
            "imported": false,
            "current_name": "set_interrupt_handler_080024f8"
        },
        "FUN_0800594e": {
            "renaming": {
                "FUN_0800594e": "readByte_0800594e",
                "this": "serial",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numBytes",
                "bVar1": "receivedByte",
                "uVar2": "tailIndex"
            },
            "code": "ssize_t __thiscall readByte_0800594e(HardwareSerial *serial,int fileDescriptor,void *buffer,size_t numBytes) {\n  byte receivedByte;\n  ushort tailIndex;\n  \n  tailIndex = (serial->_serial).rx_tail;\n  if ((uint)(serial->_serial).rx_head != (uint)tailIndex) {\n    receivedByte = (serial->_serial).rx_buff[tailIndex];\n    (serial->_serial).rx_tail = (tailIndex + 1) & 0x3f;\n    return (uint)receivedByte;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800594e",
            "calling": [],
            "imported": false,
            "current_name": "readByte_0800594e"
        },
        "FUN_080056a8": {
            "renaming": {
                "FUN_080056a8": "handle_UART_interrupt_080056a8",
                "USART2_IRQn": "IRQ_number",
                "*(UART_HandleTypeDef **)(PTR_uart_handlers_080056bc + 4)": "uart_handler"
            },
            "code": "void handle_UART_interrupt_080056a8(UART_HandleTypeDef* *(UART_HandleTypeDef **)(PTR_uart_handlers_080056bc + 4))\n{\n  HAL_NVIC_ClearPendingIRQ(USART2_IRQn);\n  HAL_UART_IRQHandler(*(UART_HandleTypeDef **)(PTR_uart_handlers_080056bc + 4));\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056a8",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_080056a8"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0::FUN_08001ab0": "PIDController",
                "Input": "input",
                "Output": "output",
                "Setpoint": "setpoint",
                "Kp": "proportional_gain",
                "Ki": "integral_gain",
                "Kd": "derivative_gain",
                "POn": "proportional_mode",
                "ControllerDirection": "controller_direction",
                "SetOutputLimits": "set_output_limits",
                "SampleTime": "sample_time",
                "SetControllerDirection": "set_controller_direction",
                "SetTunings": "set_tunings",
                "lastTime": "last_time",
                "millis": "milliseconds",
                "inAuto": "in_auto",
                "FUN_08001ab0": "08001ab0::08001ab0_08001ab0"
            },
            "code": "double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, int POn, int ControllerDirection, int SampleTime, uint32_t lastTime, bool inAuto;\n\n08001ab0::08001ab0_08001ab0 * __thiscall 08001ab0::08001ab0_08001ab0(08001ab0::08001ab0_08001ab0 *this, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, int POn, int ControllerDirection){\n  this->myOutput = Output;\n  this->myInput = Input;\n  this->mySetpoint = Setpoint;\n  this->inAuto = false;\n  SetOutputLimits(this, (double)PTR_DAT_08001b14, (double)PTR_DAT_08001b10);\n  this->SampleTime = 100;\n  SetControllerDirection(this, ControllerDirection);\n  SetTunings(this, Ki, Kd, POn, POn);\n  this->lastTime = millis() - this->SampleTime;\n  return this;\n}",
            "called": [
                "SetTunings",
                "SetOutputLimits",
                "SetControllerDirection",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "PID"
            ],
            "imported": false,
            "current_name": "08001ab0::08001ab0_08001ab0"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "terminate_program_on_signal_08006ac0",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void terminate_program_on_signal_08006ac0(void)\n{\n  raise(SIGABRT);\n  exit(EXIT_FAILURE);\n}\n",
            "called": [
                "_exit",
                "raise"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "__throw_bad_function_call",
                "__assert_func"
            ],
            "imported": false,
            "current_name": "terminate_program_on_signal_08006ac0"
        },
        "FUN_08007220": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_08007220": "set_ctype_flags",
                "PTR_id_08007284": "DAT_id_08007284",
                "PTR_id_08007288": "DAT_id_08007288",
                "PTR_id_0800728c": "DAT_id_0800728c",
                "PTR_id_08007290": "DAT_id_08007290",
                "PTR_id_08007294": "DAT_id_08007294",
                "PTR_id_08007298": "DAT_id_08007298",
                "PTR_id_0800729c": "DAT_id_0800729c",
                "PTR_id_080072a0": "DAT_id_080072a0",
                "FUN_08007220": "set_ctype_flags_08007220"
            },
            "code": "void set_ctype_flags_08007220() {\n  if (is_flag_set(&PTR_id_08007284)) {\n    set_flag(&PTR_id_08007284);\n  }\n  if (is_flag_set(&PTR_id_08007288)) {\n    set_flag(&PTR_id_08007288);\n  }\n  if (is_flag_set(&PTR_id_0800728c)) {\n    set_flag(&PTR_id_0800728c);\n  }\n  if (is_flag_set(&PTR_id_08007290)) {\n    set_flag(&PTR_id_08007290);\n  }\n  if (is_flag_set(&PTR_id_08007294)) {\n    set_flag(&PTR_id_08007294);\n  }\n  if (is_flag_set(&PTR_id_08007298)) {\n    set_flag(&PTR_id_08007298);\n  }\n  if (is_flag_set(&PTR_id_0800729c)) {\n    set_flag(&PTR_id_0800729c);\n  }\n  if (is_flag_set(&PTR_id_080072a0)) {\n    set_flag(&PTR_id_080072a0);\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007220",
            "calling": [],
            "imported": false,
            "current_name": "set_ctype_flags_08007220"
        },
        "FUN_08004198": {
            "renaming": {
                "FUN_08004198": "transmitData_08004198",
                "huart": "uart",
                "pbVar2": "txBuffPtr",
                "uVar1": "xferCount"
            },
            "code": "HAL_StatusTypeDef transmitData_08004198(UART_HandleTypeDef *uart)\n{\n  uint16_t xferCount = uart->TxXferCount - 1;\n  if (uart->gState != HAL_UART_STATE_BUSY_TX)\n  {\n    return HAL_BUSY;\n  }\n\n  if ((uart->Init).WordLength == UART_WORDLENGTH_9B)\n  {\n    uint16_t* txBuffPtr = (uint16_t*) uart->pTxBuffPtr;\n    uart->Instance->DR = (*txBuffPtr) & UART_DR_9BIT_MASK;\n    uart->pTxBuffPtr = (uint8_t*) txBuffPtr + 2;\n  }\n  else\n  {\n    uint8_t* txBuffPtr = (uint8_t*) uart->pTxBuffPtr;\n    uart->Instance->DR = (*txBuffPtr) & UART_DR_8BIT_MASK;\n    uart->pTxBuffPtr = txBuffPtr + 1;\n  }\n\n  if (xferCount == 0)\n  {\n    uart->Instance->CR1 &= ~USART_CR1_TXEIE;\n    uart->Instance->CR1 |= USART_CR1_TCIE;\n    return HAL_OK;\n  }\n  uart->TxXferCount = xferCount;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004198",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "transmitData_08004198"
        },
        "FUN_08001c3c": {
            "renaming": {
                "FUN_08001c3c": "configureSysTick_08001c3c",
                "TickPriority": "tickPriority",
                "uVar1": "systickConfigResult",
                "PTR_SystemCoreClock_08001c80": "PTR_SystemCoreClock",
                "PTR_uwTickFreq_08001c7c": "PTR_uwTickFreq",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_NVIC_SetPriority": "HAL_NVIC_SetPriority",
                "SysTick_IRQn": "SysTick_IRQn",
                "PTR_uwTickPrio_08001c84": "PTR_uwTickPrio",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef configureSysTick_08001c3c(uint32_t tickPriority)\n{\n  uint32_t systemCoreClock = *(uint *)PTR_SystemCoreClock_08001c80_08001c80;\n  uint32_t tickFreq = (1000 / (ulonglong)(byte)*PTR_uwTickFreq_08001c7c_08001c7c);\n  uint32_t systickConfigResult = HAL_SYSTICK_Config(systemCoreClock / tickFreq);\n\n  if (systickConfigResult != 0 || tickPriority > 0xf) {\n    return HAL_ERROR;\n  }\n\n  HAL_NVIC_SetPriority(SysTick_IRQn, tickPriority, 0);\n  *(uint32_t *)PTR_uwTickPrio_08001c84_08001c84 = tickPriority;\n  return HAL_OK;\n}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3c",
            "calling": [
                "HAL_Init",
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "configureSysTick_08001c3c"
        },
        "FUN_08001c3a": {
            "renaming": {
                "FUN_08001c3a": "do_nothing_08001c3a"
            },
            "code": "\nvoid do_nothing_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3a",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08001c3a"
        },
        "FUN_08000a2c": {
            "renaming": {
                "FUN_08000a2c": "is_valid_input_08000a2c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08000a2c(uint input1, int input2, uint input3, int input4) {\n  int is_invalid = (((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) && (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)));\n  return !is_invalid;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a2c",
            "calling": [
                "printFloat"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a2c"
        },
        "FUN_08001366": {
            "renaming": {
                "FUN_08001366": "displayCharacterAtPosition_08001366",
                "this": "lcd",
                "col": "column",
                "row": "row",
                "uVar1": "limitedRow",
                "_numlines": "maxRow",
                "_row_offsets": "offset",
                "send": "sendData"
            },
            "code": "void __thiscall displayCharacterAtPosition_08001366(LiquidCrystal *this, uint8_t column, uint8_t row) {\\n  uint8_t limitedRow = min(row, 3);\\n  uint8_t maxRow = this->_numlines - 1 & 0xff;\\n  uint8_t offset = this->_row_offsets[limitedRow];\\n  uint8_t position = column + offset | 0x80;\\n  send(this, position, \"\\0\");\\n  return;\\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001366",
            "calling": [
                "loop",
                "setup"
            ],
            "imported": false,
            "current_name": "displayCharacterAtPosition_08001366"
        },
        "FUN_08005848": {
            "renaming": {
                "FUN_08005848": "write_digital_pin_08005848",
                "ulPin": "pin_number",
                "ulVal": "pin_value",
                "_Var1": "is_pin_configured",
                "port": "port",
                "uVar2": "digital_pin_number",
                "PTR_digitalPin_08005888": "digitalPinLookupTable",
                "PTR_g_digPinConfigured_0800588c": "configured_digital_pins",
                "GPIO_TypeDef": "GPIO_TypeDef",
                "PinName_conflict": "PinName_conflict",
                "get_GPIO_Port": "get_GPIO_Port",
                "digital_io_write": "digital_io_write"
            },
            "code": "void write_digital_pin_08005848(uint32_t pin_number, uint32_t pin_value)\n{\n  bool is_pin_configured;\n  GPIO_TypeDef *port;\n  uint32_t digital_pin_number;\n  \n  if (pin_number < 0x3c) {\n    digital_pin_number = (uint32_t)(char)PTR_digitalPin_08005888[pin_number];\n  }\n  else {\n    digital_pin_number = 0xffffffff;\n  }\n  if ((digital_pin_number != 0xffffffff) &&\n     (is_pin_configured = is_pin_configured((PinName_conflict)digital_pin_number, &PTR_g_digPinConfigured_0800588c))) {\n    port = get_GPIO_Port((digital_pin_number << 0x18) >> 0x1c);\n    digital_io_write(port,1 << (digital_pin_number & 0xf) & 0xffff,pin_value);\n  }\n  return;\n}",
            "called": [
                "get_GPIO_Port",
                "is_pin_configured",
                "digital_io_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005848",
            "calling": [
                "readData",
                "send",
                "MAX31855",
                "pulseEnable",
                "loop",
                "begin",
                "write4bits",
                "write8bits",
                "setup"
            ],
            "imported": false,
            "current_name": "write_digital_pin_08005848"
        },
        "FUN_08000ae8": {
            "renaming": {
                "FUN_08000ae8": "interrupt_handler_08000ae8",
                "a0": "interrupt_number",
                "a1": "return_value",
                "a2": "argument"
            },
            "code": "uint32_t interrupt_handler_08000ae8(uint32_t interrupt_number, uint32_t return_value, int32_t argument){\n  software_interrupt(interrupt_number);\n  return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ae8",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "interrupt_handler_08000ae8"
        },
        "FUN_08003ed8": {
            "renaming": {
                "FUN_08003ed8": "check_pwm_configuration_08003ed8",
                "htim": "timer",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "TIM_TypeDef": "TIM_TypeDef",
                "pTVar1": "timer_instance",
                "CCER": "CCER",
                "CR1": "CR1",
                "HAL_TIM_PWM_MspDeInit": "HAL_TIM_PWM_MspDeInit",
                "HAL_TIM_STATE_RESET": "HAL_TIM_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef check_pwm_configuration_08003ed8(TIM_HandleTypeDef *timer)\n{\n  TIM_TypeDef *timer_instance = timer->Instance;\n  timer->State = HAL_TIM_STATE_BUSY;\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 &= 0xfffffffe;\n  }\n  HAL_TIM_PWM_MspDeInit(timer);\n  timer->State = HAL_TIM_STATE_RESET;\n  timer->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}",
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ed8",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "check_pwm_configuration_08003ed8"
        },
        "FUN_080061e0": {
            "renaming": {
                "FUN_080061e0": "fill_memory_with_char_080061e0",
                "__s": "memory_start",
                "__c": "character",
                "__n": "size",
                "puVar1": "current_byte"
            },
            "code": "void * fill_memory_with_char_080061e0(void *memory_start, int character, size_t size) {\n  unsigned char *current_byte;\n  unsigned char *end = (unsigned char *)memory_start + size;\n  for (current_byte = (unsigned char *)memory_start; current_byte != end; current_byte++) {\n    *current_byte = (unsigned char)character;\n  }\n  return memory_start;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061e0",
            "calling": [
                "std.isra.0",
                "adc_read_value",
                "__sfmoreglue",
                "__sfp"
            ],
            "imported": false,
            "current_name": "fill_memory_with_char_080061e0"
        },
        "FUN_08004f0c": {
            "renaming": {
                "FUN_08004f0c": "handle_I2C_event_interrupt_08004f0c",
                "PTR_i2c_handles_08004f18": "PTR_i2c_handles"
            },
            "code": "void handle_I2C_event_interrupt_08004f0c(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef**)PTR_i2c_handles_08004f18_08004f18;\n  HAL_I2C_EV_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f0c",
            "calling": [],
            "imported": false,
            "current_name": "handle_I2C_event_interrupt_08004f0c"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "transmit_data_08005604",
                "huart": "uart_handle",
                "bVar1": "uart_index_value",
                "uVar2": "uart_index_value",
                "iVar3": "callback_result",
                "iVar4": "callback_obj_index",
                "PTR_tx_callback_obj_08005644": "PTR_tx_callback_obj",
                "PTR_tx_callback_08005648": "PTR_tx_callback",
                "PTR_uart_handlers_0800564c": "PTR_uart_handlers"
            },
            "code": "void transmit_data_08005604(UART_HandleTypeDef *uart_handle) {\n  uint8_t uart_index_value = get_uart_index(uart_handle);\n  uint8_t callback_obj_index = *(uint8_t *)(PTR_tx_callback_08005648_obj_08005644_08005644 + uart_index_value * 4);\n  if ((uart_index_value < 5) && (callback_obj_index != 0xFF)) {\n    uint8_t *data_ptr = (uint8_t *)(*(int *)(callback_obj_index + 100) + (uint16_t)(*(uint16_t *)(callback_obj_index + 0x6a)));\n    uint8_t handler_index = *(uint8_t *)(callback_obj_index + 0x44);\n    UART_HandleTypeDef *handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_0800564c_0800564c + handler_index * 4);\n    HAL_UART_Transmit_IT(handler, data_ptr, 1);\n  }\n  return;\n}",
            "called": [
                "uart_index",
                "HAL_UART_Transmit_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "imported": false,
            "current_name": "transmit_data_08005604"
        },
        "FUN_08005724": {
            "renaming": {
                "FUN_08005724": "returnOne_08005724",
                "file_UNUSED": "fileUnused",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int returnOne_08005724(){\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005724",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "returnOne_08005724"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "calculate_unused_file_08005728",
                "file_UNUSED": "file_unused",
                "ptr_UNUSED": "ptr_unused",
                "dir_UNUSED": "dir_unused"
            },
            "code": "int calculate_unused_file_08005728(int file_unused, int ptr_unused, int dir_unused) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "calculate_unused_file_08005728"
        },
        "FUN_0800135a": {
            "renaming": {
                "__thiscall LiquidCrystal::FUN_0800135a": "send_command_to_lcd",
                "this": "lcd",
                "'\\x01'": "COMMAND",
                "FUN_0800135a": "send_command_to_lcd_0800135a"
            },
            "code": "void send_command_to_lcd_0800135a(LiquidCrystal *lcd){\n  send(lcd, COMMAND, 0);\n  return;\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800135a",
            "calling": [
                "loop",
                "begin",
                "setup"
            ],
            "imported": false,
            "current_name": "send_command_to_lcd_0800135a"
        },
        "FUN_08005c96": {
            "renaming": {
                "__thiscall Print::FUN_08005c96": "size_t Print::printString",
                "this": "this",
                "str": "string",
                "sVar1": "stringLength",
                "sVar2": "result",
                "FUN_08005c96": "Print::printString_08005c96"
            },
            "code": "size_t Print::printString_08005c96(Print *this, char *string) {\n  size_t stringLength;\n  size_t result;\n  \n  if (string != NULL) {\n    stringLength = strlen(string);\n    result = (*this->_vptr_Print[1])(stringLength, string, stringLength);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c96",
            "calling": [
                "printFloat",
                "loop",
                "println",
                "setup"
            ],
            "imported": false,
            "current_name": "Print::printString_08005c96"
        },
        "FUN_0800571a": {
            "renaming": {
                "FUN_0800571a": "set_file_mode_to_directory_0800571a",
                "file_UNUSED": "file_stats",
                "st": "file_stats"
            },
            "code": "int set_file_mode_to_directory_0800571a(stat *file_stats){\n  file_stats->st_mode = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800571a",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_directory_0800571a"
        },
        "FUN_08002efc": {
            "renaming": {
                "FUN_08002efc": "i2c_transfer_handler_08002efc",
                "hi2c": "i2c_handle",
                "uVar1": "transfer_options",
                "pbVar2": "buffer_ptr"
            },
            "code": "HAL_StatusTypeDef i2c_transfer_handler_08002efc(I2C_HandleTypeDef *i2c_handle)\n{\n  uint32_t transfer_options = i2c_handle->XferOptions;\n  if (i2c_handle->State == HAL_I2C_STATE_BUSY_TX) {\n    if (i2c_handle->XferCount == 0) {\n      if (((transfer_options == I2C_TRANSFER_OPTIONS_OTHER) || (transfer_options == I2C_TRANSFER_OPTIONS_MEM_INCREMENTAL)) || (transfer_options == I2C_TRANSFER_OPTIONS_MEM_STOP)) {\n        i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n        i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | I2C_CR1_STOP;\n        i2c_handle->PreviousState = 0;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n          i2c_handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemTxCpltCallback(i2c_handle);\n        }\n        else {\n          i2c_handle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterTxCpltCallback(i2c_handle);\n        }\n      }\n      else {\n        i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffff8ff;\n        i2c_handle->PreviousState = HAL_I2C_STATE_ERROR;\n        i2c_handle->Mode = HAL_I2C_MODE_NONE;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        HAL_I2C_MasterTxCpltCallback(i2c_handle);\n      }\n    }\n    else {\n      uint8_t *buffer_ptr = i2c_handle->pBuffPtr;\n      i2c_handle->pBuffPtr = buffer_ptr + 1;\n      i2c_handle->Instance->DR = (uint8_t)*buffer_ptr;\n      i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efc",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_transfer_handler_08002efc"
        },
        "FUN_0800365c": {
            "renaming": {
                "FUN_0800365c": "delay_0800365c",
                "mdelay": "milliseconds",
                "Delay": "delay_cycles",
                "bVar1": "delay_complete"
            },
            "code": "void delay_0800365c(uint32_t milliseconds)\n{\n  bool delay_0800365c_complete;\n  uint32_t delay_0800365c_cycles = milliseconds * (uint)((ulonglong)clock_multiplier * (ulonglong)*system_clock_pointer >> 0x29);\n  do {\n    delay_0800365c_complete = delay_0800365c_cycles == 0;\n    delay_0800365c_cycles--;\n  } while (!delay_0800365c_complete);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800365c",
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "imported": false,
            "current_name": "delay_0800365c"
        },
        "FUN_08006ad0": {
            "renaming": {
                "FUN_08006ad0": "decode_08006ad0",
                "param_1": "input",
                "param_2": "state",
                "iVar1": "uncompressed_size",
                "piVar2": "temp",
                "uVar3": "flags",
                "uVar4": "original_flags",
                "iVar5": "current_offset",
                "pcVar6": "decode_function",
                "iVar7": "block_size",
                "uVar8": "original_input_size",
                "bVar9": "has_error",
                "remaining_bytes": "remaining_bytes",
                "block_offset": "block_offset"
            },
            "code": "uint32_t decode_08006ad0(uint32_t *input, int32_t *state)\n{\n  int32_t remaining_bytes = 0;\n  int32_t current_offset = 0;\n  int32_t block_size = 0;\n  int32_t block_offset = 0;\n  uint16_t flags = *(uint16_t *)(state + 3);\n  uint32_t result = 0;\n  bool has_error = false;\n\n  if ((flags << 0x1c) < 0)\n  {\n    int32_t uncompressed_size = state[4];\n    if (uncompressed_size != 0)\n    {\n      current_offset = *state;\n      block_offset = state[5];\n      if ((uncompressed_size << 0x1e) == 0)\n      {\n        block_offset = state[5];\n      }\n      else\n      {\n        remaining_bytes = 0;\n      }\n      *state = uncompressed_size;\n      state[2] = block_offset;\n      while (current_offset > uncompressed_size)\n      {\n        block_size = (*(code *)state[10])(input, state[8], uncompressed_size, current_offset);\n        if (block_size < 1)\n        {\n          flags = *(uint16_t *)(state + 3);\n          has_error = true;\n          break;\n        }\n        uncompressed_size += block_size;\n      }\n    }\n  }\n  else if (((state[1] > 0) || (state[0x10] > 0)) && (state[0xb] != 0))\n  {\n    code *decode_08006ad0_function = (code *)state[0xb];\n    uint32_t original_input_size = *input;\n    *input = 0;\n    if ((flags & 0x1000) == 0)\n    {\n      block_size = (*decode_08006ad0_function)(input, state[8], flags & 0x1000, 1);\n      if ((block_size == -1) && (*input != 0))\n      {\n        if ((*input != 0x1d) && (*input != 0x16))\n        {\n          flags = *(uint16_t *)(state + 3);\n          has_error = true;\n        }\n        else\n        {\n          *input = original_input_size;\n          return 0;\n        }\n      }\n    }\n    else\n    {\n      block_size = state[0x15];\n    }\n    if (((flags << 0x1d) < 0) && (state[0xd] != 0))\n    {\n      block_size -= state[1];\n      if (state[0xd] != 0)\n      {\n        block_size -= state[0x10];\n      }\n    }\n    block_size = (*(code *)state[0xb])(input, state[8], block_size, 0);\n    flags = *(uint16_t *)(state + 3);\n    if ((block_size == -1) && ((*input > 0x1d) || ((DAT_08006bdc >> (*input & 0xff)) << 0x1f >= 0)))\n    {\n      has_error = true;\n    }\n    state[1] = 0;\n    *state = state[4];\n    if (((flags << 0x13) < 0) && ((block_size != -1) || (*input == 0)))\n    {\n      state[0x15] = block_size;\n    }\n    int32_t *temp = (int32_t *)state[0xd];\n    *input = original_input_size;\n    if (temp != 0)\n    {\n      if (temp != state + 0x11)\n      {\n        _free_r(input);\n      }\n      state[0xd] = 0;\n      return 0;\n    }\n  }\n  return has_error ? 0xffffffff : 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ad0",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "decode_08006ad0"
        },
        "FUN_080033b8": {
            "renaming": {
                "FUN_080033b8": "handle_I2C_communication_080033b8",
                "hi2c": "I2C_handle",
                "pIVar1": "i2c_instance",
                "uVar2": "sr1_register_value",
                "uVar3": "cr2_register_value",
                "uVar4": "sr2_register_value"
            },
            "code": "void handle_I2C_communication_080033b8(I2C_HandleTypeDef *hi2c)\n{\n  I2C_TypeDef *i2c_instance;\n  uint32_t sr1_register_value;\n  uint32_t sr2_register_value;\n  uint32_t cr2_register_value;\n  \n  i2c_instance = hi2c->Instance;\n  sr2_register_value = i2c_instance->SR2;\n  sr1_register_value = i2c_instance->SR1;\n  cr2_register_value = i2c_instance->CR2;\n  \n  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) || (hi2c->Mode == HAL_I2C_MODE_MEM)) {\n    if (((sr1_register_value & 0x10001) == 0) || ((cr2_register_value & 0x200) == 0)) {\n      if (((DAT_08003518 & sr1_register_value) == 0) || ((cr2_register_value & 0x200) == 0)) {\n        if (((DAT_08003504 & sr1_register_value) != 0) && ((cr2_register_value & 0x200) != 0)) {\n          I2C_Master_ADDR(hi2c);\n        }\n      }\n      else {\n        I2C_Master_ADD10(hi2c);\n      }\n    }\n    else {\n      I2C_Master_SB(hi2c);\n    }\n    if ((DAT_0800350c & sr2_register_value) == 0) {\n      if ((((DAT_0800351c & sr1_register_value) != 0) && ((cr2_register_value & 0x400) != 0)) && ((DAT_08003514 & sr1_register_value) == 0)\n         ) {\n        I2C_MasterReceive_RXNE(hi2c);\n        return;\n      }\n      if (((DAT_08003514 & sr1_register_value) != 0) && ((cr2_register_value & 0x200) != 0)) {\n        I2C_MasterReceive_BTF(hi2c);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_08003510 & sr1_register_value) != 0) && ((cr2_register_value & 0x400) != 0)) && ((DAT_08003514 & sr1_register_value) == 0)\n         ) {\n        I2C_MasterTransmit_TXE(hi2c);\n        return;\n      }\n      if (((DAT_08003514 & sr1_register_value) != 0) && ((cr2_register_value & 0x200) != 0)) {\n        I2C_MasterTransmit_BTF(hi2c);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_08003504 & sr1_register_value) != 0) && ((cr2_register_value & 0x200) != 0)) {\n      I2C_Slave_ADDR(hi2c);\n      return;\n    }\n    if (((DAT_08003508 & sr1_register_value) != 0) && ((cr2_register_value & 0x200) != 0)) {\n      I2C_Slave_STOPF(hi2c);\n      return;\n    }\n    if ((DAT_0800350c & sr2_register_value) == 0) {\n      if ((((DAT_0800351c & sr1_register_value) != 0) && ((cr2_register_value & 0x400) != 0)) && ((DAT_08003514 & sr1_register_value) == 0)\n         ) {\n        I2C_SlaveReceive_RXNE(hi2c);\n        return;\n      }\n      if (((DAT_08003514 & sr1_register_value) != 0) && ((cr2_register_value & 0x200) != 0)) {\n        I2C_SlaveReceive_BTF(hi2c);\n      }\n    }\n    else {\n      if ((((DAT_08003510 & sr1_register_value) != 0) && ((cr2_register_value & 0x400) != 0)) && ((DAT_08003514 & sr1_register_value) == 0)\n         ) {\n        I2C_SlaveTransmit_TXE(hi2c);\n        return;\n      }\n      if (((DAT_08003514 & sr1_register_value) != 0) && ((cr2_register_value & 0x200) != 0)) {\n        I2C_SlaveTransmit_BTF(hi2c);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "I2C_SlaveReceive_BTF",
                "I2C_MasterReceive_RXNE",
                "I2C_SlaveReceive_RXNE",
                "I2C_MasterReceive_BTF",
                "I2C_MasterTransmit_BTF",
                "I2C_Slave_ADDR",
                "I2C_SlaveTransmit_BTF",
                "I2C_Slave_STOPF",
                "I2C_MasterTransmit_TXE",
                "I2C_SlaveTransmit_TXE",
                "I2C_Master_ADDR",
                "I2C_Master_ADD10",
                "I2C_Master_SB"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033b8",
            "calling": [
                "I2C1_EV_IRQHandler",
                "I2C2_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_I2C_communication_080033b8"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "streamStatusCheck_080069e4",
                "param_1": "status",
                "param_2": "stream",
                "uVar1": "streamStatus",
                "uVar2": "streamFlags",
                "iVar3": "impurePtr"
            },
            "code": "uint streamStatusCheck_080069e4(uint *status, uint *stream)\n{\n  uint impurePtr = *(uint *)PTR__impure_ptr_08006ab0;\n  if ((impurePtr != 0) && (*(uint *)(impurePtr + 0x18) == 0)) {\n    __sinit(impurePtr);\n  }\n  if (stream == (uint *)PTR___sf_fake_stdin_08006ab4) {\n    stream = *(uint **)(impurePtr + 4);\n  }\n  else if (stream == (uint *)PTR___sf_fake_stdout_08006ab8) {\n    stream = *(uint **)(impurePtr + 8);\n  }\n  else if (stream == (uint *)PTR___sf_fake_stderr_08006abc) {\n    stream = *(uint **)(impurePtr + 0xc);\n  }\n  ushort streamFlags = *(ushort *)(stream + 3);\n  uint streamStatus = (uint)streamFlags;\n  if (-1 < (int)(streamStatus << 0x1c)) {\n    if (-1 < (int)(streamStatus << 0x1b)) {\n      *status = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(streamStatus << 0x1d) < 0) {\n      if ((uint *)stream[0xd] != (uint *)0x0) {\n        if ((uint *)stream[0xd] != stream + 0x11) {\n          _free_r(status);\n        }\n        stream[0xd] = 0;\n      }\n      *(ushort *)(stream + 3) = *(ushort *)(stream + 3) & 0xffdb;\n      stream[1] = 0;\n      *stream = stream[4];\n    }\n    *(ushort *)(stream + 3) = *(ushort *)(stream + 3) | 8;\n  }\n  if ((stream[4] == 0) && ((*(ushort *)(stream + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(status, stream);\n  }\n  streamFlags = *(ushort *)(stream + 3);\n  streamStatus = streamFlags & 1;\n  if ((streamFlags & 1) == 0) {\n    if (-1 < (int)((uint)streamFlags << 0x1e)) {\n      streamStatus = stream[5];\n    }\n    stream[2] = streamStatus;\n  }\n  else {\n    stream[2] = 0;\n    stream[6] = -stream[5];\n  }\n  if (stream[4] == 0) {\n    streamFlags = *(ushort *)(stream + 3);\n    streamStatus = (int)(short)streamFlags & 0x80;\n    if (streamStatus != 0) {\nLAB_08006a14:\n      *(ushort *)(stream + 3) = streamFlags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    streamStatus = 0;\n  }\n  return streamStatus;\n}",
            "called": [
                "__sinit",
                "__smakebuf_r",
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "_vfiprintf_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "streamStatusCheck_080069e4"
        },
        "FUN_080060bc": {
            "renaming": {
                "FUN_080060bc": "handle_gpio_exti_interrupts_080060bc",
                "uVar1": "gpio_pin"
            },
            "code": "void handle_gpio_exti_interrupts_080060bc(void)\n{\n  uint16_t gpio_pin = 0x400;\n  while (gpio_pin < 0x8001)\n  {\n    HAL_GPIO_EXTI_IRQHandler(gpio_pin);\n    gpio_pin = gpio_pin << 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060bc",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_interrupts_080060bc"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "do_nothing_08002580"
            },
            "code": "\nvoid do_nothing_08002580(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08002580"
        },
        "FUN_08004b9e": {
            "renaming": {
                "FUN_08004b9e": "tickHandler_08004b9e"
            },
            "code": "void tickHandler_08004b9e(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  noOsSystickHandler_08004b9e();\n  return;\n}",
            "called": [
                "noOsSystickHandler",
                "HAL_IncTick",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9e",
            "calling": [],
            "imported": false,
            "current_name": "tickHandler_08004b9e"
        },
        "FUN_08004b9c": {
            "renaming": {
                "FUN_08004b9c": "do_nothing_08004b9c"
            },
            "code": "\nvoid do_nothing_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9c",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b9c"
        },
        "FUN_08006940": {
            "renaming": {
                "FUN_08006940": "write_to_output_buffer_08006940",
                "param_1": "file_descriptor",
                "param_2": "character",
                "param_3": "stream_buffer",
                "param_4": "flags",
                "iVar1": "status",
                "uVar2": "buffer_size",
                "puVar3": "buffer_pointer"
            },
            "code": "uint write_to_output_buffer_08006940(int file_descriptor, uint character, int *stream_buffer, undefined4 flags)\n{\n  int status;\n  uint buffer_size;\n  undefined *buffer_pointer;\n  \n  if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x18) == 0)) {\n    __sinit();\n  }\n  if (stream_buffer == (int *)PTR___sf_fake_stdin_080069d8) {\n    stream_buffer = *(int **)(file_descriptor + 4);\n  }\n  else if (stream_buffer == (int *)PTR___sf_fake_stdout_080069dc) {\n    stream_buffer = *(int **)(file_descriptor + 8);\n  }\n  else if (stream_buffer == (int *)PTR___sf_fake_stderr_080069e0) {\n    stream_buffer = *(int **)(file_descriptor + 0xc);\n  }\n  \n  stream_buffer[2] = stream_buffer[6];\n  buffer_size = (uint)*(ushort *)(stream_buffer + 3);\n  status = buffer_size << 0x1c;\n  if (((status < 0) && (buffer_size = stream_buffer[4], buffer_size != 0)) ||\n     (status = __swsetup_r(file_descriptor, stream_buffer, status, buffer_size, flags), status == 0)) {\n    character = character & 0xff;\n    status = *stream_buffer - stream_buffer[4];\n    if ((status < stream_buffer[5]) || (status = _fflush_r(file_descriptor, stream_buffer), status == 0)) {\n      stream_buffer[2] = stream_buffer[2] + -1;\n      buffer_pointer = (undefined *)*stream_buffer;\n      *stream_buffer = (int)(buffer_pointer + 1);\n      *buffer_pointer = (char)character;\n      if (status + 1 != stream_buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(stream_buffer + 3) << 0x1f)) {\n          return character;\n        }\n        if (character != 10) {\n          return character;\n        }\n      }\n      status = _fflush_r(file_descriptor, stream_buffer);\n      if (status == 0) {\n        return character;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "__sinit",
                "__swsetup_r",
                "_fflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006940",
            "calling": [
                "__sfputc_r"
            ],
            "imported": false,
            "current_name": "write_to_output_buffer_08006940"
        },
        "FUN_08005730": {
            "renaming": {
                "FUN_08005730": "send_uart_debug_message_08005730",
                "file_UNUSED": "file_unused",
                "ptr": "message",
                "len": "message_length",
                "sVar1": "message_size",
                "uart_debugFUN_08005730": "uart_debug_send_message"
            },
            "code": "int send_uart_debug_message_08005730(int file_unused, char *message, int message_length)\n{\n  size_t message_size;\n  message_size = uart_debug_send_message((uint8_t *)message, message_length);\n  return message_size;\n}",
            "called": [
                "uart_debug_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005730",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "send_uart_debug_message_08005730"
        },
        "FUN_080058ea": {
            "renaming": {
                "FUN_080058ea": "serial_tx_tail_080058ea",
                "obj": "serial_obj",
                "uVar1": "tail_plus_one",
                "uVar2": "tail_mod_128",
                "iVar3": "new_tail_index"
            },
            "code": "int serial_tx_tail_080058ea(serial_t_conflict *serial_obj)\n{\n  ushort tail_plus_one;\n  uint16_t tail_mod_128;\n  int new_tail_index;\n  new_tail_index = serial_obj->tx_tail + 1;\n  tail_plus_one = (ushort)new_tail_index;\n  tail_mod_128 = tail_plus_one & 0x7f;\n  if (new_tail_index == 0) {\n    tail_mod_128 = -(-tail_plus_one & 0x7f);\n  }\n  serial_obj->tx_tail = tail_mod_128;\n  if (serial_obj->tx_head != serial_obj->tx_tail) {\n    return 0;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ea",
            "calling": [],
            "imported": false,
            "current_name": "serial_tx_tail_080058ea"
        },
        "FUN_08002582": {
            "renaming": {
                "FUN_08002582": "execute_systick_callback_08002582"
            },
            "code": "void execute_systick_callback_08002582(void)\n{\n  HAL_SYSTICK_Callback();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002582",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "execute_systick_callback_08002582"
        },
        "FUN_08005976": {
            "renaming": {
                "FUN_08005976": "wait_for_tx_complete_08005976",
                "_written": "is_written",
                "this": "serialObj",
                "_serial": "serialObj->_serial",
                "tx_head": "serialObj->_serial.tx_head",
                "tx_tail": "serialObj->_serial.tx_tail"
            },
            "code": "void __thiscall wait_for_tx_complete_08005976(HardwareSerial *serialObj)\n{\n  if (serialObj->is_written) {\n    do {\n    } while ((serialObj->tx_head) != (serialObj->tx_tail));\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005976",
            "calling": [],
            "imported": false,
            "current_name": "wait_for_tx_complete_08005976"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "get_GPIO_08004884",
                "port_idx": "port_index",
                "pGVar1": "gpio_ptr",
                "tmpreg": "gpio_reg",
                "tmpreg_1": "unused",
                "tmpreg_2": "unused",
                "tmpreg_3": "unused",
                "tmpreg_4": "unused"
            },
            "code": "GPIO_TypeDef* get_GPIO_08004884(uint32_t port_index) {\n  GPIO_TypeDef* gpio_ptr;\n  uint32_t gpio_reg;\n  switch(port_index) {\n    case 0:\n      gpio_reg = *(uint32_t*)(DAT_08004914 + 0x18);\n      gpio_reg |= 0x04;\n      *(uint32_t*)(DAT_08004914 + 0x18) = gpio_reg;\n      gpio_ptr = DAT_08004918;\n      break;\n    case 1:\n      gpio_reg = *(uint32_t*)(DAT_08004914 + 0x18);\n      gpio_reg |= 0x08;\n      *(uint32_t*)(DAT_08004914 + 0x18) = gpio_reg;\n      gpio_ptr = DAT_0800491c;\n      break;\n    case 2:\n      gpio_reg = *(uint32_t*)(DAT_08004914 + 0x18);\n      gpio_reg |= 0x10;\n      *(uint32_t*)(DAT_08004914 + 0x18) = gpio_reg;\n      gpio_ptr = DAT_08004920;\n      break;\n    case 3:\n      gpio_reg = *(uint32_t*)(DAT_08004914 + 0x18);\n      gpio_reg |= 0x20;\n      *(uint32_t*)(DAT_08004914 + 0x18) = gpio_reg;\n      gpio_ptr = DAT_08004924;\n      break;\n    case 4:\n      gpio_reg = *(uint32_t*)(DAT_08004914 + 0x18);\n      gpio_reg |= 0x40;\n      *(uint32_t*)(DAT_08004914 + 0x18) = gpio_reg;\n      gpio_ptr = DAT_08004928;\n      break;\n    default:\n      gpio_ptr = (GPIO_TypeDef*)0x0;\n  }\n  return gpio_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "digital_io_init",
                "HAL_ADC_MspInit",
                "uart_init"
            ],
            "imported": false,
            "current_name": "get_GPIO_08004884"
        },
        "FUN_08005fa0": {
            "renaming": {
                "FUN_08005fa0": "free_gpio_irq_configurations_08005fa0",
                "param_1": "list_start",
                "puVar1": "list_item",
                "puVar2": "previous_item"
            },
            "code": "void free_gpio_irq_configurations_08005fa0(void *list_start)\n{\n  void *current_item = PTR___malloc_free_list_08005fc0;\n  while (current_item != PTR_gpio_irq_conf_08005fc4) {\n    void *previous_item = current_item - 0x14;\n    if (*(code **)(current_item - 8) != (code *)0x0) {\n      (**(code **)(current_item - 8))(current_item - 0x10, current_item - 0x10, 3);\n    }\n    current_item = previous_item;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fa0",
            "calling": [],
            "imported": false,
            "current_name": "free_gpio_irq_configurations_08005fa0"
        },
        "FUN_08001be8": {
            "renaming": {
                "FUN_08001be8": "initialize_system_08001be8",
                "iVar1": "index",
                "puVar2": "completed_data",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "code": "void initialize_system_08001be8(void)\n{\n  int index = 0;\n  undefined4 *completed_data = (undefined4 *)PTR_completed_8667_08001c28;\n  code *jumptable = (code *)0x8001c1a;\n  \n  while(PTR___dso_handle_08001c20 + index < PTR__edata_08001c24)\n  {\n    *(undefined4 *)(PTR___dso_handle_08001c20 + index) = *(undefined4 *)(PTR__sidata_08001c1c + index);\n    index += 4;\n  }\n  \n  while(completed_data < PTR__ebss_08001c2c)\n  {\n    *completed_data = 0;\n    completed_data++;\n  }\n  \n  SystemInit();\n  __libc_init_array();\n  \n  (*jumptable)();\n  return;\n}",
            "called": [
                "main",
                "SystemInit",
                "__libc_init_array"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_08001be8"
        },
        "FUN_080061f0": {
            "renaming": {
                "FUN_080061f0": "allocate_memory_080061f0",
                "param_1": "error_code",
                "param_2": "size",
                "param_3": "init_val",
                "param_4": "unused",
                "puVar1": "free_list_ptr",
                "extraout_r1": "next_ptr",
                "ppiVar2": "next_ptr",
                "ppiVar3": "prev_ptr",
                "piVar4": "mem_block",
                "ppiVar5": "free_list",
                "ppiVar6": "curr_ptr",
                "ppiVar7": "mem_ptr"
            },
            "code": "void allocate_memory_080061f0(int* error_code, int size, int init_val, int unused) {\n  if (size == 0) {\n    return;\n  }\n  int** mem_ptr = (int**)(size - 4);\n  if (*(int*)(size - 4) < 0) {\n    mem_ptr = (int**)((int)mem_ptr + *(int*)(size - 4));\n  }\n  __malloc_lock();\n  undefined* free_list_ptr = PTR___malloc_free_list_08006284;\n  int** free_list = *(int***)(PTR___malloc_free_list_08006284);\n  if (free_list == (int**)0x0) {\n    mem_ptr[1] = (int*)0x0;\n    *(int***)free_list_ptr = mem_ptr;\n    int** next_ptr = extraout_r1;\n    int** prev_ptr = (int**)free_list_ptr;\n  }\n  else if (mem_ptr < free_list) {\n    int** next_ptr = (int**)*mem_ptr;\n    int** prev_ptr = (int**)((int)mem_ptr + (int)next_ptr);\n    if (free_list == prev_ptr) {\n      int* mem_block = *free_list;\n      free_list = (int**)free_list[1];\n      prev_ptr = (int**)((int)mem_block + (int)next_ptr);\n      *mem_ptr = (int*)prev_ptr;\n    }\n    mem_ptr[1] = (int*)free_list;\n    *(int***)free_list_ptr = mem_ptr;\n  }\n  else {\n    do {\n      int** curr_ptr = free_list;\n      int** next_ptr = (int**)curr_ptr[1];\n      if (next_ptr == (int**)0x0) break;\n      free_list = next_ptr;\n    } while (next_ptr <= mem_ptr);\n    int** next_ptr = (int**)*curr_ptr;\n    if ((int**)((int)curr_ptr + (int)next_ptr) == mem_ptr) {\n      next_ptr = (int**)((int)next_ptr + (int)*mem_ptr);\n      *curr_ptr = (int*)next_ptr;\n      if (next_ptr == (int**)((int)curr_ptr + (int)next_ptr[1])) {\n        int* mem_block = *next_ptr;\n        next_ptr = (int**)next_ptr[1];\n        next_ptr = (int**)((int)next_ptr + (int)mem_block);\n        *curr_ptr = (int*)next_ptr;\n        curr_ptr[1] = (int*)next_ptr;\n      }\n    }\n    else if (mem_ptr < (int**)((int)curr_ptr + (int)next_ptr)) {\n      *error_code = 0xc;\n    }\n    else {\n      next_ptr = (int**)((int)mem_ptr + (int)*mem_ptr);\n      if (next_ptr == (int**)curr_ptr[1]) {\n        int* mem_block = *next_ptr;\n        next_ptr = (int**)next_ptr[1];\n        next_ptr = (int**)((int)mem_block + (int)*mem_ptr);\n        *mem_ptr = (int*)next_ptr;\n      }\n      mem_ptr[1] = (int*)next_ptr;\n      curr_ptr[1] = (int*)mem_ptr;\n    }\n  }\n  __malloc_unlock(error_code, next_ptr, prev_ptr, unused);\n  return;\n}",
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061f0",
            "calling": [
                "__sflush_r",
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080061f0"
        },
        "FUN_08002348": {
            "renaming": {
                "FUN_08002348": "stop_adc_conversion_08002348",
                "hadc": "adc_handle",
                "HVar1": "status",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef_conflict",
                "ADC_HandleTypeDef": "ADC_HandleTypeDef",
                "Lock": "Lock",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_BUSY": "HAL_BUSY",
                "ADC_ConversionStop_Disable": "ADC_ConversionStop_Disable",
                "State": "State",
                "HAL_UNLOCKED": "HAL_UNLOCKED"
            },
            "code": "HAL_StatusTypeDef_conflict stop_adc_conversion_08002348(ADC_HandleTypeDef *adc_handle)\n{\n  HAL_StatusTypeDef_conflict status;\n  if (adc_handle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  adc_handle->Lock = HAL_LOCKED;\n  status = ADC_ConversionStop_Disable(adc_handle);\n  if (status == HAL_OK) {\n    adc_handle->State = adc_handle->State & 0xffffeefe | 1;\n  }\n  adc_handle->Lock = HAL_UNLOCKED;\n  return status;\n}",
            "called": [
                "ADC_ConversionStop_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002348",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "stop_adc_conversion_08002348"
        },
        "FUN_08004f1c": {
            "renaming": {
                "FUN_08004f1c": "handle_i2c_errors_08004f1c",
                "PTR_i2c_handles_08004f28": "PTR_i2c_handles"
            },
            "code": "void handle_i2c_errors_08004f1c(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef **)PTR_i2c_handles_08004f28_08004f28;\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f1c",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_errors_08004f1c"
        },
        "FUN_080060d4": {
            "renaming": {
                "std::function<void()>::operator__": "executeFunction",
                "this": "function",
                "super__Function_base": "function_base",
                "_M_manager": "manager",
                "_M_invoker": "invoker_function",
                "FUN_080060d4": "executeFunction_080060d4"
            },
            "code": "void __thiscall executeFunction_080060d4(function_void___ *function) {\n    if ((function->function_base)._M_manager != (_Manager_type)0x0) {\n        (*function->invoker_function)((_Any_data *)function);\n        return;\n    }\n    __throw_bad_function_call();\n}",
            "called": [
                "__throw_bad_function_call"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060d4",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "executeFunction_080060d4"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "setSerialPortConfig_08005a68",
                "this": "serialPort",
                "baud": "baudrate",
                "config": "config",
                "bVar1": "parityBits",
                "iVar2": "dataBits",
                "_serial": "_serial",
                "PTR_s__home_bo__arduino15_packages_STM_08005b20": "PTR_s__home_bo__arduino15_packages_STM_08005b20",
                "DAT_08005b14": "callbackFunction",
                "PTR___PRETTY_FUNCTION___08005b1c": "PTR___PRETTY_FUNCTION___08005b1c",
                "PTR_s_databits__0_08005b18": "PTR_s_databits__0_08005b18"
            },
            "code": "void __thiscall setSerialPortConfig_08005a68(HardwareSerial *serialPort, ulong baudrate, byte config)\n{\n  byte parityBits;\n  int dataBits;\n  \n  (serialPort->_serial).baudrate = baudrate;\n  serialPort->_config = config;\n  byte configMask = config & 7;\n  if (configMask == 4) {\n    dataBits = 7;\n  }\n  else if (configMask == 6) {\n    dataBits = 8;\n  }\n  else if (configMask == 2) {\n    dataBits = 6;\n  }\n  else {\n    dataBits = 0;\n  }\n  if ((config & 0x30) == 0x30) {\n    (serialPort->_serial).parity = 0x600;\n    dataBits++;\n  }\n  else if ((config & 0x20) == 0) {\n    (serialPort->_serial).parity = 0;\n  }\n  else {\n    (serialPort->_serial).parity = 0x400;\n    dataBits++;\n  }\n  if ((config & 8) == 0) {\n    (serialPort->_serial).stopbits = 0;\n  }\n  else {\n    (serialPort->_serial).stopbits = 0x2000;\n  }\n  if (dataBits == 8) {\n    (serialPort->_serial).databits = 0;\n  }\n  else if (dataBits == 9) {\n    (serialPort->_serial).databits = 0x1000;\n  }\n  else {\n    dataBits = 0;\n  }\n  if (dataBits != 0) {\n    uart_init((serial_t *)&serialPort->_serial);\n    uart_attach_rx_callback((serial_t *)&serialPort->_serial, DAT_08005b14);\n    return;\n  }\n  __assert_func(PTR_s__home_bo__arduino15_packages_STM_08005b20,299,PTR___PRETTY_FUNCTION___08005b1c, PTR_s_databits__0_08005b18);\n}",
            "called": [
                "uart_attach_rx_callback",
                "__assert_func",
                "uart_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "setSerialPortConfig_08005a68"
        },
        "FUN_08001814": {
            "renaming": {
                "FUN_08001814": "updatePID_08001814",
                "this": "pid",
                "Kp": "proportionalGain",
                "Ki": "integralGain",
                "Kd": "derivativeGain",
                "POn": "pOnMode",
                "iVar1": "isKpValid",
                "uVar2": "sampleTimeUpper",
                "in_r2": "dispKpLower",
                "in_r3": "dispKpUpper",
                "uVar3": "pOnLower",
                "bVar4": "isPOnNotEqualOne",
                "uVar5": "sampleTime",
                "dVar6": "proportionalTimeConstant",
                "dVar7": "integralTimeConstant",
                "dVar8": "derivativeTimeConstant"
            },
            "code": "void updatePID_08001814(PID* pid, double Kp, double Ki, double Kd, int POn) {\n  int isKpValid;\n  double pOn = Kd;\n  bool isPOnNotEqualOne = Kd != 1;\n  if (__aeabi_dcmplt(0, Kp, 0, 0) == 0 || __aeabi_dcmplt(Kp._0_4_, Kp._4_4_, 0, 0) == 0 || __aeabi_dcmplt(Ki._0_4_, Ki._4_4_, 0, 0) == 0) {\n    return;\n  }\n  pid->pOn = pOn;\n  pid->pOnE = isPOnNotEqualOne;\n  pid->dispKp = Kp;\n  pid->dispKi = Ki;\n  pid->dispKd = Kd;\n  double sampleTime = __floatunsidf(pid->SampleTime);\n  double sampleTimeOver1000 = __divdf3(sampleTime, (long long) 0, 0, 0x3e8);\n  pid->kp = Kp * sampleTimeOver1000;\n  pid->ki = Ki / sampleTimeOver1000;\n  pid->kd = Kd * sampleTimeOver1000;\n  if (pid->controllerDirection == 1) {\n    pid->kp = -pid->kp;\n    pid->ki = -pid->ki;\n    pid->kd = -pid->kd;\n  }\n}",
            "called": [
                "__subdf3",
                "__muldf3",
                "__aeabi_dcmplt",
                "__floatunsidf",
                "__divdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001814",
            "calling": [
                "SetTunings",
                "PID"
            ],
            "imported": false,
            "current_name": "updatePID_08001814"
        },
        "FUN_080056c0": {
            "renaming": {
                "FUN_080056c0": "handle_USART3_interrupt_080056c0",
                "PTR_uart_handlers_080056d4": "PTR_uart_handlers",
                "USART3_IRQn": "USART3_interrupt",
                "UART_HandleTypeDef": "uart_handler"
            },
            "code": "void handle_USART3_interrupt_080056c0(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART3_IRQn);\n  UART_HandleTypeDef *uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_080056d4_080056d4 + 8);\n  if (uart_handler != NULL) {\n    HAL_UART_IRQHandler(uart_handler);\n  }\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056c0",
            "calling": [],
            "imported": false,
            "current_name": "handle_USART3_interrupt_080056c0"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "get_afl_call_result_08000aec",
                "ticks": "number_of_ticks",
                "uVar1": "afl_call_result"
            },
            "code": "int get_afl_call_result_08000aec(int ticks) {\n  uint32_t afl_call_result;\n  if (*(int *)PTR_noHyperCall_08000b04 != 0) {\n    return 0;\n  }\n  afl_call_result = aflCall(1, ticks, 0);\n  return afl_call_result;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "get_afl_call_result_08000aec"
        },
        "FUN_0800572c": {
            "renaming": {
                "FUN_0800572c": "calculate_checksum_0800572c",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "data_pointer",
                "len_UNUSED": "data_length"
            },
            "code": "int calculate_checksum_0800572c(int file_descriptor, char *data_pointer, int data_length)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800572c",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "calculate_checksum_0800572c"
        },
        "FUN_08004e12": {
            "renaming": {
                "FUN_08004e12": "handle_timer_interrupt_08004e12",
                "htim": "timer_handle",
                "psVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "irqHandle": "interrupt_handler"
            },
            "code": "void handle_timer_interrupt_08004e12(TIM_HandleTypeDef *timer_handle)\n{\n  stimer_t *timer_obj;\n  timer_obj = get_timer_object(timer_handle);\n  if (timer_obj->interrupt_handler != (_func_void_stimer_t_ptr *)0x0) {\n    (*timer_obj->interrupt_handler)(timer_obj);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e12",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e12"
        },
        "FUN_08000a58": {
            "renaming": {
                "FUN_08000a58": "convert_to_int_08000a58",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "temp_uVar",
                "iVar2": "temp_var",
                "uVar3": "result"
            },
            "code": "uint convert_to_int_08000a58(uint input_1, uint input_2)\n{\n  uint result;\n  int temp_var;\n  uint temp_uVar;\n  \n  temp_var = input_2 * 2 + 0x200000;\n  if (input_2 * 2 < 0xffe00000) {\n    if (-1 < temp_var) {\n      return 0;\n    }\n    temp_uVar = temp_var >> 0x15;\n    result = -temp_uVar - 0x3e1;\n    if (temp_uVar < 0xfffffc20 && result != 0) {\n      result = (input_2 << 0xb | 0x80000000 | input_1 >> 0x15) >> (result & 0xff);\n      if ((input_2 & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((input_1 | input_2 << 0xc) != 0) {\n    return 0;\n  }\n  input_2 = input_2 & 0x80000000;\n  if (input_2 == 0) {\n    input_2 = 0x7fffffff;\n  }\n  return input_2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a58",
            "calling": [
                "printFloat"
            ],
            "imported": false,
            "current_name": "convert_to_int_08000a58"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initializeSystemClock_08001b48",
                "HVar1": "status",
                "uVar2": "hclkFrequency",
                "RCC_OscInitStruct": "oscInit",
                "RCC_ClkInitStruct": "clkInit",
                "PeriphClkInit": "periphClkInit"
            },
            "code": "void initializeSystemClock_08001b48(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t hclkFrequency;\n  RCC_OscInitTypeDef oscInit;\n  RCC_ClkInitTypeDef clkInit;\n  RCC_PeriphCLKInitTypeDef periphClkInit;\n  \n  oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSI;\n  oscInit.HSIState = RCC_HSI_ON;\n  oscInit.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;\n  oscInit.PLL.PLLState = RCC_PLL_ON;\n  oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSI;\n  oscInit.PLL.PLLMUL = RCC_PLL_MUL12;\n  status = HAL_RCC_OscConfig(&oscInit);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  clkInit.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK\n                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\n  clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  clkInit.APB1CLKDivider = RCC_HCLK_DIV2;\n  clkInit.APB2CLKDivider = RCC_HCLK_DIV1;\n  status = HAL_RCC_ClockConfig(&clkInit, FLASH_LATENCY_1);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  periphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;\n  periphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;\n  status = HAL_RCCEx_PeriphCLKConfig(&periphClkInit);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  hclkFrequency = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config((uint32_t)(HAL_RCC_GetHCLKFreq() / 1000));\n  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);\n  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n  return;\n}",
            "called": [
                "HAL_RCCEx_PeriphCLKConfig",
                "HAL_RCC_OscConfig",
                "HAL_NVIC_SetPriority",
                "HAL_RCC_GetHCLKFreq",
                "_Error_Handler",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_SYSTICK_Config",
                "HAL_RCC_ClockConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "initializeSystemClock_08001b48"
        },
        "FUN_08004092": {
            "renaming": {
                "FUN_08004092": "updateChannelState_08004092",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "state",
                "CCER": "channelMask"
            },
            "code": "void updateChannelState_08004092(TIM_TypeDef *timer, uint32_t channel, uint32_t state) {\n  uint32_t channelMask = 1 << (channel & 0xff);\n  timer->CCER = (timer->CCER & ~channelMask) | (state << (channel & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004092",
            "calling": [
                "HAL_TIM_PWM_Stop"
            ],
            "imported": false,
            "current_name": "updateChannelState_08004092"
        },
        "FUN_08005cd4": {
            "renaming": {
                "FUN_08005cd4": "calculateTotalSize_08005cd4",
                "this": "printObj",
                "c": "stringToPrint",
                "sVar1": "printedStringSize",
                "sVar2": "totalSize"
            },
            "code": "size_t __thiscall calculateTotalSize_08005cd4(Print *printObj, char *stringToPrint)\n{\n  size_t printedStringSize;\n  size_t totalSize;\n  \n  printedStringSize = print(printObj, stringToPrint);\n  totalSize = calculateTotalSize_08005cd4(printObj);\n  return totalSize + printedStringSize;\n}",
            "called": [
                "print",
                "println"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cd4",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculateTotalSize_08005cd4"
        },
        "FUN_08000450": {
            "renaming": {
                "FUN_08000450": "calculateResult_08000450",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar7": "temp7",
                "bVar8": "temp8",
                "bVar9": "temp9",
                "bVar10": "temp10",
                "in_r12": "count"
            },
            "code": "ulonglong calculateResult_08000450(uint input1, undefined4 input2, undefined4 input3, uint input4) {\n  uint temp1, temp2, temp3, temp4, temp5, count, temp7;\n  bool temp6, temp8, temp9, temp10;\n  temp5 = input1 << 1;\n  temp6 = temp5 == 0;\n  temp1 = (uint)((input1 & 0x80000000) != 0) << 0x1f;\n  temp4 = (uint)((int)temp5 >> 3) >> 1;\n  temp3 = temp1 | temp4;\n  input1 = input1 << 0x1d;\n  if (!temp6) {\n    input4 = temp5 & 0xff000000;\n    temp6 = input4 == 0;\n  }\n  if (!temp6) {\n    temp6 = input4 == 0xff000000;\n  }\n  if (!temp6) {\n    return CONCAT44(temp3,input1) ^ 0x3800000000000000;\n  }\n  if (temp5 == 0 || input4 == 0xff000000) {\n    return CONCAT44(temp3,input1);\n  }\n  temp2 = input1;\n  temp5 = temp4;\n  if (temp4 == 0) {\n    temp2 = 0;\n    temp5 = input1;\n  }\n  count = countLeadingZeroes(temp5);\n  if (temp4 == 0) {\n    count = count + 0x20;\n  }\n  temp7 = count - 0xb;\n  temp10 = SBORROW4(temp7,0x20);\n  temp4 = count - 0x2b;\n  temp9 = (int)temp4 < 0;\n  temp8 = temp4 == 0;\n  if ((int)temp7 < 0x20) {\n    temp10 = SCARRY4(temp4,0xc);\n    count = count + -0x1f;\n    temp9 = count < 0;\n    temp8 = count == 0;\n    temp4 = temp7;\n    if (!temp8 && temp9 == temp10) {\n      temp2 = temp5 << (temp7 & 0xff);\n      temp5 = temp5 >> (0xcU - count & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (temp8 || temp9 != temp10) {\n    temp3 = 0x20 - temp4;\n  }\n  temp5 = temp5 << (temp4 & 0xff);\n  if (temp8 || temp9 != temp10) {\n    temp5 = temp5 | temp2 >> (temp3 & 0xff);\n  }\n  if (temp8 || temp9 != temp10) {\n    temp2 = temp2 << (temp4 & 0xff);\n  }\n  LAB_08000318:\n  if ((int)temp7 < 0x381) {\n    return CONCAT44(temp5 + (0x380 - temp7) * 0x100000 | temp1,temp2);\n  }\n  temp4 = ~(0x380 - temp7);\n  if ((int)temp4 < 0x1f) {\n    count = temp4 - 0x13;\n    if (count != 0 && count < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp3,temp2 >> (0x20 - (0xcU - count) & 0xff) | temp5 << (0xcU - count & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(temp1 | temp5 >> (temp4 & 0xff),\n                    temp2 >> (temp4 & 0xff) | temp5 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp3,temp5 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000450",
            "calling": [],
            "imported": false,
            "current_name": "calculateResult_08000450"
        },
        "FUN_08005bb0": {
            "renaming": {
                "FUN_08005bb0": "initialize_serial_08005bb0",
                "__initialize_p": "should_initialize",
                "__priority": "priority",
                "PTR_Serial2_08005bd0": "serial2",
                "DAT_08005bcc": "baud_rate"
            },
            "code": "void initialize_serial_08005bb0(int should_initialize, int priority) {\n  if (should_initialize != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    HardwareSerial::HardwareSerial(&PTR_Serial2_08005bd0, DAT_08005bcc);\n  }\n  return;\n}",
            "called": [
                "HardwareSerial"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb0",
            "calling": [
                "_GLOBAL__sub_I_Serial2"
            ],
            "imported": false,
            "current_name": "initialize_serial_08005bb0"
        },
        "FUN_080014ba": {
            "renaming": {
                "FUN_080014ba": "initializeLCD_080014ba",
                "this": "lcd",
                "fourbitmode": "four_bit_mode",
                "rs": "rs_pin",
                "rw": "rw_pin",
                "enable": "enable_pin",
                "d0": "data_pins[0]",
                "d1": "data_pins[1]",
                "d2": "data_pins[2]",
                "d3": "data_pins[3]",
                "d4": "data_pins[4]",
                "d5": "data_pins[5]",
                "d6": "data_pins[6]",
                "d7": "data_pins[7]",
                "_rs_pin": "_rs_pin",
                "_rw_pin": "_rw_pin",
                "_enable_pin": "_enable_pin",
                "_data_pins[0]": "_data_pins[0]",
                "_data_pins[1]": "_data_pins[1]",
                "_data_pins[2]": "_data_pins[2]",
                "_data_pins[3]": "_data_pins[3]",
                "_data_pins[4]": "_data_pins[4]",
                "_data_pins[5]": "_data_pins[5]",
                "_data_pins[6]": "_data_pins[6]",
                "_data_pins[7]": "_data_pins[7]",
                "_displayfunction": "_display_function"
            },
            "code": "void __thiscall initializeLCD_080014ba(LiquidCrystal *lcd, uint8_t four_bit_mode, uint8_t rs_pin, uint8_t rw_pin, uint8_t enable_pin, uint8_t data_pins[8])\n{\n  lcd->_rs_pin = rs_pin;\n  lcd->_rw_pin = rw_pin;\n  lcd->_enable_pin = enable_pin;\n  for (int i = 0; i < 8; i++) {\n    lcd->_data_pins[i] = data_pins[i];\n  }\n  if (four_bit_mode == 0) {\n    lcd->_display_function = 0x10;\n  }\n  else {\n    lcd->_display_function = 0;\n  }\n  begin(lcd, 0x10, 0x01, 0);\n  return;\n}",
            "called": [
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ba",
            "calling": [
                "LiquidCrystal"
            ],
            "imported": false,
            "current_name": "initializeLCD_080014ba"
        },
        "FUN_08003c90": {
            "renaming": {
                "FUN_08003c90": "configurePeriphClocks_08003c90",
                "PeriphClkInitTypeDef_conflict": "RCC_PeriphCLKInitTypeDef",
                "PeriphClkInit": "PeriphClkInit",
                "iVar1": "i",
                "puVar2": "ptr",
                "uVar3": "tick_start",
                "uVar4": "timeout",
                "uVar5": "selection",
                "bVar6": "is_bit_set",
                "tmpreg": "reg_value"
            },
            "code": "HAL_StatusTypeDef configurePeriphClocks_08003c90(RCC_PeriphCLKInitTypeDef *PeriphClkInit)\n{\n  int i;\n  uint32_t *ptr;\n  uint32_t tick_start;\n  bool is_bit_set;\n  uint32_t reg_value;\n  uint selection;\n  uint timeout;\n  \n  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) != 0) {\n    is_bit_set = (*(uint *)(PTR_DAT_08003d98 + 0x1c) & 0x10000000) == 0;\n    if (is_bit_set) {\n      *(uint *)(PTR_DAT_08003d98 + 0x1c) |= 0x10000000;\n    }\n    if ((*PTR_DAT_08003d9c & 0x100) == 0) {\n      *PTR_DAT_08003d9c |= 0x100;\n      tick_start = HAL_GetTick();\n      while ((*PTR_DAT_08003d9c & 0x100) == 0) {\n        timeout = HAL_GetTick();\n        if (100 < timeout - tick_start) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    ptr = PTR_DAT_08003da0;\n    i = PTR_DAT_08003d98;\n    selection = *(uint *)(PTR_DAT_08003d98 + 0x20) & 0x300;\n    if ((selection != 0) && (selection != (PeriphClkInit->RTCClockSelection & 0x300))) {\n      selection = *(uint *)(PTR_DAT_08003d98 + 0x20);\n      *PTR_DAT_08003da0 = 1;\n      *ptr = 0;\n      *(uint *)(i + 0x20) = selection & 0xfffffcff;\n      if ((selection & 1) != 0) {\n        tick_start = HAL_GetTick();\n        while ((*(uint *)(PTR_DAT_08003d98 + 0x20) & 2) == 0) {\n          timeout = HAL_GetTick();\n          if (5000 < timeout - tick_start) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n    i = PTR_DAT_08003d98;\n    *(uint *)(PTR_DAT_08003d98 + 0x20) = *(uint *)(PTR_DAT_08003d98 + 0x20) & 0xfffffcff | PeriphClkInit->RTCClockSelection;\n    if (is_bit_set) {\n      *(uint *)(i + 0x1c) &= 0xefffffff;\n    }\n  }\n  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) != 0) {\n    *(uint *)(PTR_DAT_08003d98 + 4) = *(uint *)(PTR_DAT_08003d98 + 4) & 0xffff3fff | PeriphClkInit->AdcClockSelection;\n  }\n  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USB) != 0) {\n    *(uint *)(PTR_DAT_08003d98 + 4) = *(uint *)(PTR_DAT_08003d98 + 4) & 0xffbfffff | PeriphClkInit->UsbClockSelection;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c90",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configurePeriphClocks_08003c90"
        },
        "FUN_08002514": {
            "renaming": {
                "FUN_08002514": "calculate_ticks_08002514",
                "TicksNumb": "ticks_number",
                "puVar1": "ticks_array_ptr",
                "DAT_08002538": "ticks_array_ptr",
                "DAT_0800253c": "ticks_data"
            },
            "code": "uint32_t calculate_ticks_08002514(uint32_t ticks_number)\n{\n  undefined4 *DAT_08002538;\n  DAT_08002538 = DAT_08002538;\n  if (ticks_number - 1 < 0x1000000) {\n    DAT_08002538[1] = ticks_number - 1;\n    *(undefined *)(DAT_0800253c + 0x23) = 0xf0;\n    DAT_08002538[2] = 0;\n    *DAT_08002538 = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002514",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "calculate_ticks_08002514"
        },
        "FUN_08005c1c": {
            "renaming": {
                "FUN_08005c1c::FUN_08005c1c": "IPAddress::IPAddress",
                "this": "IPAddress",
                "first_octet": "first",
                "second_octet": "second",
                "third_octet": "third",
                "fourth_octet": "fourth",
                "super_Printable": "unused",
                "_vptr_Printable": "unused",
                "_address": "unused",
                "FUN_08005c1c": "IPAddress_08005c1c"
            },
            "code": "class IPAddress_08005c1c {\npublic:\n    uint8_t first;\n    uint8_t second;\n    uint8_t third;\n    uint8_t fourth;\n    IPAddress_08005c1c(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet) {\n        first = first_octet;\n        second = second_octet;\n        third = third_octet;\n        fourth = fourth_octet;\n    }\n};",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c1c",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "IPAddress_08005c1c"
        },
        "FUN_08006dc8": {
            "renaming": {
                "FUN_08006dc8": "check_file_permission_08006dc8",
                "param_1": "file_descriptor",
                "param_2": "file_info_offset",
                "param_3": "permission_flag",
                "param_4": "error_code",
                "iVar1": "file_stat_result",
                "uVar2": "permission_result",
                "auStack_4c": "local_buffer",
                "local_48": "file_type"
            },
            "code": "int check_file_permission_08006dc8(int file_descriptor, int file_info_offset, int* permission_flag, uint32_t* error_code) {\n  int file_stat_result;\n  uint32_t permission_result;\n  if (*(short *)(file_info_offset + 0xe) < 0 || _fstat_r(file_descriptor, (int)*(short *)(file_info_offset + 0xe), &file_stat_result) < 0) {\n    *error_code = 0;\n    if ((int)((uint)*(ushort *)(file_info_offset + 0xc) << 0x18) < 0) {\n      permission_result = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    permission_result = (uint32_t)((file_stat_result & 0xf000) == 0x2000);\n  }\n  permission_result = 0x400;\nLAB_08006e08:\n  *permission_flag = permission_result;\n  return 0;\n}",
            "called": [
                "_fstat_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc8",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_file_permission_08006dc8"
        },
        "FUN_0800412c": {
            "renaming": {
                "FUN_0800412c": "set_timer_channel_to_inactive_state_0800412c",
                "htim": "timer_handle",
                "Channel": "channel",
                "pTVar1": "timer_instance"
            },
            "code": "HAL_StatusTypeDef set_timer_channel_to_inactive_state_0800412c(TIM_HandleTypeDef *timer_handle,uint32_t channel)\n{\n  TIM_TypeDef *timer_instance;\n  TIM_CCxNChannelCmd(timer_handle->Instance, channel, 0);\n  timer_instance = timer_handle->Instance;\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->BDTR = timer_instance->BDTR & 0xffff7fff;\n  }\n  timer_instance = timer_handle->Instance;\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 = timer_instance->CR1 & 0xfffffffe;\n  }\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800412c",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "set_timer_channel_to_inactive_state_0800412c"
        },
        "FUN_08007090": {
            "renaming": {
                "std::FUN_08007090": "abort_program",
                "FUN_08007090": "abort_program_08007090"
            },
            "code": "void abort_program_08007090(void)\n{\n    abort();\n}\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007090",
            "calling": [
                "operator()"
            ],
            "imported": false,
            "current_name": "abort_program_08007090"
        },
        "FUN_0800492c": {
            "renaming": {
                "FUN_0800492c": "get_adc_channel_0800492c",
                "pin": "pin",
                "uVar1": "function_index",
                "PTR_PinMap_ADC_08004944": "PTR_PinMap_ADC_08004944",
                "PinMap_conflict": "PinMap_conflict",
                "0xc": "12",
                "0x1b": "27"
            },
            "code": "uint32_t get_adc_channel_0800492c(PinName_conflict pin)\n{\n  uint32_t function_index = pinmap_function(pin, (PinMap_conflict *)PTR_PinMap_ADC_08004944);\n  uint32_t channel_index = (function_index << 12) >> 27;\n  if (channel_index > 15) {\n    channel_index = 0;\n  }\n  return channel_index;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800492c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_adc_channel_0800492c"
        },
        "FUN_08000cbc": {
            "renaming": {
                "FUN_08000cbc": "initialize_static_variables_08000cbc"
            },
            "code": "void initialize_static_variables_08000cbc(void)\n{\n  __static_initialization_and_destruction_0(1, 0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000cbc",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08000cbc"
        },
        "FUN_0800480a": {
            "renaming": {
                "FUN_0800480a": "set_pin_value_0800480a",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "pin_index"
            },
            "code": "void set_pin_value_0800480a(PinName_conflict pin, uint32_t *pin_map) {\n  uint32_t pin_index = (uint32_t)pin >> 28;\n  pin_map[pin_index] |= 1 << ((uint32_t)pin & 0xF);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800480a",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_pin_value_0800480a"
        },
        "FUN_080015f8": {
            "renaming": {
                "MAX31855::FUN_080015f8": "convertTemperature",
                "*this": "sensor",
                "unit": "unit",
                "uVar1": "rawData",
                "uVar2": "data",
                "uVar4": "resistance",
                "uVar5": "resistanceSquared",
                "dVar3": "temperature",
                "extraout_d0": "0.0",
                "extraout_d0_00": "-2447.576",
                "DAT_080016a0": "resistance",
                "DAT_080016a4": "0x7b14f5c28f5c28f6",
                "DAT_080016a8": "0x1.8p+5",
                "DAT_080016ac": "0x3.3333333333333333p-1",
                "DAT_080016b0": "32.0",
                "FUN_080015f8": "convertTemperature_080015f8"
            },
            "code": "double __thiscall convertTemperature_080015f8(MAX31855 *sensor, unit_t unit)\n{\n  ulong rawData = readData(sensor);\n  double temperature = 0.0;\n  if ((rawData & 0x10000) == 0) {\n    uint data = rawData >> 0x12;\n    ulonglong DAT_080016a0 = __floatunsidf(data & 0x1fff);\n    if ((data & 0x2000) != 0) {\n      ulonglong negativeResistance = __floatunsidf(~data & 0x1fff);\n      DAT_080016a0 = __aeabi_dadd((int)negativeResistance, (int)(negativeResistance >> 0x20), 0, DAT_080016a0);\n      DAT_080016a0 = DAT_080016a0 & 0xffffffff | (ulonglong)((int)(DAT_080016a0 >> 0x20) + 0x80000000) << 0x20;\n    }\n    ulonglong DAT_080016a0Squared = __muldf3((int)DAT_080016a0, (int)(DAT_080016a0 >> 0x20), 0, DAT_080016a4);\n    temperature = (double)__aeabi_dadd((int)DAT_080016a0Squared, (int)(DAT_080016a0Squared >> 0x20), 0, -2447.576)\n    if (unit == FAHRENHEIT) {\n      temperature = __muldf3((int)temperature, (int)((ulonglong)temperature >> 0x20), 0, DAT_080016a8);\n      temperature = __divdf3((int)temperature, (int)((ulonglong)temperature >> 0x20), 0, DAT_080016ac);\n      temperature = (double)__aeabi_dadd((int)temperature, (int)((ulonglong)temperature >> 0x20), 0, DAT_080016b0);\n    }\n  }\n  return temperature;\n}",
            "called": [
                "readData",
                "__muldf3",
                "__floatunsidf",
                "__divdf3",
                "__aeabi_dadd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015f8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "convertTemperature_080015f8"
        },
        "FUN_08005c38": {
            "renaming": {
                "FUN_08005c38": "initializeIPAddress_08005c38",
                "__initialize_p": "shouldInitialize",
                "__priority": "priorityLevel",
                "PTR_INADDR_NONE_08005c60": "PTR_INADDR_NONE",
                "IPAddress": "IPAddress"
            },
            "code": "void initializeIPAddress_08005c38(int shouldInitialize, int priorityLevel) {\n  if (shouldInitialize == 1 && priorityLevel == 0xffff) {\n    IPAddress::IPAddress((IPAddress*)PTR_INADDR_NONE_08005c60_08005c60, '\\0', '\\0', '\\0', '\\0');\n    return;\n  }\n  return;\n}",
            "called": [
                "IPAddress"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c38",
            "calling": [
                "_GLOBAL__sub_I__ZN9IPAddressC2Ev"
            ],
            "imported": false,
            "current_name": "initializeIPAddress_08005c38"
        },
        "FUN_08005f8c": {
            "renaming": {
                "FUN_08005f8c": "count_bits_set_to_1_08005f8c",
                "pin": "pin",
                "uVar1": "current_pin_state",
                "uVar2": "bit_count"
            },
            "code": "uint8_t count_bits_set_to_1_08005f8c(uint16_t pin)\n{\n  uint16_t current_pin_state = pin;\n  uint8_t bit_count = 0;\n  \n  while (current_pin_state != 1)\n  {\n    if (current_pin_state & 1)\n    {\n      bit_count++;\n    }\n    current_pin_state = current_pin_state >> 1;\n  }\n  \n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f8c",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "count_bits_set_to_1_08005f8c"
        },
        "FUN_08006f5a": {
            "renaming": {
                "FUN_08006f5a": "write_data_to_file_08006f5a",
                "param_1": "file_descriptor",
                "param_2": "data_offset",
                "param_3": "data",
                "param_4": "data_size"
            },
            "code": "void write_data_to_file_08006f5a(int file_descriptor, int data_offset, void* data, int data_size) {\n  int offset_value = (int)((uint)*(ushort *)(data_offset + 0xc) << 0x17);\n  if (offset_value < 0) {\n    _lseek_r(file_descriptor, (int)*(short *)(data_offset + 0xe), 0, 2);\n  }\n  *(ushort *)(data_offset + 0xc) = *(ushort *)(data_offset + 0xc) & 0xefff;\n  _write_r(file_descriptor, (int)*(short *)(data_offset + 0xe), data, data_size);\n  return;\n}",
            "called": [
                "_write_r",
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f5a",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_file_08006f5a"
        },
        "FUN_08000b08": {
            "renaming": {
                "FUN_08000b08": "initialize_components_08000b08",
                "__initialize_p": "should_initialize",
                "__priority": "priority",
                "PID": "oven_pid",
                "PTR_reflowOvenPID_08000b9c": "oven_pid_ref",
                "PTR_input_08000b98": "oven_pid_input",
                "PTR_output_08000b94": "oven_pid_output",
                "PTR_setpoint_08000b90": "oven_pid_setpoint",
                "PTR_kp_08000b8c": "oven_pid_kp",
                "PTR_ki_08000b88": "oven_pid_ki",
                "PTR_kd_08000b84": "oven_pid_kd",
                "LiquidCrystal": "lcd",
                "PTR_lcd_08000bb8": "lcd_ref",
                "PTR_lcdRsPin_08000ba0": "lcd_rs_pin",
                "PTR_lcdEPin_08000ba4": "lcd_e_pin",
                "PTR_lcdD4Pin_08000ba8": "lcd_d4_pin",
                "PTR_lcdD5Pin_08000bac": "lcd_d5_pin",
                "PTR_lcdD6Pin_08000bb0": "lcd_d6_pin",
                "PTR_lcdD7Pin_08000bb4": "lcd_d7_pin",
                "MAX31855": "thermocouple",
                "PTR_thermocouple_08000bc8": "thermocouple_ref",
                "PTR_thermocoupleSOPin_08000bc4": "thermocouple_so_pin",
                "PTR_thermocoupleCSPin_08000bc0": "thermocouple_cs_pin",
                "PTR_thermocoupleCLKPin_08000bbc": "thermocouple_clk_pin"
            },
            "code": "void initialize_components_08000b08(int should_initialize, int priority) {\n  if (should_initialize == 1 && priority == 0xffff) {\n    PID oven_pid(PTR_reflowOvenPID_08000b9c, PTR_input_08000b98, PTR_output_08000b94, PTR_setpoint_08000b90, *PTR_kp_08000b8c, *PTR_ki_08000b88, *PTR_kd_08000b84, 0);\n    LiquidCrystal lcd(PTR_lcd_08000bb8, *PTR_lcdRsPin_08000ba0, *PTR_lcdEPin_08000ba4, *PTR_lcdD4Pin_08000ba8, *PTR_lcdD5Pin_08000bac, *PTR_lcdD6Pin_08000bb0, *PTR_lcdD7Pin_08000bb4);\n    MAX31855 thermocouple(PTR_thermocouple_08000bc8, *PTR_thermocoupleSOPin_08000bc4, *PTR_thermocoupleCSPin_08000bc0, *PTR_thermocoupleCLKPin_08000bbc);\n  }\n}\n",
            "called": [
                "LiquidCrystal",
                "MAX31855",
                "PID"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b08",
            "calling": [
                "_GLOBAL__sub_I_lcdMessagesReflowStatus"
            ],
            "imported": false,
            "current_name": "initialize_components_08000b08"
        },
        "FUN_08006cb4": {
            "renaming": {
                "FUN_08006cb4": "initialize_data_08006cb4",
                "param_1": "data_address",
                "bVar3": "is_current_data_address",
                "iVar2": "current_data_address",
                "PTR__global_impure_ptr_08006d0c": "PTR_current_data_address",
                "DAT_08006d10": "default_data_value"
            },
            "code": "void initialize_data_08006cb4(int data_address)\n{\n  if (*(int *)(data_address + 0x18) == 0)\n  {\n    int is_current_data_address = (data_address == *(int *)PTR__global_impure_ptr_08006d0c);\n    if (is_current_data_address)\n    {\n      *(int *)(data_address + 0x18) = 1;\n    }\n    else\n    {\n      *(int *)(data_address + 0x48) = 0;\n      *(int *)(data_address + 0x4c) = 0;\n      *(int *)(data_address + 0x50) = 0;\n      *(int *)(data_address + 0x28) = DAT_08006d10;\n      *(int *)(data_address + 0x4) = __sfp();\n      *(int *)(data_address + 0x8) = __sfp(data_address);\n      *(int *)(data_address + 0xc) = __sfp(data_address);\n      std_isra_0(*(int *)(data_address + 4), 4, 0);\n      std_isra_0(*(int *)(data_address + 8), 9, 1);\n      std_isra_0(*(int *)(data_address + 0xc), 0x12, 2);\n      *(int *)(data_address + 0x18) = 1;\n    }\n  }\n}",
            "called": [
                "std.isra.0",
                "__sfp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cb4",
            "calling": [
                "_vfiprintf_r",
                "__swsetup_r",
                "_fflush_r",
                "__sfp",
                "__swbuf_r",
                "iprintf"
            ],
            "imported": false,
            "current_name": "initialize_data_08006cb4"
        },
        "FUN_08004c5e": {
            "renaming": {
                "FUN_08004c5e": "find_peripheral_for_pin_08004c5e",
                "pin": "desired_pin",
                "map": "pin_map"
            },
            "code": "void* find_peripheral_for_pin_08004c5e(PinName_conflict pin, PinMap_conflict* pin_map) {\n  while(true) {\n    if(pin_map->pin == NC) {\n      return (void*)0x0;\n    }\n    if(pin_map->pin == pin) {\n      break;\n    }\n    pin_map++;\n  }\n  return pin_map->peripheral;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c5e",
            "calling": [
                "pinmap_find_peripheral",
                "pinmap_peripheral"
            ],
            "imported": false,
            "current_name": "find_peripheral_for_pin_08004c5e"
        },
        "FUN_08007098": {
            "renaming": {
                "std::ctype_byname<char>::FUN_08007098": "set_ctype_flags",
                "PTR_id_0800712c": "flag1",
                "PTR_id_08007130": "flag2",
                "PTR_id_08007134": "flag3",
                "PTR_id_08007138": "flag4",
                "PTR_id_0800713c": "flag5",
                "PTR_id_08007140": "flag6",
                "PTR_id_08007144": "flag7",
                "PTR_id_08007148": "flag8",
                "PTR_id_0800714c": "flag9",
                "PTR_id_08007150": "flag10",
                "PTR_id_08007154": "flag11",
                "PTR_id_08007158": "flag12",
                "FUN_08007098": "set_ctype_flags_08007098"
            },
            "code": "void set_ctype_flags_08007098(void)\n{\n  if (PTR_id_0800712c < 0)\n    PTR_id_0800712c = 1;\n  if (PTR_id_08007130 < 0)\n    PTR_id_08007130 = 1;\n  if (PTR_id_08007134 < 0)\n    PTR_id_08007134 = 1;\n  if (PTR_id_08007138 < 0)\n    PTR_id_08007138 = 1;\n  if (PTR_id_0800713c < 0)\n    PTR_id_0800713c = 1;\n  if (PTR_id_08007140 < 0)\n    PTR_id_08007140 = 1;\n  if (PTR_id_08007144 < 0)\n    PTR_id_08007144 = 1;\n  if (PTR_id_08007148 < 0)\n    PTR_id_08007148 = 1;\n  if (PTR_id_0800714c < 0)\n    PTR_id_0800714c = 1;\n  if (PTR_id_08007150 < 0)\n    PTR_id_08007150 = 1;\n  if (PTR_id_08007154 < 0)\n    PTR_id_08007154 = 1;\n  if (PTR_id_08007158 < 0)\n    PTR_id_08007158 = 1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007098",
            "calling": [],
            "imported": false,
            "current_name": "set_ctype_flags_08007098"
        },
        "FUN_08004b3c": {
            "renaming": {
                "FUN_08004b3c": "stop_pwm_signal_on_pin_08004b3c",
                "pin": "pin_name",
                "Channel": "channel_number",
                "uVar1": "pin_function",
                "timHandle": "tim_handle"
            },
            "code": "void stop_pwm_signal_on_pin_08004b3c(PinName_conflict pin)\n{\n  uint32_t channel_number;\n  uint32_t pin_function;\n  TIM_HandleTypeDef tim_handle;\n  tim_handle.Instance = (TIM_TypeDef *)pinmap_peripheral(pin,(PinMap_conflict *)PTR_PinMap_PWM_08004b90);\n  if ((tim_handle.Instance != (TIM_TypeDef *)0x0) &&\n     ((((channel_number = get_pwm_channel(pin), channel_number == 0 || (channel_number == 4)) || (channel_number == 8)) ||\n      ((channel_number == 0xc || (channel_number == 0x18)))))) {\n    pin_function = pinmap_function(pin,(PinMap_conflict *)PTR_PinMap_PWM_08004b90);\n    if ((pin_function & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(&tim_handle,channel_number);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(&tim_handle,channel_number);\n    }\n    HAL_TIM_PWM_DeInit(&tim_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIMEx_PWMN_Stop",
                "pinmap_function",
                "HAL_TIM_PWM_DeInit",
                "get_pwm_channel",
                "HAL_TIM_PWM_Stop",
                "pinmap_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b3c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "stop_pwm_signal_on_pin_08004b3c"
        },
        "FUN_08001550": {
            "renaming": {
                "FUN_08001550": "sendLocationAndCharsToLCD_08001550",
                "this": "lcd",
                "location": "location",
                "charmap": "charmap",
                "iVar1": "index",
                "send": "send",
                "byte": "locationByte",
                "super_Print": "super_Print"
            },
            "code": "void __thiscall sendLocationAndCharsToLCD_08001550(LiquidCrystal *lcd, uint8_t location, uint8_t *charmap)\\n{\\n  int index;\\n  uint8_t locationByte = (location & 7) << 3;\\n  locationByte |= 0x40;\\n  send(lcd, locationByte, \"\\0\");\\n  for (index = 0; index < 8; index++) {\\n    (**(lcd->super_Print)._vptr_Print)(lcd, (uint)charmap[index]);\\n  }\\n  return;\\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001550",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "sendLocationAndCharsToLCD_08001550"
        },
        "FUN_08000cd0": {
            "renaming": {
                "FUN_08000cd0": "FUNC_08000cd0"
            },
            "code": "\nvoid FUNC_08000cd0(void)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint32_t uVar4;\n  undefined *puVar5;\n  int iVar6;\n  undefined4 extraout_r1;\n  uint uVar7;\n  int digits;\n  int digits_00;\n  int digits_01;\n  undefined8 uVar8;\n  undefined4 in_stack_ffffffe4;\n  \n  uVar4 = millis();\n  if (*(uint *)PTR_nextRead_08000f50 < uVar4) {\n    *(uint *)PTR_nextRead_08000f50 = *(uint *)PTR_nextRead_08000f50 + 1000;\n    puVar5 = PTR_thermocouple_08000f74;\n    MAX31855::readThermocouple((MAX31855 *)PTR_thermocouple_08000f74,CELSIUS);\n    puVar2 = PTR_input_08000f6c;\n    *(undefined **)PTR_input_08000f6c = puVar5;\n    *(undefined4 *)(puVar2 + 4) = extraout_r1;\n    iVar6 = __aeabi_dcmpeq();\n    if (((iVar6 != 0) ||\n        (iVar6 = __aeabi_dcmpeq(puVar5,extraout_r1,DAT_08000f20,DAT_08000f24), iVar6 != 0)) ||\n       (iVar6 = __aeabi_dcmpeq(puVar5,extraout_r1,DAT_08000f28,DAT_08000f2c), iVar6 != 0)) {\n      *PTR_reflowState_08000f64 = 7;\n      *PTR_reflowStatus_08000f58 = 0;\n    }\n  }\n  uVar4 = millis();\n  if (*(uint *)PTR_nextCheck_08000f54 < uVar4) {\n    *(uint *)PTR_nextCheck_08000f54 = *(uint *)PTR_nextCheck_08000f54 + 1000;\n    if (*PTR_reflowStatus_08000f58 == '\\x01') {\n      uVar4 = *(uint32_t *)PTR_ledRedPin_08000f5c;\n      iVar6 = digitalRead(uVar4);\n      uVar7 = count_leading_zeroes(iVar6);\n      digitalWrite(uVar4,uVar7 >> 5);\n      iVar6 = *(int *)PTR_timerSeconds_08000f78;\n      *(int *)PTR_timerSeconds_08000f78 = iVar6 + 1;\n      puVar2 = PTR_Serial2_08000f7c;\n      Print::print((Print *)PTR_Serial2_08000f7c,iVar6 + 1,10);\n      puVar5 = PTR_DAT_08000f80;\n      Print::print((Print *)puVar2,PTR_DAT_08000f80);\n      Print::print((Print *)puVar2,(double)CONCAT44(in_stack_ffffffe4,2),digits);\n      Print::print((Print *)puVar2,puVar5);\n      Print::print((Print *)puVar2,(double)CONCAT44(in_stack_ffffffe4,2),digits_00);\n      Print::print((Print *)puVar2,puVar5);\n      Print::println((Print *)puVar2,(double)CONCAT44(in_stack_ffffffe4,2),digits_01);\n    }\n    else {\n      digitalWrite(*(uint32_t *)PTR_ledRedPin_08000f5c,1);\n    }\n    puVar2 = PTR_lcd_08000f60;\n    LiquidCrystal::clear((LiquidCrystal *)PTR_lcd_08000f60);\n    puVar3 = PTR_reflowState_08000f64;\n    Print::print((Print *)puVar2,\n                 *(char **)(PTR_lcdMessagesReflowStatus_08000f68 +\n                           (uint)(byte)*PTR_reflowState_08000f64 * 4));\n    LiquidCrystal::setCursor((LiquidCrystal *)puVar2,'\\0','\\x01');\n    puVar5 = PTR_lcd_08000f60;\n    if (*puVar3 == '\\a') {\n      Print::print((Print *)puVar2,PTR_s_TC_Error__08000f8c);\n    }\n    else {\n      Print::print((Print *)PTR_lcd_08000f60,(double)CONCAT44(in_stack_ffffffe4,2),2);\n      LiquidCrystal::write((LiquidCrystal *)puVar5,'\\0');\n      Print::print((Print *)puVar5,PTR_DAT_08000f70);\n    }\n  }\n  if ((byte)*PTR_reflowState_08000f64 < 8) {\n                    /* WARNING: Could not recover jumptable at 0x08000d5c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_08000d5c::switchdataD_08000d60 +\n              (&switchD_08000d5c::switchdataD_08000d60)[(byte)*PTR_reflowState_08000f64]))();\n    return;\n  }\n  if ((*PTR_switchStatus_08001274 == '\\x01') && (*PTR_reflowStatus_0800126c == '\\x01')) {\n    *PTR_reflowStatus_0800126c = 0;\n    *PTR_reflowState_08001258 = 0;\n  }\n  cVar1 = *PTR_debounceState_08001278;\n  if (cVar1 == '\\x01') {\n    uVar4 = analogRead(*(uint32_t *)PTR_switchPin_08001280);\n    if (uVar4 == 0) {\n      uVar4 = millis();\n      if (0x32 < uVar4 - *(int *)PTR_lastDebounceTime_08001284) {\n        *PTR_debounceState_08001278 = 2;\n      }\n    }\n    else {\n      *PTR_debounceState_08001278 = 0;\n    }\n  }\n  else if (cVar1 == '\\0') {\n    *PTR_switchStatus_08001274 = 0;\n    uVar4 = analogRead(*(uint32_t *)PTR_switchPin_08001280);\n    if (uVar4 == 0) {\n      uVar4 = millis();\n      *(uint32_t *)PTR_lastDebounceTime_08001284 = uVar4;\n      *PTR_debounceState_08001278 = 1;\n    }\n  }\n  else if ((cVar1 == '\\x02') &&\n          (uVar4 = analogRead(*(uint32_t *)PTR_switchPin_08001280), uVar4 != 0)) {\n    *PTR_switchStatus_08001274 = 1;\n    *PTR_debounceState_08001278 = 0;\n  }\n  if (*PTR_reflowStatus_0800126c == '\\x01') {\n    uVar4 = millis();\n    PID::Compute((PID *)PTR_reflowOvenPID_08001250);\n    if (*(uint *)PTR_windowSize_0800128c < uVar4 - *(int *)PTR_windowStartTime_08001288) {\n      *(uint *)PTR_windowStartTime_08001288 =\n           *(int *)PTR_windowStartTime_08001288 + *(uint *)PTR_windowSize_0800128c;\n    }\n    uVar8 = __floatunsidf(uVar4 - *(int *)PTR_windowStartTime_08001288);\n    iVar6 = __aeabi_dcmplt((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),\n                           *(undefined4 *)PTR_output_08001290,\n                           *(undefined4 *)(PTR_output_08001290 + 4));\n    if (iVar6 == 0) {\n      digitalWrite(*(uint32_t *)PTR_ssrPin_0800127c,0);\n    }\n    else {\n      digitalWrite(*(uint32_t *)PTR_ssrPin_0800127c,1);\n    }\n  }\n  else {\n    digitalWrite(*(uint32_t *)PTR_ssrPin_0800127c,0);\n  }\n  return;\n}\n\n",
            "called": [
                "digitalRead",
                "println",
                "print",
                "analogRead",
                "print",
                "setCursor",
                "digitalWrite",
                "write",
                "__aeabi_dadd",
                "__aeabi_dcmple",
                "SetSampleTime",
                "clear",
                "__aeabi_dcmplt",
                "__floatunsidf",
                "Compute",
                "millis",
                "__aeabi_dcmpeq",
                "println",
                "__aeabi_dcmpge",
                "print",
                "SetMode",
                "SetOutputLimits",
                "__aeabi_dcmpgt",
                "SetTunings",
                "readThermocouple",
                "__floatsidf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cd0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUNC_08000cd0"
        },
        "FUN_08001310": {
            "renaming": {
                "FUN_08001310": "set_pin_mode_08001310",
                "this": "self",
                "value": "value",
                "mode": "mode",
                "_rs_pin": "_rs_pin",
                "_rw_pin": "_rw_pin",
                "_displayfunction": "_displayfunction",
                "write4bits": "write_4_bits",
                "write8bits": "write_8_bits"
            },
            "code": "void __thiscall set_pin_mode_08001310(LiquidCrystal *self, uint8_t value, uint8_t mode) {\n  digitalWrite((uint)self->_rs_pin, (uint)mode);\n  if (self->_rw_pin != 0xff) {\n    digitalWrite((uint)self->_rw_pin, LOW);\n  }\n  if ((self->_displayfunction & 0x10) == 0) {\n    write_4_bits(self, value >> 4);\n    write_4_bits(self, value);\n    return;\n  }\n  write_8_bits(self, value);\n  return;\n}",
            "called": [
                "digitalWrite",
                "write4bits",
                "write8bits"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001310",
            "calling": [
                "setCursor",
                "clear",
                "createChar",
                "display",
                "write",
                "begin"
            ],
            "imported": false,
            "current_name": "set_pin_mode_08001310"
        },
        "FUN_080009a8": {
            "renaming": {
                "FUN_080009a8": "compare_double_values_080009a8",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "result_buffer",
                "param_4": "buffer_size"
            },
            "code": "void compare_double_values_080009a8(float value1, float value2, int result_buffer, int buffer_size){\n\t__aeabi_cdcmpeq(value1, value2, result_buffer, buffer_size);\n\treturn;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a8",
            "calling": [
                "__aeabi_dcmpgt",
                "__aeabi_dcmpge"
            ],
            "imported": false,
            "current_name": "compare_double_values_080009a8"
        },
        "FUN_08004d90": {
            "renaming": {
                "FUN_08004d90": "update_timer_status_08004d90",
                "htim": "timer",
                "Instance": "timer_instance",
                "DAT_08004de4": "timer1",
                "uint": "unsigned_int",
                "DAT_08004df0": "timer_status",
                "DAT_08004de8": "timer3",
                "DAT_08004dec": "timer4"
            },
            "code": "void update_timer_status_08004d90(TIM_HandleTypeDef *timer)\n{\n  if (timer->Instance == DAT_08004de4) {\n    *(uint *)(DAT_08004df0 + 0x18) = *(uint *)(DAT_08004df0 + 0x18) & 0xfffff7ff;\n  }\n  if (timer->Instance == timer2) {\n    *(uint *)(DAT_08004df0 + 0x1c) = *(uint *)(DAT_08004df0 + 0x1c) & 0xfffffffe;\n  }\n  if (timer->Instance == DAT_08004de8) {\n    *(uint *)(DAT_08004df0 + 0x1c) = *(uint *)(DAT_08004df0 + 0x1c) & 0xfffffffd;\n  }\n  if (timer->Instance == DAT_08004dec) {\n    *(uint *)(DAT_08004df0 + 0x1c) = *(uint *)(DAT_08004df0 + 0x1c) & 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d90",
            "calling": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "imported": false,
            "current_name": "update_timer_status_08004d90"
        },
        "FUN_08005ce8": {
            "renaming": {
                "__thiscall Print::FUN_08005ce8": "size_t Print::printNumber(Print *this, ulong number, uint8_t base)",
                "this": "*this",
                "n": "number",
                "base": "base",
                "cVar1": "charValue",
                "sVar2": "length",
                "sVar3": "result",
                "uVar4": "remainder",
                "uVar5": "baseValue",
                "uVar6": "quotient",
                "__s": "ptr",
                "buf": "buffer",
                "FUN_08005ce8": "Print::printNumber_08005ce8"
            },
            "code": "size_t Print::printNumber_08005ce8(Print *this, ulong number, uint8_t base) {\n  char charValue;\n  size_t length;\n  size_t result;\n  uint baseValue;\n  uint quotient;\n  uint remainder;\n  char buffer[33];\n  buffer[32] = '\\0';\n  if (base < 2) {\n    baseValue = 10;\n  } else {\n    baseValue = (uint)base;\n  }\n  char *ptr = buffer + 0x20;\n  do {\n    quotient = number / baseValue;\n    remainder = (number & 0xff) - (quotient * baseValue & 0xff) & 0xff;\n    ptr = ptr + -1;\n    if (remainder < 10) {\n      charValue = remainder + '0';\n    } else {\n      charValue = remainder + '7';\n    }\n    *ptr = charValue;\n    number = quotient;\n  } while (quotient != 0);\n  if (ptr == (char *)0x0) {\n    length = 0;\n  } else {\n    length = strlen(ptr);\n    result = (*this->_vptr_Print[1])(length, ptr, length);\n  }\n  return result;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ce8",
            "calling": [
                "print",
                "print"
            ],
            "imported": false,
            "current_name": "Print::printNumber_08005ce8"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "handle_I2C_events_0800316c",
                "hi2c": "I2C_handle",
                "HVar1": "status",
                "puVar2": "buffer",
                "pIVar3": "instance",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "PreviousState": "previous_state",
                "State": "state",
                "HAL_I2C_STATE_LISTEN": "I2C_STATE_LISTEN",
                "HAL_I2C_STATE_ABORT": "I2C_STATE_ABORT",
                "Instance": "instance",
                "CR1": "control_register_1",
                "CR2": "control_register_2",
                "SR1": "status_register_1",
                "DR": "data_register",
                "hdmatx": "DMA_handle_tx",
                "hdmarx": "DMA_handle_rx",
                "HAL_DMA_STATE_READY": "DMA_STATE_READY",
                "XferAbortCallback": "abort_transfer_callback",
                "HAL_DMA_Abort_IT": "abort_DMA_transfer",
                "HAL_I2C_AbortCpltCallback": "I2C_abort_complete_callback",
                "HAL_I2C_ErrorCallback": "I2C_error_callback",
                "error_code": "error_code",
                "xfer_options": "transfer_options",
                "I2C_XFER_OPTIONS_LOCK": "XFER_OPTIONS_LOCK",
                "HAL_I2C_ListenCpltCallback": "I2C_listen_complete_callback",
                "Mode": "mode",
                "HAL_I2C_MODE_NONE": "I2C_MODE_NONE"
            },
            "code": "void handle_I2C_events_0800316c(I2C_HandleTypeDef *hi2c) {\n  HAL_StatusTypeDef status;\n  uint8_t *buffer;\n  I2C_TypeDef *instance;\n  if ((byte)hi2c->state - 0x29 < 2) {\n    hi2c->previous_state = 0;\n    hi2c->state = HAL_I2C_STATE_LISTEN;\n  }\n  else {\n    if ((hi2c->state != HAL_I2C_STATE_ABORT) && ((hi2c->instance->CR2 & 0x800) == 0)) {\n      hi2c->state = HAL_I2C_STATE_READY;\n    }\n    hi2c->previous_state = 0;\n    hi2c->mode = HAL_I2C_MODE_NONE;\n  }\n  hi2c->instance->CR1 &= 0xfffff7ff;\n  instance = hi2c->instance;\n  if ((instance->CR2 & 0x800) == 0) {\n    if (hi2c->state == HAL_I2C_STATE_ABORT) {\n      hi2c->state = HAL_I2C_STATE_READY;\n      hi2c->error_code = 0;\n      if ((instance->SR1 & 0x40) != 0) {\n        buffer = hi2c->p_buff_ptr;\n        hi2c->p_buff_ptr = buffer + 1;\n        *buffer = (uint8_t)instance->DR;\n      }\n      hi2c->instance->CR1 &= 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(hi2c);\n    }\n    else {\n      if ((instance->SR1 & 0x40) != 0) {\n        buffer = hi2c->p_buff_ptr;\n        hi2c->p_buff_ptr = buffer + 1;\n        *buffer = (uint8_t)instance->DR;\n      }\n      HAL_I2C_ErrorCallback(hi2c);\n    }\n  }\n  else {\n    instance->CR2 &= 0xfffff7ff;\n    if (hi2c->hdmatx->state == HAL_DMA_STATE_READY) {\n      hi2c->hdmarx->XferAbortCallback = handle_I2C_DMA_receive_abort;\n      status = HAL_DMA_Abort_IT(hi2c->hdmarx);\n      if (status != HAL_OK) {\n        if ((instance->SR1 & 0x40) != 0) {\n          buffer = hi2c->p_buff_ptr;\n          hi2c->p_buff_ptr = buffer + 1;\n          *buffer = (uint8_t)instance->DR;\n        }\n        hi2c->instance->CR1 &= 0xfffffffe;\n        hi2c->state = HAL_I2C_STATE_READY;\n        (*hi2c->hdmarx->XferAbortCallback)(hi2c->hdmarx);\n      }\n    }\n    else {\n      hi2c->hdmatx->XferAbortCallback = handle_I2C_DMA_transmit_abort;\n      status = HAL_DMA_Abort_IT(hi2c->hdmatx);\n      if (status != HAL_OK) {\n        hi2c->instance->CR1 &= 0xfffffffe;\n        hi2c->state = HAL_I2C_STATE_READY;\n        (*hi2c->hdmatx->XferAbortCallback)(hi2c->hdmatx);\n      }\n    }\n  }\n  if ((hi2c->state == HAL_I2C_STATE_LISTEN) && ((hi2c->error_code & 4) != 0)) {\n    hi2c->xfer_options = I2C_XFER_OPTIONS_LOCK;\n    hi2c->previous_state = 0;\n    hi2c->state = HAL_I2C_STATE_READY;\n    hi2c->mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(hi2c);\n  }\n  return;\n}",
            "called": [
                "HAL_DMA_Abort_IT",
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "handle_I2C_events_0800316c"
        },
        "FUN_08004828": {
            "renaming": {
                "FUN_08004828": "update_pin_map_08004828",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "pin_index",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void update_pin_map_08004828(PinName_conflict pin, uint32_t *pin_map)\n{\n  uint32_t pin_index = (uint32_t)(pin >> 28);\n  uint32_t pin_bit = (uint32_t)(pin & 0x0F);\n  pin_map[pin_index] &= ~(1 << pin_bit);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004828",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "update_pin_map_08004828"
        },
        "FUN_08004948": {
            "renaming": {
                "FUN_08004948": "get_pwm_pin_frequency_08004948",
                "pin": "pin_name",
                "uVar1": "function_value",
                "uVar2": "frequency_index"
            },
            "code": "uint32_t get_pwm_pin_frequency_08004948(PinName_conflict pin)\n{\n  uint32_t function_value = pinmap_function(pin, (PinMap_conflict*)PTR_PinMap_PWM_08004970);\n  uint frequency_index = (function_value << 12) >> 27;\n  if (frequency_index == 3) {\n    return 8000000;\n  }\n  if (frequency_index != 4) {\n    if (frequency_index != 2) {\n      return 0;\n    }\n    return 4000000;\n  }\n  return 12000000;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004948",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "get_pwm_pin_frequency_08004948"
        },
        "FUN_0800316a": {
            "renaming": {
                "FUN_0800316a": "do_nothing_0800316a"
            },
            "code": "\nvoid do_nothing_0800316a(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316a",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "do_nothing_0800316a"
        },
        "FUN_08005b24": {
            "renaming": {
                "FUN_08005b24": "setReceivePin_08005b24",
                "_rx": "receivePin",
                "PVar1": "pin",
                "PTR_digitalPin_08005b38": "digitalPin"
            },
            "code": "void __thiscall setReceivePin_08005b24(HardwareSerial *this,uint32_t receivePin)\n{\n  PinName pin;\n  if (receivePin < 0x3c) {\n    pin = PTR_digitalPin_08005b38[receivePin];\n  }\n  else {\n    pin = NC;\n  }\n  (this->serial).pin_rx = pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b24",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "setReceivePin_08005b24"
        },
        "FUN_080049f0": {
            "renaming": {
                "FUN_080049f0": "update_adc_registers_080049f0",
                "hadc": "adc_handle",
                "iVar1": "base_address",
                "DAT_08004a48": "base_address",
                "DAT_08004a40": "adc1_instance",
                "DAT_08004a44": "adc2_instance"
            },
            "code": "void update_adc_registers_080049f0(ADC_HandleTypeDef *adc_handle)\n{\n  int DAT_08004a48 = DAT_08004a48;\n  if (adc_handle->Instance != DAT_08004a40) {\n    if (adc_handle->Instance == DAT_08004a44) {\n      uint *reg_c = (uint *)(DAT_08004a48 + 0xc);\n      *reg_c |= 0x400;\n      uint *reg_18 = (uint *)(DAT_08004a48 + 0x18);\n      *reg_18 &= 0xfffffbff;\n    }\n    return;\n  }\n  uint *reg_c = (uint *)(DAT_08004a48 + 0xc);\n  *reg_c |= 0x200;\n  uint *reg_18 = (uint *)(DAT_08004a48 + 0x18);\n  *reg_18 &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049f0",
            "calling": [
                "HAL_ADC_DeInit"
            ],
            "imported": false,
            "current_name": "update_adc_registers_080049f0"
        },
        "FUN_08001e40": {
            "renaming": {
                "FUN_08001e40": "get_ADC_value_08001e40",
                "hadc": "adc_handle",
                "Instance": "adc_instance",
                "DR": "adc_data_register"
            },
            "code": "uint32_t get_ADC_value_08001e40(ADC_HandleTypeDef *adc_handle)\n{\n  return adc_handle->Instance->DR;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e40",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_ADC_value_08001e40"
        },
        "FUN_08003a68": {
            "renaming": {
                "FUN_08003a68": "calculate_value_08003a68",
                "uVar1": "value",
                "uVar2": "flag",
                "local_1c": "local_value",
                "abStack_18": "stack_value",
                "uStack_14": "constant",
                "uStack_10": "flag",
                "uStack_c": "constant",
                "DAT_08003ac8": "condition",
                "DAT_08003ad0": "constant",
                "PTR__etext_08003ac4": "constant"
            },
            "code": "unsigned int calculate_value_08003a68(void)\n{\n  unsigned int value = 0;\n  unsigned int flag = *(unsigned int *)(PTR__etext_08003ac4 + 4);\n  unsigned int DAT_08003ac8 = *(unsigned int *)(DAT_08003ac8 + 4);\n  unsigned short local_value = *(unsigned short *)(PTR__etext_08003ac4 + 0x10);\n  unsigned int DAT_08003ad0 = *(unsigned int *)(PTR__etext_08003ac4);\n  unsigned char stack_value = *(unsigned char *)(DAT_08003ac8 << 10 >> 0x1c);\n  if ((DAT_08003ac8 & 0xc) == 8)\n  {\n    if ((DAT_08003ac8 & 0x10000) == 0)\n    {\n      value = DAT_08003ad0 * (unsigned int)stack_value;\n    }\n    else\n    {\n      value = (DAT_08003ad0 * (unsigned int)stack_value) / (unsigned int)*(unsigned char *)((int)&local_value - ((*(int *)(DAT_08003ac8 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a68",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_value_08003a68"
        },
        "FUN_080012a2": {
            "renaming": {
                "__thiscall LiquidCrystal::FUN_080012a2": "pulse_enable_pin",
                "this": "lcd",
                "_enable_pin": "enable_pin",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "FUN_080012a2": "pulse_enable_pin_080012a2"
            },
            "code": "void pulse_enable_pin_080012a2(LiquidCrystal *lcd) {\n  const uint8_t enable_pin = lcd->_enable_pin;\n  digitalWrite(enable_pin, LOW);\n  digitalWrite(enable_pin, HIGH);\n  digitalWrite(enable_pin, LOW);\n}",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012a2",
            "calling": [
                "write4bits",
                "write8bits"
            ],
            "imported": false,
            "current_name": "pulse_enable_pin_080012a2"
        },
        "FUN_08004c78": {
            "renaming": {
                "FUN_08004c78": "find_peripheral_pin_08004c78",
                "pin": "pin_name",
                "map": "pin_map",
                "pvVar1": "peripheral"
            },
            "code": "void * find_peripheral_pin_08004c78(PinName_conflict pin, PinMap_conflict *pin_map) {\n  void *peripheral;\n  if (pin != NC) {\n    peripheral = pinmap_find_peripheral(pin, pin_map);\n    return peripheral;\n  }\n  return (void *)0x0;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c78",
            "calling": [
                "uart_debug_init",
                "pwm_stop",
                "adc_read_value",
                "uart_debug_write",
                "uart_init"
            ],
            "imported": false,
            "current_name": "find_peripheral_pin_08004c78"
        },
        "FUN_08005bd4": {
            "renaming": {
                "FUN_08005bd4": "initialize_static_variables_08005bd4"
            },
            "code": "void initialize_static_variables_08005bd4(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bd4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08005bd4"
        },
        "FUN_08001e48": {
            "renaming": {
                "FUN_08001e48": "configure_ADC_08001e48",
                "hadc": "adc_handle",
                "sConfig": "channel_config",
                "HVar1": "status",
                "uVar2": "rank",
                "pAVar3": "adc_instance",
                "wait_loop_index": "wait_loop_index"
            },
            "code": "HAL_StatusTypeDef_conflict configure_ADC_08001e48(ADC_HandleTypeDef *adc_handle, ADC_ChannelConfTypeDef *channel_config)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t rank;\n  ADC_TypeDef *adc_instance;\n  uint32_t wait_loop_index;\n  \n  if (adc_handle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    adc_handle->Lock = HAL_LOCKED;\n    rank = channel_config->Rank;\n    if (rank < 7) {\n      rank = rank * 5 - 5;\n      adc_handle->Instance->SQR3 =\n           channel_config->Channel << (rank & 0xff) | adc_handle->Instance->SQR3 & ~(0x1f << (rank & 0xff));\n    }\n    else if (rank < 0xd) {\n      rank = rank * 5 - 0x23;\n      adc_handle->Instance->SQR2 =\n           channel_config->Channel << (rank & 0xff) | adc_handle->Instance->SQR2 & ~(0x1f << (rank & 0xff));\n    }\n    else {\n      rank = rank * 5 - 0x41;\n      adc_handle->Instance->SQR1 =\n           channel_config->Channel << (rank & 0xff) | adc_handle->Instance->SQR1 & ~(0x1f << (rank & 0xff));\n    }\n    rank = channel_config->Channel;\n    if (rank < 10) {\n      adc_handle->Instance->SMPR2 =\n           channel_config->SamplingTime << (rank * 3 & 0xff) |\n           adc_handle->Instance->SMPR2 & ~(7 << (rank * 3 & 0xff));\n    }\n    else {\n      rank = rank * 3 - 0x1e;\n      adc_handle->Instance->SMPR1 =\n           channel_config->SamplingTime << (rank & 0xff) | adc_handle->Instance->SMPR1 & ~(7 << (rank & 0xff));\n    }\n    if (channel_config->Channel - 0x10 < 2) {\n      adc_instance = adc_handle->Instance;\n      if (adc_instance == DAT_08001f74) {\n        if ((adc_instance->CR2 & 0x800000) == 0) {\n          adc_instance->CR2 = adc_instance->CR2 | 0x800000;\n          if (channel_config->Channel == 0x10) {\n            for (wait_loop_index = (uint32_t)((uint64_t)DAT_08001f7c * (uint64_t)*(uint32_t *)PTR_SystemCoreClock_08001f78 >> 0x32) * 10; wait_loop_index != 0; wait_loop_index = wait_loop_index - 1) {\n            }\n            status = HAL_OK;\n          }\n          else {\n            status = HAL_OK;\n          }\n        }\n        else {\n          status = HAL_OK;\n        }\n      }\n      else {\n        adc_handle->State = adc_handle->State | 0x20;\n        status = HAL_ERROR;\n      }\n    }\n    else {\n      status = HAL_OK;\n    }\n    adc_handle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e48",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "configure_ADC_08001e48"
        },
        "FUN_080059c8": {
            "renaming": {
                "FUN_080059c8": "write_byte_080059c8",
                "this": "serial",
                "c": "byte_to_write",
                "_written": "write_success",
                "_serial": "serial->_serial",
                "tx_head": "tx_head",
                "uVar2": "tx_active",
                "serial_tx_active": "serial_tx_active",
                "uart_attach_tx_callback": "uart_attach_tx_callback"
            },
            "code": "size_t __thiscall write_byte_080059c8(HardwareSerial *serial, uint8_t byte_to_write) {\\n  bool write_success = true;\\n  uint tx_head = (uint)(serial->_serial).tx_head;\\n  int next_tx_head = tx_head + 1;\\n  byte new_tx_head = (byte)next_tx_head & 0x7f;\\n  if (next_tx_head == 0) {\\n    new_tx_head = -(-new_tx_head & 0x7f);\\n  }\\n  do {\\n  } while ((serial->_serial).tx_tail == (ushort)new_tx_head);\\n  (serial->_serial).tx_buff[tx_head] = byte_to_write;\\n  (serial->_serial).tx_head = (ushort)new_tx_head;\\n  uint8_t tx_active = serial_tx_active((serial_t *)&serial->_serial);\\n  if (tx_active == \"\\0\") {\\n    uart_attach_tx_callback((serial_t *)&serial->_serial,DAT_08005a14);\\n  }\\n  return 1;\\n}",
            "called": [
                "serial_tx_active",
                "uart_attach_tx_callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059c8",
            "calling": [],
            "imported": false,
            "current_name": "write_byte_080059c8"
        },
        "FUN_080009b8": {
            "renaming": {
                "FUN_080009b8": "compare_floats_080009b8",
                "param_1": "num1",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "undefined4 compare_floats_080009b8(float num1, float num2)\n{\n  __eqdf2(num1, num2);\n  return 0;\n}",
            "called": [
                "__eqdf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b8",
            "calling": [
                "__aeabi_dcmplt",
                "__aeabi_cdrcmple",
                "__aeabi_dcmpeq",
                "__aeabi_dcmple"
            ],
            "imported": false,
            "current_name": "compare_floats_080009b8"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "calculate_shifted_value_08000aa8",
                "param_1": "value",
                "param_2": "shift_amount",
                "iVar1": "intermediate_value",
                "uVar2": "shift_result"
            },
            "code": "uint calculate_shifted_value_08000aa8(uint value, uint shift_amount)\n{\n  int intermediate_value;\n  uint shift_result;\n  \n  if ((shift_amount & 0x80000000) != 0) {\n    return 0;\n  }\n  intermediate_value = shift_amount * 2 + 0x200000;\n  if (shift_amount * 2 < 0xffe00000) {\n    if (-1 < intermediate_value) {\n      return 0;\n    }\n    shift_result = -(intermediate_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_result) {\n      return (shift_amount << 0xb | 0x80000000 | value >> 0x15) >> (shift_result & 0xff);\n    }\n  }\n  else if ((value | shift_amount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "printFloat"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08000aa8"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "is_not_greater_than_or_equal_to_zero_08000a04",
                "in_CY": "is_greater_than_or_equal_to_zero",
                "in_ZR": "is_equal_to_zero"
            },
            "code": "bool is_not_greater_than_or_equal_to_zero_08000a04(void)\n{\n  bool is_less_than_zero = __aeabi_cdrcmple();\n  return !is_less_than_zero || !(bool)in_ZR;\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "SetOutputLimits",
                "loop"
            ],
            "imported": false,
            "current_name": "is_not_greater_than_or_equal_to_zero_08000a04"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "check_init_status_0800010c",
                "param_1": "init_ptr",
                "PTR_completed_8667_08000124": "completed_flag",
                "DAT_08000128": "init_status",
                "PTR__init_0800012c": "init_function_ptr"
            },
            "code": "undefined * check_init_status_0800010c(undefined *init_ptr)\\n{\\n  if (*PTR_completed_8667_08000124 == \"\\0\") {\\n    if (DAT_08000128 != 0) {\\n      init_ptr = PTR__init_0800012c;\\n    }\\n    *PTR_completed_8667_08000124 = 1;\\n  }\\n  return init_ptr;\\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "check_init_status_0800010c"
        },
        "FUN_08003f14": {
            "renaming": {
                "FUN_08003f14": "do_nothing_08003f14"
            },
            "code": "\nvoid do_nothing_08003f14(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f14",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f14"
        },
        "FUN_08001cac": {
            "renaming": {
                "FUN_08001cac": "updateTick_08001cac",
                "PTR_uwTick_08001cbc": "tickPtr",
                "PTR_uwTickFreq_08001cc0": "tickFreqPtr",
                "uint": "uint32_t",
                "byte": "uint8_t"
            },
            "code": "void updateTick_08001cac(void)\n{\n  uint8_t tickFreq = *PTR_uwTickFreq_08001cc0;\n  uint32_t* PTR_uwTick_08001cbc = PTR_uwTick_08001cbc;\n  *PTR_uwTick_08001cbc = tickFreq + *PTR_uwTick_08001cbc;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cac",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "updateTick_08001cac"
        },
        "FUN_08003f12": {
            "renaming": {
                "FUN_08003f12": "do_nothing_08003f12"
            },
            "code": "\nvoid do_nothing_08003f12(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f12",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f12"
        },
        "FUN_08005a18": {
            "renaming": {
                "FUN_08005a18": "checkSerial2Available_08005a18",
                "DAT_08005a3c": "serial2DataAvailable",
                "PTR_Serial2_08005a40": "serial2Ptr"
            },
            "code": "void checkSerial2Available_08005a18(void)\n{\n  if (DAT_08005a3c != 0) {\n    HardwareSerial::available((HardwareSerial *)PTR_Serial2_08005a40);\n  }\n  return;\n}",
            "called": [
                "available"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a18",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkSerial2Available_08005a18"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "handle_TIM_interrupts_08003f18",
                "htim": "TIM_HandleTypeDef",
                "pTVar1": "tim_instance",
                "SR": "Status_Register",
                "DIER": "DMA_Interrupt_Enable_Register",
                "HAL_TIM_ACTIVE_CHANNEL_1": "TIM_Channel_1",
                "HAL_TIM_ACTIVE_CHANNEL_2": "TIM_Channel_2",
                "HAL_TIM_ACTIVE_CHANNEL_3": "TIM_Channel_3",
                "HAL_TIM_ACTIVE_CHANNEL_4": "TIM_Channel_4",
                "HAL_TIM_ACTIVE_CHANNEL_CLEARED": "TIM_Channel_Cleared",
                "CCMR1": "Capture_Compare_Mode_Register_1",
                "CCMR2": "Capture_Compare_Mode_Register_2",
                "TIM_CCMR1_CC1S": "TIM_CCMR1_CC1S",
                "TIM_CCMR1_CC2S": "TIM_CCMR1_CC2S",
                "TIM_CCMR2_CC3S": "TIM_CCMR2_CC3S",
                "TIM_CCMR2_CC4S": "TIM_CCMR2_CC4S",
                "TIM_FLAG_CC1": "TIM_FLAG_CC1",
                "TIM_FLAG_CC2": "TIM_FLAG_CC2",
                "TIM_FLAG_CC3": "TIM_FLAG_CC3",
                "TIM_FLAG_CC4": "TIM_FLAG_CC4",
                "TIM_FLAG_UPDATE": "TIM_FLAG_UPDATE",
                "TIM_FLAG_BREAK": "TIM_FLAG_BREAK",
                "TIM_FLAG_TRIGGER": "TIM_FLAG_TRIGGER",
                "TIM_FLAG_COM": "TIM_FLAG_COM",
                "HAL_TIM_OC_DelayElapsedCallback": "TIM_Output_Compare_Delay_Elapsed_Callback",
                "HAL_TIM_PWM_PulseFinishedCallback": "TIM_PWM_Pulse_Finished_Callback",
                "HAL_TIM_IC_CaptureCallback": "TIM_Input_Capture_Callback",
                "HAL_TIM_PeriodElapsedCallback": "TIM_Period_Elapsed_Callback",
                "HAL_TIMEx_BreakCallback": "TIM_Break_Callback",
                "HAL_TIM_TriggerCallback": "TIM_Trigger_Callback",
                "HAL_TIMEx_CommutationCallback": "TIM_Commutation_Callback"
            },
            "code": "void handle_TIM_interrupts_08003f18(TIM_HandleTypeDef *htim)\n{\n  TIM_TypeDef *tim_instance = htim->Instance;\n  if (((tim_instance->SR & TIM_FLAG_CC1) != 0) && ((tim_instance->DIER & TIM_IT_CC1) != 0)) {\n    tim_instance->SR &= ~TIM_FLAG_CC1;\n    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n    if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(htim);\n      HAL_TIM_PWM_PulseFinishedCallback(htim);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(htim);\n    }\n    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((tim_instance->SR & TIM_FLAG_CC2) != 0) && ((tim_instance->DIER & TIM_IT_CC2) != 0)) {\n    tim_instance->SR &= ~TIM_FLAG_CC2;\n    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;\n    if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(htim);\n      HAL_TIM_PWM_PulseFinishedCallback(htim);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(htim);\n    }\n    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((tim_instance->SR & TIM_FLAG_CC3) != 0) && ((tim_instance->DIER & TIM_IT_CC3) != 0)) {\n    tim_instance->SR &= ~TIM_FLAG_CC3;\n    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;\n    if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(htim);\n      HAL_TIM_PWM_PulseFinishedCallback(htim);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(htim);\n    }\n    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((tim_instance->SR & TIM_FLAG_CC4) != 0) && ((tim_instance->DIER & TIM_IT_CC4) != 0)) {\n    tim_instance->SR &= ~TIM_FLAG_CC4;\n    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;\n    if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(htim);\n      HAL_TIM_PWM_PulseFinishedCallback(htim);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(htim);\n    }\n    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((tim_instance->SR & TIM_FLAG_UPDATE) != 0) && ((tim_instance->DIER & TIM_IT_UPDATE) != 0)) {\n    tim_instance->SR &= ~TIM_FLAG_UPDATE;\n    HAL_TIM_PeriodElapsedCallback(htim);\n  }\n  if (((tim_instance->SR & TIM_FLAG_BREAK) != 0) && ((tim_instance->DIER & TIM_IT_BREAK) != 0)) {\n    tim_instance->SR &= ~TIM_FLAG_BREAK;\n    HAL_TIMEx_BreakCallback(htim);\n  }\n  if (((tim_instance->SR & TIM_FLAG_TRIGGER) != 0) && ((tim_instance->DIER & TIM_IT_TRIGGER) != 0)) {\n    tim_instance->SR &= ~TIM_FLAG_TRIGGER;\n    HAL_TIM_TriggerCallback(htim);\n  }\n  if (((tim_instance->SR & TIM_FLAG_COM) != 0) && ((tim_instance->DIER & TIM_IT_COM) != 0)) {\n    tim_instance->SR &= ~TIM_FLAG_COM;\n    HAL_TIMEx_CommutationCallback(htim);\n  }\n  return;\n}\n",
            "called": [
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIMEx_BreakCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "TIM1_UP_IRQHandler",
                "TIM4_IRQHandler",
                "TIM2_IRQHandler",
                "TIM3_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_TIM_interrupts_08003f18"
        },
        "FUN_08003f16": {
            "renaming": {
                "FUN_08003f16": "do_nothing_08003f16"
            },
            "code": "\nvoid do_nothing_08003f16(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f16",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f16"
        },
        "FUN_0800591e": {
            "renaming": {
                "FUN_0800591e": "calculate_available_space_in_rx_buffer_0800591e",
                "this": "serial_obj",
                "_serial": "serial",
                "rx_head": "head",
                "rx_tail": "tail"
            },
            "code": "int calculate_available_space_in_rx_buffer_0800591e(HardwareSerial *serial_obj) {\n  uint8_t head = serial_obj->_serial.rx_head;\n  uint8_t tail = serial_obj->_serial.rx_tail;\n  uint8_t buffer_size = 0x40;\n  uint8_t available_space = (head + buffer_size - tail) & (buffer_size - 1);\n  return available_space;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800591e",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "calculate_available_space_in_rx_buffer_0800591e"
        },
        "FUN_08006104": {
            "renaming": {
                "FUN_08006104": "initialize_static_variables_08006104"
            },
            "code": "void initialize_static_variables_08006104(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006104",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08006104"
        },
        "FUN_08002540": {
            "renaming": {
                "FUN_08002540": "set_interrupt_handler_08002540",
                "IRQn": "IRQn",
                "uVar1": "irq_num",
                "DAT_0800255c": "interrupt_enable_base"
            },
            "code": "void set_interrupt_handler_08002540(IRQn_Type_conflict IRQn)\n{\n  uint32_t irq_num = (uint32_t)IRQn;\n  if (irq_num >= 0) {\n    uint32_t bit_pos = irq_num & 0x1f;\n    uint32_t* interrupt_enable_reg = (uint32_t*)(DAT_0800255c + ((irq_num >> 5) + 0x60) * 4);\n    *interrupt_enable_reg = 1 << bit_pos;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002540",
            "calling": [
                "USART1_IRQHandler",
                "USART2_IRQHandler",
                "USART3_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_interrupt_handler_08002540"
        },
        "FUN_08005be2": {
            "renaming": {
                "FUN_08005be2": "printAddress_08005be2",
                "this": "ipAddress",
                "p": "printer",
                "sVar1": "numBytesPrinted",
                "sVar2": "numSeparatorsPrinted",
                "iVar3": "byteIndex",
                "iVar4": "totalBytesPrinted"
            },
            "code": "size_t __thiscall printAddress_08005be2(IPAddress *this,Print *printer)\n{\n  size_t numBytesPrinted;\n  size_t numSeparatorsPrinted;\n  int byteIndex;\n  int totalBytesPrinted;\n  \n  totalBytesPrinted = 0;\n  for (byteIndex = 0; byteIndex < 3; byteIndex = byteIndex + 1) {\n    numBytesPrinted = Print::print(printer,(this->_address).bytes[byteIndex],10);\n    numSeparatorsPrinted = Print::print(printer,'.');\n    totalBytesPrinted = totalBytesPrinted + numBytesPrinted + numSeparatorsPrinted;\n  }\n  numBytesPrinted = Print::print(printer,(this->_address).bytes[3],10);\n  return numBytesPrinted + totalBytesPrinted;\n}",
            "called": [
                "print",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005be2",
            "calling": [],
            "imported": false,
            "current_name": "printAddress_08005be2"
        },
        "FUN_08006344": {
            "renaming": {
                "FUN_08006344": "write_byte_to_buffer_08006344",
                "param_1": "buffer_ptr",
                "param_2": "byte_to_write",
                "param_3": "buffer_end_ptr",
                "uVar1": "result",
                "pbVar2": "buffer_end",
                "buffer_start": "buffer_start"
            },
            "code": "uint write_byte_to_buffer_08006344(undefined4 buffer_ptr, byte byte_to_write, byte **buffer_end_ptr) {\n  uint result;\n  byte *buffer_end = *buffer_end_ptr - 1;\n  *buffer_end_ptr = buffer_end;\n  if (((int)buffer_end < 0) && (((int)buffer_end < (int)buffer_end_ptr[6] || (byte_to_write == 10)))) {\n    result = __swbuf_r();\n    return result;\n  }\n  byte *buffer_start = *buffer_end_ptr;\n  *buffer_end_ptr = buffer_start + 1;\n  *buffer_start = byte_to_write;\n  return (uint)byte_to_write;\n}",
            "called": [
                "__swbuf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006344",
            "calling": [
                "__sfputs_r"
            ],
            "imported": false,
            "current_name": "write_byte_to_buffer_08006344"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "is_not_zero_080009c8",
                "in_ZR": "input"
            },
            "code": "bool is_not_zero_080009c8(char input){\\n  __aeabi_cdcmpeq();\\n  return input != \"\\0\";\\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "is_not_zero_080009c8"
        },
        "FUN_08002db2": {
            "renaming": {
                "FUN_08002db2": "handleI2CState_08002db2",
                "hi2c": "i2cHandle",
                "HVar1": "i2cState",
                "uVar3": "xferOptions",
                "pbVar2": "bufferPtr"
            },
            "code": "HAL_StatusTypeDef handleI2CState_08002db2(I2C_HandleTypeDef *i2cHandle) {\n  HAL_I2C_StateTypeDef i2cState = i2cHandle->State;\n  uint32_t xferOptions = i2cHandle->XferOptions;\n  byte *bufferPtr;\n\n  if ((i2cHandle->XferSize == 0) && (i2cState == HAL_I2C_STATE_BUSY_TX)) {\n    if ((xferOptions == 4) || ((xferOptions == 8 || (xferOptions == 0xffff0000)))) {\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n      i2cHandle->PreviousState = 0;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      if (i2cHandle->Mode == HAL_I2C_MODE_MEM) {\n        i2cHandle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MemTxCpltCallback(i2cHandle);\n      }\n      else {\n        i2cHandle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MasterTxCpltCallback(i2cHandle);\n      }\n    }\n    else {\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n      i2cHandle->PreviousState = 0x11;\n      i2cHandle->Mode = HAL_I2C_MODE_NONE;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      HAL_I2C_MasterTxCpltCallback(i2cHandle);\n    }\n  }\n  else if ((i2cState == HAL_I2C_STATE_BUSY_TX) ||\n          ((i2cHandle->Mode == HAL_I2C_MODE_MEM && (i2cState == HAL_I2C_STATE_BUSY_RX)))) {\n    if (i2cHandle->XferCount == 0) {\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffffbff;\n    }\n    else if (i2cHandle->Mode == HAL_I2C_MODE_MEM) {\n      if (i2cHandle->EventCount == 0) {\n        if (i2cHandle->MemaddSize == 1) {\n          i2cHandle->Instance->DR = i2cHandle->Memaddress & 0xff;\n          i2cHandle->EventCount = i2cHandle->EventCount + 2;\n        }\n        else {\n          i2cHandle->Instance->DR = (i2cHandle->Memaddress << 0x10) >> 0x18;\n          i2cHandle->EventCount = i2cHandle->EventCount + 1;\n        }\n      }\n      else if (i2cHandle->EventCount == 1) {\n        i2cHandle->Instance->DR = i2cHandle->Memaddress & 0xff;\n        i2cHandle->EventCount = i2cHandle->EventCount + 1;\n      }\n      else if (i2cHandle->EventCount == 2) {\n        if (i2cState == HAL_I2C_STATE_BUSY_RX) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x100;\n        }\n        else if (i2cState == HAL_I2C_STATE_BUSY_TX) {\n          bufferPtr = i2cHandle->pBuffPtr;\n          i2cHandle->pBuffPtr = bufferPtr + 1;\n          i2cHandle->Instance->DR = (uint)*bufferPtr;\n          i2cHandle->XferCount = i2cHandle->XferCount - 1;\n        }\n      }\n    }\n    else {\n      bufferPtr = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = bufferPtr + 1;\n      i2cHandle->Instance->DR = (uint)*bufferPtr;\n      i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handleI2CState_08002db2"
        },
        "FUN_08005932": {
            "renaming": {
                "FUN_08005932": "readNextByte_08005932",
                "this": "serial",
                "uVar1": "rx_tail"
            },
            "code": "int __thiscall readNextByte_08005932(HardwareSerial *serial) {\n  uint rx_tail = (uint)(serial->_serial).rx_tail;\n  if ((serial->_serial).rx_head != rx_tail) {\n    return (uint)(serial->_serial).rx_buff[rx_tail];\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005932",
            "calling": [],
            "imported": false,
            "current_name": "readNextByte_08005932"
        },
        "FUN_08001cc4": {
            "renaming": {
                "FUN_08001cc4": "get_uwTick_value_08001cc4",
                "PTR_uwTick_08001ccc": "PTR_uwTick_08001ccc"
            },
            "code": "uint32_t get_uwTick_value_08001cc4(void)\n{\n  uint32_t* uwTick_ptr = (uint32_t*)PTR_uwTick_08001ccc;\n  return *uwTick_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cc4",
            "calling": [
                "HAL_ADC_PollForConversion",
                "HAL_RCC_OscConfig",
                "HAL_RCCEx_PeriphCLKConfig",
                "HAL_UART_Transmit",
                "ADC_ConversionStop_Disable",
                "HAL_ADCEx_Calibration_Start",
                "UART_WaitOnFlagUntilTimeout",
                "uart_debug_write",
                "ADC_Enable",
                "GetCurrentMilli",
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08001cc4"
        },
        "FUN_08002db0": {
            "renaming": {
                "FUN_08002db0": "do_nothing_08002db0"
            },
            "code": "\nvoid do_nothing_08002db0(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db0",
            "calling": [
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF"
            ],
            "imported": false,
            "current_name": "do_nothing_08002db0"
        },
        "FUN_08003ea0": {
            "renaming": {
                "FUN_08003ea0": "handle_rtc_alarm_event_08003ea0",
                "hrtc": "rtc_handle",
                "DAT_08003ed4": "DAT_08003ed4",
                "hrtc->Instance->CRH": "rtc_handle->Instance->CRH",
                "hrtc->Instance->CRL": "rtc_handle->Instance->CRL",
                "HAL_RTC_AlarmAEventCallback": "HAL_RTC_AlarmAEventCallback",
                "0xfffffffd": "0xfffffffd",
                "*(undefined4 *)(DAT_08003ed4 + 0x14)": "*(uint32_t *)(DAT_08003ed4 + 0x14)",
                "hrtc->State": "rtc_handle->State",
                "HAL_RTC_STATE_READY": "HAL_RTC_STATE_READY"
            },
            "code": "void handle_rtc_alarm_event_08003ea0(RTC_HandleTypeDef *rtc_handle) {\n  bool is_alarm_a_enabled = (rtc_handle->Instance->CRH & 2) != 0;\n  bool is_alarm_a_triggered = (rtc_handle->Instance->CRL & 2) != 0;\n  if (is_alarm_a_enabled && is_alarm_a_triggered) {\n    HAL_RTC_AlarmAEventCallback(rtc_handle);\n    rtc_handle->Instance->CRL = 0xfffffffd;\n  }\n  *(undefined4 *)(DAT_08003ed4 + 0x14) = 0x20000;\n  rtc_handle->State = HAL_RTC_STATE_READY;\n  return;\n}",
            "called": [
                "HAL_RTC_AlarmAEventCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ea0",
            "calling": [
                "RTC_Alarm_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_rtc_alarm_event_08003ea0"
        },
        "FUN_0800306c": {
            "renaming": {
                "FUN_0800306c": "i2c_transfer_0800306c",
                "hi2c": "handle",
                "uVar1": "transfer_options",
                "puVar2": "buffer_ptr",
                "XferOptions": "transfer_options",
                "XferCount": "transfer_count",
                "Instance": "instance",
                "CR1": "control_register_1",
                "pBuffPtr": "buffer_pointer",
                "DR": "data_register",
                "CR2": "control_register_2",
                "Mode": "mode",
                "State": "state",
                "PreviousState": "previous_state",
                "HAL_I2C_MODE_MEM": "HAL_I2C_MODE_MEMORY",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NO_OPTION",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_FIRST_FRAME": "HAL_I2C_FIRST_FRAME",
                "HAL_I2C_FIRST_AND_LAST_FRAME": "HAL_I2C_FIRST_AND_LAST_FRAME",
                "HAL_I2C_LAST_FRAME": "HAL_I2C_LAST_FRAME",
                "I2C_NO_OPTION_FRAME": "I2C_NO_OPTION_FRAME"
            },
            "code": "HAL_StatusTypeDef i2c_transfer_0800306c(I2C_HandleTypeDef *handle)\n{\n  uint32_t transfer_options = handle->XferOptions;\n  uint8_t *buffer_ptr;\n  \n  if (handle->XferCount == 3) {\n    if (((transfer_options == I2C_FIRST_FRAME) || (transfer_options == I2C_FIRST_AND_LAST_FRAME)) || (transfer_options == I2C_LAST_FRAME))) {\n      handle->Instance->CR1 = handle->Instance->CR1 & 0xfffffbff;\n    }\n    buffer_ptr = handle->pBuffPtr;\n    handle->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)handle->Instance->DR;\n    handle->XferCount--;\n  }\n  else if (handle->XferCount == 2) {\n    if (((transfer_options == I2C_FIRST_FRAME) || (transfer_options == I2C_FIRST_AND_LAST_FRAME)) || (transfer_options == I2C_LAST_FRAME))) {\n      handle->Instance->CR2 = handle->Instance->CR2 & 0xfffffcff;\n      handle->Instance->CR1 = handle->Instance->CR1 | 0x200;\n    }\n    else {\n      if (transfer_options == I2C_NO_OPTION_FRAME) {\n        handle->Instance->CR1 = handle->Instance->CR1 & 0xfffffbff;\n      }\n      else {\n        handle->Instance->CR1 = handle->Instance->CR1 | 0x400;\n      }\n      handle->Instance->CR2 = handle->Instance->CR2 & 0xfffffcff;\n    }\n    buffer_ptr = handle->pBuffPtr;\n    handle->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)handle->Instance->DR;\n    handle->XferCount--;\n    buffer_ptr = handle->pBuffPtr;\n    handle->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)handle->Instance->DR;\n    handle->XferCount--;\n    handle->State = HAL_I2C_STATE_READY;\n    handle->PreviousState = 0;\n    if (handle->Mode == HAL_I2C_MODE_MEM) {\n      handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MemRxCpltCallback(handle);\n    }\n    else {\n      handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MasterRxCpltCallback(handle);\n    }\n  }\n  else {\n    buffer_ptr = handle->pBuffPtr;\n    handle->pBuffPtr = buffer_ptr + 1;\n    *buffer_ptr = (uint8_t)handle->Instance->DR;\n    handle->XferCount--;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_transfer_0800306c"
        },
        "FUN_08005c64": {
            "renaming": {
                "FUN_08005c64": "initialize_static_variables_08005c64"
            },
            "code": "void initialize_static_variables_08005c64(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c64",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08005c64"
        },
        "FUN_0800548c": {
            "renaming": {
                "FUN_0800548c": "is_uart_state_error_0800548c",
                "obj": "serial",
                "HVar1": "uart_state",
                "PTR_uart_handlers_080054ac": "uart_handlers_ptr"
            },
            "code": "bool is_uart_state_error_0800548c(serial_t *serial) {\n    UART_HandleTypeDef *uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_080054ac + (uint)serial->index * 4);\n    HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(uart_handler);\n    return (uart_state & (HAL_UART_STATE_BUSY_TX | HAL_UART_STATE_BUSY_RX)) == (HAL_UART_STATE_BUSY_TX | HAL_UART_STATE_BUSY_RX);\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800548c",
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "imported": false,
            "current_name": "is_uart_state_error_0800548c"
        },
        "FUN_08000924": {
            "renaming": {
                "FUN_08000924": "check_parameters_08000924",
                "param_1": "a",
                "param_2": "b",
                "param_3": "c",
                "param_4": "d",
                "uVar1": "xor_bd",
                "bVar2": "is_valid",
                "bVar3": "is_negative"
            },
            "code": "uint check_parameters_08000924(uint a, uint b, uint c, uint d)\n{\n  bool is_a_b_zero = (a | (b << 1)) == 0;\n  bool is_c_d_zero = (c | (d << 1)) == 0;\n  if (is_a_b_zero && is_c_d_zero) {\n    return 1;\n  }\n  bool are_b_d_equal = b == d;\n  bool are_a_c_equal = a == c;\n  if (is_a_b_zero || is_c_d_zero || (!are_b_d_equal && (b ^ d) >= 0 && d > b) || (!are_a_c_equal && a > c)) {\n    return 0;\n  }\n  return ~((int)d >> 0x1f) | 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000924",
            "calling": [],
            "imported": false,
            "current_name": "check_parameters_08000924"
        },
        "FUN_08006c34": {
            "renaming": {
                "FUN_08006c34": "walk_reentrant_functions_08006c34",
                "param_1": "reent_structure",
                "DAT_08006c3c": "global_reentrant_function_table"
            },
            "code": "void walk_reentrant_functions_08006c34(void* reent_structure){\n  _fwalk_reent(reent_structure, DAT_08006c3c);\n  return;\n}",
            "called": [
                "_fwalk_reent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c34",
            "calling": [],
            "imported": false,
            "current_name": "walk_reentrant_functions_08006c34"
        },
        "FUN_080072a4": {
            "renaming": {
                "std::ctype_byname<char>::FUN_080072a4": "set_flags_of_pointers",
                "PTR_id_08007308": "pointer_1",
                "PTR_id_0800730c": "pointer_2",
                "PTR_id_08007310": "pointer_3",
                "PTR_id_08007314": "pointer_4",
                "PTR_id_08007318": "pointer_5",
                "PTR_id_0800731c": "pointer_6",
                "PTR_id_08007320": "pointer_7",
                "PTR_id_08007324": "pointer_8",
                "is_negative": "is_pointer_negative",
                "set_flag": "set_pointer_flag",
                "FUN_080072a4": "set_flags_of_pointers_080072a4"
            },
            "code": "void set_flags_of_pointers_080072a4() {\n  if (is_negative(PTR_id_08007308)) {\n    set_flag(PTR_id_08007308);\n  }\n  if (is_negative(PTR_id_0800730c)) {\n    set_flag(PTR_id_0800730c);\n  }\n  if (is_negative(PTR_id_08007310)) {\n    set_flag(PTR_id_08007310);\n  }\n  if (is_negative(PTR_id_08007314)) {\n    set_flag(PTR_id_08007314);\n  }\n  if (is_negative(PTR_id_08007318)) {\n    set_flag(PTR_id_08007318);\n  }\n  if (is_negative(PTR_id_0800731c)) {\n    set_flag(PTR_id_0800731c);\n  }\n  if (is_negative(PTR_id_08007320)) {\n    set_flag(PTR_id_08007320);\n  }\n  if (is_negative(PTR_id_08007324)) {\n    set_flag(PTR_id_08007324);\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072a4",
            "calling": [],
            "imported": false,
            "current_name": "set_flags_of_pointers_080072a4"
        },
        "FUN_08004848": {
            "renaming": {
                "FUN_08004848": "get_gpio_by_port_index_08004848",
                "port_idx": "port_index",
                "DAT_08004870": "gpio_port_a",
                "DAT_08004880": "gpio_port_b",
                "DAT_08004874": "gpio_port_c",
                "DAT_08004878": "gpio_port_d",
                "DAT_0800487c": "gpio_port_e"
            },
            "code": "GPIO_TypeDef* get_gpio_by_port_index_08004848(uint32_t port_index) {\n    switch(port_index) {\n        case 0:\n            return DAT_08004870;\n        case 1:\n            return DAT_08004880;\n        case 2:\n            return DAT_08004874;\n        case 3:\n            return DAT_08004878;\n        case 4:\n            return DAT_0800487c;\n        default:\n            return NULL;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004848",
            "calling": [
                "digitalRead",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "get_gpio_by_port_index_08004848"
        },
        "FUN_08005d82": {
            "renaming": {
                "FUN_08005d82": "print_number_08005d82",
                "this": "print_object",
                "n": "number",
                "base": "base",
                "sVar1": "size_of_number"
            },
            "code": "size_t __thiscall print_number_08005d82(Print *print_object,int number,int base)\n{\n  size_t size_of_number;\n  size_of_number = print_number_08005d82(print_object,number,base);\n  return size_of_number;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d82",
            "calling": [
                "printFloat",
                "loop"
            ],
            "imported": false,
            "current_name": "print_number_08005d82"
        },
        "FUN_08006f92": {
            "renaming": {
                "FUN_08006f92": "read_file_at_offset_08006f92",
                "param_1": "file_descriptor",
                "param_2": "buffer",
                "iVar1": "offset",
                "uVar2": "flags",
                "bVar3": "is_error"
            },
            "code": "void read_file_at_offset_08006f92(int file_descriptor, int* buffer){\n  int offset = *(short *)(buffer + 0xe);\n  int result = _lseek_r(file_descriptor, offset);\n  bool is_error = result == -1;\n  ushort flags = *(ushort *)(buffer + 0xc);\n  if (is_error) {\n    flags &= 0xefff;\n  }\n  else {\n    *(int *)(buffer + 0x54) = result;\n    flags |= 0x1000;\n  }\n  *(ushort *)(buffer + 0xc) = flags;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f92",
            "calling": [],
            "imported": false,
            "current_name": "read_file_at_offset_08006f92"
        },
        "FUN_080012c0": {
            "renaming": {
                "FUN_080012c0": "writeToDataPins_080012c0",
                "this": "self",
                "value": "dataValue",
                "uVar1": "bitIndex",
                "digitalWrite": "setPinValue",
                "_data_pins": "dataPins",
                "pulseEnable": "triggerEnablePin"
            },
            "code": "void __thiscall writeToDataPins_080012c0(LiquidCrystal *this, uint8_t value) {\n  uint8_t bitIndex;\n  for (bitIndex = 0; bitIndex < 4; bitIndex++) {\n    uint8_t bitValue = (value >> bitIndex) & 1;\n    uint8_t dataPin = this->_data_pins[bitIndex];\n    digitalWrite((uint)dataPin, (int)bitValue);\n  }\n  pulseEnable(this);\n  return;\n}",
            "called": [
                "digitalWrite",
                "pulseEnable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012c0",
            "calling": [
                "send",
                "begin"
            ],
            "imported": false,
            "current_name": "writeToDataPins_080012c0"
        },
        "FUN_08001f80": {
            "renaming": {
                "FUN_08001f80": "get_adc_state_08001f80",
                "hadc": "adc_handler"
            },
            "code": "uint32_t get_adc_state_08001f80(ADC_HandleTypeDef *adc_handler)\n{\n  return adc_handler->State;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f80",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_adc_state_08001f80"
        },
        "FUN_08001f84": {
            "renaming": {
                "FUN_08001f84": "initialize_adc_08001f84",
                "hadc": "adc",
                "HVar1": "status",
                "uVar2": "current_time",
                "uVar3": "wait_time",
                "pAVar4": "adc_instance",
                "wait_loop_index": "wait_time"
            },
            "code": "HAL_StatusTypeDef_conflict initialize_adc_08001f84(ADC_HandleTypeDef *adc)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t wait_time;\n  uint32_t current_time;\n  ADC_TypeDef *adc_instance;\n  adc_instance = adc->Instance;\n  if ((adc_instance->CR2 & 1) == 0) {\n    adc_instance->CR2 = adc_instance->CR2 | 1;\n    wait_time = (uint32_t)((unsigned long long)ADC_WAIT_TIME * (unsigned long long)*(uint32_t *)SYS_CLK_PTR >> 0x32);\n    for (; wait_time != 0; wait_time--) {\n    }\n    current_time = HAL_GetTick();\n    do {\n      if ((adc->Instance->CR2 & 1) != 0) {\n        return HAL_OK;\n      }\n      current_time = HAL_GetTick();\n    } while (current_time - wait_time < 3);\n    adc->State = adc->State | 0x10;\n    adc->ErrorCode = adc->ErrorCode | 1;\n    adc->Lock = HAL_UNLOCKED;\n    status = HAL_ERROR;\n  }\n  else {\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f84",
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Start"
            ],
            "imported": false,
            "current_name": "initialize_adc_08001f84"
        },
        "FUN_08000bcc": {
            "renaming": {
                "FUN_08000bcc": "initializeReflowOven_08000bcc",
                "puVar1": "ssr_pin",
                "puVar2": "led_red_pin",
                "this": "lcd",
                "uVar3": "millis()",
                "PTR_ssrPin_08000c90": "ssr_pin",
                "PTR_buzzerPin_08000c94": "buzzer_pin",
                "PTR_ledRedPin_08000c98": "led_red_pin",
                "PTR_lcd_08000c9c": "lcd",
                "PTR_degree_08000ca0": "degree_symbol",
                "PTR_s_Reflow_08000ca4": "reflow_text",
                "PTR_s_Oven_1_2_08000ca8": "oven_text",
                "PTR_Serial2_08000cac": "Serial2",
                "PTR_windowSize_08000cb0": "window_size",
                "PTR_nextCheck_08000cb4": "next_check",
                "PTR_nextRead_08000cb8": "next_read"
            },
            "code": "void initializeReflowOven_08000bcc(void)\n{\n  uint32_t PTR_ssrPin_08000c90;\n  uint32_t PTR_buzzerPin_08000c94;\n  uint32_t PTR_ledRedPin_08000c98;\n  LiquidCrystal PTR_lcd_08000c9c(8, 2);\n  PTR_ssrPin_08000c90 = *(uint32_t *)PTR_ssrPin_08000c90;\n  digitalWrite(PTR_ssrPin_08000c90, LOW);\n  pinMode(PTR_ssrPin_08000c90, OUTPUT);\n  PTR_buzzerPin_08000c94 = *(uint32_t *)PTR_buzzerPin_08000c94;\n  digitalWrite(PTR_buzzerPin_08000c94, LOW);\n  pinMode(PTR_buzzerPin_08000c94, OUTPUT);\n  PTR_ledRedPin_08000c98 = *(uint32_t *)PTR_ledRedPin_08000c98;\n  digitalWrite(PTR_ledRedPin_08000c98, LOW);\n  pinMode(PTR_ledRedPin_08000c98, OUTPUT);\n  digitalWrite(PTR_buzzerPin_08000c94, HIGH);\n  PTR_lcd_08000c9c.begin(16, 2);\n  PTR_lcd_08000c9c.createChar(0, PTR_degree_08000ca0);\n  PTR_lcd_08000c9c.clear();\n  PTR_lcd_08000c9c.print(PTR_s_Reflow_08000ca4);\n  PTR_lcd_08000c9c.setCursor(0, 1);\n  PTR_lcd_08000c9c.print(PTR_s_Oven_1_2_08000ca8);\n  digitalWrite(PTR_buzzerPin_08000c94, LOW);\n  delay(2500);\n  PTR_lcd_08000c9c.clear();\n  HardwareSerial PTR_Serial2_08000cac(0xe100);\n  PTR_Serial2_08000cac.begin(9600);\n  digitalWrite(PTR_ledRedPin_08000c98, HIGH);\n  uint32_t PTR_windowSize_08000cb0 = 2000;\n  uint32_t PTR_nextCheck_08000cb4 = millis();\n  *(uint32_t *)PTR_nextCheck_08000cb4 = PTR_nextCheck_08000cb4;\n  uint32_t PTR_nextRead_08000cb8 = millis();\n  *(uint32_t *)PTR_nextRead_08000cb8 = PTR_nextRead_08000cb8;\n  startForkserver(0);\n}\n",
            "called": [
                "begin",
                "startForkserver",
                "setCursor",
                "print",
                "delay",
                "digitalWrite",
                "clear",
                "pinMode",
                "createChar",
                "millis",
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000bcc",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeReflowOven_08000bcc"
        },
        "FUN_080047d8": {
            "renaming": {
                "FUN_080047d8": "reset_uart_dma_transfer_080047d8",
                "hdma": "dma_handle",
                "huart": "uart_handle"
            },
            "code": "void reset_uart_dma_transfer_080047d8(DMA_HandleTypeDef *dma_handle)\n{\n  UART_HandleTypeDef *uart_handle;\n  uart_handle = (UART_HandleTypeDef *)dma_handle->Parent;\n  uart_handle->RxXferCount = 0;\n  uart_handle->TxXferCount = 0;\n  HAL_UART_ErrorCallback(uart_handle);\n  return;\n}",
            "called": [
                "HAL_UART_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d8",
            "calling": [],
            "imported": false,
            "current_name": "reset_uart_dma_transfer_080047d8"
        },
        "FUN_0800281e": {
            "renaming": {
                "FUN_0800281e": "set_GPIO_PinState_0800281e",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin",
                "PinState": "state",
                "uint": "uint32_t"
            },
            "code": "void set_GPIO_PinState_0800281e(GPIO_TypeDef *gpio, uint16_t pin, GPIO_PinState state) {\n  if (state == GPIO_PIN_RESET) {\n    gpio->BSRR = (uint32_t)pin << 16;\n    return;\n  }\n  gpio->BSRR = (uint32_t)pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800281e",
            "calling": [
                "digital_io_write"
            ],
            "imported": false,
            "current_name": "set_GPIO_PinState_0800281e"
        },
        "FUN_08006198": {
            "renaming": {
                "FUN_08006198": "execute_preinit_array_and_global_dtors_08006198",
                "puVar1": "preinit_func_ptr",
                "iVar2": "preinit_func_count",
                "iVar3": "i",
                "_init": "_init",
                "PTR___preinit_array_end_080061d8": "dtor_func_ptr",
                "PTR___do_global_dtors_aux_fini_array_entry_080061dc": "dtor_func_count"
            },
            "code": "void execute_preinit_array_and_global_dtors_08006198(void)\n{\n  void (**preinit_func_ptr)() = PTR___preinit_array_end_080061d0;\n  int preinit_func_count = (int)PTR___preinit_array_end_080061d4 - (int)PTR___preinit_array_end_080061d0;\n  for (int i = 0; i < preinit_func_count >> 2; i++) {\n    (*preinit_func_ptr)();\n    preinit_func_ptr++;\n  }\n  _init();\n  void (**PTR___preinit_array_end_080061d8)() = PTR___preinit_array_end_080061d8;\n  int PTR___do_global_dtors_aux_fini_array_entry_080061dc = (int)PTR___do_global_dtors_aux_fini_array_entry_080061dc - (int)PTR___preinit_array_end_080061d8;\n  for (int i = 0; i < PTR___do_global_dtors_aux_fini_array_entry_080061dc >> 2; i++) {\n    (*PTR___preinit_array_end_080061d8)();\n    PTR___preinit_array_end_080061d8++;\n  }\n  return;\n}",
            "called": [
                "premain",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006198",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "execute_preinit_array_and_global_dtors_08006198"
        },
        "FUN_08006fc0": {
            "renaming": {
                "FUN_08006fc0": "write_to_file_08006fc0",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "bytes_written"
            },
            "code": "void write_to_file_08006fc0(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n  int *errno_ptr = PTR_errno_08006fe0;\n  *errno_ptr = 0;\n  int bytes_written = _write(file_descriptor, buffer, buffer_size);\n  if ((bytes_written == -1) && (*errno_ptr != 0)) {\n    *error_code = *errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006fc0",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_08006fc0"
        },
        "FUN_08007048": {
            "renaming": {
                "FUN_08007048": "seek_file_08007048",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "errno_ptr",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_08007048(int *error_code, int file_descriptor, int offset, int whence) {\n  int *errno_ptr = PTR_errno_08007068;\n  *(int *)PTR_errno_08007068 = 0;\n  int seek_result = _lseek(file_descriptor, offset, whence);\n  if ((seek_result == -1) && (*errno_ptr != 0)) {\n    *error_code = *errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007048",
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "imported": false,
            "current_name": "seek_file_08007048"
        },
        "FUN_08003c50": {
            "renaming": {
                "FUN_08003c50": "get_HCLK_frequency_divider_08003c50",
                "uVar1": "HCLK_freq",
                "PTR_APBPrescTable_08003c6c": "HCLK_freq_divider_table",
                "DAT_08003c68": "APB_presc_data"
            },
            "code": "uint32_t get_HCLK_frequency_divider_08003c50(void)\n{\n  uint32_t HCLK_freq = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_presc_index = (uint)(*(int *)(DAT_08003c68 + 4) << 0x15) >> 0x1d;\n  uint32_t HCLK_freq_divider = PTR_APBPrescTable_08003c6c[APB_presc_index];\n  return HCLK_freq / HCLK_freq_divider;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c50",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divider_08003c50"
        },
        "FUN_080065c0": {
            "renaming": {
                "FUN_080065c0": "process_data_080065c0",
                "param_1": "data",
                "param_2": "length1",
                "param_3": "length2",
                "param_4": "param_4",
                "param_5": "function_pointer",
                "iVar1": "index",
                "uVar2": "max_length",
                "uVar3": "length3",
                "bVar4": "is_data_mask_valid",
                "data_mask": "data_mask",
                "is_data_present": "is_data_present",
                "length4": "length4",
                "length5": "length5"
            },
            "code": "undefined4 process_data_080065c0(uint32_t data, uint32_t* length1, uint32_t* length2, uint32_t param_4, code* function_pointer) {\n  int index;\n  uint32_t max_length = length1[2] > length1[4] ? length1[2] : length1[4];\n  *length2 = max_length;\n  if (*(char*)((int)length1 + 0x43) != '\\0') {\n    *length2 = max_length + 1;\n  }\n  if ((int)(*length1 << 0x1a) < 0) {\n    *length2 = *length2 + 2;\n  }\n  uint32_t data_mask = *length1 & 6;\n  if (data_mask == 0) {\n    for (; (int)data_mask < (int)(length1[3] - *length2); data_mask++) {\n      index = (*function_pointer)(data, param_4, (int)length1 + 0x19, 1);\n      if (index == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uint32_t is_data_present = (uint32_t)*(byte*)((int)length1 + 0x43);\n  if (is_data_present != 0) {\n    is_data_present = 1;\n  }\n  uint32_t length3 = is_data_present;\n  if ((int)(*length1 << 0x1a) < 0) {\n    *(undefined*)((int)length1 + is_data_present + 0x43) = 0x30;\n    length3 = is_data_present + 2;\n    *(undefined*)((int)length1 + is_data_present + 0x44) = *(undefined*)((int)length1 + 0x45);\n  }\n  index = (*function_pointer)(data, param_4, (int)length1 + 0x43, length3);\n  if (index != -1) {\n    uint32_t length4 = length1[3];\n    bool is_data_mask_valid = (*length1 & 6) != 4;\n    if (is_data_mask_valid) {\n      length4 = 0;\n    }\n    uint32_t length5 = 0;\n    if (!is_data_mask_valid) {\n      length4 = length4 - *length2;\n    }\n    if (!is_data_mask_valid) {\n      length4 = length4 & ~((int)length4 >> 0x1f);\n    }\n    if (length1[2] < length1[4]) {\n      length4 = length4 + (length1[2] - length1[4]);\n    }\n    while (true) {\n      if (length4 == length5) {\n        return 0;\n      }\n      index = (*function_pointer)(data, param_4, (int)length1 + 0x1a, 1);\n      if (index == -1) {\n        break;\n      }\n      length5++;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080065c0",
            "calling": [
                "_printf_i"
            ],
            "imported": false,
            "current_name": "process_data_080065c0"
        },
        "FUN_080054d4": {
            "renaming": {
                "FUN_080054d4": "receive_data_from_serial_port_080054d4",
                "obj": "serial_obj",
                "c": "received_char",
                "uVar1": "rx_active"
            },
            "code": "int receive_data_from_serial_port_080054d4(serial_t *serial_obj, uchar *received_char)\n{\n  uint8_t rx_active;\n  \n  if (serial_obj == NULL) {\n    return -1;\n  }\n  \n  rx_active = serial_rx_active(serial_obj);\n  \n  if (rx_active == 0) {\n    *received_char = serial_obj->recv;\n    HAL_UART_Receive_IT(*(UART_HandleTypeDef **)(PTR_uart_handlers_0800550c + (uint)serial_obj->index * 4), &serial_obj->recv, 1);\n    return 0;\n  }\n  \n  return -1;\n}",
            "called": [
                "serial_rx_active",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054d4",
            "calling": [
                "_rx_complete_irq"
            ],
            "imported": false,
            "current_name": "receive_data_from_serial_port_080054d4"
        },
        "FUN_0800715c": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_0800715c": "set_flags",
                "PTR_id_080071f0": "flag1",
                "PTR_id_080071f4": "flag2",
                "PTR_id_080071f8": "flag3",
                "PTR_id_080071fc": "flag4",
                "PTR_id_08007200": "flag5",
                "PTR_id_08007204": "flag6",
                "PTR_id_08007208": "flag7",
                "PTR_id_0800720c": "flag8",
                "PTR_id_08007210": "flag9",
                "PTR_id_08007214": "flag10",
                "PTR_id_08007218": "flag11",
                "PTR_id_0800721c": "flag12",
                "FUN_0800715c": "set_flags_0800715c"
            },
            "code": "void set_flags_0800715c() {\n  if (PTR_id_080071f0 < 0) {\n    PTR_id_080071f0 = 1;\n  }\n  if (PTR_id_080071f4 < 0) {\n    PTR_id_080071f4 = 1;\n  }\n  if (PTR_id_080071f8 < 0) {\n    PTR_id_080071f8 = 1;\n  }\n  if (PTR_id_080071fc < 0) {\n    PTR_id_080071fc = 1;\n  }\n  if (PTR_id_08007200 < 0) {\n    PTR_id_08007200 = 1;\n  }\n  if (PTR_id_08007204 < 0) {\n    PTR_id_08007204 = 1;\n  }\n  if (PTR_id_08007208 < 0) {\n    PTR_id_08007208 = 1;\n  }\n  if (PTR_id_0800720c < 0) {\n    PTR_id_0800720c = 1;\n  }\n  if (PTR_id_08007210 < 0) {\n    PTR_id_08007210 = 1;\n  }\n  if (PTR_id_08007214 < 0) {\n    PTR_id_08007214 = 1;\n  }\n  if (PTR_id_08007218 < 0) {\n    PTR_id_08007218 = 1;\n  }\n  if (PTR_id_0800721c < 0) {\n    PTR_id_0800721c = 1;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800715c",
            "calling": [],
            "imported": false,
            "current_name": "set_flags_0800715c"
        },
        "FUN_08004d40": {
            "renaming": {
                "FUN_08004d40": "wait_indefinitely_08004d40",
                "msg": "message",
                "val": "value"
            },
            "code": "void wait_indefinitely_08004d40(char *message, int value)\n{\n  while(true)\n  {\n    // do nothing\n  }\n}",
            "called": [
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d40",
            "calling": [
                "SystemClock_Config",
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "wait_indefinitely_08004d40"
        },
        "FUN_08004d44": {
            "renaming": {
                "FUN_08004d44": "set_bit_and_clear_flags_08004d44",
                "puVar1": "data",
                "DAT_08004d84": "data",
                "DAT_08004d88": "mask"
            },
            "code": "void set_bit_and_clear_flags_08004d44(void)\n{\n  uint *DAT_08004d84 = DAT_08004d84;\n  *DAT_08004d84 |= 1;\n  DAT_08004d84[1] &= DAT_08004d88;\n  *DAT_08004d84 &= 0xfef6ffff;\n  *DAT_08004d84 &= 0xfffbffff;\n  DAT_08004d84[1] &= 0xff80ffff;\n  DAT_08004d84[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08004d8c + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d44",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_flags_08004d44"
        },
        "FUN_0800282c": {
            "renaming": {
                "FUN_0800282c": "update_gpio_pin_state_0800282c",
                "GPIO_Pin": "pin",
                "DAT_08002844": "gpio_data",
                "PTR_uint_14": "current_pin_state"
            },
            "code": "void update_gpio_pin_state_0800282c(uint16_t pin)\n{\n  uint* DAT_08002844 = (uint*)(DAT_08002844 + 0x14);\n  uint PTR_uint_14 = *DAT_08002844;\n  if ((PTR_uint_14 & (uint)pin) != 0) {\n    *DAT_08002844 = (uint)pin;\n    HAL_GPIO_EXTI_Callback(pin);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800282c",
            "calling": [
                "EXTI1_IRQHandler",
                "EXTI3_IRQHandler",
                "EXTI15_10_IRQHandler",
                "EXTI9_5_IRQHandler",
                "EXTI2_IRQHandler",
                "EXTI4_IRQHandler",
                "EXTI0_IRQHandler"
            ],
            "imported": false,
            "current_name": "update_gpio_pin_state_0800282c"
        },
        "FUN_080015b2": {
            "renaming": {
                "MAX31855::FUN_080015b2": "readThermocouple",
                "this": "thermocouple",
                "iVar1": "bit",
                "uVar2": "i",
                "uVar3": "data",
                "FUN_080015b2": "readThermocouple_080015b2"
            },
            "code": "unsigned long readThermocouple_080015b2(MAX31855 *thermocouple) {\n  int sckPin = thermocouple->sck;\n  int soPin = thermocouple->so;\n  int csPin = thermocouple->cs;\n\n  digitalWrite(csPin, LOW);\n  unsigned long data = 0;\n  for (int i = 31; i >= 0; i--) {\n    digitalWrite(sckPin, HIGH);\n    int bit = digitalRead(soPin);\n    if (bit != 0) {\n      data |= (1UL << i);\n    }\n    digitalWrite(sckPin, LOW);\n  }\n  digitalWrite(csPin, HIGH);\n  return data;\n}",
            "called": [
                "digitalRead",
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b2",
            "calling": [
                "readThermocouple"
            ],
            "imported": false,
            "current_name": "readThermocouple_080015b2"
        },
        "FUN_0800040c": {
            "renaming": {
                "FUN_0800040c": "leading_zeros_0800040c",
                "param_1": "input",
                "uVar1": "result_lower",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeroes",
                "uVar4": "temp_var",
                "in_r12": "in_r12",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflowed",
                "SCARRY4": "signed_carry_4",
                "SBORROW4": "signed_borrow_4",
                "CONCAT44": "concat_44",
                "ulonglong": "unsigned_long_long",
                "uint": "unsigned_int"
            },
            "code": "ulonglong leading_zeros_0800040c(uint input) {\n  uint leading_zeroes = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes + 0x15;\n  if (input == 0) {\n    return 0;\n  }\n  if (shift_amount < 0x20) {\n    shift_amount = leading_zeroes + 1;\n    if (shift_amount < 0) {\n      return 0;\n    }\n    return ((ulonglong)input << (shift_amount & 0xff)) | ((ulonglong)input >> ((0xcU - leading_zeroes) & 0xff));\n  }\n  uint in_r12 = 0x20 - leading_zeroes;\n  uint shifted_input = (ulonglong)input << (leading_zeroes & 0xff);\n  shifted_input |= 0U >> (in_r12 & 0xff);\n  ulonglong result = 0;\n  if (leading_zeroes != 0xb) {\n    result = (ulonglong)0 << (leading_zeroes & 0xff);\n  }\n  uint shift_amount_diff = shift_amount - 0x433;\n  if (shift_amount_diff < 0) {\n    result |= (ulonglong)shifted_input << ((-shift_amount_diff) & 0xff);\n  } else if (shift_amount_diff > 0x1e) {\n    result = (ulonglong)shifted_input >> ((shift_amount_diff - 0x1f) & 0xff);\n  } else {\n    if (shift_amount_diff == 0 || (shift_amount_diff < 0) != (shift_amount_diff - 0x1f < 0xc)) {\n      shift_amount++;\n      result = ((ulonglong)shifted_input >> (shift_amount & 0xff)) | ((ulonglong)input << ((0x20 - shift_amount) & 0xff));\n    } else {\n      result = (ulonglong)shifted_input >> ((0x20 - (0xcU - shift_amount_diff)) & 0xff) | ((ulonglong)input << ((0xcU - shift_amount_diff) & 0xff));\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800040c",
            "calling": [
                "SetSampleTime",
                "SetTunings",
                "printFloat",
                "readThermocouple",
                "loop"
            ],
            "imported": false,
            "current_name": "leading_zeros_0800040c"
        },
        "FUN_08006088": {
            "renaming": {
                "FUN_08006088": "handleExternalInterrupt_08006088"
            },
            "code": "void handleExternalInterrupt_08006088(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(4);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006088",
            "calling": [],
            "imported": false,
            "current_name": "handleExternalInterrupt_08006088"
        },
        "FUN_08006eb0": {
            "renaming": {
                "FUN_08006eb0": "process_signal_and_kill_if_needed_08006eb0",
                "param_1": "status",
                "param_2": "signal",
                "param_3": "pid",
                "param_4": "flags",
                "_Var1": "current_pid",
                "uVar2": "function_result",
                "iVar3": "signal_handler"
            },
            "code": "int process_signal_and_kill_if_needed_08006eb0(int *status, uint signal, int pid, uint flags)\n{\n  __pid_t current_pid;\n  int function_result;\n  code *signal_handler;\n  \n  if (signal > 31) {\n    *status = 22;\n    return -1;\n  }\n  function_result = status[17];\n  if ((function_result != 0) && (signal_handler = *(code **)(function_result + signal * 4), signal_handler != (code *)0x0)) {\n    if (signal_handler != (code *)0x1) {\n      if (signal_handler == (code *)-1) {\n        *status = 22;\n        return 1;\n      }\n      *(undefined4 *)(function_result + signal * 4) = 0;\n      (*signal_handler)(signal);\n    }\n    return 0;\n  }\n  current_pid = _getpid_r();\n  function_result = _kill_r(status, current_pid, pid, flags);\n  return function_result;\n}",
            "called": [
                "_kill_r",
                "_getpid_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eb0",
            "calling": [
                "raise"
            ],
            "imported": false,
            "current_name": "process_signal_and_kill_if_needed_08006eb0"
        },
        "FUN_08004e5c": {
            "renaming": {
                "FUN_08004e5c": "handle_timer_interrupt_08004e5c",
                "*PTR_timer_handles_08004e6c": "*timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "HAL_TIM_IRQHandler": "handle_timer_irq",
                "timer_handle": "active_timer_handle"
            },
            "code": "void handle_timer_interrupt_08004e5c(void)\n{\n  TIM_HandleTypeDef *timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_08004e6c + 0xc);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e5c",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e5c"
        },
        "FUN_08004df4": {
            "renaming": {
                "FUN_08004df4": "get_stimer_from_htim_08004df4",
                "htim": "htim_ptr",
                "previous_htim": "previous_htim_ptr",
                "stimer": "stimer_ptr"
            },
            "code": "stimer_t* get_stimer_from_htim_08004df4(TIM_HandleTypeDef* htim)\n{\n    TIM_HandleTypeDef* previous_htim = htim - 1;\n    stimer_t* stimer = (stimer_t*)&previous_htim->Lock;\n    return stimer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df4",
            "calling": [
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "get_stimer_from_htim_08004df4"
        },
        "FUN_08004bb0": {
            "renaming": {
                "FUN_08004bb0": "configure_GPIO_pin_08004bb0",
                "pin": "pin_name",
                "mode": "pin_mode",
                "pull": "pin_pull",
                "uVar1": "pin_number",
                "GPIOx": "GPIO_port",
                "tmpreg": "temporary_register",
                "GPIO_InitStructure": "GPIO_config",
                "DAT_08004c28": "unknown_data_1",
                "DAT_08004c2c": "unknown_data_2"
            },
            "code": "void configure_GPIO_pin_08004bb0(PinName_conflict pin, uint32_t mode, uint32_t pull)\n{\n  uint32_t pin_number = (uint32_t)pin;\n  GPIO_TypeDef *GPIOx = set_GPIO_Port_Clock((pin_number << 24) >> 28);\n  uint32_t pin_mask = 1 << (pin_number & 0xf);\n  GPIO_InitTypeDef GPIO_config;\n  GPIO_config.Pin = pin_mask;\n  GPIO_config.Speed = GPIO_SPEED_FREQ_HIGH;\n  *(uint32_t *)(DAT_08004c28 + 0x18) |= 1;\n  if ((pin_number - 0xd & 0xff) < 2) {\n    *(uint32_t *)(DAT_08004c2c + 4) = (*(uint32_t *)(DAT_08004c2c + 4) & 0xf8ffffff) | 0x4000000;\n  }\n  if (((pin_number == 0xf) || (pin_number == 0x13)) || (pin_number == 0x14)) {\n    *(uint32_t *)(DAT_08004c2c + 4) = (*(uint32_t *)(DAT_08004c2c + 4) & 0xf8ffffff) | 0x2000000;\n  }\n  GPIO_config.Mode = mode;\n  GPIO_config.Pull = pull;\n  HAL_GPIO_Init(GPIOx, &GPIO_config);\n  return;\n}",
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bb0",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "configure_GPIO_pin_08004bb0"
        },
        "FUN_08004df8": {
            "renaming": {
                "FUN_08004df8": "handle_timer_interrupt_08004df8",
                "htim": "timer_handle",
                "psVar1": "timer_object",
                "irqHandleOC": "interrupt_handler_OC"
            },
            "code": "void handle_timer_interrupt_08004df8(TIM_HandleTypeDef *timer_handle)\n{\n  stimer_t *timer_object = get_timer_object(timer_handle);\n  if ((timer_object->interrupt_handler_OC != NULL) && (timer_handle->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {\n    (*timer_object->interrupt_handler_OC)(timer_object,0);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df8",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004df8"
        },
        "FUN_08001510": {
            "renaming": {
                "FUN_08001510::FUN_08001510": "initialize_print",
                "this": "print_object",
                "rs": "register_select",
                "enable": "enable_pin",
                "d0": "data_pin_0",
                "d1": "data_pin_1",
                "d2": "data_pin_2",
                "d3": "data_pin_3",
                "init": "initialize_lcd",
                "ptr_ptr_write_1_0800154c": "pointer_pointer_write_1_0800154c",
                "FUN_08001510": "initialize_print_08001510"
            },
            "code": "void initialize_print_08001510(initialize_print_08001510 *this, uint8_t rs, uint8_t enable, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3) {\n  this->write_error = 0;\n  this->_vptr_Print = (_func_int_varargs **)ptr_ptr_write_1_0800154c;\n  init(this, '\\x01', rs, 0xff, enable, d0, d1, d2, d3, '\\0', '\\0', '\\0', '\\0');\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001510",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_print_08001510"
        },
        "FUN_08002af8": {
            "renaming": {
                "FUN_08002af8": "handle_i2c_listen_08002af8",
                "hi2c": "handle",
                "pData": "data",
                "Size": "size",
                "XferOptions": "transfer_options",
                "HVar1": "status",
                "pIVar2": "instance",
                "tmpreg": "cr1_register"
            },
            "code": "HAL_StatusTypeDef handle_i2c_listen_08002af8(I2C_HandleTypeDef *handle, uint8_t *data, uint16_t size, uint32_t transfer_options) {\n  HAL_StatusTypeDef status;\n  I2C_TypeDef *instance;\n  uint32_t cr1_register;\n  if (handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == NULL || size == 0 || handle->Lock == HAL_LOCKED) {\n      status = HAL_ERROR;\n    } else {\n      handle->Lock = HAL_LOCKED;\n      instance = handle->Instance;\n      cr1_register = instance->CR1;\n      if ((cr1_register & 1) == 0) {\n        instance->CR1 = cr1_register | 1;\n      }\n      instance->CR1 &= 0xfffff7ff;\n      handle->State = HAL_I2C_STATE_BUSY_TX_LISTEN;\n      handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      handle->ErrorCode = 0;\n      handle->pBuffPtr = data;\n      handle->XferCount = size;\n      handle->XferOptions = transfer_options;\n      handle->XferSize = handle->XferCount;\n      handle->Lock = HAL_UNLOCKED;\n      instance->CR2 |= 0x700;\n    }\n  } else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002af8",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "handle_i2c_listen_08002af8"
        },
        "FUN_080028de": {
            "renaming": {
                "FUN_080028de": "handle_I2C_event_080028de",
                "*hi2c": "*handle",
                "uVar1": "transfer_options",
                "pIVar2": "instance",
                "tmpreg": "cr1_reg",
                "tmpreg_1": "cr2_reg",
                "tmpreg_2": "transfer_count",
                "tmpreg_3": "addressing_mode",
                "tmpreg_4": "previous_state",
                "tmpreg_5": "event_count"
            },
            "code": "HAL_StatusTypeDef_conflict handle_I2C_event_080028de(I2C_HandleTypeDef *handle)\n{\n  uint32_t transfer_options = handle->XferOptions;\n  I2C_TypeDef *instance = handle->Instance;\n  uint32_t transfer_count = handle->XferCount;\n  uint32_t addressing_mode = (handle->Init).AddressingMode;\n  uint32_t previous_state = handle->PreviousState;\n  uint32_t event_count = handle->EventCount;\n  uint32_t cr1_reg = instance->CR1;\n  uint32_t cr2_reg = instance->CR2;\n  \n  if ((handle->State == HAL_I2C_STATE_BUSY_RX) &&\n     ((event_count != 0 || (handle->Mode != HAL_I2C_MODE_MEM)))) {\n    if ((event_count == 0) && (addressing_mode == 0xc000)) {\n      cr1_reg |= 0x100;\n      event_count++;\n    }\n    else {\n      if (transfer_count == 0) {\n        cr1_reg |= 0x200;\n      }\n      else if (transfer_count == 1) {\n        if (transfer_options == 0xffff0000) {\n          cr1_reg &= 0xfffffbff;\n          if ((cr2_reg & 0x800) == 0) {\n            cr1_reg |= 0x200;\n          }\n          else {\n            cr1_reg &= 0xfffffbff;\n          }\n        }\n        else if (((transfer_options == 4) || (transfer_options == 8)) || (previous_state == 0x12)) {\n          cr1_reg &= 0xfffffbff;\n          cr1_reg |= 0x200;\n        }\n        else if (transfer_options == 2) {\n          cr1_reg |= 0x400;\n        }\n        else {\n          cr1_reg &= 0xfffffbff;\n        }\n      }\n      else if (transfer_count == 2) {\n        if (transfer_options == 2) {\n          cr1_reg |= 0x400;\n        }\n        else {\n          cr1_reg |= 0x800;\n          cr1_reg &= 0xfffffbff;\n        }\n        if ((cr2_reg & 0x800) != 0) {\n          cr2_reg |= 0x1000;\n        }\n      }\n      else {\n        cr1_reg |= 0x400;\n        if ((cr2_reg & 0x800) != 0) {\n          cr2_reg |= 0x1000;\n        }\n      }\n      event_count = 0;\n    }\n  }\n  instance->CR1 = cr1_reg;\n  instance->CR2 = cr2_reg;\n  handle->EventCount = event_count;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028de",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_I2C_event_080028de"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "I2C_handleMemoryMode_08002848",
                "hi2c": "handle",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "Mode": "mode",
                "EventCount": "event_count",
                "Instance": "instance",
                "Devaddress": "device_address",
                "Init": "init",
                "AddressingMode": "addressing_mode",
                "State": "state",
                "DR": "register_address"
            },
            "code": "HAL_StatusTypeDef I2C_handleMemoryMode_08002848(I2C_HandleTypeDef *handle)\n{\n    uint8_t device_address = handle->Devaddress;\n    uint8_t register_address = 0;\n    if (handle->Mode == HAL_I2C_MODE_MEM) {\n        if (handle->EventCount == 0) {\n            register_address = device_address & 0xFE;\n        }\n        else {\n            register_address = device_address & 0xFF | 1;\n        }\n    }\n    else if ((handle->Init).AddressingMode == I2C_ADDRESSINGMODE_10BIT) {\n        if (handle->State == HAL_I2C_STATE_BUSY_TX) {\n            register_address = device_address & 0xFE;\n        }\n        else {\n            register_address = device_address & 0xFF | 1;\n        }\n    }\n    else if (handle->EventCount == 0) {\n        register_address = (device_address << 16) >> 23 & 6 | 0xF0;\n    }\n    else if (handle->EventCount == 1) {\n        register_address = (device_address << 16) >> 23 & 6 | 0xF1;\n    }\n    handle->Instance->DR = register_address;\n    return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "I2C_handleMemoryMode_08002848"
        },
        "FUN_08004e70": {
            "renaming": {
                "FUN_08004e70": "get_i2c_struct_ptr_08004e70",
                "hi2c": "i2c_handle",
                "i2c_t": "i2c_struct",
                "EventCount": "event_count"
            },
            "code": "typedef struct {\n  uint32_t event_count;\n} i2c_t;\ni2c_t * get_i2c_struct_ptr_08004e70(I2C_HandleTypeDef * i2c_handle)\n{\n  return (i2c_t *)&i2c_handle[-1].EventCount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e70",
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AddrCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "imported": false,
            "current_name": "get_i2c_struct_ptr_08004e70"
        },
        "FUN_080020f0": {
            "renaming": {
                "FUN_080020f0": "check_ADC_conversion_complete_080020f0",
                "hadc": "adc_handle",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "pAVar3": "adc_instance",
                "HAL_GetTick": "get_current_time",
                "CR2": "ADC_CR2_ADON",
                "State": "HAL_ADC_STATE_ERROR_INTERNAL",
                "ErrorCode": "HAL_ADC_ERROR_INTERNAL"
            },
            "code": "HAL_StatusTypeDef check_ADC_conversion_complete_080020f0(ADC_HandleTypeDef *hadc)\n{\n  uint32_t start_time;\n  uint32_t current_time;\n  ADC_TypeDef *adc_instance;\n  adc_instance = hadc->Instance;\n  if ((adc_instance->CR2 & ADC_CR2_ADON) == 0) {\n    return HAL_OK;\n  }\n  adc_instance->CR2 = adc_instance->CR2 & ~(ADC_CR2_ADON);\n  start_time = HAL_GetTick();\n  do {\n    if ((hadc->Instance->CR2 & ADC_CR2_ADON) == 0) {\n      return HAL_OK;\n    }\n    current_time = HAL_GetTick();\n  } while (current_time - start_time < 3);\n  hadc->State |= HAL_ADC_STATE_ERROR_INTERNAL;\n  hadc->ErrorCode |= HAL_ADC_ERROR_INTERNAL;\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080020f0",
            "calling": [
                "HAL_ADC_Init",
                "HAL_ADC_DeInit",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Stop"
            ],
            "imported": false,
            "current_name": "check_ADC_conversion_complete_080020f0"
        },
        "FUN_08006e10": {
            "renaming": {
                "FUN_08006e10": "create_file_descriptor_08006e10",
                "param_1": "process_id",
                "param_2": "file_descriptor",
                "uVar1": "status",
                "iVar2": "allocated_memory",
                "local_18": "buffer_size",
                "local_14": "buffer_pointer"
            },
            "code": "void create_file_descriptor_08006e10(int process_id,int *file_descriptor){\n  ushort status;\n  int buffer_size;\n  int *buffer_pointer;\n  \n  if (-1 < (int)((uint)*(ushort *)(file_descriptor + 3) << 0x1e))) {\n    buffer_size = process_id;\n    buffer_pointer = file_descriptor;\n    status = __swhatbuf_r(process_id,file_descriptor,&buffer_size,&buffer_pointer);\n    int allocated_memory = _malloc_r(process_id,buffer_size);\n    if (allocated_memory != 0) {\n      *(undefined4 *)(process_id + 0x28) = DAT_08006e8c;\n      *file_descriptor = allocated_memory;\n      *(ushort *)(file_descriptor + 3) = *(ushort *)(file_descriptor + 3) | 0x80;\n      file_descriptor[4] = allocated_memory;\n      file_descriptor[5] = buffer_size;\n      if ((buffer_pointer != (int *)0x0) && (allocated_memory = _isatty_r(process_id,(int)*(short *)((int)file_descriptor + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(file_descriptor + 3) = *(ushort *)(file_descriptor + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(file_descriptor + 3) = status | *(ushort *)(file_descriptor + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(file_descriptor + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(file_descriptor + 3) = *(ushort *)(file_descriptor + 3) & 0xfffc | 2;\n  }\n  *file_descriptor = (int)file_descriptor + 0x47;\n  file_descriptor[4] = (int)file_descriptor + 0x47;\n  file_descriptor[5] = 1;\n  return;\n}",
            "called": [
                "_malloc_r",
                "__swhatbuf_r",
                "_isatty_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e10",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "create_file_descriptor_08006e10"
        },
        "FUN_0800607e": {
            "renaming": {
                "FUN_0800607e": "handle_GPIO_interrupt_0800607e"
            },
            "code": "void handle_GPIO_interrupt_0800607e(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800607e",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_interrupt_0800607e"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "i2c_transfer_08004e74",
                "hi2c": "i2c_handle",
                "TransferDirection": "transfer_direction",
                "AddrMatchCode": "address_match_code",
                "piVar1": "i2c_obj",
                "get_i2c_obj": "get_i2c_object",
                "i2cTxRxBufferSize": "buffer_size",
                "slaveMode": "slave_mode",
                "i2c_onSlaveTransmit": "on_slave_transmit",
                "i2cTxRxBuffer": "buffer",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "HAL_I2C_Slave_Sequential_Transmit_IT",
                "ushort": "unsigned_short"
            },
            "code": "void i2c_transfer_08004e74(I2C_HandleTypeDef *i2c_handle, uint8_t transfer_direction, uint16_t address_match_code) {\\n  i2c_t *i2c_obj = get_i2c_object(i2c_handle);\\n  if ((uint)address_match_code == (i2c_handle->Init).OwnAddress1) {\\n    if (transfer_direction == \"\\0\") {\\n      i2c_obj->buffer_size = \"\\0\";\\n      i2c_obj->slave_mode = \"\\0\";\\n      if (i2c_obj->on_slave_transmit != (_func_void *)0x0) {\\n        (*i2c_obj->on_slave_transmit)();\\n      }\\n      HAL_I2C_Slave_Sequential_Transmit_IT(i2c_handle, i2c_obj->buffer, (ushort)i2c_obj->buffer_size, 8);\\n      return;\\n    }\\n    i2c_obj->slave_mode = \"\\x01\";\\n    HAL_I2C_Slave_Sequential_Receive_IT(i2c_handle, i2c_obj->buffer, 0x20, 8);\\n  }\\n  return;\\n}",
            "called": [
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "get_i2c_obj",
                "HAL_I2C_Slave_Sequential_Transmit_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "imported": false,
            "current_name": "i2c_transfer_08004e74"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "set_gpio_pin_state_08004c30",
                "port": "gpio_port",
                "pin": "pin_number",
                "val": "pin_state"
            },
            "code": "void set_gpio_pin_state_08004c30(GPIO_TypeDef *gpio_port, uint32_t pin_number, uint32_t pin_state)\n{\n  if (pin_state == 0) {\n    HAL_GPIO_WritePin(gpio_port, (uint16_t)pin_number, GPIO_PIN_RESET);\n    return;\n  }\n  HAL_GPIO_WritePin(gpio_port, (uint16_t)pin_number, GPIO_PIN_SET);\n  return;\n}",
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_gpio_pin_state_08004c30"
        },
        "FUN_08006092": {
            "renaming": {
                "FUN_08006092": "handleExternalInterrupt_08006092"
            },
            "code": "void handleExternalInterrupt_08006092(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(8);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [],
            "imported": false,
            "current_name": "handleExternalInterrupt_08006092"
        },
        "FUN_08006f38": {
            "renaming": {
                "FUN_08006f38": "read_data_and_update_offset_08006f38",
                "param_1": "file_descriptor",
                "param_2": "data_info_address",
                "iVar1": "read_result",
                "uVar2": "new_offset",
                "bVar3": "read_successful"
            },
            "code": "void read_data_and_update_offset_08006f38(int file_descriptor, int data_info_address)\n{\n  int read_result;\n  uint new_offset;\n  bool read_successful;\n  \n  read_result = _read_r(file_descriptor, (int)*(short *)(data_info_address + 0xe));\n  read_successful = read_result >= 0;\n  if (read_successful) {\n    new_offset = *(int *)(data_info_address + 0x54) + read_result;\n  }\n  else {\n    new_offset = *(ushort *)(data_info_address + 0xc) & 0xffffefff;\n  }\n  if (read_successful) {\n    *(uint *)(data_info_address + 0x54) = new_offset;\n  }\n  if (!read_successful) {\n    *(short *)(data_info_address + 0xc) = (short)new_offset;\n  }\n  return;\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f38",
            "calling": [],
            "imported": false,
            "current_name": "read_data_and_update_offset_08006f38"
        },
        "FUN_08004cce": {
            "renaming": {
                "FUN_08004cce": "find_pin_function_08004cce",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "function_index"
            },
            "code": "uint32_t find_pin_function_08004cce(PinName_conflict pin, PinMap_conflict *pin_map) {\n  uint32_t function_index = 0;\n  if (pin != NC) {\n    function_index = pinmap_find_function(pin, pin_map);\n  }\n  else {\n    function_index = 0xffffffff;\n  }\n  return function_index;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cce",
            "calling": [
                "pwm_stop",
                "get_adc_channel",
                "uart_init",
                "get_pwm_channel"
            ],
            "imported": false,
            "current_name": "find_pin_function_08004cce"
        },
        "FUN_08006eac": {
            "renaming": {
                "FUN_08006eac": "do_nothing_08006eac"
            },
            "code": "\nvoid do_nothing_08006eac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eac",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eac"
        },
        "FUN_08006f34": {
            "renaming": {
                "FUN_08006f34": "get_process_id_08006f34"
            },
            "code": "__pid_t get_process_id_08006f34(void)\n{\n    __pid_t process_id = 1;\n    return process_id;\n}",
            "called": [
                "_getpid"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f34",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "get_process_id_08006f34"
        },
        "FUN_08006eae": {
            "renaming": {
                "FUN_08006eae": "do_nothing_08006eae"
            },
            "code": "\nvoid do_nothing_08006eae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eae",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eae"
        },
        "FUN_08005f5c": {
            "renaming": {
                "FUN_08005f5c": "do_nothing_08005f5c"
            },
            "code": "\nvoid do_nothing_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_08005f5c"
        },
        "FUN_08006fe4": {
            "renaming": {
                "FUN_08006fe4": "close_file_and_set_error_code_08006fe4",
                "param_1": "error_code_ptr",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "close_result"
            },
            "code": "void close_file_and_set_error_code_08006fe4(int *error_code_ptr, int file_descriptor) {\n  undefined *error_ptr = PTR_errno_08007000;\n  *(undefined4 *)PTR_errno_08007000 = 0;\n  int close_result = _close(file_descriptor);\n  if ((close_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code_ptr = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006fe4",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_code_08006fe4"
        },
        "FUN_08003ad4": {
            "renaming": {
                "FUN_08003ad4": "configureClocks_08003ad4",
                "RCC_ClkInitStruct_conflict": "clockInitStruct",
                "FLatency": "latency",
                "puVar1": "flashLatency",
                "uVar2": "startTime",
                "uVar3": "currentTime",
                "uVar4": "sysClkSrcVal",
                "DAT_08003c34": "flashLatency",
                "DAT_08003c38": "rccRegisters",
                "ClockType": "ClockType",
                "AHBCLKDivider": "AHBCLKDivider",
                "SYSCLKSource": "SYSCLKSource",
                "APB1CLKDivider": "APB1CLKDivider",
                "APB2CLKDivider": "APB2CLKDivider",
                "PTR_SystemCoreClock_08003c40": "systemCoreClock",
                "PTR_AHBPrescTable_08003c3c": "AHBPrescTable"
            },
            "code": "HAL_StatusTypeDef configureClocks_08003ad4(RCC_ClkInitTypeDef* clockInitStruct,uint32_t latency)\n{\n  uint32_t* DAT_08003c34 = (uint32_t*)0x08003c34;\n  uint32_t currentLatency = *DAT_08003c34 & 0x7;\n  if (currentLatency < latency)\n  {\n    *DAT_08003c34 = (*DAT_08003c34 & 0xfffffff8) | latency;\n    if (currentLatency != (*DAT_08003c34 & 0x7))\n    {\n      return HAL_ERROR;\n    }\n  }\n  if ((clockInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) != 0)\n  {\n    uint32_t* ahbClkDiv = (uint32_t*)0x08003c38;\n    *ahbClkDiv = (*ahbClkDiv & 0xfffffff0) | clockInitStruct->AHBCLKDivider;\n  }\n  if ((clockInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) != 0)\n  {\n    uint32_t* sysClkSrc = (uint32_t*)0x08003c38;\n    uint32_t sysClkSrcVal = clockInitStruct->SYSCLKSource;\n    if (sysClkSrcVal == RCC_SYSCLKSOURCE_PLLCLK)\n    {\n      if ((*sysClkSrc & 0x20000) == 0)\n      {\n        return HAL_ERROR;\n      }\n    }\n    else if ((sysClkSrcVal != RCC_SYSCLKSOURCE_HSE) && ((*sysClkSrc & 0x2) == 0))\n    {\n      return HAL_ERROR;\n    }\n    *sysClkSrc = sysClkSrcVal | (*sysClkSrc & 0xfffffffc);\n    uint32_t startTime = HAL_GetTick();\n    while (((*sysClkSrc & 0xc) != (sysClkSrcVal << 2)) && (HAL_GetTick() - startTime < 5000))\n    {\n    }\n    if ((*sysClkSrc & 0xc) != (sysClkSrcVal << 2))\n    {\n      return HAL_TIMEOUT;\n    }\n  }\n  if (latency < currentLatency)\n  {\n    *DAT_08003c34 = (*DAT_08003c34 & 0xfffffff8) | latency;\n    if (currentLatency != (*DAT_08003c34 & 0x7))\n    {\n      return HAL_ERROR;\n    }\n  }\n  if ((clockInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) != 0)\n  {\n    uint32_t* apb1ClkDiv = (uint32_t*)0x08003c38;\n    *apb1ClkDiv = (*apb1ClkDiv & 0xfffff8ff) | (clockInitStruct->APB1CLKDivider << 8);\n  }\n  if ((clockInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) != 0)\n  {\n    uint32_t* apb2ClkDiv = (uint32_t*)0x08003c38;\n    *apb2ClkDiv = (*apb2ClkDiv & 0xffffc7ff) | (clockInitStruct->APB2CLKDivider << 11);\n  }\n  uint32_t sysClockFreq = HAL_RCC_GetSysClockFreq();\n  uint32_t ahbPrescIndex = ((*sysClkSrc & 0x1c) >> 2);\n  uint32_t* PTR_SystemCoreClock_08003c40 = (uint32_t*)0x08003c40;\n  *PTR_SystemCoreClock_08003c40 = sysClockFreq >> PTR_PTR_AHBPrescTable_08003c3c_08003c3c[ahbPrescIndex];\n  HAL_InitTick(0xf);\n  return HAL_OK;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_RCC_GetSysClockFreq",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ad4",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configureClocks_08003ad4"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "setChannelState_08004110",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelNState": "channelNewState",
                "CCER": "channelControlRegister"
            },
            "code": "void setChannelState_08004110(TIM_TypeDef *timer, uint32_t channel, uint32_t channelNewState) {\n  uint32_t channelMask = 4 << (channel & 0xff);\n  timer->CCER &= ~channelMask;\n  timer->CCER |= channelNewState << (channel & 0xff);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "HAL_TIMEx_PWMN_Stop"
            ],
            "imported": false,
            "current_name": "setChannelState_08004110"
        },
        "FUN_08004ce2": {
            "renaming": {
                "FUN_08004ce2": "check_pin_is_valid_08004ce2",
                "pin": "pin_name",
                "map": "pin_map"
            },
            "code": "_Bool check_pin_is_valid_08004ce2(PinName_conflict pin, PinMap_conflict *pin_map) {\n  if (pin == NC) {\n    return false;\n  }\n  while (true) {\n    if (pin_map->pin == NC) {\n      return false;\n    }\n    if (pin == pin_map->pin) {\n      break;\n    }\n    pin_map = pin_map + 1;\n  }\n  return true;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ce2",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "check_pin_is_valid_08004ce2"
        },
        "FUN_08005568": {
            "renaming": {
                "FUN_08005568": "initialize_serial_communication_08005568",
                "obj": "serial_obj",
                "callback": "callback_function",
                "bVar1": "serial_index",
                "PTR_tx_callback_080055b0": "tx_callback_ptr",
                "PTR_tx_callback_obj_080055b4": "tx_callback_obj",
                "PTR_uart_handlers_080055b8": "uart_handler_ptr"
            },
            "code": "void initialize_serial_communication_08005568(serial_t *serial_obj, _func_int_serial_t_ptr *callback_function){\n                    if (serial_obj != NULL) {\n                        uint8_t serial_index = serial_obj->index;\n                        _func_int_serial_t_ptr **PTR_tx_callback_080055b0 = (PTR_tx_callback_080055b0 + (uint)serial_index * 4);\n                        *(PTR_tx_callback_080055b0) = callback_function;\n                        serial_t **PTR_tx_callback_obj_080055b4 = (PTR_PTR_tx_callback_obj_080055b4_080055b4 + (uint)serial_index * 4);\n                        *(PTR_tx_callback_obj_080055b4) = serial_obj;\n                        HAL_NVIC_SetPriority(serial_obj->irq, 0, 2);\n                        HAL_NVIC_EnableIRQ(serial_obj->irq);\n                        UART_HandleTypeDef **PTR_uart_handlers_080055b8 = (PTR_uart_handlers_080055b8 + (uint)serial_obj->index * 4);\n                        HAL_UART_Transmit_IT(*PTR_uart_handlers_080055b8, serial_obj->tx_buff + serial_obj->tx_tail, 1);\n                        return;\n                    }\n                    return;\n                }",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_NVIC_EnableIRQ",
                "HAL_UART_Transmit_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005568",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "initialize_serial_communication_08005568"
        },
        "FUN_08004478": {
            "renaming": {
                "FUN_08004478": "sendUARTData_08004478",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "HVar1": "status",
                "Tickstart": "start_time"
            },
            "code": "HAL_StatusTypeDef sendUARTData_08004478(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n  HAL_StatusTypeDef status;\n  uint32_t start_time;\n  \n  if (uart_handle->gState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (data == NULL || size == 0 || uart_handle->Lock == HAL_LOCKED) {\n    return HAL_ERROR;\n  }\n  uart_handle->Lock = HAL_LOCKED;\n  uart_handle->ErrorCode = 0;\n  uart_handle->gState = HAL_UART_STATE_BUSY_TX;\n  start_time = HAL_GetTick();\n  uart_handle->TxXferSize = size;\n  uart_handle->TxXferCount = size;\n  while (uart_handle->TxXferCount > 0) {\n    uart_handle->TxXferCount--;\n    if ((uart_handle->Init).WordLength == UART_WORDLENGTH_9B) {\n      status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TXE, RESET, start_time, timeout);\n      if (status != HAL_OK) {\n        return HAL_TIMEOUT;\n      }\n      uart_handle->Instance->DR = *(uint16_t *)data & 0x1FF;\n      if ((uart_handle->Init).Parity == UART_PARITY_NONE) {\n        data += 2;\n      }\n      else {\n        data++;\n      }\n    }\n    else {\n      status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TXE, RESET, start_time, timeout);\n      if (status != HAL_OK) {\n        return HAL_TIMEOUT;\n      }\n      uart_handle->Instance->DR = *data;\n      data++;\n    }\n  }\n  status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TC, RESET, start_time, timeout);\n  uart_handle->gState = HAL_UART_STATE_READY;\n  uart_handle->Lock = HAL_UNLOCKED;\n  return (status == HAL_OK) ? HAL_OK : HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick",
                "UART_WaitOnFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004478",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "sendUARTData_08004478"
        },
        "FUN_08005f5e": {
            "renaming": {
                "FUN_08005f5e": "initialize_evp_key_context_08005f5e",
                "ctx": "evp_key_context"
            },
            "code": "void initialize_evp_key_context_08005f5e(void)\n{\n  EVP_PKEY_CTX *evp_key_context;\n  evp_key_context = (EVP_PKEY_CTX *)0x3;\n  HAL_NVIC_SetPriorityGrouping(3);\n  init(evp_key_context);\n  return;\n}",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5e",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "initialize_evp_key_context_08005f5e"
        },
        "FUN_08005cb6": {
            "renaming": {
                "__thiscall Print::FUN_08005cb6": "print_character",
                "this": "print_instance",
                "c": "character",
                "sVar1": "result",
                "FUN_08005cb6": "print_character_08005cb6"
            },
            "code": "size_t print_character_08005cb6(Print *print_instance, char character) {\n  size_t result = (**print_instance->_vptr_Print)(print_instance, (int)character);\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb6",
            "calling": [
                "print",
                "printFloat",
                "printTo"
            ],
            "imported": false,
            "current_name": "print_character_08005cb6"
        },
        "FUN_08003c70": {
            "renaming": {
                "FUN_08003c70": "get_HCLK_frequency_divider_08003c70",
                "uVar1": "HCLK_frequency",
                "DAT_08003c88": "data_pointer",
                "APB_prescaler_index": "prescaler_index",
                "HCLK_frequency_divider": "HCLK_frequency_divider",
                "PTR_APBPrescTable_08003c8c": "prescaler_table"
            },
            "code": "uint32_t get_HCLK_frequency_divider_08003c70(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler_index = (*(int *)(DAT_08003c88 + 4) << 0x12) >> 0x1d;\n  uint32_t HCLK_frequency_divider = PTR_APBPrescTable_08003c8c[APB_prescaler_index];\n  return HCLK_frequency / HCLK_frequency_divider;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c70",
            "calling": [
                "UART_SetConfig",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divider_08003c70"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "send_data_over_uart_080053d4",
                "data": "data_buffer",
                "size": "data_size",
                "PinName_conflict": "PinName",
                "pin": "uart_tx_pin",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "HVar1": "status",
                "uVar2": "start_time",
                "pvVar3": "uart_tx_peripheral",
                "uVar4": "current_time",
                "uVar5": "uart_handler_index",
                "PTR_digitalPin_0800547c": "digitalPin",
                "PTR_PinMap_UART_TX_08005480": "PinMap_UART_TX",
                "int": "int32_t",
                "PTR_uart_handlers_08005484": "uart_handlers",
                "void ***": "void_ptr_ptr_ptr",
                "PTR_serial_debug_08005488": "serial_debug"
            },
            "code": "size_t send_data_over_uart_080053d4(uint8_t *data, uint32_t size) {\n  PinName uart_tx_pin;\n  HAL_StatusTypeDef status;\n  uint32_t start_time;\n  void *uart_tx_peripheral;\n  uint uart_handler_index;\n  \n  start_time = HAL_GetTick();\n  uart_tx_pin = PTR_digitalPin_0800547c[1];\n  uart_tx_peripheral = pinmap_peripheral(uart_tx_pin, (PinMap *)PTR_PinMap_UART_TX_08005480);\n  if (uart_tx_peripheral == (void *)0x0) {\n    return 0;\n  }\n  uart_handler_index = 0;\n  while (uart_handler_index < 5 && (PTR_uart_handlers_08005484[uart_handler_index] == 0 ||\n         (uart_tx_peripheral = pinmap_peripheral(uart_tx_pin, (PinMap *)PTR_PinMap_UART_TX_08005480),\n         *(void ***)(&PTR_uart_handlers_08005484[uart_handler_index]) != uart_tx_peripheral))) {\n    uart_handler_index++;\n  }\n  if (uart_handler_index > 4) {\n    if (PTR_serial_debug_08005488[0x44] > 4 && (uart_debug_init(), PTR_serial_debug_08005488[0x44] > 4)) {\n      return 0;\n    }\n    uart_handler_index = (uint)PTR_serial_debug_08005488[0x44];\n  }\n  do {\n    status = HAL_UART_Transmit(*(UART_HandleTypeDef **)&PTR_uart_handlers_08005484[uart_handler_index * 4], data, (uint16_t)size, 1000);\n    if (status == HAL_OK) {\n      return size;\n    }\n  } while (HAL_GetTick() - start_time < 1000);\n  return 0;\n}",
            "called": [
                "HAL_GetTick",
                "uart_debug_init",
                "HAL_UART_Transmit",
                "pinmap_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "_write"
            ],
            "imported": false,
            "current_name": "send_data_over_uart_080053d4"
        },
        "FUN_08002b84": {
            "renaming": {
                "FUN_08002b84": "listen_state_handler_08002b84",
                "hi2c": "i2c_handle",
                "pData": "data",
                "Size": "size",
                "XferOptions": "transfer_options",
                "HVar1": "status",
                "pIVar2": "i2c_instance",
                "tmpreg": "tmp_reg"
            },
            "code": "HAL_StatusTypeDef listen_state_handler_08002b84(I2C_HandleTypeDef *i2c_handle, uint8_t *data, uint16_t size, uint32_t transfer_options) {\n  HAL_StatusTypeDef status;\n  I2C_TypeDef *i2c_instance;\n  uint32_t tmp_reg;\n  \n  if (i2c_handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == NULL) {\n      status = HAL_ERROR;\n    }\n    else if (size == 0) {\n      status = HAL_ERROR;\n    }\n    else if (i2c_handle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2c_handle->Lock = HAL_LOCKED;\n      i2c_instance = i2c_handle->Instance;\n      if ((i2c_instance->CR1 & 1) == 0) {\n        i2c_instance->CR1 |= 1;\n      }\n      i2c_handle->Instance->CR1 &= 0xfffff7ff;\n      i2c_handle->State = HAL_I2C_STATE_BUSY_RX_LISTEN;\n      i2c_handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      i2c_handle->ErrorCode = 0;\n      i2c_handle->pBuffPtr = data;\n      i2c_handle->XferCount = size;\n      i2c_handle->XferOptions = transfer_options;\n      i2c_handle->XferSize = i2c_handle->XferCount;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      i2c_handle->Instance->CR2 |= 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b84",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "listen_state_handler_08002b84"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "read_GPIO_pin_state_08004c48",
                "port": "gpio_port",
                "pin": "pin_number",
                "GVar1": "pin_state"
            },
            "code": "uint32_t read_GPIO_pin_state_08004c48(GPIO_TypeDef *gpio_port, uint32_t pin_number)\n{\n  GPIO_PinState pin_state;\n  pin_state = HAL_GPIO_ReadPin(gpio_port, (uint16_t)pin_number);\n  return (uint32_t)pin_state;\n}",
            "called": [
                "HAL_GPIO_ReadPin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "digitalRead"
            ],
            "imported": false,
            "current_name": "read_GPIO_pin_state_08004c48"
        },
        "FUN_0800042c": {
            "renaming": {
                "FUN_0800042c": "calculate_shifted_value_0800042c",
                "param_1": "input",
                "uVar1": "temp_var_1",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "shift_amount_adjusted",
                "uVar6": "input_sign",
                "in_r12": "unused_var",
                "bVar7": "is_negative_shift",
                "bVar8": "is_zero_shift",
                "bVar9": "carry",
                "SBORROW4": "signed_subtract_overflow",
                "SCARRY4": "signed_add_overflow"
            },
            "code": "ulonglong calculate_shifted_value_0800042c(uint input)\n{\n  uint abs_input = input & 0x7fffffff;\n  if (abs_input == 0) {\n    return 0;\n  }\n  uint shift_amount = count_leading_zeroes(abs_input) + 21;\n  bool carry = shift_amount < 32;\n  if (carry) {\n    shift_amount = shift_amount + 1;\n  }\n  uint shifted_input = input << (shift_amount & 0xff);\n  if (carry) {\n    shifted_input = shifted_input >> ((32 - shift_amount) & 0xff);\n  }\n  ulonglong result = shifted_input | 0;\n  if (carry) {\n    result = 0;\n  }\n  if (shift_amount < 1075) {\n    result = ((ulonglong)shifted_input + (1075 - shift_amount) * 0x100000) | (input & 0x80000000);\n  }\n  else {\n    uint shift_amount_inverse = ~(1075 - shift_amount);\n    if (shift_amount_inverse > 30) {\n      result = input & 0x80000000ffffffff;\n    }\n    else {\n      int shift_amount_final = shift_amount_inverse - 19;\n      if (shift_amount_final == 0 || (shift_amount_inverse - 31 < 0) != ((shift_amount_inverse - 19) < 0)) {\n        shift_amount_inverse = shift_amount_inverse + 1;\n        result = ((ulonglong)shifted_input >> (shift_amount_inverse & 0xff)) | ((ulonglong)(input << (32 - shift_amount_inverse)) & 0xffffffff80000000);\n      }\n      else {\n        result = ((ulonglong)input) >> (32 - (19 - shift_amount_final)) | ((ulonglong)shifted_input << shift_amount_final);\n      }\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800042c",
            "calling": [
                "SetSampleTime",
                "printFloat",
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_0800042c"
        },
        "FUN_08005f6c": {
            "renaming": {
                "FUN_08005f6c": "main_loop_08005f6c",
                "initVariant": "initialize_variant",
                "setup": "setup_board",
                "loop": "execute_loop",
                "DAT_08005f88": "data_var_08005f88",
                "serialEventRun": "run_serial_event"
            },
            "code": "int main_loop_08005f6c(void)\n{\n  initialize_variant();\n  setup_board();\n  do {\n    do {\n      execute_loop();\n    } while (DAT_08005f88 == 0);\n    run_serial_event();\n  } while( true );\n}",
            "called": [
                "serialEventRun",
                "initVariant",
                "loop",
                "setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f6c",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "main_loop_08005f6c"
        },
        "FUN_08005690": {
            "renaming": {
                "FUN_08005690": "handle_UART_interrupt_08005690",
                "PTR_uart_handlers_080056a4": "uart_handlers"
            },
            "code": "void handle_UART_interrupt_08005690(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART1_IRQn);\n  HAL_UART_IRQHandler(*PTR_uart_handlers_080056a4);\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler",
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005690",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_08005690"
        },
        "FUN_08005cc0": {
            "renaming": {
                "__thiscall": "",
                "Print": "",
                "FUN_08005cc0": "printWarningMessage_08005cc0",
                "this": "printInstance",
                "sVar1": "messageSize",
                "_vptr_Print": "",
                "PTR_DAT_08005cd0": "PTR_DAT_08005cd0",
                "2": "",
                "size_t": "",
                "return": ""
            },
            "code": "size_t printWarningMessage_08005cc0(Print *printInstance)\n{\n  size_t messageSize;\n  messageSize = (*printInstance->_vptr_Print[1])(printInstance, PTR_DAT_08005cd0, 2);\n  return messageSize;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cc0",
            "calling": [
                "println",
                "println"
            ],
            "imported": false,
            "current_name": "printWarningMessage_08005cc0"
        },
        "FUN_0800706c": {
            "renaming": {
                "FUN_0800706c": "read_from_file_0800706c",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_from_file_0800706c(int *error_code, int file_descriptor, char *buffer, int buffer_size)\n{\n  int read_result;\n  int *error_ptr = PTR_errno_0800708c;\n  *error_ptr = 0;\n  read_result = _read(file_descriptor, buffer, buffer_size);\n  if ((read_result == -1) && (*error_ptr != 0)) {\n    *error_code = *error_ptr;\n  }\n  return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800706c",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_from_file_0800706c"
        },
        "FUN_08002624": {
            "renaming": {
                "FUN_08002624": "configure_GPIO_pins_08002624",
                "GPIOx": "GPIO_Port",
                "GPIO_Init": "GPIO_Config",
                "uVar1": "GPIO_Type",
                "uVar2": "pin_mask",
                "uVar3": "speed_bits",
                "uVar4": "mode_bits",
                "uVar5": "pull_bits",
                "uVar6": "tmpreg",
                "uVar7": "tmpreg",
                "iVar8": "alt_index",
                "iVar9": "alt_offset",
                "iVar10": "af_value",
                "DAT_080027f8": "GPIO_AFIO_BASE",
                "DAT_080027fc": "GPIO_AFIO_BASE",
                "DAT_08002800": "GPIO_AFIO_BASE",
                "DAT_08002804": "GPIO_MODE_AF_PP",
                "DAT_08002808": "GPIO_MODE_AF_OD"
            },
            "code": "void configure_GPIO_pins_08002624(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)\n{\n  GPIO_TypeDef *GPIO_Type;\n  uint32_t pin_mask;\n  uint32_t speed_bits;\n  uint32_t mode_bits;\n  uint32_t pull_bits;\n  uint32_t tmpreg;\n\n  for (uint32_t pin = 0; pin <= 15; pin++) {\n    pin_mask = 1 << pin;\n    if (GPIO_Init->Pin & pin_mask) {\n      mode_bits = GPIO_Init->Mode & 0x0F;\n      if (mode_bits == DAT_08002804 || mode_bits == DAT_08002808) {\n        speed_bits = GPIO_Init->Speed + GPIO_SPEED_FREQ_HIGH;\n      }\n      else {\n        switch (mode_bits) {\n          case GPIO_MODE_INPUT:\n            pull_bits = GPIO_Init->Pull;\n            if (pull_bits == GPIO_NOPULL) {\n              speed_bits = GPIO_SPEED_FREQ_LOW;\n            }\n            else {\n              if (pull_bits == GPIO_PULLUP) {\n                GPIOx->BSRR = pin_mask;\n              }\n              else {\n                GPIOx->BRR = pin_mask;\n              }\n              speed_bits = GPIO_SPEED_FREQ_LOW;\n            }\n            break;\n          case GPIO_MODE_OUTPUT_PP:\n            speed_bits = GPIO_Init->Speed + GPIO_SPEED_FREQ_HIGH;\n            break;\n          case GPIO_MODE_OUTPUT_OD:\n            speed_bits = GPIO_Init->Speed + GPIO_SPEED_FREQ_HIGH;\n            break;\n          case GPIO_MODE_IT_RISING:\n            speed_bits = GPIO_SPEED_FREQ_LOW;\n            break;\n          case GPIO_MODE_IT_FALLING:\n            speed_bits = GPIO_SPEED_FREQ_LOW;\n            break;\n          case GPIO_MODE_IT_RISING_FALLING:\n            speed_bits = GPIO_SPEED_FREQ_LOW;\n            break;\n          case GPIO_MODE_EVT_RISING:\n            speed_bits = GPIO_SPEED_FREQ_LOW;\n            break;\n          case GPIO_MODE_EVT_FALLING:\n            speed_bits = GPIO_SPEED_FREQ_LOW;\n            break;\n          case GPIO_MODE_EVT_RISING_FALLING:\n            speed_bits = GPIO_SPEED_FREQ_LOW;\n            break;\n          default:\n            break;\n        }\n        if (mode_bits != GPIO_MODE_INPUT) {\n          if (GPIO_Init->Alternate != GPIO_AF0_NONE) {\n            uint32_t alt_index = pin / 8;\n            uint32_t alt_offset = (pin % 8) * 4;\n            uint32_t af_value = GPIO_Init->Alternate << alt_offset;\n            *(uint32_t *)(DAT_080027f8 + 0x04 + (alt_index * 4)) |= af_value;\n          }\n          GPIO_Type = (pin < 8) ? GPIOx : (GPIO_TypeDef *)&GPIOx->CRH;\n          uint32_t config_offset = (pin % 8) * 4;\n          GPIO_Type->CRL = (GPIO_Type->CRL & ~(0xF << config_offset)) | (speed_bits << config_offset);\n        }\n      }\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002624",
            "calling": [
                "digital_io_init",
                "HAL_ADC_MspInit",
                "uart_init"
            ],
            "imported": false,
            "current_name": "configure_GPIO_pins_08002624"
        },
        "FUN_0800609c": {
            "renaming": {
                "FUN_0800609c": "handle_gpio_interrupt_0800609c",
                "PTR_": "",
                "DAT_": "",
                "0x10": "GPIO_PIN_4"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ handle_gpio_interrupt_0800609c(DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_HDAT_PDAT_TDAT_RDAT__DAT_ADAT_PDAT_TDAT_RDAT__DAT_LDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_GDAT_PDAT_TDAT_RDAT__DAT_PDAT_PDAT_TDAT_RDAT__DAT_IDAT_PDAT_TDAT_RDAT__DAT_ODAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_EDAT_PDAT_TDAT_RDAT__DAT_XDAT_PDAT_TDAT_RDAT__DAT_TDAT_PDAT_TDAT_RDAT__DAT_IDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_IDAT_PDAT_TDAT_RDAT__DAT_RDAT_PDAT_TDAT_RDAT__DAT_QDAT_PDAT_TDAT_RDAT__DAT_HDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_GDAT_PDAT_TDAT_RDAT__DAT_PDAT_PDAT_TDAT_RDAT__DAT_IDAT_PDAT_TDAT_RDAT__DAT_ODAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_PDAT_PDAT_TDAT_RDAT__DAT_IDAT_PDAT_TDAT_RDAT__DAT_NDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800609c",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_interrupt_0800609c"
        },
        "FUN_080040b0": {
            "renaming": {
                "FUN_080040b0": "HAL_TIM_DisableChannel_080040b0",
                "htim": "timer_handle",
                "Channel": "channel_num",
                "pTVar1": "timer_instance",
                "DAT_0800410c": "PTR_DAT_0800410c"
            },
            "code": "HAL_StatusTypeDef HAL_TIM_DisableChannel_080040b0(TIM_HandleTypeDef *timer_handle, uint32_t channel_num)\n{\n  TIM_TypeDef *timer_instance = timer_handle->Instance;\n  TIM_CCxChannelCmd(timer_instance, channel_num, TIM_CCx_DISABLE);\n  if (((timer_instance == DAT_0800410c) && ((timer_instance->CCER & 0x1111) == 0)) && ((timer_instance->CCER & 0x444) == 0))\n  {\n    timer_instance->BDTR &= ~TIM_BDTR_MOE;\n  }\n  if (((timer_instance->CCER & 0x1111) == 0) && ((timer_instance->CCER & 0x444) == 0)) {\n    timer_instance->CR1 &= ~TIM_CR1_CEN;\n  }\n  timer_handle->State = HAL_TIM_STATE_READY;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b0",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "HAL_TIM_DisableChannel_080040b0"
        },
        "FUN_08005d42": {
            "renaming": {
                "FUN_08005d42": "printNumber_08005d42",
                "this": "self",
                "n": "number",
                "base": "base",
                "sVar1": "length1",
                "sVar2": "length2"
            },
            "code": "size_t __thiscall printNumber_08005d42(Print *this,long number,int base)\n{\n  size_t length1;\n  size_t length2;\n  if (base == 0) {\n    length1 = (**this->_vptr_Print)(this,number & 0xff);\n    return length1;\n  }\n  if (base != 10) {\n    length1 = printNumber_08005d42(this,number,(uint8_t)base);\n    return length1;\n  }\n  if (number >= 0) {\n    length1 = printNumber_08005d42(this,number,'\\n');\n    return length1;\n  }\n  length1 = printChar(this, '-');\n  length2 = printNumber_08005d42(this,-number,'\\n');\n  return length2 + length1;\n}",
            "called": [
                "print",
                "printNumber"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d42",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "printNumber_08005d42"
        },
        "FUN_08004b34": {
            "renaming": {
                "FUN_08004b34": "disable_timer_clock_08004b34",
                "htim": "timer_handle"
            },
            "code": "void disable_timer_clock_08004b34(TIM_HandleTypeDef *timer_handle)\n{\n  timer_disable_clock(timer_handle);\n  return;\n}",
            "called": [
                "timer_disable_clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b34",
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "imported": false,
            "current_name": "disable_timer_clock_08004b34"
        },
        "FUN_08004c52": {
            "renaming": {
                "FUN_08004c52": "initialize_system_08004c52",
                "SystemClock_Config": "configure_system_clock"
            },
            "code": "void initialize_system_08004c52(void)\n{\n  HAL_Init();\n  configure_system_clock();\n  return;\n}",
            "called": [
                "SystemClock_Config",
                "HAL_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c52",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_system_08004c52"
        },
        "FUN_080013a4": {
            "renaming": {
                "FUN_080013a4": "initialize_LCD_080013a4",
                "this": "lcd",
                "cols": "num_columns",
                "lines": "num_rows",
                "dotsize": "dot_size",
                "iVar1": "num_bits",
                "iVar2": "index",
                "_displayfunction": "_display_function",
                "_numlines": "_num_lines",
                "_rs_pin": "_rs_pin",
                "_rw_pin": "_rw_pin",
                "_enable_pin": "_enable_pin",
                "_data_pins": "_data_pins",
                "write4bits": "write_4_bits",
                "send": "send_data",
                "_displaycontrol": "_display_control",
                "display": "display_LCD",
                "clear": "clear_LCD",
                "_displaymode": "_display_mode"
            },
            "code": "void __thiscall initialize_LCD_080013a4(LiquidCrystal *lcd,uint8_t num_columns,uint8_t num_rows,uint8_t dot_size)\n{\n  int index;\n  int num_data_pins;\n  \n  if (num_rows > 1) {\n    lcd->_displayfunction |= 0x08;\n  }\n  lcd->_numlines = num_rows;\n  setRowOffsets(lcd, 0, 0x40, (uint)num_columns, num_columns + 0x40);\n  if ((dot_size != 0) && (num_rows == 1)) {\n    lcd->_displayfunction |= 0x04;\n  }\n  pinMode((uint)lcd->_rs_pin, OUTPUT);\n  if (lcd->_rw_pin != 0xff) {\n    pinMode((uint)lcd->_rw_pin, OUTPUT);\n  }\n  pinMode((uint)lcd->_enable_pin, OUTPUT);\n  num_data_pins = (lcd->_displayfunction & 0x10) ? 8 : 4;\n  for (index = 0; index < num_data_pins; index++) {\n    pinMode((uint)lcd->_data_pins[index], OUTPUT);\n  }\n  digitalWrite((uint)lcd->_rs_pin, LOW);\n  digitalWrite((uint)lcd->_enable_pin, LOW);\n  if (lcd->_rw_pin != 0xff) {\n    digitalWrite((uint)lcd->_rw_pin, LOW);\n  }\n  if ((lcd->_displayfunction & 0x10) == 0) {\n    write4bits(lcd, 0x03);\n    write4bits(lcd, 0x03);\n    write4bits(lcd, 0x03);\n    write4bits(lcd, 0x02);\n  }\n  else {\n    send(lcd, lcd->_displayfunction | 0x20, 0);\n    send(lcd, lcd->_displayfunction | 0x20, 0);\n    send(lcd, lcd->_displayfunction | 0x20, 0);\n  }\n  send(lcd, lcd->_displayfunction | 0x20, 0);\n  lcd->_displaycontrol = 0x04;\n  display(lcd);\n  clear(lcd);\n  lcd->_displaymode = 0x02;\n  send(lcd, 0x06, 0);\n  return;\n}",
            "called": [
                "send",
                "setRowOffsets",
                "digitalWrite",
                "clear",
                "pinMode",
                "display",
                "write4bits"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080013a4",
            "calling": [
                "init",
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_LCD_080013a4"
        },
        "FUN_08006d14": {
            "renaming": {
                "FUN_08006d14": "initialize_stream_08006d14",
                "param_1": "stream",
                "piVar1": "stream_buffer",
                "piVar2": "current_buffer",
                "iVar3": "global_impure_ptr",
                "ppiVar4": "stream_buffer_ptr_ptr"
            },
            "code": "int * initialize_stream_08006d14(FILE *stream) {\n  int *stream_buffer;\n  int *current_buffer;\n  int buffer_count;\n  int **stream_buffer_ptr_ptr;\n  int global_impure_ptr = *(int *)PTR__global_impure_ptr_08006d88;\n  if (*(int *)(global_impure_ptr + 0x18) == 0) {\n    __sinit(global_impure_ptr);\n  }\n  stream_buffer_ptr_ptr = (int **)(global_impure_ptr + 0x48);\n  do {\n    current_buffer = stream_buffer_ptr_ptr[2];\n    stream_buffer = stream_buffer_ptr_ptr[1];\n    while (stream_buffer = (int *)((int)stream_buffer + -1), -1 < (int)stream_buffer) {\n      if (*(short *)(current_buffer + 3) == 0) {\n        *(undefined2 *)((int)current_buffer + 0xe) = 0xffff;\n        current_buffer[0x19] = 0;\n        *(undefined2 *)(current_buffer + 3) = 1;\n        *current_buffer = 0;\n        current_buffer[2] = 0;\n        current_buffer[1] = 0;\n        current_buffer[4] = 0;\n        current_buffer[5] = 0;\n        current_buffer[6] = 0;\n        memset(current_buffer + 0x17,0,8);\n        current_buffer[0xd] = 0;\n        current_buffer[0xe] = 0;\n        current_buffer[0x12] = 0;\n        current_buffer[0x13] = 0;\n        return current_buffer;\n      }\n      current_buffer = current_buffer + 0x1a;\n    }\n    if (*stream_buffer_ptr_ptr == (int *)0x0) {\n      stream_buffer = (int *)__sfmoreglue(stream,4);\n      *stream_buffer_ptr_ptr = stream_buffer;\n      if (stream_buffer == (int *)0x0) {\n        *stream = 0xc;\n        return (int *)0x0;\n      }\n    }\n    stream_buffer_ptr_ptr = (int **)*stream_buffer_ptr_ptr;\n  } while( true );\n}",
            "called": [
                "__sinit",
                "memset",
                "__sfmoreglue"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d14",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "initialize_stream_08006d14"
        },
        "FUN_080004f8": {
            "renaming": {
                "FUN_080004f8": "FUNC_080004f8"
            },
            "code": "\nulonglong FUNC_080004f8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_bitwise_xor_080006d4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006d4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004f8",
            "calling": [
                "SetSampleTime",
                "SetTunings",
                "printFloat",
                "readThermocouple",
                "Compute"
            ],
            "imported": false,
            "current_name": "FUNC_080004f8"
        }
    },
    "used_tokens": 229523,
    "layers": [
        [
            "FUN_08002470",
            "FUN_08007004",
            "FUN_080035fc",
            "FUN_08005740",
            "FUN_08006158",
            "FUN_08006d8c",
            "FUN_08004f2c",
            "FUN_08004ec4",
            "FUN_08000178",
            "FUN_08006c88",
            "FUN_080060e4",
            "FUN_0800258c",
            "FUN_08004e20",
            "FUN_0800573c",
            "FUN_080032b4",
            "FUN_08004d06",
            "FUN_080056d8",
            "FUN_080019f6",
            "FUN_08002f9c",
            "FUN_08005510",
            "FUN_08005750",
            "FUN_08002cf2",
            "FUN_08006288",
            "FUN_08002004",
            "FUN_08004f3c",
            "FUN_08005754",
            "FUN_08005fc8",
            "FUN_08002ab8",
            "FUN_0800598a",
            "FUN_08004e34",
            "FUN_08001a44",
            "FUN_08002c54",
            "FUN_080043b4",
            "FUN_0800441a",
            "FUN_08004d18",
            "FUN_080006d4",
            "FUN_08007028",
            "FUN_08002494",
            "FUN_080055bc",
            "FUN_08001960",
            "FUN_08004ca2",
            "FUN_08002810",
            "FUN_0800224c",
            "FUN_080054b0",
            "FUN_080016b4",
            "FUN_08004e48",
            "FUN_08005890",
            "FUN_08004cb2",
            "FUN_08004ef4",
            "FUN_08001294",
            "FUN_08002384",
            "FUN_08005650",
            "FUN_08006fb6",
            "FUN_08002ad8",
            "FUN_08004204",
            "FUN_08005da8",
            "FUN_080045fe",
            "FUN_080055e0",
            "FUN_08006f10",
            "FUN_0800213c",
            "FUN_0800455a",
            "FUN_08004d30",
            "FUN_08001a66",
            "FUN_08003c44",
            "FUN_08006074",
            "FUN_080028d2",
            "FUN_08000a18",
            "FUN_08005384",
            "FUN_08005b3c",
            "FUN_0800091c",
            "FUN_080046b8",
            "FUN_08004c8a",
            "FUN_08001cd0",
            "FUN_08000130",
            "FUN_08004a4c",
            "FUN_08006112",
            "FUN_08004974",
            "FUN_08003520",
            "FUN_08002ca6",
            "FUN_08004618",
            "FUN_080060a6",
            "FUN_08001c30",
            "FUN_08005c72",
            "FUN_0800048c",
            "FUN_080045a2",
            "FUN_080047e8",
            "FUN_080057b4",
            "FUN_0800092c",
            "FUN_08002560",
            "FUN_08006e90",
            "FUN_08006920",
            "FUN_080008ba",
            "FUN_08002d1c",
            "FUN_08005714",
            "FUN_08003da4",
            "FUN_08005a44",
            "FUN_080009dc",
            "FUN_0800417c",
            "FUN_08004b94",
            "FUN_080058e0",
            "FUN_08001918",
            "FUN_0800611c",
            "FUN_0800049c",
            "FUN_080047f4",
            "FUN_08002c10",
            "FUN_080009f0",
            "FUN_0800134e",
            "FUN_08006be0",
            "FUN_080012e8",
            "FUN_08006370",
            "FUN_080024f8",
            "FUN_0800594e",
            "FUN_080056a8",
            "FUN_08006ac0",
            "FUN_08007220",
            "FUN_08004198",
            "FUN_08001c3c",
            "FUN_08000a2c",
            "FUN_08001366",
            "FUN_08005848",
            "FUN_08000ae8",
            "FUN_08003ed8",
            "FUN_080061e0",
            "FUN_08004f0c",
            "FUN_08005604",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800135a",
            "FUN_08005c96",
            "FUN_0800571a",
            "FUN_08002efc",
            "FUN_0800365c",
            "FUN_08006ad0",
            "FUN_080033b8",
            "FUN_080069e4",
            "FUN_080060bc",
            "FUN_08004b9e",
            "FUN_08006940",
            "FUN_080058ea",
            "FUN_08002582",
            "FUN_08005976",
            "FUN_08004884",
            "FUN_08005fa0",
            "FUN_08001be8",
            "FUN_080061f0",
            "FUN_08002348",
            "FUN_08004f1c",
            "FUN_08005a68",
            "FUN_08001814",
            "FUN_080056c0",
            "FUN_08000aec",
            "FUN_0800572c",
            "FUN_08004e12",
            "FUN_08000a58",
            "FUN_08001b48",
            "FUN_08004092",
            "FUN_08000450",
            "FUN_08005bb0",
            "FUN_080014ba",
            "FUN_08003c90",
            "FUN_08002514",
            "FUN_08005c1c",
            "FUN_08006dc8",
            "FUN_0800412c",
            "FUN_0800492c",
            "FUN_08000cbc",
            "FUN_0800480a",
            "FUN_080015f8",
            "FUN_08005c38",
            "FUN_08005f8c",
            "FUN_08006f5a",
            "FUN_08000b08",
            "FUN_08006cb4",
            "FUN_08004c5e",
            "FUN_08007098",
            "FUN_08004b3c",
            "FUN_08001550",
            "FUN_08001310",
            "FUN_080009a8",
            "FUN_08004d90",
            "FUN_08005ce8",
            "FUN_0800316c",
            "FUN_08004828",
            "FUN_08004948",
            "FUN_08005b24",
            "FUN_080049f0",
            "FUN_08001e40",
            "FUN_08003a68",
            "FUN_080012a2",
            "FUN_08004c78",
            "FUN_08005bd4",
            "FUN_08001e48",
            "FUN_080059c8",
            "FUN_080009b8",
            "FUN_08000aa8",
            "FUN_08000a04",
            "FUN_0800010c",
            "FUN_08001cac",
            "FUN_08005a18",
            "FUN_08003f18",
            "FUN_0800591e",
            "FUN_08006104",
            "FUN_08002540",
            "FUN_08005be2",
            "FUN_08006344",
            "FUN_080009c8",
            "FUN_08002db2",
            "FUN_08005932",
            "FUN_08001cc4",
            "FUN_08003ea0",
            "FUN_0800306c",
            "FUN_08005c64",
            "FUN_0800548c",
            "FUN_08000924",
            "FUN_08006c34",
            "FUN_080072a4",
            "FUN_08004848",
            "FUN_08006f92",
            "FUN_080012c0",
            "FUN_08001f80",
            "FUN_08001f84",
            "FUN_08000bcc",
            "FUN_080047d8",
            "FUN_0800281e",
            "FUN_08006198",
            "FUN_08006fc0",
            "FUN_08007048",
            "FUN_08003c50",
            "FUN_080065c0",
            "FUN_080054d4",
            "FUN_0800715c",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_0800282c",
            "FUN_080015b2",
            "FUN_0800040c",
            "FUN_08006088",
            "FUN_08006eb0",
            "FUN_08004e5c",
            "FUN_08004df4",
            "FUN_08004bb0",
            "FUN_08004df8",
            "FUN_08002af8",
            "FUN_080028de",
            "FUN_08002848",
            "FUN_08004e70",
            "FUN_080020f0",
            "FUN_08006e10",
            "FUN_0800607e",
            "FUN_08004e74",
            "FUN_08004c30",
            "FUN_08006092",
            "FUN_08006f38",
            "FUN_08004cce",
            "FUN_08006f34",
            "FUN_08006fe4",
            "FUN_08003ad4",
            "FUN_08004110",
            "FUN_08004ce2",
            "FUN_08005568",
            "FUN_08004478",
            "FUN_08005f5e",
            "FUN_08005cb6",
            "FUN_08003c70",
            "FUN_080053d4",
            "FUN_08002b84",
            "FUN_08004c48",
            "FUN_0800042c",
            "FUN_08005f6c",
            "FUN_08005690",
            "FUN_08005cc0",
            "FUN_0800706c",
            "FUN_08002624",
            "FUN_0800609c",
            "FUN_080040b0",
            "FUN_08004b34",
            "FUN_08004c52",
            "FUN_080013a4",
            "FUN_08006d14"
        ],
        [
            "FUN_080068f0",
            "FUN_0800138e",
            "FUN_08001c88",
            "FUN_08006174",
            "FUN_08006f00",
            "FUN_080018f8",
            "FUN_08005da0",
            "FUN_08005f2c",
            "FUN_08005f40",
            "FUN_08005b54",
            "FUN_08006c40",
            "FUN_0800157c",
            "FUN_08001c32",
            "FUN_08001b18",
            "FUN_08005d8a",
            "FUN_08001ab0",
            "FUN_08005730",
            "FUN_080060d4",
            "FUN_08005cd4",
            "FUN_08007090",
            "FUN_08005d82",
            "FUN_08001510",
            "FUN_08005d42"
        ]
    ],
    "locked_functions": []
}