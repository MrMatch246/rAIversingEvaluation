{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_system_00000410",
            "code": "\nvoid initializeSystem_00000410(void)\n\n{\n  FUN_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_system_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "check_and_adjust_offset_00000428",
            "code": "\ndword checkAndAdjustOffset_00000428(undefined4 *resultPtr,int inputOffset)\n\n{\n  undefined4 randomValue;\n  dword adjustedOffset;\n  \n  randomValue = FUN_00000cd0();\n  adjustedOffset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *resultPtr = 0xc;\n    adjustedOffset = 0xffffffff;\n  }\n  FUN_00000d0c(randomValue);\n  return adjustedOffset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "check_and_adjust_offset_00000428",
                "param_1": "resultPtr",
                "param_2": "inputOffset",
                "uVar1": "randomValue",
                "local_c": "adjustedOffset"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "extracted_function_00000490",
            "code": "\nundefined4 extractedFunction_00000490(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000e14(param3,param4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "extracted_function_00000490",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "set_param_with_value_000004f2",
            "code": "\nundefined4 setParamWithValue_000004f2(undefined4 *outputValue)\n\n{\n  *outputValue = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "set_param_with_value_000004f2",
                "param_1": "outputValue"
            },
            "calling": [
                "FUN_00004dee",
                "FUN_00004e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "set_value_and_return_00000514",
            "code": "\nundefined4 set_value_and_return_00000514(undefined4 *value_ptr)\n\n{\n  *value_ptr = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "set_value_and_return_00000514",
                "param_1": "value_ptr"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_param_validity_00000534",
            "code": "\nundefined4 checkParamValidity_00000534(undefined4 *result,int inputParam)\n\n{\n  undefined4 isValid;\n  \n  *result = 0;\n  if (((inputParam == 0) || (inputParam == 1)) || (inputParam == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_param_validity_00000534",
                "param_1": "result",
                "param_2": "inputParam",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "extract_least_significant_byte_00000566",
            "code": "\nint extractLeastSignificantByte_00000566(int input)\n\n{\n  byte leastSignificantByte;\n  byte secondLeastSignificantByte;\n  byte thirdLeastSignificantByte;\n  byte fourthLeastSignificantByte;\n  int output;\n  \n  secondLeastSignificantByte = (byte)input;\n  thirdLeastSignificantByte = (byte)((uint)input >> 8);\n  fourthLeastSignificantByte = (byte)((uint)input >> 0x10);\n  leastSignificantByte = (byte)((uint)input >> 0x18);\n  output = LZCOUNT((uint)(byte)((((((((secondLeastSignificantByte & 1) << 1 | secondLeastSignificantByte >> 1 & 1) << 1 | secondLeastSignificantByte >> 2 & 1) << 1\n                                  | secondLeastSignificantByte >> 3 & 1) << 1 | secondLeastSignificantByte >> 4 & 1) << 1 | secondLeastSignificantByte >> 5 & 1) <<\n                                1 | secondLeastSignificantByte >> 6 & 1) << 1 | secondLeastSignificantByte >> 7) << 0x18 |\n                  (uint)(byte)((((((((thirdLeastSignificantByte & 1) << 1 | thirdLeastSignificantByte >> 1 & 1) << 1 | thirdLeastSignificantByte >> 2 & 1) << 1\n                                  | thirdLeastSignificantByte >> 3 & 1) << 1 | thirdLeastSignificantByte >> 4 & 1) << 1 | thirdLeastSignificantByte >> 5 & 1) <<\n                                1 | thirdLeastSignificantByte >> 6 & 1) << 1 | thirdLeastSignificantByte >> 7) << 0x10 |\n                  (uint)(byte)((((((((fourthLeastSignificantByte & 1) << 1 | fourthLeastSignificantByte >> 1 & 1) << 1 | fourthLeastSignificantByte >> 2 & 1) << 1\n                                  | fourthLeastSignificantByte >> 3 & 1) << 1 | fourthLeastSignificantByte >> 4 & 1) << 1 | fourthLeastSignificantByte >> 5 & 1) <<\n                                1 | fourthLeastSignificantByte >> 6 & 1) << 1 | fourthLeastSignificantByte >> 7) << 8 |\n                  (uint)(byte)((((((((leastSignificantByte & 1) << 1 | leastSignificantByte >> 1 & 1) << 1 | leastSignificantByte >> 2 & 1) << 1\n                                  | leastSignificantByte >> 3 & 1) << 1 | leastSignificantByte >> 4 & 1) << 1 | leastSignificantByte >> 5 & 1) <<\n                                1 | leastSignificantByte >> 6 & 1) << 1 | leastSignificantByte >> 7));\n  if (input == 0) {\n    output = -1;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00000566": "extract_least_significant_byte_00000566",
                "param_1": "input",
                "bVar1": "leastSignificantByte",
                "bVar2": "secondLeastSignificantByte",
                "bVar3": "thirdLeastSignificantByte",
                "bVar4": "fourthLeastSignificantByte",
                "iVar5": "output"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "set_param_0000058e",
            "code": "\nvoid setParam_0000058e(int *inputPtr,undefined4 *outputPtr)\n\n{\n  if (*inputPtr == 0) {\n    *outputPtr = outputPtr;\n  }\n  else {\n    *outputPtr = *(undefined4 *)*inputPtr;\n    *(undefined4 **)*inputPtr = outputPtr;\n  }\n  *inputPtr = outputVal;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "set_param_0000058e",
                "param_1": "inputPtr",
                "param_2": "outputPtr",
                "(int)param_2": "outputVal"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_ptr_from_param_000005ca",
            "code": "\nundefined4 * extractPtrFromParam_000005ca(int *inputPtr)\n\n{\n  undefined4 *resultPtr;\n  \n  if (*inputPtr == 0) {\n    resultPtr = (undefined4 *)0x0;\n  }\n  else {\n    resultPtr = *(undefined4 **)*inputPtr;\n    if (resultPtr == (undefined4 *)*inputPtr) {\n      *inputPtr = 0;\n    }\n    else {\n      *(undefined4 *)*inputPtr = *resultPtr;\n    }\n  }\n  return resultPtr;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_ptr_from_param_000005ca",
                "param_1": "inputPtr",
                "puVar1": "resultPtr"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "decompile_and_process_00000610",
            "code": "\nundefined4 decompile_and_process_00000610(void)\n\n{\n  int ptr_current_value;\n  int ptr_result;\n  undefined4 return_value;\n  \n  ptr_current_value = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  ptr_result = FUN_00000566(DAT_1fff0424);\n  ptr_result = **(int **)(&DAT_1fff03e4 + ptr_result * 4);\n  if (ptr_current_value == ptr_result + -8) {\n    return_value = 0;\n  }\n  else {\n    if ((ptr_current_value != 0) && (*(char *)(ptr_current_value + 4) == '\\t')) {\n      *(undefined *)(ptr_current_value + 4) = 10;\n    }\n    *(undefined *)(ptr_result + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(ptr_result + -2);\n    return_value = 1;\n    DAT_1fff03dc = ptr_result + -8;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00000610": "decompile_and_process_00000610",
                "iVar1": "ptr_current_value",
                "iVar2": "ptr_result",
                "uVar3": "return_value"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_parameters_00000698",
            "code": "\nvoid updateParameters_00000698(int paramIndex,uint newValue)\n\n{\n  if (newValue < 9) {\n    if ((8 < *(unsignedByte *)(paramIndex + 4)) &&\n       (FUN_000005ca(&DAT_1fff03e4 + (uint)*(unsignedByte *)(paramIndex + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(unsignedByte *)(paramIndex + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(signedByte *)(paramIndex + 5));\n    }\n  }\n  else if (*(unsignedByte *)(paramIndex + 4) < 9) {\n    FUN_0000058e(&DAT_1fff03e4 + (uint)*(unsignedByte *)(paramIndex + 5) * 4,paramIndex + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(signedByte *)(paramIndex + 5);\n  }\n  *(char *)(paramIndex + 4) = (char)newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_parameters_00000698",
                "param_1": "paramIndex",
                "param_2": "newValue",
                "sbyte": "signedByte",
                "byte": "unsignedByte"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000794"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_and_update_limits_00000738",
            "code": "\nvoid checkAndUpdateLimits_00000738(ushort inputValue)\n\n{\n  int result;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputValue < *(byte *)(DAT_1fff03dc + 5))) {\n    result = FUN_00000d2a();\n    if (result == 0) {\n      FUN_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_and_update_limits_00000738",
                "param_1": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_00000d2a",
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_data_00000794",
            "code": "\nint * initializeData_00000794(void)\n\n{\n  int result;\n  int index;\n  undefined4 *dataPointer;\n  uint alignedAddress;\n  int loopIndex1;\n  int loopIndex2;\n  int *pointer;\n  \n  FUN_00000cd0();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  FUN_00000698(DAT_1fff03dc,0);\n  dataPointer = &DAT_1fff03dc;\n  index = 0;\n  DAT_1fff03dc = 0;\n  FUN_00000930();\n  alignedAddress = (int)dataPointer + index & 0xfffffffc;\n  pointer = (int *)(alignedAddress - 4);\n  *pointer = 0x77777777;\n  if (((uint)pointer & 7) != 0) {\n    pointer = (int *)(alignedAddress - 8);\n    *pointer = 0x88888888;\n  }\n  pointer[-1] = 0x1000000;\n  pointer[-2] = index << 0xd;\n  pointer[-3] = 0x795;\n  pointer = pointer + -4;\n  *pointer = 0;\n  for (loopIndex2 = 3; 0 < loopIndex2; loopIndex2 = loopIndex2 + -1) {\n    pointer = pointer + -1;\n    *pointer = loopIndex2;\n  }\n  pointer = pointer + -1;\n  *pointer = result;\n  for (loopIndex1 = 0xb; 3 < loopIndex1; loopIndex1 = loopIndex1 + -1) {\n    pointer = pointer + -1;\n    *pointer = loopIndex1;\n  }\n  pointer[-1] = -3;\n  return pointer + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_data_00000794",
                "extraout_r1": "result",
                "iVar1": "index",
                "puVar2": "dataPointer",
                "uVar3": "alignedAddress",
                "iStack_1c": "loopIndex1",
                "iStack_18": "loopIndex2",
                "piStack_14": "pointer"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 param1,int param2,int param3,int param4)\n\n{\n  uint alignedSize;\n  int counter1;\n  int counter2;\n  int *ptr;\n  \n  alignedSize = param4 + param3 & 0xfffffffc;\n  ptr = (int *)(alignedSize - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(alignedSize - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = param1;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (counter2 = 3; 0 < counter2; counter2 = counter2 + -1) {\n    ptr = ptr + -1;\n    *ptr = counter2;\n  }\n  ptr = ptr + -1;\n  *ptr = param2;\n  for (counter1 = 0xb; 3 < counter1; counter1 = counter1 + -1) {\n    ptr = ptr + -1;\n    *ptr = counter1;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "alignedSize",
                "local_14": "counter1",
                "local_10": "counter2",
                "local_c": "ptr"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "count_reloc_entries_000008b8",
            "code": "\nint count_reloc_entries_000008b8(void)\n\n{\n  RelocationEntry *current_entry;\n  \n  for (current_entry = (RelocationEntry *)&DAT_1fff0000;\n      (current_entry->r_offset == 0xe7fee7fe && (current_entry < reloc_array_end));\n      current_entry = (RelocationEntry *)&current_entry->r_info) {\n  }\n  return ((int)reloc_array_end - (int)current_entry >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "count_reloc_entries_000008b8",
                "local_c": "current_entry",
                "Elf32_Rel": "RelocationEntry",
                "Elf32_Rel_ARRAY_1fff0200": "reloc_array_end"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 getMainStackPointer_00000900(void)\n\n{\n  undefined4 mainStackPointer;\n  \n  mainStackPointer = getMainStackPointer_00000900();\n  return mainStackPointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "mainStackPointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_memory_address_0000091c",
            "code": "\nuint32_t getMemoryAddress_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_memory_address_0000091c",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "run_infinite_loop_00000930",
            "code": "\nvoid run_infinite_loop_00000930(void)\n\n{\n  FUN_00000cf0();\n  trigger_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "run_infinite_loop_00000930",
                "software_interrupt": "trigger_interrupt"
            },
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_serial_port_flag_0000093c",
            "code": "\n\n\nvoid setSerialPortFlag_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_serial_port_flag_0000093c"
            },
            "calling": [
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00000738",
                "FUN_00002434",
                "FUN_00001348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  FUN_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  FUN_00000e64();\n  FUN_0000459c();\n  FUN_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000f8c",
                "FUN_00000990",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "get_nmi_handler_address_00000a30",
            "code": "\nundefined * getNMIHandlerAddress_00000a30(void)\n\n{\n  int stackOffset;\n  \n  FUN_00000f04(4,\"NMI HANDLER\");\n  return stackBaseAddress + -*(int *)(stackOffset + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "get_nmi_handler_address_00000a30",
                "in_r3": "stackOffset",
                "&stack0xe000ffe0": "stackBaseAddress"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "disable_and_return_irq_status_00000cc0",
            "code": "\nundefined4 disableAndReturnIRQStatus_00000cc0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 irqStatus;\n  \n  FUN_00000f04(10,\"DUMMY HANDLER\");\n  irqStatus = 0;\n  isPrivilegedMode = (bool)getCurrentModePrivilege();\n  if (isPrivilegedMode) {\n    irqStatus = areIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return irqStatus;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "disable_and_return_irq_status_00000cc0",
                "uVar2": "irqStatus",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "getCurrentModePrivilege",
                "isIRQinterruptsEnabled": "areIRQinterruptsEnabled"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_irq_interrupts_status_00000cd0",
            "code": "\nundefined4 checkIRQInterruptsStatus_00000cd0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 isInterruptsEnabled;\n  \n  isInterruptsEnabled = 0;\n  isCurrentModePrivileged = (bool)isCurrentModePrivileged();\n  if (isCurrentModePrivileged) {\n    isInterruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return isInterruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_irq_interrupts_status_00000cd0",
                "bVar1": "isCurrentModePrivileged",
                "uVar2": "isInterruptsEnabled"
            },
            "calling": [
                "FUN_00000428",
                "FUN_00000f8c",
                "FUN_00000f04",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000e58",
                "FUN_00000794"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_ir_qinterrupt_status_00000cf0",
            "code": "\nundefined4 checkIRQinterruptStatus_00000cf0(void)\n\n{\n  bool isPrivileged;\n  undefined4 interruptsEnabled;\n  \n  enableInterrupts();\n  interruptsEnabled = 0;\n  isPrivileged = (bool)checkPrivilegedMode();\n  if (isPrivileged) {\n    interruptsEnabled = checkInterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_ir_qinterrupt_status_00000cf0",
                "bVar1": "isPrivileged",
                "uVar2": "interruptsEnabled",
                "enableIRQinterrupts": "enableInterrupts",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "isIRQinterruptsEnabled": "checkInterruptsEnabled"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_ir_qinterrupts_if_needed_00000d0c",
            "code": "\nvoid enableIRQinterruptsIfNeeded_00000d0c(uint interruptFlag)\n\n{\n  bool isPrivilegedMode;\n  \n  isPrivilegedMode = (bool)checkCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    enableIRQinterrupts((interruptFlag & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_ir_qinterrupts_if_needed_00000d0c",
                "param_1": "interruptFlag",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "checkCurrentModePrivileged"
            },
            "calling": [
                "FUN_00000428",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_offset_00000d44",
            "code": "\nint calculate_offset_00000d44(uint address,int multiplier)\n\n{\n  return multiplier * 4 + (address & 0xf0000000 | (address & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "address",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "clear_memory_00000d76",
            "code": "\nvoid clearMemory_00000d76(undefined4 dataPointer,undefined size)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)FUN_00000d44(dataPointer,size);\n  *resultPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "clear_memory_00000d76",
                "param_1": "dataPointer",
                "param_2": "size",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "initialize_registers_00000d9c",
            "code": "\nvoid initializeRegisters_00000d9c(void)\n\n{\n  FUN_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "initialize_registers_00000d9c"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_application_00000db0",
            "code": "\nvoid initialize_application_00000db0(void)\n\n{\n  FUN_00000dcc();\n  FUN_00000d9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_application_00000db0"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "initialize_system_00000dc0",
            "code": "\nvoid initialize_system_00000dc0(void)\n\n{\n  FUN_00000cc0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "initialize_system_00000dc0"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_variables_00000dcc",
            "code": "\n\n\nvoid initializeVariables_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_variables_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_memory_00000df4",
            "code": "\nvoid initializeMemory_00000df4(void)\n\n{\n  FUN_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_memory_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "initialize_hardware_00000e14",
            "code": "\nundefined4 initializeHardware_00000e14(undefined4 deviceAddress,undefined4 configOptions)\n\n{\n  undefined4 result;\n  \n  result = FUN_000012e2(0x1fff0204,deviceAddress,configOptions);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "initialize_hardware_00000e14",
                "param_1": "deviceAddress",
                "param_2": "configOptions",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "execute_function_00000e38",
            "code": "\nundefined4 executeFunction_00000e38(undefined4 input1,undefined4 output)\n\n{\n  FUN_000015d0(0,input1,output);\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "execute_function_00000e38",
                "param_1": "input1",
                "param_2": "output"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "run_infinite_loop_00000e58",
            "code": "\nvoid run_infinite_loop_00000e58(void)\n\n{\n  FUN_00000cd0();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "run_infinite_loop_00000e58"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_peripheral_00000e64",
            "code": "\n\n\nvoid initializePeripheral_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  FUN_00001274();\n  FUN_00001eea(0x2056,0x80);\n  FUN_00001eea(0x511a,0x80);\n  FUN_00001eea(0x2055,0x80);\n  FUN_00001ff6(0x2056);\n  FUN_00001ff6(0x511a);\n  FUN_00001ff6(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_peripheral_00000e64"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001eea",
                "FUN_00001274",
                "FUN_00001ff6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 linkRegister;\n  \n  FUN_00004c84(&DAT_00006f58,linkRegister);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "linkRegister"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handleKernelPanic_00000f04(char panicType,undefined4 panicMessage)\n\n{\n  undefined4 stackVar;\n  code *jumpTable;\n  undefined4 message;\n  char type;\n  \n  message = panicMessage;\n  type = panicType;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panicType == '\\x03') {\n      FUN_00000ed8();\n    }\n    FUN_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",message);\n    FUN_0000211c();\n    FUN_00004c84(&DAT_00006f78);\n    FUN_00004c84(\"*** halted.\\n\\n\");\n  }\n  FUN_00000cd0();\n  FUNC_00000ef8();\n  jumpTable = (code *)0xf4d;\n  FUN_00000e58();\n  stackVar = (int)&stackVar + 1;\n  FUNC_00002400();\n  FUN_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  FUN_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "panicType",
                "param_2": "panicMessage",
                "uStack_18": "stackVar",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "local_10": "message",
                "local_9": "type"
            },
            "calling": [
                "FUN_00000a30",
                "FUN_000013b8",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_00001034",
                "FUN_00000fec"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_000023a4",
                "FUN_00000ef8",
                "FUN_00002400",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_00000e58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_memory_00000f8c",
            "code": "\nvoid initializeMemory_00000f8c(void)\n\n{\n  uint highBits;\n  undefined4 *intPointer;\n  uint counter;\n  int shiftedValue;\n  int *shiftedValuePointer;\n  undefined4 initialValue;\n  undefined4 constant1;\n  undefined4 constant2;\n  dword offset;\n  \n  FUN_00000cd0();\n  offset = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  constant2 = 0;\n  constant1 = 0xf81;\n  FUN_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  offset = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  constant2 = 0;\n  constant1 = 0xf5d;\n  counter = 0xc;\n  FUN_000010d4(&DAT_1fff046c,0x600,7);\n  initialValue = 0xfd3;\n  highBits = FUN_00000930();\n  highBits = highBits >> 0x1e;\n  intPointer = (undefined4 *)(counter * 0x100);\n  shiftedValue = (counter >> 0x1d) << 0x11;\n  shiftedValuePointer = &shiftedValue;\n  if ((highBits & highBits - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *intPointer = 0;\n  intPointer[1] = 0;\n  intPointer[2] = highBits - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_memory_00000f8c",
                "uVar1": "highBits",
                "puVar2": "intPointer",
                "uVar3": "counter",
                "iStack_24": "shiftedValue",
                "piStack_20": "shiftedValuePointer",
                "uStack_1c": "initialValue",
                "local_18": "constant1",
                "local_14": "constant2",
                "local_10": "offset"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_000010d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_param_with_size_minus_one_00000fec",
            "code": "\nvoid initializeParamWithSizeMinusOne_00000fec(undefined4 *outputParam,uint size)\n\n{\n  if ((size & size - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *outputParam = 0;\n  outputParam[1] = 0;\n  outputParam[2] = size - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_param_with_size_minus_one_00000fec",
                "param_1": "outputParam",
                "param_2": "size",
                "param_1[1]": "outputParam[1]",
                "param_1[2]": "outputParam[2]"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_and_set_pointer_00001034",
            "code": "\nvoid findAndSetPointer_00001034(int **pointerArray,int index)\n\n{\n  int **currentPointer;\n  \n  if (8 < *(byte *)(index + 4)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (currentPointer = pointerArray;\n      (*currentPointer != (int *)0x0 && (*(byte *)((int)*currentPointer + -3) <= *(byte *)(index + 5)));\n      currentPointer = (int **)*currentPointer) {\n  }\n  *(int **)(index + 8) = *currentPointer;\n  *currentPointer = (int *)(int **)(index + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_and_set_pointer_00001034",
                "param_1": "pointerArray",
                "param_2": "index",
                "local_1c": "currentPointer"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "get_difference_000010a0",
            "code": "\nint getDifference_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "get_difference_000010a0",
                "param_1": "array",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_data_structure_000010d4",
            "code": "\nint initializeDataStructure_000010d4(uint inputPointer,int size,byte count,uint flags,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 result;\n  undefined4 temp;\n  int errorCode;\n  uint alignedSize;\n  undefined4 *dataPtr;\n  int offset;\n  uint alignedPointer;\n  uint endPointer;\n  short index;\n  short availableIndex;\n  \n  if (count < 0x10) {\n    offset = size;\n    alignedPointer = inputPointer;\n    if ((inputPointer & 3) != 0) {\n      offset = 4 - (inputPointer & 3);\n      alignedPointer = offset + inputPointer;\n      offset = size - offset;\n    }\n    alignedSize = offset - 0x30U & 0xfffffffc;\n    dataPtr = (undefined4 *)(alignedSize + alignedPointer);\n    if ((flags & 8) == 0) {\n      *(uint *)alignedPointer = alignedPointer;\n    }\n    else {\n      for (endPointer = alignedPointer; endPointer < alignedSize + alignedPointer; endPointer = endPointer + 4) {\n        *(uint *)endPointer = endPointer;\n      }\n    }\n    result = FUN_00000cd0();\n    availableIndex = 0;\n    for (index = 1; index < 0x21; index = index + 1) {\n      if (*(int *)(&DAT_1fff0358 + index * 4) == 0) {\n        availableIndex = index;\n        break;\n      }\n    }\n    if (availableIndex == 0) {\n      FUN_00000d0c(result);\n      errorCode = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + availableIndex * 4) = dataPtr;\n      *(short *)((int)dataPtr + 6) = availableIndex;\n      temp = FUN_000007dc(param5,param6,alignedPointer,alignedSize);\n      *dataPtr = temp;\n      dataPtr[9] = alignedPointer;\n      dataPtr[0xb] = size;\n      dataPtr[10] = param7;\n      *(byte *)((int)dataPtr + 5) = count;\n      *(undefined *)(dataPtr + 1) = 0;\n      dataPtr[2] = 0;\n      dataPtr[3] = 0;\n      dataPtr[4] = 0;\n      FUN_00000fec(dataPtr + 5,0);\n      dataPtr[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        FUN_00000698(dataPtr,10);\n        if ((flags & 4) == 0) {\n          FUN_00000d0c(result);\n          FUN_00000738(count);\n          return (int)availableIndex;\n        }\n      }\n      else {\n        FUN_00000698(dataPtr,1);\n      }\n      FUN_00000d0c(result);\n      errorCode = (int)availableIndex;\n    }\n  }\n  else {\n    errorCode = -0x16;\n  }\n  return errorCode;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_data_structure_000010d4",
                "param_1": "inputPointer",
                "param_2": "size",
                "param_3": "count",
                "param_4": "flags",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "result",
                "uVar2": "temp",
                "iVar3": "errorCode",
                "uVar4": "alignedSize",
                "puVar5": "dataPtr",
                "local_30": "offset",
                "local_2c": "alignedPointer",
                "local_10": "endPointer",
                "local_c": "index",
                "local_a": "availableIndex"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_000007dc",
                "FUN_00000738",
                "FUN_00000fec",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_system_00001274",
            "code": "\nvoid initializeSystem_00001274(void)\n\n{\n  FUN_0000258c();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  FUN_00001c84();\n  FUN_00002396();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_system_00001274"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_0000258c",
                "FUN_00001c84",
                "FUN_00002396"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "initialize_device_0000129c",
            "code": "\nvoid initializeDevice_0000129c(undefined4 deviceHandle)\n\n{\n  FUN_00002434(deviceHandle,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "initialize_device_0000129c",
                "param_1": "deviceHandle"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "process_function_000012b4",
            "code": "\nundefined4 processFunction_000012b4(int inputParam,undefined additionalParam)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = FUN_00002364(inputParam + 4,additionalParam);\n  FUN_000024bc(inputParam);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "process_function_000012b4",
                "param_1": "inputParam",
                "param_2": "additionalParam",
                "uVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "check_condition_and_execute_000012e2",
            "code": "\nint checkConditionAndExecute_000012e2(int input,undefined4 param2,undefined4 param3)\n\n{\n  int result;\n  \n  while( true ) {\n    result = FUN_0000231c(input + 4,param2,param3);\n    if (result != 0) break;\n    FUN_0000129c(input);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "check_condition_and_execute_000012e2",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid setBitInMemory_00001318(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_invoke_function_00001348",
            "code": "\nvoid checkAndInvokeFunction_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_invoke_function_00001348"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_result_00001360",
            "code": "\nint calculateResult_00001360(uint input1,int input2)\n\n{\n  return input2 * 4 + (input1 & 0xf0000000 | (input1 & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_result_00001360",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_flag_00001392",
            "code": "\nvoid setFlag_00001392(undefined4 input1,undefined input2)\n\n{\n  undefined4 *pointer;\n  \n  pointer = (undefined4 *)FUN_00001360(input1,input2);\n  *pointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_flag_00001392",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "update_data_000013b8",
            "code": "\nundefined4 updateData_000013b8(int index,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 result;\n  \n  if (index != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = data1;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = data2;\n  FUN_00001448(index);\n  FUN_00001392(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    FUN_000014c4(index,value);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "update_data_000013b8",
                "param_1": "index",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00001448",
                "FUN_000014c4",
                "FUN_00001392"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "process_data_00001448",
            "code": "\nvoid processData_00001448(int dataIndex)\n\n{\n  if (*(short *)(&DAT_00006fec + dataIndex * 0x20) != -1) {\n    FUN_00001f80(*(entryData *)(&DAT_00006fec + dataIndex * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + dataIndex * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + dataIndex * 0x20) != -1) {\n    FUN_00001f80(*(entryData *)(&DAT_00006fee + dataIndex * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + dataIndex * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "process_data_00001448",
                "param_1": "dataIndex",
                "undefined2": "entryData"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_configuration_000014c4",
            "code": "\nvoid updateConfiguration_000014c4(int index,uint divisor)\n\n{\n  byte *configPtr;\n  uint value1;\n  uint value2;\n  \n  configPtr = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  value1 = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  configPtr[3] = configPtr[3] & 0xf3;\n  configPtr[2] = (&DAT_00007001)[index * 0x20];\n  value2 = value1 / (divisor << 4);\n  *configPtr = (byte)(value2 >> 8) & 0x1f;\n  configPtr[1] = (byte)value2;\n  configPtr[10] = (byte)((value1 << 2) / divisor + 1 >> 1) & 0x1f;\n  configPtr[0x10] = configPtr[0x10] | 0x88;\n  if ((configPtr[0x10] & 0x70) == 0) {\n    configPtr[0x13] = 0;\n  }\n  else {\n    configPtr[0x13] = (char)(2 << (configPtr[0x10] >> 4 & 7)) - 1;\n  }\n  configPtr[0x15] = 1;\n  configPtr[0x11] = 0xc0;\n  configPtr[3] = configPtr[3] | 0x2c;\n  FUN_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_configuration_000014c4",
                "param_1": "index",
                "param_2": "divisor",
                "pbVar1": "configPtr",
                "uVar2": "value1",
                "uVar3": "value2"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int offset,int source,uint length)\n\n{\n  int elementOffset;\n  uint index;\n  \n  elementOffset = *(int *)(&DAT_00006fe4 + offset * 0x20);\n  for (index = 0; index < length; index = index + 1) {\n    do {\n    } while (-1 < *(char *)(elementOffset + 4));\n    *(undefined *)(elementOffset + 7) = *(undefined *)(index + source);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "offset",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "elementOffset",
                "local_c": "index"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_function_00001628",
            "code": "\nvoid executeFunction_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  FUN_00001348();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_function_00001628",
                "param_1": "index"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_program_00001688",
            "code": "\nvoid initializeProgram_00001688(void)\n\n{\n  FUN_00001628(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_program_00001688"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_result_00001696",
            "code": "\nint calculateResult_00001696(uint input1,int input2)\n\n{\n  return input2 * 4 + (input1 & 0xf0000000 | (input1 & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_result_00001696",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_000016c8",
                "FUN_00001710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "initialize_flag_000016c8",
            "code": "\nvoid initializeFlag_000016c8(undefined4 param1,undefined param2)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)FUN_00001696(param1,param2);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "initialize_flag_000016c8",
                "param_1": "param1",
                "param_2": "param2",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_flag_000016ec",
            "code": "\nvoid setFlag_000016ec(undefined4 value,undefined flag)\n\n{\n  undefined *pointer;\n  \n  pointer = (undefined *)FUN_00001696(value,flag);\n  *pointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_flag_000016ec",
                "param_1": "value",
                "param_2": "flag",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 input1,undefined input2)\n\n{\n  undefined *memoryAddress;\n  \n  memoryAddress = (undefined *)FUN_00001696(input1,input2);\n  *memoryAddress = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "memoryAddress"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001734",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "initialize_data_00001734",
            "code": "\nvoid initializeData_00001734(void)\n\n{\n  FUN_00001710(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "initialize_data_00001734"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_register_00001748",
            "code": "\nvoid updateRegister_00001748(byte byteValue)\n\n{\n  DAT_40064003 = byteValue | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_register_00001748",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "update_and_send_data_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid updateAndSendData_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  FUN_00001710(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "update_and_send_data_00001778"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_resources_000017dc",
            "code": "\n\n\nvoid initializeResources_000017dc(void)\n\n{\n  FUN_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_resources_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initializeData_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  FUN_000016ec(&DAT_40064001,0);\n  FUN_00001710(&DAT_40064000,1);\n  FUN_00001710(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_data_0000182c"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_device_000018bc",
            "code": "\nvoid initializeDevice_000018bc(void)\n\n{\n  FUN_00001748(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  FUN_00001710(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_device_000018bc"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_system_0000191c",
            "code": "\nvoid initializeSystem_0000191c(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_system_0000191c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_hardware_00001960",
            "code": "\nvoid initializeHardware_00001960(void)\n\n{\n  FUN_00001748(0xa0);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_hardware_00001960"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_device_000019c0",
            "code": "\nvoid initializeDevice_000019c0(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_00001734();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_device_000019c0"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_system_00001a18",
            "code": "\nvoid initializeSystem_00001a18(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_system_00001a18"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_data_00001a3c",
            "code": "\nvoid initializeData_00001a3c(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_data_00001a3c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_hardware_00001a60",
            "code": "\nvoid initializeHardware_00001a60(void)\n\n{\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_hardware_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "set_flag_and_wait_00001ad4",
            "code": "\nvoid set_flag_and_wait_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "set_flag_and_wait_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "process_actions_00001b10",
            "code": "\nundefined4 processActions_00001b10(byte actionIndex)\n\n{\n  undefined4 result;\n  \n  if (actionIndex < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)actionIndex + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        FUN_000018bc();\n        break;\n      case 1:\n        FUN_0000191c();\n        break;\n      case 2:\n        FUN_00001960();\n        break;\n      case 3:\n        FUN_000019c0();\n        break;\n      case 4:\n        FUN_00001a18();\n        break;\n      case 5:\n        FUN_00001a3c();\n        break;\n      case 6:\n        FUN_00001a60();\n        break;\n      case 7:\n        FUN_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (actionIndex != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "process_actions_00001b10",
                "param_1": "actionIndex",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001ad4",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_0000191c",
                "FUN_00001a3c",
                "FUN_00001960",
                "FUN_00001a18",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_system_00001bb8",
            "code": "\nvoid initializeSystem_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    FUN_00001710(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    FUN_00001710(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  FUN_00001748(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_system_00001bb8"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  FUN_00001bb8();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  FUN_0000182c();\n  FUN_000017dc();\n  FUN_00001b10(7);\n  FUN_00000d0c(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000017dc",
                "FUN_00000d0c",
                "FUN_0000182c",
                "FUN_00001bb8",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_call_function_00001cf0",
            "code": "\nvoid checkAndCallFunction_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_call_function_00001cf0"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculateOffset_00001d08(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_return_value_to1_00001d3a",
            "code": "\nvoid setReturnValueTo1_00001d3a(undefined4 input1,undefined input2)\n\n{\n  undefined4 *outputPointer;\n  \n  outputPointer = (undefined4 *)FUN_00001d08(input1,input2);\n  *outputPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_return_value_to1_00001d3a",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "outputPointer"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_mask_00001d5e",
            "code": "\nuint applyMask_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_mask_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "combine_and_mask_00001d80",
            "code": "\nuint combineAndMask_00001d80(ushort inputValue)\n\n{\n  return inputValue & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "combine_and_mask_00001d80",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_from_param_00001da2",
            "code": "\nushort extractBitsFromParam_00001da2(ushort inputValue)\n\n{\n  return inputValue >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_from_param_00001da2",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "clear_leading_bits_00001dc0",
            "code": "\nushort clearLeadingBits_00001dc0(ushort value)\n\n{\n  return value & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "clear_leading_bits_00001dc0",
                "param_1": "value"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "update_data_00001ddc",
            "code": "\nvoid updateData_00001ddc(undefined2 inputData)\n\n{\n  char result;\n  \n  result = FUN_00001da2(inputData);\n  FUN_00001d3a(&DAT_40048038,result + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "update_data_00001ddc",
                "param_1": "inputData",
                "cVar1": "result"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "retrieve_bits_00001e0c",
            "code": "\nuint retrieveBits_00001e0c(int offset,uint data)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)data >> 3) + offset * 4) * 4) >> ((data & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "retrieve_bits_00001e0c",
                "param_1": "offset",
                "param_2": "data"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_memory_00001e44",
            "code": "\nvoid updateMemory_00001e44(int index,uint bits,int value)\n\n{\n  int shiftAmount;\n  \n  shiftAmount = (int)bits >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) & ~(0xf << ((bits & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) | value << ((bits & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_memory_00001e44",
                "param_1": "index",
                "param_2": "bits",
                "param_3": "value",
                "iVar1": "shiftAmount"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "process_data_00001ec4",
            "code": "\nvoid processData_00001ec4(undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  undefined4 result;\n  \n  result = FUN_00001e0c(input_param_1,input_param_2);\n  FUN_00001e44(input_param_1,input_param_2,result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "process_data_00001ec4",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_configuration_00001eea",
            "code": "\nundefined4 updateConfiguration_00001eea(undefined2 config,byte status)\n\n{\n  uint index;\n  int configAddress;\n  int configIndex;\n  \n  FUN_00001f80(config,0);\n  if ((char)status < '\\0') {\n    index = FUN_00001dc0(config);\n    configAddress = FUN_00001d80(config);\n    *(uint *)(configAddress + 0x14) = *(uint *)(configAddress + 0x14) | 1 << (index & 0xff);\n  }\n  else {\n    index = FUN_00001dc0(config);\n    configAddress = FUN_00001d80(config);\n    *(uint *)(configAddress + 0x14) = *(uint *)(configAddress + 0x14) & ~(1 << (index & 0xff));\n  }\n  configAddress = FUN_00001d5e(config);\n  configIndex = FUN_00001dc0(config);\n  *(uint *)(configAddress + configIndex * 4) = status & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_configuration_00001eea",
                "param_1": "config",
                "param_2": "status",
                "uVar1": "index",
                "iVar2": "configAddress",
                "iVar3": "configIndex"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001f80",
                "FUN_00001d80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_data_00001f80",
            "code": "\nvoid updateData_00001f80(undefined2 input,undefined4 newValue)\n\n{\n  int ptr1;\n  int ptr2;\n  undefined4 address;\n  undefined4 offset;\n  uint value;\n  \n  FUN_00001ddc(input);\n  ptr1 = FUN_00001d5e(input);\n  ptr2 = FUN_00001dc0(input);\n  value = *(uint *)(ptr1 + ptr2 * 4);\n  ptr1 = FUN_00001d5e(input);\n  ptr2 = FUN_00001dc0(input);\n  *(undefined4 *)(ptr1 + ptr2 * 4) = newValue;\n  if ((value & 0xf0000) != 0) {\n    address = FUN_00001da2(input);\n    offset = FUN_00001dc0(input);\n    FUN_00001ec4(address,offset);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_data_00001f80",
                "param_1": "input",
                "param_2": "newValue",
                "iVar1": "ptr1",
                "iVar2": "ptr2",
                "uVar3": "address",
                "uVar4": "offset",
                "uVar5": "value"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001ddc",
                "FUN_00001d5e",
                "FUN_00001ec4",
                "FUN_00001da2",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_based_on_param_00001ff6",
            "code": "\nvoid setBitBasedOnParam_00001ff6(undefined2 input)\n\n{\n  uint result1;\n  int result2;\n  \n  result1 = FUN_00001dc0(input);\n  result2 = FUN_00001d80(input);\n  *(int *)(result2 + 4) = 1 << (result1 & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_based_on_param_00001ff6",
                "param_1": "input",
                "uVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_flags_00002028",
            "code": "\nvoid process_flags_00002028(int data_ptr,undefined4 param)\n\n{\n  int result;\n  uint flags;\n  uint index;\n  \n  flags = *(uint *)(data_ptr + 0xa0);\n  for (index = 0; (int)index < 0x20; index = index + 1) {\n    if (((flags & 1 << (index & 0xff)) != 0) &&\n       ((*(uint *)(data_ptr + index * 4) & 0xf0000) != 0)) {\n      *(int *)(data_ptr + 0xa0) = 1 << (index & 0xff);\n      result = FUN_00001e0c(param,index);\n      (**(code **)(&DAT_1fff0b78 + result * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + result * 0xc));\n    }\n  }\n  FUN_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_flags_00002028",
                "param_1": "data_ptr",
                "param_2": "param",
                "iVar1": "result",
                "uVar2": "flags",
                "local_c": "index"
            },
            "calling": [
                "FUN_000020e0",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020f4",
                "FUN_000020b8"
            ],
            "called": [
                "FUN_00001cf0",
                "FUN_00001e0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_memory_000020b8",
            "code": "\nvoid initializeMemory_000020b8(void)\n\n{\n  FUN_00002028(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_memory_000020b8"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_memory_mapping_000020cc",
            "code": "\nvoid initializeMemoryMapping_000020cc(void)\n\n{\n  FUN_00002028(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_memory_mapping_000020cc"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_memory_000020e0",
            "code": "\nvoid initializeMemory_000020e0(void)\n\n{\n  FUN_00002028(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_memory_000020e0"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_memory_000020f4",
            "code": "\nvoid initializeMemory_000020f4(void)\n\n{\n  FUN_00002028(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_memory_000020f4"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_memory_00002108",
            "code": "\nvoid initializeMemory_00002108(void)\n\n{\n  FUN_00002028(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_memory_00002108"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_info_0000211c",
            "code": "\nvoid printProcessInfo_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 formatSpecifier;\n  int stackSize;\n  int stackFlag;\n  dword baseAddr;\n  uint index;\n  undefined4 *currentChar;\n  undefined4 currentAddr;\n  undefined4 currentStack;\n  int totalStack;\n  short processIndex;\n  int totalMemory;\n  int usedMemory;\n  \n  formatSpecifier = 0x515f;\n  usedMemory = 0;\n  totalMemory = 0;\n  FUN_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  totalStack = FUN_000008b8();\n  currentStack = FUN_0000091c();\n  currentAddr = FUN_00000900();\n  FUN_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               totalStack,currentStack,currentAddr);\n  usedMemory = usedMemory + 0x200;\n  if (0 < totalStack) {\n    totalMemory = totalStack + totalMemory;\n  }\n  for (processIndex = 1; processIndex < 0x21; processIndex = processIndex + 1) {\n    currentChar = *(undefined4 **)(&DAT_1fff0358 + processIndex * 4);\n    if (currentChar != (undefined4 *)0x0) {\n      index = (uint)*(byte *)(currentChar + 1);\n      baseAddr = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[index];\n      stackFlag = (int)&formatSpecifier + (uint)(8 < index);\n      stackSize = currentChar[0xb];\n      usedMemory = stackSize + usedMemory;\n      iVar1 = FUN_000010a0(currentChar[9]);\n      stackSize = stackSize - iVar1;\n      totalMemory = stackSize + totalMemory;\n      FUN_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)currentChar + 6),currentChar[10],baseAddr,stackFlag,\n                   *(undefined *)((int)currentChar + 5),currentChar[0xb],stackSize,currentChar[9],*currentChar);\n    }\n  }\n  FUN_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,usedMemory,totalMemory);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_info_0000211c",
                "local_40": "formatSpecifier",
                "local_3c": "stackSize",
                "local_38": "stackFlag",
                "local_34": "baseAddr",
                "local_30": "index",
                "local_2c": "currentChar",
                "local_28": "currentAddr",
                "local_24": "currentStack",
                "local_20": "totalStack",
                "local_1a": "processIndex",
                "local_18": "totalMemory",
                "local_14": "usedMemory"
            },
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_0000091c",
                "FUN_000010a0",
                "FUN_00000900",
                "FUN_000008b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int input)\n\n{\n  undefined result;\n  int offset;\n  bool isEqual;\n  \n  offset = *(int *)(input + 0xc);\n  isEqual = *(int *)(input + 8) == offset;\n  if (isEqual) {\n    offset = 1;\n  }\n  result = (undefined)offset;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "input",
                "iVar2": "offset",
                "bVar3": "isEqual",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_equality_00002294",
            "code": "\nundefined checkEquality_00002294(int input)\n\n{\n  undefined uVar1;\n  int difference;\n  bool isEqual;\n  \n  difference = *(int *)(input + 4);\n  isEqual = *(int *)(input + 0xc) - *(int *)(input + 8) == difference;\n  if (isEqual) {\n    difference = 1;\n  }\n  uVar1 = (undefined)difference;\n  if (!isEqual) {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_equality_00002294",
                "param_1": "input",
                "iVar2": "difference",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "write_byte_to_offset_000022be",
            "code": "\nvoid writeByteToOffset_000022be(int *buffer,undefined byteToWrite)\n\n{\n  uint currentOffset;\n  \n  currentOffset = buffer[3];\n  buffer[3] = currentOffset + 1;\n  *(undefined *)((currentOffset & buffer[1] - 1U) + *buffer) = byteToWrite;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "write_byte_to_offset_000022be",
                "param_1": "buffer",
                "param_2": "byteToWrite",
                "uVar1": "currentOffset"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_retrieve_value_000022f0",
            "code": "\nundefined incrementAndRetrieveValue_000022f0(int *array)\n\n{\n  uint value;\n  \n  value = array[2];\n  array[2] = value + 1;\n  return *(undefined *)((value & array[1] - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_retrieve_value_000022f0",
                "param_1": "array",
                "uVar1": "value"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_and_decrement_0000231c",
            "code": "\nint copyAndDecrement_0000231c(undefined4 param,undefined *dest,int length)\n\n{\n  undefined currentByte;\n  int funcResult;\n  undefined *destPtr;\n  int remainingBytes;\n  \n  destPtr = dest;\n  remainingBytes = length;\n  while ((remainingBytes != 0 && (funcResult = FUN_00002270(param), funcResult == 0))) {\n    currentByte = FUN_000022f0(param);\n    *destPtr = currentByte;\n    remainingBytes = remainingBytes + -1;\n    destPtr = destPtr + 1;\n  }\n  return length - remainingBytes;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_and_decrement_0000231c",
                "param_1": "param",
                "param_2": "dest",
                "param_3": "length",
                "uVar1": "currentByte",
                "iVar2": "funcResult",
                "local_20": "destPtr",
                "local_14": "remainingBytes"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_and_process_data_00002364",
            "code": "\nundefined4 check_and_process_data_00002364(undefined4 input_data,undefined output_data)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  result = FUN_00002294(input_data);\n  if (result == 0) {\n    FUN_000022be(input_data,output_data);\n    return_value = 0;\n  }\n  else {\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_and_process_data_00002364",
                "param_1": "input_data",
                "param_2": "output_data",
                "iVar1": "result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00002294",
                "FUN_000022be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_system_00002396",
            "code": "\nvoid initialize_system_00002396(void)\n\n{\n  FUN_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_system_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initializeSystem_000023a4(void)\n\n{\n  undefined4 uVar1;\n  undefined stackBuffer [128];\n  \n  FUN_000023d0(0);\n  FUN_00004db8(\"Welcome to RIOT!\");\n  uVar1 = FUN_00002e6c(0,stackBuffer,0x80);\n  triggerInterrupt(0x3f);\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "stackBuffer",
                "software_interrupt": "triggerInterrupt"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000023d0",
                "FUN_00002e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "initialize_interrupt_000023c8",
            "code": "\nvoid initializeInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "initialize_interrupt_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "initialize_module_000023d0",
            "code": "\nundefined4 initializeModule_000023d0(undefined4 param)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_1fff0d98 == 0) {\n    returnValue = FUN_000023c8(1,param,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "initialize_module_000023d0",
                "param_1": "param",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "extract_next_value_0000240c",
            "code": "\nundefined4 * extractNextValue_0000240c(undefined4 *ptr)\n\n{\n  undefined4 *nextPtr;\n  \n  nextPtr = (undefined4 *)*ptr;\n  if (nextPtr != (undefined4 *)0x0) {\n    *ptr = *nextPtr;\n  }\n  return nextPtr;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "extract_next_value_0000240c",
                "param_1": "ptr",
                "puVar1": "nextPtr"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "initialize_data_00002434",
            "code": "\nundefined4 initializeData_00002434(int *param_1,int flag)\n\n{\n  int dataOffset;\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  dataOffset = DAT_1fff03dc;\n  if (*param_1 == 0) {\n    *param_1 = -1;\n    FUN_00000d0c(result);\n    result = 1;\n  }\n  else if (flag == 0) {\n    FUN_00000d0c(result);\n    result = 0;\n  }\n  else {\n    FUN_00000698(DAT_1fff03dc,2);\n    if (*param_1 == -1) {\n      *param_1 = dataOffset + 8;\n      *(undefined4 *)*param_1 = 0;\n    }\n    else {\n      FUN_00001034(param_1,dataOffset);\n    }\n    FUN_00000d0c(result);\n    FUN_0000093c();\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002434": "initialize_data_00002434",
                "param_2": "flag",
                "iVar1": "dataOffset",
                "uVar2": "result"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "process_parameter_000024bc",
            "code": "\nvoid processParameter_000024bc(int *parameter)\n\n{\n  undefined temporary;\n  undefined4 result;\n  int value;\n  \n  result = FUN_00000cd0();\n  if (*parameter == 0) {\n    FUN_00000d0c(result);\n  }\n  else if (*parameter == -1) {\n    *parameter = 0;\n    FUN_00000d0c(result);\n  }\n  else {\n    value = FUN_0000240c(parameter);\n    FUN_00000698(value + -8,10);\n    if (*parameter == 0) {\n      *parameter = -1;\n    }\n    temporary = *(undefined *)(value + -3);\n    FUN_00000d0c(result);\n    FUN_00000738(temporary);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "process_parameter_000024bc",
                "param_1": "parameter",
                "uVar1": "temporary",
                "uVar2": "result",
                "iVar3": "value"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000698",
                "FUN_0000240c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "update_memory_00002538",
            "code": "\nvoid updateMemory_00002538(byte address,uint data)\n\n{\n  if ((char)address < '\\0') {\n    (&DAT_e000ed14)[address & 0xf] = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + -0x1fff1c00) = (char)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "update_memory_00002538",
                "param_1": "address",
                "param_2": "data"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_system_0000258c",
            "code": "\n\n\nvoid initializeSystem_0000258c(void)\n\n{\n  uint count;\n  \n  _DAT_e000ed08 = 0;\n  FUN_00002538(0xfffffffe,1);\n  FUN_00002538(0xfffffffb,1);\n  for (count = 0; count < 0x66; count = count + 1) {\n    FUN_00002538((int)(char)count,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_system_0000258c",
                "local_c": "count"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_application_000025f4",
            "code": "\nvoid initializeApplication_000025f4(void)\n\n{\n  FUN_000027b0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_application_000025f4"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "initialize_and_process_data_00002600",
            "code": "\nundefined4 initializeAndProcessData_00002600(undefined4 inputData)\n\n{\n  undefined4 processedData;\n  \n  processedData = FUN_000047e4(inputData);\n  FUN_0000285c(processedData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "initialize_and_process_data_00002600",
                "param_1": "inputData",
                "uVar1": "processedData"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_0000285c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "initialize_target_00002624",
            "code": "\nundefined4 initializeTarget_00002624(undefined4 targetData)\n\n{\n  undefined4 initializedValue;\n  undefined4 tempValue;\n  \n  initializedValue = FUN_0000281c();\n  tempValue = 0;\n  FUN_0000443c(&initializedValue,targetData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "initialize_target_00002624",
                "param_1": "targetData",
                "local_10": "initializedValue",
                "uStack_c": "tempValue"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_function_00002654",
            "code": "\nundefined4 initializeFunction_00002654(undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined4 result;\n  \n  result = FUN_000047e4(value1);\n  DAT_1fff0d9c = value2;\n  FUN_00002894(result,0x26f1,value3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_function_00002654",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_00002894",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "process_data_00002690",
            "code": "\nundefined4 processData_00002690(undefined4 inputData)\n\n{\n  undefined4 result;\n  undefined4 counter;\n  \n  result = FUN_000028f0();\n  counter = 0;\n  FUN_0000443c(&result,inputData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "process_data_00002690",
                "param_1": "inputData",
                "local_10": "result",
                "uStack_c": "counter"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_data_000026c0",
            "code": "\nvoid initializeData_000026c0(void)\n\n{\n  FUN_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_data_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_system_000026d8",
            "code": "\nvoid initialize_system_000026d8(void)\n\n{\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_system_000026d8"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "initialize_system_components_000026e4",
            "code": "\nvoid initializeSystemComponents_000026e4(void)\n\n{\n  FUN_00002970();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "initialize_system_components_000026e4"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid executeCallback_000026f0(undefined4 callbackParam)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callbackParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "callbackParam"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_in_memory_00002714",
            "code": "\nvoid setBitInMemory_00002714(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_in_memory_00002714",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "store_data_00002744",
            "code": "\nvoid storeData_00002744(byte byteValue,uint dataValue)\n\n{\n  if ((char)byteValue < '\\0') {\n    (&DAT_e000ed14)[byteValue & 0xf] = (char)((dataValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteValue + -0x1fff1c00) = (char)((dataValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "store_data_00002744",
                "param_1": "byteValue",
                "param_2": "dataValue"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_execute_function_00002798",
            "code": "\nvoid checkAndExecuteFunction_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_execute_function_00002798"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "set_memory_protection_000027b0",
            "code": "\n\n\nvoid setMemoryProtection_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "set_memory_protection_000027b0"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_global_data_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getGlobalData_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_global_data_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "initialize_data_0000285c",
            "code": "\n\n\nvoid initializeData_0000285c(undefined4 dataValue)\n\n{\n  _DAT_4003d000 = dataValue;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "initialize_data_0000285c",
                "param_1": "dataValue"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initializeData_00002894(int inputValue,undefined4 value1,undefined4 value2)\n\n{\n  _DAT_4003d008 = inputValue + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = value1;\n  DAT_1fff0da4 = value2;\n  FUN_00002744(0x2e,10);\n  FUN_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "inputValue",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_value_000028f0",
            "code": "\n\n\nint incrementValue_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_value_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "reset_data_00002910",
            "code": "\n\n\nvoid resetData_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "reset_data_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid setFlag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_interrupt_enable_bit_00002970",
            "code": "\n\n\nvoid clearInterruptEnableBit_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_interrupt_enable_bit_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "perform_tasks_00002994",
            "code": "\n\n\nvoid performTasks_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  FUN_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "perform_tasks_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "initialize_device_00002a00",
            "code": "\nvoid initializeDevice_00002a00(undefined4 device)\n\n{\n  FUN_00004cb4(device);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "initialize_device_00002a00",
                "param_1": "device"
            },
            "calling": [
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_matching_value_00002a18",
            "code": "\nint find_matching_value_00002a18(int *input_array,undefined4 search_key)\n\n{\n  int iVar1;\n  int *current_element;\n  undefined **reboot_message;\n  uint index;\n  int *current_value;\n  \n  current_element = input_array;\n  reboot_message = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    current_value = (&current_element)[index];\n    if (current_value != (int *)0x0) {\n      for (; *current_value != 0; current_value = current_value + 3) {\n        iVar1 = FUN_00004e52(*current_value,search_key);\n        if (iVar1 == 0) {\n          return current_value[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_matching_value_00002a18",
                "param_1": "input_array",
                "param_2": "search_key",
                "local_18": "current_element",
                "local_14": "reboot_message",
                "local_10": "index",
                "local_c": "current_value"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commands)\n\n{\n  int *currentCommand;\n  undefined **commandNames;\n  uint index;\n  int *currentParameter;\n  \n  FUN_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  FUN_00004db8(\"---------------------------------------\");\n  currentCommand = commands;\n  commandNames = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    currentParameter = (&currentCommand)[index];\n    if (currentParameter != (int *)0x0) {\n      for (; *currentParameter != 0; currentParameter = currentParameter + 3) {\n        FUN_00004c84(\"%-20s %s\\n\",*currentParameter,currentParameter[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commands",
                "local_18": "currentCommand",
                "local_14": "commandNames",
                "local_10": "index",
                "local_c": "currentParameter"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_input_00002b10",
            "code": "\nvoid processInput_00002b10(undefined4 undefined_param,byte *input_string)\n\n{\n  int iVar1;\n  byte *pbVar2;\n  byte *input_pointers [3];\n  code *function_ptr;\n  char **command_args;\n  uint num_args;\n  byte quote_char;\n  char *inner_pointer;\n  char *input_arg;\n  char **command_pointers;\n  uint arg_idx;\n  int num_escape_chars;\n  uint num_strings;\n  byte *current_char;\n  \n  num_strings = 0;\n  num_escape_chars = 0;\n  current_char = input_string;\n  while( true ) {\n    input_pointers[0] = input_string;\n    input_pointers[1] = (byte *)undefined_param;\n    if (0x20 < *current_char) {\n      if ((*current_char == 0x22) || (*current_char == 0x27)) {\n        quote_char = *current_char;\n        do {\n          pbVar2 = current_char + 1;\n          if (*pbVar2 == 0) {\n            current_char = pbVar2;\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*pbVar2 == 0x5c) {\n            num_escape_chars = num_escape_chars + 1;\n            current_char = current_char + 2;\n            pbVar2 = current_char;\n            if (*current_char == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          current_char = pbVar2;\n        } while (quote_char != *current_char);\n        if (0x20 < current_char[1]) {\n          FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*current_char == 0x5c) {\n            num_escape_chars = num_escape_chars + 1;\n            current_char = current_char + 1;\n            if (*current_char == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          current_char = current_char + 1;\n          if (*current_char == 0x22) {\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *current_char);\n      }\n      num_strings = num_strings + 1;\n    }\n    if (*current_char == 0) break;\n    *current_char = 0;\n    current_char = current_char + 1;\n  }\n  if (num_strings != 0) {\n    num_args = num_strings;\n    command_args = (char **)((int)input_pointers - ((num_strings + 1) * 4 + 7 & 0xfffffff8));\n    command_args[num_strings] = (char *)0x0;\n    current_char = input_string;\n    for (arg_idx = 0; command_pointers = command_args, arg_idx < num_strings; arg_idx = arg_idx + 1) {\n      for (; *current_char == 0; current_char = current_char + 1) {\n      }\n      if ((*current_char == 0x22) || (*current_char == 0x27)) {\n        current_char = current_char + 1;\n      }\n      command_args[arg_idx] = (char *)current_char;\n      for (; *current_char != 0; current_char = current_char + 1) {\n      }\n    }\n    for (; (num_escape_chars != 0 && (*command_pointers != (char *)0x0)); command_pointers = command_pointers + 1) {\n      for (input_arg = *command_pointers; *input_arg != '\\0'; input_arg = input_arg + 1) {\n        if (*input_arg == '\\') {\n          for (inner_pointer = input_arg; *inner_pointer != '\\0'; inner_pointer = inner_pointer + 1) {\n            *inner_pointer = inner_pointer[1];\n          }\n          num_escape_chars = num_escape_chars + -1;\n          if (num_escape_chars == 0) break;\n        }\n      }\n    }\n    function_ptr = (code *)FUN_00002a18(undefined_param,*command_args);\n    if (function_ptr == (code *)0x0) {\n      iVar1 = FUN_00004e52(&DAT_00007214,*command_args);\n      if (iVar1 == 0) {\n        FUN_00002a88(input_pointers[1]);\n      }\n      else {\n        FUN_00004c84(\"shell: command not found: %s\\n\",*command_args);\n      }\n    }\n    else {\n      (*function_ptr)(num_strings,command_args);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_input_00002b10",
                "param_1": "undefined_param",
                "param_2": "input_string",
                "local_48": "input_pointers",
                "local_3c": "function_ptr",
                "local_38": "command_args",
                "local_34": "num_args",
                "local_2d": "quote_char",
                "local_2c": "inner_pointer",
                "local_28": "input_arg",
                "local_24": "command_pointers",
                "local_20": "arg_idx",
                "local_1c": "num_escape_chars",
                "local_18": "num_strings",
                "local_14": "current_char"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002a88",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "process_input_00002d94",
            "code": "\nuint process_input_00002d94(undefined *input_buffer,int buffer_length)\n\n{\n  int input_character;\n  byte is_first_character;\n  bool is_buffer_empty;\n  undefined *current_character;\n  \n  current_character = input_buffer;\n  while( true ) {\n    if (buffer_length + -1 <= (int)current_character - (int)input_buffer) {\n      return 0xffffffff;\n    }\n    input_character = FUN_00004418();\n    if (input_character < 0) break;\n    if ((input_character == 0xd) || (input_character == 10)) {\n      *current_character = 0;\n      FUN_00002a00(0xd);\n      FUN_00002a00(10);\n      is_buffer_empty = current_character == input_buffer;\n      if (is_buffer_empty) {\n        input_buffer = (undefined *)0x1;\n      }\n      is_first_character = (byte)input_buffer;\n      if (!is_buffer_empty) {\n        is_first_character = 0;\n      }\n      return (uint)is_first_character;\n    }\n    if ((input_character == 8) || (input_character == 0x7f)) {\n      if (current_character != input_buffer) {\n        current_character = current_character + -1;\n        *current_character = 0;\n        FUN_00002a00(8);\n        FUN_00002a00(0x20);\n        FUN_00002a00(8);\n      }\n    }\n    else {\n      *current_character = (char)input_character;\n      FUN_00002a00(input_character);\n      current_character = current_character + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "process_input_00002d94",
                "param_1": "input_buffer",
                "param_2": "buffer_length",
                "iVar1": "input_character",
                "bVar2": "is_first_character",
                "bVar3": "is_buffer_empty",
                "local_c": "current_character"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "initialize_function_00002e48",
            "code": "\nvoid initializeFunction_00002e48(void)\n\n{\n  FUN_00002a00(0x3e);\n  FUN_00002a00(0x20);\n  FUN_000041d0(*(undefined4 *)(relocationTable[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "initialize_function_00002e48",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00002a00",
                "FUN_000041d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "repeatedly_process_00002e6c",
            "code": "\nvoid repeatedlyProcess_00002e6c(undefined4 inputParam,undefined4 param2,undefined4 param3)\n\n{\n  int result;\n  \n  FUN_00002e48();\n  do {\n    result = FUN_00002d94(param2,param3);\n    if (result == 0) {\n      FUN_00002b10(inputParam,param2);\n    }\n    FUN_00002e48();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "repeatedly_process_00002e6c",
                "param_1": "inputParam",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002b10",
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "execute_initialization_00002e9c",
            "code": "\nundefined4 execute_initialization_00002e9c(void)\n\n{\n  FUN_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "execute_initialization_00002e9c"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "initialize_application_00002eb4",
            "code": "\nundefined4 initialize_application_00002eb4(void)\n\n{\n  FUN_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "initialize_application_00002eb4"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_data_from_device_00002ecc",
            "code": "\nvoid readDataFromDevice_00002ecc(undefined4 deviceNumber,int deviceDataAddress)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined additionalData [8];\n  uint dataSize;\n  \n  dataSize = FUN_00003d64(deviceDataAddress,additionalData);\n  if ((int)dataSize < 1) {\n    FUN_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    result2 = *(undefined4 *)(deviceDataAddress + 8);\n    result1 = FUN_000039e8(*(undefined *)(*(int *)(deviceDataAddress + 0xc) + 8));\n    FUN_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,result2,result1);\n    FUN_00003694(additionalData,dataSize & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_data_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceDataAddress",
                "uVar1": "result1",
                "uVar2": "result2",
                "auStack_1c": "additionalData",
                "local_14": "dataSize"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_00003d64",
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00003694"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "process_items_00002f30",
            "code": "\nvoid processItems_00002f30(void)\n\n{\n  int itemIndex;\n  undefined4 *itemPointer;\n  \n  itemIndex = 0;\n  for (itemPointer = DAT_1fff0db0; itemPointer != (undefined4 *)0x0; itemPointer = (undefined4 *)*itemPointer) {\n    FUN_00002ecc(itemIndex,itemPointer);\n    FUN_00004db8(&DAT_00007380);\n    itemIndex = itemIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "process_items_00002f30",
                "local_10": "itemIndex",
                "local_c": "itemPointer"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_info_00002f74",
            "code": "\nvoid printDeviceInfo_00002f74(void)\n\n{\n  undefined4 deviceClass;\n  int deviceCount;\n  undefined4 *deviceList;\n  \n  deviceList = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    FUN_00004db8(\"No devices found\");\n  }\n  else {\n    FUN_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    deviceClass = FUN_000039e8(*(undefined *)(deviceList[3] + 8));\n    FUN_00004c84(\"#%i\\t%s\\t%s\\n\",deviceCount,deviceClass,deviceList[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_info_00002f74",
                "local_18": "deviceCount",
                "local_14": "deviceList",
                "uVar1": "deviceClass"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "validate_and_process_device_00002fe0",
            "code": "\nvoid validateAndProcessDevice_00002fe0(int numParams,undefined4 *params)\n\n{\n  int errorCode;\n  undefined4 deviceID;\n  \n  if (numParams < 3) {\n    FUN_00004c84(\"usage: %s %s <device id>|all\\n\",*params,params[1]);\n  }\n  else {\n    errorCode = FUN_00004e52(params[2],&DAT_000073d4);\n    if (errorCode == 0) {\n      FUN_00002f30();\n    }\n    else {\n      deviceID = FUN_00004042(params[2]);\n      errorCode = FUN_00003d24(deviceID);\n      if (errorCode == 0) {\n        FUN_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        FUN_00002ecc(deviceID,errorCode);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "validate_and_process_device_00002fe0",
                "param_1": "numParams",
                "param_2": "params",
                "iVar1": "errorCode",
                "uVar2": "deviceID"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002ecc",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00004e52",
                "FUN_00002f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 value;\n  undefined2 values [4];\n  uint numValues;\n  int deviceIndex;\n  undefined4 deviceID;\n  int index;\n  \n  if (argc < 4) {\n    FUN_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceID = FUN_00004042(argv[2]);\n    deviceIndex = FUN_00003d24(deviceID);\n    if (deviceIndex == 0) {\n      FUN_00004db8(\"error: undefined device given\");\n    }\n    else {\n      FUN_00004622(values,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (index = 0; index < (int)numValues; index = index + 1) {\n        value = FUN_00004042(argv[index + 3]);\n        values[index] = value;\n      }\n      FUN_00004c84(\"Writing to device #%i - %s\\n\",deviceID,*(undefined4 *)(deviceIndex + 8));\n      FUN_00003694(values,numValues & 0xff);\n      numValues = FUN_00003d94(deviceIndex,values);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          FUN_00004c84(\"error: device #%i is not writable\\n\",deviceID);\n        }\n        else {\n          FUN_00004c84(\"error: failure to write to device #%i\\n\",deviceID);\n        }\n      }\n      else {\n        FUN_00004c84(\"data successfully written to device #%i\\n\",deviceID);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "value",
                "auStack_20": "values",
                "local_18": "numValues",
                "local_14": "deviceIndex",
                "local_10": "deviceID",
                "local_c": "index"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00003d94",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "process_data_0000316c",
            "code": "\nundefined4 process_data_0000316c(int data_size,undefined4 *arguments)\n\n{\n  int result;\n  \n  if (data_size < 2) {\n    FUN_00002f74();\n  }\n  else {\n    result = FUN_00004e52(arguments[1],&DAT_000074ec);\n    if (result == 0) {\n      FUN_00002fe0(data_size,arguments);\n    }\n    else {\n      result = FUN_00004e52(arguments[1],\"write\");\n      if (result == 0) {\n        FUN_0000305c(data_size,arguments);\n      }\n      else {\n        FUN_00004c84(\"usage: %s read|write\\n\",*arguments);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "process_data_0000316c",
                "param_1": "data_size",
                "param_2": "arguments",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00004c84",
                "FUN_00002fe0",
                "FUN_0000305c",
                "FUN_00004e52",
                "FUN_00002f74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_000031e0",
            "code": "\nvoid ringAlarm_000031e0(void)\n\n{\n  FUN_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_day_of_week_000031fc",
            "code": "\nint calculateDayOfWeek_000031fc(int year,int month,int day)\n\n{\n  byte modifier;\n  int adjustedMonth;\n  \n  adjustedMonth = month;\n  if (month < 3) {\n    adjustedMonth = 1;\n  }\n  modifier = (byte)adjustedMonth;\n  if (2 < month) {\n    modifier = 0;\n  }\n  year = year - (uint)modifier;\n  adjustedMonth = year;\n  if (year < 0) {\n    adjustedMonth = year + 3;\n  }\n  return ((((adjustedMonth >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)Elf32_Rel_ARRAY_1fff0200 + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_day_of_week_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "modifier",
                "iVar2": "adjustedMonth"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "extract_data_0000328c",
            "code": "\nundefined4 extract_data_0000328c(undefined4 *input_array,int *output_array)\n\n{\n  int result;\n  int num_elements;\n  short value;\n  \n  value = FUN_00004f84(*input_array,&num_elements,10);\n  output_array[5] = value + -0x76c;\n  value = FUN_00004f84(num_elements + 1,&num_elements,10);\n  output_array[4] = value + -1;\n  value = FUN_00004f84(num_elements + 1,&num_elements,10);\n  output_array[3] = (int)value;\n  value = FUN_00004f84(input_array[1],&num_elements,10);\n  output_array[2] = (int)value;\n  value = FUN_00004f84(num_elements + 1,&num_elements,10);\n  output_array[1] = (int)value;\n  value = FUN_00004f84(num_elements + 1,&num_elements,10);\n  *output_array = (int)value;\n  result = FUN_000031fc(output_array[5] + 0x76c,output_array[4] + 1,output_array[3]);\n  output_array[6] = result;\n  output_array[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "extract_data_0000328c",
                "param_1": "input_array",
                "param_2": "output_array",
                "iVar1": "result",
                "local_10": "num_elements",
                "local_a": "value"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_00004f84",
                "FUN_000031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTimeParams)\n\n{\n  FUN_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",dateTimeParams[5] + 0x76c,dateTimeParams[4] + 1,dateTimeParams[3],\n               dateTimeParams[2],dateTimeParams[1],*dateTimeParams);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTimeParams"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "check_alarm_status_000033c0",
            "code": "\nbool checkAlarmStatus_000033c0(void)\n\n{\n  int result;\n  undefined alarmData [36];\n  \n  result = FUN_00002690(alarmData);\n  if (result != 0) {\n    FUN_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    FUN_00003378(alarmData);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "check_alarm_status_000033c0",
                "auStack_2c": "alarmData",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002690",
                "FUN_00003378",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_000033f4",
            "code": "\nundefined4 setAlarm_000033f4(undefined4 input)\n\n{\n  int result;\n  undefined4 returnValue;\n  undefined stackBuffer [36];\n  \n  result = FUN_0000328c(input,stackBuffer);\n  if (result == 0) {\n    result = FUN_00002654(stackBuffer,0x31e1,0);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting alarm\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "returnValue",
                "auStack_2c": "stackBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002654",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_rtc_time_00003444",
            "code": "\nbool getRtcTime_00003444(void)\n\n{\n  int error;\n  undefined timeData [36];\n  \n  error = FUN_00002624(timeData);\n  if (error != 0) {\n    FUN_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    FUN_00003378(timeData);\n  }\n  return error != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_rtc_time_00003444",
                "iVar1": "error",
                "auStack_2c": "timeData"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00003378",
                "FUN_00004db8",
                "FUN_00002624"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "set_time_and_check_00003478",
            "code": "\nundefined4 setTimeAndCheck_00003478(undefined4 time)\n\n{\n  int result;\n  undefined4 status;\n  undefined buffer [36];\n  \n  result = FUN_0000328c(time,buffer);\n  if (result == 0) {\n    result = FUN_00002600(buffer);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting time\");\n      status = 1;\n    }\n    else {\n      status = 0;\n    }\n  }\n  else {\n    status = 1;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00003478": "set_time_and_check_00003478",
                "param_1": "time",
                "iVar1": "result",
                "uVar2": "status",
                "auStack_2c": "buffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002600",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_usage_000034c0",
            "code": "\nundefined4 printUsage_000034c0(void)\n\n{\n  FUN_00004db8(\"usage: rtc <command> [arguments]\");\n  FUN_00004db8(\"commands:\");\n  FUN_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUN_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUN_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUN_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUN_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUN_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUN_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_command_00003524",
            "code": "\nundefined4 handle_command_00003524(int num_params,int command_str)\n\n{\n  int result;\n  undefined4 success;\n  \n  if (num_params < 2) {\n    FUN_000034c0();\n    success = 1;\n  }\n  else {\n    result = FUN_00004e66(*(undefined4 *)(command_str + 4),\"poweron\",7);\n    if (result == 0) {\n      FUN_000026d8();\n    }\n    else {\n      result = FUN_00004e66(*(undefined4 *)(command_str + 4),\"poweroff\",8);\n      if (result == 0) {\n        FUN_000026e4();\n      }\n      else {\n        result = FUN_00004e66(*(undefined4 *)(command_str + 4),\"clearalarm\",8);\n        if (result == 0) {\n          FUN_000026c0();\n        }\n        else {\n          result = FUN_00004e66(*(undefined4 *)(command_str + 4),\"getalarm\",8);\n          if (result == 0) {\n            FUN_000033c0();\n          }\n          else {\n            result = FUN_00004e66(*(undefined4 *)(command_str + 4),\"setalarm\",8);\n            if ((result == 0) && (num_params == 4)) {\n              FUN_000033f4(command_str + 8);\n            }\n            else {\n              result = FUN_00004e66(*(undefined4 *)(command_str + 4),\"gettime\",7);\n              if (result == 0) {\n                FUN_00003444();\n              }\n              else {\n                result = FUN_00004e66(*(undefined4 *)(command_str + 4),\"settime\",7);\n                if ((result != 0) || (num_params != 4)) {\n                  FUN_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(command_str + 4));\n                  FUN_000034c0();\n                  return 1;\n                }\n                FUN_00003478(command_str + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    success = 0;\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_command_00003524",
                "param_1": "num_params",
                "param_2": "command_str",
                "iVar1": "result",
                "uVar2": "success"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_00004c84",
                "FUN_00004e66",
                "FUN_000026c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_000033c0",
                "FUN_000026d8",
                "FUN_00003478",
                "FUN_000026e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "endless_loop_00003658",
            "code": "\nvoid endlessLoop_00003658(void)\n\n{\n  synchronizeData(0xf);\n  synchronizeData(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "endless_loop_00003658",
                "DataSynchronizationBarrier": "synchronizeData"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "initialize_system_00003688",
            "code": "\nvoid initialize_system_00003688(void)\n\n{\n  FUN_00003658();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "initialize_system_00003688"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid displayDataObject_00003694(int dataObject,byte objectSize)\n\n{\n  undefined4 result;\n  char bitFlag;\n  uint bitMask;\n  bool isSet;\n  undefined buffer [8];\n  int bufferSize;\n  char character;\n  byte index;\n  \n  if ((dataObject == 0) || (3 < objectSize)) {\n    FUN_00004db8(\"Unable to display data object\");\n  }\n  else {\n    FUN_00004c84(\"Data:\");\n    for (index = 0; index < objectSize; index = index + 1) {\n      if (*(byte *)(dataObject + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataObject + 6) & 0x8018f;\n        isSet = bitMask != 0;\n        if (isSet) {\n          bitMask = 1;\n        }\n        bitFlag = (char)bitMask;\n        if (!isSet) {\n          bitFlag = '\\0';\n        }\n        if (bitFlag == '\\0') goto LAB_000036ee;\n        character = '\\0';\n      }\n      else {\nLAB_000036ee:\n        character = FUN_00003918((int)*(char *)(dataObject + 7));\n      }\n      FUN_00004c84(&DAT_000077bc);\n      if (objectSize < 2) {\n        FUN_00004c84(\"     \");\n      }\n      else {\n        FUN_00004c84(\"[%u] \",index);\n      }\n      if (character == '\\0') {\n        if (*(char *)(dataObject + 7) == '\\0') {\n          FUN_00004c84(&DAT_000077d8,(int)*(short *)(dataObject + (uint)index * 2));\n        }\n        else if ((*(char *)(dataObject + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataObject + 7),4)) &&\n                (*(char *)(dataObject + 7) < '\\0')) {\n          bufferSize = FUN_00003e9e(buffer,(int)*(short *)(dataObject + (uint)index * 2),\n                                  (int)*(char *)(dataObject + 7));\n          buffer[bufferSize] = 0;\n          FUN_00004c84(&DAT_000077dc,buffer);\n        }\n        else {\n          FUN_00004c84(\"%iE%i\",(int)*(short *)(dataObject + (uint)index * 2),\n                       (int)*(char *)(dataObject + 7));\n        }\n      }\n      else {\n        FUN_00004c84(\"%6d %c\",(int)*(short *)(dataObject + (uint)index * 2),character);\n      }\n      result = FUN_00003810(*(undefined *)(dataObject + 6));\n      FUN_00004c84(&DAT_000077e8,result);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "dataObject",
                "param_2": "objectSize",
                "uVar1": "result",
                "cVar2": "bitFlag",
                "uVar3": "bitMask",
                "bVar4": "isSet",
                "auStack_18": "buffer",
                "local_10": "bufferSize",
                "local_a": "character",
                "local_9": "index"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003918",
                "FUN_00003e9e",
                "FUN_00003810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_pointer_by_value_00003810",
            "code": "\nundefined * getPointerByValue_00003810(undefined value)\n\n{\n  undefined *result;\n  \n  switch(value) {\n  case 2:\n    result = &DAT_000077ec;\n    break;\n  case 3:\n    result = &DAT_000077f0;\n    break;\n  case 4:\n    result = &DAT_000077f4;\n    break;\n  case 5:\n    result = &DAT_000077f8;\n    break;\n  case 6:\n    result = &DAT_000077fc;\n    break;\n  case 7:\n    result = (undefined *)0x7800;\n    break;\n  case 8:\n    result = &DAT_00007804;\n    break;\n  case 9:\n    result = &DAT_00007808;\n    break;\n  case 10:\n    result = &DAT_0000780c;\n    break;\n  case 0xb:\n    result = &DAT_00007810;\n    break;\n  case 0xc:\n    result = &DAT_00007814;\n    break;\n  case 0xd:\n    result = &DAT_00007818;\n    break;\n  case 0xe:\n    result = &DAT_0000781c;\n    break;\n  case 0xf:\n    result = &DAT_00007820;\n    break;\n  case 0x10:\n    result = &DAT_00007824;\n    break;\n  case 0x11:\n    result = &DAT_0000782c;\n    break;\n  default:\n    result = &DAT_00007834;\n    break;\n  case 0x13:\n    result = &DAT_00007830;\n    break;\n  case 0x15:\n    result = &DAT_00007828;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_pointer_by_value_00003810",
                "param_1": "value",
                "puVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "map_parameter_to_value_00003918",
            "code": "\nundefined4 mapParameterToValue_00003918(undefined parameter)\n\n{\n  undefined4 mappedValue;\n  \n  switch(parameter) {\n  case 2:\n    mappedValue = 0x68;\n    break;\n  case 3:\n    mappedValue = 0x6b;\n    break;\n  case 6:\n    mappedValue = 0x4d;\n    break;\n  case 9:\n    mappedValue = 0x47;\n    break;\n  case 0xc:\n    mappedValue = 0x54;\n    break;\n  case 0xf:\n    mappedValue = 0x50;\n    break;\n  case 0xf1:\n    mappedValue = 0x66;\n    break;\n  default:\n    mappedValue = 0;\n    break;\n  case 0xf4:\n    mappedValue = 0x70;\n    break;\n  case 0xf7:\n    mappedValue = 0x6e;\n    break;\n  case 0xfa:\n    mappedValue = 0x75;\n    break;\n  case 0xfd:\n    mappedValue = 0x6d;\n  }\n  return mappedValue;\n}\n\n",
            "renaming": {
                "FUN_00003918": "map_parameter_to_value_00003918",
                "param_1": "parameter",
                "uVar1": "mappedValue"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_device_name_000039e8",
            "code": "\nchar * getDeviceName_000039e8(char deviceCode)\n\n{\n  char *deviceName;\n  \n  switch(deviceCode) {\n  case '\\0':\n    deviceName = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    deviceName = \"ACT_ANY\";\n    break;\n  case 'B':\n    deviceName = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    deviceName = \"ACT_SERVO\";\n    break;\n  case 'D':\n    deviceName = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    deviceName = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    deviceName = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    deviceName = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    deviceName = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    deviceName = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    deviceName = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    deviceName = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    deviceName = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    deviceName = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    deviceName = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    deviceName = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    deviceName = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    deviceName = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    deviceName = \"SENSE_UV\";\n    break;\n  case -0x74:\n    deviceName = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    deviceName = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    deviceName = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    deviceName = \"SENSE_CO2\";\n    break;\n  default:\n    if (deviceCode == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    deviceName = \"CLASS_UNKNOWN\";\n  }\n  return deviceName;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_device_name_000039e8",
                "param_1": "deviceCode",
                "pcVar1": "deviceName"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_00002f74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_nth_element_00003d24",
            "code": "\nundefined4 * find_nth_element_00003d24(int n)\n\n{\n  int count;\n  undefined4 *current_element;\n  \n  count = 0;\n  for (current_element = DAT_1fff0db0; (count < n && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    count = count + 1;\n  }\n  return current_element;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_nth_element_00003d24",
                "param_1": "n",
                "local_10": "count",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int functionPointer,undefined4 paramData)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(functionPointer + 0xc))(*(undefined4 *)(functionPointer + 4),paramData);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "functionPointer",
                "param_2": "paramData",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 executeFunction_00003d94(int input,undefined4 data)\n\n{\n  undefined4 returnValue;\n  \n  if (input == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(input + 0xc) + 4))(*(undefined4 *)(input + 4),data);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "input",
                "param_2": "data",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint countDigits_00003dc4(int inputPointer,uint inputNumber)\n\n{\n  uint remainder;\n  char *resultPointer;\n  uint powerOfTen;\n  int digitCount;\n  \n  digitCount = 1;\n  if (inputNumber < 1000000000) {\n    for (powerOfTen = 10; powerOfTen <= inputNumber; powerOfTen = powerOfTen * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (inputPointer != 0) {\n    resultPointer = (char *)(digitCount + inputPointer);\n    remainder = inputNumber;\n    do {\n      resultPointer = resultPointer + -1;\n      *resultPointer = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "inputPointer",
                "param_2": "inputNumber",
                "local_20": "remainder",
                "local_14": "resultPointer",
                "local_10": "powerOfTen",
                "local_c": "digitCount"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "convert_integer_to_negative_00003e58",
            "code": "\nint convertIntegerToNegative_00003e58(undefined *inputString,int inputNumber)\n\n{\n  int result;\n  int tempNumber;\n  undefined *modifiedString;\n  \n  tempNumber = inputNumber;\n  modifiedString = inputString;\n  if (-(inputNumber >> 0x1f) != 0) {\n    if (inputString != (undefined *)0x0) {\n      modifiedString = inputString + 1;\n      *inputString = 0x2d;\n    }\n    tempNumber = -inputNumber;\n  }\n  result = FUN_00003dc4(modifiedString,tempNumber);\n  return -(inputNumber >> 0x1f) + result;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "convert_integer_to_negative_00003e58",
                "param_1": "inputString",
                "param_2": "inputNumber",
                "iVar1": "result",
                "local_18": "tempNumber",
                "local_14": "modifiedString"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "process_data_00003e9e",
            "code": "\nundefined4 processData_00003e9e(undefined4 input,short value,undefined4 config)\n\n{\n  undefined4 result;\n  \n  result = FUN_00003ec4(input,(int)value,config);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "process_data_00003e9e",
                "param_1": "input",
                "param_2": "value",
                "param_3": "config",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "calculate_decimal_length_00003ec4",
            "code": "\nint calculateDecimalLength_00003ec4(undefined *outputString,uint inputNumber,int numberOfDigits)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint numberOfGroups;\n  int remainder;\n  int totalLength;\n  \n  if (numberOfDigits + 7 < 0 != SCARRY4(numberOfDigits,7)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  totalLength = 0;\n  if (numberOfDigits == 0) {\n    totalLength = FUN_00003e58(outputString,inputNumber);\n  }\n  else if (numberOfDigits < 1) {\n    numberOfGroups = inputNumber / *(uint *)(&DAT_00007978 + numberOfDigits * -4);\n    remainder = inputNumber - *(uint *)(&DAT_00007978 + numberOfDigits * -4) * numberOfGroups;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((numberOfGroups == 0) && ((int)inputNumber < 0)) {\n      if (outputString != (undefined *)0x0) {\n        *outputString = 0x2d;\n      }\n      totalLength = 1;\n    }\n    if (outputString == (undefined *)0x0) {\n      tempVar1 = FUN_00003e58(0,numberOfGroups);\n      totalLength = tempVar1 + 1 + totalLength;\n    }\n    else {\n      tempVar1 = FUN_00003e58(outputString + totalLength,numberOfGroups);\n      tempVar1 = totalLength + tempVar1;\n      totalLength = tempVar1 + 1;\n      outputString[tempVar1] = 0x2e;\n      tempVar2 = FUN_00003e58(outputString + totalLength,remainder);\n      FUN_00003ff4(outputString + totalLength,tempVar2,-numberOfDigits,0x30);\n    }\n    totalLength = -numberOfDigits + totalLength;\n  }\n  else {\n    totalLength = FUN_00003e58(outputString,inputNumber);\n    if (outputString != (undefined *)0x0) {\n      FUN_00004622(outputString + totalLength,0x30,numberOfDigits);\n    }\n    totalLength = numberOfDigits + totalLength;\n  }\n  return totalLength;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "calculate_decimal_length_00003ec4",
                "param_1": "outputString",
                "param_2": "inputNumber",
                "param_3": "numberOfDigits",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "numberOfGroups",
                "local_10": "remainder",
                "local_c": "totalLength"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00003e58",
                "FUN_00003ff4",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "calculate_max_00003ff4",
            "code": "\nuint calculateMax_00003ff4(int startValue,uint lowerBound,uint upperBound,undefined undefined_param)\n\n{\n  uint maxValue;\n  \n  maxValue = lowerBound;\n  if ((lowerBound < upperBound) && (maxValue = upperBound, startValue != 0)) {\n    FUN_000045ee((upperBound - lowerBound) + startValue,startValue,lowerBound);\n    FUN_00004622(startValue,undefined_param,upperBound - lowerBound);\n  }\n  return maxValue;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "calculate_max_00003ff4",
                "param_1": "startValue",
                "param_2": "lowerBound",
                "param_3": "upperBound",
                "param_4": "undefined_param",
                "uVar1": "maxValue"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "initialize_data_00004042",
            "code": "\nvoid initializeData_00004042(undefined4 inputParameter)\n\n{\n  FUN_00004f84(inputParameter,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "initialize_data_00004042",
                "param_1": "inputParameter"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 processData_0000404c(uint *inputData,int *settings)\n\n{\n  int result;\n  int *tempPtr;\n  uint flags;\n  ushort tempFlags;\n  int tempValue;\n  code *functionPtr;\n  int count;\n  uint tempData;\n  bool isZero;\n  \n  tempFlags = *(ushort *)(settings + 3);\n  flags = (uint)tempFlags;\n  if ((int)(flags << 0x1c) < 0) {\n    result = settings[4];\n    if (result != 0) {\n      tempValue = flags << 0x1e;\n      isZero = tempValue == 0;\n      count = *settings;\n      if (isZero) {\n        tempValue = settings[5];\n      }\n      *settings = result;\n      if (!isZero) {\n        tempValue = 0;\n      }\n      settings[2] = tempValue;\n      for (count = count - result; 0 < count; count = count - tempValue) {\n        tempValue = (*(code *)settings[10])(inputData,settings[8],result,count);\n        if (tempValue < 1) {\n          *(ushort *)(settings + 3) = *(ushort *)(settings + 3) | 0x40;\n          return 0xffffffff;\n        }\n        result = result + tempValue;\n      }\n    }\n  }\n  else {\n    if ((settings[1] < 1) && (settings[0x10] < 1)) {\n      return 0;\n    }\n    functionPtr = (code *)settings[0xb];\n    if (functionPtr == (code *)0x0) {\n      return 0;\n    }\n    tempData = *inputData;\n    *inputData = 0;\n    if ((tempFlags & 0x1000) == 0) {\n      result = (*functionPtr)(inputData,settings[8],flags & 0x1000,1);\n      if ((result == -1) && (flags = *inputData, flags != 0)) {\n        if ((flags == 0x1d) || (flags == 0x16)) {\n          *inputData = tempData;\n          return 0;\n        }\n        tempFlags = *(ushort *)(settings + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      result = settings[0x15];\n    }\n    if (((int)((uint)*(ushort *)(settings + 3) << 0x1d) < 0) &&\n       (result = result - settings[1], settings[0xd] != 0)) {\n      result = result - settings[0x10];\n    }\n    result = (*(code *)settings[0xb])(inputData,settings[8],result,0);\n    tempFlags = *(ushort *)(settings + 3);\n    if ((result == -1) &&\n       ((0x1d < *inputData || (-1 < (int)((0x20400001U >> (*inputData & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(settings + 3) = tempFlags | 0x40;\n      return 0xffffffff;\n    }\n    settings[1] = 0;\n    *settings = settings[4];\n    if (((int)((uint)tempFlags << 0x13) < 0) && ((result != -1 || (*inputData == 0)))) {\n      settings[0x15] = result;\n    }\n    tempPtr = (int *)settings[0xd];\n    *inputData = tempData;\n    if (tempPtr != (int *)0x0) {\n      if (tempPtr != settings + 0x11) {\n        FUN_00004b34(inputData);\n      }\n      settings[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "inputData",
                "param_2": "settings",
                "iVar1": "result",
                "piVar2": "tempPtr",
                "uVar3": "flags",
                "uVar4": "tempFlags",
                "iVar5": "tempValue",
                "pcVar6": "functionPtr",
                "iVar7": "count",
                "uVar8": "tempData",
                "bVar9": "isZero"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "process_data_00004158",
            "code": "\nundefined4 processData_00004158(int inputData,undefined4 *outputData)\n\n{\n  undefined4 returnValue;\n  \n  if (outputData[4] != 0) {\n    if ((inputData != 0) && (*(int *)(inputData + 0x18) == 0)) {\n      FUN_000042a4();\n    }\n    if (outputData == &DAT_000079b8) {\n      outputData = *(undefined4 **)(inputData + 4);\n    }\n    else if (outputData == (undefined4 *)&DAT_000079d8) {\n      outputData = *(undefined4 **)(inputData + 8);\n    }\n    else if (outputData == (undefined4 *)&DAT_00007998) {\n      outputData = *(undefined4 **)(inputData + 0xc);\n    }\n    if (*(short *)(outputData + 3) != 0) {\n      if ((-1 < (int)(outputData[0x19] << 0x1f)) && (-1 < (int)*(short *)(outputData + 3) << 0x16)) {\n        FUNC_000045e8(outputData[0x16]);\n      }\n      returnValue = FUN_0000404c(inputData,outputData);\n      if ((int)(outputData[0x19] << 0x1f) < 0) {\n        return returnValue;\n      }\n      if ((int)((uint)*(ushort *)(outputData + 3) << 0x16) < 0) {\n        return returnValue;\n      }\n      FUNC_000045ec(outputData[0x16]);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "inputData",
                "param_2": "outputData",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_relocation_table_000041d0",
            "code": "\nuint process_Relocation_Table_000041d0(int address,undefined4 param_2,undefined4 param_3)\n\n{\n  uint result;\n  int j;\n  dword *pRelocEntry;\n  int relocation;\n  uint combinedResult;\n  int i;\n  undefined4 *pSectionHeader;\n  \n  if (address == 0) {\n    pSectionHeader = &DAT_000079f8;\n    pRelocEntry = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    combinedResult = 0;\n    do {\n      i = pRelocEntry[1];\n      relocation = pRelocEntry[2];\n      while (i = i + -1, -1 < i) {\n        if ((1 < *(ushort *)(relocation + 0xc)) && (j = *(short *)(relocation + 0xe) + 1, j != 0)) {\n          result = FUN_00004158(0x1fff0284,relocation,param_3,j,pSectionHeader);\n          combinedResult = combinedResult | result;\n        }\n        relocation = relocation + 0x68;\n      }\n      pRelocEntry = (dword *)*pRelocEntry;\n    } while (pRelocEntry != (dword *)0x0);\n    return combinedResult;\n  }\n  combinedResult = FUN_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,address);\n  return combinedResult;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_relocation_table_000041d0",
                "param_1": "address",
                "uVar1": "result",
                "iVar2": "j",
                "pdVar3": "pRelocEntry",
                "iVar4": "relocation",
                "uVar5": "combinedResult",
                "iVar6": "i",
                "puVar7": "pSectionHeader"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_parameters_000041f4",
            "code": "\nvoid initializeParameters_000041f4(undefined4 *outputArray,undefined2 value1,undefined2 value2)\n\n{\n  *outputArray = 0;\n  outputArray[1] = 0;\n  outputArray[4] = 0;\n  outputArray[5] = 0;\n  outputArray[2] = 0;\n  *(undefined2 *)(outputArray + 3) = value1;\n  outputArray[25] = 0;\n  *(undefined2 *)((int)outputArray + 0xe) = value2;\n  outputArray[6] = 0;\n  FUN_00004622(outputArray + 0x17,0,8);\n  outputArray[9] = 0x4dc9;\n  outputArray[10] = 0x4def;\n  outputArray[11] = 0x4e27;\n  outputArray[8] = outputArray;\n  outputArray[12] = &label1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_parameters_000041f4",
                "param_1": "outputArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[1]": "outputArray[1]",
                "param_1[4]": "outputArray[4]",
                "param_1[5]": "outputArray[5]",
                "param_1[2]": "outputArray[2]",
                "param_1[0x19]": "outputArray[25]",
                "param_1[6]": "outputArray[6]",
                "param_1[9]": "outputArray[9]",
                "param_1[10]": "outputArray[10]",
                "param_1[0xb]": "outputArray[11]",
                "param_1[8]": "outputArray[8]",
                "param_1[0xc]": "outputArray[12]",
                "&LAB_00004e4a_1": "&label1"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "initialize_data_structure_00004248",
            "code": "\nundefined4 * initializeDataStructure_00004248(undefined4 inputData,int numElements)\n\n{\n  undefined4 *dataStructurePtr;\n  int offset;\n  \n  offset = (numElements + -1) * 0x68;\n  dataStructurePtr = (undefined4 *)FUN_00004bd0(inputData,offset + 0x74);\n  if (dataStructurePtr != (undefined4 *)0x0) {\n    *dataStructurePtr = 0;\n    dataStructurePtr[1] = numElements;\n    dataStructurePtr[2] = dataStructurePtr + 3;\n    FUN_00004622(dataStructurePtr + 3,0,offset + 0x68);\n  }\n  return dataStructurePtr;\n}\n\n",
            "renaming": {
                "FUN_00004248": "initialize_data_structure_00004248",
                "param_1": "inputData",
                "param_2": "numElements",
                "puVar1": "dataStructurePtr",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_device_info_0000428c",
            "code": "\nvoid initializeDeviceInfo_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_device_info_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_data_000042a4",
            "code": "\nvoid initializeData_000042a4(int dataPointer)\n\n{\n  undefined4 defaultValue;\n  \n  FUN_0000428c();\n  if (*(int *)(dataPointer + 0x18) == 0) {\n    *(undefined4 *)(dataPointer + 0x48) = 0;\n    *(undefined4 *)(dataPointer + 0x4c) = 0;\n    *(undefined4 *)(dataPointer + 0x50) = 0;\n    defaultValue = 0x1fff0284;\n    *(undefined **)(dataPointer + 0x28) = &DAT_0000423d;\n    if (dataPointer == 0x1fff0284) {\n      defaultValue = 1;\n    }\n    if (dataPointer == 0x1fff0284) {\n      *(undefined4 *)(dataPointer + 0x18) = defaultValue;\n    }\n    defaultValue = FUN_00004314(dataPointer);\n    *(undefined4 *)(dataPointer + 4) = defaultValue;\n    defaultValue = FUN_00004314(dataPointer);\n    *(undefined4 *)(dataPointer + 8) = defaultValue;\n    defaultValue = FUN_00004314(dataPointer);\n    *(undefined4 *)(dataPointer + 0xc) = defaultValue;\n    FUN_000041f4(*(undefined4 *)(dataPointer + 4),4,0);\n    FUN_000041f4(*(undefined4 *)(dataPointer + 8),9,1);\n    FUN_000041f4(*(undefined4 *)(dataPointer + 0xc),0x12,2);\n    *(undefined4 *)(dataPointer + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_data_000042a4",
                "param_1": "dataPointer",
                "uVar1": "defaultValue"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004c84",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00004314",
                "FUN_00004cb4",
                "FUN_00005404",
                "FUN_00006768",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_00004314",
                "FUN_0000428c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "decode_and_initialize_data_00004314",
            "code": "\nundefined4 * decode_and_initialize_data_00004314(undefined4 *data_ptr)\n\n{\n  dword temp_dword;\n  int loop_index;\n  undefined4 *data_ptr2;\n  dword *rel_data_ptr;\n  \n  FUN_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUN_000042a4(0x1fff0284);\n  }\n  rel_data_ptr = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    loop_index = rel_data_ptr[1];\n    data_ptr2 = (undefined4 *)rel_data_ptr[2];\n    while (loop_index = loop_index + -1, -1 < loop_index) {\n      if (*(short *)(data_ptr2 + 3) == 0) {\n        data_ptr2[3] = 0xffff0001;\n        data_ptr2[0x19] = 0;\n        FUNC_000045e4(data_ptr2 + 0x16);\n        FUN_00004280();\n        data_ptr2[1] = 0;\n        data_ptr2[2] = 0;\n        data_ptr2[4] = 0;\n        data_ptr2[5] = 0;\n        *data_ptr2 = 0;\n        data_ptr2[6] = 0;\n        FUN_00004622(data_ptr2 + 0x17,0,8);\n        data_ptr2[0xd] = 0;\n        data_ptr2[0xe] = 0;\n        data_ptr2[0x12] = 0;\n        data_ptr2[0x13] = 0;\n        return data_ptr2;\n      }\n      data_ptr2 = data_ptr2 + 0x1a;\n    }\n    if (*rel_data_ptr == 0) {\n      temp_dword = FUN_00004248(data_ptr,4);\n      *rel_data_ptr = temp_dword;\n      if (temp_dword == 0) {\n        FUN_00004280();\n        *data_ptr = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    rel_data_ptr = (dword *)*rel_data_ptr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "decode_and_initialize_data_00004314",
                "param_1": "data_ptr",
                "dVar1": "temp_dword",
                "iVar2": "loop_index",
                "puVar3": "data_ptr2",
                "pdVar4": "rel_data_ptr"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004248",
                "FUN_00004274",
                "FUN_000042a4",
                "FUN_00004280",
                "FUN_00004622",
                "FUN_000045e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint processData_000043a0(int offset,code *callback)\n\n{\n  uint callbackResult;\n  int *ptr1;\n  int ptr2;\n  uint result;\n  int count;\n  \n  ptr1 = (int *)(offset + 0x48);\n  result = 0;\n  do {\n    count = ptr1[1];\n    ptr2 = ptr1[2];\n    while (count = count + -1, -1 < count) {\n      if ((1 < *(ushort *)(ptr2 + 0xc)) && (*(short *)(ptr2 + 0xe) != -1)) {\n        callbackResult = (*callback)(ptr2);\n        result = result | callbackResult;\n      }\n      ptr2 = ptr2 + 0x68;\n    }\n    ptr1 = (int *)*ptr1;\n  } while (ptr1 != (int *)0x0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "offset",
                "param_2": "callback",
                "piVar2": "ptr1",
                "uVar4": "result",
                "iVar3": "ptr2",
                "iVar5": "count",
                "uVar1": "callbackResult"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "get_modified_value_00004418",
            "code": "\nuint getModifiedValue_00004418(void)\n\n{\n  dword offset;\n  uint result;\n  byte **doublePointer;\n  byte *bytePointer;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  doublePointer = *(byte ***)(offset + 4);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (doublePointer == (byte **)&DAT_000079b8) {\n    doublePointer = *(byte ***)(offset + 4);\n  }\n  else if (doublePointer == (byte **)&DAT_000079d8) {\n    doublePointer = *(byte ***)(offset + 8);\n  }\n  else if (doublePointer == (byte **)&DAT_00007998) {\n    doublePointer = *(byte ***)(offset + 0xc);\n  }\n  if ((-1 < (int)doublePointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(doublePointer + 3) << 0x16))) {\n    FUNC_000045e8(doublePointer[0x16]);\n  }\n  bytePointer = doublePointer[1];\n  doublePointer[1] = bytePointer + -1;\n  if ((int)(bytePointer + -1) < 0) {\n    result = FUN_00005e10(offset,doublePointer);\n  }\n  else {\n    bytePointer = *doublePointer;\n    *doublePointer = bytePointer + 1;\n    result = (uint)*bytePointer;\n  }\n  if ((-1 < (int)doublePointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(doublePointer + 3) << 0x16))) {\n    FUNC_000045ec(doublePointer[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "get_modified_value_00004418",
                "dVar1": "offset",
                "uVar2": "result",
                "ppbVar3": "doublePointer",
                "pbVar4": "bytePointer"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_components_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateComponents_0000443c(undefined4 *datePointer,uint *result)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  undefined4 var1;\n  undefined4 var2;\n  uint tempVar6;\n  bool isNegative;\n  \n  var1 = *datePointer;\n  var2 = datePointer[1];\n  tempVar1 = FUN_00006974(var1,var2,0x15180,0);\n  tempVar3 = 0x15180;\n  FUN_00006974(var1,var2,0x15180,0);\n  isNegative = (int)tempVar3 < 0;\n  if (isNegative) {\n    tempVar3 = tempVar3 + 0x15180;\n  }\n  if (isNegative) {\n    tempVar2 = tempVar1 + 0xafa6b;\n  }\n  else {\n    tempVar2 = tempVar1 + 0xafa6c;\n  }\n  result[2] = tempVar3 / 0xe10;\n  result[1] = (tempVar3 % 0xe10) / 0x3c;\n  *result = (tempVar3 % 0xe10) % 0x3c;\n  result[6] = (tempVar2 + 3) % 7;\n  tempVar3 = tempVar2;\n  if ((int)tempVar2 < 0) {\n    tempVar3 = tempVar2 - 0x23ab0;\n  }\n  tempVar2 = (tempVar3 / 0x23ab1) * -0x23ab1 + tempVar2;\n  tempVar4 = ((tempVar2 / 0x8eac + tempVar2) - tempVar2 / 0x5b4) - tempVar2 / 0x23ab0;\n  tempVar5 = tempVar4 / 0x16d;\n  tempVar2 = (tempVar5 / 100 - tempVar4 / 0x5b4) + tempVar2 + tempVar5 * -0x16d;\n  tempVar6 = tempVar2 * 5 + 2;\n  tempVar4 = tempVar6 / 0x99;\n  if (tempVar6 < 0x5fa) {\n    tempVar1 = 2;\n  }\n  else {\n    tempVar1 = -10;\n  }\n  tempVar6 = tempVar4 + tempVar1;\n  tempVar1 = (tempVar3 / 0x23ab1) * 400 + tempVar5;\n  if (tempVar6 < 2) {\n    tempVar1 = tempVar1 + 1;\n  }\n  if (tempVar2 < 0x132) {\n    if (((tempVar5 & 3) == 0) && (tempVar5 != (tempVar5 / 100) * 100)) {\n      tempVar3 = 1;\n    }\n    else {\n      tempVar3 = (uint)(tempVar5 % 400 == 0);\n    }\n    tempVar3 = tempVar2 + 0x3b + tempVar3;\n  }\n  else {\n    tempVar3 = tempVar2 - 0x132;\n  }\n  result[7] = tempVar3;\n  result[3] = (tempVar2 + 1) - (tempVar4 * 0x99 + 2) / 5;\n  result[4] = tempVar6;\n  result[5] = tempVar1 - 0x76c;\n  result[8] = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_components_0000443c",
                "param_1": "datePointer",
                "param_2": "result",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "var1",
                "uVar7": "var2",
                "uVar8": "tempVar6",
                "bVar9": "isNegative"
            },
            "calling": [
                "FUN_00002690",
                "FUN_00002624"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "run_function_pointers_0000459c",
            "code": "\nvoid runFunctionPointers_0000459c(void)\n\n{\n  code **functionPointerArray;\n  int index;\n  \n  functionPointerArray = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionPointerArray)();\n    functionPointerArray = functionPointerArray + 1;\n  }\n  FUN_00000410();\n  functionPointerArray = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionPointerArray)();\n    functionPointerArray = functionPointerArray + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "run_function_pointers_0000459c",
                "ppcVar1": "functionPointerArray",
                "iVar2": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004274",
                "FUN_00005fec",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_000057f8",
                "FUN_00005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00005ff8",
                "FUN_0000579c",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000042a4",
                "FUN_000057f8",
                "FUN_00004280"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_and_reverse_000045ee",
            "code": "\nvoid copyAndReverse_000045ee(undefined *dest,undefined *src,int size)\n\n{\n  undefined *destPtr;\n  undefined *srcPtr;\n  \n  srcPtr = src + size;\n  if ((src < dest) && (dest < srcPtr)) {\n    destPtr = dest + size;\n    while (destPtr != dest) {\n      srcPtr = srcPtr + -1;\n      destPtr = destPtr + -1;\n      *destPtr = *srcPtr;\n    }\n  }\n  else {\n    dest = dest + -1;\n    for (; src != srcPtr; src = src + 1) {\n      dest = dest + 1;\n      *dest = *src;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_000045ee",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "srcPtr"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_with_00004622",
            "code": "\nvoid fillMemoryWith_00004622(undefined *memoryStart,undefined value,int numBytes)\n\n{\n  undefined *endAddr;\n  \n  endAddr = memoryStart + numBytes;\n  for (; memoryStart != endAddr; memoryStart = memoryStart + 1) {\n    *memoryStart = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_with_00004622",
                "param_1": "memoryStart",
                "param_2": "value",
                "param_3": "numBytes",
                "puVar1": "endAddr"
            },
            "calling": [
                "FUN_00004248",
                "FUN_000041f4",
                "FUN_00004314",
                "FUN_00003ec4",
                "FUN_00003ff4",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "adjust_date_time_00004634",
            "code": "\nvoid adjustDateTime_00004634(uint *dateTimeArray,uint currentDay,undefined4 param_3)\n\n{\n  int daysInMonth;\n  uint daysInCurrentMonth;\n  uint daysInNextMonth;\n  int daysInCurrentYear;\n  bool isNegative;\n  uint *tempArray;\n  uint currentMonth;\n  undefined4 param_3;\n  \n  tempArray = dateTimeArray;\n  currentMonth = currentDay;\n  param_3 = param_3;\n  if (0x3b < *dateTimeArray) {\n    FUN_00005584(&tempArray,*dateTimeArray,0x3c);\n    daysInCurrentMonth = dateTimeArray[1] + (int)tempArray;\n    dateTimeArray[1] = daysInCurrentMonth;\n    if ((int)currentMonth < 0) {\n      daysInCurrentMonth = daysInCurrentMonth - 1;\n      *dateTimeArray = currentMonth + 0x3c;\n    }\n    else {\n      *dateTimeArray = currentMonth;\n    }\n    if ((int)currentMonth < 0) {\n      dateTimeArray[1] = daysInCurrentMonth;\n    }\n  }\n  if (0x3b < dateTimeArray[1]) {\n    FUN_00005584(&tempArray,dateTimeArray[1],0x3c);\n    isNegative = (int)currentMonth < 0;\n    daysInNextMonth = dateTimeArray[2] + (int)tempArray;\n    dateTimeArray[2] = daysInNextMonth;\n    daysInCurrentMonth = currentMonth;\n    if (isNegative) {\n      daysInCurrentMonth = currentMonth + 0x3c;\n      daysInNextMonth = daysInNextMonth - 1;\n    }\n    if (!isNegative) {\n      dateTimeArray[1] = daysInCurrentMonth;\n    }\n    if (isNegative) {\n      dateTimeArray[1] = daysInCurrentMonth;\n    }\n    if (isNegative) {\n      dateTimeArray[2] = daysInNextMonth;\n    }\n  }\n  if (0x17 < dateTimeArray[2]) {\n    FUN_00005584(&tempArray,dateTimeArray[2],0x18);\n    isNegative = (int)currentMonth < 0;\n    daysInNextMonth = dateTimeArray[3] + (int)tempArray;\n    dateTimeArray[3] = daysInNextMonth;\n    daysInCurrentMonth = currentMonth;\n    if (isNegative) {\n      daysInCurrentMonth = currentMonth + 0x18;\n      daysInNextMonth = daysInNextMonth - 1;\n    }\n    if (!isNegative) {\n      dateTimeArray[2] = daysInCurrentMonth;\n    }\n    if (isNegative) {\n      dateTimeArray[2] = daysInCurrentMonth;\n    }\n    if (isNegative) {\n      dateTimeArray[3] = daysInNextMonth;\n    }\n  }\n  if (0xb < dateTimeArray[4]) {\n    FUN_00005584(&tempArray,dateTimeArray[4],0xc);\n    isNegative = (int)currentMonth < 0;\n    daysInCurrentMonth = dateTimeArray[5] + (int)tempArray;\n    dateTimeArray[5] = daysInCurrentMonth;\n    if (isNegative) {\n      currentMonth = currentMonth + 0xc;\n      daysInCurrentMonth = daysInCurrentMonth - 1;\n    }\n    if (!isNegative) {\n      dateTimeArray[4] = currentMonth;\n    }\n    if (isNegative) {\n      dateTimeArray[4] = currentMonth;\n    }\n    if (isNegative) {\n      dateTimeArray[5] = daysInCurrentMonth;\n    }\n  }\n  daysInCurrentMonth = dateTimeArray[5];\n  if ((daysInCurrentMonth & 3) == 0) {\n    if (daysInCurrentMonth == (daysInCurrentMonth / 100) * 100) {\n      if ((daysInCurrentMonth + 0x76c) % 400 == 0) {\n        daysInCurrentYear = 0x1d;\n      }\n      else {\n        daysInCurrentYear = 0x1c;\n      }\n    }\n    else {\n      daysInCurrentYear = 0x1d;\n    }\n  }\n  else {\n    daysInCurrentYear = 0x1c;\n  }\n  if ((int)dateTimeArray[3] < 1) {\n    while ((int)dateTimeArray[3] < 1) {\n      daysInCurrentMonth = dateTimeArray[4];\n      dateTimeArray[4] = daysInCurrentMonth - 1;\n      if (daysInCurrentMonth - 1 == 0xffffffff) {\n        daysInNextMonth = dateTimeArray[5];\n        daysInCurrentMonth = daysInNextMonth - 1;\n        dateTimeArray[4] = 0xb;\n        dateTimeArray[5] = daysInCurrentMonth;\n        if ((daysInCurrentMonth & 3) == 0) {\n          if (daysInCurrentMonth == (daysInCurrentMonth / 100) * 100) {\n            if ((daysInNextMonth + 0x76b) % 400 == 0) {\n              daysInCurrentYear = 0x1d;\n            }\n            else {\n              daysInCurrentYear = 0x1c;\n            }\n          }\n          else {\n            daysInCurrentYear = 0x1d;\n          }\n        }\n        else {\n          daysInCurrentYear = 0x1c;\n        }\n      }\n      daysInMonth = daysInCurrentYear;\n      if (dateTimeArray[4] != 1) {\n        daysInMonth = (&DAT_000079fc)[dateTimeArray[4]];\n      }\n      dateTimeArray[3] = daysInMonth + dateTimeArray[3];\n    }\n  }\n  else {\n    while( true ) {\n      daysInCurrentMonth = dateTimeArray[4];\n      daysInMonth = daysInCurrentYear;\n      if (daysInCurrentMonth != 1) {\n        daysInMonth = (&DAT_000079fc)[daysInCurrentMonth];\n      }\n      if ((int)dateTimeArray[3] <= daysInMonth) break;\n      dateTimeArray[3] = dateTimeArray[3] - daysInMonth;\n      dateTimeArray[4] = daysInCurrentMonth + 1;\n      if (daysInCurrentMonth + 1 == 0xc) {\n        daysInNextMonth = dateTimeArray[5];\n        daysInCurrentMonth = daysInNextMonth + 1;\n        dateTimeArray[4] = 0;\n        dateTimeArray[5] = daysInCurrentMonth;\n        if ((daysInCurrentMonth & 3) == 0) {\n          if (daysInCurrentMonth % 100 == 0) {\n            if ((daysInNextMonth + 0x76d) % 400 == 0) {\n              daysInCurrentYear = 0x1d;\n            }\n            else {\n              daysInCurrentYear = 0x1c;\n            }\n          }\n          else {\n            daysInCurrentYear = 0x1d;\n          }\n        }\n        else {\n          daysInCurrentYear = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "adjust_date_time_00004634",
                "param_1": "dateTimeArray",
                "param_2": "currentDay",
                "iVar1": "daysInMonth",
                "uVar2": "daysInCurrentMonth",
                "uVar3": "daysInNextMonth",
                "iVar4": "daysInCurrentYear",
                "bVar5": "isNegative",
                "local_20": "tempArray",
                "local_1c": "currentMonth",
                "uStack_18": "param_3"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_date_offset_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateDateOffset_000047e4(int *dateParams)\n\n{\n  longlong totalDays;\n  longlong updatedTotalDays;\n  int *getCalendarParams;\n  uint lastDate;\n  int dayOffset;\n  int dayOffsetTemp;\n  int updatedDayOffset;\n  uint yearStart;\n  uint yearEnd;\n  uint leapYear;\n  int numDays;\n  uint temp;\n  uint isNegativeOffset;\n  uint numLeapYears;\n  uint daysPart;\n  bool bVar16;\n  \n  getCalendarParams = (int *)FUN_000056b0();\n  FUN_00004634(dateParams);\n  temp = dateParams[5];\n  numDays = dateParams[3] + -1 + *(int *)(&DAT_00007a2c + dateParams[4] * 4);\n  if (((1 < dateParams[4]) && ((temp & 3) == 0)) &&\n     ((temp != (temp / 100) * 100 || (temp + 0x76c == ((temp + 0x76c) / 400) * 400)))) {\n    numDays = numDays + 1;\n  }\n  dateParams[7] = numDays;\n  if (20000 < (int)&DAT_00002710 + temp) {\n    updatedDayOffset = -1;\n    dayOffset = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)temp < 0x47) {\n    if (temp != 0x46) {\n      for (yearEnd = 0x45; (int)temp < (int)yearEnd; yearEnd = yearEnd - 1) {\n        if ((yearEnd & 3) == 0) {\n          if (yearEnd == (yearEnd / 100) * 100) {\n            if ((yearEnd + 0x76c) % 400 == 0) {\n              updatedDayOffset = 0x16e;\n            }\n            else {\n              updatedDayOffset = 0x16d;\n            }\n          }\n          else {\n            updatedDayOffset = 0x16e;\n          }\n        }\n        else {\n          updatedDayOffset = 0x16d;\n        }\n        numDays = numDays - updatedDayOffset;\n      }\n      if ((yearEnd & 3) == 0) {\n        if (temp == (temp / 100) * 100) {\n          updatedDayOffset = 0x16d;\n          if ((temp + 0x76c) % 400 == 0) {\n            updatedDayOffset = 0x16e;\n          }\n        }\n        else {\n          updatedDayOffset = 0x16e;\n        }\n      }\n      else {\n        updatedDayOffset = 0x16d;\n      }\n      numDays = numDays - updatedDayOffset;\n    }\n  }\n  else {\n    yearEnd = 0x46;\n    do {\n      if ((yearEnd & 3) == 0) {\n        if (yearEnd % 100 == 0) {\n          if ((yearEnd + 0x76c) % 400 == 0) {\n            updatedDayOffset = 0x16e;\n          }\n          else {\n            updatedDayOffset = 0x16d;\n          }\n        }\n        else {\n          updatedDayOffset = 0x16e;\n        }\n      }\n      else {\n        updatedDayOffset = 0x16d;\n      }\n      yearEnd = yearEnd + 1;\n      numDays = numDays + updatedDayOffset;\n    } while (temp != yearEnd);\n  }\n  totalDays = (longlong)numDays * 0x15180 + (longlong)(dateParams[2] * 0xe10 + dateParams[1] * 0x3c + *dateParams)\n  ;\n  daysPart = (uint)totalDays;\n  updatedDayOffset = (int)((ulonglong)totalDays >> 0x20);\n  FUN_000050e8();\n  FUN_00005100();\n  yearEnd = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    temp = getCalendarParams[10];\n    updatedDayOffset = (uint)totalDays + temp;\n    dayOffset = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)temp >> 0x1f) + (uint)CARRY4((uint)totalDays,temp);\n  }\n  else {\n    numLeapYears = dateParams[8];\n    isNegativeOffset = numLeapYears;\n    if (0 < (int)numLeapYears) {\n      isNegativeOffset = 1;\n    }\n    if ((getCalendarParams[1] == dateParams[5] + 0x76c) || (dayOffset = FUN_00004f98(), dayOffset != 0)) {\n      leapYear = getCalendarParams[0x14];\n      lastDate = getCalendarParams[0x12];\n      yearStart = getCalendarParams[10];\n      yearEnd = lastDate - yearStart;\n      dayOffset = (getCalendarParams[0x13] - ((int)yearStart >> 0x1f)) - (uint)(lastDate < yearStart);\n      if (((int)((updatedDayOffset - dayOffset) - (uint)(daysPart < yearEnd)) < 0 ==\n           (SBORROW4(updatedDayOffset,dayOffset) != SBORROW4(updatedDayOffset - dayOffset,(uint)(daysPart < yearEnd)))) &&\n         (dayOffsetTemp = (getCalendarParams[0x13] - ((int)leapYear >> 0x1f)) - (uint)(lastDate < leapYear),\n         bVar16 = daysPart < lastDate - leapYear,\n         (int)((updatedDayOffset - dayOffsetTemp) - (uint)bVar16) < 0 !=\n         (SBORROW4(updatedDayOffset,dayOffsetTemp) != SBORROW4(updatedDayOffset - dayOffsetTemp,(uint)bVar16)))) goto LAB_00004a88;\n      lastDate = getCalendarParams[8] - leapYear;\n      dayOffsetTemp = (getCalendarParams[9] - ((int)leapYear >> 0x1f)) - (uint)((uint)getCalendarParams[8] < leapYear);\n      if (*getCalendarParams != 0) {\n        if ((int)((updatedDayOffset - dayOffsetTemp) - (uint)(daysPart < lastDate)) < 0 ==\n            (SBORROW4(updatedDayOffset,dayOffsetTemp) != SBORROW4(updatedDayOffset - dayOffsetTemp,(uint)(daysPart < lastDate))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        yearEnd = 0;\n        if ((int)numLeapYears < 0) goto LAB_00004934;\nLAB_00004a14:\n        daysPart = isNegativeOffset ^ yearEnd;\n        isNegativeOffset = yearEnd;\n        if (daysPart == 1) {\n          if (yearEnd == 0) {\n            updatedDayOffset = leapYear - yearStart;\n          }\n          else {\n            updatedDayOffset = yearStart - leapYear;\n          }\n          dayOffset = dateParams[3];\n          *dateParams = *dateParams + updatedDayOffset;\n          updatedTotalDays = totalDays + updatedDayOffset;\n          FUN_00004634(dateParams);\n          dayOffset = dateParams[3] - dayOffset;\n          totalDays = totalDays + updatedDayOffset;\n          if (dayOffset != 0) {\n            if (dayOffset < 2) {\n              if (dayOffset == -2 || dayOffset + 2 < 0 != SCARRY4(dayOffset,2)) {\n                dayOffset = 1;\n              }\n            }\n            else {\n              dayOffset = -1;\n            }\n            updatedDayOffset = dayOffset + dateParams[7];\n            numDays = numDays + dayOffset;\n            if (updatedDayOffset < 0) {\n              yearEnd = temp - 1;\n              if ((yearEnd & 3) == 0) {\n                if (yearEnd == (yearEnd / 100) * 100) {\n                  updatedDayOffset = 0x16d;\n                  if ((temp + 0x76b) % 400 != 0) {\n                    updatedDayOffset = 0x16c;\n                  }\n                }\n                else {\n                  updatedDayOffset = 0x16d;\n                }\n              }\n              else {\n                updatedDayOffset = 0x16c;\n              }\n            }\n            else {\n              if ((temp & 3) == 0) {\n                if (temp == (temp / 100) * 100) {\n                  dayOffset = 0x16d;\n                  if ((temp + 0x76c) % 400 == 0) {\n                    dayOffset = 0x16e;\n                  }\n                }\n                else {\n                  dayOffset = 0x16e;\n                }\n              }\n              else {\n                dayOffset = 0x16d;\n              }\n              if (dayOffset <= updatedDayOffset) {\n                updatedDayOffset = updatedDayOffset - dayOffset;\n              }\n            }\n            dateParams[7] = updatedDayOffset;\n            totalDays = updatedTotalDays;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((updatedDayOffset - dayOffsetTemp) - (uint)(daysPart < lastDate)) < 0 !=\n          (SBORROW4(updatedDayOffset,dayOffsetTemp) != SBORROW4(updatedDayOffset - dayOffsetTemp,(uint)(daysPart < lastDate)))) {\nLAB_0000491e:\n        if ((int)((updatedDayOffset - dayOffset) - (uint)(daysPart < yearEnd)) < 0 ==\n            (SBORROW4(updatedDayOffset,dayOffset) != SBORROW4(updatedDayOffset - dayOffset,(uint)(daysPart < yearEnd))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)numLeapYears) {\n        yearEnd = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      yearEnd = isNegativeOffset;\n      if (isNegativeOffset != 1) goto LAB_00004934;\n    }\n    temp = getCalendarParams[0x14];\n    updatedDayOffset = (uint)totalDays + temp;\n    dayOffset = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)temp >> 0x1f) + (uint)CARRY4((uint)totalDays,temp);\n    yearEnd = 1;\n  }\n  FUN_000050f4();\n  dateParams[8] = yearEnd;\n  dateParams[6] = (numDays + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(dayOffset,updatedDayOffset);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_date_offset_000047e4",
                "param_1": "dateParams",
                "lVar1": "totalDays",
                "lVar2": "updatedTotalDays",
                "piVar3": "getCalendarParams",
                "uVar4": "lastDate",
                "iVar5": "dayOffset",
                "iVar6": "dayOffsetTemp",
                "iVar7": "updatedDayOffset",
                "uVar8": "yearStart",
                "uVar9": "yearEnd",
                "uVar10": "leapYear",
                "iVar11": "numDays",
                "uVar12": "temp",
                "uVar13": "isNegativeOffset",
                "uVar14": "numLeapYears",
                "uVar15": "daysPart"
            },
            "calling": [
                "FUN_00002654",
                "FUN_00002600"
            ],
            "called": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "update_data_structure_00004b34",
            "code": "\nvoid updateDataStructure_00004b34(undefined4 *paramPointer,int paramSize,undefined4 paramValue1,undefined4 paramValue2)\n\n{\n  int *tempPtr;\n  int **extraPtr;\n  int **currentPtr;\n  int **prevPtr;\n  int **nextPtr;\n  int **newPtr;\n  bool isMatch;\n  \n  if (paramSize == 0) {\n    return;\n  }\n  newPtr = (int **)(paramSize + -4);\n  if (*(int *)(paramSize + -4) < 0) {\n    newPtr = (int **)((int)newPtr + *(int *)(paramSize + -4));\n  }\n  FUN_00005790();\n  prevPtr = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newPtr[1] = (int *)0x0;\n    currentPtr = extraPtr;\n    DAT_1fff0db4 = newPtr;\n  }\n  else {\n    nextPtr = DAT_1fff0db4;\n    if (newPtr < DAT_1fff0db4) {\n      currentPtr = (int **)*newPtr;\n      prevPtr = (int **)((int)newPtr + (int)currentPtr);\n      isMatch = DAT_1fff0db4 == prevPtr;\n      if (isMatch) {\n        prevPtr = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newPtr[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newPtr;\n      if (isMatch) {\n        prevPtr = (int **)((int)prevPtr + (int)currentPtr);\n        *newPtr = (int *)prevPtr;\n      }\n    }\n    else {\n      do {\n        prevPtr = nextPtr;\n        nextPtr = (int **)prevPtr[1];\n        if (nextPtr == (int **)0x0) break;\n      } while (nextPtr <= newPtr);\n      currentPtr = (int **)*prevPtr;\n      if ((int **)((int)prevPtr + (int)currentPtr) == newPtr) {\n        currentPtr = (int **)((int)currentPtr + (int)*newPtr);\n        *prevPtr = (int *)currentPtr;\n        if (nextPtr == (int **)((int)prevPtr + (int)currentPtr)) {\n          tempPtr = *nextPtr;\n          prevPtr[1] = nextPtr[1];\n          currentPtr = (int **)((int)currentPtr + (int)tempPtr);\n          *prevPtr = (int *)currentPtr;\n        }\n      }\n      else if (newPtr < (int **)((int)prevPtr + (int)currentPtr)) {\n        *paramPointer = 0xc;\n      }\n      else {\n        currentPtr = (int **)((int)newPtr + (int)*newPtr);\n        isMatch = nextPtr == currentPtr;\n        if (isMatch) {\n          currentPtr = (int **)*nextPtr;\n          nextPtr = (int **)nextPtr[1];\n        }\n        newPtr[1] = (int *)nextPtr;\n        if (isMatch) {\n          currentPtr = (int **)((int)currentPtr + (int)*newPtr);\n          *newPtr = (int *)currentPtr;\n        }\n        prevPtr[1] = (int *)newPtr;\n      }\n    }\n  }\n  FUN_0000579c(paramPointer,currentPtr,prevPtr,paramValue2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "update_data_structure_00004b34",
                "param_1": "paramPointer",
                "param_2": "paramSize",
                "param_3": "paramValue1",
                "param_4": "paramValue2",
                "piVar1": "tempPtr",
                "extraout_r1": "extraPtr",
                "ppiVar2": "currentPtr",
                "ppiVar3": "prevPtr",
                "ppiVar4": "nextPtr",
                "ppiVar5": "newPtr",
                "bVar6": "isMatch"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_000054a8",
                "FUN_00006192",
                "FUN_00006768",
                "FUN_000060cc",
                "FUN_00005780"
            ],
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_00004bd0",
            "code": "\nuint allocate_memory_00004bd0(undefined4 *output_ptr,uint size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *prev_ptr;\n  int offset;\n  uint difference;\n  uint *current_ptr;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *output_ptr = 0xc;\n  }\n  else {\n    FUN_00005790();\n    prev_ptr = DAT_1fff0db4;\n    for (current_ptr = DAT_1fff0db4; current_ptr != (uint *)0x0; current_ptr = (uint *)current_ptr[1]) {\n      difference = *current_ptr - allocated_size;\n      if (-1 < (int)difference) {\n        if (0xb < difference) {\n          *current_ptr = difference;\n          current_ptr = (uint *)((int)current_ptr + difference);\n          goto LAB_00004c34;\n        }\n        if (prev_ptr == current_ptr) {\n          DAT_1fff0db4 = (uint *)current_ptr[1];\n        }\n        if (prev_ptr != current_ptr) {\n          prev_ptr[1] = (uint)(uint *)current_ptr[1];\n        }\n        goto LAB_00004c42;\n      }\n      prev_ptr = current_ptr;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = FUN_00000428(output_ptr,0,prev_ptr,0,param_4);\n    }\n    prev_ptr = (uint *)FUN_00000428(output_ptr,allocated_size);\n    if ((prev_ptr != (uint *)0xffffffff) &&\n       ((current_ptr = (uint *)((int)prev_ptr + 3U & 0xfffffffc), prev_ptr == current_ptr ||\n        (offset = FUN_00000428(output_ptr,(int)current_ptr - (int)prev_ptr), offset != -1)))) {\nLAB_00004c34:\n      *current_ptr = allocated_size;\nLAB_00004c42:\n      FUN_0000579c(output_ptr);\n      allocated_size = (int)current_ptr + 0xbU & 0xfffffff8;\n      offset = allocated_size - (int)(current_ptr + 1);\n      if (offset == 0) {\n        return allocated_size;\n      }\n      *(uint *)((int)current_ptr + offset) = (int)(current_ptr + 1) - allocated_size;\n      return allocated_size;\n    }\n    *output_ptr = 0xc;\n    FUN_0000579c(output_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_1": "output_ptr",
                "param_2": "size",
                "puVar1": "prev_ptr",
                "iVar2": "offset",
                "uVar3": "difference",
                "puVar4": "current_ptr",
                "uVar5": "allocated_size"
            },
            "calling": [
                "FUN_00005700",
                "FUN_00004248",
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00000428",
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "execute_memory_operation_00004c84",
            "code": "\nvoid executeMemoryOperation_00004c84(undefined4 operationType,undefined4 parameter1,undefined4 parameter2,undefined4 parameter3)\n\n{\n  dword targetAddress;\n  undefined4 returnValue;\n  undefined4 stackParameter1;\n  undefined4 stackParameter2;\n  undefined4 stackParameter3;\n  \n  targetAddress = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  returnValue = operationType;\n  stackParameter1 = parameter1;\n  stackParameter2 = parameter2;\n  stackParameter3 = parameter3;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  FUN_000057f8(targetAddress,*(undefined4 *)(targetAddress + 8),operationType,&stackParameter1,returnValue,&stackParameter1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "execute_memory_operation_00004c84",
                "param_1": "operationType",
                "param_2": "parameter1",
                "param_3": "parameter2",
                "param_4": "parameter3",
                "dVar1": "targetAddress",
                "uVar2": "returnValue",
                "uStack_c": "stackParameter1",
                "uStack_8": "stackParameter2",
                "uStack_4": "stackParameter3"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00002f74",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_00002ecc",
                "FUN_00002fe0",
                "FUN_00003524",
                "FUN_0000316c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "update_param_with_var_conditions_00004cb4",
            "code": "\nuint updateParamWithVarConditions_00004cb4(uint inputNumber)\n\n{\n  dword relOffset;\n  undefined4 *ptrData;\n  uint updatedValue;\n  undefined *ptrDataCopy;\n  undefined4 unimportantVar1;\n  undefined4 unimportantVar2;\n  \n  relOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  ptrData = *(undefined4 **)(relOffset + 8);\n  if ((relOffset != 0) && (*(int *)(relOffset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (ptrData == &DAT_000079b8) {\n    ptrData = *(undefined4 **)(relOffset + 4);\n  }\n  else if (ptrData == (undefined4 *)&DAT_000079d8) {\n    ptrData = *(undefined4 **)(relOffset + 8);\n  }\n  else if (ptrData == (undefined4 *)&DAT_00007998) {\n    ptrData = *(undefined4 **)(relOffset + 0xc);\n  }\n  if ((-1 < (int)(ptrData[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(ptrData + 3) << 0x16))) {\n    FUNC_000045e8(ptrData[0x16]);\n  }\n  updatedValue = ptrData[2] - 1;\n  ptrData[2] = updatedValue;\n  if (((int)updatedValue < 0) && (((int)updatedValue < (int)ptrData[6] || (updatedValue = inputNumber & 0xff, updatedValue == 10))))\n  {\n    inputNumber = FUN_00005404(relOffset,inputNumber,ptrData,updatedValue,unimportantVar1,unimportantVar2);\n  }\n  else {\n    ptrDataCopy = (undefined *)*ptrData;\n    *ptrData = ptrDataCopy + 1;\n    *ptrDataCopy = (char)inputNumber;\n    inputNumber = inputNumber & 0xff;\n  }\n  if ((-1 < (int)(ptrData[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(ptrData + 3) << 0x16))) {\n    FUNC_000045ec(ptrData[0x16]);\n  }\n  return inputNumber;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "update_param_with_var_conditions_00004cb4",
                "param_1": "inputNumber",
                "dVar1": "relOffset",
                "puVar2": "ptrData",
                "uVar3": "updatedValue",
                "puVar4": "ptrDataCopy",
                "unaff_r4": "unimportantVar1",
                "unaff_r5": "unimportantVar2"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_data_00004db8",
            "code": "\nundefined4 processData_00004db8(int data)\n\n{\n  char currentChar;\n  dword offset;\n  int result;\n  char *strPtr;\n  char **dataPtr;\n  undefined4 returnValue;\n  char *currentCharPtr;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  dataPtr = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    FUN_000042a4(offset);\n  }\n  if (dataPtr == (char **)&DAT_000079b8) {\n    dataPtr = *(char ***)(offset + 4);\n  }\n  else if (dataPtr == (char **)&DAT_000079d8) {\n    dataPtr = *(char ***)(offset + 8);\n  }\n  else if (dataPtr == (char **)&DAT_00007998) {\n    dataPtr = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045e8(dataPtr[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(dataPtr + 3) << 0x1c) < 0) && (dataPtr[4] != (char *)0x0)) ||\n     (result = FUN_000054a8(offset,dataPtr), result == 0)) {\n    currentCharPtr = (char *)(data + -1);\n    do {\n      while( true ) {\n        currentCharPtr = currentCharPtr + 1;\n        currentChar = *currentCharPtr;\n        strPtr = dataPtr[2] + -1;\n        dataPtr[2] = strPtr;\n        if (currentChar == '\\0') {\n          if (-1 < (int)strPtr) {\n            currentCharPtr = *dataPtr;\n            returnValue = 10;\n            *dataPtr = currentCharPtr + 1;\n            *currentCharPtr = '\\n';\n            goto LAB_00004d64;\n          }\n          result = FUN_00005404(offset,10,dataPtr);\n          if (result != -1) {\n            returnValue = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)strPtr < 0) && (((int)strPtr < (int)dataPtr[6] || (currentChar == '\\n')))) break;\n        strPtr = *dataPtr;\n        *dataPtr = strPtr + 1;\n        *strPtr = currentChar;\n      }\n      result = FUN_00005404(offset,currentChar,dataPtr);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnValue = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045ec(dataPtr[0x16]);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_data_00004db8",
                "param_1": "data",
                "cVar1": "currentChar",
                "dVar2": "offset",
                "iVar3": "result",
                "pcVar4": "strPtr",
                "ppcVar5": "dataPtr",
                "uVar6": "returnValue",
                "pcVar7": "currentCharPtr"
            },
            "calling": [
                "FUN_000023a4",
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_000033c0",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00003478",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_value_00004dc8",
            "code": "\nvoid updateValue_00004dc8(undefined4 inputData,int pointer)\n\n{\n  int result;\n  uint newValue;\n  bool isPositive;\n  \n  result = FUN_00000490(inputData,(int)*(short *)(pointer + 0xe));\n  isPositive = -1 < result;\n  if (isPositive) {\n    newValue = *(int *)(pointer + 0x54) + result;\n  }\n  else {\n    newValue = *(ushort *)(pointer + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(pointer + 0x54) = newValue;\n  }\n  if (!isPositive) {\n    *(short *)(pointer + 0xc) = (short)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_value_00004dc8",
                "param_1": "inputData",
                "param_2": "pointer",
                "iVar1": "result",
                "uVar2": "newValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "process_data_00004dee",
            "code": "\nundefined4 processData_00004dee(undefined4 param1,int inputArray,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(inputArray + 0xc) << 0x17) < 0) {\n    FUN_000004f2(param1,(int)*(short *)(inputArray + 0xe),0,2);\n  }\n  *(ushort *)(inputArray + 0xc) = *(ushort *)(inputArray + 0xc) & 0xefff;\n  result = FUN_00000e38(param3,param4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "process_data_00004dee",
                "param_1": "param1",
                "param_2": "inputArray",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_flag_00004e26",
            "code": "\nvoid updateFlag_00004e26(undefined4 param,int data)\n\n{\n  int result;\n  ushort updatedFlag;\n  bool isResultMinusOne;\n  \n  result = FUN_000004f2(param,(int)*(short *)(data + 0xe));\n  isResultMinusOne = result == -1;\n  if (isResultMinusOne) {\n    updatedFlag = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = result;\n    updatedFlag = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (isResultMinusOne) {\n    *(ushort *)(data + 0xc) = updatedFlag;\n  }\n  if (!isResultMinusOne) {\n    *(ushort *)(data + 0xc) = updatedFlag;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_flag_00004e26",
                "param_1": "param",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "updatedFlag",
                "bVar3": "isResultMinusOne"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_byte_arrays_00004e52",
            "code": "\nint compareByteArrays_00004e52(byte *array1,byte *array2)\n\n{\n  byte currentByte;\n  uint array1Byte;\n  bool isEqual;\n  \n  do {\n    array1Byte = (uint)*array1;\n    currentByte = *array2;\n    isEqual = array1Byte == 1;\n    if (array1Byte != 0) {\n      isEqual = array1Byte == currentByte;\n    }\n    array1 = array1 + 1;\n    array2 = array2 + 1;\n  } while (isEqual);\n  return array1Byte - currentByte;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_byte_arrays_00004e52",
                "param_1": "array1",
                "param_2": "array2",
                "bVar1": "currentByte",
                "uVar2": "array1Byte",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_0000316c",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "find_diff_between_arrays_00004e66",
            "code": "\nint find_diff_between_arrays_00004e66(byte *array1,int array2_length,int array1_length)\n\n{\n  byte *current_byte_array1;\n  int difference;\n  byte *current_byte_array2;\n  uint current_byte_value;\n  \n  if (array1_length == 0) {\n    difference = 0;\n  }\n  else {\n    current_byte_array2 = (byte *)(array2_length + -1);\n    current_byte_array1 = array1;\n    do {\n      current_byte_value = (uint)*current_byte_array1;\n      current_byte_array2 = current_byte_array2 + 1;\n      if ((current_byte_value != *current_byte_array2) || (current_byte_array1 + 1 == array1 + array1_length)) break;\n      current_byte_array1 = current_byte_array1 + 1;\n    } while (current_byte_value != 0);\n    difference = current_byte_value - *current_byte_array2;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "find_diff_between_arrays_00004e66",
                "param_1": "array1",
                "param_2": "array2_length",
                "param_3": "array1_length",
                "pbVar1": "current_byte_array1",
                "iVar2": "difference",
                "pbVar3": "current_byte_array2",
                "uVar4": "current_byte_value"
            },
            "calling": [
                "FUN_0000562c",
                "FUN_00003524"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "decode_number_00004f84",
            "code": "\nuint decodeNumber_00004f84(byte *input,byte **output,uint base)\n\n{\n  uint result;\n  uint currentChar;\n  uint isNegative;\n  uint digitValue;\n  int encodingState;\n  uint maxResult;\n  uint maxQuotient;\n  byte *currentByte;\n  byte *nextByte;\n  \n  nextByte = input;\n  do {\n    currentByte = nextByte;\n    nextByte = currentByte + 1;\n    currentChar = (uint)*currentByte;\n    isNegative = (byte)(&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextByte;\n    isNegative = 1;\n    nextByte = currentByte + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextByte;\n    nextByte = currentByte + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00004ed6;\n  if ((*nextByte & 0xdf) == 0x58) {\n    currentChar = (uint)nextByte[1];\n    base = 0x10;\n    nextByte = nextByte + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxResult = isNegative + 0x7fffffff;\n  encodingState = 0;\n  maxQuotient = maxResult / base;\n  result = 0;\n  do {\n    digitValue = currentChar - 0x30;\n    if (9 < digitValue) {\n      if (currentChar - 0x41 < 0x1a) {\n        digitValue = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digitValue = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (encodingState != -1) {\n      if ((maxQuotient < result) || ((maxQuotient == result && ((int)(maxResult - base * maxQuotient) < (int)digitValue)))) {\n        encodingState = -1;\n      }\n      else {\n        result = result * base + digitValue;\n        encodingState = 1;\n      }\n    }\n    currentChar = (uint)*nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n  if (encodingState == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = maxResult;\n    if (output == (byte **)0x0) {\n      return maxResult;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (output == (byte **)0x0) {\n      return result;\n    }\n    if (encodingState == 0) goto LAB_00004f64;\n  }\n  input = nextByte + -1;\nLAB_00004f64:\n  *output = input;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "decode_number_00004f84",
                "param_1": "input",
                "param_2": "output",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "currentChar",
                "uVar3": "isNegative",
                "uVar4": "digitValue",
                "iVar5": "encodingState",
                "uVar6": "maxResult",
                "uVar7": "maxQuotient",
                "pbVar8": "currentByte",
                "pbVar9": "nextByte"
            },
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculateDayOfWeek_00004f98(uint year)\n\n{\n  uint *result;\n  undefined4 isLeapYear;\n  uint day;\n  int totalDays;\n  uint *weekdayData;\n  int dayOfWeekIndex;\n  uint isLeapYear;\n  int i;\n  int dayOfWeek;\n  uint isCenturyLeapYear;\n  \n  result = (uint *)FUN_000056b0();\n  if ((int)year < 0x7b2) {\n    isLeapYear = 0;\n  }\n  else {\n    dayOfWeekIndex = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    result[1] = year;\n    isCenturyLeapYear = (uint)(year % 400 == 0);\n    weekdayData = result;\n    do {\n      day = weekdayData[5];\n      if (*(char *)(weekdayData + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)day < 0x3c) {\n            totalDays = 0;\n          }\n          else {\n            totalDays = 1;\n          }\n        }\n        else {\n          totalDays = 0;\n        }\n        totalDays = totalDays + dayOfWeekIndex + day + -1;\n      }\n      else if (*(char *)(weekdayData + 2) == 'D') {\n        totalDays = dayOfWeekIndex + day;\n      }\n      else {\n        isLeapYear = isCenturyLeapYear;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          isLeapYear = 1;\n        }\n        i = 0;\n        totalDays = dayOfWeekIndex;\n        while( true ) {\n          i = i + 1;\n          if ((int)weekdayData[3] <= i) break;\n          totalDays = totalDays + *(int *)(&UNK_00007b98 + i * 4 + isLeapYear * 0x30);\n        }\n        dayOfWeek = day - (totalDays + 4U) % 7;\n        if (dayOfWeek < 0) {\n          dayOfWeek = dayOfWeek + 7;\n        }\n        for (dayOfWeek = (weekdayData[4] - 1) * 7 + dayOfWeek;\n            *(int *)(&UNK_00007b98 + i * 4 + isLeapYear * 0x30) <= dayOfWeek; dayOfWeek = dayOfWeek + -7) {\n        }\n        totalDays = totalDays + dayOfWeek;\n      }\n      day = weekdayData[10] + totalDays * 0x15180 + weekdayData[6];\n      weekdayData[8] = day;\n      weekdayData[9] = (int)day >> 0x1f;\n      weekdayData = weekdayData + 10;\n    } while (result + 0x14 != weekdayData);\n    day = result[9];\n    isCenturyLeapYear = result[0x13];\n    *result = (uint)((int)((day - isCenturyLeapYear) - (uint)(result[8] < result[0x12])) < 0 !=\n                    (SBORROW4(day,isCenturyLeapYear) !=\n                    SBORROW4(day - isCenturyLeapYear,(uint)(result[8] < result[0x12]))));\n    isLeapYear = 1;\n  }\n  return isLeapYear;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "result",
                "uVar2": "isLeapYear",
                "uVar3": "day",
                "iVar4": "totalDays",
                "puVar5": "weekdayData",
                "iVar6": "dayOfWeekIndex",
                "uVar7": "isLeapYear",
                "iVar8": "i",
                "iVar9": "dayOfWeek",
                "uVar10": "isCenturyLeapYear"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_memory_address_000050e8",
            "code": "\nundefined * get_memory_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_memory_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_data_address_000050f4",
            "code": "\nundefined * get_data_address_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_data_address_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "decode_and_update_data_00005100",
            "code": "\nvoid decode_and_update_data_00005100(void)\n\n{\n  dword offset;\n  int result;\n  char *input_data;\n  int temp_var;\n  int parse_result;\n  undefined type_flag;\n  char *str_ptr;\n  bool first_entry_flag;\n  ushort *ptr_1;\n  int *ptr_2;\n  ushort *ptr_3;\n  int *ptr_4;\n  ushort num1;\n  ushort num2;\n  ushort num3;\n  ushort num4;\n  ushort num5;\n  ushort num6;\n  int len;\n  char *str_array [2];\n  \n  offset = rel_array1[16].r_offset;\n  result = FUN_000056b0();\n  input_data = (char *)FUN_000056a0(offset,&DAT_00007a5c);\n  if (input_data == (char *)0x0) {\n    rel_array1[28].r_info = (dword)&DAT_00007a5f;\n    rel_array1[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = input_data;\n    DAT_1fff0ddc = input_data;\n    FUN_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (temp_var = FUN_00004e52(), temp_var != 0)) {\n    FUN_00005780(DAT_1fff0dd4);\n    temp_var = FUN_00005ecc(input_data);\n    DAT_1fff0dd4 = FUN_00004bd0(offset,temp_var + 1);\n    if (DAT_1fff0dd4 != 0) {\n      FUN_00005ebc(DAT_1fff0dd4,input_data);\n    }\n    if (*input_data == ':') {\n      input_data = input_data + 1;\n    }\n    temp_var = FUN_00005e68(input_data,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&len);\n    if (0 < temp_var) {\n      str_ptr = input_data + len;\n      if (input_data[len] == '-') {\n        str_ptr = str_ptr + 1;\n        temp_var = -1;\n      }\n      else {\n        if (input_data[len] == '+') {\n          str_ptr = str_ptr + 1;\n        }\n        temp_var = 1;\n      }\n      num2 = 0;\n      num3 = 0;\n      ptr_1 = &num2;\n      ptr_2 = &len;\n      ptr_3 = &num3;\n      ptr_4 = &len;\n      parse_result = FUN_00005e68(str_ptr,\"%hu%n:%hu%n:%hu%n\",&num1,&len,&num2,&len,\n                           &num3,&len);\n      if (0 < parse_result) {\n        *(uint *)(result + 0x28) =\n             ((uint)num1 * 0xe10 + (uint)num2 * 0x3c + (uint)num3) * temp_var;\n        rel_array1[28].r_info = (dword)&DAT_1fff0dc7;\n        str_ptr = str_ptr + len;\n        temp_var = FUN_00005e68(str_ptr,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&len,ptr_1,ptr_2,ptr_3,\n                             ptr_4);\n        if (temp_var < 1) {\n          rel_array1[29].r_offset = rel_array1[28].r_info;\n          DAT_1fff0ddc = *(char **)(result + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          rel_array1[29].r_offset = (dword)&DAT_1fff0dbc;\n          input_data = str_ptr + len;\n          if (str_ptr[len] == '-') {\n            input_data = input_data + 1;\n            temp_var = -1;\n          }\n          else {\n            if (str_ptr[len] == '+') {\n              input_data = input_data + 1;\n            }\n            temp_var = 1;\n          }\n          num1 = 0;\n          num2 = 0;\n          num3 = 0;\n          len = 0;\n          parse_result = FUN_00005e68(input_data,\"%hu%n:%hu%n:%hu%n\",&num1,&len,&num2,&len,\n                               &num3,&len);\n          if (parse_result < 1) {\n            temp_var = *(int *)(result + 0x28) + -0xe10;\n          }\n          else {\n            temp_var = ((uint)num1 * 0xe10 + (uint)num2 * 0x3c + (uint)num3) * temp_var;\n          }\n          *(int *)(result + 0x50) = temp_var;\n          input_data = input_data + len;\n          first_entry_flag = false;\n          temp_var = result;\n          while( true ) {\n            if (*input_data == ',') {\n              input_data = input_data + 1;\n            }\n            if (*input_data == 'M') {\n              parse_result = FUN_00005e68(input_data,\"M%hu%n.%hu%n.%hu%n\",&num4,&len,&num5,\n                                   &len,&num6,&len);\n              if (parse_result != 3) {\n                return;\n              }\n              if (0xb < num4 - 1) {\n                return;\n              }\n              if (4 < num5 - 1) {\n                return;\n              }\n              if (6 < num6) {\n                return;\n              }\n              *(uint *)(temp_var + 0xc) = (uint)num4;\n              *(uint *)(temp_var + 0x10) = (uint)num5;\n              *(undefined *)(temp_var + 8) = 0x4d;\n              *(uint *)(temp_var + 0x14) = (uint)num6;\n              str_ptr = input_data + len;\n            }\n            else {\n              if (*input_data == 'J') {\n                input_data = input_data + 1;\n                type_flag = 0x4a;\n              }\n              else {\n                type_flag = 0x44;\n              }\n              num6 = FUN_00005fd8(input_data,str_array,10);\n              str_ptr = str_array[0];\n              if (str_array[0] == input_data) {\n                if (first_entry_flag) {\n                  *(undefined *)(result + 0x30) = 0x4d;\n                  *(undefined4 *)(result + 0x34) = 0xb;\n                  *(undefined4 *)(result + 0x38) = 1;\n                  *(undefined4 *)(result + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(result + 8) = 0x4d;\n                  *(undefined4 *)(result + 0xc) = 3;\n                  *(undefined4 *)(result + 0x10) = 2;\n                  *(undefined4 *)(result + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(temp_var + 8) = type_flag;\n                *(uint *)(temp_var + 0x14) = (uint)num6;\n              }\n            }\n            num1 = 2;\n            num2 = 0;\n            num3 = 0;\n            len = 0;\n            if (*str_ptr == '/') {\n              FUN_00005e68(str_ptr,&DAT_00007a85,&num1,&len,&num2,&len,&num3,\n                           &len);\n            }\n            *(uint *)(temp_var + 0x18) =\n                 (uint)num1 * 0xe10 + (uint)num2 * 0x3c + (uint)num3;\n            temp_var = temp_var + 0x28;\n            input_data = str_ptr + len;\n            if (first_entry_flag) break;\n            first_entry_flag = true;\n          }\n          FUN_00004f98(*(undefined4 *)(result + 4));\n          DAT_1fff0ddc = *(char **)(result + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(result + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "decode_and_update_data_00005100",
                "dVar1": "offset",
                "iVar2": "result",
                "pcVar3": "input_data",
                "iVar4": "temp_var",
                "iVar5": "parse_result",
                "uVar6": "type_flag",
                "pcVar7": "str_ptr",
                "bVar8": "first_entry_flag",
                "puVar9": "ptr_1",
                "piVar10": "ptr_2",
                "puVar11": "ptr_3",
                "piVar12": "ptr_4",
                "local_3c": "num1",
                "local_3a": "num2",
                "local_38": "num3",
                "local_36": "num4",
                "local_34": "num5",
                "local_32": "num6",
                "local_30": "len",
                "local_2c": "str_array",
                "Elf32_Rel_ARRAY_1fff0200": "rel_array1"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00005fd8",
                "FUN_00004f98",
                "FUN_00005ebc",
                "FUN_00004bd0",
                "FUN_00005e68",
                "FUN_000056b0",
                "FUN_00005780",
                "FUN_000056a0",
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "decode_and_write_data_00005404",
            "code": "\nuint decode_and_write_data_00005404(int input_data,uint data_length,int *data_buffer,undefined4 unknown_param)\n\n{\n  int offset;\n  uint flag;\n  undefined *write_pointer;\n  \n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (data_buffer == &DAT_000079b8) {\n    data_buffer = *(int **)(input_data + 4);\n  }\n  else if (data_buffer == (int *)&DAT_000079d8) {\n    data_buffer = *(int **)(input_data + 8);\n  }\n  else if (data_buffer == (int *)&DAT_00007998) {\n    data_buffer = *(int **)(input_data + 0xc);\n  }\n  data_buffer[2] = data_buffer[6];\n  flag = (uint)*(ushort *)(data_buffer + 3);\n  offset = flag << 0x1c;\n  if (((offset < 0) && (flag = data_buffer[4], flag != 0)) ||\n     (offset = FUN_000054a8(input_data,data_buffer,offset,flag,unknown_param), offset == 0)) {\n    offset = *data_buffer - data_buffer[4];\n    data_length = data_length & 0xff;\n    if ((offset < data_buffer[5]) || (offset = FUN_00004158(input_data,data_buffer), offset == 0)) {\n      data_buffer[2] = data_buffer[2] + -1;\n      write_pointer = (undefined *)*data_buffer;\n      *data_buffer = (int)(write_pointer + 1);\n      *write_pointer = (char)data_length;\n      if (data_buffer[5] != offset + 1) {\n        if (-1 < (int)((uint)*(ushort *)(data_buffer + 3) << 0x1f)) {\n          return data_length;\n        }\n        if (data_length != 10) {\n          return data_length;\n        }\n      }\n      offset = FUN_00004158(input_data,data_buffer);\n      if (offset == 0) {\n        return data_length;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "decode_and_write_data_00005404",
                "param_1": "input_data",
                "param_2": "data_length",
                "param_3": "data_buffer",
                "param_4": "unknown_param",
                "iVar1": "offset",
                "uVar2": "flag",
                "puVar3": "write_pointer"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000057a8"
            ],
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "decode_and_update_data_000054a8",
            "code": "\nuint decode_and_update_data_000054a8(undefined4 *output_data,undefined4 *input_data)\n\n{\n  ushort temp_ushort;\n  dword data_offset;\n  ushort temp_ushort_2;\n  uint temp_uint;\n  uint temp_uint_2;\n  \n  data_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (input_data == &DAT_000079b8) {\n    input_data = *(undefined4 **)(data_offset + 4);\n  }\n  else if (input_data == (undefined4 *)&DAT_000079d8) {\n    input_data = *(undefined4 **)(data_offset + 8);\n  }\n  else if (input_data == (undefined4 *)&DAT_00007998) {\n    input_data = *(undefined4 **)(data_offset + 0xc);\n  }\n  temp_uint = (uint)*(ushort *)(input_data + 3);\n  temp_ushort_2 = *(ushort *)(input_data + 3);\n  if (-1 < (int)(temp_uint << 0x1c)) {\n    if (-1 < (int)(temp_uint << 0x1b)) {\n      *output_data = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(temp_uint << 0x1d) < 0) {\n      if ((undefined4 *)input_data[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_data[0xd] != input_data + 0x11) {\n          FUN_00004b34(output_data);\n        }\n        input_data[0xd] = 0;\n      }\n      *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) & 0xffdb;\n      input_data[1] = 0;\n      *input_data = input_data[4];\n    }\n    *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) | 8;\n  }\n  if ((input_data[4] == 0) && ((*(ushort *)(input_data + 3) & 0x280) != 0x200)) {\n    FUN_00005700(output_data,input_data);\n  }\n  temp_ushort = *(ushort *)(input_data + 3);\n  temp_uint = (uint)temp_ushort;\n  temp_ushort_2 = *(ushort *)(input_data + 3);\n  temp_uint_2 = temp_uint & 1;\n  if ((temp_ushort & 1) == 0) {\n    if (-1 < (int)(temp_uint << 0x1e)) {\n      temp_uint_2 = input_data[5];\n    }\n    input_data[2] = temp_uint_2;\n  }\n  else {\n    input_data[2] = 0;\n    input_data[6] = -input_data[5];\n  }\n  if (input_data[4] != 0) {\n    return 0;\n  }\n  if ((temp_ushort & 0x80) == 0) {\n    return temp_uint & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(input_data + 3) = temp_ushort_2 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "decode_and_update_data_000054a8",
                "param_1": "output_data",
                "param_2": "input_data",
                "uVar1": "temp_ushort",
                "dVar2": "data_offset",
                "uVar3": "temp_ushort_2",
                "uVar4": "temp_uint",
                "uVar5": "temp_uint_2"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005700",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_remainder_00005584",
            "code": "\nvoid divideAndRemainder_00005584(uint *result,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *result = quotient;\n  result[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "result",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_key_offset_0000562c",
            "code": "\nint findKeyOffset_0000562c(undefined4 param,char *string,int *resultOffset)\n\n{\n  char currentChar;\n  int *keyArray;\n  int comparisonResult;\n  char *currentPosition;\n  int *currentKey;\n  int stringOffset;\n  \n  FUN_00005fec();\n  currentPosition = string;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      currentChar = *currentPosition;\n      if (currentChar == '\\0') {\n        stringOffset = (int)currentPosition - (int)string;\n        keyArray = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          currentKey = keyArray;\n          if (*currentKey == 0) break;\n          comparisonResult = FUN_00004e66(*currentKey,string,stringOffset);\n          keyArray = currentKey + 1;\n          if ((comparisonResult == 0) && (comparisonResult = *currentKey, *(char *)(comparisonResult + stringOffset) == '=')) {\n            *resultOffset = (int)((int)currentKey - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            FUN_00005ff8(param);\n            return comparisonResult + stringOffset + 1;\n          }\n        }\n        break;\n      }\n      currentPosition = currentPosition + 1;\n    } while (currentChar != '=');\n  }\n  FUN_00005ff8(param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_key_offset_0000562c",
                "param_1": "param",
                "param_2": "string",
                "param_3": "resultOffset",
                "cVar1": "currentChar",
                "piVar2": "keyArray",
                "iVar3": "comparisonResult",
                "pcVar4": "currentPosition",
                "piVar5": "currentKey",
                "iVar6": "stringOffset"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "extract_data_000056a0",
            "code": "\nvoid extractData_000056a0(undefined4 source,undefined4 input1,undefined4 input2,undefined4 output)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  \n  result1 = input1;\n  result2 = input2;\n  FUN_0000562c(source,input1,&result1,output,source);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "extract_data_000056a0",
                "param_1": "source",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "output",
                "uStack_c": "result1",
                "uStack_8": "result2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nundefined4 getMemoryAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0"
            },
            "calling": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_and_set_flags_000056b8",
            "code": "\nundefined4 checkAndSetFlags_000056b8(undefined4 input,int data,undefined4 *output,uint *result)\n\n{\n  int status;\n  undefined4 flags;\n  undefined buffer [4];\n  uint value;\n  \n  if ((*(short *)(data + 0xe) < 0) ||\n     (status = FUN_00000514(input,(int)*(short *)(data + 0xe),buffer), status < 0)) {\n    *result = 0;\n    if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n      flags = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *result = (uint)((value & 0xf000) == 0x2000);\n  }\n  flags = 0x400;\nLAB_000056f8:\n  *output = flags;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_and_set_flags_000056b8",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "result",
                "iVar1": "status",
                "uVar2": "flags",
                "auStack_68": "buffer",
                "local_64": "value"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "process_input_00005700",
            "code": "\nvoid processInput_00005700(int inputValue,int *outputArray)\n\n{\n  ushort result;\n  int tempValue;\n  int tempValue2;\n  int *tempArray;\n  \n  if (-1 < (int)((uint)*(ushort *)(outputArray + 3) << 0x1e)) {\n    tempValue2 = inputValue;\n    tempArray = outputArray;\n    result = FUN_000056b8(inputValue,outputArray,&tempValue2,&tempArray);\n    tempValue = FUN_00004bd0(inputValue,tempValue2);\n    if (tempValue != 0) {\n      *(undefined **)(inputValue + 0x28) = &DAT_0000423d;\n      *outputArray = tempValue;\n      *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x80;\n      outputArray[5] = tempValue2;\n      outputArray[4] = tempValue;\n      if ((tempArray != (int *)0x0) &&\n         (tempValue = FUN_00000534(inputValue,(int)*(short *)((int)outputArray + 0xe)), tempValue != 0)) {\n        *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(outputArray + 3) = result | *(ushort *)(outputArray + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(outputArray + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) & 0xfffc | 2;\n  }\n  *outputArray = (int)outputArray + 0x47;\n  outputArray[4] = (int)outputArray + 0x47;\n  outputArray[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "process_input_00005700",
                "param_1": "inputValue",
                "param_2": "outputArray",
                "uVar1": "result",
                "iVar2": "tempValue",
                "local_18": "tempValue2",
                "local_14": "tempArray"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00000534",
                "FUN_00004bd0",
                "FUN_000056b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "execute_relocation_00005780",
            "code": "\nvoid executeRelocation_00005780(undefined4 param)\n\n{\n  FUN_00004b34(relocationArray[16].r_offset,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "execute_relocation_00005780",
                "param_1": "param",
                "Elf32_Rel_ARRAY_1fff0200": "relocationArray"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initializeData_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initializeData_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "update_and_return_000057a8",
            "code": "\nint updateAndReturn_000057a8(undefined4 input,int value,undefined4 *data)\n\n{\n  int index;\n  undefined *ptr;\n  \n  index = data[2] + -1;\n  data[2] = index;\n  if ((index < 0) && ((index < (int)data[6] || (value == 10)))) {\n    index = FUN_00005404();\n    return index;\n  }\n  ptr = (undefined *)*data;\n  *data = ptr + 1;\n  *ptr = (char)value;\n  return value;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "update_and_return_000057a8",
                "param_1": "input",
                "param_2": "value",
                "param_3": "data",
                "iVar1": "index",
                "puVar2": "ptr"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "iterate_and_process_000057d2",
            "code": "\nint iterate_and_process_000057d2(undefined4 input1,undefined4 input2,undefined *data,int length)\n\n{\n  int result;\n  undefined *end_ptr;\n  int current_index;\n  \n  end_ptr = data + length;\n  current_index = length;\n  do {\n    if (data == end_ptr) {\n      return 0;\n    }\n    result = FUN_000057a8(input1,*data,input2,length,current_index);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "iterate_and_process_000057d2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end_ptr",
                "iVar3": "current_index"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "process_data_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint processData_000057f8(int data,undefined4 *param1,byte *param2,int *param3)\n\n{\n  int index;\n  int result;\n  int *ptr;\n  bool isNumber;\n  byte *ptr2;\n  int temp;\n  byte *ptr3;\n  int *ptrArr;\n  uint flags;\n  int value;\n  undefined4 tempVar;\n  int num;\n  int totalLength;\n  byte ch;\n  undefined const1;\n  undefined const2;\n  undefined const3;\n  undefined4 const4;\n  \n  if ((data != 0) && (*(int *)(data + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (param1 == &DAT_000079b8) {\n    param1 = *(undefined4 **)(data + 4);\n  }\n  else if (param1 == (undefined4 *)&DAT_000079d8) {\n    param1 = *(undefined4 **)(data + 8);\n  }\n  else if (param1 == (undefined4 *)&DAT_00007998) {\n    param1 = *(undefined4 **)(data + 0xc);\n  }\n  if ((-1 < (int)(param1[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(param1 + 3) << 0x16))) {\n    FUNC_000045e8(param1[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param1 + 3) << 0x1c)) || (param1[4] == 0)) &&\n     (index = FUN_000054a8(data,param1), index != 0)) {\n    if ((-1 < (int)(param1[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(param1 + 3) << 0x16)))\n    {\n      FUNC_000045ec(param1[0x16]);\n    }\n    return -1;\n  }\n  totalLength = 0;\n  const1 = 0x20;\n  const2 = 0x30;\n  ptr3 = param2;\n  ptrArr = param3;\nLAB_0000588e:\n  ptr2 = ptr3;\n  if (*ptr2 != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  ptr3 = ptr2 + 1;\n  if (*ptr2 == 0x25) {\nLAB_0000589a:\n    index = (int)ptr2 - (int)param2;\n    if (index != 0) {\n      result = FUN_000057d2(data,param1,param2,index);\n      if (result == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(param1[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(param1 + 3) << 0x16))) {\n          FUNC_000045ec(param1[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(param1 + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalLength;\n      }\n      totalLength = totalLength + index;\n    }\n    if (*ptr2 == 0) goto LAB_00005a06;\n    value = -1;\n    tempVar = 0;\n    flags = 0;\n    num = 0;\n    const3 = 0;\n    const4 = 0;\n    ptr3 = ptr2 + 1;\n    while( true ) {\n      ptr2 = ptr3 + 1;\n      index = FUN_00006010(\"#-0+ \",*ptr3,5);\n      if (index == 0) break;\n      flags = 1 << (index - 0x7bfcU & 0xff) | flags;\n      ptr3 = ptr2;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      const3 = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      const3 = 0x2b;\n    }\n    if (*ptr3 == 0x2a) {\n      ptr = ptrArr + 1;\n      num = *ptrArr;\n      ptrArr = ptr;\n      if (num < 0) {\n        num = -num;\n        flags = flags | 2;\n      }\n    }\n    else {\n      isNumber = false;\n      index = num;\n      ptr2 = ptr3;\n      while( true ) {\n        if (9 < *ptr2 - 0x30) break;\n        index = index * 10 + (*ptr2 - 0x30);\n        isNumber = true;\n        ptr2 = ptr2 + 1;\n      }\n      if (isNumber) {\n        num = index;\n      }\n    }\n    if (*ptr2 == 0x2e) {\n      if (ptr2[1] == 0x2a) {\n        value = *ptrArr;\n        if (value < 0) {\n          value = -1;\n        }\n        ptr2 = ptr2 + 2;\n        ptrArr = ptrArr + 1;\n      }\n      else {\n        isNumber = false;\n        value = 0;\n        index = 0;\n        while( true ) {\n          ptr2 = ptr2 + 1;\n          if (9 < *ptr2 - 0x30) break;\n          index = index * 10 + (*ptr2 - 0x30);\n          isNumber = true;\n        }\n        if (isNumber) {\n          value = index;\n        }\n      }\n    }\n    index = FUN_00006010(&DAT_00007c02,*ptr2,3);\n    if (index != 0) {\n      flags = flags | 0x40 << (index - 0x7c02U & 0xff);\n      ptr2 = ptr2 + 1;\n    }\n    param2 = ptr2 + 1;\n    ch = *ptr2;\n    index = FUN_00006010(\"efgEFG\",ch,6);\n    if (index == 0) {\n      temp = FUN_00005b34(data,&flags,param1,0x57d3,&ptrArr);\n      if (temp == -1) goto LAB_00005a06;\n    }\n    else {\n      ptrArr = (int *)(((int)ptrArr + 7U & 0xfffffff8) + 8);\n    }\n    totalLength = totalLength + temp;\n    ptr3 = param2;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "process_data_000057f8",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "iVar1": "index",
                "iVar2": "result",
                "piVar3": "ptr",
                "bVar4": "isNumber",
                "pbVar5": "ptr2",
                "unaff_r7": "temp",
                "pbVar6": "ptr3",
                "local_8c": "ptrArr",
                "local_88": "flags",
                "local_84": "value",
                "uStack_80": "tempVar",
                "local_7c": "num",
                "local_74": "totalLength",
                "local_70": "ch",
                "local_6f": "const1",
                "local_6e": "const2",
                "local_45": "const3",
                "local_30": "const4"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_00005b34",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_required_size_00005a58",
            "code": "\nundefined4\ncalculateRequiredSize_00005a58(undefined4 outputBuffer,uint *inputBuffer,uint *outputSize,undefined4 param4,code *callbackFunction)\n\n{\n  int i;\n  undefined4 returnValue;\n  int tempVar;\n  uint maxSize;\n  uint count;\n  bool flag;\n  \n  maxSize = inputBuffer[4];\n  if ((int)inputBuffer[4] < (int)inputBuffer[2]) {\n    maxSize = inputBuffer[2];\n  }\n  *outputSize = maxSize;\n  if (*(char *)((int)inputBuffer + 0x43) != '\\0') {\n    *outputSize = maxSize + 1;\n  }\n  if ((int)(*inputBuffer << 0x1a) < 0) {\n    *outputSize = *outputSize + 2;\n  }\n  if ((*inputBuffer & 6) == 0) {\n    for (i = 0; i < (int)(inputBuffer[3] - *outputSize); i = i + 1) {\n      tempVar = (*callbackFunction)(outputBuffer,param4,(int)inputBuffer + 0x19,1);\n      if (tempVar == -1) goto LAB_00005afc;\n    }\n  }\n  maxSize = (uint)*(byte *)((int)inputBuffer + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  if ((int)(*inputBuffer << 0x1a) < 0) {\n    *(undefined *)((int)inputBuffer + maxSize + 0x43) = 0x30;\n    *(undefined *)((int)inputBuffer + maxSize + 0x44) = *(undefined *)((int)inputBuffer + 0x45);\n    maxSize = maxSize + 2;\n  }\n  i = (*callbackFunction)(outputBuffer,param4,(int)inputBuffer + 0x43,maxSize);\n  if (i == -1) {\nLAB_00005afc:\n    returnValue = 0xffffffff;\n  }\n  else {\n    maxSize = inputBuffer[3];\n    flag = (*inputBuffer & 6) == 4;\n    if (flag) {\n      maxSize = maxSize - *outputSize;\n    }\n    if (flag) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    else {\n      maxSize = 0;\n    }\n    if ((int)inputBuffer[4] < (int)inputBuffer[2]) {\n      maxSize = maxSize + (inputBuffer[2] - inputBuffer[4]);\n    }\n    for (count = 0; maxSize != count; count = count + 1) {\n      i = (*callbackFunction)(outputBuffer,param4,(int)inputBuffer + 0x1a,1);\n      if (i == -1) goto LAB_00005afc;\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_required_size_00005a58",
                "param_1": "outputBuffer",
                "param_2": "inputBuffer",
                "param_3": "outputSize",
                "param_4": "param4",
                "param_5": "callbackFunction",
                "iVar1": "i",
                "uVar2": "returnValue",
                "iVar3": "tempVar",
                "uVar4": "maxSize",
                "uVar5": "count",
                "bVar6": "flag"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "process_format_specifier_00005b34",
            "code": "\ncode * processFormatSpecifier_00005b34(undefined4 formatString,uint *argList,undefined4 bufferSize,code *writeFunc,uint **argListPtr\n                   )\n\n{\n  bool isQuotientGreater;\n  byte specifier;\n  int writeResult;\n  code *returnAddress;\n  char *digitTable;\n  int writeResult;\n  char *bufferPtr;\n  uint quotient;\n  uint *argPtr;\n  uint base;\n  uint **argListPtrPtr;\n  char **stringPtrPtr;\n  uint width;\n  char *p;\n  code *localWriteFunc;\n  \n  specifier = *(byte *)(argList + 6);\n  bufferPtr = (char *)((int)argList + 0x43);\n  localWriteFunc = writeFunc;\n  if (0x78 < specifier) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)argList + 0x42) = specifier;\nLAB_00005bdc:\n    bufferPtr = (char *)((int)argList + 0x42);\n    quotient = 1;\nLAB_00005d28:\n    argList[4] = quotient;\n    *(undefined *)((int)argList + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (specifier < 99) {\n    if (specifier == 0) goto LAB_00005d06;\n    if (specifier == 0x58) {\n      digitTable = \"0123456789ABCDEF\";\n      *(undefined *)((int)argList + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(specifier) {\n  case 99:\n    quotient = **argListPtr;\n    *argListPtr = *argListPtr + 1;\n    *(char *)((int)argList + 0x42) = (char)quotient;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *argList;\n    argPtr = *argListPtr;\n    if ((int)(base << 0x18) < 0) {\n      quotient = *argPtr;\n      *argListPtr = argPtr + 1;\n    }\n    else {\n      quotient = *argPtr;\n      *argListPtr = argPtr + 1;\n      if ((base & 0x40) != 0) {\n        quotient = (uint)(short)quotient;\n      }\n    }\n    if ((int)quotient < 0) {\n      quotient = -quotient;\n      *(undefined *)((int)argList + 0x43) = 0x2d;\n    }\n    digitTable = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    argListPtrPtr = (uint **)*argListPtr;\n    base = *argList;\n    quotient = argList[5];\n    *argListPtr = (uint *)(argListPtrPtr + 1);\n    argPtr = *argListPtrPtr;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *argPtr = quotient;\n    }\n    else {\n      *(short *)argPtr = (short)quotient;\n    }\nLAB_00005d06:\n    argList[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    argPtr = *argListPtr;\n    quotient = *argList;\n    *argListPtr = argPtr + 1;\n    if (((int)(quotient << 0x18) < 0) || (-1 < (int)(quotient << 0x19))) {\n      quotient = *argPtr;\n    }\n    else {\n      quotient = (uint)*(ushort *)argPtr;\n    }\n    digitTable = \"0123456789ABCDEF\";\n    if (specifier == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *argList = *argList | 0x20;\n  case 0x78:\n    digitTable = \"0123456789abcdef\";\n    *(undefined *)((int)argList + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *argList;\n    quotient = **argListPtr;\n    *argListPtr = *argListPtr + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      quotient = quotient & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *argList = base | 0x20;\n    }\n    if (quotient == 0) {\n      *argList = *argList & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    stringPtrPtr = (char **)*argListPtr;\n    *argListPtr = (uint *)(stringPtrPtr + 1);\n    bufferPtr = *stringPtrPtr;\n    writeResult = FUN_00006010(bufferPtr,0,argList[1],stringPtrPtr,formatString,argList,bufferSize);\n    if (writeResult != 0) {\n      argList[1] = writeResult - (int)bufferPtr;\n    }\n    quotient = argList[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)argList + 0x43) = 0;\nLAB_00005c36:\n  width = argList[1];\n  argList[2] = width;\n  if (-1 < (int)width) {\n    *argList = *argList & 0xfffffffb;\n  }\n  p = bufferPtr;\n  if ((quotient != 0) || (width != 0)) {\n    do {\n      p = p + -1;\n      *p = digitTable[quotient - base * (quotient / base)];\n      isQuotientGreater = base <= quotient;\n      quotient = quotient / base;\n    } while (isQuotientGreater);\n  }\n  if (((base == 8) && ((int)(*argList << 0x1f) < 0)) && ((int)argList[1] <= (int)argList[4])) {\n    p[-1] = '0';\n    p = p + -1;\n  }\n  argList[4] = (int)bufferPtr - (int)p;\n  bufferPtr = p;\nLAB_00005c84:\n  writeResult = FUN_00005a58(formatString,argList,&localWriteFunc,bufferSize,writeFunc);\n  if ((writeResult == -1) || (writeResult = (*writeFunc)(formatString,bufferSize,bufferPtr,argList[4]), writeResult == -1)) {\nLAB_00005c98:\n    returnAddress = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*argList << 0x1e) < 0) {\n      for (writeResult = 0; writeResult < (int)(argList[3] - (int)localWriteFunc); writeResult = writeResult + 1) {\n        writeResult = (*writeFunc)(formatString,bufferSize,(int)argList + 0x19,1);\n        if (writeResult == -1) goto LAB_00005c98;\n      }\n    }\n    returnAddress = (code *)argList[3];\n    if ((int)(code *)argList[3] < (int)localWriteFunc) {\n      returnAddress = localWriteFunc;\n    }\n  }\n  return returnAddress;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "process_format_specifier_00005b34",
                "param_1": "formatString",
                "param_2": "argList",
                "param_3": "bufferSize",
                "param_4": "writeFunc",
                "param_5": "argListPtr",
                "bVar1": "isQuotientGreater",
                "bVar2": "specifier",
                "iVar3": "writeResult",
                "pcVar4": "returnAddress",
                "pcVar5": "digitTable",
                "iVar6": "writeResult",
                "pcVar7": "bufferPtr",
                "uVar8": "quotient",
                "puVar9": "argPtr",
                "uVar10": "base",
                "uVar13": "width",
                "pcVar14": "p",
                "local_24": "localWriteFunc",
                "ppuVar11": "argListPtrPtr",
                "ppcVar12": "stringPtrPtr"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005a58",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "process_data_00005e10",
            "code": "\nuint processData_00005e10(int data,byte **buffer)\n\n{\n  int result;\n  uint output;\n  byte *tempByte;\n  \n  if ((data != 0) && (*(int *)(data + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (buffer == (byte **)&DAT_000079b8) {\n    buffer = *(byte ***)(data + 4);\n  }\n  else if (buffer == (byte **)&DAT_000079d8) {\n    buffer = *(byte ***)(data + 8);\n  }\n  else if (buffer == (byte **)&DAT_00007998) {\n    buffer = *(byte ***)(data + 0xc);\n  }\n  result = FUN_00006768(data,buffer);\n  if (result == 0) {\n    buffer[1] = buffer[1] + -1;\n    tempByte = *buffer;\n    *buffer = tempByte + 1;\n    output = (uint)*tempByte;\n  }\n  else {\n    output = 0xffffffff;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "process_data_00005e10",
                "param_1": "data",
                "param_2": "buffer",
                "iVar1": "result",
                "uVar2": "output",
                "pbVar3": "tempByte"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "initialize_function_00005e68",
            "code": "\nvoid initializeFunction_00005e68(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  undefined4 outputVariable1;\n  undefined4 outputVariable2;\n  undefined2 constant1;\n  undefined2 constant2;\n  undefined4 copyOutput1;\n  undefined4 copyOutput2;\n  undefined *pointer1;\n  undefined4 counter1;\n  undefined4 counter2;\n  undefined4 copyInput3;\n  undefined4 copyInput4;\n  \n  constant1 = 0x204;\n  outputVariable1 = inputParam1;\n  copyOutput1 = inputParam1;\n  copyInput3 = inputParam3;\n  copyInput4 = inputParam4;\n  outputVariable2 = FUN_00005ecc();\n  pointer1 = &LAB_00004dea_1;\n  counter1 = 0;\n  counter2 = 0;\n  constant2 = 0xffff;\n  copyOutput2 = outputVariable2;\n  FUN_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&outputVariable1,inputParam2,&copyInput3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "initialize_function_00005e68",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "local_80": "outputVariable1",
                "local_7c": "outputVariable2",
                "local_74": "constant1",
                "local_72": "constant2",
                "local_70": "copyOutput1",
                "local_6c": "copyOutput2",
                "local_5c": "pointer1",
                "local_4c": "counter1",
                "local_38": "counter2",
                "uStack_8": "copyInput3",
                "uStack_4": "copyInput4"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_000061cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *destination,char *source)\n\n{\n  char currentCharacter;\n  \n  do {\n    currentCharacter = *source;\n    *destination = currentCharacter;\n    source = source + 1;\n    destination = destination + 1;\n  } while (currentCharacter != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentCharacter"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_end_of_string_00005ecc",
            "code": "\nchar * find_end_of_string_00005ecc(char *input_string)\n\n{\n  char current_character;\n  char *next_character_pointer;\n  char *current_character_pointer;\n  \n  current_character_pointer = input_string;\n  do {\n    next_character_pointer = current_character_pointer + 1;\n    current_character = *current_character_pointer;\n    current_character_pointer = next_character_pointer;\n  } while (current_character != '\\0');\n  return next_character_pointer + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_end_of_string_00005ecc",
                "param_1": "input_string",
                "cVar1": "current_character",
                "pcVar2": "next_character_pointer",
                "pcVar3": "current_character_pointer"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_number_00005edc",
            "code": "\nuint parseNumber_00005edc(undefined4 *output,byte *input,byte **next,uint base)\n\n{\n  uint result;\n  uint ch;\n  byte negative;\n  int isValid;\n  uint digit;\n  uint threshold;\n  byte *ptr;\n  byte *curr;\n  \n  curr = input;\n  do {\n    ptr = curr;\n    curr = ptr + 1;\n    ch = (uint)*ptr;\n    negative = (&DAT_00007a99)[ch] & 8;\n  } while (((&DAT_00007a99)[ch] & 8) != 0);\n  if (ch == 0x2d) {\n    ch = (uint)*curr;\n    negative = 1;\n    curr = ptr + 2;\n  }\n  else if (ch == 0x2b) {\n    ch = (uint)*curr;\n    curr = ptr + 2;\n  }\n  if (base == 0) {\n    if (ch != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (ch != 0x30)) goto LAB_00005f26;\n  if ((*curr & 0xdf) == 0x58) {\n    ch = (uint)curr[1];\n    base = 0x10;\n    curr = curr + 2;\n  }\n  else {\n    ch = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  isValid = 0;\n  threshold = 0xffffffff / base;\n  result = 0;\n  do {\n    digit = ch - 0x30;\n    if (9 < digit) {\n      if (ch - 0x41 < 0x1a) {\n        digit = ch - 0x37;\n      }\n      else {\n        if (0x19 < ch - 0x61) break;\n        digit = ch - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (((isValid < 0) || (threshold < result)) ||\n       ((threshold == result && ((int)~(base * threshold) < (int)digit)))) {\n      isValid = -1;\n    }\n    else {\n      result = result * base + digit;\n      isValid = 1;\n    }\n    ch = (uint)*curr;\n    curr = curr + 1;\n  } while( true );\n  if (isValid < 0) {\n    *output = 0x22;\n    result = 0xffffffff;\n    if (next == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (negative != 0) {\n      result = -result;\n    }\n    if (next == (byte **)0x0) {\n      return result;\n    }\n    if (isValid == 0) goto LAB_00005fb8;\n  }\n  input = curr + -1;\nLAB_00005fb8:\n  *next = input;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "param_1": "output",
                "param_2": "input",
                "param_3": "next",
                "param_4": "base",
                "uVar1": "result",
                "uVar2": "ch",
                "bVar3": "negative",
                "iVar4": "isValid",
                "uVar5": "digit",
                "uVar6": "threshold",
                "pbVar7": "ptr",
                "pbVar8": "curr"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "process_relocation_00005fd8",
            "code": "\nvoid process_relocation_00005fd8(undefined4 offset,undefined4 param_2,undefined4 param_3)\n\n{\n  FUN_00005edc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,offset,param_2,param_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "process_relocation_00005fd8",
                "param_1": "offset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_memory_00005fec",
            "code": "\nvoid initializeMemory_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_memory_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_memory_00005ff8",
            "code": "\nvoid initializeMemory_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_memory_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *input,uint byte_to_find,uint length)\n\n{\n  byte found_byte;\n  char is_byte0_zero;\n  char is_byte8_zero;\n  char is_byte16_zero;\n  char is_byte24_zero;\n  byte *result;\n  uint *next_input;\n  byte *result_offset;\n  uint input_offset;\n  uint length_aligned;\n  uint temp1;\n  uint temp2;\n  bool temp1_byte;\n  bool temp1_byte8;\n  bool temp1_byte16;\n  bool temp1_byte24;\n  \n  byte_to_find = byte_to_find & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      next_input = (uint *)((int)input + 1);\n      found_byte = *(byte *)input;\n      length = length - 1;\n      input = next_input;\n    } while (found_byte != byte_to_find);\n  }\n  else {\n    input_offset = (uint)input & 7;\n    while( true ) {\n      if (input_offset == 0) {\n        input_offset = byte_to_find | byte_to_find << 8;\n        input_offset = input_offset | input_offset << 0x10;\n        length_aligned = length & 0xfffffff8;\n        do {\n          next_input = input + 2;\n          length_aligned = length_aligned - 8;\n          temp1 = *input ^ input_offset;\n          temp2 = input[1] ^ input_offset;\n          is_byte0_zero = -((char)temp1 == '\\0');\n          is_byte8_zero = -((char)(temp1 >> 8) == '\\0');\n          is_byte16_zero = -((char)(temp1 >> 0x10) == '\\0');\n          is_byte24_zero = -((char)(temp1 >> 0x18) == '\\0');\n          temp1 = CONCAT13(is_byte24_zero,CONCAT12(is_byte16_zero,CONCAT11(is_byte8_zero,is_byte0_zero)));\n          temp1_byte = (char)temp2 != '\\0';\n          temp1_byte8 = (char)(temp2 >> 8) != '\\0';\n          temp1_byte16 = (char)(temp2 >> 0x10) != '\\0';\n          temp1_byte24 = (char)(temp2 >> 0x18) != '\\0';\n          temp2 = CONCAT13(temp1_byte24 * is_byte24_zero - !temp1_byte24,\n                            CONCAT12(temp1_byte16 * is_byte16_zero - !temp1_byte16,\n                                     CONCAT11(temp1_byte8 * is_byte8_zero - !temp1_byte8,temp1_byte * is_byte0_zero - !temp1_byte)));\n          if (temp2 != 0) {\n            if (temp1 == 0) {\n              result_offset = (byte *)((int)input + 5);\n              temp1 = temp2;\n            }\n            else {\n              result_offset = (byte *)((int)input + 1);\n            }\n            if ((temp1 & 1) == 0) {\n              temp1_byte = (temp1 & 0x100) == 0;\n              result = result_offset + 1;\n              if (temp1_byte) {\n                temp1_byte = (temp1 & 0x18000) == 0;\n                result = result_offset + 2;\n              }\n              result_offset = result;\n              if (temp1_byte) {\n                result_offset = result_offset + 1;\n              }\n            }\n            return result_offset + -1;\n          }\n          input = next_input;\n        } while (length_aligned != 0);\n        length = length & 7;\n        goto joined_r0x00006070;\n      }\n      next_input = (uint *)((int)input + 1);\n      length = length - 1;\n      if (*(byte *)input == byte_to_find) break;\n      input_offset = (uint)next_input & 7;\n      input = next_input;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)next_input + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "input",
                "param_2": "byte_to_find",
                "param_3": "length",
                "bVar1": "found_byte",
                "cVar2": "is_byte0_zero",
                "cVar3": "is_byte8_zero",
                "cVar4": "is_byte16_zero",
                "cVar5": "is_byte24_zero",
                "pbVar6": "result",
                "puVar7": "next_input",
                "pbVar8": "result_offset",
                "uVar9": "input_offset",
                "uVar10": "length_aligned",
                "uVar11": "temp1",
                "uVar12": "temp2",
                "bVar13": "temp1_byte",
                "bVar14": "temp1_byte8",
                "bVar15": "temp1_byte16",
                "bVar16": "temp1_byte24"
            },
            "calling": [
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_array_000060b0",
            "code": "\nvoid copyArray_000060b0(int destIndex,undefined *sourceArray,int size)\n\n{\n  undefined *sourcePtr;\n  undefined *endPtr;\n  undefined *destPtr;\n  \n  endPtr = sourceArray + size;\n  destPtr = (undefined *)(destIndex + -1);\n  if (sourceArray != endPtr) {\n    do {\n      sourcePtr = sourceArray + 1;\n      destPtr = destPtr + 1;\n      *destPtr = *sourceArray;\n      sourceArray = sourcePtr;\n    } while (sourcePtr != endPtr);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_array_000060b0",
                "param_1": "destIndex",
                "param_2": "sourceArray",
                "param_3": "size",
                "puVar1": "sourcePtr",
                "puVar2": "endPtr",
                "puVar3": "destPtr"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "process_data_000060cc",
            "code": "\nint processData_000060cc(undefined4 data,int size,uint threshold,undefined4 additionalParam)\n\n{\n  int result;\n  uint randomValue;\n  \n  if (size != 0) {\n    if (threshold == 0) {\n      FUN_00004b34();\n      result = 0;\n    }\n    else {\n      randomValue = FUN_00006964();\n      result = size;\n      if ((randomValue < threshold) && (result = FUN_00004bd0(data,threshold), result != 0)) {\n        FUN_000060b0(result,size,threshold);\n        FUN_00004b34(data,size);\n      }\n    }\n    return result;\n  }\n  result = FUN_00004bd0(data,threshold,threshold,additionalParam);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "process_data_000060cc",
                "param_1": "data",
                "param_2": "size",
                "param_3": "threshold",
                "param_4": "additionalParam",
                "iVar1": "result",
                "uVar2": "randomValue"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_00004b34",
                "FUN_00006964"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "update_data_00006192",
            "code": "\nundefined4 updateData_00006192(undefined4 result,undefined4 *data)\n\n{\n  if ((undefined4 *)pointer != (undefined4 *)0x0) {\n    if ((undefined4 *)pointer != data + 0x11) {\n      FUN_00004b34();\n    }\n    value = temp;\n    pointer = 0;\n    if (temp != 0) {\n      *data = firstValue;\n      return 0;\n    }\n  }\n  *data = defaultValue;\n  value = 0;\n  *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "update_data_00006192",
                "param_1": "result",
                "param_2": "data",
                "param_2[0xd]": "pointer",
                "param_2[1]": "value",
                "param_2[0x10]": "temp",
                "param_2[0xf]": "firstValue",
                "param_2[4]": "defaultValue"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "decode_data_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint decode_data_000061cc(undefined4 param1,byte **byte_array,byte *input_data,int **output_data)\n\n{\n  int result;\n  uint character;\n  byte *next_byte;\n  uint next_character;\n  int **output_data_ptr;\n  undefined stack_memory [256];\n  uint flags1;\n  undefined4 flags2;\n  uint temp_flags;\n  int decoded_count;\n  int temp_count;\n  undefined *local_memory;\n  int data_type;\n  undefined *function_ptr;\n  code *callback_function;\n  \n  decoded_count = 0;\n  temp_count = 0;\n  function_ptr = &LAB_00006118_1;\n  callback_function = FUN_00006192 + 1;\n  output_data_ptr = output_data;\n  local_memory = stack_memory;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      next_character = (uint)*input_data;\n      if (next_character == 0) {\n        return decoded_count;\n      }\n      character = (byte)(&DAT_00007a99)[next_character] & 8;\n      next_byte = input_data + 1;\n      if (((&DAT_00007a99)[next_character] & 8) == 0) break;\n      while (((input_data = next_byte, 0 < (int)byte_array[1] ||\n              (result = (*callback_function)(param1,byte_array), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**byte_array] << 0x1c) < 0))) {\n        temp_count = temp_count + 1;\n        byte_array[1] = byte_array[1] + -1;\n        *byte_array = *byte_array + 1;\n      }\n    }\n    if (next_character == 0x25) break;\nLAB_00006352:\n    if (((int)byte_array[1] < 1) && (result = (*callback_function)(param1,byte_array), result != 0))\n    goto LAB_00006380;\n    if (**byte_array != next_character) {\n      return decoded_count;\n    }\n    *byte_array = *byte_array + 1;\n    temp_count = temp_count + 1;\n    byte_array[1] = byte_array[1] + -1;\n    input_data = next_byte;\n  }\n  temp_flags = character;\n  flags1 = character;\n  if (input_data[1] == 0x2a) {\n    next_byte = input_data + 2;\n    flags1 = 0x10;\n  }\n  while( true ) {\n    character = (uint)*next_byte;\n    if (9 < character - 0x30) break;\n    next_byte = next_byte + 1;\n    temp_flags = (temp_flags * 10 + character) - 0x30;\n  }\n  result = FUN_00006010(&DAT_00007c02,character,3);\n  if (result != 0) {\n    flags1 = 1 << (result - 0x7c02U & 0xff) | flags1;\n    next_byte = next_byte + 1;\n  }\n  input_data = next_byte + 1;\n  character = (uint)*next_byte;\n  if (character < 0x79) {\n    if (0x57 < character) {\n      switch(character) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        input_data = (byte *)FUN_0000687c(stack_memory,input_data);\n        flags1 = flags1 | 0x40;\n        data_type = 1;\n        break;\n      case 99:\n        flags1 = flags1 | 0x40;\n        data_type = 0;\n        break;\n      case 100:\n      case 0x75:\n        flags2 = 10;\nLAB_000063a0:\n        if (character < 0x6f) {\n          data_type = 3;\n        }\n        else {\n          data_type = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        data_type = 5;\n        break;\n      case 0x69:\n        flags2 = 0;\n        data_type = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flags1 << 0x1b)) {\n          if ((int)(flags1 << 0x1f) < 0) {\n            *(short *)*output_data_ptr = (short)temp_count;\n            output_data_ptr = output_data_ptr + 1;\n          }\n          else {\n            **output_data_ptr = temp_count;\n            output_data_ptr = output_data_ptr + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        flags2 = 8;\n        data_type = 4;\n        break;\n      case 0x70:\n        flags1 = flags1 | 0x20;\n      case 0x58:\n      case 0x78:\n        flags1 = flags1 | 0x200;\n        flags2 = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        data_type = 2;\n      }\nLAB_000063ac:\n      if (((int)byte_array[1] < 1) && (result = (*callback_function)(param1,byte_array), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flags1 << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**byte_array] << 0x1c) < 0) {\n          temp_count = temp_count + 1;\n          next_byte = byte_array[1];\n          byte_array[1] = next_byte + -1;\n          if ((int)(next_byte + -1) < 1) {\n            result = (*callback_function)(param1,byte_array);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *byte_array = *byte_array + 1;\n          }\n        }\n      }\n      if (data_type < 3) {\n        result = FUN_000064bc(param1,&flags1,byte_array,&output_data_ptr);\n      }\n      else {\n        if (4 < data_type) goto LAB_000061f6;\n        result = FUN_0000656c(param1,&flags1,byte_array,&output_data_ptr);\n      }\n      if (result == 1) {\n        return decoded_count;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (decoded_count == 0) {\nLAB_00006388:\n          decoded_count = -1;\n        }\n        else if ((*(ushort *)(byte_array + 3) & 0x40) != 0) {\n          decoded_count = -1;\n        }\n        return decoded_count;\n      }\n      goto LAB_000061f6;\n    }\n    next_byte = input_data;\n    if (character == 0x25) goto LAB_00006352;\n    if (character < 0x26) {\n      if (character != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (character - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  data_type = 3;\n  flags2 = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "decode_data_000061cc",
                "param_1": "param1",
                "param_2": "byte_array",
                "param_3": "input_data",
                "param_4": "output_data",
                "iVar1": "result",
                "uVar2": "character",
                "pbVar3": "next_byte",
                "uVar4": "next_character",
                "local_2b0": "output_data_ptr",
                "auStack_2ac": "stack_memory",
                "local_1ac": "flags1",
                "local_1a8": "flags2",
                "local_1a4": "temp_flags",
                "local_1a0": "decoded_count",
                "local_19c": "temp_count",
                "local_198": "local_memory",
                "local_194": "data_type",
                "local_30": "function_ptr",
                "local_2c": "callback_function"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_000064bc",
                "FUN_0000656c",
                "FUN_00006192",
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 input,uint *data_params,byte **data_ptr,undefined4 *output_ptr)\n\n{\n  int result;\n  uint temp_var;\n  byte **ptr_to_data_ptr;\n  byte *ptr_to_byte;\n  byte *data_byte_ptr;\n  byte *byte_ptr;\n  int counter;\n  \n  if (data_params[2] == 0) {\n    if (data_params[6] == 0) {\n      temp_var = 1;\n    }\n    else {\n      temp_var = 0xffffffff;\n    }\n    data_params[2] = temp_var;\n  }\n  if (-1 < (int)(*data_params << 0x1b)) {\n    ptr_to_data_ptr = (byte **)*output_ptr;\n    *output_ptr = ptr_to_data_ptr + 1;\n    data_byte_ptr = *ptr_to_data_ptr;\n  }\n  counter = 0;\n  do {\n    temp_var = data_params[6];\n    if (temp_var != 0) {\n      if (temp_var == 1) {\n        if (*(char *)(data_params[5] + (uint)**data_ptr) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*data_params & 0x10) == 0) && (data_params[3] = data_params[3] + 1, data_params[6] != 0)) {\n            *data_byte_ptr = 0;\n          }\n          data_params[4] = counter + data_params[4];\n          return 0;\n        }\n      }\n      else if ((temp_var != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**data_ptr] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    byte_ptr = data_byte_ptr;\n    if (-1 < (int)(*data_params << 0x1b)) {\n      byte_ptr = data_byte_ptr + 1;\n      *data_byte_ptr = **data_ptr;\n    }\n    ptr_to_byte = data_ptr[1];\n    *data_ptr = *data_ptr + 1;\n    temp_var = data_params[2] - 1;\n    data_ptr[1] = ptr_to_byte + -1;\n    counter = counter + 1;\n    data_params[2] = temp_var;\n    data_byte_ptr = byte_ptr;\n    if ((temp_var == 0) ||\n       (((int)(ptr_to_byte + -1) < 1 &&\n        (result = (*(code *)data_params[0x60])(input,data_ptr,temp_var,(code *)data_params[0x60],output_ptr),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input",
                "param_2": "data_params",
                "param_3": "data_ptr",
                "param_4": "output_ptr",
                "iVar1": "result",
                "uVar2": "temp_var",
                "ppbVar3": "ptr_to_data_ptr",
                "pbVar4": "ptr_to_byte",
                "unaff_r6": "data_byte_ptr",
                "pbVar5": "byte_ptr",
                "iVar6": "counter"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "process_data_0000656c",
            "code": "\nundefined4 processData_0000656c(undefined4 input,uint *flags,byte **data,undefined4 *output)\n\n{\n  int result;\n  undefined4 processedData;\n  code *processFunction;\n  uint dataLength;\n  byte *currentByte;\n  uint originalDataLength;\n  undefined4 *outputData;\n  uint *nextDataIndex;\n  uint *nextOutputIndex;\n  uint *flagsPointer;\n  int count;\n  int loopIndex;\n  undefined *constants [4];\n  \n  constants[0] = &DAT_00007c2f;\n  constants[1] = &DAT_00007c32;\n  constants[2] = &DAT_00007c35;\n  processFunction = (code *)&UNK_00004f81;\n  if (flags[6] != 3) {\n    processFunction = (code *)&UNK_00005fd5;\n  }\n  originalDataLength = flags[2];\n  dataLength = originalDataLength - 1;\n  if (0x15c < dataLength) {\n    count = originalDataLength - 0x15d;\n    originalDataLength = 0x15d;\n  }\n  if (0x15c < dataLength) {\n    flags[2] = originalDataLength;\n  }\n  flagsPointer = flags + 7;\n  if (dataLength < 0x15d) {\n    count = 0;\n  }\n  *flags = *flags | 0xd00;\n  loopIndex = 0;\n  nextOutputIndex = flagsPointer;\n  do {\n    result = FUN_00006010(constants[loopIndex],**data,2);\n    if (result != 0) {\n      if (loopIndex == 1) {\n        if (flags[1] == 0) {\n          flags[1] = 8;\n          *flags = *flags | 0x200;\n        }\n        dataLength = *flags & 0xfffffaff;\nLAB_000065f4:\n        *flags = dataLength;\n      }\n      else if (loopIndex == 2) {\n        if ((*flags & 0x600) != 0x200) goto LAB_00006624;\n        flags[1] = 0x10;\n        dataLength = *flags | 0x100;\n        goto LAB_000065f4;\n      }\n      dataLength = flags[2];\n      flags[2] = dataLength - 1;\n      if (dataLength != 0) {\n        currentByte = *data;\n        *data = currentByte + 1;\n        nextDataIndex = (uint *)((int)nextOutputIndex + 1);\n        *(byte *)nextOutputIndex = *currentByte;\n        currentByte = data[1];\n        data[1] = currentByte + -1;\n        nextOutputIndex = nextDataIndex;\n        if (((int)(currentByte + -1) < 1) &&\n           (result = (*(code *)flags[0x60])(input,data), result != 0)) {\n          loopIndex = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    loopIndex = loopIndex + 1;\n  } while (loopIndex != 3);\n  if (flags[1] == 0) {\n    flags[1] = 10;\n  }\n  FUN_0000687c(flags[5],\"01234567]\" + (8 - flags[1]));\n  loopIndex = 0;\n  while( true ) {\n    nextDataIndex = nextOutputIndex;\n    if (flags[2] == 0) break;\n    currentByte = *data;\n    dataLength = (uint)*currentByte;\n    if (*(char *)(flags[5] + dataLength) == '\\0') break;\n    if ((dataLength == 0x30) && ((int)(*flags << 0x14) < 0)) {\n      loopIndex = loopIndex + 1;\n      if (count != 0) {\n        count = count + -1;\n        flags[2] = flags[2] + 1;\n      }\n    }\n    else {\n      *flags = *flags & 0xfffff6ff;\n      nextDataIndex = (uint *)((int)nextOutputIndex + 1);\n      *(byte *)nextOutputIndex = *currentByte;\n    }\n    currentByte = data[1];\n    data[1] = currentByte + -1;\n    if ((int)(currentByte + -1) < 1) {\n      result = (*(code *)flags[0x60])(input,data);\n      if (result != 0) break;\n    }\n    else {\n      *data = *data + 1;\n    }\n    flags[2] = flags[2] - 1;\n    nextOutputIndex = nextDataIndex;\n  }\nLAB_000066ca:\n  if ((int)(*flags << 0x17) < 0) {\n    if (flagsPointer < nextDataIndex) {\n      (*(code *)flags[0x5f])(input,*(byte *)((int)nextDataIndex + -1),data);\n      nextDataIndex = (uint *)((int)nextDataIndex + -1);\n    }\n    if (nextDataIndex == flagsPointer) {\n      return 1;\n    }\n  }\n  if ((*flags & 0x10) == 0) {\n    *(byte *)nextDataIndex = 0;\n    processedData = (*processFunction)(input,flagsPointer,0,flags[1]);\n    outputData = (undefined4 *)*output;\n    dataLength = *flags;\n    *output = outputData + 1;\n    outputData = (undefined4 *)*outputData;\n    if ((dataLength & 0x20) == 0) {\n      if ((int)(dataLength << 0x1f) < 0) {\n        *(short *)outputData = (short)processedData;\n      }\n      else {\n        *outputData = processedData;\n      }\n    }\n    else {\n      *outputData = processedData;\n    }\n    flags[3] = flags[3] + 1;\n  }\n  flags[4] = (uint)((int)nextDataIndex + flags[4] + (loopIndex - (int)flagsPointer));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "process_data_0000656c",
                "param_1": "input",
                "param_2": "flags",
                "param_3": "data",
                "param_4": "output",
                "iVar1": "result",
                "uVar2": "processedData",
                "pcVar3": "processFunction",
                "uVar4": "dataLength",
                "pbVar5": "currentByte",
                "uVar6": "originalDataLength",
                "puVar7": "outputData",
                "puVar8": "nextDataIndex",
                "puVar9": "nextOutputIndex",
                "puVar10": "flagsPointer",
                "unaff_r9": "count",
                "iVar11": "loopIndex",
                "local_34": "constants"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *data1,undefined4 *data2,undefined4 value1,undefined4 value2)\n\n{\n  undefined2 var1;\n  int var2;\n  undefined4 var3;\n  ushort var4;\n  uint var5;\n  \n  if ((data1 != (undefined4 *)0x0) && (data1[6] == 0)) {\n    FUN_000042a4();\n  }\n  if (data2 == &DAT_000079b8) {\n    data2 = (undefined4 *)data1[1];\n  }\n  else if (data2 == (undefined4 *)&DAT_000079d8) {\n    data2 = (undefined4 *)data1[2];\n  }\n  else if (data2 == (undefined4 *)&DAT_00007998) {\n    data2 = (undefined4 *)data1[3];\n  }\n  var4 = *(ushort *)(data2 + 3);\n  data2[1] = 0;\n  var5 = (uint)*(ushort *)(data2 + 3);\n  if ((int)(var5 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(var5 << 0x1d) < 0) {\n    if ((undefined4 *)data2[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)data2[0xd] != data2 + 0x11) {\n        FUN_00004b34(data1);\n      }\n      data2[1] = data2[0x10];\n      data2[0xd] = 0;\n      if (data2[0x10] != 0) {\n        *data2 = data2[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(var5 << 0x1b)) {\n      *data1 = 9;\n      var4 = var4 | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(var5 << 0x1c) < 0) {\n      var2 = FUN_00004158(data1,data2,var5 << 0x1c,var5,value2);\n      if (var2 != 0) {\n        return 0xffffffff;\n      }\n      data2[2] = 0;\n      *(ushort *)(data2 + 3) = *(ushort *)(data2 + 3) & 0xfff7;\n      data2[6] = 0;\n    }\n    *(ushort *)(data2 + 3) = *(ushort *)(data2 + 3) | 4;\n  }\n  if (data2[4] == 0) {\n    FUN_00005700(data1,data2);\n  }\n  var4 = *(ushort *)(data2 + 3);\n  var1 = *(undefined2 *)(data2 + 3);\n  if ((var4 & 3) != 0) {\n    *(undefined2 *)(data2 + 3) = 1;\n    FUN_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(data2 + 3) = var1;\n    if ((var4 & 9) == 9) {\n      FUN_0000404c(data1,data2);\n    }\n  }\n  var3 = data2[4];\n  *data2 = var3;\n  var2 = (*(code *)data2[9])(data1,data2[8],var3,data2[5]);\n  data2[1] = var2;\n  if (0 < var2) {\n    return 0;\n  }\n  var4 = *(ushort *)(data2 + 3);\n  if (var2 != 0) {\n    var3 = 0;\n  }\n  else {\n    var4 = var4 | 0x20;\n  }\n  if (var2 != 0) {\n    data2[1] = var3;\n    var4 = var4 | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(data2 + 3) = var4;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "var1",
                "iVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_00005700",
                "FUN_000043a0",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "extract_bits_from_array_0000687c",
            "code": "\nbyte * extract_bits_from_array_0000687c(int array_length,byte *data_array)\n\n{\n  byte *result;\n  uint temp_var;\n  int index;\n  uint first_byte;\n  uint temp_byte;\n  uint start_byte;\n  bool is_equal;\n  \n  first_byte = (uint)*data_array;\n  is_equal = first_byte == 0x5e;\n  if (is_equal) {\n    first_byte = (uint)data_array[1];\n    data_array = data_array + 2;\n  }\n  else {\n    data_array = data_array + 1;\n  }\n  index = array_length + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = is_equal;\n  } while (index != array_length + 0xff);\n  if (first_byte == 0) {\n    result = data_array + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      temp_byte = first_byte;\n      *(bool *)(array_length + temp_byte) = !is_equal;\n      data_array = data_array + 1;\n      while( true ) {\n        first_byte = (uint)data_array[-1];\n        if (first_byte != 0x2d) break;\n        start_byte = (uint)*data_array;\n        if ((start_byte == 0x5d) || (temp_var = temp_byte, (int)start_byte < (int)temp_byte)) goto LAB_000068aa;\n        do {\n          temp_var = temp_var + 1;\n          *(bool *)(array_length + temp_var) = !is_equal;\n        } while ((int)temp_var < (int)start_byte);\n        index = ~temp_byte + start_byte;\n        if ((int)start_byte <= (int)temp_byte) {\n          index = 0;\n        }\n        temp_byte = temp_byte + 1 + index;\n        data_array = data_array + 2;\n      }\n      result = data_array;\n    } while ((first_byte != 0x5d) && (result = data_array + -1, first_byte != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "extract_bits_from_array_0000687c",
                "param_1": "array_length",
                "param_2": "data_array",
                "pbVar1": "result",
                "uVar2": "temp_var",
                "iVar3": "index",
                "uVar4": "first_byte",
                "uVar5": "temp_byte",
                "uVar6": "start_byte",
                "bVar7": "is_equal"
            },
            "calling": [
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "initialize_memory_000068f0",
            "code": "\nundefined4 initializeMemory_000068f0(undefined4 initialValue,int *memoryBlock)\n\n{\n  int allocatedMemory;\n  int currentSize;\n  \n  if ((int *)memoryBlock[0xd] == memoryBlock + 0x11) {\n    allocatedMemory = FUN_00004bd0(initialValue,0x400);\n    if (allocatedMemory != 0) {\n      memoryBlock[0xe] = 0x400;\n      memoryBlock[0xd] = allocatedMemory;\n      *(undefined *)(allocatedMemory + 0x3ff) = *(undefined *)((int)memoryBlock + 0x46);\n      *(undefined *)(allocatedMemory + 0x3fe) = *(undefined *)((int)memoryBlock + 0x45);\n      *(undefined *)(allocatedMemory + 0x3fd) = *(undefined *)(memoryBlock + 0x11);\n      *memoryBlock = allocatedMemory + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    currentSize = memoryBlock[0xe];\n    allocatedMemory = FUN_000060cc(initialValue,(int *)memoryBlock[0xd],currentSize << 1);\n    if (allocatedMemory != 0) {\n      FUN_000060b0(allocatedMemory + currentSize,allocatedMemory,currentSize);\n      memoryBlock[0xd] = allocatedMemory;\n      memoryBlock[0xe] = currentSize << 1;\n      *memoryBlock = allocatedMemory + currentSize;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "initialize_memory_000068f0",
                "param_1": "initialValue",
                "param_2": "memoryBlock",
                "iVar1": "allocatedMemory",
                "iVar2": "currentSize"
            },
            "calling": [],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_000060cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_sum_00006964",
            "code": "\nint calculateSum_00006964(undefined4 initialValue,int arrayAddress)\n\n{\n  int sum;\n  \n  sum = *(int *)(arrayAddress + -4) + -4;\n  if (*(int *)(arrayAddress + -4) < 0) {\n    sum = sum + *(int *)(arrayAddress + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_sum_00006964",
                "param_1": "initialValue",
                "param_2": "arrayAddress",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "extract_integer_range_00006974",
            "code": "\nundefined8 extract_integer_range_00006974(int start,int end,int min_val,int max_val)\n\n{\n  int positive_range;\n  undefined8 result;\n  undefined concatenated_result [8];\n  \n  if ((max_val == 0) && (min_val == 0)) {\n    if (end < 0) {\n      start = 0;\n      end = -0x80000000;\n    }\n    else if (end != 0 || start != 0) {\n      end = 0x7fffffff;\n      start = -1;\n    }\n    return CONCAT44(end,start);\n  }\n  if (end < 0) {\n    positive_range = -end - (uint)(start != 0);\n    if (max_val < 0) {\n      result = FUN_00006a14(-start,positive_range,-min_val,-max_val - (uint)(min_val != 0),concatenated_result);\n      return result;\n    }\n    result = FUN_00006a14(-start,positive_range,min_val,max_val,concatenated_result);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (max_val < 0) {\n    result = FUN_00006a14(start,end,-min_val,-max_val - (uint)(min_val != 0),concatenated_result);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = FUN_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "extract_integer_range_00006974",
                "param_1": "start",
                "param_2": "end",
                "param_3": "min_val",
                "param_4": "max_val",
                "iVar1": "positive_range",
                "uVar2": "result",
                "local_8": "concatenated_result"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "divide_and_remainder_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong divideAndRemainder_00006a14(uint dividend,uint dividendHigh,uint divisor,uint divisorHigh,uint *remainder)\n\n{\n  code *jumpTable;\n  uint quotient;\n  int shift;\n  uint dividendLow;\n  uint quotientHigh;\n  uint temp1;\n  uint temp2;\n  uint divisorLow;\n  uint temp3;\n  uint temp4;\n  bool carry;\n  ulonglong result;\n  \n  if (divisorHigh == 0) {\n    if (dividendHigh < divisor) {\n      shift = LZCOUNT(divisor);\n      temp1 = divisor;\n      if (shift != 0) {\n        temp1 = divisor << shift;\n        dividendHigh = dividend >> (0x20U - shift & 0xff) | dividendHigh << shift;\n        dividend = dividend << shift;\n      }\n      temp2 = temp1 >> 0x10;\n      temp3 = dividendHigh / temp2;\n      dividendLow = dividend >> 0x10 | (dividendHigh - temp2 * temp3) * 0x10000;\n      quotient = temp3 * (temp1 & 0xffff);\n      quotientHigh = temp3;\n      if (dividendLow <= quotient && quotient - dividendLow != 0) {\n        carry = CARRY4(temp1,dividendLow);\n        dividendLow = temp1 + dividendLow;\n        quotientHigh = temp3 - 1;\n        if ((carry == false) && (dividendLow <= quotient && quotient - dividendLow != 0)) {\n          quotientHigh = temp3 - 2;\n          dividendLow = dividendLow + temp1;\n        }\n      }\n      temp3 = (dividendLow - quotient) / temp2;\n      temp2 = dividend & 0xffff | ((dividendLow - quotient) - temp2 * temp3) * 0x10000;\n      dividendLow = temp3 * (temp1 & 0xffff);\n      quotient = temp3;\n      if (temp2 <= dividendLow && dividendLow - temp2 != 0) {\n        carry = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient = temp3 - 1;\n        if ((carry == false) && (temp2 <= dividendLow && dividendLow - temp2 != 0)) {\n          quotient = temp3 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp2 = temp2 - dividendLow;\n      quotient = quotient | quotientHigh << 0x10;\n      temp1 = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jumpTable = (code *)software_udf(0xff,0x6abc);\n        result = (*jumpTable)();\n        return result;\n      }\n      shift = LZCOUNT(divisor);\n      if (shift == 0) {\n        dividendHigh = dividendHigh - divisor;\n        temp4 = divisor >> 0x10;\n        divisorLow = divisor & 0xffff;\n        temp1 = 1;\n        quotientHigh = divisor;\n      }\n      else {\n        quotientHigh = divisor << shift;\n        temp4 = quotientHigh >> 0x10;\n        quotient = dividendHigh >> (0x20U - shift & 0xff);\n        temp1 = dividend >> (0x20U - shift & 0xff) | dividendHigh << shift;\n        dividendLow = quotient / temp4;\n        divisorLow = quotientHigh & 0xffff;\n        temp3 = temp1 >> 0x10 | (quotient - temp4 * dividendLow) * 0x10000;\n        temp2 = dividendLow * divisorLow;\n        dividend = dividend << shift;\n        quotient = dividendLow;\n        if (temp3 <= temp2 && temp2 - temp3 != 0) {\n          carry = CARRY4(quotientHigh,temp3);\n          temp3 = quotientHigh + temp3;\n          quotient = dividendLow - 1;\n          if ((carry == false) && (temp3 <= temp2 && temp2 - temp3 != 0)) {\n            quotient = dividendLow - 2;\n            temp3 = temp3 + quotientHigh;\n          }\n        }\n        dividendLow = (temp3 - temp2) / temp4;\n        dividendHigh = temp1 & 0xffff | ((temp3 - temp2) - temp4 * dividendLow) * 0x10000;\n        temp2 = dividendLow * divisorLow;\n        temp1 = dividendLow;\n        if (dividendHigh <= temp2 && temp2 - dividendHigh != 0) {\n          carry = CARRY4(quotientHigh,dividendHigh);\n          dividendHigh = quotientHigh + dividendHigh;\n          temp1 = dividendLow - 1;\n          if ((carry == false) && (dividendHigh <= temp2 && temp2 - dividendHigh != 0)) {\n            temp1 = dividendLow - 2;\n            dividendHigh = dividendHigh + quotientHigh;\n          }\n        }\n        dividendHigh = dividendHigh - temp2;\n        temp1 = temp1 | quotient << 0x10;\n      }\n      temp3 = dividendHigh / temp4;\n      temp2 = dividend >> 0x10 | (dividendHigh - temp4 * temp3) * 0x10000;\n      quotient = divisorLow * temp3;\n      dividendLow = temp3;\n      if (temp2 <= quotient && quotient - temp2 != 0) {\n        carry = CARRY4(quotientHigh,temp2);\n        temp2 = quotientHigh + temp2;\n        dividendLow = temp3 - 1;\n        if ((carry == false) && (temp2 <= quotient && quotient - temp2 != 0)) {\n          dividendLow = temp3 - 2;\n          temp2 = temp2 + quotientHigh;\n        }\n      }\n      temp3 = (temp2 - quotient) / temp4;\n      temp2 = dividend & 0xffff | ((temp2 - quotient) - temp4 * temp3) * 0x10000;\n      divisorLow = divisorLow * temp3;\n      quotient = temp3;\n      if (temp2 <= divisorLow && divisorLow - temp2 != 0) {\n        carry = CARRY4(quotientHigh,temp2);\n        temp2 = quotientHigh + temp2;\n        quotient = temp3 - 1;\n        if ((carry == false) && (temp2 <= divisorLow && divisorLow - temp2 != 0)) {\n          quotient = temp3 - 2;\n          temp2 = temp2 + quotientHigh;\n        }\n      }\n      temp2 = temp2 - divisorLow;\n      quotient = quotient | dividendLow << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp2 >> LZCOUNT(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else if (dividendHigh < divisorHigh) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividendHigh;\n      return 0;\n    }\n    quotient = 0;\n    temp1 = 0;\n  }\n  else {\n    shift = LZCOUNT(divisorHigh);\n    if (shift != 0) {\n      divisorLow = 0x20 - shift;\n      dividendLow = divisor >> (divisorLow & 0xff) | divisorHigh << shift;\n      temp4 = dividendLow >> 0x10;\n      quotient = dividendHigh >> (divisorLow & 0xff);\n      temp1 = dividend >> (divisorLow & 0xff) | dividendHigh << shift;\n      temp2 = quotient / temp4;\n      quotientHigh = temp1 >> 0x10 | (quotient - temp4 * temp2) * 0x10000;\n      temp3 = temp2 * (dividendLow & 0xffff);\n      dividend = dividend << shift;\n      quotient = temp2;\n      if (quotientHigh <= temp3 && temp3 - quotientHigh != 0) {\n        carry = CARRY4(dividendLow,quotientHigh);\n        quotientHigh = dividendLow + quotientHigh;\n        quotient = temp2 - 1;\n        if ((carry == false) && (quotientHigh <= temp3 && temp3 - quotientHigh != 0)) {\n          quotient = temp2 - 2;\n          quotientHigh = quotientHigh + dividendLow;\n        }\n      }\n      temp2 = (quotientHigh - temp3) / temp4;\n      quotientHigh = temp1 & 0xffff | ((quotientHigh - temp3) - temp4 * temp2) * 0x10000;\n      temp3 = temp2 * (dividendLow & 0xffff);\n      temp1 = temp2;\n      if (quotientHigh <= temp3 && temp3 - quotientHigh != 0) {\n        carry = CARRY4(dividendLow,quotientHigh);\n        quotientHigh = dividendLow + quotientHigh;\n        temp1 = temp2 - 1;\n        if ((carry == false) && (quotientHigh <= temp3 && temp3 - quotientHigh != 0)) {\n          temp1 = temp2 - 2;\n          quotientHigh = quotientHigh + dividendLow;\n        }\n      }\n      temp1 = temp1 | quotient << 0x10;\n      result = (ulonglong)temp1 * (ulonglong)(divisor << shift);\n      if (CONCAT44(quotientHigh - temp3,dividend) < result) {\n        result = result - CONCAT44(dividendLow,divisor << shift);\n        temp1 = temp1 - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        quotient = ((quotientHigh - temp3) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = quotient << (divisorLow & 0xff) | dividend - (uint)result >> shift;\n        remainder[1] = quotient >> shift;\n      }\n      return (ulonglong)temp1;\n    }\n    if ((divisorHigh < dividendHigh) || (divisor <= dividend)) {\n      carry = dividend < divisor;\n      dividend = dividend - divisor;\n      dividendHigh = (dividendHigh - divisorHigh) - (uint)carry;\n      quotient = 1;\n    }\n    else {\n      quotient = 0;\n    }\n    temp1 = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividendHigh;\n    }\n  }\n  return CONCAT44(temp1,quotient);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "divide_and_remainder_00006a14",
                "param_1": "dividend",
                "param_2": "dividendHigh",
                "param_3": "divisor",
                "param_4": "divisorHigh",
                "param_5": "remainder",
                "uVar1": "quotient",
                "iVar2": "shift",
                "uVar3": "dividendLow",
                "uVar4": "quotientHigh",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "divisorLow",
                "uVar8": "temp3",
                "uVar9": "temp4",
                "uVar11": "result",
                "bVar10": "carry",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 133954,
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d76",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001392",
            "FUN_000013b8",
            "FUN_00001448",
            "FUN_000014c4",
            "FUN_000015d0",
            "FUN_00001628",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_00002028",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_0000258c",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ]
    ],
    "locked_functions": []
}