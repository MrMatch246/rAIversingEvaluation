{
    "functions": {
        "FUN_000026c0": {
            "renaming": {
                "FUN_000026c0": "clear_data_000026c0",
                "FUN_00002910": "initialize_data"
            },
            "code": "void clear_data_000026c0(void)\n{\n  initialize_data();\n  *(undefined4 *)PTR_DAT_000026d4 = 0;\n  return;\n}",
            "called": [
                "FUN_00002910"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000026c0",
            "calling": [
                "FUN_00003524"
            ],
            "imported": true,
            "current_name": "clear_data_000026c0"
        },
        "FUN_00004bd0": {
            "renaming": {
                "iVar4": "block_difference",
                "puVar3": "previous_block",
                "FUN_00004bd0": "allocate_memory_block_00004bd0",
                "param_1": "block_address",
                "puVar6": "current_block",
                "param_2": "block_size",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "uninitialized_memory_pointer",
                "uVar2": "result",
                "uVar5": "block_difference",
                "uVar7": "aligned_block_size"
            },
            "code": "uint allocate_memory_block_00004bd0(undefined4 *block_address, uint block_size, undefined4 param_3, undefined4 param_4) {\n  uint aligned_block_size = (block_size + 3 & 0xfffffffc) + 8;\n  if (aligned_block_size < 0xc) {\n    aligned_block_size = 0xc;\n  }\n  if (((int)aligned_block_size < 0) || (aligned_block_size < block_size)) {\n    *block_address = 0xc;\n  }\n  else {\n    initialize_memory_pool();\n    uint *current_block = *(uint **)MEMORY_POOL_START_ADDRESS;\n    uint *previous_block = *(uint **)MEMORY_POOL_START_ADDRESS;\n    while (current_block != (uint *)0x0) {\n      uint block_difference = *current_block - aligned_block_size;\n      if (-1 < (int)block_difference) {\n        if (0xb < block_difference) {\n          *current_block = block_difference;\n          current_block = (uint *)((int)current_block + block_difference);\n          goto LAB_00004c34;\n        }\n        uint next_block = current_block[1];\n        if (previous_block == current_block) {\n          *(uint **)MEMORY_POOL_START_ADDRESS = (uint *)next_block;\n        }\n        if (previous_block != current_block) {\n          previous_block[1] = next_block;\n        }\n        goto LAB_00004c42;\n      }\n      previous_block = current_block;\n      current_block = (uint *)current_block[1];\n    }\n    if (*(int *)MEMORY_POOL_START_ADDRESS == 0) {\n      uint result = allocate_memory(block_address, 0, previous_block, 0, param_4);\n      *(undefined4 *)MEMORY_POOL_CURRENT_ADDRESS = result;\n    }\n    uint *allocated_block = (uint *)allocate_memory(block_address, aligned_block_size);\n    if ((allocated_block != (uint *)0xffffffff) && ((current_block = (uint *)((int)allocated_block + 3U & 0xfffffffc)), allocated_block == current_block || (block_difference = allocate_memory(block_address, (int)current_block - (int)allocated_block), block_difference != -1))) {\n      *current_block = aligned_block_size;\nLAB_00004c42:\n      finalize_memory_pool();\n      uint block_end = (int)current_block + 0xbU & 0xfffffff8;\n      int block_difference = block_end - (int)(current_block + 1);\n      if (block_difference == 0) {\n        return block_end;\n      }\n      *(uint *)((int)current_block + block_difference) = (int)(current_block + 1) - block_end;\n      return block_end;\n    }\n    *block_address = 0xc;\n    finalize_memory_pool();\n  }\n  return 0;\n}",
            "called": [
                "FUN_0000579c",
                "FUN_00005790",
                "FUN_00000428"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004bd0",
            "calling": [
                "FUN_00004248",
                "FUN_000068f0",
                "FUN_00005700",
                "FUN_00005100",
                "FUN_000060cc"
            ],
            "imported": true,
            "current_name": "allocate_memory_block_00004bd0"
        },
        "FUN_00000794": {
            "renaming": {
                "piStack_14": "pi_stack_14",
                "iVar1": "i_var",
                "iStack_1c": "i_stack_1c",
                "DAT_000008b4": "data_array[0]",
                "puVar2": "ptr2",
                "FUN_00000930": "initialize_third_function",
                "FUN_00000698": "initialize_another_function",
                "FUN_00000794": "initialize_array_00000794",
                "FUN_00000cd0": "initialize_some_function",
                "piRam000007d4": "pi_ram_base_address",
                "iRam000007d0": "i_ram_base_address",
                "iStack_18": "i_stack_18",
                "puRam000007d8": "pu_ram_base_address",
                "uVar3": "u_var",
                "extraout_r1": "extra_out",
                "psRam000007cc": "ps_ram_base_address"
            },
            "code": "int * initialize_array_00000794(void)\n{\n  int extra_out;\n  int i_var;\n  undefined4 *ptr2;\n  uint u_var;\n  int i_stack_1c;\n  int i_stack_18;\n  int *pi_stack_14;\n  \n  initialize_some_function();\n  *(undefined4 *)(i_ram_base_address + *ps_ram_base_address * 4) = 0;\n  *pi_ram_base_address = *pi_ram_base_address - 1;\n  initialize_another_function(*pu_ram_base_address, 0);\n  ptr2 = pu_ram_base_address;\n  i_var = 0;\n  *pu_ram_base_address = 0;\n  initialize_third_function();\n  u_var = (int)ptr2 + i_var & 0xfffffffc;\n  pi_stack_14 = (int *)(u_var - 4);\n  *pi_stack_14 = 0x77777777;\n  if (((uint)pi_stack_14 & 7) != 0) {\n    pi_stack_14 = (int *)(u_var - 8);\n    *pi_stack_14 = 0x88888888;\n  }\n  pi_stack_14[-1] = 0x1000000;\n  pi_stack_14[-2] = i_var << 0xd;\n  pi_stack_14[-3] = DAT_000008b4;\n  pi_stack_14 = pi_stack_14 - 4;\n  *pi_stack_14 = 0;\n  for (i_stack_18 = 3; 0 < i_stack_18; i_stack_18 = i_stack_18 - 1) {\n    pi_stack_14 = pi_stack_14 - 1;\n    *pi_stack_14 = i_stack_18;\n  }\n  pi_stack_14 = pi_stack_14 - 1;\n  *pi_stack_14 = extra_out;\n  for (i_stack_1c = 0xb; 3 < i_stack_1c; i_stack_1c = i_stack_1c - 1) {\n    pi_stack_14 = pi_stack_14 - 1;\n    *pi_stack_14 = i_stack_1c;\n  }\n  pi_stack_14[-1] = -3;\n  return pi_stack_14 - 1;\n}",
            "called": [
                "FUN_00000698",
                "FUN_00000cd0",
                "FUN_00000930"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000794",
            "calling": [],
            "imported": true,
            "current_name": "initialize_array_00000794"
        },
        "FUN_000064bc": {
            "renaming": {
                "iVar2": "callback_result2",
                "iVar7": "counter2",
                "ppbVar4": "buffer_ptr_ptr",
                "param_1": "data",
                "pbVar5": "byte_ptr1",
                "FUN_000064bc": "process_data_000064bc",
                "pbVar6": "byte_ptr2",
                "unaff_r6": "byte_ptr2",
                "param_2": "counter",
                "param_3": "buffer",
                "param_4": "callback_result",
                "puVar1": "buffer_ptr",
                "uVar3": "buffer_size"
            },
            "code": "int process_data_000064bc(int data, uint *counter, byte **buffer, int *callback_result)\n{\n  byte *buffer_ptr;\n  int counter2;\n  uint buffer_size;\n  byte **buffer_ptr_ptr;\n  byte *byte_ptr1;\n  byte *byte_ptr2;\n  int callback_result2;\n  \n  if (counter[2] == 0) {\n    if (counter[6] == 0) {\n      buffer_size = 1;\n    }\n    else {\n      buffer_size = 0xffffffff;\n    }\n    counter[2] = buffer_size;\n  }\n  buffer_ptr = PTR_DAT_00006568;\n  if (-1 < (int)(data << 0x1b)) {\n    buffer_ptr_ptr = (byte **)*callback_result;\n    *callback_result = buffer_ptr_ptr + 1;\n    byte_ptr1 = *buffer_ptr_ptr;\n  }\n  callback_result2 = 0;\n  do {\n    buffer_size = counter[6];\n    if (buffer_size != 0) {\n      if (buffer_size == 1) {\n        if (*(char *)(counter[5] + (uint)**buffer) == \"\\0\") {\n          if (callback_result2 == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((data & 0x10) == 0) && (counter[3] = counter[3] + 1, counter[6] != 0)) {\n            *buffer_ptr = 0;\n          }\n          counter[4] = callback_result2 + counter[4];\n          return 0;\n        }\n      }\n      else if ((buffer_size != 2) || ((int)((uint)(byte)buffer_ptr[**buffer] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    byte_ptr2 = buffer_ptr;\n    if (-1 < (int)(data << 0x1b)) {\n      byte_ptr2 = buffer_ptr + 1;\n      *buffer_ptr = **buffer;\n    }\n    byte_ptr1 = (*buffer + 1);\n    *buffer = byte_ptr1;\n    buffer_size = counter[2] - 1;\n    *(buffer + 1) = byte_ptr1 + -1;\n    callback_result2 = callback_result2 + 1;\n    counter[2] = buffer_size;\n    buffer_ptr = byte_ptr2;\n    if ((buffer_size == 0) ||\n       (((int)(byte_ptr1 + -1) < 1 &&\n        (counter2 = (*(code *)counter[0x60])(data,buffer,buffer_size,(code *)counter[0x60],callback_result),\n        counter2 != 0)))) goto LAB_0000654a;\n  } while( true );\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000064bc",
            "calling": [
                "FUN_000061cc"
            ],
            "imported": true,
            "current_name": "process_data_000064bc"
        },
        "FUN_00002970": {
            "renaming": {
                "DAT_00002990": "dat_00002990",
                "uint": "unsigned_integer",
                "FUN_00002970": "clear_bit_in_uint_at_offset_from_dat_00002990_00002970",
                "uint_ptr": "unsigned_integer_pointer"
            },
            "code": "void clear_bit_in_uint_at_offset_from_dat_00002990_00002970(void)\n{\n  uint *uint_ptr = (uint *)(DAT_00002990 + 0x14);\n  *uint_ptr = *uint_ptr & 0xffffffef;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002970",
            "calling": [
                "FUN_000026e4"
            ],
            "imported": true,
            "current_name": "clear_bit_in_uint_at_offset_from_dat_00002990_00002970"
        },
        "FUN_00000dc0": {
            "renaming": {
                "FUN_00000cc0": "initialize_system",
                "FUN_00000dc0": "execute_main_function_00000dc0"
            },
            "code": "void execute_main_function_00000dc0(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_00000cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000dc0",
            "calling": [],
            "imported": true,
            "current_name": "execute_main_function_00000dc0"
        },
        "FUN_00000d0c": {
            "renaming": {
                "bVar1": "is_privileged_mode",
                "param_1": "interrupt_flag",
                "FUN_00000d0c": "enableIRQinterrupts_if_privileged_00000d0c"
            },
            "code": "void enableIRQinterrupts_if_privileged_00000d0c(uint interrupt_flag) {\n  bool is_privileged_mode = (bool)isCurrentModePrivileged();\n  if (is_privileged_mode) {\n    enableIRQinterrupts((interrupt_flag & 1) == 1);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d0c",
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc",
                "FUN_00001c84",
                "FUN_00000428",
                "FUN_00002434"
            ],
            "imported": true,
            "current_name": "enableIRQinterrupts_if_privileged_00000d0c"
        },
        "FUN_00003d94": {
            "renaming": {
                "uVar1": "result",
                "param_1": "function_pointer",
                "param_2": "parameter",
                "FUN_00003d94": "execute_function_00003d94"
            },
            "code": "int execute_function_00003d94(int function_pointer, int parameter) {\n  int result;\n  if (function_pointer == 0) {\n    result = -19;\n  }\n  else {\n    result = (**(function_pointer + 0xc))(*(int *)(function_pointer + 4), parameter);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003d94",
            "calling": [
                "FUN_0000305c"
            ],
            "imported": true,
            "current_name": "execute_function_00003d94"
        },
        "FUN_0000579c": {
            "renaming": {
                "PTR_DAT_000057a4": "PTR_DATA",
                "FUN_0000579c": "do_nothing_with_pointer_0000579c"
            },
            "code": "void do_nothing_with_pointer_0000579c(void)\n{\n  do_nothing_with_pointer_0000579c(PTR_DAT_000057a4);\n  return;\n}",
            "called": [
                "FUN_000045ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000579c",
            "calling": [
                "FUN_00004b34",
                "FUN_00004bd0"
            ],
            "imported": true,
            "current_name": "do_nothing_with_pointer_0000579c"
        },
        "FUN_000015d0": {
            "renaming": {
                "iVar1": "destination_address",
                "local_c": "i",
                "param_1": "source_index",
                "param_2": "destination_index",
                "param_3": "data_size",
                "FUN_000015d0": "copy_data_to_memory_000015d0"
            },
            "code": "void copy_data_to_memory_000015d0(int source_index, int destination_index, uint data_size)\n{\n  int destination_address = *(int *)(PTR_DAT_00001624 + source_index * 0x20);\n  for (uint i = 0; i < data_size; i++) {\n    do {\n    } while (-1 < *(char *)(destination_address + 4));\n    *(undefined *)(destination_address + 7) = *(undefined *)(i + destination_index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000015d0",
            "calling": [
                "FUN_00000e38"
            ],
            "imported": true,
            "current_name": "copy_data_to_memory_000015d0"
        },
        "FUN_00005e68": {
            "renaming": {
                "FUN_00005e68": "process_data_00005e68",
                "local_72": "local_var_4",
                "local_70": "local_var_5",
                "local_80": "local_var_1",
                "local_4c": "local_var_2c",
                "local_5c": "local_ptr_1",
                "local_6c": "local_var_6",
                "uStack_8": "stack_var_1",
                "param_1": "data_start",
                "local_7c": "local_var_2",
                "uStack_4": "stack_var_2",
                "local_38": "local_var_18",
                "param_2": "data_length",
                "param_3": "param_3",
                "param_4": "param_4",
                "local_74": "local_var_3"
            },
            "code": "void process_data_00005e68(undefined4 data_start, undefined4 data_length, undefined4 param_3, undefined4 param_4)\n{\n  undefined4 local_var_1;\n  undefined4 local_var_2;\n  undefined2 local_var_3;\n  undefined2 local_var_4;\n  undefined4 local_var_5;\n  undefined4 local_var_6;\n  undefined *local_ptr_1;\n  undefined4 local_var_2c;\n  undefined4 local_var_18;\n  undefined4 stack_var_1;\n  undefined4 stack_var_2;\n\n  local_var_3 = 0x204;\n  local_var_1 = data_start;\n  local_var_5 = data_start;\n  stack_var_1 = param_3;\n  stack_var_2 = param_4;\n  local_var_2 = FUN_00005ecc();\n  local_ptr_1 = PTR_LAB_00004dea_1_00005eb4;\n  local_var_2c = 0;\n  local_var_18 = 0;\n  local_var_4 = 0xffff;\n  local_var_6 = local_var_2;\n  FUNC_000061cc(*DAT_00005eb8, &local_var_1, data_length, &stack_var_1);\n  return;\n}",
            "called": [
                "FUN_000061cc",
                "FUN_00005ecc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005e68",
            "calling": [
                "FUN_00005100"
            ],
            "imported": true,
            "current_name": "process_data_00005e68"
        },
        "FUN_00000dcc": {
            "renaming": {
                "DAT_00000df0": "data_ptr",
                "FUN_00000dcc": "initialize_data_00000dcc"
            },
            "code": "void initialize_data_00000dcc(void)\n{\n  int* DAT_00000df0 = DAT_00000df0;\n  DAT_00000df0[7] = 0xc520;\n  DAT_00000df0[7] = 0xd928;\n  *DAT_00000df0 = 0xd2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000dcc",
            "calling": [
                "FUN_00000db0"
            ],
            "imported": true,
            "current_name": "initialize_data_00000dcc"
        },
        "FUN_0000285c": {
            "renaming": {
                "DAT_00002890": "flag_ptr",
                "FUN_0000285c": "set_flag_and_store_param_0000285c",
                "param_1": "param",
                "puVar1": "flag_ptr"
            },
            "code": "void set_flag_and_store_param_0000285c(unsigned int param)\n{\n  unsigned int *DAT_00002890;\n  DAT_00002890 = DAT_00002890;\n  DAT_00002890[5] &= 0xffffffef;\n  *DAT_00002890 = param;\n  DAT_00002890[5] |= 0x10;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000285c",
            "calling": [
                "FUN_00002600"
            ],
            "imported": true,
            "current_name": "set_flag_and_store_param_0000285c"
        },
        "FUN_00000e58": {
            "renaming": {
                "FUN_00000e58": "run_infinite_loop_00000e58",
                "FUN_00000cd0": "initialize_system"
            },
            "code": "void run_infinite_loop_00000e58(void)\n{\n  initialize_system();\n  do {\n    // Infinite loop\n  } while (true);\n}",
            "called": [
                "FUN_00000cd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000e58",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": true,
            "current_name": "run_infinite_loop_00000e58"
        },
        "FUN_00001778": {
            "renaming": {
                "DAT_000017d8": "function_data",
                "FUN_00001778": "set_flag_and_call_function_00001778",
                "DAT_000017d0": "data_ptr"
            },
            "code": "void set_flag_and_call_function_00001778(void)\n{\n  byte* DAT_000017d0 = DAT_000017d0;\n  byte flag = *(DAT_000017d0 + 1);\n  flag = (flag & 0xcf) | 0x20;\n  *(DAT_000017d0 + 1) = flag;\n  call_function_with_data(DAT_000017d8, 2);\n  return;\n}",
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001778",
            "calling": [
                "FUN_0000191c",
                "FUN_000019c0"
            ],
            "imported": true,
            "current_name": "set_flag_and_call_function_00001778"
        },
        "FUN_000026d8": {
            "renaming": {
                "FUN_0000294c": "perform_task",
                "FUN_000026d8": "execute_task_000026d8"
            },
            "code": "void execute_task_000026d8(void)\n{\n  perform_task();\n  return;\n}",
            "called": [
                "FUN_0000294c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000026d8",
            "calling": [
                "FUN_00003524"
            ],
            "imported": true,
            "current_name": "execute_task_000026d8"
        },
        "FUN_00000566": {
            "renaming": {
                "bVar2": "byte_0",
                "bVar1": "byte_3",
                "bVar4": "byte_2",
                "bVar3": "byte_1",
                "FUN_00000566": "count_leading_zeroes_in_32bit_00000566",
                "param_1": "input",
                "uVar5": "output"
            },
            "code": "uint32_t count_leading_zeroes_in_32bit_00000566(uint32_t input) {\n  uint32_t output;\n  uint8_t byte_0 = (uint8_t)input;\n  uint8_t byte_1 = (uint8_t)(input >> 8);\n  uint8_t byte_2 = (uint8_t)(input >> 16);\n  uint8_t byte_3 = (uint8_t)(input >> 24);\n  output = count_leading_zeroes(byte_0 << 24 | byte_1 << 16 | byte_2 << 8 | byte_3);\n  if (input == 0) {\n    output = 0xffffffff;\n  }\n  return output;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000566",
            "calling": [
                "FUN_00000610"
            ],
            "imported": true,
            "current_name": "count_leading_zeroes_in_32bit_00000566"
        },
        "FUN_00001d08": {
            "renaming": {
                "FUN_00001d08": "calculate_address_offset_00001d08",
                "param_1": "address",
                "param_2": "offset",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int calculate_address_offset_00001d08(uint address, int offset) {\n    int shifted_address = (address & 0xfffff) << 5;\n    int masked_address = (address & 0xf0000000);\n    int result = (offset * 4) + shifted_address + masked_address + 0x2000000;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001d08",
            "calling": [
                "FUN_00001d3a"
            ],
            "imported": true,
            "current_name": "calculate_address_offset_00001d08"
        },
        "FUN_000031fc": {
            "renaming": {
                "bVar1": "minimum_value_byte",
                "iVar2": "minimum_value_updated",
                "iVar3": "input_value_updated",
                "FUN_000031fc": "calculate_result_000031fc",
                "param_1": "input_value",
                "result": "result",
                "param_2": "minimum_value",
                "param_3": "additional_value"
            },
            "code": "int calculate_result_000031fc(int input_value, int minimum_value, int additional_value)\n{\n  int minimum_value_updated = minimum_value;\n  if (minimum_value < 3) {\n    minimum_value_updated = 1;\n  }\n  byte minimum_value_byte = (byte)minimum_value_updated;\n  if (2 < minimum_value) {\n    minimum_value_byte = 0;\n  }\n  input_value = input_value - (uint)minimum_value_byte;\n  int input_value_updated = input_value;\n  if (input_value < 0) {\n    input_value_updated = input_value + 3;\n  }\n  int result = (((input_value_updated >> 2) + input_value) - (int)((longlong)DAT_00003280 * (longlong)input_value >> 0x25)) +\n            (int)((longlong)DAT_00003280 * (longlong)input_value >> 0x27) +\n            *(int *)(DAT_00003284 + (minimum_value + -1) * 4) + additional_value;\n  return result + (((int)((ulonglong)((longlong)DAT_00003288 * (longlong)result) >> 0x20) +\n                     result >> 2) - (result >> 0x1f)) * -7;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000031fc",
            "calling": [
                "FUN_0000328c"
            ],
            "imported": true,
            "current_name": "calculate_result_000031fc"
        },
        "FUN_000016ec": {
            "renaming": {
                "param_1": "data",
                "FUN_000016ec": "set_first_byte_to_one_000016ec",
                "param_2": "size",
                "puVar1": "byte_data"
            },
            "code": "void set_first_byte_to_one_000016ec(void *data, size_t size) {\n  unsigned char *byte_data = (unsigned char *)data;\n  *byte_data = 1;\n  return;\n}",
            "called": [
                "FUN_00001696"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000016ec",
            "calling": [
                "FUN_00001a3c",
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001a18"
            ],
            "imported": true,
            "current_name": "set_first_byte_to_one_000016ec"
        },
        "FUN_00005100": {
            "renaming": {
                "FUN_00005100": "FUNC_00005100"
            },
            "code": "\nvoid FUNC_00005100(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined4 *puVar3;\n  undefined4 uVar4;\n  int iVar5;\n  char *pcVar6;\n  int iVar7;\n  int iVar8;\n  char cVar9;\n  char *pcVar10;\n  bool bVar11;\n  ushort *puVar12;\n  int *piVar13;\n  ushort *puVar14;\n  int *piVar15;\n  ushort local_3c;\n  ushort local_3a;\n  ushort local_38;\n  ushort local_36;\n  ushort local_34;\n  ushort local_32;\n  int local_30;\n  char *local_2c [2];\n  \n  uVar4 = *DAT_00005108;\n  iVar5 = FUN_000056b0();\n  puVar1 = PTR_DAT_000053d8;\n  pcVar6 = (char *)FUN_000056a0(uVar4,PTR_DAT_000053d4);\n  puVar2 = PTR_DAT_000053e0;\n  if (pcVar6 == (char *)0x0) {\n    *(undefined4 *)PTR_DAT_000053dc = 0;\n    *(undefined4 *)PTR_DAT_000053e4 = 0;\n    puVar3 = DAT_000053e8;\n    uVar4 = *(undefined4 *)puVar1;\n    *DAT_000053e8 = puVar2;\n    puVar3[1] = puVar2;\n    FUN_00005780(uVar4);\n    *(undefined4 *)puVar1 = 0;\n  }\n  else if ((*(int *)puVar1 == 0) || (iVar7 = FUN_00004e52(), iVar7 != 0)) {\n    FUN_00005780(*(undefined4 *)puVar1);\n    iVar7 = FUN_00005ecc(pcVar6);\n    iVar7 = FUN_00004bd0(uVar4,iVar7 + 1);\n    *(int *)puVar1 = iVar7;\n    if (iVar7 != 0) {\n      FUN_00005ebc(iVar7,pcVar6);\n    }\n    if (*pcVar6 == ':') {\n      pcVar6 = pcVar6 + 1;\n    }\n    iVar7 = FUN_00005e68(pcVar6,PTR_s__10__0_9_____n_000053f0,PTR_DAT_000053ec,&local_30);\n    if (0 < iVar7) {\n      pcVar10 = pcVar6 + local_30;\n      if (pcVar6[local_30] == '-') {\n        pcVar10 = pcVar10 + 1;\n        iVar7 = -1;\n      }\n      else {\n        if (pcVar6[local_30] == '+') {\n          pcVar10 = pcVar10 + 1;\n        }\n        iVar7 = 1;\n      }\n      local_3a = 0;\n      local_38 = 0;\n      puVar12 = &local_3a;\n      piVar13 = &local_30;\n      puVar14 = &local_38;\n      piVar15 = &local_30;\n      iVar8 = FUN_00005e68(pcVar10,PTR_s__hu_n__hu_n__hu_n_000053f4,&local_3c,&local_30,&local_3a,\n                           &local_30,&local_38,&local_30);\n      puVar1 = PTR_DAT_00005400;\n      if (0 < iVar8) {\n        *(uint *)(iVar5 + 0x28) =\n             ((uint)local_3c * 0xe10 + (uint)local_3a * 0x3c + (uint)local_38) * iVar7;\n        puVar3 = DAT_000053e8;\n        *DAT_000053e8 = PTR_DAT_000053ec;\n        pcVar10 = pcVar10 + local_30;\n        iVar7 = FUN_00005e68(pcVar10,PTR_s__10__0_9_____n_000053f0,puVar1,&local_30,puVar12,piVar13,\n                             puVar14,piVar15);\n        if (iVar7 < 1) {\n          puVar3[1] = *puVar3;\n          *(undefined4 *)PTR_DAT_000053dc = *(undefined4 *)(iVar5 + 0x28);\n          *(undefined4 *)PTR_DAT_000053e4 = 0;\n        }\n        else {\n          puVar3[1] = puVar1;\n          pcVar6 = pcVar10 + local_30;\n          if (pcVar10[local_30] == '-') {\n            pcVar6 = pcVar6 + 1;\n            iVar7 = -1;\n          }\n          else {\n            if (pcVar10[local_30] == '+') {\n              pcVar6 = pcVar6 + 1;\n            }\n            iVar7 = 1;\n          }\n          local_3c = 0;\n          local_3a = 0;\n          local_38 = 0;\n          local_30 = 0;\n          iVar8 = FUN_00005e68(pcVar6,PTR_s__hu_n__hu_n__hu_n_000053f4,&local_3c,&local_30,&local_3a\n                               ,&local_30,&local_38,&local_30);\n          if (iVar8 < 1) {\n            iVar7 = *(int *)(iVar5 + 0x28) + -0xe10;\n          }\n          else {\n            iVar7 = ((uint)local_3c * 0xe10 + (uint)local_3a * 0x3c + (uint)local_38) * iVar7;\n          }\n          *(int *)(iVar5 + 0x50) = iVar7;\n          pcVar6 = pcVar6 + local_30;\n          bVar11 = false;\n          iVar7 = iVar5;\n          while( true ) {\n            if (*pcVar6 == ',') {\n              pcVar6 = pcVar6 + 1;\n            }\n            cVar9 = *pcVar6;\n            if (cVar9 == 'M') {\n              iVar8 = FUN_00005e68(pcVar6,PTR_s_M_hu_n__hu_n__hu_n_000053f8,&local_36,&local_30,\n                                   &local_34,&local_30,&local_32,&local_30);\n              if (iVar8 != 3) {\n                return;\n              }\n              if (0xb < local_36 - 1) {\n                return;\n              }\n              if (4 < local_34 - 1) {\n                return;\n              }\n              if (6 < local_32) {\n                return;\n              }\n              *(uint *)(iVar7 + 0xc) = (uint)local_36;\n              *(uint *)(iVar7 + 0x10) = (uint)local_34;\n              *(undefined *)(iVar7 + 8) = 0x4d;\n              *(uint *)(iVar7 + 0x14) = (uint)local_32;\n              pcVar10 = pcVar6 + local_30;\n            }\n            else {\n              if (cVar9 == 'J') {\n                pcVar6 = pcVar6 + 1;\n              }\n              else {\n                cVar9 = 'D';\n              }\n              local_32 = FUN_00005fd8(pcVar6,local_2c,10);\n              pcVar10 = local_2c[0];\n              if (local_2c[0] == pcVar6) {\n                if (bVar11) {\n                  *(undefined *)(iVar5 + 0x30) = 0x4d;\n                  *(undefined4 *)(iVar5 + 0x34) = 0xb;\n                  *(undefined4 *)(iVar5 + 0x38) = 1;\n                  *(undefined4 *)(iVar5 + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(iVar5 + 8) = 0x4d;\n                  *(undefined4 *)(iVar5 + 0xc) = 3;\n                  *(undefined4 *)(iVar5 + 0x10) = 2;\n                  *(undefined4 *)(iVar5 + 0x14) = 0;\n                }\n              }\n              else {\n                *(char *)(iVar7 + 8) = cVar9;\n                *(uint *)(iVar7 + 0x14) = (uint)local_32;\n              }\n            }\n            local_3c = 2;\n            local_3a = 0;\n            local_38 = 0;\n            local_30 = 0;\n            if (*pcVar10 == '/') {\n              FUN_00005e68(pcVar10,PTR_DAT_000053fc,&local_3c,&local_30,&local_3a,&local_30,\n                           &local_38,&local_30);\n            }\n            *(uint *)(iVar7 + 0x18) =\n                 (uint)local_3c * 0xe10 + (uint)local_3a * 0x3c + (uint)local_38;\n            iVar7 = iVar7 + 0x28;\n            pcVar6 = pcVar10 + local_30;\n            if (bVar11) break;\n            bVar11 = true;\n          }\n          FUN_00004f98(*(undefined4 *)(iVar5 + 4));\n          iVar7 = *(int *)(iVar5 + 0x28);\n          *(int *)PTR_DAT_000053dc = iVar7;\n          iVar7 = *(int *)(iVar5 + 0x50) - iVar7;\n          if (iVar7 != 0) {\n            iVar7 = 1;\n          }\n          *(int *)PTR_DAT_000053e4 = iVar7;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00004f98",
                "FUN_00005e68",
                "FUN_00005fd8",
                "FUN_00004e52",
                "FUN_00005780",
                "FUN_000056b0",
                "FUN_000056a0",
                "FUN_00005ecc",
                "FUN_00005ebc",
                "FUN_00004bd0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00005100",
            "calling": [
                "FUN_000047e4"
            ],
            "imported": false,
            "current_name": "FUNC_00005100"
        },
        "FUN_00005584": {
            "renaming": {
                "uVar1": "remainder",
                "param_1": "result",
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar2": "quotient"
            },
            "code": "void divide_and_remainder_00005584(uint *result, uint dividend, uint divisor)\n{\n  uint quotient;\n  uint remainder;\n  quotient = dividend / divisor;\n  remainder = dividend % divisor;\n  if (dividend < 0) {\n    if (remainder > 0) {\n      quotient--;\n      remainder += divisor;\n    }\n  }\n  else if (remainder < 0) {\n    quotient++;\n    remainder -= divisor;\n  }\n  *result = quotient;\n  result[1] = remainder;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005584",
            "calling": [
                "FUN_00004634"
            ],
            "imported": true,
            "current_name": "divide_and_remainder_00005584"
        },
        "FUN_00004248": {
            "renaming": {
                "iVar2": "block_offset",
                "*puVar1": "*block_pointer",
                "param_1": "base_address",
                "FUN_00004248": "allocate_memory_block_00004248",
                "FUN_00004622": "initialize_memory_block",
                "param_2": "block_size",
                "puVar1": "block_pointer"
            },
            "code": "undefined4* allocate_memory_block_00004248(undefined4 base_address, int block_size)\n{\n  undefined4* block_pointer;\n  int block_offset;\n  \n  block_offset = (block_size - 1) * 0x68;\n  block_pointer = (undefined4*)FUN_00004bd0(base_address, block_offset + 0x74);\n  if (block_pointer != (undefined4*)0x0) {\n    *block_pointer = 0;\n    block_pointer[1] = block_size;\n    block_pointer[2] = block_pointer + 3;\n    initialize_memory_block(block_pointer + 3, 0, block_offset + 0x68);\n  }\n  return block_pointer;\n}",
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004248",
            "calling": [
                "FUN_00004314"
            ],
            "imported": true,
            "current_name": "allocate_memory_block_00004248"
        },
        "FUN_00001da2": {
            "renaming": {
                "param_1": "value",
                "FUN_00001da2": "get_bits_from_value_00001da2",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "ushort get_bits_from_value_00001da2(ushort value)\n{\n  ushort bits = value >> 6 & 7;\n  return bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001da2",
            "calling": [
                "FUN_00001ddc",
                "FUN_00001f80"
            ],
            "imported": true,
            "current_name": "get_bits_from_value_00001da2"
        },
        "FUN_00001ec4": {
            "renaming": {
                "FUN_00001e44": "printResult",
                "uVar1": "result",
                "param_1": "input1",
                "param_2": "input2",
                "FUN_00001ec4": "calculateAndPrintResult_00001ec4",
                "FUN_00001e0c": "calculate"
            },
            "code": "void calculateAndPrintResult_00001ec4(undefined4 input1, undefined4 input2)\n{\n  undefined4 result = calculate(input1, input2);\n  printResult(input1, input2, result);\n  return;\n}",
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001ec4",
            "calling": [
                "FUN_00001f80"
            ],
            "imported": true,
            "current_name": "calculateAndPrintResult_00001ec4"
        },
        "FUN_00002744": {
            "renaming": {
                "DAT_00002790": "data_ptr_1",
                "param_1": "data",
                "DAT_00002794": "data_ptr_2",
                "param_2": "value",
                "FUN_00002744": "write_data_00002744"
            },
            "code": "void write_data_00002744(byte data, uint value) {\n  if (data < 0) {\n    *(char *)((data & 0xf) + DAT_00002790 + 0x14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)data + DAT_00002794 + 0x300) = (char)((value & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002744",
            "calling": [
                "FUN_00002894"
            ],
            "imported": true,
            "current_name": "write_data_00002744"
        },
        "FUN_00002624": {
            "renaming": {
                "FUN_0000443c": "memcpy",
                "FUN_0000281c": "allocate_buffer",
                "param_1": "data",
                "uStack_c": "buffer",
                "FUN_00002624": "copy_data_to_buffer_00002624",
                "local_10": "result"
            },
            "code": "int copy_data_to_buffer_00002624(void *data, size_t size) {\n  int result = 0;\n  void *buffer = allocate_buffer(size);\n  if (buffer != NULL) {\n    memcpy(buffer, data, size);\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002624",
            "calling": [
                "FUN_00003444"
            ],
            "imported": true,
            "current_name": "copy_data_to_buffer_00002624"
        },
        "FUN_00001e0c": {
            "renaming": {
                "offset": "offset",
                "data": "data",
                "shift": "shift",
                "param_1": "index",
                "PTR_DAT_00001e40": "ptr",
                "param_2": "value",
                "FUN_00001e0c": "get_bits_from_uint_at_index_00001e0c",
                "DAT_00001e40": "ptr",
                "mask": "mask"
            },
            "code": "uint get_bits_from_uint_at_index_00001e0c(int index,uint value)\n{\n  uint* PTR_DAT_00001e40 = PTR_DAT_00001e40;\n  int offset = ((int)value >> 3) + index * 4;\n  uint data = *(PTR_DAT_00001e40 + offset);\n  int shift = (value & 7) << 2;\n  uint mask = 0xf;\n  return (data >> shift) & mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001e0c",
            "calling": [
                "FUN_00001ec4",
                "FUN_00002028"
            ],
            "imported": true,
            "current_name": "get_bits_from_uint_at_index_00001e0c"
        },
        "FUN_00000ef8": {
            "renaming": {
                "FUN_00000ef8": "do_nothing_00000ef8"
            },
            "code": "\nvoid do_nothing_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000ef8",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": true,
            "current_name": "do_nothing_00000ef8"
        },
        "FUN_000041d0": {
            "renaming": {
                "iVar2": "item_list_head",
                "iVar4": "item_data_size",
                "pcVar1": "callback_fn",
                "iVar6": "item_data_pointer",
                "piVar5": "item_list_pointer",
                "iVar8": "current_item",
                "param_1": "data_size",
                "puVar9": "data_pointer",
                "FUN_000041d0": "process_data_000041d0",
                "uVar3": "callback_result",
                "uVar7": "result"
            },
            "code": "uint process_data_000041d0(int data_size, undefined4 param_2, undefined4 param_3)\n{\n  code *callback_fn;\n  int current_item;\n  uint result = 0;\n  int *item_list_pointer;\n  int item_list_head;\n  int item_data_pointer;\n  uint callback_result;\n  undefined *data_pointer;\n  callback_fn = DAT_000041ec;\n  if (data_size == 0) {\n    item_list_head = *(int *)PTR_DAT_000041e8;\n    item_list_pointer = (int *)(item_list_head + 0x48);\n    data_pointer = PTR_DAT_000041e8;\n    do {\n      item_data_pointer = item_list_pointer[2];\n      current_item = item_list_pointer[1];\n      while (current_item = current_item + -1, -1 < current_item) {\n        if ((1 < *(ushort *)(item_data_pointer + 0xc)) && (iVar4 = *(short *)(item_data_pointer + 0xe) + 1, iVar4 != 0)) {\n          callback_result = (*callback_fn)(item_list_head, item_data_pointer, param_3, iVar4, data_pointer);\n          result = result | callback_result;\n        }\n        item_data_pointer = item_data_pointer + 0x68;\n      }\n      item_list_pointer = (int *)*item_list_pointer;\n    } while (item_list_pointer != (int *)0x0);\n    return result;\n  }\n  result = FUN_00004158(*DAT_000041f0, data_size);\n  return result;\n}",
            "called": [
                "FUN_00004158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000041d0",
            "calling": [
                "FUN_00002e48"
            ],
            "imported": true,
            "current_name": "process_data_000041d0"
        },
        "FUN_0000459c": {
            "renaming": {
                "ppcVar4": "function_pointer_array",
                "iVar3": "num_function_pointers",
                "iVar5": "i",
                "puVar2": "pointer_2",
                "puVar1": "pointer_1",
                "FUN_0000459c": "execute_function_pointers_0000459c"
            },
            "code": "void execute_function_pointers_0000459c(void)\n{\n  int num_function_pointers = (int)PTR_DAT_000045d8 - (int)PTR_DAT_000045d4;\n  code **function_pointer_array = (code **)PTR_DAT_000045d4;\n  for (int i = 0; i < num_function_pointers >> 2; i++) {\n    (**function_pointer_array)();\n    function_pointer_array++;\n  }\n  FUN_00000410();\n  function_pointer_array = (code **)PTR_DAT_000045dc;\n  num_function_pointers = (int)PTR_DAT_000045e0 - (int)PTR_DAT_000045dc;\n  for (int i = 0; i < num_function_pointers >> 2; i++) {\n    (**function_pointer_array)();\n    function_pointer_array++;\n  }\n  return;\n}",
            "called": [
                "FUN_00000410"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000459c",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": true,
            "current_name": "execute_function_pointers_0000459c"
        },
        "FUN_000014c4": {
            "renaming": {
                "param_1": "index",
                "pbVar1": "data",
                "param_2": "divisor",
                "uVar3": "quotient",
                "uVar2": "data_size",
                "FUN_000014c4": "process_data_000014c4"
            },
            "code": "void process_data_000014c4(int index, uint16_t divisor) {\n  byte *data = *(byte **)(PTR_DAT_000015cc + index * 0x20);\n  uint32_t data_size = *(uint32_t *)(PTR_DAT_000015cc + index * 0x20 + 4);\n  data[3] &= 0xf3;\n  data[2] = PTR_DAT_000015cc[index * 0x20 + 0x1d];\n  uint32_t quotient = data_size / (divisor << 4);\n  data[0] = (byte)(quotient >> 8) & 0x1f;\n  data[1] = (byte)quotient;\n  data[10] = (byte)((data_size << 2) / divisor + 1 >> 1) & 0x1f;\n  data[0x10] |= 0x88;\n  if ((data[0x10] & 0x70) == 0) {\n    data[0x13] = 0;\n  }\n  else {\n    data[0x13] = (char)(2 << (data[0x10] >> 4 & 7)) - 1;\n  }\n  data[0x15] = 1;\n  data[0x11] = 0xc0;\n  data[3] |= 0x2c;\n  FUN_00001318((int)(char)PTR_DAT_000015cc[index * 0x20 + 0x14]);\n  return;\n}",
            "called": [
                "FUN_00001318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000014c4",
            "calling": [
                "FUN_000013b8"
            ],
            "imported": true,
            "current_name": "process_data_000014c4"
        },
        "FUN_00004b34": {
            "renaming": {
                "piVar2": "prev_item_size",
                "param_1": "error_code",
                "ppiVar6": "current_item",
                "param_2": "list",
                "param_3": "list_size",
                "param_4": "item_size",
                "puVar1": "memory_pointer",
                "extraout_r1": "prev_item",
                "ppiVar3": "prev_item",
                "FUN_00004b34": "add_item_to_list_00004b34",
                "ppiVar4": "current_item",
                "ppiVar5": "next_item"
            },
            "code": "void add_item_to_list_00004b34(int* error_code, int* list, int list_size, int item, int item_size)\n{\n  bool is_item_added = false;\n  if (list_size == 0) {\n    return;\n  }\n  int** current_item = (int**)(list + item_size * -1);\n  if (*current_item < 0) {\n    current_item = (int**)((int)current_item + **current_item);\n  }\n  allocate_memory();\n  int** first_item = *(int***)PTR_DAT_00004bcc;\n  if (first_item == NULL) {\n    current_item[1] = NULL;\n    *(int***)PTR_DAT_00004bcc = current_item;\n    int** prev_item = extraout_r1;\n    int** next_item = PTR_DAT_00004bcc;\n  }\n  else if (current_item < first_item) {\n    int** prev_item = *current_item;\n    int** next_item = (int*)((int)current_item + (int)prev_item);\n    bool is_current_first_item = first_item == next_item;\n    if (is_current_first_item) {\n      next_item = *first_item;\n      first_item = (int**)first_item[1];\n    }\n    current_item[1] = (int*)next_item;\n    if (is_current_first_item) {\n      next_item = (int*)((int)next_item + (int)prev_item);\n      *current_item = (int*)next_item;\n    }\n    *(int***)PTR_DAT_00004bcc = current_item;\n  }\n  else {\n    int** prev_item = first_item;\n    int** next_item = (int*)first_item[1];\n    while (next_item != NULL && next_item <= current_item) {\n      prev_item = next_item;\n      next_item = (int*)prev_item[1];\n    }\n    int** prev_item_ptr = *prev_item;\n    if ((int**)((int)prev_item + (int)prev_item_ptr) == current_item) {\n      prev_item_ptr = (int**)((int)prev_item_ptr + (int)*current_item);\n      *prev_item = (int*)prev_item_ptr;\n      if (next_item == (int**)((int)prev_item + (int)prev_item_ptr)) {\n        int* next_item_ptr = *next_item;\n        prev_item[1] = next_item[1];\n        prev_item_ptr = (int**)((int)prev_item_ptr + (int)next_item_ptr);\n        *prev_item = (int*)prev_item_ptr;\n      }\n    }\n    else if (current_item < (int**)((int)prev_item + (int)prev_item_ptr)) {\n      *error_code = 0xc;\n    }\n    else {\n      int** next_item_ptr = (int**)((int)current_item + (int)*current_item);\n      bool is_current_last_item = next_item == next_item_ptr;\n      if (is_current_last_item) {\n        next_item_ptr = (int**)*next_item;\n        next_item = (int**)next_item[1];\n      }\n      current_item[1] = (int*)next_item;\n      if (is_current_last_item) {\n        next_item_ptr = (int**)((int)next_item_ptr + (int)*current_item);\n        *current_item = (int*)next_item_ptr;\n      }\n      prev_item[1] = (int*)current_item;\n    }\n  }\n  handle_error(error_code, prev_item, current_item, item_size);\n  return;\n}",
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004b34",
            "calling": [
                "FUN_0000404c",
                "FUN_00006192",
                "FUN_00005780",
                "FUN_00006768",
                "FUN_000054a8",
                "FUN_000060cc"
            ],
            "imported": true,
            "current_name": "add_item_to_list_00004b34"
        },
        "FUN_000004f2": {
            "renaming": {
                "0xffffffff": "-1",
                "*param_1": "*param_value",
                "0x13": "19",
                "FUN_000004f2": "set_param_to_19_000004f2"
            },
            "code": "int set_param_to_19_000004f2(int *param_value)\n{\n  *param_value = 19;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000004f2",
            "calling": [
                "FUN_00004dee",
                "FUN_00004e26"
            ],
            "imported": true,
            "current_name": "set_param_to_19_000004f2"
        },
        "FUN_00004e66": {
            "renaming": {
                "FUN_00004e66": "compare_strings_00004e66",
                "param_1": "str1",
                "pbVar1": "str1_ptr",
                "pbVar2": "str2_ptr",
                "param_2": "str1_len",
                "param_3": "str2_len",
                "uVar3": "current_char"
            },
            "code": "int compare_strings_00004e66(byte *str1, int str1_len, int str2_len) {\n  byte *str1_ptr;\n  byte *str2_ptr;\n  uint current_char;\n  \n  if (str2_len != 0) {\n    str2_ptr = (byte *)(str1_len + -1);\n    str1_ptr = str1;\n    do {\n      current_char = (uint)*str1_ptr;\n      str2_ptr = str2_ptr + 1;\n      if ((current_char != *str2_ptr) || (str1_ptr + 1 == str1 + str2_len)) break;\n      str1_ptr = str1_ptr + 1;\n    } while (current_char != 0);\n    str2_len = current_char - *str2_ptr;\n  }\n  return str2_len;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004e66",
            "calling": [
                "FUN_00003524",
                "FUN_0000562c"
            ],
            "imported": true,
            "current_name": "compare_strings_00004e66"
        },
        "FUN_00005ecc": {
            "renaming": {
                "FUN_00005ecc": "find_end_of_string_00005ecc",
                "pcVar2": "next_ptr",
                "pcVar3": "current_ptr",
                "param_1": "str",
                "cVar1": "current_char"
            },
            "code": "char* find_end_of_string_00005ecc(char* str) {\n  char current_char;\n  char* current_ptr = str;\n  do {\n    current_ptr++;\n    current_char = *current_ptr;\n  } while (current_char != '\\0');\n  return current_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005ecc",
            "calling": [
                "FUN_00005e68",
                "FUN_00005100"
            ],
            "imported": true,
            "current_name": "find_end_of_string_00005ecc"
        },
        "FUN_0000129c": {
            "renaming": {
                "FUN_0000129c": "execute_function_on_param_0000129c",
                "param_1": "parameter",
                "FUN_00002434": "execute_function_with_flag"
            },
            "code": "void execute_function_on_param_0000129c(void* parameter) {\n  execute_function_with_flag(parameter, 1);\n  return;\n}",
            "called": [
                "FUN_00002434"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000129c",
            "calling": [
                "FUN_000012e2"
            ],
            "imported": true,
            "current_name": "execute_function_on_param_0000129c"
        },
        "FUN_00001628": {
            "renaming": {
                "FUN_00001628": "check_and_call_function_00001628",
                "flags": "flags",
                "function_ptr": "function_ptr",
                "FUN_00001348": "execute_another_function",
                "param_1": "index",
                "arg2": "arg2",
                "PTR_DAT_00001680": "data_ptr_1",
                "arg1": "arg1",
                "function": "function",
                "PTR_DAT_00001684": "data_ptr_2"
            },
            "code": "void check_and_call_function_00001628(int index)\n{\n  byte* flags = (byte*)(*(int*)(PTR_DAT_00001680 + index * 0x20) + 4);\n  int* function_ptr = (int*)(PTR_DAT_00001684 + index * 8);\n  if ((*flags & 0x20) && (*function_ptr != 0)) {\n    code* function = **(code***)(function_ptr);\n    undefined4 arg1 = *(undefined4*)(function_ptr + 1);\n    undefined arg2 = *(undefined*)(*(int*)(PTR_DAT_00001680 + index * 0x20) + 7);\n    function(arg1, arg2);\n  }\n  execute_another_function();\n  return;\n}",
            "called": [
                "FUN_00001348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001628",
            "calling": [
                "FUN_00001688"
            ],
            "imported": true,
            "current_name": "check_and_call_function_00001628"
        },
        "FUN_00001748": {
            "renaming": {
                "FUN_00001748": "set_param_value_00001748",
                "byte": "unsigned char",
                "param_1": "new_value",
                "DAT_00001774": "PTR_DATA_START"
            },
            "code": "void set_param_value_00001748(byte new_value)\n{\n  byte* param_ptr = (byte*)(DAT_00001774 + 3);\n  byte current_value = *param_ptr;\n  byte masked_new_value = new_value | (current_value & 0x1f);\n  *param_ptr = masked_new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001748",
            "calling": [
                "FUN_00001960",
                "FUN_000018bc",
                "FUN_0000191c",
                "FUN_000019c0",
                "FUN_00001bb8"
            ],
            "imported": true,
            "current_name": "set_param_value_00001748"
        },
        "FUN_0000294c": {
            "renaming": {
                "FUN_0000294c": "set_flag_for_data_0000294c",
                "PTR_": "",
                "DAT_": "",
                "DAT_0000296c": "data_ptr"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ set_flag_for_data_0000294c(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_DDAT_PDAT_TDAT_RDAT__DAT_ADAT_PDAT_TDAT_RDAT__DAT_TDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_9DAT_PDAT_TDAT_RDAT__DAT_6DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_DDAT_PDAT_TDAT_RDAT__DAT_ADAT_PDAT_TDAT_RDAT__DAT_TDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_9DAT_PDAT_TDAT_RDAT__DAT_6DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000294c",
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "imported": true,
            "current_name": "set_flag_for_data_0000294c"
        },
        "FUN_00005790": {
            "renaming": {
                "FUN_00005790": "do_nothing_with_pointer_00005790",
                "PTR_DAT_00005798": "PTR_data"
            },
            "code": "void do_nothing_with_pointer_00005790(void)\n{\n  do_nothing(PTR_DAT_00005798);\n  return;\n}",
            "called": [
                "FUN_000045e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005790",
            "calling": [
                "FUN_00004b34",
                "FUN_00004bd0"
            ],
            "imported": true,
            "current_name": "do_nothing_with_pointer_00005790"
        },
        "FUN_00000534": {
            "renaming": {
                "uVar1": "is_valid",
                "FUN_00000534": "validate_input_00000534",
                "param_1": "input",
                "param_2": "input_size"
            },
            "code": "int validate_input_00000534(int *input, int input_size)\n{\n  int is_valid = 0;\n  if (((input_size == 0) || (input_size == 1)) || (input_size == 2)) {\n    is_valid = 1;\n  }\n  else {\n    is_valid = 0;\n  }\n  *input = 0;\n  return is_valid;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000534",
            "calling": [
                "FUN_00005700"
            ],
            "imported": true,
            "current_name": "validate_input_00000534"
        },
        "FUN_000017dc": {
            "renaming": {
                "FUN_000017dc": "initialize_device_000017dc",
                "DAT_00001820": "DAT_DEVICE_REGISTERS",
                "DAT_00001828": "DAT_CONTROL_REGISTER",
                "FUN_000016c8": "initialize_registers",
                "DAT_00001824": "DAT_STATUS_REGISTER"
            },
            "code": "void initialize_device_000017dc(void)\n{\n  initialize_registers(DAT_00001820, 0x1d);\n  if ((*(uint *)(DAT_00001824 + 0x10) & 0x100) == 0) {\n    *(undefined4 *)(DAT_00001824 + 0x10) = 0x104;\n  }\n  *DAT_00001828 = *DAT_00001828 & 0xfff3ffff | 0x80000;\n  return;\n}",
            "called": [
                "FUN_000016c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000017dc",
            "calling": [
                "FUN_00001c84"
            ],
            "imported": true,
            "current_name": "initialize_device_000017dc"
        },
        "FUN_00000410": {
            "renaming": {
                "FUN_00000410": "call_function_00000410",
                "FUN_00000df4": "do_something"
            },
            "code": "void call_function_00000410(void)\n{\n  do_something();\n  return;\n}",
            "called": [
                "FUN_00000df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000410",
            "calling": [
                "FUN_0000459c"
            ],
            "imported": true,
            "current_name": "call_function_00000410"
        },
        "FUN_000005ca": {
            "renaming": {
                "param_1": "list_ptr",
                "FUN_000005ca": "get_next_element_000005ca",
                "puVar1": "next_element_ptr"
            },
            "code": "undefined4* get_next_element_000005ca(int* list_ptr)\n{\n  undefined4* next_element_ptr;\n  \n  if (*list_ptr == 0) {\n    next_element_ptr = (undefined4*) 0x0;\n  }\n  else {\n    next_element_ptr = *(undefined4**)*list_ptr;\n    if (next_element_ptr == (undefined4*)*list_ptr) {\n      *list_ptr = 0;\n    }\n    else {\n      *(undefined4*)*list_ptr = *next_element_ptr;\n    }\n  }\n  return next_element_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000005ca",
            "calling": [
                "FUN_00000698"
            ],
            "imported": true,
            "current_name": "get_next_element_000005ca"
        },
        "FUN_00005ff8": {
            "renaming": {
                "DAT_00006000": "DAT_pointer",
                "FUN_00005ff8": "doNothingWithDatapointer_00005ff8",
                "do_nothing_000045ec": "doNothing"
            },
            "code": "void doNothingWithDatapointer_00005ff8(void)\n{\n  doNothing(DAT_00006000);\n  return;\n}",
            "called": [
                "FUN_000045ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005ff8",
            "calling": [
                "FUN_0000562c"
            ],
            "imported": true,
            "current_name": "doNothingWithDatapointer_00005ff8"
        },
        "FUN_00002714": {
            "renaming": {
                "1 << (param_1 & 0x1f)": "bit_mask",
                "param_1": "bit_position",
                "FUN_00002714": "set_bit_in_array_00002714",
                "*(int *)(DAT_00002740 + ((uint)(int)(char)param_1 >> 5) * 4)": "array_ptr"
            },
            "code": "void set_bit_in_array_00002714(byte bit_position) {\n    int* *(int *)(DAT_00002740 + ((uint)(int)(char)param_1 >> 5) * 4) = (int*)(DAT_00002740 + ((uint)(int)(char)bit_position >> 5) * 4);\n    int bit_mask = 1 << (bit_position & 0x1f);\n    **(int *)(DAT_00002740 + ((uint)(int)(char)param_1 >> 5) * 4) = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002714",
            "calling": [
                "FUN_00002894"
            ],
            "imported": true,
            "current_name": "set_bit_in_array_00002714"
        },
        "FUN_000020e0": {
            "renaming": {
                "FUN_00002028": "initialize_data_array",
                "DAT_000020f0": "data_array",
                "FUN_000020e0": "initialize_data_000020e0"
            },
            "code": "void initialize_data_000020e0(void)\n{\n  int data_size = 2;\n  initialize_DAT_000020f0(DAT_000020f0, data_size);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000020e0",
            "calling": [],
            "imported": true,
            "current_name": "initialize_data_000020e0"
        },
        "FUN_00005fec": {
            "renaming": {
                "do_nothing_000045e8": "do_nothing",
                "DAT_00005ff4": "DAT_data",
                "FUN_00005fec": "do_nothing_with_data_00005fec"
            },
            "code": "void do_nothing_with_data_00005fec(void)\n{\n  do_nothing(DAT_00005ff4);\n  return;\n}",
            "called": [
                "FUN_000045e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005fec",
            "calling": [
                "FUN_0000562c"
            ],
            "imported": true,
            "current_name": "do_nothing_with_data_00005fec"
        },
        "FUN_00004f84": {
            "renaming": {
                "uVar1": "result",
                "iVar5": "comparison_result",
                "pbVar9": "current_char",
                "param_1": "input_string",
                "pbVar8": "previous_char",
                "param_2": "endptr",
                "param_3": "base",
                "uVar3": "char_flags",
                "uVar2": "current_char_value",
                "uVar4": "digit_value",
                "uVar7": "max_quotient",
                "uVar6": "max_value",
                "FUN_00004f84": "parse_number_00004f84"
            },
            "code": "uint parse_number_00004f84(byte *input_string, byte **endptr, uint base) {\n  uint result = 0;\n  uint sign = 1;\n  byte *current_char = input_string;\n  while (*current_char == ' ') current_char++;\n  if (*current_char == '-') {\n    sign = -1;\n    current_char++;\n  } else if (*current_char == '+') {\n    current_char++;\n  }\n  if (base == 0) {\n    if (*current_char == '0') {\n      base = 8;\n      current_char++;\n      if ((*current_char == 'x') || (*current_char == 'X')) {\n        base = 16;\n        current_char++;\n      }\n    } else {\n      base = 10;\n    }\n  } else if ((base != 10) || (*current_char != '0')) {\n    if ((*current_char == '0') && ((*current_char + 1 == 'x') || (*current_char + 1 == 'X'))) {\n      current_char += 2;\n      base = 16;\n    }\n  }\n  while ((*current_char >= '0') && (*current_char <= '9')) {\n    result = result * base + (*current_char - '0');\n    current_char++;\n  }\n  if (base == 16) {\n    while (((*current_char >= 'a') && (*current_char <= 'f')) || ((*current_char >= 'A') && (*current_char <= 'F'))) {\n      result = result * 16 + (*current_char + 10 - ((*current_char & 0xdf) + 7));\n      current_char++;\n    }\n  }\n  if (endptr != 0) {\n    *endptr = current_char;\n  }\n  return sign * result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004f84",
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "imported": true,
            "current_name": "parse_number_00004f84"
        },
        "FUN_000028f0": {
            "renaming": {
                "FUN_000028f0": "get_dat_ptr_value_plus_one_000028f0",
                "DAT_0000290c": "data_ptr"
            },
            "code": "int get_dat_ptr_value_plus_one_000028f0(void)\n{\n  int* DAT_0000290c = (int *)(DAT_0000290c + 8);\n  int value = *DAT_0000290c;\n  return value + 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000028f0",
            "calling": [
                "FUN_00002690"
            ],
            "imported": true,
            "current_name": "get_dat_ptr_value_plus_one_000028f0"
        },
        "FUN_00004f98": {
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "uVar10": "month",
                "PTR_DAT_000050e4": "calendar_data_start_ptr",
                "iVar4": "month_days",
                "DAT_000050e0": "days_in_a_week",
                "iVar6": "century",
                "iVar8": "century_leap_years",
                "param_1": "year",
                "puVar5": "calendar_data_end_ptr",
                "iVar9": "century_common_years",
                "puVar1": "calendar_data_ptr",
                "uVar3": "day_of_year",
                "uVar2": "day_of_week",
                "uVar7": "leap_years"
            },
            "code": "uint calculate_day_of_week_00004f98(uint year, uint month, uint day)\n{\n  uint *calendar_data_ptr;\n  uint day_of_week = 0;\n  uint day_of_year = 0;\n  uint century = 0;\n  uint leap_years = 0;\n  uint century_leap_years = 0;\n  uint century_common_years = 0;\n  uint month_days = 0;\n  uint i = 0;\n  uint *calendar_data_end_ptr;\n  uint *PTR_DAT_000050e4 = (uint *)FUN_000056b0();\n  if ((int)year < 0x7b2) {\n    return 0;\n  }\n  else {\n    day_of_year = day;\n    for (i = 1; i < month; i++) {\n      month_days = *(int *)(PTR_DAT_000050e4 + 4 + (i - 1) * 3 + ((year & 3) == 0 && (year % 100 != 0) || year % 400 == 0) * 0x30);\n      day_of_year += month_days;\n    }\n    century = year / 100;\n    leap_years = (century - 17) * 0x19;\n    if (century % 4 == 0 && year % 100 != 0 || century % 4 == 3) {\n      century_leap_years = (century - 1) / 4 + 1;\n    }\n    else {\n      century_common_years = century / 4;\n    }\n    day_of_week = (leap_years + century_leap_years + century_common_years + year - 0x76d + day_of_year) % 7;\n    if (day_of_week < 0) {\n      day_of_week += 7;\n    }\n    return day_of_week;\n  }\n}",
            "called": [
                "FUN_000056b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004f98",
            "calling": [
                "FUN_000047e4",
                "FUN_00005100"
            ],
            "imported": true,
            "current_name": "calculate_day_of_week_00004f98"
        },
        "FUN_00004dee": {
            "renaming": {
                "FUN_00004dee": "process_data_and_return_result_00004dee",
                "uVar1": "result",
                "param_1": "data_pointer",
                "param_2": "offset",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "int process_data_and_return_result_00004dee(int data_pointer, int offset, int param_3, int param_4)\n{\n  int result = 0;\n  if ((int)((uint)*(ushort *)(data_pointer + offset + 0xc) << 0x17) < 0) {\n    result = call_function_with_params(param_3, (int)*(short *)(data_pointer + offset + 0xe), 0, 2);\n  }\n  *(ushort *)(data_pointer + offset + 0xc) = *(ushort *)(data_pointer + offset + 0xc) & 0xefff;\n  result = call_function_with_params(param_3, param_4);\n  return result;\n}",
            "called": [
                "FUN_00000e38",
                "FUN_000004f2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004dee",
            "calling": [],
            "imported": true,
            "current_name": "process_data_and_return_result_00004dee"
        },
        "FUN_00000fec": {
            "renaming": {
                "FUN_00000fec": "initialize_array_with_size_00000fec",
                "param_1": "array",
                "PTR_s_FAILED_ASSERTION__00001030": "Invalid array size: must be a power of two",
                "param_2": "size_minus_one"
            },
            "code": "void initialize_array_with_size_00000fec(uint32_t *array, uint32_t size_minus_one) {\n  if ((size_minus_one & (size_minus_one - 1)) != 0) {\n    assert(0 && \"PTR_s_FAILED_ASSERTION__00001030\");\n  }\n  array[0] = 0;\n  array[1] = 0;\n  array[2] = size_minus_one;\n  return;\n}",
            "called": [
                "FUN_00000f04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000fec",
            "calling": [
                "FUN_000010d4"
            ],
            "imported": true,
            "current_name": "initialize_array_with_size_00000fec"
        },
        "FUN_00000428": {
            "renaming": {
                "local_c": "new_end",
                "FUN_00000428": "check_relocation_bounds_00000428",
                "uVar1": "status",
                "DAT_00000488": "relocation_max",
                "param_1": "result",
                "PTR_Elf32_Rel_ARRAY_00000484": "relocation_start",
                "DAT_0000048c": "relocation_end",
                "param_2": "offset"
            },
            "code": "int32_t check_relocation_bounds_00000428(uint32_t *result, int32_t offset)\n{\n  int32_t status;\n  uint32_t PTR_Elf32_Rel_ARRAY_00000484 = *(uint32_t *)PTR_Elf32_Rel_ARRAY_00000484;\n  uint32_t DAT_0000048c = DAT_0000048c;\n  \n  uint32_t new_end = offset + PTR_Elf32_Rel_ARRAY_00000484;\n  \n  if ((DAT_00000488 < new_end) || (new_end < DAT_0000048c)) {\n    *result = 0xc;\n    status = -1;\n  }\n  else {\n    *(uint32_t *)PTR_Elf32_Rel_ARRAY_00000484 = new_end;\n    status = 0;\n  }\n  \n  return status;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000428",
            "calling": [
                "FUN_00004bd0"
            ],
            "imported": true,
            "current_name": "check_relocation_bounds_00000428"
        },
        "FUN_000039e8": {
            "renaming": {
                "FUN_000039e8": "getClassFromChar_000039e8",
                "param_1": "character",
                "puVar1": "classPtr"
            },
            "code": "undefined* getClassFromChar_000039e8(char character) {\\n    undefined* classPtr = PTR_s_CLASS_UNKNOWN_00003d20;\\n\\n    switch(character) {\\n        case \"\\0\":\\n            classPtr = DAT_00003cc0;\\n            break;\\n        case \"@\":\\n            classPtr = DAT_00003cc4;\\n            break;\\n        case \"B\":\\n            classPtr = DAT_00003cc8;\\n            break;\\n        case \"C\":\\n            classPtr = PTR_s_ACT_SERVO_00003ccc;\\n            break;\\n        case \"D\":\\n            classPtr = PTR_s_ACT_MOTOR_00003cd0;\\n            break;\\n        case \"E\":\\n            classPtr = PTR_s_ACT_SWITCH_00003cd4;\\n            break;\\n        case \"F\":\\n            classPtr = PTR_s_ACT_DIMMER_00003cd8;\\n            break;\\n        case -128:\\n            classPtr = PTR_s_SENSE_ANY_00003cdc;\\n            break;\\n        case -127:\\n            classPtr = PTR_s_SENSE_BTN_00003ce0;\\n            break;\\n        case -126:\\n            classPtr = PTR_s_SENSE_TEMP_00003ce4;\\n            break;\\n        case -125:\\n            classPtr = PTR_s_SENSE_HUM_00003ce8;\\n            break;\\n        case -124:\\n            classPtr = PTR_s_SENSE_LIGHT_00003cec;\\n            break;\\n        case -123:\\n            classPtr = PTR_s_SENSE_ACCEL_00003cf0;\\n            break;\\n        case -122:\\n            classPtr = PTR_s_SENSE_MAG_00003cf4;\\n            break;\\n        case -121:\\n            classPtr = PTR_s_SENSE_GYRO_00003cf8;\\n            break;\\n        case -120:\\n            classPtr = PTR_s_SENSE_COLOR_00003cfc;\\n            break;\\n        case -119:\\n            classPtr = PTR_s_SENSE_PRESS_00003d00;\\n            break;\\n        case -118:\\n            classPtr = PTR_s_SENSE_ANALOG_00003d04;\\n            break;\\n        case -117:\\n            classPtr = PTR_s_SENSE_UV_00003d08;\\n            break;\\n        case -116:\\n            classPtr = PTR_s_SENSE_OBJTEMP_00003d0c;\\n            break;\\n        case -115:\\n            classPtr = PTR_s_SENSE_PULSE_COUNT_00003d10;\\n            break;\\n        case -114:\\n            classPtr = PTR_s_SENSE_DISTANCE_00003d14;\\n            break;\\n        case -113:\\n            classPtr = PTR_s_SENSE_CO2_00003d18;\\n            break;\\n        case \" \": case \"!\": case \"\\\"\": case \"#\": case \"$\": case \"%\": case \"&\": case \"\\\"\": case \"(\": case \")\": case \"*\": case \"+\": case \",\": case \"-\": case \".\": case \"/\":\\n        case \"0\": case \"1\": case \"2\": case \"3\": case \"4\": case \"5\": case \"6\": case \"7\": case \"8\": case \"9\":\\n        case \":\": case \";\": case \"<\": case \"=\": case \">\": case \"?\": case \"A\": case \"G\": case \"H\": case \"I\": case \"J\": case \"K\": case \"L\": case \"M\": case \"N\": case \"O\": case \"P\": case \"Q\": case \"R\": case \"S\": case \"T\": case \"U\": case \"V\": case \"W\": case \"X\": case \"Y\": case \"Z\":\\n        case \"[\": case \"\\\\\": case \"]\": case \"^\": case \"_\": case \"`\": case \"a\": case \"b\": case \"c\": case \"d\": case \"e\": case \"f\": case \"g\": case \"h\": case \"i\": case \"j\": case \"k\": case \"l\": case \"m\": case \"n\": case \"o\": case \"p\": case \"q\": case \"r\": case \"s\": case \"t\": case \"u\": case \"v\": case \"w\": case \"x\": case \"y\": case \"z\":\\n        case \"{\": case \"|\": case \"}\": case \"~\": case 127:\\n            break;\\n        default:\\n            if (character == -1) {\\n                return PTR_s_CLASS_ANY_00003d1c;\\n            }\\n    }\\n    return classPtr;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000039e8",
            "calling": [
                "FUN_00002f74",
                "FUN_00002ecc"
            ],
            "imported": true,
            "current_name": "getClassFromChar_000039e8"
        },
        "FUN_00000e38": {
            "renaming": {
                "FUN_00000e38": "copy_param2_to_return_00000e38",
                "param_1": "src",
                "param_2": "dest",
                "FUN_000015d0": "memcpy"
            },
            "code": "int32_t copy_param2_to_return_00000e38(int32_t src, int32_t dest) {\n  memcpy(&dest, &src, sizeof(int32_t));\n  return dest;\n}",
            "called": [
                "FUN_000015d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000e38",
            "calling": [
                "FUN_00004dee"
            ],
            "imported": true,
            "current_name": "copy_param2_to_return_00000e38"
        },
        "FUN_00002294": {
            "renaming": {
                "bVar3": "is_equal",
                "iVar2": "array_length",
                "uVar1": "array_length",
                "FUN_00002294": "is_difference_equal_00002294",
                "param_1": "pointer_to_array"
            },
            "code": "bool is_difference_equal_00002294(int pointer_to_array)\n{\n  int array_length = *(int *)(pointer_to_array + 4);\n  bool is_equal = *(int *)(pointer_to_array + 0xc) - *(int *)(pointer_to_array + 8) == array_length;\n  if (is_equal) {\n    array_length = 1;\n  }\n  return (bool)array_length;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002294",
            "calling": [
                "FUN_00002364"
            ],
            "imported": true,
            "current_name": "is_difference_equal_00002294"
        },
        "FUN_00003e9e": {
            "renaming": {
                "uVar1": "result",
                "param_1": "input_1",
                "FUN_00003e9e": "calculate_result_and_return_00003e9e",
                "FUN_00003ec4": "calculate_result",
                "param_2": "input_2",
                "param_3": "input_3"
            },
            "code": "int32_t calculate_result_and_return_00003e9e(int32_t input_1, int16_t input_2, int32_t input_3)\n{\n  int32_t result;\n  result = calculate_result(input_1, (int32_t)input_2, input_3);\n  return result;\n}",
            "called": [
                "FUN_00003ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003e9e",
            "calling": [
                "FUN_00003694"
            ],
            "imported": true,
            "current_name": "calculate_result_and_return_00003e9e"
        },
        "FUN_00003378": {
            "renaming": {
                "param_1[5]": "date_array[5]",
                "param_1[4]": "date_array[4]",
                "param_1[3]": "date_array[3]",
                "param_1[2]": "date_array[2]",
                "param_1": "date_array",
                "param_1[1]": "date_array[1]",
                "PTR_s__04i__02i__02i__02i__02i__02i_000033bc": "print_date",
                "*param_1": "date_array[0]",
                "FUN_00003378": "convert_and_print_date_00003378"
            },
            "code": "int convert_and_print_date_00003378(int *date_array)\n{\n    int year = date_array[5] + 1900;\n    int month = date_array[4] + 1;\n    int day = date_array[3];\n    int hour = date_array[2];\n    int minute = date_array[1];\n    int second = date_array[0];\n    PTR_s__04i__02i__02i__02i__02i__02i_000033bc(year, month, day, hour, minute, second);\n    return 0;\n}",
            "called": [
                "FUN_00004c84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003378",
            "calling": [
                "FUN_000033c0",
                "FUN_00003444"
            ],
            "imported": true,
            "current_name": "convert_and_print_date_00003378"
        },
        "FUN_00006768": {
            "renaming": {
                "FUN_000042a4": "initialize_data",
                "iVar2": "result",
                "uVar1": "data_length",
                "param_1": "data_ptr",
                "PTR_DAT_0000686c": "data_ptr[2]",
                "PTR_LAB_00006754_1_00006878": "callback_label",
                "FUN_00006768": "process_data_00006768",
                "FUN_00004158": "process_data_part1",
                "PTR_DAT_00006870": "data_ptr[3]",
                "FUN_00005700": "process_data_part2",
                "param_2": "param_ptr",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar3": "callback_result",
                "uVar5": "data_value",
                "PTR_DAT_00006868": "data_ptr[1]",
                "uVar4": "data_length",
                "FUN_00004b34": "cleanup_data",
                "PTR_DAT_00006874": "callback_function",
                "FUN_000043a0": "callback_handler"
            },
            "code": "undefined4 process_data_00006768(undefined4 *data_ptr, undefined4 *param_ptr, undefined4 param_3, undefined4 param_4)\n{\n  ushort data_length;\n  int result;\n  undefined4 callback_result;\n  uint data_value;\n  \n  if ((data_ptr != NULL) && (data_ptr[6] == 0)) {\n    initialize_data();\n  }\n  if (param_ptr == (undefined4 *)PTR_DAT_00006868) {\n    param_ptr = (undefined4 *)PTR_DAT_00006868;\n  }\n  else if (param_ptr == (undefined4 *)PTR_DAT_0000686c) {\n    param_ptr = (undefined4 *)PTR_DAT_0000686c;\n  }\n  else if (param_ptr == (undefined4 *)PTR_DAT_00006870) {\n    param_ptr = (undefined4 *)PTR_DAT_00006870;\n  }\n  data_length = *(ushort *)(param_ptr + 3);\n  param_ptr[1] = 0;\n  data_value = (uint)*(ushort *)(param_ptr + 3);\n  if ((int)(data_value << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(data_value << 0x1d) < 0) {\n    if ((undefined4 *)param_ptr[0xd] != NULL) {\n      if ((undefined4 *)param_ptr[0xd] != param_ptr + 0x11) {\n        cleanup_data(data_ptr);\n      }\n      param_ptr[1] = param_ptr[0x10];\n      param_ptr[0xd] = 0;\n      if (param_ptr[0x10] != 0) {\n        *param_ptr = param_ptr[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(data_value << 0x1b)) {\n      *data_ptr = 9;\n      data_length = data_length | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(data_value << 0x1c) < 0) {\n      result = process_data_00006768_part1(data_ptr,param_ptr,data_value << 0x1c,data_value,param_4);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      param_ptr[2] = 0;\n      *(ushort *)(param_ptr + 3) = *(ushort *)(param_ptr + 3) & 0xfff7;\n      param_ptr[6] = 0;\n    }\n    *(ushort *)(param_ptr + 3) = *(ushort *)(param_ptr + 3) | 4;\n  }\n  if (param_ptr[4] == 0) {\n    process_data_00006768_part2(data_ptr,param_ptr);\n  }\n  data_length = *(ushort *)(param_ptr + 3);\n  callback_result = *(undefined4 *)(param_ptr + 4);\n  result = (*(code *)param_ptr[9])(data_ptr,param_ptr[8],callback_result,param_ptr[5]);\n  param_ptr[1] = result;\n  if (0 < result) {\n    return 0;\n  }\n  data_length = *(ushort *)(param_ptr + 3);\n  if (result != 0) {\n    callback_result = 0;\n  }\n  else {\n    data_length = data_length | 0x20;\n  }\n  if (result != 0) {\n    param_ptr[1] = callback_result;\n    data_length = data_length | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(param_ptr + 3) = data_length;\n  return 0xffffffff;\n}",
            "called": [
                "FUN_000043a0",
                "FUN_0000404c",
                "FUN_00004b34",
                "FUN_00004158",
                "FUN_00005700",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006768",
            "calling": [
                "FUN_00005e10"
            ],
            "imported": true,
            "current_name": "process_data_00006768"
        },
        "FUN_00000db0": {
            "renaming": {
                "FUN_00000dcc": "execute_first_function",
                "FUN_00000d9c": "execute_second_function",
                "FUN_00000db0": "execute_functions_00000db0"
            },
            "code": "void execute_functions_00000db0(void)\n{\n  execute_first_function();\n  execute_second_function();\n  return;\n}",
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000db0",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": true,
            "current_name": "execute_functions_00000db0"
        },
        "FUN_00002600": {
            "renaming": {
                "FUN_0000285c": "send_data",
                "uVar1": "processed_data",
                "FUNC_000047e4": "perform_operation",
                "param_1": "data",
                "FUN_00002600": "process_data_00002600"
            },
            "code": "int process_data_00002600(int data)\n{\n  int processed_data = perform_operation(data);\n  send_data(processed_data);\n  return 0;\n}",
            "called": [
                "FUN_000047e4",
                "FUN_0000285c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002600",
            "calling": [
                "FUN_00003478"
            ],
            "imported": true,
            "current_name": "process_data_00002600"
        },
        "FUN_00003810": {
            "renaming": {
                "PTR_LAB_00003900": "LABEL_15",
                "PTR_LAB_000038cc": "LABEL_2",
                "PTR_LAB_00003910": "LABEL_19",
                "PTR_LAB_00003904": "LABEL_16",
                "PTR_LAB_00003914": "LABEL_DEFAULT",
                "param_1": "value",
                "PTR_LAB_000038fc": "LABEL_14",
                "PTR_LAB_000038dc": "LABEL_6",
                "PTR_LAB_000038ec": "LABEL_10",
                "PTR_LAB_000038d4": "LABEL_4",
                "PTR_LAB_000038e8": "LABEL_9",
                "PTR_LAB_000038f8": "LABEL_13",
                "FUN_00003810": "get_label_for_value_00003810",
                "PTR_LAB_000038d8": "LABEL_5",
                "PTR_LAB_0000390c": "LABEL_17",
                "puVar1": "label",
                "PTR_LAB_00003908": "LABEL_21",
                "PTR_LAB_000038e0": "LABEL_7",
                "PTR_LAB_000038f0": "LABEL_11",
                "PTR_LAB_000038d0": "LABEL_3",
                "PTR_LAB_000038e4": "LABEL_8",
                "PTR_LAB_000038f4": "LABEL_12"
            },
            "code": "undefined * get_label_for_value_00003810(int value)\n{\n  undefined *label;\n  switch(value) {\n  case 2:\n    label = PTR_LAB_000038cc;\n    break;\n  case 3:\n    label = PTR_LAB_000038d0;\n    break;\n  case 4:\n    label = PTR_LAB_000038d4;\n    break;\n  case 5:\n    label = PTR_LAB_000038d8;\n    break;\n  case 6:\n    label = PTR_LAB_000038dc;\n    break;\n  case 7:\n    label = PTR_LAB_000038e0;\n    break;\n  case 8:\n    label = PTR_LAB_000038e4;\n    break;\n  case 9:\n    label = PTR_LAB_000038e8;\n    break;\n  case 10:\n    label = PTR_LAB_000038ec;\n    break;\n  case 11:\n    label = PTR_LAB_000038f0;\n    break;\n  case 12:\n    label = PTR_LAB_000038f4;\n    break;\n  case 13:\n    label = PTR_LAB_000038f8;\n    break;\n  case 14:\n    label = PTR_LAB_000038fc;\n    break;\n  case 15:\n    label = PTR_LAB_00003900;\n    break;\n  case 16:\n    label = PTR_LAB_00003904;\n    break;\n  case 17:\n    label = PTR_LAB_0000390c;\n    break;\n  case 19:\n    label = PTR_LAB_00003910;\n    break;\n  case 21:\n    label = PTR_LAB_00003908;\n    break;\n  }\n  return label;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003810",
            "calling": [
                "FUN_00003694"
            ],
            "imported": true,
            "current_name": "get_label_for_value_00003810"
        },
        "FUN_00000ed8": {
            "renaming": {
                "FUN_00000ed8": "execute_function_with_pointer_and_link_register_00000ed8",
                "PTR_DAT_00000ef4": "PTR_FUNCTION_POINTER_DAT",
                "FUN_00004c84": "execute_function_with_pointer",
                "in_lr": "link_register"
            },
            "code": "void execute_function_with_pointer_and_link_register_00000ed8(void)\n{\n  undefined4 link_register;\n  execute_function_with_pointer(PTR_DAT_00000ef4, link_register);\n  return;\n}",
            "called": [
                "FUN_00004c84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000ed8",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": true,
            "current_name": "execute_function_with_pointer_and_link_register_00000ed8"
        },
        "FUN_000031e0": {
            "renaming": {
                "PTR_s_The_alarm_rang_000031f8": "The_alarm_rang",
                "FUN_00004db8": "printMessage",
                "FUN_000031e0": "alarmRang_000031e0"
            },
            "code": "void alarmRang_000031e0(void)\n{\n  printMessage(PTR_s_The_alarm_rang_000031f8);\n  return;\n}",
            "called": [
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000031e0",
            "calling": [],
            "imported": true,
            "current_name": "alarmRang_000031e0"
        },
        "FUN_000020f4": {
            "renaming": {
                "DAT_00002104": "data_array",
                "FUN_00002028": "allocate_memory",
                "FUN_000020f4": "initialize_data_000020f4"
            },
            "code": "void initialize_data_000020f4(void)\n{\n  int num_elements = 3;\n  int* DAT_00002104 = DAT_00002104;\n  allocate_memory(DAT_00002104, num_elements);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000020f4",
            "calling": [],
            "imported": true,
            "current_name": "initialize_data_000020f4"
        },
        "FUN_0000687c": {
            "renaming": {
                "iVar3": "i",
                "param_1": "sequence_length",
                "pbVar1": "return_val",
                "param_2": "sequence",
                "uVar2": "next_char",
                "uVar5": "end_char",
                "uVar4": "current_char",
                "FUN_0000687c": "reverse_byte_sequence_0000687c",
                "uVar6": "next_char",
                "bVar7": "is_caret"
            },
            "code": "byte* reverse_byte_sequence_0000687c(int sequence_length, byte* sequence){\n  byte* new_sequence = (byte*) malloc(sequence_length);\n  bool is_caret = false;\n  uint current_char = (uint)*sequence;\n  if (current_char == 0x5e) {\n    current_char = (uint)sequence[1];\n    sequence += 2;\n    is_caret = true;\n  }\n  else {\n    sequence++;\n  }\n  for (int i = 0; i < sequence_length; i++) {\n    *(bool *)(new_sequence + i) = is_caret;\n  }\n  if (current_char == 0) {\n    return sequence - 1;\n  }\n  else {\n    while (true) {\n      uint end_char = current_char;\n      *(bool *)(new_sequence + end_char) = !is_caret;\n      sequence++;\n      while (true) {\n        uint current_char = (uint)sequence[-1];\n        if (current_char != 0x2d) {\n          break;\n        }\n        uint next_char = (uint)*sequence;\n        if ((next_char == 0x5d) || (next_char < end_char)) {\n          goto end_loop;\n        }\n        for (uint i = end_char + 1; i < next_char; i++) {\n          *(bool *)(new_sequence + i) = !is_caret;\n        }\n        int diff = next_char - end_char - 1;\n        if (next_char <= end_char) {\n          diff = 0;\n        }\n        end_char = end_char + 1 + diff;\n        sequence += 2;\n      }\n    }\n    end_loop:\n    if (current_char == 0x5d) {\n      return sequence;\n    }\n    else {\n      return sequence - 1;\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000687c",
            "calling": [
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "imported": true,
            "current_name": "reverse_byte_sequence_0000687c"
        },
        "FUN_00005edc": {
            "renaming": {
                "bVar3": "is_hex",
                "uVar1": "result",
                "iVar4": "overflow",
                "param_1": "output",
                "pbVar7": "current_char",
                "pbVar8": "next_char",
                "param_2": "input_string",
                "param_3": "endptr",
                "param_4": "base",
                "uVar2": "digit_value",
                "uVar5": "digit",
                "FUN_00005edc": "parse_uint_from_string_00005edc",
                "uVar6": "max_digit_value"
            },
            "code": "uint parse_uint_from_string_00005edc(undefined4 *output, byte *input_string, byte **endptr, uint base) {\n  uint digit_value;\n  uint is_negative = 0;\n  byte *current_char = input_string;\n  while ((PTR_DAT_00005fd0[*current_char] & 8) != 0) {\n    current_char++;\n  }\n  if (*current_char == 0x2d) {\n    is_negative = 1;\n    current_char++;\n  }\n  else if (*current_char == 0x2b) {\n    current_char++;\n  }\n  if (base == 0) {\n    if (*current_char != 0x30) {\n      base = 10;\n      goto parse_digits;\n    }\n  }\n  else if (base != 0x10 || *current_char != 0x30) {\n    base = 10;\n    goto parse_digits;\n  }\n  if ((*current_char & 0xdf) == 0x58) {\n    base = 0x10;\n    current_char++;\n  }\n  else {\n    if (base == 0) {\n      base = 8;\n    }\n  }\n  parse_digits:\n  int overflow = 0;\n  uint max_digit_value = 0xffffffff / base;\n  uint result = 0;\n  while (true) {\n    digit_value = *current_char - 0x30;\n    if (digit_value > 9) {\n      if (*current_char - 0x41 < 0x1a) {\n        digit_value = *current_char - 0x37;\n      }\n      else if (*current_char - 0x61 < 0x1a) {\n        digit_value = *current_char - 0x57;\n      }\n      else {\n        break;\n      }\n    }\n    if (base <= digit_value) {\n      break;\n    }\n    if ((overflow < 0) || (max_digit_value < result)) {\n      overflow = -1;\n    }\n    else {\n      result = result * base + digit_value;\n      overflow = 1;\n    }\n    current_char++;\n  }\n  if (overflow < 0) {\n    *output = 0x22;\n    result = 0xffffffff;\n    if (endptr == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (is_negative != 0) {\n      result = -result;\n    }\n    if (endptr == (byte **)0x0) {\n      return result;\n    }\n    if (overflow != 0) {\n      goto set_endptr;\n    }\n  }\n  current_char--;\n  set_endptr:\n  *endptr = current_char;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005edc",
            "calling": [
                "FUN_00005fd8"
            ],
            "imported": true,
            "current_name": "parse_uint_from_string_00005edc"
        },
        "FUN_00001eea": {
            "renaming": {
                "FUN_00001eea": "set_bit_in_array_00001eea",
                "iVar2": "word_index",
                "iVar3": "data_index",
                "uVar1": "array_size",
                "param_1": "array",
                "param_2": "bit_index"
            },
            "code": "int set_bit_in_array_00001eea(uint16_t* array, uint16_t bit_index, bool set_bit) {\n  uint16_t array_size = get_array_size(array);\n  uint16_t word_index = bit_index / 16;\n  uint16_t bit_mask = 1 << (bit_index % 16);\n  if (set_bit) {\n    array[word_index] |= bit_mask;\n  } else {\n    array[word_index] &= ~bit_mask;\n  }\n  uint16_t data_index = get_data_index(array);\n  array[data_index + word_index] = (uint16_t)(bit_mask | 0x100);\n  return 0;\n}",
            "called": [
                "FUN_00001d80",
                "FUN_00001f80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001eea",
            "calling": [
                "FUN_00000e64"
            ],
            "imported": true,
            "current_name": "set_bit_in_array_00001eea"
        },
        "FUN_000023a4": {
            "renaming": {
                "software_interrupt": "trigger_interrupt",
                "FUN_000023a4": "retrieve_data_000023a4",
                "uVar1": "result",
                "auStack_88": "data_buffer",
                "FUN_00002e6c": "read_data",
                "FUN_00004db8": "connect_to_database",
                "FUN_000023d0": "initialize_network"
            },
            "code": "int retrieve_data_000023a4(void)\n{\n  int result;\n  char data_buffer[128];\n  initialize_network(0);\n  connect_to_database(database_address);\n  result = read_data(0, data_buffer, 0x80);\n  trigger_interrupt(0x3f);\n  return result;\n}",
            "called": [
                "FUN_000023d0",
                "FUN_00004db8",
                "FUN_00002e6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000023a4",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": true,
            "current_name": "retrieve_data_000023a4"
        },
        "FUN_0000240c": {
            "renaming": {
                "FUN_0000240c": "get_next_element_in_linked_list_0000240c",
                "param_1": "current_element",
                "puVar1": "next_element"
            },
            "code": "undefined4* get_next_element_in_linked_list_0000240c(undefined4* current_element){\n  undefined4* next_element = (undefined4*)*current_element;\n  if (next_element != (undefined4*)0x0) {\n    *current_element = *next_element;\n  }\n  return next_element;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000240c",
            "calling": [
                "FUN_000024bc"
            ],
            "imported": true,
            "current_name": "get_next_element_in_linked_list_0000240c"
        },
        "FUN_00004280": {
            "renaming": {
                "FUN_00004280": "do_nothing_with_pointer_00004280",
                "PTR_DAT_00004288": "PTR_POINTER",
                "do_nothing_000045ec": "do_nothing"
            },
            "code": "void do_nothing_with_pointer_00004280(void)\n{\n  do_nothing(PTR_DAT_00004288);\n  return;\n}",
            "called": [
                "FUN_000045ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004280",
            "calling": [
                "FUN_00004314"
            ],
            "imported": true,
            "current_name": "do_nothing_with_pointer_00004280"
        },
        "FUN_00001448": {
            "renaming": {
                "FUN_00001448": "process_data_00001448",
                "param_1": "index",
                "PTR_DAT_000014c0": "ptr_data",
                "second_value": "short_value_2",
                "short": "short_value",
                "first_value": "short_value_1"
            },
            "code": "void process_data_00001448(int index) {\n  short first_value = *(short *)(PTR_DAT_000014c0 + index * 0x20 + 8);\n  short second_value = *(short *)(PTR_DAT_000014c0 + index * 0x20 + 10);\n  if (first_value != -1) {\n    FUN_00001f80(*(undefined2 *)(PTR_DAT_000014c0 + index * 0x20 + 8), *(undefined4 *)(PTR_DAT_000014c0 + index * 0x20 + 0xc));\n  }\n  if (second_value != -1) {\n    FUN_00001f80(*(undefined2 *)(PTR_DAT_000014c0 + index * 0x20 + 10), *(undefined4 *)(PTR_DAT_000014c0 + index * 0x20 + 0x10));\n  }\n  return;\n}",
            "called": [
                "FUN_00001f80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001448",
            "calling": [
                "FUN_000013b8"
            ],
            "imported": true,
            "current_name": "process_data_00001448"
        },
        "FUN_00001688": {
            "renaming": {
                "FUN_00001628": "setPointerToNull",
                "FUN_00001688": "initializePointerToZero_00001688"
            },
            "code": "void initializePointerToZero_00001688(void)\n{\n  setPointerToNull(0);\n  return;\n}",
            "called": [
                "FUN_00001628"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001688",
            "calling": [],
            "imported": true,
            "current_name": "initializePointerToZero_00001688"
        },
        "FUN_00004042": {
            "renaming": {
                "FUN_00004042": "set_param_to_range_00004042",
                "param_1": "param_value",
                "FUN_00004f84": "set_range"
            },
            "code": "void set_param_to_range_00004042(undefined4 param_value)\n{\n  set_range(param_value, 0, 10);\n  return;\n}",
            "called": [
                "FUN_00004f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004042",
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "imported": true,
            "current_name": "set_param_to_range_00004042"
        },
        "FUN_00000cf0": {
            "renaming": {
                "bVar1": "is_privileged_mode",
                "FUN_00000cf0": "is_interrupts_enabled_in_privileged_mode_00000cf0",
                "uVar2": "are_interrupts_enabled"
            },
            "code": "bool is_interrupts_enabled_in_privileged_mode_00000cf0(void)\n{\n  bool is_privileged_mode = isCurrentModePrivileged();\n  bool are_interrupts_enabled = false;\n  if (is_privileged_mode) {\n    enableIRQinterrupts();\n    are_interrupts_enabled = isIRQinterruptsEnabled();\n  }\n  return are_interrupts_enabled;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000cf0",
            "calling": [
                "FUN_00000930"
            ],
            "imported": true,
            "current_name": "is_interrupts_enabled_in_privileged_mode_00000cf0"
        },
        "FUN_00000f8c": {
            "renaming": {
                "FUN_000010d4": "initialize_data",
                "uRam00000fe8": "memory_ptr_6",
                "uRam00000fd8": "memory_ptr_2",
                "uVar1": "num_bits_set",
                "puVar2": "data_ptr",
                "FUN_00000930": "count_bits_set",
                "FUN_00000f04": "handle_error",
                "uRam00000fdc": "memory_ptr_3",
                "FUN_00000cd0": "initialize_system",
                "local_18": "local_var_1",
                "FUN_00000f8c": "initialize_data_structures_00000f8c",
                "PTR_s_FAILED_ASSERTION__00001030": "ASSERTION_FAILURE_MSG",
                "iStack_24": "stack_var_1",
                "uVar3": "num_elements",
                "uStack_1c": "stack_var_3",
                "local_10": "local_var_3",
                "puRam00000fe0": "memory_ptr_4",
                "piStack_20": "stack_var_2",
                "local_14": "local_var_2",
                "puRam00000fd4": "memory_ptr_1",
                "uRam00000fe4": "memory_ptr_5"
            },
            "code": "void initialize_data_structures_00000f8c(void)\n{\n  uint num_bits_set;\n  undefined4 *data_ptr;\n  uint num_elements;\n  int stack_var_1;\n  int *stack_var_2;\n  undefined4 stack_var_3;\n  undefined4 local_var_1;\n  undefined4 local_var_2;\n  undefined4 local_var_3;\n\n  initialize_system();\n  local_var_3 = *memory_ptr_1;\n  local_var_2 = 0;\n  local_var_1 = *memory_ptr_2;\n  initialize_data(memory_ptr_3, 0x100, 0xf, 0xc);\n  local_var_3 = *memory_ptr_4;\n  local_var_2 = 0;\n  local_var_1 = *memory_ptr_5;\n  num_elements = 0xc;\n  initialize_data(memory_ptr_6, 0x600, 7);\n  stack_var_3 = 0xfd3;\n  num_bits_set = count_bits_set();\n  num_bits_set = num_bits_set >> 0x1e;\n  data_ptr = (undefined4 *)(num_elements * 0x100);\n  stack_var_1 = (num_elements >> 0x1d) << 0x11;\n  stack_var_2 = &stack_var_1;\n  if ((num_bits_set & num_bits_set - 1) != 0) {\n    handle_error(3, PTR_s_FAILED_ASSERTION__00001030);\n  }\n  *data_ptr = 0;\n  data_ptr[1] = 0;\n  data_ptr[2] = num_bits_set - 1;\n  return;\n}",
            "called": [
                "FUN_000010d4",
                "FUN_00000cd0",
                "FUN_00000930"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000f8c",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": true,
            "current_name": "initialize_data_structures_00000f8c"
        },
        "FUN_00002894": {
            "renaming": {
                "iVar1": "data_ptr",
                "DAT_000028e8": "data_ptr",
                "param_1": "num",
                "FUN_00002894": "set_parameters_and_call_function_00002894",
                "param_2": "param_2",
                "param_3": "param_3",
                "PTR_DAT_000028ec": "PTR_DAT_000028ec"
            },
            "code": "void set_parameters_and_call_function_00002894(int num, uint32_t param_2, uint32_t param_3) {\n  int DAT_000028e8 = DAT_000028e8;\n  *(uint *)(DAT_000028e8 + 0x1c) &= 0xfffffffb;\n  *(int *)(DAT_000028e8 + 8) = num - 1;\n  *(uint32_t *)PTR_DAT_000028ec = param_2;\n  *(uint32_t *)(PTR_DAT_000028ec + 4) = param_3;\n  *(uint *)(DAT_000028e8 + 0x1c) |= 4;\n  call_function_1(0x2e, 10);\n  call_function_2(0x2e);\n  return;\n}",
            "called": [
                "FUN_00002744",
                "FUN_00002714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002894",
            "calling": [
                "FUN_00002654"
            ],
            "imported": true,
            "current_name": "set_parameters_and_call_function_00002894"
        },
        "FUN_00004158": {
            "renaming": {
                "PTR_DAT_000041c4": "data_buffer_1",
                "uVar1": "result",
                "param_1": "data_size",
                "PTR_DAT_000041c8": "data_buffer_2",
                "PTR_DAT_000041cc": "data_buffer_3",
                "FUN_00004158": "process_data_00004158",
                "param_2": "data_buffer"
            },
            "code": "int process_data_00004158(int data_size, undefined *data_buffer)\n{\n  int result = 0;\n  if (*(int *)(data_buffer + 0x10) != 0) {\n    if ((data_size != 0) && (*(int *)(data_size + 0x18) == 0)) {\n      initialize_data();\n    }\n    if (data_buffer == PTR_DAT_000041c4) {\n      data_buffer = *(undefined **)(data_size + 4);\n    }\n    else if (data_buffer == PTR_DAT_000041c8) {\n      data_buffer = *(undefined **)(data_size + 8);\n    }\n    else if (data_buffer == PTR_DAT_000041cc) {\n      data_buffer = *(undefined **)(data_size + 0xc);\n    }\n    if (*(short *)(data_buffer + 0xc) != 0) {\n      if ((*(int *)(data_buffer + 100) << 0x1f) >= 0 && (*(short *)(data_buffer + 0xc) << 0x16) >= 0) {\n        process_data_00004158_1(*(undefined4 *)(data_buffer + 0x58));\n      }\n      result = process_data_00004158_2(data_size, data_buffer);\n      if (*(int *)(data_buffer + 100) << 0x1f >= 0 && (*(ushort *)(data_buffer + 0xc) << 0x16) >= 0) {\n        process_data_00004158_3(*(undefined4 *)(data_buffer + 0x58));\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_0000404c",
                "FUN_000045e8",
                "FUN_000045ec",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004158",
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "imported": true,
            "current_name": "process_data_00004158"
        },
        "FUN_00002654": {
            "renaming": {
                "uVar1": "result",
                "param_1": "input_1",
                "PTR_FUN_000026f0_1_0000268c": "function_pointer",
                "FUN_00002894": "execute",
                "FUN_00002654": "perform_operation_00002654",
                "param_2": "input_2",
                "param_3": "input_3",
                "PTR_DAT_00002688": "memory_address"
            },
            "code": "int perform_operation_00002654(int input_1, int input_2, int input_3)\n{\n  int result = get_result(input_1);\n  *(int *)PTR_DAT_00002688 = input_2;\n  execute(result, PTR_FUN_000026f0_1_0000268c, input_3);\n  return 0;\n}",
            "called": [
                "FUN_000047e4",
                "FUN_00002894"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002654",
            "calling": [
                "FUN_000033f4"
            ],
            "imported": true,
            "current_name": "perform_operation_00002654"
        },
        "FUN_00002538": {
            "renaming": {
                "DAT_00002584": "data_address_1",
                "param_1": "address",
                "DAT_00002588": "data_address_2",
                "param_2": "data",
                "FUN_00002538": "write_data_00002538"
            },
            "code": "void write_data_00002538(byte address, uint8_t data) {\n  if (address < 0) {\n    *(char *)((address & 0xf) + DAT_00002584 + 0x14) = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + DAT_00002588 + 0x300) = (char)((data & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002538",
            "calling": [
                "FUN_0000258c"
            ],
            "imported": true,
            "current_name": "write_data_00002538"
        },
        "FUN_00004c84": {
            "renaming": {
                "iVar1": "data",
                "uStack_8": "arg3",
                "param_1": "data_ptr",
                "DAT_00004cb0": "DAT_00004cb0",
                "uStack_4": "arg4",
                "uStack_c": "arg2",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar2": "arg1",
                "FUN_00004c84": "process_data_00004c84"
            },
            "code": "void process_data_00004c84(undefined4 data_ptr, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int data = *DAT_00004cb0;\n  undefined4 arg1 = data_ptr;\n  undefined4 arg2 = param_2;\n  undefined4 arg3 = param_3;\n  undefined4 arg4 = param_4;\n  if ((data != 0) && (*(int *)(data + 0x18) == 0)) {\n    cleanup_data(data);\n  }\n  do_something(data, *(undefined4 *)(data + 8), data_ptr, &arg2, arg1, &arg2);\n  return;\n}",
            "called": [
                "FUN_000057f8",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004c84",
            "calling": [
                "FUN_00002a88",
                "FUN_00002ecc",
                "FUN_00003378",
                "FUN_0000211c",
                "FUN_00002b10",
                "FUN_0000316c",
                "FUN_00002f74",
                "FUN_00002fe0",
                "FUN_0000305c",
                "FUN_00003524",
                "FUN_00003694",
                "FUN_00000f04",
                "FUN_00000ed8"
            ],
            "imported": true,
            "current_name": "process_data_00004c84"
        },
        "FUN_0000305c": {
            "renaming": {
                "param_1": "num_params",
                "local_18": "num_data",
                "auStack_20": "data",
                "param_2": "params",
                "local_10": "device_info",
                "FUN_0000305c": "write_data_to_device_0000305c",
                "local_14": "device_id"
            },
            "code": "void write_data_to_device_0000305c(int num_params, undefined4 *params)\n{\n  undefined2 data[4];\n  uint num_data;\n  int device_id;\n  undefined4 device_info;\n  int i;\n  if (num_params < 4) {\n    print_usage(PTR_s_usage___s__s__device_id___value_0_00003154, *params, params[1]);\n  }\n  else {\n    device_info = FUN_00004042(params[2]);\n    device_id = FUN_00003d24(device_info);\n    if (device_id == 0) {\n      print_error(PTR_s_error__undefined_device_given_00003158);\n    }\n    else {\n      memset(data, 0, 8);\n      num_data = num_params - 3;\n      if (num_data > 3) {\n        num_data = 3;\n      }\n      for (i = 0; i < num_data; i++) {\n        data[i] = FUN_00004042(params[i + 3]);\n      }\n      print_info(PTR_s_Writing_to_device___i____s_0000315c, device_info, *(undefined4 *)(device_id + 8));\n      write(device_id, data, num_data & 0xff);\n      int res = FUN_00003d94(device_id, data);\n      if (res < 1) {\n        if (res == -0x86) {\n          print_error(PTR_s_error__device___i_is_not_writabl_00003160, device_info);\n        }\n        else {\n          print_error(PTR_s_error__failure_to_write_to_devic_00003164, device_info);\n        }\n      }\n      else {\n        print_info(PTR_s_data_successfully_written_to_dev_00003168, device_info);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00003d94",
                "FUN_00003d24",
                "FUN_00004042",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000305c",
            "calling": [
                "FUN_0000316c"
            ],
            "imported": true,
            "current_name": "write_data_to_device_0000305c"
        },
        "FUN_000012b4": {
            "renaming": {
                "uVar1": "result",
                "param_1": "input_value",
                "FUN_00002364": "calculate_intermediate",
                "FUN_000024bc": "clear_input",
                "param_2": "input_undefined",
                "FUN_000012b4": "calculate_result_000012b4"
            },
            "code": "int calculate_result_000012b4(int input_value, undefined input_undefined) {\n  int result;\n  result = calculate_intermediate(input_value + 4, input_undefined);\n  clear_input(input_value);\n  return result;\n}",
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000012b4",
            "calling": [],
            "imported": true,
            "current_name": "calculate_result_000012b4"
        },
        "FUN_00005b34": {
            "renaming": {
                "FUN_00005b34": "FUNC_00005b34"
            },
            "code": "\ncode * FUNC_00005b34(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5\n                   )\n\n{\n  bool bVar1;\n  byte bVar2;\n  undefined *puVar3;\n  int iVar4;\n  code *pcVar5;\n  int iVar6;\n  undefined *puVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint uVar10;\n  uint **ppuVar11;\n  uint uVar12;\n  undefined *puVar13;\n  code *local_24;\n  \n  puVar3 = PTR_s_0123456789ABCDEF_00005d78;\n  bVar2 = *(byte *)(param_2 + 6);\n  puVar7 = (undefined *)((int)param_2 + 0x43);\n  local_24 = param_4;\n  if (0x78 < bVar2) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)param_2 + 0x42) = bVar2;\nLAB_00005bdc:\n    puVar7 = (undefined *)((int)param_2 + 0x42);\n    uVar8 = 1;\nLAB_00005d28:\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (bVar2 < 99) {\n    if (bVar2 == 0) goto LAB_00005d06;\n    if (bVar2 == 0x58) {\n      *(undefined *)((int)param_2 + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(bVar2) {\n  case 99:\n    uVar8 = **param_5;\n    *param_5 = *param_5 + 1;\n    *(char *)((int)param_2 + 0x42) = (char)uVar8;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    uVar10 = *param_2;\n    puVar9 = *param_5;\n    if ((int)(uVar10 << 0x18) < 0) {\n      uVar8 = *puVar9;\n      *param_5 = puVar9 + 1;\n    }\n    else {\n      uVar8 = *puVar9;\n      *param_5 = puVar9 + 1;\n      if ((uVar10 & 0x40) != 0) {\n        uVar8 = (uint)(short)uVar8;\n      }\n    }\n    if ((int)uVar8 < 0) {\n      uVar8 = -uVar8;\n      *(undefined *)((int)param_2 + 0x43) = 0x2d;\n    }\n    uVar10 = 10;\n    puVar3 = PTR_s_0123456789ABCDEF_00005d78;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ppuVar11 = (uint **)*param_5;\n    uVar10 = *param_2;\n    uVar8 = param_2[5];\n    *param_5 = (uint *)(ppuVar11 + 1);\n    puVar9 = *ppuVar11;\n    if (((int)(uVar10 << 0x18) < 0) || (-1 < (int)(uVar10 << 0x19))) {\n      *puVar9 = uVar8;\n    }\n    else {\n      *(short *)puVar9 = (short)uVar8;\n    }\nLAB_00005d06:\n    param_2[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    puVar9 = *param_5;\n    uVar8 = *param_2;\n    *param_5 = puVar9 + 1;\n    if (((int)(uVar8 << 0x18) < 0) || (-1 < (int)(uVar8 << 0x19))) {\n      uVar8 = *puVar9;\n    }\n    else {\n      uVar8 = (uint)*(ushort *)puVar9;\n    }\n    puVar3 = PTR_s_0123456789ABCDEF_00005d78;\n    if (bVar2 == 0x6f) {\n      uVar10 = 8;\n    }\n    else {\n      uVar10 = 10;\n    }\n    break;\n  case 0x70:\n    *param_2 = *param_2 | 0x20;\n  case 0x78:\n    puVar3 = PTR_s_0123456789abcdef_00005d7c;\n    *(undefined *)((int)param_2 + 0x45) = 0x78;\nLAB_00005ca8:\n    uVar10 = *param_2;\n    uVar8 = **param_5;\n    *param_5 = *param_5 + 1;\n    if ((-1 < (int)(uVar10 << 0x18)) && ((int)(uVar10 << 0x19) < 0)) {\n      uVar8 = uVar8 & 0xffff;\n    }\n    if ((int)(uVar10 << 0x1f) < 0) {\n      *param_2 = uVar10 | 0x20;\n    }\n    if (uVar8 == 0) {\n      *param_2 = *param_2 & 0xffffffdf;\n    }\n    uVar10 = 0x10;\n    break;\n  case 0x73:\n    puVar9 = *param_5;\n    *param_5 = puVar9 + 1;\n    puVar7 = (undefined *)*puVar9;\n    iVar4 = FUN_00006010(puVar7,0,param_2[1],puVar9,param_1,param_2,param_3);\n    if (iVar4 != 0) {\n      param_2[1] = iVar4 - (int)puVar7;\n    }\n    uVar8 = param_2[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)param_2 + 0x43) = 0;\nLAB_00005c36:\n  uVar12 = param_2[1];\n  param_2[2] = uVar12;\n  if (-1 < (int)uVar12) {\n    *param_2 = *param_2 & 0xfffffffb;\n  }\n  puVar13 = puVar7;\n  if ((uVar8 != 0) || (uVar12 != 0)) {\n    do {\n      puVar13 = puVar13 + -1;\n      *puVar13 = puVar3[uVar8 - uVar10 * (uVar8 / uVar10)];\n      bVar1 = uVar10 <= uVar8;\n      uVar8 = uVar8 / uVar10;\n    } while (bVar1);\n  }\n  if (((uVar10 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4])) {\n    puVar13[-1] = 0x30;\n    puVar13 = puVar13 + -1;\n  }\n  param_2[4] = (int)puVar7 - (int)puVar13;\n  puVar7 = puVar13;\nLAB_00005c84:\n  iVar4 = FUN_00005a58(param_1,param_2,&local_24,param_3,param_4);\n  if ((iVar4 == -1) || (iVar4 = (*param_4)(param_1,param_3,puVar7,param_2[4]), iVar4 == -1)) {\nLAB_00005c98:\n    pcVar5 = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar4 = 0; iVar4 < (int)(param_2[3] - (int)local_24); iVar4 = iVar4 + 1) {\n        iVar6 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar6 == -1) goto LAB_00005c98;\n      }\n    }\n    pcVar5 = (code *)param_2[3];\n    if ((int)(code *)param_2[3] < (int)local_24) {\n      pcVar5 = local_24;\n    }\n  }\n  return pcVar5;\n}\n\n",
            "called": [
                "FUN_00005a58",
                "FUN_00006010"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00005b34",
            "calling": [
                "FUN_000057f8"
            ],
            "imported": false,
            "current_name": "FUNC_00005b34"
        },
        "FUN_0000058e": {
            "renaming": {
                "*(undefined4 **) *param_1": "*(undefined4 **) *head_ptr",
                "param_1": "head_ptr",
                "*param_1": "*head_ptr",
                "*param_2": "*new_head_ptr",
                "param_2": "new_head_ptr",
                "*(undefined4 *)*param_1": "*(undefined4 *)*head_ptr",
                "FUN_0000058e": "reverse_linked_list_0000058e"
            },
            "code": "void reverse_linked_list_0000058e(int *head_ptr, undefined4 *new_head_ptr)\n{\n  if (*head_ptr == 0) {\n    *new_head_ptr = new_head_ptr;\n  }\n  else {\n    *new_head_ptr = *(undefined4 *)*head_ptr;\n    *(undefined4 **) *head_ptr = new_head_ptr;\n  }\n  *head_ptr = (int)new_head_ptr;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000058e",
            "calling": [
                "FUN_00000698"
            ],
            "imported": true,
            "current_name": "reverse_linked_list_0000058e"
        },
        "FUN_0000656c": {
            "renaming": {
                "FUN_0000656c": "FUNC_0000656c"
            },
            "code": "\nundefined4 FUNC_0000656c(undefined4 param_1,uint *param_2,byte **param_3,undefined4 *param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  code *pcVar3;\n  uint uVar4;\n  byte *pbVar5;\n  uint uVar6;\n  undefined4 *puVar7;\n  uint *puVar8;\n  uint *puVar9;\n  uint *puVar10;\n  int unaff_r9;\n  int iVar11;\n  undefined4 local_34 [4];\n  \n  local_34[0] = *(undefined4 *)PTR_PTR_DAT_00006744;\n  local_34[1] = *(undefined4 *)(PTR_PTR_DAT_00006744 + 4);\n  local_34[2] = *(undefined4 *)(PTR_PTR_DAT_00006744 + 8);\n  pcVar3 = (code *)PTR_LAB_00004f80_1_0000674c;\n  if (param_2[6] != 3) {\n    pcVar3 = (code *)PTR_LAB_00005fd4_1_00006748;\n  }\n  uVar6 = param_2[2];\n  uVar4 = uVar6 - 1;\n  if (0x15c < uVar4) {\n    unaff_r9 = uVar6 - 0x15d;\n    uVar6 = 0x15d;\n  }\n  if (0x15c < uVar4) {\n    param_2[2] = uVar6;\n  }\n  puVar10 = param_2 + 7;\n  if (uVar4 < 0x15d) {\n    unaff_r9 = 0;\n  }\n  *param_2 = *param_2 | 0xd00;\n  iVar11 = 0;\n  puVar9 = puVar10;\n  do {\n    iVar1 = FUN_00006010(local_34[iVar11],**param_3,2);\n    if (iVar1 != 0) {\n      if (iVar11 == 1) {\n        if (param_2[1] == 0) {\n          param_2[1] = 8;\n          *param_2 = *param_2 | 0x200;\n        }\n        uVar4 = *param_2 & 0xfffffaff;\nLAB_000065f4:\n        *param_2 = uVar4;\n      }\n      else if (iVar11 == 2) {\n        if ((*param_2 & 0x600) != 0x200) goto LAB_00006624;\n        param_2[1] = 0x10;\n        uVar4 = *param_2 | 0x100;\n        goto LAB_000065f4;\n      }\n      uVar4 = param_2[2];\n      param_2[2] = uVar4 - 1;\n      if (uVar4 != 0) {\n        pbVar5 = *param_3;\n        *param_3 = pbVar5 + 1;\n        puVar8 = (uint *)((int)puVar9 + 1);\n        *(byte *)puVar9 = *pbVar5;\n        pbVar5 = param_3[1];\n        param_3[1] = pbVar5 + -1;\n        puVar9 = puVar8;\n        if (((int)(pbVar5 + -1) < 1) &&\n           (iVar1 = (*(code *)param_2[0x60])(param_1,param_3), iVar1 != 0)) {\n          iVar11 = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    iVar11 = iVar11 + 1;\n  } while (iVar11 != 3);\n  if (param_2[1] == 0) {\n    param_2[1] = 10;\n  }\n  FUN_0000687c(param_2[5],(int)PTR_DAT_00006750 - param_2[1]);\n  iVar11 = 0;\n  while( true ) {\n    puVar8 = puVar9;\n    if (param_2[2] == 0) break;\n    pbVar5 = *param_3;\n    uVar4 = (uint)*pbVar5;\n    if (*(char *)(param_2[5] + uVar4) == '\\0') break;\n    if ((uVar4 == 0x30) && ((int)(*param_2 << 0x14) < 0)) {\n      iVar11 = iVar11 + 1;\n      if (unaff_r9 != 0) {\n        unaff_r9 = unaff_r9 + -1;\n        param_2[2] = param_2[2] + 1;\n      }\n    }\n    else {\n      *param_2 = *param_2 & 0xfffff6ff;\n      puVar8 = (uint *)((int)puVar9 + 1);\n      *(byte *)puVar9 = *pbVar5;\n    }\n    pbVar5 = param_3[1];\n    param_3[1] = pbVar5 + -1;\n    if ((int)(pbVar5 + -1) < 1) {\n      iVar1 = (*(code *)param_2[0x60])(param_1,param_3);\n      if (iVar1 != 0) break;\n    }\n    else {\n      *param_3 = *param_3 + 1;\n    }\n    param_2[2] = param_2[2] - 1;\n    puVar9 = puVar8;\n  }\nLAB_000066ca:\n  if ((int)(*param_2 << 0x17) < 0) {\n    if (puVar10 < puVar8) {\n      (*(code *)param_2[0x5f])(param_1,*(byte *)((int)puVar8 + -1),param_3);\n      puVar8 = (uint *)((int)puVar8 + -1);\n    }\n    if (puVar8 == puVar10) {\n      return 1;\n    }\n  }\n  if ((*param_2 & 0x10) == 0) {\n    *(byte *)puVar8 = 0;\n    uVar2 = (*pcVar3)(param_1,puVar10,0,param_2[1]);\n    puVar7 = (undefined4 *)*param_4;\n    uVar4 = *param_2;\n    *param_4 = puVar7 + 1;\n    puVar7 = (undefined4 *)*puVar7;\n    if ((uVar4 & 0x20) == 0) {\n      if ((int)(uVar4 << 0x1f) < 0) {\n        *(short *)puVar7 = (short)uVar2;\n      }\n      else {\n        *puVar7 = uVar2;\n      }\n    }\n    else {\n      *puVar7 = uVar2;\n    }\n    param_2[3] = param_2[3] + 1;\n  }\n  param_2[4] = (uint)((int)puVar8 + param_2[4] + (iVar11 - (int)puVar10));\n  return 0;\n}\n\n",
            "called": [
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0000656c",
            "calling": [
                "FUN_000061cc"
            ],
            "imported": false,
            "current_name": "FUNC_0000656c"
        },
        "FUN_000025f4": {
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4",
                "FUN_000027b0": "start_system"
            },
            "code": "void initialize_system_000025f4(void)\n{\n  start_system();\n  return;\n}",
            "called": [
                "FUN_000027b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000025f4",
            "calling": [
                "FUN_00002396"
            ],
            "imported": true,
            "current_name": "initialize_system_000025f4"
        },
        "FUN_00001ddc": {
            "renaming": {
                "FUN_00001ddc": "print_char_with_tab_prefix_00001ddc",
                "DAT_00001e08": "output_buffer",
                "param_1": "character",
                "FUN_00001d3a": "print_to_buffer",
                "FUN_00001da2": "get_character",
                "cVar1": "char_to_print"
            },
            "code": "void print_char_with_tab_prefix_00001ddc(undefined2 character){\n  char char_to_print = get_character(character);\n  print_to_buffer(DAT_00001e08, char_to_print + '\\t');\n  return;\n}",
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001ddc",
            "calling": [
                "FUN_00001f80"
            ],
            "imported": true,
            "current_name": "print_char_with_tab_prefix_00001ddc"
        },
        "FUN_00002ecc": {
            "renaming": {
                "FUN_00002ecc": "read_data_from_device_and_print_00002ecc",
                "uVar1": "device_data",
                "auStack_1c": "buffer",
                "param_1": "device_address",
                "param_2": "buffer_address",
                "uVar2": "device_type",
                "local_14": "data_size"
            },
            "code": "void read_data_from_device_and_print_00002ecc(uint32_t device_address, int buffer_address)\n{\n  uint32_t data_size;\n  uint8_t buffer[8];\n  data_size = get_data_from_device(buffer_address, buffer);\n  if ((int)data_size < 1) {\n    print_error(PTR_s_error__failed_to_read_from_devic_00002f28,device_address);\n  }\n  else {\n    uint32_t device_data = *(uint32_t *)(buffer_address + 8);\n    uint8_t device_type = *(uint8_t *)(*(int *)(buffer_address + 0xc) + 8);\n    print_data_from_device(PTR_s_Reading_from___i___s__s__00002f2c,device_address,device_data,device_type);\n    process_data(buffer,data_size & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_00004c84",
                "FUN_00003d64",
                "FUN_000039e8",
                "FUN_00003694"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002ecc",
            "calling": [
                "FUN_00002f30",
                "FUN_00002fe0"
            ],
            "imported": true,
            "current_name": "read_data_from_device_and_print_00002ecc"
        },
        "FUN_00000d76": {
            "renaming": {
                "FUN_00000d76": "setToZeroAfterFuncCall_00000d76",
                "FUN_00000d44": "getAddress",
                "param_1": "baseAddress",
                "param_2": "byteValue",
                "puVar1": "addressPtr"
            },
            "code": "void setToZeroAfterFuncCall_00000d76(undefined4 baseAddress, undefined byteValue){\n  undefined4 *addressPtr;\n  addressPtr = (undefined4 *)getAddress(baseAddress, byteValue);\n  *addressPtr = 0;\n  return;\n}",
            "called": [
                "FUN_00000d44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d76",
            "calling": [
                "FUN_00000d9c"
            ],
            "imported": true,
            "current_name": "setToZeroAfterFuncCall_00000d76"
        },
        "FUN_000057a8": {
            "renaming": {
                "iVar1": "buffer_length",
                "FUN_000057a8": "decrement_and_append_char_to_buffer_000057a8",
                "puVar2": "current_position",
                "param_1": "parameter_1",
                "param_2": "character",
                "param_3": "buffer"
            },
            "code": "int decrement_and_append_char_to_buffer_000057a8(undefined4 param_1, int character, undefined4 *buffer){\n  int buffer_length = buffer[2] - 1;\n  buffer[2] = buffer_length;\n  if (buffer_length < 0 && (buffer_length < (int)buffer[6] || character == 10)){\n    int error_code = FUN_00005404();\n    return error_code;\n  }\n  undefined *current_position = (undefined *)*buffer;\n  *buffer = current_position + 1;\n  *current_position = (char)character;\n  return character;\n}",
            "called": [
                "FUN_00005404"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000057a8",
            "calling": [
                "FUN_000057d2"
            ],
            "imported": true,
            "current_name": "decrement_and_append_char_to_buffer_000057a8"
        },
        "FUN_00001696": {
            "renaming": {
                "param_1": "address",
                "FUN_00001696": "calculate_offset_00001696",
                "param_2": "index",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int calculate_offset_00001696(uint address,int index)\n{\n    uint masked_address = address & 0xf0000000;\n    uint lower_address_bits = address & 0xfffff;\n    uint shifted_lower_address_bits = lower_address_bits << 5;\n    uint offset = index * 4 + masked_address + shifted_lower_address_bits + 0x2000000;\n    return offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001696",
            "calling": [
                "FUN_000016ec",
                "FUN_000016c8",
                "FUN_00001710"
            ],
            "imported": true,
            "current_name": "calculate_offset_00001696"
        },
        "FUN_000008b8": {
            "renaming": {
                "local_c": "current_entry",
                "DAT_000008f8": "expected_value",
                "PTR_DAT_000008f4": "pointer_start",
                "PTR_Elf32_Rel_ARRAY_000008fc": "pointer_end",
                "FUN_000008b8": "count_Elf32_Rel_entries_000008b8",
                "num_entries": "num_entries"
            },
            "code": "int count_Elf32_Rel_entries_000008b8(void)\n{\n  int *current_entry = (int *)PTR_DAT_000008f4;\n  int DAT_000008f8 = DAT_000008f8;\n\n  while (*current_entry == DAT_000008f8 && current_entry < PTR_Elf32_Rel_ARRAY_000008fc)\n  {\n    current_entry++;\n  }\n\n  int num_entries = ((int)PTR_Elf32_Rel_ARRAY_000008fc - (int)current_entry) >> 2;\n  return num_entries << 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000008b8",
            "calling": [
                "FUN_0000211c"
            ],
            "imported": true,
            "current_name": "count_Elf32_Rel_entries_000008b8"
        },
        "FUN_000024bc": {
            "renaming": {
                "FUN_00000738": "printCharacter",
                "iVar3": "tempVar",
                "FUN_0000240c": "getNumberConvertedToDecimal",
                "uVar1": "temp",
                "FUN_00000698": "printDecimalNumber",
                "param_1": "number",
                "FUN_00000cd0": "getConversionResult",
                "FUN_000024bc": "convertToNegativeOneIfZeroOrPositive_000024bc",
                "FUN_00000d0c": "performConversion",
                "uVar2": "result"
            },
            "code": "void convertToNegativeOneIfZeroOrPositive_000024bc(int *number)\n{\n  undefined temp;\n  undefined4 result = getConversionResult();\n  if (*number == 0) {\n    performConversion(result);\n  }\n  else if (*number == -1) {\n    *number = 0;\n    performConversion(result);\n  }\n  else {\n    int tempVar = getNumberConvertedToDecimal(number);\n    printDecimalNumber(tempVar + -8, 10);\n    if (*number == 0) {\n      *number = -1;\n    }\n    temp = *(undefined *)(tempVar + -3);\n    performConversion(result);\n    printCharacter(temp);\n  }\n  return;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_00000698",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_0000240c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000024bc",
            "calling": [
                "FUN_000012b4"
            ],
            "imported": true,
            "current_name": "convertToNegativeOneIfZeroOrPositive_000024bc"
        },
        "FUN_00000490": {
            "renaming": {
                "uVar1": "result",
                "FUN_00000e14": "compute_data",
                "param_1": "input_1",
                "FUN_00000490": "perform_computation_00000490",
                "param_2": "input_2",
                "param_3": "data_1",
                "param_4": "data_2"
            },
            "code": "int perform_computation_00000490(int input_1, int input_2, int data_1, int data_2)\n{\n  int result = compute_data(data_1, data_2);\n  return result;\n}",
            "called": [
                "FUN_00000e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000490",
            "calling": [
                "FUN_00004dc8"
            ],
            "imported": true,
            "current_name": "perform_computation_00000490"
        },
        "FUN_0000091c": {
            "renaming": {
                "FUN_0000091c": "get_data_pointer_0000091c",
                "PTR_DAT_0000092c": "data_pointer"
            },
            "code": "void* get_data_pointer_0000091c(void)\n{\n  return PTR_DAT_0000092c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000091c",
            "calling": [
                "FUN_0000211c"
            ],
            "imported": true,
            "current_name": "get_data_pointer_0000091c"
        },
        "FUN_00001f80": {
            "renaming": {
                "FUN_00001ddc": "clear_data_buffer",
                "iVar1": "data_array_index_1",
                "iVar2": "data_array_index_2",
                "param_1": "index",
                "FUN_00001dc0": "get_data_array_index_2",
                "FUN_00001d5e": "get_data_array_index_1",
                "param_2": "new_value",
                "FUN_00001da2": "get_param_1",
                "FUN_00001ec4": "process_data",
                "uVar3": "old_value",
                "uVar4": "flag_bits",
                "FUN_00001f80": "update_data_at_index_00001f80"
            },
            "code": "void update_data_at_index_00001f80(undefined2 index, undefined4 new_value) {\n  int data_array_index_1;\n  int data_array_index_2;\n  undefined4 old_value;\n  uint flag_bits;\n\n  clear_data_buffer(index);\n  data_array_index_1 = get_data_array_index_1(index);\n  data_array_index_2 = get_data_array_index_2(index);\n  old_value = *(uint *)(data_array_index_1 + data_array_index_2 * 4);\n  *(undefined4 *)(data_array_index_1 + data_array_index_2 * 4) = new_value;\n  flag_bits = old_value & 0xf0000;\n  if (flag_bits != 0) {\n    undefined4 param_1 = get_param_1(index);\n    int param_2 = get_data_array_index_2(index);\n    process_data(param_1, param_2);\n  }\n  return;\n}",
            "called": [
                "FUN_00001ddc",
                "FUN_00001ec4",
                "FUN_00001da2",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001f80",
            "calling": [
                "FUN_00001448",
                "FUN_00001eea"
            ],
            "imported": true,
            "current_name": "update_data_at_index_00001f80"
        },
        "FUN_00000e64": {
            "renaming": {
                "FUN_00001eea": "fun2",
                "FUN_00000e64": "set_bit_and_clear_mask_00000e64",
                "DAT_00000ed4": "data_2",
                "DAT_00000ed0": "data_1",
                "FUN_00001034": "ptr_offset",
                "FUN_00001274": "fun1",
                "FUN_00001ff6": "fun3"
            },
            "code": "void set_bit_and_clear_mask_00000e64(void)\n{\n  uint* ptr1 = (uint*)(0x00001034 + DAT_00000ed0 + 4);\n  uint* ptr2 = (uint*)(DAT_00000ed4 + 0x48);\n  *ptr1 |= 0x200;\n  *ptr2 &= 0xFEFFF8FF;\n  fun1();\n  fun2(0x2056, 0x80);\n  fun2(0x511a, 0x80);\n  fun2(0x2055, 0x80);\n  fun3(0x2056);\n  fun3(0x511a);\n  fun3(0x2055);\n  return;\n}",
            "called": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001274"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000e64",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": true,
            "current_name": "set_bit_and_clear_mask_00000e64"
        },
        "FUN_000026e4": {
            "renaming": {
                "FUN_000026e4": "initialize_system_000026e4",
                "FUN_00002970": "initialize_hardware"
            },
            "code": "void initialize_system_000026e4(void)\n{\n  initialize_hardware();\n  return;\n}",
            "called": [
                "FUN_00002970"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000026e4",
            "calling": [
                "FUN_00003524"
            ],
            "imported": true,
            "current_name": "initialize_system_000026e4"
        },
        "FUN_00000d44": {
            "renaming": {
                "FUN_00000d44": "calculate_new_value_00000d44",
                "param_1": "input_value",
                "param_2": "multiplier",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int calculate_new_value_00000d44(uint32_t input_value, int multiplier) {\n    uint32_t masked_value = input_value & 0xf0000000;\n    uint32_t shifted_value = (input_value & 0xfffff) << 5;\n    int constant_value = 0x2000000;\n    int result = multiplier * 4 + masked_value + shifted_value + constant_value;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d44",
            "calling": [
                "FUN_00000d76"
            ],
            "imported": true,
            "current_name": "calculate_new_value_00000d44"
        },
        "FUN_00000698": {
            "renaming": {
                "PTR_DAT_00000734": "status_flags",
                "FUN_00000698": "update_status_00000698",
                "param_1": "status",
                "param_2": "index",
                "PTR_DAT_00000730": "sub_status_data"
            },
            "code": "void update_status_00000698(int status, uint8_t index)\n{\n    if (index < 9) {\n        uint8_t sub_index = *(uint8_t *)(status + 4);\n        if ((sub_index > 8) && (is_sub_status_zero(sub_index, index))) {\n            *PTR_DAT_00000734 = *PTR_DAT_00000734 & ~(1 << *(int8_t *)(status + 5));\n        }\n    }\n    else {\n        uint8_t sub_index = *(uint8_t *)(status + 4);\n        if (sub_index < 9) {\n            update_sub_status(sub_index, status + 8);\n            *PTR_DAT_00000734 = *PTR_DAT_00000734 | 1 << *(int8_t *)(status + 5);\n        }\n    }\n    *(int8_t *)(status + 4) = (int8_t)index;\n    return;\n}",
            "called": [
                "FUN_0000058e",
                "FUN_000005ca"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000698",
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc",
                "FUN_00000794",
                "FUN_00002434"
            ],
            "imported": true,
            "current_name": "update_status_00000698"
        },
        "FUN_00000cd0": {
            "renaming": {
                "bVar1": "is_privileged_mode",
                "FUN_00000cd0": "is_privileged_mode_and_irq_enabled_00000cd0",
                "uVar2": "is_irq_enabled"
            },
            "code": "bool is_privileged_mode_and_irq_enabled_00000cd0(void)\n{\n  bool is_privileged_mode = (bool)isCurrentModePrivileged();\n  bool is_irq_enabled = false;\n  if (is_privileged_mode) {\n    is_irq_enabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return is_irq_enabled;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000cd0",
            "calling": [
                "FUN_000010d4",
                "FUN_00000e58",
                "FUN_000024bc",
                "FUN_00001c84",
                "FUN_00000f8c",
                "FUN_00000f04",
                "FUN_00000794",
                "FUN_00000428",
                "FUN_00002434"
            ],
            "imported": true,
            "current_name": "is_privileged_mode_and_irq_enabled_00000cd0"
        },
        "FUN_00000cc0": {
            "renaming": {
                "bVar1": "is_privileged_mode",
                "disableIRQinterrupts": "disable_irq_interrupts",
                "uRam00000ccc": "interrupt_control_register",
                "FUN_00000cc0": "check_interrupts_and_return_status_00000cc0",
                "isIRQinterruptsEnabled": "is_irq_interrupts_enabled",
                "uVar2": "interrupt_status",
                "isCurrentModePrivileged": "is_current_mode_privileged"
            },
            "code": "undefined4 check_interrupts_and_return_status_00000cc0(void)\n{\n  bool is_privileged_mode;\n  undefined4 interrupt_status = 0;\n\n  set_interrupt_priority(10, interrupt_control_register);\n  is_privileged_mode = (bool)is_current_mode_privileged();\n  if (is_privileged_mode) {\n    interrupt_status = is_irq_interrupts_enabled();\n  }\n  disable_irq_interrupts();\n  return interrupt_status;\n}",
            "called": [
                "FUN_00000f04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000cc0",
            "calling": [
                "FUN_00000dc0"
            ],
            "imported": true,
            "current_name": "check_interrupts_and_return_status_00000cc0"
        },
        "FUN_00002994": {
            "renaming": {
                "DAT_000029f8": "data_ptr",
                "FUN_00002994": "execute_callbacks_00002994",
                "PTR_DAT_000029fc": "callback_ptr"
            },
            "code": "void execute_callbacks_00002994(void)\n{\n  int DAT_000029f8 = DAT_000029f8;\n  if (((*(uint *)(DAT_000029f8 + 0x14) & 4) != 0) && (*(int *)PTR_DAT_000029fc != 0)) {\n    *(uint *)(DAT_000029f8 + 0x1c) = *(uint *)(DAT_000029f8 + 0x1c) & 0xfffffffb;\n    (**(code **)PTR_DAT_000029fc)(*(undefined4 *)(PTR_DAT_000029fc + 4));\n  }\n  if (((*(uint *)(DAT_000029f8 + 0x14) & 2) != 0) && (*(int *)(PTR_DAT_000029fc + 8) != 0)) {\n    (**(code **)(PTR_DAT_000029fc + 8))(*(undefined4 *)(PTR_DAT_000029fc + 0xc));\n  }\n  execute_subroutine();\n  return;\n}",
            "called": [
                "FUN_00002798"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002994",
            "calling": [],
            "imported": true,
            "current_name": "execute_callbacks_00002994"
        },
        "FUN_00000d2a": {
            "renaming": {
                "bVar1": "is_privileged_mode",
                "FUN_00000d2a": "get_exception_number_if_privileged_mode_00000d2a",
                "uVar2": "exception_number"
            },
            "code": "uint get_exception_number_if_privileged_mode_00000d2a(void)\n{\n  bool is_privileged_mode;\n  uint exception_number;\n  \n  exception_number = 0;\n  is_privileged_mode = (bool)isCurrentModePrivileged();\n  if (is_privileged_mode) {\n    exception_number = getCurrentExceptionNumber();\n    exception_number = exception_number & 0x1f;\n  }\n  return exception_number;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d2a",
            "calling": [
                "FUN_00000738"
            ],
            "imported": true,
            "current_name": "get_exception_number_if_privileged_mode_00000d2a"
        },
        "FUN_00001ff6": {
            "renaming": {
                "iVar2": "ptr_data",
                "uVar1": "bit_index",
                "param_1": "position",
                "FUN_00001ff6": "set_bit_at_position_00001ff6"
            },
            "code": "void set_bit_at_position_00001ff6(uint8_t position) {\n  uint8_t bit_index = get_bit_index(position);\n  int32_t ptr_data = get_data_ptr(position);\n  *(int32_t *)(ptr_data + 4) = 1 << bit_index;\n  return;\n}",
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001ff6",
            "calling": [
                "FUN_00000e64"
            ],
            "imported": true,
            "current_name": "set_bit_at_position_00001ff6"
        },
        "FUN_000013b8": {
            "renaming": {
                "uVar1": "result",
                "FUN_00001448": "call_function1",
                "FUN_00000f04": "assert_failed",
                "param_1": "index",
                "param_2": "value1",
                "FUN_00001392": "call_function2",
                "param_3": "value2",
                "param_4": "flag",
                "FUN_000013b8": "write_to_data_structure_000013b8",
                "PTR_s_FAILED_ASSERTION__0000143c": "FAILED_ASSERTION",
                "PTR_DAT_00001444": "unknown_data_structure",
                "FUN_000014c4": "call_function3",
                "PTR_DAT_00001440": "data_structure"
            },
            "code": "int write_to_data_structure_000013b8(int index, int value1, int value2, int flag)\n{\n  int result;\n  if (index != 0) {\n    assert_failed(3, PTR_s_FAILED_ASSERTION__0000143c);\n  }\n  PTR_DAT_00001440[index] = value1;\n  PTR_DAT_00001440[index + 1] = value2;\n  call_function1(index);\n  call_function2(PTR_DAT_00001440[index + 6], PTR_DAT_00001440[index + 7]);\n  if (PTR_DAT_00001440[index + 8] == 0) {\n    call_function3(index, flag);\n    result = 0;\n  }\n  else {\n    result = -1;\n  }\n  return result;\n}",
            "called": [
                "FUN_00001448",
                "FUN_00000f04",
                "FUN_00001392",
                "FUN_000014c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000013b8",
            "calling": [
                "FUN_00000df4"
            ],
            "imported": true,
            "current_name": "write_to_data_structure_000013b8"
        },
        "FUN_00002a88": {
            "renaming": {
                "PTR_PTR_s_reboot_00002b0c": "reboot_command",
                "PTR_s_Description_00002afc": "description_label",
                "local_c": "current_command",
                "param_1": "commands",
                "local_18": "command_info",
                "PTR_s___20s__s_00002b04": "header_format",
                "PTR_s__________________________________00002b08": "footer_format",
                "FUN_00004db8": "print_separator",
                "local_10": "index",
                "PTR_s_Command_00002b00": "command_label",
                "FUN_00004c84": "print_command_info",
                "FUN_00002a88": "print_command_descriptions_00002a88"
            },
            "code": "void print_command_descriptions_00002a88(int *commands)\n{\n  int *command_info [2];\n  uint index;\n  int *current_command;\n\n  print_header(\"  %-20s %s\\n\", \"COMMAND\", \"DESCRIPTION\");\n  print_separator();\n  print_footer(\"\\n\");\n\n  command_info[0] = commands;\n  command_info[1] = (int *)PTR_PTR_s_reboot_00002b0c;\n\n  for (index = 0; index < 2; index++) {\n    current_command = command_info[index];\n    if (current_command != (int *)0x0) {\n      for (; *current_command != 0; current_command += 3) {\n        print_command_info(\"  %-20s %s\\n\", *current_command, current_command[1]);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00004c84",
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002a88",
            "calling": [
                "FUN_00002b10"
            ],
            "imported": true,
            "current_name": "print_command_descriptions_00002a88"
        },
        "FUN_00002f30": {
            "renaming": {
                "FUN_00002f30": "print_linked_list_00002f30",
                "FUN_00002ecc": "print_node",
                "local_c": "current_node",
                "FUN_00004db8": "print_separator",
                "local_10": "current_index"
            },
            "code": "void print_linked_list_00002f30(void)\n{\n  int current_index = 0;\n  undefined4 *current_node = *(undefined4 **)PTR_DAT_00002f6c;\n  while (current_node != (undefined4 *)0x0) {\n    print_node(current_index, current_node);\n    print_separator(PTR_DAT_00002f70);\n    current_index++;\n    current_node = (undefined4 *)*current_node;\n  }\n  return;\n}",
            "called": [
                "FUN_00002ecc",
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002f30",
            "calling": [
                "FUN_00002fe0"
            ],
            "imported": true,
            "current_name": "print_linked_list_00002f30"
        },
        "FUN_00001e44": {
            "renaming": {
                "iVar1": "byte_offset",
                "FUN_00001e44": "update_bits_in_memory_00001e44",
                "param_1": "base_address",
                "param_2": "bit_offset",
                "param_3": "new_value",
                "PTR_DAT_00001ec0": "target_memory_address"
            },
            "code": "void update_bits_in_memory_00001e44(int base_address, uint bit_offset, int new_value) {\n  int byte_offset = (int)bit_offset >> 3;\n  uint* target_address = (uint*)(PTR_DAT_00001ec0 + (byte_offset + base_address * 4) * 4);\n  uint mask = ~(0xf << ((bit_offset & 7) << 2));\n  *target_address = (*target_address & mask) | new_value << ((bit_offset & 7) << 2);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001e44",
            "calling": [
                "FUN_00001ec4"
            ],
            "imported": true,
            "current_name": "update_bits_in_memory_00001e44"
        },
        "FUN_00001318": {
            "renaming": {
                "FUN_00001318": "set_bit_in_array_00001318",
                "param_1": "bit_index",
                "DAT_00001344": "array_ptr"
            },
            "code": "void set_bit_in_array_00001318(uint8_t bit_index) {\n    uint8_t array_index = bit_index >> 5;\n    uint32_t* DAT_00001344 = (uint32_t*)(DAT_00001344 + (array_index * 4));\n    uint8_t bit_offset = bit_index & 0x1f;\n    uint32_t bit_mask = 1 << bit_offset;\n    *DAT_00001344 = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001318",
            "calling": [
                "FUN_000014c4"
            ],
            "imported": true,
            "current_name": "set_bit_in_array_00001318"
        },
        "FUN_00000900": {
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "main_stack_pointer"
            },
            "code": "uint32_t get_main_stack_pointer_00000900(void)\n{\n  uint32_t main_stack_pointer;\n  main_stack_pointer = getMainStackPointer();\n  return main_stack_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000900",
            "calling": [
                "FUN_0000211c"
            ],
            "imported": true,
            "current_name": "get_main_stack_pointer_00000900"
        },
        "FUN_00004274": {
            "renaming": {
                "PTR_DAT_0000427c": "PTR_DATA",
                "FUN_00004274": "do_nothing_and_return_00004274"
            },
            "code": "void do_nothing_and_return_00004274(void)\n{\n  do_nothing(PTR_DAT_0000427c);\n  return;\n}",
            "called": [
                "FUN_000045e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004274",
            "calling": [
                "FUN_00004314"
            ],
            "imported": true,
            "current_name": "do_nothing_and_return_00004274"
        },
        "FUN_00002fe0": {
            "renaming": {
                "FUN_00002f30": "print_success",
                "PTR_s_error__undefined_device_id_given_00003058": "undefined_device_id_error",
                "PTR_s_usage___s__s__device_id__all_00003050": "usage_message",
                "FUN_00003d24": "is_device_id_valid",
                "FUN_00002ecc": "assign_device_id",
                "iVar1": "device_index",
                "param_1": "device_count",
                "FUN_00004042": "get_device_id",
                "FUN_00002fe0": "check_device_id_00002fe0",
                "PTR_DAT_00003054": "valid_device_ids",
                "param_2": "device_ids",
                "FUN_00004db8": "print_error",
                "uVar2": "device_id",
                "FUN_00004e52": "find_device_index"
            },
            "code": "void check_device_id_00002fe0(int device_count, undefined4 *device_ids)\n{\n  int device_index;\n  undefined4 device_id;\n  \n  if (device_count < 3) {\n    print_usage(PTR_s_usage___s__s__device_id__all_00003050, *device_ids, device_ids[1]);\n  }\n  else {\n    device_index = find_device_index(device_ids[2], PTR_DAT_00003054);\n    if (device_index == 0) {\n      print_error(PTR_s_error__undefined_device_id_given_00003058);\n    }\n    else {\n      device_id = get_device_id(device_ids[2]);\n      if (is_device_id_valid(device_id) == 0) {\n        print_error(PTR_s_error__undefined_device_id_given_00003058);\n      }\n      else {\n        assign_device_id(device_id, device_index);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00002f30",
                "FUN_00002ecc",
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00004e52",
                "FUN_00003d24",
                "FUN_00004042"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002fe0",
            "calling": [
                "FUN_0000316c"
            ],
            "imported": true,
            "current_name": "check_device_id_00002fe0"
        },
        "FUN_00001dc0": {
            "renaming": {
                "param_1": "value",
                "FUN_00001dc0": "maskLeastSignificantBits_00001dc0"
            },
            "code": "ushort maskLeastSignificantBits_00001dc0(ushort value) {\n  ushort leastSignificantBits = 0x3f;\n  return value & leastSignificantBits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001dc0",
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "imported": true,
            "current_name": "maskLeastSignificantBits_00001dc0"
        },
        "FUN_00000df4": {
            "renaming": {
                "PTR_FUN_000012b4_1_00000e10": "my_callback",
                "FUN_00000df4": "initialize_00000df4",
                "FUN_000013b8": "set_defaults",
                "DAT_00000e0c": "my_data"
            },
            "code": "void initialize_00000df4(void)\n{\n  set_defaults(0, 115200, PTR_FUN_000012b4_1_00000e10, DAT_00000e0c);\n  return;\n}",
            "called": [
                "FUN_000013b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000df4",
            "calling": [
                "FUN_00000410"
            ],
            "imported": true,
            "current_name": "initialize_00000df4"
        },
        "FUN_00002400": {
            "renaming": {
                "FUN_00002400": "do_nothing_00002400"
            },
            "code": "\nvoid do_nothing_00002400(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002400",
            "calling": [
                "FUN_00000f04"
            ],
            "imported": true,
            "current_name": "do_nothing_00002400"
        },
        "FUN_00002eb4": {
            "renaming": {
                "FUN_0000211c": "initialize_system",
                "FUN_00002eb4": "execute_program_00002eb4"
            },
            "code": "undefined4 execute_program_00002eb4(void)\n{\n  initialize_system();\n  return 0;\n}",
            "called": [
                "FUN_0000211c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002eb4",
            "calling": [],
            "imported": true,
            "current_name": "execute_program_00002eb4"
        },
        "FUN_0000328c": {
            "renaming": {
                "param_2[3]": "result[3]",
                "param_2[4]": "result[4]",
                "param_2[1]": "result[1]",
                "param_2[2]": "result[2]",
                "param_2[8]": "result[8]",
                "local_a": "current_char",
                "param_2[5]": "result[5]",
                "param_2[6]": "result[6]",
                "FUN_000031fc": "decode_string_length",
                "param_1[1]": "string[1]",
                "*param_1": "*string",
                "*param_2": "*result",
                "local_10": "current_char_pos",
                "FUN_0000328c": "decode_string_0000328c",
                "FUN_00004f84": "get_char"
            },
            "code": "int decode_string_0000328c(int *string, int *result) {\n  int current_char_pos;\n  short current_char;\n  \n  current_char = get_char(*string, &current_char_pos, 10);\n  result[5] = current_char - 1892;\n  current_char = get_char(current_char_pos + 1, &current_char_pos, 10);\n  result[4] = current_char - 1;\n  current_char = get_char(current_char_pos + 1, &current_char_pos, 10);\n  result[3] = (int)current_char;\n  current_char = get_char(string[1], &current_char_pos, 10);\n  result[2] = (int)current_char;\n  current_char = get_char(current_char_pos + 1, &current_char_pos, 10);\n  result[1] = (int)current_char;\n  current_char = get_char(current_char_pos + 1, &current_char_pos, 10);\n  *result = (int)current_char;\n  int decoded_string_length = decode_string_0000328c_length(result[5] + 1892, result[4] + 1, result[3]);\n  result[6] = decoded_string_length;\n  result[8] = -1;\n  return 0;\n}",
            "called": [
                "FUN_00004f84",
                "FUN_000031fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000328c",
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "imported": true,
            "current_name": "decode_string_0000328c"
        },
        "FUN_000041f4": {
            "renaming": {
                "param_1": "buffer",
                "param_2": "value1",
                "param_3": "value2",
                "puVar1": "pointer_var_1",
                "FUN_000041f4": "initialize_buffer_000041f4"
            },
            "code": "void initialize_buffer_000041f4(undefined4 *buffer, undefined2 value1, undefined2 value2)\n{\n  buffer[0] = 0;\n  buffer[1] = 0;\n  buffer[2] = 0;\n  buffer[3] = value1;\n  buffer[4] = 0;\n  buffer[5] = 0;\n  buffer[6] = 0;\n  buffer[7] = 0;\n  buffer[8] = buffer;\n  buffer[9] = PTR_FUN_00004dc8_1_0000422c;\n  buffer[10] = DAT_00004230;\n  buffer[11] = PTR_FUN_00004e26_1_00004234;\n  buffer[12] = PTR_LAB_00004e4a_1_00004238;\n  buffer[25] = 0;\n  buffer[26] = value2;\n}",
            "called": [
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000041f4",
            "calling": [
                "FUN_000042a4"
            ],
            "imported": true,
            "current_name": "initialize_buffer_000041f4"
        },
        "FUN_0000316c": {
            "renaming": {
                "FUN_00002f74": "print_help",
                "PTR_DAT_000031d4": "valid_input_1",
                "iVar1": "is_valid",
                "PTR_s_usage___s_read_write_000031dc": "usage_string",
                "PTR_s_write_000031d8": "valid_input_2",
                "param_1": "num_args",
                "FUN_00002fe0": "write_file",
                "param_2": "args",
                "FUN_0000316c": "check_input_0000316c",
                "FUN_0000305c": "read_file",
                "FUN_00004e52": "strcmp"
            },
            "code": "int check_input_0000316c(int num_args, char *args[]) {\n  int is_valid;\n\n  if (num_args < 2) {\n    print_help();\n  }\n  else {\n    is_valid = strcmp(args[1], PTR_DAT_000031d4);\n    if (is_valid == 0) {\n      write_file(num_args, args);\n    }\n    else {\n      is_valid = strcmp(args[1], PTR_s_write_000031d8);\n      if (is_valid == 0) {\n        read_file(num_args, args);\n      }\n      else {\n        print_usage(PTR_s_usage___s_read_write_000031dc, *args);\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00002f74",
                "FUN_00004c84",
                "FUN_00002fe0",
                "FUN_0000305c",
                "FUN_00004e52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000316c",
            "calling": [],
            "imported": true,
            "current_name": "check_input_0000316c"
        },
        "FUN_000026f0": {
            "renaming": {
                "code": "code_pointer",
                "param_1": "parameter",
                "(**(code **)PTR_DAT_00002710)(param_1)": "(*function_pointer)(parameter)",
                "**(code **)PTR_DAT_00002710": "*function_pointer",
                "*(int *)PTR_DAT_00002710": "*pointer_to_initialized_flag",
                "PTR_DAT_00002710": "pointer_to_initialized_flag",
                "FUN_000026f0": "execute_function_if_initialized_000026f0"
            },
            "code": "void execute_function_if_initialized_000026f0(int parameter) {\n  int* PTR_DAT_00002710 = (int*) PTR_DAT_00002710;\n  if (*(int *)PTR_DAT_00002710 != 0) {\n    code* function_pointer = *(code**) PTR_DAT_00002710;\n    (**(code **)PTR_DAT_00002710)(param_1);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000026f0",
            "calling": [],
            "imported": true,
            "current_name": "execute_function_if_initialized_000026f0"
        },
        "FUN_000057d2": {
            "renaming": {
                "FUN_000057d2": "count_occurrences_000057d2",
                "iVar1": "count",
                "iVar3": "remaining_elements",
                "puVar2": "current_element",
                "param_1": "search_value",
                "param_2": "array_size",
                "param_3": "array",
                "param_4": "starting_index"
            },
            "code": "int count_occurrences_000057d2(int search_value, int array_size, int *array, int starting_index)\n{\n  int count = 0;\n  int *current_element = array + starting_index;\n  int remaining_elements = array_size - starting_index;\n  while (remaining_elements > 0)\n  {\n    if (*current_element == search_value)\n    {\n      count++;\n    }\n    current_element++;\n    remaining_elements--;\n  }\n  return count;\n}",
            "called": [
                "FUN_000057a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000057d2",
            "calling": [
                "FUN_000057f8"
            ],
            "imported": true,
            "current_name": "count_occurrences_000057d2"
        },
        "FUN_000056b8": {
            "renaming": {
                "iVar1": "read_result",
                "FUN_000056b8": "determine_access_rights_and_set_flag_000056b8",
                "param_1": "file_descriptor",
                "param_2": "file_information_address",
                "param_3": "access_rights_flag",
                "param_4": "flag_result",
                "auStack_68": "buffer",
                "uVar2": "flag_value",
                "local_64": "file_type_flag"
            },
            "code": "int determine_access_rights_and_set_flag_000056b8(undefined4 file_descriptor,int file_information_address,undefined4 *access_rights_flag,uint *flag_result)\n{\n  int read_result;\n  undefined4 flag_value;\n  undefined buffer[4];\n  uint file_type_flag;\n  \n  if ((*(short *)(file_information_address + 0xe) < 0) ||\n     (read_result = read_file_information(file_descriptor,(int)*(short *)(file_information_address + 0xe),buffer), read_result < 0)) {\n    *flag_result = 0;\n    if ((int)((uint)*(ushort *)(file_information_address + 0xc) << 0x18) < 0) {\n      flag_value = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    file_type_flag = (uint)((file_type_flag & 0xf000) == 0x2000);\n    *flag_result = file_type_flag;\n  }\n  flag_value = 0x400;\nLAB_000056f8:\n  *access_rights_flag = flag_value;\n  return 0;\n}",
            "called": [
                "FUN_00000514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000056b8",
            "calling": [
                "FUN_00005700"
            ],
            "imported": true,
            "current_name": "determine_access_rights_and_set_flag_000056b8"
        },
        "FUN_00001a18": {
            "renaming": {
                "FUN_00001a18": "set_data_and_flag_00001a18",
                "FUN_00001734": "set_flag",
                "PTR_DAT_00001a38": "PTR_flag_ptr",
                "FUN_000016ec": "set_data",
                "DAT_00001a34": "DAT_data"
            },
            "code": "void set_data_and_flag_00001a18(void)\n{\n  set_data(DAT_00001a34,1);\n  set_flag();\n  *PTR_DAT_00001a38 = 4;\n  return;\n}",
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001a18",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": true,
            "current_name": "set_data_and_flag_00001a18"
        },
        "FUN_00000d9c": {
            "renaming": {
                "FUN_00000d76": "clearDataBuffer",
                "FUN_00000d9c": "initializeData_00000d9c",
                "DAT_00000dac": "dataBuffer"
            },
            "code": "void initializeData_00000d9c(void)\n{\n  clearDataBuffer(DAT_00000dac, 0);\n  return;\n}",
            "called": [
                "FUN_00000d76"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000d9c",
            "calling": [
                "FUN_00000db0"
            ],
            "imported": true,
            "current_name": "initializeData_00000d9c"
        },
        "FUN_00003ff4": {
            "renaming": {
                "uVar1": "larger_value",
                "param_1": "index",
                "FUN_00003ff4": "get_larger_value_00003ff4",
                "FUN_000045ee": "calculate_diff_and_add",
                "FUN_00004622": "calculate_something_else",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "param_4"
            },
            "code": "uint get_larger_value_00003ff4(int index, uint value1, uint value2, undefined param_4)\n{\n  uint larger_value;\n  larger_value = value1;\n  if ((value1 < value2) && (larger_value = value2, index != 0)) {\n    calculate_diff_and_add(index + (value2 - value1), index, value1);\n    calculate_something_else(index, param_4, value2 - value1);\n  }\n  return larger_value;\n}",
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003ff4",
            "calling": [
                "FUN_00003ec4"
            ],
            "imported": true,
            "current_name": "get_larger_value_00003ff4"
        },
        "FUN_00004634": {
            "renaming": {
                "FUN_00004634": "FUNC_00004634"
            },
            "code": "\nvoid FUNC_00004634(uint *param_1,uint param_2,undefined4 param_3)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  bool bVar6;\n  uint *local_20;\n  uint local_1c;\n  undefined4 uStack_18;\n  \n  local_20 = param_1;\n  local_1c = param_2;\n  uStack_18 = param_3;\n  if (0x3b < *param_1) {\n    FUN_00005584(&local_20,*param_1,0x3c);\n    uVar3 = param_1[1] + (int)local_20;\n    param_1[1] = uVar3;\n    if ((int)local_1c < 0) {\n      uVar3 = uVar3 - 1;\n      *param_1 = local_1c + 0x3c;\n    }\n    else {\n      *param_1 = local_1c;\n    }\n    if ((int)local_1c < 0) {\n      param_1[1] = uVar3;\n    }\n  }\n  if (0x3b < param_1[1]) {\n    FUN_00005584(&local_20,param_1[1],0x3c);\n    bVar6 = (int)local_1c < 0;\n    uVar4 = param_1[2] + (int)local_20;\n    param_1[2] = uVar4;\n    uVar3 = local_1c;\n    if (bVar6) {\n      uVar3 = local_1c + 0x3c;\n      uVar4 = uVar4 - 1;\n    }\n    if (!bVar6) {\n      param_1[1] = uVar3;\n    }\n    if (bVar6) {\n      param_1[1] = uVar3;\n    }\n    if (bVar6) {\n      param_1[2] = uVar4;\n    }\n  }\n  if (0x17 < param_1[2]) {\n    FUN_00005584(&local_20,param_1[2],0x18);\n    bVar6 = (int)local_1c < 0;\n    uVar4 = param_1[3] + (int)local_20;\n    param_1[3] = uVar4;\n    uVar3 = local_1c;\n    if (bVar6) {\n      uVar3 = local_1c + 0x18;\n      uVar4 = uVar4 - 1;\n    }\n    if (!bVar6) {\n      param_1[2] = uVar3;\n    }\n    if (bVar6) {\n      param_1[2] = uVar3;\n    }\n    if (bVar6) {\n      param_1[3] = uVar4;\n    }\n  }\n  if (0xb < param_1[4]) {\n    FUN_00005584(&local_20,param_1[4],0xc);\n    bVar6 = (int)local_1c < 0;\n    uVar3 = param_1[5] + (int)local_20;\n    param_1[5] = uVar3;\n    if (bVar6) {\n      local_1c = local_1c + 0xc;\n      uVar3 = uVar3 - 1;\n    }\n    if (!bVar6) {\n      param_1[4] = local_1c;\n    }\n    if (bVar6) {\n      param_1[4] = local_1c;\n    }\n    if (bVar6) {\n      param_1[5] = uVar3;\n    }\n  }\n  puVar1 = PTR_DAT_000047e0;\n  uVar3 = param_1[5];\n  if ((uVar3 & 3) == 0) {\n    if (uVar3 == (uVar3 / 100) * 100) {\n      if ((uVar3 + 0x76c) % 400 == 0) {\n        iVar5 = 0x1d;\n      }\n      else {\n        iVar5 = 0x1c;\n      }\n    }\n    else {\n      iVar5 = 0x1d;\n    }\n  }\n  else {\n    iVar5 = 0x1c;\n  }\n  if ((int)param_1[3] < 1) {\n    while ((int)param_1[3] < 1) {\n      uVar3 = param_1[4];\n      param_1[4] = uVar3 - 1;\n      if (uVar3 - 1 == 0xffffffff) {\n        uVar4 = param_1[5];\n        uVar3 = uVar4 - 1;\n        param_1[4] = 0xb;\n        param_1[5] = uVar3;\n        if ((uVar3 & 3) == 0) {\n          if (uVar3 == (uVar3 / 100) * 100) {\n            if ((uVar4 + 0x76b) % 400 == 0) {\n              iVar5 = 0x1d;\n            }\n            else {\n              iVar5 = 0x1c;\n            }\n          }\n          else {\n            iVar5 = 0x1d;\n          }\n        }\n        else {\n          iVar5 = 0x1c;\n        }\n      }\n      iVar2 = iVar5;\n      if (param_1[4] != 1) {\n        iVar2 = *(int *)(puVar1 + param_1[4] * 4);\n      }\n      param_1[3] = iVar2 + param_1[3];\n    }\n  }\n  else {\n    while( true ) {\n      uVar3 = param_1[4];\n      iVar2 = iVar5;\n      if (uVar3 != 1) {\n        iVar2 = *(int *)(puVar1 + uVar3 * 4);\n      }\n      if ((int)param_1[3] <= iVar2) break;\n      param_1[3] = param_1[3] - iVar2;\n      param_1[4] = uVar3 + 1;\n      if (uVar3 + 1 == 0xc) {\n        uVar4 = param_1[5];\n        uVar3 = uVar4 + 1;\n        param_1[4] = 0;\n        param_1[5] = uVar3;\n        if ((uVar3 & 3) == 0) {\n          if (uVar3 % 100 == 0) {\n            if ((uVar4 + 0x76d) % 400 == 0) {\n              iVar5 = 0x1d;\n            }\n            else {\n              iVar5 = 0x1c;\n            }\n          }\n          else {\n            iVar5 = 0x1d;\n          }\n        }\n        else {\n          iVar5 = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00005584"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00004634",
            "calling": [
                "FUN_000047e4"
            ],
            "imported": false,
            "current_name": "FUNC_00004634"
        },
        "FUN_00001d5e": {
            "renaming": {
                "param_1": "bits",
                "FUN_00001d5e": "getBitsFromMaskAndAddOffset_00001d5e",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint getBitsFromMaskAndAddOffset_00001d5e(ushort bits)\n{\n  uint result = bits & 0x7000 | 0x40048000;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001d5e",
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "imported": true,
            "current_name": "getBitsFromMaskAndAddOffset_00001d5e"
        },
        "FUN_0000191c": {
            "renaming": {
                "FUN_00001748": "set_buffer_size",
                "FUN_00001778": "initialize_hardware",
                "PTR_DAT_0000195c": "status_register",
                "DAT_00001958": "flag_register",
                "FUN_0000191c": "initialize_system_0000191c"
            },
            "code": "void initialize_system_0000191c(void)\n{\n  initialize_hardware();\n  set_buffer_size(64);\n  *DAT_00001958 = *DAT_00001958 & 0x3b;\n  do {\n  } while ((*DAT_00001958 & 0xc) != 0);\n  *PTR_DAT_0000195c = 1;\n  return;\n}",
            "called": [
                "FUN_00001748",
                "FUN_00001778"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000191c",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": true,
            "current_name": "initialize_system_0000191c"
        },
        "FUN_000050f4": {
            "renaming": {
                "PTR_DAT_000050fc": "pointer_data",
                "FUN_000050f4": "get_pointer_data_000050f4"
            },
            "code": "void* get_pointer_data_000050f4() {\n  return PTR_DAT_000050fc;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000050f4",
            "calling": [
                "FUN_000047e4"
            ],
            "imported": true,
            "current_name": "get_pointer_data_000050f4"
        },
        "FUN_00005a58": {
            "renaming": {
                "iVar1": "result",
                "param_1": "input",
                "param_2": "output_buffer",
                "param_3": "output_length",
                "param_4": "padding_length",
                "param_5": "encoder",
                "uVar3": "padding",
                "uVar2": "status",
                "uVar4": "i",
                "FUN_00005a58": "encode_string_00005a58",
                "bVar5": "has_padding"
            },
            "code": "int encode_string_00005a58(uint32_t input, uint32_t *output_length, uint32_t *output_buffer, uint32_t padding_length, code *encoder) {\n  int status = 0;\n  uint32_t max_output_length = output_buffer[4];\n  if (max_output_length < output_buffer[2]) {\n    max_output_length = output_buffer[2];\n  }\n  *output_length = max_output_length;\n  if (*(char *)((int)output_buffer + 0x43) != '\\0') {\n    *output_length = max_output_length + 1;\n  }\n  if ((int)(input << 0x1a) < 0) {\n    *output_length = *output_length + 2;\n  }\n  uint32_t padding = input & 6;\n  if (padding == 0) {\n    for (; (int)padding < (int)(output_buffer[3] - *output_length); padding++) {\n      int result = (*encoder)(input, padding_length, (int)output_buffer + 0x19, 1);\n      if (result == -1) {\n        status = -1;\n        break;\n      }\n    }\n  }\n  padding = (uint32_t)*(byte *)((int)output_buffer + 0x43);\n  if (padding != 0) {\n    padding = 1;\n  }\n  if ((int)(input << 0x1a) < 0) {\n    *(undefined *)((int)output_buffer + padding + 0x43) = 0x30;\n    *(undefined *)((int)output_buffer + padding + 0x44) = *(undefined *)((int)output_buffer + 0x45);\n    padding += 2;\n  }\n  int result = (*encoder)(input, padding_length, (int)output_buffer + 0x43, padding);\n  if (result == -1) {\n    status = -1;\n  }\n  else {\n    uint32_t remaining_output_length = output_buffer[3];\n    bool has_padding = (input & 6) == 4;\n    if (has_padding) {\n      remaining_output_length -= *output_length;\n    }\n    if (has_padding) {\n      remaining_output_length &= ~((int)remaining_output_length >> 0x1f);\n    }\n    else {\n      remaining_output_length = 0;\n    }\n    if (max_output_length < output_buffer[2]) {\n      remaining_output_length += output_buffer[2] - output_buffer[4];\n    }\n    for (uint32_t i = 0; i < remaining_output_length; i++) {\n      int result = (*encoder)(input, padding_length, (int)output_buffer + 0x1a, 1);\n      if (result == -1) {\n        status = -1;\n        break;\n      }\n    }\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005a58",
            "calling": [
                "FUN_00005b34"
            ],
            "imported": true,
            "current_name": "encode_string_00005a58"
        },
        "FUN_000056b0": {
            "renaming": {
                "DAT_000056b4": "data_value",
                "FUN_000056b0": "get_data_000056b0"
            },
            "code": "int get_data_000056b0(void)\n{\n  return DAT_000056b4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000056b0",
            "calling": [
                "FUN_000047e4",
                "FUN_00004f98",
                "FUN_00005100"
            ],
            "imported": true,
            "current_name": "get_data_000056b0"
        },
        "FUN_00003d24": {
            "renaming": {
                "FUN_00003d24": "find_element_by_index_00003d24",
                "local_c": "current_element",
                "param_1": "index",
                "local_10": "current_index"
            },
            "code": "undefined4* find_element_by_index_00003d24(int index) {\n  undefined4* current_element = *(undefined4**)PTR_DAT_00003d60;\n  int current_index = 0;\n  while (current_index < index && current_element != (undefined4*)0x0) {\n    current_element = (undefined4*)*current_element;\n    current_index++;\n  }\n  return current_element;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003d24",
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "imported": true,
            "current_name": "find_element_by_index_00003d24"
        },
        "FUN_000060cc": {
            "renaming": {
                "uVar1": "result_1",
                "FUN_000060cc": "calculate_value_000060cc",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar2": "temp_1"
            },
            "code": "uint calculate_value_000060cc(undefined4 input_1, uint input_2, uint input_3, undefined4 input_4)\n{\n  uint result_1;\n  uint temp_1;\n  \n  if (input_2 != 0) {\n    if (input_3 == 0) {\n      reset_value();\n      result_1 = input_3;\n    }\n    else {\n      temp_1 = calculate_temp_value();\n      result_1 = input_2;\n      if ((temp_1 < input_3) && (result_1 = calculate_new_value(input_1,input_3), result_1 != 0)) {\n        update_value(result_1,input_2,input_3);\n        reset_value(input_1,input_2);\n      }\n    }\n    return result_1;\n  }\n  result_1 = calculate_new_value(input_1,input_3,input_3,input_4);\n  return result_1;\n}",
            "called": [
                "FUN_000060b0",
                "FUN_00004b34",
                "FUN_00006964",
                "FUN_00004bd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000060cc",
            "calling": [
                "FUN_000068f0"
            ],
            "imported": true,
            "current_name": "calculate_value_000060cc"
        },
        "FUN_00003dc4": {
            "renaming": {
                "local_c": "digit_count",
                "param_1": "number",
                "FUN_00003dc4": "calculate_digits_00003dc4",
                "param_2": "multiplier",
                "local_10": "divisor",
                "local_20": "remainder",
                "local_14": "digits"
            },
            "code": "int calculate_digits_00003dc4(int number, uint multiplier)\n{\n  uint divisor = 10;\n  char *digits;\n  int digit_count = 1;\n  if (DAT_00003e50 < multiplier) {\n    digit_count = 10;\n  }\n  else {\n    while (divisor <= multiplier) {\n      digit_count++;\n      divisor *= 10;\n    }\n  }\n  if (number != 0) {\n    digits = (char *)(digit_count + number);\n    uint remainder = multiplier;\n    do {\n      digits--;\n      *digits = (char)remainder + (char)((uint)((ulonglong)DAT_00003e54 * (ulonglong)remainder >> 0x23) * -10) + '0';\n      remainder = (uint)((ulonglong)DAT_00003e54 * (ulonglong)remainder >> 0x23);\n    } while (remainder != 0);\n  }\n  return digit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003dc4",
            "calling": [
                "FUN_00003e58"
            ],
            "imported": true,
            "current_name": "calculate_digits_00003dc4"
        },
        "FUN_000022be": {
            "renaming": {
                "uVar1": "offset",
                "param_1": "arr",
                "FUN_000022be": "increment_and_store_at_offset_000022be",
                "param_2": "value",
                "PTR_": "arr",
                "DAT_": "value"
            },
            "code": "void increment_and_store_at_offset_000022be(int *PTR_, undefined DAT_) {\n  uint offset = PTR_[3];\n  PTR_[3] = offset + 1;\n  uint base_address = *PTR_;\n  uint mask = PTR_[1] - 1U;\n  uint offset_masked = offset & mask;\n  uint address_to_store = base_address + offset_masked;\n  *(undefined *)address_to_store = DAT_;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000022be",
            "calling": [
                "FUN_00002364"
            ],
            "imported": true,
            "current_name": "increment_and_store_at_offset_000022be"
        },
        "FUN_00002108": {
            "renaming": {
                "DAT_00002118": "dataBuffer",
                "FUN_00002028": "transferData",
                "FUN_00002108": "executeDataTransfer_00002108"
            },
            "code": "void executeDataTransfer_00002108(void)\n{\n  transferData(DAT_00002118, 4);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002108",
            "calling": [],
            "imported": true,
            "current_name": "executeDataTransfer_00002108"
        },
        "FUN_00001d80": {
            "renaming": {
                "param_1": "flag",
                "FUN_00001d80": "getFlagValue_00001d80"
            },
            "code": "uint getFlagValue_00001d80(ushort flag) {\n    uint mask = flag & 0x1c0;\n    uint value = 0x400ff000;\n    return mask | value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001d80",
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea"
            ],
            "imported": true,
            "current_name": "getFlagValue_00001d80"
        },
        "FUN_000033c0": {
            "renaming": {
                "iVar1": "error_code",
                "auStack_2c": "alarm_data",
                "FUN_00002690": "get_alarm_data",
                "PTR_s_rtc__error_getting_alarm_000033f0": "PTR_s_rtc__error_getting_alarm_000033f0",
                "FUN_00003378": "process_alarm_data",
                "FUN_00004db8": "report_error",
                "FUN_000033c0": "check_alarm_000033c0"
            },
            "code": "bool check_alarm_000033c0(void)\n{\n  int error_code;\n  undefined alarm_data [36];\n  error_code = get_alarm_data(alarm_data);\n  if (error_code != 0) {\n    report_error(PTR_s_rtc__error_getting_alarm_000033f0);\n  }\n  else {\n    process_alarm_data(alarm_data);\n  }\n  return error_code != 0;\n}",
            "called": [
                "FUN_00002690",
                "FUN_00003378",
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000033c0",
            "calling": [
                "FUN_00003524"
            ],
            "imported": true,
            "current_name": "check_alarm_000033c0"
        },
        "FUN_00002b10": {
            "renaming": {
                "param_1": "arg_count",
                "local_2d": "quote_type",
                "local_1c": "escape_count",
                "local_2c": "d",
                "local_3c": "command",
                "local_18": "unused",
                "local_28": "c",
                "local_38": "parsed_args",
                "local_48": "current_arg_start",
                "param_2": "arg_string",
                "local_20": "i",
                "local_14": "arg_string",
                "local_24": "arg",
                "local_34": "arg_count_parsed",
                "FUN_00002b10": "parse_command_line_args_00002b10"
            },
            "code": "void parse_command_line_args_00002b10(undefined4 arg_count, byte* arg_string) {\n  int escape_count = 0;\n  byte* current_arg_start = arg_string;\n  uint arg_count_parsed = 0;\n  while (*arg_string != 0) {\n    if (*arg_string > 0x20) {\n      if (*arg_string == 0x22 || *arg_string == 0x27) {\n        byte quote_type = *arg_string;\n        do {\n          arg_string++;\n          if (*arg_string == 0) {\n            print_error_message(\"Missing closing quote\");\n            return;\n          }\n          if (*arg_string == 0x5c) {\n            escape_count++;\n            arg_string++;\n            if (*arg_string == 0) {\n              print_error_message(\"Escape character at end of string\");\n              return;\n            }\n          }\n        } while (quote_type != *arg_string);\n        if (arg_string[1] > 0x20) {\n          print_error_message(\"Invalid whitespace after quote\");\n          return;\n        }\n      }\n      else {\n        do {\n          if (*arg_string == 0x5c) {\n            escape_count++;\n            arg_string++;\n            if (*arg_string == 0) {\n              print_error_message(\"Escape character at end of string\");\n              return;\n            }\n          }\n          arg_string++;\n          if (*arg_string == 0x22) {\n            print_error_message(\"Missing closing quote\");\n            return;\n          }\n        } while (*arg_string > 0x20);\n      }\n      arg_count_parsed++;\n    }\n    if (*arg_string == 0) {\n      break;\n    }\n    *arg_string = 0;\n    arg_string++;\n  }\n  if (arg_count_parsed > 0) {\n    char** parsed_args = (char**)((int)&arg_count - ((arg_count_parsed + 1) * 4 + 7 & 0xfffffff8));\n    parsed_args[arg_count_parsed] = (char*)0;\n    arg_string = current_arg_start;\n    for (uint i = 0; i < arg_count_parsed; i++) {\n      while (*arg_string == 0) {\n        arg_string++;\n      }\n      if (*arg_string == 0x22 || *arg_string == 0x27) {\n        arg_string++;\n      }\n      parsed_args[i] = (char*)arg_string;\n      while (*arg_string != 0) {\n        arg_string++;\n      }\n    }\n    for (char** arg = parsed_args; escape_count > 0 && *arg != (char*)0; arg++) {\n      for (char* c = *arg; *c != '\\0'; c++) {\n        if (*c == '\\') {\n          for (char* d = c; *d != '\\0'; d++) {\n            *d = d[1];\n          }\n          escape_count--;\n          if (escape_count == 0) {\n            break;\n          }\n        }\n      }\n    }\n    code* command = (code*)parse_command(parsed_args);\n    if (command == (code*)0) {\n      if (find_command(parsed_args) == 0) {\n        print_error_message(\"Command not found: \");\n        print_error_message(parsed_args[0]);\n      }\n      else {\n        print_error_message(\"Error parsing command line arguments\");\n      }\n    }\n    else {\n      (*command)(arg_count_parsed, parsed_args);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00002a88",
                "FUN_00004c84",
                "FUN_00002a18",
                "FUN_00004db8",
                "FUN_00004e52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002b10",
            "calling": [
                "FUN_00002e6c"
            ],
            "imported": true,
            "current_name": "parse_command_line_args_00002b10"
        },
        "FUN_00001b10": {
            "renaming": {
                "FUN_00001b10": "execute_instructions_00001b10",
                "instruction_table": "instruction_table",
                "instruction_index": "instruction_index",
                "uVar1": "result",
                "param_1": "instruction_count",
                "instruction_pointer": "instruction_pointer"
            },
            "code": "int execute_instructions_00001b10(byte instruction_count) {\n  int result = 0;\n  if (instruction_count >= 8) {\n    result = -1;\n  }\n  else {\n    byte* instruction_pointer = PTR_DAT_00001bb0;\n    do {\n      byte instruction_index = *instruction_pointer;\n      byte* instruction_table = PTR_DAT_00001bb4 + (instruction_count + instruction_index * 8);\n      switch(*instruction_table) {\n        case 0:\n          FUN_000018bc();\n          break;\n        case 1:\n          FUN_0000191c();\n          break;\n        case 2:\n          FUN_00001960();\n          break;\n        case 3:\n          FUN_000019c0();\n          break;\n        case 4:\n          FUN_00001a18();\n          break;\n        case 5:\n          FUN_00001a3c();\n          break;\n        case 6:\n          FUN_00001a60();\n          break;\n        case 7:\n          FUN_00001ad4();\n          break;\n        default:\n          return -1;\n      }\n      instruction_count = instruction_index;\n    } while (instruction_count != *PTR_DAT_00001bb0);\n  }\n  return result;\n}",
            "called": [
                "FUN_00001ad4",
                "FUN_00001a3c",
                "FUN_00001960",
                "FUN_000018bc",
                "FUN_0000191c",
                "FUN_00001a60",
                "FUN_000019c0",
                "FUN_00001a18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001b10",
            "calling": [
                "FUN_00001c84"
            ],
            "imported": true,
            "current_name": "execute_instructions_00001b10"
        },
        "FUN_000047e4": {
            "renaming": {
                "FUN_000047e4": "FUNC_000047e4"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 FUNC_000047e4(int *param_1)\n\n{\n  longlong lVar1;\n  longlong lVar2;\n  int *piVar3;\n  uint uVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  uint uVar14;\n  uint uVar15;\n  bool bVar16;\n  \n  piVar3 = (int *)FUN_000056b0();\n  FUNC_00004634(param_1);\n  uVar12 = param_1[5];\n  iVar11 = param_1[3] + -1 + *(int *)(PTR_DAT_00004adc + param_1[4] * 4);\n  if (((1 < param_1[4]) && ((uVar12 & 3) == 0)) &&\n     ((uVar12 != (uVar12 / 100) * 100 || (uVar12 + 0x76c == ((uVar12 + 0x76c) / 400) * 400)))) {\n    iVar11 = iVar11 + 1;\n  }\n  param_1[7] = iVar11;\n  if (20000 < (int)&PTR_DAT_00002710 + uVar12) {\n    iVar7 = -1;\n    iVar5 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)uVar12 < 0x47) {\n    if (uVar12 != 0x46) {\n      for (uVar9 = 0x45; (int)uVar12 < (int)uVar9; uVar9 = uVar9 - 1) {\n        if ((uVar9 & 3) == 0) {\n          if (uVar9 == (uVar9 / 100) * 100) {\n            if ((uVar9 + 0x76c) % 400 == 0) {\n              iVar7 = 0x16e;\n            }\n            else {\n              iVar7 = 0x16d;\n            }\n          }\n          else {\n            iVar7 = 0x16e;\n          }\n        }\n        else {\n          iVar7 = 0x16d;\n        }\n        iVar11 = iVar11 - iVar7;\n      }\n      if ((uVar9 & 3) == 0) {\n        if (uVar12 == (uVar12 / 100) * 100) {\n          iVar7 = 0x16d;\n          if ((uVar12 + 0x76c) % 400 == 0) {\n            iVar7 = 0x16e;\n          }\n        }\n        else {\n          iVar7 = 0x16e;\n        }\n      }\n      else {\n        iVar7 = 0x16d;\n      }\n      iVar11 = iVar11 - iVar7;\n    }\n  }\n  else {\n    uVar9 = 0x46;\n    do {\n      if ((uVar9 & 3) == 0) {\n        if (uVar9 % 100 == 0) {\n          if ((uVar9 + 0x76c) % 400 == 0) {\n            iVar7 = 0x16e;\n          }\n          else {\n            iVar7 = 0x16d;\n          }\n        }\n        else {\n          iVar7 = 0x16e;\n        }\n      }\n      else {\n        iVar7 = 0x16d;\n      }\n      uVar9 = uVar9 + 1;\n      iVar11 = iVar11 + iVar7;\n    } while (uVar12 != uVar9);\n  }\n  lVar1 = (longlong)DAT_00004ae0 * (longlong)iVar11 +\n          (longlong)(param_1[2] * 0xe10 + param_1[1] * 0x3c + *param_1);\n  uVar15 = (uint)lVar1;\n  iVar7 = (int)((ulonglong)lVar1 >> 0x20);\n  FUN_000050e8();\n  FUNC_00005100();\n  uVar9 = *(uint *)PTR_DAT_00004ae4;\n  if (*(uint *)PTR_DAT_00004ae4 == 0) {\nLAB_00004934:\n    uVar12 = piVar3[10];\n    iVar7 = (uint)lVar1 + uVar12;\n    iVar5 = (int)((ulonglong)lVar1 >> 0x20) +\n            ((int)uVar12 >> 0x1f) + (uint)CARRY4((uint)lVar1,uVar12);\n  }\n  else {\n    uVar14 = param_1[8];\n    uVar13 = uVar14;\n    if (0 < (int)uVar14) {\n      uVar13 = 1;\n    }\n    if ((piVar3[1] == param_1[5] + 0x76c) || (iVar5 = FUN_00004f98(), iVar5 != 0)) {\n      uVar10 = piVar3[0x14];\n      uVar4 = piVar3[0x12];\n      uVar8 = piVar3[10];\n      uVar9 = uVar4 - uVar8;\n      iVar5 = (piVar3[0x13] - ((int)uVar8 >> 0x1f)) - (uint)(uVar4 < uVar8);\n      if (((int)((iVar7 - iVar5) - (uint)(uVar15 < uVar9)) < 0 ==\n           (SBORROW4(iVar7,iVar5) != SBORROW4(iVar7 - iVar5,(uint)(uVar15 < uVar9)))) &&\n         (iVar6 = (piVar3[0x13] - ((int)uVar10 >> 0x1f)) - (uint)(uVar4 < uVar10),\n         bVar16 = uVar15 < uVar4 - uVar10,\n         (int)((iVar7 - iVar6) - (uint)bVar16) < 0 !=\n         (SBORROW4(iVar7,iVar6) != SBORROW4(iVar7 - iVar6,(uint)bVar16)))) goto LAB_00004a88;\n      uVar4 = piVar3[8] - uVar10;\n      iVar6 = (piVar3[9] - ((int)uVar10 >> 0x1f)) - (uint)((uint)piVar3[8] < uVar10);\n      if (*piVar3 != 0) {\n        if ((int)((iVar7 - iVar6) - (uint)(uVar15 < uVar4)) < 0 ==\n            (SBORROW4(iVar7,iVar6) != SBORROW4(iVar7 - iVar6,(uint)(uVar15 < uVar4))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        uVar9 = 0;\n        if ((int)uVar14 < 0) goto LAB_00004934;\nLAB_00004a14:\n        uVar15 = uVar13 ^ uVar9;\n        uVar13 = uVar9;\n        if (uVar15 == 1) {\n          if (uVar9 == 0) {\n            iVar7 = uVar10 - uVar8;\n          }\n          else {\n            iVar7 = uVar8 - uVar10;\n          }\n          iVar5 = param_1[3];\n          *param_1 = *param_1 + iVar7;\n          lVar2 = lVar1 + iVar7;\n          FUNC_00004634(param_1);\n          iVar5 = param_1[3] - iVar5;\n          lVar1 = lVar1 + iVar7;\n          if (iVar5 != 0) {\n            if (iVar5 < 2) {\n              if (iVar5 == -2 || iVar5 + 2 < 0 != SCARRY4(iVar5,2)) {\n                iVar5 = 1;\n              }\n            }\n            else {\n              iVar5 = -1;\n            }\n            iVar7 = iVar5 + param_1[7];\n            iVar11 = iVar11 + iVar5;\n            if (iVar7 < 0) {\n              uVar9 = uVar12 - 1;\n              if ((uVar9 & 3) == 0) {\n                if (uVar9 == (uVar9 / 100) * 100) {\n                  iVar7 = 0x16d;\n                  if ((uVar12 + 0x76b) % 400 != 0) {\n                    iVar7 = 0x16c;\n                  }\n                }\n                else {\n                  iVar7 = 0x16d;\n                }\n              }\n              else {\n                iVar7 = 0x16c;\n              }\n            }\n            else {\n              if ((uVar12 & 3) == 0) {\n                if (uVar12 == (uVar12 / 100) * 100) {\n                  iVar5 = 0x16d;\n                  if ((uVar12 + 0x76c) % 400 == 0) {\n                    iVar5 = 0x16e;\n                  }\n                }\n                else {\n                  iVar5 = 0x16e;\n                }\n              }\n              else {\n                iVar5 = 0x16d;\n              }\n              if (iVar5 <= iVar7) {\n                iVar7 = iVar7 - iVar5;\n              }\n            }\n            param_1[7] = iVar7;\n            lVar1 = lVar2;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((iVar7 - iVar6) - (uint)(uVar15 < uVar4)) < 0 !=\n          (SBORROW4(iVar7,iVar6) != SBORROW4(iVar7 - iVar6,(uint)(uVar15 < uVar4)))) {\nLAB_0000491e:\n        if ((int)((iVar7 - iVar5) - (uint)(uVar15 < uVar9)) < 0 ==\n            (SBORROW4(iVar7,iVar5) != SBORROW4(iVar7 - iVar5,(uint)(uVar15 < uVar9))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)uVar14) {\n        uVar9 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      uVar9 = uVar13;\n      if (uVar13 != 1) goto LAB_00004934;\n    }\n    uVar12 = piVar3[0x14];\n    iVar7 = (uint)lVar1 + uVar12;\n    iVar5 = (int)((ulonglong)lVar1 >> 0x20) +\n            ((int)uVar12 >> 0x1f) + (uint)CARRY4((uint)lVar1,uVar12);\n    uVar9 = 1;\n  }\n  FUN_000050f4();\n  param_1[8] = uVar9;\n  param_1[6] = (iVar11 + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(iVar5,iVar7);\n}\n\n",
            "called": [
                "FUN_00004634",
                "FUN_000050e8",
                "FUN_00004f98",
                "FUN_000050f4",
                "FUN_000056b0",
                "FUN_00005100"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000047e4",
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "imported": false,
            "current_name": "FUNC_000047e4"
        },
        "FUN_000023c8": {
            "renaming": {
                "FUN_000023c8": "interruptSoftwareCall_000023c8"
            },
            "code": "void interruptSoftwareCall_000023c8(void)\n{\n  software_interrupt(0x3f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000023c8",
            "calling": [
                "FUN_000023d0"
            ],
            "imported": true,
            "current_name": "interruptSoftwareCall_000023c8"
        },
        "FUN_00002e48": {
            "renaming": {
                "FUN_00002e48": "print_data_00002e48",
                "PTR_DAT_00002e68": "data_pointer",
                "FUN_000041d0": "print_integer",
                "FUN_00002a00": "print_character"
            },
            "code": "void print_data_00002e48(void)\n{\n  print_character(62);\n  print_character(32);\n  print_integer(*PTR_DAT_00002e68 + 8);\n  return;\n}",
            "called": [
                "FUN_000041d0",
                "FUN_00002a00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002e48",
            "calling": [
                "FUN_00002e6c"
            ],
            "imported": true,
            "current_name": "print_data_00002e48"
        },
        "FUN_00000930": {
            "renaming": {
                "FUN_00000930": "execute_and_interrupt_00000930",
                "FUN_00000cf0": "execute_task"
            },
            "code": "void execute_and_interrupt_00000930(void)\n{\n  execute_task();\n  software_interrupt(1);\n  while(true) {}\n}",
            "called": [
                "FUN_00000cf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000930",
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "imported": true,
            "current_name": "execute_and_interrupt_00000930"
        },
        "FUN_00001348": {
            "renaming": {
                "FUN_00001348": "checkPointerValidity_00001348",
                "PTR_DAT_0000135c": "pointerData",
                "FUN_0000093c": "callFunction"
            },
            "code": "void checkPointerValidity_00001348(void)\n{\n  int* pointer = (int*) PTR_DAT_0000135c;\n  if (*pointer != 0) {\n    callFunction();\n  }\n  return;\n}",
            "called": [
                "FUN_0000093c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001348",
            "calling": [
                "FUN_00001628"
            ],
            "imported": true,
            "current_name": "checkPointerValidity_00001348"
        },
        "FUN_00001d3a": {
            "renaming": {
                "*puVar1": "*first_element_pointer",
                "param_1": "array",
                "FUN_00001d08": "get_first_element_pointer",
                "FUN_00001d3a": "set_first_element_to_one_00001d3a",
                "param_2": "size",
                "puVar1": "first_element_pointer"
            },
            "code": "void set_first_element_to_one_00001d3a(int* array, int size)\n{\n  int* first_element_pointer = (int*)get_first_element_pointer(array, size);\n  *first_element_pointer = 1;\n  return;\n}",
            "called": [
                "FUN_00001d08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001d3a",
            "calling": [
                "FUN_00001ddc"
            ],
            "imported": true,
            "current_name": "set_first_element_to_one_00001d3a"
        },
        "FUN_00002434": {
            "renaming": {
                "iVar2": "memory_location",
                "uVar1": "function_result",
                "FUN_00000698": "initialize_memory",
                "param_1": "value_ptr",
                "FUN_00000cd0": "allocate_memory",
                "FUN_00001034": "copy_memory",
                "*param_1": "*value_ptr",
                "FUN_00002434": "set_or_get_value_00002434",
                "param_2": "value_to_set",
                "PTR_DAT_000024b8": "memory_location",
                "FUN_0000093c": "clean_up",
                "FUN_00000d0c": "free_memory"
            },
            "code": "int set_or_get_value_00002434(int *value_ptr, int value_to_set) {\n  int return_value = 0;\n  int PTR_DAT_000024b8 = *(int *)PTR_DAT_000024b8;\n  int function_result = FUN_00000cd0();\n  if (*value_ptr == 0) {\n    *value_ptr = -1;\n    FUN_00000d0c(function_result);\n    return_value = 1;\n  }\n  else if (value_to_set == 0) {\n    FUN_00000d0c(function_result);\n    return_value = 0;\n  }\n  else {\n    FUN_00000698(PTR_DAT_000024b8, 2);\n    if (*value_ptr == -1) {\n      *value_ptr = PTR_DAT_000024b8 + 8;\n      *(undefined4 *)*value_ptr = 0;\n    }\n    else {\n      FUN_00001034(value_ptr, PTR_DAT_000024b8);\n    }\n    FUN_00000d0c(function_result);\n    FUN_0000093c();\n    return_value = 1;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_00000698",
                "FUN_00001034",
                "FUN_00000cd0",
                "FUN_0000093c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002434",
            "calling": [
                "FUN_0000129c"
            ],
            "imported": true,
            "current_name": "set_or_get_value_00002434"
        },
        "FUN_00005700": {
            "renaming": {
                "iVar2": "i",
                "uVar1": "flag",
                "param_1": "inputLength",
                "local_18": "tempLength",
                "FUN_00005700": "processInput_00005700",
                "param_2": "inputArray",
                "local_14": "tempArray"
            },
            "code": "void processInput_00005700(int inputLength, int *inputArray)\n{\n  ushort flag;\n  int i, tempLength;\n  int *tempArray;\n  \n  if ((uint)*(ushort *)(inputArray + 3) << 0x1e > 0) {\n    tempLength = inputLength;\n    tempArray = inputArray;\n    flag = processArray(inputLength, inputArray, &tempLength, &tempArray);\n    i = findValue(inputLength, tempLength);\n    if (i != 0) {\n      *(undefined **)(inputLength + 0x28) = PTR_DAT_0000577c;\n      *inputArray = i;\n      *(ushort *)(inputArray + 3) = *(ushort *)(inputArray + 3) | 0x80;\n      inputArray[5] = tempLength;\n      inputArray[4] = i;\n      if ((tempArray != (int *)0x0) &&\n         (i = findValue(inputLength, (int)*(short *)((int)inputArray + 0xe)), i != 0)) {\n        *(ushort *)(inputArray + 3) = *(ushort *)(inputArray + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(inputArray + 3) = flag | *(ushort *)(inputArray + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(inputArray + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(inputArray + 3) = *(ushort *)(inputArray + 3) & 0xfffc | 2;\n  }\n  *inputArray = (int)inputArray + 0x47;\n  inputArray[4] = (int)inputArray + 0x47;\n  inputArray[5] = 1;\n  return;\n}",
            "called": [
                "FUN_00000534",
                "FUN_00004bd0",
                "FUN_000056b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005700",
            "calling": [
                "FUN_00006768",
                "FUN_000054a8"
            ],
            "imported": true,
            "current_name": "processInput_00005700"
        },
        "FUN_00002798": {
            "renaming": {
                "PTR_DAT_000027ac": "data_pointer",
                "FUN_00002798": "check_data_and_call_function_00002798",
                "FUN_0000093c": "call_function"
            },
            "code": "void check_data_and_call_function_00002798(void)\n{\n  int* PTR_DAT_000027ac = (int*)PTR_DAT_000027ac;\n  if (*PTR_DAT_000027ac != 0)\n  {\n    call_function();\n  }\n  return;\n}",
            "called": [
                "FUN_0000093c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002798",
            "calling": [
                "FUN_00002994"
            ],
            "imported": true,
            "current_name": "check_data_and_call_function_00002798"
        },
        "FUN_00003524": {
            "renaming": {
                "FUN_000026c0": "print_error",
                "iVar1": "status",
                "FUN_000026e4": "print_error",
                "PTR_s_clearalarm_00003640": "PTR_s_clearalarm_00003640",
                "FUN_000026d8": "print_error",
                "PTR_s_unknown_command_or_missing_param_00003654": "PTR_s_unknown_command_or_missing_param_00003654",
                "PTR_s_gettime_0000364c": "PTR_s_gettime_0000364c",
                "param_1": "command",
                "FUN_00003444": "print_error",
                "PTR_s_poweroff_0000363c": "PTR_s_poweroff_0000363c",
                "FUN_00003524": "process_command_00003524",
                "param_2": "params",
                "PTR_s_setalarm_00003648": "PTR_s_setalarm_00003648",
                "uVar2": "result",
                "FUN_00004c84": "print_error",
                "PTR_s_getalarm_00003644": "PTR_s_getalarm_00003644",
                "PTR_s_settime_00003650": "PTR_s_settime_00003650",
                "FUN_000033c0": "print_error",
                "PTR_s_poweron_00003638": "PTR_s_poweron_00003638",
                "FUN_000034c0": "print_error",
                "FUN_000033f4": "execute_command_with_params"
            },
            "code": "int process_command_00003524(int command, int *params)\n{\n    int result = 0;\n    if (command < 2) {\n        print_error();\n        result = 1;\n    }\n    else {\n        int status;\n        status = execute_command(params[1], PTR_s_poweron_00003638, 7);\n        if (status == 0) {\n            print_error();\n        }\n        else {\n            status = execute_command(params[1], PTR_s_poweroff_0000363c, 8);\n            if (status == 0) {\n                print_error();\n            }\n            else {\n                status = execute_command(params[1], PTR_s_clearalarm_00003640, 8);\n                if (status == 0) {\n                    print_error();\n                }\n                else {\n                    status = execute_command(params[1], PTR_s_getalarm_00003644, 8);\n                    if (status == 0) {\n                        print_error();\n                    }\n                    else {\n                        status = execute_command(params[1], PTR_s_setalarm_00003648, 8);\n                        if (status == 0 && command == 4) {\n                            execute_command_with_params(PTR_s_setalarm_00003648, params + 2);\n                        }\n                        else {\n                            status = execute_command(params[1], PTR_s_gettime_0000364c, 7);\n                            if (status == 0) {\n                                print_error();\n                            }\n                            else {\n                                status = execute_command(params[1], PTR_s_settime_00003650, 7);\n                                if (status != 0 || command != 4) {\n                                    print_error(PTR_s_unknown_command_or_missing_param_00003654, params[1]);\n                                    print_error();\n                                    result = 1;\n                                }\n                                else {\n                                    execute_command_with_params(PTR_s_settime_00003650, params + 2);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_000026d8",
                "FUN_00004c84",
                "FUN_000033f4",
                "FUN_000033c0",
                "FUN_00003444",
                "FUN_000034c0",
                "FUN_00004e66",
                "FUN_00003478",
                "FUN_000026c0",
                "FUN_000026e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003524",
            "calling": [],
            "imported": true,
            "current_name": "process_command_00003524"
        },
        "FUN_00001bb8": {
            "renaming": {
                "DAT_00001c7c": "data_array[3]",
                "PTR_DAT_00001c80": "data_pointer",
                "FUN_00001748": "update_status",
                "FUN_00001710": "update_data",
                "DAT_00001c74": "data_array",
                "FUN_00001bb8": "check_and_update_data_00001bb8",
                "DAT_00001c78": "data_array[2]"
            },
            "code": "void check_and_update_data_00001bb8(void)\n{\n  if ((DAT_00001c74[1] & 2) != 0) {\n    update_data(DAT_00001c78, 1);\n  }\n  if ((DAT_00001c74[5] & 0x40) != 0) {\n    if ((*DAT_00001c74 & 0xc0) == 0) {\n      *DAT_00001c74 = *DAT_00001c74 & 0x3f | 0x80;\n      do {\n      } while ((DAT_00001c74[6] & 0xc) != 8);\n    }\n    update_data(DAT_00001c7c, 6);\n    do {\n    } while ((DAT_00001c74[6] & 0x20) != 0);\n  }\n  update_status(0);\n  *DAT_00001c74 = *DAT_00001c74 & 0x3b | 4;\n  do {\n  } while ((DAT_00001c74[6] & 0x10) == 0);\n  do {\n  } while ((DAT_00001c74[6] & 0xc) != 0);\n  *PTR_DAT_00001c80 = 0;\n  return;\n}",
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001bb8",
            "calling": [
                "FUN_00001c84"
            ],
            "imported": true,
            "current_name": "check_and_update_data_00001bb8"
        },
        "FUN_0000428c": {
            "renaming": {
                "do_nothing_000045e8": "do_nothing_with_parameter",
                "DAT_00004294": "data",
                "FUN_0000428c": "do_nothing_with_data_0000428c"
            },
            "code": "void do_nothing_with_data_0000428c(void)\n{\n  do_nothing_with_parameter(DAT_00004294);\n  return;\n}",
            "called": [
                "FUN_000045e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000428c",
            "calling": [
                "FUN_000042a4"
            ],
            "imported": true,
            "current_name": "do_nothing_with_data_0000428c"
        },
        "FUN_0000404c": {
            "renaming": {
                "iVar1": "bytes_processed",
                "iVar5": "total_bytes",
                "iVar7": "remaining_bytes",
                "piVar2": "ptr1",
                "param_1": "data",
                "param_2": "params",
                "uVar3": "flag",
                "pcVar6": "function_ptr",
                "bVar9": "zero_flag",
                "FUN_0000404c": "process_data_0000404c",
                "uVar4": "flag_bits",
                "uVar8": "temp_flag"
            },
            "code": "int process_data_0000404c(uint *data, int *params)\n{\n  int bytes_processed;\n  int *ptr1;\n  uint flag;\n  ushort flag_bits;\n  int total_bytes;\n  code *function_ptr;\n  int remaining_bytes;\n  uint temp_flag;\n  bool zero_flag;\n  \n  flag_bits = *(ushort *)(params + 3);\n  flag = (uint)flag_bits;\n  if ((int)(flag << 0x1c) < 0) {\n    total_bytes = params[4];\n    if (total_bytes != 0) {\n      remaining_bytes = flag << 0x1e;\n      zero_flag = remaining_bytes == 0;\n      bytes_processed = *params;\n      if (zero_flag) {\n        remaining_bytes = params[5];\n      }\n      *params = total_bytes;\n      if (!zero_flag) {\n        remaining_bytes = 0;\n      }\n      params[2] = remaining_bytes;\n      for (bytes_processed = bytes_processed - total_bytes; bytes_processed > 0; bytes_processed = bytes_processed - remaining_bytes) {\n        remaining_bytes = (*(code *)params[10])(data,params[8],total_bytes,bytes_processed);\n        if (remaining_bytes < 1) {\n          *(ushort *)(params + 3) = *(ushort *)(params + 3) | 0x40;\n          return -1;\n        }\n        total_bytes = total_bytes + remaining_bytes;\n      }\n    }\n  }\n  else {\n    if ((params[1] < 1) && (params[0x10] < 1)) {\n      return 0;\n    }\n    function_ptr = (code *)params[0xb];\n    if (function_ptr == (code *)0x0) {\n      return 0;\n    }\n    temp_flag = *data;\n    *data = 0;\n    if ((flag_bits & 0x1000) == 0) {\n      bytes_processed = (*function_ptr)(data,params[8],flag & 0x1000,1);\n      if ((bytes_processed == -1) && (*data != 0)) {\n        if ((*data == 0x1d) || (*data == 0x16)) {\n          *data = temp_flag;\n          return 0;\n        }\n        flag_bits = *(ushort *)(params + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      bytes_processed = params[0x15];\n    }\n    if (((int)((uint)*(ushort *)(params + 3) << 0x1d) < 0) && (params[0xd] != 0)) {\n      bytes_processed = bytes_processed - params[1];\n      if (params[0xd] != (int *)(params + 0x11)) {\n        FUN_00004b34(data);\n      }\n      bytes_processed = bytes_processed - params[0x10];\n    }\n    bytes_processed = (*(code *)params[0xb])(data,params[8],bytes_processed,0);\n    flag_bits = *(ushort *)(params + 3);\n    if ((bytes_processed == -1) && ((0x1d < *data || (-1 < (int)((DAT_00004154 >> (*data & 0xff)) << 0x1f)))) {\n      *(ushort *)(params + 3) = flag_bits | 0x40;\n      return bytes_processed;\n    }\n    params[1] = 0;\n    *params = params[4];\n    if (((int)((uint)flag_bits << 0x13) < 0) && ((bytes_processed != -1 || (*data == 0)))) {\n      params[0x15] = bytes_processed;\n    }\n    ptr1 = (int *)params[0xd];\n    *data = temp_flag;\n    if (ptr1 != (int *)0x0) {\n      if (ptr1 != params + 0x11) {\n        FUN_00004b34(data);\n      }\n      params[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000404c",
            "calling": [
                "FUN_00006768",
                "FUN_00004158"
            ],
            "imported": true,
            "current_name": "process_data_0000404c"
        },
        "FUN_00002f74": {
            "renaming": {
                "FUN_00002f74": "printConnectedDevices_00002f74",
                "uVar1": "deviceAddress",
                "FUN_000039e8": "getDeviceAddress",
                "local_18": "deviceCount",
                "FUN_00004c84": "printMessage",
                "local_14": "deviceList"
            },
            "code": "void printConnectedDevices_00002f74(void)\n{\n  undefined4 deviceAddress;\n  int deviceCount = 0;\n  undefined4 *deviceList = *(undefined4 **)PTR_DAT_00002fd0;\n  if (deviceList == (undefined4 *)0x0) {\n    printMessage(PTR_s_No_devices_found_00002fd8);\n  }\n  else {\n    printMessage(PTR_s_ID_Class_Name_00002fd4);\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    deviceAddress = getDeviceAddress(*(undefined *)(deviceList[3] + 8));\n    printMessage(PTR_s___i__s__s_00002fdc,deviceCount,deviceAddress,deviceList[2]);\n    deviceCount++;\n  }\n  return;\n}",
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_000039e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002f74",
            "calling": [
                "FUN_0000316c"
            ],
            "imported": true,
            "current_name": "printConnectedDevices_00002f74"
        },
        "FUN_000010a0": {
            "renaming": {
                "FUN_000010a0": "get_offset_of_first_nonmatching_pointer_000010a0",
                "local_c": "current_ptr",
                "param_1": "ptr_array"
            },
            "code": "int get_offset_of_first_nonmatching_pointer_000010a0(int *ptr_array) {\n  int *current_ptr;\n  for (current_ptr = ptr_array; (int *)*current_ptr == current_ptr; current_ptr++) {\n  }\n  return (int)current_ptr - (int)ptr_array;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000010a0",
            "calling": [
                "FUN_0000211c"
            ],
            "imported": true,
            "current_name": "get_offset_of_first_nonmatching_pointer_000010a0"
        },
        "FUN_000012e2": {
            "renaming": {
                "FUN_000012e2": "find_value_000012e2",
                "iVar1": "result",
                "FUN_0000231c": "check_value",
                "FUN_0000129c": "reset_value",
                "param_1": "base_address",
                "param_2": "param_2",
                "param_3": "param_3"
            },
            "code": "int find_value_000012e2(int base_address, undefined4 param_2, undefined4 param_3)\n{\n  int result;\n  while(true)\n  {\n    result = check_value(base_address + 4, param_2, param_3);\n    if(result != 0)\n      break;\n    reset_value(base_address);\n  }\n  return result;\n}",
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000012e2",
            "calling": [
                "FUN_00000e14"
            ],
            "imported": true,
            "current_name": "find_value_000012e2"
        },
        "FUN_000056a0": {
            "renaming": {
                "FUN_000056a0": "process_data_and_send_result_000056a0",
                "FUN_0000562c": "process_data",
                "uStack_8": "output_buffer_ptr",
                "param_1": "data",
                "uStack_c": "data_ptr",
                "param_2": "data_size",
                "param_3": "output_buffer",
                "param_4": "output_buffer_size"
            },
            "code": "void process_data_and_send_result_000056a0(void* data, int data_size, void* output_buffer, int output_buffer_size)\n{\n  void* data_ptr = data;\n  int data_size_local = data_size;\n  void* output_buffer_ptr = output_buffer;\n  int output_buffer_size_local = output_buffer_size;\n  process_data(data_ptr, data_size_local, &output_buffer_ptr, output_buffer_size_local, data_ptr);\n  return;\n}",
            "called": [
                "FUN_0000562c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000056a0",
            "calling": [
                "FUN_00005100"
            ],
            "imported": true,
            "current_name": "process_data_and_send_result_000056a0"
        },
        "FUN_0000231c": {
            "renaming": {
                "FUN_0000231c": "copy_data_0000231c",
                "iVar2": "status",
                "uVar1": "current_data",
                "param_1": "data_size",
                "param_2": "source",
                "param_3": "destination",
                "local_20": "current_source",
                "local_14": "data_size"
            },
            "code": "int copy_data_0000231c(int data_size, char* source, char* destination)\n{\n  char* current_source = source;\n  char* current_destination = destination;\n  while ((data_size != 0 && (int)(*(undefined4*)FUN_00002270(current_source)) == 0))\n  {\n    char current_data = (char)(*(undefined4*)FUN_000022f0(current_source));\n    *current_destination = current_data;\n    data_size--;\n    current_source++;\n    current_destination++;\n  }\n  return data_size;\n}",
            "called": [
                "FUN_000022f0",
                "FUN_00002270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000231c",
            "calling": [
                "FUN_000012e2"
            ],
            "imported": true,
            "current_name": "copy_data_0000231c"
        },
        "FUN_000061cc": {
            "renaming": {
                "FUN_000061cc": "FUNC_000061cc"
            },
            "code": "\nint FUNC_000061cc(int param_1,byte **param_2,byte *param_3,int **param_4)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  uint uVar6;\n  int **local_2b0;\n  undefined auStack_2ac [256];\n  uint local_1ac;\n  undefined4 local_1a8;\n  uint local_1a4;\n  int local_1a0;\n  int local_19c;\n  undefined *local_198;\n  int local_194;\n  undefined *local_30;\n  code *local_2c;\n  \n  puVar2 = PTR_DAT_000064b4;\n  puVar1 = PTR_DAT_000064b0;\n  local_1a0 = 0;\n  local_19c = 0;\n  local_30 = PTR_LAB_00006118_1_000064a8;\n  local_2c = DAT_000064ac;\n  local_2b0 = param_4;\n  local_198 = auStack_2ac;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      uVar6 = (uint)*param_3;\n      if (uVar6 == 0) {\n        return local_1a0;\n      }\n      uVar4 = (byte)puVar1[uVar6] & 8;\n      pbVar5 = param_3 + 1;\n      if ((puVar1[uVar6] & 8) == 0) break;\n      while (((param_3 = pbVar5, 0 < (int)param_2[1] ||\n              (iVar3 = (*local_2c)(param_1,param_2), iVar3 == 0)) &&\n             ((int)((uint)(byte)puVar1[**param_2] << 0x1c) < 0))) {\n        local_19c = local_19c + 1;\n        param_2[1] = param_2[1] + -1;\n        *param_2 = *param_2 + 1;\n      }\n    }\n    if (uVar6 == 0x25) break;\nLAB_00006352:\n    if (((int)param_2[1] < 1) && (iVar3 = (*local_2c)(param_1,param_2), iVar3 != 0))\n    goto LAB_00006380;\n    if (**param_2 != uVar6) {\n      return local_1a0;\n    }\n    *param_2 = *param_2 + 1;\n    local_19c = local_19c + 1;\n    param_2[1] = param_2[1] + -1;\n    param_3 = pbVar5;\n  }\n  local_1a4 = uVar4;\n  local_1ac = uVar4;\n  if (param_3[1] == 0x2a) {\n    pbVar5 = param_3 + 2;\n    local_1ac = 0x10;\n  }\n  while( true ) {\n    uVar4 = (uint)*pbVar5;\n    if (9 < uVar4 - 0x30) break;\n    pbVar5 = pbVar5 + 1;\n    local_1a4 = (local_1a4 * 10 + uVar4) - 0x30;\n  }\n  iVar3 = FUN_00006010(PTR_DAT_000064b4,uVar4,3);\n  if (iVar3 != 0) {\n    local_1ac = 1 << (iVar3 - (int)puVar2 & 0xffU) | local_1ac;\n    pbVar5 = pbVar5 + 1;\n  }\n  param_3 = pbVar5 + 1;\n  uVar4 = (uint)*pbVar5;\n  if (uVar4 < 0x79) {\n    if (0x57 < uVar4) {\n      switch(uVar4) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param_3 = (byte *)FUN_0000687c(auStack_2ac,param_3);\n        local_1ac = local_1ac | 0x40;\n        local_194 = 1;\n        break;\n      case 99:\n        local_1ac = local_1ac | 0x40;\n        local_194 = 0;\n        break;\n      case 100:\n      case 0x75:\n        local_1a8 = 10;\nLAB_000063a0:\n        if (uVar4 < 0x6f) {\n          local_194 = 3;\n        }\n        else {\n          local_194 = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        local_194 = 5;\n        break;\n      case 0x69:\n        local_1a8 = 0;\n        local_194 = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(local_1ac << 0x1b)) {\n          if ((int)(local_1ac << 0x1f) < 0) {\n            *(short *)*local_2b0 = (short)local_19c;\n            local_2b0 = local_2b0 + 1;\n          }\n          else {\n            **local_2b0 = local_19c;\n            local_2b0 = local_2b0 + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        local_1a8 = 8;\n        local_194 = 4;\n        break;\n      case 0x70:\n        local_1ac = local_1ac | 0x20;\n      case 0x58:\n      case 0x78:\n        local_1ac = local_1ac | 0x200;\n        local_1a8 = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        local_194 = 2;\n      }\nLAB_000063ac:\n      if (((int)param_2[1] < 1) && (iVar3 = (*local_2c)(param_1,param_2), iVar3 != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(local_1ac << 0x19)) {\n        while ((int)((uint)(byte)puVar1[**param_2] << 0x1c) < 0) {\n          local_19c = local_19c + 1;\n          pbVar5 = param_2[1];\n          param_2[1] = pbVar5 + -1;\n          if ((int)(pbVar5 + -1) < 1) {\n            iVar3 = (*local_2c)(param_1,param_2);\n            if (iVar3 != 0) goto LAB_00006380;\n          }\n          else {\n            *param_2 = *param_2 + 1;\n          }\n        }\n      }\n      if (local_194 < 3) {\n        iVar3 = FUN_000064bc(param_1,&local_1ac,param_2,&local_2b0);\n      }\n      else if (local_194 < 5) {\n        iVar3 = FUNC_0000656c(param_1,&local_1ac,param_2,&local_2b0);\n      }\n      else {\n        iVar3 = param_1;\n        if (DAT_000064b8 == 0) goto LAB_000061f6;\n      }\n      if (iVar3 == 1) {\n        return local_1a0;\n      }\n      if (iVar3 == 2) {\nLAB_00006380:\n        if (local_1a0 == 0) {\nLAB_00006388:\n          local_1a0 = -1;\n        }\n        else if ((*(ushort *)(param_2 + 3) & 0x40) != 0) {\n          local_1a0 = -1;\n        }\n        return local_1a0;\n      }\n      goto LAB_000061f6;\n    }\n    pbVar5 = param_3;\n    if (uVar4 == 0x25) goto LAB_00006352;\n    if (uVar4 < 0x26) {\n      if (uVar4 != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (uVar4 - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  local_194 = 3;\n  local_1a8 = 10;\n  goto LAB_000063ac;\n}\n\n",
            "called": [
                "FUN_00006192",
                "FUN_0000656c",
                "FUN_00006010",
                "FUN_000064bc",
                "FUN_0000687c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000061cc",
            "calling": [
                "FUN_00005e68"
            ],
            "imported": false,
            "current_name": "FUNC_000061cc"
        },
        "FUN_00002690": {
            "renaming": {
                "FUN_00002690": "FUNC_00002690"
            },
            "code": "\nundefined4 FUNC_00002690(undefined4 param_1)\n\n{\n  undefined4 local_10;\n  undefined4 uStack_c;\n  \n  local_10 = FUN_000028f0();\n  uStack_c = 0;\n  FUN_0000443c(&local_10,param_1);\n  return 0;\n}\n\n",
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00002690",
            "calling": [
                "FUN_000033c0"
            ],
            "imported": false,
            "current_name": "FUNC_00002690"
        },
        "FUN_00006010": {
            "renaming": {
                "bVar1": "byte_value",
                "uVar10": "remaining_data_length",
                "uVar11": "block_1",
                "uVar12": "block_2",
                "bVar13": "has_byte_1",
                "cVar5": "mask_4",
                "FUN_00006010": "find_next_occurrence_00006010",
                "param_1": "data",
                "cVar4": "mask_3",
                "bVar14": "has_byte_2",
                "pbVar6": "next_byte_ptr",
                "puVar7": "current_ptr",
                "bVar15": "has_byte_3",
                "bVar16": "has_byte_4",
                "pbVar8": "result_ptr",
                "param_2": "search_value",
                "cVar3": "mask_2",
                "param_3": "data_length",
                "cVar2": "mask_1",
                "uVar9": "current_offset"
            },
            "code": "byte* find_next_occurrence_00006010(uint* data, uint search_value, uint data_length) {\n  byte* result = 0;\n  uint* current = data;\n  uint* end = data + (data_length / sizeof(uint));\n  uint search_mask = search_value | (search_value << 8) | (search_value << 16) | (search_value << 24);\n  while (current < end) {\n    uint block = *current++;\n    block ^= search_mask;\n    if (block != 0) {\n      byte* block_bytes = (byte*)&block;\n      if (block_bytes[0] == search_value) {\n        result = (byte*)(current - 1);\n        break;\n      }\n      if (block_bytes[1] == search_value) {\n        result = (byte*)current - 2;\n        break;\n      }\n      if (block_bytes[2] == search_value) {\n        result = (byte*)current - 3;\n        break;\n      }\n      if (block_bytes[3] == search_value) {\n        result = (byte*)current - 4;\n        break;\n      }\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006010",
            "calling": [
                "FUN_00005b34",
                "FUN_000057f8",
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "imported": true,
            "current_name": "find_next_occurrence_00006010"
        },
        "FUN_00001cf0": {
            "renaming": {
                "FUN_00001cf0": "checkIfPointerIsNull_00001cf0",
                "PTR_DAT_00001d04": "pointerValue",
                "FUN_0000093c": "doSomething"
            },
            "code": "void checkIfPointerIsNull_00001cf0(void)\n{\n  int* PTR_DAT_00001d04 = (int*) PTR_DAT_00001d04;\n  if (*PTR_DAT_00001d04 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}",
            "called": [
                "FUN_0000093c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001cf0",
            "calling": [
                "FUN_00002028"
            ],
            "imported": true,
            "current_name": "checkIfPointerIsNull_00001cf0"
        },
        "FUN_00003ec4": {
            "renaming": {
                "iVar1": "integer_digits_written",
                "local_c": "digits_written",
                "param_1": "output_buffer",
                "FUN_00003ec4": "convert_number_to_string_00003ec4",
                "param_2": "number",
                "param_3": "num_digits_after_decimal_point",
                "uVar3": "integer_part",
                "local_10": "remainder",
                "uVar2": "fractional_digits_written"
            },
            "code": "int convert_number_to_string_00003ec4(char *output_buffer, uint32_t number, int num_digits_after_decimal_point) {\n  int digits_written = 0;\n  if (num_digits_after_decimal_point + 7 < 0 != __builtin_sadd_overflow(num_digits_after_decimal_point, 7, (int *)&number)) {\n    print_error_and_exit(\"FAILED ASSERTION: num_digits_after_decimal_point + 7 >= 0\");\n  }\n  if (num_digits_after_decimal_point == 0) {\n    digits_written = convert_integer_to_string(output_buffer, number);\n  }\n  else if (num_digits_after_decimal_point < 1) {\n    uint32_t integer_part = number / *(uint32_t *)(PTR_DAT_00003ff0 + num_digits_after_decimal_point * -4);\n    int remainder = number - *(uint32_t *)(PTR_DAT_00003ff0 + num_digits_after_decimal_point * -4) * integer_part;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((integer_part == 0) && ((int)number < 0)) {\n      if (output_buffer != NULL) {\n        *output_buffer = '-';\n      }\n      digits_written = 1;\n    }\n    if (output_buffer == NULL) {\n      int integer_digits_written = convert_integer_to_string(NULL, integer_part);\n      digits_written = integer_digits_written + 1 + digits_written;\n    }\n    else {\n      int integer_digits_written = convert_integer_to_string(output_buffer + digits_written, integer_part);\n      digits_written = digits_written + integer_digits_written;\n      digits_written = digits_written + 1;\n      output_buffer[digits_written - 1] = '.';\n      uint32_t fractional_part = convert_integer_to_string(output_buffer + digits_written, remainder);\n      print_leading_zeros(output_buffer + digits_written, num_digits_after_decimal_point + 1 - fractional_part);\n    }\n    digits_written = -num_digits_after_decimal_point + digits_written;\n  }\n  else {\n    digits_written = convert_integer_to_string(output_buffer, number);\n    if (output_buffer != NULL) {\n      print_leading_zeros(output_buffer + digits_written, num_digits_after_decimal_point);\n    }\n    digits_written = num_digits_after_decimal_point + digits_written;\n  }\n  return digits_written;\n}",
            "called": [
                "FUN_00003ff4",
                "FUN_00003e58",
                "FUN_00000f04",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003ec4",
            "calling": [
                "FUN_00003e9e"
            ],
            "imported": true,
            "current_name": "convert_number_to_string_00003ec4"
        },
        "FUN_00001360": {
            "renaming": {
                "param_1": "base_address",
                "FUN_00001360": "calculate_address_00001360",
                "param_2": "offset"
            },
            "code": "int calculate_address_00001360(uint32_t base_address, int offset) {\n    uint32_t masked_address = base_address & 0xf0000000;\n    uint32_t shifted_offset = (base_address & 0xfffff) << 5;\n    int calculated_address = (offset * 4) + masked_address + shifted_offset + 0x2000000;\n    return calculated_address;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001360",
            "calling": [
                "FUN_00001392"
            ],
            "imported": true,
            "current_name": "calculate_address_00001360"
        },
        "FUN_00004622": {
            "renaming": {
                "*puVar1": "*end",
                "param_1": "array",
                "FUN_00004622": "fill_array_with_value_00004622",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end"
            },
            "code": "void fill_array_with_value_00004622(void *array, int value, int size) {\n  void *end = array + size;\n  for (; array != end; array++) {\n    *array = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004622",
            "calling": [
                "FUN_00004248",
                "FUN_0000305c",
                "FUN_000041f4",
                "FUN_00003ff4",
                "FUN_00004314",
                "FUN_00003ec4"
            ],
            "imported": true,
            "current_name": "fill_array_with_value_00004622"
        },
        "FUN_0000093c": {
            "renaming": {
                "FUN_0000093c": "set_flag_for_data_access_0000093c",
                "DAT_00000954": "data_start_address"
            },
            "code": "void set_flag_for_data_access_0000093c(void)\n{\n  uint32_t* data_ptr = (uint32_t*)(DAT_00000954 + 4);\n  *data_ptr |= 0x10000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000093c",
            "calling": [
                "FUN_00000738",
                "FUN_00001348",
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00002434"
            ],
            "imported": true,
            "current_name": "set_flag_for_data_access_0000093c"
        },
        "FUN_00003658": {
            "renaming": {
                "void": "",
                "DAT_00003680": "dataStart",
                "uint": "unsigned int",
                "DataSynchronizationBarrier": "synchronizeDataBarrier",
                "DAT_00003684": "newData",
                "PTR_": "",
                "FUN_00003658": "synchronizeData_00003658",
                "true": "forever",
                "0xf": "SYNCHRONIZE_ALL_CORES"
            },
            "code": "PTR_vPTR_oPTR_iPTR_dPTR_ synchronizeData_00003658(PTR_vPTR_oPTR_iPTR_dPTR_)PTR_\nPTR_{PTR_\nPTR_ PTR_ PTR_DPTR_aPTR_tPTR_aPTR_SPTR_yPTR_nPTR_cPTR_hPTR_rPTR_oPTR_nPTR_iPTR_zPTR_aPTR_tPTR_iPTR_oPTR_nPTR_BPTR_aPTR_rPTR_rPTR_iPTR_ePTR_rPTR_(PTR_0PTR_xPTR_fPTR_)PTR_;PTR_\nPTR_ PTR_ PTR_uPTR_iPTR_nPTR_tPTR_*PTR_ PTR_dPTR_aPTR_tPTR_aPTR_PPTR_oPTR_iPTR_nPTR_tPTR_ePTR_rPTR_ PTR_=PTR_ PTR_(PTR_uPTR_iPTR_nPTR_tPTR_*PTR_)PTR_(PTR_DPTR_APTR_TPTR__PTR_0PTR_0PTR_0PTR_0PTR_3PTR_6PTR_8PTR_0PTR_ PTR_+PTR_ PTR_0PTR_xPTR_cPTR_)PTR_;PTR_\nPTR_ PTR_ PTR_uPTR_iPTR_nPTR_tPTR_ PTR_DPTR_APTR_TPTR__PTR_0PTR_0PTR_0PTR_0PTR_3PTR_6PTR_8PTR_4PTR_ PTR_=PTR_ PTR_DPTR_APTR_TPTR__PTR_0PTR_0PTR_0PTR_0PTR_3PTR_6PTR_8PTR_4PTR_ PTR_|PTR_ PTR_(PTR_*PTR_dPTR_aPTR_tPTR_aPTR_PPTR_oPTR_iPTR_nPTR_tPTR_ePTR_rPTR_ PTR_&PTR_ PTR_0PTR_xPTR_7PTR_0PTR_0PTR_)PTR_;PTR_\nPTR_ PTR_ PTR_*PTR_dPTR_aPTR_tPTR_aPTR_PPTR_oPTR_iPTR_nPTR_tPTR_ePTR_rPTR_ PTR_=PTR_ PTR_DPTR_APTR_TPTR__PTR_0PTR_0PTR_0PTR_0PTR_3PTR_6PTR_8PTR_4PTR_;PTR_\nPTR_ PTR_ PTR_DPTR_aPTR_tPTR_aPTR_SPTR_yPTR_nPTR_cPTR_hPTR_rPTR_oPTR_nPTR_iPTR_zPTR_aPTR_tPTR_iPTR_oPTR_nPTR_BPTR_aPTR_rPTR_rPTR_iPTR_ePTR_rPTR_(PTR_0PTR_xPTR_fPTR_)PTR_;PTR_\nPTR_ PTR_ PTR_wPTR_hPTR_iPTR_lPTR_ePTR_(PTR_tPTR_rPTR_uPTR_ePTR_)PTR_\nPTR_ PTR_ PTR_{PTR_\nPTR_ PTR_ PTR_ PTR_ PTR_/PTR_/PTR_ PTR_DPTR_oPTR_ PTR_nPTR_oPTR_tPTR_hPTR_iPTR_nPTR_gPTR_ PTR_bPTR_lPTR_oPTR_cPTR_kPTR_ PTR_wPTR_iPTR_tPTR_hPTR_ PTR_iPTR_nPTR_fPTR_iPTR_nPTR_iPTR_tPTR_ePTR_ PTR_lPTR_oPTR_oPTR_pPTR_\nPTR_ PTR_ PTR_}PTR_\nPTR_}PTR_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003658",
            "calling": [
                "FUN_00003688"
            ],
            "imported": true,
            "current_name": "synchronizeData_00003658"
        },
        "FUN_000019c0": {
            "renaming": {
                "FUN_00001748": "set_up_clock",
                "FUN_00001778": "set_up_gpio_pins",
                "FUN_00001734": "clear_interrupt",
                "FUN_00001710": "set_up_interrupt",
                "PTR_DAT_00001a14": "status_register",
                "DAT_00001a0c": "interrupt_register",
                "DAT_00001a10": "control_register",
                "FUN_000019c0": "initialize_device_000019c0"
            },
            "code": "void initialize_device_000019c0(void)\n{\n  set_up_gpio_pins();\n  set_up_clock(0x40);\n  set_up_interrupt(DAT_00001a0c,1);\n  *DAT_00001a10 = (*DAT_00001a10 & 0x3b) | 0x80;\n  while ((DAT_00001a10[6] & 0xc) != 8);\n  clear_interrupt();\n  *PTR_DAT_00001a14 = 3;\n  return;\n}",
            "called": [
                "FUN_00001734",
                "FUN_00001748",
                "FUN_00001778",
                "FUN_00001710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000019c0",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": true,
            "current_name": "initialize_device_000019c0"
        },
        "FUN_000060b0": {
            "renaming": {
                "puVar2": "source_end",
                "puVar3": "destination",
                "param_1": "destination_index",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "next_source",
                "FUN_000060b0": "copy_to_destination_000060b0"
            },
            "code": "void copy_to_destination_000060b0(int destination_index, undefined *source, int length) {\n  undefined *source_end = source + length;\n  undefined *destination = (undefined *)(destination_index + -1);\n  if (source != source_end) {\n    do {\n      undefined *next_source = source + 1;\n      destination = destination + 1;\n      *destination = *source;\n      source = next_source;\n    } while (next_source != source_end);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000060b0",
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "imported": true,
            "current_name": "copy_to_destination_000060b0"
        },
        "FUN_00006a14": {
            "renaming": {
                "FUN_00006a14": "FUNC_00006a14"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong FUNC_00006a14(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  uint uVar1;\n  uint *puVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar4 = count_leading_zeroes(param_3);\n      if (uVar4 != 0) {\n        param_3 = param_3 << (uVar4 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar4 & 0xff) | param_2 << (uVar4 & 0xff);\n        param_1 = param_1 << (uVar4 & 0xff);\n      }\n      uVar7 = param_3 >> 0x10;\n      uVar9 = param_2 / uVar7;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar7 * uVar9) * 0x10000;\n      uVar1 = uVar9 * (param_3 & 0xffff);\n      uVar6 = uVar9;\n      if (uVar5 <= uVar1 && uVar1 - uVar5 != 0) {\n        bVar11 = CARRY4(param_3,uVar5);\n        uVar5 = param_3 + uVar5;\n        uVar6 = uVar9 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar1 && uVar1 - uVar5 != 0)) {\n          uVar6 = uVar9 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar9 = (uVar5 - uVar1) / uVar7;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar1) - uVar7 * uVar9) * 0x10000;\n      uVar7 = uVar9 * (param_3 & 0xffff);\n      uVar1 = uVar9;\n      if (uVar5 <= uVar7 && uVar7 - uVar5 != 0) {\n        bVar11 = CARRY4(param_3,uVar5);\n        uVar5 = param_3 + uVar5;\n        uVar1 = uVar9 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar7 && uVar7 - uVar5 != 0)) {\n          uVar1 = uVar9 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar5 = uVar5 - uVar7;\n      puVar2 = (uint *)(uVar1 | uVar6 << 0x10);\n      puVar3 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x00006abc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x6abc);\n        uVar12 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar12;\n      }\n      uVar4 = count_leading_zeroes(param_3);\n      if (uVar4 == 0) {\n        param_2 = param_2 - param_3;\n        uVar10 = param_3 >> 0x10;\n        uVar8 = param_3 & 0xffff;\n        puVar3 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar4 & 0xff);\n        uVar10 = param_3 >> 0x10;\n        uVar6 = param_2 >> (0x20 - uVar4 & 0xff);\n        uVar1 = param_1 >> (0x20 - uVar4 & 0xff) | param_2 << (uVar4 & 0xff);\n        uVar5 = uVar6 / uVar10;\n        uVar8 = param_3 & 0xffff;\n        uVar9 = uVar1 >> 0x10 | (uVar6 - uVar10 * uVar5) * 0x10000;\n        uVar7 = uVar5 * uVar8;\n        param_1 = param_1 << (uVar4 & 0xff);\n        uVar6 = uVar5;\n        if (uVar9 <= uVar7 && uVar7 - uVar9 != 0) {\n          bVar11 = CARRY4(param_3,uVar9);\n          uVar9 = param_3 + uVar9;\n          uVar6 = uVar5 - 1;\n          if ((bVar11 == false) && (uVar9 <= uVar7 && uVar7 - uVar9 != 0)) {\n            uVar6 = uVar5 - 2;\n            uVar9 = uVar9 + param_3;\n          }\n        }\n        uVar5 = (uVar9 - uVar7) / uVar10;\n        param_2 = uVar1 & 0xffff | ((uVar9 - uVar7) - uVar10 * uVar5) * 0x10000;\n        uVar7 = uVar5 * uVar8;\n        uVar1 = uVar5;\n        if (param_2 <= uVar7 && uVar7 - param_2 != 0) {\n          bVar11 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar1 = uVar5 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar7 && uVar7 - param_2 != 0)) {\n            uVar1 = uVar5 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar7;\n        puVar3 = (uint *)(uVar1 | uVar6 << 0x10);\n      }\n      uVar7 = param_2 / uVar10;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar10 * uVar7) * 0x10000;\n      uVar1 = uVar8 * uVar7;\n      uVar6 = uVar7;\n      if (uVar5 <= uVar1 && uVar1 - uVar5 != 0) {\n        bVar11 = CARRY4(param_3,uVar5);\n        uVar5 = param_3 + uVar5;\n        uVar6 = uVar7 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar1 && uVar1 - uVar5 != 0)) {\n          uVar6 = uVar7 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar7 = (uVar5 - uVar1) / uVar10;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar1) - uVar10 * uVar7) * 0x10000;\n      uVar8 = uVar8 * uVar7;\n      uVar1 = uVar7;\n      if (uVar5 <= uVar8 && uVar8 - uVar5 != 0) {\n        bVar11 = CARRY4(param_3,uVar5);\n        uVar5 = param_3 + uVar5;\n        uVar1 = uVar7 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar8 && uVar8 - uVar5 != 0)) {\n          uVar1 = uVar7 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar5 = uVar5 - uVar8;\n      puVar2 = (uint *)(uVar1 | uVar6 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar5 >> (uVar4 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar3 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar3 = (uint *)count_leading_zeroes(param_4);\n    if (puVar3 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar3;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar3 & 0xff);\n      uVar10 = uVar5 >> 0x10;\n      uVar4 = param_2 >> (uVar8 & 0xff);\n      uVar6 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar3 & 0xff);\n      uVar7 = uVar4 / uVar10;\n      uVar1 = uVar6 >> 0x10 | (uVar4 - uVar10 * uVar7) * 0x10000;\n      uVar9 = uVar7 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar3 & 0xff);\n      param_1 = param_1 << ((uint)puVar3 & 0xff);\n      uVar4 = uVar7;\n      if (uVar1 <= uVar9 && uVar9 - uVar1 != 0) {\n        bVar11 = CARRY4(uVar5,uVar1);\n        uVar1 = uVar5 + uVar1;\n        uVar4 = uVar7 - 1;\n        if ((bVar11 == false) && (uVar1 <= uVar9 && uVar9 - uVar1 != 0)) {\n          uVar4 = uVar7 - 2;\n          uVar1 = uVar1 + uVar5;\n        }\n      }\n      uVar7 = (uVar1 - uVar9) / uVar10;\n      uVar1 = uVar6 & 0xffff | ((uVar1 - uVar9) - uVar10 * uVar7) * 0x10000;\n      uVar9 = uVar7 * (uVar5 & 0xffff);\n      uVar6 = uVar7;\n      if (uVar1 <= uVar9 && uVar9 - uVar1 != 0) {\n        bVar11 = CARRY4(uVar5,uVar1);\n        uVar1 = uVar5 + uVar1;\n        uVar6 = uVar7 - 1;\n        if ((bVar11 == false) && (uVar1 <= uVar9 && uVar9 - uVar1 != 0)) {\n          uVar6 = uVar7 - 2;\n          uVar1 = uVar1 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar4 << 0x10;\n      uVar12 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar1 - uVar9,param_1) < uVar12) {\n        uVar12 = uVar12 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar4 = ((uVar1 - uVar9) - (int)(uVar12 >> 0x20)) - (uint)(param_1 < (uint)uVar12);\n        *param_5 = uVar4 << (uVar8 & 0xff) | param_1 - (uint)uVar12 >> ((uint)puVar3 & 0xff);\n        param_5[1] = uVar4 >> ((uint)puVar3 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar3, param_3 <= param_1)) {\n      bVar11 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar11;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n    }\n  }\n  return CONCAT44(puVar3,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00006a14",
            "calling": [
                "FUN_00006974"
            ],
            "imported": false,
            "current_name": "FUNC_00006a14"
        },
        "FUN_000023d0": {
            "renaming": {
                "uVar1": "result",
                "param_1": "input_value",
                "is_initialized": "is_initialized",
                "PTR_DAT_000023fc": "PTR_DAT_000023fc",
                "FUN_000023d0": "check_if_initialized_000023d0"
            },
            "code": "int check_if_initialized_000023d0(int input_value) {\n  int is_initialized = *(int *)PTR_DAT_000023fc;\n  if (is_initialized == 0) {\n    int result = initialize(1, input_value, 0);\n    return result;\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_000023c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000023d0",
            "calling": [
                "FUN_000023a4"
            ],
            "imported": true,
            "current_name": "check_if_initialized_000023d0"
        },
        "FUN_00000a30": {
            "renaming": {
                "in_r3": "register_value",
                "PTR_DAT_00000a60": "pointer_data_a60",
                "auStack_20": "stack",
                "*(int *)(in_r3 + 0x4c)": "register_value_offset",
                "uRam00000a3c": "ram_data_a3c",
                "FUN_00000a30": "calculate_stack_pointer_00000a30"
            },
            "code": "undefined* calculate_stack_pointer_00000a30(void)\n{\n  int offset;\n  undefined stack[24];\n  offset = -(int)PTR_DAT_00000a60 - *(int *)(in_r3 + 0x4c);\n  FUN_00000f04(4, uRam00000a3c);\n  return stack + offset;\n}",
            "called": [
                "FUN_00000f04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000a30",
            "calling": [],
            "imported": true,
            "current_name": "calculate_stack_pointer_00000a30"
        },
        "FUN_000034c0": {
            "renaming": {
                "PTR_s_commands__00003504": "commands",
                "PTR_s__poweron_power_the_interface_on_00003508": "power_on_function",
                "PTR_s_usage__rtc__command___arguments__00003500": "rtc_command_arguments",
                "PTR_s__clearalarm_deactivate_the_curre_00003510": "clear_alarm_function",
                "PTR_s__setalarm_YYYY_MM_DD_HH_MM_SS_se_00003518": "set_alarm_function",
                "PTR_s__gettime_print_the_current_time_0000351c": "get_time_function",
                "PTR_s__settime_YYYY_MM_DD_HH_MM_SS_set_00003520": "set_time_function",
                "FUN_00004db8": "initialize_function",
                "PTR_s__getalarm_print_the_currently_al_00003514": "get_alarm_function",
                "PTR_s__poweroff_power_the_interface_of_0000350c": "power_off_function",
                "FUN_000034c0": "initialize_rtc_commands_000034c0"
            },
            "code": "int initialize_rtc_commands_000034c0() {\n  initialize_PTR_s_usage__rtc__command___arguments__00003500();\n  initialize_PTR_s_commands__00003504();\n  initialize_PTR_s__poweron_power_the_interface_on_00003508();\n  initialize_PTR_s__poweroff_power_the_interface_of_0000350c();\n  initialize_PTR_s__clearalarm_deactivate_the_curre_00003510();\n  initialize_PTR_s__getalarm_print_the_currently_al_00003514();\n  initialize_PTR_s__setalarm_YYYY_MM_DD_HH_MM_SS_se_00003518();\n  initialize_PTR_s__gettime_print_the_current_time_0000351c();\n  initialize_PTR_s__settime_YYYY_MM_DD_HH_MM_SS_set_00003520();\n  return 0;\n}",
            "called": [
                "FUN_00004db8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000034c0",
            "calling": [
                "FUN_00003524"
            ],
            "imported": true,
            "current_name": "initialize_rtc_commands_000034c0"
        },
        "FUN_000050e8": {
            "renaming": {
                "PTR_DAT_000050f0": "data_pointer",
                "FUN_000050e8": "get_data_pointer_000050e8"
            },
            "code": "const char* get_data_pointer_000050e8(void)\n{\n  return PTR_DAT_000050f0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000050e8",
            "calling": [
                "FUN_000047e4"
            ],
            "imported": true,
            "current_name": "get_data_pointer_000050e8"
        },
        "FUN_000042a4": {
            "renaming": {
                "FUN_000042a4": "initialize_data_000042a4",
                "bVar3": "is_current_data",
                "iVar2": "ptr_data",
                "uVar1": "var1",
                "param_1": "data_address"
            },
            "code": "void initialize_data_000042a4(int data_address)\n{\n  bool is_data_initialized = *(int *)(data_address + 0x18) != 0;\n  if (!is_data_initialized) {\n    *(undefined4 *)(data_address + 0x48) = 0;\n    *(undefined4 *)(data_address + 0x4c) = 0;\n    *(undefined4 *)(data_address + 0x50) = 0;\n    int ptr_data = *(int *)PTR_DAT_0000430c;\n    *(undefined **)(data_address + 0x28) = PTR_DAT_00004310;\n    bool is_current_data = ptr_data == data_address;\n    if (is_current_data) {\n      ptr_data = 1;\n    }\n    if (is_current_data) {\n      *(int *)(data_address + 0x18) = ptr_data;\n    }\n    undefined4 var1 = FUN_00004314(data_address);\n    *(undefined4 *)(data_address + 4) = var1;\n    undefined4 var2 = FUN_00004314(data_address);\n    *(undefined4 *)(data_address + 8) = var2;\n    undefined4 var3 = FUN_00004314(data_address);\n    *(undefined4 *)(data_address + 0xc) = var3;\n    FUN_000041f4(*(undefined4 *)(data_address + 4),4,0);\n    FUN_000041f4(*(undefined4 *)(data_address + 8),9,1);\n    FUN_000041f4(*(undefined4 *)(data_address + 0xc),0x12,2);\n    *(int *)(data_address + 0x18) = 1;\n  }\n  do_nothing_000045ec(DAT_000042a0);\n  return;\n}",
            "called": [
                "FUN_000045ec",
                "FUN_0000428c",
                "FUN_000041f4",
                "FUN_00004314"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000042a4",
            "calling": [
                "FUN_00004c84",
                "FUN_000057f8",
                "FUN_00004db8",
                "FUN_00004418",
                "FUN_00005404",
                "FUN_00005e10",
                "FUN_00006768",
                "FUN_00004158",
                "FUN_00004314",
                "FUN_000054a8",
                "FUN_00004cb4"
            ],
            "imported": true,
            "current_name": "initialize_data_000042a4"
        },
        "FUN_00000514": {
            "renaming": {
                "FUN_00000514": "set_param_to_19_00000514",
                "param_1": "param_value"
            },
            "code": "undefined4 set_param_to_19_00000514(int *param_value)\n{\n  *param_value = 19;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000514",
            "calling": [
                "FUN_000056b8"
            ],
            "imported": true,
            "current_name": "set_param_to_19_00000514"
        },
        "FUN_00002e9c": {
            "renaming": {
                "FUN_00002e9c": "execute_function_00002e9c",
                "FUN_00003688": "initialize_system"
            },
            "code": "undefined4 execute_function_00002e9c(void)\n{\n  initialize_system();\n  return 0;\n}",
            "called": [
                "FUN_00003688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002e9c",
            "calling": [],
            "imported": true,
            "current_name": "execute_function_00002e9c"
        },
        "FUN_00001960": {
            "renaming": {
                "DAT_000019b8": "DAT_control_reg",
                "FUN_00001748": "set_initial_value",
                "DAT_000019b4": "DAT_system_mode",
                "PTR_DAT_000019bc": "PTR_interrupt_reg",
                "FUN_00001710": "set_mode",
                "DAT_status_reg": "DAT_status_reg",
                "FUN_00001960": "initialize_system_00001960"
            },
            "code": "void initialize_system_00001960(void)\n{\n  set_initial_value(160);\n  set_mode(DAT_000019b4,1);\n  *DAT_000019b8 = (*DAT_000019b8 & 0x3b) | 0x44;\n  while ((DAT_status_reg[6] & 0xc) != 4);\n  while ((DAT_status_reg[6] & 0x10) == 0);\n  *PTR_DAT_000019bc = 2;\n  return;\n}",
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001960",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": true,
            "current_name": "initialize_system_00001960"
        },
        "FUN_00000990": {
            "renaming": {
                "FUN_00000990": "do_nothing_00000990"
            },
            "code": "\nvoid do_nothing_00000990(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000990",
            "calling": [
                "FUN_0000099c"
            ],
            "imported": true,
            "current_name": "do_nothing_00000990"
        },
        "FUN_00001a3c": {
            "renaming": {
                "FUN_00001734": "set_flag",
                "FUN_000016ec": "set_data_value",
                "FUN_00001a3c": "initialize_data_and_set_flag_00001a3c",
                "PTR_DAT_00001a5c": "PTR_flag_pointer",
                "DAT_00001a58": "DAT_value"
            },
            "code": "void initialize_data_and_set_flag_00001a3c(void)\n{\n  set_data_value(DAT_00001a58,1);\n  set_flag();\n  *PTR_DAT_00001a5c = 5;\n  return;\n}",
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001a3c",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": true,
            "current_name": "initialize_data_and_set_flag_00001a3c"
        },
        "FUN_000045ee": {
            "renaming": {
                "puVar2": "dest_ptr",
                "param_1": "source_start",
                "FUN_000045ee": "reverse_copy_range_000045ee",
                "param_2": "dest_start",
                "param_3": "length",
                "puVar1": "source_ptr"
            },
            "code": "void reverse_copy_range_000045ee(unsigned char *source_start, unsigned char *dest_start, int length){\n    unsigned char *source_end = source_start + length;\n    unsigned char *dest_end = dest_start + length;\n    \n    if ((dest_start < source_start) && (source_start < dest_end)) {\n        unsigned char *source_ptr = source_end;\n        unsigned char *dest_ptr = dest_end;\n        while (source_ptr != source_start) {\n            dest_ptr--;\n            source_ptr--;\n            *dest_ptr = *source_ptr;\n        }\n    }\n    else {\n        source_start--;\n        for (; dest_start != dest_end; dest_start++) {\n            source_start++;\n            *source_start = *dest_start;\n        }\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000045ee",
            "calling": [
                "FUN_00003ff4"
            ],
            "imported": true,
            "current_name": "reverse_copy_range_000045ee"
        },
        "FUN_00005404": {
            "renaming": {
                "iVar1": "buffer_start",
                "current_position": "current_position",
                "puVar3": "buffer",
                "param_1": "data_addr",
                "max_position": "max_position",
                "remaining_size": "remaining_size",
                "FUN_00005404": "decode_and_store_00005404",
                "param_2": "data",
                "param_3": "data_buffer",
                "param_4": "param_4",
                "uVar2": "buffer_size"
            },
            "code": "uint decode_and_store_00005404(int data_addr, uint data, int *data_buffer, undefined4 param_4)\n{\n  int buffer_start = *data_buffer;\n  uint buffer_size = data_buffer[5];\n  uint current_position = data_buffer[4];\n  uint max_position = *(ushort *)(data_buffer + 3) << 0x1c;\n  undefined *buffer = (undefined *)buffer_start;\n  \n  if ((data_addr != 0) && (*(int *)(data_addr + 0x18) == 0)) {\n    initialize_decoder();\n  }\n  \n  if (data_buffer == (int *)PTR_DAT_0000549c) {\n    data_buffer = *(int **)(data_addr + 4);\n  }\n  else if (data_buffer == (int *)PTR_DAT_000054a0) {\n    data_buffer = *(int **)(data_addr + 8);\n  }\n  else if (data_buffer == (int *)PTR_DAT_000054a4) {\n    data_buffer = *(int **)(data_addr + 0xc);\n  }\n  \n  data_buffer[2] = data_buffer[6];\n  \n  if (((int)max_position < 0 && data_buffer[4] != 0) || FUN_000054a8(data_addr, data_buffer, max_position, data_buffer[4], param_4) == 0) {\n    int remaining_size = buffer_start - current_position;\n    data = data & 0xff;\n    \n    if (remaining_size < buffer_size || FUN_00004158(data_addr, data_buffer) == 0) {\n      data_buffer[2] = data_buffer[2] + -1;\n      buffer[current_position - buffer_start] = (char)data;\n      current_position++;\n      \n      if (buffer_size != current_position) {\n        if ((int)max_position >= 0 || data != 10) {\n          return data;\n        }\n      }\n      else if (FUN_00004158(data_addr, data_buffer) == 0) {\n        return data;\n      }\n    }\n  }\n  \n  return 0xffffffff;\n}",
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005404",
            "calling": [
                "FUN_00004db8",
                "FUN_000057a8",
                "FUN_00004cb4"
            ],
            "imported": true,
            "current_name": "decode_and_store_00005404"
        },
        "FUN_00006974": {
            "renaming": {
                "iVar1": "absolute_dividend_low",
                "param_1": "dividend_high",
                "local_8": "local_buffer",
                "FUN_00006974": "calculate_result_00006974",
                "param_2": "dividend_low",
                "param_3": "divisor_high",
                "param_4": "divisor_low",
                "uVar2": "result"
            },
            "code": "undefined8 calculate_result_00006974(int dividend_high, int dividend_low, int divisor_high, int divisor_low)\n{\n  int quotient_high;\n  int quotient_low;\n  undefined8 result;\n  undefined local_buffer[8];\n  \n  if ((divisor_low == 0) && (divisor_high == 0)) {\n    if (dividend_low < 0) {\n      quotient_low = -0x80000000;\n      quotient_high = 0;\n    }\n    else if (dividend_low != 0 || dividend_high != 0) {\n      quotient_low = 0x7fffffff;\n      quotient_high = -1;\n    }\n    return CONCAT44(quotient_high, quotient_low);\n  }\n  if (dividend_low < 0) {\n    int absolute_dividend_low = -dividend_low - (uint)(dividend_high != 0);\n    if (divisor_high < 0) {\n      result = FUNC_00006a14(-dividend_high, absolute_dividend_low, -divisor_high, -divisor_low - (uint)(divisor_high != 0), local_buffer);\n      return result;\n    }\n    result = FUNC_00006a14(-dividend_high, absolute_dividend_low, divisor_high, divisor_low, local_buffer);\n    quotient_high = -(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0);\n    quotient_low = -(int)result;\n    return CONCAT44(quotient_high, quotient_low);\n  }\n  if (divisor_high < 0) {\n    result = FUNC_00006a14(dividend_high, dividend_low, -divisor_high, -divisor_low - (uint)(divisor_high != 0), local_buffer);\n    quotient_high = -(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0);\n    quotient_low = -(int)result;\n    return CONCAT44(quotient_high, quotient_low);\n  }\n  result = FUNC_00006a14(dividend_high, dividend_low, divisor_high, divisor_low, local_buffer);\n  quotient_high = -(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0);\n  quotient_low = -(int)result;\n  return CONCAT44(quotient_high, quotient_low);\n}",
            "called": [
                "FUN_00006a14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006974",
            "calling": [
                "FUN_0000443c"
            ],
            "imported": true,
            "current_name": "calculate_result_00006974"
        },
        "FUN_00004314": {
            "renaming": {
                "iVar3": "data_section_ptr",
                "piVar2": "next_node_ptr",
                "param_1": "data_ptr",
                "piVar1": "current_node_ptr",
                "FUN_00004314": "find_and_initialize_00004314",
                "ppiVar4": "node_list_ptr"
            },
            "code": "int* find_and_initialize_00004314(int* data_ptr) {\n  int* current_node_ptr;\n  int* next_node_ptr;\n  int data_section_ptr;\n  int** node_list_ptr;\n  initialize_data();\n  data_section_ptr = *(int*)PTR_DAT_00004398;\n  if (*(int*)(data_section_ptr + 0x18) == 0) {\n    initialize_data_section(data_section_ptr);\n  }\n  node_list_ptr = (int**)(data_section_ptr + 0x48);\n  do {\n    current_node_ptr = node_list_ptr[1];\n    next_node_ptr = node_list_ptr[2];\n    while (current_node_ptr = (int*)((int)current_node_ptr - 1), -1 < (int)current_node_ptr) {\n      if (*(short*)(next_node_ptr + 3) == 0) {\n        next_node_ptr[3] = DAT_0000439c;\n        next_node_ptr[0x19] = 0;\n        do_nothing_000045e4(next_node_ptr + 0x16);\n        initialize_data();\n        next_node_ptr[1] = 0;\n        next_node_ptr[2] = 0;\n        next_node_ptr[4] = 0;\n        next_node_ptr[5] = 0;\n        *next_node_ptr = 0;\n        next_node_ptr[6] = 0;\n        initialize_data(next_node_ptr + 0x17, 0, 8);\n        next_node_ptr[0xd] = 0;\n        next_node_ptr[0xe] = 0;\n        next_node_ptr[0x12] = 0;\n        next_node_ptr[0x13] = 0;\n        return next_node_ptr;\n      }\n      next_node_ptr = next_node_ptr + 0x1a;\n    }\n    if (*node_list_ptr == (int*)0x0) {\n      current_node_ptr = (int*)initialize_data(data_ptr, 4);\n      *node_list_ptr = current_node_ptr;\n      if (current_node_ptr == (int*)0x0) {\n        initialize_data();\n        *data_ptr = 0xc;\n        return (int*)0x0;\n      }\n    }\n    node_list_ptr = (int**)*node_list_ptr;\n  } while (true);\n}",
            "called": [
                "FUN_00004280",
                "FUN_00004248",
                "FUN_00004274",
                "FUN_000045e4",
                "FUN_000042a4",
                "FUN_00004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004314",
            "calling": [
                "FUN_000042a4"
            ],
            "imported": true,
            "current_name": "find_and_initialize_00004314"
        },
        "FUN_00004dc8": {
            "renaming": {
                "iVar1": "data_offset",
                "bVar3": "is_offset_valid",
                "param_1": "data",
                "FUN_00004dc8": "process_data_00004dc8",
                "param_2": "data_info",
                "uVar2": "updated_offset"
            },
            "code": "void process_data_00004dc8(undefined4 data, int data_info)\n{\n  int data_offset = FUN_00000490(data, (int)*(short *)(data_info + 0xe));\n  bool is_offset_valid = data_offset >= 0;\n  uint updated_offset;\n  if (is_offset_valid) {\n    updated_offset = *(int *)(data_info + 0x54) + data_offset;\n  }\n  else {\n    updated_offset = *(ushort *)(data_info + 0xc) & 0xffffefff;\n  }\n  if (is_offset_valid) {\n    *(uint *)(data_info + 0x54) = updated_offset;\n  }\n  if (!is_offset_valid) {\n    *(short *)(data_info + 0xc) = (short)updated_offset;\n  }\n  return;\n}",
            "called": [
                "FUN_00000490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004dc8",
            "calling": [],
            "imported": true,
            "current_name": "process_data_00004dc8"
        },
        "FUN_00005fd8": {
            "renaming": {
                "DAT_00005fe8": "ptr_function",
                "param_1": "param_1",
                "param_2": "param_2",
                "param_3": "param_3",
                "FUN_00005fd8": "execute_function_with_params_00005fd8",
                "FUN_00005edc": "execute_function"
            },
            "code": "void execute_function_with_params_00005fd8(void* DAT_00005fe8, int param_1, int param_2, int param_3)\n{\n  execute_function(DAT_00005fe8, param_1, param_2, param_3);\n  return;\n}",
            "called": [
                "FUN_00005edc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005fd8",
            "calling": [
                "FUN_00005100"
            ],
            "imported": true,
            "current_name": "execute_function_with_params_00005fd8"
        },
        "FUN_00005e10": {
            "renaming": {
                "PTR_DAT_00005e64": "buffer_pointer_3",
                "FUN_000042a4": "initialize_buffer",
                "iVar1": "status_check",
                "PTR_DAT_00005e60": "buffer_pointer_2",
                "param_1": "buffer_address",
                "PTR_DAT_00005e5c": "buffer_pointer_1",
                "FUN_00006768": "read_byte_from_buffer",
                "pbVar3": "byte_address",
                "param_2": "buffer_pointer",
                "uVar2": "byte_read",
                "FUN_00005e10": "read_byte_00005e10"
            },
            "code": "uint read_byte_00005e10(int buffer_address, byte **buffer_pointer) {\n  int status_check = *(int *)(buffer_address + 0x18);\n  uint byte_read = 0xffffffff;\n  if (buffer_address != 0 && status_check == 0) {\n    initialize_buffer();\n  }\n  if (buffer_pointer == (byte **)PTR_DAT_00005e5c) {\n    buffer_pointer = *(byte ***)(buffer_address + 4);\n  }\n  else if (buffer_pointer == (byte **)PTR_DAT_00005e60) {\n    buffer_pointer = *(byte ***)(buffer_address + 8);\n  }\n  else if (buffer_pointer == (byte **)PTR_DAT_00005e64) {\n    buffer_pointer = *(byte ***)(buffer_address + 0xc);\n  }\n  int read_status = read_byte_00005e10_from_buffer(buffer_address, buffer_pointer);\n  if (read_status == 0) {\n    buffer_pointer[1] = buffer_pointer[1] - 1;\n    byte *byte_address = *buffer_pointer;\n    *buffer_pointer = byte_address + 1;\n    byte_read = (uint)*byte_address;\n  }\n  return byte_read;\n}",
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005e10",
            "calling": [
                "FUN_00004418"
            ],
            "imported": true,
            "current_name": "read_byte_00005e10"
        },
        "FUN_000033f4": {
            "renaming": {
                "iVar1": "alarm_set",
                "auStack_2c": "alarm_data",
                "param_1": "current_time",
                "PTR_FUN_000031e0_1_0000343c": "ALARM_SETTING_ADDRESS",
                "FUN_00002654": "set_alarm",
                "uVar2": "alarm_set_successfully",
                "FUN_0000328c": "get_valid_time",
                "PTR_s_rtc__error_setting_alarm_00003440": "ERROR_SETTING_ALARM_MSG",
                "FUN_000033f4": "set_alarm_if_valid_time_000033f4"
            },
            "code": "int set_alarm_if_valid_time_000033f4(uint32_t current_time){\n                      int alarm_set_successfully;\n                      uint8_t alarm_data[36];\n                      \n                      int time_valid = get_valid_time(current_time, alarm_data);\n                      \n                      if (time_valid) {\n                        int alarm_set = set_alarm(alarm_data, PTR_FUN_000031e0_1_0000343c, 0);\n                        if (alarm_set == -1) {\n                          log_error(PTR_s_rtc__error_setting_alarm_00003440);\n                          alarm_set_successfully = 0;\n                        }\n                        else {\n                          alarm_set_successfully = 1;\n                        }\n                      }\n                      else {\n                        alarm_set_successfully = 0;\n                      }\n                      return alarm_set_successfully;\n                    }",
            "called": [
                "FUN_0000328c",
                "FUN_00004db8",
                "FUN_00002654"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000033f4",
            "calling": [
                "FUN_00003524"
            ],
            "imported": true,
            "current_name": "set_alarm_if_valid_time_000033f4"
        },
        "FUN_0000443c": {
            "renaming": {
                "DAT_00004598": "days_in_100_years",
                "FUN_0000443c": "convert_unix_time_to_date_time_0000443c",
                "iVar1": "days_since_epoch",
                "DAT_00004590": "days_in_4_years",
                "param_1": "unix_time",
                "DAT_00004594": "days_in_400_years",
                "param_2": "date_time",
                "uVar3": "days_since_thursday",
                "uVar2": "seconds_since_midnight",
                "bVar9": "is_leap_year",
                "uVar5": "century_years_since_1900",
                "uVar4": "leap_years_since_1900",
                "uVar7": "day_of_week",
                "DAT_0000458c": "days_from_1900_to_1970",
                "uVar6": "days_since_jan_1",
                "uVar8": "year"
            },
            "code": "uint * convert_unix_time_to_date_time_0000443c(undefined4 *unix_time, uint *date_time)\n{\n  int days_since_epoch;\n  uint seconds_since_midnight;\n  uint days_since_thursday;\n  uint leap_years_since_1900;\n  uint century_years_since_1900;\n  uint days_since_jan_1;\n  uint day_of_week;\n  uint year;\n  uint days_in_year;\n  uint is_leap_year;\n  uint days_in_month;\n  \n  days_since_epoch = FUN_00006974(*unix_time, unix_time[1], DAT_0000458c, 0);\n  days_since_thursday = days_since_epoch + 4;\n  century_years_since_1900 = days_since_thursday / 36524u;\n  days_since_jan_1 = days_since_thursday - (days_since_thursday / 146097u) * 146097u;\n  leap_years_since_1900 = (days_since_jan_1 - days_since_jan_1 / 1460u + days_since_jan_1 / 36524u - days_since_jan_1 / 146096u) / 365u;\n  year = (days_since_jan_1 - (leap_years_since_1900 + century_years_since_1900) * 365u) / 365u + 1900;\n  days_in_year = 365 + (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n  is_leap_year = year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n  days_in_month = 31 + ((0x3d5d10 * (days_since_jan_1 - leap_years_since_1900 - (year - 1900) * 365 - (year - 1901) / 4 + (year - 1) / 100 - (year - 1) / 400) + 0x7fff) >> 31) - (is_leap_year && days_since_epoch - days_since_jan_1 == 58);\n  seconds_since_midnight = *unix_time % 86400;\n  date_time[2] = days_since_epoch / 365.2425;\n  date_time[1] = (days_since_epoch % 365.2425) / 30.436875;\n  date_time[0] = (days_since_epoch % 365.2425) % 30.436875;\n  day_of_week = (days_since_epoch + 3) % 7;\n  date_time[6] = day_of_week;\n  date_time[7] = days_in_month - days_since_jan_1 + 1;\n  date_time[3] = seconds_since_midnight / 3600;\n  date_time[4] = (seconds_since_midnight % 3600) / 60;\n  date_time[5] = (seconds_since_midnight % 3600) % 60;\n  date_time[8] = 0;\n  return date_time;\n}",
            "called": [
                "FUN_00006974"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000443c",
            "calling": [
                "FUN_00002690",
                "FUN_00002624"
            ],
            "imported": true,
            "current_name": "convert_unix_time_to_date_time_0000443c"
        },
        "FUN_000027b0": {
            "renaming": {
                "puVar1[2]": "system_data[2]",
                "puVar1[5]": "system_data[5]",
                "FUN_000027b0": "initialize_system_000027b0",
                "puVar1[4]": "system_data[4]",
                "puVar1[7]": "system_data[7]",
                "FUN_0000294c": "initialize_subsystem",
                "DAT_00002818": "system_base",
                "DAT_00002814": "system_data",
                "puVar1": "system_data"
            },
            "code": "void initialize_system_000027b0(void)\n{\n  uint32_t *DAT_00002814 = DAT_00002814;\n  uint32_t *DAT_00002818 = (uint32_t *)(DAT_00002818 + 0x103c);\n  *DAT_00002818 |= 0x20000000;\n  DAT_00002814[4] = 1;\n  DAT_00002814[4] = 0;\n  if ((DAT_00002814[5] & 1) != 0) {\n    *DAT_00002814 = 0;\n  }\n  DAT_00002814[4] = 0x104;\n  DAT_00002814[2] = 0xffffff42;\n  DAT_00002814[7] = 0;\n  initialize_subsystem();\n  return;\n}",
            "called": [
                "FUN_0000294c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000027b0",
            "calling": [
                "FUN_000025f4"
            ],
            "imported": true,
            "current_name": "initialize_system_000027b0"
        },
        "FUN_00005ebc": {
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char"
            },
            "code": "void copy_string_00005ebc(char *destination, char *source)\n{\n  char current_char;\n  do {\n    current_char = *source;\n    *destination = current_char;\n    source = source + 1;\n    destination = destination + 1;\n  } while (current_char != '\\0');\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005ebc",
            "calling": [
                "FUN_00005100"
            ],
            "imported": true,
            "current_name": "copy_string_00005ebc"
        },
        "FUN_00006192": {
            "renaming": {
                "FUN_00006192": "initialize_device_00006192",
                "param_1": "device_type",
                "device_ptr": "device_pointer",
                "param_2": "device_data",
                "FUN_00004b34": "reset_device"
            },
            "code": "int initialize_device_00006192(int device_type, int *device_data)\n{\n    int *device_ptr = (int *)device_data[13];\n    if (device_ptr != NULL)\n    {\n        if (device_ptr != device_data + 17)\n        {\n            reset_device();\n        }\n        device_data[1] = device_data[16];\n        device_data[13] = NULL;\n        if (device_data[16] != 0)\n        {\n            *device_data = device_data[15];\n            return 0;\n        }\n    }\n    *device_data = device_data[4];\n    device_data[1] = 0;\n    *(unsigned short *)(device_data + 3) |= 0x20;\n    return -1;\n}",
            "called": [
                "FUN_00004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006192",
            "calling": [
                "FUN_000061cc"
            ],
            "imported": true,
            "current_name": "initialize_device_00006192"
        },
        "FUN_00001734": {
            "renaming": {
                "FUN_00001734": "initialize_data_00001734",
                "DAT_00001744": "PTR_data_array",
                "FUN_00001710": "initialize_array"
            },
            "code": "void initialize_data_00001734(void)\n{\n  initialize_array(DAT_00001744, 6);\n  return;\n}",
            "called": [
                "FUN_00001710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001734",
            "calling": [
                "FUN_00001a3c",
                "FUN_000019c0",
                "FUN_00001a18"
            ],
            "imported": true,
            "current_name": "initialize_data_00001734"
        },
        "FUN_00000e14": {
            "renaming": {
                "uVar1": "result",
                "FUN_00000e14": "convertDataToVar_00000e14",
                "param_1": "data",
                "param_2": "param_2"
            },
            "code": "undefined4 convertDataToVar_00000e14(undefined4 data, undefined4 param_2)\n{\n  undefined4 result;\n  result = FUN_000012e2(DAT_00000e34, data, param_2);\n  return result;\n}",
            "called": [
                "FUN_000012e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000e14",
            "calling": [
                "FUN_00000490"
            ],
            "imported": true,
            "current_name": "convertDataToVar_00000e14"
        },
        "FUN_0000281c": {
            "renaming": {
                "local_c": "value",
                "FUN_0000281c": "find_first_equal_value_in_array_0000281c",
                "DAT_00002858": "array_pointer",
                "local_10": "count"
            },
            "code": "int find_first_equal_value_in_array_0000281c(void)\n{\n  int count = 0;\n  int value;\n  while ((count < 3 && (value = *DAT_00002858, value != *DAT_00002858))) {\n    count++;\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000281c",
            "calling": [
                "FUN_00002624"
            ],
            "imported": true,
            "current_name": "find_first_equal_value_in_array_0000281c"
        },
        "FUN_00002270": {
            "renaming": {
                "bVar3": "is_equal",
                "iVar2": "pointer_value",
                "uVar1": "is_equal",
                "FUN_00002270": "is_variable_equal_to_pointer_00002270",
                "param_1": "pointer_address"
            },
            "code": "bool is_variable_equal_to_pointer_00002270(int pointer_address)\n{\n    int pointer_value = *(int *)(pointer_address + 0xc);\n    bool is_equal = *(int *)(pointer_address + 8) == pointer_value;\n    if (is_equal) {\n        return true;\n    }\n    return false;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002270",
            "calling": [
                "FUN_0000231c"
            ],
            "imported": true,
            "current_name": "is_variable_equal_to_pointer_00002270"
        },
        "FUN_00005780": {
            "renaming": {
                "FUN_00005780": "execute_function_with_data_pointer_00005780",
                "param_1": "data_pointer",
                "*DAT_0000578c": "function_pointer",
                "FUN_00004b34": "execute_function"
            },
            "code": "void execute_function_with_data_pointer_00005780(void* data_pointer) {\n  execute_function(**DAT_0000578c, data_pointer);\n  return;\n}",
            "called": [
                "FUN_00004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00005780",
            "calling": [
                "FUN_00005100"
            ],
            "imported": true,
            "current_name": "execute_function_with_data_pointer_00005780"
        },
        "FUN_000020cc": {
            "renaming": {
                "DAT_000020dc": "data",
                "FUN_000020cc": "initialize_data_000020cc",
                "FUN_00002028": "initialize_data_struct"
            },
            "code": "void initialize_data_000020cc(void)\n{\n  int DAT_000020dc = 1;\n  initialize_data_000020cc_struct(&DAT_000020dc);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000020cc",
            "calling": [],
            "imported": true,
            "current_name": "initialize_data_000020cc"
        },
        "FUN_00002396": {
            "renaming": {
                "FUN_000025f4": "execute_function",
                "FUN_00002396": "call_external_function_00002396"
            },
            "code": "void call_external_function_00002396(void)\n{\n  execute_function();\n  return;\n}",
            "called": [
                "FUN_000025f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002396",
            "calling": [
                "FUN_00001274"
            ],
            "imported": true,
            "current_name": "call_external_function_00002396"
        },
        "FUN_00004cb4": {
            "renaming": {
                "iVar4": "var2",
                "puVar3": "memory_pointer",
                "param_1": "input_byte",
                "FUN_00004cb4": "decrease_and_return_first_byte_00004cb4",
                "unaff_r5": "var3",
                "unaff_r4": "var1",
                "puVar1": "current_pointer",
                "uVar2": "result"
            },
            "code": "uint decrease_and_return_first_byte_00004cb4(uint input_byte) {\n  undefined4 *current_pointer;\n  uint result;\n  undefined *memory_pointer;\n  undefined4 var1;\n  int var2;\n  undefined4 var3;\n  var2 = *global_variable1;\n  if ((var2 != 0) && (*(int *)(var2 + 0x18) == 0)) {\n    close_file(var2);\n  }\n  current_pointer = *(undefined4 **)(var2 + 8);\n  if ((var2 != 0) && (*(int *)(var2 + 0x18) == 0)) {\n    close_file(var2);\n  }\n  if (current_pointer == (undefined4 *)global_variable2) {\n    current_pointer = *(undefined4 **)(var2 + 4);\n  }\n  else if (current_pointer == (undefined4 *)global_variable3) {\n    current_pointer = *(undefined4 **)(var2 + 8);\n  }\n  else if (current_pointer == (undefined4 *)global_variable4) {\n    current_pointer = *(undefined4 **)(var2 + 0xc);\n  }\n  if ((-1 < (int)(current_pointer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(current_pointer + 3) << 0x16))) {\n    do_nothing_1(current_pointer[0x16]);\n  }\n  result = current_pointer[2] - 1;\n  current_pointer[2] = result;\n  if (((int)result < 0) && (((int)result < (int)current_pointer[6] || (result = input_byte & 0xff, result == 10))))\n  {\n    input_byte = do_something(var2,input_byte,current_pointer,result,var1,var3);\n  }\n  else {\n    memory_pointer = (undefined *)*current_pointer;\n    *current_pointer = memory_pointer + 1;\n    *memory_pointer = (char)input_byte;\n    input_byte = input_byte & 0xff;\n  }\n  if ((-1 < (int)(current_pointer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(current_pointer + 3) << 0x16))) {\n    do_nothing_2(current_pointer[0x16]);\n  }\n  return input_byte;\n}",
            "called": [
                "FUN_000045e8",
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004cb4",
            "calling": [
                "FUN_00002a00"
            ],
            "imported": true,
            "current_name": "decrease_and_return_first_byte_00004cb4"
        },
        "FUN_00003478": {
            "renaming": {
                "iVar1": "error_code",
                "auStack_2c": "buffer",
                "param_1": "rtc_time",
                "FUN_00003478": "set_rtc_time_and_check_error_00003478",
                "FUN_00002600": "set_rtc_time",
                "PTR_s_rtc__error_setting_time_000034bc": "error_message",
                "FUN_0000328c": "get_rtc_time_from_buffer"
            },
            "code": "int set_rtc_time_and_check_error_00003478(undefined4 rtc_time)\n{\n  int error_code;\n  undefined4 buffer[9];\n  error_code = get_rtc_time_from_buffer(rtc_time, buffer);\n  if (error_code == 0) {\n    error_code = set_rtc_time(buffer);\n    if (error_code == -1) {\n      print_PTR_s_rtc__error_setting_time_000034bc(PTR_s_rtc__error_setting_time_000034bc);\n      error_code = 1;\n    }\n    else {\n      error_code = 0;\n    }\n  }\n  else {\n    error_code = 1;\n  }\n  return error_code;\n}",
            "called": [
                "FUN_0000328c",
                "FUN_00004db8",
                "FUN_00002600"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003478",
            "calling": [
                "FUN_00003524"
            ],
            "imported": true,
            "current_name": "set_rtc_time_and_check_error_00003478"
        },
        "FUN_00002028": {
            "renaming": {
                "iVar1": "index",
                "local_c": "current_bit",
                "param_1": "flags",
                "PTR_DAT_000020b4": "PTR_DAT_000020b4",
                "FUN_00001cf0": "finalize_process",
                "FUN_00002028": "process_flags_00002028",
                "FUN_00001e0c": "get_index",
                "uVar2": "bit_mask"
            },
            "code": "void process_flags_00002028(int flags, undefined4 param_2)\n{\n  int index;\n  uint bit_mask;\n  uint current_bit;\n  bit_mask = *(uint *)(flags + 0xa0);\n  for (current_bit = 0; (int)current_bit < 0x20; current_bit++) {\n    if (((bit_mask & 1 << (current_bit & 0xff)) != 0) && ((*(uint *)(flags + current_bit * 4) & 0xf0000) != 0)) {\n      *(int *)(flags + 0xa0) = 1 << (current_bit & 0xff);\n      index = get_index(param_2, current_bit);\n      (**(code **)(PTR_DAT_000020b4 + index * 0xc))(*(undefined4 *)(PTR_DAT_000020b4 + index * 0xc + 4));\n    }\n  }\n  finalize_process();\n  return;\n}",
            "called": [
                "FUN_00001e0c",
                "FUN_00001cf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002028",
            "calling": [
                "FUN_000020b8",
                "FUN_000020cc",
                "FUN_00002108",
                "FUN_000020f4",
                "FUN_000020e0"
            ],
            "imported": true,
            "current_name": "process_flags_00002028"
        },
        "FUN_000016c8": {
            "renaming": {
                "*puVar1": "*initialized_flag_pointer",
                "param_1": "memory_address",
                "FUN_00001696": "get_memory_address",
                "param_2": "size",
                "FUN_000016c8": "set_initialized_flag_000016c8",
                "puVar1": "initialized_flag_pointer"
            },
            "code": "void set_initialized_flag_000016c8(void *memory_address, int size){\n  int *initialized_flag_pointer;\n  initialized_flag_pointer = (int *)get_memory_address(memory_address, size);\n  *initialized_flag_pointer = 1;\n  return;\n}",
            "called": [
                "FUN_00001696"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000016c8",
            "calling": [
                "FUN_000017dc"
            ],
            "imported": true,
            "current_name": "set_initialized_flag_000016c8"
        },
        "FUN_00001a60": {
            "renaming": {
                "DAT_00001ac8": "transfer_data",
                "DAT_00001ac4": "transfer_mode_data",
                "PTR_DAT_00001ad0": "transfer_length_pointer",
                "FUN_00001a60": "initialize_data_transfer_00001a60",
                "DAT_00001acc": "transfer_length_data"
            },
            "code": "void initialize_data_transfer_00001a60(void)\n{\n  set_data_transfer_mode(DAT_00001ac4,1);\n  *DAT_00001ac8 = (*DAT_00001ac8 & 0x3f) | 0x80;\n  while ((DAT_00001ac8[6] & 0xc) != 8);\n  set_data_length(DAT_00001acc,6);\n  while ((DAT_00001ac8[6] & 0x20) == 0);\n  while ((DAT_00001ac8[6] & 0x40) == 0);\n  *PTR_DAT_00001ad0 = 6;\n  return;\n}\n",
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001a60",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": true,
            "current_name": "initialize_data_transfer_00001a60"
        },
        "FUN_0000099c": {
            "renaming": {
                "PTR_Elf32_Rel_ARRAY_00000a20": "rel_array_pointer",
                "FUN_00000e64": "call_function_2",
                "local_c": "data_section_pointer",
                "PTR_DAT_00000a24": "rel_array_end",
                "DAT_00000a1c": "bss_section_value",
                "DAT_00000a2c": "data_section_end",
                "FUN_00000f8c": "call_function_4",
                "FUN_00000db0": "call_function_1",
                "PTR_DAT_00000a18": "bss_section_start",
                "uStack_18": "uStack_top",
                "PTR_DAT_00000a28": "data_section_start",
                "local_10": "rel_array_value",
                "FUN_0000459c": "call_function_3",
                "DAT_00000a14": "rel_array_start",
                "do_nothing_00000990": "do_nothing",
                "FUN_0000099c": "initialize_dynamic_memory_0000099c",
                "local_14": "stack_pointer"
            },
            "code": "void initialize_dynamic_memory_0000099c(void)\n{\n  undefined4 uStack_top;\n  undefined4 *stack_pointer = &uStack_top;\n  undefined4 *PTR_Elf32_Rel_ARRAY_00000a20 = DAT_00000a14;\n  undefined4 *bss_section_pointer;\n  call_function_1();\n  bss_section_pointer = (undefined4 *)PTR_DAT_00000a18;\n  while (bss_section_pointer < &uStack_top) {\n    *bss_section_pointer = DAT_00000a1c;\n    bss_section_pointer++;\n  }\n  while (PTR_Elf32_Rel_ARRAY_00000a20 < PTR_DAT_00000a24) {\n    *PTR_Elf32_Rel_ARRAY_00000a20 = *rel_array_value;\n    PTR_Elf32_Rel_ARRAY_00000a20++;\n    rel_array_value++;\n  }\n  undefined4 *data_section_pointer = PTR_DAT_00000a28;\n  while (data_section_pointer < DAT_00000a2c) {\n    *data_section_pointer = 0;\n    data_section_pointer++;\n  }\n  do_nothing();\n  call_function_2();\n  call_function_3();\n  call_function_4();\n  return;\n}",
            "called": [
                "FUN_00000e64",
                "FUN_00000990",
                "FUN_00000f8c",
                "FUN_0000459c",
                "FUN_00000db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000099c",
            "calling": [],
            "imported": true,
            "current_name": "initialize_dynamic_memory_0000099c"
        },
        "FUN_00002d94": {
            "renaming": {
                "bVar2": "backspace_or_delete",
                "iVar1": "char_code",
                "bVar3": "is_first_char",
                "local_c": "string_end",
                "param_1": "input_buffer",
                "param_2": "buffer_size",
                "FUN_00002d94": "convert_input_to_string_00002d94"
            },
            "code": "uint convert_input_to_string_00002d94(undefined *input_buffer, int buffer_size)\n{\n  int char_code;\n  byte backspace_or_delete;\n  bool is_first_char = true;\n  undefined *string_end = input_buffer;\n\n  while( true ) {\n    if (buffer_size + -1 <= (int)string_end - (int)input_buffer) {\n      return 0xffffffff;\n    }\n    char_code = get_next_char();\n    if (char_code < 0) break;\n    if ((char_code == 0xd) || (char_code == 10)) {\n      *string_end = 0;\n      print_char(0xd);\n      print_char(10);\n      if (is_first_char) {\n        input_buffer = (undefined *)0x1;\n      }\n      backspace_or_delete = (byte)input_buffer;\n      if (!is_first_char) {\n        backspace_or_delete = 0;\n      }\n      return (uint)backspace_or_delete;\n    }\n    if ((char_code == 8) || (char_code == 0x7f)) {\n      if (string_end != input_buffer) {\n        string_end = string_end - 1;\n        *string_end = 0;\n        print_char(8);\n        print_char(0x20);\n        print_char(8);\n      }\n    }\n    else {\n      *string_end = (char)char_code;\n      print_char(char_code);\n      string_end = string_end + 1;\n      is_first_char = false;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002d94",
            "calling": [
                "FUN_00002e6c"
            ],
            "imported": true,
            "current_name": "convert_input_to_string_00002d94"
        },
        "FUN_00003918": {
            "renaming": {
                "uVar1": "output_code",
                "param_1": "input_value",
                "FUN_00003918": "map_input_value_to_output_code_00003918"
            },
            "code": "undefined4 map_input_value_to_output_code_00003918(undefined input_value)\n{\n  undefined4 output_code;\n  switch(input_value) {\n    case 2:\n      output_code = 0x68;\n      break;\n    case 3:\n      output_code = 0x6b;\n      break;\n    case 6:\n      output_code = 0x4d;\n      break;\n    case 9:\n      output_code = 0x47;\n      break;\n    case 12:\n      output_code = 0x54;\n      break;\n    case 15:\n      output_code = 0x50;\n      break;\n    case 241:\n      output_code = 0x66;\n      break;\n    case 244:\n      output_code = 0x70;\n      break;\n    case 247:\n      output_code = 0x6e;\n      break;\n    case 250:\n      output_code = 0x75;\n      break;\n    case 253:\n      output_code = 0x6d;\n      break;\n    default:\n      output_code = 0;\n      break;\n  }\n  return output_code;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003918",
            "calling": [
                "FUN_00003694"
            ],
            "imported": true,
            "current_name": "map_input_value_to_output_code_00003918"
        },
        "FUN_00003d64": {
            "renaming": {
                "uVar1": "result",
                "param_1": "function_pointer",
                "param_2": "argument",
                "FUN_00003d64": "execute_function_00003d64"
            },
            "code": "int execute_function_00003d64(int function_pointer, int argument) {\n  int result;\n  if (function_pointer == 0) {\n    result = -19;\n  }\n  else {\n    result = (***(int ***)(function_pointer + 0xc))(*(int *)(function_pointer + 4), argument);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003d64",
            "calling": [
                "FUN_00002ecc"
            ],
            "imported": true,
            "current_name": "execute_function_00003d64"
        },
        "FUN_00004e52": {
            "renaming": {
                "bVar1": "second_byte",
                "bVar3": "bytes_match",
                "param_1": "first_array",
                "param_2": "second_array",
                "uVar2": "index",
                "FUN_00004e52": "compare_bytes_00004e52"
            },
            "code": "int compare_bytes_00004e52(byte *first_array, byte *second_array) {\n  byte first_byte;\n  byte second_byte;\n  uint index = 0;\n  bool bytes_match = true;\n  do {\n    first_byte = *first_array;\n    second_byte = *second_array;\n    if (first_byte != 0) {\n      bytes_match = first_byte == second_byte;\n    }\n    first_array++;\n    second_array++;\n    index++;\n  } while (bytes_match && first_byte != 0);\n  return first_byte - second_byte;\n}",
            "called": [
                "FUN_00004e52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004e52",
            "calling": [
                "FUN_00002a18",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_00004e52",
                "FUN_0000316c",
                "FUN_00005100"
            ],
            "imported": true,
            "current_name": "compare_bytes_00004e52"
        },
        "FUN_000010d4": {
            "renaming": {
                "FUN_000010d4": "create_new_object_000010d4",
                "local_c": "index_of_new_object",
                "iVar3": "result",
                "uVar1": "memory_allocation_result",
                "local_a": "index_of_free_object",
                "param_1": "start_of_data",
                "puVar5": "end_of_data",
                "local_2c": "start_of_data_aligned",
                "param_6": "param_6",
                "param_7": "param_7",
                "param_2": "data_length",
                "param_3": "flags",
                "param_4": "param_4",
                "param_5": "param_5",
                "local_10": "i",
                "uVar2": "new_object_data",
                "local_30": "data_offset",
                "uVar4": "data_offset_aligned"
            },
            "code": "int create_new_object_000010d4(uint start_of_data, int data_length, byte flags, uint param_4, undefined4 param_5, undefined4 param_6, undefined4 param_7)\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  int result;\n  uint uVar4;\n  undefined4 *end_of_data;\n  int data_offset;\n  uint start_of_data_aligned;\n  short index_of_new_object;\n  short index_of_free_object = 0;\n  \n  if (flags < 0x10) {\n    data_offset = data_length;\n    start_of_data_aligned = start_of_data;\n    if ((start_of_data & 3) != 0) {\n      data_offset = 4 - (start_of_data & 3);\n      start_of_data_aligned = start_of_data + data_offset;\n      data_offset = data_length - data_offset;\n    }\n    uVar4 = data_offset - 0x30U & 0xfffffffc;\n    end_of_data = (undefined4 *)(uVar4 + start_of_data_aligned);\n    if ((param_4 & 8) == 0) {\n      *(uint *)start_of_data_aligned = start_of_data_aligned;\n    }\n    else {\n      for (uint i = start_of_data_aligned; i < uVar4 + start_of_data_aligned; i = i + 4) {\n        *(uint *)i = i;\n      }\n    }\n    uVar1 = allocate_memory();\n    for (short i = 1; i < 0x21; i = i + 1) {\n      if (*(int *)(PTR_DAT_0000126c + i * 4) == 0) {\n        index_of_free_object = i;\n        break;\n      }\n    }\n    if (index_of_free_object == 0) {\n      free_memory(uVar1);\n      result = -0x8b;\n    }\n    else {\n      *(undefined4 **)(PTR_DAT_0000126c + index_of_free_object * 4) = end_of_data;\n      *(short *)((int)end_of_data + 6) = index_of_free_object;\n      uVar2 = create_new_object_000010d4_data(param_5, param_6, start_of_data_aligned, uVar4);\n      *end_of_data = uVar2;\n      end_of_data[9] = start_of_data_aligned;\n      end_of_data[0xb] = data_length;\n      end_of_data[10] = param_7;\n      *(byte *)((int)end_of_data + 5) = flags;\n      *(undefined *)(end_of_data + 1) = 0;\n      end_of_data[2] = 0;\n      end_of_data[3] = 0;\n      end_of_data[4] = 0;\n      initialize_object_data(end_of_data + 5,0);\n      end_of_data[8] = 0;\n      *(int *)PTR_DAT_00001270 = *(int *)PTR_DAT_00001270 + 1;\n      if ((param_4 & 1) == 0) {\n        set_object_data(end_of_data,10);\n        if ((param_4 & 4) == 0) {\n          free_memory(uVar1);\n          free_object_data(flags);\n          return (int)index_of_free_object;\n        }\n      }\n      else {\n        set_object_data(end_of_data,1);\n      }\n      free_memory(uVar1);\n      result = (int)index_of_free_object;\n    }\n  }\n  else {\n    result = -0x16;\n  }\n  return result;\n}",
            "called": [
                "FUN_00000698",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000fec",
                "FUN_00000cd0",
                "FUN_000007dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000010d4",
            "calling": [
                "FUN_00000f8c"
            ],
            "imported": true,
            "current_name": "create_new_object_000010d4"
        },
        "FUN_000045e4": {
            "renaming": {
                "FUN_000045e4": "do_nothing_000045e4"
            },
            "code": "\nvoid do_nothing_000045e4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000045e4",
            "calling": [
                "FUN_00004314"
            ],
            "imported": true,
            "current_name": "do_nothing_000045e4"
        },
        "FUN_00000738": {
            "renaming": {
                "FUN_00000738": "check_param_range_00000738",
                "iVar1": "result",
                "param_1": "param_value",
                "PTR_DAT_0000078c": "param_data_ptr",
                "PTR_DAT_00000790": "status_ptr"
            },
            "code": "void check_param_range_00000738(ushort param_value)\n{\n  int num_params = *(byte *)(*(int *)PTR_DAT_0000078c + 4);\n  int min_param_value = *(byte *)(*(int *)PTR_DAT_0000078c + 5);\n  if (num_params < 9 || param_value < min_param_value) {\n    int result = FUN_00000d2a();\n    if (result == 0) {\n      FUN_0000093c();\n    }\n    else {\n      *(undefined4 *)PTR_DAT_00000790 = 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_0000093c",
                "FUN_00000d2a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000738",
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "imported": true,
            "current_name": "check_param_range_00000738"
        },
        "FUN_00003e58": {
            "renaming": {
                "iVar1": "string_length",
                "FUN_00003e58": "convert_integer_to_string_00003e58",
                "param_1": "string",
                "local_18": "absolute_number",
                "param_2": "number",
                "local_14": "current_char"
            },
            "code": "int convert_integer_to_string_00003e58(char *string, int number) {\n  int is_negative = -(number >> 0x1f);\n  int absolute_number = number;\n  char *current_char = string;\n  if (is_negative != 0) {\n    if (string != NULL) {\n      *string = '-';\n      current_char = string + 1;\n    }\n    absolute_number = -number;\n  }\n  int string_length = convert_integer_to_string_00003e58_helper(current_char, absolute_number);\n  return is_negative + string_length;\n}",
            "called": [
                "FUN_00003dc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003e58",
            "calling": [
                "FUN_00003ec4"
            ],
            "imported": true,
            "current_name": "convert_integer_to_string_00003e58"
        },
        "FUN_00004e26": {
            "renaming": {
                "iVar1": "result",
                "bVar3": "isResultMinusOne",
                "FUN_00004e26": "checkAndUpdateParam_00004e26",
                "param_1": "data",
                "param_2": "offset",
                "uVar2": "updatedValue"
            },
            "code": "void checkAndUpdateParam_00004e26(void* data, int offset)\n{\n  int result = FUN_000004f2(data, *(short *)(offset + 0xe));\n  bool isResultMinusOne = result == -1;\n  ushort updatedValue;\n  if (isResultMinusOne) {\n    updatedValue = *(ushort *)(offset + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(offset + 0x54) = result;\n    updatedValue = *(ushort *)(offset + 0xc) | 0x1000;\n  }\n  *(ushort *)(offset + 0xc) = updatedValue;\n}\n",
            "called": [
                "FUN_000004f2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004e26",
            "calling": [],
            "imported": true,
            "current_name": "checkAndUpdateParam_00004e26"
        },
        "FUN_000045e8": {
            "renaming": {
                "FUN_000045e8": "do_nothing_000045e8"
            },
            "code": "\nvoid do_nothing_000045e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000045e8",
            "calling": [
                "FUN_000057f8",
                "FUN_00004db8",
                "FUN_0000428c",
                "FUN_00004418",
                "FUN_00005790",
                "FUN_00004274",
                "FUN_00005fec",
                "FUN_00004158",
                "FUN_00004cb4"
            ],
            "imported": true,
            "current_name": "do_nothing_000045e8"
        },
        "FUN_000057f8": {
            "renaming": {
                "FUN_000057f8": "FUNC_000057f8"
            },
            "code": "\nint FUNC_000057f8(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  int iVar3;\n  int iVar4;\n  int *piVar5;\n  bool bVar6;\n  byte *pbVar7;\n  int unaff_r7;\n  byte *pbVar8;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 uStack_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (param_2 == PTR_DAT_00005a38) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_00005a3c) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_00005a40) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if ((-1 < *(int *)(param_2 + 100) << 0x1f) &&\n     (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x16))) {\n    do_nothing_000045e8(*(undefined4 *)(param_2 + 0x58));\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar3 = FUN_000054a8(param_1,param_2), iVar3 != 0)) {\n    if ((-1 < *(int *)(param_2 + 100) << 0x1f) &&\n       (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x16))) {\n      do_nothing_000045ec(*(undefined4 *)(param_2 + 0x58));\n    }\n    return -1;\n  }\n  puVar1 = PTR_s___0__00005a44;\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar8 = param_3;\n  local_8c = param_4;\nLAB_0000588e:\n  pbVar7 = pbVar8;\n  if (*pbVar7 != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  pbVar8 = pbVar7 + 1;\n  if (*pbVar7 != 0x25) goto LAB_0000588e;\nLAB_0000589a:\n  iVar3 = (int)pbVar7 - (int)param_3;\n  if (iVar3 != 0) {\n    iVar4 = FUN_000057d2(param_1,param_2,param_3,iVar3);\n    if (iVar4 == -1) {\nLAB_00005a06:\n      if ((-1 < *(int *)(param_2 + 100) << 0x1f) &&\n         (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x16))) {\n        do_nothing_000045ec(*(undefined4 *)(param_2 + 0x58));\n      }\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar3;\n  }\n  if (*pbVar7 == 0) goto LAB_00005a06;\n  local_84 = -1;\n  uStack_80 = 0;\n  local_88 = 0;\n  local_7c = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar8 = pbVar7 + 1;\n  while( true ) {\n    pbVar7 = pbVar8 + 1;\n    iVar3 = FUN_00006010(PTR_s___0__00005a44,*pbVar8,5);\n    puVar2 = PTR_DAT_00005a54;\n    if (iVar3 == 0) break;\n    local_88 = 1 << (iVar3 - (int)puVar1 & 0xffU) | local_88;\n    pbVar8 = pbVar7;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar8 == 0x2a) {\n    piVar5 = local_8c + 1;\n    local_7c = *local_8c;\n    local_8c = piVar5;\n    if (local_7c < 0) {\n      local_7c = -local_7c;\n      local_88 = local_88 | 2;\n    }\n  }\n  else {\n    bVar6 = false;\n    iVar3 = local_7c;\n    pbVar7 = pbVar8;\n    while( true ) {\n      if (9 < *pbVar7 - 0x30) break;\n      iVar3 = iVar3 * 10 + (*pbVar7 - 0x30);\n      bVar6 = true;\n      pbVar7 = pbVar7 + 1;\n    }\n    if (bVar6) {\n      local_7c = iVar3;\n    }\n  }\n  if (*pbVar7 == 0x2e) {\n    if (pbVar7[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      pbVar7 = pbVar7 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar6 = false;\n      local_84 = 0;\n      iVar3 = 0;\n      while( true ) {\n        pbVar7 = pbVar7 + 1;\n        if (9 < *pbVar7 - 0x30) break;\n        iVar3 = iVar3 * 10 + (*pbVar7 - 0x30);\n        bVar6 = true;\n      }\n      if (bVar6) {\n        local_84 = iVar3;\n      }\n    }\n  }\n  iVar3 = FUN_00006010(PTR_DAT_00005a54,*pbVar7,3);\n  if (iVar3 != 0) {\n    local_88 = local_88 | 0x40 << (iVar3 - (int)puVar2 & 0xffU);\n    pbVar7 = pbVar7 + 1;\n  }\n  param_3 = pbVar7 + 1;\n  local_70 = *pbVar7;\n  iVar3 = FUN_00006010(PTR_s_efgEFG_00005a48,local_70,6);\n  if (iVar3 == 0) {\n    iVar3 = FUNC_00005b34(param_1,&local_88,param_2,DAT_00005a50,&local_8c);\n  }\n  else {\n    iVar3 = param_1;\n    if (DAT_00005a4c == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar3 = unaff_r7;\n      goto LAB_000059b4;\n    }\n  }\n  if (iVar3 == -1) goto LAB_00005a06;\nLAB_000059b4:\n  local_74 = local_74 + iVar3;\n  pbVar8 = param_3;\n  unaff_r7 = iVar3;\n  goto LAB_0000588e;\n}\n\n",
            "called": [
                "FUN_00005b34",
                "FUN_000045ec",
                "FUN_000045e8",
                "FUN_00006010",
                "FUN_000057d2",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000057f8",
            "calling": [
                "FUN_00004c84"
            ],
            "imported": false,
            "current_name": "FUNC_000057f8"
        },
        "FUN_000018bc": {
            "renaming": {
                "FUN_00001748": "set_device_mode",
                "FUN_000018bc": "initialize_device_000018bc",
                "DAT_00001910": "status_register",
                "FUN_00001710": "set_device_address",
                "PTR_DAT_00001918": "data_pointer",
                "DAT_00001914": "device_address"
            },
            "code": "void initialize_device_000018bc(void)\n{\n  set_device_mode(0xa0);\n  *DAT_00001910 = *DAT_00001910 & 0x3b | 4;\n  set_DAT_00001914(DAT_00001914,1);\n  do {\n  } while ((DAT_00001910[6] & 0x10) == 0);\n  do {\n  } while ((DAT_00001910[6] & 0xc) != 0);\n  *PTR_DAT_00001918 = 0;\n  return;\n}",
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000018bc",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": true,
            "current_name": "initialize_device_000018bc"
        },
        "FUN_00000f04": {
            "renaming": {
                "FUN_0000211c": "do_something_1",
                "FUN_000023a4": "do_something_4",
                "piRam00000f4c": "initialized_flag",
                "FUN_00000e58": "do_something_3",
                "FUN_00000f04": "process_input_00000f04",
                "uRam00000f50": "ram_1",
                "param_1": "input_char",
                "uRam00000f54": "ram_2",
                "FUN_00000cd0": "do_something_2",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "uRam00000f58": "ram_3",
                "do_nothing_00000ef8": "do_nothing_1",
                "param_2": "input_int",
                "do_nothing_00002400": "do_nothing_2",
                "FUN_00000ed8": "initialize",
                "PTR_s_main____This_is_RIOT___Version__2_00000f7c": "ram_4",
                "FUN_00004c84": "set_ram"
            },
            "code": "void process_input_00000f04(char input_char, int input_int) {\n  int initialized = *initialized_flag;\n  code *jump_table;\n  int local_int = input_int;\n  char local_char = input_char;\n  if (initialized == 0) {\n    *initialized_flag = 1;\n    if (input_char == '\\x03') {\n      initialize();\n    }\n    set_ram(uRam00000f50, local_int);\n    do_something_1();\n    set_ram(uRam00000f54);\n    set_ram(uRam00000f58);\n  }\n  do_something_2();\n  do_nothing_1();\n  jump_table = (code *)0xf4d;\n  do_something_3();\n  int stack_value = (int)&stack_value + 1;\n  do_nothing_2();\n  set_ram(PTR_s_main____This_is_RIOT___Version__2_00000f7c);\n  do_something_4();\n  jump_table(0);\n  return;\n}",
            "called": [
                "FUN_00004c84",
                "FUN_00000e58",
                "FUN_00000ef8",
                "FUN_00000cd0",
                "FUN_0000211c",
                "FUN_00002400",
                "FUN_00000ed8",
                "FUN_000023a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000f04",
            "calling": [
                "FUN_00000fec",
                "FUN_00001034",
                "FUN_000013b8",
                "FUN_00000cc0",
                "FUN_00000a30",
                "FUN_00003ec4"
            ],
            "imported": true,
            "current_name": "process_input_00000f04"
        },
        "FUN_00000610": {
            "renaming": {
                "iVar1": "current_index",
                "iVar2": "expected_index",
                "*PTR_DAT_00000684": "*data_1",
                "FUN_00000610": "initialize_data_00000610",
                "*PTR_DAT_00000688": "*data_2",
                "FUN_00000566": "get_current_index",
                "*(char *)(iVar2 + 4)": "*(char *)(expected_index + 4)",
                "*(undefined *)(iVar2 + 4)": "*(undefined *)(expected_index + 4)",
                "*(int *)PTR_DAT_00000688": "*data_2",
                "*(undefined *)(iVar1 + -4)": "*(undefined *)(current_index - 4)",
                "*PTR_DAT_0000068c": "*data_3",
                "*(undefined2 *)PTR_DAT_00000694": "*(undefined2 *)data_5",
                "uVar3": "success_flag",
                "**(int **)(PTR_DAT_00000690 + iVar1 * 4)": "**(int **)(data_4 + current_index * 4)"
            },
            "code": "int initialize_data_00000610()\n{\n  int current_index;\n  int expected_index;\n  int success_flag;\n  \n  *PTR_DAT_00000684 = 0;\n  expected_index = *PTR_DAT_00000688;\n  current_index = get_current_index(*PTR_DAT_0000068c);\n  current_index = **(int **)(PTR_DAT_00000690 + iVar1 * 4);\n  if (expected_index == current_index - 8) {\n    success_flag = 0;\n  }\n  else {\n    if ((expected_index != 0) && (*(char *)(expected_index + 4) == '\\t')) {\n      *(undefined *)(expected_index + 4) = 10;\n    }\n    *(undefined *)(current_index - 4) = 9;\n    *(undefined2 *)PTR_DAT_00000694 = *(undefined2 *)(current_index - 2);\n    *PTR_DAT_00000688 = current_index - 8;\n    success_flag = 1;\n  }\n  return success_flag;\n}",
            "called": [
                "FUN_00000566"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00000610",
            "calling": [],
            "imported": true,
            "current_name": "initialize_data_00000610"
        },
        "FUN_00003694": {
            "renaming": {
                "bVar4": "bit_set",
                "uVar1": "data_object_type",
                "local_a": "string_buffer",
                "auStack_18": "stack_buffer",
                "param_1": "data_object_address",
                "FUN_00003694": "display_data_object_00003694",
                "local_9": "current_byte_index",
                "param_2": "data_object_size",
                "cVar2": "bit_value",
                "uVar3": "bit_mask",
                "local_10": "stack_buffer_size"
            },
            "code": "void display_data_object_00003694(int data_object_address, byte data_object_size)\n{\n  undefined4 uVar1;\n  char bit_value;\n  uint bit_mask;\n  bool bit_set;\n  undefined stack_buffer[8];\n  int stack_buffer_size;\n  char string_buffer;\n  byte current_byte_index;\n  if ((data_object_address == 0) || (3 < data_object_size)) {\n    display_error_message(\"Unable to display data object.\");\n  }\n  else {\n    display_message(\"Data:\");\n    for (current_byte_index = 0; current_byte_index < data_object_size; current_byte_index++) {\n      if (*(byte *)(data_object_address + 6) < 0x14) {\n        bit_mask = DATA_OBJECT_BITMASK & 1 << (uint)*(byte *)(data_object_address + 6);\n        bit_set = bit_mask != 0;\n        if (bit_set) {\n          bit_mask = 1;\n        }\n        bit_value = (char)bit_mask;\n        if (!bit_set) {\n          bit_value = '\\0';\n        }\n        if (bit_value == '\\0') goto LAB_000036ee;\n        string_buffer = '\\0';\n      }\n      else {\nLAB_000036ee:\n        string_buffer = get_character((int)*(char *)(data_object_address + 7));\n      }\n      display_message(\"[0x%x] \", current_byte_index);\n      if (data_object_size < 2) {\n        display_message(\"%s\", \"__u__\");\n      }\n      else {\n        display_message(\"%s %d\", \"___u__\", current_byte_index);\n      }\n      if (string_buffer == '\\0') {\n        if (*(char *)(data_object_address + 7) == '\\0') {\n          display_message(\"0x%04x\", *(short *)(data_object_address + (uint)current_byte_index * 2));\n        }\n        else if ((*(char *)(data_object_address + 7) + 4 < 0 == SCARRY4((int)*(char *)(data_object_address + 7),4)) && (*(char *)(data_object_address + 7) < '\\0')) {\n          stack_buffer_size = format_string(stack_buffer, (int)*(short *)(data_object_address + (uint)current_byte_index * 2), (int)*(char *)(data_object_address + 7));\n          stack_buffer[stack_buffer_size] = 0;\n          display_message(\"%s\", stack_buffer);\n        }\n        else {\n          display_message(\"%d %d\", (int)*(short *)(data_object_address + (uint)current_byte_index * 2), (int)*(char *)(data_object_address + 7));\n        }\n      }\n      else {\n        display_message(\"%d %c\", (int)*(short *)(data_object_address + (uint)current_byte_index * 2), string_buffer);\n      }\n      uVar1 = get_data_object_type(*(undefined *)(data_object_address + 6));\n      display_message(\"Type: %s\", uVar1);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_00004c84",
                "FUN_00003e9e",
                "FUN_00004db8",
                "FUN_00003810",
                "FUN_00003918"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003694",
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "imported": true,
            "current_name": "display_data_object_00003694"
        },
        "FUN_00002364": {
            "renaming": {
                "iVar1": "is_valid",
                "param_1": "parameter_to_check",
                "FUN_00002294": "check_parameter_validity",
                "FUN_00002364": "check_parameter_and_set_value_if_valid_00002364",
                "FUN_000022be": "set_parameter_value",
                "param_2": "parameter_value",
                "uVar2": "return_value"
            },
            "code": "int check_parameter_and_set_value_if_valid_00002364(int param_1, undefined param_2)\n{\n  int is_valid = check_parameter_validity(param_1);\n  if (is_valid == 0) {\n    set_parameter_value(param_1, param_2);\n    return 0;\n  }\n  else {\n    return -1;\n  }\n}",
            "called": [
                "FUN_00002294",
                "FUN_000022be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002364",
            "calling": [
                "FUN_000012b4"
            ],
            "imported": true,
            "current_name": "check_parameter_and_set_value_if_valid_00002364"
        },
        "FUN_00001ad4": {
            "renaming": {
                "*PTR_DAT_00001b0c": "*ptr_ptr",
                "DAT_00001b08": "data_ptr",
                "*DAT_00001b08": "*data_ptr",
                "FUN_00001ad4": "clearBitsAndSetFlag_00001ad4",
                "PTR_DAT_00001b0c": "ptr_ptr"
            },
            "code": "void clearBitsAndSetFlag_00001ad4(void)\n{\n  int* DAT_00001b08 = DAT_00001b08;\n  int* PTR_DAT_00001b0c = PTR_DAT_00001b0c;\n  *DAT_00001b08 = *DAT_00001b08 & 0x3f;\n  while ((*DAT_00001b08 & 0xc) != 0xc)\n  {\n  }\n  *PTR_DAT_00001b0c = 7;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001ad4",
            "calling": [
                "FUN_00001b10"
            ],
            "imported": true,
            "current_name": "clearBitsAndSetFlag_00001ad4"
        },
        "FUN_00001274": {
            "renaming": {
                "FUN_00002396": "initialize_user_interface",
                "FUN_00001274": "initialize_system_00001274",
                "*DAT_00001298": "*data_register",
                "FUN_0000258c": "initialize_hardware",
                "FUN_00001c84": "initialize_network"
            },
            "code": "void initialize_system_00001274(void)\n{\n  initialize_hardware();\n  *DAT_00001298 |= 0x28;\n  initialize_network();\n  initialize_user_interface();\n  return;\n}",
            "called": [
                "FUN_00001c84",
                "FUN_00002396",
                "FUN_0000258c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001274",
            "calling": [
                "FUN_00000e64"
            ],
            "imported": true,
            "current_name": "initialize_system_00001274"
        },
        "FUN_00002e6c": {
            "renaming": {
                "iVar1": "result",
                "FUN_00002e48": "execute_some_setup",
                "param_1": "function_param",
                "FUN_00002e6c": "check_and_execute_function_00002e6c",
                "param_2": "param_2",
                "param_3": "param_3",
                "FUN_00002d94": "check_parameters",
                "FUN_00002b10": "execute_function"
            },
            "code": "void check_and_execute_function_00002e6c(undefined4 function_param, undefined4 param_2, undefined4 param_3)\n{\n  int result;\n  execute_some_setup();\n  do {\n    result = check_parameters(param_2, param_3);\n    if (result == 0) {\n      execute_function(function_param, param_2);\n    }\n    execute_some_setup();\n  } while(true);\n}",
            "called": [
                "FUN_00002b10",
                "FUN_00002d94",
                "FUN_00002e48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002e6c",
            "calling": [
                "FUN_000023a4"
            ],
            "imported": true,
            "current_name": "check_and_execute_function_00002e6c"
        },
        "FUN_00003444": {
            "renaming": {
                "iVar1": "error_code",
                "auStack_2c": "time_data",
                "FUN_00003444": "is_error_getting_time_00003444",
                "FUN_00003378": "process_time_data",
                "PTR_s_rtc__error_getting_time_00003474": "PTR_s_rtc__error_getting_time_00003474",
                "FUN_00002624": "get_time_data",
                "FUN_00004db8": "print_error_message"
            },
            "code": "bool is_error_getting_time_00003444(void)\n{\n  int error_code;\n  undefined time_data[36];\n  error_code = get_time_data(time_data);\n  if (error_code != 0) {\n    print_error_message(PTR_s_rtc__error_getting_time_00003474);\n  }\n  else {\n    process_time_data(time_data);\n  }\n  return error_code != 0;\n}",
            "called": [
                "FUN_00003378",
                "FUN_00004db8",
                "FUN_00002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003444",
            "calling": [
                "FUN_00003524"
            ],
            "imported": true,
            "current_name": "is_error_getting_time_00003444"
        },
        "FUN_00003688": {
            "renaming": {
                "FUN_00003688": "execute_function_00003688",
                "FUN_00003658": "perform_task"
            },
            "code": "void execute_function_00003688(void)\n{\n  perform_task();\n  return;\n}",
            "called": [
                "FUN_00003658"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00003688",
            "calling": [
                "FUN_00002e9c"
            ],
            "imported": true,
            "current_name": "execute_function_00003688"
        },
        "FUN_00001392": {
            "renaming": {
                "param_1": "value",
                "FUN_00001360": "get_ptr_to_value",
                "FUN_00001392": "set_value_to_1_and_return_00001392",
                "puVar1": "ptr_to_value"
            },
            "code": "void set_value_to_1_and_return_00001392(undefined4 value, undefined param_2)\n{\n  undefined4 *ptr_to_value;\n  ptr_to_value = (undefined4 *)get_ptr_to_value(value, param_2);\n  *ptr_to_value = 1;\n  return;\n}",
            "called": [
                "FUN_00001360"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001392",
            "calling": [
                "FUN_000013b8"
            ],
            "imported": true,
            "current_name": "set_value_to_1_and_return_00001392"
        },
        "FUN_00002910": {
            "renaming": {
                "PTR_DAT_00002948": "flags_pointer",
                "DAT_00002944": "data_address",
                "FUN_00002910": "clear_flags_00002910"
            },
            "code": "void clear_flags_00002910(void)\n{\n  int DAT_00002944 = DAT_00002944;\n  uint* flags_address = (uint*)(DAT_00002944 + 0x1c);\n  *flags_address &= 0xfffffffb;\n  *(undefined4 *)(DAT_00002944 + 8) = 0;\n  *(undefined4 *)PTR_DAT_00002948 = 0;\n  *(undefined4 *)(PTR_DAT_00002948 + 4) = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002910",
            "calling": [
                "FUN_000026c0"
            ],
            "imported": true,
            "current_name": "clear_flags_00002910"
        },
        "FUN_00004418": {
            "renaming": {
                "uVar1": "byte_value",
                "iVar4": "buffer_base_address",
                "ppbVar2": "buffer_ptr_ptr",
                "pbVar3": "buffer_ptr",
                "FUN_00004418": "read_byte_from_buffer_00004418"
            },
            "code": "uint read_byte_from_buffer_00004418(void)\n{\n  uint byte_value;\n  byte **buffer_ptr_ptr;\n  byte *buffer_ptr;\n  int buffer_base_address;\n  \n  buffer_base_address = *DAT_00004438;\n  if ((buffer_base_address != 0) && (*(int *)(buffer_base_address + 0x18) == 0)) {\n    release_buffer_000042a4(buffer_base_address);\n  }\n  buffer_ptr_ptr = *(byte ***)(buffer_base_address + 4);\n  if ((buffer_base_address != 0) && (*(int *)(buffer_base_address + 0x18) == 0)) {\n    release_buffer_000042a4(buffer_base_address);\n  }\n  if (buffer_ptr_ptr == (byte **)PTR_DAT_00005620) {\n    buffer_ptr_ptr = *(byte ***)(buffer_base_address + 4);\n  }\n  else if (buffer_ptr_ptr == (byte **)PTR_DAT_00005624) {\n    buffer_ptr_ptr = *(byte ***)(buffer_base_address + 8);\n  }\n  else if (buffer_ptr_ptr == (byte **)PTR_DAT_00005628) {\n    buffer_ptr_ptr = *(byte ***)(buffer_base_address + 0xc);\n  }\n  if ((-1 < (int)buffer_ptr_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(buffer_ptr_ptr + 3) << 0x16))) {\n    do_nothing_000045e8(buffer_ptr_ptr[0x16]);\n  }\n  buffer_ptr = buffer_ptr_ptr[1];\n  buffer_ptr_ptr[1] = buffer_ptr - 1;\n  if ((int)(buffer_ptr - 1) < 0) {\n    byte_value = read_byte_from_file_00005e10(buffer_base_address, buffer_ptr_ptr);\n  }\n  else {\n    buffer_ptr = *buffer_ptr_ptr;\n    *buffer_ptr_ptr = buffer_ptr + 1;\n    byte_value = (uint)*buffer_ptr;\n  }\n  if ((-1 < (int)buffer_ptr_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(buffer_ptr_ptr + 3) << 0x16))) {\n    do_nothing_000045ec(buffer_ptr_ptr[0x16]);\n  }\n  return byte_value;\n}",
            "called": [
                "FUN_000045e8",
                "FUN_000045ec",
                "FUN_00005e10",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004418",
            "calling": [
                "FUN_00002d94"
            ],
            "imported": true,
            "current_name": "read_byte_from_buffer_00004418"
        },
        "FUN_0000258c": {
            "renaming": {
                "local_c": "counter",
                "ENABLE_SYSTEM_TIMER": "0x10",
                "0xfffffffb": "SYSTEM_CLOCK_INTERRUPT",
                "DAT_000025ec": "SYSTEM_REGISTERS",
                "0xfffffffe": "SYSTEM_TIMER_INTERRUPT",
                "DAT_000025f0": "SYSTEM_START_ADDRESS",
                "FUN_00002538": "enable_interrupt",
                "ENABLE_SYSTEM_CLOCK": "0x200",
                "FUN_0000258c": "initialize_system_0000258c"
            },
            "code": "void initialize_system_0000258c(void)\n{\n  uint counter;\n\n  *(undefined4 *)(DAT_000025ec + 8) = DAT_000025f0;\n  enable_interrupt(0xfffffffe,1);\n  enable_interrupt(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter = counter + 1) {\n    enable_interrupt((int)(char)counter,1);\n  }\n  *(uint *)(DAT_000025ec + 0x10) = *(uint *)(DAT_000025ec + 0x10) | ENABLE_SYSTEM_TIMER;\n  *(uint *)(DAT_000025ec + 0x14) = *(uint *)(DAT_000025ec + 0x14) | ENABLE_SYSTEM_CLOCK;\n  return;\n}",
            "called": [
                "FUN_00002538"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000258c",
            "calling": [
                "FUN_00001274"
            ],
            "imported": true,
            "current_name": "initialize_system_0000258c"
        },
        "FUN_00002a00": {
            "renaming": {
                "param_1": "parameter",
                "FUN_00004cb4": "executeFunction",
                "FUN_00002a00": "executeFunctionOnParameter_00002a00"
            },
            "code": "void executeFunctionOnParameter_00002a00(void* parameter){\n  executeFunction(parameter);\n  return;\n}",
            "called": [
                "FUN_00004cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002a00",
            "calling": [
                "FUN_00002d94",
                "FUN_00002e48"
            ],
            "imported": true,
            "current_name": "executeFunctionOnParameter_00002a00"
        },
        "FUN_000043a0": {
            "renaming": {
                "iVar3": "data_address",
                "uVar1": "callback_result",
                "iVar5": "count",
                "piVar2": "current_address",
                "param_1": "starting_address",
                "param_2": "callback_function",
                "uVar4": "result",
                "FUN_000043a0": "process_data_000043a0"
            },
            "code": "uint process_data_000043a0(int starting_address, code *callback_function)\n{\n  uint result = 0;\n  int *current_address = (int *)(starting_address + 0x48);\n  do {\n    int count = current_address[1];\n    int data_address = current_address[2];\n    while (count > 0) {\n      if ((*(ushort *)(data_address + 0xc) > 1) && (*(short *)(data_address + 0xe) != -1)) {\n        uint callback_result = (*callback_function)(data_address);\n        result |= callback_result;\n      }\n      data_address += 0x68;\n      count--;\n    }\n    current_address = (int *)*current_address;\n  } while (current_address != (int *)0x0);\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000043a0",
            "calling": [
                "FUN_00006768"
            ],
            "imported": true,
            "current_name": "process_data_000043a0"
        },
        "FUN_0000211c": {
            "renaming": {
                "PTR_s_state_00002248": "state",
                "get_time": "get_time",
                "isr_stack_setup": "isr_stack_setup",
                "PTR_DAT_0000224c": "data_array",
                "local_2c": "data_ptr",
                "local_28": "data_info",
                "PTR_DAT_00002264": "print_data_array_1",
                "get_time_diff": "get_time_diff",
                "isr_stack_process": "isr_stack_process",
                "local_20": "data_time",
                "FUN_00004c84": "init",
                "get_size": "get_size",
                "local_40": "buffer",
                "local_24": "data_size",
                "PTR_DAT_00002268": "print_data_array_2",
                "get_offset": "get_offset",
                "FUN_0000211c": "process_data_0000211c",
                "print_results": "print_results",
                "PTR_s___5s___21s__13s_6s__6i___5i__0000226c": "print_identifier",
                "local_3c": "data_offset",
                "local_1a": "i",
                "memset": "memset",
                "local_18": "total_time",
                "local_38": "data_addr",
                "PTR_s___3hi_____20s_____8s___1s____3i___00002260": "isr_stack_data_identifier",
                "local_30": "data_type",
                "get_info": "get_info",
                "PTR_s__pid_____21s____9sQ___pri___stac_00002250": "process_identifier",
                "PTR_s______isr_stack______________6i___00002254": "isr_stack_identifier",
                "local_14": "total_size",
                "local_34": "data_id"
            },
            "code": "void process_data_0000211c(void)\n{\n  int total_size = 0;\n  int total_time = 0;\n  uint8_t buffer[32];\n  uint32_t *data_ptr;\n  uint32_t data_offset;\n  uint32_t *data_info;\n  uint32_t data_size;\n  uint32_t data_time;\n  uint32_t isr_stack[128];\n  uint32_t *stack_ptr = isr_stack + 128;\n  memset(buffer, 0, sizeof(buffer));\n  init(PTR_s__pid_____21s____9sQ___pri___stac_00002250, PTR_DAT_0000224c, PTR_s_PTR_s_state_00002248_00002248);\n  data_offset = get_offset();\n  data_info = get_info();\n  data_size = get_size();\n  data_time = get_time();\n  isr_stack_setup(PTR_s______isr_stack______________6i___00002254, 0x200, stack_ptr);\n  total_size += 0x200;\n  if (data_size > 0) {\n    total_time += data_size;\n  }\n  for (int i = 1; i < 0x21; i++) {\n    data_ptr = *(uint32_t **)(PTR_DAT_00002258 + i * 4);\n    if (data_ptr != NULL) {\n      uint8_t data_type = *(uint8_t *)(data_ptr + 1);\n      uint32_t data_id = *(uint32_t *)(PTR_DAT_0000225c + data_type * 4);\n      uint32_t data_addr = (uint32_t)&buffer + (uint32_t)(8 < data_type);\n      uint32_t data_offset = data_ptr[0xb];\n      total_size += data_offset;\n      int data_time_diff = get_time_diff(data_ptr[9]);\n      data_offset -= data_time_diff;\n      total_time += data_offset;\n      isr_stack_process(PTR_s___3hi_____20s_____8s___1s____3i___00002260,\n                   (int)*(uint16_t *)((int)data_ptr + 6),data_ptr[10],data_id,data_addr,\n                   *(uint8_t *)((int)data_ptr + 5),data_ptr[0xb],data_offset,data_ptr[9],*data_ptr);\n    }\n  }\n  print_results(PTR_s___5s___21s__13s_6s__6i___5i__0000226c,PTR_DAT_00002264,PTR_DAT_00002268,\n               PTR_DAT_00002264,PTR_DAT_00002264,total_size,total_time);\n  return;\n}",
            "called": [
                "FUN_00004c84",
                "FUN_000010a0",
                "FUN_000008b8",
                "FUN_0000091c",
                "FUN_00000900"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000211c",
            "calling": [
                "FUN_00002eb4",
                "FUN_00000f04"
            ],
            "imported": true,
            "current_name": "process_data_0000211c"
        },
        "FUN_0000562c": {
            "renaming": {
                "FUN_0000562c": "find_param_value_index_0000562c",
                "iVar4": "is_param_value_match",
                "piVar6": "curr_param_value_ptr",
                "iVar7": "curr_char_ptr_offset",
                "param_1": "param_1",
                "piVar3": "curr_param_value",
                "param_2": "param_str",
                "param_3": "param_value_index",
                "cVar1": "curr_char",
                "pcVar5": "curr_char_ptr",
                "ppiVar2": "param_values"
            },
            "code": "int find_param_value_index_0000562c(int param_1, char *param_2, int *param_3)\n{\n  char curr_char;\n  int **param_values = DAT_0000569c;\n  char *curr_char_ptr = param_2;\n  if (**param_values != (int *)0x0) {\n    do {\n      curr_char = *curr_char_ptr;\n      if (curr_char == '\\0') {\n        int curr_char_ptr_offset = (int)curr_char_ptr - (int)param_2;\n        int *curr_param_value = *param_values;\n        while( true ) {\n          int *curr_param_value_ptr = curr_param_value;\n          if (*curr_param_value_ptr == 0) break;\n          int is_param_value_match = FUN_00004e66(*curr_param_value_ptr, param_2, curr_char_ptr_offset);\n          curr_param_value = curr_param_value_ptr + 1;\n          if ((is_param_value_match == 0) && (is_param_value_match = *curr_param_value_ptr, *(char *)(is_param_value_match + curr_char_ptr_offset) == '=')) {\n            *param_3 = (int)curr_param_value_ptr - (int)*param_values >> 2;\n            FUN_00005ff8(param_1);\n            return is_param_value_match + curr_char_ptr_offset + 1;\n          }\n        }\n        break;\n      }\n      curr_char_ptr = curr_char_ptr + 1;\n    } while (curr_char != '=');\n  }\n  FUN_00005ff8(param_1);\n  return 0;\n}",
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000562c",
            "calling": [
                "FUN_000056a0"
            ],
            "imported": true,
            "current_name": "find_param_value_index_0000562c"
        },
        "FUN_000020b8": {
            "renaming": {
                "FUN_000020b8": "initializeData_000020b8",
                "FUN_00002028": "setInitialValues",
                "DAT_000020c8": "dataArray"
            },
            "code": "void initializeData_000020b8(void)\n{\n  setInitialValues(DAT_000020c8, 0);\n  return;\n}",
            "called": [
                "FUN_00002028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000020b8",
            "calling": [],
            "imported": true,
            "current_name": "initializeData_000020b8"
        },
        "FUN_00002a18": {
            "renaming": {
                "iVar1": "search_result",
                "local_c": "current_element",
                "FUN_00002a18": "search_for_value_in_list_00002a18",
                "param_1": "list",
                "local_18": "current_list_element",
                "param_2": "value_to_find",
                "local_10": "list_index"
            },
            "code": "int search_for_value_in_list_00002a18(int *list, uint value_to_find) {\n  int result = 0;\n  int *current_list_element [2];\n  uint list_index = 0;\n  current_list_element[0] = list;\n  current_list_element[1] = (int *)PTR_PTR_s_reboot_00002a84;\n  do {\n    if (list_index > 1) {\n      return 0;\n    }\n    int *current_element = current_list_element[list_index];\n    if (current_element != (int *)0x0) {\n      for (; *current_element != 0; current_element += 3) {\n        int search_result = FUN_00004e52(*current_element, value_to_find);\n        if (search_result == 0) {\n          return current_element[2];\n        }\n      }\n    }\n    list_index++;\n  } while(true);\n}",
            "called": [
                "FUN_00004e52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00002a18",
            "calling": [
                "FUN_00002b10"
            ],
            "imported": true,
            "current_name": "search_for_value_in_list_00002a18"
        },
        "FUN_000054a8": {
            "renaming": {
                "FUN_000042a4": "cleanUp",
                "PTR_DAT_0000557c": "globalPointer2",
                "uVar1": "value1",
                "FUN_000054a8": "calculateValue_000054a8",
                "iVar5": "globalVariable",
                "param_1": "result",
                "PTR_DAT_00005574": "globalVariablePointer",
                "param_2": "input",
                "PTR_DAT_00005580": "globalPointer3",
                "uVar3": "returnValue",
                "uVar2": "value2",
                "uVar4": "tempValue",
                "PTR_DAT_00005578": "globalPointer1"
            },
            "code": "uint calculateValue_000054a8(uint *result, uint *input) {\n  ushort value1 = *(ushort *)(input + 3);\n  ushort value2 = *(ushort *)(input + 3);\n  uint returnValue = value1;\n  uint tempValue;\n  int index = *globalVariable;\n  if ((index != 0) && (*(int *)(index + 0x18) == 0)) {\n    cleanUp(index);\n  }\n  if (input == (uint *)PTR_DAT_00005578) {\n    input = *(uint **)(index + 4);\n  }\n  else if (input == (uint *)PTR_DAT_0000557c) {\n    input = *(uint **)(index + 8);\n  }\n  else if (input == (uint *)PTR_DAT_00005580) {\n    input = *(uint **)(index + 0xc);\n  }\n  if (-1 < (int)(value1 << 0x1c)) {\n    if (-1 < (int)(value1 << 0x1b)) {\n      *result = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(value1 << 0x1d) < 0) {\n      if ((uint *)input[0xd] != (uint *)0x0) {\n        if ((uint *)input[0xd] != input + 0x11) {\n          calculateValue_000054a8(result);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    calculateValue_000054a8(result, input);\n  }\n  tempValue = (uint)value2;\n  if ((value1 & 1) == 0) {\n    if (-1 < (int)(value1 << 0x1e)) {\n      tempValue = input[5];\n    }\n    input[2] = tempValue;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] != 0) {\n    return 0;\n  }\n  if ((value1 & 0x80) == 0) {\n    return returnValue & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(input + 3) = value2 | 0x40;\n  return 0xffffffff;\n}",
            "called": [
                "FUN_00004b34",
                "FUN_00005700",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000054a8",
            "calling": [
                "FUN_000057f8",
                "FUN_00004db8",
                "FUN_00005404"
            ],
            "imported": true,
            "current_name": "calculateValue_000054a8"
        },
        "FUN_000007dc": {
            "renaming": {
                "local_c": "allocated_memory",
                "uVar1": "aligned_size",
                "FUN_000007dc": "allocate_memory_000007dc",
                "param_1": "size",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "local_10": "i",
                "local_14": "i"
            },
            "code": "int* allocate_memory_000007dc(uint32_t size, int param_2, int param_3, int param_4) {\n  uint32_t aligned_size = (size + param_3) & 0xfffffffc;\n  int* allocated_memory = (int*)(aligned_size - 4);\n  *allocated_memory = 0x77777777;\n  if (((uint32_t)allocated_memory & 7) != 0) {\n    allocated_memory = (int*)(aligned_size - 8);\n    *allocated_memory = 0x88888888;\n  }\n  allocated_memory[-1] = 0x1000000;\n  allocated_memory[-2] = param_1;\n  allocated_memory[-3] = DAT_000008b4;\n  allocated_memory = allocated_memory - 4;\n  *allocated_memory = 0;\n  for (int i = 3; i > 0; i--) {\n    allocated_memory--;\n    *allocated_memory = i;\n  }\n  allocated_memory--;\n  *allocated_memory = param_2;\n  for (int i = 0xb; i > 3; i--) {\n    allocated_memory--;\n    *allocated_memory = i;\n  }\n  allocated_memory[-1] = -3;\n  return allocated_memory - 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000007dc",
            "calling": [
                "FUN_000010d4"
            ],
            "imported": true,
            "current_name": "allocate_memory_000007dc"
        },
        "FUN_00001710": {
            "renaming": {
                "FUN_00001710": "setPointerToZero_00001710",
                "param_1": "arg1",
                "FUN_00001696": "getPointerToUndefined",
                "param_2": "arg2",
                "puVar1": "pointerToUndefined"
            },
            "code": "void setPointerToZero_00001710(undefined4 arg1, undefined arg2)\n{\n  undefined *pointerToUndefined;\n  pointerToUndefined = (undefined *)getPointerToUndefined(arg1, arg2);\n  *pointerToUndefined = 0;\n  return;\n}",
            "called": [
                "FUN_00001696"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001710",
            "calling": [
                "FUN_00001960",
                "FUN_000018bc",
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_000019c0",
                "FUN_00001734",
                "FUN_0000182c",
                "FUN_00001bb8"
            ],
            "imported": true,
            "current_name": "setPointerToZero_00001710"
        },
        "FUN_000045ec": {
            "renaming": {
                "FUN_000045ec": "do_nothing_000045ec"
            },
            "code": "\nvoid do_nothing_000045ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000045ec",
            "calling": [
                "FUN_00004280",
                "FUN_000057f8",
                "FUN_0000579c",
                "FUN_00004db8",
                "FUN_00005ff8",
                "FUN_00004418",
                "FUN_00004158",
                "FUN_00004cb4",
                "FUN_000042a4"
            ],
            "imported": true,
            "current_name": "do_nothing_000045ec"
        },
        "FUN_00001034": {
            "renaming": {
                "param_1": "node_list",
                "local_1c": "current_node",
                "FUN_00001034": "insert_node_at_position_00001034",
                "param_2": "position"
            },
            "code": "void insert_node_at_position_00001034(int **node_list,int position){\n  int **current_node;\n  if (8 < *(byte *)(position + 4)) {\n    FUN_00000f04(3,PTR_s_FAILED_ASSERTION__0000109c);\n  }\n  for (current_node = node_list;(*current_node != (int *)0x0 && (*(byte *)((int)*current_node + -3) <= *(byte *)(position + 5)));current_node = (int **)*current_node) {\n  }\n  *(int **)(position + 8) = *current_node;\n  *current_node = (int *)(int **)(position + 8);\n  return;\n}",
            "called": [
                "FUN_00000f04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001034",
            "calling": [
                "FUN_00002434"
            ],
            "imported": true,
            "current_name": "insert_node_at_position_00001034"
        },
        "FUN_00006964": {
            "renaming": {
                "iVar1": "index",
                "param_1": "value",
                "FUN_00006964": "calculate_value_00006964",
                "param_2": "ptr_data",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int calculate_value_00006964(int value, int* PTR_data)\n{\n  int index = PTR_data - 1;\n  int result = index - 4;\n  if (index < 0) {\n    result += *(PTR_data + index);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00006964",
            "calling": [
                "FUN_000060cc"
            ],
            "imported": true,
            "current_name": "calculate_value_00006964"
        },
        "FUN_0000182c": {
            "renaming": {
                "DAT_000018b8": "function_data",
                "DAT_000018b4": "data",
                "byte": "byte",
                "FUN_00001710": "set_bit_in_data",
                "FUN_000016ec": "call_function_with_data",
                "FUN_0000182c": "clear_bit_and_call_two_functions_0000182c"
            },
            "code": "void clear_bit_and_call_two_functions_0000182c(void)\n{\n  byte* DAT_000018b4_ptr = (byte *)(DAT_000018b4 + 8);\n  *DAT_000018b4_ptr &= 0xd0;\n  call_function_with_DAT_000018b4(DAT_000018b8, 0);\n  set_bit_in_DAT_000018b4(DAT_000018b4, 1);\n  set_bit_in_DAT_000018b4(DAT_000018b4, 0);\n  return;\n}",
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0000182c",
            "calling": [
                "FUN_00001c84"
            ],
            "imported": true,
            "current_name": "clear_bit_and_call_two_functions_0000182c"
        },
        "FUN_00004db8": {
            "renaming": {
                "iVar2": "input_result",
                "iVar3": "data_ptr",
                "ppcVar5": "data",
                "param_1": "input_length",
                "PTR_DAT_00004dac": "data_case_1",
                "PTR_DAT_00004db0": "data_case_2",
                "cVar1": "current_char",
                "FUN_00004db8": "process_input_00004db8",
                "pcVar7": "input_ptr",
                "pcVar4": "buffer_ptr",
                "PTR_DAT_00004db4": "data_case_3",
                "uVar6": "output_length"
            },
            "code": "int process_input_00004db8(int input_length)\n{\n  int data_ptr = *DAT_00004dc4;\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    initialize_data_structures();\n  }\n  char **data = *(char ***)(data_ptr + 8);\n  if (*(int *)(data_ptr + 0x18) == 0) {\n    initialize_data_structures(data_ptr);\n  }\n  if (data == (char **)PTR_DAT_00004dac) {\n    data = *(char ***)(data_ptr + 4);\n  }\n  else if (data == (char **)PTR_DAT_00004db0) {\n    data = *(char ***)(data_ptr + 8);\n  }\n  else if (data == (char **)PTR_DAT_00004db4) {\n    data = *(char ***)(data_ptr + 0xc);\n  }\n  if ((-1 < (int)data[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data + 3) << 0x16))) {\n    process_data(data[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(data + 3) << 0x1c) < 0) && (data[4] != (char *)0x0)) ||\n     (input_length = validate_input(data_ptr,data), input_length == 0)) {\n    char *input_ptr = (char *)(input_length + -1);\n    do {\n      while (true) {\n        input_ptr = input_ptr + 1;\n        char current_char = *input_ptr;\n        char *buffer_ptr = data[2] + -1;\n        data[2] = buffer_ptr;\n        if (current_char == '\\0') {\n          if (-1 < (int)buffer_ptr) {\n            char *output_ptr = *data;\n            int newline = 10;\n            *data = output_ptr + 1;\n            *output_ptr = '\\n';\n            goto END_PROCESSING;\n          }\n          int result = store_output(data_ptr, 10, data);\n          if (result != -1) {\n            input_length = 10;\n            goto END_PROCESSING;\n          }\n          goto PROCESSING_FAILED;\n        }\n        if (((int)buffer_ptr < 0) && (((int)buffer_ptr < (int)data[6] || (current_char == '\\n')))) break;\n        char *output_ptr = *data;\n        *data = output_ptr + 1;\n        *output_ptr = current_char;\n      }\n      input_length = store_output(data_ptr, current_char, data);\n    } while (input_length != -1);\n  }\nPROCESSING_FAILED:\n  return -1;\nEND_PROCESSING:\n  if ((-1 < (int)data[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data + 3) << 0x16))) {\n    finalize_data_processing(data[0x16]);\n  }\n  return input_length;\n}",
            "called": [
                "FUN_000045e8",
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00004db8",
            "calling": [
                "FUN_00002a88",
                "FUN_00002f30",
                "FUN_000033c0",
                "FUN_000031e0",
                "FUN_00002b10",
                "FUN_000023a4",
                "FUN_00002f74",
                "FUN_000033f4",
                "FUN_00002fe0",
                "FUN_0000305c",
                "FUN_00003444",
                "FUN_000034c0",
                "FUN_00003694",
                "FUN_00003478"
            ],
            "imported": true,
            "current_name": "process_input_00004db8"
        },
        "FUN_000022f0": {
            "renaming": {
                "uVar1": "index",
                "param_1": "arr",
                "FUN_000022f0": "increment_value_000022f0"
            },
            "code": "undefined increment_value_000022f0(int *arr)\n{\n  uint index = arr[2];\n  arr[2] = index + 1;\n  uint offset = (index & arr[1] - 1U) + *arr;\n  return *(undefined *)offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000022f0",
            "calling": [
                "FUN_0000231c"
            ],
            "imported": true,
            "current_name": "increment_value_000022f0"
        },
        "FUN_00001c84": {
            "renaming": {
                "FUN_00001b10": "initialize_audio",
                "uVar1": "system_info",
                "DAT_00001ce8": "system_data",
                "FUN_000017dc": "initialize_display",
                "FUN_00000cd0": "get_system_info",
                "FUN_00001bb8": "initialize_memory",
                "FUN_0000182c": "initialize_network",
                "FUN_00000d0c": "finalize_system",
                "FUN_00001c84": "initialize_system_00001c84",
                "DAT_00001cec": "system_data"
            },
            "code": "void initialize_system_00001c84(void)\n{\n  undefined4 system_info;\n  system_info = get_system_info();\n  initialize_memory();\n  *(undefined4 *)(DAT_00001ce8 + 0x1044) = 0x220000;\n  DAT_00001ce8[0xc] = 0;\n  *DAT_00001ce8 = *DAT_00001ce8 & 199 | 0x38;\n  DAT_00001ce8[4] = 0x13;\n  DAT_00001ce8[5] = 0;\n  initialize_network();\n  initialize_display();\n  initialize_audio(7);\n  finalize_system(system_info);\n  return;\n}",
            "called": [
                "FUN_00000d0c",
                "FUN_00001b10",
                "FUN_00000cd0",
                "FUN_0000182c",
                "FUN_00001bb8",
                "FUN_000017dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00001c84",
            "calling": [
                "FUN_00001274"
            ],
            "imported": true,
            "current_name": "initialize_system_00001c84"
        },
        "FUN_000068f0": {
            "renaming": {
                "iVar1": "new_block_ptr",
                "iVar2": "current_block_size",
                "param_1": "input_param",
                "param_2": "memory_block_ptr",
                "current_block_ptr": "current_block_ptr",
                "FUN_000068f0": "allocate_memory_block_000068f0"
            },
            "code": "undefined4 allocate_memory_block_000068f0(undefined4 input_param, int *memory_block_ptr)\n{\n  int current_block_size = memory_block_ptr[0xe];\n  int *current_block_ptr = (int *)memory_block_ptr[0xd];\n  \n  if (current_block_ptr == memory_block_ptr + 0x11) {\n    int new_block_ptr = FUN_00004bd0(input_param, 0x400);\n    if (new_block_ptr != 0) {\n      memory_block_ptr[0xe] = 0x400;\n      memory_block_ptr[0xd] = new_block_ptr;\n      *(undefined *)(new_block_ptr + 0x3ff) = *(undefined *)((int)memory_block_ptr + 0x46);\n      *(undefined *)(new_block_ptr + 0x3fe) = *(undefined *)((int)memory_block_ptr + 0x45);\n      *(undefined *)(new_block_ptr + 0x3fd) = *(undefined *)(memory_block_ptr + 0x11);\n      *memory_block_ptr = new_block_ptr + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    int new_block_ptr = FUN_000060cc(input_param, current_block_ptr, current_block_size << 1);\n    if (new_block_ptr != 0) {\n      FUN_000060b0(new_block_ptr + current_block_size, new_block_ptr, current_block_size);\n      memory_block_ptr[0xd] = new_block_ptr;\n      memory_block_ptr[0xe] = current_block_size << 1;\n      *memory_block_ptr = new_block_ptr + current_block_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_000060cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000068f0",
            "calling": [],
            "imported": true,
            "current_name": "allocate_memory_block_000068f0"
        }
    },
    "used_tokens": 164264,
    "layers": [
        [
            "FUN_000026c0",
            "FUN_00004bd0",
            "FUN_00000794",
            "FUN_000064bc",
            "FUN_00002970",
            "FUN_00000dc0",
            "FUN_00000d0c",
            "FUN_00003d94",
            "FUN_0000579c",
            "FUN_000015d0",
            "FUN_00005e68",
            "FUN_00000dcc",
            "FUN_0000285c",
            "FUN_00000e58",
            "FUN_00001778",
            "FUN_000026d8",
            "FUN_00000566",
            "FUN_00001d08",
            "FUN_000031fc",
            "FUN_000016ec",
            "FUN_00005584",
            "FUN_00004248",
            "FUN_00001da2",
            "FUN_00001ec4",
            "FUN_00002744",
            "FUN_00002624",
            "FUN_00001e0c",
            "FUN_000041d0",
            "FUN_0000459c",
            "FUN_000014c4",
            "FUN_00004b34",
            "FUN_000004f2",
            "FUN_00004e66",
            "FUN_00005ecc",
            "FUN_0000129c",
            "FUN_00001628",
            "FUN_00001748",
            "FUN_0000294c",
            "FUN_00005790",
            "FUN_00000534",
            "FUN_000017dc",
            "FUN_00000410",
            "FUN_000005ca",
            "FUN_00005ff8",
            "FUN_00002714",
            "FUN_000020e0",
            "FUN_00005fec",
            "FUN_00004f84",
            "FUN_000028f0",
            "FUN_00004f98",
            "FUN_00004dee",
            "FUN_00000fec",
            "FUN_00000428",
            "FUN_000039e8",
            "FUN_00000e38",
            "FUN_00002294",
            "FUN_00003e9e",
            "FUN_00003378",
            "FUN_00006768",
            "FUN_00000db0",
            "FUN_00002600",
            "FUN_00003810",
            "FUN_00000ed8",
            "FUN_000031e0",
            "FUN_000020f4",
            "FUN_0000687c",
            "FUN_00005edc",
            "FUN_00001eea",
            "FUN_000023a4",
            "FUN_0000240c",
            "FUN_00004280",
            "FUN_00001448",
            "FUN_00001688",
            "FUN_00004042",
            "FUN_00000cf0",
            "FUN_00000f8c",
            "FUN_00002894",
            "FUN_00004158",
            "FUN_00002654",
            "FUN_00002538",
            "FUN_00004c84",
            "FUN_0000305c",
            "FUN_000012b4",
            "FUN_0000058e",
            "FUN_000025f4",
            "FUN_00001ddc",
            "FUN_00002ecc",
            "FUN_00000d76",
            "FUN_000057a8",
            "FUN_00001696",
            "FUN_000008b8",
            "FUN_000024bc",
            "FUN_00000490",
            "FUN_0000091c",
            "FUN_00001f80",
            "FUN_00000e64",
            "FUN_000026e4",
            "FUN_00000d44",
            "FUN_00000698",
            "FUN_00000cd0",
            "FUN_00000cc0",
            "FUN_00002994",
            "FUN_00000d2a",
            "FUN_00001ff6",
            "FUN_000013b8",
            "FUN_00002a88",
            "FUN_00002f30",
            "FUN_00001e44",
            "FUN_00001318",
            "FUN_00000900",
            "FUN_00004274",
            "FUN_00002fe0",
            "FUN_00001dc0",
            "FUN_00000df4",
            "FUN_00002eb4",
            "FUN_0000328c",
            "FUN_000041f4",
            "FUN_0000316c",
            "FUN_000026f0",
            "FUN_000057d2",
            "FUN_000056b8",
            "FUN_00001a18",
            "FUN_00000d9c",
            "FUN_00003ff4",
            "FUN_00001d5e",
            "FUN_0000191c",
            "FUN_000050f4",
            "FUN_00005a58",
            "FUN_000056b0",
            "FUN_00003d24",
            "FUN_000060cc",
            "FUN_00003dc4",
            "FUN_000022be",
            "FUN_00002108",
            "FUN_00001d80",
            "FUN_000033c0",
            "FUN_00002b10",
            "FUN_00001b10",
            "FUN_000023c8",
            "FUN_00002e48",
            "FUN_00000930",
            "FUN_00001348",
            "FUN_00001d3a",
            "FUN_00002434",
            "FUN_00005700",
            "FUN_00002798",
            "FUN_00003524",
            "FUN_00001bb8",
            "FUN_0000428c",
            "FUN_0000404c",
            "FUN_00002f74",
            "FUN_000010a0",
            "FUN_000012e2",
            "FUN_000056a0",
            "FUN_0000231c",
            "FUN_00002690",
            "FUN_00006010",
            "FUN_00001cf0",
            "FUN_00003ec4",
            "FUN_00001360",
            "FUN_00004622",
            "FUN_0000093c",
            "FUN_00003658",
            "FUN_000019c0",
            "FUN_000060b0",
            "FUN_000023d0",
            "FUN_00000a30",
            "FUN_000034c0",
            "FUN_000050e8",
            "FUN_000042a4",
            "FUN_00000514",
            "FUN_00002e9c",
            "FUN_00001960",
            "FUN_00001a3c",
            "FUN_000045ee",
            "FUN_00005404",
            "FUN_00006974",
            "FUN_00004314",
            "FUN_00004dc8",
            "FUN_00005fd8",
            "FUN_00005e10",
            "FUN_000033f4",
            "FUN_0000443c",
            "FUN_000027b0",
            "FUN_00005ebc",
            "FUN_00006192",
            "FUN_00001734",
            "FUN_00000e14",
            "FUN_0000281c",
            "FUN_00002270",
            "FUN_00005780",
            "FUN_000020cc",
            "FUN_00002396",
            "FUN_00004cb4",
            "FUN_00003478",
            "FUN_00002028",
            "FUN_000016c8",
            "FUN_00001a60",
            "FUN_0000099c",
            "FUN_00002d94",
            "FUN_00003918",
            "FUN_00003d64",
            "FUN_00004e52",
            "FUN_000010d4",
            "FUN_00000738",
            "FUN_00003e58",
            "FUN_00004e26",
            "FUN_000018bc",
            "FUN_00000f04",
            "FUN_00000610",
            "FUN_00003694",
            "FUN_00002364",
            "FUN_00001ad4",
            "FUN_00001274",
            "FUN_00002e6c",
            "FUN_00003444",
            "FUN_00003688",
            "FUN_00001392",
            "FUN_00002910",
            "FUN_00004418",
            "FUN_0000258c",
            "FUN_00002a00",
            "FUN_000043a0",
            "FUN_0000211c",
            "FUN_0000562c",
            "FUN_000020b8",
            "FUN_00002a18",
            "FUN_000054a8",
            "FUN_000007dc",
            "FUN_00001710",
            "FUN_00001034",
            "FUN_00006964",
            "FUN_0000182c",
            "FUN_00004db8",
            "FUN_000022f0",
            "FUN_00001c84",
            "FUN_000068f0"
        ]
    ],
    "locked_functions": []
}