{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_data_structure_00000410",
            "code": "\nvoid initializeDataStructure_00000410(void)\n\n{\n  initialize_data_structure_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_data_structure_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "update_offset_and_check_interrupts_00000428",
            "code": "\ndword updateOffsetAndCheckInterrupts_00000428(undefined4 *resultPointer,int offset)\n\n{\n  undefined4 interruptStatus;\n  dword updatedOffset;\n  \n  interruptStatus = check_irq_interrupts_00000cd0();\n  updatedOffset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *resultPointer = 0xc;\n    updatedOffset = 0xffffffff;\n  }\n  enable_irq_interrupts_if_privileged_00000d0c(interruptStatus);\n  return updatedOffset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "update_offset_and_check_interrupts_00000428",
                "param_1": "resultPointer",
                "param_2": "offset",
                "uVar1": "interruptStatus",
                "local_c": "updatedOffset"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "copy_and_increment_memory_00000490",
            "code": "\nundefined4 copyAndIncrementMemory_00000490(undefined4 src,undefined4 dest,undefined4 srcAddr,undefined4 destAddr)\n\n{\n  undefined4 result;\n  \n  result = copy_and_increment_memory_00000e14(srcAddr,destAddr);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "copy_and_increment_memory_00000490",
                "param_1": "src",
                "param_2": "dest",
                "param_3": "srcAddr",
                "param_4": "destAddr",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_value_and_return_000004f2",
            "code": "\nundefined4 initialize_value_and_return_000004f2(undefined4 *output)\n\n{\n  *output = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_value_and_return_000004f2",
                "param_1": "output"
            },
            "calling": [
                "FUN_00004e26",
                "FUN_00004dee"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "set_default_value_and_return_00000514",
            "code": "\nundefined4 setDefaultValueAndReturn_00000514(undefined4 *outputValue)\n\n{\n  *outputValue = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "set_default_value_and_return_00000514",
                "param_1": "outputValue"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_valid_input_00000534",
            "code": "\nundefined4 checkValidInput_00000534(undefined4 *outputPtr,int inputValue)\n\n{\n  undefined4 isValid;\n  \n  *outputPtr = 0;\n  if (((inputValue == 0) || (inputValue == 1)) || (inputValue == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_valid_input_00000534",
                "param_1": "outputPtr",
                "param_2": "inputValue",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "extract_bits_and_count_ones_00000566",
            "code": "\nint extractBitsAndCountOnes_00000566(int inputValue)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int result;\n  \n  byte2 = (byte)inputValue;\n  byte3 = (byte)((uint)inputValue >> 8);\n  byte4 = (byte)((uint)inputValue >> 0x10);\n  byte1 = (byte)((uint)inputValue >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (inputValue == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "extract_bits_and_count_ones_00000566",
                "param_1": "inputValue",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "result"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *initialValuePtr,undefined4 *updatedValuePtr)\n\n{\n  if (*initialValuePtr == 0) {\n    *updatedValuePtr = updatedValuePtr;\n  }\n  else {\n    *updatedValuePtr = *(undefined4 *)*initialValuePtr;\n    *(undefined4 **)*initialValuePtr = updatedValuePtr;\n  }\n  *initialValuePtr = castedUpdatedValuePtr;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "initialValuePtr",
                "param_2": "updatedValuePtr",
                "(int)param_2": "castedUpdatedValuePtr"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_value_000005ca",
            "code": "\nundefined4 * extractValue_000005ca(int *valuePtr)\n\n{\n  undefined4 *extractedValue;\n  \n  if (*valuePtr == 0) {\n    extractedValue = (undefined4 *)0x0;\n  }\n  else {\n    extractedValue = *(undefined4 **)*valuePtr;\n    if (extractedValue == (undefined4 *)*valuePtr) {\n      *valuePtr = 0;\n    }\n    else {\n      *(undefined4 *)*valuePtr = *extractedValue;\n    }\n  }\n  return extractedValue;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_value_000005ca",
                "param_1": "valuePtr",
                "puVar1": "extractedValue"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "check_and_set_values_00000610",
            "code": "\nundefined4 checkAndSetValues_00000610(void)\n\n{\n  int dataPtr;\n  int index;\n  undefined4 result;\n  \n  dataPtr = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  index = extract_bits_and_count_ones_00000566(DAT_1fff0424);\n  index = **(int **)(&DAT_1fff03e4 + index * 4);\n  if (dataPtr == index + -8) {\n    result = 0;\n  }\n  else {\n    if ((dataPtr != 0) && (*(char *)(dataPtr + 4) == '\\t')) {\n      *(undefined *)(dataPtr + 4) = 10;\n    }\n    *(undefined *)(index + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(index + -2);\n    result = 1;\n    DAT_1fff03dc = index + -8;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000610": "check_and_set_values_00000610",
                "iVar1": "dataPtr",
                "iVar2": "index",
                "uVar3": "result"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_pointer_and_value_00000698",
            "code": "\nvoid updatePointerAndValue_00000698(int ptr,uint value)\n\n{\n  if (value < 9) {\n    if ((8 < *(byte *)(ptr + 4)) &&\n       (extractValue(&DAT_1fff03e4 + (uint)*(byte *)(ptr + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(ptr + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(ptr + 5));\n    }\n  }\n  else if (*(byte *)(ptr + 4) < 9) {\n    updatePointer(&DAT_1fff03e4 + (uint)*(byte *)(ptr + 5) * 4,ptr + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(ptr + 5);\n  }\n  *(char *)(ptr + 4) = (char)value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_pointer_and_value_00000698",
                "param_1": "ptr",
                "param_2": "value",
                "extract_value_000005ca": "extractValue",
                "update_pointer_0000058e": "updatePointer"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_and_enable_interrupt_00000738",
            "code": "\nvoid checkAndEnableInterrupt_00000738(ushort inputValue)\n\n{\n  int exceptionNumber;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputValue < *(byte *)(DAT_1fff03dc + 5))) {\n    exceptionNumber = get_exception_number_00000d2a();\n    if (exceptionNumber == 0) {\n      enable_hardware_interrupt_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_and_enable_interrupt_00000738",
                "param_1": "inputValue",
                "iVar1": "exceptionNumber"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_0000093c",
                "FUN_00000d2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_memory_00000794",
            "code": "\nint * initializeMemory_00000794(void)\n\n{\n  int errorCode;\n  int index;\n  undefined4 *pointer;\n  uint alignedPointer;\n  int loopCounter;\n  int loopCounter2;\n  int *memory;\n  \n  checkInterrupts();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  updatePointerAndValue(DAT_1fff03dc,0);\n  pointer = &DAT_1fff03dc;\n  index = 0;\n  DAT_1fff03dc = 0;\n  runInterruptHandler();\n  alignedPointer = (int)pointer + index & 0xfffffffc;\n  memory = (int *)(alignedPointer - 4);\n  *memory = 0x77777777;\n  if (((uint)memory & 7) != 0) {\n    memory = (int *)(alignedPointer - 8);\n    *memory = 0x88888888;\n  }\n  memory[-1] = 0x1000000;\n  memory[-2] = index << 0xd;\n  memory[-3] = 0x795;\n  memory = memory + -4;\n  *memory = 0;\n  for (loopCounter2 = 3; 0 < loopCounter2; loopCounter2 = loopCounter2 + -1) {\n    memory = memory + -1;\n    *memory = loopCounter2;\n  }\n  memory = memory + -1;\n  *memory = errorCode;\n  for (loopCounter = 0xb; 3 < loopCounter; loopCounter = loopCounter + -1) {\n    memory = memory + -1;\n    *memory = loopCounter;\n  }\n  memory[-1] = -3;\n  return memory + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_memory_00000794",
                "extraout_r1": "errorCode",
                "iVar1": "index",
                "puVar2": "pointer",
                "uVar3": "alignedPointer",
                "iStack_1c": "loopCounter",
                "iStack_18": "loopCounter2",
                "piStack_14": "memory",
                "check_irq_interrupts_00000cd0": "checkInterrupts",
                "update_pointer_and_value_00000698": "updatePointerAndValue",
                "run_interrupt_handler_00000930": "runInterruptHandler"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000698",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 input1,int input2,int size,int alignment)\n\n{\n  uint alignedSize;\n  int counter1;\n  int counter2;\n  int *memoryPtr;\n  \n  alignedSize = alignment + size & 0xfffffffc;\n  memoryPtr = (int *)(alignedSize - 4);\n  *memoryPtr = 0x77777777;\n  if (((uint)memoryPtr & 7) != 0) {\n    memoryPtr = (int *)(alignedSize - 8);\n    *memoryPtr = 0x88888888;\n  }\n  memoryPtr[-1] = 0x1000000;\n  memoryPtr[-2] = input1;\n  memoryPtr[-3] = 0x795;\n  memoryPtr = memoryPtr + -4;\n  *memoryPtr = 0;\n  for (counter2 = 3; 0 < counter2; counter2 = counter2 + -1) {\n    memoryPtr = memoryPtr + -1;\n    *memoryPtr = counter2;\n  }\n  memoryPtr = memoryPtr + -1;\n  *memoryPtr = input2;\n  for (counter1 = 0xb; 3 < counter1; counter1 = counter1 + -1) {\n    memoryPtr = memoryPtr + -1;\n    *memoryPtr = counter1;\n  }\n  memoryPtr[-1] = -3;\n  return memoryPtr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "size",
                "param_4": "alignment",
                "uVar1": "alignedSize",
                "local_14": "counter1",
                "local_10": "counter2",
                "local_c": "memoryPtr"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "count_valid_offsets_000008b8",
            "code": "\nint countValidOffsets_000008b8(void)\n\n{\n  RelocationEntry *relPtr;\n  \n  for (relPtr = (RelocationEntry *)&DAT_1fff0000;\n      (relPtr->r_offset == 0xe7fee7fe && (relPtr < REL_ARRAY_END_PTR));\n      relPtr = (RelocationEntry *)&relPtr->r_info) {\n  }\n  return ((int)REL_ARRAY_END_PTR - (int)relPtr >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "count_valid_offsets_000008b8",
                "local_c": "relPtr",
                "Elf32_Rel": "RelocationEntry",
                "Elf32_Rel_ARRAY_1fff0200": "REL_ARRAY_END_PTR"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 getMainStackPointer_00000900(void)\n\n{\n  undefined4 mainStackPointer;\n  \n  mainStackPointer = getMainStackPointer_00000900();\n  return mainStackPointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "mainStackPointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_initial_value_0000091c",
            "code": "\nundefined4 getInitialValue_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_initial_value_0000091c"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "run_interrupt_handler_00000930",
            "code": "\nvoid runInterruptHandler_00000930(void)\n\n{\n  checkIRQInterruptsEnabled();\n  triggerSoftwareInterrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "run_interrupt_handler_00000930",
                "check_ir_qinterrupts_enabled_00000cf0": "checkIRQInterruptsEnabled",
                "software_interrupt": "triggerSoftwareInterrupt"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "enable_hardware_interrupt_0000093c",
            "code": "\n\n\nvoid enableHardwareInterrupt_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "enable_hardware_interrupt_0000093c"
            },
            "calling": [
                "FUN_00000738",
                "FUN_00001348",
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  initialize_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  initialize_and_update_flags_00000e64();\n  execute_and_initialize_0000459c();\n  initialize_memory_blocks_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000db0",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000990",
                "FUN_00000f8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "handle_nmi_00000a30",
            "code": "\nundefined * handle_nmi_00000a30(void)\n\n{\n  int param;\n  \n  trigger_kernel_panic(4,\"NMI HANDLER\");\n  return stack_pointer + -*(int *)(param + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "handle_nmi_00000a30",
                "in_r3": "param",
                "execute_kernel_panic_00000f04": "trigger_kernel_panic",
                "&stack0xe000ffe0": "stack_pointer"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "get_ir_qinterrupts_status_00000cc0",
            "code": "\nundefined4 getIRQinterruptsStatus_00000cc0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsStatus;\n  \n  execute_kernel_panic_00000f04(10,\"DUMMY HANDLER\");\n  interruptsStatus = 0;\n  isPrivilegedMode = (bool)checkCurrentModePrivilege();\n  if (isPrivilegedMode) {\n    interruptsStatus = checkIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsStatus;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "get_ir_qinterrupts_status_00000cc0",
                "uVar2": "interruptsStatus",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "checkCurrentModePrivilege",
                "isIRQinterruptsEnabled": "checkIRQinterruptsEnabled"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_irq_interrupts_00000cd0",
            "code": "\nundefined4 checkIRQInterrupts_00000cd0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 interruptsEnabled;\n  \n  interruptsEnabled = 0;\n  isCurrentModePrivileged = (bool)isPrivilegedMode();\n  if (isCurrentModePrivileged) {\n    interruptsEnabled = areIRQInterruptsEnabled();\n  }\n  disableIRQInterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_irq_interrupts_00000cd0",
                "uVar2": "interruptsEnabled",
                "bVar1": "isCurrentModePrivileged",
                "isCurrentModePrivileged": "isPrivilegedMode",
                "isIRQinterruptsEnabled": "areIRQInterruptsEnabled",
                "disableIRQinterrupts": "disableIRQInterrupts"
            },
            "calling": [
                "FUN_00000e58",
                "FUN_00001c84",
                "FUN_00000794",
                "FUN_00000f04",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc",
                "FUN_00000f8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_ir_qinterrupts_enabled_00000cf0",
            "code": "\nundefined4 checkIRQinterruptsEnabled_00000cf0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 irqInterruptsEnabled;\n  \n  enableIRQinterrupts();\n  irqInterruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    irqInterruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return irqInterruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_ir_qinterrupts_enabled_00000cf0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "irqInterruptsEnabled"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_irq_interrupts_if_privileged_00000d0c",
            "code": "\nvoid enableIRQInterruptsIfPrivileged_00000d0c(uint mode)\n\n{\n  bool isPrivilegedMode;\n  \n  isPrivilegedMode = (bool)checkIfPrivilegedMode();\n  if (isPrivilegedMode) {\n    enableInterrupts((mode & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_irq_interrupts_if_privileged_00000d0c",
                "param_1": "mode",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "checkIfPrivilegedMode",
                "enableIRQinterrupts": "enableInterrupts"
            },
            "calling": [
                "FUN_00001c84",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_offset_00000d44",
            "code": "\nint calculate_offset_00000d44(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "initialize_data_00000d76",
            "code": "\nvoid initializeData_00000d76(undefined4 input1,undefined input2)\n\n{\n  undefined4 *dataPointer;\n  \n  dataPointer = (undefined4 *)calculate_offset_00000d44(input1,input2);\n  *dataPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "initialize_data_00000d76",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "dataPointer"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "initialize_data_00000d9c",
            "code": "\nvoid initialize_data_00000d9c(void)\n\n{\n  initialize_data_00000d9c_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "initialize_data_00000d9c"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_00000db0",
            "code": "\nvoid initialize_00000db0(void)\n\n{\n  initialize_00000db0_data_1();\n  initialize_00000db0_data_2();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_00000db0",
                "initialize_data_00000dcc": "initialize_data_1",
                "initialize_data_00000d9c": "initialize_data_2"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "check_interrupt_status_00000dc0",
            "code": "\nvoid checkInterruptStatus_00000dc0(void)\n\n{\n  getInterruptsStatus();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "check_interrupt_status_00000dc0",
                "get_ir_qinterrupts_status_00000cc0": "getInterruptsStatus"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_data_00000dcc",
            "code": "\n\n\nvoid initializeData_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_data_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_data_structure_00000df4",
            "code": "\nvoid initializeDataStructure_00000df4(void)\n\n{\n  initialize_data_structure_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_data_structure_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "copy_and_increment_memory_00000e14",
            "code": "\nundefined4 copyAndIncrementMemory_00000e14(undefined4 sourceAddress,undefined4 destinationAddress)\n\n{\n  undefined4 result;\n  \n  result = copy_and_increment_memory_loop_000012e2(0x1fff0204,sourceAddress,destinationAddress);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "copy_and_increment_memory_00000e14",
                "param_1": "sourceAddress",
                "param_2": "destinationAddress",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "copy_and_return_param_00000e38",
            "code": "\nundefined4 copyAndReturnParam_00000e38(undefined4 source,undefined4 destination)\n\n{\n  copy_data_000015d0(0,source,destination);\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "copy_and_return_param_00000e38",
                "param_1": "source",
                "param_2": "destination"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "run_infinite_loop_00000e58",
            "code": "\nvoid run_infinite_loop_00000e58(void)\n\n{\n  check_interrupts();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "run_infinite_loop_00000e58",
                "check_irq_interrupts_00000cd0": "check_interrupts"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_and_update_flags_00000e64",
            "code": "\n\n\nvoid initialize_and_update_flags_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  initialize_system_and_peripherals();\n  update_flag_and_value(0x2056,0x80);\n  update_flag_and_value(0x511a,0x80);\n  update_flag_and_value(0x2055,0x80);\n  set_bit(0x2056);\n  set_bit(0x511a);\n  set_bit(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_and_update_flags_00000e64",
                "initialize_system_and_peripherals_00001274": "initialize_system_and_peripherals",
                "update_flag_and_value_00001eea": "update_flag_and_value",
                "set_bit_00001ff6": "set_bit"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 linkRegister;\n  \n  process_data_00004c84(&DAT_00006f58,linkRegister);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "linkRegister"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00000ed8(void)\n\n{\n  undefined4 in_lr;\n  \n  FUNC_00004c84(&DAT_00006f58,in_lr);\n  return;\n}\n\n"
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "execute_kernel_panic_00000f04",
            "code": "\nvoid executeKernelPanic_00000f04(char errorType,undefined4 errorMessage)\n\n{\n  undefined4 stackPointer;\n  code *jumpTable;\n  undefined4 message;\n  char errorFlag;\n  \n  message = errorMessage;\n  errorFlag = errorType;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (errorType == '\\x03') {\n      initialize_data_00000ed8();\n    }\n    process_data_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",message);\n    print_process_info_0000211c();\n    process_data_00004c84(&DAT_00006f78);\n    process_data_00004c84(\"*** halted.\\n\\n\");\n  }\n  check_irq_interrupts_00000cd0();\n  FUNC_00000ef8();\n  jumpTable = (code *)0xf4d;\n  run_infinite_loop_00000e58();\n  stackPointer = (int)&stackPointer + 1;\n  FUNC_00002400();\n  process_data_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  initialize_and_process_data_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "execute_kernel_panic_00000f04",
                "param_1": "errorType",
                "param_2": "errorMessage",
                "uStack_18": "stackPointer",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "local_10": "message",
                "local_9": "errorFlag"
            },
            "calling": [
                "FUN_00000fec",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_000013b8",
                "FUN_00001034",
                "FUN_00000a30"
            ],
            "called": [
                "FUN_0000211c",
                "FUN_00000e58",
                "FUN_00000ed8",
                "FUN_00002400",
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_00000ef8",
                "FUN_000023a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_memory_blocks_00000f8c",
            "code": "\nvoid initialize_memory_blocks_00000f8c(void)\n\n{\n  uint uVar1;\n  undefined4 *pointer;\n  uint uVar3;\n  int shift_value;\n  int *pointer_to_shift_value;\n  undefined4 handler_value;\n  undefined4 value;\n  undefined4 zero;\n  dword relocation_offset;\n  \n  check_irq_interrupts_00000cd0();\n  relocation_offset = relocation_array[3].r_info;\n  zero = 0;\n  value = 0xf81;\n  initialize_memory_block(&DAT_1fff0a6c,0x100,0xf,0xc);\n  relocation_offset = relocation_array[3].r_offset;\n  zero = 0;\n  value = 0xf5d;\n  uVar3 = 0xc;\n  initialize_memory_block(&DAT_1fff046c,0x600,7);\n  handler_value = 0xfd3;\n  uVar1 = run_interrupt_handler();\n  uVar1 = uVar1 >> 0x1e;\n  pointer = (undefined4 *)(uVar3 * 0x100);\n  shift_value = (uVar3 >> 0x1d) << 0x11;\n  pointer_to_shift_value = &shift_value;\n  if ((uVar1 & uVar1 - 1) != 0) {\n    execute_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *pointer = 0;\n  pointer[1] = 0;\n  pointer[2] = uVar1 - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_memory_blocks_00000f8c",
                "local_10": "relocation_offset",
                "local_14": "zero",
                "local_18": "value",
                "initialize_memory_block_000010d4": "initialize_memory_block",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array",
                "uStack_1c": "handler_value",
                "run_interrupt_handler_00000930": "run_interrupt_handler",
                "puVar2": "pointer",
                "iStack_24": "shift_value",
                "piStack_20": "pointer_to_shift_value"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000010d4",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_memory_block_00000fec",
            "code": "\nvoid initializeMemoryBlock_00000fec(undefined4 *memoryBlock,uint blockSize)\n\n{\n  if ((blockSize & blockSize - 1) != 0) {\n    execute_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *memoryBlock = 0;\n  memoryBlock[1] = 0;\n  memoryBlock[2] = blockSize - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_memory_block_00000fec",
                "param_1": "memoryBlock",
                "param_2": "blockSize",
                "param_1[1]": "memoryBlock[1]",
                "param_1[2]": "memoryBlock[2]"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_closest_value_00001034",
            "code": "\nvoid findClosestValue_00001034(int **valueList,int targetValue)\n\n{\n  int **currentValue;\n  \n  if (8 < *(byte *)(targetValue + 4)) {\n    execute_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (currentValue = valueList;\n      (*currentValue != (int *)0x0 && (*(byte *)((int)*currentValue + -3) <= *(byte *)(targetValue + 5)));\n      currentValue = (int **)*currentValue) {\n  }\n  *(int **)(targetValue + 8) = *currentValue;\n  *currentValue = (int *)(int **)(targetValue + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_closest_value_00001034",
                "param_1": "valueList",
                "param_2": "targetValue",
                "local_1c": "currentValue"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "find_array_end_index_000010a0",
            "code": "\nint find_array_end_index_000010a0(int *input_array)\n\n{\n  int *current_element;\n  \n  for (current_element = input_array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)input_array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "find_array_end_index_000010a0",
                "param_1": "input_array",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_memory_block_000010d4",
            "code": "\nint initializeMemoryBlock_000010d4(uint startAddress,int size,byte length,uint flags,undefined4 arg1,\n                undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 irqInterrupts;\n  undefined4 initializedMemory;\n  int result;\n  uint adjustedSize;\n  undefined4 *memoryPtr;\n  int adjustedSizeTemp;\n  uint adjustedAddress;\n  uint loopIndex;\n  short currentIndex;\n  short availableIndex;\n  \n  if (length < 0x10) {\n    adjustedSizeTemp = size;\n    adjustedAddress = startAddress;\n    if ((startAddress & 3) != 0) {\n      adjustedSizeTemp = 4 - (startAddress & 3);\n      adjustedAddress = adjustedSizeTemp + startAddress;\n      adjustedSizeTemp = size - adjustedSizeTemp;\n    }\n    adjustedSize = adjustedSizeTemp - 0x30U & 0xfffffffc;\n    memoryPtr = (undefined4 *)(adjustedSize + adjustedAddress);\n    if ((flags & 8) == 0) {\n      *(uint *)adjustedAddress = adjustedAddress;\n    }\n    else {\n      for (loopIndex = adjustedAddress; loopIndex < adjustedSize + adjustedAddress; loopIndex = loopIndex + 4) {\n        *(uint *)loopIndex = loopIndex;\n      }\n    }\n    irqInterrupts = check_irq_interrupts_00000cd0();\n    availableIndex = 0;\n    for (currentIndex = 1; currentIndex < 0x21; currentIndex = currentIndex + 1) {\n      if (*(int *)(&DAT_1fff0358 + currentIndex * 4) == 0) {\n        availableIndex = currentIndex;\n        break;\n      }\n    }\n    if (availableIndex == 0) {\n      enable_irq_interrupts_if_privileged_00000d0c(irqInterrupts);\n      result = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + availableIndex * 4) = memoryPtr;\n      *(short *)((int)memoryPtr + 6) = availableIndex;\n      initializedMemory = initialize_memory_000007dc(arg1,arg2,adjustedAddress,adjustedSize);\n      *memoryPtr = initializedMemory;\n      memoryPtr[9] = adjustedAddress;\n      memoryPtr[0xb] = size;\n      memoryPtr[10] = arg3;\n      *(byte *)((int)memoryPtr + 5) = length;\n      *(undefined *)(memoryPtr + 1) = 0;\n      memoryPtr[2] = 0;\n      memoryPtr[3] = 0;\n      memoryPtr[4] = 0;\n      initialize_memory_block_00000fec(memoryPtr + 5,0);\n      memoryPtr[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        update_pointer_and_value_00000698(memoryPtr,10);\n        if ((flags & 4) == 0) {\n          enable_irq_interrupts_if_privileged_00000d0c(irqInterrupts);\n          check_and_enable_interrupt_00000738(length);\n          return (int)availableIndex;\n        }\n      }\n      else {\n        update_pointer_and_value_00000698(memoryPtr,1);\n      }\n      enable_irq_interrupts_if_privileged_00000d0c(irqInterrupts);\n      result = (int)availableIndex;\n    }\n  }\n  else {\n    result = -0x16;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_memory_block_000010d4",
                "param_1": "startAddress",
                "param_2": "size",
                "param_3": "length",
                "param_4": "flags",
                "param_5": "arg1",
                "param_6": "arg2",
                "param_7": "arg3",
                "uVar1": "irqInterrupts",
                "uVar2": "initializedMemory",
                "iVar3": "result",
                "uVar4": "adjustedSize",
                "puVar5": "memoryPtr",
                "local_30": "adjustedSizeTemp",
                "local_2c": "adjustedAddress",
                "local_10": "loopIndex",
                "local_c": "currentIndex",
                "local_a": "availableIndex"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000fec",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_000007dc",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_system_and_peripherals_00001274",
            "code": "\nvoid initialize_system_and_peripherals_00001274(void)\n\n{\n  initialize_data();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  initialize_system();\n  initialize_peripherals();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_system_and_peripherals_00001274",
                "initialize_data_0000258c": "initialize_data",
                "initialize_system_00001c84": "initialize_system",
                "initialize_peripherals_00002396": "initialize_peripherals"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001c84",
                "FUN_00002396",
                "FUN_0000258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "handle_interrupt_0000129c",
            "code": "\nvoid handle_interrupt_0000129c(undefined4 interrupt_type)\n\n{\n  handle_interrupt_0000129c_request_00002434(interrupt_type,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "handle_interrupt_0000129c",
                "param_1": "interrupt_type"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "handle_interrupt_and_store_value_000012b4",
            "code": "\nundefined4 handle_interrupt_and_store_value_000012b4(int input_value,undefined input_data)\n\n{\n  undefined4 return_value;\n  \n  return_value = check_and_store_value_00002364(input_value + 4,input_data);\n  handle_irq_interrupts_000024bc(input_value);\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "handle_interrupt_and_store_value_000012b4",
                "param_1": "input_value",
                "param_2": "input_data",
                "uVar1": "return_value"
            },
            "calling": [],
            "called": [
                "FUN_00002364",
                "FUN_000024bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "copy_and_increment_memory_loop_000012e2",
            "code": "\nint copy_and_increment_memory_loop_000012e2(int memory_address,undefined4 source_address,undefined4 num_bytes)\n\n{\n  int error_code;\n  \n  while( true ) {\n    error_code = copy_and_increment_memory_0000231c(memory_address + 4,source_address,num_bytes);\n    if (error_code != 0) break;\n    handle_interrupt_0000129c(memory_address);\n  }\n  return error_code;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "copy_and_increment_memory_loop_000012e2",
                "param_1": "memory_address",
                "param_2": "source_address",
                "param_3": "num_bytes",
                "iVar1": "error_code"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000129c",
                "FUN_0000231c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_at_index_00001318",
            "code": "\nvoid setBitAtIndex_00001318(byte input)\n\n{\n  *(int *)(((uint)(int)(char)input >> 5) * 4 + -0x1fff1f00) = 1 << (input & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_at_index_00001318",
                "param_1": "input"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "enable_interrupt_if_enabled_00001348",
            "code": "\nvoid enable_interrupt_if_enabled_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    enable_hardware_interrupt_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "enable_interrupt_if_enabled_00001348"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_offset_00001360",
            "code": "\nint calculate_offset_00001360(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_offset_00001360",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_offset_to_value_00001392",
            "code": "\nvoid setOffsetToValue_00001392(undefined4 inputOffset,undefined data)\n\n{\n  undefined4 *offsetPointer;\n  \n  offsetPointer = (undefined4 *)calculate_offset_00001360(inputOffset,data);\n  *offsetPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_offset_to_value_00001392",
                "param_1": "inputOffset",
                "param_2": "data",
                "puVar1": "offsetPointer"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "initialize_data_structure_000013b8",
            "code": "\nundefined4 initializeDataStructure_000013b8(int index,undefined4 inputValue,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 returnValue;\n  \n  if (index != 0) {\n    execute_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = data1;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = data2;\n  update_values_00001448(index);\n  set_offset_to_value_00001392(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    update_data_000014c4(index,inputValue);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "initialize_data_structure_000013b8",
                "param_1": "index",
                "param_2": "inputValue",
                "param_3": "data1",
                "param_4": "data2",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_000014c4",
                "FUN_00000f04",
                "FUN_00001392",
                "FUN_00001448"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "update_values_00001448",
            "code": "\nvoid updateValues_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    update_flag_and_value_00001f80(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    update_flag_and_value_00001f80(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "update_values_00001448",
                "param_1": "index"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_data_000014c4",
            "code": "\nvoid updateData_000014c4(int index,uint value)\n\n{\n  byte *data;\n  uint value2;\n  uint result;\n  \n  data = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  value2 = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  data[3] = data[3] & 0xf3;\n  data[2] = (&DAT_00007001)[index * 0x20];\n  result = value2 / (value << 4);\n  *data = (byte)(result >> 8) & 0x1f;\n  data[1] = (byte)result;\n  data[10] = (byte)((value2 << 2) / value + 1 >> 1) & 0x1f;\n  data[0x10] = data[0x10] | 0x88;\n  if ((data[0x10] & 0x70) == 0) {\n    data[0x13] = 0;\n  }\n  else {\n    data[0x13] = (char)(2 << (data[0x10] >> 4 & 7)) - 1;\n  }\n  data[0x15] = 1;\n  data[0x11] = 0xc0;\n  data[3] = data[3] | 0x2c;\n  set_bit_at_index_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_data_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "data",
                "uVar2": "value2",
                "uVar3": "result"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int index,int source_addr,uint num_elements)\n\n{\n  int destination_addr;\n  uint counter;\n  \n  destination_addr = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (counter = 0; counter < num_elements; counter = counter + 1) {\n    do {\n    } while (-1 < *(char *)(destination_addr + 4));\n    *(undefined *)(destination_addr + 7) = *(undefined *)(counter + source_addr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "source_addr",
                "param_3": "num_elements",
                "iVar1": "destination_addr",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_function_if_enabled_00001628",
            "code": "\nvoid executeFunctionIfEnabled_00001628(intValue index)\n\n{\n  if (((*(byteValue *)(*(intValue *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(intValue *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(functionPointer **)(&DAT_1fff0b6c + index * 8))\n              (*(undefinedValue4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefinedValue *)(*(intValue *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  enable_intValueerrupt_if_enabled_00001348();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_function_if_enabled_00001628",
                "param_1": "index",
                "byte": "byteValue",
                "int": "intValue",
                "undefined": "undefinedValue",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "execute_enabled_function_00001688",
            "code": "\nvoid execute_enabled_function_00001688(void)\n\n{\n  execute_enabled_function_00001688_check(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "execute_enabled_function_00001688",
                "execute_function_if_enabled_00001628": "execute_enabled_function_check"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculateOffset_00001696(uint address,int multiplier)\n\n{\n  return multiplier * 4 + (address & 0xf0000000 | (address & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "address",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_00001710",
                "FUN_000016c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_offset_to_value_000016c8",
            "code": "\nvoid setOffsetToValue_000016c8(undefined4 offset,undefined value)\n\n{\n  undefined4 *offsetPointer;\n  \n  offsetPointer = (undefined4 *)calculate_offset_00001696(offset,value);\n  *offsetPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_offset_to_value_000016c8",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offsetPointer"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_offset_to_value_000016ec",
            "code": "\nvoid setOffsetToValue_000016ec(undefined4 offset,undefined value)\n\n{\n  undefined *offsetPtr;\n  \n  offsetPtr = (undefined *)calculate_offset_00001696(offset,value);\n  *offsetPtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_offset_to_value_000016ec",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offsetPtr"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a3c",
                "FUN_00001a60"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 input1,undefined input2)\n\n{\n  undefined *targetAddress;\n  \n  targetAddress = (undefined *)calculate_offset_00001696(input1,input2);\n  *targetAddress = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "targetAddress"
            },
            "calling": [
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a60",
                "FUN_000018bc",
                "FUN_000019c0",
                "FUN_00001734"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "clear_memory_00001734",
            "code": "\nvoid clearMemory_00001734(void)\n\n{\n  clear_memory_00001710(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "clear_memory_00001734"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_00001a3c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_register_00001748",
            "code": "\nvoid updateRegister_00001748(byte newValue)\n\n{\n  DAT_40064003 = newValue | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_register_00001748",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_000018bc",
                "FUN_000019c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "clear_and_set_flags_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid clearAndSetFlags_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  clearMemory(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "clear_and_set_flags_00001778",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "update_offset_and_flags_000017dc",
            "code": "\n\n\nvoid updateOffsetAndFlags_000017dc(void)\n\n{\n  set_offset_to_value_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "update_offset_and_flags_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_registers_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initializeRegisters_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  setOffsetToValue(&DAT_40064001,0);\n  clearMemory(&DAT_40064000,1);\n  clearMemory(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_registers_0000182c",
                "set_offset_to_value_000016ec": "setOffsetToValue",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_system_000018bc",
            "code": "\nvoid initializeSystem_000018bc(void)\n\n{\n  updateRegister(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  clearMemory(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_system_000018bc",
                "update_register_00001748": "updateRegister",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_flags_0000191c",
            "code": "\nvoid initializeFlags_0000191c(void)\n\n{\n  clearAndSetFlags();\n  updateRegister(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_flags_0000191c",
                "clear_and_set_flags_00001778": "clearAndSetFlags",
                "update_register_00001748": "updateRegister"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_system_00001960",
            "code": "\nvoid initializeSystem_00001960(void)\n\n{\n  updateRegister(0xa0);\n  clearMemory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_system_00001960",
                "update_register_00001748": "updateRegister",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_system_000019c0",
            "code": "\nvoid initializeSystem_000019c0(void)\n\n{\n  clearAndSetFlags();\n  updateRegister(0x40);\n  clearMemory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  clearMemory2();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_system_000019c0",
                "clear_and_set_flags_00001778": "clearAndSetFlags",
                "update_register_00001748": "updateRegister",
                "clear_memory_00001710": "clearMemory",
                "clear_memory_00001734": "clearMemory2"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_memory_00001a18",
            "code": "\nvoid initializeMemory_00001a18(void)\n\n{\n  set_offset_to_value_000016ec(&DAT_40064001,1);\n  clearMemory();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_memory_00001a18",
                "clear_memory_00001734": "clearMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_memory_00001a3c",
            "code": "\nvoid initializeMemory_00001a3c(void)\n\n{\n  set_offset_to_value_000016ec(&DAT_40064001,1);\n  clearMemory();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_memory_00001a3c",
                "clear_memory_00001734": "clearMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_memory_00001a60",
            "code": "\nvoid initializeMemory_00001a60(void)\n\n{\n  clear_memory_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  set_offset_to_value_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_memory_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_00001ad4",
            "code": "\nvoid initialize_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "initialize_system_00001b10",
            "code": "\nundefined4 initialize_system_00001b10(byte byte_value)\n\n{\n  undefined4 result;\n  \n  if (byte_value < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)byte_value + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        initialize_system_00001b10_000018bc();\n        break;\n      case 1:\n        initialize_flags_0000191c();\n        break;\n      case 2:\n        initialize_system_00001b10_00001960();\n        break;\n      case 3:\n        initialize_system_00001b10_000019c0();\n        break;\n      case 4:\n        initialize_memory_00001a18();\n        break;\n      case 5:\n        initialize_memory_00001a3c();\n        break;\n      case 6:\n        initialize_memory_00001a60();\n        break;\n      case 7:\n        initialize_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (byte_value != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "initialize_system_00001b10",
                "param_1": "byte_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001a18",
                "FUN_0000191c",
                "FUN_00001ad4",
                "FUN_00001960",
                "FUN_00001a3c",
                "FUN_00001a60",
                "FUN_000019c0",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "clear_memory_and_update_register_00001bb8",
            "code": "\nvoid clearMemoryAndUpdateRegister_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    clear_memory_00001710(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    clear_memory_00001710(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  update_register_00001748(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "clear_memory_and_update_register_00001bb8"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initialize_system_00001c84(void)\n\n{\n  undefined4 interruptStatus;\n  \n  interruptStatus = check_interrupt_status();\n  clear_memory_and_update_register();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  initialize_registers();\n  update_offset_and_flags();\n  initialize_system_00001c84(7);\n  enable_irq_interrupts_if_privileged(interruptStatus);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "interruptStatus",
                "check_irq_interrupts_00000cd0": "check_interrupt_status",
                "clear_memory_and_update_register_00001bb8": "clear_memory_and_update_register",
                "initialize_registers_0000182c": "initialize_registers",
                "update_offset_and_flags_000017dc": "update_offset_and_flags",
                "initialize_system_00001b10": "initialize_system",
                "enable_irq_interrupts_if_privileged_00000d0c": "enable_irq_interrupts_if_privileged"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_000017dc",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "enable_hardware_interrupt_if_data_available_00001cf0",
            "code": "\nvoid enableHardwareInterruptIfDataAvailable_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    enable_hardware_interrupt_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "enable_hardware_interrupt_if_data_available_00001cf0"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculateOffset_00001d08(uint address,int multiplier)\n\n{\n  return multiplier * 4 + (address & 0xf0000000 | (address & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "address",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_flag_to1_00001d3a",
            "code": "\nvoid setFlagTo1_00001d3a(undefined4 offset,undefined value)\n\n{\n  undefined4 *offsetPointer;\n  \n  offsetPointer = (undefined4 *)calculate_offset_00001d08(offset,value);\n  *offsetPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_flag_to1_00001d3a",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offsetPointer"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_mask_and_combine_00001d5e",
            "code": "\nuint applyMaskAndCombine_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_mask_and_combine_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_bitmask_and_concatenate_00001d80",
            "code": "\nuint applyBitmaskAndConcatenate_00001d80(ushort input)\n\n{\n  return input & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_bitmask_and_concatenate_00001d80",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_from_param_00001da2",
            "code": "\nushort extractBitsFromParam_00001da2(ushort input)\n\n{\n  return input >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_from_param_00001da2",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "extract_bits_from_mask_00001dc0",
            "code": "\nushort extractBitsFromMask_00001dc0(ushort input)\n\n{\n  return input & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "extract_bits_from_mask_00001dc0",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "update_flag_value_00001ddc",
            "code": "\nvoid updateFlagValue_00001ddc(undefined2 inputValue)\n\n{\n  char extractedBits;\n  \n  extractedBits = extract_bits_from_param_00001da2(inputValue);\n  set_flag_to1_00001d3a(&DAT_40048038,extractedBits + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "update_flag_value_00001ddc",
                "param_1": "inputValue",
                "cVar1": "extractedBits"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001d3a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_00001e0c",
            "code": "\nuint extractBits_00001e0c(int startIndex,uint data)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)data >> 3) + startIndex * 4) * 4) >> ((data & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_00001e0c",
                "param_1": "startIndex",
                "param_2": "data"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_value_00001e44",
            "code": "\nvoid updateValue_00001e44(int index,uint bitOffset,int newValue)\n\n{\n  int shiftAmount;\n  \n  shiftAmount = (int)bitOffset >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) & ~(0xf << ((bitOffset & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) | newValue << ((bitOffset & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_value_00001e44",
                "param_1": "index",
                "param_2": "bitOffset",
                "param_3": "newValue",
                "iVar1": "shiftAmount"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "update_value_00001ec4",
            "code": "\nvoid update_value_00001ec4(undefined4 input_1,undefined4 input_2)\n\n{\n  undefined4 extracted_bits;\n  \n  extracted_bits = extract_bits_00001e0c(input_1,input_2);\n  update_value_00001ec4_00001e44(input_1,input_2,extracted_bits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "update_value_00001ec4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "extracted_bits"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_flag_and_value_00001eea",
            "code": "\nundefined4 updateFlagAndValue_00001eea(undefined2 flag,byte value)\n\n{\n  uint bits;\n  int maskedValue;\n  int extractedBits;\n  \n  update_flag_and_value_00001f80(flag,0);\n  if ((char)value < '\\0') {\n    bits = extract_bits_from_mask_00001dc0(flag);\n    maskedValue = apply_bitmask_and_concatenate_00001d80(flag);\n    *(uint *)(maskedValue + 0x14) = *(uint *)(maskedValue + 0x14) | 1 << (bits & 0xff);\n  }\n  else {\n    bits = extract_bits_from_mask_00001dc0(flag);\n    maskedValue = apply_bitmask_and_concatenate_00001d80(flag);\n    *(uint *)(maskedValue + 0x14) = *(uint *)(maskedValue + 0x14) & ~(1 << (bits & 0xff));\n  }\n  maskedValue = apply_mask_and_combine_00001d5e(flag);\n  extractedBits = extract_bits_from_mask_00001dc0(flag);\n  *(uint *)(maskedValue + extractedBits * 4) = value & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_flag_and_value_00001eea",
                "param_1": "flag",
                "param_2": "value",
                "uVar1": "bits",
                "iVar2": "maskedValue",
                "iVar3": "extractedBits"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001f80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_flag_and_value_00001f80",
            "code": "\nvoid updateFlagAndValue_00001f80(undefined2 param1,undefined4 param2)\n\n{\n  int maskedCombinedValue;\n  int extractedBits;\n  undefined4 bitsFromParam;\n  undefined4 bitsFromMask;\n  uint value;\n  \n  updateFlagValue(param1);\n  maskedCombinedValue = applyMaskAndCombine(param1);\n  extractedBits = extractBitsFromMask(param1);\n  value = *(uint *)(maskedCombinedValue + extractedBits * 4);\n  maskedCombinedValue = applyMaskAndCombine(param1);\n  extractedBits = extractBitsFromMask(param1);\n  *(undefined4 *)(maskedCombinedValue + extractedBits * 4) = param2;\n  if ((value & 0xf0000) != 0) {\n    bitsFromParam = extractBitsFromParam(param1);\n    bitsFromMask = extractBitsFromMask(param1);\n    updateValue(bitsFromParam,bitsFromMask);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_flag_and_value_00001f80",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "maskedCombinedValue",
                "iVar2": "extractedBits",
                "uVar3": "bitsFromParam",
                "uVar4": "bitsFromMask",
                "uVar5": "value",
                "update_flag_value_00001ddc": "updateFlagValue",
                "apply_mask_and_combine_00001d5e": "applyMaskAndCombine",
                "extract_bits_from_mask_00001dc0": "extractBitsFromMask",
                "extract_bits_from_param_00001da2": "extractBitsFromParam",
                "update_value_00001ec4": "updateValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001ec4",
                "FUN_00001dc0",
                "FUN_00001d5e",
                "FUN_00001ddc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_00001ff6",
            "code": "\nvoid setBit_00001ff6(undefined2 input)\n\n{\n  uint bitMask;\n  int concatenatedValue;\n  \n  bitMask = extract_bits_from_mask_00001dc0(input);\n  concatenatedValue = apply_bitmask_and_concatenate_00001d80(input);\n  *(int *)(concatenatedValue + 4) = 1 << (bitMask & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_00001ff6",
                "param_1": "input",
                "uVar1": "bitMask",
                "iVar2": "concatenatedValue"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_data_00002028",
            "code": "\nvoid processData_00002028(int dataStruct,undefined4 param)\n\n{\n  int bits;\n  uint bitFlags;\n  uint bitIndex;\n  \n  bitFlags = *(uint *)(dataStruct + 0xa0);\n  for (bitIndex = 0; (int)bitIndex < 0x20; bitIndex = bitIndex + 1) {\n    if (((bitFlags & 1 << (bitIndex & 0xff)) != 0) &&\n       ((*(uint *)(dataStruct + bitIndex * 4) & 0xf0000) != 0)) {\n      *(int *)(dataStruct + 0xa0) = 1 << (bitIndex & 0xff);\n      bits = extract_bits_00001e0c(param,bitIndex);\n      (**(code **)(&DAT_1fff0b78 + bits * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + bits * 0xc));\n    }\n  }\n  enable_hardware_interrupt_if_data_available_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_data_00002028",
                "param_1": "dataStruct",
                "param_2": "param",
                "iVar1": "bits",
                "uVar2": "bitFlags",
                "local_c": "bitIndex"
            },
            "calling": [
                "FUN_000020b8",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020e0",
                "FUN_000020f4"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_data_processing_000020b8",
            "code": "\nvoid initialize_data_processing_000020b8(void)\n\n{\n  process_data(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_data_processing_000020b8",
                "process_data_00002028": "process_data"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_data_processing_000020cc",
            "code": "\nvoid initializeDataProcessing_000020cc(void)\n\n{\n  processData(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_data_processing_000020cc",
                "process_data_00002028": "processData"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_data_processing_000020e0",
            "code": "\nvoid initialize_data_processing_000020e0(void)\n\n{\n  process_data(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_data_processing_000020e0",
                "process_data_00002028": "process_data"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_processing_000020f4",
            "code": "\nvoid initialize_processing_000020f4(void)\n\n{\n  process_data(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_processing_000020f4",
                "process_data_00002028": "process_data"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_data_processing_00002108",
            "code": "\nvoid initializeDataProcessing_00002108(void)\n\n{\n  processData(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_data_processing_00002108",
                "process_data_00002028": "processData"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_info_0000211c",
            "code": "\nvoid printProcessInfo_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 processName;\n  int offset;\n  int indexOffset;\n  dword baseAddress;\n  uint arrayIndex;\n  undefined4 *arrayPointer;\n  undefined4 mainStackPointer;\n  undefined4 initialValue;\n  int validOffsetCount;\n  short iterationIndex;\n  int totalIndexCount;\n  int stackSize;\n  \n  processName = 0x515f;\n  stackSize = 0;\n  totalIndexCount = 0;\n  process_data_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  validOffsetCount = count_valid_offsets_000008b8();\n  initialValue = get_initial_value_0000091c();\n  mainStackPointer = get_main_stack_pointer_00000900();\n  process_data_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               validOffsetCount,initialValue,mainStackPointer);\n  stackSize = stackSize + 0x200;\n  if (0 < validOffsetCount) {\n    totalIndexCount = validOffsetCount + totalIndexCount;\n  }\n  for (iterationIndex = 1; iterationIndex < 0x21; iterationIndex = iterationIndex + 1) {\n    arrayPointer = *(undefined4 **)(&DAT_1fff0358 + iterationIndex * 4);\n    if (arrayPointer != (undefined4 *)0x0) {\n      arrayIndex = (uint)*(byte *)(arrayPointer + 1);\n      baseAddress = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[arrayIndex];\n      indexOffset = (int)&processName + (uint)(8 < arrayIndex);\n      offset = arrayPointer[0xb];\n      stackSize = offset + stackSize;\n      iVar1 = find_array_end_index_000010a0(arrayPointer[9]);\n      offset = offset - iVar1;\n      totalIndexCount = offset + totalIndexCount;\n      process_data_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)arrayPointer + 6),arrayPointer[10],baseAddress,indexOffset,\n                   *(undefined *)((int)arrayPointer + 5),arrayPointer[0xb],offset,arrayPointer[9],*arrayPointer);\n    }\n  }\n  process_data_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,stackSize,totalIndexCount);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_info_0000211c",
                "local_40": "processName",
                "local_3c": "offset",
                "local_38": "indexOffset",
                "local_34": "baseAddress",
                "local_30": "arrayIndex",
                "local_2c": "arrayPointer",
                "local_28": "mainStackPointer",
                "local_24": "initialValue",
                "local_20": "validOffsetCount",
                "local_1a": "iterationIndex",
                "local_18": "totalIndexCount",
                "local_14": "stackSize"
            },
            "calling": [
                "FUN_00002eb4",
                "FUN_00000f04"
            ],
            "called": [
                "FUN_000010a0",
                "FUN_00004c84",
                "FUN_000008b8",
                "FUN_00000900",
                "FUN_0000091c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 local_40;\n  int local_3c;\n  int local_38;\n  dword local_34;\n  uint local_30;\n  undefined4 *local_2c;\n  undefined4 local_28;\n  undefined4 local_24;\n  int local_20;\n  short local_1a;\n  int local_18;\n  int local_14;\n  \n  local_40 = 0x515f;\n  local_14 = 0;\n  local_18 = 0;\n  FUNC_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  local_20 = count_valid_offsets_000008b8();\n  local_24 = get_initial_value_0000091c();\n  local_28 = get_main_stack_pointer_00000900();\n  FUNC_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               local_20,local_24,local_28);\n  local_14 = local_14 + 0x200;\n  if (0 < local_20) {\n    local_18 = local_20 + local_18;\n  }\n  for (local_1a = 1; local_1a < 0x21; local_1a = local_1a + 1) {\n    local_2c = *(undefined4 **)(&DAT_1fff0358 + local_1a * 4);\n    if (local_2c != (undefined4 *)0x0) {\n      local_30 = (uint)*(byte *)(local_2c + 1);\n      local_34 = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[local_30];\n      local_38 = (int)&local_40 + (uint)(8 < local_30);\n      local_3c = local_2c[0xb];\n      local_14 = local_3c + local_14;\n      iVar1 = find_array_end_index_000010a0(local_2c[9]);\n      local_3c = local_3c - iVar1;\n      local_18 = local_3c + local_18;\n      FUNC_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)local_2c + 6),local_2c[10],local_34,local_38,\n                   *(undefined *)((int)local_2c + 5),local_2c[0xb],local_3c,local_2c[9],*local_2c);\n    }\n  }\n  FUNC_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,local_14,local_18);\n  return;\n}\n\n"
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int input)\n\n{\n  undefined result;\n  int value;\n  bool isEqual;\n  \n  value = *(int *)(input + 0xc);\n  isEqual = *(int *)(input + 8) == value;\n  if (isEqual) {\n    value = 1;\n  }\n  result = (undefined)value;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "input",
                "uVar1": "result",
                "iVar2": "value",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_sum_equals_00002294",
            "code": "\nundefined checkSumEquals_00002294(int input)\n\n{\n  undefined result;\n  int difference;\n  bool isMatching;\n  \n  difference = *(int *)(input + 4);\n  isMatching = *(int *)(input + 0xc) - *(int *)(input + 8) == difference;\n  if (isMatching) {\n    difference = 1;\n  }\n  result = (undefined)difference;\n  if (!isMatching) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_sum_equals_00002294",
                "param_1": "input",
                "uVar1": "result",
                "iVar2": "difference",
                "bVar3": "isMatching"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "store_value_in_ptr_000022be",
            "code": "\nvoid storeValueInPtr_000022be(int *ptrArray,undefined value)\n\n{\n  uint index;\n  \n  index = ptrArray[3];\n  ptrArray[3] = index + 1;\n  *(undefined *)((index & ptrArray[1] - 1U) + *ptrArray) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "store_value_in_ptr_000022be",
                "param_1": "ptrArray",
                "param_2": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_access_memory_000022f0",
            "code": "\nundefined incrementAndAccessMemory_000022f0(int *array)\n\n{\n  uint element;\n  \n  element = array[2];\n  array[2] = element + 1;\n  return *(undefined *)((element & array[1] - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_access_memory_000022f0",
                "param_1": "array",
                "uVar1": "element"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_and_increment_memory_0000231c",
            "code": "\nint copyAndIncrementMemory_0000231c(undefined4 ptr,undefined *dest,int count)\n\n{\n  undefined value;\n  int isEqual;\n  undefined *destPtr;\n  int remainingCount;\n  \n  destPtr = dest;\n  remainingCount = count;\n  while ((remainingCount != 0 && (isEqual = check_equality_00002270(ptr), isEqual == 0))) {\n    value = increment_and_access_memory_000022f0(ptr);\n    *destPtr = value;\n    remainingCount = remainingCount + -1;\n    destPtr = destPtr + 1;\n  }\n  return count - remainingCount;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_and_increment_memory_0000231c",
                "param_1": "ptr",
                "param_2": "dest",
                "param_3": "count",
                "uVar1": "value",
                "iVar2": "isEqual",
                "local_20": "destPtr",
                "local_14": "remainingCount"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_and_store_value_00002364",
            "code": "\nundefined4 check_and_store_value_00002364(undefined4 input_value,undefined output_value)\n\n{\n  int checksum_result;\n  undefined4 return_value;\n  \n  checksum_result = check_sum_equals_00002294(input_value);\n  if (checksum_result == 0) {\n    store_value_in_ptr_000022be(input_value,output_value);\n    return_value = 0;\n  }\n  else {\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_and_store_value_00002364",
                "param_1": "input_value",
                "param_2": "output_value",
                "iVar1": "checksum_result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_000022be",
                "FUN_00002294"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_peripherals_00002396",
            "code": "\nvoid initialize_peripherals_00002396(void)\n\n{\n  initialize_peripherals_00002396_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_peripherals_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_and_process_data_000023a4",
            "code": "\nundefined4 initialize_and_process_data_000023a4(void)\n\n{\n  undefined4 returnValue;\n  undefined buffer [128];\n  \n  initialize_interrupts_000023d0(0);\n  process_data_00004db8(\"Welcome to RIOT!\");\n  returnValue = process_data_loop_00002e6c(0,buffer,0x80);\n  software_interrupt(0x3f);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_and_process_data_000023a4",
                "auStack_88": "buffer",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002e6c",
                "FUN_000023d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "execute_software_interrupt_000023c8",
            "code": "\nvoid executeSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "execute_software_interrupt_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "initialize_interrupts_000023d0",
            "code": "\nundefined4 initialize_interrupts_000023d0(undefined4 interrupt_handler)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = execute_software_interrupt_000023c8(1,interrupt_handler,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "initialize_interrupts_000023d0",
                "param_1": "interrupt_handler",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "copy_list_item_0000240c",
            "code": "\nundefined4 * copyListItem_0000240c(undefined4 *list)\n\n{\n  undefined4 *nextItem;\n  \n  nextItem = (undefined4 *)*list;\n  if (nextItem != (undefined4 *)0x0) {\n    *list = *nextItem;\n  }\n  return nextItem;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "copy_list_item_0000240c",
                "param_1": "list",
                "puVar1": "nextItem"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "handle_interrupt_request_00002434",
            "code": "\nundefined4 handleInterruptRequest_00002434(int *interruptStatus,int isPrivileged)\n\n{\n  int savedValue;\n  undefined4 returnValue;\n  \n  returnValue = check_irq_interrupts_00000cd0();\n  savedValue = DAT_1fff03dc;\n  if (*interruptStatus == 0) {\n    *interruptStatus = -1;\n    enable_irq_interrupts_if_privileged_00000d0c(returnValue);\n    returnValue = 1;\n  }\n  else if (isPrivileged == 0) {\n    enable_irq_interrupts_if_privileged_00000d0c(returnValue);\n    returnValue = 0;\n  }\n  else {\n    update_pointer_and_value_00000698(DAT_1fff03dc,2);\n    if (*interruptStatus == -1) {\n      *interruptStatus = savedValue + 8;\n      *(undefined4 *)*interruptStatus = 0;\n    }\n    else {\n      find_closest_value_00001034(interruptStatus,savedValue);\n    }\n    enable_irq_interrupts_if_privileged_00000d0c(returnValue);\n    enable_hardware_interrupt_0000093c();\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00002434": "handle_interrupt_request_00002434",
                "param_1": "interruptStatus",
                "param_2": "isPrivileged",
                "uVar2": "returnValue",
                "iVar1": "savedValue"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "handle_irq_interrupts_000024bc",
            "code": "\nvoid handleIRQInterrupts_000024bc(int *list)\n\n{\n  undefined status;\n  undefined4 interrupts;\n  int item;\n  \n  interrupts = check_irq_interrupts_00000cd0();\n  if (*list == 0) {\n    enable_irq_interrupts_if_privileged_00000d0c(interrupts);\n  }\n  else if (*list == -1) {\n    *list = 0;\n    enable_irq_interrupts_if_privileged_00000d0c(interrupts);\n  }\n  else {\n    item = copy_list_item_0000240c(list);\n    update_pointer_and_value_00000698(item + -8,10);\n    if (*list == 0) {\n      *list = -1;\n    }\n    status = *(undefined *)(item + -3);\n    enable_irq_interrupts_if_privileged_00000d0c(interrupts);\n    check_and_enable_interrupt_00000738(status);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "handle_irq_interrupts_000024bc",
                "param_1": "list",
                "uVar1": "status",
                "uVar2": "interrupts",
                "iVar3": "item"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_0000240c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "update_data_00002538",
            "code": "\nvoid updateData_00002538(byte inputByte,uint inputValue)\n\n{\n  if ((char)inputByte < '\\0') {\n    (&DAT_e000ed14)[inputByte & 0xf] = (char)((inputValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((inputValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "update_data_00002538",
                "param_1": "inputByte",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_data_0000258c",
            "code": "\n\n\nvoid initializeData_0000258c(void)\n\n{\n  uint count;\n  \n  _DAT_e000ed08 = 0;\n  updateData(0xfffffffe,1);\n  updateData(0xfffffffb,1);\n  for (count = 0; count < 0x66; count = count + 1) {\n    updateData((int)(char)count,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_data_0000258c",
                "local_c": "count",
                "update_data_00002538": "updateData"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_peripherals_000025f4",
            "code": "\nvoid initialize_peripherals_000025f4(void)\n\n{\n  initialize_peripheral();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_peripherals_000025f4",
                "initialize_peripheral_000027b0": "initialize_peripheral"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "initialize_calendar_data_00002600",
            "code": "\nundefined4 initialize_calendar_data_00002600(undefined4 input_date)\n\n{\n  undefined4 calendar_date;\n  \n  calendar_date = calculate_calendar_date_000047e4(input_date);\n  initialize_data_0000285c(calendar_date);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "initialize_calendar_data_00002600",
                "param_1": "input_date",
                "uVar1": "calendar_date"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_0000285c",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "process_data_00002624",
            "code": "\nundefined4 processData_00002624(undefined4 inputData)\n\n{\n  undefined4 memoryAddress;\n  undefined4 stackVariable;\n  \n  memoryAddress = get_memory_address_0000281c();\n  stackVariable = 0;\n  calculate_date_components_0000443c(&memoryAddress,inputData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "process_data_00002624",
                "param_1": "inputData",
                "local_10": "memoryAddress",
                "uStack_c": "stackVariable"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_calendar_00002654",
            "code": "\nundefined4 initialize_calendar_00002654(undefined4 input_date,undefined4 output_value,undefined4 additional_data)\n\n{\n  undefined4 calendar_date;\n  \n  calendar_date = calculate_calendar_date_000047e4(input_date);\n  DAT_1fff0d9c = output_value;\n  initialize_data_00002894(calendar_date,0x26f1,additional_data);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_calendar_00002654",
                "param_1": "input_date",
                "param_2": "output_value",
                "param_3": "additional_data",
                "uVar1": "calendar_date"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_00002894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "calculate_date_components_00002690",
            "code": "\nundefined4 calculateDateComponents_00002690(undefined4 inputDate)\n\n{\n  undefined4 pointer;\n  undefined4 zero;\n  \n  pointer = increment_pointer_000028f0();\n  zero = 0;\n  calculate_date_components_0000443c(&pointer,inputDate);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "calculate_date_components_00002690",
                "param_1": "inputDate",
                "local_10": "pointer",
                "uStack_c": "zero"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_data_000026c0",
            "code": "\nvoid initialize_data_000026c0(void)\n\n{\n  clear_data_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_data_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_peripheral_000026d8",
            "code": "\nvoid initialize_peripheral_000026d8(void)\n\n{\n  enable_peripheral();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_peripheral_000026d8",
                "enable_peripheral_0000294c": "enable_peripheral"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "disable_interrupts_000026e4",
            "code": "\nvoid disable_interrupts_000026e4(void)\n\n{\n  disable_interrupt_00002970();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "disable_interrupts_000026e4"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid executeCallback_000026f0(undefined4 arg)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(arg);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "arg"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "update_bit_00002714",
            "code": "\nvoid updateBit_00002714(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "update_bit_00002714",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "update_memory_00002744",
            "code": "\nvoid updateMemory_00002744(byte address,uint data)\n\n{\n  if ((char)address < '\\0') {\n    (&DAT_e000ed14)[address & 0xf] = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + -0x1fff1c00) = (char)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "update_memory_00002744",
                "param_1": "address",
                "param_2": "data"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "enable_hardware_interrupt_if_flag_set_00002798",
            "code": "\nvoid enable_hardware_interrupt_if_flag_set_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    enable_hardware_interrupt_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "enable_hardware_interrupt_if_flag_set_00002798"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_peripheral_000027b0",
            "code": "\n\n\nvoid initializePeripheral_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  enablePeripheral();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_peripheral_000027b0",
                "enable_peripheral_0000294c": "enablePeripheral"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_memory_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getMemoryAddress_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_memory_address_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "initialize_data_0000285c",
            "code": "\n\n\nvoid initializeData_0000285c(undefined4 data)\n\n{\n  _DAT_4003d000 = data;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "initialize_data_0000285c",
                "param_1": "data"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initializeData_00002894(int inputValue,undefined4 data1,undefined4 data2)\n\n{\n  _DAT_4003d008 = inputValue + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = data1;\n  DAT_1fff0da4 = data2;\n  update_memory_00002744(0x2e,10);\n  update_bit_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "inputValue",
                "param_2": "data1",
                "param_3": "data2"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_pointer_000028f0",
            "code": "\n\n\nint incrementPointer_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_pointer_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "clear_data_00002910",
            "code": "\n\n\nvoid clearData_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "clear_data_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "enable_peripheral_0000294c",
            "code": "\n\n\nvoid enablePeripheral_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "enable_peripheral_0000294c"
            },
            "calling": [
                "FUN_000026d8",
                "FUN_000027b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "disable_interrupt_00002970",
            "code": "\n\n\nvoid disableInterrupt_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "disable_interrupt_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_hardware_callbacks_00002994",
            "code": "\n\n\nvoid executeHardwareCallbacks_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  enable_hardware_interrupt_if_flag_set_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_hardware_callbacks_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "process_input_00002a00",
            "code": "\nvoid processInput_00002a00(undefined4 input)\n\n{\n  processInput_00002a00Data(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "process_input_00002a00",
                "param_1": "input",
                "process_input_00004cb4": "processInputData"
            },
            "calling": [
                "FUN_00002d94",
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_value_by_comparison_00002a18",
            "code": "\nint findValueByComparison_00002a18(int *inputArray,undefined4 valueToCompare)\n\n{\n  int iVar1;\n  int *arrayPointer;\n  undefined **rebootStringPointer;\n  uint index;\n  int *currentArrayElement;\n  \n  arrayPointer = inputArray;\n  rebootStringPointer = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    currentArrayElement = (&arrayPointer)[index];\n    if (currentArrayElement != (int *)0x0) {\n      for (; *currentArrayElement != 0; currentArrayElement = currentArrayElement + 3) {\n        iVar1 = compareAndCalculateDifference(*currentArrayElement,valueToCompare);\n        if (iVar1 == 0) {\n          return currentArrayElement[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_value_by_comparison_00002a18",
                "param_1": "inputArray",
                "param_2": "valueToCompare",
                "local_18": "arrayPointer",
                "local_14": "rebootStringPointer",
                "local_10": "index",
                "local_c": "currentArrayElement",
                "compare_and_calculate_difference_00004e52": "compareAndCalculateDifference"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commands)\n\n{\n  int *currentCommand;\n  undefined **commandNames;\n  uint index;\n  int *currentPtr;\n  \n  process_data_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  process_data_00004db8(\"---------------------------------------\");\n  currentCommand = commands;\n  commandNames = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    currentPtr = (&currentCommand)[index];\n    if (currentPtr != (int *)0x0) {\n      for (; *currentPtr != 0; currentPtr = currentPtr + 3) {\n        process_data_00004c84(\"%-20s %s\\n\",*currentPtr,currentPtr[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commands",
                "local_18": "currentCommand",
                "local_14": "commandNames",
                "local_10": "index",
                "local_c": "currentPtr"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "string_processing_00002b10",
            "code": "\nvoid stringProcessing_00002b10(undefined4 param,byte *string)\n\n{\n  int iVar1;\n  byte *pbVar2;\n  byte *stringsArray [3];\n  code *comparisonFunction;\n  char **commandArray;\n  uint numCommands;\n  byte delimiter;\n  char *currentChar;\n  char *currentString;\n  char **commandsArray;\n  uint index;\n  int escapeCount;\n  uint numStrings;\n  byte *current;\n  \n  numStrings = 0;\n  escapeCount = 0;\n  current = string;\n  while( true ) {\n    stringsArray[0] = string;\n    stringsArray[1] = (byte *)param;\n    if (0x20 < *current) {\n      if ((*current == 0x22) || (*current == 0x27)) {\n        delimiter = *current;\n        do {\n          pbVar2 = current + 1;\n          if (*pbVar2 == 0) {\n            current = pbVar2;\n            processData(elfArray[9].r_info);\n            return;\n          }\n          if (*pbVar2 == 0x5c) {\n            escapeCount = escapeCount + 1;\n            current = current + 2;\n            pbVar2 = current;\n            if (*current == 0) {\n              processData(elfArray[9].r_info);\n              return;\n            }\n          }\n          current = pbVar2;\n        } while (delimiter != *current);\n        if (0x20 < current[1]) {\n          processData(elfArray[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*current == 0x5c) {\n            escapeCount = escapeCount + 1;\n            current = current + 1;\n            if (*current == 0) {\n              processData(elfArray[9].r_info);\n              return;\n            }\n          }\n          current = current + 1;\n          if (*current == 0x22) {\n            processData(elfArray[9].r_info);\n            return;\n          }\n        } while (0x20 < *current);\n      }\n      numStrings = numStrings + 1;\n    }\n    if (*current == 0) break;\n    *current = 0;\n    current = current + 1;\n  }\n  if (numStrings != 0) {\n    numCommands = numStrings;\n    commandArray = (char **)((int)stringsArray - ((numStrings + 1) * 4 + 7 & 0xfffffff8));\n    commandArray[numStrings] = (char *)0x0;\n    current = string;\n    for (index = 0; commandsArray = commandArray, index < numStrings; index = index + 1) {\n      for (; *current == 0; current = current + 1) {\n      }\n      if ((*current == 0x22) || (*current == 0x27)) {\n        current = current + 1;\n      }\n      commandArray[index] = (char *)current;\n      for (; *current != 0; current = current + 1) {\n      }\n    }\n    for (; (escapeCount != 0 && (*commandsArray != (char *)0x0)); commandsArray = commandsArray + 1) {\n      for (currentString = *commandsArray; *currentString != '\\0'; currentString = currentString + 1) {\n        if (*currentString == '\\') {\n          for (currentChar = currentString; *currentChar != '\\0'; currentChar = currentChar + 1) {\n            *currentChar = currentChar[1];\n          }\n          escapeCount = escapeCount + -1;\n          if (escapeCount == 0) break;\n        }\n      }\n    }\n    comparisonFunction = (code *)findValueByComparison(param,*commandArray);\n    if (comparisonFunction == (code *)0x0) {\n      iVar1 = compareAndCalculateDifference(&DAT_00007214,*commandArray);\n      if (iVar1 == 0) {\n        printCommandDescriptions(stringsArray[1]);\n      }\n      else {\n        processData(\"shell: command not found: %s\\n\",*commandArray);\n      }\n    }\n    else {\n      (*comparisonFunction)(numStrings,commandArray);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "string_processing_00002b10",
                "param_1": "param",
                "param_2": "string",
                "local_48": "stringsArray",
                "local_3c": "comparisonFunction",
                "local_38": "commandArray",
                "local_34": "numCommands",
                "local_2d": "delimiter",
                "local_2c": "currentChar",
                "local_28": "currentString",
                "local_24": "commandsArray",
                "local_20": "index",
                "local_1c": "escapeCount",
                "local_18": "numStrings",
                "local_14": "current",
                "process_data_00004db8": "processData",
                "Elf32_Rel_ARRAY_1fff0200": "elfArray",
                "find_value_by_comparison_00002a18": "findValueByComparison",
                "compare_and_calculate_difference_00004e52": "compareAndCalculateDifference",
                "print_command_descriptions_00002a88": "printCommandDescriptions",
                "process_data_00004c84": "processData"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_00002a88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "process_user_data_00002d94",
            "code": "\nuint processUserData_00002d94(undefined *userData,int length)\n\n{\n  int data;\n  byte byteValue;\n  bool isFirstChar;\n  undefined *currentChar;\n  \n  currentChar = userData;\n  while( true ) {\n    if (length + -1 <= (int)currentChar - (int)userData) {\n      return 0xffffffff;\n    }\n    data = process_data_00004418();\n    if (data < 0) break;\n    if ((data == 0xd) || (data == 10)) {\n      *currentChar = 0;\n      process_input_00002a00(0xd);\n      process_input_00002a00(10);\n      isFirstChar = currentChar == userData;\n      if (isFirstChar) {\n        userData = (undefined *)0x1;\n      }\n      byteValue = (byte)userData;\n      if (!isFirstChar) {\n        byteValue = 0;\n      }\n      return (uint)byteValue;\n    }\n    if ((data == 8) || (data == 0x7f)) {\n      if (currentChar != userData) {\n        currentChar = currentChar + -1;\n        *currentChar = 0;\n        process_input_00002a00(8);\n        process_input_00002a00(0x20);\n        process_input_00002a00(8);\n      }\n    }\n    else {\n      *currentChar = (char)data;\n      process_input_00002a00(data);\n      currentChar = currentChar + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "process_user_data_00002d94",
                "param_1": "userData",
                "param_2": "length",
                "iVar1": "data",
                "bVar2": "byteValue",
                "bVar3": "isFirstChar",
                "local_c": "currentChar"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "initialize_and_process_00002e48",
            "code": "\nvoid initializeAndProcess_00002e48(void)\n\n{\n  processInput(0x3e);\n  processInput(0x20);\n  processRelEntries(*(undefined4 *)(elfRelArray[16].r_offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "initialize_and_process_00002e48",
                "process_input_00002a00": "processInput",
                "process_rel_entries_000041d0": "processRelEntries",
                "Elf32_Rel_ARRAY_1fff0200": "elfRelArray"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_000041d0",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "process_data_loop_00002e6c",
            "code": "\nvoid process_data_loop_00002e6c(undefined4 output_buffer,undefined4 user_data_1,undefined4 user_data_2)\n\n{\n  int result;\n  \n  initialize_and_process_00002e48();\n  do {\n    result = process_user_data_00002d94(user_data_1,user_data_2);\n    if (result == 0) {\n      string_processing_00002b10(output_buffer,user_data_1);\n    }\n    initialize_and_process_00002e48();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "process_data_loop_00002e6c",
                "param_1": "output_buffer",
                "param_2": "user_data_1",
                "param_3": "user_data_2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002d94",
                "FUN_00002b10",
                "FUN_00002e48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "run_infinite_loop_00002e9c",
            "code": "\nundefined4 run_infinite_loop_00002e9c(void)\n\n{\n  run_infinite_loop_00002e9c_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "run_infinite_loop_00002e9c"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "print_process_info_00002eb4",
            "code": "\nvoid print_process_info_00002eb4(void)\n\n{\n  print_process_info_00002eb4_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "print_process_info_00002eb4",
                "undefined4": "void"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_device_data_00002ecc",
            "code": "\nvoid readDeviceData_00002ecc(undefined4 deviceNumber,int deviceInfo)\n\n{\n  undefined4 deviceName;\n  undefined4 data;\n  undefined buffer [8];\n  uint readResult;\n  \n  readResult = execute_function_00003d64(deviceInfo,buffer);\n  if ((int)readResult < 1) {\n    process_data_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    data = *(undefined4 *)(deviceInfo + 8);\n    deviceName = get_device_name_000039e8(*(undefined *)(*(int *)(deviceInfo + 0xc) + 8));\n    process_data_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,data,deviceName);\n    display_data_00003694(buffer,readResult & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_device_data_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceInfo",
                "uVar1": "deviceName",
                "uVar2": "data",
                "auStack_1c": "buffer",
                "local_14": "readResult"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000039e8",
                "FUN_00003694",
                "FUN_00003d64",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "process_device_data_00002f30",
            "code": "\nvoid process_device_data_00002f30(void)\n\n{\n  int counter;\n  undefined4 *data_ptr;\n  \n  counter = 0;\n  for (data_ptr = DAT_1fff0db0; data_ptr != (undefined4 *)0x0; data_ptr = (undefined4 *)*data_ptr) {\n    read_device_data_00002ecc(counter,data_ptr);\n    process_data_00004db8(&DAT_00007380);\n    counter = counter + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "process_device_data_00002f30",
                "local_10": "counter",
                "local_c": "data_ptr"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_list_00002f74",
            "code": "\nvoid printDeviceList_00002f74(void)\n\n{\n  undefined4 uVar1;\n  int deviceCount;\n  undefined4 *deviceList;\n  \n  deviceList = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    process_data_00004db8(\"No devices found\");\n  }\n  else {\n    process_data_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    uVar1 = get_device_name_000039e8(*(undefined *)(deviceList[3] + 8));\n    process_data_00004c84(\"#%i\\t%s\\t%s\\n\",deviceCount,uVar1,deviceList[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_list_00002f74",
                "local_18": "deviceCount",
                "local_14": "deviceList"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000039e8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "process_device_data_00002fe0",
            "code": "\nvoid process_device_data_00002fe0(int input_count,undefined4 *input_arguments)\n\n{\n  int result;\n  undefined4 parsed_value;\n  \n  if (input_count < 3) {\n    process_data_00004c84(\"usage: %s %s <device id>|all\\n\",*input_arguments,input_arguments[1]);\n  }\n  else {\n    result = compare_and_calculate_difference_00004e52(input_arguments[2],&DAT_000073d4);\n    if (result == 0) {\n      process_device_data_00002fe0_00002f30();\n    }\n    else {\n      parsed_value = parse_and_print_integer_00004042(input_arguments[2]);\n      result = find_element_00003d24(parsed_value);\n      if (result == 0) {\n        process_data_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        read_device_data_00002ecc(parsed_value,result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "process_device_data_00002fe0",
                "param_1": "input_count",
                "param_2": "input_arguments",
                "iVar1": "result",
                "uVar2": "parsed_value"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004e52",
                "FUN_00003d24",
                "FUN_00002ecc",
                "FUN_00002f30",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int numParams,undefined4 *params)\n\n{\n  undefined2 parsedValue;\n  undefined2 values [4];\n  uint numValues;\n  int elementIndex;\n  undefined4 deviceId;\n  int currentIndex;\n  \n  if (numParams < 4) {\n    process_data_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*params,params[1]);\n  }\n  else {\n    deviceId = parse_and_print_integer_00004042(params[2]);\n    elementIndex = find_element_00003d24(deviceId);\n    if (elementIndex == 0) {\n      process_data_00004db8(\"error: undefined device given\");\n    }\n    else {\n      fill_memory_00004622(values,0,8);\n      if (5 < numParams) {\n        numParams = 6;\n      }\n      numValues = numParams - 3;\n      for (currentIndex = 0; currentIndex < (int)numValues; currentIndex = currentIndex + 1) {\n        parsedValue = parse_and_print_integer_00004042(params[currentIndex + 3]);\n        values[currentIndex] = parsedValue;\n      }\n      process_data_00004c84(\"Writing to device #%i - %s\\n\",deviceId,*(undefined4 *)(elementIndex + 8));\n      display_data_00003694(values,numValues & 0xff);\n      numValues = execute_function_00003d94(elementIndex,values);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          process_data_00004c84(\"error: device #%i is not writable\\n\",deviceId);\n        }\n        else {\n          process_data_00004c84(\"error: failure to write to device #%i\\n\",deviceId);\n        }\n      }\n      else {\n        process_data_00004c84(\"data successfully written to device #%i\\n\",deviceId);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "numParams",
                "param_2": "params",
                "uVar1": "parsedValue",
                "auStack_20": "values",
                "local_18": "numValues",
                "local_14": "elementIndex",
                "local_10": "deviceId",
                "local_c": "currentIndex"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00003d94",
                "FUN_00003d24",
                "FUN_00004622",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "handle_device_command_0000316c",
            "code": "\nundefined4 handle_device_command_0000316c(int device_count,undefined4 *command_list)\n\n{\n  int comparison_result;\n  \n  if (device_count < 2) {\n    print_device_list_00002f74();\n  }\n  else {\n    comparison_result = compare_and_calculate_difference_00004e52(command_list[1],&DAT_000074ec);\n    if (comparison_result == 0) {\n      process_device_data_00002fe0(device_count,command_list);\n    }\n    else {\n      comparison_result = compare_and_calculate_difference_00004e52(command_list[1],\"write\");\n      if (comparison_result == 0) {\n        write_to_device_0000305c(device_count,command_list);\n      }\n      else {\n        process_data_00004c84(\"usage: %s read|write\\n\",*command_list);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "handle_device_command_0000316c",
                "param_1": "device_count",
                "param_2": "command_list",
                "iVar1": "comparison_result"
            },
            "calling": [],
            "called": [
                "FUN_00002f74",
                "FUN_00002fe0",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_0000305c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_000031e0",
            "code": "\nvoid ringAlarm_000031e0(void)\n\n{\n  process_data_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000031e0(void)\n\n{\n  FUNC_00004db8(\"The alarm rang\");\n  return;\n}\n\n"
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "day_of_week_000031fc",
            "code": "\nint dayOfWeek_000031fc(int year,int month,int day)\n\n{\n  byte offset;\n  int adjustedYear;\n  \n  adjustedYear = month;\n  if (month < 3) {\n    adjustedYear = 1;\n  }\n  offset = (byte)adjustedYear;\n  if (2 < month) {\n    offset = 0;\n  }\n  year = year - (uint)offset;\n  adjustedYear = year;\n  if (year < 0) {\n    adjustedYear = year + 3;\n  }\n  return ((((adjustedYear >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)Elf32_Rel_ARRAY_1fff0200 + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "day_of_week_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "offset",
                "iVar2": "adjustedYear"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "parse_and_set_date_time_0000328c",
            "code": "\nundefined4 parseAndSetDateTime_0000328c(undefined4 *dateTimeString,int *dateTimeValues)\n\n{\n  int iVar1;\n  int currentIndex;\n  short parsedValue;\n  \n  parsedValue = parse_integer_00004f84(*dateTimeString,&currentIndex,10);\n  dateTimeValues[5] = parsedValue + -0x76c;\n  parsedValue = parse_integer_00004f84(currentIndex + 1,&currentIndex,10);\n  dateTimeValues[4] = parsedValue + -1;\n  parsedValue = parse_integer_00004f84(currentIndex + 1,&currentIndex,10);\n  dateTimeValues[3] = (int)parsedValue;\n  parsedValue = parse_integer_00004f84(dateTimeString[1],&currentIndex,10);\n  dateTimeValues[2] = (int)parsedValue;\n  parsedValue = parse_integer_00004f84(currentIndex + 1,&currentIndex,10);\n  dateTimeValues[1] = (int)parsedValue;\n  parsedValue = parse_integer_00004f84(currentIndex + 1,&currentIndex,10);\n  *dateTimeValues = (int)parsedValue;\n  iVar1 = day_of_week_000031fc(dateTimeValues[5] + 0x76c,dateTimeValues[4] + 1,dateTimeValues[3]);\n  dateTimeValues[6] = iVar1;\n  dateTimeValues[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "parse_and_set_date_time_0000328c",
                "param_1": "dateTimeString",
                "param_2": "dateTimeValues",
                "local_10": "currentIndex",
                "local_a": "parsedValue"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_000031fc",
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTimeArray)\n\n{\n  process_data_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",dateTimeArray[5] + 0x76c,dateTimeArray[4] + 1,dateTimeArray[3],\n               dateTimeArray[2],dateTimeArray[1],*dateTimeArray);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTimeArray"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003378(undefined4 *param_1)\n\n{\n  FUNC_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",param_1[5] + 0x76c,param_1[4] + 1,param_1[3],\n               param_1[2],param_1[1],*param_1);\n  return 0;\n}\n\n"
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "check_and_print_date_time_000033c0",
            "code": "\nbool checkAndPrintDateTime_000033c0(void)\n\n{\n  int errorFlag;\n  undefined dateTimeComponents [36];\n  \n  errorFlag = calculate_date_components_00002690(dateTimeComponents);\n  if (errorFlag != 0) {\n    process_data_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    print_date_time_00003378(dateTimeComponents);\n  }\n  return errorFlag != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "check_and_print_date_time_000033c0",
                "iVar1": "errorFlag",
                "auStack_2c": "dateTimeComponents"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002690",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_date_time_and_initialize_alarm_000033f4",
            "code": "\nundefined4 setDateTimeAndInitializeAlarm_000033f4(undefined4 input)\n\n{\n  int parseResult;\n  undefined4 returnCode;\n  undefined dateTimeBuffer [36];\n  \n  parseResult = parse_and_set_date_time_0000328c(input,dateTimeBuffer);\n  if (parseResult == 0) {\n    parseResult = initialize_calendar_00002654(dateTimeBuffer,0x31e1,0);\n    if (parseResult == -1) {\n      process_data_00004db8(\"rtc: error setting alarm\");\n      returnCode = 1;\n    }\n    else {\n      returnCode = 0;\n    }\n  }\n  else {\n    returnCode = 1;\n  }\n  return returnCode;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_date_time_and_initialize_alarm_000033f4",
                "param_1": "input",
                "iVar1": "parseResult",
                "auStack_2c": "dateTimeBuffer",
                "uVar2": "returnCode"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002654",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000033f4(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = parse_and_set_date_time_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = initialize_calendar_00002654(auStack_2c,0x31e1,0);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting alarm\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "print_date_time_or_handle_error_00003444",
            "code": "\nbool printDateTimeOrHandleError_00003444(void)\n\n{\n  int result;\n  undefined dateTimeBuffer [36];\n  \n  result = process_data_00002624(dateTimeBuffer);\n  if (result != 0) {\n    process_data_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    print_date_time_00003378(dateTimeBuffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "print_date_time_or_handle_error_00003444",
                "auStack_2c": "dateTimeBuffer",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002624",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "initialize_date_time_00003478",
            "code": "\nundefined4 initializeDateTime_00003478(undefined4 dateTimeValue)\n\n{\n  int parseReturnValue;\n  undefined4 returnValue;\n  undefined stackBuffer [36];\n  \n  parseReturnValue = parse_and_set_date_time_0000328c(dateTimeValue,stackBuffer);\n  if (parseReturnValue == 0) {\n    parseReturnValue = initialize_calendar_data_00002600(stackBuffer);\n    if (parseReturnValue == -1) {\n      process_data_00004db8(\"rtc: error setting time\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003478": "initialize_date_time_00003478",
                "param_1": "dateTimeValue",
                "iVar1": "parseReturnValue",
                "uVar2": "returnValue",
                "auStack_2c": "stackBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002600",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003478(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = parse_and_set_date_time_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = initialize_calendar_data_00002600(auStack_2c);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting time\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "display_usage_000034c0",
            "code": "\nundefined4 displayUsage_000034c0(void)\n\n{\n  process_data_00004db8(\"usage: rtc <command> [arguments]\");\n  process_data_00004db8(\"commands:\");\n  process_data_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  process_data_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  process_data_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  process_data_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  process_data_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  process_data_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  process_data_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "display_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000034c0(void)\n\n{\n  FUNC_00004db8(\"usage: rtc <command> [arguments]\");\n  FUNC_00004db8(\"commands:\");\n  FUNC_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUNC_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUNC_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUNC_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUNC_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUNC_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUNC_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n"
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_command_00003524",
            "code": "\nundefined4 handle_command_00003524(int num_args,int arg_list)\n\n{\n  int result;\n  undefined4 status;\n  \n  if (num_args < 2) {\n    display_usage_000034c0();\n    status = 1;\n  }\n  else {\n    result = compare_and_update_00004e66(*(undefined4 *)(arg_list + 4),\"poweron\",7);\n    if (result == 0) {\n      initialize_peripheral_000026d8();\n    }\n    else {\n      result = compare_and_update_00004e66(*(undefined4 *)(arg_list + 4),\"poweroff\",8);\n      if (result == 0) {\n        disable_interrupts_000026e4();\n      }\n      else {\n        result = compare_and_update_00004e66(*(undefined4 *)(arg_list + 4),\"clearalarm\",8);\n        if (result == 0) {\n          initialize_data_000026c0();\n        }\n        else {\n          result = compare_and_update_00004e66(*(undefined4 *)(arg_list + 4),\"getalarm\",8);\n          if (result == 0) {\n            check_and_print_date_time_000033c0();\n          }\n          else {\n            result = compare_and_update_00004e66(*(undefined4 *)(arg_list + 4),\"setalarm\",8);\n            if ((result == 0) && (num_args == 4)) {\n              set_date_time_and_initialize_alarm_000033f4(arg_list + 8);\n            }\n            else {\n              result = compare_and_update_00004e66(*(undefined4 *)(arg_list + 4),\"gettime\",7);\n              if (result == 0) {\n                print_date_time_or_handle_error_00003444();\n              }\n              else {\n                result = compare_and_update_00004e66(*(undefined4 *)(arg_list + 4),\"settime\",7);\n                if ((result != 0) || (num_args != 4)) {\n                  process_data_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(arg_list + 4));\n                  display_usage_000034c0();\n                  return 1;\n                }\n                initialize_date_time_00003478(arg_list + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    status = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_command_00003524",
                "param_1": "num_args",
                "param_2": "arg_list",
                "iVar1": "result",
                "uVar2": "status"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003478",
                "FUN_00003444",
                "FUN_00004e66",
                "FUN_00004c84",
                "FUN_000026d8",
                "FUN_000026e4",
                "FUN_000033c0",
                "FUN_000026c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "infinite_loop_00003658",
            "code": "\nvoid infiniteLoop_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "infinite_loop_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "run_infinite_loop_00003688",
            "code": "\nvoid run_infinite_loop_00003688(void)\n\n{\n  infinite_loop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "run_infinite_loop_00003688",
                "infinite_loop_00003658": "infinite_loop"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_00003694",
            "code": "\nvoid displayData_00003694(int dataAddress,byte dataSize)\n\n{\n  undefined4 memoryAddr;\n  char flag;\n  uint bitMask;\n  bool isBitSet;\n  undefined formattedData [8];\n  int formattedDataLength;\n  char mappedValue;\n  byte index;\n  \n  if ((dataAddress == 0) || (3 < dataSize)) {\n    process_data_00004db8(\"Unable to display data object\");\n  }\n  else {\n    process_data_00004c84(\"Data:\");\n    for (index = 0; index < dataSize; index = index + 1) {\n      if (*(byte *)(dataAddress + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataAddress + 6) & 0x8018f;\n        isBitSet = bitMask != 0;\n        if (isBitSet) {\n          bitMask = 1;\n        }\n        flag = (char)bitMask;\n        if (!isBitSet) {\n          flag = '\\0';\n        }\n        if (flag == '\\0') goto LAB_000036ee;\n        mappedValue = '\\0';\n      }\n      else {\nLAB_000036ee:\n        mappedValue = map_param_to_value_00003918((int)*(char *)(dataAddress + 7));\n      }\n      process_data_00004c84(&DAT_000077bc);\n      if (dataSize < 2) {\n        process_data_00004c84(\"     \");\n      }\n      else {\n        process_data_00004c84(\"[%u] \",index);\n      }\n      if (mappedValue == '\\0') {\n        if (*(char *)(dataAddress + 7) == '\\0') {\n          process_data_00004c84(&DAT_000077d8,(int)*(short *)(dataAddress + (uint)index * 2));\n        }\n        else if ((*(char *)(dataAddress + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataAddress + 7),4)) &&\n                (*(char *)(dataAddress + 7) < '\\0')) {\n          formattedDataLength = format_and_return_number_00003e9e(formattedData,(int)*(short *)(dataAddress + (uint)index * 2),\n                                  (int)*(char *)(dataAddress + 7));\n          formattedData[formattedDataLength] = 0;\n          process_data_00004c84(&DAT_000077dc,formattedData);\n        }\n        else {\n          process_data_00004c84(\"%iE%i\",(int)*(short *)(dataAddress + (uint)index * 2),\n                       (int)*(char *)(dataAddress + 7));\n        }\n      }\n      else {\n        process_data_00004c84(\"%6d %c\",(int)*(short *)(dataAddress + (uint)index * 2),mappedValue);\n      }\n      memoryAddr = get_memory_address_00003810(*(undefined *)(dataAddress + 6));\n      process_data_00004c84(&DAT_000077e8,memoryAddr);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_00003694",
                "param_1": "dataAddress",
                "param_2": "dataSize",
                "uVar1": "memoryAddr",
                "cVar2": "flag",
                "uVar3": "bitMask",
                "bVar4": "isBitSet",
                "auStack_18": "formattedData",
                "local_10": "formattedDataLength",
                "local_a": "mappedValue",
                "local_9": "index"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003e9e",
                "FUN_00003918",
                "FUN_00003810",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * getMemoryAddress_00003810(undefined inputValue)\n\n{\n  undefined *memoryAddress;\n  \n  switch(inputValue) {\n  case 2:\n    memoryAddress = &DAT_000077ec;\n    break;\n  case 3:\n    memoryAddress = &DAT_000077f0;\n    break;\n  case 4:\n    memoryAddress = &DAT_000077f4;\n    break;\n  case 5:\n    memoryAddress = &DAT_000077f8;\n    break;\n  case 6:\n    memoryAddress = &DAT_000077fc;\n    break;\n  case 7:\n    memoryAddress = (undefined *)0x7800;\n    break;\n  case 8:\n    memoryAddress = &DAT_00007804;\n    break;\n  case 9:\n    memoryAddress = &DAT_00007808;\n    break;\n  case 10:\n    memoryAddress = &DAT_0000780c;\n    break;\n  case 0xb:\n    memoryAddress = &DAT_00007810;\n    break;\n  case 0xc:\n    memoryAddress = &DAT_00007814;\n    break;\n  case 0xd:\n    memoryAddress = &DAT_00007818;\n    break;\n  case 0xe:\n    memoryAddress = &DAT_0000781c;\n    break;\n  case 0xf:\n    memoryAddress = &DAT_00007820;\n    break;\n  case 0x10:\n    memoryAddress = &DAT_00007824;\n    break;\n  case 0x11:\n    memoryAddress = &DAT_0000782c;\n    break;\n  default:\n    memoryAddress = &DAT_00007834;\n    break;\n  case 0x13:\n    memoryAddress = &DAT_00007830;\n    break;\n  case 0x15:\n    memoryAddress = &DAT_00007828;\n  }\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "inputValue",
                "puVar1": "memoryAddress"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "map_param_to_value_00003918",
            "code": "\nundefined4 mapParamToValue_00003918(undefined param)\n\n{\n  undefined4 mappedValue;\n  \n  switch(param) {\n  case 2:\n    mappedValue = 0x68;\n    break;\n  case 3:\n    mappedValue = 0x6b;\n    break;\n  case 6:\n    mappedValue = 0x4d;\n    break;\n  case 9:\n    mappedValue = 0x47;\n    break;\n  case 0xc:\n    mappedValue = 0x54;\n    break;\n  case 0xf:\n    mappedValue = 0x50;\n    break;\n  case 0xf1:\n    mappedValue = 0x66;\n    break;\n  default:\n    mappedValue = 0;\n    break;\n  case 0xf4:\n    mappedValue = 0x70;\n    break;\n  case 0xf7:\n    mappedValue = 0x6e;\n    break;\n  case 0xfa:\n    mappedValue = 0x75;\n    break;\n  case 0xfd:\n    mappedValue = 0x6d;\n  }\n  return mappedValue;\n}\n\n",
            "renaming": {
                "FUN_00003918": "map_param_to_value_00003918",
                "param_1": "param",
                "uVar1": "mappedValue"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_device_name_000039e8",
            "code": "\nchar * getDeviceName_000039e8(char deviceType)\n\n{\n  char *deviceName;\n  \n  switch(deviceType) {\n  case '\\0':\n    deviceName = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    deviceName = \"ACT_ANY\";\n    break;\n  case 'B':\n    deviceName = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    deviceName = \"ACT_SERVO\";\n    break;\n  case 'D':\n    deviceName = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    deviceName = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    deviceName = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    deviceName = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    deviceName = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    deviceName = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    deviceName = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    deviceName = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    deviceName = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    deviceName = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    deviceName = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    deviceName = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    deviceName = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    deviceName = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    deviceName = \"SENSE_UV\";\n    break;\n  case -0x74:\n    deviceName = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    deviceName = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    deviceName = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    deviceName = \"SENSE_CO2\";\n    break;\n  default:\n    if (deviceType == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    deviceName = \"CLASS_UNKNOWN\";\n  }\n  return deviceName;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_device_name_000039e8",
                "param_1": "deviceType",
                "pcVar1": "deviceName"
            },
            "calling": [
                "FUN_00002f74",
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_element_00003d24",
            "code": "\nundefined4 * findElement_00003d24(int numElements)\n\n{\n  int count;\n  undefined4 *currentElement;\n  \n  count = 0;\n  for (currentElement = DAT_1fff0db0; (count < numElements && (currentElement != (undefined4 *)0x0));\n      currentElement = (undefined4 *)*currentElement) {\n    count = count + 1;\n  }\n  return currentElement;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_element_00003d24",
                "param_1": "numElements",
                "local_10": "count",
                "local_c": "currentElement"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int functionPointer,undefined4 inputParam)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(functionPointer + 0xc))(*(undefined4 *)(functionPointer + 4),inputParam);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "functionPointer",
                "param_2": "inputParam",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 execute_function_00003d94(int input_value,undefined4 additional_param)\n\n{\n  undefined4 result;\n  \n  if (input_value == 0) {\n    result = 0xffffffed;\n  }\n  else {\n    result = (**(code **)(*(int *)(input_value + 0xc) + 4))(*(undefined4 *)(input_value + 4),additional_param);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "input_value",
                "param_2": "additional_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint countDigits_00003dc4(int inputPtr,uint inputValue)\n\n{\n  uint remainder;\n  char *outputPtr;\n  uint counter;\n  int digitCount;\n  \n  digitCount = 1;\n  if (inputValue < 1000000000) {\n    for (counter = 10; counter <= inputValue; counter = counter * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (inputPtr != 0) {\n    outputPtr = (char *)(digitCount + inputPtr);\n    remainder = inputValue;\n    do {\n      outputPtr = outputPtr + -1;\n      *outputPtr = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "inputPtr",
                "param_2": "inputValue",
                "local_20": "remainder",
                "local_14": "outputPtr",
                "local_10": "counter",
                "local_c": "digitCount"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "count_and_sign_digits_00003e58",
            "code": "\nint count_and_sign_digits_00003e58(undefined *str_ptr,int num)\n\n{\n  int count;\n  int abs_num;\n  undefined *modified_str_ptr;\n  \n  abs_num = num;\n  modified_str_ptr = str_ptr;\n  if (-(num >> 0x1f) != 0) {\n    if (str_ptr != (undefined *)0x0) {\n      modified_str_ptr = str_ptr + 1;\n      *str_ptr = 0x2d;\n    }\n    abs_num = -num;\n  }\n  count = count_digits_00003dc4(modified_str_ptr,abs_num);\n  return -(num >> 0x1f) + count;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "count_and_sign_digits_00003e58",
                "param_1": "str_ptr",
                "param_2": "num",
                "iVar1": "count",
                "local_18": "abs_num",
                "local_14": "modified_str_ptr"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "format_and_return_number_00003e9e",
            "code": "\nundefined4 formatAndReturnNumber_00003e9e(undefined4 inputValue,short inputNumber,undefined4 inputFormat)\n\n{\n  undefined4 formattedNumber;\n  \n  formattedNumber = format_number_00003ec4(inputValue,(int)inputNumber,inputFormat);\n  return formattedNumber;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "format_and_return_number_00003e9e",
                "param_1": "inputValue",
                "param_2": "inputNumber",
                "param_3": "inputFormat",
                "uVar1": "formattedNumber"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "format_number_00003ec4",
            "code": "\nint formatNumber_00003ec4(undefined *outputBuffer,uint inputNumber,int decimalPlaces)\n\n{\n  int digitCount;\n  undefined4 digitCountTemp;\n  uint dividedNumber;\n  int remainder;\n  int totalDigits;\n  \n  if (decimalPlaces + 7 < 0 != SCARRY4(decimalPlaces,7)) {\n    execute_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  totalDigits = 0;\n  if (decimalPlaces == 0) {\n    totalDigits = count_and_sign_digits_00003e58(outputBuffer,inputNumber);\n  }\n  else if (decimalPlaces < 1) {\n    dividedNumber = inputNumber / *(uint *)(&DAT_00007978 + decimalPlaces * -4);\n    remainder = inputNumber - *(uint *)(&DAT_00007978 + decimalPlaces * -4) * dividedNumber;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((dividedNumber == 0) && ((int)inputNumber < 0)) {\n      if (outputBuffer != (undefined *)0x0) {\n        *outputBuffer = 0x2d;\n      }\n      totalDigits = 1;\n    }\n    if (outputBuffer == (undefined *)0x0) {\n      digitCount = count_and_sign_digits_00003e58(0,dividedNumber);\n      totalDigits = digitCount + 1 + totalDigits;\n    }\n    else {\n      digitCount = count_and_sign_digits_00003e58(outputBuffer + totalDigits,dividedNumber);\n      digitCount = totalDigits + digitCount;\n      totalDigits = digitCount + 1;\n      outputBuffer[digitCount] = 0x2e;\n      digitCountTemp = count_and_sign_digits_00003e58(outputBuffer + totalDigits,remainder);\n      copy_and_fill_memory_00003ff4(outputBuffer + totalDigits,digitCountTemp,-decimalPlaces,0x30);\n    }\n    totalDigits = -decimalPlaces + totalDigits;\n  }\n  else {\n    totalDigits = count_and_sign_digits_00003e58(outputBuffer,inputNumber);\n    if (outputBuffer != (undefined *)0x0) {\n      fill_memory_00004622(outputBuffer + totalDigits,0x30,decimalPlaces);\n    }\n    totalDigits = decimalPlaces + totalDigits;\n  }\n  return totalDigits;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "format_number_00003ec4",
                "param_1": "outputBuffer",
                "param_2": "inputNumber",
                "param_3": "decimalPlaces",
                "iVar1": "digitCount",
                "uVar2": "digitCountTemp",
                "uVar3": "dividedNumber",
                "local_10": "remainder",
                "local_c": "totalDigits"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00003e58",
                "FUN_00004622",
                "FUN_00000f04",
                "FUN_00003ff4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "copy_and_fill_memory_00003ff4",
            "code": "\nuint copyAndFillMemory_00003ff4(int offset,uint startAddress,uint endAddress,undefined valueToFill)\n\n{\n  uint result;\n  \n  result = startAddress;\n  if ((startAddress < endAddress) && (result = endAddress, offset != 0)) {\n    copy_and_reverse_000045ee((endAddress - startAddress) + offset,offset,startAddress);\n    fill_memory_00004622(offset,valueToFill,endAddress - startAddress);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "copy_and_fill_memory_00003ff4",
                "param_1": "offset",
                "param_2": "startAddress",
                "param_3": "endAddress",
                "param_4": "valueToFill",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "parse_and_print_integer_00004042",
            "code": "\nvoid parseAndPrintInteger_00004042(undefined4 inputValue)\n\n{\n  parse_integer_00004f84(inputValue,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "parse_and_print_integer_00004042",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 processData_0000404c(uint *dataPointer,int *infoPointer)\n\n{\n  int returnValue;\n  int *tempPointer;\n  uint uVarA;\n  ushort uVarB;\n  int iVarA;\n  code *functionPointer;\n  int iVarB;\n  uint uVarC;\n  bool isZero;\n  \n  uVarB = *(ushort *)(infoPointer + 3);\n  uVarA = (uint)uVarB;\n  if ((int)(uVarA << 0x1c) < 0) {\n    returnValue = infoPointer[4];\n    if (returnValue != 0) {\n      iVarA = uVarA << 0x1e;\n      isZero = iVarA == 0;\n      iVarB = *infoPointer;\n      if (isZero) {\n        iVarA = infoPointer[5];\n      }\n      *infoPointer = returnValue;\n      if (!isZero) {\n        iVarA = 0;\n      }\n      infoPointer[2] = iVarA;\n      for (iVarB = iVarB - returnValue; 0 < iVarB; iVarB = iVarB - iVarA) {\n        iVarA = (*(code *)infoPointer[10])(dataPointer,infoPointer[8],returnValue,iVarB);\n        if (iVarA < 1) {\n          *(ushort *)(infoPointer + 3) = *(ushort *)(infoPointer + 3) | 0x40;\n          return 0xffffffff;\n        }\n        returnValue = returnValue + iVarA;\n      }\n    }\n  }\n  else {\n    if ((infoPointer[1] < 1) && (infoPointer[0x10] < 1)) {\n      return 0;\n    }\n    functionPointer = (code *)infoPointer[0xb];\n    if (functionPointer == (code *)0x0) {\n      return 0;\n    }\n    uVarC = *dataPointer;\n    *dataPointer = 0;\n    if ((uVarB & 0x1000) == 0) {\n      returnValue = (*functionPointer)(dataPointer,infoPointer[8],uVarA & 0x1000,1);\n      if ((returnValue == -1) && (uVarA = *dataPointer, uVarA != 0)) {\n        if ((uVarA == 0x1d) || (uVarA == 0x16)) {\n          *dataPointer = uVarC;\n          return 0;\n        }\n        uVarB = *(ushort *)(infoPointer + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      returnValue = infoPointer[0x15];\n    }\n    if (((int)((uint)*(ushort *)(infoPointer + 3) << 0x1d) < 0) &&\n       (returnValue = returnValue - infoPointer[1], infoPointer[0xd] != 0)) {\n      returnValue = returnValue - infoPointer[0x10];\n    }\n    returnValue = (*(code *)infoPointer[0xb])(dataPointer,infoPointer[8],returnValue,0);\n    uVarB = *(ushort *)(infoPointer + 3);\n    if ((returnValue == -1) &&\n       ((0x1d < *dataPointer || (-1 < (int)((0x20400001U >> (*dataPointer & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(infoPointer + 3) = uVarB | 0x40;\n      return 0xffffffff;\n    }\n    infoPointer[1] = 0;\n    *infoPointer = infoPointer[4];\n    if (((int)((uint)uVarB << 0x13) < 0) && ((returnValue != -1 || (*dataPointer == 0)))) {\n      infoPointer[0x15] = returnValue;\n    }\n    tempPointer = (int *)infoPointer[0xd];\n    *dataPointer = uVarC;\n    if (tempPointer != (int *)0x0) {\n      if (tempPointer != infoPointer + 0x11) {\n        initialize_data_00004b34(dataPointer);\n      }\n      infoPointer[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "dataPointer",
                "param_2": "infoPointer",
                "iVar1": "returnValue",
                "piVar2": "tempPointer",
                "uVar3": "uVarA",
                "uVar4": "uVarB",
                "iVar5": "iVarA",
                "pcVar6": "functionPointer",
                "iVar7": "iVarB",
                "uVar8": "uVarC",
                "bVar9": "isZero"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "process_data_00004158",
            "code": "\nundefined4 processData_00004158(int inputParam,undefined4 *dataPtr)\n\n{\n  undefined4 result;\n  \n  if (dataPtr[4] != 0) {\n    if ((inputParam != 0) && (*(int *)(inputParam + 0x18) == 0)) {\n      initialize_memory_000042a4();\n    }\n    if (dataPtr == &DAT_000079b8) {\n      dataPtr = *(undefined4 **)(inputParam + 4);\n    }\n    else if (dataPtr == (undefined4 *)&DAT_000079d8) {\n      dataPtr = *(undefined4 **)(inputParam + 8);\n    }\n    else if (dataPtr == (undefined4 *)&DAT_00007998) {\n      dataPtr = *(undefined4 **)(inputParam + 0xc);\n    }\n    if (*(short *)(dataPtr + 3) != 0) {\n      if ((-1 < (int)(dataPtr[0x19] << 0x1f)) && (-1 < (int)*(short *)(dataPtr + 3) << 0x16)) {\n        FUNC_000045e8(dataPtr[0x16]);\n      }\n      result = processData_000041583(inputParam,dataPtr);\n      if ((int)(dataPtr[0x19] << 0x1f) < 0) {\n        return result;\n      }\n      if ((int)((uint)*(ushort *)(dataPtr + 3) << 0x16) < 0) {\n        return result;\n      }\n      FUNC_000045ec(dataPtr[0x16]);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "inputParam",
                "param_2": "dataPtr",
                "uVar1": "result",
                "param_2[0x16]": "dataPtr[0x16]",
                "process_data_0000404c": "processData3"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00004158(int param_1,undefined4 *param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n      FUNC_000042a4();\n    }\n    if (param_2 == &DAT_000079b8) {\n      param_2 = *(undefined4 **)(param_1 + 4);\n    }\n    else if (param_2 == (undefined4 *)&DAT_000079d8) {\n      param_2 = *(undefined4 **)(param_1 + 8);\n    }\n    else if (param_2 == (undefined4 *)&DAT_00007998) {\n      param_2 = *(undefined4 **)(param_1 + 0xc);\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      if ((-1 < (int)(param_2[0x19] << 0x1f)) && (-1 < (int)*(short *)(param_2 + 3) << 0x16)) {\n        FUNC_000045e8(param_2[0x16]);\n      }\n      uVar1 = process_data_0000404c(param_1,param_2);\n      if ((int)(param_2[0x19] << 0x1f) < 0) {\n        return uVar1;\n      }\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x16) < 0) {\n        return uVar1;\n      }\n      FUNC_000045ec(param_2[0x16]);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_rel_entries_000041d0",
            "code": "\nuint process_rel_entries_000041d0(int data_offset,undefined4 rel_offset,undefined4 rel_size)\n\n{\n  uint result;\n  int num_entries;\n  dword *rel_entry;\n  int rel_offset;\n  uint combined_results;\n  int remaining_entries;\n  undefined4 *str_table;\n  \n  if (data_offset == 0) {\n    str_table = &DAT_000079f8;\n    rel_entry = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    combined_results = 0;\n    do {\n      remaining_entries = rel_entry[1];\n      rel_offset = rel_entry[2];\n      while (remaining_entries = remaining_entries + -1, -1 < remaining_entries) {\n        if ((1 < *(ushort *)(rel_offset + 0xc)) && (num_entries = *(short *)(rel_offset + 0xe) + 1, num_entries != 0)) {\n          result = process_data_00004158(0x1fff0284,rel_offset,rel_size,num_entries,str_table);\n          combined_results = combined_results | result;\n        }\n        rel_offset = rel_offset + 0x68;\n      }\n      rel_entry = (dword *)*rel_entry;\n    } while (rel_entry != (dword *)0x0);\n    return combined_results;\n  }\n  combined_results = process_data_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,data_offset);\n  return combined_results;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_rel_entries_000041d0",
                "param_1": "data_offset",
                "param_2": "rel_offset",
                "param_3": "rel_size",
                "uVar1": "result",
                "iVar2": "num_entries",
                "pdVar3": "rel_entry",
                "iVar4": "rel_offset",
                "uVar5": "combined_results",
                "iVar6": "remaining_entries",
                "puVar7": "str_table"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_memory_000041f4",
            "code": "\nvoid initializeMemory_000041f4(undefined4 *memory,undefined2 value1,undefined2 value2)\n\n{\n  *memory = 0;\n  memory[1] = 0;\n  memory[4] = 0;\n  memory[5] = 0;\n  memory[2] = 0;\n  *(undefined2 *)(memory + 3) = value1;\n  memory[0x19] = 0;\n  *(undefined2 *)((int)memory + 0xe) = value2;\n  memory[6] = 0;\n  fillMemory(memory + 0x17,0,8);\n  memory[9] = 0x4dc9;\n  memory[10] = 0x4def;\n  memory[0xb] = 0x4e27;\n  memory[8] = memory;\n  memory[0xc] = label1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_memory_000041f4",
                "param_1": "memory",
                "param_2": "value1",
                "param_3": "value2",
                "fill_memory_00004622": "fillMemory",
                "&LAB_00004e4a_1": "label1"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "initialize_memory_block_00004248",
            "code": "\nundefined4 * initializeMemoryBlock_00004248(undefined4 inputData,int blockSize)\n\n{\n  undefined4 *memoryBlock;\n  int offset;\n  \n  offset = (blockSize + -1) * 0x68;\n  memoryBlock = (undefined4 *)calculate_block_size_00004bd0(inputData,offset + 0x74);\n  if (memoryBlock != (undefined4 *)0x0) {\n    *memoryBlock = 0;\n    memoryBlock[1] = blockSize;\n    memoryBlock[2] = memoryBlock + 3;\n    fill_memory_00004622(memoryBlock + 3,0,offset + 0x68);\n  }\n  return memoryBlock;\n}\n\n",
            "renaming": {
                "FUN_00004248": "initialize_memory_block_00004248",
                "param_1": "inputData",
                "param_2": "blockSize",
                "puVar1": "memoryBlock",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_memory_0000428c",
            "code": "\nvoid initializeMemory_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_memory_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_memory_000042a4",
            "code": "\nvoid initialize_memory_000042a4(int memory_address)\n\n{\n  undefined4 initial_value;\n  \n  initialize_memory_000042a4_0000428c();\n  if (*(int *)(memory_address + 0x18) == 0) {\n    *(undefined4 *)(memory_address + 0x48) = 0;\n    *(undefined4 *)(memory_address + 0x4c) = 0;\n    *(undefined4 *)(memory_address + 0x50) = 0;\n    initial_value = 0x1fff0284;\n    *(undefined **)(memory_address + 0x28) = &DAT_0000423d;\n    if (memory_address == 0x1fff0284) {\n      initial_value = 1;\n    }\n    if (memory_address == 0x1fff0284) {\n      *(undefined4 *)(memory_address + 0x18) = initial_value;\n    }\n    initial_value = initialize_data_and_memory(memory_address);\n    *(undefined4 *)(memory_address + 4) = initial_value;\n    initial_value = initialize_data_and_memory(memory_address);\n    *(undefined4 *)(memory_address + 8) = initial_value;\n    initial_value = initialize_data_and_memory(memory_address);\n    *(undefined4 *)(memory_address + 0xc) = initial_value;\n    initialize_memory_000042a4_block(*(undefined4 *)(memory_address + 4),4,0);\n    initialize_memory_000042a4_block(*(undefined4 *)(memory_address + 8),9,1);\n    initialize_memory_000042a4_block(*(undefined4 *)(memory_address + 0xc),0x12,2);\n    *(undefined4 *)(memory_address + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_memory_000042a4",
                "param_1": "memory_address",
                "uVar1": "initial_value",
                "initialize_data_and_memory_00004314": "initialize_data_and_memory",
                "initialize_memory_000041f4": "initialize_memory_block"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005404",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_00004c84",
                "FUN_00004cb4",
                "FUN_00004314",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_0000428c",
                "FUN_00004314"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "initialize_data_and_memory_00004314",
            "code": "\nundefined4 * initializeDataAndMemory_00004314(undefined4 *inputData)\n\n{\n  dword memoryBlock;\n  int count;\n  undefined4 *currentData;\n  dword *currentRel;\n  \n  initialize_data_00004274();\n  if (relArray[19].r_info == 0) {\n    initialize_memory_000042a4(0x1fff0284);\n  }\n  currentRel = &relArray[0x19].r_info;\n  do {\n    count = currentRel[1];\n    currentData = (undefined4 *)currentRel[2];\n    while (count = count + -1, -1 < count) {\n      if (*(short *)(currentData + 3) == 0) {\n        currentData[3] = 0xffff0001;\n        currentData[0x19] = 0;\n        FUNC_000045e4(currentData + 0x16);\n        initialize_data_00004280();\n        currentData[1] = 0;\n        currentData[2] = 0;\n        currentData[4] = 0;\n        currentData[5] = 0;\n        *currentData = 0;\n        currentData[6] = 0;\n        fill_memory_00004622(currentData + 0x17,0,8);\n        currentData[0xd] = 0;\n        currentData[0xe] = 0;\n        currentData[0x12] = 0;\n        currentData[0x13] = 0;\n        return currentData;\n      }\n      currentData = currentData + 0x1a;\n    }\n    if (*currentRel == 0) {\n      memoryBlock = initialize_memory_block_00004248(inputData,4);\n      *currentRel = memoryBlock;\n      if (memoryBlock == 0) {\n        initialize_data_00004280();\n        *inputData = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    currentRel = (dword *)*currentRel;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "initialize_data_and_memory_00004314",
                "param_1": "inputData",
                "dVar1": "memoryBlock",
                "iVar2": "count",
                "puVar3": "currentData",
                "pdVar4": "currentRel",
                "Elf32_Rel_ARRAY_1fff0200": "relArray"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004622",
                "FUN_000045e4",
                "FUN_00004280",
                "FUN_00004248",
                "FUN_00004274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 * FUN_00004314(undefined4 *param_1)\n\n{\n  dword dVar1;\n  int iVar2;\n  undefined4 *puVar3;\n  dword *pdVar4;\n  \n  initialize_data_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUNC_000042a4(0x1fff0284);\n  }\n  pdVar4 = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    iVar2 = pdVar4[1];\n    puVar3 = (undefined4 *)pdVar4[2];\n    while (iVar2 = iVar2 + -1, -1 < iVar2) {\n      if (*(short *)(puVar3 + 3) == 0) {\n        puVar3[3] = 0xffff0001;\n        puVar3[0x19] = 0;\n        FUNC_000045e4(puVar3 + 0x16);\n        initialize_data_00004280();\n        puVar3[1] = 0;\n        puVar3[2] = 0;\n        puVar3[4] = 0;\n        puVar3[5] = 0;\n        *puVar3 = 0;\n        puVar3[6] = 0;\n        fill_memory_00004622(puVar3 + 0x17,0,8);\n        puVar3[0xd] = 0;\n        puVar3[0xe] = 0;\n        puVar3[0x12] = 0;\n        puVar3[0x13] = 0;\n        return puVar3;\n      }\n      puVar3 = puVar3 + 0x1a;\n    }\n    if (*pdVar4 == 0) {\n      dVar1 = initialize_memory_block_00004248(param_1,4);\n      *pdVar4 = dVar1;\n      if (dVar1 == 0) {\n        initialize_data_00004280();\n        *param_1 = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    pdVar4 = (dword *)*pdVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint processData_000043a0(int dataOffset,code *callbackFunc)\n\n{\n  uint callbackResult;\n  int *ptrToList;\n  int listEntry;\n  uint combinedResult;\n  int listSize;\n  \n  ptrToList = (int *)(dataOffset + 0x48);\n  combinedResult = 0;\n  do {\n    listSize = ptrToList[1];\n    listEntry = ptrToList[2];\n    while (listSize = listSize + -1, -1 < listSize) {\n      if ((1 < *(ushort *)(listEntry + 0xc)) && (*(short *)(listEntry + 0xe) != -1)) {\n        callbackResult = (*callbackFunc)(listEntry);\n        combinedResult = combinedResult | callbackResult;\n      }\n      listEntry = listEntry + 0x68;\n    }\n    ptrToList = (int *)*ptrToList;\n  } while (ptrToList != (int *)0x0);\n  return combinedResult;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "dataOffset",
                "param_2": "callbackFunc",
                "piVar2": "ptrToList",
                "iVar3": "listEntry",
                "uVar1": "callbackResult",
                "uVar4": "combinedResult",
                "iVar5": "listSize"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "process_data_00004418",
            "code": "\nuint processData_00004418(void)\n\n{\n  dword offset;\n  uint result;\n  byte **dataPointer;\n  byte *bytePointer;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  dataPointer = *(byte ***)(offset + 4);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    initialize_memory_000042a4();\n  }\n  if (dataPointer == (byte **)&DAT_000079b8) {\n    dataPointer = *(byte ***)(offset + 4);\n  }\n  else if (dataPointer == (byte **)&DAT_000079d8) {\n    dataPointer = *(byte ***)(offset + 8);\n  }\n  else if (dataPointer == (byte **)&DAT_00007998) {\n    dataPointer = *(byte ***)(offset + 0xc);\n  }\n  if ((-1 < (int)dataPointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x16))) {\n    FUNC_000045e8(dataPointer[0x16]);\n  }\n  bytePointer = dataPointer[1];\n  dataPointer[1] = bytePointer + -1;\n  if ((int)(bytePointer + -1) < 0) {\n    result = process_data_00005e10(offset,dataPointer);\n  }\n  else {\n    bytePointer = *dataPointer;\n    *dataPointer = bytePointer + 1;\n    result = (uint)*bytePointer;\n  }\n  if ((-1 < (int)dataPointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x16))) {\n    FUNC_000045ec(dataPointer[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "process_data_00004418",
                "dVar1": "offset",
                "uVar2": "result",
                "ppbVar3": "dataPointer",
                "pbVar4": "bytePointer"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_components_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateComponents_0000443c(undefined4 *inputData,uint *outputData)\n\n{\n  int result1;\n  uint var1;\n  uint var2;\n  uint var3;\n  uint var4;\n  undefined4 var5;\n  undefined4 var6;\n  uint var7;\n  bool isNegative;\n  \n  var5 = *inputData;\n  var6 = inputData[1];\n  result1 = extract_and_divide_00006974(var5,var6,0x15180,0);\n  var2 = 0x15180;\n  extract_and_divide_00006974(var5,var6,0x15180,0);\n  isNegative = (int)var2 < 0;\n  if (isNegative) {\n    var2 = var2 + 0x15180;\n  }\n  if (isNegative) {\n    var1 = result1 + 0xafa6b;\n  }\n  else {\n    var1 = result1 + 0xafa6c;\n  }\n  outputData[2] = var2 / 0xe10;\n  outputData[1] = (var2 % 0xe10) / 0x3c;\n  *outputData = (var2 % 0xe10) % 0x3c;\n  outputData[6] = (var1 + 3) % 7;\n  var2 = var1;\n  if ((int)var1 < 0) {\n    var2 = var1 - 0x23ab0;\n  }\n  var1 = (var2 / 0x23ab1) * -0x23ab1 + var1;\n  var3 = ((var1 / 0x8eac + var1) - var1 / 0x5b4) - var1 / 0x23ab0;\n  var4 = var3 / 0x16d;\n  var1 = (var4 / 100 - var3 / 0x5b4) + var1 + var4 * -0x16d;\n  var7 = var1 * 5 + 2;\n  var3 = var7 / 0x99;\n  if (var7 < 0x5fa) {\n    result1 = 2;\n  }\n  else {\n    result1 = -10;\n  }\n  var7 = var3 + result1;\n  result1 = (var2 / 0x23ab1) * 400 + var4;\n  if (var7 < 2) {\n    result1 = result1 + 1;\n  }\n  if (var1 < 0x132) {\n    if (((var4 & 3) == 0) && (var4 != (var4 / 100) * 100)) {\n      var2 = 1;\n    }\n    else {\n      var2 = (uint)(var4 % 400 == 0);\n    }\n    var2 = var1 + 0x3b + var2;\n  }\n  else {\n    var2 = var1 - 0x132;\n  }\n  outputData[7] = var2;\n  outputData[3] = (var1 + 1) - (var3 * 0x99 + 2) / 5;\n  outputData[4] = var7;\n  outputData[5] = result1 - 0x76c;\n  outputData[8] = 0;\n  return outputData;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_components_0000443c",
                "param_1": "inputData",
                "param_2": "outputData",
                "iVar1": "result1",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "uVar5": "var4",
                "uVar6": "var5",
                "uVar7": "var6",
                "uVar8": "var7",
                "bVar9": "isNegative"
            },
            "calling": [
                "FUN_00002624",
                "FUN_00002690"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_and_initialize_0000459c",
            "code": "\nvoid executeAndInitialize_0000459c(void)\n\n{\n  code **functionPointer;\n  int iterationIndex;\n  \n  functionPointer = (code **)&DAT_00007c58;\n  for (iterationIndex = 0; iterationIndex != 0; iterationIndex = iterationIndex + 1) {\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  }\n  initialize_data_structure_00000410();\n  functionPointer = (code **)&DAT_00007c58;\n  for (iterationIndex = 0; iterationIndex != 0; iterationIndex = iterationIndex + 1) {\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_and_initialize_0000459c",
                "ppcVar1": "functionPointer",
                "iVar2": "iterationIndex"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005790",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_00005fec",
                "FUN_000057f8",
                "FUN_00004274"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_00005ff8",
                "FUN_00004cb4",
                "FUN_00004280",
                "FUN_000057f8",
                "FUN_0000579c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_and_reverse_000045ee",
            "code": "\nvoid copyAndReverse_000045ee(undefined *source,undefined *destination,int length)\n\n{\n  undefined *sourcePtr;\n  undefined *destinationPtr;\n  \n  destinationPtr = destination + length;\n  if ((destination < source) && (source < destinationPtr)) {\n    sourcePtr = source + length;\n    while (sourcePtr != source) {\n      destinationPtr = destinationPtr + -1;\n      sourcePtr = sourcePtr + -1;\n      *sourcePtr = *destinationPtr;\n    }\n  }\n  else {\n    source = source + -1;\n    for (; destination != destinationPtr; destination = destination + 1) {\n      source = source + 1;\n      *source = *destination;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_000045ee",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "puVar1": "sourcePtr",
                "puVar2": "destinationPtr"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_00004622",
            "code": "\nvoid fillMemory_00004622(undefined *memory,undefined value,int length)\n\n{\n  undefined *endPointer;\n  \n  endPointer = memory + length;\n  for (; memory != endPointer; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_00004622",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "endPointer"
            },
            "calling": [
                "FUN_00003ec4",
                "FUN_000041f4",
                "FUN_00003ff4",
                "FUN_0000305c",
                "FUN_00004314",
                "FUN_00004248"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_calendar_date_00004634",
            "code": "\nvoid updateCalendarDate_00004634(uint *calendarDate,uint daysToAdd,undefined4 leapYear)\n\n{\n  int daysInMonth;\n  uint day;\n  uint year;\n  int daysInYear;\n  bool isNegative;\n  uint *quotient;\n  uint remainder;\n  undefined4 leapYearFlag;\n  \n  quotient = calendarDate;\n  remainder = daysToAdd;\n  leapYearFlag = leapYear;\n  if (0x3b < *calendarDate) {\n    divide_and_store_remainder_00005584(&quotient,*calendarDate,0x3c);\n    day = calendarDate[1] + (int)quotient;\n    calendarDate[1] = day;\n    if ((int)remainder < 0) {\n      day = day - 1;\n      *calendarDate = remainder + 0x3c;\n    }\n    else {\n      *calendarDate = remainder;\n    }\n    if ((int)remainder < 0) {\n      calendarDate[1] = day;\n    }\n  }\n  if (0x3b < calendarDate[1]) {\n    divide_and_store_remainder_00005584(&quotient,calendarDate[1],0x3c);\n    isNegative = (int)remainder < 0;\n    year = calendarDate[2] + (int)quotient;\n    calendarDate[2] = year;\n    day = remainder;\n    if (isNegative) {\n      day = remainder + 0x3c;\n      year = year - 1;\n    }\n    if (!isNegative) {\n      calendarDate[1] = day;\n    }\n    if (isNegative) {\n      calendarDate[1] = day;\n    }\n    if (isNegative) {\n      calendarDate[2] = year;\n    }\n  }\n  if (0x17 < calendarDate[2]) {\n    divide_and_store_remainder_00005584(&quotient,calendarDate[2],0x18);\n    isNegative = (int)remainder < 0;\n    year = calendarDate[3] + (int)quotient;\n    calendarDate[3] = year;\n    day = remainder;\n    if (isNegative) {\n      day = remainder + 0x18;\n      year = year - 1;\n    }\n    if (!isNegative) {\n      calendarDate[2] = day;\n    }\n    if (isNegative) {\n      calendarDate[2] = day;\n    }\n    if (isNegative) {\n      calendarDate[3] = year;\n    }\n  }\n  if (0xb < calendarDate[4]) {\n    divide_and_store_remainder_00005584(&quotient,calendarDate[4],0xc);\n    isNegative = (int)remainder < 0;\n    day = calendarDate[5] + (int)quotient;\n    calendarDate[5] = day;\n    if (isNegative) {\n      remainder = remainder + 0xc;\n      day = day - 1;\n    }\n    if (!isNegative) {\n      calendarDate[4] = remainder;\n    }\n    if (isNegative) {\n      calendarDate[4] = remainder;\n    }\n    if (isNegative) {\n      calendarDate[5] = day;\n    }\n  }\n  day = calendarDate[5];\n  if ((day & 3) == 0) {\n    if (day == (day / 100) * 100) {\n      if ((day + 0x76c) % 400 == 0) {\n        daysInYear = 0x1d;\n      }\n      else {\n        daysInYear = 0x1c;\n      }\n    }\n    else {\n      daysInYear = 0x1d;\n    }\n  }\n  else {\n    daysInYear = 0x1c;\n  }\n  if ((int)calendarDate[3] < 1) {\n    while ((int)calendarDate[3] < 1) {\n      day = calendarDate[4];\n      calendarDate[4] = day - 1;\n      if (day - 1 == 0xffffffff) {\n        year = calendarDate[5];\n        day = year - 1;\n        calendarDate[4] = 0xb;\n        calendarDate[5] = day;\n        if ((day & 3) == 0) {\n          if (day == (day / 100) * 100) {\n            if ((year + 0x76b) % 400 == 0) {\n              daysInYear = 0x1d;\n            }\n            else {\n              daysInYear = 0x1c;\n            }\n          }\n          else {\n            daysInYear = 0x1d;\n          }\n        }\n        else {\n          daysInYear = 0x1c;\n        }\n      }\n      daysInMonth = daysInYear;\n      if (calendarDate[4] != 1) {\n        daysInMonth = (&DAT_000079fc)[calendarDate[4]];\n      }\n      calendarDate[3] = daysInMonth + calendarDate[3];\n    }\n  }\n  else {\n    while( true ) {\n      day = calendarDate[4];\n      daysInMonth = daysInYear;\n      if (day != 1) {\n        daysInMonth = (&DAT_000079fc)[day];\n      }\n      if ((int)calendarDate[3] <= daysInMonth) break;\n      calendarDate[3] = calendarDate[3] - daysInMonth;\n      calendarDate[4] = day + 1;\n      if (day + 1 == 0xc) {\n        year = calendarDate[5];\n        day = year + 1;\n        calendarDate[4] = 0;\n        calendarDate[5] = day;\n        if ((day & 3) == 0) {\n          if (day % 100 == 0) {\n            if ((year + 0x76d) % 400 == 0) {\n              daysInYear = 0x1d;\n            }\n            else {\n              daysInYear = 0x1c;\n            }\n          }\n          else {\n            daysInYear = 0x1d;\n          }\n        }\n        else {\n          daysInYear = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_calendar_date_00004634",
                "param_1": "calendarDate",
                "param_2": "daysToAdd",
                "param_3": "leapYear",
                "iVar1": "daysInMonth",
                "uVar2": "day",
                "uVar3": "year",
                "iVar4": "daysInYear",
                "bVar5": "isNegative",
                "local_20": "quotient",
                "local_1c": "remainder",
                "uStack_18": "leapYearFlag"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_calendar_date_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculate_calendar_date_000047e4(int *input_data)\n\n{\n  longlong total_days;\n  longlong new_total_days;\n  int *memory_address;\n  uint temp1;\n  int temp2;\n  int temp3;\n  int temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  bool bVar16;\n  \n  memory_address = (int *)get_memory_address_000056b0();\n  update_calendar_date_00004634(input_data);\n  temp9 = input_data[5];\n  temp8 = input_data[3] + -1 + *(int *)(&DAT_00007a2c + input_data[4] * 4);\n  if (((1 < input_data[4]) && ((temp9 & 3) == 0)) &&\n     ((temp9 != (temp9 / 100) * 100 || (temp9 + 0x76c == ((temp9 + 0x76c) / 400) * 400)))) {\n    temp8 = temp8 + 1;\n  }\n  input_data[7] = temp8;\n  if (20000 < (int)&DAT_00002710 + temp9) {\n    temp4 = -1;\n    temp2 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)temp9 < 0x47) {\n    if (temp9 != 0x46) {\n      for (temp6 = 0x45; (int)temp9 < (int)temp6; temp6 = temp6 - 1) {\n        if ((temp6 & 3) == 0) {\n          if (temp6 == (temp6 / 100) * 100) {\n            if ((temp6 + 0x76c) % 400 == 0) {\n              temp4 = 0x16e;\n            }\n            else {\n              temp4 = 0x16d;\n            }\n          }\n          else {\n            temp4 = 0x16e;\n          }\n        }\n        else {\n          temp4 = 0x16d;\n        }\n        temp8 = temp8 - temp4;\n      }\n      if ((temp6 & 3) == 0) {\n        if (temp9 == (temp9 / 100) * 100) {\n          temp4 = 0x16d;\n          if ((temp9 + 0x76c) % 400 == 0) {\n            temp4 = 0x16e;\n          }\n        }\n        else {\n          temp4 = 0x16e;\n        }\n      }\n      else {\n        temp4 = 0x16d;\n      }\n      temp8 = temp8 - temp4;\n    }\n  }\n  else {\n    temp6 = 0x46;\n    do {\n      if ((temp6 & 3) == 0) {\n        if (temp6 % 100 == 0) {\n          if ((temp6 + 0x76c) % 400 == 0) {\n            temp4 = 0x16e;\n          }\n          else {\n            temp4 = 0x16d;\n          }\n        }\n        else {\n          temp4 = 0x16e;\n        }\n      }\n      else {\n        temp4 = 0x16d;\n      }\n      temp6 = temp6 + 1;\n      temp8 = temp8 + temp4;\n    } while (temp9 != temp6);\n  }\n  total_days = (longlong)temp8 * 0x15180 + (longlong)(input_data[2] * 0xe10 + input_data[1] * 0x3c + *input_data)\n  ;\n  temp12 = (uint)total_days;\n  temp4 = (int)((ulonglong)total_days >> 0x20);\n  get_memory_address_000050e8();\n  process_relocation_00005100();\n  temp6 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    temp9 = memory_address[10];\n    temp4 = (uint)total_days + temp9;\n    temp2 = (int)((ulonglong)total_days >> 0x20) +\n            ((int)temp9 >> 0x1f) + (uint)CARRY4((uint)total_days,temp9);\n  }\n  else {\n    temp11 = input_data[8];\n    temp10 = temp11;\n    if (0 < (int)temp11) {\n      temp10 = 1;\n    }\n    if ((memory_address[1] == input_data[5] + 0x76c) || (temp2 = calculate_weekday_00004f98(), temp2 != 0)) {\n      temp7 = memory_address[0x14];\n      temp1 = memory_address[0x12];\n      temp5 = memory_address[10];\n      temp6 = temp1 - temp5;\n      temp2 = (memory_address[0x13] - ((int)temp5 >> 0x1f)) - (uint)(temp1 < temp5);\n      if (((int)((temp4 - temp2) - (uint)(temp12 < temp6)) < 0 ==\n           (SBORROW4(temp4,temp2) != SBORROW4(temp4 - temp2,(uint)(temp12 < temp6)))) &&\n         (temp3 = (memory_address[0x13] - ((int)temp7 >> 0x1f)) - (uint)(temp1 < temp7),\n         bVar16 = temp12 < temp1 - temp7,\n         (int)((temp4 - temp3) - (uint)bVar16) < 0 !=\n         (SBORROW4(temp4,temp3) != SBORROW4(temp4 - temp3,(uint)bVar16)))) goto LAB_00004a88;\n      temp1 = memory_address[8] - temp7;\n      temp3 = (memory_address[9] - ((int)temp7 >> 0x1f)) - (uint)((uint)memory_address[8] < temp7);\n      if (*memory_address != 0) {\n        if ((int)((temp4 - temp3) - (uint)(temp12 < temp1)) < 0 ==\n            (SBORROW4(temp4,temp3) != SBORROW4(temp4 - temp3,(uint)(temp12 < temp1))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        temp6 = 0;\n        if ((int)temp11 < 0) goto LAB_00004934;\nLAB_00004a14:\n        temp12 = temp10 ^ temp6;\n        temp10 = temp6;\n        if (temp12 == 1) {\n          if (temp6 == 0) {\n            temp4 = temp7 - temp5;\n          }\n          else {\n            temp4 = temp5 - temp7;\n          }\n          temp2 = input_data[3];\n          *input_data = *input_data + temp4;\n          new_total_days = total_days + temp4;\n          update_calendar_date_00004634(input_data);\n          temp2 = input_data[3] - temp2;\n          total_days = total_days + temp4;\n          if (temp2 != 0) {\n            if (temp2 < 2) {\n              if (temp2 == -2 || temp2 + 2 < 0 != SCARRY4(temp2,2)) {\n                temp2 = 1;\n              }\n            }\n            else {\n              temp2 = -1;\n            }\n            temp4 = temp2 + input_data[7];\n            temp8 = temp8 + temp2;\n            if (temp4 < 0) {\n              temp6 = temp9 - 1;\n              if ((temp6 & 3) == 0) {\n                if (temp6 == (temp6 / 100) * 100) {\n                  temp4 = 0x16d;\n                  if ((temp9 + 0x76b) % 400 != 0) {\n                    temp4 = 0x16c;\n                  }\n                }\n                else {\n                  temp4 = 0x16d;\n                }\n              }\n              else {\n                temp4 = 0x16c;\n              }\n            }\n            else {\n              if ((temp9 & 3) == 0) {\n                if (temp9 == (temp9 / 100) * 100) {\n                  temp2 = 0x16d;\n                  if ((temp9 + 0x76c) % 400 == 0) {\n                    temp2 = 0x16e;\n                  }\n                }\n                else {\n                  temp2 = 0x16e;\n                }\n              }\n              else {\n                temp2 = 0x16d;\n              }\n              if (temp2 <= temp4) {\n                temp4 = temp4 - temp2;\n              }\n            }\n            input_data[7] = temp4;\n            total_days = new_total_days;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((temp4 - temp3) - (uint)(temp12 < temp1)) < 0 !=\n          (SBORROW4(temp4,temp3) != SBORROW4(temp4 - temp3,(uint)(temp12 < temp1)))) {\nLAB_0000491e:\n        if ((int)((temp4 - temp2) - (uint)(temp12 < temp6)) < 0 ==\n            (SBORROW4(temp4,temp2) != SBORROW4(temp4 - temp2,(uint)(temp12 < temp6))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)temp11) {\n        temp6 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      temp6 = temp10;\n      if (temp10 != 1) goto LAB_00004934;\n    }\n    temp9 = memory_address[0x14];\n    temp4 = (uint)total_days + temp9;\n    temp2 = (int)((ulonglong)total_days >> 0x20) +\n            ((int)temp9 >> 0x1f) + (uint)CARRY4((uint)total_days,temp9);\n    temp6 = 1;\n  }\n  get_memory_address_000050f4();\n  input_data[8] = temp6;\n  input_data[6] = (temp8 + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(temp2,temp4);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_calendar_date_000047e4",
                "param_1": "input_data",
                "lVar1": "total_days",
                "lVar2": "new_total_days",
                "piVar3": "memory_address",
                "uVar4": "temp1",
                "iVar5": "temp2",
                "iVar6": "temp3",
                "iVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "iVar11": "temp8",
                "uVar12": "temp9",
                "uVar13": "temp10",
                "uVar14": "temp11",
                "uVar15": "temp12"
            },
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "called": [
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_00004f98",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "initialize_data_00004b34",
            "code": "\nvoid initializeData_00004b34(undefined4 *output,int size,undefined4 paramValue1,undefined4 paramValue2)\n\n{\n  int *tempVar1;\n  int **tempVar2;\n  int **firstPtr;\n  int **currentPtr;\n  int **nextPtr;\n  int **newPtr;\n  bool condition;\n  \n  if (size == 0) {\n    return;\n  }\n  newPtr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    newPtr = (int **)((int)newPtr + *(int *)(size + -4));\n  }\n  initialize_data_00005790();\n  currentPtr = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newPtr[1] = (int *)0x0;\n    firstPtr = tempVar2;\n    DAT_1fff0db4 = newPtr;\n  }\n  else {\n    nextPtr = DAT_1fff0db4;\n    if (newPtr < DAT_1fff0db4) {\n      firstPtr = (int **)*newPtr;\n      currentPtr = (int **)((int)newPtr + (int)firstPtr);\n      condition = DAT_1fff0db4 == currentPtr;\n      if (condition) {\n        currentPtr = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newPtr[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newPtr;\n      if (condition) {\n        currentPtr = (int **)((int)currentPtr + (int)firstPtr);\n        *newPtr = (int *)currentPtr;\n      }\n    }\n    else {\n      do {\n        currentPtr = nextPtr;\n        nextPtr = (int **)currentPtr[1];\n        if (nextPtr == (int **)0x0) break;\n      } while (nextPtr <= newPtr);\n      firstPtr = (int **)*currentPtr;\n      if ((int **)((int)currentPtr + (int)firstPtr) == newPtr) {\n        firstPtr = (int **)((int)firstPtr + (int)*newPtr);\n        *currentPtr = (int *)firstPtr;\n        if (nextPtr == (int **)((int)currentPtr + (int)firstPtr)) {\n          tempVar1 = *nextPtr;\n          currentPtr[1] = nextPtr[1];\n          firstPtr = (int **)((int)firstPtr + (int)tempVar1);\n          *currentPtr = (int *)firstPtr;\n        }\n      }\n      else if (newPtr < (int **)((int)currentPtr + (int)firstPtr)) {\n        *output = 0xc;\n      }\n      else {\n        firstPtr = (int **)((int)newPtr + (int)*newPtr);\n        condition = nextPtr == firstPtr;\n        if (condition) {\n          firstPtr = (int **)*nextPtr;\n          nextPtr = (int **)nextPtr[1];\n        }\n        newPtr[1] = (int *)nextPtr;\n        if (condition) {\n          firstPtr = (int **)((int)firstPtr + (int)*newPtr);\n          *newPtr = (int *)firstPtr;\n        }\n        currentPtr[1] = (int *)newPtr;\n      }\n    }\n  }\n  initialize_data_0000579c(output,firstPtr,currentPtr,paramValue2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "initialize_data_00004b34",
                "param_1": "output",
                "param_2": "size",
                "param_3": "paramValue1",
                "param_4": "paramValue2",
                "piVar1": "tempVar1",
                "extraout_r1": "tempVar2",
                "ppiVar2": "firstPtr",
                "ppiVar3": "currentPtr",
                "ppiVar4": "nextPtr",
                "ppiVar5": "newPtr",
                "bVar6": "condition"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_00006192",
                "FUN_00005780",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00005790",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "calculate_block_size_00004bd0",
            "code": "\nuint calculateBlockSize_00004bd0(undefined4 *output,uint inputSize,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *prevBlock;\n  int offset;\n  uint diff;\n  uint *currentBlock;\n  uint blockSize;\n  \n  blockSize = (inputSize + 3 & 0xfffffffc) + 8;\n  if (blockSize < 0xc) {\n    blockSize = 0xc;\n  }\n  if (((int)blockSize < 0) || (blockSize < inputSize)) {\n    *output = 0xc;\n  }\n  else {\n    initialize_data_00005790();\n    prevBlock = DAT_1fff0db4;\n    for (currentBlock = DAT_1fff0db4; currentBlock != (uint *)0x0; currentBlock = (uint *)currentBlock[1]) {\n      diff = *currentBlock - blockSize;\n      if (-1 < (int)diff) {\n        if (0xb < diff) {\n          *currentBlock = diff;\n          currentBlock = (uint *)((int)currentBlock + diff);\n          goto LAB_00004c34;\n        }\n        if (prevBlock == currentBlock) {\n          DAT_1fff0db4 = (uint *)currentBlock[1];\n        }\n        if (prevBlock != currentBlock) {\n          prevBlock[1] = (uint)(uint *)currentBlock[1];\n        }\n        goto LAB_00004c42;\n      }\n      prevBlock = currentBlock;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = update_offset_and_check_interrupts_00000428(output,0,prevBlock,0,param_4);\n    }\n    prevBlock = (uint *)update_offset_and_check_interrupts_00000428(output,blockSize);\n    if ((prevBlock != (uint *)0xffffffff) &&\n       ((currentBlock = (uint *)((int)prevBlock + 3U & 0xfffffffc), prevBlock == currentBlock ||\n        (offset = update_offset_and_check_interrupts_00000428(output,(int)currentBlock - (int)prevBlock), offset != -1)))) {\nLAB_00004c34:\n      *currentBlock = blockSize;\nLAB_00004c42:\n      initialize_data_0000579c(output);\n      blockSize = (int)currentBlock + 0xbU & 0xfffffff8;\n      offset = blockSize - (int)(currentBlock + 1);\n      if (offset == 0) {\n        return blockSize;\n      }\n      *(uint *)((int)currentBlock + offset) = (int)(currentBlock + 1) - blockSize;\n      return blockSize;\n    }\n    *output = 0xc;\n    initialize_data_0000579c(output);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "calculate_block_size_00004bd0",
                "param_1": "output",
                "param_2": "inputSize",
                "puVar1": "prevBlock",
                "iVar2": "offset",
                "uVar3": "diff",
                "puVar4": "currentBlock",
                "uVar5": "blockSize"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc",
                "FUN_00005700",
                "FUN_00004248"
            ],
            "called": [
                "FUN_00005790",
                "FUN_00000428",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "process_data_00004c84",
            "code": "\nvoid process_data_00004c84(undefined4 input_param,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  dword offset;\n  undefined4 input_param_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  input_param_copy = input_param;\n  param_2_copy = param_2;\n  param_3_copy = param_3;\n  param_4_copy = param_4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  process_data_00004c84_000057f8(offset,*(undefined4 *)(offset + 8),input_param,&param_2_copy,input_param_copy,&param_2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "process_data_00004c84",
                "param_1": "input_param",
                "dVar1": "offset",
                "uVar2": "input_param_copy",
                "uStack_c": "param_2_copy",
                "uStack_8": "param_3_copy",
                "uStack_4": "param_4_copy"
            },
            "calling": [
                "FUN_00000ed8",
                "FUN_00003694",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_0000211c",
                "FUN_00002f74",
                "FUN_00003524",
                "FUN_00002ecc",
                "FUN_0000316c",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "process_input_00004cb4",
            "code": "\nuint process_input_00004cb4(uint input_value)\n\n{\n  dword offset;\n  undefined4 *data_ptr;\n  uint count;\n  undefined *byte_ptr;\n  undefined4 register_4;\n  undefined4 register_5;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  data_ptr = *(undefined4 **)(offset + 8);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    initialize_memory_000042a4();\n  }\n  if (data_ptr == &DAT_000079b8) {\n    data_ptr = *(undefined4 **)(offset + 4);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_000079d8) {\n    data_ptr = *(undefined4 **)(offset + 8);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_00007998) {\n    data_ptr = *(undefined4 **)(offset + 0xc);\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_ptr[0x16]);\n  }\n  count = data_ptr[2] - 1;\n  data_ptr[2] = count;\n  if (((int)count < 0) && (((int)count < (int)data_ptr[6] || (count = input_value & 0xff, count == 10))))\n  {\n    input_value = process_data_00005404(offset,input_value,data_ptr,count,register_4,register_5);\n  }\n  else {\n    byte_ptr = (undefined *)*data_ptr;\n    *data_ptr = byte_ptr + 1;\n    *byte_ptr = (char)input_value;\n    input_value = input_value & 0xff;\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_ptr[0x16]);\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "process_input_00004cb4",
                "param_1": "input_value",
                "dVar1": "offset",
                "puVar2": "data_ptr",
                "uVar3": "count",
                "puVar4": "byte_ptr",
                "unaff_r4": "register_4",
                "unaff_r5": "register_5"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_data_00004db8",
            "code": "\nundefined4 processData_00004db8(int input)\n\n{\n  char charValue;\n  dword relOffset;\n  int result;\n  char *strPtr;\n  char **ptrPtr;\n  undefined4 returnValue;\n  char *charPtr;\n  \n  relOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_000042a4();\n  }\n  ptrPtr = *(char ***)(relOffset + 8);\n  if (*(int *)(relOffset + 0x18) == 0) {\n    initialize_memory_000042a4(relOffset);\n  }\n  if (ptrPtr == (char **)&DAT_000079b8) {\n    ptrPtr = *(char ***)(relOffset + 4);\n  }\n  else if (ptrPtr == (char **)&DAT_000079d8) {\n    ptrPtr = *(char ***)(relOffset + 8);\n  }\n  else if (ptrPtr == (char **)&DAT_00007998) {\n    ptrPtr = *(char ***)(relOffset + 0xc);\n  }\n  if ((-1 < (int)ptrPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(ptrPtr + 3) << 0x16))) {\n    FUNC_000045e8(ptrPtr[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(ptrPtr + 3) << 0x1c) < 0) && (ptrPtr[4] != (char *)0x0)) ||\n     (result = process_data_000054a8(relOffset,ptrPtr), result == 0)) {\n    charPtr = (char *)(input + -1);\n    do {\n      while( true ) {\n        charPtr = charPtr + 1;\n        charValue = *charPtr;\n        strPtr = ptrPtr[2] + -1;\n        ptrPtr[2] = strPtr;\n        if (charValue == '\\0') {\n          if (-1 < (int)strPtr) {\n            charPtr = *ptrPtr;\n            returnValue = 10;\n            *ptrPtr = charPtr + 1;\n            *charPtr = '\\n';\n            goto LAB_00004d64;\n          }\n          result = process_data_00005404(relOffset,10,ptrPtr);\n          if (result != -1) {\n            returnValue = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)strPtr < 0) && (((int)strPtr < (int)ptrPtr[6] || (charValue == '\\n')))) break;\n        strPtr = *ptrPtr;\n        *ptrPtr = strPtr + 1;\n        *strPtr = charValue;\n      }\n      result = process_data_00005404(relOffset,charValue,ptrPtr);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnValue = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)ptrPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(ptrPtr + 3) << 0x16))) {\n    FUNC_000045ec(ptrPtr[0x16]);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_data_00004db8",
                "param_1": "input",
                "cVar1": "charValue",
                "dVar2": "relOffset",
                "iVar3": "result",
                "pcVar4": "strPtr",
                "ppcVar5": "ptrPtr",
                "uVar6": "returnValue",
                "pcVar7": "charPtr"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00003478",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_000033f4",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_00003444",
                "FUN_00002f30",
                "FUN_0000305c",
                "FUN_000033c0",
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_memory_00004dc8",
            "code": "\nvoid updateMemory_00004dc8(undefined4 address,int data)\n\n{\n  int copiedBytes;\n  uint newAddress;\n  bool isValid;\n  \n  copiedBytes = copy_and_increment_memory_00000490(address,(int)*(short *)(data + 0xe));\n  isValid = -1 < copiedBytes;\n  if (isValid) {\n    newAddress = *(int *)(data + 0x54) + copiedBytes;\n  }\n  else {\n    newAddress = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (isValid) {\n    *(uint *)(data + 0x54) = newAddress;\n  }\n  if (!isValid) {\n    *(short *)(data + 0xc) = (short)newAddress;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_memory_00004dc8",
                "param_1": "address",
                "param_2": "data",
                "iVar1": "copiedBytes",
                "uVar2": "newAddress",
                "bVar3": "isValid"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "update_value_and_copy_00004dee",
            "code": "\nundefined4 updateValueAndCopy_00004dee(undefined4 value,int data,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 returnValue;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    initialize_value_and_return_000004f2(value,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  returnValue = copy_and_return_param_00000e38(param3,param4);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "update_value_and_copy_00004dee",
                "param_1": "value",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_value_00004e26",
            "code": "\nvoid updateValue_00004e26(undefined4 param,int input)\n\n{\n  int initializedValue;\n  ushort updatedValue;\n  bool isInitialized;\n  \n  initializedValue = initialize_value_and_return_000004f2(param,(int)*(short *)(input + 0xe));\n  isInitialized = initializedValue == -1;\n  if (isInitialized) {\n    updatedValue = *(ushort *)(input + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(input + 0x54) = initializedValue;\n    updatedValue = *(ushort *)(input + 0xc) | 0x1000;\n  }\n  if (isInitialized) {\n    *(ushort *)(input + 0xc) = updatedValue;\n  }\n  if (!isInitialized) {\n    *(ushort *)(input + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_value_00004e26",
                "param_1": "param",
                "param_2": "input",
                "iVar1": "initializedValue",
                "uVar2": "updatedValue",
                "bVar3": "isInitialized"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_and_calculate_difference_00004e52",
            "code": "\nint compareAndCalculateDifference_00004e52(byte *inputArray1,byte *inputArray2)\n\n{\n  byte currentByte1;\n  uint currentByte2;\n  bool isEqual;\n  \n  do {\n    currentByte2 = (uint)*inputArray1;\n    currentByte1 = *inputArray2;\n    isEqual = currentByte2 == 1;\n    if (currentByte2 != 0) {\n      isEqual = currentByte2 == currentByte1;\n    }\n    inputArray1 = inputArray1 + 1;\n    inputArray2 = inputArray2 + 1;\n  } while (isEqual);\n  return currentByte2 - currentByte1;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_and_calculate_difference_00004e52",
                "param_1": "inputArray1",
                "param_2": "inputArray2",
                "bVar1": "currentByte1",
                "uVar2": "currentByte2",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00002fe0",
                "FUN_0000316c",
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "compare_and_update_00004e66",
            "code": "\nint compareAndUpdate_00004e66(byte *data,int index,int length)\n\n{\n  byte *currentByte;\n  int difference;\n  byte *nextByte;\n  uint dataValue;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    nextByte = (byte *)(index + -1);\n    currentByte = data;\n    do {\n      dataValue = (uint)*currentByte;\n      nextByte = nextByte + 1;\n      if ((dataValue != *nextByte) || (currentByte + 1 == data + length)) break;\n      currentByte = currentByte + 1;\n    } while (dataValue != 0);\n    difference = dataValue - *nextByte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "compare_and_update_00004e66",
                "param_1": "data",
                "param_2": "index",
                "param_3": "length",
                "pbVar1": "currentByte",
                "iVar2": "difference",
                "pbVar3": "nextByte",
                "uVar4": "dataValue"
            },
            "calling": [
                "FUN_00003524",
                "FUN_0000562c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_integer_00004f84",
            "code": "\nuint parseInteger_00004f84(byte *input,byte **endPtr,uint base)\n\n{\n  uint parsedValue;\n  uint currentChar;\n  uint isNegative;\n  uint digit;\n  int parseError;\n  uint maxValue;\n  uint divisionResult;\n  byte *currentByte;\n  byte *nextByte;\n  \n  nextByte = input;\n  do {\n    currentByte = nextByte;\n    nextByte = currentByte + 1;\n    currentChar = (uint)*currentByte;\n    isNegative = (byte)(&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextByte;\n    isNegative = 1;\n    nextByte = currentByte + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextByte;\n    nextByte = currentByte + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00004ed6;\n  if ((*nextByte & 0xdf) == 0x58) {\n    currentChar = (uint)nextByte[1];\n    base = 0x10;\n    nextByte = nextByte + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxValue = isNegative + 0x7fffffff;\n  parseError = 0;\n  divisionResult = maxValue / base;\n  parsedValue = 0;\n  do {\n    digit = currentChar - 0x30;\n    if (9 < digit) {\n      if (currentChar - 0x41 < 0x1a) {\n        digit = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digit = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (parseError != -1) {\n      if ((divisionResult < parsedValue) || ((divisionResult == parsedValue && ((int)(maxValue - base * divisionResult) < (int)digit)))) {\n        parseError = -1;\n      }\n      else {\n        parsedValue = parsedValue * base + digit;\n        parseError = 1;\n      }\n    }\n    currentChar = (uint)*nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n  if (parseError == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    parsedValue = maxValue;\n    if (endPtr == (byte **)0x0) {\n      return maxValue;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      parsedValue = -parsedValue;\n    }\n    if (endPtr == (byte **)0x0) {\n      return parsedValue;\n    }\n    if (parseError == 0) goto LAB_00004f64;\n  }\n  input = nextByte + -1;\nLAB_00004f64:\n  *endPtr = input;\n  return parsedValue;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_integer_00004f84",
                "param_1": "input",
                "param_2": "endPtr",
                "param_3": "base",
                "uVar1": "parsedValue",
                "uVar2": "currentChar",
                "uVar3": "isNegative",
                "uVar4": "digit",
                "iVar5": "parseError",
                "uVar6": "maxValue",
                "uVar7": "divisionResult",
                "pbVar8": "currentByte",
                "pbVar9": "nextByte"
            },
            "calling": [
                "FUN_00004042",
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_weekday_00004f98",
            "code": "\nundefined4 calculateWeekday_00004f98(uint year)\n\n{\n  uint *memoryAddress;\n  undefined4 result;\n  uint weekIndex;\n  int weekdayOffset;\n  uint *weekTable;\n  int yearOffset;\n  uint isLeapYear;\n  int monthOffset;\n  int daysOffset;\n  uint isDivisibleBy400;\n  \n  memoryAddress = (uint *)get_memory_address_000056b0();\n  if ((int)year < 0x7b2) {\n    result = 0;\n  }\n  else {\n    yearOffset = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    memoryAddress[1] = year;\n    isDivisibleBy400 = (uint)(year % 400 == 0);\n    weekTable = memoryAddress;\n    do {\n      weekIndex = weekTable[5];\n      if (*(char *)(weekTable + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)weekIndex < 0x3c) {\n            weekdayOffset = 0;\n          }\n          else {\n            weekdayOffset = 1;\n          }\n        }\n        else {\n          weekdayOffset = 0;\n        }\n        weekdayOffset = weekdayOffset + yearOffset + weekIndex + -1;\n      }\n      else if (*(char *)(weekTable + 2) == 'D') {\n        weekdayOffset = yearOffset + weekIndex;\n      }\n      else {\n        isLeapYear = isDivisibleBy400;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          isLeapYear = 1;\n        }\n        monthOffset = 0;\n        weekdayOffset = yearOffset;\n        while( true ) {\n          monthOffset = monthOffset + 1;\n          if ((int)weekTable[3] <= monthOffset) break;\n          weekdayOffset = weekdayOffset + *(int *)(&UNK_00007b98 + monthOffset * 4 + isLeapYear * 0x30);\n        }\n        daysOffset = weekIndex - (weekdayOffset + 4U) % 7;\n        if (daysOffset < 0) {\n          daysOffset = daysOffset + 7;\n        }\n        for (daysOffset = (weekTable[4] - 1) * 7 + daysOffset;\n            *(int *)(&UNK_00007b98 + monthOffset * 4 + isLeapYear * 0x30) <= daysOffset; daysOffset = daysOffset + -7) {\n        }\n        weekdayOffset = weekdayOffset + daysOffset;\n      }\n      weekIndex = weekTable[10] + weekdayOffset * 0x15180 + weekTable[6];\n      weekTable[8] = weekIndex;\n      weekTable[9] = (int)weekIndex >> 0x1f;\n      weekTable = weekTable + 10;\n    } while (memoryAddress + 0x14 != weekTable);\n    weekIndex = memoryAddress[9];\n    isDivisibleBy400 = memoryAddress[0x13];\n    *memoryAddress = (uint)((int)((weekIndex - isDivisibleBy400) - (uint)(memoryAddress[8] < memoryAddress[0x12])) < 0 !=\n                    (SBORROW4(weekIndex,isDivisibleBy400) !=\n                    SBORROW4(weekIndex - isDivisibleBy400,(uint)(memoryAddress[8] < memoryAddress[0x12]))));\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_weekday_00004f98",
                "param_1": "year",
                "puVar1": "memoryAddress",
                "uVar2": "result",
                "uVar3": "weekIndex",
                "iVar4": "weekdayOffset",
                "puVar5": "weekTable",
                "iVar6": "yearOffset",
                "uVar7": "isLeapYear",
                "iVar8": "monthOffset",
                "iVar9": "daysOffset",
                "uVar10": "isDivisibleBy400"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_memory_address_000050e8",
            "code": "\nundefined * getMemoryAddress_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_memory_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_memory_address_000050f4",
            "code": "\nundefined * get_memory_address_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_memory_address_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "process_relocation_00005100",
            "code": "\nvoid process_relocation_00005100(void)\n\n{\n  dword offset;\n  int memory_address;\n  char *string;\n  int result;\n  int count;\n  undefined type;\n  char *temp_string;\n  bool is_found;\n  ushort *pointer1;\n  int *pointer2;\n  ushort *pointer3;\n  int *pointer4;\n  ushort value1;\n  ushort value2;\n  ushort value3;\n  ushort value4;\n  ushort value5;\n  ushort value6;\n  int length;\n  char *temp_string_array [2];\n  \n  offset = relocation_array[16].r_offset;\n  memory_address = get_memory_address_000056b0();\n  string = (char *)find_and_compare_string_000056a0(offset,&DAT_00007a5c);\n  if (string == (char *)0x0) {\n    relocation_array[28].r_info = (dword)&DAT_00007a5f;\n    relocation_array[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = string;\n    DAT_1fff0ddc = string;\n    initialize_relocation_data_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (result = compare_and_calculate_difference_00004e52(), result != 0)) {\n    initialize_relocation_data_00005780(DAT_1fff0dd4);\n    result = find_last_character_00005ecc(string);\n    DAT_1fff0dd4 = calculate_block_size_00004bd0(offset,result + 1);\n    if (DAT_1fff0dd4 != 0) {\n      copy_string_00005ebc(DAT_1fff0dd4,string);\n    }\n    if (*string == ':') {\n      string = string + 1;\n    }\n    result = process_input_00005e68(string,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&length);\n    if (0 < result) {\n      temp_string = string + length;\n      if (string[length] == '-') {\n        temp_string = temp_string + 1;\n        result = -1;\n      }\n      else {\n        if (string[length] == '+') {\n          temp_string = temp_string + 1;\n        }\n        result = 1;\n      }\n      value2 = 0;\n      value3 = 0;\n      pointer1 = &value2;\n      pointer2 = &length;\n      pointer3 = &value3;\n      pointer4 = &length;\n      count = process_input_00005e68(temp_string,\"%hu%n:%hu%n:%hu%n\",&value1,&length,&value2,&length,\n                           &value3,&length);\n      if (0 < count) {\n        *(uint *)(memory_address + 0x28) =\n             ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3) * result;\n        relocation_array[28].r_info = (dword)&DAT_1fff0dc7;\n        temp_string = temp_string + length;\n        result = process_input_00005e68(temp_string,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&length,pointer1,pointer2,pointer3,\n                             pointer4);\n        if (result < 1) {\n          relocation_array[29].r_offset = relocation_array[28].r_info;\n          DAT_1fff0ddc = *(char **)(memory_address + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          relocation_array[29].r_offset = (dword)&DAT_1fff0dbc;\n          string = temp_string + length;\n          if (temp_string[length] == '-') {\n            string = string + 1;\n            result = -1;\n          }\n          else {\n            if (temp_string[length] == '+') {\n              string = string + 1;\n            }\n            result = 1;\n          }\n          value1 = 0;\n          value2 = 0;\n          value3 = 0;\n          length = 0;\n          count = process_input_00005e68(string,\"%hu%n:%hu%n:%hu%n\",&value1,&length,&value2,&length,\n                               &value3,&length);\n          if (count < 1) {\n            result = *(int *)(memory_address + 0x28) + -0xe10;\n          }\n          else {\n            result = ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3) * result;\n          }\n          *(int *)(memory_address + 0x50) = result;\n          string = string + length;\n          is_found = false;\n          result = memory_address;\n          while( true ) {\n            if (*string == ',') {\n              string = string + 1;\n            }\n            if (*string == 'M') {\n              count = process_input_00005e68(string,\"M%hu%n.%hu%n.%hu%n\",&value4,&length,&value5,\n                                   &length,&value6,&length);\n              if (count != 3) {\n                return;\n              }\n              if (0xb < value4 - 1) {\n                return;\n              }\n              if (4 < value5 - 1) {\n                return;\n              }\n              if (6 < value6) {\n                return;\n              }\n              *(uint *)(result + 0xc) = (uint)value4;\n              *(uint *)(result + 0x10) = (uint)value5;\n              *(undefined *)(result + 8) = 0x4d;\n              *(uint *)(result + 0x14) = (uint)value6;\n              temp_string = string + length;\n            }\n            else {\n              if (*string == 'J') {\n                string = string + 1;\n                type = 0x4a;\n              }\n              else {\n                type = 0x44;\n              }\n              value6 = parse_and_process_rel_array_00005fd8(string,temp_string_array,10);\n              temp_string = temp_string_array[0];\n              if (temp_string_array[0] == string) {\n                if (is_found) {\n                  *(undefined *)(memory_address + 0x30) = 0x4d;\n                  *(undefined4 *)(memory_address + 0x34) = 0xb;\n                  *(undefined4 *)(memory_address + 0x38) = 1;\n                  *(undefined4 *)(memory_address + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(memory_address + 8) = 0x4d;\n                  *(undefined4 *)(memory_address + 0xc) = 3;\n                  *(undefined4 *)(memory_address + 0x10) = 2;\n                  *(undefined4 *)(memory_address + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(result + 8) = type;\n                *(uint *)(result + 0x14) = (uint)value6;\n              }\n            }\n            value1 = 2;\n            value2 = 0;\n            value3 = 0;\n            length = 0;\n            if (*temp_string == '/') {\n              process_input_00005e68(temp_string,&DAT_00007a85,&value1,&length,&value2,&length,&value3,\n                           &length);\n            }\n            *(uint *)(result + 0x18) =\n                 (uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3;\n            result = result + 0x28;\n            string = temp_string + length;\n            if (is_found) break;\n            is_found = true;\n          }\n          calculate_weekday_00004f98(*(undefined4 *)(memory_address + 4));\n          DAT_1fff0ddc = *(char **)(memory_address + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(memory_address + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "process_relocation_00005100",
                "dVar1": "offset",
                "iVar2": "memory_address",
                "pcVar3": "string",
                "iVar4": "result",
                "iVar5": "count",
                "uVar6": "type",
                "pcVar7": "temp_string",
                "bVar8": "is_found",
                "puVar9": "pointer1",
                "piVar10": "pointer2",
                "puVar11": "pointer3",
                "piVar12": "pointer4",
                "local_3c": "value1",
                "local_3a": "value2",
                "local_38": "value3",
                "local_36": "value4",
                "local_34": "value5",
                "local_32": "value6",
                "local_30": "length",
                "local_2c": "temp_string_array",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00004e52",
                "FUN_00005e68",
                "FUN_00004bd0",
                "FUN_00005780",
                "FUN_00004f98",
                "FUN_00005fd8",
                "FUN_00005ebc",
                "FUN_000056b0",
                "FUN_000056a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_data_00005404",
            "code": "\nuint processData_00005404(int input,uint value,int *array,undefined4 param)\n\n{\n  int result;\n  uint ushortValue;\n  undefined *memAddress;\n  \n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    initialize_memory_000042a4();\n  }\n  if (array == &DAT_000079b8) {\n    array = *(int **)(input + 4);\n  }\n  else if (array == (int *)&DAT_000079d8) {\n    array = *(int **)(input + 8);\n  }\n  else if (array == (int *)&DAT_00007998) {\n    array = *(int **)(input + 0xc);\n  }\n  array[2] = array[6];\n  ushortValue = (uint)*(ushort *)(array + 3);\n  result = ushortValue << 0x1c;\n  if (((result < 0) && (ushortValue = array[4], ushortValue != 0)) ||\n     (result = process_data_000054a8(input,array,result,ushortValue,param), result == 0)) {\n    result = *array - array[4];\n    value = value & 0xff;\n    if ((result < array[5]) || (result = process_data_00004158(input,array), result == 0)) {\n      array[2] = array[2] + -1;\n      memAddress = (undefined *)*array;\n      *array = (int)(memAddress + 1);\n      *memAddress = (char)value;\n      if (array[5] != result + 1) {\n        if (-1 < (int)((uint)*(ushort *)(array + 3) << 0x1f)) {\n          return value;\n        }\n        if (value != 10) {\n          return value;\n        }\n      }\n      result = process_data_00004158(input,array);\n      if (result == 0) {\n        return value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "input",
                "param_2": "value",
                "param_3": "array",
                "param_4": "param",
                "iVar1": "result",
                "uVar2": "ushortValue",
                "puVar3": "memAddress"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_000057a8",
                "FUN_00004cb4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_000054a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_data_000054a8",
            "code": "\nuint processData_000054a8(undefined4 *output_ptr,undefined4 *input_ptr)\n\n{\n  ushort temp_var_1;\n  dword temp_var_2;\n  ushort temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  \n  temp_var_2 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (input_ptr == &DAT_000079b8) {\n    input_ptr = *(undefined4 **)(temp_var_2 + 4);\n  }\n  else if (input_ptr == (undefined4 *)&DAT_000079d8) {\n    input_ptr = *(undefined4 **)(temp_var_2 + 8);\n  }\n  else if (input_ptr == (undefined4 *)&DAT_00007998) {\n    input_ptr = *(undefined4 **)(temp_var_2 + 0xc);\n  }\n  temp_var_4 = (uint)*(ushort *)(input_ptr + 3);\n  temp_var_3 = *(ushort *)(input_ptr + 3);\n  if (-1 < (int)(temp_var_4 << 0x1c)) {\n    if (-1 < (int)(temp_var_4 << 0x1b)) {\n      *output_ptr = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(temp_var_4 << 0x1d) < 0) {\n      if ((undefined4 *)input_ptr[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_ptr[0xd] != input_ptr + 0x11) {\n          initialize_data_00004b34(output_ptr);\n        }\n        input_ptr[0xd] = 0;\n      }\n      *(ushort *)(input_ptr + 3) = *(ushort *)(input_ptr + 3) & 0xffdb;\n      input_ptr[1] = 0;\n      *input_ptr = input_ptr[4];\n    }\n    *(ushort *)(input_ptr + 3) = *(ushort *)(input_ptr + 3) | 8;\n  }\n  if ((input_ptr[4] == 0) && ((*(ushort *)(input_ptr + 3) & 0x280) != 0x200)) {\n    update_block_data_00005700(output_ptr,input_ptr);\n  }\n  temp_var_1 = *(ushort *)(input_ptr + 3);\n  temp_var_4 = (uint)temp_var_1;\n  temp_var_3 = *(ushort *)(input_ptr + 3);\n  temp_var_5 = temp_var_4 & 1;\n  if ((temp_var_1 & 1) == 0) {\n    if (-1 < (int)(temp_var_4 << 0x1e)) {\n      temp_var_5 = input_ptr[5];\n    }\n    input_ptr[2] = temp_var_5;\n  }\n  else {\n    input_ptr[2] = 0;\n    input_ptr[6] = -input_ptr[5];\n  }\n  if (input_ptr[4] != 0) {\n    return 0;\n  }\n  if ((temp_var_1 & 0x80) == 0) {\n    return temp_var_4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(input_ptr + 3) = temp_var_3 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_data_000054a8",
                "param_1": "output_ptr",
                "param_2": "input_ptr",
                "uVar1": "temp_var_1",
                "dVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "uVar5": "temp_var_5"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_000054a8(undefined4 *param_1,undefined4 *param_2)\n\n{\n  ushort uVar1;\n  dword dVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  dVar2 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUNC_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (param_2 == &DAT_000079b8) {\n    param_2 = *(undefined4 **)(dVar2 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_000079d8) {\n    param_2 = *(undefined4 **)(dVar2 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_00007998) {\n    param_2 = *(undefined4 **)(dVar2 + 0xc);\n  }\n  uVar4 = (uint)*(ushort *)(param_2 + 3);\n  uVar3 = *(ushort *)(param_2 + 3);\n  if (-1 < (int)(uVar4 << 0x1c)) {\n    if (-1 < (int)(uVar4 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(uVar4 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          initialize_data_00004b34(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    update_block_data_00005700(param_1,param_2);\n  }\n  uVar1 = *(ushort *)(param_2 + 3);\n  uVar4 = (uint)uVar1;\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar5 = uVar4 & 1;\n  if ((uVar1 & 1) == 0) {\n    if (-1 < (int)(uVar4 << 0x1e)) {\n      uVar5 = param_2[5];\n    }\n    param_2[2] = uVar5;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] != 0) {\n    return 0;\n  }\n  if ((uVar1 & 0x80) == 0) {\n    return uVar4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n  return 0xffffffff;\n}\n\n"
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_store_remainder_00005584",
            "code": "\nvoid divideAndStoreRemainder_00005584(uint *resultArray,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *resultArray = quotient;\n  resultArray[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_store_remainder_00005584",
                "param_1": "resultArray",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_and_compare_string_0000562c",
            "code": "\nint findAndCompareString_0000562c(undefined4 memory,char *string,int *result)\n\n{\n  char currentChar;\n  int *relOffset;\n  int comparisonResult;\n  char *currentPos;\n  int *currentRelOffset;\n  int stringOffset;\n  \n  initialize_memory_00005fec();\n  currentPos = string;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      currentChar = *currentPos;\n      if (currentChar == '\\0') {\n        stringOffset = (int)currentPos - (int)string;\n        relOffset = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          currentRelOffset = relOffset;\n          if (*currentRelOffset == 0) break;\n          comparisonResult = compare_and_update_00004e66(*currentRelOffset,string,stringOffset);\n          relOffset = currentRelOffset + 1;\n          if ((comparisonResult == 0) && (comparisonResult = *currentRelOffset, *(char *)(comparisonResult + stringOffset) == '=')) {\n            *result = (int)((int)currentRelOffset - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            initialize_memory_00005ff8(memory);\n            return comparisonResult + stringOffset + 1;\n          }\n        }\n        break;\n      }\n      currentPos = currentPos + 1;\n    } while (currentChar != '=');\n  }\n  initialize_memory_00005ff8(memory);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_and_compare_string_0000562c",
                "param_1": "memory",
                "param_2": "string",
                "param_3": "result",
                "cVar1": "currentChar",
                "piVar2": "relOffset",
                "iVar3": "comparisonResult",
                "pcVar4": "currentPos",
                "piVar5": "currentRelOffset",
                "iVar6": "stringOffset"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "find_and_compare_string_000056a0",
            "code": "\nvoid find_and_compare_string_000056a0(undefined4 input_string,undefined4 search_string,undefined4 result_buffer,undefined4 buffer_size)\n\n{\n  undefined4 search_string_copy;\n  undefined4 result_buffer_copy;\n  \n  search_string_copy = search_string;\n  result_buffer_copy = result_buffer;\n  find_and_compare_string_000056a0_0000562c(input_string,search_string,&search_string_copy,buffer_size,input_string);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "find_and_compare_string_000056a0",
                "param_1": "input_string",
                "param_2": "search_string",
                "param_3": "result_buffer",
                "param_4": "buffer_size",
                "uStack_c": "search_string_copy",
                "uStack_8": "result_buffer_copy"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nundefined4 get_memory_address_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4",
                "FUN_00004f98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_and_update_value_000056b8",
            "code": "\nundefined4 checkAndUpdateValue_000056b8(undefined4 input,int data,undefined4 *status,uint *result)\n\n{\n  int errorCode;\n  undefined4 returnValue;\n  undefined defaultValue [4];\n  uint flags;\n  \n  if ((*(short *)(data + 0xe) < 0) ||\n     (errorCode = set_default_value_and_return_00000514(input,(int)*(short *)(data + 0xe),defaultValue), errorCode < 0)) {\n    *result = 0;\n    if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n      returnValue = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *result = (uint)((flags & 0xf000) == 0x2000);\n  }\n  returnValue = 0x400;\nLAB_000056f8:\n  *status = returnValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_and_update_value_000056b8",
                "param_1": "input",
                "param_2": "data",
                "param_3": "status",
                "param_4": "result",
                "iVar1": "errorCode",
                "uVar2": "returnValue",
                "auStack_68": "defaultValue",
                "local_64": "flags"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "update_block_data_00005700",
            "code": "\nvoid updateBlockData_00005700(int blockDataSize,int *blockData)\n\n{\n  ushort updateValue;\n  int blockSize;\n  int localBlockDataSize;\n  int *localBlockData;\n  \n  if (-1 < (int)((uint)*(ushort *)(blockData + 3) << 0x1e)) {\n    localBlockDataSize = blockDataSize;\n    localBlockData = blockData;\n    updateValue = check_and_update_value_000056b8(blockDataSize,blockData,&localBlockDataSize,&localBlockData);\n    blockSize = calculate_block_size_00004bd0(blockDataSize,localBlockDataSize);\n    if (blockSize != 0) {\n      *(undefined **)(blockDataSize + 0x28) = &DAT_0000423d;\n      *blockData = blockSize;\n      *(ushort *)(blockData + 3) = *(ushort *)(blockData + 3) | 0x80;\n      blockData[5] = localBlockDataSize;\n      blockData[4] = blockSize;\n      if ((localBlockData != (int *)0x0) &&\n         (blockSize = check_valid_input_00000534(blockDataSize,(int)*(short *)((int)blockData + 0xe)), blockSize != 0)) {\n        *(ushort *)(blockData + 3) = *(ushort *)(blockData + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(blockData + 3) = updateValue | *(ushort *)(blockData + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(blockData + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(blockData + 3) = *(ushort *)(blockData + 3) & 0xfffc | 2;\n  }\n  *blockData = (int)blockData + 0x47;\n  blockData[4] = (int)blockData + 0x47;\n  blockData[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "update_block_data_00005700",
                "param_1": "blockDataSize",
                "param_2": "blockData",
                "uVar1": "updateValue",
                "iVar2": "blockSize",
                "local_18": "localBlockDataSize",
                "local_14": "localBlockData"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_000056b8",
                "FUN_00000534"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "initialize_relocation_data_00005780",
            "code": "\nvoid initializeRelocationData_00005780(undefined4 dataPointer)\n\n{\n  initialize_data_00004b34(relocationTable[16].offset,dataPointer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "initialize_relocation_data_00005780",
                "param_1": "dataPointer",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initialize_data_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initializeData_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "process_data_000057a8",
            "code": "\nint process_data_000057a8(undefined4 input_param,int data,undefined4 *output_param)\n\n{\n  int count;\n  undefined *buffer;\n  \n  count = output_param[2] + -1;\n  output_param[2] = count;\n  if ((count < 0) && ((count < (int)output_param[6] || (data == 10)))) {\n    count = process_data_000057a8_00005404();\n    return count;\n  }\n  buffer = (undefined *)*output_param;\n  *output_param = buffer + 1;\n  *buffer = (char)data;\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "process_data_000057a8",
                "param_1": "input_param",
                "param_2": "data",
                "param_3": "output_param",
                "iVar1": "count",
                "puVar2": "buffer"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "process_and_increment_000057d2",
            "code": "\nint processAndIncrement_000057d2(undefined4 input1,undefined4 input2,undefined *data,int size)\n\n{\n  int result;\n  undefined *endPtr;\n  int sizeRemaining;\n  \n  endPtr = data + size;\n  sizeRemaining = size;\n  do {\n    if (data == endPtr) {\n      return 0;\n    }\n    result = process_data_000057a8(input1,*data,input2,size,sizeRemaining);\n    size = result + 1;\n    data = data + 1;\n  } while (size != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "process_and_increment_000057d2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "param_4": "size",
                "iVar1": "result",
                "puVar2": "endPtr",
                "iVar3": "sizeRemaining"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "process_data_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint processData_000057f8(int input,undefined4 *config,byte *data,int *result)\n\n{\n  int index1;\n  int index2;\n  int *pointer;\n  bool isNum;\n  byte *ptr;\n  int unaff_r7;\n  byte *ptr2;\n  int *resultPtr;\n  uint flags;\n  int flagMask;\n  undefined4 uStack_80;\n  int counter;\n  int totalLength;\n  byte ch;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    initialize_memory_000042a4();\n  }\n  if (config == &DAT_000079b8) {\n    config = *(undefined4 **)(input + 4);\n  }\n  else if (config == (undefined4 *)&DAT_000079d8) {\n    config = *(undefined4 **)(input + 8);\n  }\n  else if (config == (undefined4 *)&DAT_00007998) {\n    config = *(undefined4 **)(input + 0xc);\n  }\n  if ((-1 < (int)(config[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(config + 3) << 0x16))) {\n    FUNC_000045e8(config[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(config + 3) << 0x1c)) || (config[4] == 0)) &&\n     (index1 = process_data_000054a8(input,config), index1 != 0)) {\n    if ((-1 < (int)(config[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(config + 3) << 0x16)))\n    {\n      FUNC_000045ec(config[0x16]);\n    }\n    return -1;\n  }\n  totalLength = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  ptr2 = data;\n  resultPtr = result;\nLAB_0000588e:\n  ptr = ptr2;\n  if (*ptr != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  ptr2 = ptr + 1;\n  if (*ptr == 0x25) {\nLAB_0000589a:\n    index1 = (int)ptr - (int)data;\n    if (index1 != 0) {\n      index2 = process_and_increment_000057d2(input,config,data,index1);\n      if (index2 == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(config[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(config + 3) << 0x16))) {\n          FUNC_000045ec(config[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(config + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalLength;\n      }\n      totalLength = totalLength + index1;\n    }\n    if (*ptr == 0) goto LAB_00005a06;\n    flagMask = -1;\n    uStack_80 = 0;\n    flags = 0;\n    counter = 0;\n    local_45 = 0;\n    local_30 = 0;\n    ptr2 = ptr + 1;\n    while( true ) {\n      ptr = ptr2 + 1;\n      index1 = find_byte_sequence_00006010(\"#-0+ \",*ptr2,5);\n      if (index1 == 0) break;\n      flags = 1 << (index1 - 0x7bfcU & 0xff) | flags;\n      ptr2 = ptr;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      local_45 = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      local_45 = 0x2b;\n    }\n    if (*ptr2 == 0x2a) {\n      pointer = resultPtr + 1;\n      counter = *resultPtr;\n      resultPtr = pointer;\n      if (counter < 0) {\n        counter = -counter;\n        flags = flags | 2;\n      }\n    }\n    else {\n      isNum = false;\n      index1 = counter;\n      ptr = ptr2;\n      while( true ) {\n        if (9 < *ptr - 0x30) break;\n        index1 = index1 * 10 + (*ptr - 0x30);\n        isNum = true;\n        ptr = ptr + 1;\n      }\n      if (isNum) {\n        counter = index1;\n      }\n    }\n    if (*ptr == 0x2e) {\n      if (ptr[1] == 0x2a) {\n        flagMask = *resultPtr;\n        if (flagMask < 0) {\n          flagMask = -1;\n        }\n        ptr = ptr + 2;\n        resultPtr = resultPtr + 1;\n      }\n      else {\n        isNum = false;\n        flagMask = 0;\n        index1 = 0;\n        while( true ) {\n          ptr = ptr + 1;\n          if (9 < *ptr - 0x30) break;\n          index1 = index1 * 10 + (*ptr - 0x30);\n          isNum = true;\n        }\n        if (isNum) {\n          flagMask = index1;\n        }\n      }\n    }\n    index1 = find_byte_sequence_00006010(&DAT_00007c02,*ptr,3);\n    if (index1 != 0) {\n      flags = flags | 0x40 << (index1 - 0x7c02U & 0xff);\n      ptr = ptr + 1;\n    }\n    data = ptr + 1;\n    ch = *ptr;\n    index1 = find_byte_sequence_00006010(\"efgEFG\",ch,6);\n    if (index1 == 0) {\n      unaff_r7 = format_number_00005b34(input,&flags,config,0x57d3,&resultPtr);\n      if (unaff_r7 == -1) goto LAB_00005a06;\n    }\n    else {\n      resultPtr = (int *)(((int)resultPtr + 7U & 0xfffffff8) + 8);\n    }\n    totalLength = totalLength + unaff_r7;\n    ptr2 = data;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "process_data_000057f8",
                "param_1": "input",
                "param_2": "config",
                "param_3": "data",
                "param_4": "result",
                "iVar1": "index1",
                "iVar2": "index2",
                "piVar3": "pointer",
                "bVar4": "isNum",
                "pbVar5": "ptr",
                "pbVar6": "ptr2",
                "local_8c": "resultPtr",
                "local_88": "flags",
                "local_84": "flagMask",
                "local_7c": "counter",
                "local_74": "totalLength",
                "local_70": "ch"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00005b34",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_total_size_00005a58",
            "code": "\nundefined4\ncalculateTotalSize_00005a58(undefined4 param1,uint *inputArray,uint *outputSize,undefined4 param4,code *callback)\n\n{\n  int i;\n  undefined4 returnValue;\n  int tempVar;\n  uint maxSize;\n  uint counter;\n  bool isTrue;\n  \n  maxSize = inputArray[4];\n  if ((int)inputArray[4] < (int)inputArray[2]) {\n    maxSize = inputArray[2];\n  }\n  *outputSize = maxSize;\n  if (*(char *)((int)inputArray + 0x43) != '\\0') {\n    *outputSize = maxSize + 1;\n  }\n  if ((int)(*inputArray << 0x1a) < 0) {\n    *outputSize = *outputSize + 2;\n  }\n  if ((*inputArray & 6) == 0) {\n    for (i = 0; i < (int)(inputArray[3] - *outputSize); i = i + 1) {\n      tempVar = (*callback)(param1,param4,(int)inputArray + 0x19,1);\n      if (tempVar == -1) goto LAB_00005afc;\n    }\n  }\n  maxSize = (uint)*(byte *)((int)inputArray + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  if ((int)(*inputArray << 0x1a) < 0) {\n    *(undefined *)((int)inputArray + maxSize + 0x43) = 0x30;\n    *(undefined *)((int)inputArray + maxSize + 0x44) = *(undefined *)((int)inputArray + 0x45);\n    maxSize = maxSize + 2;\n  }\n  i = (*callback)(param1,param4,(int)inputArray + 0x43,maxSize);\n  if (i == -1) {\nLAB_00005afc:\n    returnValue = 0xffffffff;\n  }\n  else {\n    maxSize = inputArray[3];\n    isTrue = (*inputArray & 6) == 4;\n    if (isTrue) {\n      maxSize = maxSize - *outputSize;\n    }\n    if (isTrue) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    else {\n      maxSize = 0;\n    }\n    if ((int)inputArray[4] < (int)inputArray[2]) {\n      maxSize = maxSize + (inputArray[2] - inputArray[4]);\n    }\n    for (counter = 0; maxSize != counter; counter = counter + 1) {\n      i = (*callback)(param1,param4,(int)inputArray + 0x1a,1);\n      if (i == -1) goto LAB_00005afc;\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_total_size_00005a58",
                "param_1": "param1",
                "param_2": "inputArray",
                "param_3": "outputSize",
                "param_4": "param4",
                "param_5": "callback",
                "iVar1": "i",
                "uVar2": "returnValue",
                "iVar3": "tempVar",
                "uVar4": "maxSize",
                "uVar5": "counter",
                "bVar6": "isTrue"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "format_number_00005b34",
            "code": "\ncode * formatNumber_00005b34(undefined4 value,uint *format,undefined4 length,code *printer,uint **data\n                   )\n\n{\n  bool isSmaller;\n  byte formatType;\n  int result;\n  code *formattedNumber;\n  char *digits;\n  int status;\n  char *formatPtr;\n  uint digit;\n  uint *dataPtr;\n  uint base;\n  uint **ppuVar11;\n  char **ppcVar12;\n  uint formatLength;\n  char *digitPtr;\n  code *originalPrinter;\n  \n  formatType = *(byte *)(format + 6);\n  formatPtr = (char *)((int)format + 0x43);\n  originalPrinter = printer;\n  if (0x78 < formatType) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)format + 0x42) = formatType;\nLAB_00005bdc:\n    formatPtr = (char *)((int)format + 0x42);\n    digit = 1;\nLAB_00005d28:\n    format[4] = digit;\n    *(undefined *)((int)format + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (formatType < 99) {\n    if (formatType == 0) goto LAB_00005d06;\n    if (formatType == 0x58) {\n      digits = \"0123456789ABCDEF\";\n      *(undefined *)((int)format + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(formatType) {\n  case 99:\n    digit = **data;\n    *data = *data + 1;\n    *(char *)((int)format + 0x42) = (char)digit;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *format;\n    dataPtr = *data;\n    if ((int)(base << 0x18) < 0) {\n      digit = *dataPtr;\n      *data = dataPtr + 1;\n    }\n    else {\n      digit = *dataPtr;\n      *data = dataPtr + 1;\n      if ((base & 0x40) != 0) {\n        digit = (uint)(short)digit;\n      }\n    }\n    if ((int)digit < 0) {\n      digit = -digit;\n      *(undefined *)((int)format + 0x43) = 0x2d;\n    }\n    digits = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ppuVar11 = (uint **)*data;\n    base = *format;\n    digit = format[5];\n    *data = (uint *)(ppuVar11 + 1);\n    dataPtr = *ppuVar11;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *dataPtr = digit;\n    }\n    else {\n      *(short *)dataPtr = (short)digit;\n    }\nLAB_00005d06:\n    format[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    dataPtr = *data;\n    digit = *format;\n    *data = dataPtr + 1;\n    if (((int)(digit << 0x18) < 0) || (-1 < (int)(digit << 0x19))) {\n      digit = *dataPtr;\n    }\n    else {\n      digit = (uint)*(ushort *)dataPtr;\n    }\n    digits = \"0123456789ABCDEF\";\n    if (formatType == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *format = *format | 0x20;\n  case 0x78:\n    digits = \"0123456789abcdef\";\n    *(undefined *)((int)format + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *format;\n    digit = **data;\n    *data = *data + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      digit = digit & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *format = base | 0x20;\n    }\n    if (digit == 0) {\n      *format = *format & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    ppcVar12 = (char **)*data;\n    *data = (uint *)(ppcVar12 + 1);\n    formatPtr = *ppcVar12;\n    result = find_byte_sequence_00006010(formatPtr,0,format[1],ppcVar12,value,format,length);\n    if (result != 0) {\n      format[1] = result - (int)formatPtr;\n    }\n    digit = format[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)format + 0x43) = 0;\nLAB_00005c36:\n  formatLength = format[1];\n  format[2] = formatLength;\n  if (-1 < (int)formatLength) {\n    *format = *format & 0xfffffffb;\n  }\n  digitPtr = formatPtr;\n  if ((digit != 0) || (formatLength != 0)) {\n    do {\n      digitPtr = digitPtr + -1;\n      *digitPtr = digits[digit - base * (digit / base)];\n      isSmaller = base <= digit;\n      digit = digit / base;\n    } while (isSmaller);\n  }\n  if (((base == 8) && ((int)(*format << 0x1f) < 0)) && ((int)format[1] <= (int)format[4])) {\n    digitPtr[-1] = '0';\n    digitPtr = digitPtr + -1;\n  }\n  format[4] = (int)formatPtr - (int)digitPtr;\n  formatPtr = digitPtr;\nLAB_00005c84:\n  result = calculate_total_size_00005a58(value,format,&originalPrinter,length,printer);\n  if ((result == -1) || (result = (*printer)(value,length,formatPtr,format[4]), result == -1)) {\nLAB_00005c98:\n    formattedNumber = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*format << 0x1e) < 0) {\n      for (result = 0; result < (int)(format[3] - (int)originalPrinter); result = result + 1) {\n        status = (*printer)(value,length,(int)format + 0x19,1);\n        if (status == -1) goto LAB_00005c98;\n      }\n    }\n    formattedNumber = (code *)format[3];\n    if ((int)(code *)format[3] < (int)originalPrinter) {\n      formattedNumber = originalPrinter;\n    }\n  }\n  return formattedNumber;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "format_number_00005b34",
                "param_1": "value",
                "param_2": "format",
                "param_3": "length",
                "param_4": "printer",
                "param_5": "data",
                "bVar1": "isSmaller",
                "bVar2": "formatType",
                "iVar3": "result",
                "pcVar4": "formattedNumber",
                "pcVar5": "digits",
                "iVar6": "status",
                "pcVar7": "formatPtr",
                "uVar8": "digit",
                "puVar9": "dataPtr",
                "uVar10": "base",
                "uVar13": "formatLength",
                "pcVar14": "digitPtr",
                "local_24": "originalPrinter"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00006010",
                "FUN_00005a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "process_data_00005e10",
            "code": "\nuint processData_00005e10(int data,byte **pointerArray)\n\n{\n  int result;\n  uint uVar2;\n  byte *bytePtr;\n  \n  if ((data != 0) && (*(int *)(data + 0x18) == 0)) {\n    initializeMemory();\n  }\n  if (pointerArray == (byte **)&DAT_000079b8) {\n    pointerArray = *(byte ***)(data + 4);\n  }\n  else if (pointerArray == (byte **)&DAT_000079d8) {\n    pointerArray = *(byte ***)(data + 8);\n  }\n  else if (pointerArray == (byte **)&DAT_00007998) {\n    pointerArray = *(byte ***)(data + 0xc);\n  }\n  result = processData_00005e10Helper(data,pointerArray);\n  if (result == 0) {\n    pointerArray[1] = pointerArray[1] + -1;\n    bytePtr = *pointerArray;\n    *pointerArray = bytePtr + 1;\n    uVar2 = (uint)*bytePtr;\n  }\n  else {\n    uVar2 = 0xffffffff;\n  }\n  return uVar2;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "process_data_00005e10",
                "param_1": "data",
                "param_2": "pointerArray",
                "iVar1": "result",
                "pbVar3": "bytePtr",
                "initialize_memory_000042a4": "initializeMemory",
                "process_data_00006768": "processDataHelper"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00006768"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "process_input_00005e68",
            "code": "\nvoid processInput_00005e68(undefined4 input,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 inputCopy;\n  undefined4 lastCharacter;\n  undefined2 constant;\n  undefined2 constant2;\n  undefined4 inputCopy2;\n  undefined4 lastCharacterCopy;\n  undefined *pointer;\n  undefined4 zero;\n  undefined4 zero2;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  \n  constant = 0x204;\n  inputCopy = input;\n  inputCopy2 = input;\n  param3Copy = param3;\n  param4Copy = param4;\n  lastCharacter = find_last_character_00005ecc();\n  pointer = &LAB_00004dea_1;\n  zero = 0;\n  zero2 = 0;\n  constant2 = 0xffff;\n  lastCharacterCopy = lastCharacter;\n  process_input_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&inputCopy,param2,&param3Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "process_input_00005e68",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "local_80": "inputCopy",
                "local_7c": "lastCharacter",
                "local_74": "constant",
                "local_72": "constant2",
                "local_70": "inputCopy2",
                "local_6c": "lastCharacterCopy",
                "local_5c": "pointer",
                "local_4c": "zero",
                "local_38": "zero2",
                "uStack_8": "param3Copy",
                "uStack_4": "param4Copy"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_000061cc",
                "FUN_00005ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *destination,char *source)\n\n{\n  char currentChar;\n  \n  do {\n    currentChar = *source;\n    *destination = currentChar;\n    source = source + 1;\n    destination = destination + 1;\n  } while (currentChar != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_last_character_00005ecc",
            "code": "\nchar * find_last_character_00005ecc(char *input_string)\n\n{\n  char current_char;\n  char *next_character;\n  char *current_position;\n  \n  current_position = input_string;\n  do {\n    next_character = current_position + 1;\n    current_char = *current_position;\n    current_position = next_character;\n  } while (current_char != '\\0');\n  return next_character + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_last_character_00005ecc",
                "param_1": "input_string",
                "cVar1": "current_char",
                "pcVar2": "next_character",
                "pcVar3": "current_position"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_number_00005edc",
            "code": "\nuint parseNumber_00005edc(undefined4 *output,byte *inputStr,byte **nextStr,uint base)\n\n{\n  uint result;\n  uint currentChar;\n  byte negative;\n  int status;\n  uint digitValue;\n  uint maxValue;\n  byte *currentPtr;\n  byte *nextPtr;\n  \n  nextPtr = inputStr;\n  do {\n    currentPtr = nextPtr;\n    nextPtr = currentPtr + 1;\n    currentChar = (uint)*currentPtr;\n    negative = (&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextPtr;\n    negative = 1;\n    nextPtr = currentPtr + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextPtr;\n    nextPtr = currentPtr + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00005f26;\n  if ((*nextPtr & 0xdf) == 0x58) {\n    currentChar = (uint)nextPtr[1];\n    base = 0x10;\n    nextPtr = nextPtr + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  maxValue = 0xffffffff / base;\n  result = 0;\n  do {\n    digitValue = currentChar - 0x30;\n    if (9 < digitValue) {\n      if (currentChar - 0x41 < 0x1a) {\n        digitValue = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digitValue = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (((status < 0) || (maxValue < result)) ||\n       ((maxValue == result && ((int)~(base * maxValue) < (int)digitValue)))) {\n      status = -1;\n    }\n    else {\n      result = result * base + digitValue;\n      status = 1;\n    }\n    currentChar = (uint)*nextPtr;\n    nextPtr = nextPtr + 1;\n  } while( true );\n  if (status < 0) {\n    *output = 0x22;\n    result = 0xffffffff;\n    if (nextStr == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (negative != 0) {\n      result = -result;\n    }\n    if (nextStr == (byte **)0x0) {\n      return result;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  inputStr = nextPtr + -1;\nLAB_00005fb8:\n  *nextStr = inputStr;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "param_1": "output",
                "param_2": "inputStr",
                "param_3": "nextStr",
                "param_4": "base",
                "uVar1": "result",
                "uVar2": "currentChar",
                "bVar3": "negative",
                "iVar4": "status",
                "uVar5": "digitValue",
                "uVar6": "maxValue",
                "pbVar7": "currentPtr",
                "pbVar8": "nextPtr"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "parse_and_process_rel_array_00005fd8",
            "code": "\nvoid parse_and_process_rel_array_00005fd8(undefined4 parsed_value,undefined4 helper_param,undefined4 additional_info)\n\n{\n  parse_number_00005edc(rel_array[16].array_offset,parsed_value,helper_param,additional_info);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "parse_and_process_rel_array_00005fd8",
                "param_1": "parsed_value",
                "param_2": "helper_param",
                "param_3": "additional_info",
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "r_offset": "array_offset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_memory_00005fec",
            "code": "\nvoid initializeMemory_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_memory_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_memory_00005ff8",
            "code": "\nvoid initializeMemory_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_memory_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *data,uint byte_to_find,uint length)\n\n{\n  byte byte_found;\n  char is_byte0_zero;\n  char is_byte1_zero;\n  char is_byte2_zero;\n  char is_byte3_zero;\n  byte *next_byte_ptr;\n  uint *next_uint_ptr;\n  byte *result_ptr;\n  uint ptr_alignment;\n  uint bytes_to_compare;\n  uint xor_result;\n  uint mul_result;\n  bool is_byte4_zero;\n  bool is_byte5_zero;\n  bool is_byte6_zero;\n  bool is_byte7_zero;\n  \n  byte_to_find = byte_to_find & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      next_uint_ptr = (uint *)((int)data + 1);\n      byte_found = *(byte *)data;\n      length = length - 1;\n      data = next_uint_ptr;\n    } while (byte_found != byte_to_find);\n  }\n  else {\n    ptr_alignment = (uint)data & 7;\n    while( true ) {\n      if (ptr_alignment == 0) {\n        ptr_alignment = byte_to_find | byte_to_find << 8;\n        ptr_alignment = ptr_alignment | ptr_alignment << 0x10;\n        bytes_to_compare = length & 0xfffffff8;\n        do {\n          next_uint_ptr = data + 2;\n          bytes_to_compare = bytes_to_compare - 8;\n          xor_result = *data ^ ptr_alignment;\n          mul_result = data[1] ^ ptr_alignment;\n          is_byte0_zero = -((char)xor_result == '\\0');\n          is_byte1_zero = -((char)(xor_result >> 8) == '\\0');\n          is_byte2_zero = -((char)(xor_result >> 0x10) == '\\0');\n          is_byte3_zero = -((char)(xor_result >> 0x18) == '\\0');\n          xor_result = CONCAT13(is_byte3_zero,CONCAT12(is_byte2_zero,CONCAT11(is_byte1_zero,is_byte0_zero)));\n          is_byte4_zero = (char)mul_result != '\\0';\n          is_byte5_zero = (char)(mul_result >> 8) != '\\0';\n          is_byte6_zero = (char)(mul_result >> 0x10) != '\\0';\n          is_byte7_zero = (char)(mul_result >> 0x18) != '\\0';\n          mul_result = CONCAT13(is_byte7_zero * is_byte3_zero - !is_byte7_zero,\n                            CONCAT12(is_byte6_zero * is_byte2_zero - !is_byte6_zero,\n                                     CONCAT11(is_byte5_zero * is_byte1_zero - !is_byte5_zero,is_byte4_zero * is_byte0_zero - !is_byte4_zero)));\n          if (mul_result != 0) {\n            if (xor_result == 0) {\n              result_ptr = (byte *)((int)data + 5);\n              xor_result = mul_result;\n            }\n            else {\n              result_ptr = (byte *)((int)data + 1);\n            }\n            if ((xor_result & 1) == 0) {\n              is_byte4_zero = (xor_result & 0x100) == 0;\n              next_byte_ptr = result_ptr + 1;\n              if (is_byte4_zero) {\n                is_byte4_zero = (xor_result & 0x18000) == 0;\n                next_byte_ptr = result_ptr + 2;\n              }\n              result_ptr = next_byte_ptr;\n              if (is_byte4_zero) {\n                result_ptr = result_ptr + 1;\n              }\n            }\n            return result_ptr + -1;\n          }\n          data = next_uint_ptr;\n        } while (bytes_to_compare != 0);\n        length = length & 7;\n        goto joined_r0x00006070;\n      }\n      next_uint_ptr = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == byte_to_find) break;\n      ptr_alignment = (uint)next_uint_ptr & 7;\n      data = next_uint_ptr;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)next_uint_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "data",
                "param_2": "byte_to_find",
                "param_3": "length",
                "bVar1": "byte_found",
                "cVar2": "is_byte0_zero",
                "cVar3": "is_byte1_zero",
                "cVar4": "is_byte2_zero",
                "cVar5": "is_byte3_zero",
                "pbVar6": "next_byte_ptr",
                "puVar7": "next_uint_ptr",
                "pbVar8": "result_ptr",
                "uVar9": "ptr_alignment",
                "uVar10": "bytes_to_compare",
                "uVar11": "xor_result",
                "uVar12": "mul_result",
                "bVar13": "is_byte4_zero",
                "bVar14": "is_byte5_zero",
                "bVar15": "is_byte6_zero",
                "bVar16": "is_byte7_zero"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_bytes_to_destination_000060b0",
            "code": "\nvoid copyBytesToDestination_000060b0(int destination,undefined *source,int size)\n\n{\n  undefined *source_ptr;\n  undefined *source_end;\n  undefined *dest_ptr;\n  \n  source_end = source + size;\n  dest_ptr = (undefined *)(destination + -1);\n  if (source != source_end) {\n    do {\n      source_ptr = source + 1;\n      dest_ptr = dest_ptr + 1;\n      *dest_ptr = *source;\n      source = source_ptr;\n    } while (source_ptr != source_end);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_bytes_to_destination_000060b0",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "source_ptr",
                "puVar2": "source_end",
                "puVar3": "dest_ptr"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "copy_bytes_if_needed_000060cc",
            "code": "\nint copyBytesIfNeeded_000060cc(undefined4 dataPointer,int sourceSize,uint destinationSize,undefined4 secondDataPointer)\n\n{\n  int result;\n  uint sum;\n  \n  if (sourceSize != 0) {\n    if (destinationSize == 0) {\n      initializeData();\n      result = 0;\n    }\n    else {\n      sum = calculateSum();\n      result = sourceSize;\n      if ((sum < destinationSize) && (result = calculateBlockSize(dataPointer,destinationSize), result != 0)) {\n        copyBytesToDestination(result,sourceSize,destinationSize);\n        initializeData(dataPointer,sourceSize);\n      }\n    }\n    return result;\n  }\n  result = calculateBlockSize(dataPointer,destinationSize,destinationSize,secondDataPointer);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "copy_bytes_if_needed_000060cc",
                "param_1": "dataPointer",
                "param_2": "sourceSize",
                "param_3": "destinationSize",
                "param_4": "secondDataPointer",
                "iVar1": "result",
                "uVar2": "sum",
                "initialize_data_00004b34": "initializeData",
                "calculate_sum_00006964": "calculateSum",
                "calculate_block_size_00004bd0": "calculateBlockSize",
                "copy_bytes_to_destination_000060b0": "copyBytesToDestination"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00006964",
                "FUN_00004b34",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "initialize_data_00006192",
            "code": "\nundefined4 initialize_data_00006192(undefined4 arg1,undefined4 *arg2)\n\n{\n  if ((undefined4 *)arg2[13] != (undefined4 *)0x0) {\n    if ((undefined4 *)arg2[13] != arg2 + 0x11) {\n      initialize_data_00006192_00004b34();\n    }\n    arg2[1] = arg2[16];\n    arg2[13] = 0;\n    if (arg2[16] != 0) {\n      *arg2 = arg2[15];\n      return 0;\n    }\n  }\n  *arg2 = arg2[4];\n  arg2[1] = 0;\n  *(ushort *)(arg2 + 3) = *(ushort *)(arg2 + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "initialize_data_00006192",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_2[0xd]": "arg2[13]",
                "param_2[1]": "arg2[1]",
                "param_2[0x10]": "arg2[16]",
                "param_2[0xf]": "arg2[15]",
                "param_2[4]": "arg2[4]"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "process_input_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint processInput_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int var1;\n  uint var2;\n  byte *var3;\n  uint var4;\n  int **local_param4;\n  undefined local_var_buffer [256];\n  uint local_flag;\n  undefined4 local_number;\n  uint local_flag2;\n  int local_result;\n  int local_counter;\n  undefined *local_ptr_buffer;\n  int local_switch;\n  undefined *local_function_ptr;\n  code *local_data_ptr;\n  \n  local_result = 0;\n  local_counter = 0;\n  local_function_ptr = &LAB_00006118_1;\n  local_data_ptr = initialize_data_00006192 + 1;\n  local_param4 = param4;\n  local_ptr_buffer = local_var_buffer;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      var4 = (uint)*param3;\n      if (var4 == 0) {\n        return local_result;\n      }\n      var2 = (byte)(&DAT_00007a99)[var4] & 8;\n      var3 = param3 + 1;\n      if (((&DAT_00007a99)[var4] & 8) == 0) break;\n      while (((param3 = var3, 0 < (int)param2[1] ||\n              (var1 = (*local_data_ptr)(param1,param2), var1 == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        local_counter = local_counter + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (var4 == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (var1 = (*local_data_ptr)(param1,param2), var1 != 0))\n    goto LAB_00006380;\n    if (**param2 != var4) {\n      return local_result;\n    }\n    *param2 = *param2 + 1;\n    local_counter = local_counter + 1;\n    param2[1] = param2[1] + -1;\n    param3 = var3;\n  }\n  local_flag2 = var2;\n  local_flag = var2;\n  if (param3[1] == 0x2a) {\n    var3 = param3 + 2;\n    local_flag = 0x10;\n  }\n  while( true ) {\n    var2 = (uint)*var3;\n    if (9 < var2 - 0x30) break;\n    var3 = var3 + 1;\n    local_flag2 = (local_flag2 * 10 + var2) - 0x30;\n  }\n  var1 = find_byte_sequence_00006010(&DAT_00007c02,var2,3);\n  if (var1 != 0) {\n    local_flag = 1 << (var1 - 0x7c02U & 0xff) | local_flag;\n    var3 = var3 + 1;\n  }\n  param3 = var3 + 1;\n  var2 = (uint)*var3;\n  if (var2 < 0x79) {\n    if (0x57 < var2) {\n      switch(var2) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)decode_data_0000687c(local_var_buffer,param3);\n        local_flag = local_flag | 0x40;\n        local_switch = 1;\n        break;\n      case 99:\n        local_flag = local_flag | 0x40;\n        local_switch = 0;\n        break;\n      case 100:\n      case 0x75:\n        local_number = 10;\nLAB_000063a0:\n        if (var2 < 0x6f) {\n          local_switch = 3;\n        }\n        else {\n          local_switch = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        local_switch = 5;\n        break;\n      case 0x69:\n        local_number = 0;\n        local_switch = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(local_flag << 0x1b)) {\n          if ((int)(local_flag << 0x1f) < 0) {\n            *(short *)*local_param4 = (short)local_counter;\n            local_param4 = local_param4 + 1;\n          }\n          else {\n            **local_param4 = local_counter;\n            local_param4 = local_param4 + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        local_number = 8;\n        local_switch = 4;\n        break;\n      case 0x70:\n        local_flag = local_flag | 0x20;\n      case 0x58:\n      case 0x78:\n        local_flag = local_flag | 0x200;\n        local_number = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        local_switch = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (var1 = (*local_data_ptr)(param1,param2), var1 != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(local_flag << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          local_counter = local_counter + 1;\n          var3 = param2[1];\n          param2[1] = var3 + -1;\n          if ((int)(var3 + -1) < 1) {\n            var1 = (*local_data_ptr)(param1,param2);\n            if (var1 != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (local_switch < 3) {\n        var1 = process_data_000064bc(param1,&local_flag,param2,&local_param4);\n      }\n      else {\n        if (4 < local_switch) goto LAB_000061f6;\n        var1 = decode_data_0000656c(param1,&local_flag,param2,&local_param4);\n      }\n      if (var1 == 1) {\n        return local_result;\n      }\n      if (var1 == 2) {\nLAB_00006380:\n        if (local_result == 0) {\nLAB_00006388:\n          local_result = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          local_result = -1;\n        }\n        return local_result;\n      }\n      goto LAB_000061f6;\n    }\n    var3 = param3;\n    if (var2 == 0x25) goto LAB_00006352;\n    if (var2 < 0x26) {\n      if (var2 != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (var2 - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  local_switch = 3;\n  local_number = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "process_input_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "var1",
                "uVar2": "var2",
                "pbVar3": "var3",
                "uVar4": "var4",
                "local_2b0": "local_param4",
                "auStack_2ac": "local_var_buffer",
                "local_1ac": "local_flag",
                "local_1a8": "local_number",
                "local_1a4": "local_flag2",
                "local_1a0": "local_result",
                "local_19c": "local_counter",
                "local_198": "local_ptr_buffer",
                "local_194": "local_switch",
                "local_30": "local_function_ptr",
                "local_2c": "local_data_ptr"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006192",
                "FUN_000064bc",
                "FUN_00006010",
                "FUN_0000656c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 processData_000064bc(undefined4 param1,uint *param2,byte **param3,undefined4 *param4)\n\n{\n  int returnValue;\n  uint tempVar;\n  byte **tempPtr1;\n  byte *tempPtr2;\n  byte *tempPtr3;\n  byte *tempPtr4;\n  int counter;\n  \n  if (param2[2] == 0) {\n    if (param2[6] == 0) {\n      tempVar = 1;\n    }\n    else {\n      tempVar = 0xffffffff;\n    }\n    param2[2] = tempVar;\n  }\n  if (-1 < (int)(*param2 << 0x1b)) {\n    tempPtr1 = (byte **)*param4;\n    *param4 = tempPtr1 + 1;\n    tempPtr3 = *tempPtr1;\n  }\n  counter = 0;\n  do {\n    tempVar = param2[6];\n    if (tempVar != 0) {\n      if (tempVar == 1) {\n        if (*(char *)(param2[5] + (uint)**param3) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*param2 & 0x10) == 0) && (param2[3] = param2[3] + 1, param2[6] != 0)) {\n            *tempPtr3 = 0;\n          }\n          param2[4] = counter + param2[4];\n          return 0;\n        }\n      }\n      else if ((tempVar != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**param3] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    tempPtr4 = tempPtr3;\n    if (-1 < (int)(*param2 << 0x1b)) {\n      tempPtr4 = tempPtr3 + 1;\n      *tempPtr3 = **param3;\n    }\n    tempPtr2 = param3[1];\n    *param3 = *param3 + 1;\n    tempVar = param2[2] - 1;\n    param3[1] = tempPtr2 + -1;\n    counter = counter + 1;\n    param2[2] = tempVar;\n    tempPtr3 = tempPtr4;\n    if ((tempVar == 0) ||\n       (((int)(tempPtr2 + -1) < 1 &&\n        (returnValue = (*(code *)param2[0x60])(param1,param3,tempVar,(code *)param2[0x60],param4),\n        returnValue != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "returnValue",
                "uVar2": "tempVar",
                "ppbVar3": "tempPtr1",
                "pbVar4": "tempPtr2",
                "unaff_r6": "tempPtr3",
                "pbVar5": "tempPtr4",
                "iVar6": "counter"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "decode_data_0000656c",
            "code": "\nundefined4 decodeData_0000656c(undefined4 input,uint *output,byte **data,undefined4 *result)\n\n{\n  int byteSequenceIndex;\n  undefined4 value;\n  code *decoderFunc;\n  uint dataLength;\n  byte *bytePointer;\n  uint tempLength;\n  undefined4 *resultPointer;\n  uint *dataPointer;\n  uint *dataEnd;\n  uint *decodeFunc;\n  int loopCount;\n  int index;\n  undefined *byteSequences [4];\n  \n  byteSequences[0] = &DAT_00007c2f;\n  byteSequences[1] = &DAT_00007c32;\n  byteSequences[2] = &DAT_00007c35;\n  decoderFunc = (code *)&UNK_00004f81;\n  if (output[6] != 3) {\n    decoderFunc = (code *)&UNK_00005fd5;\n  }\n  tempLength = output[2];\n  dataLength = tempLength - 1;\n  if (0x15c < dataLength) {\n    loopCount = tempLength - 0x15d;\n    tempLength = 0x15d;\n  }\n  if (0x15c < dataLength) {\n    output[2] = tempLength;\n  }\n  decodeFunc = output + 7;\n  if (dataLength < 0x15d) {\n    loopCount = 0;\n  }\n  *output = *output | 0xd00;\n  index = 0;\n  dataEnd = decodeFunc;\n  do {\n    byteSequenceIndex = find_byte_sequence_00006010(byteSequences[index],**data,2);\n    if (byteSequenceIndex != 0) {\n      if (index == 1) {\n        if (output[1] == 0) {\n          output[1] = 8;\n          *output = *output | 0x200;\n        }\n        dataLength = *output & 0xfffffaff;\nLAB_000065f4:\n        *output = dataLength;\n      }\n      else if (index == 2) {\n        if ((*output & 0x600) != 0x200) goto LAB_00006624;\n        output[1] = 0x10;\n        dataLength = *output | 0x100;\n        goto LAB_000065f4;\n      }\n      dataLength = output[2];\n      output[2] = dataLength - 1;\n      if (dataLength != 0) {\n        bytePointer = *data;\n        *data = bytePointer + 1;\n        dataPointer = (uint *)((int)dataEnd + 1);\n        *(byte *)dataEnd = *bytePointer;\n        bytePointer = data[1];\n        data[1] = bytePointer + -1;\n        dataEnd = dataPointer;\n        if (((int)(bytePointer + -1) < 1) &&\n           (byteSequenceIndex = (*(code *)output[0x60])(input,data), byteSequenceIndex != 0)) {\n          index = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    index = index + 1;\n  } while (index != 3);\n  if (output[1] == 0) {\n    output[1] = 10;\n  }\n  decode_data_0000687c(output[5],\"01234567]\" + (8 - output[1]));\n  index = 0;\n  while( true ) {\n    dataPointer = dataEnd;\n    if (output[2] == 0) break;\n    bytePointer = *data;\n    dataLength = (uint)*bytePointer;\n    if (*(char *)(output[5] + dataLength) == '\\0') break;\n    if ((dataLength == 0x30) && ((int)(*output << 0x14) < 0)) {\n      index = index + 1;\n      if (loopCount != 0) {\n        loopCount = loopCount + -1;\n        output[2] = output[2] + 1;\n      }\n    }\n    else {\n      *output = *output & 0xfffff6ff;\n      dataPointer = (uint *)((int)dataEnd + 1);\n      *(byte *)dataEnd = *bytePointer;\n    }\n    bytePointer = data[1];\n    data[1] = bytePointer + -1;\n    if ((int)(bytePointer + -1) < 1) {\n      byteSequenceIndex = (*(code *)output[0x60])(input,data);\n      if (byteSequenceIndex != 0) break;\n    }\n    else {\n      *data = *data + 1;\n    }\n    output[2] = output[2] - 1;\n    dataEnd = dataPointer;\n  }\nLAB_000066ca:\n  if ((int)(*output << 0x17) < 0) {\n    if (decodeFunc < dataPointer) {\n      (*(code *)output[0x5f])(input,*(byte *)((int)dataPointer + -1),data);\n      dataPointer = (uint *)((int)dataPointer + -1);\n    }\n    if (dataPointer == decodeFunc) {\n      return 1;\n    }\n  }\n  if ((*output & 0x10) == 0) {\n    *(byte *)dataPointer = 0;\n    value = (*decoderFunc)(input,decodeFunc,0,output[1]);\n    resultPointer = (undefined4 *)*result;\n    dataLength = *output;\n    *result = resultPointer + 1;\n    resultPointer = (undefined4 *)*resultPointer;\n    if ((dataLength & 0x20) == 0) {\n      if ((int)(dataLength << 0x1f) < 0) {\n        *(short *)resultPointer = (short)value;\n      }\n      else {\n        *resultPointer = value;\n      }\n    }\n    else {\n      *resultPointer = value;\n    }\n    output[3] = output[3] + 1;\n  }\n  output[4] = (uint)((int)dataPointer + output[4] + (index - (int)decodeFunc));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "decode_data_0000656c",
                "param_1": "input",
                "param_2": "output",
                "param_3": "data",
                "param_4": "result",
                "iVar1": "byteSequenceIndex",
                "uVar2": "value",
                "pcVar3": "decoderFunc",
                "uVar4": "dataLength",
                "pbVar5": "bytePointer",
                "uVar6": "tempLength",
                "puVar7": "resultPointer",
                "puVar8": "dataPointer",
                "puVar9": "dataEnd",
                "puVar10": "decodeFunc",
                "unaff_r9": "loopCount",
                "iVar11": "index",
                "local_34": "byteSequences"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *param1,undefined4 *param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 updatedValue1;\n  int index;\n  undefined4 updatedValue2;\n  ushort ushortValue;\n  uint uintValue;\n  \n  if ((param1 != (undefined4 *)0x0) && (param1[6] == 0)) {\n    initialize_memory_000042a4();\n  }\n  if (param2 == &DAT_000079b8) {\n    param2 = (undefined4 *)param1[1];\n  }\n  else if (param2 == (undefined4 *)&DAT_000079d8) {\n    param2 = (undefined4 *)param1[2];\n  }\n  else if (param2 == (undefined4 *)&DAT_00007998) {\n    param2 = (undefined4 *)param1[3];\n  }\n  ushortValue = *(ushort *)(param2 + 3);\n  param2[1] = 0;\n  uintValue = (uint)*(ushort *)(param2 + 3);\n  if ((int)(uintValue << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(uintValue << 0x1d) < 0) {\n    if ((undefined4 *)param2[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)param2[0xd] != param2 + 0x11) {\n        initialize_data_00004b34(param1);\n      }\n      param2[1] = param2[0x10];\n      param2[0xd] = 0;\n      if (param2[0x10] != 0) {\n        *param2 = param2[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(uintValue << 0x1b)) {\n      *param1 = 9;\n      ushortValue = ushortValue | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(uintValue << 0x1c) < 0) {\n      index = process_data_00004158(param1,param2,uintValue << 0x1c,uintValue,param4);\n      if (index != 0) {\n        return 0xffffffff;\n      }\n      param2[2] = 0;\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) & 0xfff7;\n      param2[6] = 0;\n    }\n    *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 4;\n  }\n  if (param2[4] == 0) {\n    update_block_data_00005700(param1,param2);\n  }\n  ushortValue = *(ushort *)(param2 + 3);\n  updatedValue1 = *(undefined2 *)(param2 + 3);\n  if ((ushortValue & 3) != 0) {\n    *(undefined2 *)(param2 + 3) = 1;\n    process_data_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(param2 + 3) = updatedValue1;\n    if ((ushortValue & 9) == 9) {\n      process_data_0000404c(param1,param2);\n    }\n  }\n  updatedValue2 = param2[4];\n  *param2 = updatedValue2;\n  index = (*(code *)param2[9])(param1,param2[8],updatedValue2,param2[5]);\n  param2[1] = index;\n  if (0 < index) {\n    return 0;\n  }\n  ushortValue = *(ushort *)(param2 + 3);\n  if (index != 0) {\n    updatedValue2 = 0;\n  }\n  else {\n    ushortValue = ushortValue | 0x20;\n  }\n  if (index != 0) {\n    param2[1] = updatedValue2;\n    ushortValue = ushortValue | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(param2 + 3) = ushortValue;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "updatedValue1",
                "iVar2": "index",
                "uVar3": "updatedValue2",
                "uVar4": "ushortValue",
                "uVar5": "uintValue"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_000043a0",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "decode_data_0000687c",
            "code": "\nbyte * decode_data_0000687c(int data_length,byte *encoded_data)\n\n{\n  byte *decoded_data;\n  uint temp_value;\n  int i;\n  uint current_byte;\n  uint index;\n  uint end_index;\n  bool is_reversed;\n  \n  current_byte = (uint)*encoded_data;\n  is_reversed = current_byte == 0x5e;\n  if (is_reversed) {\n    current_byte = (uint)encoded_data[1];\n    encoded_data = encoded_data + 2;\n  }\n  else {\n    encoded_data = encoded_data + 1;\n  }\n  i = data_length + -1;\n  do {\n    i = i + 1;\n    *(bool *)i = is_reversed;\n  } while (i != data_length + 0xff);\n  if (current_byte == 0) {\n    decoded_data = encoded_data + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      index = current_byte;\n      *(bool *)(data_length + index) = !is_reversed;\n      encoded_data = encoded_data + 1;\n      while( true ) {\n        current_byte = (uint)encoded_data[-1];\n        if (current_byte != 0x2d) break;\n        end_index = (uint)*encoded_data;\n        if ((end_index == 0x5d) || (temp_value = index, (int)end_index < (int)index)) goto LAB_000068aa;\n        do {\n          temp_value = temp_value + 1;\n          *(bool *)(data_length + temp_value) = !is_reversed;\n        } while ((int)temp_value < (int)end_index);\n        i = ~index + end_index;\n        if ((int)end_index <= (int)index) {\n          i = 0;\n        }\n        index = index + 1 + i;\n        encoded_data = encoded_data + 2;\n      }\n      decoded_data = encoded_data;\n    } while ((current_byte != 0x5d) && (decoded_data = encoded_data + -1, current_byte != 0));\n  }\n  return decoded_data;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "decode_data_0000687c",
                "param_1": "data_length",
                "param_2": "encoded_data",
                "pbVar1": "decoded_data",
                "uVar2": "temp_value",
                "iVar3": "i",
                "uVar4": "current_byte",
                "uVar5": "index",
                "uVar6": "end_index",
                "bVar7": "is_reversed"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_0000656c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "process_data_000068f0",
            "code": "\nundefined4 processData_000068f0(undefined4 data,int *buffer)\n\n{\n  int blockSize;\n  int currentSize;\n  \n  if ((int *)buffer[0xd] == buffer + 0x11) {\n    blockSize = calculate_block_size_00004bd0(data,0x400);\n    if (blockSize != 0) {\n      buffer[0xe] = 0x400;\n      buffer[0xd] = blockSize;\n      *(undefined *)(blockSize + 0x3ff) = *(undefined *)((int)buffer + 0x46);\n      *(undefined *)(blockSize + 0x3fe) = *(undefined *)((int)buffer + 0x45);\n      *(undefined *)(blockSize + 0x3fd) = *(undefined *)(buffer + 0x11);\n      *buffer = blockSize + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    currentSize = buffer[0xe];\n    blockSize = copy_bytes_if_needed_000060cc(data,(int *)buffer[0xd],currentSize << 1);\n    if (blockSize != 0) {\n      copy_bytes_to_destination_000060b0(blockSize + currentSize,blockSize,currentSize);\n      buffer[0xd] = blockSize;\n      buffer[0xe] = currentSize << 1;\n      *buffer = blockSize + currentSize;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "process_data_000068f0",
                "param_1": "data",
                "param_2": "buffer",
                "iVar1": "blockSize",
                "iVar2": "currentSize"
            },
            "calling": [],
            "called": [
                "FUN_00004bd0",
                "FUN_000060cc",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_sum_00006964",
            "code": "\nint calculateSum_00006964(undefined4 result,int array)\n\n{\n  int currentIndex;\n  \n  currentIndex = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    currentIndex = currentIndex + *(int *)(array + currentIndex);\n  }\n  return currentIndex;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_sum_00006964",
                "param_1": "result",
                "param_2": "array",
                "iVar1": "currentIndex"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "extract_and_divide_00006974",
            "code": "\nundefined8 extract_and_divide_00006974(int dividend,int divisor,int remainder,int flag)\n\n{\n  int absDivisor;\n  undefined8 result;\n  undefined array [8];\n  \n  if ((flag == 0) && (remainder == 0)) {\n    if (divisor < 0) {\n      dividend = 0;\n      divisor = -0x80000000;\n    }\n    else if (divisor != 0 || dividend != 0) {\n      divisor = 0x7fffffff;\n      dividend = -1;\n    }\n    return CONCAT44(divisor,dividend);\n  }\n  if (divisor < 0) {\n    absDivisor = -divisor - (uint)(dividend != 0);\n    if (flag < 0) {\n      result = divide_and_modulo_00006a14(-dividend,absDivisor,-remainder,-flag - (uint)(remainder != 0),array);\n      return result;\n    }\n    result = divide_and_modulo_00006a14(-dividend,absDivisor,remainder,flag,array);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (flag < 0) {\n    result = divide_and_modulo_00006a14(dividend,divisor,-remainder,-flag - (uint)(remainder != 0),array);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = divide_and_modulo_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "extract_and_divide_00006974",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "flag",
                "iVar1": "absDivisor",
                "uVar2": "result",
                "local_8": "array"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "divide_and_modulo_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong divideAndModulo_00006a14(uint dividend,uint divisor,uint quotient,uint remainder,uint *resultArray)\n\n{\n  code *software_udf;\n  uint dividendHigh;\n  int bitShiftCount;\n  uint combinedDivisor;\n  uint combinedRemainder;\n  uint divisorTop;\n  uint divisorQuotient;\n  uint divisorLow;\n  uint dividendQuotient;\n  uint quotientHigh;\n  bool carryFlag;\n  ulonglong result;\n  \n  if (remainder == 0) {\n    if (divisor < quotient) {\n      bitShiftCount = LZCOUNT(quotient);\n      divisorTop = quotient;\n      if (bitShiftCount != 0) {\n        divisorTop = quotient << bitShiftCount;\n        divisor = dividend >> (0x20U - bitShiftCount & 0xff) | divisor << bitShiftCount;\n        dividend = dividend << bitShiftCount;\n      }\n      divisorQuotient = divisorTop >> 0x10;\n      dividendQuotient = divisor / divisorQuotient;\n      combinedDivisor = dividend >> 0x10 | (divisor - divisorQuotient * dividendQuotient) * 0x10000;\n      dividendHigh = dividendQuotient * (divisorTop & 0xffff);\n      combinedRemainder = dividendQuotient;\n      if (combinedDivisor <= dividendHigh && dividendHigh - combinedDivisor != 0) {\n        carryFlag = CARRY4(divisorTop,combinedDivisor);\n        combinedDivisor = divisorTop + combinedDivisor;\n        combinedRemainder = dividendQuotient - 1;\n        if ((carryFlag == false) && (combinedDivisor <= dividendHigh && dividendHigh - combinedDivisor != 0)) {\n          combinedRemainder = dividendQuotient - 2;\n          combinedDivisor = combinedDivisor + divisorTop;\n        }\n      }\n      dividendQuotient = (combinedDivisor - dividendHigh) / divisorQuotient;\n      divisorQuotient = dividend & 0xffff | ((combinedDivisor - dividendHigh) - divisorQuotient * dividendQuotient) * 0x10000;\n      combinedDivisor = dividendQuotient * (divisorTop & 0xffff);\n      dividendHigh = dividendQuotient;\n      if (divisorQuotient <= combinedDivisor && combinedDivisor - divisorQuotient != 0) {\n        carryFlag = CARRY4(divisorTop,divisorQuotient);\n        divisorQuotient = divisorTop + divisorQuotient;\n        dividendHigh = dividendQuotient - 1;\n        if ((carryFlag == false) && (divisorQuotient <= combinedDivisor && combinedDivisor - divisorQuotient != 0)) {\n          dividendHigh = dividendQuotient - 2;\n          divisorQuotient = divisorQuotient + divisorTop;\n        }\n      }\n      divisorQuotient = divisorQuotient - combinedDivisor;\n      dividendHigh = dividendHigh | combinedRemainder << 0x10;\n      divisorTop = 0;\n    }\n    else {\n      if (quotient == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        software_udf = (code *)software_udf(0xff,0x6abc);\n        result = (*software_udf)();\n        return result;\n      }\n      bitShiftCount = LZCOUNT(quotient);\n      if (bitShiftCount == 0) {\n        divisor = divisor - quotient;\n        quotientHigh = quotient >> 0x10;\n        divisorLow = quotient & 0xffff;\n        divisorTop = 1;\n        combinedRemainder = quotient;\n      }\n      else {\n        combinedRemainder = quotient << bitShiftCount;\n        quotientHigh = combinedRemainder >> 0x10;\n        dividendHigh = divisor >> (0x20U - bitShiftCount & 0xff);\n        divisorTop = dividend >> (0x20U - bitShiftCount & 0xff) | divisor << bitShiftCount;\n        combinedDivisor = dividendHigh / quotientHigh;\n        divisorLow = combinedRemainder & 0xffff;\n        dividendQuotient = divisorTop >> 0x10 | (dividendHigh - quotientHigh * combinedDivisor) * 0x10000;\n        divisorQuotient = combinedDivisor * divisorLow;\n        dividend = dividend << bitShiftCount;\n        dividendHigh = combinedDivisor;\n        if (dividendQuotient <= divisorQuotient && divisorQuotient - dividendQuotient != 0) {\n          carryFlag = CARRY4(combinedRemainder,dividendQuotient);\n          dividendQuotient = combinedRemainder + dividendQuotient;\n          dividendHigh = combinedDivisor - 1;\n          if ((carryFlag == false) && (dividendQuotient <= divisorQuotient && divisorQuotient - dividendQuotient != 0)) {\n            dividendHigh = combinedDivisor - 2;\n            dividendQuotient = dividendQuotient + combinedRemainder;\n          }\n        }\n        combinedDivisor = (dividendQuotient - divisorQuotient) / quotientHigh;\n        divisor = divisorTop & 0xffff | ((dividendQuotient - divisorQuotient) - quotientHigh * combinedDivisor) * 0x10000;\n        divisorQuotient = combinedDivisor * divisorLow;\n        divisorTop = combinedDivisor;\n        if (divisor <= divisorQuotient && divisorQuotient - divisor != 0) {\n          carryFlag = CARRY4(combinedRemainder,divisor);\n          divisor = combinedRemainder + divisor;\n          divisorTop = combinedDivisor - 1;\n          if ((carryFlag == false) && (divisor <= divisorQuotient && divisorQuotient - divisor != 0)) {\n            divisorTop = combinedDivisor - 2;\n            divisor = divisor + combinedRemainder;\n          }\n        }\n        divisor = divisor - divisorQuotient;\n        divisorTop = divisorTop | dividendHigh << 0x10;\n      }\n      dividendQuotient = divisor / quotientHigh;\n      divisorQuotient = dividend >> 0x10 | (divisor - quotientHigh * dividendQuotient) * 0x10000;\n      dividendHigh = divisorLow * dividendQuotient;\n      combinedDivisor = dividendQuotient;\n      if (divisorQuotient <= dividendHigh && dividendHigh - divisorQuotient != 0) {\n        carryFlag = CARRY4(combinedRemainder,divisorQuotient);\n        divisorQuotient = combinedRemainder + divisorQuotient;\n        combinedDivisor = dividendQuotient - 1;\n        if ((carryFlag == false) && (divisorQuotient <= dividendHigh && dividendHigh - divisorQuotient != 0)) {\n          combinedDivisor = dividendQuotient - 2;\n          divisorQuotient = divisorQuotient + combinedRemainder;\n        }\n      }\n      dividendQuotient = (divisorQuotient - dividendHigh) / quotientHigh;\n      divisorQuotient = dividend & 0xffff | ((divisorQuotient - dividendHigh) - quotientHigh * dividendQuotient) * 0x10000;\n      divisorLow = divisorLow * dividendQuotient;\n      dividendHigh = dividendQuotient;\n      if (divisorQuotient <= divisorLow && divisorLow - divisorQuotient != 0) {\n        carryFlag = CARRY4(combinedRemainder,divisorQuotient);\n        divisorQuotient = combinedRemainder + divisorQuotient;\n        dividendHigh = dividendQuotient - 1;\n        if ((carryFlag == false) && (divisorQuotient <= divisorLow && divisorLow - divisorQuotient != 0)) {\n          dividendHigh = dividendQuotient - 2;\n          divisorQuotient = divisorQuotient + combinedRemainder;\n        }\n      }\n      divisorQuotient = divisorQuotient - divisorLow;\n      dividendHigh = dividendHigh | combinedDivisor << 0x10;\n    }\n    if (resultArray != (uint *)0x0) {\n      *resultArray = divisorQuotient >> LZCOUNT(quotient);\n      resultArray[1] = 0;\n    }\n  }\n  else if (divisor < remainder) {\n    if (resultArray != (uint *)0x0) {\n      *resultArray = dividend;\n      resultArray[1] = divisor;\n      return 0;\n    }\n    dividendHigh = 0;\n    divisorTop = 0;\n  }\n  else {\n    bitShiftCount = LZCOUNT(remainder);\n    if (bitShiftCount != 0) {\n      divisorLow = 0x20 - bitShiftCount;\n      combinedDivisor = quotient >> (divisorLow & 0xff) | remainder << bitShiftCount;\n      quotientHigh = combinedDivisor >> 0x10;\n      dividendHigh = divisor >> (divisorLow & 0xff);\n      divisorTop = dividend >> (divisorLow & 0xff) | divisor << bitShiftCount;\n      divisorQuotient = dividendHigh / quotientHigh;\n      combinedRemainder = divisorTop >> 0x10 | (dividendHigh - quotientHigh * divisorQuotient) * 0x10000;\n      dividendQuotient = divisorQuotient * (combinedDivisor & 0xffff);\n      dividend = dividend << bitShiftCount;\n      dividendHigh = divisorQuotient;\n      if (combinedRemainder <= dividendQuotient && dividendQuotient - combinedRemainder != 0) {\n        carryFlag = CARRY4(combinedDivisor,combinedRemainder);\n        combinedRemainder = combinedDivisor + combinedRemainder;\n        dividendHigh = divisorQuotient - 1;\n        if ((carryFlag == false) && (combinedRemainder <= dividendQuotient && dividendQuotient - combinedRemainder != 0)) {\n          dividendHigh = divisorQuotient - 2;\n          combinedRemainder = combinedRemainder + combinedDivisor;\n        }\n      }\n      divisorQuotient = (combinedRemainder - dividendQuotient) / quotientHigh;\n      combinedRemainder = divisorTop & 0xffff | ((combinedRemainder - dividendQuotient) - quotientHigh * divisorQuotient) * 0x10000;\n      dividendQuotient = divisorQuotient * (combinedDivisor & 0xffff);\n      divisorTop = divisorQuotient;\n      if (combinedRemainder <= dividendQuotient && dividendQuotient - combinedRemainder != 0) {\n        carryFlag = CARRY4(combinedDivisor,combinedRemainder);\n        combinedRemainder = combinedDivisor + combinedRemainder;\n        divisorTop = divisorQuotient - 1;\n        if ((carryFlag == false) && (combinedRemainder <= dividendQuotient && dividendQuotient - combinedRemainder != 0)) {\n          divisorTop = divisorQuotient - 2;\n          combinedRemainder = combinedRemainder + combinedDivisor;\n        }\n      }\n      divisorTop = divisorTop | dividendHigh << 0x10;\n      result = (ulonglong)divisorTop * (ulonglong)(quotient << bitShiftCount);\n      if (CONCAT44(combinedRemainder - dividendQuotient,dividend) < result) {\n        result = result - CONCAT44(combinedDivisor,quotient << bitShiftCount);\n        divisorTop = divisorTop - 1;\n      }\n      if (resultArray != (uint *)0x0) {\n        dividendHigh = ((combinedRemainder - dividendQuotient) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *resultArray = dividendHigh << (divisorLow & 0xff) | dividend - (uint)result >> bitShiftCount;\n        resultArray[1] = dividendHigh >> bitShiftCount;\n      }\n      return (ulonglong)divisorTop;\n    }\n    if ((remainder < divisor) || (quotient <= dividend)) {\n      carryFlag = dividend < quotient;\n      dividend = dividend - quotient;\n      divisor = (divisor - remainder) - (uint)carryFlag;\n      dividendHigh = 1;\n    }\n    else {\n      dividendHigh = 0;\n    }\n    divisorTop = 0;\n    if (resultArray != (uint *)0x0) {\n      *resultArray = dividend;\n      resultArray[1] = divisor;\n    }\n  }\n  return CONCAT44(divisorTop,dividendHigh);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "divide_and_modulo_00006a14",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "param_5": "resultArray",
                "UNRECOVERED_JUMPTABLE": "software_udf",
                "uVar1": "dividendHigh",
                "iVar2": "bitShiftCount",
                "uVar3": "combinedDivisor",
                "uVar4": "combinedRemainder",
                "uVar5": "divisorTop",
                "uVar6": "divisorQuotient",
                "uVar7": "divisorLow",
                "uVar8": "dividendQuotient",
                "uVar9": "quotientHigh",
                "bVar10": "carryFlag",
                "uVar11": "result"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 136618,
    "layers": [
        [
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_0000093c",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000dcc",
            "FUN_000010a0",
            "FUN_00001318",
            "FUN_00001360",
            "FUN_000015d0",
            "FUN_00001696",
            "FUN_00001748",
            "FUN_00001ad4",
            "FUN_00001d08",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_000023c8",
            "FUN_0000240c",
            "FUN_00002538",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_000031fc",
            "FUN_00003658",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000043a0",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005584",
            "FUN_000056b0",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_00005a58",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000064bc",
            "FUN_0000687c",
            "FUN_00006964",
            "FUN_00006a14"
        ],
        [
            "FUN_00000428",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000930",
            "FUN_00000d76",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00001348",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001cf0",
            "FUN_00001d3a",
            "FUN_00001ec4",
            "FUN_00001ff6",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_000023d0",
            "FUN_0000258c",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_00002894",
            "FUN_00002a18",
            "FUN_0000328c",
            "FUN_00003688",
            "FUN_00003e58",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_000041f4",
            "FUN_00004634",
            "FUN_00004b34",
            "FUN_00004e26",
            "FUN_00004f98",
            "FUN_0000562c",
            "FUN_000056b8",
            "FUN_00005b34",
            "FUN_00005fd8",
            "FUN_0000656c",
            "FUN_00006974"
        ],
        [
            "FUN_00000794",
            "FUN_00000d9c",
            "FUN_00001628",
            "FUN_00001734",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_00001960",
            "FUN_00001a60",
            "FUN_00001bb8",
            "FUN_00001ddc",
            "FUN_00002028",
            "FUN_000024bc",
            "FUN_000025f4",
            "FUN_00002994",
            "FUN_00002e9c",
            "FUN_0000404c",
            "FUN_0000443c",
            "FUN_00004bd0",
            "FUN_00004dee",
            "FUN_000056a0",
            "FUN_00005780",
            "FUN_00006192"
        ],
        [
            "FUN_00000db0",
            "FUN_000012b4",
            "FUN_00001688",
            "FUN_0000191c",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001f80",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_00002396",
            "FUN_00002624",
            "FUN_00002690",
            "FUN_00004248",
            "FUN_00005700",
            "FUN_000060cc",
            "FUN_000061cc"
        ],
        [
            "FUN_00001448",
            "FUN_00001b10",
            "FUN_00001eea",
            "FUN_00005e68",
            "FUN_000068f0"
        ],
        [
            "FUN_00001c84",
            "FUN_00005100"
        ],
        [
            "FUN_00001274",
            "FUN_000047e4"
        ],
        [
            "FUN_00000e64",
            "FUN_00002600",
            "FUN_00002654"
        ],
        [
            "FUN_000031e0",
            "FUN_000033f4",
            "FUN_00003478",
            "FUN_000034c0"
        ],
        [
            "FUN_00000ed8",
            "FUN_0000211c",
            "FUN_00003378"
        ],
        [
            "FUN_00002eb4"
        ],
        [
            "FUN_00004158",
            "FUN_00004314",
            "FUN_000054a8"
        ],
        [
            "FUN_000041d0",
            "FUN_000042a4"
        ],
        [
            "FUN_00005404",
            "FUN_00006768"
        ],
        [
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_000057a8",
            "FUN_00005e10"
        ],
        [
            "FUN_00002a00",
            "FUN_000033c0",
            "FUN_00003444",
            "FUN_00004418",
            "FUN_000057d2"
        ],
        [
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_000057f8"
        ],
        [
            "FUN_00004c84"
        ],
        [
            "FUN_00002a88",
            "FUN_00002f74",
            "FUN_00003524"
        ],
        [
            "FUN_00002b10"
        ],
        [
            "FUN_00002e6c"
        ],
        [
            "FUN_000023a4"
        ],
        [
            "FUN_00000f04"
        ],
        [
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000013b8",
            "FUN_00003ec4"
        ],
        [
            "FUN_00000dc0",
            "FUN_00000df4",
            "FUN_000010d4",
            "FUN_00002434",
            "FUN_00003e9e"
        ],
        [
            "FUN_00000410",
            "FUN_00000f8c",
            "FUN_0000129c",
            "FUN_00003694"
        ],
        [
            "FUN_000012e2",
            "FUN_00002ecc",
            "FUN_0000305c",
            "FUN_0000459c"
        ],
        [
            "FUN_00000e14",
            "FUN_00002f30"
        ],
        [
            "FUN_00000490",
            "FUN_00002fe0"
        ],
        [
            "FUN_0000316c",
            "FUN_00004dc8"
        ]
    ],
    "locked_functions": []
}