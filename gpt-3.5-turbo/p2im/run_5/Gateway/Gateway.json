{
    "functions": {
        "FUN_08007246": {
            "renaming": {
                "FUN_08007246": "update_value_and_do_nothing_08007246",
                "do_nothing_and_return_08004046": "do_nothing_and_return",
                "updateValueBasedOnPointer_08003748": "update_value_based_on_pointer",
                "do_nothing_08007244": "do_nothing"
            },
            "code": "void update_value_and_do_nothing_08007246(void)\n{\n  update_value_based_on_pointer();\n  do_nothing_and_return();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08007244",
                "FUN_08004046",
                "FUN_08003748"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007246",
            "calling": [],
            "imported": true,
            "current_name": "update_value_and_do_nothing_08007246"
        },
        "FUN_0800a042": {
            "renaming": {
                "sVar1": "optionCode",
                "FUN_0800a042": "process_command_line_options_0800a042",
                "iVar3": "parseResult",
                "puVar2": "pointer",
                "param_1": "returnValue",
                "param_2": "commandLineOptions",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "code": "void process_command_line_options_0800a042(int *returnValue, int commandLineOptions, undefined4 arg3, undefined4 arg4)\n{\n  short optionCode;\n  undefined *pointer;\n  int parseResult;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 in_lr;\n  \n  if ((int)((uint)*(ushort *)(commandLineOptions + 0xc) << 0x17) < 0) {\n    processReturnValue(returnValue,(int)*(short *)(commandLineOptions + 0xe),0,2);\n  }\n  *(ushort *)(commandLineOptions + 0xc) = *(ushort *)(commandLineOptions + 0xc) & 0xefff;\n  pointer = PTR_DAT_0800a0c8;\n  optionCode = *(short *)(commandLineOptions + 0xe);\n  *(undefined4 *)PTR_DAT_0800a0c8 = 0;\n  parseResult = parse_and_execute_command_line_options((int)optionCode,arg3,arg4,arg4,arg4,unaff_r4,unaff_r5,in_lr);\n  if ((parseResult == -1) && (*(int *)pointer != 0)) {\n    *returnValue = *(int *)pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a042",
            "calling": [],
            "imported": true,
            "current_name": "process_command_line_options_0800a042"
        },
        "FUN_08008694": {
            "renaming": {
                "bVar1": "data_index",
                "set_bit_at_index_08003f94": "set_bit_at_index",
                "*(undefined4 *)(PTR_DAT_080086dc + (uint)bVar1 * 4)": "*(int *)(data_ptr_array + (uint)data_index * 4)",
                "*(int *)(param_1 + 100) + (uint)*(ushort *)(param_1 + 0x6a)": "*(int *)(data_struct_ptr + 100) + (uint)*(ushort *)(data_struct_ptr + 0x6a)",
                "*(char *)(param_1 + 0x5a)": "*(char *)(data_struct_ptr + 0x5a)",
                "PTR_DAT_080086dc": "data_ptr_array",
                "*(int *)(PTR_DAT_080086e0 + (uint)bVar1 * 4)": "*(int *)(data_index_array + (uint)data_index * 4)",
                "FUN_08008694": "update_data_struct_08008694",
                "param_1": "data_struct_ptr",
                "*(byte *)(param_1 + 0x44)": "*(byte *)(data_struct_ptr + 0x44)",
                "PTR_DAT_080086e0": "data_index_array",
                "set_bits_in_byte_08003f30": "set_bits_in_byte",
                "param_2": "new_data",
                "*(undefined4 *)(PTR_DAT_080086e4 + (uint)*(byte *)(param_1 + 0x44) * 4)": "*(int *)(data_index_ptr_array + (uint)data_index * 4)",
                "validate_input_0800688e": "validate_input"
            },
            "code": "void update_data_struct_08008694(int data_struct_ptr, int new_data) {\n  if (data_struct_ptr != 0) {\n    byte data_index = *(byte *)(data_struct_ptr + 0x44);\n    *(undefined4 *)(PTR_DAT_080086dc + (uint)bVar1 * 4) = new_data;\n    *(int *)(PTR_DAT_080086e0 + (uint)bVar1 * 4) = data_struct_ptr;\n    set_bits_in_byte(0, 2, (int)*(char *)(data_struct_ptr + 0x5a));\n    set_bit_at_index((int)*(char *)(data_struct_ptr + 0x5a));\n    validate_input(*(undefined4 *)(PTR_DAT_080086e4 + (uint)*(byte *)(param_1 + 0x44) * 4), *(int *)(data_struct_ptr + 100) + (uint)*(ushort *)(data_struct_ptr + 0x6a),1);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0800688e",
                "FUN_08003f94",
                "FUN_08003f30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008694",
            "calling": [],
            "imported": true,
            "current_name": "update_data_struct_08008694"
        },
        "FUN_08002ce0": {
            "renaming": {
                "iVar1": "data_structure_address",
                "FUN_08002ce0": "initialize_object_08002ce0",
                "param_1": "object_address"
            },
            "code": "int initialize_object_08002ce0(int object_address)\n{\n  int data_structure_address = object_address + 0x44;\n  initialize_to_zero(data_structure_address + 0x40);\n  initialize_data_structure(data_structure_address, object_address, 0x40);\n  *(undefined *)(object_address + 0xc4) = 0;\n  *(undefined4 *)(object_address + 200) = 0;\n  *(undefined *)(object_address + 0x1f8) = 0;\n  set_function_pointer(data_structure_address, 0xe0, PTR_execute_function_if_initialized_08002c2c_1_08002d90, 0);\n  set_function_pointer(data_structure_address, 0x90, PTR_LAB_08002c40_1_08002d94, 0);\n  set_function_pointer(data_structure_address, 0xc0, PTR_LAB_08002c7c_1_08002d98, 0);\n  set_function_pointer(data_structure_address, 0xd0, PTR_LAB_08002c90_1_08002d9c, 0);\n  set_function_pointer(data_structure_address, 0xf4, PTR_LAB_08002c54_1_08002da0, 0);\n  set_function_pointer(data_structure_address, 0xf5, PTR_LAB_08002c68_1_08002da4, 0);\n  update_object(data_structure_address, 0x71, PTR_LAB_08002ca4_1_08002da8, 0);\n  set_values(data_structure_address, 0xf0, PTR_LAB_08002cb8_1_08002dac, 0);\n  update_data(data_structure_address, 0x79, PTR_LAB_08002e1a_1_08002db0, object_address);\n  update_values(data_structure_address, 0xf9, PTR_LAB_08002dea_1_08002db4, object_address);\n  update_values(data_structure_address, 0xff, PTR_LAB_08002cd0_1_08002db8, 0);\n  return object_address;\n}",
            "called": [
                "FUN_08003350",
                "FUN_08003370",
                "FUN_0800314e",
                "FUN_08003306",
                "FUN_08003366",
                "FUN_08003346",
                "FUN_080032bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ce0",
            "calling": [
                "FUN_08002dbc"
            ],
            "imported": true,
            "current_name": "initialize_object_08002ce0"
        },
        "FUN_08009db0": {
            "renaming": {
                "iVar3": "current_size",
                "FUN_08009db0": "find_and_initialize_array_08009db0",
                "piVar2": "current_ptr",
                "param_1": "error_code",
                "piVar1": "array_ptr",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "ppiVar4": "next_ptr_ptr"
            },
            "code": "int * find_and_initialize_array_08009db0(undefined4 *error_code, undefined4 size, undefined4 value1, undefined4 value2)\n{\n  int *array_ptr;\n  int *current_ptr;\n  int current_size;\n  int **next_ptr_ptr;\n  \n  current_size = *(int *)PTR_PTR_DAT_08009e24;\n  if (*(int *)(current_size + 0x18) == 0) {\n    initialize_array(current_size);\n  }\n  next_ptr_ptr = (int **)(current_size + 0x48);\n  do {\n    current_ptr = next_ptr_ptr[2];\n    array_ptr = next_ptr_ptr[1];\n    while (array_ptr = (int *)((int)array_ptr + -1), -1 < (int)array_ptr) {\n      if (*(short *)(current_ptr + 3) == 0) {\n        *(undefined2 *)((int)current_ptr + 0xe) = 0xffff;\n        current_ptr[0x19] = 0;\n        *(undefined2 *)(current_ptr + 3) = 1;\n        *current_ptr = 0;\n        current_ptr[2] = 0;\n        current_ptr[1] = 0;\n        current_ptr[4] = 0;\n        current_ptr[5] = 0;\n        current_ptr[6] = 0;\n        fill_array_with_value(current_ptr + 0x17, 0, 8, 1, value2);\n        current_ptr[0xd] = 0;\n        current_ptr[0xe] = 0;\n        current_ptr[0x12] = 0;\n        current_ptr[0x13] = 0;\n        return current_ptr;\n      }\n      current_ptr = current_ptr + 0x1a;\n    }\n    if (*next_ptr_ptr == (int *)0x0) {\n      array_ptr = (int *)allocate_and_initialize_memory_block(error_code, 4);\n      *next_ptr_ptr = array_ptr;\n      if (array_ptr == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    next_ptr_ptr = (int **)*next_ptr_ptr;\n  } while( true );\n}",
            "called": [
                "FUN_08009d24",
                "FUN_080091c6",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009db0",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": true,
            "current_name": "find_and_initialize_array_08009db0",
            "code_backup": "\nint * FUN_08009db0(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08009e24;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUNC_08009d50(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_array_with_value_080091c6(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_block_08009d24(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_08007244": {
            "renaming": {
                "FUN_08007244": "do_nothing_08007244"
            },
            "code": "\nvoid do_nothing_08007244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007244",
            "calling": [
                "FUN_08007246"
            ],
            "imported": true,
            "current_name": "do_nothing_08007244"
        },
        "FUN_08005188": {
            "renaming": {
                "iVar1": "input_value",
                "FUN_08005188": "process_input_08005188",
                "param_1": "input",
                "uVar3": "value_2",
                "uVar2": "value_1",
                "uVar4": "value_3"
            },
            "code": "void process_input_08005188(int *input)\n{\n  int input_value = *input;\n  uint value_1 = *(uint *)(input_value + 0x18);\n  uint value_2 = *(uint *)(input_value + 0x14);\n  uint value_3 = *(uint *)(input_value + 4);\n\n  char input_type = *(char *)((int)input + 0x3e);\n  if (input_type == '\\x10' || input_type == '@') {\n    if ((value_2 & 0x10001) == 0 || (value_3 & 0x200) == 0) {\n      if ((value_2 & DAT_080052e8) == 0 || (value_3 & 0x200) == 0) {\n        if ((value_2 & DAT_080052d4) != 0 && (value_3 & 0x200) != 0) {\n          process_input_08005188_080043a2(input);\n        }\n      }\n      else {\n        set_param_value_from_index_08004396(input);\n      }\n    }\n    else {\n      set_value_based_on_conditions_0800430c(input);\n    }\n    if ((value_1 & DAT_080052dc) == 0) {\n      if ((value_2 & DAT_080052ec) != 0 && (value_3 & 0x400) != 0 && (value_2 & DAT_080052e4) == 0) {\n        process_input_08005188_08004d6c(input);\n        return;\n      }\n      if ((value_2 & DAT_080052e4) != 0 && (value_3 & 0x200) != 0) {\n        process_data_08004e3c(input);\n        return;\n      }\n    }\n    else {\n      if ((value_2 & DAT_080052e0) != 0 && (value_3 & 0x400) != 0 && (value_2 & DAT_080052e4) == 0) {\n        process_input_08005188_08004b82(input);\n        return;\n      }\n      if ((value_2 & DAT_080052e4) != 0 && (value_3 & 0x200) != 0) {\n        process_input_08005188_08004ccc(input);\n        return;\n      }\n    }\n  }\n  else {\n    if ((value_2 & DAT_080052d4) != 0 && (value_3 & 0x200) != 0) {\n      validate_and_return_input_08004ac2();\n      return;\n    }\n    if ((value_2 & DAT_080052d8) != 0 && (value_3 & 0x200) != 0) {\n      process_command_08005084(input);\n      return;\n    }\n    if ((value_1 & DAT_080052dc) == 0) {\n      if ((value_2 & DAT_080052ec) != 0 && (value_3 & 0x400) != 0 && (value_2 & DAT_080052e4) == 0) {\n        process_data_08004a76(input);\n        return;\n      }\n      if ((value_2 & DAT_080052e4) != 0 && (value_3 & 0x200) != 0) {\n        write_byte_to_buffer_0800459c(input);\n      }\n    }\n    else {\n      if ((value_2 & DAT_080052e0) != 0 && (value_3 & 0x400) != 0 && (value_2 & DAT_080052e4) == 0) {\n        process_input_08005188_08004a24(input);\n        return;\n      }\n      if ((value_2 & DAT_080052e4) != 0 && (value_3 & 0x200) != 0) {\n        read_byte_from_buffer_0800457c(input);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004ccc",
                "FUN_08004ac2",
                "FUN_080043a2",
                "FUN_08004b82",
                "FUN_08004e3c",
                "FUN_08004a76",
                "FUN_08004a24",
                "FUN_0800430c",
                "FUN_08004d6c",
                "FUN_0800457c",
                "FUN_08004396",
                "FUN_08005084",
                "FUN_0800459c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005188",
            "calling": [],
            "imported": true,
            "current_name": "process_input_08005188"
        },
        "FUN_08002c2c": {
            "renaming": {
                "pcVar1": "function",
                "FUN_08002c2c": "execute_function_if_initialized_08002c2c",
                "param_1": "function_pointer",
                "param_2": "param_1",
                "param_3": "param_2",
                "param_4": "param_3",
                "PTR_DAT_08002c3c": "function_pointer_pointer"
            },
            "code": "void execute_function_if_initialized_08002c2c(void* function_pointer, void* param_1, void* param_2, void* param_3) {\n  void (*function)(void*, void*, void*, void*, void*) = *(void (**)(void*, void*, void*, void*, void*))PTR_DAT_08002c3c;\n  if (function != NULL) {\n    (*function)(function_pointer, param_1, param_2, param_3, NULL);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2c",
            "calling": [],
            "imported": true,
            "current_name": "execute_function_if_initialized_08002c2c"
        },
        "FUN_080072f0": {
            "renaming": {
                "FUN_080072f0": "check_bit_in_parameter_080072f0",
                "param_1": "parameter",
                "param_2": "bit",
                "param_3": "ptr1",
                "param_4": "ptr2",
                "is_param2_bit_set_in_param1_080042d4": "is_bit_set_in_parameter"
            },
            "code": "void check_bit_in_parameter_080072f0(unsigned int parameter, unsigned short bit, unsigned int ptr1, unsigned int ptr2)\n{\n  is_bit_set_in_parameter(parameter, bit, ptr1, ptr2, ptr2);\n  return;\n}",
            "called": [
                "FUN_080042d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072f0",
            "calling": [
                "FUN_08008a6c"
            ],
            "imported": true,
            "current_name": "check_bit_in_parameter_080072f0"
        },
        "FUN_08001bf8": {
            "renaming": {
                "PTR_DAT_08001c04": "buffer",
                "FUN_08001bf8": "add_character_to_data_buffer_08001bf8",
                "param_1": "buffer",
                "param_2": "character",
                "param_3": "param_3",
                "param_4": "param_4",
                "DAT_08001c04": "buffer"
            },
            "code": "void add_character_to_data_buffer_08001bf8(void* PTR_DAT_08001c04, int character, int param_3, int param_4, int param_5) {\n  add_character_to_data_buffer_08001bf8_0800288c(PTR_DAT_08001c04, character, param_3, param_4, param_5);\n  return;\n}",
            "called": [
                "FUN_0800288c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bf8",
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "imported": true,
            "current_name": "add_character_to_data_buffer_08001bf8"
        },
        "FUN_08000178": {
            "renaming": {
                "pcVar2": "next_ptr",
                "pcVar3": "current_ptr",
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "str",
                "cVar1": "current_char"
            },
            "code": "char* find_end_of_string_08000178(char* str) {\n  char current_char;\n  char* current_ptr = str;\n  do {\n    current_ptr++;\n    current_char = *current_ptr;\n  } while (current_char != '\\0');\n  return current_ptr + (-1 - (int)str);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_080032a2",
                "FUN_08008e7c",
                "FUN_08002e44"
            ],
            "imported": true,
            "current_name": "find_end_of_string_08000178"
        },
        "FUN_0800a168": {
            "renaming": {
                "iVar2": "return_value",
                "param_1": "output_value",
                "FUN_0800a168": "process_return_value_0800a168",
                "param_2": "input_param1",
                "param_3": "input_param2",
                "param_4": "input_param3",
                "puVar1": "data_pointer"
            },
            "code": "void process_return_value_0800a168(int *output_value, undefined4 input_param1, undefined4 input_param2, undefined4 input_param3)\n{\n  undefined *data_pointer;\n  int return_value;\n  data_pointer = PTR_DAT_0800a188;\n  *(undefined4 *)PTR_DAT_0800a188 = 0;\n  return_value = return_zero_08008858(input_param1, input_param2, input_param3, input_param3, input_param3);\n  if ((return_value == -1) && (*(int *)data_pointer != 0)) {\n    *output_value = *(int *)data_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08008858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a168",
            "calling": [
                "FUN_0800a020"
            ],
            "imported": true,
            "current_name": "process_return_value_0800a168"
        },
        "FUN_080069ec": {
            "renaming": {
                "puVar3": "data",
                "param_1": "input_data",
                "FUN_080069ec": "process_input_080069ec",
                "uVar2": "flags2",
                "uVar5": "flags1",
                "uVar4": "flag1_bit_0"
            },
            "code": "void process_input_080069ec(uint **input_data)\n{\n  uint *data = *input_data;\n  uint flags1 = *data;\n  uint flags2 = data[3];\n  \n  if ((flags1 & 0xf) == 0 && (flags1 & 0x20) && (flags2 & 0x20)) {\n    encode_data(input_data);\n    return;\n  }\n  \n  if ((flags1 & 0xf) == 0 || ((data[5] & 1) == 0 && (flags2 & 0x120) == 0)) {\n    if ((flags1 & 0x80) && (flags2 & 0x80)) {\n      process_data(input_data);\n      return;\n    }\n    if ((flags1 & 0x40) && (flags2 & 0x40)) {\n      set_user_input_flag(input_data);\n    }\n  }\n  else {\n    if ((flags1 & 1) && (flags2 & 0x100)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 1);\n    }\n    if ((flags1 & 4) && (data[5] & 1)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 2);\n    }\n    if ((flags1 & 2) && (data[5] & 1)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 4);\n    }\n    if ((flags1 & 8) && (data[5] & 1)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 8);\n    }\n    if (input_data[0xf] != (uint *)0x0) {\n      if ((flags1 & 0x20) && (flags2 & 0x20)) {\n        encode_data(input_data);\n      }\n      if ((uint)input_data[0xf] & 8 == 0 && (data[5] & 0x40) == 0) {\n        do_nothing(input_data);\n        input_data[0xf] = (uint *)0x0;\n        return;\n      }\n      clear_bit_flags(input_data);\n      uint *data = *input_data;\n      if ((data[5] & 0x40) == 0) {\n        do_nothing(input_data);\n        return;\n      }\n      data[5] &= 0xffffffbf;\n      if (input_data[0xd] == (uint *)0x0) {\n        do_nothing(input_data);\n        return;\n      }\n      input_data[0xd][0xd] = (uint)print_label;\n      int mode = set_mode(input_data[0xd]);\n      if (mode != 0) {\n        (*(code *)input_data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_0800694c",
                "FUN_080064b0",
                "FUN_08004050",
                "FUN_0800877c",
                "FUN_080064cc",
                "FUN_08006932"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069ec",
            "calling": [],
            "imported": true,
            "current_name": "process_input_080069ec"
        },
        "FUN_080067ac": {
            "renaming": {
                "iVar2": "result",
                "uVar1": "ptr_value",
                "param_1": "ptr_param1",
                "FUN_080067ac": "parse_parameters_080067ac",
                "param_2": "ptr_param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "int parse_parameters_080067ac(int* ptr_param1, ushort* ptr_param2, int param3, int param4)\n{\n  int result;\n  if (*(char *)((int)ptr_param1 + 0x39) != ' ')\n  {\n    result = 2;\n  }\n  else if (ptr_param2 == (ushort *)0x0 || param3 == 0)\n  {\n    result = 1;\n  }\n  else if (*(char *)(ptr_param1 + 0xe) == '\\x01')\n  {\n    result = 2;\n  }\n  else\n  {\n    *(undefined *)(ptr_param1 + 0xe) = 1;\n    ptr_param1[0xf] = 0;\n    *(undefined *)((int)ptr_param1 + 0x39) = 0x21;\n    int ptr_value = get_pointer_value_08003760();\n    *(short *)(ptr_param1 + 9) = (short)param3;\n    *(short *)((int)ptr_param1 + 0x26) = (short)param3;\n    while (*(short *)((int)ptr_param1 + 0x26) != 0)\n    {\n      *(short *)((int)ptr_param1 + 0x26) = *(short *)((int)ptr_param1 + 0x26) + -1;\n      if (ptr_param1[2] == 0x1000)\n      {\n        result = check_parameters(ptr_param1, 0x80, 0, ptr_value, param4);\n        if (result != 0)\n        {\n          return 3;\n        }\n        *(uint *)(*ptr_param1 + 4) = *ptr_param2 & 0x1ff;\n        if (ptr_param1[4] == 0)\n        {\n          ptr_param2 = ptr_param2 + 1;\n        }\n        else\n        {\n          ptr_param2 = (ushort *)((int)ptr_param2 + 1);\n        }\n      }\n      else\n      {\n        result = check_parameters(ptr_param1, 0x80, 0, ptr_value, param4);\n        if (result != 0)\n        {\n          return 3;\n        }\n        *(uint *)(*ptr_param1 + 4) = (uint)*(byte *)ptr_param2;\n        ptr_param2 = (ushort *)((int)ptr_param2 + 1);\n      }\n    }\n    result = check_parameters(ptr_param1, 0x40, 0, ptr_value, param4);\n    if (result == 0)\n    {\n      *(undefined *)((int)ptr_param1 + 0x39) = 0x20;\n      *(undefined *)(ptr_param1 + 0xe) = 0;\n    }\n    else\n    {\n      result = 3;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_080066e8",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080067ac",
            "calling": [
                "FUN_08008500"
            ],
            "imported": true,
            "current_name": "parse_parameters_080067ac"
        },
        "FUN_08008c20": {
            "renaming": {
                "*(int *)(param_1 + 0x138)": "*int_pointer",
                "param_1": "struct_address",
                "*(undefined2 *)(param_1 + 0x134)": "*short_pointer1",
                "*(undefined2 *)(param_1 + 0x136)": "*short_pointer2",
                "FUN_08008c20": "initialize_struct_08008c20",
                "*(int *)(param_1 + 0x130)": "*struct_pointer",
                "*(undefined2 *)(param_1 + 0x13c)": "*short_pointer3",
                "*(undefined2 *)(param_1 + 0x13e)": "*short_pointer4"
            },
            "code": "void initialize_struct_08008c20(int struct_address)\n{\n  int* struct_pointer = (int*)(struct_address + 0x130);\n  *struct_pointer = struct_address + 0x11;\n  short* short_pointer1 = (short*)(struct_address + 0x134);\n  *short_pointer1 = 0;\n  short* short_pointer2 = (short*)(struct_address + 0x136);\n  *short_pointer2 = 0;\n  int* int_pointer = (int*)(struct_address + 0x138);\n  *int_pointer = struct_address + 0x51;\n  short* short_pointer3 = (short*)(struct_address + 0x13c);\n  *short_pointer3 = 0;\n  short* short_pointer4 = (short*)(struct_address + 0x13e);\n  *short_pointer4 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c20",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": true,
            "current_name": "initialize_struct_08008c20"
        },
        "FUN_0800735a": {
            "renaming": {
                "undefined4": "int",
                "param_1": "value_to_find",
                "*param_2": "*array",
                "FUN_0800735a": "find_value_in_array_0800735a",
                "param_2": "array",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ find_value_in_array_0800735a(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_-DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800735a",
            "calling": [
                "FUN_0800735a",
                "FUN_08007376"
            ],
            "imported": true,
            "current_name": "find_value_in_array_0800735a"
        },
        "FUN_08000a64": {
            "renaming": {
                "iVar1": "result",
                "PTR_DAT_08000adc": "param1",
                "is_param1_in_param2_0800738a": "is_param1_in_param2",
                "PTR_DAT_08000ae0": "param2",
                "check_param_080036ac": "check_param",
                "PTR_DAT_08000ad8": "game_board",
                "PTR_DAT_08000ae8": "game_params",
                "FUN_08000a64": "check_game_board_and_set_result_08000a64",
                "PTR_DAT_08000ae4": "game_result",
                "uVar2": "index"
            },
            "code": "void check_game_board_and_set_result_08000a64(){\n  int result;\n  uint index;\n  for (index = 0; index < 60; index++) {\n    if (PTR_DAT_08000ad8[index] == -1) {\n      result = 0;\n    }\n    else {\n      result = check_param();\n      if (result == 0) {\n        result = 0;\n      }\n      else {\n        result = check_param((int)(char)PTR_DAT_08000ad8[index]);\n        if (result == 1) {\n          result = 0;\n        }\n        else {\n          result = is_PTR_DAT_08000adc_in_PTR_DAT_08000ae0((int)(char)PTR_DAT_08000ad8[index],PTR_DAT_08000adc);\n          if (result == 0) {\n            result = is_PTR_DAT_08000adc_in_PTR_DAT_08000ae0((int)(char)PTR_DAT_08000ad8[index],PTR_DAT_08000ae0);\n          }\n        }\n      }\n    }\n    if (result != 0) {\n      FUNC_080005f8(index,6);\n    }\n  }\n  *PTR_DAT_08000ae4 = 1;\n  initialize_PTR_DAT_08000ad8_with_params(PTR_DAT_08000ae8);\n  return;\n}",
            "called": [
                "FUN_08002a26",
                "FUN_080005f8",
                "FUN_080036ac",
                "FUN_0800738a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a64",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": true,
            "current_name": "check_game_board_and_set_result_08000a64"
        },
        "FUN_0800723c": {
            "renaming": {
                "get_pointer_value_08003760": "get_pointer_value_from_function_08003760",
                "FUN_0800723c": "get_pointer_value_0800723c"
            },
            "code": "void get_pointer_value_0800723c(void)\n{\n  // Get the value of the pointer\n  int pointer_value = get_pointer_value_0800723c_from_function_08003760();\n  return;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800723c",
            "calling": [
                "FUN_08008abc"
            ],
            "imported": true,
            "current_name": "get_pointer_value_0800723c"
        },
        "FUN_080043a2": {
            "renaming": {
                "param_1": "input",
                "puVar1": "flag_ptr",
                "FUN_080043a2": "process_input_080043a2"
            },
            "code": "uint32_t process_input_080043a2(uint32_t **input)\n{\n  uint32_t *flag_ptr;\n  flag_ptr = input[11];\n  if ((*(char *)((int)input + 0x3d) == '\"') && ((input[20] != (uint32_t *)0x0 || (*(char *)((int)input + 0x3e) != '@')))) {\n    if ((input[20] == (uint32_t *)0x0) && (input[4] == (uint32_t *)0xc000)) {\n      **input = **input | 0x100;\n      input[20] = (uint32_t *)((int)input[20] + 1);\n    }\n    else {\n      if (*(uint16_t *)((int)input + 0x2a) == 0) {\n        **input = **input | 0x200;\n      }\n      else if (*(uint16_t *)((int)input + 0x2a) == 1) {\n        if (flag_ptr == (uint32_t *)0xffff0000) {\n          **input = **input & 0xfffffbff;\n          flag_ptr = *input;\n          if ((flag_ptr[1] & 0x800) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (input[12] == (uint32_t *)0x12)) {\n          **input = **input & 0xfffffbff;\n          **input = **input | 0x200;\n        }\n        else if (input[11] == (uint32_t *)0x2) {\n          **input = **input | 0x400;\n        }\n        else {\n          **input = **input & 0xfffffbff;\n        }\n      }\n      else if (*(uint16_t *)((int)input + 0x2a) == 2) {\n        if (input[11] == (uint32_t *)0x2) {\n          **input = **input | 0x400;\n        }\n        else {\n          **input = **input | 0x800;\n          **input = **input & 0xfffffbff;\n        }\n        flag_ptr = *input;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **input = **input | 0x400;\n        flag_ptr = *input;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      input[20] = (uint32_t *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043a2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "process_input_080043a2"
        },
        "FUN_0800694c": {
            "renaming": {
                "sVar2": "short_var",
                "data_length": "data_length",
                "puVar3": "undefined_ptr",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "data_type": "data_type",
                "current_char": "current_char",
                "FUN_0800694c": "encode_data_0800694c"
            },
            "code": "int encode_data_0800694c(int *data)\n{\n  char current_char = *(char *)((int)data + 0x3a);\n  if (current_char != '\"') {\n    return 2;\n  }\n  int data_type = data[2];\n  int data_length = *(short *)((int)data + 0x2e);\n  data_length--;\n  if (data_type == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] += 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10]++;\n    }\n  }\n  else {\n    if (data[4] == 0) {\n      *(char *)data[10] = (char)*(undefined4 *)(*data + 4);\n      data[10]++;\n    }\n    else {\n      *(byte *)data[10] = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n      data[10]++;\n    }\n  }\n  if (data_length != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) &= 0xffffffdf;\n  *(uint *)(*data + 0xc) &= 0xfffffeff;\n  *(uint *)(*data + 0x14) &= 0xfffffffe;\n  *(char *)((int)data + 0x3a) = 0x20;\n  execute_function_based_on_index_0800870c();\n  return 0;\n}",
            "called": [
                "FUN_0800870c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800694c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": true,
            "current_name": "encode_data_0800694c"
        },
        "FUN_08006280": {
            "renaming": {
                "param_1": "bits",
                "param_2": "bit_position",
                "puVar1": "bits_pointer",
                "FUN_08006280": "update_bits_and_flags_08006280"
            },
            "code": "int update_bits_and_flags_08006280(uint **bits, int bit_position) {\n  uint *bits_pointer = *bits;\n  switch(bit_position) {\n    case 0:\n      bits_pointer[3] |= 2;\n      break;\n    case 4:\n      bits_pointer[3] |= 4;\n      break;\n    case 8:\n      bits_pointer[3] |= 8;\n      break;\n    case 12:\n      bits_pointer[3] |= 0x10;\n  }\n  update_bits_08006262(bits_pointer, bit_position, 1);\n  if (bits_pointer == PTR_080062f0) {\n    bits_pointer[0x11] |= 0x8000;\n  }\n  **bits = **bits | 1;\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006280",
            "calling": [
                "FUN_08007648"
            ],
            "imported": true,
            "current_name": "update_bits_and_flags_08006280"
        },
        "FUN_08007258": {
            "renaming": {
                "FUN_08007258": "process_flags_08007258",
                "param_1": "flag",
                "local_1c": "param2_address",
                "local_18": "param3_address",
                "param_2": "param2",
                "param_3": "param3",
                "local_20": "bit_mask",
                "local_14": "flags_address"
            },
            "code": "void process_flags_08007258(uint flag, undefined4 param2, undefined4 param3)\n{\n  uint bit_mask;\n  uint flag_value;\n  uint flags_address = DAT_080072d0 + 0x18;\n  undefined4 param2_address = &param2;\n  undefined4 param3_address = &param3;\n  uint flag_shifted = (flag << 0x18) >> 0x1c;\n  flag_value = set_flag_value(flag_shifted);\n  bit_mask = 1 << (flag & 0xf) & 0xffff;\n  uint compare = flag - 0xd & 0xff;\n  if (compare < 2) {\n    *(uint *)(DAT_080072d4 + 4) = *(uint *)(DAT_080072d4 + 4) & 0xf8ffffff | 0x4000000;\n  }\n  if ((flag == 0xf) || (flag == 0x13) || (flag == 0x14)) {\n    *(uint *)(DAT_080072d4 + 4) = *(uint *)(DAT_080072d4 + 4) & 0xf8ffffff | 0x2000000;\n  }\n  process_bits(flag_value, &bit_mask);\n}\n",
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007258",
            "calling": [
                "FUN_08008990"
            ],
            "imported": true,
            "current_name": "process_flags_08007258"
        },
        "FUN_0800a0ec": {
            "renaming": {
                "FUN_0800a0ec": "set_permissions_0800a0ec",
                "iVar2": "result",
                "param_1": "target_address",
                "param_2": "size",
                "param_3": "permissions",
                "param_4": "reserved",
                "puVar1": "ptr"
            },
            "code": "void set_permissions_0800a0ec(int *target_address, unsigned int size, unsigned int permissions, unsigned int reserved, unsigned int protection_level) {\n  undefined *ptr = PTR_DAT_0800a10c;\n  *(unsigned int *)PTR_DAT_0800a10c = 0;\n  int result = set_memory_permissions_08008846(target_address, size, permissions, reserved, protection_level);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *target_address = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008846"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a0ec",
            "calling": [
                "FUN_08009e64"
            ],
            "imported": true,
            "current_name": "set_permissions_0800a0ec"
        },
        "FUN_08008df8": {
            "renaming": {
                "FUN_08008df8": "set_values_for_object_08008df8",
                "param_1": "object_pointer",
                "param_2": "object_property_1",
                "param_3": "object_property_2",
                "param_4": "object_property_3",
                "param_5": "object_property_4"
            },
            "code": "void set_values_for_object_08008df8(undefined4 *object_pointer, undefined object_property_1, undefined object_property_2, undefined object_property_3, undefined object_property_4)\n{\n  *object_pointer = PTR_PTR_LAB_08008dbe_1_08008e10;\n  *(undefined *)(object_pointer + 1) = object_property_1;\n  *(undefined *)((int)object_pointer + 5) = object_property_2;\n  *(undefined *)((int)object_pointer + 6) = object_property_3;\n  *(undefined *)((int)object_pointer + 7) = object_property_4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008df8",
            "calling": [
                "FUN_08008e14"
            ],
            "imported": true,
            "current_name": "set_values_for_object_08008df8"
        },
        "FUN_08009f4a": {
            "renaming": {
                "FUN_08009f4a": "do_nothing_08009f4a"
            },
            "code": "\nvoid do_nothing_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f4a",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": true,
            "current_name": "do_nothing_08009f4a"
        },
        "FUN_08006c7c": {
            "renaming": {
                "iVar1": "index",
                "FUN_08006c7c": "get_value_type_08006c7c",
                "param_1": "value",
                "param_2": "data",
                "param_3": "size",
                "param_4": "min_value",
                "uVar2": "masked_index"
            },
            "code": "int get_value_type_08006c7c(int value, int* data, int size, int min_value, int max_value) {\n  int index = find_value_index(value, data, size, min_value, max_value);\n  int shifted_index = index << 12;\n  int masked_index = shifted_index >> 27;\n  if (masked_index == 3) {\n    return 8;\n  }\n  if (masked_index == 4) {\n    return 12;\n  }\n  if (masked_index == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c7c",
            "calling": [
                "FUN_08007118",
                "FUN_080071e4"
            ],
            "imported": true,
            "current_name": "get_value_type_08006c7c"
        },
        "FUN_08006b5c": {
            "renaming": {
                "FUN_08006b5c": "update_bit_08006b5c",
                "uVar1": "array_index",
                "param_1": "bit_position",
                "*(uint *)(param_2 + uVar1 * 4) & ~(1 << (param_1 & 0xf))": "bit_mask",
                "param_2": "array_ptr",
                "*(uint *)(param_2 + uVar1 * 4)": "array_element_ptr"
            },
            "code": "void update_bit_08006b5c(uint bit_position, int* array_ptr)\n{\n  uint array_index = (bit_position << 0x18) >> 0x1c;\n  uint* array_element_ptr = array_ptr + array_index;\n  uint bit_mask = ~(1 << (bit_position & 0xf));\n  *array_element_ptr = *array_element_ptr & bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b5c",
            "calling": [
                "FUN_08008990"
            ],
            "imported": true,
            "current_name": "update_bit_08006b5c"
        },
        "FUN_08007376": {
            "renaming": {
                "uVar1": "found_value",
                "FUN_08007376": "find_value_08007376",
                "param_1": "value_to_find",
                "find_value_in_array_0800735a": "search_array_for_value"
            },
            "code": "int find_value_08007376(int value_to_find)\n{\n  int found_value;\n  \n  if (value_to_find == -1) {\n    return -1;\n  }\n  found_value = search_array_for_value();\n  return found_value;\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007376",
            "calling": [
                "FUN_080077b0",
                "FUN_08006c7c",
                "FUN_08007118",
                "FUN_08006e68",
                "FUN_08006c60",
                "FUN_08008078",
                "FUN_080071e4"
            ],
            "imported": true,
            "current_name": "find_value_08007376"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "trigger_software_interrupt_08000188",
                "0x3f": "SYSTEM_CALL_VECTOR"
            },
            "code": "void trigger_software_interrupt_08000188(void)\n{\n  software_interrupt(SYSTEM_CALL_VECTOR);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [
                "FUN_0800018c"
            ],
            "imported": true,
            "current_name": "trigger_software_interrupt_08000188"
        },
        "FUN_08004f3c": {
            "renaming": {
                "PTR_LAB_080053cc_1_0800507c": "PTR_LAB_080053cc_1_0800507c",
                "check_and_set_flags_for_value_08008020": "check_and_set_flags",
                "iVar1": "mode",
                "puVar2": "flags",
                "FUN_08004f3c": "process_command_08004f3c",
                "puVar3": "data",
                "param_1": "command",
                "DAT_08005080": "DAT_08005080",
                "do_nothing_08004f3a": "do_nothing"
            },
            "code": "void process_command_08004f3c(uint **command)\n{\n  int mode;\n  uint *flags;\n  uint *data;\n  uint *counter;\n  \n  if (command[0][0x3d] - 0x29 < 2) {\n    command[0xc] = NULL;\n    command[0][0x3d] = 0x28;\n  }\n  else {\n    if ((command[0][0x3d] != '`') && ((command[0][1] & 0x800) == 0)) {\n      command[0][0x3d] = 0x20;\n    }\n    command[0xc] = NULL;\n    command[0][0x3e] = 0;\n  }\n  *command[0] &= 0xfffff7ff;\n  data = *command;\n  if ((data[1] & 0x800) == 0) {\n    if (command[0][0x3d] == '`') {\n      command[0][0x3d] = 0x20;\n      command[0x10] = NULL;\n      if ((data[5] & 0x40) != 0) {\n        flags = command[9];\n        command[9] = flags + 1;\n        *(char *)flags = (char)data[4];\n      }\n      *command[0] &= 0xfffffffe;\n      do_nothing(command);\n    }\n    else {\n      if ((data[5] & 0x40) != 0) {\n        flags = command[9];\n        command[9] = flags + 1;\n        *(char *)flags = (char)data[4];\n      }\n      check_and_set_flags(command);\n    }\n  }\n  else {\n    data[1] &= 0xfffff7ff;\n    if (command[0xd][0x21] == '\\x01') {\n      command[0xe][0xd] = (uint)PTR_LAB_080053cc_1_0800507c;\n      mode = set_mode(command[0xe]);\n      if (mode != 0) {\n        if ((command[0][5] & 0x40) != 0) {\n          flags = command[9];\n          command[9] = flags + 1;\n          *(char *)flags = (char)command[0][4];\n        }\n        *command[0] &= 0xfffffffe;\n        command[0][0x3d] = 0x20;\n        (*(code *)command[0xe][0xd])();\n      }\n    }\n    else {\n      command[0xd][0xd] = (uint)PTR_LAB_080053cc_1_0800507c;\n      mode = set_mode(command[0xd]);\n      if (mode != 0) {\n        *command[0] &= 0xfffffffe;\n        command[0][0x3d] = 0x20;\n        (*(code *)command[0xd][0xd])();\n      }\n    }\n  }\n  if ((command[0][0x3d] == '(') && ((command[0x10][0] & 4) != 0)) {\n    command[0xb] = DAT_08005080;\n    command[0xc] = NULL;\n    command[0][0x3d] = 0x20;\n    command[0][0x3e] = 0;\n    execute_valid_command(command);\n  }\n  return;\n}",
            "called": [
                "FUN_08004050",
                "FUN_08004f3a",
                "FUN_08007ff0",
                "FUN_08008020"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_08005084",
                "FUN_080052f0"
            ],
            "imported": true,
            "current_name": "process_command_08004f3c"
        },
        "FUN_080033cc": {
            "renaming": {
                "callback_1": "callback_1",
                "iVar2": "processed_data_length",
                "pcVar3": "data",
                "copy_bytes_with_bitshift_080033a8": "copy_data",
                "FUN_080033cc": "process_data_080033cc",
                "param_1": "data_pointer",
                "callback_3": "callback_3",
                "callback_2": "callback_2",
                "param_2": "param_2",
                "update_data_at_index_if_larger_than_current_08003376": "update_data_if_larger",
                "PTR_": "PTR_",
                "param_3": "param_3",
                "param_4": "param_4",
                "cVar1": "first_char",
                "DAT_": "DAT_"
            },
            "code": "void process_data_080033cc(int data_pointer, int param_2, int param_3, int param_4) {\n    char first_char = *(char *)(data_pointer + 4);\n    char *data = *(char **)(data_pointer + 4);\n    int data_length = *(int *)(data_pointer + 0x18);\n    int callback_1 = *(int *)(data_pointer + 0x68);\n    int callback_2 = *(int *)(data_pointer + 0x70);\n    int callback_3 = *(int *)(data_pointer + 0x6c);\n\n    if (first_char == 'q') {\n        if (callback_1 != 0) {\n            int processed_data_length = copy_data(data_pointer, data_length - 1, data + 1, data, param_4);\n            update_data_if_larger(data_pointer, 0, processed_data_length + 1);\n            (*(void (*)(int, int))(callback_1))(*(int *)(data_pointer + 0x40), *(int *)(data_pointer + 4) + 1);\n            return;\n        }\n    }\n    else if (first_char == 'y') {\n        if (callback_2 != 0) {\n            if (data_length < 3) {\n                (*(void (*)(int, int, int))(callback_2))(*(int *)(data_pointer + 0x34), 0, 0);\n                return;\n            }\n            int processed_data_length = copy_data(data_pointer, data_length - 3, data + 3, data, param_4);\n            update_data_if_larger(data_pointer, 0, processed_data_length + 3);\n            int data_ptr = *(int *)(data_pointer + 4);\n            (*(void (*)(int, int, int, int))(callback_2))(*(int *)(data_pointer + 0x34), *(char *)(data_ptr + 1), *(char *)(data_ptr + 2), data_ptr + 3);\n            return;\n        }\n    }\n    else if (callback_3 != 0) {\n        (*(void (*)(int, char, int, char *))(callback_3))(*(int *)(data_pointer + 0x44), first_char, data_length - 1, data + 1);\n    }\n}",
            "called": [
                "FUN_08003376",
                "FUN_080033a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033cc",
            "calling": [
                "FUN_08003474"
            ],
            "imported": true,
            "current_name": "process_data_080033cc"
        },
        "FUN_08003de4": {
            "renaming": {
                "check_and_update_status_08003b8c": "check_and_update_status",
                "iVar1": "result",
                "FUN_08003de4": "update_status_if_needed_08003de4",
                "param_1": "status"
            },
            "code": "int update_status_if_needed_08003de4(int status)\n{\n  int result;\n  if (*(char *)(status + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(status + 0x24) = 1;\n  result = check_and_update_status();\n  if (result == 0) {\n    *(uint *)(status + 0x28) = *(uint *)(status + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(status + 0x24) = 0;\n  return result;\n}",
            "called": [
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003de4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "update_status_if_needed_08003de4"
        },
        "FUN_08004f3a": {
            "renaming": {
                "FUN_08004f3a": "do_nothing_08004f3a"
            },
            "code": "\nvoid do_nothing_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3a",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": true,
            "current_name": "do_nothing_08004f3a"
        },
        "FUN_08000500": {
            "renaming": {
                "bVar2": "last_servo_index",
                "bVar1": "num_servos_attached",
                "param_1": "servo_index",
                "FUN_08000500": "process_servo_data_08000500",
                "param_2": "servo_value",
                "param_3": "data_length",
                "param_4": "undefined_param"
            },
            "code": "void process_servo_data_08000500(int servo_index, int servo_value, int data_length, undefined4 param_4)\n{\n  byte num_servos_attached = *PTR_DAT_0800056c;\n  if (num_servos_attached > 11) {\n    send_encoded_messages_to_server_and_find_end_of_string_08002f14(PTR_DAT_08000584, PTR_s_Max_servos_attached_08000580, data_length, param_4, param_4);\n    return;\n  }\n  byte last_servo_index = *PTR_DAT_08000570;\n  if (last_servo_index == 0) {\n    PTR_DAT_08000578[servo_index] = num_servos_attached;\n    *PTR_DAT_0800056c = num_servos_attached + 1;\n  }\n  else {\n    PTR_DAT_08000578[servo_index] = PTR_DAT_08000574[last_servo_index - 1];\n    *PTR_DAT_08000570 = last_servo_index - 1;\n  }\n  if ((servo_value > 0) && (data_length > 0)) {\n    process_byte_data_080025ac(PTR_DAT_0800057c + (uint)(byte)PTR_DAT_08000578[servo_index] * 3, servo_index, servo_value, data_length);\n    return;\n  }\n  process_data_and_send_to_server_08002634(PTR_DAT_0800057c + (uint)(byte)PTR_DAT_08000578[servo_index] * 3, servo_index);\n  return;\n}",
            "called": [
                "FUN_08002f14",
                "FUN_08002634",
                "FUN_080025ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000500",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": true,
            "current_name": "process_servo_data_08000500"
        },
        "FUN_08009d24": {
            "renaming": {
                "iVar2": "memory_block_size",
                "param_1": "memory_address",
                "FUN_08009d24": "allocate_and_initialize_memory_block_08009d24",
                "param_2": "num_elements",
                "puVar1": "memory_block_pointer"
            },
            "code": "undefined4 * allocate_and_initialize_memory_block_08009d24(undefined4 memory_address, int num_elements)\n{\n  undefined4 *memory_block_pointer;\n  int memory_block_size = (num_elements - 1) * 0x68;\n  memory_block_pointer = (undefined4 *) allocate_memory_block_08009270(memory_address, memory_block_size + 0x74);\n  if (memory_block_pointer != (undefined4 *) 0x0) {\n    *memory_block_pointer = 0;\n    memory_block_pointer[1] = num_elements;\n    memory_block_pointer[2] = memory_block_pointer + 3;\n    fill_array_with_value_080091c6(memory_block_pointer + 3, 0, memory_block_size + 0x68);\n  }\n  return memory_block_pointer;\n}",
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d24",
            "calling": [
                "FUN_08009db0"
            ],
            "imported": true,
            "current_name": "allocate_and_initialize_memory_block_08009d24"
        },
        "FUN_0800344a": {
            "renaming": {
                "uVar1": "num_bytes_to_initialize",
                "i": "i",
                "param_1": "data_struct_ptr",
                "FUN_0800344a": "initialize_data_struct_0800344a"
            },
            "code": "void initialize_data_struct_0800344a(int data_struct_ptr) {\n  uint num_bytes_to_initialize = *(uint *)(data_struct_ptr + 8);\n  *(undefined4 *)(data_struct_ptr + 0x10) = 0;\n  *(undefined *)(data_struct_ptr + 0xc) = 0;\n  *(undefined *)(data_struct_ptr + 0xd) = 0;\n  for (uint i = 0; i < num_bytes_to_initialize; i++) {\n    *(undefined *)(*(int *)(data_struct_ptr + 4) + i) = 0;\n  }\n  *(undefined *)(data_struct_ptr + 0x14) = 0;\n  *(undefined4 *)(data_struct_ptr + 0x18) = 0;\n  if (*(code **)(data_struct_ptr + 0x78) != (code *)0x0) {\n    (**(code **)(data_struct_ptr + 0x78))(*(undefined4 *)(data_struct_ptr + 0x48));\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800344a",
            "calling": [
                "FUN_08003474"
            ],
            "imported": true,
            "current_name": "initialize_data_struct_0800344a"
        },
        "FUN_080071e4": {
            "renaming": {
                "local_50": "value_list",
                "find_value_if_not_negative_08007320": "find_value_if_not_negative",
                "find_value_08007376": "find_value",
                "update_registers_and_return_08005e2e": "update_registers_and_return",
                "param_1": "value",
                "FUN_080071e4": "update_registers_if_value_not_negative_080071e4",
                "PTR_DAT_08007238": "PTR_DAT_08007238",
                "get_value_type_08006c7c": "get_value_type",
                "clear_bit_08006460": "clear_bit",
                "update_bits_and_flags_080063c0": "update_bits_and_flags"
            },
            "code": "void update_registers_if_value_not_negative_080071e4(int value){\n  int value_type;\n  uint found_value;\n  int value_list[17];\n  \n  value_list[0] = find_value_if_not_negative(value, PTR_DAT_08007238);\n  if ((value_list[0] != 0) && ((((value_type = get_value_type(value), value_type == 0 || (value_type == 4)) || (value_type == 8)) || ((value_type == 0xc || (value_type == 0x18)))))) {\n    found_value = find_value(value, PTR_DAT_08007238);\n    if ((found_value & 0x100000) == 0) {\n      update_bits_and_flags(value_list, value_type);\n    }\n    else {\n      clear_bit(value_list, value_type);\n    }\n    update_registers_and_return(value_list);\n  }\n  return;\n}",
            "called": [
                "FUN_08007320",
                "FUN_08006c7c",
                "FUN_08006460",
                "FUN_080063c0",
                "FUN_08005e2e",
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071e4",
            "calling": [
                "FUN_08008990"
            ],
            "imported": true,
            "current_name": "update_registers_if_value_not_negative_080071e4"
        },
        "FUN_08008e72": {
            "renaming": {
                "param_1": "function_pointer",
                "FUN_08008e72": "call_function_pointer_08008e72"
            },
            "code": "void call_function_pointer_08008e72(void* function_pointer) {\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e72",
            "calling": [],
            "imported": true,
            "current_name": "call_function_pointer_08008e72"
        },
        "FUN_080022f8": {
            "renaming": {
                "PTR_DAT_080023e8": "initial_pointer_value_ptr",
                "PTR_DAT_080023f8": "i2c_data_length_ptr",
                "PTR_DAT_080023e4": "pointer_value_ptr",
                "PTR_DAT_080023f4": "param_array_ptr",
                "PTR_DAT_080023fc": "i2c_data_ptr",
                "process_received_data_08002ed2": "process_received_data",
                "get_pointer_value_and_return_08008abc": "get_pointer_value_and_return",
                "PTR_DAT_080023ec": "max_pointer_diff_ptr",
                "FUN_080022f8": "process_data_and_send_messages_080022f8",
                "PTR_DAT_080023e0": "connection_ptr",
                "execute_function_at_address_08002ec4": "execute_function_at_address",
                "PTR_DAT_080023f0": "bit_mask_array_ptr"
            },
            "code": "void process_data_and_send_messages_080022f8(void)\n{\n  bool is_valid_param;\n  int param_value;\n  int pointer_value;\n  uint index_1;\n  uint index_2;\n  uint bit_mask;\n  undefined4 array_value;\n\n  initialize_connection();\n  while (pointer_value = execute_function_at_address(PTR_DAT_080023e0), pointer_value != 0) {\n    process_received_data(PTR_DAT_080023e0);\n  }\n  pointer_value = get_pointer_value_and_return();\n  *(int *)PTR_DAT_080023e4 = pointer_value;\n  if (*(uint *)PTR_DAT_080023ec < (uint)(pointer_value - *(int *)PTR_DAT_080023e8)) {\n    *(uint *)PTR_DAT_080023e8 = *(int *)PTR_DAT_080023e8 + *(uint *)PTR_DAT_080023ec;\n    for (index_1 = 0; index_1 < 0x3c; index_1 = (index_1 + 1) & 0xff) {\n      index_2 = index_1 - 0x2e & 0xff;\n      if (index_2 < 0xe) {\n        if (index_1 < 0x3c) {\n          param_value = (int)(char)PTR_DAT_080023f4[index_1];\n        }\n        else {\n          param_value = -1;\n        }\n        is_valid_param = check_param(param_value);\n        if (is_valid_param == false) {\n          is_valid_param = false;\n        }\n        else {\n          if (index_1 < 0x3c) {\n            param_value = (int)(char)PTR_DAT_080023f4[index_1];\n          }\n          else {\n            param_value = -1;\n          }\n          is_valid_param = check_param(param_value);\n          if (is_valid_param == true) {\n            is_valid_param = false;\n          }\n          else {\n            param_value = get_value_at_offset_from_ptr(PTR_DAT_080023e0,index_1);\n            if (param_value == 2) {\n              is_valid_param = true;\n            }\n            else {\n              is_valid_param = false;\n            }\n          }\n        }\n      }\n      else {\n        is_valid_param = false;\n      }\n      bit_mask = 1U << index_2;\n      if ((is_valid_param) && ((*(int *)PTR_DAT_080023f0 & bit_mask) != 0)) {\n        array_value = get_value_from_array(index_2);\n        send_encoded_message(PTR_DAT_080023e0,index_2,array_value);\n      }\n    }\n    if (-1 < (char)*PTR_DAT_080023f8) {\n      for (index_1 = 0; (int)index_1 < (char)*PTR_DAT_080023f8 + 1; index_1 = (index_1 + 1) & 0xff) {\n        param_value = index_1 * 0xc;\n        process_i2c_data(PTR_DAT_080023fc[param_value],*(undefined4 *)(PTR_DAT_080023fc + param_value + 4),PTR_DAT_080023fc[param_value + 8],PTR_DAT_080023fc[param_value + 9]);\n      }\n    }\n  }\n  return;\n}\n",
            "called": [
                "FUN_08008abc",
                "FUN_08001c18",
                "FUN_080036ac",
                "FUN_08000ef8",
                "FUN_08002ec4",
                "FUN_08008880",
                "FUN_08002ed2",
                "FUN_08002ef2",
                "FUN_08002fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022f8",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": true,
            "current_name": "process_data_and_send_messages_080022f8"
        },
        "FUN_080072fa": {
            "renaming": {
                "set_flag_and_update_value_08003724": "set_flag_and_update_value",
                "FUN_080072fa": "initialize_device_and_update_value_080072fa",
                "initialize_device_080035b8": "initialize_device"
            },
            "code": "void initialize_device_and_update_value_080072fa(void)\n{\n  set_flag_and_update_value();\n  initialize_device();\n  return;\n}",
            "called": [
                "FUN_08003724",
                "FUN_080035b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072fa",
            "calling": [
                "FUN_080036a2"
            ],
            "imported": true,
            "current_name": "initialize_device_and_update_value_080072fa"
        },
        "FUN_08005084": {
            "renaming": {
                "puVar2": "command_ptr",
                "puVar3": "next_command_ptr",
                "param_1": "command",
                "current_short": "current_short",
                "cVar1": "current_char",
                "FUN_08005084": "process_command_08005084"
            },
            "code": "uint process_command_08005084(uint **command)\n{\n  char current_char = *(char *)((int)command + 0x3d);\n  uint *command_ptr = *command;\n  uint *next_command_ptr;\n  short current_short;\n  if (command_ptr[1] & 0x800) {\n    if ((current_char == '\"') || (current_char == '*')) {\n      current_short = (short)*(undefined4 *)(*command[0xe] + 4);\n    }\n    else {\n      current_short = (short)*(undefined4 *)(*command[0xd] + 4);\n    }\n  }\n  if (current_short != 0) {\n    if ((command_ptr[5] & 4) != 0) {\n      next_command_ptr = command[9];\n      command[9] = (uint *)((int)next_command_ptr + 1);\n      *(char *)next_command_ptr = (char)command_ptr[4];\n      current_short--;\n    }\n    if ((command_ptr[5] & 0x40) != 0) {\n      next_command_ptr = command[9];\n      command[9] = (uint *)((int)next_command_ptr + 1);\n      *(char *)next_command_ptr = (char)command_ptr[4];\n      current_short--;\n    }\n    command[0x10] = (uint *)((uint)command[0x10] | 4);\n  }\n  if (command[0x10] == (uint *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      command[0xb] = PTR_DAT_08005184;\n      command[0xc] = (uint *)0x0;\n      *(undefined *)((int)command + 0x3d) = 0x20;\n      *(undefined *)((int)command + 0x3e) = 0;\n      execute_command_if_valid_08007ff0();\n    }\n    else if ((command[0xc] == (uint *)0x22) || (current_char == '\"')) {\n      command[0xc] = (uint *)0x0;\n      *(undefined *)((int)command + 0x3d) = 0x20;\n      *(undefined *)((int)command + 0x3e) = 0;\n      do_nothing_08004a74();\n    }\n  }\n  else {\n    process_command_08005084_08004f3c();\n  }\n  command_ptr[1] = command_ptr[1] & 0xfffff8ff;\n  *command_ptr = *command_ptr | 1;\n  *command_ptr = *command_ptr & 0xfffffbff;\n  return 0;\n}",
            "called": [
                "FUN_08004a74",
                "FUN_08004f3c",
                "FUN_08007ff0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005084",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "process_command_08005084"
        },
        "FUN_0800291c": {
            "renaming": {
                "FUN_0800291c": "initialize_array_0800291c",
                "param_1": "array",
                "puVar1": "pointer1"
            },
            "code": "void initialize_array_0800291c(undefined4 *array)\n{\n  undefined *pointer1;\n  array[1] = 0;\n  array[2] = 1000;\n  *array = function_pointer;\n  pointer1 = data_pointer;\n  *(undefined *)(array + 0x1b) = data_pointer[0xe];\n  *(undefined *)((int)array + 0x6d) = pointer1[0xf];\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800291c",
            "calling": [
                "FUN_08002948"
            ],
            "imported": true,
            "current_name": "initialize_array_0800291c"
        },
        "FUN_08002ac0": {
            "renaming": {
                "FUN_08002ac0": "check_data_and_return_if_valid_08002ac0",
                "param_1": "data_ptr",
                "check_data_08002a58": "check_data_08002a58",
                "param_2": "data_size",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void check_data_and_return_if_valid_08002ac0(undefined4 data_ptr, undefined4 data_size, undefined4 param_3, undefined4 param_4) {\n  check_data_08002a58(data_ptr, 1, data_size, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08002a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ac0",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": true,
            "current_name": "check_data_and_return_if_valid_08002ac0"
        },
        "FUN_08003346": {
            "renaming": {
                "FUN_08003346": "update_data_08003346",
                "param_1": "base_address",
                "*(undefined4 *)(param_1 + 0x70)": "*(int *)(base_address + 112)",
                "param_2": "value_to_check",
                "param_3": "new_value_1",
                "*(undefined4 *)(param_1 + 0x34)": "*(int *)(base_address + 52)",
                "param_4": "new_value_2"
            },
            "code": "void update_data_08003346(int base_address, int value_to_check, int new_value_1, int new_value_2)\n{\n  if (value_to_check == 121) {\n    *(int *)(base_address + 112) = new_value_1;\n    *(int *)(base_address + 52) = new_value_2;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003346",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": true,
            "current_name": "update_data_08003346"
        },
        "FUN_080032bc": {
            "renaming": {
                "uVar1": "leading_zeroes_count",
                "FUN_080032bc": "initialize_data_structure_080032bc",
                "param_1": "data_structure",
                "param_2": "parameter_1",
                "param_3": "parameter_2"
            },
            "code": "void initialize_data_structure_080032bc(int* data_structure, int parameter_1, int parameter_2)\n{\n  int leading_zeroes_count;\n  data_structure[1] = parameter_1;\n  data_structure[2] = parameter_2;\n  data_structure[3] = 0;\n  data_structure[4] = 0;\n  data_structure[5] = 0;\n  data_structure[6] = 0;\n  data_structure[7] = 0;\n  data_structure[8] = 0;\n  data_structure[9] = 0;\n  data_structure[10] = 0;\n  data_structure[11] = 0;\n  data_structure[12] = 0;\n  data_structure[13] = 0;\n  data_structure[14] = 0;\n  data_structure[15] = 0;\n  data_structure[16] = 0;\n  data_structure[17] = 0;\n  data_structure[18] = 0;\n  data_structure[19] = 0;\n  data_structure[20] = 0;\n  data_structure[21] = 0;\n  data_structure[22] = 0;\n  data_structure[23] = 0;\n  data_structure[24] = 0;\n  data_structure[25] = 0;\n  data_structure[26] = 0;\n  data_structure[27] = 0;\n  data_structure[28] = 0;\n  data_structure[29] = 0;\n  data_structure[30] = 0;\n  data_structure[31] = 0;\n  data_structure[32] = 0;\n  data_structure[33] = 0;\n  data_structure[34] = 0;\n  data_structure[35] = 0;\n  data_structure[36] = 0;\n  data_structure[37] = 0;\n  data_structure[38] = 0;\n  data_structure[39] = 0;\n  data_structure[40] = 0;\n  data_structure[41] = 0;\n  data_structure[42] = 0;\n  data_structure[43] = 0;\n  data_structure[44] = 0;\n  data_structure[45] = 0;\n  data_structure[46] = 0;\n  data_structure[47] = 0;\n  data_structure[48] = 0;\n  data_structure[49] = 0;\n  data_structure[50] = 0;\n  data_structure[51] = 0;\n  data_structure[52] = 0;\n  data_structure[53] = 0;\n  data_structure[54] = 0;\n  data_structure[55] = 0;\n  data_structure[56] = 0;\n  data_structure[57] = 0;\n  data_structure[58] = 0;\n  data_structure[59] = 0;\n  data_structure[60] = 0;\n  data_structure[61] = 0;\n  data_structure[62] = 0;\n  data_structure[63] = 0;\n  leading_zeroes_count = count_leading_zeroes(parameter_1);\n  data_structure[0] = (char)(leading_zeroes_count >> 5);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032bc",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": true,
            "current_name": "initialize_data_structure_080032bc"
        },
        "FUN_08003106": {
            "renaming": {
                "param_1": "message_buffer",
                "FUN_08003106": "send_message_08003106",
                "param_2": "message_type",
                "param_3": "message_data",
                "param_4": "message_length",
                "puVar1": "function_ptr"
            },
            "code": "void send_message_08003106(uint32_t *message_buffer,uint32_t message_type,uint32_t message_data,uint32_t message_length)\n{\n  uint32_t *function_ptr;\n  function_ptr = (uint32_t *)*message_buffer;\n  if (function_ptr != (uint32_t *)0x0) {\n    (**(void (**)(uint32_t *, uint32_t)) *function_ptr)(function_ptr, 0xf0);\n    (***(void (***)(uint32_t *)) (uint32_t *)*message_buffer)((uint32_t *)*message_buffer, 0x6f);\n    (***(void (***)(uint32_t *)) (uint32_t *)*message_buffer)((uint32_t *)*message_buffer, message_type);\n    encode_message_0800307a(message_buffer, message_data, message_length, message_data);\n    (***(void (***)(uint32_t *)) (uint32_t *)*message_buffer)((uint32_t *)*message_buffer, 0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003106",
            "calling": [
                "FUN_08003158"
            ],
            "imported": true,
            "current_name": "send_message_08003106"
        },
        "FUN_080077b0": {
            "renaming": {
                "FUN_080077b0": "FUNC_080077b0"
            },
            "code": "\nvoid FUNC_080077b0(int *param_1,int param_2,int param_3,int param_4,undefined param_5)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  uint local_38;\n  uint local_34;\n  uint local_30;\n  undefined4 local_2c;\n  \n  if (param_1 != (int *)0x0) {\n    piVar9 = param_1 + 1;\n    iVar2 = find_value_if_not_negative_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n    iVar3 = find_value_if_not_negative_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n    if ((iVar2 == 0) || (iVar3 == 0)) {\n      process_data_080098d8(PTR_s_ERROR__at_least_one_I2C_pin_has_n_08007a88);\n    }\n    else {\n      iVar3 = find_nonzero_value_080073ae(iVar2,iVar3);\n      *param_1 = iVar3;\n      iVar2 = DAT_08007a7c;\n      if (iVar3 == 0) {\n        process_data_080098d8(PTR_s_ERROR__I2C_pins_mismatch_08007a8c);\n      }\n      else {\n        if (iVar3 == DAT_08007a7c) {\n          *(uint *)(DAT_08007a7c + 0x1bc1c) = *(uint *)(DAT_08007a7c + 0x1bc1c) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) & 0xffdfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x1f;\n          *(undefined *)((int)param_1 + 0x5b) = 0x20;\n          *(int **)PTR_DAT_08007a90 = piVar9;\n        }\n        iVar2 = DAT_08007a80;\n        if (*param_1 == DAT_08007a80) {\n          *(uint *)(DAT_08007a80 + 0x1b81c) = *(uint *)(DAT_08007a80 + 0x1b81c) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) & 0xffbfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x21;\n          *(undefined *)((int)param_1 + 0x5b) = 0x22;\n          *(int **)(PTR_DAT_08007a90 + 4) = piVar9;\n        }\n        uVar4 = set_flag_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a78;\n        local_38 = 1 << ((int)*(char *)((int)param_1 + 0x59) & 0xfU) & 0xffff;\n        uVar5 = find_value_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n        uVar6 = find_value_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = find_value_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = find_value_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007d4c;\n        uVar5 = DAT_08007a94;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000001;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000002;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000004;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000300;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000c00;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7001000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7008000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        process_bits_080040e8(uVar4,&local_38,uVar7,uVar8);\n        uVar4 = set_flag_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a74;\n        local_38 = 1 << ((int)*(char *)(param_1 + 0x16) & 0xfU) & 0xffff;\n        uVar5 = find_value_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n        uVar6 = find_value_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = find_value_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = find_value_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007e70;\n        uVar5 = DAT_08007d4c;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000001;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000002;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000004;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000300;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000c00;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7001000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7008000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        process_bits_080040e8(uVar4,&local_38,uVar7,uVar8);\n        param_1[1] = *param_1;\n        param_1[2] = param_2;\n        param_1[3] = 0;\n        param_1[4] = param_4;\n        param_1[7] = 0xff;\n        param_1[5] = param_3;\n        param_1[6] = 0;\n        param_1[8] = 0;\n        param_1[9] = 0;\n        *(undefined *)((int)param_1 + 0x41) = 0;\n        set_bits_in_byte_08003f30((int)*(char *)((int)param_1 + 0x5a),0,1);\n        set_bit_at_index_08003f94((int)*(char *)((int)param_1 + 0x5a));\n        set_bits_in_byte_08003f30((int)*(char *)((int)param_1 + 0x5b),0,1);\n        set_bit_at_index_08003f94((int)*(char *)((int)param_1 + 0x5b));\n        calculate_value_080045c0(piVar9);\n        *(undefined *)((int)param_1 + 0x5d) = param_5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080098d8",
                "FUN_080040e8",
                "FUN_08007320",
                "FUN_08006bb8",
                "FUN_080073ae",
                "FUN_08003f30",
                "FUN_08003f94",
                "FUN_080045c0",
                "FUN_08007376"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080077b0",
            "calling": [
                "FUN_08002968"
            ],
            "imported": true,
            "current_name": "FUNC_080077b0"
        },
        "FUN_08007708": {
            "renaming": {
                "FUN_08007708": "set_flags_and_return_08007708",
                "set_flags_08007438": "set_flags"
            },
            "code": "void set_flags_and_return_08007708(void)\n{\n  set_flags();\n  return;\n}",
            "called": [
                "FUN_08007438"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007708",
            "calling": [
                "FUN_08006060"
            ],
            "imported": true,
            "current_name": "set_flags_and_return_08007708"
        },
        "FUN_0800018c": {
            "renaming": {
                "PTR_DAT_080001a4": "interrupt_flag",
                "uVar1": "result",
                "trigger_software_interrupt_08000188": "trigger_interrupt",
                "param_1": "interrupt_type",
                "param_2": "param1",
                "FUN_0800018c": "handle_interrupt_0800018c",
                "param_3": "param2",
                "param_4": "param3"
            },
            "code": "int handle_interrupt_0800018c(int interrupt_type, int param1, int param2, int param3, int param4) {\n  int PTR_DAT_080001a4 = *(int *)PTR_DAT_080001a4;\n  if (PTR_DAT_080001a4 != 0) {\n    return 0;\n  }\n  int result = trigger_software_interrupt_08000188(interrupt_type, param1, param2, param3, param4);\n  return result;\n}",
            "called": [
                "FUN_08000188"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800018c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "handle_interrupt_0800018c"
        },
        "FUN_08003f94": {
            "renaming": {
                "param_1": "index",
                "FUN_08003f94": "set_bit_at_index_08003f94",
                "DAT_08003fac": "data"
            },
            "code": "void set_bit_at_index_08003f94(uint index) {\n  if (index >= 0) {\n    int* DAT_08003fac = DAT_08003fac;\n    int bit_index = index & 0x1f;\n    int int_index = index >> 5;\n    DAT_08003fac[int_index] = 1 << bit_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_08008694",
                "FUN_0800863c",
                "FUN_080077b0",
                "FUN_08007648"
            ],
            "imported": true,
            "current_name": "set_bit_at_index_08003f94"
        },
        "FUN_08008c44": {
            "renaming": {
                "execute_assertion_with_params_and_stack_pointer_080090cc": "execute_assertion",
                "uRam08008cf0": "input_pointer",
                "bVar1": "flag_value",
                "iVar2": "num_flags_set",
                "FUNC_08008078": "set_flags",
                "uRam08008cf8": "stack_pointer_2",
                "param_1": "flags_index",
                "PTR_DAT_08008d14": "flag_pointer",
                "uRam08008cf4": "stack_pointer_1",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "process_input_0800863c": "process_input",
                "param_2": "flags",
                "param_3": "value",
                "FUN_08008c44": "process_flags_08008c44",
                "extraout_r1": "jump_table_index",
                "uRam08008cfc": "assertion_pointer"
            },
            "code": "void process_flags_08008c44(int flags_index, int value, byte flags) {\n  int num_flags_set = 0;\n  int extraout_r1;\n  byte flag_value;\n  int jump_table_index;\n  int stack_pointer[3];\n  int (*jump_table)(int, int, int *);\n  int *param_1 = (int *)(flags_index + 0x11c);\n  byte *param_2 = (byte *)(flags_index + 0x140);\n  *param_1 = value;\n  *param_2 = flags;\n  flag_value = flags & 7;\n  if (flag_value == 4) {\n    num_flags_set = 7;\n  }\n  else if (flag_value == 6) {\n    num_flags_set = 8;\n  }\n  else if (flag_value == 2) {\n    num_flags_set = 6;\n  }\n  if ((flags & 0x30) == 0x30) {\n    *(int *)(flags_index + 0x128) = 0x600;\n    num_flags_set++;\n  }\n  else if ((flags & 0x20) == 0) {\n    *(int *)(flags_index + 0x128) = 0;\n  }\n  else {\n    *(int *)(flags_index + 0x128) = 0x400;\n    num_flags_set++;\n  }\n  if ((flags & 8) == 0) {\n    *(int *)(flags_index + 0x124) = 0;\n  }\n  else {\n    *(int *)(flags_index + 0x124) = 0x2000;\n  }\n  if (num_flags_set == 8) {\n    *(int *)(flags_index + 0x120) = 0;\n  }\n  else if (num_flags_set == 9) {\n    *(int *)(flags_index + 0x120) = 0x1000;\n  }\n  else {\n    num_flags_set = 0;\n  }\n  if (num_flags_set != 0) {\n    set_flags(flags_index + 0xd4);\n    process_input(flags_index + 0xd4, uRam08008cf0);\n    return;\n  }\n  jump_table = (int (*)(int, int, int *))0x8008cee;\n  execute_assertion_with_params_and_stack_pointer_080090cc(uRam08008cfc, 299, uRam08008cf8, uRam08008cf4);\n  if (extraout_r1 < 0x3c) {\n    flag_value = PTR_DAT_08008d14[extraout_r1];\n  }\n  else {\n    flag_value = 0xff;\n  }\n  jump_table_index = 0x08008d0c;\n  jump_table_index += flag_value * 4;\n  jump_table = (int (*)(int, int, int *))jump_table[jump_table_index];\n  jump_table(0, extraout_r1, stack_pointer);\n  return;\n}",
            "called": [
                "FUN_0800863c",
                "FUN_08008078",
                "FUN_080090cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c44",
            "calling": [
                "FUN_08003048"
            ],
            "imported": true,
            "current_name": "process_flags_08008c44"
        },
        "FUN_08002a26": {
            "renaming": {
                "param_1": "board",
                "param_2": "board_size",
                "PTR_": "board",
                "param_3": "param_3",
                "param_4": "param_4",
                "DAT_": "data",
                "FUN_08002a26": "initialize_game_board_with_params_08002a26"
            },
            "code": "void initialize_game_board_with_params_08002a26(void* PTR_, int PTR__size, void* param_3, void* param_4, void* param_5) {\n  initialize_game_PTR__08002a1c(PTR_, PTR__size, param_3, param_4, param_5);\n  return;\n}",
            "called": [
                "FUN_08002a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a26",
            "calling": [
                "FUN_08000a64"
            ],
            "imported": true,
            "current_name": "initialize_game_board_with_params_08002a26"
        },
        "FUN_0800430c": {
            "renaming": {
                "param_1[0x14]": "param_array[0x14]",
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf1": "(uint)(param_array[0x11] << 0x10) >> 0x17 & 6 | 0xf1",
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf0": "(uint)(param_array[0x11] << 0x10) >> 0x17 & 6 | 0xf0",
                "param_1": "param_array",
                "*(char *)((int)param_1 + 0x3e)": "condition",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)param_array + 0x3d)",
                "param_1[0x11]": "param_array[0x11]",
                "0xfe": "0xfe",
                "0xffU": "0xffU",
                "1": "1",
                "FUN_0800430c": "set_value_based_on_conditions_0800430c",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(*param_array + 0x10)",
                "0x4000": "0x4000"
            },
            "code": "int set_value_based_on_conditions_0800430c(int *param_array)\n{\n    int condition = *(char *)((int)param_array + 0x3e);\n    int value_to_set;\n    \n    if (condition == '@') {\n        value_to_set = param_array[0x14] == 0 ? param_array[0x11] & 0xfe : param_array[0x11] & 0xffU | 1;\n    }\n    else if (param_array[4] == 0x4000) {\n        value_to_set = *(char *)((int)param_array + 0x3d) == '!' ? param_array[0x11] & 0xfe : param_array[0x11] & 0xffU | 1;\n    }\n    else if (param_array[0x14] == 0) {\n        value_to_set = (uint)(param_array[0x11] << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else {\n        value_to_set = (uint)(param_array[0x11] << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    \n    *(uint *)(*param_array + 0x10) = value_to_set;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800430c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "set_value_based_on_conditions_0800430c"
        },
        "FUN_08006060": {
            "renaming": {
                "param_1": "data_array",
                "PTR_": "",
                "DAT_": "",
                "FUN_08006060": "process_data_08006060"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ process_data_08006060(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_NDAT_PDAT_TDAT_RDAT__DAT_UDAT_PDAT_TDAT_RDAT__DAT_LDAT_PDAT_TDAT_RDAT__DAT_LDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_\"DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_\"DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "FUN_08007708",
                "FUN_08005fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006060",
            "calling": [
                "FUN_08007648"
            ],
            "imported": true,
            "current_name": "process_data_08006060"
        },
        "FUN_08003350": {
            "renaming": {
                "FUN_08003350": "update_values_08003350",
                "*(undefined4 *)(param_1 + 0x74)": "*(undefined4 *)(struct_address + 116)",
                "param_1": "struct_address",
                "*(undefined4 *)(param_1 + 0x38)": "*(undefined4 *)(struct_address + 56)",
                "param_2": "value",
                "param_3": "first_param",
                "*(undefined4 *)(param_1 + 0x78)": "*(undefined4 *)(struct_address + 120)",
                "param_4": "second_param",
                "*(undefined4 *)(param_1 + 0x48)": "*(undefined4 *)(struct_address + 72)"
            },
            "code": "void update_values_08003350(int struct_address, int value, undefined4 first_param, undefined4 second_param)\n{\n  if (value == 249) {\n    *(undefined4 *)(struct_address + 116) = first_param;\n    *(undefined4 *)(struct_address + 56) = second_param;\n    return;\n  }\n  if (value != 255) {\n    return;\n  }\n  *(undefined4 *)(struct_address + 120) = first_param;\n  *(undefined4 *)(struct_address + 72) = second_param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003350",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": true,
            "current_name": "update_values_08003350"
        },
        "FUN_08009698": {
            "renaming": {
                "FUN_08009698": "FUNC_08009698"
            },
            "code": "\nuint FUNC_08009698(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08009852;\n          if (bVar1 != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\nLAB_080097e2:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08009778:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080096c8;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_080096e8;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_080096e8:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080097be;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08009728:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_0800974e:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_0800975c;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_0800975c:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08009778;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_0800970e:\n            puVar5 = PTR_s_0123456789abcdef_080098d0;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_0800974e;\n          if (bVar1 == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08009728;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_char_in_string_08009f2c(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_0800983e;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_0800983e:\n    *puVar3 = uVar6;\n  }\nLAB_08009852:\n  param_2[4] = 0;\nLAB_080097be:\n  iVar2 = calculate_value_080095a8(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080097d2:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080097d2;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08009f2c",
                "FUN_080095a8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009698",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": true,
            "current_name": "FUNC_08009698"
        },
        "FUN_08006186": {
            "renaming": {
                "FUN_08006186": "update_params_and_flags_08006186",
                "*(uint *)(*param_1 + 0x18)": "flag_register_value",
                "*(int *)(param_2 + 0x10)": "update_value",
                "param_1": "param_array",
                "*(char *)((int)param_1 + 0x3d)": "temp_value",
                "*param_1": "param_value",
                "param_2": "param_index",
                "param_3": "update_type",
                "*(char *)(param_1 + 0xf)": "flag_value"
            },
            "code": "int update_params_and_flags_08006186(int *param_array, int param_index, int update_type) {\n  int flag_value = *(char *)(param_array + 0xf);\n  if (flag_value != 1) {\n    *(char *)(param_array + 0xf) = 1;\n    *(char *)((int)param_array + 0x3d) = 2;\n    switch(update_type) {\n      case 0:\n        update_flags_and_registers_08005cec(*param_array);\n        *(uint *)(*param_array + 0x18) |= 8;\n        *(uint *)(*param_array + 0x18) &= 0xfffffffb;\n        *(uint *)(*param_array + 0x18) |= *(uint *)(param_index + 0x10);\n        break;\n      case 4:\n        set_params_080060c4(*param_array);\n        *(uint *)(*param_array + 0x18) |= 0x800;\n        *(uint *)(*param_array + 0x18) &= 0xfffffbff;\n        *(uint *)(*param_array + 0x18) |= *(int *)(param_index + 0x10) << 8;\n        break;\n      case 8:\n        update_data_08005d48(*param_array);\n        *(uint *)(*param_array + 0x1c) |= 8;\n        *(uint *)(*param_array + 0x1c) &= 0xfffffffb;\n        *(uint *)(*param_array + 0x1c) |= *(uint *)(param_index + 0x10);\n        break;\n      case 0xc:\n        update_values_08005dac(*param_array);\n        *(uint *)(*param_array + 0x1c) |= 0x800;\n        *(uint *)(*param_array + 0x1c) &= 0xfffffbff;\n        *(uint *)(*param_array + 0x1c) |= *(int *)(param_index + 0x10) << 8;\n        break;\n    }\n    *(char *)((int)param_array + 0x3d) = 1;\n    *(char *)(param_array + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}",
            "called": [
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec",
                "FUN_08005dac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006186",
            "calling": [
                "FUN_08007118"
            ],
            "imported": true,
            "current_name": "update_params_and_flags_08006186"
        },
        "FUN_08007710": {
            "renaming": {
                "FUN_08007710": "update_registers_and_return_08007710"
            },
            "code": "void update_registers_and_return_08007710(void)\n{\n  update_registers_080074e0();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007710",
            "calling": [
                "FUN_08005df4"
            ],
            "imported": true,
            "current_name": "update_registers_and_return_08007710"
        },
        "FUN_08003474": {
            "renaming": {
                "bVar1": "byte_value",
                "FUN_08003474": "process_data_08003474",
                "param_1": "index",
                "param_2": "data"
            },
            "code": "void process_data_08003474(uint32_t index, uint32_t data)\\n{\\n    uint8_t byte_value;\\n    if (*(char *)(index + 0x14) != \"\\0\") {\\n        if (data != 0xf7) {\\n            update_data_at_index_if_larger_than_current(index, data, *(uint32_t *)(index + 0x18));\\n            *(uint32_t *)(index + 0x18) = *(uint32_t *)(index + 0x18) + 1;\\n            return;\\n        }\\n        *(uint8_t *)(index + 0x14) = 0;\\n        process_data_08003474();\\n        return;\\n    }\\n    if ((*(uint32_t *)(index + 0x10) == 0) || (0x7f < (int)data)) {\\n        if ((int)data < 0xf0) {\\n            *(uint8_t *)(index + 0xd) = (uint8_t)data & 0xf;\\n            data = data & 0xf0;\\n        }\\n        if (data == 0xf0) {\\n            *(uint8_t *)(index + 0x14) = 1;\\n            *(uint32_t *)(index + 0x18) = 0;\\n            return;\\n        }\\n        if (data < 0xf1) {\\n            if (data != 0xc0) {\\n                if (data < 0xc1) {\\n                    if (data != 0x90) {\\n                        return;\\n                    }\\n                }\\n                else {\\n                    if (data == 0xd0) goto LAB_0800359c;\\n                    if (data != 0xe0) {\\n                        return;\\n                    }\\n                }\\nLAB_08003586:\\n                *(uint32_t *)(index + 0x10) = 2;\\n                *(uint8_t *)(index + 0xc) = (uint8_t)data;\\n                return;\\n            }\\nLAB_0800359c:\\n            *(uint32_t *)(index + 0x10) = 1;\\n            *(uint8_t *)(index + 0xc) = (uint8_t)data;\\n            return;\\n        }\\n        if (data != 0xf9) {\\n            if (0xf9 < data) {\\n                if (data == 0xff) {\\n                    initialize_data_struct(index);\\n                    return;\\n                }\\n                return;\\n            }\\n            if (1 < data - 0xf4) {\\n                return;\\n            }\\n            goto LAB_08003586;\\n        }\\n        if (*(void (**)(uint32_t))(index + 0x74) != (void (*)(uint32_t))0x0) {\\n            (**(void (**)(uint32_t))(index + 0x74))(*(uint32_t *)(index + 0x38));\\n        }\\n    }\\n    else {\\n        *(uint32_t *)(index + 0x10) = *(uint32_t *)(index + 0x10) + -1;\\n        update_data_at_index_if_larger_than_current();\\n        if ((*(uint32_t *)(index + 0x10) == 0) && (byte_value = *(uint8_t *)(index + 0xc), byte_value != 0)) {\\n            if (byte_value == 0xd0) {\\n                if (*(void (**)(uint32_t, uint8_t, uint8_t *))(index + 0x58) != (void (*)(uint32_t, uint8_t, uint8_t *))0x0) {\\n                    (**(void (**)(uint32_t, uint8_t, uint8_t *))(index + 0x58))(*(uint32_t *)(index + 0x28), *(uint8_t *)(index + 0xd), **(uint8_t ***)(index + 4));\\n                }\\n            }\\n            else if (byte_value < 0xd1) {\\n                if (byte_value == 0x90) {\\n                    if (*(void (**)(uint32_t, uint8_t, uint32_t))(index + 0x50) != (void (*)(uint32_t, uint8_t, uint32_t))0x0) {\\n                        (**(void (**)(uint32_t, uint8_t, uint32_t))(index + 0x50))(*(uint32_t *)(index + 0x20), *(uint8_t *)(index + 0xd), (*(uint8_t **)(index + 4))[1] + (uint32_t)**(uint8_t **)(index + 4) * 0x80);\\n                    }\\n                }\\n                else if ((byte_value == 0xc0) && (*(void (**)(uint32_t, uint8_t, uint8_t *))(index + 0x54) != (void (*)(uint32_t, uint8_t, uint8_t *))0x0)) {\\n                    (**(void (**)(uint32_t, uint8_t, uint8_t *))(index + 0x54))(*(uint32_t *)(index + 0x24), *(uint8_t *)(index + 0xd), **(uint8_t ***)(index + 4));\\n                }\\n            }\\n            else if (byte_value == 0xf4) {\\n                if (*(void (**)(uint32_t, uint8_t, uint8_t *))(index + 0x5c) != (void (*)(uint32_t, uint8_t, uint8_t *))0x0) {\\n                    (**(void (**)(uint32_t, uint8_t, uint8_t *))(index + 0x5c))(*(uint32_t *)(index + 0x2c), (*(uint8_t **)(index + 4))[1], **(uint8_t ***)(index + 4));\\n                }\\n            }\\n            else if (byte_value == 0xf5) {\\n                if (*(void (**)(uint32_t, uint8_t, uint8_t *))(index + 0x60) != (void (*)(uint32_t, uint8_t, uint8_t *))0x0) {\\n                    (**(void (**)(uint32_t, uint8_t, uint8_t *))(index + 0x60))(*(uint32_t *)(index + 0x30), (*(uint8_t **)(index + 4))[1], **(uint8_t ***)(index + 4));\\n                }\\n            }\\n            else if ((byte_value == 0xe0) && (*(void (**)(uint32_t, uint8_t, uint8_t *))(index + 0x4c) != (void (*)(uint32_t, uint8_t, uint8_t *))0x0)) {\\n                (**(void (**)(uint32_t, uint8_t, uint8_t *))(index + 0x4c))(*(uint32_t *)(index + 0x1c), *(uint8_t *)(index + 0xd), (*(uint8_t **)(index + 4))[1] + (uint32_t)**(uint8_t **)(index + 4) * 0x80);\\n            }\\n            *(uint8_t *)(index + 0xc) = 0;\\n            return;\\n        }\\n    }\\n    return;\\n}",
            "called": [
                "FUN_08003376",
                "FUN_0800344a",
                "FUN_080033cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08002ed2"
            ],
            "imported": true,
            "current_name": "process_data_08003474"
        },
        "FUN_08006b7c": {
            "renaming": {
                "DAT_08006bac": "data_3",
                "FUN_08006b7c": "get_data_at_index_08006b7c",
                "param_1": "index",
                "DAT_08006ba8": "data_2",
                "DAT_08006bb4": "data_1",
                "DAT_08006ba4": "data_0",
                "DAT_08006bb0": "data_4"
            },
            "code": "int get_data_at_index_08006b7c(int index) {\n  switch(index) {\n    case 0:\n      return DAT_08006ba4;\n    case 1:\n      return DAT_08006bb4;\n    case 2:\n      return DAT_08006ba8;\n    case 3:\n      return DAT_08006bac;\n    case 4:\n      return DAT_08006bb0;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b7c",
            "calling": [
                "FUN_08008a24",
                "FUN_08008a6c"
            ],
            "imported": true,
            "current_name": "get_data_at_index_08006b7c"
        },
        "FUN_08008e7c": {
            "renaming": {
                "FUN_08008e7c": "convert_base_08008e7c",
                "param_1": "PTR_param_1",
                "local_15": "buffer",
                "param_2": "param_2",
                "param_3": "param_3",
                "cVar1": "c",
                "uVar3": "remainder",
                "uVar2": "length",
                "uVar4": "quotient",
                "pcVar5": "result"
            },
            "code": "uint32_t convert_base_08008e7c(int *PTR_param_1, uint32_t param_2, uint32_t param_3)\n{\n  char c;\n  uint32_t quotient, remainder;\n  char *result;\n  char buffer[9];\n  result = buffer + 1;\n  buffer[1] = 0;\n  if ((int)param_3 < 2) {\n    param_3 = 10;\n  }\n  do {\n    quotient = param_2 / param_3;\n    remainder = (param_2 & 0xff) - (quotient * param_3 & 0xff) & 0xff;\n    result--;\n    c = (char)remainder;\n    if (remainder < 10) {\n      c += '0';\n    }\n    else {\n      c += '7';\n    }\n    *result = c;\n    param_2 = quotient;\n  } while (quotient != 0);\n  if (result == (char *)0x0) {\n    return 0;\n  }\n  else {\n    uint32_t length = find_end_of_string_08000178(result);\n    return (**(code **)(*PTR_param_1 + 4))(PTR_param_1,result,length);\n  }\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e7c",
            "calling": [
                "FUN_08008ed6"
            ],
            "imported": true,
            "current_name": "convert_base_08008e7c"
        },
        "FUN_08003aa0": {
            "renaming": {
                "DAT_08003b84": "PTR_DAT_08003b84",
                "iVar1": "set_flags_result",
                "DAT_08003b88": "PTR_DAT_08003b88",
                "FUN_08003aa0": "set_flags_and_check_if_set_08003aa0",
                "puVar2": "current_ptr",
                "param_1": "param_array"
            },
            "code": "int set_flags_and_check_if_set_08003aa0(undefined4 *param_array){\n  int set_flags_result;\n  undefined4 *current_param = param_array;\n  char *flag = (char *)(current_param + 9);\n  if (*flag != '\\x01') {\n    *flag = 1;\n    set_flags_result = set_flag_and_check_if_set_08003a20();\n    if (set_flags_result == 0) {\n      current_param[10] &= 0xfffffcfe;\n      current_param[10] |= 0x100;\n      undefined4 *puVar2 = (undefined4 *)*current_param;\n      if ((puVar2 == DAT_08003b84) && ((DAT_08003b84[-0xff] & 0xf0000) != 0)) {\n        current_param[10] |= 0x100000;\n        if ((*(uint *)(DAT_08003b88 + 4) & 0x400) != 0) {\n          current_param[10] &= 0xffffcfff;\n          current_param[10] |= 0x1000;\n        }\n      }\n      else {\n        current_param[10] &= 0xffefffff;\n        if ((puVar2[1] & 0x400) != 0) {\n          current_param[10] &= 0xffffcfff;\n          current_param[10] |= 0x1000;\n        }\n      }\n      if ((current_param[10] & 0x1000) == 0) {\n        current_param[0xb] = 0;\n      }\n      else {\n        current_param[0xb] &= 0xfffffff9;\n      }\n      *flag = 0;\n      *puVar2 = 0xfffffffd;\n      current_param = (undefined4 *)*current_param;\n      if (((current_param[2] & 0xe0000) == 0xe0000) && ((current_param != DAT_08003b84 || ((DAT_08003b84[-0xff] & 0xf0000) == 0)))) {\n        current_param[2] |= 0x500000;\n      }\n      else {\n        current_param[2] |= 0x100000;\n      }\n    }\n    else {\n      *flag = 0;\n    }\n    return set_flags_result;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08003a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003aa0",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "set_flags_and_check_if_set_08003aa0"
        },
        "FUN_08003ce8": {
            "renaming": {
                "iVar1": "result",
                "FUN_08003ce8": "update_status_08003ce8",
                "param_1": "status_array"
            },
            "code": "int update_status_08003ce8(int *status_array)\n{\n  int result;\n  if (status_array == NULL) {\n    result = 1;\n  }\n  else {\n    status_array[10] |= 2;\n    result = check_and_update_status_08003ce8();\n    if (result == 0) {\n      *(int *)(*status_array) = -32;\n      *(uint *)(*status_array + 4) &= DAT_08003ddc;\n      *(uint *)(*status_array + 8) &= DAT_08003de0;\n      *(uint *)(*status_array + 12) &= 0xff000000;\n      *(uint *)(*status_array + 16) &= 0xc0000000;\n      *(uint *)(*status_array + 20) &= 0xfffff000;\n      *(uint *)(*status_array + 24) &= 0xfffff000;\n      *(uint *)(*status_array + 28) &= 0xfffff000;\n      *(uint *)(*status_array + 32) &= 0xfffff000;\n      *(uint *)(*status_array + 36) &= 0xfffff000;\n      *(uint *)(*status_array + 40) &= 0xfffff000;\n      *(uint *)(*status_array + 44) &= 0xff000000;\n      *(uint *)(*status_array + 48) &= 0xff000000;\n      *(uint *)(*status_array + 52) &= 0xc0000000;\n      *(uint *)(*status_array + 56) &= 0xc0000000;\n      *(uint *)(*status_array + 60) &= 0xffc00000;\n      *(uint *)(*status_array + 64) &= 0xffc00000;\n      update_flags(status_array);\n      status_array[11] = 0;\n      status_array[10] = 0;\n    }\n    *(char *)(status_array + 9) = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08006d24",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ce8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "update_status_08003ce8"
        },
        "FUN_08005fe8": {
            "renaming": {
                "0x40000000": "PTR_SPECIAL_DATA_2",
                "DAT_0800605c": "PTR_SPECIAL_DATA_1",
                "uVar1": "original_data",
                "FUN_08005fe8": "update_data_08005fe8",
                "param_1": "data_ptr",
                "DAT_0800605c + -0x4a00": "PTR_SPECIAL_DATA_3",
                "param_2": "update_ptr",
                "DAT_0800605c + -0x4900": "PTR_SPECIAL_DATA_4"
            },
            "code": "void update_data_08005fe8(uint *data_ptr,uint *update_ptr)\n{\n  uint original_data = *data_ptr;\n  bool is_data_special = (data_ptr == DAT_0800605c || data_ptr == PTR_SPECIAL_DATA_2 || data_ptr == DAT_0800605c + -0x4a00 || data_ptr == DAT_0800605c + -0x4900);\n  if (is_data_special)\n  {\n    original_data = original_data & 0xffffff8f | update_ptr[1];\n  }\n  bool is_data_super_special = (data_ptr == PTR_SUPER_SPECIAL_DATA_1 || data_ptr == PTR_SUPER_SPECIAL_DATA_2 || data_ptr == PTR_SUPER_SPECIAL_DATA_3 || data_ptr == PTR_SUPER_SPECIAL_DATA_4);\n  if (is_data_super_special)\n  {\n    original_data = original_data & 0xfffffcff | update_ptr[3];\n  }\n  *data_ptr = original_data & 0xffffff7f | update_ptr[5];\n  data_ptr[11] = update_ptr[2];\n  data_ptr[10] = *update_ptr;\n  if (data_ptr == DAT_0800605c)\n  {\n    data_ptr[12] = update_ptr[4];\n  }\n  data_ptr[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fe8",
            "calling": [
                "FUN_08006092",
                "FUN_08006060"
            ],
            "imported": true,
            "current_name": "update_data_08005fe8"
        },
        "FUN_08008804": {
            "renaming": {
                "iVar1": "currentOffset",
                "FUN_08008804": "calculateOffset_08008804",
                "puVar2": "currentPointer",
                "param_1": "input"
            },
            "code": "int calculateOffset_08008804(int input) {\n  int currentOffset = *(int *)PTR_DAT_08008834;\n  undefined *currentPointer = (undefined *)(input + currentOffset);\n  if (currentPointer <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_08008834 = currentPointer;\n    return currentOffset;\n  }\n  *(undefined4 *)PTR_DAT_0800883c = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008804",
            "calling": [
                "FUN_08009918"
            ],
            "imported": true,
            "current_name": "calculateOffset_08008804"
        },
        "FUN_0800738a": {
            "renaming": {
                "FUN_0800738a": "is_param1_in_param2_0800738a",
                "param_1": "target",
                "param_2": "string_array"
            },
            "code": "int is_param1_in_param2_0800738a(int target, char *string_array)\n{\n    if (target == -1) {\n        return 0;\n    }\n    while( true ) {\n        if (*string_array == -1) {\n            return 0;\n        }\n        if (target == *string_array) break;\n        string_array += 0xc;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738a",
            "calling": [
                "FUN_0800021a",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_08000a64",
                "FUN_08008990"
            ],
            "imported": true,
            "current_name": "is_param1_in_param2_0800738a"
        },
        "FUN_08004e3c": {
            "renaming": {
                "*(undefined *)((int)param_1 + 0x3d)": "undefined_val",
                "*PTR_param_1": "**data",
                "*(undefined *)((int)param_1 + 0x3e)": "undefined_val_2",
                "puVar2": "data_9",
                "FUN_08004e3c": "process_data_08004e3c",
                "param_1": "data",
                "*(char *)puVar2": "char_val",
                "*(short *)((int)param_1 + 0x2a)": "short_val",
                "puVar1": "data_11"
            },
            "code": "int process_data_08004e3c(uint *PTR_param_1){\n  uint *data_11 = data[11];\n  int short_val = *(short *)((int)data + 0x2a);\n  if (short_val == 3) {\n    if (((data_11 == (uint *)0x4) || (data_11 == (uint *)0x8)) || (data_11 == (uint *)0xffff0000)) {\n      *PTR_param_1 = *PTR_param_1 & 0xfffffbff;\n    }\n    uint *data_9 = data[9];\n    data[9] = (uint *)((int)data_9 + 1);\n    *(char *)data_9 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = short_val - 1;\n  }\n  else if (short_val == 2) {\n    if (((data_11 == (uint *)0x4) || (data_11 == (uint *)0x8)) || (data_11 == (uint *)0xffff0000)) {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      *PTR_param_1 = *PTR_param_1 | 0x200;\n    }\n    else {\n      if (data_11 == (uint *)0x2) {\n        *PTR_param_1 = *PTR_param_1 | 0x400;\n      }\n      else {\n        *PTR_param_1 = *PTR_param_1 & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    uint *data_9 = data[9];\n    data[9] = (uint *)((int)data_9 + 1);\n    *(char *)data_9 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = short_val - 1;\n    data_9 = data[9];\n    data[9] = (uint *)((int)data_9 + 1);\n    *(char *)data_9 = (char)(*data)[4];\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    data[12] = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      do_nothing_08004d6a();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      do_nothing_08004a20();\n    }\n  }\n  else {\n    uint *data_9 = data[9];\n    data[9] = (uint *)((int)data_9 + 1);\n    *(char *)data_9 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = short_val - 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004d6a",
                "FUN_08004a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e3c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "process_data_08004e3c"
        },
        "FUN_080091a0": {
            "renaming": {
                "FUN_080091a0": "add_to_linked_list_080091a0",
                "param_1": "linked_list",
                "PTR_PTR_DAT_080091ac": "linked_list_ptr_ptr"
            },
            "code": "void add_to_linked_list_080091a0(void* linked_list, void* item) {\n    add_to_linked_list_080091a0_080091d8(*(void**)linked_list, item);\n    return;\n}",
            "called": [
                "FUN_080091d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a0",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": true,
            "current_name": "add_to_linked_list_080091a0"
        },
        "FUN_08002a1c": {
            "renaming": {
                "FUN_08002a1c": "initialize_game_board_08002a1c",
                "param_1": "rows",
                "param_2": "columns",
                "param_3": "starting_player",
                "param_4": "num_players",
                "initialize_08002968": "setup_game_board"
            },
            "code": "void initialize_game_board_08002a1c(int rows, int columns, int starting_player, int num_players)\n{\n  setup_game_board(rows, columns, starting_player, num_players, num_players);\n  return;\n}",
            "called": [
                "FUN_08002968"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a1c",
            "calling": [
                "FUN_08002a26"
            ],
            "imported": true,
            "current_name": "initialize_game_board_08002a1c"
        },
        "FUN_08007718": {
            "renaming": {
                "FUN_08007718": "subtract_four_from_value_08007718",
                "param_1": "value"
            },
            "code": "int subtract_four_from_value_08007718(int value) {\n  return value - 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007718",
            "calling": [
                "FUN_08007736",
                "FUN_0800771c"
            ],
            "imported": true,
            "current_name": "subtract_four_from_value_08007718"
        },
        "FUN_08002948": {
            "renaming": {
                "param_1": "first_param",
                "initialize_array_0800291c": "initialize_array",
                "FUN_08002948": "initialize_if_first_param_is_one_08002948",
                "param_2": "second_param"
            },
            "code": "void initialize_if_first_param_is_one_08002948(int first_param, int second_param) {\n  if (first_param != 1) {\n    return;\n  }\n  if (second_param == 0xffff) {\n    initialize_array(PTR_DAT_08002964);\n  }\n  return;\n}",
            "called": [
                "FUN_0800291c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002948",
            "calling": [
                "FUN_08002c1e"
            ],
            "imported": true,
            "current_name": "initialize_if_first_param_is_one_08002948"
        },
        "FUN_08009e64": {
            "renaming": {
                "auStack_4c": "flag_value",
                "iVar1": "set_result",
                "param_1": "file_descriptor",
                "local_48": "file_mode",
                "FUN_08009e64": "check_permissions_and_set_flag_08009e64",
                "param_2": "file_info_offset",
                "param_3": "permissions",
                "param_4": "flag",
                "uVar2": "permissions_value"
            },
            "code": "int check_permissions_and_set_flag_08009e64(int file_descriptor, int file_info_offset, int *permissions, uint *flag)\n{\n  int set_result;\n  uint flag_value;\n  if (*(short *)(file_info_offset + 0xe) < 0 || (set_result = set_permissions(file_descriptor, (int)*(short *)(file_info_offset + 0xe), &flag_value)) < 0) {\n    *flag = 0;\n    if ((int)((uint)*(ushort *)(file_info_offset + 0xc) << 0x18) < 0) {\n      *permissions = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *flag = (uint)((flag_value & 0xf000) == 0x2000);\n  }\n  *permissions = 0x400;\nLAB_08009ea4:\n  return 0;\n}",
            "called": [
                "FUN_0800a0ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e64",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": true,
            "current_name": "check_permissions_and_set_flag_08009e64"
        },
        "FUN_08002acc": {
            "renaming": {
                "iVar2": "allocated_buffer",
                "param_1": "buffer_size",
                "param_2": "current_size",
                "FUN_08002acc": "allocate_and_copy_08002acc",
                "param_3": "buffer",
                "PTR_DAT_08002afc": "current_buffer",
                "param_4": "element_size",
                "puVar1": "current_buffer",
                "uVar3": "uVar3",
                "PTR_DAT_08002af8": "current_size_ptr"
            },
            "code": "void allocate_and_copy_08002acc(uint buffer_size, uint current_size, void* buffer, uint element_size){\n  undefined *PTR_DAT_08002afc = PTR_DAT_08002afc;\n  uint *PTR_DAT_08002af8 = PTR_DAT_08002af8;\n  if (*PTR_DAT_08002af8 < buffer_size) {\n    if (buffer_size < 0x20) {\n      buffer_size = 0x20;\n    }\n    int allocated_buffer = allocate_and_copy_08002acc_08009908(*(undefined4 *)PTR_DAT_08002afc, buffer_size, buffer, *PTR_DAT_08002af8, element_size);\n    *(int *)PTR_DAT_08002afc = allocated_buffer;\n    if (allocated_buffer == 0) {\n      undefined uVar3 = 0;\n      *PTR_DAT_08002af8 = uVar3;\n    }\n    else {\n      *PTR_DAT_08002af8 = buffer_size;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002acc",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": true,
            "current_name": "allocate_and_copy_08002acc"
        },
        "FUN_08002a30": {
            "renaming": {
                "param_1": "value",
                "param_2": "shift_amount",
                "FUN_08002a30": "initialize_data_08002a30"
            },
            "code": "void initialize_data_08002a30(int value, int shift_amount)\n{\n  *PTR_DAT_08002a48 = 1;\n  *PTR_DAT_08002a4c = (char)(shift_amount << 1);\n  *PTR_DAT_08002a50 = 0;\n  *PTR_DAT_08002a54 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a30",
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08002b68"
            ],
            "imported": true,
            "current_name": "initialize_data_08002a30"
        },
        "FUN_0800932c": {
            "renaming": {
                "iVar1": "array_index",
                "process_data_08009c7c": "process_data",
                "process_data_08009a80": "process_data",
                "param_1": "input_length",
                "initialize_params_08009d50": "initialize_params",
                "PTR_DAT_08009a7c": "PTR_DAT_08009a7c",
                "pbVar2": "array_ptr_1",
                "PTR_DAT_08009a78": "PTR_DAT_08009a78",
                "pbVar3": "array_ptr_2",
                "param_2": "input_byte",
                "param_3": "input_array",
                "FUN_0800932c": "process_input_0800932c",
                "uVar4": "input_value",
                "PTR_DAT_08009a74": "PTR_DAT_08009a74"
            },
            "code": "uint process_input_0800932c(int input_length, byte input_byte, byte **input_array) {\n  int array_index;\n  byte *array_ptr_1;\n  byte *array_ptr_2;\n  uint input_value;\n\n  array_ptr_1 = input_array[2] - 1;\n  input_array[2] = array_ptr_1;\n  if (array_ptr_1 >= -1 || (input_array[6] <= array_ptr_1 && input_byte != 10)) {\n    array_ptr_1 = *input_array;\n    *input_array = array_ptr_1 + 1;\n    *array_ptr_1 = input_byte;\n    return (uint)input_byte;\n  }\n  if (input_length != 0 && *(int *)(input_length + 0x18) == 0) {\n    initialize_params();\n  }\n  if (input_array == (byte **)PTR_DAT_08009a74) {\n    input_array = *(byte ***)(input_length + 4);\n  }\n  else if (input_array == (byte **)PTR_DAT_08009a78) {\n    input_array = *(byte ***)(input_length + 8);\n  }\n  else if (input_array == (byte **)PTR_DAT_08009a7c) {\n    input_array = *(byte ***)(input_length + 0xc);\n  }\n  input_array[2] = input_array[6];\n  array_ptr_2 = (byte *)(uint)*(ushort *)(input_array + 3);\n  array_index = (int)array_ptr_2 << 0x1c;\n  if ((array_index < 0 && (array_ptr_2 = input_array[4], array_ptr_2 != (byte *)0x0)) || (array_index = process_data(input_length, input_array, array_index, array_ptr_2, array_ptr_1), array_index == 0)) {\n    input_value = (uint)input_byte;\n    array_index = (int)*input_array - (int)input_array[4];\n    if (array_index < (int)input_array[5] || (array_index = process_data_08009c7c(input_length, input_array), array_index == 0)) {\n      input_array[2] = input_array[2] - 1;\n      array_ptr_1 = *input_array;\n      *input_array = array_ptr_1 + 1;\n      *array_ptr_1 = input_byte;\n      if ((byte *)(array_index + 1) != input_array[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input_array + 3) << 0x1f)) {\n          return input_value;\n        }\n        if (input_value != 10) {\n          return input_value;\n        }\n      }\n      array_index = process_data_08009c7c(input_length, input_array);\n      if (array_index == 0) {\n        return input_value;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_08009c7c",
                "FUN_08009d50",
                "FUN_08009a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800932c",
            "calling": [
                "FUN_08009358"
            ],
            "imported": true,
            "current_name": "process_input_0800932c"
        },
        "FUN_0800322c": {
            "renaming": {
                "param_1": "function_ptrs",
                "param_2": "arg1",
                "param_3": "arg2",
                "puVar1": "next_function_ptr",
                "FUN_0800322c": "print_and_execute_functions_0800322c"
            },
            "code": "void print_and_execute_functions_0800322c(undefined4 *function_ptrs, undefined4 arg1, undefined4 arg2)\n{\n  undefined4 *next_function_ptr;\n  next_function_ptr = (undefined4 *)*function_ptrs;\n  if (next_function_ptr != (undefined4 *)0x0) {\n    (**(code **)*next_function_ptr)(next_function_ptr,0xf9);\n    (***(code ***)(undefined4 *)*function_ptrs)((undefined4 *)*function_ptrs,arg1);\n    (***(code ***)(undefined4 *)*function_ptrs)((undefined4 *)*function_ptrs,arg2);\n    return;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800322c",
            "calling": [
                "FUN_08002ddc"
            ],
            "imported": true,
            "current_name": "print_and_execute_functions_0800322c"
        },
        "FUN_080099a4": {
            "renaming": {
                "pcVar2": "sub_str_ptr",
                "pcVar3": "sub_str_end_ptr",
                "pcVar1": "str_ptr",
                "param_1": "str",
                "param_2": "sub_str",
                "FUN_080099a4": "find_substring_080099a4"
            },
            "code": "char* find_substring_080099a4(char* str, char* sub_str) {\n    char* str_ptr;\n    char* sub_str_ptr;\n    char* sub_str_end_ptr;\n    \n    if (*str == '\\0') {\n        if (*sub_str != '\\0') {\n            str = NULL;\n        }\n        return str;\n    }\n    \n    do {\n        str_ptr = str;\n        if (*str_ptr == '\\0') {\n            return NULL;\n        }\n        sub_str_end_ptr = sub_str - 1;\n        sub_str_ptr = str_ptr - 1;\n        \n        do {\n            sub_str_end_ptr++;\n            if (*sub_str_end_ptr == '\\0') {\n                return str_ptr;\n            }\n            sub_str_ptr++;\n            str = str_ptr + 1;\n        } while (*sub_str_ptr == *sub_str_end_ptr);\n    } while(true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099a4",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": true,
            "current_name": "find_substring_080099a4"
        },
        "FUN_08005a1c": {
            "renaming": {
                "FUN_08005a1c": "get_value_from_pointer_08005a1c",
                "PTR_DAT_08005a24": "value_pointer"
            },
            "code": "get_value_from_pointer_08005a1c() {\n  int* PTR_DAT_08005a24 = PTR_DAT_08005a24;\n  int value = *PTR_DAT_08005a24;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a1c",
            "calling": [
                "FUN_08005a48",
                "FUN_080035b8",
                "FUN_08005a28"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_08005a1c"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "FUNC_08001cd0"
            },
            "code": "\nvoid FUNC_08001cd0(undefined4 param_1,int param_2,byte *param_3,undefined4 param_4)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte bVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined4 uVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  int iVar10;\n  char cVar11;\n  uint uVar12;\n  uint uVar13;\n  int iVar14;\n  bool bVar15;\n  \n  puVar5 = PTR_DAT_080022e8;\n  puVar4 = PTR_DAT_08002044;\n  switch(param_1) {\n  case 0x69:\n    execute_function_at_address_08002f1e(PTR_DAT_080022e8,0xf0);\n    execute_function_at_address_08002f1e(puVar5,0x6a);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      uVar13 = uVar12 - 0x2e & 0xff;\n      if (uVar13 < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = check_param_080036ac(iVar9);\n        if (iVar9 == 0) {\n          uVar13 = 0x7f;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = check_param_080036ac(iVar9);\n          if (iVar9 == 1) {\n            uVar13 = 0x7f;\n          }\n        }\n      }\n      else {\n        uVar13 = 0x7f;\n      }\n      execute_function_at_address_08002f1e(PTR_DAT_080022e8,uVar13);\n    }\n    execute_function_at_address_08002f1e(PTR_DAT_080022e8,0xf7);\n    break;\n  case 0x6b:\n    execute_function_at_address_08002f1e(PTR_DAT_08002044,0xf0);\n    execute_function_at_address_08002f1e(puVar4,0x6c);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = check_param_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = check_param_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_08002044;\n      if (bVar15) {\n        execute_function_at_address_08002f1e(PTR_DAT_08002044,0);\n        execute_function_at_address_08002f1e(puVar4,1);\n        execute_function_at_address_08002f1e(puVar4,0xb);\n        execute_function_at_address_08002f1e(puVar4,1);\n        execute_function_at_address_08002f1e(puVar4,1);\n        execute_function_at_address_08002f1e(puVar4,1);\n      }\n      if ((uVar12 - 0x2e & 0xff) < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = check_param_080036ac(iVar9);\n        if (iVar9 == 0) {\n          bVar15 = false;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = check_param_080036ac(iVar9);\n          if (iVar9 == 1) {\n            bVar15 = false;\n          }\n          else {\n            bVar15 = true;\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        execute_function_at_address_08002f1e(PTR_DAT_080022e8,2);\n        execute_function_at_address_08002f1e(puVar4,10);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = check_param_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = check_param_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = is_param1_in_param2_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022ec);\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        execute_function_at_address_08002f1e(PTR_DAT_080022e8,3);\n        execute_function_at_address_08002f1e(puVar4,8);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = check_param_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = check_param_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        execute_function_at_address_08002f1e(PTR_DAT_080022e8,4);\n        execute_function_at_address_08002f1e(puVar4,0xe);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = check_param_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = check_param_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = is_param1_in_param2_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f0);\n              if (iVar9 == 0) {\n                iVar9 = is_param1_in_param2_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f4);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        execute_function_at_address_08002f1e(PTR_DAT_080022e8,6);\n        execute_function_at_address_08002f1e(puVar4,1);\n      }\n      execute_function_at_address_08002f1e(PTR_DAT_080022e8,0x7f);\n    }\n    execute_function_at_address_08002f1e(PTR_DAT_080022e8,0xf7);\n    return;\n  case 0x6d:\n    if (param_2 != 0) {\n      bVar1 = *param_3;\n      execute_function_at_address_08002f1e(PTR_DAT_080022e8,0xf0);\n      execute_function_at_address_08002f1e(puVar5,0x6e);\n      execute_function_at_address_08002f1e(puVar5,bVar1);\n      if (bVar1 < 0x3c) {\n        uVar6 = get_value_at_offset_from_ptr_08002fa0(puVar5,bVar1);\n        execute_function_at_address_08002f1e(puVar5,uVar6);\n        uVar12 = get_value_at_offset_08002fba(puVar5,bVar1);\n        execute_function_at_address_08002f1e(puVar5,uVar12 & 0x7f);\n        uVar12 = get_value_at_offset_08002fba(puVar5,bVar1);\n        if ((uVar12 & 0xff80) != 0) {\n          iVar9 = get_value_at_offset_08002fba(puVar5,bVar1);\n          execute_function_at_address_08002f1e(puVar5,(uint)(iVar9 << 0x12) >> 0x19);\n        }\n        uVar12 = get_value_at_offset_08002fba(PTR_DAT_080022e8,bVar1);\n        puVar4 = PTR_DAT_080022e8;\n        if ((uVar12 & 0xc000) != 0) {\n          iVar9 = get_value_at_offset_08002fba(PTR_DAT_080022e8,bVar1);\n          execute_function_at_address_08002f1e(puVar4,(uint)(iVar9 << 0xb) >> 0x19);\n        }\n      }\n      execute_function_at_address_08002f1e(PTR_DAT_080022e8,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < param_2) {\n      uVar12 = (uint)param_3[1];\n      if (2 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[2] << 7;\n      }\n      if (3 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[3] << 0xe;\n      }\n      process_and_update_08000214(*param_3,uVar12);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < param_2) {\n      uVar12 = (uint)*param_3;\n      bVar1 = param_3[1];\n      bVar7 = param_3[2];\n      bVar2 = param_3[3];\n      bVar3 = param_3[4];\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_08002060[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = check_param_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = check_param_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      if (bVar15) {\n        if ((byte)PTR_DAT_08002064[uVar12] < 0xc) {\n          iVar9 = get_byte_from_data_080026f8(PTR_DAT_08002068 + (uint)(byte)PTR_DAT_08002064[uVar12] * 3);\n        }\n        else {\n          iVar9 = 0;\n        }\n        if (iVar9 != 0) {\n          process_input_and_update_state_08000588(uVar12);\n        }\n        process_servo_data_08000500(uVar12,(uint)bVar1 + (uint)bVar7 * 0x80,(uint)bVar2 + (uint)bVar3 * 0x80);\n        FUNC_080005f8(uVar12,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    bVar1 = param_3[1];\n    bVar7 = bVar1 & 0x18;\n    if ((bVar1 & 0x20) != 0) {\n      send_encoded_messages_to_server_and_find_end_of_string_08002f14(PTR_DAT_08002044,PTR_s_10_bit_addressing_not_supported_08002040,bVar7,bVar1,\n                   param_4);\n      return;\n    }\n    bVar2 = *param_3;\n    bVar15 = (bVar1 & 0x40) == 0;\n    if (bVar7 < 0x19) {\n      switch(bVar7) {\n      case 0:\n        initialize_data_08002a30(PTR_DAT_08002048,bVar2);\n        for (uVar12 = 2; (int)uVar12 < param_2; uVar12 = uVar12 + 2 & 0xff) {\n          add_character_to_data_buffer_08001bf8(param_3[uVar12 + 1] * -0x80 + param_3[uVar12]);\n        }\n        check_data_and_return_if_valid_08002ac0(PTR_DAT_08002048);\n        return;\n      case 8:\n        if (param_2 == 6) {\n          iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n          cVar8 = param_3[4] + param_3[5] * -0x80;\n        }\n        else {\n          cVar8 = param_3[2] + param_3[3] * -0x80;\n          iVar9 = -1;\n        }\n        process_i2c_data_08001c18(bVar2,iVar9,cVar8);\n        return;\n      case 0x10:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 + 1 < 8) {\n          if (param_2 == 6) {\n            iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n            cVar11 = param_3[4] + param_3[5] * -0x80;\n          }\n          else {\n            cVar11 = param_3[2] + param_3[3] * -0x80;\n            iVar9 = -1;\n          }\n          *PTR_DAT_0800204c = cVar8 + '\\x01';\n          puVar4 = PTR_DAT_08002050;\n          iVar10 = (char)(cVar8 + '\\x01') * 0xc;\n          PTR_DAT_08002050[iVar10] = bVar2;\n          *(int *)(puVar4 + iVar10 + 4) = iVar9;\n          puVar4[iVar10 + 8] = cVar11;\n          puVar4[iVar10 + 9] = bVar15;\n          return;\n        }\n        send_encoded_messages_to_server_and_find_end_of_string_08002f14(PTR_DAT_08002044,PTR_s_too_many_queries_08002054,(int)cVar8,bVar15,param_4);\n        return;\n      case 0x18:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 < 1) {\n          *PTR_DAT_0800204c = 0xff;\n          return;\n        }\n      }\n      for (uVar12 = 0; iVar9 = cVar8 + 1, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (bVar2 == PTR_DAT_08002050[uVar12 * 0xc]) goto LAB_08001e66;\n      }\n      uVar12 = 0;\nLAB_08001e66:\n      for (; puVar4 = PTR_DAT_08002050, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (uVar12 < 8) {\n          iVar10 = (uVar12 + 1) * 0xc;\n          iVar14 = uVar12 * 0xc;\n          PTR_DAT_08002050[iVar14] = PTR_DAT_08002050[iVar10];\n          *(undefined4 *)(puVar4 + iVar14 + 4) = *(undefined4 *)(puVar4 + iVar10 + 4);\n          puVar4[iVar14 + 8] = puVar4[iVar10 + 8];\n          puVar4[iVar14 + 9] = puVar4[iVar10 + 9];\n        }\n      }\n      *PTR_DAT_0800204c = cVar8 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80;\n    if ((1 < param_2) && (iVar9 != 0)) {\n      *(int *)PTR_DAT_08002058 = iVar9;\n    }\n    if (*PTR_DAT_0800205c == '\\0') {\n      check_game_board_and_set_result_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < param_2) &&\n       (iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80, *(int *)PTR_DAT_0800206c = iVar9,\n       iVar9 == 0)) {\n      *(undefined4 *)PTR_DAT_0800206c = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000500",
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_08002ac0",
                "FUN_08002a30",
                "FUN_080026f8",
                "FUN_08000214",
                "FUN_08002f1e",
                "FUN_08002fba",
                "FUN_08000588",
                "FUN_08001c18",
                "FUN_080005f8",
                "FUN_08002f14",
                "FUN_08000a64",
                "FUN_08002fa0",
                "FUN_08001bf8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001cd0",
            "calling": [],
            "imported": true,
            "current_name": "FUNC_08001cd0"
        },
        "FUN_08003760": {
            "renaming": {
                "FUN_08003760": "get_pointer_value_08003760",
                "PTR_DAT_08003768": "pointer_data"
            },
            "code": "get_pointer_value_08003760() {\n    return *(undefined4 *)PTR_DAT_08003768;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003760",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74",
                "FUN_0800723c",
                "FUN_080066e8",
                "FUN_08008500",
                "FUN_080067ac",
                "FUN_08003b8c",
                "FUN_08003e20",
                "FUN_08005aa4",
                "FUN_0800376c",
                "FUN_08005460",
                "FUN_08003a20",
                "FUN_080058d2"
            ],
            "imported": true,
            "current_name": "get_pointer_value_08003760"
        },
        "FUN_08007320": {
            "renaming": {
                "FUN_08007320": "find_value_if_not_negative_08007320",
                "uVar1": "found_value",
                "param_1": "value",
                "find_value_in_array_08007306": "find_value_in_array"
            },
            "code": "int find_value_if_not_negative_08007320(int value) {\n  int found_value;\n  if (value >= 0) {\n    found_value = find_value_in_array();\n    return found_value;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007320",
            "calling": [
                "FUN_080077b0",
                "FUN_08006d80",
                "FUN_080084b0",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_08008500",
                "FUN_080071e4"
            ],
            "imported": true,
            "current_name": "find_value_if_not_negative_08007320"
        },
        "FUN_08000be8": {
            "renaming": {
                "PTR_DAT_08000c14": "data_array_3",
                "PTR_DAT_08000c10": "data_array_2",
                "puVar2": "data_ptr_2",
                "param_1": "index",
                "FUN_08000be8": "execute_with_encode_08000be8",
                "PTR_DAT_08000c0c": "data_array_1",
                "param_2": "bitmask",
                "param_3": "flag",
                "param_4": "param",
                "puVar1": "data_ptr_3"
            },
            "code": "void execute_with_encode_08000be8(uint8_t index, uint32_t bitmask, int flag, uint32_t param) {\n  uint8_t* data_ptr = (uint8_t*)(&(PTR_DAT_08000c0c[index]));\n  uint8_t* data_ptr_2 = data_ptr & bitmask;\n  uint8_t* data_ptr_3 = (uint8_t*)(&(PTR_DAT_08000c10[index]));\n  if ((flag != 0) || (data_ptr_2 != data_ptr_3)) {\n    execute_and_encode_08002efe(PTR_DAT_08000c14, index, data_ptr_2, data_ptr_3, param);\n    PTR_DAT_08000c10[index] = (char)data_ptr_2;\n  }\n  return;\n}",
            "called": [
                "FUN_08002efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000be8",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": true,
            "current_name": "execute_with_encode_08000be8"
        },
        "FUN_08003fd8": {
            "renaming": {
                "param_1": "input",
                "FUN_08003fd8": "validate_input_08003fd8",
                "DAT_08004000": "data_array",
                "puVar1": "input_array",
                "DAT_08003ffc": "input_array"
            },
            "code": "int validate_input_08003fd8(int input) {\n  int *DAT_08003ffc = DAT_08003ffc;\n  if (input - 1U < 0x1000000) {\n    DAT_08003ffc[1] = input - 1U;\n    *(unsigned char *)(DAT_08004000 + 0x23) = 0xf0;\n    DAT_08003ffc[2] = 0;\n    *DAT_08003ffc = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd8",
            "calling": [
                "FUN_080035b8",
                "FUN_080036d8"
            ],
            "imported": true,
            "current_name": "validate_input_08003fd8"
        },
        "FUN_0800307a": {
            "renaming": {
                "uVar1": "current_byte",
                "param_1": "encoder",
                "FUN_0800307a": "encode_message_0800307a",
                "param_2": "message_length",
                "param_3": "message",
                "param_4": "max_length",
                "uVar3": "bits_written",
                "uVar2": "bits_to_write",
                "uVar4": "current_bits"
            },
            "code": "void encode_message_0800307a(uint32_t *encoder, uint message_length, uint8_t *message, uint max_length)\n{\n  uint current_byte = (uint)*message;\n  if (max_length == 0) {\n    max_length = 0xffffffff;\n  }\n  uint32_t bits_written = 0;\n  uint8_t bits_to_write = 0;\n  uint32_t current_bits = 0;\n  while ((bits_written < message_length && (bits_to_write < max_length))) {\n    (***(code ***)(uint32_t *)*encoder)\n              ((uint32_t *)*encoder,((uint)message[bits_written] << (bits_to_write & 0xff) | current_byte) & 0x7f);\n    current_byte = (int)(uint)message[bits_written] >> (7 - bits_to_write & 0xff) & 0xff;\n    bits_to_write++;\n    while ((bits_written = bits_written + 1, 6 < bits_to_write && (bits_written < max_length))) {\n      (***(code ***)(uint32_t *)*encoder)((uint32_t *)*encoder,current_byte & 0x7f);\n      current_byte = current_byte >> 7;\n      bits_to_write = bits_to_write - 7;\n    }\n    bits_written++;\n  }\n  if ((bits_to_write != 0) && (bits_written < max_length)) {\n    (***(code ***)(uint32_t *)*encoder)((uint32_t *)*encoder,(1 << (bits_to_write & 0xff)) - 1U & current_byte)\n    ;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800307a",
            "calling": [
                "FUN_08003106",
                "FUN_0800319e",
                "FUN_080031ce",
                "FUN_08003158",
                "FUN_0800325a"
            ],
            "imported": true,
            "current_name": "encode_message_0800307a"
        },
        "FUN_08004b80": {
            "renaming": {
                "FUN_08004b80": "do_nothing_08004b80"
            },
            "code": "\nvoid do_nothing_08004b80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b80",
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "imported": true,
            "current_name": "do_nothing_08004b80"
        },
        "FUN_0800319e": {
            "renaming": {
                "local_a": "encoded_message_type",
                "param_1": "message_ptr",
                "FUN_0800319e": "execute_and_encode_message_0800319e",
                "param_2": "message_length",
                "param_3": "message_type",
                "puVar1": "function_ptr"
            },
            "code": "void execute_and_encode_message_0800319e(uint32_t *message_ptr, uint message_length, uint16_t message_type)\n{\n  uint32_t *function_ptr;\n  uint16_t encoded_message_type;\n  \n  function_ptr = (uint32_t *)*message_ptr;\n  if (function_ptr != (uint32_t *)0x0) {\n    encoded_message_type = message_type;\n    (**(void (**)(uint32_t *, uint)) *function_ptr)(function_ptr, message_length & 0xf | 0x90);\n    encode_message(message_ptr, 2, &encoded_message_type);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800319e",
            "calling": [
                "FUN_08002efe"
            ],
            "imported": true,
            "current_name": "execute_and_encode_message_0800319e"
        },
        "FUN_08008d00": {
            "renaming": {
                "uVar1": "value_to_set",
                "param_1": "index",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "FUN_08008d00": "set_value_based_on_index_08008d00",
                "param_2": "value"
            },
            "code": "void set_value_based_on_index_08008d00(int index, uint value)\n{\n  undefined value_to_set;\n  code *jump_table;\n  if (value < 0x3c) {\n    value_to_set = PTR_DAT_08008d14[value];\n  }\n  else {\n    value_to_set = 0xff;\n  }\n  *(undefined *)(index + 0x12d) = value_to_set;\n  (*jump_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d00",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": true,
            "current_name": "set_value_based_on_index_08008d00"
        },
        "FUN_08009190": {
            "renaming": {
                "param_1": "memory",
                "PTR_PTR_DAT_0800919c": "memory",
                "allocate_memory_block_08009270": "allocate_memory_block",
                "FUN_08009190": "allocate_memory_block_08009190"
            },
            "code": "void allocate_memory_block_08009190(void* PTR_PTR_DAT_0800919c, size_t size)\n{\n  allocate_memory_block_08009190_08009270(*(void **)PTR_PTR_DAT_0800919c, size);\n  return;\n}",
            "called": [
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009190",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": true,
            "current_name": "allocate_memory_block_08009190"
        },
        "FUN_08004b82": {
            "renaming": {
                "puVar2": "pointer_to_b",
                "param_1": "input_buffer",
                "FUN_08004b82": "process_input_08004b82",
                "cVar1": "input_char"
            },
            "code": "uint32_t process_input_08004b82(uint32_t **input_buffer) {\n  char input_char;\n  uint32_t *pointer_to_b;\n  \n  input_char = *(char *)((int)input_buffer + 0x3d);\n  pointer_to_b = input_buffer[0xb];\n  if ((*(short *)(input_buffer + 10) == 0) && (input_char == '!')) {\n    if ((pointer_to_b == (uint32_t *)0x4) || ((pointer_to_b == (uint32_t *)0x8 || (pointer_to_b == (uint32_t *)0xffff0000)))) {\n      (*input_buffer)[1] = (*input_buffer)[1] & 0xfffff8ff;\n      **input_buffer = **input_buffer | 0x200;\n      input_buffer[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input_buffer + 0x3d) = 0x20;\n      if (*(char *)((int)input_buffer + 0x3e) == '@') {\n        *(undefined *)((int)input_buffer + 0x3e) = 0;\n        do_nothing_08004b80();\n      }\n      else {\n        *(undefined *)((int)input_buffer + 0x3e) = 0;\n        do_nothing_08004a1e();\n      }\n    }\n    else {\n      (*input_buffer)[1] = (*input_buffer)[1] & 0xfffff8ff;\n      input_buffer[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)input_buffer + 0x3e) = 0;\n      *(undefined *)((int)input_buffer + 0x3d) = 0x20;\n      do_nothing_08004a1e();\n    }\n  }\n  else if ((input_char == '!') || ((*(char *)((int)input_buffer + 0x3e) == '@' && (input_char == '\"')))) {\n    if (*(short *)((int)input_buffer + 0x2a) == 0) {\n      (*input_buffer)[1] = (*input_buffer)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input_buffer + 0x3e) == '@') {\n      if (input_buffer[0x14] == (uint32_t *)0x0) {\n        if (input_buffer[0x13] == (uint32_t *)0x1) {\n          (*input_buffer)[4] = (uint32_t)input_buffer[0x12] & 0xff;\n          input_buffer[0x14] = (uint32_t *)((int)input_buffer[0x14] + 2);\n        }\n        else {\n          (*input_buffer)[4] = (uint32_t)((int)input_buffer[0x12] << 0x10) >> 0x18;\n          input_buffer[0x14] = (uint32_t *)((int)input_buffer[0x14] + 1);\n        }\n      }\n      else if (input_buffer[0x14] == (uint32_t *)0x1) {\n        (*input_buffer)[4] = (uint32_t)input_buffer[0x12] & 0xff;\n        input_buffer[0x14] = (uint32_t *)((int)input_buffer[0x14] + 1);\n      }\n      else if (input_buffer[0x14] == (uint32_t *)0x2) {\n        if (*(char *)((int)input_buffer + 0x3d) == '\"') {\n          **input_buffer = **input_buffer | 0x100;\n        }\n        else if (*(char *)((int)input_buffer + 0x3d) == '!') {\n          pointer_to_b = input_buffer[9];\n          input_buffer[9] = (uint32_t *)((int)pointer_to_b + 1);\n          (*input_buffer)[4] = (uint32_t)*(byte *)pointer_to_b;\n          *(short *)((int)input_buffer + 0x2a) = *(short *)((int)input_buffer + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer_to_b = input_buffer[9];\n      input_buffer[9] = (uint32_t *)((int)pointer_to_b + 1);\n      (*input_buffer)[4] = (uint32_t)*(byte *)pointer_to_b;\n      *(short *)((int)input_buffer + 0x2a) = *(short *)((int)input_buffer + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b82",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "process_input_08004b82"
        },
        "FUN_0800997e": {
            "renaming": {
                "iVar1": "current_index",
                "iVar2": "last_occurrence_index",
                "param_1": "string_start",
                "FUN_0800997e": "find_last_occurrence_of_char_in_string_0800997e",
                "param_2": "string_length",
                "param_3": "target_char",
                "param_4": "param_4"
            },
            "code": "int find_last_occurrence_of_char_in_string_0800997e(int string_start, int string_length, char target_char, undefined4 param_4)\n{\n  int last_occurrence_index = -1;\n  if (string_length != 0) {\n    int current_index = 0;\n    while (current_index = find_char_in_string_08009938(string_start, string_length, target_char, string_start, param_4), current_index != 0) {\n      string_start = current_index + 1;\n      last_occurrence_index = current_index;\n    }\n    return last_occurrence_index;\n  }\n  last_occurrence_index = find_char_in_string_08009938();\n  return last_occurrence_index;\n}",
            "called": [
                "FUN_08009938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800997e",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": true,
            "current_name": "find_last_occurrence_of_char_in_string_0800997e"
        },
        "FUN_08002dbc": {
            "renaming": {
                "initialize_object_08002ce0": "initialize_object",
                "param_1": "param_is_one",
                "param_2": "param2",
                "FUN_08002dbc": "initialize_object_if_param_is_one_and_param2_is_0xffff_08002dbc",
                "PTR_DAT_08002dd8": "PTR_DAT_08002dd8"
            },
            "code": "void initialize_object_if_param_is_one_and_param2_is_0xffff_08002dbc(int param_is_one, int param2) {\n  if (param_is_one != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    initialize_object(PTR_DAT_08002dd8);\n  }\n  return;\n}",
            "called": [
                "FUN_08002ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dbc",
            "calling": [],
            "imported": true,
            "current_name": "initialize_object_if_param_is_one_and_param2_is_0xffff_08002dbc"
        },
        "FUN_08002e44": {
            "renaming": {
                "bVar1": "string_length",
                "iVar3": "substring_position",
                "iVar4": "last_slash_position",
                "param_1": "output_address",
                "puVar5": "new_string_start",
                "param_2": "input_address",
                "param_3": "starting_char",
                "cVar2": "char_difference",
                "param_4": "ending_char",
                "FUN_08002e44": "generate_linked_list_string_08002e44"
            },
            "code": "void generate_linked_list_string_08002e44(int output_address, int input_address, undefined starting_char, undefined ending_char)\n{\n  byte string_length;\n  char char_difference;\n  int substring_position;\n  int last_slash_position;\n  undefined *new_string_start;\n  \n  substring_position = find_substring(input_address, \"cpp\");\n  last_slash_position = find_last_occurrence_of_char_in_string(input_address, 0x2f);\n  if (last_slash_position == 0) {\n    last_slash_position = find_last_occurrence_of_char_in_string(input_address, 0x5c);\n  }\n  if (last_slash_position != 0) {\n    input_address = last_slash_position + 1;\n  }\n  if (substring_position == 0) {\n    char_difference = find_end_of_string(input_address);\n    *(char *)(output_address + 196) = char_difference + '\\x02';\n  }\n  else {\n    *(char *)(output_address + 196) = ((char)substring_position - (char)input_address) + '\\x02';\n  }\n  add_to_linked_list(*(undefined4 *)(output_address + 200));\n  string_length = *(byte *)(output_address + 196);\n  new_string_start = (undefined *)allocate_memory_block(string_length + 1);\n  *(undefined **)(output_address + 200) = new_string_start;\n  new_string_start[string_length] = 0;\n  *new_string_start = starting_char;\n  new_string_start[1] = ending_char;\n  copy_string(new_string_start + 2, input_address, *(byte *)(output_address + 196) - 2);\n  return;\n}",
            "called": [
                "FUN_080099a4",
                "FUN_08000178",
                "FUN_08009954",
                "FUN_0800997e",
                "FUN_08009190",
                "FUN_080091a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e44",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "generate_linked_list_string_08002e44"
        },
        "FUN_0800242c": {
            "renaming": {
                "param_1": "callback_function",
                "param_2": "delay_ms",
                "param_3": "unused_parameter",
                "param_4": "callback_arg",
                "FUN_0800242c": "initialize_timer_with_delay_and_callback_0800242c"
            },
            "code": "void initialize_timer_with_delay_and_callback_0800242c(void* callback_function, int delay_ms, int callback_arg){\n  initialize_timer(callback_function, delay_ms, 0x5dc, PTR_LAB_08002444_1_08002440, callback_arg);\n  return;\n}",
            "called": [
                "FUN_08007648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800242c",
            "calling": [
                "FUN_080025ac"
            ],
            "imported": true,
            "current_name": "initialize_timer_with_delay_and_callback_0800242c"
        },
        "FUN_080058d2": {
            "renaming": {
                "DAT_08005a10": "data",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "flag4": "8",
                "flag3": "4",
                "flag2": "1",
                "flag1": "2",
                "param_1": "command",
                "param_2": "command_length",
                "DAT_08005a0c": "ptr",
                "puVar1": "ptr",
                "FUN_080058d2": "execute_command_080058d2",
                "uVar4": "subcommand"
            },
            "code": "uint execute_command_080058d2(uint *command, uint command_length)\n{\n  uint *DAT_08005a10 = DAT_08005a10;\n  uint *DAT_08005a0c = DAT_08005a0c;\n  uint flag1 = 2;\n  uint flag2 = 1;\n  uint flag3 = 4;\n  uint flag4 = 8;\n  if ((*command & flag1) != 0) {\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xffffff0f | command[2];\n  }\n  if ((*command & flag2) != 0) {\n    uint subcommand = command[1];\n    if (subcommand == 1) {\n      if ((*DAT_08005a10 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((subcommand != 2) && ((*DAT_08005a10 & flag1) == 0)) {\n      return 1;\n    }\n    DAT_08005a10[1] = subcommand | DAT_08005a10[1] & 0xfffffffc;\n    uint start_time = get_current_time();\n    if (subcommand == 1) {\n      while ((DAT_08005a10[1] & 0xc) != 4) {\n        uint current_time = get_current_time();\n        if (5000 < (current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (subcommand == 2) {\n      while ((DAT_08005a10[1] & 0xc) != 8) {\n        uint current_time = get_current_time();\n        if (5000 < (current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((DAT_08005a10[1] & 0xc) != 0) {\n        uint current_time = get_current_time();\n        if (5000 < (current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((command_length < (*DAT_08005a0c & 7)) &&\n     (*DAT_08005a0c = *DAT_08005a0c & 0xfffffff8 | command_length, command_length != (*DAT_08005a0c & 7))) {\n    return 1;\n  }\n  if ((*command & flag3) != 0) {\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xfffff8ff | command[3];\n  }\n  if ((*command & flag4) != 0) {\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xffffc7ff | command[4] << 3;\n  }\n  uint result = calculate_result();\n  *(uint *)PTR_DAT_08005a18 = result >> PTR_DAT_08005a14[(DAT_08005a10[1] << 0x18) >> 0x1c];\n  validate_input(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08005840",
                "FUN_080036d8",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058d2",
            "calling": [
                "FUN_080058ac"
            ],
            "imported": true,
            "current_name": "execute_command_080058d2"
        },
        "FUN_08002c00": {
            "renaming": {
                "FUN_08002c00": "process_data_and_return_08002c00",
                "process_data_08002b68": "process_data"
            },
            "code": "void process_data_and_return_08002c00(void)\n{\n  process_data();\n  return;\n}",
            "called": [
                "FUN_08002b68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c00",
            "calling": [
                "FUN_08002c14"
            ],
            "imported": true,
            "current_name": "process_data_and_return_08002c00"
        },
        "FUN_08003f30": {
            "renaming": {
                "uVar1": "shifted_value",
                "param_1": "dest",
                "param_2": "bit_offset",
                "param_3": "bit_count",
                "uVar2": "shifted_dest",
                "FUN_08003f30": "set_bits_in_byte_08003f30",
                "mask": "mask"
            },
            "code": "void set_bits_in_byte_08003f30(uint8_t* dest, uint32_t bit_offset, uint32_t bit_count, uint32_t value) {\n  uint32_t num_bits_set = (uint32_t)(*(int *)(DAT_08003f8c + 0xc) << 0x15) >> 0x1d;\n  uint32_t num_bits_unset = 7 - num_bits_set;\n  if (num_bits_unset > 3) {\n    num_bits_unset = 4;\n  }\n  if (num_bits_set + 4 < 7) {\n    num_bits_set = 0;\n  }\n  else {\n    num_bits_set -= 3;\n  }\n  uint32_t mask = (1U << bit_count) - 1U;\n  uint32_t shifted_value = (value & mask) << (bit_offset & 0xff);\n  uint32_t shifted_dest = (*(int *)(DAT_08003f90 + (dest & 0xf)) & (uint32_t)0xfffffff0) | (shifted_value >> 4);\n  *(int *)(DAT_08003f90 + (dest & 0xf)) = shifted_dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f30",
            "calling": [
                "FUN_08008694",
                "FUN_0800863c",
                "FUN_080077b0",
                "FUN_080035b8",
                "FUN_08007648",
                "FUN_080036d8"
            ],
            "imported": true,
            "current_name": "set_bits_in_byte_08003f30"
        },
        "FUN_08007f78": {
            "renaming": {
                "param_1": "value",
                "FUN_08007f78": "subtract_four_from_value_08007f78",
                "return": "result"
            },
            "code": "int subtract_four_from_value_08007f78(int value){\n    int result = value - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f78",
            "calling": [
                "FUN_08007fa0",
                "FUN_08007ff0",
                "FUN_08008020"
            ],
            "imported": true,
            "current_name": "subtract_four_from_value_08007f78"
        },
        "FUN_08006b28": {
            "renaming": {
                "param_1": "num",
                "*PTR_": "ptr",
                "param_2": "index",
                "DAT_": "num",
                "FUN_08006b28": "get_bit_at_index_08006b28"
            },
            "code": "uint get_bit_at_index_08006b28(uint DAT_, int index){\n    uint* *PTR_ = (uint*)(index + ((DAT_ << 0x18) >> 0x1c) * 4);\n    return (**PTR_ >> (DAT_ & 0xf)) & 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b28",
            "calling": [
                "FUN_08008a24",
                "FUN_080088e0",
                "FUN_08008990",
                "FUN_08008a6c"
            ],
            "imported": true,
            "current_name": "get_bit_at_index_08006b28"
        },
        "FUN_080085dc": {
            "renaming": {
                "FUN_080085dc": "check_flag_080085dc",
                "PTR_DAT_080085fc": "flag_addresses",
                "uVar1": "combined_bytes",
                "param_1": "flag_position"
            },
            "code": "bool check_flag_080085dc(int flag_position)\n{\n  uint16_t combined_bytes = combine_bytes(get_flag_address(flag_position));\n  return (combined_bytes & 0x0021) == 0x0021;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085dc",
            "calling": [],
            "imported": true,
            "current_name": "check_flag_080085dc"
        },
        "FUN_08006b1c": {
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "*(byte *)(param_1 + 0x39)": "byte_2",
                "param_1": "input_value",
                "*(byte *)(param_1 + 0x3a)": "byte_1"
            },
            "code": "byte combine_bytes_08006b1c(int input_value){\n    byte byte_1 = *(byte *)(input_value + 0x3a);\n    byte byte_2 = *(byte *)(input_value + 0x39);\n    return byte_1 | byte_2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b1c",
            "calling": [
                "FUN_080085b8",
                "FUN_080085dc"
            ],
            "imported": true,
            "current_name": "combine_bytes_08006b1c"
        },
        "FUN_08008ed6": {
            "renaming": {
                "FUN_08008ed6": "convert_base_if_not_zero_08008ed6",
                "convert_base_08008e7c": "convert_base",
                "param_1": "function_pointer",
                "param_2": "param_2",
                "PTR_": "",
                "param_3": "param_3",
                "param_4": "param_4",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ convert_base_if_not_zero_08008ed6(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_7DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "FUN_08008e7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ed6",
            "calling": [
                "FUN_08008eec"
            ],
            "imported": true,
            "current_name": "convert_base_if_not_zero_08008ed6"
        },
        "FUN_0800a130": {
            "renaming": {
                "FUN_0800a130": "processReturnValue_0800a130",
                "iVar2": "returnVal",
                "param_1": "returnValue",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptrData"
            },
            "code": "void processReturnValue_0800a130(int *returnValue, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n    undefined *ptrData = PTR_DAT_0800a150;\n    *(undefined4 *)PTR_DAT_0800a150 = 0;\n    int returnVal = return_zero_08008854(param_2, param_3, param_4, param_4, param_4);\n    if (returnVal == -1 && *(int *)ptrData != 0)\n    {\n        *returnValue = *(int *)ptrData;\n    }\n    return;\n}",
            "called": [
                "FUN_08008854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a130",
            "calling": [
                "FUN_0800a042",
                "FUN_0800a07a"
            ],
            "imported": true,
            "current_name": "processReturnValue_0800a130"
        },
        "FUN_08008f3c": {
            "renaming": {
                "FUN_08008f3c": "count_bits_set_08008f3c",
                "param_1": "number",
                "cVar1": "bit_count"
            },
            "code": "char count_bits_set_08008f3c(uint number) {\n  char bit_count = 0;\n  while (number != 1) {\n    bit_count++;\n    number = number >> 1;\n  }\n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f3c",
            "calling": [
                "FUN_08009094"
            ],
            "imported": true,
            "current_name": "count_bits_set_08008f3c"
        },
        "FUN_08002ef2": {
            "renaming": {
                "FUN_08002ef2": "sendEncodedMessage_08002ef2",
                "param_1": "messageOffset",
                "param_2": "parameter1",
                "param_3": "parameter2",
                "param_4": "parameter3"
            },
            "code": "void sendEncodedMessage_08002ef2(int messageOffset, undefined4 parameter1, undefined2 parameter2, undefined4 parameter3)\n{\n  send_encoded_message_if_possible_08003158(messageOffset + 0x40, parameter1, parameter2, parameter3, parameter3);\n  return;\n}",
            "called": [
                "FUN_08003158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef2",
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "imported": true,
            "current_name": "sendEncodedMessage_08002ef2"
        },
        "FUN_08007332": {
            "renaming": {
                "FUN_08007332": "find_character_index_08007332",
                "param_1": "search_character",
                "*param_2": "*string_array",
                "param_2": "string_array"
            },
            "code": "int find_character_index_08007332(int search_character, char *string_array) {\n  while(true) {\n    if (*(int *)(string_array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(string_array + 4) == search_character) break;\n    string_array = string_array + 0xc;\n  }\n  return (int)*string_array;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007332",
            "calling": [
                "FUN_0800734a",
                "FUN_08007332"
            ],
            "imported": true,
            "current_name": "find_character_index_08007332"
        },
        "FUN_08006128": {
            "renaming": {
                "*(undefined *)((int)param_1 + 0x3d)": "update_status",
                "*(char *)((int)param_array + 0x3d)": "update_status",
                "update_flags_and_registers_08005cec": "update_flags_and_registers",
                "FUN_08006128": "update_params_if_needed_08006128",
                "param_1": "param_array",
                "set_params_080060c4": "set_params",
                "update_values_08005dac": "update_values",
                "*param_1": "*param_array",
                "param_2": "param_count",
                "param_3": "update_type",
                "*(char *)(param_1 + 0xf)": "is_updated",
                "update_data_08005d48": "update_data",
                "*(undefined *)(param_1 + 0xf)": "is_updated"
            },
            "code": "int update_params_if_needed_08006128(int *param_array, int param_count, int update_type)\n{\n  int is_updated = *(char *)(param_array + 0xf);\n  if (is_updated != 1) {\n    *(char *)(param_array + 0xf) = 1;\n    *(char *)((int)param_array + 0x3d) = 2;\n    switch(update_type) {\n    case 0:\n      update_flags_and_registers(*param_array);\n      break;\n    case 4:\n      set_params(*param_array);\n      break;\n    case 8:\n      update_data(*param_array);\n      break;\n    case 0xc:\n      update_values(*param_array);\n    }\n    *(char *)((int)param_array + 0x3d) = 1;\n    *(char *)(param_array + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}",
            "called": [
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec",
                "FUN_08005dac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006128",
            "calling": [
                "FUN_08007648"
            ],
            "imported": true,
            "current_name": "update_params_if_needed_08006128"
        },
        "FUN_08003658": {
            "renaming": {
                "iVar1": "index",
                "PTR_DAT_08003690": "PTR_DATA_START",
                "DAT_0800368c": "DATA_START",
                "process_data_and_send_messages_until_data_is_zero_08008f1c": "process_data_and_send_messages_until_data_is_zero",
                "PTR_DAT_08003694": "PTR_DATA_END",
                "puVar2": "data_ptr",
                "FUN_08003658": "process_data_and_send_messages_08003658",
                "UNRECOVERED_JUMPTABLE": "jumptable",
                "execute_functions_08009148": "execute_functions",
                "PTR_DAT_0800369c": "PTR_DATA_END",
                "PTR_DAT_08003698": "PTR_DATA_INIT",
                "set_flags_and_values_080073ec": "set_flags_and_values"
            },
            "code": "void process_data_and_send_messages_08003658(void)\n{\n  int index = 0;\n  undefined4 *data_ptr;\n  code *jumptable;\n  for (index = 0; PTR_DAT_08003690 + index < PTR_DAT_08003694; index += 4) {\n    *(undefined4 *)(PTR_DAT_08003690 + index) = *(undefined4 *)(DAT_0800368c + index);\n  }\n  for (data_ptr = PTR_DAT_08003698; data_ptr < PTR_DAT_08003694; data_ptr++) {\n    *data_ptr = 0;\n  }\n  set_flags_and_values();\n  execute_functions();\n  jumptable = (code *)0x800368a;\n  process_data_and_send_messages_08003658_until_data_is_zero();\n  (*jumptable)();\n  return;\n}",
            "called": [
                "FUN_080073ec",
                "FUN_08009148",
                "FUN_08008f1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003658",
            "calling": [],
            "imported": true,
            "current_name": "process_data_and_send_messages_08003658"
        },
        "FUN_08009a80": {
            "renaming": {
                "iVar3": "data_ptr",
                "uVar1": "result",
                "param_1": "output",
                "FUN_08009a80": "process_data_08009a80",
                "param_2": "input",
                "uVar2": "flags"
            },
            "code": "uint process_data_08009a80(undefined4 *output, undefined4 *input)\n{\n  uint result;\n  ushort flags;\n  int data_ptr;\n  data_ptr = *(int *)PTR_PTR_DAT_08009b4c;\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    initialize_params_08009d50(data_ptr);\n  }\n  if (input == (undefined4 *)PTR_DAT_08009b50) {\n    input = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (input == (undefined4 *)PTR_DAT_08009b54) {\n    input = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (input == (undefined4 *)PTR_DAT_08009b58) {\n    input = *(undefined4 **)(data_ptr + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          add_to_linked_list_080091d8(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    allocate_and_set_memory_block_08009eac(output, input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_08009d50",
                "FUN_08009eac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a80",
            "calling": [
                "FUN_0800932c",
                "FUN_0800937c"
            ],
            "imported": true,
            "current_name": "process_data_08009a80",
            "code_backup": "\nuint FUN_08009a80(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08009b4c;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUNC_08009d50(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_08009b50) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08009b54) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08009b58) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          add_to_linked_list_080091d8(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_set_memory_block_08009eac(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08009ab0:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08004a74": {
            "renaming": {
                "FUN_08004a74": "do_nothing_08004a74"
            },
            "code": "\nvoid do_nothing_08004a74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a74",
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "imported": true,
            "current_name": "do_nothing_08004a74"
        },
        "FUN_080062f4": {
            "renaming": {
                "param_1": "bits",
                "FUN_080062f4": "clear_bits_and_update_080062f4",
                "param_2": "position",
                "puVar1": "bits_ptr"
            },
            "code": "uint32_t clear_bits_and_update_080062f4(uint32_t **bits, uint32_t position) {\n  uint32_t *bits_ptr = *bits;\n  switch(position) {\n    case 0:\n      bits_ptr[3] &= 0xfffffffd;\n      break;\n    case 4:\n      bits_ptr[3] &= 0xfffffffb;\n      break;\n    case 8:\n      bits_ptr[3] &= 0xfffffff7;\n      break;\n    case 0xc:\n      bits_ptr[3] &= 0xffffffef;\n      break;\n  }\n  update_bits(bits_ptr, position, 0);\n  if (((bits_ptr == PTR_DAT_0800638c) && ((bits_ptr[8] & 0x1111) == 0)) && ((bits_ptr[8] & 0x444) == 0)) {\n    bits_ptr[0x11] &= 0xffff7fff;\n  }\n  if (((bits_ptr[8] & 0x1111) == 0) && ((bits_ptr[8] & 0x444) == 0)) {\n    *bits_ptr &= 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080062f4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": true,
            "current_name": "clear_bits_and_update_080062f4"
        },
        "FUN_080073e8": {
            "renaming": {
                "FUN_080073e8": "wait_forever_080073e8"
            },
            "code": "void wait_forever_080073e8(void)\n{\n  while(true);\n}",
            "called": [
                "FUN_080073e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073e8",
            "calling": [
                "FUN_080035b8",
                "FUN_080073e8"
            ],
            "imported": true,
            "current_name": "wait_forever_080073e8"
        },
        "FUN_08004a76": {
            "renaming": {
                "puVar2": "current_ptr",
                "param_1": "data",
                "cVar1": "current_char",
                "FUN_08004a76": "process_data_08004a76"
            },
            "code": "int process_data_08004a76(int *data) {\n  char current_char = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    undefined *current_ptr = (undefined *)data[9];\n    data[9] = (int)(current_ptr + 1);\n    *current_ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) - 1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (current_char == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[12] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      do_nothing();\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a76",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "process_data_08004a76"
        },
        "FUN_0800877c": {
            "renaming": {
                "FUN_0800877c": "do_nothing_0800877c"
            },
            "code": "\nvoid do_nothing_0800877c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800877c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": true,
            "current_name": "do_nothing_0800877c"
        },
        "FUN_0800267c": {
            "renaming": {
                "iVar1": "value",
                "param_1": "input_array",
                "param_2": "index",
                "first_calculation": "first_calculation",
                "second_calculation": "second_calculation",
                "FUN_0800267c": "calculate_value_at_index_0800267c"
            },
            "code": "void calculate_value_at_index_0800267c(byte *input_array, int index) {\n  int value;\n  if (*input_array < 0xc) {\n    int first_calculation = (0x88 - (char)input_array[1]) * 4;\n    int second_calculation = (600 - (char)input_array[2]) * 4;\n    if ((first_calculation - index == 0 || first_calculation < index) &&\n       (index == second_calculation || index + (600 - (char)input_array[2]) * -4 < 0 != SBORROW4(index, second_calculation)))\n    {\n      value = index;\n    }\n    *(int *)(PTR_DAT_080026ac + (uint)*input_array * 8 + 4) = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800267c",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": true,
            "current_name": "calculate_value_at_index_0800267c"
        },
        "FUN_080047f4": {
            "renaming": {
                "local_c": "input_index",
                "uVar1": "result",
                "puVar2": "current_input",
                "param_1": "input_buffer",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_080047f4": "process_input_080047f4"
            },
            "code": "uint32_t process_input_080047f4(uint32_t **input_buffer, uint32_t *param_2, uint32_t *param_3, uint16_t param_4) {\n  uint32_t result;\n  uint32_t *current_input;\n  int input_index;\n  \n  if ((*input_buffer)[0x3d] == ' ') {\n    input_index = (uint32_t)((uint64_t)DAT_080048c0 * (uint64_t)(*(uint32_t *)PTR_DAT_080048bc >> 3) >> 0x28) * 0x19;\n    do {\n      if (input_index == 0) {\n        (*input_buffer)[0xc] = (uint32_t *)0x0;\n        (*input_buffer)[0x3d] = 0x20;\n        (*input_buffer)[0xf] = 0;\n        result = 3;\n        goto end;\n      }\n      current_input = *input_buffer;\n      input_index--;\n    } while ((current_input[6] & 2) != 0);\n    if ((*input_buffer)[0xf] == '\\x01') {\n      result = 2;\n    }\n    else {\n      (*input_buffer)[0xf] = 1;\n      if ((*current_input & 1) == 0) {\n        *current_input = *current_input | 1;\n      }\n      **input_buffer = **input_buffer & 0xfffff7ff;\n      (*input_buffer)[0x3d] = 0x22;\n      (*input_buffer)[0x3e] = 0x10;\n      result = 0;\n      (*input_buffer)[0x10] = (uint32_t *)0x0;\n      (*input_buffer)[9] = param_3;\n      (*input_buffer)[0xb] = DAT_080048c4;\n      (*input_buffer)[10] = param_4;\n      (*input_buffer)[0x11] = param_2;\n      **input_buffer = **input_buffer | 0x400;\n      **input_buffer = **input_buffer | 0x100;\n      (*input_buffer)[0xf] = 0;\n      (*input_buffer)[1] = (*input_buffer)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  end:\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08007f0e"
            ],
            "imported": true,
            "current_name": "process_input_080047f4"
        },
        "FUN_0800376c": {
            "renaming": {
                "iVar1": "initial_pointer_value",
                "iVar3": "divisor_multiplier",
                "param_1": "ptr_to_ptr",
                "puVar5": "ptr",
                "local_1c": "i",
                "param_2": "max_iterations",
                "uVar2": "divisor",
                "FUN_0800376c": "decode_and_update_0800376c",
                "uVar4": "result",
                "uVar6": "uVar1"
            },
            "code": "uint decode_and_update_0800376c(uint **ptr_to_ptr, uint max_iterations) {\n  int initial_pointer_value = get_pointer_value();\n  uint *ptr = *ptr_to_ptr;\n  if ((ptr[2] & 0x100) == 0) {\n    if (((ptr[1] & 0x100) == 0) && ((ptr[0xb] & 0xf00000) == 0)) {\n      while ((**ptr_to_ptr & 2) == 0) {\n        if ((max_iterations != 0xffffffff) && ((max_iterations != 0) && ((get_pointer_value() - initial_pointer_value) > max_iterations))) {\n          ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] | 4);\n          *(undefined *)(ptr_to_ptr + 9) = 0;\n          return 3;\n        }\n      }\n      ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] | 4);\n      *(undefined *)(ptr_to_ptr + 9) = 0;\n      return 3;\n    }\n    else {\n      uint uVar1 = *(uint *)PTR_DAT_080038c8;\n      uint divisor = decode_value(2);\n      if (((ptr[4] & DAT_080038cc) == 0) && ((ptr[3] & DAT_080038cc + 0xdc000000) == 0)) {\n        int divisor_multiplier = (ptr[4] & DAT_080038d0) == 0 ? ((ptr[3] & DAT_080038d4) == 0 ? 0x14 : 0x29) : 0x29;\n        divisor_multiplier = (ptr[3] & DAT_080038d4) == 0 ? divisor_multiplier : 0xfc;\n        uint iterations = (uVar1 / divisor) * divisor_multiplier;\n        for (uint i = 0; i <= iterations && (iterations - i) != 0; i++) {\n          if ((max_iterations != 0xffffffff) && ((max_iterations != 0) && ((get_pointer_value() - initial_pointer_value) > max_iterations))) {\n            ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] | 4);\n            *(undefined *)(ptr_to_ptr + 9) = 0;\n            return 3;\n          }\n        }\n        **ptr_to_ptr = 0xffffffed;\n        ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] | 0x200);\n        if ((ptr[2] & 0xe0000) == 0xe0000) {\n          if (ptr_to_ptr[3] == (uint *)0x0) {\n            ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] & 0xfffffeff);\n            if (((uint)ptr_to_ptr[10] & 0x1000) == 0) {\n              ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] | 1);\n              return 0;\n            }\n            else {\n              return 0;\n            }\n          }\n          else {\n            return 0;\n          }\n        }\n        else {\n          return 0;\n        }\n      }\n      else if (((ptr[4] & DAT_080038d0) == 0) && ((ptr[3] & DAT_080038d0 + 0xee000000) == 0)) {\n        uint iterations = 0x54;\n        for (uint i = 0; i <= iterations && (iterations - i) != 0; i++) {\n          if ((max_iterations != 0xffffffff) && ((max_iterations != 0) && ((get_pointer_value() - initial_pointer_value) > max_iterations))) {\n            ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] | 4);\n            *(undefined *)(ptr_to_ptr + 9) = 0;\n            return 3;\n          }\n        }\n        **ptr_to_ptr = 0xffffffed;\n        ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] | 0x200);\n        if ((ptr[2] & 0xe0000) == 0xe0000) {\n          if (ptr_to_ptr[3] == (uint *)0x0) {\n            ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] & 0xfffffeff);\n            if (((uint)ptr_to_ptr[10] & 0x1000) == 0) {\n              ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] | 1);\n              return 0;\n            }\n            else {\n              return 0;\n            }\n          }\n          else {\n            return 0;\n          }\n        }\n        else {\n          return 0;\n        }\n      }\n      else if ((DAT_080038d8 & ptr[4]) == 0) {\n        uint iterations = (DAT_080038d8 & ptr[3]) == 0 ? 0x54 : 0xfc;\n        for (uint i = 0; i <= iterations && (iterations - i) != 0; i++) {\n          if ((max_iterations != 0xffffffff) && ((max_iterations != 0) && ((get_pointer_value() - initial_pointer_value) > max_iterations))) {\n            ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] | 4);\n            *(undefined *)(ptr_to_ptr + 9) = 0;\n            return 3;\n          }\n        }\n        **ptr_to_ptr = 0xffffffed;\n        ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] | 0x200);\n        if ((ptr[2] & 0xe0000) == 0xe0000) {\n          if (ptr_to_ptr[3] == (uint *)0x0) {\n            ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] & 0xfffffeff);\n            if (((uint)ptr_to_ptr[10] & 0x1000) == 0) {\n              ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] | 1);\n              return 0;\n            }\n            else {\n              return 0;\n            }\n          }\n          else {\n            return 0;\n          }\n        }\n        else {\n          return 0;\n        }\n      }\n      else {\n        uint iterations = 0xfc;\n        for (uint i = 0; i <= iterations && (iterations - i) != 0; i++) {\n          if ((max_iterations != 0xffffffff) && ((max_iterations != 0) && ((get_pointer_value() - initial_pointer_value) > max_iterations))) {\n            ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] | 4);\n            *(undefined *)(ptr_to_ptr + 9) = 0;\n            return 3;\n          }\n        }\n        **ptr_to_ptr = 0xffffffed;\n        ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] | 0x200);\n        if ((ptr[2] & 0xe0000) == 0xe0000) {\n          if (ptr_to_ptr[3] == (uint *)0x0) {\n            ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] & 0xfffffeff);\n            if (((uint)ptr_to_ptr[10] & 0x1000) == 0) {\n              ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] | 1);\n              return 0;\n            }\n            else {\n              return 0;\n            }\n          }\n          else {\n            return 0;\n          }\n        }\n        else {\n          return 0;\n        }\n      }\n    }\n  }\n  else {\n    ptr_to_ptr[10] = (uint *)((uint)ptr_to_ptr[10] | 0x20);\n    *(undefined *)(ptr_to_ptr + 9) = 0;\n    return 1;\n  }\n}\n",
            "called": [
                "FUN_08005bb8",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "decode_and_update_0800376c"
        },
        "FUN_08003e20": {
            "renaming": {
                "iVar1": "status",
                "iVar3": "start_time",
                "iVar4": "current_time",
                "param_1": "data",
                "uVar2": "decode_value",
                "uVar5": "quotient",
                "FUN_08003e20": "process_data_08003e20",
                "local_14": "i"
            },
            "code": "int process_data_08003e20(int *data)\n{\n  int status = check_and_update_status();\n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  if (status == 0) {\n    uint decode_value = decode_value_08005bb8(2);\n    uint quotient = *(uint *)PTR_DAT_08003f08 / decode_value;\n    for (int i = quotient << 1; i != 0; i--) {\n    }\n    set_flag_and_check_if_set(data);\n    *(uint *)(*data + 8) |= 8;\n    int start_time = get_pointer_value_08003760();\n    while ((*(uint *)(*data + 8) & 8) != 0) {\n      int current_time = get_pointer_value_08003760();\n      if (current_time - start_time > 10) {\n        data[10] = (data[10] & 0xffffffedU) | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_time + 8) |= 4;\n    int end_time = get_pointer_value_08003760();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      int current_time = get_pointer_value_08003760();\n      if (current_time - end_time > 10) {\n        data[10] = (data[10] & 0xffffffedU) | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = (data[10] & 0xfffffffcU) | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return status;\n}\n",
            "called": [
                "FUN_08003b8c",
                "FUN_08005bb8",
                "FUN_08003a20",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e20",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "process_data_08003e20"
        },
        "FUN_08005a48": {
            "renaming": {
                "uVar1": "shifted_value",
                "DAT_08005a60": "data_array",
                "PTR_DAT_08005a64": "pointer_array",
                "get_value_from_pointer_08005a1c": "get_value_from_pointer",
                "FUN_08005a48": "get_shifted_value_from_pointer_08005a48"
            },
            "code": "uint get_shifted_value_from_pointer_08005a48(void)\n{\n  uint shifted_value = get_value_from_pointer();\n  uint index = (*(int *)(DAT_08005a60 + 4) << 0x12) >> 0x1d;\n  uint shifted_result = shifted_value >> PTR_DAT_08005a64[index];\n  return shifted_result;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a48",
            "calling": [
                "FUN_08006538",
                "FUN_08005bb8",
                "FUN_080075dc"
            ],
            "imported": true,
            "current_name": "get_shifted_value_from_pointer_08005a48"
        },
        "FUN_080033a8": {
            "renaming": {
                "bVar1": "byte1",
                "iVar2": "i",
                "param_1": "dest",
                "param_2": "num_bytes",
                "param_3": "source",
                "uVar3": "byte_index",
                "FUN_080033a8": "copy_bytes_with_bitshift_080033a8"
            },
            "code": "void copy_bytes_with_bitshift_080033a8(uint8_t* dest, uint8_t* source, uint32_t num_bytes){\n    uint32_t i;\n    uint8_t byte1, byte2;\n    for (i = 0; i < num_bytes; i += 2) {\n        byte1 = *(source + i);\n        byte2 = *(source + i + 1);\n        *(dest + i) = byte1;\n        *(dest + i + 1) = (byte2 << 7) | byte1;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033a8",
            "calling": [
                "FUN_080033cc"
            ],
            "imported": true,
            "current_name": "copy_bytes_with_bitshift_080033a8"
        },
        "FUN_08002c14": {
            "renaming": {
                "process_data_and_return_08002c00": "process_data_and_return_08002c00",
                "FUN_08002c14": "process_and_return_data_08002c14_08002c14"
            },
            "code": "void process_and_return_data_08002c14_08002c14(void)\n{\n  process_data_and_return_08002c00();\n  return;\n}",
            "called": [
                "FUN_08002c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c14",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": true,
            "current_name": "process_and_return_data_08002c14_08002c14"
        },
        "FUN_08008d18": {
            "renaming": {
                "uVar1": "byteValue",
                "param_1": "memoryAddress",
                "param_2": "tableIndex",
                "FUN_08008d18": "getByteFromTableAndWriteToMemory_08008d18"
            },
            "code": "void getByteFromTableAndWriteToMemory_08008d18(int memoryAddress, uint tableIndex)\n{\n  undefined byteValue;\n  if (tableIndex < 0x3c) {\n    byteValue = PTR_DAT_08008d2c[tableIndex];\n  }\n  else {\n    byteValue = 0xff;\n  }\n  *(undefined *)(memoryAddress + 300) = byteValue;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d18",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": true,
            "current_name": "getByteFromTableAndWriteToMemory_08008d18"
        },
        "FUN_08009084": {
            "renaming": {
                "count_bits_set_08008f3c": "count_bits_set",
                "iVar1": "bit_count",
                "param_1": "response_id",
                "process_response_and_set_flags_0800a18c": "process_response_and_set_flags",
                "FUN_08009084": "process_response_08009084"
            },
            "code": "void process_response_08009084(int response_id){\n  int bit_count = count_bits_set();\n  if (*(int *)(PTR_DAT_080090b0 + bit_count * 0x14 + 0xc) != 0) {\n    process_response_08009084(response_id);\n  }\n  else {\n    if (*(int *)(response_id + 8) != 0) {\n      (**(code **)(response_id + 0xc))();\n    }\n    else {\n      process_response_08009084_and_set_flags();\n    }\n  }\n}",
            "called": [
                "FUN_0800a18c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009084",
            "calling": [
                "FUN_08009094"
            ],
            "imported": true,
            "current_name": "process_response_08009084"
        },
        "FUN_0800a020": {
            "renaming": {
                "FUN_0800a020": "process_value_0800a020",
                "iVar1": "result",
                "bVar3": "isPositive",
                "param_1": "value1",
                "param_2": "value2",
                "uVar2": "newValue"
            },
            "code": "void process_value_0800a020(int value1, int value2)\n{\n  int result = process_return_value(value1, (int)*(short *)(value2 + 0xe));\n  bool isPositive = result >= 0;\n  uint newValue;\n  if (isPositive) {\n    newValue = *(int *)(value2 + 0x54) + result;\n  }\n  else {\n    newValue = *(ushort *)(value2 + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(value2 + 0x54) = newValue;\n  }\n  if (!isPositive) {\n    *(short *)(value2 + 0xc) = (short)newValue;\n  }\n  return;\n}",
            "called": [
                "FUN_0800a168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a020",
            "calling": [],
            "imported": true,
            "current_name": "process_value_0800a020"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_result_08005840",
                "uVar1": "result",
                "uStack_14": "stack_var_1",
                "local_1c": "local_value",
                "uStack_10": "stack_var_2",
                "uStack_c": "stack_var_3",
                "uVar2": "stack_value",
                "abStack_18": "stack_array"
            },
            "code": "uint calculate_result_08005840(void)\n{\n  uint result;\n  uint stack_value;\n  undefined2 local_value;\n  byte stack_array[4];\n  undefined4 stack_var_1;\n  undefined4 stack_var_2;\n  undefined4 stack_var_3;\n  \n  stack_var_3 = *(undefined4 *)(PTR_DAT_0800589c + 8);\n  stack_var_2 = *(undefined4 *)(PTR_DAT_0800589c + 4);\n  stack_var_1 = *(undefined4 *)PTR_DAT_0800589c;\n  local_value = *(undefined2 *)(PTR_DAT_0800589c + 0x10);\n  stack_value = *(uint *)(DAT_080058a0 + 4);\n  result = DAT_080058a8;\n  if ((stack_value & 0xc) == 8) {\n    if ((stack_value & 0x10000) == 0) {\n      result = DAT_080058a4 * (uint)stack_array[(stack_value << 10) >> 0x1c];\n    }\n    else {\n      result = (DAT_080058a8 * stack_array[(stack_value << 10) >> 0x1c]) /\n              (uint)*(byte *)((int)&local_value - ((*(int *)(DAT_080058a0 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "FUN_080058d2"
            ],
            "imported": true,
            "current_name": "calculate_result_08005840"
        },
        "FUN_08007f7c": {
            "renaming": {
                "*(int *)(param_1 + 0x60)": "*(int*)(param_1 + 0x60)",
                "set_flags_080049e0": "set_flags_080049e0",
                "FUN_08007f7c": "set_param_2_if_param_1_not_null_08007f7c",
                "param_1": "param_1",
                "param_2": "param_2"
            },
            "code": "void set_param_2_if_param_1_not_null_08007f7c(int param_1, int param_2)\n{\n  if (param_1 != 0) {\n    if (param_2 != 0) {\n      int* ptr_param_1_plus_0x60 = (int*)(param_1 + 0x60);\n      *ptr_param_1_plus_0x60 = param_2;\n      set_flags_080049e0(param_1 + 4);\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f7c",
            "calling": [
                "FUN_08002968"
            ],
            "imported": true,
            "current_name": "set_param_2_if_param_1_not_null_08007f7c"
        },
        "FUN_08006d80": {
            "renaming": {
                "FUN_08006d80": "get_value_from_array_08006d80",
                "param_1": "input_value",
                "local_1c": "ARRAY_PTR",
                "local_2c": "config_5",
                "local_3c": "config_2",
                "local_28": "config_6",
                "local_38": "index",
                "local_10": "ARRAY_PTR_2",
                "local_20": "config_8",
                "local_30": "config_4",
                "local_40": "config_1",
                "local_46": "value",
                "local_24": "config_7",
                "local_34": "config_3",
                "local_44": "flags"
            },
            "code": "int get_value_from_array_08006d80(int input_value) {\n  int value = 0;\n  uint flags = 0;\n  int offset = 0;\n  int status = 0;\n  int array[12] = {0};\n  fill_array_with_value(array, 0, 0x30);\n  int index = find_index_if_not_negative(input_value, ARRAY_PTR);\n  if (index == 0) {\n    value = 0;\n  }\n  else {\n    int config_1 = 0;\n    int config_2 = 0;\n    int config_3 = 0;\n    int config_4 = 0;\n    int config_5 = 0xe0000;\n    int config_6 = 0;\n    int config_7 = 1;\n    int config_8 = 0;\n    *ARRAY_PTR_2 = (char)input_value;\n    status = check_and_update_status(&index);\n    if (status == 0) {\n      flags = find_value(input_value);\n      if (flags < 0x12) {\n        config_1 = 1;\n        config_2 = 2;\n        status = set_config(&index, &flags);\n        if (status == 0) {\n          status = process_data(&index);\n          if (status == 0) {\n            status = set_flags_and_check_if_set(&index);\n            if (status == 0) {\n              status = decode_and_update(&index, 10);\n              if (status == 0) {\n                uint value_at_offset = get_value_at_offset(&index);\n                if ((value_at_offset & 0x200) != 0) {\n                  value = get_value_at_offset_0x4c(&index);\n                }\n                status = update_status_if_needed(&index);\n                if (status == 0) {\n                  status = update_status(&index);\n                  if (status != 0) {\n                    value = 0;\n                  }\n                }\n                else {\n                  value = 0;\n                }\n              }\n              else {\n                value = 0;\n              }\n            }\n            else {\n              value = 0;\n            }\n          }\n          else {\n            value = 0;\n          }\n        }\n        else {\n          value = 0;\n        }\n      }\n      else {\n        value = 0;\n      }\n    }\n    else {\n      value = 0;\n    }\n  }\n  return value;\n}",
            "called": [
                "FUN_08007320",
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_080038dc",
                "FUN_08003bd8",
                "FUN_080091c6",
                "FUN_08006c60",
                "FUN_08003ce8",
                "FUN_0800376c",
                "FUN_080038e4",
                "FUN_08003aa0",
                "FUN_08003a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d80",
            "calling": [
                "FUN_08008880"
            ],
            "imported": true,
            "current_name": "get_value_from_array_08006d80"
        },
        "FUN_08006c60": {
            "renaming": {
                "iVar1": "found_index",
                "FUN_08006c60": "find_value_08006c60",
                "param_1": "value",
                "param_2": "data_ptr",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar2": "shifted_value"
            },
            "code": "uint find_value_08006c60(uint value, uint* data_ptr, uint param_3, uint param_4){\n  int found_index = find_value_08006c60_08007376(value, data_ptr, param_3, param_4, param_4);\n  uint shifted_value = (uint)(found_index << 0xc) >> 0x1b;\n  if (shifted_value > 0x11) {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c60",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "find_value_08006c60"
        },
        "FUN_08003306": {
            "renaming": {
                "param_1": "base_address",
                "FUN_08003306": "set_data_at_offset_08003306",
                "param_2": "offset",
                "param_3": "data1",
                "param_4": "data2"
            },
            "code": "void set_data_at_offset_08003306(uint32_t base_address, uint32_t offset, uint32_t data1, uint32_t data2) {\n  switch(offset) {\n    case 0x20:\n      *(uint32_t *)(base_address + 0x20) = data2;\n      *(uint32_t *)(base_address + 0x50) = data1;\n      break;\n    case 0x24:\n      *(uint32_t *)(base_address + 0x24) = data2;\n      *(uint32_t *)(base_address + 0x54) = data1;\n      break;\n    case 0x28:\n      *(uint32_t *)(base_address + 0x28) = data2;\n      *(uint32_t *)(base_address + 0x58) = data1;\n      break;\n    case 0x2c:\n      *(uint32_t *)(base_address + 0x2c) = data2;\n      *(uint32_t *)(base_address + 0x5c) = data1;\n      break;\n    case 0x30:\n      *(uint32_t *)(base_address + 0x30) = data2;\n      *(uint32_t *)(base_address + 0x60) = data1;\n      break;\n    case 0x1c:\n      *(uint32_t *)(base_address + 0x1c) = data2;\n      *(uint32_t *)(base_address + 0x4c) = data1;\n      break;\n    default:\n      break;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003306",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": true,
            "current_name": "set_data_at_offset_08003306"
        },
        "FUN_08002578": {
            "renaming": {
                "FUN_08002578": "update_registers_and_clear_bits_if_no_error_08002578"
            },
            "code": "void update_registers_and_clear_bits_if_no_error_08002578(void)\n{\n  update_registers();\n  clear_bits_if_no_error();\n  return;\n}",
            "called": [
                "FUN_080076e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002578",
            "calling": [
                "FUN_08002644"
            ],
            "imported": true,
            "current_name": "update_registers_and_clear_bits_if_no_error_08002578"
        },
        "FUN_08006932": {
            "renaming": {
                "*(uint *)(*param_1 + 0xc)": "user_input_value_ptr",
                "param_1": "user_input_ptr",
                "*(undefined *)((int)param_1 + 0x39)": "user_input_flag_ptr",
                "FUN_08006932": "set_user_input_flag_08006932",
                "validate_user_input_08008730()": "validate_user_input()"
            },
            "code": "int set_user_input_flag_08006932(int *user_input_ptr)\n{\n  uint32_t *user_input_value_ptr = (uint32_t *)(*user_input_ptr + 0xc);\n  *user_input_value_ptr &= 0xffffffbf;\n  char *user_input_flag_ptr = (char *)(user_input_ptr + 0x39);\n  *user_input_flag_ptr = ' ';\n  validate_user_input();\n  return 0;\n}",
            "called": [
                "FUN_08008730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006932",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": true,
            "current_name": "set_user_input_flag_08006932"
        },
        "FUN_080060c4": {
            "renaming": {
                "iVar3": "value3",
                "uVar1": "value1",
                "PTR_DAT_08006124": "PTR_DAT",
                "mask1": "mask1",
                "mask3": "mask3",
                "param_1": "base_addr",
                "mask2": "mask2",
                "FUN_080060c4": "set_params_080060c4",
                "param_2": "params",
                "uVar2": "value2"
            },
            "code": "void set_params_080060c4(int base_addr, int *params) {\n  uint mask1 = 0xffffffef;\n  uint mask2 = 0xfffff3ff;\n  uint mask3 = 0xffff8cff;\n  uint value1 = (params[2] << 4) & 0xffffffdf;\n  uint value2 = params[5] << 2 | params[6] << 2;\n  int value3 = params[1];\n  int value4 = params[0];\n  if (base_addr == PTR_DAT_08006124_08006124) {\n    value1 = (value1 & 0xffffff7f) | (params[3] << 4);\n    value2 = (value2 & mask2) | (params[4] << 2);\n  }\n  *(uint *)(base_addr + 0x20) = (*(uint *)(base_addr + 0x20) & mask1) | value1;\n  *(uint *)(base_addr + 4) = (*(uint *)(base_addr + 4) & ~mask2) | value2;\n  *(uint *)(base_addr + 0x18) = (*(uint *)(base_addr + 0x18) & mask3) | (value3 << 8);\n  *(int *)(base_addr + 0x38) = value4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060c4",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": true,
            "current_name": "set_params_080060c4"
        },
        "FUN_08009eac": {
            "renaming": {
                "iVar2": "allocated_block",
                "uVar1": "permissions_flag",
                "param_1": "process_id",
                "FUN_08009eac": "allocate_and_set_memory_block_08009eac",
                "local_18": "block_size",
                "param_2": "memory_block_info",
                "local_14": "local_memory_block_info"
            },
            "code": "void allocate_and_set_memory_block_08009eac(int process_id, int *memory_block_info)\n{\n  ushort permissions_flag;\n  int allocated_block;\n  int block_size;\n  int *local_memory_block_info;\n\n  if ((uint)*(ushort *)(memory_block_info + 3) << 0x1e > 0x7fffffff) {\n    block_size = process_id;\n    local_memory_block_info = memory_block_info;\n    permissions_flag = check_permissions_and_set_flag(block_size, memory_block_info, &block_size, &local_memory_block_info);\n    allocated_block = allocate_memory_block(block_size, process_id);\n    if (allocated_block != 0) {\n      *(undefined **)(process_id + 0x28) = PTR_LAB_08009cd0_1_08009f28;\n      *memory_block_info = allocated_block;\n      *(ushort *)(memory_block_info + 3) = *(ushort *)(memory_block_info + 3) | 0x80;\n      memory_block_info[4] = allocated_block;\n      memory_block_info[5] = block_size;\n      if ((local_memory_block_info != (int *)0x0) &&\n         (readAndAssignValue(process_id, (int)*(short *)((int)memory_block_info + 0xe)) != 0)) {\n        *(ushort *)(memory_block_info + 3) = *(ushort *)(memory_block_info + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_block_info + 3) = permissions_flag | *(ushort *)(memory_block_info + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_block_info + 3) << 0x16 >= 0) {\n      *(ushort *)(memory_block_info + 3) = *(ushort *)(memory_block_info + 3) & 0xfffc | 2;\n    }\n    return;\n  }\n  *memory_block_info = (int)memory_block_info + 0x47;\n  memory_block_info[4] = (int)memory_block_info + 0x47;\n  memory_block_info[5] = 1;\n  return;\n}",
            "called": [
                "FUN_0800a110",
                "FUN_08009e64",
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009eac",
            "calling": [
                "FUN_08009a80"
            ],
            "imported": true,
            "current_name": "allocate_and_set_memory_block_08009eac"
        },
        "FUN_080072d8": {
            "renaming": {
                "param_1": "address",
                "FUN_080072d8": "determine_address_value_based_on_condition_080072d8",
                "param_2": "value",
                "param_3": "condition",
                "param_4": "param_4",
                "set_value_at_address_based_on_condition_080042e2": "set_value_at_address_based_on_condition"
            },
            "code": "void determine_address_value_based_on_condition_080072d8(void* address, short value, int condition, void* param_4) {\n  if (condition == 0) {\n    set_value_at_address_based_on_condition(address, value, 0, param_4, param_4);\n    return;\n  }\n  set_value_at_address_based_on_condition(address, value, 1, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_080042e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d8",
            "calling": [
                "FUN_08008a24"
            ],
            "imported": true,
            "current_name": "determine_address_value_based_on_condition_080072d8"
        },
        "FUN_080045c0": {
            "renaming": {
                "bVar1": "is_valid_value",
                "puVar3": "value_2",
                "param_1": "input",
                "FUN_080045c0": "calculate_value_080045c0",
                "uVar2": "value_1",
                "uVar4": "value_3"
            },
            "code": "uint32_t calculate_value_080045c0(uint32_t **input)\\n{\\n  bool is_valid_value;\\n  uint32_t value_1;\\n  uint32_t *value_2;\\n  uint32_t value_3;\\n  \\n  if (input == NULL) {\\n    return 1;\\n  }\\n  if (*(char *)((int)input + 0x3d) == \"\\0\") {\\n    *(undefined *)(input + 0xf) = 0;\\n    do_nothing();\\n  }\\n  *(undefined *)((int)input + 0x3d) = 0x24;\\n  **input = **input & 0xfffffffe;\\n  value_1 = get_shifted_value_from_pointer();\\n  if (DAT_08004714 < input[1]) {\\n    is_valid_value = value_1 <= DAT_08004720;\\n  }\\n  else if (DAT_08004718 < value_1) {\\n    is_valid_value = false;\\n  }\\n  else {\\n    is_valid_value = true;\\n  }\\n  if (is_valid_value) {\\n    return 1;\\n  }\\n  value_3 = (uint32_t)((uint64_t)DAT_0800471c * (uint64_t)value_1 >> 0x32);\\n  (*input)[1] = value_3;\\n  if (DAT_08004714 < input[1]) {\\n    value_3 = (uint32_t)((uint64_t)DAT_08004724 * (uint64_t)(value_3 * 300) >> 0x26);\\n  }\\n  (*input)[8] = value_3 + 1;\\n  value_2 = input[1];\\n  if (DAT_08004714 < value_2) {\\n    if (input[2] == NULL) {\\n      value_3 = count_leading_zeroes((value_1 - 1) / (uint32_t)((int)value_2 * 3) + 1 & 0xfff);\\n    }\\n    else {\\n      value_3 = count_leading_zeroes((value_1 - 1) / (uint32_t)((int)value_2 * 0x19) + 1 & 0xfff);\\n    }\\n    if (value_3 >> 5 == 0) {\\n      if (input[2] == NULL) {\\n        value_1 = (value_1 - 1) / (uint32_t)((int)value_2 * 3) + 1 & 0xfff | 0x8000;\\n      }\\n      else {\\n        value_1 = (value_1 - 1) / (uint32_t)((int)value_2 * 0x19) + 1 & 0xfff | 0xc000;\\n      }\\n    }\\n    else {\\n      value_1 = 1;\\n    }\\n  }\\n  else {\\n    value_1 = (value_1 - 1) / (uint32_t)((int)value_2 << 1) + 1 & 0xfff;\\n    if (value_1 < 4) {\\n      value_1 = 4;\\n    }\\n  }\\n  (*input)[7] = value_1;\\n  **input = (uint32_t)input[7] | (uint32_t)input[8];\\n  (*input)[2] = (uint32_t)input[4] | (uint32_t)input[3];\\n  (*input)[3] = (uint32_t)input[5] | (uint32_t)input[6];\\n  **input = **input | 1;\\n  input[0x10] = NULL;\\n  *(undefined *)((int)input + 0x3d) = 0x20;\\n  input[0xc] = NULL;\\n  *(undefined *)((int)input + 0x3e) = 0;\\n  return 0;\\n}",
            "called": [
                "FUN_080045bc",
                "FUN_08005a28"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c0",
            "calling": [
                "FUN_080077b0"
            ],
            "imported": true,
            "current_name": "calculate_value_080045c0"
        },
        "FUN_08007e74": {
            "renaming": {
                "iVar1": "start_ptr",
                "get_offset_from_param_08005430": "get_offset_from_param",
                "iVar2": "process_result",
                "iVar4": "status",
                "get_value_at_offset_0800542a": "get_value_at_offset",
                "iVar5": "data_ptr",
                "get_pointer_value_08003760": "get_pointer_value",
                "param_1": "data",
                "process_data_08004728": "process_data",
                "param_2": "param_2",
                "param_3": "param_3",
                "FUN_08007e74": "process_data_and_check_status_08007e74",
                "param_4": "param_4",
                "uVar3": "offset_diff",
                "uVar6": "param_4"
            },
            "code": "int process_data_and_check_status_08007e74(int data, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int start_ptr = get_pointer_value();\n  uint offset_diff = 0;\n  int status = 2;\n  do {\n    int data_ptr = data + 4;\n    int process_result = process_data(data_ptr, param_2, param_3, param_4, param_4);\n    if (process_result == 0) {\n      status = 0;\n      int value_at_offset = get_value_at_offset(data_ptr);\n      while (value_at_offset != 0x20 && status == 0) {\n        int current_ptr = get_pointer_value();\n        offset_diff = current_ptr - start_ptr;\n        if (offset_diff < 0x65) {\n          int offset = get_offset_from_param(data_ptr);\n          if (offset != 0) {\n            status = 2;\n          }\n        }\n        else {\n          status = 1;\n        }\n        value_at_offset = get_value_at_offset(data_ptr);\n      }\n    }\n    int offset = get_offset_from_param(data_ptr);\n  } while (offset == 4 && offset_diff < 100);\n  return status;\n}",
            "called": [
                "FUN_08005430",
                "FUN_0800542a",
                "FUN_08004728",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e74",
            "calling": [
                "FUN_08002a58"
            ],
            "imported": true,
            "current_name": "process_data_and_check_status_08007e74"
        },
        "FUN_08002efe": {
            "renaming": {
                "param_1": "message_offset",
                "param_2": "message_length",
                "param_3": "message_type",
                "param_4": "message_data",
                "param_5": "message_data_length",
                "FUN_08002efe": "execute_and_encode_08002efe"
            },
            "code": "void execute_and_encode_08002efe(int message_offset, int message_length, int message_type, int message_data, int message_data_length){\n  execute_and_encode_08002efe_message_0800319e(message_offset + 0x40, message_length, message_type, message_data, message_data_length);\n  return;\n}",
            "called": [
                "FUN_0800319e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efe",
            "calling": [
                "FUN_08000be8"
            ],
            "imported": true,
            "current_name": "execute_and_encode_08002efe"
        },
        "FUN_08002f84": {
            "renaming": {
                "param_1": "value",
                "param_2": "threshold",
                "PTR_DAT_08002f90": "max_value_ptr",
                "param_3": "max_value_ptr",
                "FUN_08002f84": "save_value_if_max_08002f84"
            },
            "code": "void save_value_if_max_08002f84(uint8_t value, int threshold, uint32_t* PTR_DAT_08002f90)\n{\n  if (value == threshold) {\n    *PTR_DAT_08002f90 = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f84",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "save_value_if_max_08002f84"
        },
        "FUN_08002ddc": {
            "renaming": {
                "param_1": "input_param",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "output_param",
                "FUN_08002ddc": "execute_print_and_functions_08002ddc"
            },
            "code": "void execute_print_and_functions_08002ddc(int input_param, undefined4 param_2, undefined4 param_3, undefined4 output_param)\n{\n  int modified_input_param = input_param + 0x40;\n  int parameter_2 = 2;\n  int parameter_3 = 5;\n  print_and_execute_functions_0800322c(modified_input_param, parameter_2, parameter_3, output_param, output_param);\n  return;\n}",
            "called": [
                "FUN_0800322c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ddc",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": true,
            "current_name": "execute_print_and_functions_08002ddc"
        },
        "FUN_08009094": {
            "renaming": {
                "count_bits_set_08008f3c": "countBitsSet",
                "iVar1": "numBitsSet",
                "process_response_08009084": "processResponse",
                "PTR_DAT_080090b0": "ptr",
                "FUN_08009094": "checkAndProcessResponse_08009094"
            },
            "code": "void checkAndProcessResponse_08009094(void)\n{\n  int numBitsSet = countBitsSet();\n  int* PTR_DAT_080090b0 = PTR_DAT_080090b0 + numBitsSet * 0x14 + 0xc;\n  if (*PTR_DAT_080090b0 != 0) {\n    processResponse();\n  }\n  return;\n}",
            "called": [
                "FUN_08009084",
                "FUN_08008f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009094",
            "calling": [
                "FUN_080042f0"
            ],
            "imported": true,
            "current_name": "checkAndProcessResponse_08009094"
        },
        "FUN_08009f2c": {
            "renaming": {
                "FUN_08009f2c": "find_char_in_string_08009f2c",
                "pcVar2": "current_char_pointer",
                "pcVar1": "current_char",
                "param_1": "string",
                "param_2": "character_to_find",
                "param_3": "string_length"
            },
            "code": "char* find_char_in_string_08009f2c(char* string, char character_to_find, int string_length) {\n  char* current_char = string;\n  while (current_char != string + string_length) {\n    if (*current_char == character_to_find) {\n      return current_char;\n    }\n    current_char++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f2c",
            "calling": [
                "FUN_08009698",
                "FUN_0800937c"
            ],
            "imported": true,
            "current_name": "find_char_in_string_08009f2c"
        },
        "FUN_0800a154": {
            "renaming": {
                "FUN_0800a154": "calculate_new_index_0800a154",
                "iVar1": "new_index",
                "param_1": "previous_index",
                "param_2": "data_array"
            },
            "code": "int calculate_new_index_0800a154(int previous_index, int* data_array) {\n  int new_index = previous_index - 4;\n  if (previous_index < 0) {\n    new_index += data_array[new_index];\n  }\n  return new_index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a154",
            "calling": [
                "FUN_08009908"
            ],
            "imported": true,
            "current_name": "calculate_new_index_0800a154"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "increment_and_set_08002580",
                "bVar1": "current_value",
                "param_1": "result"
            },
            "code": "void increment_and_set_08002580(byte *result) {\n  byte current_value = *PTR_DAT_080025a4;\n  if (current_value > 11) {\n    *result = 0xff;\n    return;\n  }\n  *PTR_DAT_080025a4 = current_value + 1;\n  *result = current_value;\n  *(undefined4 *)(PTR_DAT_080025a8 + (uint)current_value * 8 + 4) = 0x5dc;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_080004d4"
            ],
            "imported": true,
            "current_name": "increment_and_set_08002580"
        },
        "FUN_08007f8e": {
            "renaming": {
                "FUN_08007f8e": "set_param_08007f8e",
                "set_flags_080049e0": "set_flags",
                "param_1": "param_ptr",
                "param_2": "value"
            },
            "code": "void set_param_08007f8e(int param_ptr, int value) {\n  if (param_ptr != 0) {\n    if (value != 0) {\n      *(int *)(param_ptr + 100) = value;\n      set_flags(param_ptr + 4);\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f8e",
            "calling": [
                "FUN_08002968"
            ],
            "imported": true,
            "current_name": "set_param_08007f8e"
        },
        "FUN_08006b3e": {
            "renaming": {
                "FUN_08006b3e": "set_bit_at_index_08006b3e",
                "uVar1": "array_index",
                "1 << (param_1 & 0xf)": "bit_mask",
                "param_1": "index",
                "param_2": "array",
                "*(uint *)(param_2 + uVar1 * 4)": "array_element"
            },
            "code": "void set_bit_at_index_08006b3e(uint index, int* array) {\n  uint array_index = (index << 0x18) >> 0x1c;\n  uint* array_element = (uint*)(array + array_index * 4);\n  *array_element |= 1 << (index & 0xf);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b3e",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "imported": true,
            "current_name": "set_bit_at_index_08006b3e"
        },
        "FUN_08006262": {
            "renaming": {
                "FUN_08006262": "update_bits_08006262",
                "param_1": "ptr_data",
                "param_2": "bit_mask",
                "PTR_": "ptr_",
                "param_3": "new_value",
                "DAT_": "data_"
            },
            "code": "void update_bits_08006262(uint32_t* PTR_data, uint32_t bit_mask, uint32_t new_value)\n{\n  uint32_t* PTR_bits = PTR_data + 0x20;\n  uint8_t bit_position = bit_mask & 0xff;\n  uint32_t clear_mask = ~(1 << bit_position);\n  uint32_t set_mask = new_value << bit_position;\n  \n  *PTR_bits = (*PTR_bits & clear_mask) | set_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006262",
            "calling": [
                "FUN_08006280",
                "FUN_08006390",
                "FUN_080063c0",
                "FUN_080062f4"
            ],
            "imported": true,
            "current_name": "update_bits_08006262"
        },
        "FUN_08007110": {
            "renaming": {
                "FUN_08007110": "update_registers_and_return_08007110"
            },
            "code": "void update_registers_and_return_08007110(void)\n{\n  update_registers_080074e0();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007110",
            "calling": [
                "FUN_08005e2e"
            ],
            "imported": true,
            "current_name": "update_registers_and_return_08007110"
        },
        "FUN_08007594": {
            "renaming": {
                "DAT_080075d0": "unknown_timer_instance",
                "FUN_08007594": "check_timer_08007594",
                "DAT_080075d4": "timer_instance1",
                "param_1": "timer_value",
                "PTR_s_TIM__Unknown_timer_instance_080075d8": "unknown_timer_instance_pointer"
            },
            "code": "int check_timer_08007594(uint timer_value) {\n  if (timer_value == UINT_MAX) {\n    return 0;\n  }\n  if (timer_value == DAT_080075d0) {\n    return 1;\n  }\n  if (DAT_080075d0 < timer_value) {\n    if (timer_value == DAT_080075d4) {\n      return 1;\n    }\n    if (timer_value == DAT_080075d4 + 0x12400) {\n      return 2;\n    }\n  }\n  else if (timer_value == 0x40000000) {\n    return 1;\n  }\n  process_data(PTR_s_TIM__Unknown_timer_instance_080075d8);\n  return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007594",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": true,
            "current_name": "check_timer_08007594"
        },
        "FUN_080073ec": {
            "renaming": {
                "FUN_080073ec": "set_flags_and_values_080073ec",
                "puVar1": "flags"
            },
            "code": "void set_flags_and_values_080073ec(void)\n{\n  uint *flags = DAT_0800742c;\n  *flags |= 1;\n  flags[1] &= DAT_08007430;\n  *flags &= 0xfef6ffff;\n  *flags &= 0xfffbffff;\n  flags[1] &= 0xff80ffff;\n  flags[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08007434 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ec",
            "calling": [
                "FUN_08003658"
            ],
            "imported": true,
            "current_name": "set_flags_and_values_080073ec"
        },
        "FUN_08008ef4": {
            "renaming": {
                "FUN_08008ef4": "calculate_new_value_08008ef4",
                "param_1": "previous_value",
                "param_2": "previous_range_start",
                "param_3": "previous_range_end",
                "param_4": "new_range_start",
                "param_5": "new_range_end"
            },
            "code": "int calculate_new_value_08008ef4(int previous_value, int previous_range_start, int previous_range_end, int new_range_start, int new_range_end) {\n  int previous_range = previous_range_end - previous_range_start;\n  int new_range = new_range_end - new_range_start;\n  int difference = previous_value - previous_range_start;\n  return (difference * new_range) / previous_range + new_range_start;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ef4",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": true,
            "current_name": "calculate_new_value_08008ef4"
        },
        "FUN_08002df6": {
            "renaming": {
                "FUN_08002df6": "send_messages_to_server_if_needed_08002df6",
                "param_1": "client_data",
                "puVar1": "encoded_messages"
            },
            "code": "void send_messages_to_server_if_needed_08002df6(int client_data)\n{\n  if (*(byte *)(client_data + 0xc4) == 0) {\n    return;\n  }\n  undefined *encoded_messages = *(undefined **)(client_data + 200);\n  int num_messages = *(byte *)(client_data + 0xc4) - 2;\n  int encoded_messages_offset = 2;\n  int client_data_offset = 0x40;\n  send_encoded_messages_to_server_080031ce(client_data + client_data_offset, *encoded_messages, encoded_messages[1], num_messages, encoded_messages + encoded_messages_offset);\n  return;\n}",
            "called": [
                "FUN_080031ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002df6",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": true,
            "current_name": "send_messages_to_server_if_needed_08002df6"
        },
        "FUN_080045bc": {
            "renaming": {
                "FUN_080045bc": "do_nothing_080045bc"
            },
            "code": "\nvoid do_nothing_080045bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045bc",
            "calling": [
                "FUN_080045c0"
            ],
            "imported": true,
            "current_name": "do_nothing_080045bc"
        },
        "FUN_08007118": {
            "renaming": {
                "local_50": "value_params",
                "local_60": "value_data_and_flags",
                "local_70": "value_data",
                "local_4c": "addend_minus_one",
                "local_5c": "valid",
                "local_6c": "value_flags",
                "param_1": "value",
                "FUN_08007118": "update_params_and_flags_if_valid_08007118",
                "local_1b": "valid",
                "local_48": "value_data",
                "param_2": "divisor",
                "param_3": "addend",
                "param_4": "type",
                "param_5": "flag",
                "local_54": "clock_divided",
                "local_64": "value_flags_and_params",
                "local_74": "value_params",
                "local_58": "value_flags",
                "local_68": "value_data_and_flags_and_params",
                "local_44": "value_data_and_flags_and_params"
            },
            "code": "void update_params_and_flags_if_valid_08007118(int value, uint divisor, int addend, int type, uint clock, char flag){\n  uint clock_divided = check_clock_source(clock) / divisor - 1;\n  int addend_minus_one = addend - 1;\n  uint value_flags = 0;\n  uint value_params = 0;\n  uint value_flags_and_params = 0;\n  uint value_data = 0;\n  uint value_data_and_flags_and_params = 0;\n  char valid = 0;\n  int value_type = get_value_type(value);\n  if (value_type == 0 || value_type == 4 || value_type == 8 || value_type == 0xc || value_type == 0x18){\n    value_params = 0x60;\n    value_data = 0;\n    value_flags = 0;\n    value_data_and_flags_and_params = 0;\n    value_flags_and_params = flag;\n    value_data_and_flags_and_params = addend;\n    value_data_and_flags_and_params = value_data_and_flags_and_params << 8 | value_flags_and_params;\n    value_data_and_flags_and_params = value_data_and_flags_and_params << 8 | value_params;\n    value_data_and_flags_and_params = value_data_and_flags_and_params << 8 | value_flags;\n    value_data_and_flags_and_params = value_data_and_flags_and_params << 8 | value_data;\n    valid = update_data_if_valid(value, value_data_and_flags_and_params);\n    if (valid){\n      return;\n    }\n  }\n  value_params = addend;\n  value_flags = flag;\n  value_data = value;\n  value_data_and_flags_and_params = value_data_and_flags_and_params << 8 | value_flags_and_params;\n  value_data_and_flags_and_params = value_data_and_flags_and_params << 8 | value_params;\n  value_data_and_flags_and_params = value_data_and_flags_and_params << 8 | value_flags;\n  value_data_and_flags_and_params = value_data_and_flags_and_params << 8 | value_data;\n  valid = update_params_and_flags(value, value_data_and_flags_and_params, value_params, value_flags, value_type, clock_divided);\n  if (valid){\n    uint value_flags = find_value(value);\n    if ((value_flags & 0x100000) == 0){\n      set_bit_and_update_flag(value, value_type);\n    }\n    else{\n      set_flag_and_bit(value, value_type);\n    }\n  }\n}\n",
            "called": [
                "FUN_0800643c",
                "FUN_08007320",
                "FUN_08006c7c",
                "FUN_08006092",
                "FUN_08006390",
                "FUN_080091c6",
                "FUN_08006186",
                "FUN_08007376",
                "FUN_080075dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007118",
            "calling": [
                "FUN_080088e0"
            ],
            "imported": true,
            "current_name": "update_params_and_flags_if_valid_08007118"
        },
        "FUN_08009fe8": {
            "renaming": {
                "iVar4": "function_ptr",
                "param_1": "param",
                "piVar3": "function_table",
                "puVar6": "function_table_ptr_ptr",
                "FUN_08009fe8": "process_param_08009fe8",
                "unaff_r5": "unused_2",
                "unaff_r4": "unused_1",
                "puVar1": "ptr1",
                "PTR_PTR_DAT_08009ff4": "function_table_ptr_ptr",
                "uVar2": "result",
                "PTR_DAT_0800a018": "ptr_to_zero",
                "pcVar5": "function",
                "in_lr": "unused_3"
            },
            "code": "int process_param_08009fe8(uint param)\n{\n  int* function_table = *(int**)PTR_PTR_DAT_08009ff4;\n  if (param > 31) {\n    *function_table = 22;\n    return -1;\n  }\n  int function_ptr = function_table[17 + param];\n  if (function_ptr == 0 || function_ptr == 1) {\n    return 0;\n  }\n  if (function_ptr == -1) {\n    *function_table = 22;\n    return 1;\n  }\n  function_table[17 + param] = 0;\n  (*(code*)function_ptr)(param);\n  return 0;\n}",
            "called": [
                "FUN_0800886c",
                "thunk_FUN_0800887c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009fe8",
            "calling": [
                "FUN_08009b5c"
            ],
            "imported": true,
            "current_name": "process_param_08009fe8"
        },
        "FUN_08002c1e": {
            "renaming": {
                "param_1": "first_param",
                "FUN_08002c1e": "initialize_with_param_if_first_is_one_08002c1e",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param"
            },
            "code": "void initialize_with_param_if_first_is_one_08002c1e(int first_param, int second_param, int third_param, int fourth_param)\n{\n  initialize_if_first_param_is_one_08002948(1, 0xffff, third_param, fourth_param, fourth_param);\n  return;\n}",
            "called": [
                "FUN_08002948"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c1e",
            "calling": [],
            "imported": true,
            "current_name": "initialize_with_param_if_first_is_one_08002c1e"
        },
        "FUN_08005a68": {
            "renaming": {
                "iVar1": "data_address",
                "*(uint *)(iVar1 + 4) >> 3 & 0x700": "*(uint32_t *)(data_address + 4) >> 3 & 0x700",
                "param_1": "output",
                "*(uint *)(DAT_08005a9c + 4) & 3": "*(uint32_t *)(data_address + 4) & 3",
                "*(uint *)(iVar1 + 4) & 0x700": "*(uint32_t *)(data_address + 4) & 0x700",
                "*DAT_08005aa0 & 7": "*INPUT_DATA_ADDRESS & 7",
                "*param_1": "*output",
                "FUN_08005a68": "initialize_parameters_08005a68",
                "*(uint *)(iVar1 + 4) & 0xf0": "*(uint32_t *)(data_address + 4) & 0xf0",
                "*param_2": "*input",
                "param_2": "input",
                "DAT_08005a9c": "DATA_ADDRESS"
            },
            "code": "void initialize_parameters_08005a68(uint32_t *output, uint32_t *input)\n{\n  uint32_t data_address;\n  *output = 0xf;\n  data_address = DAT_08005a9c;\n  output[1] = *(uint *)(DAT_08005a9c + 4) & 3;\n  output[2] = *(uint32_t *)(data_address + 4) & 0xf0;\n  output[3] = *(uint32_t *)(data_address + 4) & 0x700;\n  output[4] = *(uint32_t *)(data_address + 4) >> 3 & 0x700;\n  *input = *DAT_08005aa0 & 7;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": true,
            "current_name": "initialize_parameters_08005a68"
        },
        "FUN_08008f78": {
            "renaming": {
                "PTR_DAT_08009018": "PTR_DATA_08009018",
                "param_1": "input",
                "PTR_DAT_0800901c": "PTR_DATA_0800901c",
                "FUN_08008f78": "initialize_data_08008f78",
                "param_2": "flag",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "data_pointer",
                "PTR_LAB_08008f50_1_08009020": "PTR_LABEL_08008f50_1_08009020"
            },
            "code": "void initialize_data_08008f78(int input, int flag, undefined4 param_3, undefined4 param_4)\n{\n  undefined *data_pointer;\n  data_pointer = PTR_DAT_08009018;\n  if (input != 1) {\n    return;\n  }\n  if (flag == 0xffff) {\n    *PTR_DAT_08009018 = 6;\n    *(undefined4 *)(data_pointer + 0xc) = 0;\n    data_pointer[0x14] = 7;\n    *(undefined4 *)(data_pointer + 0x20) = 0;\n    data_pointer[0x28] = 8;\n    *(undefined4 *)(data_pointer + 0x34) = 0;\n    data_pointer[0x3c] = 9;\n    *(undefined4 *)(data_pointer + 0x48) = 0;\n    data_pointer[0x50] = 10;\n    *(undefined4 *)(data_pointer + 0x5c) = 0;\n    data_pointer[100] = 0x17;\n    *(undefined4 *)(data_pointer + 0x70) = 0;\n    data_pointer[0x78] = 0x17;\n    *(undefined4 *)(data_pointer + 0x84) = 0;\n    data_pointer[0x8c] = 0x17;\n    *(undefined4 *)(data_pointer + 0x98) = 0;\n    data_pointer[0xa0] = 0x17;\n    *(undefined4 *)(data_pointer + 0xac) = 0;\n    data_pointer[0xb4] = 0x17;\n    *(undefined4 *)(data_pointer + 0xc0) = 0;\n    data_pointer[200] = 0x28;\n    *(undefined4 *)(data_pointer + 0xd4) = 0;\n    data_pointer[0xdc] = 0x28;\n    *(undefined4 *)(data_pointer + 0xe8) = 0;\n    data_pointer[0xf0] = 0x28;\n    *(undefined4 *)(data_pointer + 0xfc) = 0;\n    data_pointer[0x104] = 0x28;\n    *(undefined4 *)(data_pointer + 0x110) = 0;\n    data_pointer[0x118] = 0x28;\n    *(undefined4 *)(data_pointer + 0x124) = 0;\n    data_pointer[300] = 0x28;\n    *(undefined4 *)(data_pointer + 0x138) = 0;\n    calculate_result(0, PTR_LAB_08008f50_1_08009020, PTR_DAT_0800901c, data_pointer, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_080090c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f78",
            "calling": [],
            "imported": true,
            "current_name": "initialize_data_08008f78"
        },
        "FUN_08008d30": {
            "renaming": {
                "set_value_based_on_index_08008d00": "set_value_based_on_index",
                "param_1": "struct_ptr",
                "PTR_DAT_08008d84": "PTR_DAT_2",
                "find_character_index_0800734a": "find_character_index",
                "FUN_08008d30": "initialize_struct_and_set_values_08008d30",
                "param_2": "index",
                "param_3": "value_1",
                "param_4": "ptr_dat_1",
                "getByteFromTableAndWriteToMemory_08008d18": "get_byte_from_table_and_write_to_memory",
                "PTR_DAT_08008d88": "PTR_DAT_3",
                "PTR_PTR_LAB_08008ba4_1_08008d7c": "PTR_PTR_LAB",
                "PTR_DAT_08008d80": "PTR_DAT_1"
            },
            "code": "undefined4* initialize_struct_and_set_values_08008d30(undefined4* struct_ptr, undefined4 index, undefined4 value_1, undefined4* ptr_dat_1, undefined4 value_2)\n{\n  struct_ptr[1] = 0;\n  struct_ptr[2] = 1000;\n  *struct_ptr = PTR_PTR_LAB_08008ba4_1_08008d7c_08008ba4_1_08008d7c;\n  if (struct_ptr == (undefined4*)PTR_DAT_08008d80)\n  {\n    set_value_based_on_index(struct_ptr, 0, value_1, ptr_dat_1, value_2);\n    get_byte_from_table_and_write_to_memory(struct_ptr, 1);\n  }\n  else\n  {\n    undefined char_index_1 = find_character_index(param_2, PTR_DAT_08008d84);\n    *(undefined*)((int)struct_ptr + 0x12d) = char_index_1;\n    undefined char_index_2 = find_character_index(param_2, PTR_DAT_08008d88);\n    *(undefined*)(struct_ptr + 0x4b) = char_index_2;\n  }\n  initialize_struct(struct_ptr);\n  return struct_ptr;\n}",
            "called": [
                "FUN_08008d18",
                "FUN_0800734a",
                "FUN_08008d00",
                "FUN_08008c20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d30",
            "calling": [
                "FUN_08008d8c"
            ],
            "imported": true,
            "current_name": "initialize_struct_and_set_values_08008d30"
        },
        "FUN_08002f94": {
            "renaming": {
                "PTR_DAT_08002f9c": "pointer",
                "param_1": "pointer",
                "param_2": "unused",
                "FUN_08002f94": "store_parameter_in_pointer_08002f94",
                "param_3": "parameter"
            },
            "code": "void store_parameter_in_pointer_08002f94(void* PTR_DAT_08002f9c, int parameter) {\n  *(int*)PTR_DAT_08002f9c = parameter;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f94",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "store_parameter_in_pointer_08002f94"
        },
        "FUN_0800734a": {
            "renaming": {
                "find_character_index_08007332": "get_character_index",
                "uVar1": "result",
                "param_1": "character_index",
                "FUN_0800734a": "find_character_index_0800734a"
            },
            "code": "int find_character_index_0800734a(int character_index) {\n    int result = -1;\n    if (character_index != 0) {\n        result = get_character_index();\n    }\n    return result;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800734a",
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "imported": true,
            "current_name": "find_character_index_0800734a"
        },
        "FUN_08000aec": {
            "renaming": {
                "bVar1": "isParamValid",
                "iVar2": "paramValue",
                "PTR_DAT_08000bcc": "ptrDat08000bcc",
                "PTR_DAT_08000bdc": "ptrDat08000bdc",
                "PTR_DAT_08000bd0": "ptrDat08000bd0",
                "PTR_DAT_08000be0": "ptrDat08000be0",
                "FUNC_080005f8": "executeFunction",
                "check_param_080036ac": "checkParameter",
                "PTR_DAT_08000bd8": "ptrDat08000bd8",
                "PTR_DAT_08000bc4": "ptrDat08000bc4",
                "PTR_DAT_08000bd4": "ptrDat08000bd4",
                "PTR_DAT_08000be4": "ptrDat08000be4",
                "FUN_08000aec": "initializeData_08000aec",
                "PTR_DAT_08000bc0": "ptrDat08000bc0",
                "uVar3": "index",
                "initializeData_080005e0": "initializeData080005e0",
                "PTR_DAT_08000bc8": "ptrDat08000bc8"
            },
            "code": "void initializeData_08000aec()\\n{\\n  bool isParamValid;\\n  int paramValue;\\n  uint index;\\n  *PTR_DAT_08000bc0 = 1;\\n  if (*PTR_DAT_08000bc4 != \"\\0\") {\\n    initializeData_08000aec_080005e0();\\n  }\\n  for (index = 0; index < 5; index++) {\\n    PTR_DAT_08000bc8[index] = 0;\\n    PTR_DAT_08000bcc[index] = 0;\\n    PTR_DAT_08000bd0[index] = 0;\\n  }\\n  for (index = 0; index < 0x3c; index++) {\\n    if ((index - 0x2e & 0xff) < 0xe) {\\n      if (index < 0x3c) {\\n        paramValue = (int)(char)PTR_DAT_08000bd4[index];\\n      }\\n      else {\\n        paramValue = -1;\\n      }\\n      paramValue = checkParameter(paramValue);\\n      if (paramValue == 0) {\\n        isParamValid = false;\\n      }\\n      else {\\n        if (index < 0x3c) {\\n          paramValue = (int)(char)PTR_DAT_08000bd4[index];\\n        }\\n        else {\\n          paramValue = -1;\\n        }\\n        paramValue = checkParameter(paramValue);\\n        if (paramValue == 1) {\\n          isParamValid = false;\\n        }\\n        else {\\n          isParamValid = true;\\n        }\\n      }\\n    }\\n    else {\\n      isParamValid = false;\\n    }\\n    if (isParamValid) {\\n      executeFunction(uVar3,2);\\n    }\\n    else {\\n      if (index < 0x3c) {\\n        if (((PTR_DAT_08000bd4[index] != -1) && (paramValue = checkParameter(), paramValue != 0)) &&\\n           (paramValue = checkParameter((int)(char)PTR_DAT_08000bd4[index]), paramValue != 1)) {\\n          isParamValid = true;\\n        }\\n      }\\n      if (isParamValid) {\\n        executeFunction(index,1);\\n      }\\n    }\\n    PTR_DAT_08000bd8[index] = 0xff;\\n  }\\n  *(undefined4 *)PTR_DAT_08000bdc = 0;\\n  *PTR_DAT_08000be0 = 0;\\n  *PTR_DAT_08000be4 = 0;\\n  *PTR_DAT_08000bc0 = 0;\\n  return;\\n}",
            "called": [
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_080005e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "initializeData_08000aec"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "convert_base_if_not_zero_08008ed6_and_return_08008eec"
            },
            "code": "void convert_base_if_not_zero_08008ed6_and_return_08008eec(void)\n{\n  convert_base_if_not_zero_08008ed6();\n  return;\n}",
            "called": [
                "FUN_08008ed6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008eec",
            "calling": [],
            "imported": true,
            "current_name": "convert_base_if_not_zero_08008ed6_and_return_08008eec"
        },
        "FUN_080068d6": {
            "renaming": {
                "param_1": "parameters",
                "param_2": "param_count",
                "PTR_": "",
                "param_3": "param_size",
                "DAT_": "",
                "FUN_080068d6": "set_parameters_080068d6"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ set_parameters_080068d6(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_zDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_'DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_'DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_zDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_'DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_'DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_zDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_zDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068d6",
            "calling": [
                "FUN_0800863c",
                "FUN_08008600"
            ],
            "imported": true,
            "current_name": "set_parameters_080068d6"
        },
        "FUN_080032a2": {
            "renaming": {
                "uVar1": "end_of_string",
                "param_1": "server_address",
                "param_2": "message",
                "param_3": "message_length",
                "param_4": "encoding_method",
                "FUN_080032a2": "send_encoded_messages_to_server_and_find_end_of_string_080032a2"
            },
            "code": "void send_encoded_messages_to_server_and_find_end_of_string_080032a2(undefined4 server_address, undefined4 message, undefined4 message_length, undefined4 encoding_method) {\n  undefined4 end_of_string = find_end_of_string(message);\n  send_encoded_messages_to_server(server_address, 0x71, end_of_string, message, encoding_method);\n  return;\n}",
            "called": [
                "FUN_08000178",
                "FUN_0800325a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032a2",
            "calling": [
                "FUN_08002f14"
            ],
            "imported": true,
            "current_name": "send_encoded_messages_to_server_and_find_end_of_string_080032a2"
        },
        "FUN_08001b48": {
            "renaming": {
                "puVar1": "linked_list_address",
                "FUN_08001b48": "initialize_and_process_data_08001b48"
            },
            "code": "void initialize_and_process_data_08001b48(void)\n{\n  undefined *linked_list_address;\n  linked_list_address = PTR_DAT_08001bc0;\n  generate_linked_list_string_08002e44(linked_list_address,PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4,2,5);\n  set_value_at_address_if_condition_met_08002f2c(linked_list_address,0xe0,PTR_process_and_update_08000214_1_08001bc8);\n  set_value_at_address_if_condition_met_08002f2c(linked_list_address,0x90,PTR_LAB_080002ec_1_08001bcc);\n  set_value_at_address_if_condition_met_08002f2c(linked_list_address,0xc0,DAT_08001bd0);\n  set_value_at_address_if_condition_met_08002f2c(linked_list_address,0xd0,PTR_LAB_08000c18_1_08001bd4);\n  set_value_at_address_if_condition_met_08002f2c(linked_list_address,0xf4,DAT_08001bd8);\n  set_value_at_address_if_condition_met_08002f2c(linked_list_address,0xf5,PTR_LAB_080001a8_1_08001bdc);\n  store_parameter_in_pointer_08002f94(linked_list_address,0xf0,PTR_FUNC_08001cd0_1_08001be0);\n  save_value_if_max_08002f84(linked_list_address,0xff,DAT_08001be4);\n  process_and_update_values_08003048(linked_list_address,0xe100);\n  initialize_data_08000aec();\n  handle_interrupt_0800018c(0);\n  return;\n}",
            "called": [
                "FUN_08002f94",
                "FUN_0800018c",
                "FUN_08002f84",
                "FUN_08002f2c",
                "FUN_08002e44",
                "FUN_08003048",
                "FUN_08000aec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": true,
            "current_name": "initialize_and_process_data_08001b48"
        },
        "FUN_08006390": {
            "renaming": {
                "param_1": "bit_array",
                "param_2": "bit_position",
                "DAT_080063bc": "current_array_end",
                "puVar1": "current_array",
                "FUN_08006390": "set_bit_and_update_flag_08006390"
            },
            "code": "uint32_t set_bit_and_update_flag_08006390(uint32_t **bit_array, uint32_t bit_position)\n{\n  uint32_t *current_array = *bit_array;\n  update_bits(current_array, bit_position, 1);\n  if (current_array == DAT_080063bc)\n  {\n    current_array[0x11] = current_array[0x11] | 0x8000;\n  }\n  **bit_array = **bit_array | 1;\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006390",
            "calling": [
                "FUN_08007118"
            ],
            "imported": true,
            "current_name": "set_bit_and_update_flag_08006390"
        },
        "FUN_08009f48": {
            "renaming": {
                "FUN_08009f48": "do_nothing_08009f48"
            },
            "code": "\nvoid do_nothing_08009f48(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f48",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": true,
            "current_name": "do_nothing_08009f48"
        },
        "FUN_08004d6a": {
            "renaming": {
                "FUN_08004d6a": "do_nothing_08004d6a"
            },
            "code": "\nvoid do_nothing_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6a",
            "calling": [
                "FUN_08004e3c",
                "FUN_08004d6c"
            ],
            "imported": true,
            "current_name": "do_nothing_08004d6a"
        },
        "FUN_08008730": {
            "renaming": {
                "FUN_08008730": "validate_user_input_08008730",
                "iVar2": "result",
                "iVar3": "user_data",
                "uVar1": "index"
            },
            "code": "void validate_user_input_08008730(){\n  uint index = find_user_index();\n  int user_data = *(int *)(PTR_DAT_08008770 + index * 4);\n  if ((index < 5) && (user_data != -1)) {\n    int result = (**(code **)(PTR_DAT_08008774 + index * 4))(user_data);\n    if (result != -1) {\n      validate_input_0800688e(*(undefined4 *)(PTR_DAT_08008778 + (uint)*(byte *)(user_data + 0x44) * 4), *(int *)(user_data + 100) + (uint)*(ushort *)(user_data + 0x6a),1);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_0800688e",
                "FUN_080086e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008730",
            "calling": [
                "FUN_08006932"
            ],
            "imported": true,
            "current_name": "validate_user_input_08008730"
        },
        "FUN_08005df4": {
            "renaming": {
                "FUN_08005df4": "update_registers_and_return_08007710_08005df4",
                "param_1": "registers",
                "puVar1": "register_pointer"
            },
            "code": "void update_registers_and_return_08007710_08005df4(uint **registers)\n{\n  uint *register_pointer;\n  register_pointer = *registers;\n  if ((register_pointer[8] & 0x1111) == 0) {\n    if ((register_pointer[8] & 0x444) == 0) {\n      *register_pointer = *register_pointer & 0xfffffffe;\n    }\n  }\n  *(undefined *)((int)registers + 0x3d) = 0;\n  *(undefined *)(registers + 0xf) = 0;\n  return;\n}",
            "called": [
                "FUN_08007710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005df4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": true,
            "current_name": "update_registers_and_return_08007710_08005df4"
        },
        "FUN_08009148": {
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "iVar2": "function_list_size",
                "iVar3": "i",
                "puVar1": "function_list_start"
            },
            "code": "void execute_functions_08009148(void)\n{\n  undefined *function_list_start = PTR_DAT_08009180;\n  int function_list_size = (int)PTR_DAT_08009184 - (int)PTR_DAT_08009180;\n  for (int i = 0; i < function_list_size / 4; i++)\n  {\n    (**(code **)(function_list_start + i * 4))();\n  }\n  do_nothing_0800a424();\n  function_list_start = PTR_DAT_08009188;\n  function_list_size = (int)PTR_DAT_0800918c - (int)PTR_DAT_08009188;\n  for (int i = 0; i < function_list_size / 4; i++)\n  {\n    (**(code **)(function_list_start + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009148",
            "calling": [
                "FUN_08003658"
            ],
            "imported": true,
            "current_name": "execute_functions_08009148"
        },
        "FUN_08005460": {
            "renaming": {
                "FUN_08005460": "FUNC_08005460"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08005460(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08005720;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 4) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) != 0)))) {\n      if (((*DAT_08005720 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08005720 = *DAT_08005720 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08005720 = *DAT_08005720 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = get_pointer_value_08003760();\n        while ((*DAT_08005720 & 0x20000) != 0) {\n          iVar4 = get_pointer_value_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = get_pointer_value_08003760();\n        while ((*DAT_08005720 & 0x20000) == 0) {\n          iVar4 = get_pointer_value_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 0) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) == 0)))) {\n      if (((*DAT_08005720 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08005724 = 0;\n      iVar3 = get_pointer_value_08003760();\n      while ((*DAT_08005720 & 2) != 0) {\n        iVar4 = get_pointer_value_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005724 = 1;\n      iVar3 = get_pointer_value_08003760();\n      while ((*DAT_08005720 & 2) == 0) {\n        iVar4 = get_pointer_value_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08005728 = 0;\n      iVar3 = get_pointer_value_08003760();\n      while ((DAT_08005720[9] & 2) != 0) {\n        iVar4 = get_pointer_value_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005728 = 1;\n      iVar3 = get_pointer_value_08003760();\n      while ((DAT_08005720[9] & 2) == 0) {\n        iVar4 = get_pointer_value_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      count_down_08005434(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08005720[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08005720[7] = DAT_08005720[7] | 0x10000000;\n    }\n    if ((*DAT_0800572c & 0x100) == 0) {\n      *DAT_0800572c = *DAT_0800572c | 0x100;\n      iVar3 = get_pointer_value_08003760();\n      while ((*DAT_0800572c & 0x100) == 0) {\n        iVar4 = get_pointer_value_08003760();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08005838;\n    puVar1 = DAT_08005720;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08005720[8] = DAT_08005720[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08005838[8] = DAT_08005838[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08005720[8] = DAT_08005720[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = get_pointer_value_08003760();\n      while ((DAT_08005838[8] & 2) != 0) {\n        iVar4 = get_pointer_value_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = get_pointer_value_08003760();\n      while ((DAT_08005720[8] & 2) == 0) {\n        iVar4 = get_pointer_value_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08005838[7] = DAT_08005838[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08005838[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800583c = 0;\n    iVar3 = get_pointer_value_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08005838[1] = DAT_08005838[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08005838[1] = DAT_08005838[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_0800583c = 1;\n        iVar3 = get_pointer_value_08003760();\n        do {\n          if ((*DAT_08005838 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = get_pointer_value_08003760();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = get_pointer_value_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_0800583c = 0;\n    iVar3 = get_pointer_value_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = get_pointer_value_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_08005434",
                "FUN_08003760"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005460",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": true,
            "current_name": "FUNC_08005460"
        },
        "FUN_08008854": {
            "renaming": {
                "FUN_08008854": "return_zero_08008854"
            },
            "code": "int32_t return_zero_08008854(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008854",
            "calling": [
                "FUN_0800a130"
            ],
            "imported": true,
            "current_name": "return_zero_08008854"
        },
        "FUN_080064cc": {
            "renaming": {
                "sVar1": "counter",
                "FUN_080064cc": "process_data_080064cc",
                "param_1": "data_ptr",
                "pbVar2": "byte_ptr",
                "PTR_00000008": "uint_ptr"
            },
            "code": "int process_data_080064cc(int *data_ptr) {\n  short counter = *(short *)((int)data_ptr + 0x26) + -1;\n  byte *byte_ptr = (byte *)data_ptr[8];\n  uint *PTR_00000008 = (uint *)(*data_ptr + 4);\n\n  if (*(char *)((int)data_ptr + 0x39) != '!') {\n    return 2;\n  }\n\n  if (data_ptr[2] == 0x1000) {\n    *PTR_00000008 = *(ushort *)byte_ptr & 0x1ff;\n    if (data_ptr[4] == 0) {\n      data_ptr[8] += 2;\n    }\n    else {\n      data_ptr[8]++;\n    }\n  }\n  else {\n    *PTR_00000008 = (uint)*byte_ptr;\n    data_ptr[8] = (int)(byte_ptr + 1);\n  }\n\n  *(short *)((int)data_ptr + 0x26) = counter;\n\n  if (counter == 0) {\n    *PTR_00000008 &= 0xffffff7f;\n    *PTR_00000008 |= 0x40;\n    return 0;\n  }\n\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064cc",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": true,
            "current_name": "process_data_080064cc"
        },
        "FUN_08004d6c": {
            "renaming": {
                "FUN_08004d6c": "process_input_08004d6c",
                "param_1": "input",
                "puVar1": "ptr"
            },
            "code": "uint32_t process_input_08004d6c(uint32_t **input)\n{\n    uint32_t *ptr;\n    \n    if (*(*(char **)(input) + 0x3d) == '\"') {\n        if (*(*(uint16_t **)(input) + 0x2a) < 4) {\n            if (*(*(uint16_t **)(input) + 0x2a) - 2 < 2) {\n                if (*(uint32_t **)(input + 0xb) == (uint32_t *)0x2) {\n                    **input = **input | 0x400;\n                }\n                else {\n                    **input = **input & 0xfffffbff;\n                    **input = **input | 0x800;\n                }\n                (*input)[1] = (*input)[1] & 0xfffffbff;\n            }\n            else {\n                if (*(uint32_t **)(input + 0xb) == (uint32_t *)0x2) {\n                    **input = **input | 0x400;\n                }\n                else {\n                    **input = **input & 0xfffffbff;\n                }\n                (*input)[1] = (*input)[1] & 0xfffff8ff;\n                ptr = *(uint32_t **)(input + 9);\n                *(uint32_t **)(input + 9) = (uint32_t *)((int)ptr + 1);\n                *(char *)ptr = (char)(*input)[4];\n                *(uint16_t *)((int)input + 0x2a) = *(uint16_t *)((int)input + 0x2a) + -1;\n                *(*(char **)(input) + 0x3d) = 0x20;\n                *(uint32_t **)(input + 0xc) = (uint32_t *)0x0;\n                if (*(*(char **)(input) + 0x3e) == '@') {\n                    *(*(char **)(input) + 0x3e) = 0;\n                    do_nothing_08004d6a();\n                }\n                else {\n                    *(*(char **)(input) + 0x3e) = 0;\n                    do_nothing_08004a20();\n                }\n            }\n        }\n        else {\n            ptr = *(uint32_t **)(input + 9);\n            *(uint32_t **)(input + 9) = (uint32_t *)((int)ptr + 1);\n            *(char *)ptr = (char)(*input)[4];\n            *(uint16_t *)((int)input + 0x2a) = *(uint16_t *)((int)input + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004d6a",
                "FUN_08004a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "process_input_08004d6c"
        },
        "FUN_08004ac2": {
            "renaming": {
                "uVar1": "input_value",
                "FUN_08004ac2": "validate_and_return_input_08004ac2",
                "param_1": "input_array",
                "param_2": "input_flag",
                "param_3": "input_length",
                "param_4": "input_mask",
                "uVar2": "input_status"
            },
            "code": "int validate_and_return_input_08004ac2(int *input_array, int input_flag, int input_length, int input_mask) {\n  int input_value;\n  uint32_t input_status = *(uint32_t *)(*input_array + 0x18);\n  if ((input_status & 0x80) == 0) {\n    input_value = *(int *)(input_array + 3);\n  }\n  else {\n    input_value = *(int *)(input_array + 6);\n  }\n  validate_input_08007fa0(input_array, (input_status & 4) == 0, input_value, input_length, input_mask);\n  return 0;\n}",
            "called": [
                "FUN_08007fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ac2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "validate_and_return_input_08004ac2"
        },
        "FUN_08008850": {
            "renaming": {
                "FUN_08008850": "get_one_08008850"
            },
            "code": "int get_one_08008850(void)\n{\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008850",
            "calling": [
                "FUN_0800a110"
            ],
            "imported": true,
            "current_name": "get_one_08008850"
        },
        "FUN_08006ca8": {
            "renaming": {
                "iVar2": "data_address",
                "FUN_08006ca8": "process_bits_and_set_flag_08006ca8",
                "param_1": "flag",
                "local_18": "bit_mask",
                "param_2": "input_flag",
                "puVar1": "flag_pointer",
                "uVar3": "flag_result",
                "local_10": "flag_value_3",
                "uVar5": "flag_value",
                "uVar4": "flag_mask",
                "local_14": "flag_value_2"
            },
            "code": "void process_bits_and_set_flag_08006ca8(uint *flag, undefined4 input_flag){\n  undefined *flag_pointer = PTR_DAT_08006d1c;\n  int data_address = DAT_08006d20;\n  uint flag_value = *flag;\n  uint flag_mask;\n  uint flag_bits;\n  uint bit_position;\n  if (flag_value == DAT_08006d14) {\n    flag_mask = *(uint *)(data_address + 0x18) | 0x200;\n    *(uint *)(data_address + 0x18) = flag_mask;\n    flag_bits = *(uint *)(data_address + 0x18) & 0x200;\n  }\n  else {\n    flag_mask = DAT_08006d18;\n    if (flag_value == DAT_08006d18) {\n      flag_mask = *(uint *)(data_address + 0x18) | 0x400;\n      *(uint *)(data_address + 0x18) = flag_mask;\n      flag_bits = *(uint *)(data_address + 0x18) & 0x400;\n    }\n  }\n  uint flag_result = set_flag_08006bb8((uint)((int)(char)*flag_pointer << 0x18) >> 0x1c,input_flag,flag_mask,flag_bits);\n  bit_position = (byte)*flag_pointer & 0xf;\n  uint bit_mask = 1 << bit_position & 0xffff;\n  uint flag_value_2 = 3;\n  uint flag_value_3 = 0;\n  process_bits_080040e8(flag_result,&bit_mask);\n}",
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ca8",
            "calling": [
                "FUN_08003bd8"
            ],
            "imported": true,
            "current_name": "process_bits_and_set_flag_08006ca8"
        },
        "FUN_08002fc2": {
            "renaming": {
                "FUN_08002fc2": "set_value_at_index_08002fc2",
                "param_1": "array_base",
                "param_2": "index",
                "param_3": "value"
            },
            "code": "void set_value_at_index_08002fc2(int array_base, int index, int value) {\n  *(int *)(array_base + (index + 0x42) * 4) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fc2",
            "calling": [
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": true,
            "current_name": "set_value_at_index_08002fc2"
        },
        "FUN_08008afa": {
            "renaming": {
                "*(short *)(param_1 + 0x136)": "offset2",
                "*(short *)(param_1 + 0x134)": "offset1",
                "FUN_08008afa": "calculate_shift_amount_08008afa",
                "param_1": "address"
            },
            "code": "ushort calculate_shift_amount_08008afa(int address) {\n    short offset1 = *(short *)(address + 0x134);\n    short offset2 = *(short *)(address + 0x136);\n    int result = (offset1 + 0x40) - offset2;\n    return (ushort)(result & 0x3f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008afa",
            "calling": [
                "FUN_08008bf4"
            ],
            "imported": true,
            "current_name": "calculate_shift_amount_08008afa"
        },
        "FUN_08003048": {
            "renaming": {
                "update_value_and_send_messages_08002e26": "update_value_and_send_messages_08002e26",
                "FUN_08003048": "process_and_update_values_08003048",
                "param_1": "address",
                "process_flags_08008c44": "process_flags_08008c44",
                "set_values_in_addresses_08003002": "set_values_in_addresses_08003002",
                "param_2": "flags",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "process_flags_ptr",
                "PTR_DAT_08003068": "PTR_DAT_08003068"
            },
            "code": "void process_and_update_values_08003048(undefined4 address, undefined4 flags, undefined4 param_3, undefined4 param_4)\n{\n  undefined *process_flags_ptr;\n  process_flags_ptr = PTR_DAT_08003068;\n  process_flags_08008c44(PTR_DAT_08003068, flags, 6, param_4, param_4);\n  set_values_in_addresses_08003002(address);\n  update_value_and_send_messages_08002e26(address, process_flags_ptr);\n  return;\n}",
            "called": [
                "FUN_08002e26",
                "FUN_08003002",
                "FUN_08008c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003048",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "process_and_update_values_08003048"
        },
        "FUN_0800937c": {
            "renaming": {
                "FUN_0800937c": "FUNC_0800937c"
            },
            "code": "\nint FUNC_0800937c(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    initialize_params_08009d50();\n  }\n  if (param_2 == PTR_DAT_08009588) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08009590) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08009594) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = process_data_08009a80(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080093be:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = process_and_count_input_08009358(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08009568;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = find_char_in_string_08009f2c(PTR_s___0__0800958c,*pbVar5);\n    puVar1 = PTR_DAT_08009598;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__0800958c & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08009498;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08009498:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = find_char_in_string_08009f2c(PTR_DAT_08009598,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = find_char_in_string_08009f2c(PTR_s_efgEFG_0800959c,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08009698(param_1,&local_88,param_2,DAT_080095a4,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080095a0 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_0800951a;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08009568;\nLAB_0800951a:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080093be;\n}\n\n",
            "called": [
                "FUN_08009f2c",
                "FUN_08009698",
                "FUN_08009358",
                "FUN_08009d50",
                "FUN_08009a80"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800937c",
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "imported": true,
            "current_name": "FUNC_0800937c"
        },
        "FUN_08000214": {
            "renaming": {
                "bVar1": "isValid",
                "iVar2": "result",
                "param_1": "index",
                "FUN_08000214": "process_and_update_08000214",
                "param_2": "value",
                "param_3": "param1",
                "param_4": "param2"
            },
            "code": "void process_and_update_08000214(uint index, uint value, uint param1, uint param2)\n{\n  bool isValid;\n  int result;\n\n  if (index > 59) {\n    return;\n  }\n\n  result = get_value_at_offset_from_ptr_08002fa0(PTR_DAT_080002d8, index, param1, param2, param2);\n\n  if (result == 3) {\n    if (index < 60) {\n      if (PTR_DAT_080002dc[index] == -1) {\n        isValid = false;\n      }\n      else {\n        result = check_parameter_080036ac();\n\n        if (result == 0) {\n          isValid = false;\n        }\n        else {\n          result = check_parameter_080036ac((int)(char)PTR_DAT_080002dc[index]);\n\n          if (result == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = is_param1_in_param2_0800738a((int)(char)PTR_DAT_080002dc[index], PTR_DAT_080002e8);\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n\n    if (isValid) {\n      process_data_and_update_params_080088e0(index, value);\n    }\n\n    set_value_at_index_08002fc2(PTR_DAT_080002d8, index, value);\n  }\n  else if (result == 4) {\n    if (index < 60) {\n      if (PTR_DAT_080002dc[index] == -1) {\n        isValid = false;\n      }\n      else {\n        result = check_parameter_080036ac();\n\n        if (result == 0) {\n          isValid = false;\n        }\n        else {\n          result = check_parameter_080036ac((int)(char)PTR_DAT_080002dc[index]);\n\n          if (result == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n\n    if (isValid) {\n      calculate_value_080026b0(PTR_DAT_080002e4 + (uint)(byte)PTR_DAT_080002e0[index] * 3, value);\n    }\n\n    set_value_at_index_08002fc2(PTR_DAT_080002d8, index, value);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0800021a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000214",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": true,
            "current_name": "process_and_update_08000214"
        },
        "FUN_08003724": {
            "renaming": {
                "*DAT_08003744": "*data_pointer",
                "FUN_08003724": "set_flag_and_update_value_08003724",
                "do_nothing_080036d4": "do_nothing",
                "updateValue_08003f0c": "update_value",
                "validate_input_080036d8": "validate_input"
            },
            "code": "int set_flag_and_update_value_08003724(void)\n{\n  *DAT_08003744 = *DAT_08003744 | 0x10;\n  update_value(3);\n  validate_input(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08003f0c",
                "FUN_080036d8",
                "FUN_080036d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003724",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": true,
            "current_name": "set_flag_and_update_value_08003724"
        },
        "FUN_080038dc": {
            "renaming": {
                "param_1": "ptr_param_1",
                "FUN_080038dc": "get_value_at_offset_0x4c_080038dc"
            },
            "code": "int get_value_at_offset_0x4c_080038dc(int *ptr_param_1) {\n  return *(int *)(*ptr_param_1 + 0x4c);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038dc",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "get_value_at_offset_0x4c_080038dc"
        },
        "FUN_080025ac": {
            "renaming": {
                "process_data_08008990": "process_data",
                "uVar1": "byte_masked_value",
                "iVar4": "timer_delay/timer_value/is_valid_input",
                "FUN_080025ac": "process_byte_data_080025ac",
                "*param_1": "*data",
                "initialize_timer_with_delay_and_callback_0800242c": "initialize_timer_with_delay_and_callback",
                "param_2": "data_size",
                "param_3": "param_3",
                "PTR_DAT_08002630": "PTR_DAT_08002630",
                "param_4": "param_4",
                "uVar3": "data_hash",
                "uVar2": "byte_index",
                "PTR_DAT_08002628": "PTR_DAT_08002628",
                "DAT_0800262c": "DAT_0800262c"
            },
            "code": "byte process_byte_data_080025ac(byte *data, uint data_size, int param_3, int param_4)\n{\n  uint byte_index;\n  uint byte_value;\n  uint byte_masked_value;\n  int timer_delay;\n  int timer_value;\n  uint data_hash;\n  int is_valid_input;\n  if (*data < 0xc) {\n    process_data(data_size,1,param_3,*data,param_4);\n    byte_index = (uint)*data;\n    byte_value = (byte)PTR_DAT_08002628[byte_index * 8] & 0xffffffc0 | data_size & 0x3f;\n    PTR_DAT_08002628[byte_index * 8] = (char)byte_value;\n    timer_delay = -param_3 + 0x220;\n    if (timer_delay < 0) {\n      timer_delay = -param_3 + 0x223;\n    }\n    data[1] = (byte)((uint)(timer_delay << 0x16) >> 0x18);\n    timer_value = -param_4 + 0x960;\n    if (timer_value < 0) {\n      timer_value = -param_4 + 0x963;\n    }\n    data[2] = (byte)((uint)(timer_value << 0x16) >> 0x18);\n    data_hash = (uint)((ulonglong)DAT_0800262c * (ulonglong)*data >> 0x23);\n    is_valid_input = is_valid_input(data_hash,byte_value,byte_index,(int)((ulonglong)DAT_0800262c * (ulonglong)*data));\n    if (is_valid_input == 0) {\n      PTR_DAT_08002630[0x44] = (char)data_hash;\n      initialize_timer_with_delay_and_callback();\n    }\n    PTR_DAT_08002628[(uint)*data * 8] = PTR_DAT_08002628[(uint)*data * 8] | 0x40;\n  }\n  return *data;\n}",
            "called": [
                "FUN_0800242c",
                "FUN_08008990",
                "FUN_08002400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ac",
            "calling": [
                "FUN_08000500",
                "FUN_08002634"
            ],
            "imported": true,
            "current_name": "process_byte_data_080025ac"
        },
        "FUN_08002634": {
            "renaming": {
                "param_1": "data",
                "FUN_08002634": "process_data_and_send_to_server_08002634",
                "0x960": "ip_address",
                "0x220": "port",
                "param_2": "data_size",
                "param_3": "port",
                "param_4": "ip_address",
                "process_byte_data_080025ac": "process_byte_data"
            },
            "code": "void process_data_and_send_to_server_08002634(void* data, size_t data_size, uint16_t port, uint32_t ip_address, int socket_fd) {\n  process_byte_data(data, data_size, port, ip_address, socket_fd);\n  return;\n}",
            "called": [
                "FUN_080025ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002634",
            "calling": [
                "FUN_08000500"
            ],
            "imported": true,
            "current_name": "process_data_and_send_to_server_08002634"
        },
        "FUN_08002f0a": {
            "renaming": {
                "param_1": "message_length",
                "FUN_08002f0a": "send_encoded_messages_to_server_08002f0a",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void send_encoded_messages_to_server_08002f0a(int message_length) {\n  int encoded_message_start = message_length + 0x40;\n  send_encoded_messages_to_server_08002f0a_0800325a(encoded_message_start);\n  return;\n}",
            "called": [
                "FUN_0800325a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f0a",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": true,
            "current_name": "send_encoded_messages_to_server_08002f0a"
        },
        "FUN_08005bb8": {
            "renaming": {
                "uVar1": "output_value",
                "uStack_14": "stack_variable_3",
                "param_1": "input_value",
                "FUN_08005bb8": "decode_value_08005bb8",
                "abStack_20": "stack_array",
                "uStack_18": "stack_variable_2",
                "uStack_1c": "stack_variable_1",
                "local_24": "local_variable_1"
            },
            "code": "uint decode_value_08005bb8(int input_value){\n  uint output_value;\n  undefined2 local_variable_1;\n  byte stack_array[4];\n  undefined4 stack_variable_1;\n  undefined4 stack_variable_2;\n  undefined4 stack_variable_3;\n\n  stack_variable_3 = *(undefined4 *)(PTR_DAT_08005ca0 + 8);\n  stack_variable_2 = *(undefined4 *)(PTR_DAT_08005ca0 + 4);\n  stack_variable_1 = *(undefined4 *)PTR_DAT_08005ca0;\n  local_variable_1 = *(undefined2 *)(PTR_DAT_08005ca0 + 0x10);\n\n  if (input_value == 2) {\n    output_value = get_shifted_value_from_pointer_08005a48();\n    output_value = output_value / ((((DAT_08005ca4[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input_value == 0x10) {\n    if ((*DAT_08005ca4 & 0x1000000) == 0) {\n      output_value = 0;\n    }\n    else {\n      output_value = DAT_08005cb0;\n      if ((DAT_08005ca4[1] & 0x10000) != 0) {\n        output_value = DAT_08005ca8 / *(byte *)((int)&local_variable_1 - ((int)(DAT_08005ca4[1] << 0xe) >> 0x1f));\n      }\n      output_value = output_value * stack_array[(DAT_08005ca4[1] << 10) >> 0x1c];\n      if ((DAT_08005ca4[1] & 0x400000) == 0) {\n        output_value = (uint)((ulonglong)DAT_08005cac * (ulonglong)(output_value * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input_value == 1) {\n    if ((DAT_08005ca4[8] & 0x302) == 0x102) {\n      output_value = 0x8000;\n    }\n    else {\n      output_value = DAT_08005ca4[8] & 0x300;\n      if ((output_value == 0x200) && ((DAT_08005ca4[9] & 2) != 0)) {\n        output_value = 32000;\n      }\n      else if (output_value == 0x300) {\n        if ((*DAT_08005ca4 & 0x20000) == 0) {\n          output_value = 0;\n        }\n        else {\n          output_value = 0xf424;\n        }\n      }\n      else {\n        output_value = 0;\n      }\n    }\n  }\n  else {\n    output_value = 0;\n  }\n  return output_value;\n}",
            "called": [
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb8",
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "imported": true,
            "current_name": "decode_value_08005bb8"
        },
        "FUN_08007648": {
            "renaming": {
                "iVar3": "process_data_result",
                "puVar4": "params_pointer",
                "param_1": "timer_params",
                "local_1c": "local_var_7",
                "local_2c": "local_var_3",
                "FUN_08007648": "initialize_timer_08007648",
                "local_28": "local_var_4",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "cVar1": "timer_val_1",
                "uVar2": "clock_source_val",
                "local_20": "local_var_6",
                "local_30": "local_var_2",
                "local_24": "local_var_5",
                "local_34": "local_var_1"
            },
            "code": "void initialize_timer_08007648(uint32_t *timer_params, uint32_t param_2, uint32_t param_3, uint32_t param_4)\n{\n  char timer_val_1;\n  uint32_t clock_source_val;\n  int process_data_result;\n  uint32_t *params_pointer;\n  uint32_t local_var_1 = 0;\n  uint32_t local_var_2 = 0;\n  uint32_t local_var_3 = 0;\n  uint32_t local_var_4 = 0;\n  uint32_t local_var_5 = 0;\n  uint32_t local_var_6 = 0;\n  uint32_t local_var_7 = 0;\n  local_var_1 = 0;\n  local_var_2 = 0;\n  local_var_3 = 0;\n  local_var_4 = 0;\n  local_var_5 = 0;\n  local_var_6 = 0;\n  local_var_7 = 0;\n  params_pointer = timer_params + 1;\n  *timer_params = 0x40000000;\n  timer_params[1] = 0x40000000;\n  timer_params[4] = param_2;\n  clock_source_val = check_clock_source();\n  timer_params[2] = (uint32_t)((uint64_t)DAT_080076dc * (uint64_t)clock_source_val >> 0x32) - 1;\n  timer_params[5] = 0;\n  timer_params[3] = 0;\n  timer_params[6] = 0;\n  timer_params[0x13] = param_4;\n  local_var_1 = 0;\n  local_var_3 = 0;\n  local_var_5 = 0;\n  local_var_4 = 0;\n  local_var_6 = 0;\n  local_var_7 = 0;\n  local_var_2 = param_3;\n  timer_val_1 = check_timer(*timer_params);\n  set_bits_in_byte(timer_val_1, 0xE, 0);\n  timer_val_1 = check_timer(*timer_params);\n  set_bit_at_index(timer_val_1);\n  process_data_result = process_data(params_pointer);\n  if ((process_data_result == 0) && (process_data_result = update_params_if_needed(params_pointer, &local_var_1, 0), process_data_result == 0)) {\n    update_bits_and_flags(params_pointer, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08006280",
                "FUN_08006060",
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_08007544",
                "FUN_08006128",
                "FUN_080075dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007648",
            "calling": [
                "FUN_0800242c"
            ],
            "imported": true,
            "current_name": "initialize_timer_08007648"
        },
        "FUN_08008858": {
            "renaming": {
                "FUN_08008858": "return_zero_08008858"
            },
            "code": "int32_t return_zero_08008858(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008858",
            "calling": [
                "FUN_0800a168"
            ],
            "imported": true,
            "current_name": "return_zero_08008858"
        },
        "FUN_08004a20": {
            "renaming": {
                "FUN_08004a20": "do_nothing_08004a20"
            },
            "code": "\nvoid do_nothing_08004a20(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a20",
            "calling": [
                "FUN_08004e3c",
                "FUN_08004d6c"
            ],
            "imported": true,
            "current_name": "do_nothing_08004a20"
        },
        "FUN_080063c0": {
            "renaming": {
                "param_1": "bits",
                "FUN_080063c0": "update_bits_and_flags_080063c0",
                "param_2": "flags",
                "puVar1": "bits_ptr",
                "DAT_0800641c": "ptr_0800641c"
            },
            "code": "uint update_bits_and_flags_080063c0(uint **bits, uint flags)\n{\n  uint *bits_ptr = *bits;\n  update_bits_08006262(bits_ptr, flags, 0);\n  if (((bits_ptr == DAT_0800641c) && ((bits_ptr[8] & 0x1111) == 0)) && ((bits_ptr[8] & 0x444) == 0)) {\n    bits_ptr[17] &= 0xffff7fff;\n  }\n  if (((bits_ptr[8] & 0x1111) == 0) && ((bits_ptr[8] & 0x444) == 0)) {\n    *bits_ptr &= 0xfffffffe;\n  }\n  *(undefined *)((int)bits + 0x3d) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080063c0",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": true,
            "current_name": "update_bits_and_flags_080063c0"
        },
        "FUN_08004a24": {
            "renaming": {
                "param_1": "input_array",
                "pbVar2": "current_byte",
                "FUN_08004a24": "process_input_08004a24",
                "cVar1": "current_char"
            },
            "code": "int process_input_08004a24(int *input_array) {\n  char current_char = *(char *)((int)input_array + 0x3d);\n  if (*(short *)((int)input_array + 0x2a) != 0) {\n    byte *current_byte = (byte *)input_array[9];\n    input_array[9] = (int)(current_byte + 1);\n    *(uint *)(*input_array + 0x10) = (uint)*current_byte;\n    *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) - 1;\n    if ((*(short *)((int)input_array + 0x2a) == 0) && (current_char == ')')) {\n      *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n      input_array[0xc] = 0x21;\n      *(undefined *)((int)input_array + 0x3d) = 0x28;\n      do_nothing_08004a22();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a24",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "process_input_08004a24"
        },
        "FUN_08004a22": {
            "renaming": {
                "FUN_08004a22": "do_nothing_08004a22"
            },
            "code": "\nvoid do_nothing_08004a22(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a22",
            "calling": [
                "FUN_08004a24",
                "FUN_08004aec"
            ],
            "imported": true,
            "current_name": "do_nothing_08004a22"
        },
        "FUN_08002fba": {
            "renaming": {
                "param_1": "base_address",
                "param_2": "offset",
                "FUN_08002fba": "get_value_at_offset_08002fba"
            },
            "code": "int get_value_at_offset_08002fba(int* base_address, int offset) {\n    return *(int*)(base_address + (offset + 0x42) * 4);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fba",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": true,
            "current_name": "get_value_at_offset_08002fba"
        },
        "FUN_080090cc": {
            "renaming": {
                "uVar1": "stack_pointer",
                "puVar2": "function",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "assertion",
                "param_4": "param4",
                "uVar3": "response",
                "FUN_080090cc": "execute_assertion_with_params_and_stack_pointer_080090cc",
                "uVar4": "param4_copy"
            },
            "code": "void execute_assertion_with_params_and_stack_pointer_080090cc(undefined4 param1, undefined4 param2, undefined* assertion, undefined4 param4){\n  undefined4 stack_pointer = *(undefined4 *)(*(int *)PTR_PTR_DAT_080090f8 + 0xc);\n  undefined* function = PTR_s___function__080090fc;\n  undefined4 param4_copy = param4;\n  if (assertion == (undefined *)0x0) goto LAB_080090f0;\n  do {\n    execute_func_with_params_and_stack_pointer_08009124(stack_pointer, PTR_s_assertion___s__failed__file___s__08009100, param4_copy, param1, param2, function, assertion, param4_copy);\n    undefined8 response = process_and_wait_for_response_08009b5c();\n    param2 = (undefined4)((ulonglong)response >> 0x20);\n    stack_pointer = (undefined4)response;\n\nLAB_080090f0:\n    assertion = PTR_s__08009104;\n    function = PTR_s__08009104;\n  } while(true);\n}",
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090cc",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": true,
            "current_name": "execute_assertion_with_params_and_stack_pointer_080090cc"
        },
        "FUN_080049e0": {
            "renaming": {
                "param_1": "param_array",
                "puVar1": "param_pointer",
                "FUN_080049e0": "set_flags_080049e0"
            },
            "code": "int set_flags_080049e0(uint **param_array) {\n  uint *param_pointer = *param_array;\n  if (*(char *)((int)param_array + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)param_array + 0x3d) = 0x28;\n  if ((*param_pointer & 1) == 0) {\n    *param_pointer = *param_pointer | 1;\n  }\n  **param_array = **param_array | 0x400;\n  (*param_array)[1] = (*param_array)[1] | 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049e0",
            "calling": [
                "FUN_08007f7c",
                "FUN_08007f8e",
                "FUN_08007ff0",
                "FUN_08008020"
            ],
            "imported": true,
            "current_name": "set_flags_080049e0"
        },
        "FUN_08006d24": {
            "renaming": {
                "iVar1": "base_address",
                "DAT_08006d78": "second_flag",
                "DAT_08006d74": "first_flag",
                "*(uint *)(DAT_08006d7c + 0x18)": "*(uint *)(base_address + 0x18)",
                "*param_1": "*flag_value",
                "DAT_08006d7c": "base_address",
                "*(uint *)(iVar1 + 0x18)": "*(uint *)(base_address + 0x18)",
                "*(uint *)(DAT_08006d7c + 0xc)": "*base_ptr",
                "*(uint *)(iVar1 + 0xc)": "*base_ptr",
                "FUN_08006d24": "update_flags_08006d24"
            },
            "code": "void update_flags_08006d24(int *flag_value)\n{\n  int DAT_08006d7c = DAT_08006d7c;\n  int DAT_08006d74 = DAT_08006d74;\n  int DAT_08006d78 = DAT_08006d78;\n  if (*flag_value != DAT_08006d74) {\n    if (*flag_value == DAT_08006d78) {\n      uint *(uint *)(DAT_08006d7c + 0xc) = (uint *)(DAT_08006d7c + 0xc);\n      *(uint *)(DAT_08006d7c + 0xc) = *(uint *)(DAT_08006d7c + 0xc) | 0x400;\n      *(uint *)(DAT_08006d7c + 0xc) = *(uint *)(DAT_08006d7c + 0xc) & 0xfffffbff;\n      *(uint *)(DAT_08006d7c + 0x18) = *(uint *)(DAT_08006d7c + 0x18) & 0xfffffbff;\n    }\n    return;\n  }\n  uint *(uint *)(DAT_08006d7c + 0xc) = (uint *)(DAT_08006d7c + 0xc);\n  *(uint *)(DAT_08006d7c + 0xc) = *(uint *)(DAT_08006d7c + 0xc) | 0x200;\n  *(uint *)(DAT_08006d7c + 0xc) = *(uint *)(DAT_08006d7c + 0xc) & 0xfffffdff;\n  *(uint *)(DAT_08006d7c + 0x18) = *(uint *)(DAT_08006d7c + 0x18) & 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d24",
            "calling": [
                "FUN_08003ce8"
            ],
            "imported": true,
            "current_name": "update_flags_08006d24"
        },
        "FUN_080098d8": {
            "renaming": {
                "iVar1": "var1",
                "uStack_8": "var4",
                "param_1": "data_1",
                "uStack_4": "var5",
                "PTR_PTR_DAT_08009904": "PTR_PTR_DAT_08009904",
                "FUNC_08009d50": "cleanup",
                "FUNC_0800937c": "process_info",
                "uStack_c": "var3",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "uVar2": "var2",
                "FUN_080098d8": "process_data_080098d8"
            },
            "code": "void process_data_080098d8(undefined4 data_1, undefined4 data_2, undefined4 data_3, undefined4 data_4) {\n  int var1 = *(int *)PTR_PTR_DAT_08009904;\n  undefined4 var2 = data_1;\n  undefined4 var3 = data_2;\n  undefined4 var4 = data_3;\n  undefined4 var5 = data_4;\n  if ((var1 != 0) && (*(int *)(var1 + 0x18) == 0)) {\n    cleanup(var1);\n  }\n  process_info(var1, *(undefined4 *)(var1 + 8), data_1, &var3, var2, &var3);\n  return;\n}",
            "called": [
                "FUN_0800937c",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d8",
            "calling": [
                "FUN_08007594",
                "FUN_080077b0",
                "FUN_08008078",
                "FUN_08007544",
                "FUN_080075dc"
            ],
            "imported": true,
            "current_name": "process_data_080098d8",
            "code_backup": "\nvoid FUN_080098d8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_08009904;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUNC_08009d50(iVar1);\n  }\n  FUNC_0800937c(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_08009270": {
            "renaming": {
                "iVar4": "padding_size",
                "puVar3": "prev_block",
                "param_1": "result",
                "puVar5": "curr_block",
                "puVar7": "prev_block",
                "param_2": "size",
                "puVar1": "ptr",
                "uVar2": "calculated_offset",
                "uVar6": "block_size",
                "FUN_08009270": "allocate_memory_block_08009270",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_block_08009270(undefined4 *result, uint size) {\n  uint aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    do_nothing_08009f48();\n    uint *prev_block = *(uint **)PTR_DAT_08009324;\n    uint *curr_block = prev_block;\n    while (curr_block != (uint *)0x0) {\n      uint block_size = *curr_block - aligned_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (prev_block == curr_block) {\n            uint next_block_offset = prev_block[1];\n            *(uint *)PTR_DAT_08009324 = next_block_offset;\n          }\n          else {\n            uint next_block_offset = curr_block[1];\n            prev_block[1] = next_block_offset;\n            prev_block = curr_block;\n          }\n        }\n        else {\n          *curr_block = block_size;\n          *(uint *)((int)curr_block + block_size) = aligned_size;\n          prev_block = (uint *)((int)curr_block + block_size);\n        }\n        do_nothing_08009f4a(result);\n        uint aligned_block_size = (int)prev_block + 0xbU & 0xfffffff8;\n        int padding_size = aligned_block_size - (int)(prev_block + 1);\n        if (padding_size != 0) {\n          *(int *)((int)prev_block + padding_size) = -padding_size;\n          return aligned_block_size;\n        }\n        return aligned_block_size;\n      }\n      prev_block = curr_block;\n      curr_block = (uint *)curr_block[1];\n    }\n    if (*(int *)PTR_DAT_08009328 == 0) {\n      uint calculated_offset = calculate_offset_and_set_param_08009918(result);\n      *(undefined4 *)PTR_DAT_08009328 = calculated_offset;\n    }\n    uint *new_block = (uint *)calculate_offset_and_set_param_08009918(result,aligned_size);\n    if ((new_block != (uint *)0xffffffff) && ((prev_block = (uint *)((int)new_block + 3U & 0xfffffffc), new_block == prev_block || (padding_size = calculate_offset_and_set_param_08009918(result,(int)prev_block - (int)new_block), padding_size != -1)))) {\n      *prev_block = aligned_size;\n      do_nothing_08009f4a(result);\n      uint aligned_block_size = (int)prev_block + 0xbU & 0xfffffff8;\n      padding_size = aligned_block_size - (int)(prev_block + 1);\n      if (padding_size != 0) {\n        *(int *)((int)prev_block + padding_size) = -padding_size;\n        return aligned_block_size;\n      }\n      return aligned_block_size;\n    }\n    *result = 0xc;\n    do_nothing_08009f4a(result);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08009918",
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009270",
            "calling": [
                "FUN_08009d24",
                "FUN_08009908",
                "FUN_08009190",
                "FUN_08009eac"
            ],
            "imported": true,
            "current_name": "allocate_memory_block_08009270"
        },
        "FUN_08005e6c": {
            "renaming": {
                "FUN_08005e6c": "do_nothing_08005e6c"
            },
            "code": "\nvoid do_nothing_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": true,
            "current_name": "do_nothing_08005e6c"
        },
        "FUN_08008500": {
            "renaming": {
                "FUN_08008500": "parse_parameters_08008500",
                "find_value_if_not_negative_08007320": "find_value_if_not_negative",
                "parse_parameters_080067ac": "parse_parameters_080067ac",
                "PTR_DAT_080085b4": "other_array",
                "param_1": "pointer_value",
                "PTR_DAT_080085a8": "character_array",
                "param_2": "parameter_value",
                "PTR_DAT_080085b0": "array_of_pointers",
                "PTR_DAT_080085ac": "data_array",
                "process_character_080084b0": "process_character"
            },
            "code": "uint parse_parameters_08008500(uint pointer_value, uint parameter_value) {\n  uint current_pointer_value = get_pointer_value();\n  char character_value = PTR_DAT_080085a8[1];\n  int found_value = find_value_if_not_negative((int)character_value, PTR_DAT_080085ac);\n  if (found_value == 0) {\n    return 0;\n  }\n  uint loop_counter = 0;\n  while ((loop_counter < 5 && ((*(int *)(PTR_DAT_080085b0 + loop_counter * 4) == 0 || (found_value = find_value_if_not_negative((int)character_value, PTR_DAT_080085ac), **(int **)(PTR_DAT_080085b0 + loop_counter * 4) != found_value))))) {\n    loop_counter = loop_counter + 1 & 0xff;\n  }\n  if (4 < loop_counter) {\n    if ((4 < (byte)PTR_DAT_080085b4[0x44]) && (process_character(), 4 < (byte)PTR_DAT_080085b4[0x44])) {\n      return 0;\n    }\n    loop_counter = (uint)(byte)PTR_DAT_080085b4[0x44];\n  }\n  do {\n    found_value = parse_parameters_08008500_080067ac(*(undefined4 *)(PTR_DAT_080085b0 + loop_counter * 4), pointer_value, parameter_value & 0xffff, 1000);\n    if (found_value == 0) {\n      return parameter_value;\n    }\n    found_value = get_pointer_value();\n  } while ((uint)(found_value - current_pointer_value) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08007320",
                "FUN_080084b0",
                "FUN_080067ac",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008500",
            "calling": [
                "FUN_0800885c"
            ],
            "imported": true,
            "current_name": "parse_parameters_08008500"
        },
        "FUN_080048c8": {
            "renaming": {
                "FUN_080048c8": "validate_input_080048c8",
                "uVar1": "return_code",
                "puVar2": "ptr",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_size",
                "param_4": "output_ptr"
            },
            "code": "int validate_input_080048c8(uint **input_ptr, uint *input_data, int input_size, uint *output_ptr) {\n  int return_code;\n  uint *ptr;\n  \n  if (*((*input_ptr) + 0x3d) == '(') {\n    if (input_data == NULL) {\n      return_code = 1;\n    }\n    else if (input_size == 0) {\n      return_code = 1;\n    }\n    else if (*((*input_ptr) + 0xf) == 1) {\n      return_code = 2;\n    }\n    else {\n      *((unsigned char *)(*input_ptr) + 0x3d) = ')';\n      *((unsigned char *)(*input_ptr) + 0x3e) = ' ';\n      return_code = 0;\n      (*input_ptr)[0x10] = NULL;\n      (*input_ptr)[9] = input_data;\n      *((short *)(*input_ptr) + 0x14) = (short)input_size;\n      (*input_ptr)[0xb] = output_ptr;\n      *((short *)(*input_ptr) + 0xa) = *((short *)(*input_ptr) + 0x14);\n      *((unsigned char *)(*input_ptr) + 0xf) = 0;\n      (*input_ptr)[1] |= 0x700;\n    }\n  }\n  else {\n    return_code = 2;\n  }\n  return return_code;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048c8",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": true,
            "current_name": "validate_input_080048c8"
        },
        "FUN_08009954": {
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "iVar2": "remaining_size",
                "pcVar3": "destination_pointer",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "cVar1": "current_char"
            },
            "code": "void copy_string_08009954(char *destination, char *source, int size){\n                        char current_char;\n                        int remaining_size;\n                        \n                        do {\n                            remaining_size = size;\n                            if (remaining_size == 0) {\n                                return;\n                            }\n                            current_char = *source;\n                            destination++;\n                            *destination = current_char;\n                            source++;\n                            size--;\n                        } while (current_char != '\\0');\n                        \n                        for (; destination != destination + remaining_size; destination++) {\n                            *destination = '\\0';\n                        }\n                        return;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009954",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": true,
            "current_name": "copy_string_08009954"
        },
        "FUN_08005aa4": {
            "renaming": {
                "FUN_08005aa4": "update_parameters_08005aa4",
                "iVar2": "ptr2",
                "iVar3": "current_time",
                "param_1": "params",
                "puVar1": "ptr1",
                "uVar4": "current_value",
                "bVar5": "is_flag_set"
            },
            "code": "int update_parameters_08005aa4(uint *params)\n{\n  bool is_bit_set = (*params & 1) != 0;\n  if (is_bit_set) {\n    bool is_flag_set = (*(uint *)(DAT_08005bac + 0x1c) & 0x10000000) == 0;\n    if (is_flag_set) {\n      *(uint *)(DAT_08005bac + 0x1c) = *(uint *)(DAT_08005bac + 0x1c) | 0x10000000;\n    }\n    if ((*DAT_08005bb0 & 0x100) == 0) {\n      *DAT_08005bb0 = *DAT_08005bb0 | 0x100;\n      int start_time = get_current_time();\n      while ((*DAT_08005bb0 & 0x100) == 0) {\n        int current_time = get_current_time();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    uint *ptr1 = DAT_08005bb4;\n    int ptr2 = DAT_08005bac;\n    uint current_value = *(uint *)(DAT_08005bac + 0x20) & 0x300;\n    if ((current_value != 0) && (current_value != (params[1] & 0x300))) {\n      current_value = *(uint *)(DAT_08005bac + 0x20);\n      *DAT_08005bb4 = 1;\n      *ptr1 = 0;\n      *(uint *)(ptr2 + 0x20) = current_value & 0xfffffcff;\n      if ((current_value & 1) != 0) {\n        int start_time = get_current_time();\n        while ((*(uint *)(DAT_08005bac + 0x20) & 2) == 0) {\n          int current_time = get_current_time();\n          if (5000 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n    int ptr3 = DAT_08005bac;\n    *(uint *)(DAT_08005bac + 0x20) = *(uint *)(DAT_08005bac + 0x20) & 0xfffffcff | params[1];\n    if (is_flag_set) {\n      *(uint *)(ptr3 + 0x1c) = *(uint *)(ptr3 + 0x1c) & 0xefffffff;\n    }\n  }\n  bool is_second_bit_set = (*params & 2) != 0;\n  if (is_second_bit_set) {\n    *(uint *)(DAT_08005bac + 4) = *(uint *)(DAT_08005bac + 4) & 0xffff3fff | params[2];\n  }\n  bool is_tenth_bit_set = (*params & 0x10) != 0;\n  if (is_tenth_bit_set) {\n    *(uint *)(DAT_08005bac + 4) = *(uint *)(DAT_08005bac + 4) & 0xffbfffff | params[3];\n  }\n  return 0;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005aa4",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": true,
            "current_name": "update_parameters_08005aa4"
        },
        "FUN_08005e6e": {
            "renaming": {
                "FUN_08005e6e": "process_flags_08005e6e",
                "iVar1": "current_flags",
                "param_1": "flags"
            },
            "code": "void process_flags_08005e6e(int *flags)\n{\n  int current_flags = *flags;\n  if (((*(uint *)(current_flags + 0x10) & 2) != 0) && ((*(uint *)(current_flags + 0xc) & 2) != 0)) {\n    *(undefined4 *)(current_flags + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 7) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      execute_callback_if_flag_set();\n      do_nothing(flags);\n    }\n    else {\n      do_nothing_08005e68();\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  current_flags = *flags;\n  if (((*(uint *)(current_flags + 0x10) & 4) != 0) && ((*(uint *)(current_flags + 0xc) & 4) != 0)) {\n    *(undefined4 *)(current_flags + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 7) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      execute_callback_if_flag_set(flags);\n      do_nothing(flags);\n    }\n    else {\n      do_nothing_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  current_flags = *flags;\n  if (((*(uint *)(current_flags + 0x10) & 8) != 0) && ((*(uint *)(current_flags + 0xc) & 8) != 0)) {\n    *(undefined4 *)(current_flags + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 7) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      execute_callback_if_flag_set(flags);\n      do_nothing(flags);\n    }\n    else {\n      do_nothing_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  current_flags = *flags;\n  if (((*(uint *)(current_flags + 0x10) & 0x10) != 0) && ((*(uint *)(current_flags + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(current_flags + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 7) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      execute_callback_if_flag_set(flags);\n      do_nothing(flags);\n    }\n    else {\n      do_nothing_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  current_flags = *flags;\n  if (((*(uint *)(current_flags + 0x10) & 1) != 0) && ((*(uint *)(current_flags + 0xc) & 1) != 0)) {\n    *(undefined4 *)(current_flags + 0x10) = 0xfffffffe;\n    execute_function_if_not_null(flags);\n  }\n  current_flags = *flags;\n  if (((*(uint *)(current_flags + 0x10) & 0x80) != 0) && ((*(uint *)(current_flags + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(current_flags + 0x10) = 0xffffff7f;\n    do_nothing_080064ae(flags);\n  }\n  current_flags = *flags;\n  if (((*(uint *)(current_flags + 0x10) & 0x40) != 0) && ((*(uint *)(current_flags + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(current_flags + 0x10) = 0xffffffbf;\n    do_nothing_08005e6c(flags);\n  }\n  current_flags = *flags;\n  if (((*(uint *)(current_flags + 0x10) & 0x20) != 0) && ((*(uint *)(current_flags + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(current_flags + 0x10) = 0xffffffdf;\n    do_nothing_080064ac(flags);\n  }\n  return;\n}",
            "called": [
                "FUN_08007736",
                "FUN_08005e68",
                "FUN_080064ae",
                "FUN_080064ac",
                "FUN_0800771c",
                "FUN_08005e6a",
                "FUN_08005e6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6e",
            "calling": [],
            "imported": true,
            "current_name": "process_flags_08005e6e"
        },
        "FUN_08004024": {
            "renaming": {
                "FUN_08004024": "update_status_flag_08004024",
                "param_1": "status",
                "DAT_08004040": "status_flag"
            },
            "code": "void update_status_flag_08004024(int status){\n  if (status != 4) {\n    *DAT_08004040 &= 0xfffffffb;\n    return;\n  }\n  *DAT_08004040 |= 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004024",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": true,
            "current_name": "update_status_flag_08004024"
        },
        "FUN_08005e6a": {
            "renaming": {
                "FUN_08005e6a": "do_nothing_08005e6a"
            },
            "code": "\nvoid do_nothing_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6a",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": true,
            "current_name": "do_nothing_08005e6a"
        },
        "FUN_08002400": {
            "renaming": {
                "uVar1": "i",
                "FUN_08002400": "is_valid_input_08002400",
                "param_1": "input_index"
            },
            "code": "int is_valid_input_08002400(int input_index) {\n  int max_index = 11;\n  int i = 0;\n  while (i <= max_index) {\n    if ((PTR_DAT_08002428[(input_index * 0xc + i) * 8] & 0x40) != 0) {\n      return 1;\n    }\n    i++;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002400",
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "imported": true,
            "current_name": "is_valid_input_08002400"
        },
        "FUN_08004a1e": {
            "renaming": {
                "FUN_08004a1e": "do_nothing_08004a1e"
            },
            "code": "\nvoid do_nothing_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a1e",
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "imported": true,
            "current_name": "do_nothing_08004a1e"
        },
        "FUN_08000588": {
            "renaming": {
                "puVar3": "input_array_ptr",
                "param_1": "input_index",
                "FUN_08000588": "process_input_and_update_state_08000588",
                "cVar2": "current_input_char",
                "cVar1": "last_input_char"
            },
            "code": "void process_input_and_update_state_08000588(int input_index)\n{\n  char current_input_char;\n  char last_input_char;\n  undefined *input_array_ptr;\n  \n  input_array_ptr = PTR_DAT_080005cc;\n  process_input_08002644(PTR_DAT_080005d0 + (uint)(byte)PTR_DAT_080005cc[input_index] * 3);\n  current_input_char = input_array_ptr[input_index];\n  last_input_char = *PTR_DAT_080005d4;\n  if ((current_input_char == last_input_char) && (last_input_char != \"\\0\")) {\n    *PTR_DAT_080005d4 = last_input_char - 1;\n  }\n  else if (last_input_char != \"\\0\") {\n    last_input_char = *PTR_DAT_080005d8;\n    *PTR_DAT_080005d8 = last_input_char + 1U;\n    PTR_DAT_080005dc[(byte)(last_input_char + 1U) - 1] = current_input_char;\n  }\n  input_array_ptr[input_index] = 0xff;\n  return;\n}",
            "called": [
                "FUN_08002644"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000588",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": true,
            "current_name": "process_input_and_update_state_08000588"
        },
        "FUN_08002644": {
            "renaming": {
                "bVar1": "modified_char",
                "iVar3": "is_valid",
                "param_1": "input_string",
                "FUN_08002644": "process_input_08002644",
                "param_2": "input_length",
                "param_3": "unused_param",
                "param_4": "error_code",
                "uVar2": "first_char"
            },
            "code": "void process_input_08002644(byte *input_string, int input_length, int param_2, int param_4)\n{\n  byte first_char = input_string[0];\n  byte modified_char = PTR_DAT_08002670[first_char * 8];\n  PTR_DAT_08002670[first_char * 8] = modified_char & 0xbf;\n  int is_valid = is_input_valid((uint)((ulonglong)DAT_08002674 * (ulonglong)first_char >> 0x23), input_length, modified_char & 0xbf, (int)((ulonglong)DAT_08002674 * (ulonglong)first_char), param_4);\n  if (is_valid == 0) {\n    update_registers_and_clear_bits_if_no_error_08002578(PTR_DAT_08002678);\n  }\n  return;\n}",
            "called": [
                "FUN_08002578",
                "FUN_08002400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002644",
            "calling": [
                "FUN_08000588"
            ],
            "imported": true,
            "current_name": "process_input_08002644"
        },
        "FUN_08008868": {
            "renaming": {
                "FUN_08008868": "wait_forever_08008868"
            },
            "code": "void wait_forever_08008868(void)\n{\n  while(true){\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "FUN_08008868"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008868",
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "imported": true,
            "current_name": "wait_forever_08008868"
        },
        "FUN_080036ac": {
            "renaming": {
                "uVar1": "result",
                "PTR_DAT_080036d0": "PTR_DAT_080036d0",
                "param_1": "param",
                "FUN_080036ac": "check_param_080036ac"
            },
            "code": "uint check_param_080036ac(int param) {\n  uint result;\n  uint upper_limit = 5;\n  if ((param << 24) >> 28 < upper_limit) {\n    result = 0;\n    for (uint i = 0; i < 0x3c && param != (char)PTR_DAT_080036d0[i]; i++) {\n    }\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036ac",
            "calling": [
                "FUN_0800021a",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000ef8",
                "FUN_08000a64",
                "FUN_080022f8",
                "FUN_08000aec"
            ],
            "imported": true,
            "current_name": "check_param_080036ac"
        },
        "FUN_08002f1e": {
            "renaming": {
                "param_1": "address",
                "FUN_08002f1e": "execute_function_at_address_08002f1e"
            },
            "code": "void execute_function_at_address_08002f1e(int address) {\n  (**(code **)**(undefined4 **)(address + 0xc0))();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f1e",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": true,
            "current_name": "execute_function_at_address_08002f1e"
        },
        "FUN_0800885c": {
            "renaming": {
                "param_1": "option1",
                "FUN_0800885c": "parse_and_execute_command_line_options_0800885c",
                "parse_parameters_08008500": "parse_parameters",
                "param_2": "option2",
                "param_3": "option3",
                "param_4": "option4"
            },
            "code": "void parse_and_execute_command_line_options_0800885c(undefined4 option1, undefined4 option2, undefined4 option3, undefined4 option4)\n{\n  parse_parameters_08008500(option2, option3, option3, option4, option4);\n  return;\n}",
            "called": [
                "FUN_08008500"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800885c",
            "calling": [
                "FUN_0800a042"
            ],
            "imported": true,
            "current_name": "parse_and_execute_command_line_options_0800885c"
        },
        "FUN_0800643c": {
            "renaming": {
                "param_1": "data",
                "*param_1": "*data",
                "param_2": "bit_position",
                "FUN_0800643c": "set_flag_and_bit_0800643c",
                "set_bit_08006420": "set_bit",
                "0x11": "17"
            },
            "code": "int set_flag_and_bit_0800643c(uint **data, uint bit_position)\n{\n  set_bit(*data, bit_position, 4);\n  (*data)[17] |= 0x8000;\n  **data |= 1;\n  return 0;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800643c",
            "calling": [
                "FUN_08007118"
            ],
            "imported": true,
            "current_name": "set_flag_and_bit_0800643c"
        },
        "FUN_08002fca": {
            "renaming": {
                "determine_address_value_08008a24": "set_address_value",
                "uVar1": "i",
                "param_1": "num_addresses",
                "param_2": "address_value",
                "param_3": "value_to_set",
                "param_4": "do_nothing_param_1",
                "param_5": "do_nothing_param_2",
                "FUN_08002fca": "loop_through_addresses_and_set_values_08002fca",
                "do_nothing_08008ac4": "do_nothing"
            },
            "code": "void loop_through_addresses_and_set_values_08002fca(uint num_addresses, uint address_value, uint value_to_set, uint do_nothing_param_1, uint do_nothing_param_2)\n{\n  for (uint i = 0; i < num_addresses; i++) {\n    do_nothing(do_nothing_param_1);\n    set_address_value(address_value, 1);\n    do_nothing(do_nothing_param_2);\n    set_address_value(address_value, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08008a24",
                "FUN_08008ac4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fca",
            "calling": [
                "FUN_08003002"
            ],
            "imported": true,
            "current_name": "loop_through_addresses_and_set_values_08002fca"
        },
        "FUN_08009c7c": {
            "renaming": {
                "bVar10": "conditional_flag",
                "iVar2": "temp1",
                "uVar1": "result",
                "iVar6": "loop_increment",
                "iVar8": "loop_counter",
                "param_1": "data",
                "piVar3": "temp2",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "unaff_r5": "unused",
                "unaff_r4": "unused",
                "param_2": "params",
                "FUN_08009c7c": "process_data_08009c7c",
                "pcVar7": "function_pointer",
                "uVar5": "flags",
                "uVar4": "loop_size",
                "uVar9": "temp3"
            },
            "code": "uint32_t process_data_08009c7c(uint32_t* data, int* params) {\n  uint32_t result;\n  int temp1;\n  int temp2;\n  uint32_t temp3;\n  uint16_t flags;\n  int loop_counter;\n  uint32_t loop_size;\n  uint32_t loop_increment;\n  uint32_t loop_result;\n  code* function_pointer;\n\n  if (params[4] != 0) {\n    if ((data != NULL) && (data[6] == 0)) {\n      initialize_params_08009d50();\n    }\n    if (params == (int*)PTR_DAT_08009cc4) {\n      params = (int*)data[1];\n    }\n    else if (params == (int*)PTR_DAT_08009cc8) {\n      params = (int*)data[2];\n    }\n    else if (params == (int*)PTR_DAT_08009ccc) {\n      params = (int*)data[3];\n    }\n    if (*(uint16_t*)(params + 3) != 0) {\n      flags = *(uint16_t*)(params + 3);\n      loop_size = (uint32_t)flags;\n      if ((int)(loop_size << 0x1c) < 0) {\n        temp1 = params[4];\n        if (temp1 != 0) {\n          loop_increment = loop_size << 0x1e;\n          if (loop_increment != 0) {\n            loop_increment = 0;\n          }\n          temp2 = *params;\n          if (loop_increment == 0) {\n            loop_increment = params[5];\n          }\n          *params = temp1;\n          params[2] = loop_increment;\n          for (loop_counter = temp2 - temp1; loop_counter > 0; loop_counter -= loop_increment) {\n            loop_result = (*(code*)params[10])(data, params[8], temp1, loop_counter, 0, 0);\n            if (loop_result < 1) {\n              flags = *(uint16_t*)(params + 3);\n              goto LABEL_08009c62;\n            }\n            temp1 += loop_result;\n          }\n        }\n      }\n      else if (((params[1] > 0) || (params[0x10] > 0)) && ((function_pointer = (code*)params[0xb]) != NULL)) {\n        temp3 = *data;\n        *data = 0;\n        if ((flags & 0x1000) == 0) {\n          loop_result = (*function_pointer)(data, params[8], flags & 0x1000, 1);\n          if ((loop_result == -1) && ((temp3 = *data) != 0)) {\n            if ((temp3 != 0x1d) && (temp3 != 0x16)) {\n              flags |= 0x40;\n              goto UNRECOVERED_JUMPTABLE_00;\n            }\n            *data = temp3;\n            goto LABEL_08009b86;\n          }\n        }\n        else {\n          loop_result = params[0x15];\n        }\n        if (((int)((uint)flags << 0x1d) < 0) && ((loop_result = loop_result - params[1]), params[0xd] != 0)) {\n          loop_result = loop_result - params[0x10];\n        }\n        loop_result = (*(code*)params[0xb])(data, params[8], loop_result, 0, 0, 0);\n        flags = *(uint16_t*)(params + 3);\n        if ((loop_result == -1) && ((temp3 = *data) > 0x1d || (-1 < (int)((DAT_08009c78 >> (*data & 0xff)) << 0x1f)) != 0)) {\n          goto LABEL_08009c62;\n        }\n        params[1] = 0;\n        *params = params[4];\n        if (((int)((uint)flags << 0x13) < 0) && ((loop_result != -1) || (*data == 0))) {\n          params[0x15] = loop_result;\n        }\n        temp2 = params[0xd];\n        *data = temp3;\n        if (temp2 != 0) {\n          if (temp2 != params + 0x11) {\n            add_to_linked_list_080091d8(data);\n          }\n          params[0xd] = 0;\n          goto UNRECOVERED_JUMPTABLE_00;\n        }\n      }\nLABEL_08009b86:\n      goto UNRECOVERED_JUMPTABLE_00;\n    }\n  }\n  result = 0;\n  goto UNRECOVERED_JUMPTABLE_00;\nLABEL_08009c62:\n  flags |= 0x40;\nUNRECOVERED_JUMPTABLE_00:\n  return result;\n}",
            "called": [
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009c7c",
            "calling": [
                "FUN_0800932c"
            ],
            "imported": true,
            "current_name": "process_data_08009c7c",
            "code_backup": "\nundefined4 FUN_08009c7c(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08009d50();\n    }\n    if (param_2 == (int *)PTR_DAT_08009cc4) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08009cc8) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_08009ccc) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08009c62;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_08009c78 >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            add_to_linked_list_080091d8(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08009b5c": {
            "renaming": {
                "bVar11": "is_first_iteration",
                "uVar12": "wait_result",
                "iVar2": "response_length",
                "piVar4": "linked_list_ptr",
                "iVar7": "temp_var",
                "piVar3": "param_ptr",
                "iVar9": "temp_var",
                "UNRECOVERED_JUMPTABLE_00": "jump_table_ptr",
                "puVar1": "response_ptr",
                "FUN_08009b5c": "process_and_wait_for_response_08009b5c",
                "uVar5": "response_flags",
                "uVar6": "response_flags_short",
                "pcVar8": "jump_table_ptr"
            },
            "code": "void process_and_wait_for_response_08009b5c(void)\n{\n  uint *response_ptr;\n  int response_length;\n  int *param_ptr;\n  int *linked_list_ptr;\n  uint response_flags;\n  ushort response_flags_short;\n  int response_code;\n  code *jump_table_ptr;\n  int temp_var;\n  uint temp_flags;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool is_first_iteration;\n  undefined8 wait_result;\n  \n  process_param_08009fe8(6);\n  UNRECOVERED_JUMPTABLE_00 = (code *)0x8009b6b;\n  wait_result = wait_forever_08008868(1);\n  param_ptr = (int *)((ulonglong)wait_result >> 0x20);\n  response_ptr = (uint *)wait_result;\n  response_flags_short = *(ushort *)(param_ptr + 3);\n  response_flags = (uint)response_flags_short;\n  if ((int)(response_flags << 0x1c) < 0) {\n    response_length = param_ptr[4];\n    if (response_length != 0) {\n      is_first_iteration = (response_flags << 0x1e) == 0;\n      temp_var = *param_ptr;\n      if (!is_first_iteration) {\n        response_length = param_ptr[5];\n      }\n      *param_ptr = response_length;\n      param_ptr[2] = response_length;\n      for (temp_var = temp_var - response_length; 0 < temp_var; temp_var = temp_var - response_length) {\n        response_length = (*(code *)param_ptr[10])(response_ptr,param_ptr[8],*param_ptr,temp_var);\n        if (response_length < 1) {\n          response_flags_short = *(ushort *)(param_ptr + 3);\n          goto LAB_08009c62;\n        }\n        response_length = response_length + *param_ptr;\n      }\n    }\n  }\n  else if (((0 < param_ptr[1]) || (0 < param_ptr[0x10])) &&\n          (jump_table_ptr = (code *)param_ptr[0xb], jump_table_ptr != (code *)0x0)) {\n    temp_flags = *response_ptr;\n    *response_ptr = 0;\n    if ((response_flags_short & 0x1000) == 0) {\n      response_code = (*jump_table_ptr)(response_ptr,param_ptr[8],response_flags_short & 0x1000,1);\n      if ((response_code == -1) && (*response_ptr != 0)) {\n        if ((*response_ptr != 0x1d) && (*response_ptr != 0x16)) {\n          response_flags_short = *(ushort *)(param_ptr + 3);\n          *(ushort *)(param_ptr + 3) = response_flags_short | 0x40;\n          UNRECOVERED_JUMPTABLE_00();\n          return;\n        }\n        *response_ptr = temp_flags;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      response_code = param_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(param_ptr + 3) << 0x1d) < 0) &&\n       (response_code = response_code - param_ptr[1], param_ptr[0xd] != 0)) {\n      response_code = response_code - param_ptr[0x10];\n    }\n    response_code = (*(code *)param_ptr[0xb])(response_ptr,param_ptr[8],response_code,0);\n    response_flags_short = *(ushort *)(param_ptr + 3);\n    if ((response_code == -1) &&\n       ((0x1d < *response_ptr || (-1 < (int)((DAT_08009c78 >> (*response_ptr & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(param_ptr + 3) = response_flags_short | 0x40;\n      UNRECOVERED_JUMPTABLE_00(0xffffffff);\n      return;\n    }\n    param_ptr[1] = 0;\n    *param_ptr = param_ptr[4];\n    if (((int)((uint)response_flags_short << 0x13) < 0) && ((response_code != -1 || (*response_ptr == 0)))) {\n      param_ptr[0x15] = response_code;\n    }\n    linked_list_ptr = (int *)param_ptr[0xd];\n    *response_ptr = temp_flags;\n    if (linked_list_ptr != (int *)0x0) {\n      if (linked_list_ptr != param_ptr + 0x11) {\n        add_to_linked_list_080091d8(response_ptr);\n      }\n      param_ptr[0xd] = 0;\n      UNRECOVERED_JUMPTABLE_00();\n      return;\n    }\n  }\nLAB_08009b86:\n  UNRECOVERED_JUMPTABLE_00(0);\n  return;\n}\n",
            "called": [
                "FUN_080091d8",
                "FUN_08009fe8",
                "FUN_08008868"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009b5c",
            "calling": [
                "FUN_0800a18c",
                "FUN_080090cc"
            ],
            "imported": true,
            "current_name": "process_and_wait_for_response_08009b5c"
        },
        "FUN_0800021a": {
            "renaming": {
                "PTR_DAT_080002e8": "ptr3",
                "bVar1": "is_valid",
                "PTR_DAT_080002d8": "ptr1",
                "iVar2": "value_at_index",
                "PTR_DAT_080002e4": "ptr5",
                "is_param1_in_param2_0800738a": "is_param1_in_param2",
                "param_1": "index",
                "set_value_at_index_08002fc2": "set_value_at_index",
                "check_param_080036ac": "check_param",
                "param_2": "value",
                "PTR_DAT_080002dc": "ptr2",
                "param_3": "offset1",
                "param_4": "offset2",
                "PTR_DAT_080002e0": "ptr4",
                "calculate_value_080026b0": "calculate_value",
                "FUN_0800021a": "process_and_update_0800021a",
                "process_data_and_update_params_080088e0": "process_data_and_update_params",
                "get_value_at_offset_from_ptr_08002fa0": "get_value_at_offset_from_ptr"
            },
            "code": "void process_and_update_0800021a(uint index, uint value, uint offset1, uint offset2)\n{\n  bool is_valid = false;\n  int value_at_index = get_value_at_offset_from_ptr_08002fa0(PTR_DAT_080002d8, index, offset1, offset2, offset2);\n  if (value_at_index == 3) {\n    if (index < 60) {\n      if (PTR_DAT_080002dc[index] == -1) {\n        is_valid = true;\n      }\n      else {\n        int check_result = check_param_080036ac();\n        if (check_result == 0) {\n          is_valid = false;\n        }\n        else {\n          check_result = check_param_080036ac((int)(char)PTR_DAT_080002dc[index]);\n          if (check_result == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = is_param1_in_param2_0800738a((int)(char)PTR_DAT_080002dc[index], PTR_DAT_080002e8);\n          }\n        }\n      }\n    }\n    if (is_valid) {\n      process_data_and_update_params_080088e0(index, value);\n    }\n    set_value_at_index_08002fc2(PTR_DAT_080002d8, index, value);\n  }\n  else if (value_at_index == 4) {\n    if (index < 60) {\n      if (PTR_DAT_080002dc[index] == -1) {\n        is_valid = true;\n      }\n      else {\n        int check_result = check_param_080036ac();\n        if (check_result == 0) {\n          is_valid = false;\n        }\n        else {\n          check_result = check_param_080036ac((int)(char)PTR_DAT_080002dc[index]);\n          if (check_result == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    if (is_valid) {\n      calculate_value_080026b0(PTR_DAT_080002e4 + (uint)(byte)PTR_DAT_080002e0[index] * 3, value);\n    }\n    set_value_at_index_08002fc2(PTR_DAT_080002d8, index, value);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080026b0",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_0800738a",
                "FUN_08002fa0",
                "FUN_08002fc2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800021a",
            "calling": [
                "FUN_08000214"
            ],
            "imported": true,
            "current_name": "process_and_update_0800021a"
        },
        "FUN_08008a6c": {
            "renaming": {
                "iVar2": "bit_is_set_int",
                "param_1": "index",
                "cVar1": "bit_is_set",
                "uVar3": "data",
                "FUN_08008a6c": "check_if_bit_is_set_08008a6c",
                "uVar4": "bit_mask"
            },
            "code": "bool check_if_bit_is_set_08008a6c(uint index) {\n  bool bit_is_set;\n  uint data;\n  uint bit_mask;\n  \n  if (index < 60) {\n    bit_mask = (uint)(char)PTR_DAT_08008ab4[index];\n  }\n  else {\n    bit_mask = 0xffffffff;\n  }\n  \n  if (bit_mask == 0xffffffff) {\n    bit_is_set = false;\n  }\n  else {\n    data = get_data_at_index_08006b7c((bit_mask << 0x18) >> 0x1c);\n    bit_is_set = check_bit_in_parameter_080072f0(data, 1 << (bit_mask & 0xf) & 0xffff);\n  }\n  \n  if (bit_is_set) {\n    bit_is_set = true;\n  }\n  \n  return bit_is_set;\n}",
            "called": [
                "FUN_08006b28",
                "FUN_080072f0",
                "FUN_08006b7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a6c",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": true,
            "current_name": "check_if_bit_is_set_08008a6c"
        },
        "FUN_080026f8": {
            "renaming": {
                "param_1": "data",
                "*param_1": "*data",
                "PTR_DAT_08002708": "PTR_DATA_08002708",
                "FUN_080026f8": "get_byte_from_data_080026f8"
            },
            "code": "uint get_byte_from_data_080026f8(byte *data) {\n  uint index = (uint)*data * 8;\n  uint value = (uint)(byte)PTR_DAT_08002708[index] << 0x19;\n  return value >> 0x1f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026f8",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": true,
            "current_name": "get_byte_from_data_080026f8"
        },
        "FUN_080085b8": {
            "renaming": {
                "uVar1": "combined_bytes",
                "PTR_DAT_080085d8": "get_ptr_dat_value",
                "param_1": "input_index",
                "FUN_080085b8": "is_valid_input_080085b8"
            },
            "code": "bool is_valid_input_080085b8(int input_index) {\n  uint16_t combined_bytes = combine_bytes(PTR_DAT_080085d8(input_index));\n  return (combined_bytes & 0x22) == 0x22;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085b8",
            "calling": [
                "FUN_0800863c",
                "FUN_08008600"
            ],
            "imported": true,
            "current_name": "is_valid_input_080085b8"
        },
        "FUN_08001c08": {
            "renaming": {
                "FUN_08001c08": "readByteFromMemoryAtPtr_08001c08",
                "uVar1": "byte"
            },
            "code": "uint8_t readByteFromMemoryAtPtr_08001c08(void)\n{\n  uint8_t byte = read_byte_from_memory_08002720(PTR_DAT_08001c14);\n  return byte;\n}",
            "called": [
                "FUN_08002720"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c08",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": true,
            "current_name": "readByteFromMemoryAtPtr_08001c08"
        },
        "FUN_080075dc": {
            "renaming": {
                "FUN_080075dc": "check_clock_source_080075dc",
                "local_c": "local_var_2",
                "process_data_080098d8": "process_data",
                "param_1": "clock_source",
                "local_1c": "init_param_1",
                "local_18": "init_param_2",
                "get_shifted_value_from_pointer_08005a48": "get_shifted_value_from_pointer_2",
                "check_timer_08007594": "check_timer",
                "PTR_s_TIM__Unknown_clock_source_08007644": "PTR_s_TIM__Unknown_clock_source",
                "get_shifted_value_from_pointer_08005a28": "get_shifted_value_from_pointer_1",
                "local_10": "local_var_3",
                "initialize_parameters_08005a68": "initialize_parameters",
                "local_20": "init_param_4",
                "local_14": "init_param_3"
            },
            "code": "int check_clock_source_080075dc(uint clock_source)\n{\n  uint shifted_value;\n  int result;\n  uint local_var_1;\n  uint local_var_2;\n  uint local_var_3;\n  undefined4 init_param_1;\n  undefined4 init_param_2;\n  undefined4 init_param_3;\n  undefined4 init_param_4;\n  \n  init_param_1 = 0;\n  init_param_2 = 0;\n  init_param_3 = 0;\n  init_param_4 = 0;\n  local_var_1 = 0;\n  local_var_2 = 0;\n  local_var_3 = 0;\n  initialize_parameters(&init_param_1, &init_param_4);\n  result = check_timer(clock_source);\n  shifted_value = local_var_3;\n  if (result == 1) {\n    result = get_shifted_value_from_pointer_1();\n  }\n  else if (result == 2) {\n    result = get_shifted_value_from_pointer_2();\n    shifted_value = local_var_1;\n  }\n  else {\n    process_data(PTR_s_TIM__Unknown_clock_source_08007644_08007644);\n    result = 0;\n    shifted_value = 0;\n  }\n  if (shifted_value != 0x500) {\n    if (shifted_value < 0x501) {\n      if (shifted_value != 0x400) {\n        return result;\n      }\n    }\n    else if ((shifted_value != 0x600) && (shifted_value != 0x700)) {\n      return result;\n    }\n  }\n  return result << 1;\n}",
            "called": [
                "FUN_08007594",
                "FUN_080098d8",
                "FUN_08005a48",
                "FUN_08005a68",
                "FUN_08005a28"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080075dc",
            "calling": [
                "FUN_08007118",
                "FUN_08007648"
            ],
            "imported": true,
            "current_name": "check_clock_source_080075dc"
        },
        "FUN_08007544": {
            "renaming": {
                "FUN_08007544": "check_timer_08007544",
                "DAT_0800758c": "timer_constant_2",
                "param_1": "timer_val",
                "DAT_08007588": "timer_constant_1",
                "PTR_s_TIM__Unknown_timer_IRQn_08007590": "timer_interrupt"
            },
            "code": "int check_timer_08007544(uint timer_val) {\n  if (timer_val == 0xffffffff) {\n    return 0;\n  }\n  if (timer_val == DAT_08007588) {\n    return 29;\n  }\n  if (DAT_08007588 < timer_val) {\n    if (timer_val == DAT_0800758c) {\n      return 30;\n    }\n    if (timer_val == DAT_0800758c + 0x12400) {\n      return 25;\n    }\n  }\n  else if (timer_val == 0x40000000) {\n    return 28;\n  }\n  process_data(PTR_s_TIM__Unknown_timer_IRQn_08007590);\n  return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007544",
            "calling": [
                "FUN_080076e0",
                "FUN_08007648"
            ],
            "imported": true,
            "current_name": "check_timer_08007544"
        },
        "FUN_08007ff0": {
            "renaming": {
                "iVar1": "command_struct_address",
                "FUN_08007ff0": "execute_command_if_valid_08007ff0",
                "set_flags_080049e0": "set_flags",
                "param_1": "command_parameter",
                "subtract_four_from_value_08007f78": "get_command_struct_address"
            },
            "code": "void execute_command_if_valid_08007ff0(int command_parameter)\n{\n  int command_struct_address;\n  command_struct_address = get_command_struct_address();\n  if (((*(code **)(command_struct_address + 0x60) != (code *)0x0) && (*(char *)(command_struct_address + 0x5c) == '\\x01')) && (*(char *)(command_struct_address + 0x2c) != ' ')) {\n    (**(code **)(command_struct_address + 0x60))(command_struct_address + 0x68);\n  }\n  set_flags(command_parameter);\n  return;\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ff0",
            "calling": [
                "FUN_08004f3c",
                "FUN_08004aec",
                "FUN_08005084"
            ],
            "imported": true,
            "current_name": "execute_command_if_valid_08007ff0"
        },
        "FUN_08008990": {
            "renaming": {
                "iVar1": "bit_value",
                "FUN_08008990": "process_data_08008990",
                "iVar3": "bit_index",
                "puVar2": "bit_array_ptr",
                "param_1": "index",
                "param_2": "flag_type",
                "param_3": "flag_value",
                "param_4": "data_array"
            },
            "code": "void process_data_08008990(uint index, undefined4 flag_type, undefined4 flag_value, undefined *data_array)\n{\n  int bit_value;\n  undefined *bit_array_ptr;\n  int bit_index;\n  \n  if (index < 0x3c) {\n    bit_index = (int)(char)PTR_DAT_08008a14[index];\n    bit_array_ptr = PTR_DAT_08008a14;\n  }\n  else {\n    bit_index = -1;\n    bit_array_ptr = data_array;\n  }\n  if (bit_index != -1) {\n    bit_value = get_bit_at_index_08006b28(bit_index,PTR_DAT_08008a18,flag_value,bit_array_ptr,data_array);\n    if (bit_value != 0) {\n      bit_value = is_param1_in_param2_0800738a(bit_index,PTR_DAT_08008a1c);\n      if (bit_value != 0) {\n        update_registers_if_value_not_negative_080071e4(bit_index);\n      }\n      update_bit_08006b5c(bit_index,PTR_DAT_08008a18);\n    }\n    switch(flag_type) {\n    case 0:\n      process_flags_08007258(bit_index,0);\n      break;\n    case 1:\n      process_flags_08007258(bit_index,1,0);\n      break;\n    case 2:\n      process_flags_08007258(bit_index,0,1);\n      break;\n    case 3:\n      process_flags_08007258(bit_index,0,2);\n    }\n    set_bit_at_index_08006b3e(bit_index,PTR_DAT_08008a20);\n  }\n  return;\n}",
            "called": [
                "FUN_08007258",
                "FUN_08006b5c",
                "FUN_08006b3e",
                "FUN_0800738a",
                "FUN_08006b28",
                "FUN_080071e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008990",
            "calling": [
                "FUN_08003002",
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_080025ac"
            ],
            "imported": true,
            "current_name": "process_data_08008990"
        },
        "FUN_08008078": {
            "renaming": {
                "FUN_08008078": "FUNC_08008078"
            },
            "code": "\nvoid FUNC_08008078(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = find_value_if_not_negative_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n    iVar3 = find_value_if_not_negative_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      process_data_080098d8(PTR_s_ERROR__at_least_one_UART_pin_has_08008348,iVar3);\n    }\n    else {\n      iVar4 = find_nonzero_value_080073ae(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08008340;\n      iVar3 = DAT_0800833c;\n      iVar2 = DAT_08008338;\n      if (iVar4 == 0) {\n        process_data_080098d8(PTR_s_ERROR__U_S_ART_pins_mismatch_0800834c);\n      }\n      else {\n        if (iVar4 == DAT_08008338) {\n          *(uint *)(DAT_08008338 + 0xd80c) = *(uint *)(DAT_08008338 + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_0800833c) {\n          *(uint *)(DAT_0800833c + 0x1cc10) = *(uint *)(DAT_0800833c + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08008340) {\n          *(uint *)(DAT_08008340 + 0x1c810) = *(uint *)(DAT_08008340 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = set_flag_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = find_value_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08008344 + 0x18) = *(uint *)(DAT_08008344 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        process_bits_080040e8(uVar5,&local_20);\n        uVar5 = set_flag_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = find_value_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        process_bits_080040e8(uVar5,&local_20);\n        *(int **)(PTR_DAT_08008354 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        initialize_device_0800674e(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080098d8",
                "FUN_080040e8",
                "FUN_08007320",
                "FUN_08006bb8",
                "FUN_080073ae",
                "FUN_08007376",
                "FUN_0800674e"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008078",
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "imported": true,
            "current_name": "FUNC_08008078"
        },
        "FUN_08004396": {
            "renaming": {
                "FUN_08004396": "set_param_value_from_index_08004396",
                "undefined4": "void",
                "param_1": "param_array",
                "param_1[0x11]": "param_array[index]",
                "*param_1": "value",
                "*(uint *)(*param_1 + 0x10)": "ptr",
                "0xff": "0xff"
            },
            "code": "void set_param_value_from_index_08004396(int *param_array)\n{\n    int index = 0x11;\n    int value = param_array[index] & 0xff;\n    uint *ptr = (uint *)(param_array + 0x10);\n    *ptr = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004396",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "set_param_value_from_index_08004396"
        },
        "FUN_08003fb0": {
            "renaming": {
                "DAT_08003fd4": "arrayPtr",
                "FUN_08003fb0": "setBitInArray_08003fb0",
                "param_1": "bitIndex",
                "bitMask": "bitMask",
                "arrayPtr": "arrayPtr",
                "arrayIndex": "arrayIndex"
            },
            "code": "void setBitInArray_08003fb0(uint bitIndex)\n{\n  if (bitIndex >= 0) {\n    int arrayIndex = (bitIndex >> 5) + 0x20;\n    int* DAT_08003fd4 = (int*)(DAT_08003fd4 + arrayIndex * 4);\n    int bitMask = 1 << (bitIndex & 0x1f);\n    *DAT_08003fd4 = bitMask;\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fb0",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": true,
            "current_name": "setBitInArray_08003fb0"
        },
        "FUN_080052f0": {
            "renaming": {
                "puVar2": "flag_ptr",
                "param_1": "flags",
                "FUN_080052f0": "process_flags_080052f0",
                "param_1[0x10]": "flags[16]",
                "*param_1": "*flags",
                "cVar1": "character",
                "uVar3": "flag1",
                "DAT_080053c8": "FLAG_1_MASK",
                "uVar4": "flag2",
                "handle_command_08004aec": "handle_command"
            },
            "code": "void process_flags_080052f0(uint **flags)\n{\n  char character;\n  uint *flag_ptr;\n  uint flag1;\n  uint flag2;\n  \n  flag_ptr = *flags;\n  flag1 = flag_ptr[5];\n  flag2 = flag_ptr[1];\n  if (((flag1 & DAT_080053c8) != 0) && ((flag2 & 0x100) != 0)) {\n    flags[16] = (uint *)((uint)flags[16] | 1);\n    flag_ptr[5] = 0xfffffeff;\n    **flags = **flags | 0x8000;\n  }\n  if (((flag1 & FLAG_2_MASK) != 0) && ((flag2 & 0x100) != 0)) {\n    flags[16] = (uint *)((uint)flags[16] | 2);\n    (*flags)[5] = 0xfffffdff;\n  }\n  if (((flag1 & FLAG_3_MASK) != 0) && ((flag2 & 0x100) != 0)) {\n    character = *(char *)((int)flags + 0x3d);\n    if (((*(char *)((int)flags + 0x3e) == ' ') && (*(short *)((int)flags + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (flags[12] == (uint *)0x21)))))) {\n      handle_command(flags);\n    }\n    else {\n      flags[16] = (uint *)((uint)flags[16] | 4);\n      if (*(char *)((int)flags + 0x3e) == '\\x10') {\n        **flags = **flags | 0x200;\n      }\n      (*flags)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag1 & FLAG_4_MASK) != 0) && ((flag2 & 0x100) != 0)) {\n    flags[16] = (uint *)((uint)flags[16] | 8);\n    (*flags)[5] = 0xfffff7ff;\n  }\n  if (flags[16] != (uint *)0x0) {\n    process_command(flags);\n  }\n  return;\n}",
            "called": [
                "FUN_08004f3c",
                "FUN_08004aec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052f0",
            "calling": [],
            "imported": true,
            "current_name": "process_flags_080052f0"
        },
        "FUN_08008f0c": {
            "renaming": {
                "FUN_08008f0c": "do_nothing_08008f0c"
            },
            "code": "\nvoid do_nothing_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0c",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": true,
            "current_name": "do_nothing_08008f0c"
        },
        "FUN_08002ec4": {
            "renaming": {
                "param_1": "address",
                "FUN_08002ec4": "execute_function_at_address_08002ec4",
                "**(int **)(param_1 + 0xc0) + 8": "function_pointer_address",
                "(**(code **)(**(int **)(param_1 + 0xc0) + 8))()": "(*function_pointer)()"
            },
            "code": "void execute_function_at_address_08002ec4(int address)\n{\n  void (*function_pointer)() = *(void (**)(void))(**(int **)(address + 0xc0) + 8);\n  (*function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec4",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": true,
            "current_name": "execute_function_at_address_08002ec4"
        },
        "FUN_08007306": {
            "renaming": {
                "param_1": "value",
                "FUN_08007306": "find_value_in_array_08007306",
                "*param_2": "*array",
                "param_2": "array"
            },
            "code": "int find_value_in_array_08007306(int value, char *array) {\n  while (*array != -1) {\n    if (*array == value) {\n      return *(int *)(array + 4);\n    }\n    array += 0xc;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007306",
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "imported": true,
            "current_name": "find_value_in_array_08007306"
        },
        "FUN_08008f0e": {
            "renaming": {
                "FUN_08008f0e": "initialize_device_and_update_value_08008f0e",
                "initialize_device_and_update_value_080036a2": "initialize_device",
                "updateValue_08003f0c": "update_value"
            },
            "code": "void initialize_device_and_update_value_08008f0e() {\n  update_value(3);\n  initialize_device();\n  return;\n}",
            "called": [
                "FUN_08003f0c",
                "FUN_080036a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0e",
            "calling": [
                "FUN_08009148"
            ],
            "imported": true,
            "current_name": "initialize_device_and_update_value_08008f0e"
        },
        "FUN_08002f2c": {
            "renaming": {
                "param_1": "base_address",
                "FUN_08002f2c": "set_value_at_address_if_condition_met_08002f2c",
                "param_2": "value_condition",
                "param_3": "value_to_set"
            },
            "code": "void set_value_at_address_if_condition_met_08002f2c(undefined4 base_address, uint value_condition, undefined4 value_to_set) {\n  if (value_condition == 0xd0) {\n    *(undefined4 *)PTR_DAT_08002f78 = value_to_set;\n    return;\n  }\n  if (value_condition > 0xd0) {\n    if (value_condition == 0xf4) {\n      *(undefined4 *)PTR_DAT_08002f7c = value_to_set;\n      return;\n    }\n    if (value_condition == 0xf5) {\n      *(undefined4 *)PTR_DAT_08002f80 = value_to_set;\n    }\n    else if (value_condition == 0xe0) {\n      *(undefined4 *)PTR_DAT_08002f6c = value_to_set;\n      return;\n    }\n    return;\n  }\n  if (value_condition == 0x90) {\n    *(undefined4 *)PTR_DAT_08002f74 = value_to_set;\n    return;\n  }\n  if (value_condition == 0xc0) {\n    *(undefined4 *)PTR_DAT_08002f70 = value_to_set;\n    return;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f2c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "set_value_at_address_if_condition_met_08002f2c"
        },
        "FUN_08004954": {
            "renaming": {
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1": "data_ptr",
                "FUN_08004954": "set_data_08004954",
                "param_2": "data",
                "param_3": "data_size",
                "param_4": "data2"
            },
            "code": "int set_data_08004954(uint **data_ptr, uint *data, int data_size, uint *data2) {\n    int result;\n    uint *ptr;\n    if (*(char *)((int)data_ptr + 0x3d) == '(') {\n        if (data == NULL) {\n            result = 1;\n        }\n        else if (data_size == 0) {\n            result = 1;\n        }\n        else if (*(char *)(data_ptr + 0xf) == '\\x01') {\n            result = 2;\n        }\n        else {\n            *(undefined *)(data_ptr + 0xf) = 1;\n            ptr = *data_ptr;\n            if ((*ptr & 1) == 0) {\n                *ptr = *ptr | 1;\n            }\n            **data_ptr = **data_ptr & 0xfffff7ff;\n            *(undefined *)((int)data_ptr + 0x3d) = 0x2a;\n            *(undefined *)((int)data_ptr + 0x3e) = 0x20;\n            result = 0;\n            data_ptr[0x10] = NULL;\n            data_ptr[9] = data;\n            *(short *)((int)data_ptr + 0x2a) = (short)data_size;\n            data_ptr[0xb] = data2;\n            *(undefined2 *)(data_ptr + 10) = *(undefined2 *)((int)data_ptr + 0x2a);\n            *(undefined *)(data_ptr + 0xf) = 0;\n            (*data_ptr)[1] = (*data_ptr)[1] | 0x700;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004954",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": true,
            "current_name": "set_data_08004954"
        },
        "FUN_08005cec": {
            "renaming": {
                "uVar1": "new_flags",
                "param_1": "flag_reg",
                "FUN_08005cec": "update_flags_and_registers_08005cec",
                "param_2": "reg_values",
                "uVar3": "new_reg_value",
                "uVar2": "old_reg_value"
            },
            "code": "void update_flags_and_registers_08005cec(int flag_reg, uint *reg_values)\n{\n  uint new_flags = *(uint *)(flag_reg + 0x20) & 0xfffffffe;\n  uint old_reg_value = *(uint *)(flag_reg + 0x18);\n  uint new_reg_value = reg_values[0];\n  uint new_reg_1_value = reg_values[1];\n  new_flags = new_flags & 0xfffffffd | reg_values[2];\n  if (flag_reg == DAT_08005d44) {\n    new_flags = (new_flags & 0xfffffff7 | reg_values[3]) & 0xfffffffb;\n    old_reg_value = old_reg_value & 0xffffff8c | reg_values[4];\n    new_reg_1_value = (new_reg_1_value & 0xfffffcff) | reg_values[5] | reg_values[6];\n  }\n  *(uint *)(flag_reg + 0x18) = old_reg_value;\n  *(uint *)(flag_reg + 0x34) = reg_values[1];\n  *(uint *)(flag_reg + 0x20) = new_flags;\n  *(uint *)(flag_reg + 4) = new_reg_1_value;\n  *(uint *)(flag_reg + 0x18) = old_reg_value & 0xffffff8c | new_reg_value;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": true,
            "current_name": "update_flags_and_registers_08005cec"
        },
        "FUN_0800886c": {
            "renaming": {
                "FUN_0800886c": "set_pointer_value_to_22_0800886c",
                "PTR_DAT_08008878": "pointer_to_value"
            },
            "code": "void set_pointer_value_to_22_0800886c(void)\n{\n  int *PTR_DAT_08008878 = PTR_DAT_08008878;\n  int value_to_set = 22;\n  *PTR_DAT_08008878 = value_to_set;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800886c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": true,
            "current_name": "set_pointer_value_to_22_0800886c"
        },
        "FUN_08003748": {
            "renaming": {
                "*(int *)PTR_DAT_08003758": "*intValue",
                "*(uint *)PTR_DAT_08003758": "*valuePointer",
                "PTR_DAT_0800375c": "byteValue",
                "PTR_DAT_08003758": "valuePointer",
                "FUN_08003748": "updateValueBasedOnPointer_08003748"
            },
            "code": "void updateValueBasedOnPointer_08003748(){\n  uint* PTR_DAT_08003758 = (uint*)PTR_DAT_08003758;\n  byte PTR_DAT_0800375c = *(byte*)PTR_DAT_0800375c;\n  int* intValue = (int*)PTR_DAT_08003758;\n  *(uint *)PTR_DAT_08003758 = (*(uint *)PTR_DAT_08003758 + *(int *)PTR_DAT_08003758);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003748",
            "calling": [
                "FUN_08007246"
            ],
            "imported": true,
            "current_name": "updateValueBasedOnPointer_08003748"
        },
        "FUN_080040e8": {
            "renaming": {
                "iVar8": "shift",
                "param_1": "bit_array",
                "iVar10": "index",
                "FUN_080040e8": "process_bits_080040e8",
                "param_2": "param_2",
                "puVar1": "array_ptr",
                "uVar3": "bit_mask",
                "uVar2": "temp2",
                "uVar5": "bit_index",
                "uVar4": "bit_value",
                "uVar7": "param_value",
                "uVar6": "array_value",
                "uVar9": "temp"
            },
            "code": "void process_bits_080040e8(uint *bit_array, uint *param_2)\n{\n  uint *array_ptr;\n  uint bit_mask;\n  uint bit_value;\n  uint bit_index = 0;\n  uint array_value = 0;\n  do {\n    if (bit_index > 0xf) {\n      return;\n    }\n    bit_mask = 1 << bit_index;\n    bit_value = *param_2 & bit_mask;\n    if (bit_mask == bit_value) {\n      uint param_2_value = param_2[1];\n      if (param_2_value == 0x12) {\n        array_value = param_2[3] + 0xc;\n      }\n      else if (param_2_value < 0x13) {\n        if (param_2_value == 2) {\n          array_value = param_2[3] + 8;\n        }\n        else if (param_2_value < 3) {\n          if (param_2_value == 0) goto LAB_0800423a;\n          if (param_2_value == 1) {\n            array_value = param_2[3];\n          }\n        }\n        else if (param_2_value == 3) {\n          array_value = 0;\n        }\n        else if (param_2_value == 0x11) {\n          array_value = param_2[3] + 4;\n        }\n      }\n      else {\n        if (param_2_value != PTR_DAT_080042c8) {\n          if (PTR_DAT_080042c8 < param_2_value) {\n            if (param_2_value == PTR_DAT_080042cc) goto LAB_0800423a;\n            uint temp = PTR_DAT_080042cc + 0x10000;\n            uint temp2 = PTR_DAT_080042cc;\n          }\n          else {\n            uint temp = PTR_DAT_080042c8 - 0x100000;\n            uint temp2 = PTR_DAT_080042c8;\n          }\n          if ((param_2_value != temp) && (param_2_value != temp2 - 0xf0000)) goto LAB_080040fe;\n        }\n      LAB_0800423a:\n        if (param_2[2] == 0) {\n          array_value = 4;\n        }\n        else if (param_2[2] == 1) {\n          bit_array[4] = bit_mask;\n          array_value = 8;\n        }\n        else {\n          bit_array[5] = bit_mask;\n          array_value = 8;\n        }\n      }\n    LAB_080040fe:\n      bit_index = bit_index;\n      array_ptr = bit_array;\n      if (0xff < bit_value) {\n        bit_index = bit_index - 8;\n        array_ptr = bit_array + 1;\n      }\n      *array_ptr = *array_ptr & ~(0xf << (bit_index << 2 & 0xff)) | array_value << (bit_index << 2 & 0xff);\n      if ((param_2[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_080042bc + 0x18) = *(uint *)(PTR_DAT_080042bc + 0x18) | 1;\n        int shift = (bit_index & 3) << 2;\n        int index = 4;\n        if (bit_array == PTR_DAT_080042d0) {\n          index = 0;\n        }\n        else if (bit_array == PTR_DAT_080042d0 + 0x100) {\n          index = 1;\n        }\n        else if (bit_array == PTR_DAT_080042d0 + 0x200) {\n          index = 2;\n        }\n        else if (bit_array == PTR_DAT_080042d0 + 0x300) {\n          index = 3;\n        }\n        *(uint *)(PTR_DAT_080042c0 + ((bit_index >> 2) + 2) * 4) = *(uint *)(PTR_DAT_080042c0 + ((bit_index >> 2) + 2) * 4) & ~(0xf << shift) | index << shift;\n        if ((param_2[1] & 0x10000) == 0) {\n          *PTR_DAT_080042c4 = *PTR_DAT_080042c4 & ~bit_value;\n        }\n        else {\n          *PTR_DAT_080042c4 = *PTR_DAT_080042c4 | bit_value;\n        }\n        if ((param_2[1] & 0x20000) == 0) {\n          PTR_DAT_080042c4[1] = PTR_DAT_080042c4[1] & ~bit_value;\n        }\n        else {\n          PTR_DAT_080042c4[1] = PTR_DAT_080042c4[1] | bit_value;\n        }\n        if ((param_2[1] & 0x100000) == 0) {\n          PTR_DAT_080042c4[2] = PTR_DAT_080042c4[2] & ~bit_value;\n        }\n        else {\n          PTR_DAT_080042c4[2] = PTR_DAT_080042c4[2] | bit_value;\n        }\n        if ((param_2[1] & 0x200000) == 0) {\n          PTR_DAT_080042c4[3] = PTR_DAT_080042c4[3] & ~bit_value;\n        }\n        else {\n          PTR_DAT_080042c4[3] = bit_value | PTR_DAT_080042c4[3];\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n  } while(true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_08007258",
                "FUN_080077b0",
                "FUN_08006e68",
                "FUN_08006ca8",
                "FUN_08008078"
            ],
            "imported": true,
            "current_name": "process_bits_080040e8"
        },
        "FUN_080036d4": {
            "renaming": {
                "FUN_080036d4": "do_nothing_080036d4"
            },
            "code": "\nvoid do_nothing_080036d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d4",
            "calling": [
                "FUN_08003724"
            ],
            "imported": true,
            "current_name": "do_nothing_080036d4"
        },
        "FUN_0800288c": {
            "renaming": {
                "iVar2": "copy_result",
                "param_1": "buffer_address",
                "cVar4": "char_temp",
                "param_2": "character",
                "puVar1": "buffer_pointer",
                "uVar3": "success",
                "uVar5": "allocation_size",
                "FUN_0800288c": "add_character_to_data_buffer_0800288c",
                "uVar6": "allocation_result"
            },
            "code": "int add_character_to_data_buffer_0800288c(int buffer_address, char character) {\n  int allocation_size;\n  int copy_result;\n  int success = 0;\n  char* buffer_pointer = (char*) PTR_DAT_08002914;\n  char* buffer_index = (char*) PTR_DAT_08002918;\n  char* buffer_size = (char*) PTR_DAT_08002910;\n  if (*PTR_DAT_08002908 == '\\0') {\n    copy_result = copy_data_08007ede(buffer_address + 0x14, &character, 1);\n    if (copy_result != 0) {\n      success = 1;\n    }\n  }\n  else {\n    allocation_size = (int)*PTR_DAT_0800290c + 1;\n    if ((int)*PTR_DAT_08002910 < allocation_size) {\n      if (allocation_size < 0x20) {\n        allocation_size = 0x20;\n      }\n      int allocation_result = allocate_and_copy_08009908(*(int*)PTR_DAT_08002914, allocation_size);\n      *(int*)buffer_pointer = allocation_result;\n      if (allocation_result != 0) {\n        *buffer_size = (char) allocation_size;\n      }\n    }\n    if (*(int*)PTR_DAT_08002914 == 0) {\n      *(int*)(buffer_address + 4) = 1;\n    }\n    else {\n      *(char*)(*(int*)PTR_DAT_08002914 + (int)*buffer_index) = character;\n      *buffer_index = *buffer_index + 1;\n      *buffer_size = *buffer_index;\n      success = 1;\n    }\n  }\n  return success;\n}",
            "called": [
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800288c",
            "calling": [
                "FUN_08001bf8"
            ],
            "imported": true,
            "current_name": "add_character_to_data_buffer_0800288c"
        },
        "FUN_0800010c": {
            "renaming": {
                "param_1": "has_been_called",
                "DAT_08000128": "callback",
                "PTR_DAT_08000124": "has_been_called_ptr",
                "PTR_FUN_0800012c": "callback_ptr",
                "FUN_0800010c": "is_first_call_0800010c"
            },
            "code": "bool is_first_call_0800010c(bool *has_been_called, void (*DAT_08000128)()) {\n  if (!*has_been_called) {\n    if (DAT_08000128 != NULL) {\n      DAT_08000128();\n    }\n    *has_been_called = true;\n  }\n  return *has_been_called;\n}",
            "called": [
                "FUN_0800a424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": true,
            "current_name": "is_first_call_0800010c"
        },
        "FUN_08002e26": {
            "renaming": {
                "execute_print_and_functions_08002ddc": "execute_print_and_functions",
                "send_messages_to_server_if_needed_08002df6": "send_messages_to_server_if_needed",
                "param_1": "object_address",
                "param_2": "new_value",
                "assign_value_to_pointer_08003154": "assign_pointer_value",
                "FUN_08002e26": "update_value_and_send_messages_08002e26"
            },
            "code": "void update_value_and_send_messages_08002e26(int object_address, int new_value)\n{\n  *(int *)(object_address + 0xc0) = new_value;\n  assign_pointer_value(object_address + 0x40);\n  execute_print_and_functions(object_address);\n  send_messages_to_server_if_needed(object_address);\n  return;\n}",
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e26",
            "calling": [
                "FUN_08003048"
            ],
            "imported": true,
            "current_name": "update_value_and_send_messages_08002e26"
        },
        "FUN_080036d8": {
            "renaming": {
                "iVar1": "is_valid",
                "param_1": "input",
                "validate_input_08003fd8": "validate_divisor",
                "PTR_DAT_0800371c": "dividend_ptr",
                "set_bits_in_byte_08003f30": "set_bits_in_byte",
                "PTR_DAT_08003718": "divisor_ptr",
                "PTR_DAT_08003720": "output_ptr",
                "FUN_080036d8": "validate_input_080036d8"
            },
            "code": "int validate_input_080036d8(uint32_t input)\n{\n  uint32_t divisor = *(uint32_t*)PTR_DAT_0800371c / (1000 / (byte)*PTR_DAT_08003718);\n  int is_valid = validate_input_080036d8_08003fd8(divisor);\n  if (is_valid) {\n    return 1;\n  }\n  if (input > 0xf) {\n    return 1;\n  }\n  set_bits_in_byte_08003f30(0xffffffff, input, 0);\n  *(uint32_t*)PTR_DAT_08003720 = input;\n  return 0;\n}",
            "called": [
                "FUN_08003f30",
                "FUN_08003fd8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d8",
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "imported": true,
            "current_name": "validate_input_080036d8"
        },
        "FUN_08006e68": {
            "renaming": {
                "FUN_08006e68": "FUNC_08006e68"
            },
            "code": "\nvoid FUNC_08006e68(undefined4 param_1)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  undefined4 uVar3;\n  uint local_20;\n  undefined4 local_1c;\n  undefined4 local_18;\n  undefined4 local_14;\n  \n  puVar1 = PTR_DAT_08007100;\n  iVar2 = find_value_08007376((int)(char)*PTR_DAT_08007100,PTR_DAT_08007104);\n  set_flags_08007438(param_1);\n  uVar3 = set_flag_08006bb8((uint)((int)(char)*puVar1 << 0x18) >> 0x1c);\n  local_1c = 2;\n  local_18 = 0;\n  local_14 = 3;\n  *(uint *)(DAT_08007108 + 0x18) = *(uint *)(DAT_08007108 + 0x18) | 1;\n  switch((uint)(iVar2 << 0x11) >> 0x19) {\n  case 1:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000001;\n    break;\n  case 2:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000002;\n    break;\n  case 4:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000004;\n    break;\n  case 6:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000008;\n    break;\n  case 8:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000030;\n    break;\n  case 10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x70000c0;\n    break;\n  case 0xd:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000300;\n    break;\n  case 0x10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000c00;\n    break;\n  case 0x14:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7001000;\n    break;\n  case 0x17:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7008000;\n    break;\n  case 0x1c:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff;\n    break;\n  case 0x22:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  local_20 = 1 << ((byte)*PTR_DAT_08007100 & 0xf) & 0xffff;\n  process_bits_080040e8(uVar3,&local_20);\n  return;\n}\n\n",
            "called": [
                "FUN_08007438",
                "FUN_080040e8",
                "FUN_08006bb8",
                "FUN_08007376"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006e68",
            "calling": [
                "FUN_08006092"
            ],
            "imported": true,
            "current_name": "FUNC_08006e68"
        },
        "FUN_080086e8": {
            "renaming": {
                "uVar1": "index_found",
                "param_1": "value_to_find",
                "FUN_080086e8": "find_index_080086e8"
            },
            "code": "uint find_index_080086e8(int value_to_find)\n{\n  uint index_found;\n  if (value_to_find == 0) {\n    index_found = 5;\n  }\n  else {\n    index_found = 0;\n    while (index_found <= 4) {\n      if (value_to_find == *(int *)(PTR_DAT_08008708 + index_found * 4)) {\n        return index_found;\n      }\n      index_found++;\n    }\n  }\n  return index_found;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080086e8",
            "calling": [
                "FUN_0800870c",
                "FUN_08008730"
            ],
            "imported": true,
            "current_name": "find_index_080086e8"
        },
        "FUN_0800a110": {
            "renaming": {
                "FUN_0800a110": "readAndAssignValue_0800a110",
                "iVar2": "value",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "puVar1": "pointerToValue"
            },
            "code": "void readAndAssignValue_0800a110(int *outputValue, undefined4 inputValue)\n{\n  undefined *pointerToValue = PTR_DAT_0800a12c;\n  *(undefined4 *)PTR_DAT_0800a12c = 0;\n  int value = getOneValue(inputValue);\n  if ((value == -1) && (*(int *)pointerToValue != 0)) {\n    *outputValue = *(int *)pointerToValue;\n  }\n  return;\n}",
            "called": [
                "FUN_08008850"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a110",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": true,
            "current_name": "readAndAssignValue_0800a110"
        },
        "FUN_08003b8c": {
            "renaming": {
                "FUN_08003b8c": "check_and_update_status_08003b8c",
                "ptr_i_var_3": "get_pointer_value_08003760()",
                "iVar1": "ptr_i_var_1",
                "iVar2": "ptr_i_var_2",
                "param_1": "ptr_param_1"
            },
            "code": "int check_and_update_status_08003b8c(int *ptr_param_1)\n{\n  int ptr_i_var_2 = *ptr_param_1;\n  \n  if ((*(uint *)(ptr_i_var_2 + 8) & 1) == 0) {\n    return 0;\n  }\n  \n  *(uint *)(ptr_i_var_2 + 8) = *(uint *)(ptr_i_var_2 + 8) & 0xfffffffe;\n  int ptr_i_var_3 = get_pointer_value_08003760();\n  \n  do {\n    if ((*(uint *)(*ptr_param_1 + 8) & 1) == 0) {\n      return 0;\n    }\n    int ptr_i_var_1 = get_pointer_value_08003760();\n  } while ((uint)(ptr_i_var_1 - ptr_i_var_3) < 3);\n  \n  ptr_param_1[10] = ptr_param_1[10] | 0x10;\n  ptr_param_1[0xb] = ptr_param_1[0xb] | 1;\n  return 1;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b8c",
            "calling": [
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_08003bd8",
                "FUN_08003ce8"
            ],
            "imported": true,
            "current_name": "check_and_update_status_08003b8c"
        },
        "FUN_080035b8": {
            "renaming": {
                "FUN_080035b8": "initialize_device_080035b8",
                "iVar1": "result",
                "local_c": "parameters_value_5",
                "local_4c": "parameter_update_value",
                "local_1c": "parameters_value_2",
                "local_3c": "input_validation_value_2",
                "local_38": "input_validation_value_3",
                "local_54": "parameter_update",
                "local_10": "parameters_value_4",
                "local_20": "parameters_value_1",
                "uVar2": "value",
                "local_30": "parameters",
                "local_40": "input_validation_value_1",
                "local_14": "parameters_value_3",
                "local_34": "input_validation_value_4",
                "local_44": "input_validation"
            },
            "code": "void initialize_device_080035b8(void)\n{\n  int result;\n  uint value;\n  uint32_t parameters[2] = {2, 0};\n  uint32_t input_validation[4] = {0xf, 2, 0, 0x400, 0};\n  uint32_t parameter_update[2] = {2, 0x8000};\n  result = initialize_device_080035b8_08005460(parameters);\n  if (result != 0) {\n    wait_forever_080073e8(PTR_s__home_bo__arduino15_packages_STM_08003654, 0x88);\n  }\n  result = validate_input_080058ac(input_validation);\n  if (result != 0) {\n    wait_forever_080073e8(PTR_s__home_bo__arduino15_packages_STM_08003654, 0x95);\n  }\n  result = update_parameters_08005aa4(parameter_update);\n  if (result != 0) {\n    wait_forever_080073e8(PTR_s__home_bo__arduino15_packages_STM_08003654, 0x9c);\n  }\n  value = get_value_from_pointer_08005a1c();\n  validate_input_08003fd8((value * DAT_08003650) >> 0x26);\n  update_status_flag_08004024(4);\n  set_bits_in_byte_08003f30(0xffffffff, 0);\n  return;\n}",
            "called": [
                "FUN_08004024",
                "FUN_080058ac",
                "FUN_08005aa4",
                "FUN_080073e8",
                "FUN_08003f30",
                "FUN_08005460",
                "FUN_08003fd8",
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035b8",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": true,
            "current_name": "initialize_device_080035b8"
        },
        "FUN_08001c18": {
            "renaming": {
                "FUN_08001c18": "process_i2c_data_08001c18",
                "iVar3": "difference",
                "iVar4": "data_ptr_difference",
                "param_1": "device_address",
                "param_2": "data_length",
                "param_3": "expected_data_length",
                "param_4": "data_buffer",
                "puVar1": "data_ptr",
                "uVar2": "current_byte",
                "bVar5": "data_received"
            },
            "code": "void process_i2c_data_08001c18(uint8_t device_address, uint32_t data_length, int expected_data_length, uint32_t data_buffer) {\n  uint8_t *data_ptr;\n  uint8_t current_byte;\n  int difference;\n  bool data_received;\n\n  data_ptr = PTR_DAT_08001cbc;\n  if (data_length == 0xffffffff) {\n    data_length = 0;\n  }\n  else {\n    initialize_i2c_data_buffer(PTR_DAT_08001cbc, device_address);\n    add_byte_to_i2c_data_buffer(data_length & 0xff);\n    check_i2c_data(PTR_DAT_08001cbc, data_buffer);\n  }\n  data_ptr = PTR_DAT_08001cbc;\n  process_and_return_i2c_data(PTR_DAT_08001cbc, device_address, expected_data_length);\n  difference = calculate_difference_between_first_and_second_byte_of_pointers_0800270c(data_ptr);\n  if (expected_data_length < difference) {\n    send_encoded_messages_to_server_and_find_end_of_string_08002f14(PTR_DAT_08001cc4,PTR_s_I2C__Too_many_bytes_received_08001cc0);\n  }\n  else {\n    difference = calculate_difference_between_first_and_second_byte_of_pointers_0800270c(PTR_DAT_08001cbc);\n    if (difference < expected_data_length) {\n      send_encoded_messages_to_server_and_find_end_of_string_08002f14(PTR_DAT_08001cc4,PTR_s_I2C__Too_few_bytes_received_08001ccc);\n    }\n  }\n  data_ptr = PTR_DAT_08001cc8;\n  *PTR_DAT_08001cc8 = (char)device_address;\n  data_ptr[1] = (char)data_length;\n  difference = 0;\n  while( true ) {\n    if (difference < expected_data_length) {\n      int data_ptr_difference = calculate_difference_between_first_and_second_byte_of_pointers_0800270c(PTR_DAT_08001cbc);\n      if (data_ptr_difference == 0) {\n        data_received = false;\n      }\n      else {\n        data_received = true;\n      }\n    }\n    else {\n      data_received = false;\n    }\n    if (!data_received) break;\n    current_byte = read_byte_from_i2c_data_buffer();\n    data_ptr[difference + 2] = current_byte;\n    difference = difference + 1;\n  }\n  send_encoded_messages_to_server_08002f0a(PTR_DAT_08001cc4,0x77,expected_data_length + 2U & 0xff,PTR_DAT_08001cc8);\n  return;\n}",
            "called": [
                "FUN_08002f0a",
                "FUN_08002a58",
                "FUN_08002f14",
                "FUN_08001c08",
                "FUN_08002c14",
                "FUN_0800270c",
                "FUN_08001bf8",
                "FUN_08002a30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c18",
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "imported": true,
            "current_name": "process_i2c_data_08001c18"
        },
        "FUN_08006460": {
            "renaming": {
                "FUN_08006460": "clear_bit_08006460",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "puVar1": "array_ptr"
            },
            "code": "uint32_t clear_bit_08006460(uint32_t **bit_array, uint32_t bit_index)\n{\n  uint32_t *array_ptr;\n  set_bit(*bit_array, bit_index, 0);\n  array_ptr = *bit_array;\n  if (((array_ptr[8] & 0x1111) == 0) && ((array_ptr[8] & 0x444) == 0)) {\n    array_ptr[17] = array_ptr[17] & 0xffff7fff;\n  }\n  array_ptr = *bit_array;\n  if (((array_ptr[8] & 0x1111) == 0) && ((array_ptr[8] & 0x444) == 0)) {\n    *array_ptr = *array_ptr & 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006460",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": true,
            "current_name": "clear_bit_08006460"
        },
        "FUN_08004046": {
            "renaming": {
                "FUN_08004046": "do_nothing_and_return_08004046",
                "do_nothing_08004044": "do_nothing"
            },
            "code": "void do_nothing_and_return_08004046(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08004044"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004046",
            "calling": [
                "FUN_08007246"
            ],
            "imported": true,
            "current_name": "do_nothing_and_return_08004046"
        },
        "FUN_08008880": {
            "renaming": {
                "bVar1": "is_valid_index",
                "FUN_08008880": "get_value_from_array_08008880",
                "param_1": "index",
                "PTR_DAT_080088d8": "ARRAY_START",
                "cVar2": "value",
                "uVar3": "result",
                "PTR_DAT_080088dc": "ARRAY_START_2",
                "uVar4": "shift_amount"
            },
            "code": "uint get_value_from_array_08008880(uint index)\n{\n  bool is_valid_index;\n  char value;\n  uint result;\n  uint shift_amount;\n  \n  if (index < 14) {\n    if (index + 46 < 60) {\n      is_valid_index = true;\n    }\n    else {\n      is_valid_index = false;\n    }\n  }\n  else {\n    is_valid_index = index < 60;\n  }\n  \n  if (is_valid_index) {\n    if (index < 14) {\n      index += 46;\n    }\n    value = PTR_DAT_080088d8[index];\n  }\n  else {\n    value = -1;\n  }\n  \n  if (value == -1) {\n    result = 0;\n  }\n  else {\n    result = get_value_from_array_08008880_08006d80();\n    shift_amount = *(uint *)PTR_DAT_080088dc;\n    if (shift_amount != 12) {\n      if (shift_amount < 12) {\n        return result >> (12 - shift_amount);\n      }\n      return result << (shift_amount - 12);\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08006d80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008880",
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "imported": true,
            "current_name": "get_value_from_array_08008880"
        },
        "FUN_08004044": {
            "renaming": {
                "FUN_08004044": "do_nothing_08004044"
            },
            "code": "\nvoid do_nothing_08004044(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004044",
            "calling": [
                "FUN_08004046"
            ],
            "imported": true,
            "current_name": "do_nothing_08004044"
        },
        "FUN_08002ed2": {
            "renaming": {
                "0xc0": "DATA_OFFSET",
                "uVar1": "result",
                "FUN_08002ed2": "process_received_data_08002ed2",
                "param_1": "data_address",
                "process_data_08003474": "process_data",
                "0xc": "FUNCTION_OFFSET",
                "0x44": "DATA_PROCESS_OFFSET",
                "0xff": "MASK"
            },
            "code": "void process_received_data_08002ed2(int data_address) {\n  uint32_t result = (**(code **)(**(int **)(data_address + DATA_OFFSET) + FUNCTION_OFFSET))();\n  if (result != 0xffffffff) {\n    process_data(data_address + DATA_PROCESS_OFFSET, result & MASK);\n  }\n  return;\n}",
            "called": [
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed2",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": true,
            "current_name": "process_received_data_08002ed2"
        },
        "FUN_080073ae": {
            "renaming": {
                "param_1": "value1",
                "FUN_080073ae": "find_nonzero_value_080073ae",
                "param_2": "value2"
            },
            "code": "int find_nonzero_value_080073ae(int value1, int value2) {\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ae",
            "calling": [
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "imported": true,
            "current_name": "find_nonzero_value_080073ae"
        },
        "FUN_08000488": {
            "renaming": {
                "uVar1": "value_from_array",
                "PTR_DAT_080004d0": "message_pointer",
                "param_1": "bit_index",
                "PTR_DAT_080004c8": "array_pointer",
                "FUN_08000488": "set_bit_in_array_08000488",
                "PTR_DAT_080004cc": "unknown_flag_pointer",
                "param_2": "set_bit"
            },
            "code": "void set_bit_in_array_08000488(uint bit_index, int set_bit){\\n  undefined4 value_from_array;\\n  uint* PTR_DAT_080004c8 = (uint*)PTR_DAT_080004c8;\\n  if ((int)bit_index < 0xe) {\\n    if (set_bit == 0) {\\n      *PTR_DAT_080004c8 = *PTR_DAT_080004c8 & ~(1 << (bit_index & 0xff));\\n      return;\\n    }\\n    *PTR_DAT_080004c8 = 1 << (bit_index & 0xff) | *PTR_DAT_080004c8;\\n    if (*PTR_DAT_080004cc == \"\\0\") {\\n      value_from_array = get_value_from_array_08008880();\\n      sendEncodedMessage_08002ef2(PTR_DAT_080004d0, bit_index, value_from_array);\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000488",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": true,
            "current_name": "set_bit_in_array_08000488"
        },
        "FUN_08003f0c": {
            "renaming": {
                "PTR_08003f2c": "ptr_dat_08003f2c",
                "param_1": "value",
                "PTR_08003f2c_plus_c": "ptr_dat_08003f2c_plus_c",
                "FUN_08003f0c": "updateValue_08003f0c",
                "DAT_08003f2c": "dat_pointer",
                "*PTR_08003f2c_plus_c": "current_value",
                "*(uint *)(DAT_08003f2c + 0xc)": "new_value"
            },
            "code": "void updateValue_08003f0c(uint value) {\n  uint* PTR_08003f2c = (uint*) DAT_08003f2c;\n  uint* PTR_08003f2c_plus_c = PTR_08003f2c + 0xc;\n  uint *PTR_08003f2c_plus_c = *PTR_08003f2c_plus_c;\n  uint *(uint *)(DAT_08003f2c + 0xc) = (value & 7) << 8 | *PTR_08003f2c_plus_c & 0xf8ff | 0x5fa0000;\n  *PTR_08003f2c_plus_c = *(uint *)(DAT_08003f2c + 0xc);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0c",
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "imported": true,
            "current_name": "updateValue_08003f0c"
        },
        "FUN_08008f1c": {
            "renaming": {
                "initialize_and_process_data_08001b48": "initialize_data",
                "calculate_shift_amount_if_data_not_zero_08008bf4": "calculate_shift_amount_if_data_not_zero",
                "FUN_08008f1c": "process_data_and_send_messages_until_data_is_zero_08008f1c",
                "process_data_and_send_messages_080022f8": "process_data_and_send_messages",
                "do_nothing_08008f0c": "do_nothing",
                "DAT_08008f38": "data_is_not_zero"
            },
            "code": "void process_data_and_send_messages_until_data_is_zero_08008f1c(void)\n{\n  do_nothing();\n  initialize_data();\n  do {\n    do {\n      process_data_and_send_messages();\n    } while (DAT_08008f38);\n    calculate_shift_amount_if_data_not_zero();\n  } while( true );\n}",
            "called": [
                "FUN_08008bf4",
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_080022f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f1c",
            "calling": [
                "FUN_08003658"
            ],
            "imported": true,
            "current_name": "process_data_and_send_messages_until_data_is_zero_08008f1c"
        },
        "FUN_080058ac": {
            "renaming": {
                "iVar2": "time_diff",
                "iVar3": "initial_time",
                "param_1": "input",
                "FUN_080058ac": "validate_input_080058ac",
                "param_2": "input_size",
                "puVar1": "data_ptr",
                "uVar4": "result"
            },
            "code": "uint32_t validate_input_080058ac(uint32_t *input, uint32_t input_size) {\n  uint32_t *data_ptr;\n  int32_t time_diff, initial_time;\n  uint32_t result;\n\n  data_ptr = data_ptr_global;\n  if (((*data_ptr & MASK_3_BITS) < input_size) &&\n     (*data_ptr = *data_ptr & MASK_LAST_29_BITS | input_size, input_size != (*data_ptr & MASK_3_BITS))) {\n    return 1;\n  }\n  if ((*input & MASK_SECOND_BIT) != 0) {\n    data_ptr[1] = data_ptr[1] & MASK_LAST_4_BITS | input[2];\n  }\n  if ((*input & MASK_FIRST_BIT) != 0) {\n    uint32_t input_value = input[1];\n    if (input_value == 1) {\n      if ((*data_ptr & MASK_18TH_BIT) == 0) {\n        return 1;\n      }\n    }\n    else if ((input_value != 2) && ((*data_ptr & MASK_2ND_BIT) == 0)) {\n      return 1;\n    }\n    data_ptr[1] = input_value | data_ptr[1] & MASK_LAST_2_BITS;\n    initial_time = get_pointer_value();\n    if (input[1] == 1) {\n      while ((data_ptr[1] & MASK_3_4_BITS) != 4) {\n        time_diff = get_pointer_value() - initial_time;\n        if (5000 < (uint32_t)time_diff) {\n          return 3;\n        }\n      }\n    }\n    else if (input[1] == 2) {\n      while ((data_ptr[1] & MASK_3_4_BITS) != 8) {\n        time_diff = get_pointer_value() - initial_time;\n        if (5000 < (uint32_t)time_diff) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((data_ptr[1] & MASK_3_4_BITS) != 0) {\n        time_diff = get_pointer_value() - initial_time;\n        if (5000 < (uint32_t)time_diff) {\n          return 3;\n        }\n      }\n    }\n  }\n  data_ptr = data_ptr_global;\n  if ((input_size < (*data_ptr & MASK_3_BITS)) &&\n     (*data_ptr = *data_ptr & MASK_LAST_29_BITS | input_size, input_size != (*data_ptr & MASK_3_BITS))) {\n    return 1;\n  }\n  if ((*input & MASK_5TH_BIT) != 0) {\n    data_ptr[1] = data_ptr[1] & MASK_FIRST_3_BITS | input[3];\n  }\n  if ((*input & MASK_9TH_BIT) != 0) {\n    data_ptr[1] = data_ptr[1] & MASK_FIRST_11_BITS | input[4] << 3;\n  }\n  result = calculate_result();\n  *(uint32_t *)data_ptr_global = result >> MASK_SHIFT_AMOUNT[((data_ptr[1] << 0x18) >> 0x1c)];\n  validate_input_080058ac_helper(0xf);\n  return 0;\n}",
            "called": [
                "FUN_080058d2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ac",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": true,
            "current_name": "validate_input_080058ac"
        },
        "FUN_08006bb8": {
            "renaming": {
                "DAT_08006c54": "return_value_2",
                "DAT_08006c50": "return_value_1",
                "uVar1": "return_value",
                "param_1": "flag",
                "FUN_08006bb8": "set_flag_08006bb8",
                "DAT_08006c4c": "return_value_0",
                "DAT_08006c5c": "return_value_4",
                "DAT_08006c58": "return_value_3",
                "DAT_08006c48": "flag_base_address"
            },
            "code": "uint32_t set_flag_08006bb8(uint32_t flag)\n{\n  uint32_t* flag_ptr = (uint32_t*)(DAT_08006c48 + 0x18);\n  switch(flag) {\n    case 0:\n      *flag_ptr |= 0x4;\n      return DAT_08006c4c;\n    case 1:\n      *flag_ptr |= 0x8;\n      return DAT_08006c50;\n    case 2:\n      *flag_ptr |= 0x10;\n      return DAT_08006c54;\n    case 3:\n      *flag_ptr |= 0x20;\n      return DAT_08006c58;\n    case 4:\n      *flag_ptr |= 0x40;\n      return DAT_08006c5c;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006bb8",
            "calling": [
                "FUN_08007258",
                "FUN_080077b0",
                "FUN_08006e68",
                "FUN_08006ca8",
                "FUN_08008078"
            ],
            "imported": true,
            "current_name": "set_flag_08006bb8"
        },
        "FUN_08007438": {
            "renaming": {
                "DAT_080074d0": "FLAG_1",
                "*(int **)(PTR_DAT_080074dc + 8)": "FLAG_3_PTR_PTR",
                "*(int **)PTR_DAT_080074dc": "FLAG_1_PTR_PTR",
                "DAT_080074d4": "FLAG_3",
                "*(int **)(PTR_DAT_080074dc + 0xc)": "FLAG_4_PTR_PTR",
                "PTR_DAT_080074dc": "FLAG_PTRS",
                "PTR_DAT_080074dc + 4": "FLAG_2_PTR_PTR",
                "*(uint *)(DAT_080074d4 + 0x20c1c)": "FLAG_3_BIT",
                "param_1": "flag_ptr",
                "FUN_08007438": "set_flags_08007438",
                "_DAT_4002101c": "FLAG_2_PTR",
                "*(uint *)(DAT_080074d0 + 0xe418)": "FLAG_1_BIT",
                "*(uint *)(DAT_080074d8 + 0x2081c)": "FLAG_4_BIT",
                "DAT_080074dc": "FLAG_PTRS",
                "DAT_080074d8": "FLAG_4"
            },
            "code": "void set_flags_08007438(int *flag_ptr)\n{\n  int current_flag = *flag_ptr;\n  if (current_flag == DAT_080074d0)\n  {\n    *DAT_080074d0_PTR |= *(uint *)(DAT_080074d0 + 0xe418);\n    **(int **)PTR_DAT_080074dc = flag_ptr;\n  }\n  if (current_flag == FLAG_2)\n  {\n    *_DAT_4002101c |= FLAG_2_BIT;\n    *PTR_DAT_080074dc + 4 = flag_ptr;\n  }\n  if (current_flag == DAT_080074d4)\n  {\n    *DAT_080074d4_PTR |= *(uint *)(DAT_080074d4 + 0x20c1c);\n    **(int **)(PTR_DAT_080074dc + 8) = flag_ptr;\n  }\n  if (current_flag == DAT_080074d8)\n  {\n    *DAT_080074d8_PTR |= *(uint *)(DAT_080074d8 + 0x2081c);\n    **(int **)(PTR_DAT_080074dc + 0xc) = flag_ptr;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007438",
            "calling": [
                "FUN_08007708",
                "FUN_08006e68"
            ],
            "imported": true,
            "current_name": "set_flags_08007438"
        },
        "FUN_08004aec": {
            "renaming": {
                "**param_1": "**command",
                "*(undefined *)((int)param_1 + 0x3d)": "*(char *)(command + 0x3d)",
                "execute_command_if_valid_08007ff0()": "execute_valid_command()",
                "*(undefined *)((int)param_1 + 0x3e)": "*(command_char + 1)",
                "(*param_1)[5]": "(*command)[5]",
                "PTR_DAT_08004b7c_0x4": "PTR_DAT_08004b7c + 0x4",
                "param_1": "command",
                "uint": "unsigned int",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)(command + 0x3d)",
                "PTR_DAT_08004b7c_0x8": "PTR_DAT_08004b7c + 0x8",
                "(*param_1)[1]": "(*command)[1]",
                "FUN_08004aec": "handle_command_08004aec",
                "DAT_08004b7c": "PTR_DAT_08004b7c",
                "param_1[0xc]": "command[12]",
                "param_1[0xb]": "command[11]",
                "param_1[0xc] = (uint *)0x0;": "command[12] = PTR_0x0;",
                "do_nothing_08004a22()": "do_nothing()"
            },
            "code": "int handle_command_08004aec(uint **command) {\n\tuint *param_11 = command[11];\n\tchar *command_char = (char *)(command + 0x3d);\n\tif ((param_11 == DAT_08004b7c_0x4 || param_11 == DAT_08004b7c_0x8) && (*command_char == '(')) {\n\t\tcommand[11] = DAT_08004b7c;\n\t\t(*command)[1] &= 0xfffff8ff;\n\t\t(*command)[5] = 0xfffffbff;\n\t\t**command &= 0xfffffbff;\n\t\tcommand[12] = PTR_0x0;\n\t\t*command_char = ' ';\n\t\t*(command_char + 1) = 0;\n\t\texecute_valid_command();\n\t} else if (*command_char == '!') {\n\t\tcommand[11] = DAT_08004b7c;\n\t\tcommand[12] = PTR_0x21;\n\t\t*command_char = ' ';\n\t\t*(command_char + 1) = 0;\n\t\t(*command)[1] &= 0xfffff8ff;\n\t\t(*command)[5] = 0xfffffbff;\n\t\t**command &= 0xfffffbff;\n\t\tdo_nothing();\n\t} else {\n\t\t(*command)[5] = 0xfffffbff;\n\t}\n\treturn 0;\n}",
            "called": [
                "FUN_08004a22",
                "FUN_08007ff0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004aec",
            "calling": [
                "FUN_080052f0"
            ],
            "imported": true,
            "current_name": "handle_command_08004aec"
        },
        "FUN_0800887c": {
            "renaming": {
                "FUN_0800887c": "returnOne_0800887c"
            },
            "code": "int returnOne_0800887c(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800887c",
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "imported": true,
            "current_name": "returnOne_0800887c"
        },
        "FUN_08004728": {
            "renaming": {
                "local_c": "counter",
                "uVar1": "result",
                "DAT_080047f0": "constant3",
                "puVar2": "data_ptr",
                "param_1": "data",
                "DAT_080047ec": "constant1",
                "PTR_DAT_080047e8": "constant2",
                "FUN_08004728": "process_data_08004728",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "flag"
            },
            "code": "uint32_t process_data_08004728(uint32_t **data, uint32_t *param1, uint32_t *param2, uint16_t flag)\n{\n  uint32_t result;\n  uint32_t *data_ptr;\n  int counter = 0;\n  if (*(char *)((int)data + 0x3d) == ' ')\n  {\n    counter = (uint32_t)((uint64_t)DAT_080047ec * (uint64_t)(*(uint32_t *)PTR_DAT_080047e8 >> 3) >> 0x28) * 0x19;\n    do\n    {\n      if (counter == 0)\n      {\n        data[0xc] = (uint32_t *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        *(undefined *)(data + 0xf) = 0;\n        return 3;\n      }\n      data_ptr = *data;\n      counter = counter + -1;\n    } while ((data_ptr[6] & 2) != 0);\n    if (*(char *)(data + 0xf) == '\\x01')\n    {\n      result = 2;\n    }\n    else\n    {\n      *(undefined *)(data + 0xf) = 1;\n      if ((*data_ptr & 1) == 0)\n      {\n        *data_ptr = *data_ptr | 1;\n      }\n      **data = **data & 0xfffff7ff;\n      *(undefined *)((int)data + 0x3d) = 0x21;\n      *(undefined *)((int)data + 0x3e) = 0x10;\n      result = 0;\n      data[0x10] = (uint32_t *)0x0;\n      data[9] = param2;\n      *(uint16_t *)((int)data + 0x2a) = flag;\n      data[0xb] = DAT_080047f0;\n      *(uint16_t *)(data + 10) = *(uint16_t *)((int)data + 0x2a);\n      data[0x11] = param1;\n      **data = **data | 0x100;\n      *(undefined *)(data + 0xf) = 0;\n      (*data)[1] = (*data)[1] | 0x700;\n    }\n  }\n  else\n  {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004728",
            "calling": [
                "FUN_08007e74"
            ],
            "imported": true,
            "current_name": "process_data_08004728"
        },
        "FUN_08007ede": {
            "renaming": {
                "uVar1": "byte_count",
                "param_1": "dst_addr",
                "FUN_08007ede": "copy_data_08007ede",
                "param_2": "src_addr",
                "param_3": "num_bytes"
            },
            "code": "int copy_data_08007ede(int dst_addr, int src_addr, uint num_bytes)\n{\n  uint byte_count;\n\n  if (num_bytes > 0x20) {\n    return 2;\n  }\n  for (byte_count = 0; byte_count < num_bytes; byte_count++) {\n    *(undefined *)(dst_addr + byte_count + 0x68) = *(undefined *)(src_addr + byte_count);\n    *(char *)(dst_addr + 0x88) = *(char *)(dst_addr + 0x88) + '\\x01';\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ede",
            "calling": [
                "FUN_0800288c",
                "FUN_080027f0"
            ],
            "imported": true,
            "current_name": "copy_data_08007ede"
        },
        "FUN_0800863c": {
            "renaming": {
                "*(int *)(PTR_DAT_0800868c + uVar2 * 4)": "*(int *)(input_indexes + input_index * 4)",
                "set_bit_at_index_08003f94": "set_bit_at_index",
                "iVar1": "input_validity_check_result",
                "PTR_DAT_08008688": "input_array",
                "set_parameters_080068d6": "set_parameters",
                "param_1 + 0x45": "input + 0x45",
                "param_1": "input",
                "*(undefined4 *)(PTR_DAT_08008690 + (uint)*(byte *)(param_1 + 0x44) * 4)": "*(undefined4 *)(input_parameters + input_index * 4)",
                "*(byte *)(param_1 + 0x44)": "*(byte *)(input + 0x44)",
                "PTR_DAT_0800868c": "input_indexes",
                "*(undefined4 *)(PTR_DAT_08008688 + uVar2 * 4)": "*(undefined4 *)(input_array + input_index * 4)",
                "FUN_0800863c": "process_input_0800863c",
                "set_bits_in_byte_08003f30": "set_bits_in_byte",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar2": "input_index",
                "(int)*(char *)(param_1 + 0x5a)": "(int)*(char *)(input + 0x5a)"
            },
            "code": "void process_input_0800863c(int input, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int input_validity_check_result;\n  uint input_index;\n\n  if (input != 0) {\n    input_validity_check_result = is_valid_input();\n    if (input_validity_check_result == 0) {\n      input_index = (uint)*(byte *)(input + 0x44);\n      *(undefined4 *)(PTR_DAT_08008688 + uVar2 * 4) = param_2;\n      *(int *)(PTR_DAT_0800868c + uVar2 * 4) = input;\n      set_bits_in_byte((int)*(char *)(input + 0x5a), 0, 1, input_index, param_4);\n      set_bit_at_index((int)*(char *)(input + 0x5a));\n      set_parameters(*(undefined4 *)(PTR_DAT_08008690 + (uint)*(byte *)(param_1 + 0x44) * 4), input + 0x45, 1);\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080085b8",
                "FUN_080068d6",
                "FUN_08003f94",
                "FUN_08003f30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800863c",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": true,
            "current_name": "process_input_0800863c"
        },
        "thunk_FUN_0800887c": {
            "renaming": {
                "thunk_FUN_0800887c": "get_one_thunk_0800887c"
            },
            "code": "int get_one_thunk_0800887c() {\n  return 1;\n}\n",
            "called": [
                "FUN_0800887c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a01c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": true,
            "current_name": "get_one_thunk_0800887c"
        },
        "FUN_080074e0": {
            "renaming": {
                "DAT_0800753c": "target_value_4",
                "DAT_08007538": "target_value_3",
                "param_1": "register_value",
                "DAT_08007540": "register_address",
                "FUN_080074e0": "update_registers_080074e0",
                "DAT_08007534": "target_value_1"
            },
            "code": "void update_registers_080074e0(int *register_value) {\n  if (*register_value == DAT_08007534) {\n    *(uint *)(DAT_08007540 + 0x18) &= 0xfffff7ff;\n  }\n  if (*register_value == target_value_2) {\n    *(uint *)(DAT_08007540 + 0x1c) &= 0xfffffffe;\n  }\n  if (*register_value == DAT_08007538) {\n    *(uint *)(DAT_08007540 + 0x1c) &= 0xfffffffd;\n  }\n  if (*register_value == DAT_0800753c) {\n    *(uint *)(DAT_08007540 + 0x1c) &= 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074e0",
            "calling": [
                "FUN_08007110",
                "FUN_08007710"
            ],
            "imported": true,
            "current_name": "update_registers_080074e0"
        },
        "FUN_080073c0": {
            "renaming": {
                "PTR_DAT_080073d0": "code_ptr_ptr",
                "FUN_080073c0": "execute_code_if_not_null_080073c0",
                "PTR_DAT_080073d4": "parameter_ptr"
            },
            "code": "void execute_code_if_not_null_080073c0(void)\n{\n  code* code_ptr = *(code**)PTR_DAT_080073d0;\n  if (code_ptr != NULL) {\n    code_ptr(*(int*)PTR_DAT_080073d4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_08005cb4"
            ],
            "imported": true,
            "current_name": "execute_code_if_not_null_080073c0"
        },
        "FUN_080084b0": {
            "renaming": {
                "iVar4": "index",
                "puVar2": "data_pointer",
                "FUN_080084b0": "process_character_080084b0",
                "cVar1": "current_char",
                "uVar3": "character_index",
                "uVar5": "value"
            },
            "code": "void process_character_080084b0(void)\n{\n  char current_char = character_array[1];\n  int index = find_index_if_not_negative(current_char, character_array);\n  if (index != 0) {\n    int value = find_index_if_not_negative(current_char, character_array);\n    char character_index = find_character_index(value, character_array);\n    undefined* data_pointer = data_array;\n    data_array[0x59] = character_index;\n    data_array[0x58] = current_char;\n    *(int*)(data_pointer + 0x48) = 0x2580;\n    *(int*)(data_pointer + 0x54) = 0;\n    *(int*)(data_pointer + 0x4c) = 0;\n    *(int*)(data_pointer + 0x50) = 0;\n    execute_function(data_pointer);\n  }\n  return;\n}",
            "called": [
                "FUN_0800734a",
                "FUN_08007320",
                "FUN_08008078"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080084b0",
            "calling": [
                "FUN_08008500"
            ],
            "imported": true,
            "current_name": "process_character_080084b0"
        },
        "FUN_08004050": {
            "renaming": {
                "DAT_080040e4": "PTR_DAT_080040e4",
                "uVar1": "mode",
                "puVar2": "ptr",
                "param_1": "param",
                "DAT_080040e0": "PTR_DAT_080040e0",
                "FUN_08004050": "set_mode_08004050"
            },
            "code": "int set_mode_08004050(uint **param_1)\n{\n  int mode;\n  uint *ptr;\n  \n  if (*(char *)((int)param_1 + 0x21) != 0x02) {\n    param_1[14] = (uint *)0x4;\n    return 1;\n  }\n  **param_1 &= 0xfffffff1;\n  **param_1 &= 0xfffffffe;\n  ptr = *param_1;\n  if (ptr == DAT_080040e0) {\n    mode = 1;\n  }\n  else if (ptr == DAT_080040e0 + 5) {\n    mode = 0x10;\n  }\n  else if (ptr == DAT_080040e0 + 10) {\n    mode = 0x100;\n  }\n  else if (ptr == DAT_080040e0 + 15) {\n    mode = 0x1000;\n  }\n  else if (ptr == DAT_080040e0 + 20) {\n    mode = 0x10000;\n  }\n  else if (ptr == DAT_080040e0 + 25) {\n    mode = 0x100000;\n  }\n  else {\n    mode = 0x1000000;\n  }\n  *(int *)(DAT_080040e4 + 4) = mode;\n  *(char *)((int)param_1 + 0x21) = 1;\n  *(undefined *)(param_1 + 8) = 0;\n  if (param_1[13] != (uint *)0x0) {\n    (*(void (*)())param_1[13])();\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004050",
            "calling": [
                "FUN_080069ec",
                "FUN_08004f3c"
            ],
            "imported": true,
            "current_name": "set_mode_08004050"
        },
        "FUN_08008e14": {
            "renaming": {
                "PTR_DAT_08008e3c": "object_ptr",
                "param_1": "condition_1",
                "param_2": "condition_2",
                "FUN_08008e14": "set_object_values_if_condition_met_08008e14"
            },
            "code": "void set_object_values_if_condition_met_08008e14(int condition_1, int condition_2) {\n  if ((condition_1 == 1) && (condition_2 == 0xffff)) {\n    set_values_for_object_08008df8(PTR_DAT_08008e3c, 0, 0, 0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08008df8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e14",
            "calling": [],
            "imported": true,
            "current_name": "set_object_values_if_condition_met_08008e14"
        },
        "FUN_08005a28": {
            "renaming": {
                "DAT_08005a40": "get_data_at_offset",
                "uVar1": "shifted_value",
                "get_value_from_pointer_08005a1c": "get_pointer_to_shifted_value",
                "FUN_08005a28": "get_shifted_value_from_pointer_08005a28"
            },
            "code": "uint get_shifted_value_from_pointer_08005a28(void)\n{\n  uint shifted_value;\n  uint* pointer_to_shifted_value = get_pointer_to_shifted_value();\n  uint shifted_index = (*(int *)(DAT_08005a40() + 4) << 0x15) >> 0x1d;\n  shifted_value = *pointer_to_shifted_value >> PTR_DAT_08005a44[shifted_index];\n  return shifted_value;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a28",
            "calling": [
                "FUN_08006538",
                "FUN_080045c0",
                "FUN_080075dc"
            ],
            "imported": true,
            "current_name": "get_shifted_value_from_pointer_08005a28"
        },
        "FUN_080095a8": {
            "renaming": {
                "bVar4": "flag1",
                "iVar1": "loop_counter",
                "param_1": "input_value",
                "param_2": "output_value1",
                "param_3": "output_value2",
                "param_4": "additional_value",
                "param_5": "callback_func",
                "uVar3": "temp2",
                "uVar2": "temp1",
                "FUN_080095a8": "calculate_value_080095a8"
            },
            "code": "uint32_t calculate_value_080095a8(uint32_t input_value, uint32_t *output_value1, uint32_t *output_value2, uint32_t additional_value, code *callback_func)\\n{\\n  int loop_counter;\\n  uint32_t temp1;\\n  uint32_t temp2;\\n  bool flag1;\\n  uint32_t flag2;\\n\\n  temp1 = output_value1[4];\\n  if ((int)output_value1[4] < (int)output_value1[2]) {\\n    temp1 = output_value1[2];\\n  }\\n  *output_value2 = temp1;\\n  if (*(char *)((int)output_value1 + 0x43) != \"\\0\") {\\n    *output_value2 = temp1 + 1;\\n  }\\n  if ((int)(*output_value1 << 0x1a) < 0) {\\n    *output_value2 = *output_value2 + 2;\\n  }\\n  temp1 = *output_value1 & 6;\\n  if (temp1 == 0) {\\n    for (; (int)temp1 < (int)(output_value1[3] - *output_value2); temp1 = temp1 + 1) {\\n      loop_counter = (*callback_func)(input_value, additional_value, (int)output_value1 + 0x19, 1);\\n      if (loop_counter == -1) {\\n        return 0xffffffff;\\n      }\\n    }\\n  }\\n  temp1 = (uint32_t)*(byte *)((int)output_value1 + 0x43);\\n  if (temp1 != 0) {\\n    temp1 = 1;\\n  }\\n  temp2 = temp1;\\n  if ((int)(*output_value1 << 0x1a) < 0) {\\n    *(undefined *)((int)output_value1 + temp1 + 0x43) = 0x30;\\n    temp2 = temp1 + 2;\\n    *(undefined *)((int)output_value1 + temp1 + 0x44) = *(undefined *)((int)output_value1 + 0x45);\\n  }\\n  loop_counter = (*callback_func)(input_value, additional_value, (int)output_value1 + 0x43, temp2);\\n  if (loop_counter != -1) {\\n    temp1 = output_value1[3];\\n    flag1 = (*output_value1 & 6) != 4;\\n    if (flag1) {\\n      temp1 = 0;\\n    }\\n    flag2 = 0;\\n    if (!flag1) {\\n      temp1 = temp1 - *output_value2;\\n    }\\n    if (!flag1) {\\n      temp1 = temp1 & ~((int)temp1 >> 0x1f);\\n    }\\n    if ((int)output_value1[4] < (int)output_value1[2]) {\\n      temp1 = temp1 + (output_value1[2] - output_value1[4]);\\n    }\\n    while( true ) {\\n      if (temp1 == flag2) {\\n        return 0;\\n      }\\n      loop_counter = (*callback_func)(input_value, additional_value, (int)output_value1 + 0x1a, 1);\\n      if (loop_counter == -1) break;\\n      flag2 = flag2 + 1;\\n    }\\n  }\\n  return 0xffffffff;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095a8",
            "calling": [
                "FUN_08009698"
            ],
            "imported": true,
            "current_name": "calculate_value_080095a8"
        },
        "FUN_08003002": {
            "renaming": {
                "process_data_08008990": "process_data",
                "FUN_08003002": "set_values_in_addresses_08003002",
                "param_1": "address",
                "loop_through_addresses_and_set_values_08002fca": "loop_through_addresses_and_set_values",
                "do_nothing_08008ac4": "do_nothing"
            },
            "code": "void set_values_in_addresses_08003002(int address){\\n  if (*(char *)(address + 0x1f8) != \"\\0\") {\\n    return;\\n  }\\n  process_data(0xd,1);\\n  loop_through_addresses_and_set_values(address,0xd,2,0x28,0xd2);\\n  do_nothing(0xfa);\\n  loop_through_addresses_and_set_values(address,0xd,5,0x28,0xd2);\\n  do_nothing(0x7d);\\n  return;\\n}",
            "called": [
                "FUN_08002fca",
                "FUN_08008ac4",
                "FUN_08008990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003002",
            "calling": [
                "FUN_08003048"
            ],
            "imported": true,
            "current_name": "set_values_in_addresses_08003002"
        },
        "FUN_08008ac4": {
            "renaming": {
                "FUN_08008ac4": "do_nothing_08008ac4"
            },
            "code": "\nvoid do_nothing_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ac4",
            "calling": [
                "FUN_08002fca",
                "FUN_08003002"
            ],
            "imported": true,
            "current_name": "do_nothing_08008ac4"
        },
        "FUN_08003bd8": {
            "renaming": {
                "iVar1": "result",
                "FUN_08003bd8": "check_and_update_status_08003bd8",
                "param_1": "status",
                "uVar3": "flag2",
                "uVar2": "flag1"
            },
            "code": "int check_and_update_status_08003bd8(int *status)\n{\n  int result;\n  uint flag1;\n  uint flag2;\n  \n  if (status == NULL) {\n    return 1;\n  }\n  if (status[10] == 0) {\n    status[11] = 0;\n    *(undefined *)(status + 9) = 0;\n    process_bits_and_set_flag();\n  }\n  result = check_and_update_status_08003bd8_08003b8c(status);\n  flag2 = status[10] & 0x10;\n  if ((flag2 == 0) && (result == 0)) {\n    status[10] = status[10] & 0xffffeefd | 2;\n    flag1 = status[1] | status[7] | status[3] << 1;\n    if (status[2] == 0x100) {\n      flag2 = 0x100;\n    }\n    else if (status[2] == 1) {\n      flag2 = 0x100;\n    }\n    if (status[5] == 1) {\n      if (status[3] == 0) {\n        flag2 = flag2 | (status[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        status[10] = status[10] | 0x20;\n        status[11] = status[11] | 1;\n      }\n    }\n    *(uint *)(*status + 4) = flag2 | *(uint *)(*status + 4) & 0xffff16ff;\n    *(uint *)(*status + 8) = DAT_08003ce0 & *(uint *)(*status + 8) | flag1;\n    if ((status[2] == 0x100) || (status[2] == 1)) {\n      flag2 = (status[4] + -1) * 0x100000;\n    }\n    else {\n      flag2 = 0;\n    }\n    *(uint *)(*status + 0x2c) = flag2 | *(uint *)(*status + 0x2c) & 0xff0fffff;\n    if (flag1 != (DAT_08003ce4 & *(uint *)(*status + 8))) {\n      status[10] = status[10] & 0xffffffed | 0x10;\n      status[11] = status[11] | 1;\n      return 1;\n    }\n    status[11] = 0;\n    status[10] = status[10] & 0xfffffffc | 1;\n    return 0;\n  }\n  status[10] = status[10] | 0x10;\n  return 1;\n}",
            "called": [
                "FUN_08003b8c",
                "FUN_08006ca8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003bd8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "check_and_update_status_08003bd8"
        },
        "FUN_08009d50": {
            "renaming": {
                "bVar3": "is_param_same_as_global",
                "iVar2": "global_var",
                "uVar1": "array",
                "FUN_08009d50": "initialize_params_08009d50",
                "param_1": "param"
            },
            "code": "void initialize_params_08009d50(int param)\n{\n  bool is_param_initialized = (*(int *)(param + 0x18) != 0);\n  if (!is_param_initialized) {\n    *(undefined4 *)(param + 0x48) = 0;\n    *(undefined4 *)(param + 0x4c) = 0;\n    *(undefined4 *)(param + 0x50) = 0;\n    \n    bool is_param_same_as_global = (param == *(int **)0x08009da8);\n    if (is_param_same_as_global) {\n      *(int *)(param + 0x18) = 1;\n    }\n    \n    undefined4 array1 = find_and_initialize_array();\n    undefined4 array2 = find_and_initialize_array(param);\n    undefined4 array3 = find_and_initialize_array(param);\n    \n    *(undefined4 *)(param + 4) = array1;\n    *(undefined4 *)(param + 8) = array2;\n    *(undefined4 *)(param + 0xc) = array3;\n    \n    initialize_param_values(array1, 4, 0);\n    initialize_param_values(array2, 9, 1);\n    initialize_param_values(array3, 0x12, 2);\n    \n    *(int *)(param + 0x18) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d50",
            "calling": [
                "FUN_0800932c",
                "FUN_080098d8",
                "FUN_0800937c",
                "FUN_08009c7c",
                "FUN_08009db0",
                "FUN_08009a80"
            ],
            "imported": true,
            "current_name": "initialize_params_08009d50"
        },
        "FUN_08003366": {
            "renaming": {
                "FUN_08003366": "update_object_08003366",
                "param_1": "object_address",
                "param_2": "object_type",
                "param_3": "new_property1",
                "param_4": "new_property2"
            },
            "code": "void update_object_08003366(int object_address, int object_type, undefined4 new_property1, undefined4 new_property2)\n{\n  if (object_type == 0x71) {\n    *(undefined4 *)(object_address + 0x68) = new_property1;\n    *(undefined4 *)(object_address + 0x40) = new_property2;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003366",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": true,
            "current_name": "update_object_08003366"
        },
        "FUN_080091b0": {
            "renaming": {
                "puVar2": "buffer_ptr",
                "FUN_080091b0": "copy_data_to_buffer_080091b0",
                "param_1": "buffer_start_index",
                "param_2": "data",
                "param_3": "data_length",
                "puVar1": "data_ptr"
            },
            "code": "void copy_data_to_buffer_080091b0(int buffer_start_index, undefined *data, int data_length)\n{\n  undefined *buffer_ptr;\n  undefined *data_ptr;\n  buffer_ptr = (undefined *)(buffer_start_index - 1);\n  data_ptr = data + data_length;\n  for (; data != data_ptr; data++) {\n    buffer_ptr++;\n    *buffer_ptr = *data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091b0",
            "calling": [
                "FUN_08009908",
                "FUN_080027f0"
            ],
            "imported": true,
            "current_name": "copy_data_to_buffer_080091b0"
        },
        "FUN_08009108": {
            "renaming": {
                "param_1": "data_check",
                "FUN_08009108": "calculate_result_if_data_not_null_08009108",
                "param_2": "input_value",
                "CONCAT44": "concatenate_44_bits",
                "DAT_08009120": "data_check_ptr"
            },
            "code": "longlong calculate_result_if_data_not_null_08009108(undefined4 data_check,uint input_value)\n{\n  if (data_check != 0) {\n    return CONCAT44(input_value,2);\n  }\n  return (ulonglong)input_value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009108",
            "calling": [
                "FUN_080090c2"
            ],
            "imported": true,
            "current_name": "calculate_result_if_data_not_null_08009108"
        },
        "FUN_0800a18c": {
            "renaming": {
                "PTR_DAT_0800a250": "flag_11",
                "PTR_DAT_0800a230": "flag_3",
                "PTR_DAT_0800a240": "flag_7",
                "PTR_DAT_0800a24c": "flag_10",
                "PTR_DAT_0800a22c": "flag_2",
                "PTR_DAT_0800a23c": "flag_6",
                "FUN_0800a18c": "process_response_and_set_flags_0800a18c",
                "PTR_DAT_0800a228": "flag_1",
                "PTR_DAT_0800a238": "flag_5",
                "PTR_DAT_0800a248": "flag_9",
                "PTR_DAT_0800a254": "flag_12",
                "PTR_DAT_0800a234": "flag_4",
                "PTR_DAT_0800a244": "flag_8"
            },
            "code": "void process_response_and_set_flags_0800a18c(void)\n{\n  code *jump_table = process_response_and_set_flags_0800a18c;\n  process_and_wait_for_response();\n  set_flag_if_negative(PTR_DAT_0800a228);\n  set_flag_if_negative(PTR_DAT_0800a22c);\n  set_flag_if_negative(PTR_DAT_0800a230);\n  set_flag_if_negative(PTR_DAT_0800a234);\n  set_flag_if_negative(PTR_DAT_0800a238);\n  set_flag_if_negative(PTR_DAT_0800a23c);\n  set_flag_if_negative(PTR_DAT_0800a240);\n  set_flag_if_negative(PTR_DAT_0800a244);\n  set_flag_if_negative(PTR_DAT_0800a248);\n  set_flag_if_negative(PTR_DAT_0800a24c);\n  set_flag_if_negative(PTR_DAT_0800a250);\n  set_flag_if_negative(PTR_DAT_0800a254);\n  (*jump_table)();\n  return;\n}\n",
            "called": [
                "FUN_08009b5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a18c",
            "calling": [
                "FUN_08009084"
            ],
            "imported": true,
            "current_name": "process_response_and_set_flags_0800a18c"
        },
        "FUN_08009908": {
            "renaming": {
                "uVar1": "mem_alloc_size",
                "param_1": "data_block",
                "param_2": "block_size",
                "FUN_08009908": "allocate_and_copy_08009908",
                "uVar3": "new_block_index",
                "uVar2": "new_block_size"
            },
            "code": "uint allocate_and_copy_08009908(uint data_block, uint block_size)\n{\n  undefined4 mem_alloc_size;\n  uint new_block_size;\n  uint new_block_index;\n  mem_alloc_size = *(undefined4 *)PTR_PTR_DAT_08009914;\n  if (data_block != 0) {\n    if (block_size == 0) {\n      add_to_linked_list_080091d8();\n      new_block_size = block_size;\n    }\n    else {\n      new_block_index = calculate_new_index_0800a154();\n      new_block_size = block_size;\n      if ((new_block_index < block_size) && (new_block_size = allocate_memory_block_08009270(mem_alloc_size,block_size), new_block_size != 0)) {\n        copy_data_to_buffer_080091b0(new_block_size,data_block,block_size);\n        add_to_linked_list_080091d8(mem_alloc_size,data_block);\n      }\n    }\n    return new_block_size;\n  }\n  new_block_size = allocate_memory_block_08009270(mem_alloc_size,block_size,block_size,PTR_PTR_DAT_08009914);\n  return new_block_size;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_0800a154",
                "FUN_08009270",
                "FUN_080091b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009908",
            "calling": [
                "FUN_0800288c",
                "FUN_08002acc",
                "FUN_080027f0"
            ],
            "imported": true,
            "current_name": "allocate_and_copy_08009908"
        },
        "FUN_08008a24": {
            "renaming": {
                "iVar1": "bit",
                "puVar3": "address",
                "param_1": "index",
                "PTR_DAT_08008a64": "address",
                "param_2": "condition",
                "param_3": "value",
                "FUN_08008a24": "determine_address_value_08008a24",
                "param_4": "address",
                "PTR_DAT_08008a68": "data_index",
                "uVar2": "data_value",
                "uVar4": "mask"
            },
            "code": "void determine_address_value_08008a24(uint index, uint condition, uint value, undefined *PTR_DAT_08008a64)\n{\n  int bit;\n  uint mask;\n  uint PTR_DAT_08008a68;\n  uint data_value;\n\n  if (index < 0x3c) {\n    mask = (uint)(char)PTR_DAT_08008a64[index];\n    PTR_DAT_08008a68 = (uint)PTR_DAT_08008a68;\n    PTR_DAT_08008a64 = PTR_DAT_08008a64;\n  }\n  else {\n    mask = 0xffffffff;\n    PTR_DAT_08008a68 = condition;\n  }\n  if ((mask != 0xffffffff) && (bit = get_bit_at_index(PTR_DAT_08008a68, mask, PTR_DAT_08008a64), bit != 0)) {\n    data_value = get_data_at_index((mask << 0x18) >> 0x1c);\n    determine_address_value_08008a24_based_on_condition(data_value, 1 << (mask & 0xf) & 0xffff, value);\n  }\n  return;\n}",
            "called": [
                "FUN_08006b28",
                "FUN_080072d8",
                "FUN_08006b7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a24",
            "calling": [
                "FUN_08002fca",
                "FUN_080005f8",
                "FUN_080088e0"
            ],
            "imported": true,
            "current_name": "determine_address_value_08008a24"
        },
        "FUN_08008abc": {
            "renaming": {
                "get_pointer_value_0800723c": "get_pointer_value",
                "FUN_08008abc": "get_pointer_value_and_return_08008abc"
            },
            "code": "void get_pointer_value_and_return_08008abc(){\n  get_pointer_value();\n  return;\n}",
            "called": [
                "FUN_0800723c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008abc",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": true,
            "current_name": "get_pointer_value_and_return_08008abc"
        },
        "FUN_08002b68": {
            "renaming": {
                "initialize_data_08002a30": "initialize_data",
                "iVar1": "status",
                "check_input_08007f0e": "check_input",
                "PTR_DAT_08002bf4": "global_pointer",
                "param_1": "data_buffer",
                "check_data_08002a58": "check_data",
                "param_2": "data_length",
                "allocate_and_copy_08002acc": "allocate_and_copy_data",
                "param_3": "output_buffer",
                "param_4": "output_length",
                "PTR_DAT_08002bfc": "global_pointer3",
                "param_5": "flag",
                "FUN_08002b68": "process_data_08002b68",
                "uVar3": "shift_amount",
                "uVar2": "input_byte",
                "PTR_DAT_08002bf8": "global_pointer2"
            },
            "code": "int process_data_08002b68(uint8_t *data_buffer, uint data_length, uint8_t *output_buffer, uint output_length, uint8_t flag) {\n  int status = 0;\n  uint8_t input_byte;\n  uint shift_amount;\n  if (data_buffer[17] == 0) {\n    return 0;\n  }\n  allocate_and_copy_data(data_buffer[2]);\n  if (*PTR_DAT_08002bf4 != 0) {\n    if (flag != 0) {\n      initialize_data(data_buffer, data_length);\n      if (flag > 3) {\n        flag = 3;\n      }\n      while (flag > 0) {\n        shift_amount = (flag - 1) * 8;\n        input_byte = (uint8_t)(output_length >> shift_amount) & 0xFF;\n        (*(function_pointer)*data_buffer)(data_buffer, input_byte);\n        flag--;\n      }\n      check_data(data_buffer, 0);\n    }\n    status = check_input(data_buffer + 20, (data_length & 0x7F) << 1, *PTR_DAT_08002bf4, data_buffer[2], output_length);\n    if (status != 0) {\n      output_length = 0;\n    }\n    *PTR_DAT_08002bf8 = 0;\n    *PTR_DAT_08002bfc = (char)output_length;\n    return output_length;\n  }\n  data_buffer[4] = 1;\n  return 0;\n}\n",
            "called": [
                "FUN_08007f0e",
                "FUN_08002a58",
                "FUN_08002a30",
                "FUN_08002acc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b68",
            "calling": [
                "FUN_08002c00"
            ],
            "imported": true,
            "current_name": "process_data_08002b68"
        },
        "FUN_080005e0": {
            "renaming": {
                "PTR_DAT_080005f4": "ptrData2",
                "PTR_DAT_080005f0": "ptrData1",
                "FUN_080005e0": "initializeData_080005e0"
            },
            "code": "void initializeData_080005e0(void)\n{\n  int* PTR_DAT_080005f0 = PTR_DAT_080005f0;\n  int* PTR_DAT_080005f4 = PTR_DAT_080005f4;\n  *PTR_DAT_080005f0 = 0;\n  *PTR_DAT_080005f4 = 0xff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_080005f8",
                "FUN_08000aec"
            ],
            "imported": true,
            "current_name": "initializeData_080005e0"
        },
        "FUN_08008020": {
            "renaming": {
                "iVar1": "subtracted_value",
                "set_flags_080049e0": "set_flags",
                "param_1": "value",
                "subtract_four_from_value_08007f78": "get_subtracted_value",
                "FUN_08008020": "check_and_set_flags_for_value_08008020"
            },
            "code": "void check_and_set_flags_for_value_08008020(int value)\\n{\\n  int subtracted_value = get_subtracted_value();\\n  if (*(char *)(subtracted_value + 0x5d) == \"\\0\") {\\n    set_flags(value);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008020",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": true,
            "current_name": "check_and_set_flags_for_value_08008020"
        },
        "FUN_0800674c": {
            "renaming": {
                "FUN_0800674c": "do_nothing_0800674c"
            },
            "code": "\nvoid do_nothing_0800674c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674c",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": true,
            "current_name": "do_nothing_0800674c"
        },
        "FUN_08005dac": {
            "renaming": {
                "iVar2": "var2",
                "iVar3": "var3",
                "uVar1": "var1",
                "param_1": "obj_address",
                "DAT_08005df0": "DAT_08005df0",
                "param_2": "values",
                "FUN_08005dac": "update_values_08005dac"
            },
            "code": "void update_values_08005dac(int obj_address, int *values)\n{\n  uint mask = 0xffffefff;\n  uint var1 = *(uint *)(obj_address + 4);\n  int var2 = *values;\n  int var3 = values[2];\n  if (obj_address == DAT_08005df0) {\n    var1 = var1 & 0xffffbfff | values[5] << 6;\n  }\n  *(uint *)(obj_address + 4) = var1;\n  *(uint *)(obj_address + 0x1c) = *(uint *)(obj_address + 0x1c) & 0xffff8cff | var2 << 8;\n  *(int *)(obj_address + 0x40) = values[1];\n  *(uint *)(obj_address + 0x20) = *(uint *)(obj_address + 0x20) & 0xffffdfff | var3 << 0xc;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dac",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": true,
            "current_name": "update_values_08005dac"
        },
        "FUN_0800674e": {
            "renaming": {
                "param_1": "device_ptr",
                "do_nothing_0800674c": "do_nothing",
                "PTR_": "device_ptr",
                "DAT_": "data_",
                "FUN_0800674e": "initialize_device_0800674e"
            },
            "code": "int initialize_device_0800674e(int *PTR_)\n{\n  if (PTR_ != NULL) {\n    if (*(char *)((int)PTR_ + 0x39) == '\\0') {\n      *(undefined *)(PTR_ + 0xe) = 0;\n      do_nothing();\n    }\n    *(undefined *)((int)PTR_ + 0x39) = 0x24;\n    *(uint *)(*PTR_ + 0xc) &= 0xffffdfff;\n    calculate_values(PTR_);\n    *(uint *)(*PTR_ + 0x10) &= 0xffffb7ff;\n    *(uint *)(*PTR_ + 0x14) &= 0xffffffd5;\n    *(uint *)(*PTR_ + 0xc) |= 0x2000;\n    PTR_[0xf] = 0;\n    *(undefined *)((int)PTR_ + 0x39) = 0x20;\n    *(undefined *)((int)PTR_ + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674e",
            "calling": [
                "FUN_08008078"
            ],
            "imported": true,
            "current_name": "initialize_device_0800674e"
        },
        "FUN_0800771c": {
            "renaming": {
                "iVar1": "callback_address",
                "param_1": "flag",
                "subtract_four_from_value_08007718": "subtract_four_from_value",
                "FUN_0800771c": "execute_callback_if_flag_set_0800771c",
                "PTR_0800771c": "callback_function"
            },
            "code": "void execute_callback_if_flag_set_0800771c(int flag) {\n  int callback_address = subtract_four_from_value();\n  code* PTR_0800771c = *(code**)(callback_address + 0x4c);\n  if (PTR_0800771c != nullptr && *(char*)(flag + 0x1c) == '\\x01') {\n    (*PTR_0800771c)(callback_address, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800771c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": true,
            "current_name": "execute_callback_if_flag_set_0800771c"
        },
        "FUN_080066e8": {
            "renaming": {
                "iVar1": "current_value",
                "param_1": "parameter_list",
                "param_2": "mask",
                "param_3": "expected_result",
                "param_4": "value",
                "param_5": "max_value",
                "FUN_080066e8": "check_parameters_080066e8"
            },
            "code": "int check_parameters_080066e8(uint **parameter_list, uint mask, uint expected_result, int value, uint max_value){\n  int current_value;\n  do {\n    if (((mask & ~**parameter_list) == 0) != expected_result) {\n      return 0;\n    }\n  } while ((max_value == 0xffffffff) || ((max_value != 0 && (current_value = get_pointer_value_08003760(), (uint)(current_value - value) <= max_value))));\n  (*parameter_list)[3] = (*parameter_list)[3] & 0xfffffe5f;\n  (*parameter_list)[5] = (*parameter_list)[5] & 0xfffffffe;\n  *(undefined *)((int)parameter_list + 0x39) = 0x20;\n  *(undefined *)((int)parameter_list + 0x3a) = 0x20;\n  *(undefined *)(parameter_list + 0xe) = 0;\n  return 3;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066e8",
            "calling": [
                "FUN_080067ac"
            ],
            "imported": true,
            "current_name": "check_parameters_080066e8"
        },
        "FUN_08009358": {
            "renaming": {
                "FUN_08009358": "process_and_count_input_08009358",
                "iVar1": "processed_input",
                "iVar3": "count",
                "puVar2": "end_of_array",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_array",
                "param_4": "input_length"
            },
            "code": "int process_and_count_input_08009358(int input_param_1, int input_param_2, char *input_array, int input_length)\n{\n  int count = 0;\n  char *end_of_array = input_array + input_length;\n  while (input_array != end_of_array) {\n    if (count == 0) {\n      return 0;\n    }\n    int processed_input = process_input(input_param_1, *input_array, input_param_2, input_length, count);\n    count = processed_input + 1;\n    input_array++;\n  }\n  return processed_input;\n}",
            "called": [
                "FUN_0800932c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009358",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": true,
            "current_name": "process_and_count_input_08009358"
        },
        "FUN_0800270c": {
            "renaming": {
                "FUN_0800270c": "calculate_difference_between_first_and_second_byte_of_pointers_0800270c",
                "PTR_DAT_0800271c": "pointer_to_second_data",
                "PTR_DAT_08002718": "pointer_to_first_data"
            },
            "code": "int calculate_difference_between_first_and_second_byte_of_pointers_0800270c(void)\n{\n  uint first_byte = (uint)(byte)*PTR_DAT_08002718;\n  uint second_byte = (uint)(byte)*PTR_DAT_0800271c;\n  return first_byte - second_byte;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800270c",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": true,
            "current_name": "calculate_difference_between_first_and_second_byte_of_pointers_0800270c"
        },
        "FUN_08003370": {
            "renaming": {
                "FUN_08003370": "set_values_08003370",
                "param_1": "object_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "code": "void set_values_08003370(int object_address, int value1, int value2, int value3)\n{\n  *(int *)(object_address + 0x6c) = value2;\n  *(int *)(object_address + 0x44) = value3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003370",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": true,
            "current_name": "set_values_08003370"
        },
        "FUN_08007fa0": {
            "renaming": {
                "FUN_08007fa0": "validate_input_08007fa0",
                "iVar1": "subtracted_value",
                "param_1": "input_ptr",
                "param_2": "data_ptr",
                "param_3": "flag",
                "param_4": "param_4"
            },
            "code": "void validate_input_08007fa0(int input_ptr, int data_ptr, int flag, int param_4) {\n  int subtracted_value = subtract_four_from_value();\n  if (flag == *(int *)(input_ptr + 0xc)) {\n    if (data_ptr == 0) {\n      *(undefined *)(subtracted_value + 0x88) = 0;\n      *(undefined *)(subtracted_value + 0x5c) = 0;\n      if (*(code **)(subtracted_value + 100) != (code *)0x0) {\n        (**(code **)(subtracted_value + 100))();\n      }\n      validate_input_08007fa0_080048c8(input_ptr,subtracted_value + 0x68,*(undefined *)(subtracted_value + 0x88),8);\n      return;\n    }\n    *(undefined *)(subtracted_value + 0x5c) = 1;\n    set_data_08004954(input_ptr,subtracted_value + 0x68,0x20,8,param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_080048c8",
                "FUN_08004954",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007fa0",
            "calling": [
                "FUN_08004ac2"
            ],
            "imported": true,
            "current_name": "validate_input_08007fa0"
        },
        "FUN_08003376": {
            "renaming": {
                "bVar1": "is_larger_than_current",
                "FUN_08003376": "update_data_at_index_if_larger_than_current_08003376",
                "PTR_8": "current_size",
                "param_1": "data",
                "DAT_00000000": "data_array",
                "param_2": "value",
                "param_3": "index",
                "PTR_100": "function_pointer"
            },
            "code": "void update_data_at_index_if_larger_than_current_08003376(void *data, uint8_t value, uint index)\n{\n  bool is_larger_than_current = false;\n\n  uint PTR_8 = *(uint *)(data + 8);\n  if (index < PTR_8) {\n    is_larger_than_current = false;\n  }\n  else {\n    is_larger_than_current = true;\n    code* PTR_100 = *(code **)(data + 100);\n    if (PTR_100 != (code *)0x0) {\n      uint32_t argument = *(uint32_t *)(data + 0x3c);\n      *data = 1;\n      (*PTR_100)(argument);\n      PTR_8 = *(uint *)(data + 8);\n      if (index < PTR_8) {\n        is_larger_than_current = false;\n      }\n      else {\n        is_larger_than_current = true;\n      }\n    }\n  }\n  if (!is_larger_than_current) {\n    uint8_t *DAT_00000000 = *(uint8_t **)(data + 4);\n    *(DAT_00000000 + index) = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003376",
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "imported": true,
            "current_name": "update_data_at_index_if_larger_than_current_08003376"
        },
        "FUN_08008bf4": {
            "renaming": {
                "calculate_shift_amount_08008afa": "calculate_shift_amount",
                "FUN_08008bf4": "calculate_shift_amount_if_data_not_zero_08008bf4",
                "PTR_DAT_08008c1c": "data_pointer",
                "DAT_08008c18": "data_not_zero"
            },
            "code": "void calculate_shift_amount_if_data_not_zero_08008bf4(void)\n{\n  if (DAT_08008c18 != 0) {\n    calculate_shift_amount(PTR_DAT_08008c1c);\n  }\n  return;\n}",
            "called": [
                "FUN_08008afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf4",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": true,
            "current_name": "calculate_shift_amount_if_data_not_zero_08008bf4"
        },
        "FUN_08005430": {
            "renaming": {
                "FUN_08005430": "get_offset_from_param_08005430",
                "undefined4": "int",
                "param_1": "param_offset",
                "param_1 + 0x40": "param_offset + 0x40",
                "*(undefined4 *)(param_1 + 0x40)": "*(int *)(param_offset + 0x40)",
                "*(undefined4 *)": "*(int *)",
                "PTR_": "no change",
                "DAT_": "no change"
            },
            "code": "int get_offset_from_param_08005430(int param_offset) {\n    int offset = *(int *)(param_offset + 0x40);\n    return offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005430",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": true,
            "current_name": "get_offset_from_param_08005430"
        },
        "FUN_08002720": {
            "renaming": {
                "bVar2": "byte_offset",
                "DAT_08002748": "memory_ptr",
                "bVar1": "current_byte_index",
                "*(byte *)(*(int *)PTR_DAT_08002748 + (uint)bVar1)": "*(uint *)(*(int *)memory_ptr + current_byte_index)",
                "FUN_08002720": "read_byte_from_memory_08002720",
                "PTR_DAT_08002744": "memory_size_ptr",
                "PTR_DAT_08002740": "memory_index_ptr"
            },
            "code": "uint read_byte_from_memory_08002720(void)\n{\n  uint current_byte_index = *PTR_DAT_08002740;\n  if (current_byte_index < *PTR_DAT_08002744) {\n    uint byte_offset = *(byte *)(*(int *)PTR_DAT_08002748 + (uint)bVar1);\n    *PTR_DAT_08002740 = current_byte_index + 1;\n    return byte_offset;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002720",
            "calling": [
                "FUN_08001c08"
            ],
            "imported": true,
            "current_name": "read_byte_from_memory_08002720"
        },
        "FUN_080031ce": {
            "renaming": {
                "FUN_080031ce": "send_encoded_messages_to_server_080031ce",
                "param_1": "message_buffer",
                "param_2": "message_type",
                "param_3": "message_size",
                "param_4": "num_messages",
                "param_5": "message_offset",
                "puVar1": "message_handler",
                "uVar2": "message_index"
            },
            "code": "void send_encoded_messages_to_server_080031ce(undefined4 *message_buffer, undefined4 message_type, undefined4 message_size, uint num_messages, int message_offset) {\n  undefined4 *message_handler;\n  uint message_index;\n  message_handler = (undefined4 *)*message_buffer;\n  if (message_handler != (undefined4 *)0x0) {\n    (**(code **)*message_handler)(message_handler,0xf0,message_size,*(code **)*message_handler,num_messages);\n    (***(code ***)(undefined4 *)*message_buffer)((undefined4 *)*message_buffer,0x79);\n    (***(code ***)(undefined4 *)*message_buffer)((undefined4 *)*message_buffer,message_type);\n    (***(code ***)(undefined4 *)*message_buffer)((undefined4 *)*message_buffer,message_size);\n    for (message_index = 0; message_index < num_messages; message_index = message_index + 1) {\n      encode_message_0800307a(message_buffer,1,message_offset + message_index,0);\n    }\n    (***(code ***)(undefined4 *)*message_buffer)((undefined4 *)*message_buffer,0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031ce",
            "calling": [
                "FUN_08002df6"
            ],
            "imported": true,
            "current_name": "send_encoded_messages_to_server_080031ce"
        },
        "FUN_08009918": {
            "renaming": {
                "iVar2": "offset",
                "FUN_08009918": "calculate_offset_and_set_param_08009918",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "data_ptr"
            },
            "code": "void calculate_offset_and_set_param_08009918(int *result, undefined4 input) {\n  undefined *data_ptr = PTR_DAT_08009934;\n  *(undefined4 *)PTR_DAT_08009934 = 0;\n  int offset = calculateOffset_08008804(input);\n  if (offset == -1 && *(int *)data_ptr != 0) {\n    *result = *(int *)data_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008804"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009918",
            "calling": [
                "FUN_08009270"
            ],
            "imported": true,
            "current_name": "calculate_offset_and_set_param_08009918"
        },
        "FUN_08005434": {
            "renaming": {
                "bVar1": "is_not_zero",
                "DAT_0800545c": "constant_1",
                "FUN_08005434": "count_down_08005434",
                "param_1": "input_num",
                "local_4": "multiplied_num",
                "PTR_DAT_08005458": "constant_2"
            },
            "code": "void count_down_08005434(int input_num)\n{\n  bool is_not_zero;\n  int multiplied_num;\n  multiplied_num = input_num * (uint)((ulonglong)DAT_0800545c * (ulonglong)*(uint *)PTR_DAT_08005458 >> 0x29);\n  do {\n    is_not_zero = multiplied_num != 0;\n    multiplied_num = multiplied_num + -1;\n  } while (is_not_zero);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005434",
            "calling": [
                "FUN_08005460"
            ],
            "imported": true,
            "current_name": "count_down_08005434"
        },
        "FUN_08005e2e": {
            "renaming": {
                "param_1": "registers",
                "FUN_08005e2e": "update_registers_and_return_08005e2e",
                "puVar1": "regs"
            },
            "code": "void update_registers_and_return_08005e2e(uint **registers)\n{\n  uint *regs = *registers;\n  *(undefined *)((int)registers + 0x3d) = 2;\n  if ((regs[8] & 0x1111) == 0) {\n    if ((regs[8] & 0x444) == 0) {\n      *regs = *regs & 0xfffffffe;\n    }\n  }\n  update_registers_and_return_08005e2e_08007110(registers);\n  *(undefined *)((int)registers + 0x3d) = 0;\n  *(undefined *)(registers + 0xf) = 0;\n}",
            "called": [
                "FUN_08007110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e2e",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": true,
            "current_name": "update_registers_and_return_08005e2e"
        },
        "FUN_08007736": {
            "renaming": {
                "iVar1": "function_pointer_address",
                "FUN_08007736": "execute_function_if_not_null_08007736",
                "subtract_four_from_value_08007718": "subtract_four_from_value"
            },
            "code": "void execute_function_if_not_null_08007736(void)\n{\n  int function_pointer_address = subtract_four_from_value();\n  if (*(code **)(function_pointer_address + 0x48) != (code *)0x0) {\n    (**(code **)(function_pointer_address + 0x48))();\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007736",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": true,
            "current_name": "execute_function_if_not_null_08007736"
        },
        "FUN_08002968": {
            "renaming": {
                "iVar1": "index1",
                "iVar2": "index2",
                "param_1": "param",
                "FUN_08002968": "initialize_08002968",
                "param_2": "value"
            },
            "code": "void initialize_08002968(int param, uint value) {\\n  int index1;\\n  int index2;\\n  *PTR_DAT_080029ec = 0;\\n  *PTR_DAT_080029f0 = 0;\\n  if (*(int *)PTR_DAT_080029f4 != 0) {\\n    fill_array_with_value_080091c6(*(int *)PTR_DAT_080029f4, 0, *PTR_DAT_080029f8);\\n  }\\n  *PTR_DAT_080029fc = 0;\\n  *PTR_DAT_08002a00 = 0;\\n  if (*(int *)PTR_DAT_08002a04 != 0) {\\n    fill_array_with_value_080091c6(*(int *)PTR_DAT_08002a04, 0, *PTR_DAT_08002a08);\\n  }\\n  *PTR_DAT_08002a0c = 0;\\n  index1 = (value & 0x7f) << 1;\\n  *(char *)(param + 0x10) = (char)index1;\\n  if (value == 0x33) {\\n    *(undefined *)(param + 0x11) = 1;\\n  }\\n  else {\\n    *(undefined *)(param + 0x11) = 0;\\n  }\\n  index2 = param + 0x14;\\n  FUNC_080077b0(index2, DAT_08002a10, 0x4000, index1, *(undefined *)(param + 0x11));\\n  if (*(char *)(param + 0x11) == \"\\0\") {\\n    set_parameter_1(index2, PTR_LAB_08002774_1_08002a14);\\n    set_parameter_2_if_parameter_1_not_null_08007f7c(index2, PTR_LAB_08002b00_1_08002a18);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_080077b0",
                "FUN_08007f7c",
                "FUN_08007f8e",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002968",
            "calling": [
                "FUN_08002a1c"
            ],
            "imported": true,
            "current_name": "initialize_08002968"
        },
        "FUN_08004ccc": {
            "renaming": {
                "PTR_DAT_00000009": "input_array[9]",
                "PTR_DAT_0000000c": "input_array[12]",
                "param_1": "input_array",
                "PTR_DAT_0000002a": "*(short *)((int)input_array + 42)",
                "PTR_DAT_0000000a": "input_array[10]",
                "PTR_DAT_0000003d": "*(char *)((int)input_array + 61)",
                "PTR_DAT_0000000b": "input_array[11]",
                "PTR_DAT_0000003e": "*(char *)((int)input_array + 62)",
                "FUN_08004ccc": "process_input_08004ccc",
                "puVar1": "flags_ptr",
                "PTR_DAT_00000004": "(*input_array)[4]",
                "PTR_DAT_00000001": "(*input_array)[1]"
            },
            "code": "uint32_t process_input_08004ccc(uint32_t **input_array)\n{\n  uint32_t *flags_ptr;\n  uint32_t *counter_ptr;\n  uint32_t *status_ptr;\n  uint32_t *data_ptr;\n  uint32_t *length_ptr;\n  uint32_t *unknown_ptr;\n  flags_ptr = PTR_DAT_0000000b;\n  if (PTR_DAT_0000003d == '!') {\n    counter_ptr = PTR_DAT_0000000a;\n    if (PTR_DAT_0000002a == 0) {\n      if (((flags_ptr == (uint32_t *)0x4) || (flags_ptr == (uint32_t *)0x8)) || (flags_ptr == (uint32_t *)0xffff0000)) {\n        PTR_DAT_00000001 &= 0xfffff8ff;\n        **input_array |= 0x200;\n        PTR_DAT_0000000c = (uint32_t *)0x0;\n        PTR_DAT_0000003d = ' ';\n        if (PTR_DAT_0000003e == '@') {\n          PTR_DAT_0000003e = 0;\n          do_nothing_08004b80();\n        }\n        else {\n          PTR_DAT_0000003e = 0;\n          do_nothing_08004a1e();\n        }\n      }\n      else {\n        PTR_DAT_00000001 &= 0xfffff8ff;\n        PTR_DAT_0000000c = (uint32_t *)0x11;\n        PTR_DAT_0000003e = 0;\n        PTR_DAT_0000003d = ' ';\n        do_nothing_08004a1e();\n      }\n    }\n    else {\n      data_ptr = PTR_DAT_00000009;\n      PTR_DAT_00000009 = (uint32_t *)((int)data_ptr + 1);\n      PTR_DAT_00000004 = (uint32_t)*(char *)data_ptr;\n      PTR_DAT_0000002a -= 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "process_input_08004ccc"
        },
        "FUN_080042d4": {
            "renaming": {
                "param_1": "param1",
                "param_2": "param2",
                "PTR_": "ptr_",
                "FUN_080042d4": "is_param2_bit_set_in_param1_080042d4",
                "DAT_": "dat_"
            },
            "code": "int is_param2_bit_set_in_param1_080042d4(uint param_1, uint param_2) {\n    uint PTR_param1_plus_8 = *(uint *)(param_1 + 8);\n    if ((param_2 & PTR_param1_plus_8) == 0) {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042d4",
            "calling": [
                "FUN_080072f0"
            ],
            "imported": true,
            "current_name": "is_param2_bit_set_in_param1_080042d4"
        },
        "FUN_0800542a": {
            "renaming": {
                "param_1": "base_address",
                "*(undefined *)(param_1 + 0x3d)": "*(undefined *)(base_address + offset)",
                "FUN_0800542a": "get_value_at_offset_0800542a"
            },
            "code": "undefined get_value_at_offset_0800542a(int base_address, int offset) {\n  return *(undefined *)(base_address + offset);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800542a",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": true,
            "current_name": "get_value_at_offset_0800542a"
        },
        "FUN_0800457c": {
            "renaming": {
                "param_1": "buffer",
                "pbVar1": "buffer_ptr",
                "FUN_0800457c": "read_byte_from_buffer_0800457c"
            },
            "code": "int read_byte_from_buffer_0800457c(int *buffer) {\n  if (*(short *)((int)buffer + 0x2a) != 0) {\n    byte *buffer_ptr = (byte *)buffer[9];\n    buffer[9] = (int)(buffer_ptr + 1);\n    uint byte_read = (uint)*buffer_ptr;\n    *(uint *)(*buffer + 0x10) = byte_read;\n    *(short *)((int)buffer + 0x2a) = *(short *)((int)buffer + 0x2a) + -1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800457c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "read_byte_from_buffer_0800457c"
        },
        "FUN_080091c6": {
            "renaming": {
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "FUN_080091c6": "fill_array_with_value_080091c6",
                "puVar1": "end_of_array"
            },
            "code": "void fill_array_with_value_080091c6(char *array, char value, int length) {\n  char *end_of_array = array + length;\n  for (; array != end_of_array; array++) {\n    *array = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091c6",
            "calling": [
                "FUN_08009d24",
                "FUN_08006d80",
                "FUN_08007118",
                "FUN_08002a58",
                "FUN_08009cdc",
                "FUN_08002968",
                "FUN_08009db0"
            ],
            "imported": true,
            "current_name": "fill_array_with_value_080091c6"
        },
        "FUN_0800a07a": {
            "renaming": {
                "iVar1": "processResult",
                "bVar3": "isProcessResultMinusOne",
                "param_1": "value",
                "param_2": "flagsAddress",
                "FUN_0800a07a": "processReturnValueAndUpdateFlags_0800a07a",
                "uVar2": "updatedFlags"
            },
            "code": "void processReturnValueAndUpdateFlags_0800a07a(undefined4 value, int flagsAddress)\n{\n  int processResult = processReturnValue(value, (int)*(short *)(flagsAddress + 0xe));\n  bool isProcessResultMinusOne = processResult == -1;\n  ushort updatedFlags;\n  if (isProcessResultMinusOne) {\n    updatedFlags = *(ushort *)(flagsAddress + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(flagsAddress + 0x54) = processResult;\n    updatedFlags = *(ushort *)(flagsAddress + 0xc) | 0x1000;\n  }\n  if (isProcessResultMinusOne) {\n    *(ushort *)(flagsAddress + 0xc) = updatedFlags;\n  }\n  else {\n    *(ushort *)(flagsAddress + 0xc) = updatedFlags;\n  }\n  return;\n}",
            "called": [
                "FUN_0800a130"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a07a",
            "calling": [],
            "imported": true,
            "current_name": "processReturnValueAndUpdateFlags_0800a07a"
        },
        "FUN_08003a20": {
            "renaming": {
                "iVar1": "pointer_value3",
                "iVar3": "pointer_value",
                "param_1": "pointer",
                "param_2": "size",
                "FUN_08003a20": "set_flag_and_check_if_set_08003a20",
                "uVar2": "return_value",
                "local_14": "i"
            },
            "code": "int set_flag_and_check_if_set_08003a20(int *pointer, uint size) {\n  int pointer_value = *pointer;\n  if ((*(uint *)(pointer_value + 8) & 1) == 0) {\n    *(uint *)(pointer_value + 8) |= 1;\n    for (uint i = (uint)((ulonglong)global_constant_1 * (ulonglong)*(uint *)global_pointer_1 >> 0x32); i != 0; i--) {\n    }\n    int pointer_value2 = get_pointer_value(pointer, size);\n    do {\n      if ((*(uint *)(*pointer + 8) & 1) != 0) {\n        return 0;\n      }\n      int pointer_value3 = get_pointer_value();\n    } while ((uint)(pointer_value3 - pointer_value2) < 3);\n    pointer[10] |= 0x10;\n    pointer[0xb] |= 1;\n    *(undefined *)(pointer + 9) = 0;\n    return 1;\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a20",
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "imported": true,
            "current_name": "set_flag_and_check_if_set_08003a20"
        },
        "FUN_080064b0": {
            "renaming": {
                "*(uint *)(*param_1 + 0x14)": "*flag_ptr2",
                "*(uint *)(*param_1 + 0xc)": "*flag_ptr",
                "*(undefined *)((int)param_1 + 0x3a)": "*(char *)((int)flag_array + 0x3a)",
                "param_1": "flag_array",
                "*param_1": "*flag_array",
                "PTR_": "",
                "FUN_080064b0": "clear_bit_flags_080064b0",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ clear_bit_flags_080064b0(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064b0",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": true,
            "current_name": "clear_bit_flags_080064b0"
        },
        "FUN_08009cdc": {
            "renaming": {
                "fill_array_with_value_080091c6": "fill_array_with_value",
                "uVar1": "unused_variable",
                "param_1": "param_array",
                "param_2": "param_2_value",
                "param_3": "param_3_value",
                "FUN_08009cdc": "initialize_param_values_08009cdc"
            },
            "code": "void initialize_param_values_08009cdc(undefined4 *param_array, undefined2 param_2_value, undefined2 param_3_value) {\n  *param_array = 0;\n  param_array[1] = 0;\n  param_array[2] = 0;\n  *(undefined2 *)(param_array + 3) = param_2_value;\n  param_array[0x19] = 0;\n  *(undefined2 *)((int)param_array + 0xe) = param_3_value;\n  param_array[4] = 0;\n  param_array[5] = 0;\n  param_array[6] = 0;\n  fill_array_with_value(param_array + 0x17, 0, 8);\n  param_array[8] = param_array;\n  param_array[9] = DAT_08009d14;\n  param_array[10] = PTR_process_command_line_options_0800a042_1_08009d18;\n  param_array[0xb] = PTR_processReturnValueAndUpdateFlags_0800a07a_1_08009d1c;\n  param_array[0xc] = PTR_LAB_0800a09e_1_08009d20;\n  return;\n}",
            "called": [
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009cdc",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": true,
            "current_name": "initialize_param_values_08009cdc"
        },
        "FUN_08002a58": {
            "renaming": {
                "iVar1": "status",
                "*PTR_DAT_08002ab8": "DAT_08002ab8",
                "*PTR_DAT_08002aa8": "DAT_08002aa8",
                "*(undefined4 *)PTR_DAT_08002aac": "DAT_08002aac",
                "param_1": "data_ptr",
                "*PTR_DAT_08002abc": "DAT_08002abc",
                "*(int *)PTR_DAT_08002aac": "DAT_08002aac",
                "FUN_08002a58": "check_data_08002a58",
                "uVar2": "status",
                "*PTR_DAT_08002ab4": "DAT_08002ab4",
                "*PTR_DAT_08002ab0": "DAT_08002ab0"
            },
            "code": "int check_data_08002a58(int data_ptr) {\\n  int status;\\n  if (*(char *)(data_ptr + 0x11) == \"\\0\") {\\n    status = 4;\\n  }\\n  else {\\n    status = process_and_check(data_ptr);\\n    if (status == 0) {\\n      status = 0;\\n    }\\n    else if (status == 1) {\\n      status = 1;\\n    }\\n    else {\\n      status = 4;\\n    }\\n    if (*(int *)*(undefined4 *)PTR_*(int *)PTR_DAT_08002aac != 0) {\\n      fill_array_with_value_080091c6(*(int *)*(undefined4 *)PTR_*(int *)PTR_DAT_08002aac, 0, **PTR_DAT_08002ab4);\\n    }\\n    **PTR_DAT_08002ab8 = 0;\\n    **PTR_DAT_08002aa8 = 0;\\n    **PTR_DAT_08002abc = 0;\\n  }\\n  return status;\\n}",
            "called": [
                "FUN_08007e74",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a58",
            "calling": [
                "FUN_08001c18",
                "FUN_08002ac0",
                "FUN_08002b68"
            ],
            "imported": true,
            "current_name": "check_data_08002a58"
        },
        "FUN_080026b0": {
            "renaming": {
                "calculate_value_at_index_0800267c": "calculate_value_at_index",
                "param_1": "index",
                "param_2": "value",
                "calculate_new_value_08008ef4": "calculate_new_value",
                "FUN_080026b0": "calculate_value_080026b0"
            },
            "code": "void calculate_value_080026b0(int index, int value){\n  if (value < 544) {\n    if (value < 0) {\n      value = 0;\n    }\n    else if (180 < value) {\n      value = 180;\n    }\n    value = calculate_new_value(value,0,180,(0x88 - *(char *)(index + 1)) * 4,(600 - *(char *)(index + 2)) * 4);\n  }\n  calculate_value_080026b0_at_index(index,value);\n  return;\n}",
            "called": [
                "FUN_0800267c",
                "FUN_08008ef4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026b0",
            "calling": [
                "FUN_0800021a"
            ],
            "imported": true,
            "current_name": "calculate_value_080026b0"
        },
        "FUN_08006092": {
            "renaming": {
                "param_1": "data_array",
                "FUNC_08006e68": "call_helper_function",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)data_array + 0x3d)",
                "update_data_08005fe8": "update_data",
                "FUN_08006092": "update_data_if_valid_08006092",
                "*(undefined *)(param_1 + 0xf)": "*(undefined *)(data_array + 0xf)"
            },
            "code": "int update_data_if_valid_08006092(int *data_array)\n{\n    if (data_array != NULL) {\n        if (*(char *)((int)data_array + 0x3d) == '\\0') {\n            *(undefined *)(data_array + 0xf) = 0;\n            call_helper_function();\n        }\n        *(undefined *)((int)data_array + 0x3d) = 2;\n        update_data(*data_array, data_array + 1);\n        *(undefined *)((int)data_array + 0x3d) = 1;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08006e68",
                "FUN_08005fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [
                "FUN_08007118"
            ],
            "imported": true,
            "current_name": "update_data_if_valid_08006092"
        },
        "FUN_08008d8c": {
            "renaming": {
                "param_1": "param1",
                "DAT_08008da8": "DAT_08008da8",
                "param_2": "param2",
                "PTR_DAT_08008dac": "PTR_DAT_08008dac",
                "param_3": "value1",
                "param_4": "value2",
                "FUN_08008d8c": "initialize_struct_if_param_is_one_08008d8c"
            },
            "code": "void initialize_struct_if_param_is_one_08008d8c(int param1, int param2, int value1, int value2, int value3){\n  if (param1 != 1){\n    return;\n  }\n  if (param2 == 0xffff){\n    initialize_struct_and_set_values(PTR_DAT_08008dac, DAT_08008da8, value1, value2, value3);\n  }\n  return;\n}",
            "called": [
                "FUN_08008d30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d8c",
            "calling": [],
            "imported": true,
            "current_name": "initialize_struct_if_param_is_one_08008d8c"
        },
        "FUN_080004d4": {
            "renaming": {
                "iVar1": "index",
                "puVar2": "ptr",
                "param_1": "value_one",
                "param_2": "value_two",
                "FUN_080004d4": "increment_and_set_values_080004d4"
            },
            "code": "void increment_and_set_values_080004d4(int value_one, int value_two)\n{\n  int index;\n  undefined *ptr;\n  \n  if (value_one != 1) {\n    return;\n  }\n  if (value_two == 0xffff) {\n    ptr = PTR_DAT_080004fc;\n    for (index = 11; index >= 0; index--) {\n      increment_and_set_08002580(ptr);\n      ptr += 3;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004d4",
            "calling": [],
            "imported": true,
            "current_name": "increment_and_set_values_080004d4"
        },
        "FUN_080005f8": {
            "renaming": {
                "FUN_080005f8": "FUNC_080005f8"
            },
            "code": "\nvoid FUNC_080005f8(uint param_1,int param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  char cVar3;\n  bool bVar4;\n  uint uVar5;\n  \n  iVar2 = get_value_at_offset_from_ptr_08002fa0(PTR_DAT_08000874,param_1);\n  if (iVar2 != 0x7f) {\n    iVar2 = get_value_at_offset_from_ptr_08002fa0(PTR_DAT_08000874,param_1);\n    if (iVar2 == 6) {\n      cVar3 = *PTR_DAT_0800087c;\n      if (cVar3 == '\\0') {\n        cVar3 = '\\0';\n      }\n      else if (param_2 == 6) {\n        cVar3 = '\\0';\n      }\n    }\n    else {\n      cVar3 = '\\0';\n    }\n    if (cVar3 != '\\0') {\n      initializeData_080005e0();\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = check_param_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else if (param_2 == 4) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((byte)PTR_DAT_08000880[param_1] < 0xc) {\n        iVar2 = get_byte_from_data_080026f8(PTR_DAT_08000884 + (uint)(byte)PTR_DAT_08000880[param_1] * 3);\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        process_input_and_update_state_08000588(param_1);\n      }\n    }\n    uVar5 = param_1 - 0x2e & 0xff;\n    if (uVar5 < 0xe) {\n      if (param_1 < 0x3c) {\n        iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n      }\n      else {\n        iVar2 = -1;\n      }\n      iVar2 = check_param_080036ac(iVar2);\n      if (iVar2 == 0) {\n        bVar4 = false;\n      }\n      else {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = check_param_080036ac(iVar2);\n        if (iVar2 == 1) {\n          bVar4 = false;\n        }\n        else {\n          bVar4 = true;\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      set_bit_in_array_08000488(uVar5,param_2 == 2);\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = check_param_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((param_2 == 0) || (param_2 == 0xb)) {\n        PTR_DAT_08000888[param_1 >> 3] = PTR_DAT_08000888[param_1 >> 3] | (byte)(1 << (param_1 & 7))\n        ;\n      }\n      else {\n        PTR_DAT_08000888[param_1 >> 3] =\n             PTR_DAT_08000888[param_1 >> 3] & ~(byte)(1 << (param_1 & 7));\n      }\n    }\n    set_value_at_index_08002fc2(PTR_DAT_08000874,param_1,0);\n    switch(param_2) {\n    case 0:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = check_param_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = check_param_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        process_data_08008990(param_1,0);\n        check_and_set_value_08002fa8(PTR_DAT_08000874,param_1,0);\n        return;\n      }\n      break;\n    case 1:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = check_param_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = check_param_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        iVar2 = get_value_at_offset_from_ptr_08002fa0(PTR_DAT_08000a44,param_1);\n        if (iVar2 == 3) {\n          determine_address_value_08008a24(param_1,0);\n        }\n        process_data_08008990(param_1,1);\n        check_and_set_value_08002fa8(PTR_DAT_08000a44,param_1,1);\n        return;\n      }\n      break;\n    case 2:\n      if (uVar5 < 0xe) {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = check_param_080036ac(iVar2);\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          if (param_1 < 0x3c) {\n            iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n          }\n          else {\n            iVar2 = -1;\n          }\n          iVar2 = check_param_080036ac(iVar2);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        if (param_1 < 0x3c) {\n          if (PTR_DAT_08000878[param_1] == -1) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = check_param_080036ac();\n            if (iVar2 == 0) {\n              bVar4 = false;\n            }\n            else {\n              iVar2 = check_param_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n              if (iVar2 == 1) {\n                bVar4 = false;\n              }\n            }\n          }\n        }\n        else {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          process_data_08008990(param_1,0);\n        }\n        check_and_set_value_08002fa8(PTR_DAT_08000874,param_1,2);\n        return;\n      }\n      break;\n    case 3:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = check_param_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = check_param_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = is_param1_in_param2_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a4c);\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        process_data_08008990(param_1,1);\n        process_data_and_update_params_080088e0(param_1,0);\n        check_and_set_value_08002fa8(PTR_DAT_08000a44,param_1,3);\n        return;\n      }\n      break;\n    case 4:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = check_param_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = check_param_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        check_and_set_value_08002fa8(PTR_DAT_08000a44,param_1,4);\n        if (((byte)PTR_DAT_08000a50[param_1] != 0xff) &&\n           (iVar2 = get_byte_from_data_080026f8(PTR_DAT_08000a54 + (uint)(byte)PTR_DAT_08000a50[param_1] * 3),\n           iVar2 != 0)) {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          process_servo_data_08000500(param_1,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      send_encoded_messages_to_server_and_find_end_of_string_08002f14(PTR_DAT_08000a44,PTR_s_Unknown_pin_mode_08000a60);\n      break;\n    case 6:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = check_param_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = check_param_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = is_param1_in_param2_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a58);\n              if (iVar2 == 0) {\n                iVar2 = is_param1_in_param2_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a5c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        check_and_set_value_08002fa8(PTR_DAT_08000a44,param_1,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = check_param_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = check_param_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        process_data_08008990(param_1,2);\n        puVar1 = PTR_DAT_08000a44;\n        check_and_set_value_08002fa8(PTR_DAT_08000a44,param_1,0xb);\n        set_value_at_index_08002fc2(puVar1,param_1,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000500",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_0800738a",
                "FUN_08000488",
                "FUN_08002fa8",
                "FUN_08002fc2",
                "FUN_080026f8",
                "FUN_08000588",
                "FUN_08008a24",
                "FUN_08002f14",
                "FUN_080005e0",
                "FUN_08002fa0",
                "FUN_08008990"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080005f8",
            "calling": [
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_08000aec"
            ],
            "imported": true,
            "current_name": "FUNC_080005f8"
        },
        "FUN_08009124": {
            "renaming": {
                "FUN_08009124": "execute_func_with_params_and_stack_pointer_08009124",
                "uStack_8": "stack_param_3",
                "param_1": "func_param_1",
                "uStack_4": "stack_param_4",
                "PTR_PTR_DAT_08009144": "func_ptr",
                "param_2": "func_param_2",
                "param_3": "stack_param_1",
                "param_4": "stack_param_2"
            },
            "code": "void execute_func_with_params_and_stack_pointer_08009124(void* PTR_PTR_DAT_08009144, int param_1, int param_2, int* stack_param_1, int* stack_param_2)\n{\n  int stack_param_3 = *stack_param_1;\n  int stack_param_4 = *stack_param_2;\n  PTR_PTR_DAT_08009144(param_1,param_2,&stack_param_3,param_1,&stack_param_3);\n  return;\n}",
            "called": [
                "FUN_0800937c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009124",
            "calling": [
                "FUN_080090cc"
            ],
            "imported": true,
            "current_name": "execute_func_with_params_and_stack_pointer_08009124"
        },
        "FUN_08002fa0": {
            "renaming": {
                "FUN_08002fa0": "get_value_at_offset_from_ptr_08002fa0",
                "param_1": "offset",
                "undefined": "unsigned char",
                "param_2": "ptr",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "unsigned char get_value_at_offset_from_ptr_08002fa0(int offset, int ptr) {\n  unsigned char* data = (unsigned char*)ptr;\n  return *(data + offset + 0xcc);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa0",
            "calling": [
                "FUN_0800021a",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_080022f8"
            ],
            "imported": true,
            "current_name": "get_value_at_offset_from_ptr_08002fa0"
        },
        "FUN_080064ae": {
            "renaming": {
                "FUN_080064ae": "do_nothing_080064ae"
            },
            "code": "\nvoid do_nothing_080064ae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ae",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": true,
            "current_name": "do_nothing_080064ae"
        },
        "FUN_0800a424": {
            "renaming": {
                "FUN_0800a424": "do_nothing_0800a424"
            },
            "code": "\nvoid do_nothing_0800a424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a424",
            "calling": [
                "FUN_08009148",
                "FUN_0800010c"
            ],
            "imported": true,
            "current_name": "do_nothing_0800a424"
        },
        "FUN_08003a1c": {
            "renaming": {
                "FUN_08003a1c": "get_value_at_offset_08003a1c",
                "param_1": "base_address",
                "*(undefined4 *)(param_1 + 0x28)": "value_ptr"
            },
            "code": "int get_value_at_offset_08003a1c(int base_address, int offset)\n{\n  int* value_ptr = (int*)(base_address + offset);\n  return *value_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a1c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "get_value_at_offset_08003a1c"
        },
        "FUN_080064ac": {
            "renaming": {
                "FUN_080064ac": "do_nothing_080064ac"
            },
            "code": "\nvoid do_nothing_080064ac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ac",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": true,
            "current_name": "do_nothing_080064ac"
        },
        "FUN_08005cb4": {
            "renaming": {
                "**param_1": "first_dereferenced_bit",
                "DAT_08005ce8": "constant_data",
                "param_1": "flagged_bits",
                "FUN_08005cb4": "execute_on_flagged_bits_08005cb4",
                "*param_1": "second_dereferenced_bit"
            },
            "code": "void execute_on_flagged_bits_08005cb4(uint **flagged_bits)\n{\n  bool first_bit_flagged = (**flagged_bits & 2) != 0;\n  bool second_bit_flagged = ((*flagged_bits)[1] & 2) != 0;\n  if (first_bit_flagged && second_bit_flagged) {\n    execute_code_if_not_null_080073c0();\n    (*flagged_bits)[1] = 0xfffffffd;\n  }\n  *(undefined4 *)(DAT_08005ce8 + 0x14) = 0x20000;\n  *(undefined *)((int)flagged_bits + 0x11) = 1;\n  return;\n}",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb4",
            "calling": [],
            "imported": true,
            "current_name": "execute_on_flagged_bits_08005cb4"
        },
        "FUN_08007744": {
            "renaming": {
                "param_1": "offset",
                "FUN_08007744": "get_data_from_offset_08007744",
                "*PTR_": "*pointer_to_",
                "DAT_": "data"
            },
            "code": "int get_data_from_offset_08007744(int offset)\n{\n  int* pointer_to_offset = (int*)(offset + 4);\n  int DAT_ = *(int*)(pointer_to_offset + 9);\n  return DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007744",
            "calling": [],
            "imported": true,
            "current_name": "get_data_from_offset_08007744"
        },
        "FUN_08006538": {
            "renaming": {
                "DAT_080066e0": "PTR_DAT_080066e0",
                "DAT_080066e4": "PTR_DAT_080066e4",
                "iVar3": "shift_val1",
                "uVar1": "result1",
                "iVar4": "shift_val4",
                "iVar5": "shift_val5",
                "iVar6": "shift_val6",
                "iVar11": "shift_val11",
                "iVar7": "shift_val7",
                "iVar12": "var1",
                "iVar8": "shift_val3",
                "param_1": "params",
                "iVar9": "shift_val5",
                "iVar10": "shift_val10",
                "FUN_08006538": "calculate_values_08006538",
                "uVar2": "result2"
            },
            "code": "void calculate_values_08006538(int *params)\n{\n  uint32_t shift_val1;\n  uint32_t shift_val2;\n  uint32_t shift_val3;\n  uint32_t shift_val4;\n  uint32_t shift_val5;\n  uint32_t shift_val6;\n  uint32_t shift_val7;\n  uint32_t shift_val8;\n  uint32_t shift_val9;\n  uint32_t shift_val10;\n  uint32_t shift_val11;\n  uint32_t result;\n  uint32_t constant1 = 0x32;\n  uint32_t constant2 = 0x19;\n  uint32_t constant3 = 0x10;\n  uint32_t constant4 = 0xffffe9f3;\n  uint32_t constant5 = 0xffffcfff;\n  uint32_t constant6 = 0xfffffcff;\n\n  *(uint32_t *)(*params + 0x10) = (*(uint32_t *)(*params + 0x10) & constant5) | params[3];\n  *(uint32_t *)(*params + 0xc) = params[2] | params[4] | params[5] | (*(uint32_t *)(*params + 0xc) & constant4);\n  *(uint32_t *)(*params + 0x14) = (*(uint32_t *)(*params + 0x14) & constant6) | params[6];\n  uint32_t var1 = *(uint32_t *)(*params + 0x4);\n  if (var1 != DAT_080066e0) {\n    shift_val1 = get_shifted_value_from_pointer_08005a28();\n    shift_val2 = DAT_080066e4;\n    shift_val3 = params[1];\n    shift_val4 = get_shifted_value_from_pointer_08005a28();\n    shift_val5 = params[1];\n    shift_val6 = get_shifted_value_from_pointer_08005a28();\n    shift_val7 = params[1];\n    shift_val8 = get_shifted_value_from_pointer_08005a28();\n    shift_val9 = params[1];\n    shift_val10 = get_shifted_value_from_pointer_08005a28();\n    shift_val11 = params[1];\n    result = (((shift_val2 * ((constant2 * shift_val6 / (shift_val11 << 2)) + (shift_val2 * ((uint32_t)(constant2 * shift_val7 / (uint32_t)(params[1] << 2)) >> 0x25) * -100) * constant3 + constant1)) >> 0x20) << 0x17) >> 0x1c) + ((shift_val2 * ((constant2 * shift_val4 / (shift_val5 << 2)) + (shift_val2 * ((uint32_t)(constant2 * shift_val5 / (uint32_t)(params[1] << 2)) >> 0x25) * -100) * constant3 + constant1)) >> 0x25) & 0xf0) + ((DAT_080066e4 * ((constant2 * shift_val1 / (shift_val3 << 2))) >> 0x25) * constant3);\n  } else {\n    shift_val1 = get_shifted_value_from_pointer_08005a48();\n    shift_val2 = DAT_080066e4;\n    shift_val3 = params[1];\n    shift_val4 = get_shifted_value_from_pointer_08005a48();\n    shift_val5 = params[1];\n    shift_val6 = get_shifted_value_from_pointer_08005a48();\n    shift_val7 = params[1];\n    shift_val8 = get_shifted_value_from_pointer_08005a48();\n    shift_val9 = params[1];\n    shift_val10 = get_shifted_value_from_pointer_08005a48();\n    shift_val11 = params[1];\n    result = (((shift_val2 * ((constant2 * shift_val6 / (shift_val11 << 2)) + (shift_val2 * ((uint32_t)(constant2 * shift_val7 / (uint32_t)(params[1] << 2)) >> 0x25) * -100) * constant3 + constant1)) >> 0x20) << 0x17) >> 0x1c) + ((shift_val2 * ((constant2 * shift_val4 / (shift_val5 << 2)) + (shift_val2 * ((uint32_t)(constant2 * shift_val5 / (uint32_t)(params[1] << 2)) >> 0x25) * -100) * constant3 + constant1)) >> 0x25) & 0xf0) + ((DAT_080066e4 * ((constant2 * shift_val1 / (shift_val3 << 2))) >> 0x25) * constant3);\n  }\n  *(uint32_t *)(*params + 8) = result;\n  return;\n}",
            "called": [
                "FUN_08005a48",
                "FUN_08005a28"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006538",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": true,
            "current_name": "calculate_values_08006538"
        },
        "FUN_080042e2": {
            "renaming": {
                "*(int *)(param_1 + 0x10)": "*(int *)(address + 0x10)",
                "param_1": "address",
                "FUN_080042e2": "set_value_at_address_based_on_condition_080042e2",
                "param_2": "value",
                "param_3": "condition"
            },
            "code": "void set_value_at_address_based_on_condition_080042e2(int address, int value, int condition) {\n  if (condition == 0) {\n    *(int *)(address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e2",
            "calling": [
                "FUN_080072d8"
            ],
            "imported": true,
            "current_name": "set_value_at_address_based_on_condition_080042e2"
        },
        "FUN_08002fa8": {
            "renaming": {
                "param_1": "offset",
                "FUN_08002fa8": "check_and_set_value_08002fa8",
                "param_2": "base_address",
                "param_3": "value"
            },
            "code": "void check_and_set_value_08002fa8(int offset, int base_address, undefined value) {\n  if (*(char *)(base_address + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(base_address + offset + 0xcc) = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa8",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": true,
            "current_name": "check_and_set_value_08002fa8"
        },
        "FUN_0800325a": {
            "renaming": {
                "param_1": "ptr_1",
                "FUN_0800325a": "send_encoded_messages_to_server_0800325a",
                "param_2": "message_type",
                "param_3": "num_messages",
                "param_4": "message_offset",
                "puVar1": "message_handler_ptr",
                "uVar2": "message_index"
            },
            "code": "void send_encoded_messages_to_server_0800325a(undefined4 *ptr_1, undefined4 message_type, uint num_messages, int message_offset) {\n  undefined4 *message_handler_ptr;\n  uint message_index;\n  message_handler_ptr = (undefined4 *)*ptr_1;\n  if (message_handler_ptr != (undefined4 *)0x0) {\n    (**(code **)*message_handler_ptr)(message_handler_ptr,0xf0);\n    (***(code ***)(undefined4 *)*ptr_1)((undefined4 *)*ptr_1,message_type);\n    for (message_index = 0; message_index < num_messages; message_index = message_index + 1) {\n      encode_message_0800307a(ptr_1,1,message_offset + message_index,0);\n    }\n    (***(code ***)(undefined4 *)*ptr_1)((undefined4 *)*ptr_1,0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800325a",
            "calling": [
                "FUN_080032a2",
                "FUN_08002f0a"
            ],
            "imported": true,
            "current_name": "send_encoded_messages_to_server_0800325a"
        },
        "FUN_080091d8": {
            "renaming": {
                "piVar4": "data_ptr",
                "param_1": "head_ptr",
                "ppiVar6": "current_ptr",
                "FUN_080091d8": "add_to_linked_list_080091d8",
                "ppiVar7": "current_ptr",
                "param_2": "size",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "previous_ptr",
                "ppiVar2": "current_ptr",
                "extraout_r1": "next_ptr",
                "ppiVar3": "previous_ptr",
                "ppiVar5": "previous_ptr"
            },
            "code": "void add_to_linked_list_080091d8(int **head_ptr, int size, undefined4 param_3, undefined4 param_4) {\n  int **current_ptr;\n  int **previous_ptr;\n  int **next_ptr;\n  int *data_ptr;\n  \n  if (size == 0) {\n    return;\n  }\n  current_ptr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    current_ptr = (int **)((int)current_ptr + *(int *)(size + -4));\n  }\n  do_nothing_08009f48();\n  previous_ptr = *(int ***)PTR_DAT_0800926c;\n  if (previous_ptr == (int **)0x0) {\n    current_ptr[1] = (int *)0x0;\n    *(int ***)PTR_DAT_0800926c = current_ptr;\n    next_ptr = head_ptr;\n    current_ptr = (int **)PTR_DAT_0800926c;\n  }\n  else if (current_ptr < previous_ptr) {\n    next_ptr = (int **)*current_ptr;\n    current_ptr = (int **)((int)current_ptr + (int)next_ptr);\n    if (previous_ptr == current_ptr) {\n      data_ptr = *previous_ptr;\n      previous_ptr = (int **)previous_ptr[1];\n      current_ptr = (int **)((int)data_ptr + (int)next_ptr);\n      *current_ptr = (int *)current_ptr;\n    }\n    current_ptr[1] = (int *)previous_ptr;\n    *(int ***)PTR_DAT_0800926c = current_ptr;\n  }\n  else {\n    do {\n      next_ptr = previous_ptr;\n      current_ptr = (int **)next_ptr[1];\n      if (current_ptr == (int **)0x0) break;\n      previous_ptr = current_ptr;\n    } while (current_ptr <= current_ptr);\n    data_ptr = (int *)*next_ptr;\n    if ((int **)((int)next_ptr + (int)data_ptr) == current_ptr) {\n      data_ptr = (int *)((int)data_ptr + (int)*current_ptr);\n      *next_ptr = (int *)data_ptr;\n      if (current_ptr == (int **)((int)next_ptr + (int)data_ptr)) {\n        data_ptr = *current_ptr;\n        current_ptr = (int **)current_ptr[1];\n        data_ptr = (int *)((int)data_ptr + (int)*next_ptr);\n        *next_ptr = (int *)data_ptr;\n        next_ptr[1] = (int *)current_ptr;\n      }\n    }\n    else if (current_ptr < (int **)((int)next_ptr + (int)data_ptr)) {\n      *head_ptr = 0xc;\n    }\n    else {\n      data_ptr = (int *)((int)current_ptr + (int)*current_ptr);\n      if (current_ptr == (int **)data_ptr) {\n        data_ptr = *current_ptr;\n        current_ptr = (int **)current_ptr[1];\n        data_ptr = (int *)((int)data_ptr + (int)*current_ptr);\n        *next_ptr = (int *)data_ptr;\n      }\n      current_ptr[1] = (int *)current_ptr;\n      next_ptr[1] = (int *)current_ptr;\n    }\n  }\n  do_nothing_08009f4a(head_ptr,next_ptr,current_ptr,param_4);\n  return;\n}",
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091d8",
            "calling": [
                "FUN_08009b5c",
                "FUN_08009908",
                "FUN_080091a0",
                "FUN_08009a80"
            ],
            "imported": true,
            "current_name": "add_to_linked_list_080091d8"
        },
        "FUN_0800688e": {
            "renaming": {
                "*(short *)(param_1 + 9)": "input[9]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input + 0xc)",
                "param_1[8]": "input[8]",
                "param_1": "input",
                "*(undefined *)((int)param_1 + 0x39)": "input[9]",
                "param_1[0xf]": "input[15]",
                "FUN_0800688e": "validate_input_0800688e",
                "param_2": "size",
                "param_3": "flag",
                "*(char *)((int)param_1 + 0x39)": "input[9]",
                "*(char *)(param_1 + 0xe)": "input[14]",
                "*(undefined *)(param_1 + 0xe)": "input[14]",
                "*(short *)((int)param_1 + 0x26)": "input[11]"
            },
            "code": "int validate_input_0800688e(int *input, int size, int flag)\n{\n  if (input[9] != ' ') {\n    return 2;\n  }\n  if (size == 0) {\n    return 1;\n  }\n  if (flag == 0) {\n    return 1;\n  }\n  if (input[14] != 1) {\n    input[8] = size;\n    input[9] = (short)flag;\n    input[11] = (short)flag;\n    input[15] = 0;\n    input[9] = '!';\n    input[14] = 0;\n    *(uint *)(*input + 0xc) = *(uint *)(*input + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800688e",
            "calling": [
                "FUN_08008694",
                "FUN_08008730"
            ],
            "imported": true,
            "current_name": "validate_input_0800688e"
        },
        "FUN_080088e0": {
            "renaming": {
                "iVar1": "is_valid",
                "iVar3": "index",
                "param_1": "address",
                "param_2": "data",
                "FUN_080088e0": "process_data_and_update_params_080088e0",
                "uVar2": "shift_amount"
            },
            "code": "void process_data_and_update_params_080088e0(uint address, uint data)\n{\n  int index = -1;\n  if (address < 0x3c) {\n    index = (int)(char)PTR_DAT_0800897c[address];\n  }\n  if (index != -1) {\n    int is_valid = is_address_valid_0800738a(index, PTR_DAT_08008980);\n    if (is_valid == 0) {\n      process_data_08008990(address, 1);\n      uint shift_amount = 8 - (*(uint *)PTR_DAT_08008988 & 0xff);\n      if (*(uint *)PTR_DAT_08008988 < 9) {\n        data = data << shift_amount;\n      }\n      else {\n        data = data >> shift_amount;\n      }\n      if (data < 0x80) {\n        determine_address_value_08008a24(address, 0);\n      }\n      else {\n        determine_address_value_08008a24(address, 1);\n      }\n    }\n    else {\n      int bit_value = get_bit_at_index_08006b28(index, PTR_DAT_08008984);\n      if (bit_value == 0) {\n        set_bit_at_index_08006b3e(index, PTR_DAT_08008984);\n      }\n      uint shift_amount = 8 - (*(uint *)PTR_DAT_08008988 & 0xff);\n      if (*(uint *)PTR_DAT_08008988 < 9) {\n        data = data << shift_amount;\n      }\n      else {\n        data = data >> shift_amount;\n      }\n      update_params_and_flags_if_valid_08007118(index, DAT_0800898c, 0xff, data, bit_value == 0);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08008a24",
                "FUN_08007118",
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_0800738a",
                "FUN_08008990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080088e0",
            "calling": [
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": true,
            "current_name": "process_data_and_update_params_080088e0"
        },
        "FUN_08008b66": {
            "renaming": {
                "iVar1": "validation_result",
                "param_1": "input_address",
                "local_9": "new_value",
                "FUN_08008b66": "update_input_08008b66",
                "uVar2": "index"
            },
            "code": "void update_input_08008b66(int input_address)\n{\n  int validation_result;\n  ushort index;\n  undefined new_value;\n  \n  validation_result = validate_input_and_set_params(input_address, &new_value);\n  if ((validation_result == 0) &&\n     (index = *(ushort *)(input_address + 0x60), index = (index + 1) & 0x3f, index != *(ushort *)(input_address + 0x62))) {\n    *(undefined *)(*(int *)(input_address + 0x5c) + (uint)*(ushort *)(input_address + 0x60)) = new_value;\n    *(ushort *)(input_address + 0x60) = index;\n  }\n  return;\n}",
            "called": [
                "FUN_08008600"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b66",
            "calling": [],
            "imported": true,
            "current_name": "update_input_08008b66"
        },
        "FUN_0800870c": {
            "renaming": {
                "(code **)": "(void (**)(uint))",
                "find_index_080086e8": "find_index",
                "*(undefined4 *)(PTR_DAT_0800872c + uVar1 * 4)": "*(uint *)(PTR_PARAMETER_TABLE + index * 4)",
                "uVar1": "index",
                "PTR_DAT_0800872c": "PTR_PARAMETER_TABLE",
                "(*(undefined4 *)...)": "(*(uint *)...)",
                "PTR_DAT_08008728": "PTR_FUNCTION_POINTER_TABLE",
                "FUN_0800870c": "execute_function_based_on_index_0800870c",
                "(**(code **)(PTR_DAT_08008728 + uVar1 * 4))": "*(void (**)(uint))(PTR_FUNCTION_POINTER_TABLE + index * 4)"
            },
            "code": "void execute_function_based_on_index_0800870c(void)\n{\n  uint index = find_index();\n  if (index < 5) {\n    void (*function_pointer)(uint) = (**(code **)(PTR_DAT_08008728 + uVar1 * 4));\n    uint parameter_value = *(undefined4 *)(PTR_DAT_0800872c + uVar1 * 4);\n    function_pointer(parameter_value);\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800870c",
            "calling": [
                "FUN_0800694c"
            ],
            "imported": true,
            "current_name": "execute_function_based_on_index_0800870c"
        },
        "FUN_08008840": {
            "renaming": {
                "FUN_08008840": "get_error_code_08008840",
                "0xffffffff": "ERROR_CODE_MAX",
                "undefined4": "int32_t"
            },
            "code": "int32_t get_error_code_08008840(void)\n{\n  return ERROR_CODE_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008840",
            "calling": [],
            "imported": true,
            "current_name": "get_error_code_08008840"
        },
        "FUN_08008600": {
            "renaming": {
                "FUN_08008600": "validate_input_and_set_params_08008600",
                "iVar1": "is_valid_input",
                "first_char": "first_char",
                "param_1": "input_length",
                "param_index": "param_index",
                "param_2": "input_buffer",
                "param_3": "param_3",
                "param_4": "param_4",
                "parameter": "parameter",
                "PTR_DAT_08008638": "PTR_DAT_08008638"
            },
            "code": "int validate_input_and_set_params_08008600(int input_length, char* input_buffer, int param_3, int param_4) {\n  if (input_length == 0) {\n    return -1;\n  }\n  int is_valid_input = is_valid_input();\n  if (is_valid_input == 0) {\n    char first_char = *(char *)(input_buffer + 0x45);\n    int param_index = *(byte *)(input_buffer + 0x44);\n    int parameter = *(int *)(PTR_DAT_08008638 + param_index * 4);\n    set_parameters_080068d6(parameter, input_buffer + 0x45, 1, PTR_DAT_08008638, param_4);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "FUN_080085b8",
                "FUN_080068d6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008600",
            "calling": [
                "FUN_08008b66"
            ],
            "imported": true,
            "current_name": "validate_input_and_set_params_08008600"
        },
        "FUN_08003154": {
            "renaming": {
                "FUN_08003154": "assign_value_to_pointer_08003154",
                "param_1": "pointer",
                "param_2": "value"
            },
            "code": "void assign_value_to_pointer_08003154(int *pointer, int value) {\n  *pointer = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003154",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": true,
            "current_name": "assign_value_to_pointer_08003154"
        },
        "FUN_08006420": {
            "renaming": {
                "<<": "<<",
                "|=": "|=",
                "&": "&",
                "FUN_08006420": "set_bit_08006420",
                "*(uint *)(param_1 + 0x20)": "*data",
                "param_1": "data",
                "param_2": "bit_position",
                "4": "0x1",
                "param_3": "bit_value",
                "&=": "&=",
                "|": "|",
                "~": "~"
            },
            "code": "void set_bit_08006420(uint32_t *data, uint8_t bit_position, uint8_t bit_value) {\n  uint32_t mask = ~(0x1 << bit_position);\n  *data = (*data & mask) | (bit_value << bit_position);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006420",
            "calling": [
                "FUN_0800643c",
                "FUN_08006460"
            ],
            "imported": true,
            "current_name": "set_bit_08006420"
        },
        "FUN_08007750": {
            "renaming": {
                "FUN_08007750": "set_value_at_index_08007750",
                "undefined4": "int",
                "param_1": "array_ptr",
                "param_2": "index",
                "param_3": "value",
                "*(undefined4 *)(*(int *)(param_1 + 4) + 0x34 + param_2 * 4)": "*index_ptr"
            },
            "code": "void set_value_at_index_08007750(int array_ptr, int index, int value)\n{\n  int* array = *(int*)(array_ptr + 4);\n  int* index_ptr = array + 0x34 + index * 4;\n  *index_ptr = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007750",
            "calling": [],
            "imported": true,
            "current_name": "set_value_at_index_08007750"
        },
        "FUN_08009938": {
            "renaming": {
                "pcVar1": "current_char_pointer",
                "FUN_08009938": "find_char_in_string_08009938",
                "param_1": "string",
                "param_2": "target_char"
            },
            "code": "char* find_char_in_string_08009938(char* string, char target_char) {\n  char* current_char_pointer;\n  do {\n    current_char_pointer = string;\n    if (*current_char_pointer == '\\0') {\n      if (target_char != '\\0') {\n        current_char_pointer = NULL;\n      }\n      return current_char_pointer;\n    }\n    string = current_char_pointer + 1;\n  } while (target_char != *current_char_pointer);\n  return current_char_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009938",
            "calling": [
                "FUN_0800997e"
            ],
            "imported": true,
            "current_name": "find_char_in_string_08009938"
        },
        "FUN_08007f0e": {
            "renaming": {
                "iVar1": "start_value",
                "iVar2": "process_result",
                "iVar4": "result",
                "iVar5": "input_address",
                "FUN_08007f0e": "check_input_08007f0e",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar3": "diff",
                "uVar6": "param_4"
            },
            "code": "int check_input_08007f0e(int input, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int start_value = get_pointer_value();\n  int result = 2;\n  uint diff = 0;\n  do {\n    int input_address = input + 4;\n    int process_result = process_input(input_address, param_2, param_3, param_4, param_4);\n    if (process_result == 0) {\n      result = 0;\n      int current_value = get_value_at_offset(input_address);\n      while (current_value != 0x20 && result == 0) {\n        int pointer_value = get_pointer_value();\n        diff = pointer_value - start_value;\n        if (diff < 0x65) {\n          int offset = get_offset_from_param(input_address);\n          if (offset != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n        current_value = get_value_at_offset(input_address);\n      }\n    }\n    int offset = get_offset_from_param(input_address);\n  } while (offset == 4 && diff < 100);\n  return result;\n}",
            "called": [
                "FUN_080047f4",
                "FUN_08005430",
                "FUN_0800542a",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f0e",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": true,
            "current_name": "check_input_08007f0e"
        },
        "FUN_08004004": {
            "renaming": {
                "FUN_08004004": "set_bit_in_array_08004004",
                "param_1": "bit_index",
                "DAT_08004020": "array_start_ptr"
            },
            "code": "void set_bit_in_array_08004004(uint bit_index) {\n  if (bit_index >= 0) {\n    uint array_index = (bit_index >> 5) + 0x60;\n    uint* array_ptr = (uint*)(DAT_08004020 + (array_index * 4));\n    uint bit_mask = 1 << (bit_index & 0x1f);\n    *array_ptr = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004004",
            "calling": [],
            "imported": true,
            "current_name": "set_bit_in_array_08004004"
        },
        "FUN_08003158": {
            "renaming": {
                "local_a": "encoded_data",
                "FUN_08003158": "send_encoded_message_if_possible_08003158",
                "param_1": "message_buffer_ptr",
                "param_2": "message_type",
                "param_3": "message_data",
                "puVar1": "function_ptr"
            },
            "code": "void send_encoded_message_if_possible_08003158(undefined4 *message_buffer_ptr,uint message_type,ushort message_data){\n  undefined4 *function_ptr;\n  ushort encoded_data;\n  function_ptr = (undefined4 *)*message_buffer_ptr;\n  if (function_ptr != (undefined4 *)0x0) {\n    encoded_data = message_data;\n    if (((int)message_type < 0x10) && (message_data < 0x4000)) {\n      (**(code **)*function_ptr)(function_ptr,message_type | 0xe0);\n      encode_message_0800307a(message_buffer_ptr,2,&encoded_data);\n    }\n    else {\n      send_message_08003106(message_buffer_ptr,message_type,2,&encoded_data);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08003106",
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003158",
            "calling": [
                "FUN_08002ef2"
            ],
            "imported": true,
            "current_name": "send_encoded_message_if_possible_08003158"
        },
        "FUN_080090c2": {
            "renaming": {
                "FUN_080090c2": "calculate_result_080090c2",
                "param_1": "data1",
                "param_2": "data2"
            },
            "code": "void calculate_result_080090c2(undefined4 data1, undefined4 data2) {\n  //implementation goes here\n}\n\nvoid calculate_result_080090c2(undefined4 data1, undefined4 data2) {\n  calculate_result_080090c2(data2, data1);\n  return;\n}",
            "called": [
                "FUN_08009108"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c2",
            "calling": [
                "FUN_08008f78"
            ],
            "imported": true,
            "current_name": "calculate_result_080090c2"
        },
        "FUN_08000ef8": {
            "renaming": {
                "FUN_08000ef8": "FUNC_08000ef8"
            },
            "code": "\nvoid FUNC_08000ef8(void)\n\n{\n  byte bVar1;\n  int iVar2;\n  bool bVar3;\n  byte bVar4;\n  \n  if (*PTR_DAT_08001188 != '\\0') {\n    bVar1 = *PTR_DAT_0800118c;\n    if (*PTR_DAT_08001190 == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)*PTR_DAT_08001190);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001190[1] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001190[1]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(1);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001190[2] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001190[2]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(2);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001190[3] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001190[3]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(3);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001190[4] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001190[4]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(4);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001190[5] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001190[5]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(5);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001190[6] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001190[6]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(6);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001190[7] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001190[7]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(7);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_with_encode_08000be8(0,bVar4);\n  }\n  if (PTR_DAT_08001188[1] != '\\0') {\n    bVar1 = PTR_DAT_0800118c[1];\n    if (PTR_DAT_08001190[8] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001424[8]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(8);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001424[9] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001424[9]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(9);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001424[10] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001424[10]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(10);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001424[0xb] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001424[0xb]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0xb);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001424[0xc] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001424[0xc]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0xc);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001424[0xd] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001424[0xd]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0xd);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001424[0xe] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001424[0xe]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0xe);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001424[0xf] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001424[0xf]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0xf);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_with_encode_08000be8(1,bVar4,0);\n  }\n  if (PTR_DAT_08001428[2] != '\\0') {\n    bVar1 = PTR_DAT_0800142c[2];\n    if (PTR_DAT_08001424[0x10] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001424[0x10]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x10);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x11] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_080016c4[0x11]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x11);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_080016c4[0x12] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_080016c4[0x12]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x12);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_080016c4[0x13] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_080016c4[0x13]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x13);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_080016c4[0x14] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_080016c4[0x14]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x14);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_080016c4[0x15] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_080016c4[0x15]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x15);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_080016c4[0x16] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_080016c4[0x16]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x16);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_080016c4[0x17] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_080016c4[0x17]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x17);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_with_encode_08000be8(2,bVar4,0);\n  }\n  if (PTR_DAT_080016c8[3] != '\\0') {\n    bVar1 = PTR_DAT_080016cc[3];\n    if (PTR_DAT_080016c4[0x18] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_080016c4[0x18]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x18);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x19] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001960[0x19]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x19);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001960[0x1a] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001960[0x1a]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x1a);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001960[0x1b] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001960[0x1b]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x1b);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001960[0x1c] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001960[0x1c]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x1c);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001960[0x1d] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001960[0x1d]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x1d);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001960[0x1e] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001960[0x1e]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x1e);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001960[0x1f] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001960[0x1f]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x1f);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_with_encode_08000be8(3,bVar4,0);\n  }\n  if (PTR_DAT_08001964[4] != '\\0') {\n    bVar1 = PTR_DAT_08001968[4];\n    if (PTR_DAT_08001960[0x20] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001960[0x20]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x20);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001960[0x21] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001960[0x21]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x21);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001b44[0x22] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001b44[0x22]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x22);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001b44[0x23] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001b44[0x23]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x23);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001b44[0x24] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001b44[0x24]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x24);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001b44[0x25] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001b44[0x25]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x25);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001b44[0x26] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001b44[0x26]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x26);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001b44[0x27] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_param_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_param_080036ac((int)(char)PTR_DAT_08001b44[0x27]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_if_bit_is_set_08008a6c(0x27);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_with_encode_08000be8(4,bVar4,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080036ac",
                "FUN_08000be8",
                "FUN_08008a6c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ef8",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": true,
            "current_name": "FUNC_08000ef8"
        },
        "FUN_08008846": {
            "renaming": {
                "param_1": "address",
                "FUN_08008846": "set_memory_permissions_08008846",
                "param_2": "size_in_bytes"
            },
            "code": "undefined4 set_memory_permissions_08008846(void* address, int size_in_bytes)\n{\n  *(undefined4 *)(address + 4) = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008846",
            "calling": [
                "FUN_0800a0ec"
            ],
            "imported": true,
            "current_name": "set_memory_permissions_08008846"
        },
        "FUN_0800a430": {
            "renaming": {
                "FUN_0800a430": "do_nothing_0800a430"
            },
            "code": "\nvoid do_nothing_0800a430(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a430",
            "calling": [],
            "imported": true,
            "current_name": "do_nothing_0800a430"
        },
        "FUN_0800459c": {
            "renaming": {
                "buffer_data_start_ptr": "buffer_data_start_ptr",
                "DAT_0804a010": "buffer_data_value",
                "buffer_data_value": "buffer_data_value",
                "buffer_length_ptr": "buffer_length_ptr",
                "param_1": "buffer_ptr",
                "buffer_ptr": "buffer_ptr",
                "buffer_data_ptr": "buffer_data_ptr",
                "FUN_0800459c": "write_byte_to_buffer_0800459c",
                "puVar1": "buffer_data_ptr",
                "PTR_00000009": "buffer_data_start_ptr"
            },
            "code": "int write_byte_to_buffer_0800459c(int *buffer_ptr)\n{\n  short *buffer_length_ptr = (short *)((int)buffer_ptr + 0x2a);\n  if (*buffer_length_ptr != 0) {\n    char *buffer_data_ptr = (char *)buffer_ptr[9];\n    buffer_ptr[9] = (int)(buffer_data_ptr + 1);\n    *buffer_data_ptr = (char)*(int *)(*buffer_ptr + 0x10);\n    *buffer_length_ptr = *buffer_length_ptr - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800459c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "write_byte_to_buffer_0800459c"
        },
        "FUN_0800774a": {
            "renaming": {
                "param_1": "object_ptr",
                "FUN_0800774a": "set_parameter_at_offset_0800774a",
                "param_2": "parameter_value"
            },
            "code": "void set_parameter_at_offset_0800774a(int object_ptr, int parameter_offset, int parameter_value)\n{\n    int parameter_address = *(int *)(object_ptr + 4) + parameter_offset;\n    *(int *)parameter_address = parameter_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800774a",
            "calling": [],
            "imported": true,
            "current_name": "set_parameter_at_offset_0800774a"
        },
        "FUN_080042f0": {
            "renaming": {
                "param_1": "responseParam",
                "DAT_08004308": "responsePtr",
                "FUN_080042f0": "updateAndCheckResponse_080042f0",
                "PTR_08009094": "checkAndProcessResponse"
            },
            "code": "void updateAndCheckResponse_080042f0(uint responseParam) {\n  uint* DAT_08004308 = (uint*)(DAT_08004308 + 0x14);\n  if ((*DAT_08004308 & responseParam) != 0) {\n    *DAT_08004308 = responseParam;\n    PTR_08009094();\n  }\n  return;\n}",
            "called": [
                "FUN_08009094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042f0",
            "calling": [],
            "imported": true,
            "current_name": "updateAndCheckResponse_080042f0"
        },
        "FUN_080027f0": {
            "renaming": {
                "iVar3": "copy_result",
                "puVar2": "destination_buffer_ptr",
                "param_1": "source_offset",
                "param_2": "source_data",
                "FUN_080027f0": "copy_or_allocate_data_080027f0",
                "param_3": "source_length",
                "cVar1": "current_char",
                "uVar5": "new_length",
                "uVar4": "destination_length"
            },
            "code": "uint copy_or_allocate_data_080027f0(int source_offset, undefined4 source_data, uint source_length) {\n  char current_char;\n  undefined *destination_buffer_ptr;\n  int copy_result;\n  undefined destination_length;\n  uint new_length;\n  \n  destination_buffer_ptr = PTR_DAT_08002884;\n  if (*PTR_DAT_08002878 == '\\0') {\n    copy_result = copy_data_08007ede(source_offset + 20, source_data, source_length & 0xffff);\n    if (copy_result != 0) {\n      return 0;\n    }\n    return source_length;\n  }\n  new_length = (byte)*PTR_DAT_0800287c + source_length;\n  if ((byte)*PTR_DAT_08002880 < new_length) {\n    if (new_length < 32) {\n      new_length = 32;\n    }\n    copy_result = allocate_and_copy_08009908(*(undefined4 *)PTR_DAT_08002884, new_length);\n    *(int *)destination_buffer_ptr = copy_result;\n    if (copy_result == 0) {\n      destination_length = 0;\n    }\n    else {\n      destination_length = (undefined)new_length;\n    }\n    *PTR_DAT_08002880 = destination_length;\n  }\n  destination_buffer_ptr = PTR_DAT_08002888;\n  if (*(int *)PTR_DAT_08002884 != 0) {\n    copy_data_to_buffer_080091b0((uint)(byte)*PTR_DAT_08002888 + *(int *)PTR_DAT_08002884, source_data, source_length);\n    current_char = *destination_buffer_ptr + (char)source_length;\n    *destination_buffer_ptr = current_char;\n    *PTR_DAT_0800287c = current_char;\n    return source_length;\n  }\n  *(undefined4 *)(source_offset + 4) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08009908",
                "FUN_080091b0",
                "FUN_08007ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f0",
            "calling": [],
            "imported": true,
            "current_name": "copy_or_allocate_data_080027f0"
        },
        "FUN_0800314e": {
            "renaming": {
                "param_1": "value",
                "FUN_0800314e": "initialize_to_zero_0800314e"
            },
            "code": "void initialize_to_zero_0800314e(int *value)\n{\n  *value = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": true,
            "current_name": "initialize_to_zero_0800314e"
        },
        "FUN_080076e0": {
            "renaming": {
                "setBitInArray_08003fb0": "set_bit_in_array",
                "param_1": "register_values",
                "update_registers_and_return_08007710_08005df4": "update_registers_and_return",
                "FUN_080076e0": "update_registers_and_clear_bits_if_no_error_080076e0",
                "check_timer_08007544": "check_timer",
                "clear_bits_and_update_080062f4": "clear_bits_and_update"
            },
            "code": "void update_registers_and_clear_bits_if_no_error_080076e0(uint32_t *register_values){\n  register_values[19] = 0;\n  char timer_value = check_timer(*register_values);\n  set_bit_in_array((int)timer_value);\n  int error = update_registers_and_return(register_values + 1);\n  if (error == 0) {\n    clear_bits_and_update(register_values + 1,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003fb0",
                "FUN_080062f4",
                "FUN_08007544",
                "FUN_08005df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076e0",
            "calling": [
                "FUN_08002578"
            ],
            "imported": true,
            "current_name": "update_registers_and_clear_bits_if_no_error_080076e0"
        },
        "FUN_08002f14": {
            "renaming": {
                "send_encoded_messages_to_server_and_find_end_of_string_080032a2": "send_encoded_messages_to_server",
                "param_1": "message_address",
                "encoded_message_address": "encoded_message_address",
                "FUN_08002f14": "send_encoded_messages_to_server_and_find_end_of_string_08002f14"
            },
            "code": "void send_encoded_messages_to_server_and_find_end_of_string_08002f14(int message_address)\n{\n  int encoded_message_address = message_address + 0x40;\n  send_encoded_messages_to_server(encoded_message_address);\n  return;\n}",
            "called": [
                "FUN_080032a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f14",
            "calling": [
                "FUN_08001c18",
                "FUN_08000500",
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": true,
            "current_name": "send_encoded_messages_to_server_and_find_end_of_string_08002f14"
        },
        "FUN_080036a2": {
            "renaming": {
                "FUN_080036a2": "initialize_device_and_update_value_080036a2"
            },
            "code": "void initialize_device_and_update_value_080036a2() {\n  initialize_device_and_update_value_080036a2_080072fa();\n  return;\n}",
            "called": [
                "FUN_080072fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a2",
            "calling": [
                "FUN_08008f0e"
            ],
            "imported": true,
            "current_name": "initialize_device_and_update_value_080036a2"
        },
        "FUN_080038e4": {
            "renaming": {
                "local_c": "i",
                "iVar3": "config_ptr_value",
                "uVar1": "result",
                "param_1": "config_data",
                "param_2": "config_ptr",
                "uVar2": "config_index",
                "FUN_080038e4": "set_config_080038e4"
            },
            "code": "int set_config_080038e4(uint *config_data, int *config_ptr) {\n    int result = 2;\n    if (*(char *)(config_ptr + 9) != 1) {\n        *(undefined *)(config_ptr + 9) = 1;\n        uint config_index = config_data[1];\n        if (config_index < 7) {\n            config_index = config_index * 5 - 5;\n            *(uint *)(*config_ptr + 0x34) = config_data[0] << (config_index & 0xff) | *(uint *)(*config_ptr + 0x34) & ~(0x1f << (config_index & 0xff));\n        }\n        else if (config_index < 0xd) {\n            config_index = config_index * 5 - 0x23;\n            *(uint *)(*config_ptr + 0x30) = config_data[0] << (config_index & 0xff) | *(uint *)(*config_ptr + 0x30) & ~(0x1f << (config_index & 0xff));\n        }\n        else {\n            config_index = config_index * 5 - 0x41;\n            *(uint *)(*config_ptr + 0x2c) = config_data[0] << (config_index & 0xff) | *(uint *)(*config_ptr + 0x2c) & ~(0x1f << (config_index & 0xff));\n        }\n        config_index = config_data[0];\n        if (config_index < 10) {\n            *(uint *)(*config_ptr + 0x10) = config_data[2] << (config_index * 3 & 0xff) | *(uint *)(*config_ptr + 0x10) & ~(7 << (config_index * 3 & 0xff));\n        }\n        else {\n            config_index = config_index * 3 - 0x1e;\n            *(uint *)(*config_ptr + 0xc) = config_data[2] << (config_index & 0xff) | *(uint *)(*config_ptr + 0xc) & ~(7 << (config_index & 0xff));\n        }\n        if (config_data[0] - 0x10 < 2) {\n            int config_ptr_value = *config_ptr;\n            if (config_ptr_value == DAT_08003a10) {\n                if ((*(uint *)(config_ptr_value + 8) & 0x800000) == 0) {\n                    *(uint *)(config_ptr_value + 8) |= 0x800000;\n                    if (config_data[0] == 0x10) {\n                        for (int i = (uint)((ulonglong)DAT_08003a18 * (ulonglong)*(uint *)PTR_DAT_08003a14 >> 0x32) * 10; i != 0; i--) {\n                        }\n                        result = 0;\n                    }\n                    else {\n                        result = 0;\n                    }\n                }\n                else {\n                    result = 0;\n                }\n            }\n            else {\n                config_ptr[10] |= 0x20;\n                result = 1;\n            }\n        }\n        *(undefined *)(config_ptr + 9) = 0;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038e4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "set_config_080038e4"
        },
        "FUN_08005e68": {
            "renaming": {
                "FUN_08005e68": "do_nothing_08005e68"
            },
            "code": "\nvoid do_nothing_08005e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e68",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": true,
            "current_name": "do_nothing_08005e68"
        },
        "FUN_08005d48": {
            "renaming": {
                "data6": "data6",
                "data5": "data5",
                "mask4": "mask4",
                "data4": "data4",
                "uVar1": "data1",
                "data3": "data3",
                "data2": "data2",
                "mask1": "mask1",
                "data1": "data1",
                "mask3": "mask3",
                "param_1": "data_address",
                "mask2": "mask2",
                "DAT_08005da8": "PTR_DAT_08005da8",
                "param_2": "data_values",
                "uVar3": "data3",
                "uVar2": "data2",
                "FUN_08005d48": "update_data_08005d48"
            },
            "code": "void update_data_08005d48(int data_address, uint *data_values)\n{\n  uint mask1 = 0xfffffeff;\n  uint mask2 = 0xfffffdff;\n  uint mask3 = 0xfffff7ff;\n  uint mask4 = 0xfffffbff;\n  uint data1 = *(uint *)(data_address + 0x20);\n  uint data2 = *(uint *)(data_address + 4);\n  uint data3 = *data_values;\n  uint data4 = data_values[2] << 8;\n  uint data5 = data_values[1];\n  uint data6 = 0;\n  if (data_address == DAT_08005da8) {\n    data4 |= data_values[3] << 8;\n    data6 = data_values[5] << 4 | data_values[6] << 4;\n    data2 = (data2 & 0xffffcfff) | data6;\n    data1 = (data1 & mask2) | data4 & mask4;\n  }\n  data1 = (data1 & mask1) | data4;\n  *(uint *)(data_address + 4) = data2;\n  *(uint *)(data_address + 0x1c) = (*(uint *)(data_address + 0x1c) & 0xffffff8c) | data3;\n  *(uint *)(data_address + 0x3c) = data5;\n  *(uint *)(data_address + 0x20) = data1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d48",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": true,
            "current_name": "update_data_08005d48"
        }
    },
    "used_tokens": 290910,
    "layers": [
        [
            "FUN_08002c2c",
            "FUN_08000178",
            "FUN_0800735a",
            "FUN_08008c20",
            "FUN_080043a2",
            "FUN_08008df8",
            "FUN_08006b5c",
            "FUN_08000188",
            "FUN_0800344a",
            "FUN_08008e72",
            "FUN_0800291c",
            "FUN_08003346",
            "FUN_080032bc",
            "FUN_08003f94",
            "FUN_0800430c",
            "FUN_08003350",
            "FUN_08006b7c",
            "FUN_08005fe8",
            "FUN_08008804",
            "FUN_0800738a",
            "FUN_08004e3c",
            "FUN_08007718",
            "FUN_08002a30",
            "FUN_0800322c",
            "FUN_080099a4",
            "FUN_08005a1c",
            "FUN_08003760",
            "FUN_08003fd8",
            "FUN_0800307a",
            "FUN_08008d00",
            "FUN_08004b82",
            "FUN_08003f30",
            "FUN_08007f78",
            "FUN_08006b28",
            "FUN_08006b1c",
            "FUN_08008f3c",
            "FUN_08007332",
            "FUN_080073e8",
            "FUN_08004a76",
            "FUN_0800267c",
            "FUN_080047f4",
            "FUN_080033a8",
            "FUN_08008d18",
            "FUN_08005840",
            "FUN_08003306",
            "FUN_080060c4",
            "FUN_08002f84",
            "FUN_08009f2c",
            "FUN_0800a154",
            "FUN_08002580",
            "FUN_08006b3e",
            "FUN_08006262",
            "FUN_080073ec",
            "FUN_08008ef4",
            "FUN_08005a68",
            "FUN_08002f94",
            "FUN_080068d6",
            "FUN_08009148",
            "FUN_08008854",
            "FUN_080064cc",
            "FUN_08004d6c",
            "FUN_08008850",
            "FUN_08002fc2",
            "FUN_08008afa",
            "FUN_080038dc",
            "FUN_08008858",
            "FUN_08004a24",
            "FUN_08002fba",
            "FUN_080049e0",
            "FUN_08006d24",
            "FUN_080048c8",
            "FUN_08009954",
            "FUN_08004024",
            "FUN_08002400",
            "FUN_08008868",
            "FUN_080036ac",
            "FUN_08002f1e",
            "FUN_080026f8",
            "FUN_08004396",
            "FUN_08003fb0",
            "FUN_08002ec4",
            "FUN_08007306",
            "FUN_08002f2c",
            "FUN_08004954",
            "FUN_08005cec",
            "FUN_0800886c",
            "FUN_08003748",
            "FUN_080040e8",
            "FUN_0800010c",
            "FUN_080086e8",
            "FUN_08004046",
            "FUN_080073ae",
            "FUN_08003f0c",
            "FUN_08006bb8",
            "FUN_08007438",
            "FUN_0800887c",
            "FUN_08004728",
            "FUN_08007ede",
            "thunk_FUN_0800887c",
            "FUN_080074e0",
            "FUN_080073c0",
            "FUN_08004050",
            "FUN_080095a8",
            "FUN_08003366",
            "FUN_080091b0",
            "FUN_08009108",
            "FUN_080005e0",
            "FUN_08005dac",
            "FUN_0800270c",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_08005430",
            "FUN_08002720",
            "FUN_08005434",
            "FUN_08004ccc",
            "FUN_080042d4",
            "FUN_0800542a",
            "FUN_0800457c",
            "FUN_080091c6",
            "FUN_080064b0",
            "FUN_08009124",
            "FUN_08002fa0",
            "FUN_08003a1c",
            "FUN_08007744",
            "FUN_080042e2",
            "FUN_08002fa8",
            "FUN_080091d8",
            "FUN_0800688e",
            "FUN_08008840",
            "FUN_08003154",
            "FUN_08006420",
            "FUN_08007750",
            "FUN_08009938",
            "FUN_08004004",
            "FUN_08008846",
            "FUN_0800459c",
            "FUN_0800774a",
            "FUN_0800314e",
            "FUN_080038e4",
            "FUN_08005d48"
        ],
        [
            "FUN_08007246",
            "FUN_08008694",
            "FUN_08002ce0",
            "FUN_080072f0",
            "FUN_0800a168",
            "FUN_0800723c",
            "FUN_08006280",
            "FUN_08007258",
            "FUN_0800a0ec",
            "FUN_08007376",
            "FUN_080033cc",
            "FUN_08003106",
            "FUN_08007708",
            "FUN_0800018c",
            "FUN_08006186",
            "FUN_08007710",
            "FUN_08008e7c",
            "FUN_080091a0",
            "FUN_08002948",
            "FUN_08007320",
            "FUN_0800319e",
            "FUN_0800997e",
            "FUN_080085dc",
            "FUN_0800a130",
            "FUN_08006128",
            "FUN_080062f4",
            "FUN_08005a48",
            "FUN_08007f7c",
            "FUN_080072d8",
            "FUN_08007e74",
            "FUN_08002ddc",
            "FUN_08007f8e",
            "FUN_08007110",
            "FUN_08009fe8",
            "FUN_0800734a",
            "FUN_08000aec",
            "FUN_08006390",
            "FUN_08008730",
            "FUN_08006ca8",
            "FUN_080063c0",
            "FUN_08005aa4",
            "FUN_0800643c",
            "FUN_080085b8",
            "FUN_08001c08",
            "FUN_08007ff0",
            "FUN_080036d8",
            "FUN_0800a110",
            "FUN_08003b8c",
            "FUN_08006460",
            "FUN_08008e14",
            "FUN_08005a28",
            "FUN_08008020",
            "FUN_0800771c",
            "FUN_080066e8",
            "FUN_08007fa0",
            "FUN_08008bf4",
            "FUN_080031ce",
            "FUN_08009918",
            "FUN_08007736",
            "FUN_08003a20",
            "FUN_08009cdc",
            "FUN_080026b0",
            "FUN_08006092",
            "FUN_080004d4",
            "FUN_08005cb4",
            "FUN_0800325a",
            "FUN_0800870c",
            "FUN_08007f0e",
            "FUN_080090c2"
        ],
        [
            "FUN_080067ac",
            "FUN_0800694c",
            "FUN_08006c7c",
            "FUN_08004f3c",
            "FUN_08003de4",
            "FUN_08006060",
            "FUN_08003474",
            "FUN_08003aa0",
            "FUN_08003ce8",
            "FUN_08009e64",
            "FUN_08002dbc",
            "FUN_080058d2",
            "FUN_08008ed6",
            "FUN_0800a020",
            "FUN_08006c60",
            "FUN_08006932",
            "FUN_080045c0",
            "FUN_08002efe",
            "FUN_08002df6",
            "FUN_08002c1e",
            "FUN_08008f78",
            "FUN_08008d30",
            "FUN_080032a2",
            "FUN_08005df4",
            "FUN_08004ac2",
            "FUN_08003724",
            "FUN_08002f0a",
            "FUN_08005bb8",
            "FUN_08009270",
            "FUN_08005e6e",
            "FUN_08009b5c",
            "FUN_08008a6c",
            "FUN_080058ac",
            "FUN_08004aec",
            "FUN_0800863c",
            "FUN_080084b0",
            "FUN_08003bd8",
            "FUN_08008a24",
            "FUN_08008abc",
            "FUN_08005e2e",
            "FUN_08002968",
            "FUN_0800a07a",
            "FUN_08002a58",
            "FUN_08006538",
            "FUN_08008600",
            "FUN_08003158"
        ],
        [
            "FUN_080069ec",
            "FUN_08009d24",
            "FUN_080071e4",
            "FUN_08005084",
            "FUN_08002ac0",
            "FUN_08002a1c",
            "FUN_08000be8",
            "FUN_08009190",
            "FUN_08002ef2",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08009eac",
            "FUN_08008eec",
            "FUN_080090cc",
            "FUN_08008500",
            "FUN_08002fca",
            "FUN_080052f0",
            "FUN_08002e26",
            "FUN_080035b8",
            "FUN_08002ed2",
            "FUN_08009908",
            "FUN_0800674e",
            "FUN_08008d8c",
            "FUN_08008b66",
            "FUN_08002f14"
        ],
        [
            "FUN_08005188",
            "FUN_080072fa",
            "FUN_08008c44",
            "FUN_08002a26",
            "FUN_08002acc",
            "FUN_08002e44",
            "FUN_08006d80",
            "FUN_0800885c",
            "FUN_08008990",
            "FUN_0800288c",
            "FUN_080027f0"
        ],
        [
            "FUN_0800a042",
            "FUN_08001bf8",
            "FUN_08000a64",
            "FUN_08008880",
            "FUN_08003002",
            "FUN_08002b68",
            "FUN_080036a2"
        ],
        [
            "FUN_08002c00",
            "FUN_08003048",
            "FUN_08008f0e",
            "FUN_08000488"
        ],
        [
            "FUN_08002c14",
            "FUN_08001b48"
        ],
        [
            "FUN_08001c18"
        ],
        [
            "FUN_080022f8"
        ],
        [
            "FUN_08008f1c"
        ],
        [
            "FUN_08003658"
        ],
        [
            "FUN_0800a18c"
        ],
        [
            "FUN_08009084"
        ],
        [
            "FUN_08009094"
        ],
        [
            "FUN_080042f0"
        ],
        [
            "FUN_08009db0",
            "FUN_08009a80",
            "FUN_080098d8",
            "FUN_08009c7c"
        ],
        [
            "FUN_08007594",
            "FUN_08007544",
            "FUN_08009d50"
        ],
        [
            "FUN_0800932c",
            "FUN_080075dc",
            "FUN_080076e0"
        ],
        [
            "FUN_08002578",
            "FUN_08007118",
            "FUN_08007648",
            "FUN_08009358"
        ],
        [
            "FUN_0800242c",
            "FUN_08002644",
            "FUN_080088e0"
        ],
        [
            "FUN_08000214",
            "FUN_080025ac",
            "FUN_08000588",
            "FUN_0800021a"
        ],
        [
            "FUN_08002634"
        ],
        [
            "FUN_08000500"
        ]
    ],
    "locked_functions": []
}