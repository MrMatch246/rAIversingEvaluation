{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeFlag_0800010c(undefined4 inputValue)\n\n{\n  if ((char)DAT_200000f4 == '\\0') {\n    DAT_200000f4._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_0800a424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "find_end_of_string_08000178",
            "code": "\nchar * find_end_of_string_08000178(char *input_string)\n\n{\n  char current_char;\n  char *next_char_ptr;\n  char *current_char_ptr;\n  \n  current_char_ptr = input_string;\n  do {\n    next_char_ptr = current_char_ptr + 1;\n    current_char = *current_char_ptr;\n    current_char_ptr = next_char_ptr;\n  } while (current_char != '\\0');\n  return next_char_ptr + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "input_string",
                "cVar1": "current_char",
                "pcVar2": "next_char_ptr",
                "pcVar3": "current_char_ptr"
            },
            "calling": [
                "FUN_08002e44",
                "FUN_080032a2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "send_software_interrupt_08000188",
            "code": "\nvoid sendSoftwareInterrupt_08000188(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000188": "send_software_interrupt_08000188"
            },
            "calling": [
                "FUN_0800018c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800018c": {
            "entrypoint": "0x0800018c",
            "current_name": "send_interrupt_0800018c",
            "code": "\nundefined4 send_interrupt_0800018c(undefined4 data,undefined4 unused_param1,undefined4 unused_param2,undefined4 unused_param3)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000110 != 0) {\n    return 0;\n  }\n  result = send_software_interrupt_08000188(1,data,0,0,unused_param3);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800018c": "send_interrupt_0800018c",
                "param_1": "data",
                "param_2": "unused_param1",
                "param_3": "unused_param2",
                "param_4": "unused_param3",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08000188"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000214": {
            "entrypoint": "0x08000214",
            "current_name": "process_character_08000214",
            "code": "\nvoid process_character_08000214(uint character_offset,undefined4 parameter_2,undefined4 parameter_3,undefined4 parameter_4)\n\n{\n  bool is_valid_character;\n  int result;\n  \n  if (0x3b < (int)character_offset) {\n    return;\n  }\n  result = get_character_at_offset(&DAT_200003d4,character_offset,parameter_3,parameter_4,parameter_4);\n  if (result == 3) {\n    if (character_offset < 0x3c) {\n      if ((&DAT_0800a908)[character_offset] == -1) {\n        result = 0;\n      }\n      else {\n        result = check_character_presence();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = check_character_presence((int)(char)(&DAT_0800a908)[character_offset]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = check_match((int)(char)(&DAT_0800a908)[character_offset],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      process_and_update_data(character_offset,parameter_2);\n    }\n    write_value_to_memory(&DAT_200003d4,character_offset,parameter_2);\n  }\n  else if (result == 4) {\n    if (character_offset < 0x3c) {\n      if ((&DAT_0800a908)[character_offset] == -1) {\n        is_valid_character = false;\n      }\n      else {\n        result = check_character_presence();\n        if (result == 0) {\n          is_valid_character = false;\n        }\n        else {\n          result = check_character_presence((int)(char)(&DAT_0800a908)[character_offset]);\n          if (result == 1) {\n            is_valid_character = false;\n          }\n          else {\n            is_valid_character = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid_character = false;\n    }\n    if (is_valid_character) {\n      update_data(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[character_offset] * 3,parameter_2);\n    }\n    write_value_to_memory(&DAT_200003d4,character_offset,parameter_2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000214": "process_character_08000214",
                "param_1": "character_offset",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "bVar1": "is_valid_character",
                "iVar2": "result",
                "get_char_from_offset_08002fa0": "get_character_at_offset",
                "check_character_presence_080036ac": "check_character_presence",
                "check_match_0800738a": "check_match",
                "process_and_update_data_080088e0": "process_and_update_data",
                "write_value_to_memory_08002fc2": "write_value_to_memory",
                "update_data_080026b0": "update_data"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800021a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800021a": {
            "entrypoint": "0x0800021a",
            "current_name": "check_and_update_data_0800021a",
            "code": "\nvoid check_and_update_data_0800021a(uint offset,undefined4 value,undefined4 param_3,undefined4 param_4)\n\n{\n  bool isValid;\n  int result;\n  \n  result = get_char_from_offset_08002fa0(&DAT_200003d4,offset,param_3,param_4,param_4);\n  if (result == 3) {\n    if (offset < 0x3c) {\n      if ((&DAT_0800a908)[offset] == -1) {\n        result = 0;\n      }\n      else {\n        result = check_character_presence_080036ac();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[offset]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = check_match_0800738a((int)(char)(&DAT_0800a908)[offset],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      process_and_update_data_080088e0(offset,value);\n    }\n    write_value_to_memory_08002fc2(&DAT_200003d4,offset,value);\n  }\n  else if (result == 4) {\n    if (offset < 0x3c) {\n      if ((&DAT_0800a908)[offset] == -1) {\n        isValid = false;\n      }\n      else {\n        result = check_character_presence_080036ac();\n        if (result == 0) {\n          isValid = false;\n        }\n        else {\n          result = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[offset]);\n          if (result == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      update_data_080026b0(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[offset] * 3,value);\n    }\n    write_value_to_memory_08002fc2(&DAT_200003d4,offset,value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800021a": "check_and_update_data_0800021a",
                "param_1": "offset",
                "param_2": "value",
                "bVar1": "isValid",
                "iVar2": "result"
            },
            "calling": [
                "FUN_08000214"
            ],
            "called": [
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_080026b0",
                "FUN_0800738a",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000488": {
            "entrypoint": "0x08000488",
            "current_name": "update_data_08000488",
            "code": "\nvoid updateData_08000488(uint index,int value)\n\n{\n  undefined4 processedData;\n  \n  if ((int)index < 0xe) {\n    if (value == 0) {\n      DAT_20000114 = DAT_20000114 & ~(1 << (index & 0xff));\n      return;\n    }\n    DAT_20000114 = 1 << (index & 0xff) | DAT_20000114;\n    if (DAT_20000171 == '\\0') {\n      processedData = processData();\n      compressData(&DAT_200003d4,index,processedData);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000488": "update_data_08000488",
                "param_1": "index",
                "param_2": "value",
                "uVar1": "processedData",
                "process_data_08008880": "processData",
                "compress_data_08002ef2": "compressData"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d4": {
            "entrypoint": "0x080004d4",
            "current_name": "initialize_data_if_param1_is_1_080004d4",
            "code": "\nvoid initialize_data_if_param1_is_1_080004d4(int is_param1,int param2)\n\n{\n  int loop_counter;\n  undefined *data_ptr;\n  \n  if (is_param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    data_ptr = &DAT_2000022c;\n    for (loop_counter = 0xb; -1 < loop_counter; loop_counter = loop_counter + -1) {\n      initialize_data_08002580(data_ptr);\n      data_ptr = data_ptr + 3;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004d4": "initialize_data_if_param1_is_1_080004d4",
                "param_1": "is_param1",
                "param_2": "param2",
                "iVar1": "loop_counter",
                "puVar2": "data_ptr"
            },
            "calling": [],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000500": {
            "entrypoint": "0x08000500",
            "current_name": "initialize_or_update_device_08000500",
            "code": "\nvoid initializeOrUpdateDevice_08000500(int deviceIndex,int value1,int value2,undefined4 value3)\n\n{\n  if (0xb < DAT_200001ed) {\n    decompress_data_08002f14(&DAT_200003d4,\"Max servos attached\",value2,value3,value3);\n    return;\n  }\n  if (DAT_2000011c == 0) {\n    (&DAT_200001f0)[deviceIndex] = DAT_200001ed;\n    DAT_200001ed = DAT_200001ed + 1;\n  }\n  else {\n    (&DAT_200001f0)[deviceIndex] = (&DAT_2000011f)[DAT_2000011c];\n    DAT_2000011c = DAT_2000011c - 1;\n  }\n  if ((0 < value1) && (0 < value2)) {\n    initialize_and_update_device_080025ac(&DAT_2000022c + (uint)(byteValue)(&DAT_200001f0)[deviceIndex] * 3,deviceIndex,value1,value2);\n    return;\n  }\n  initialize_and_update_device_08002634(&DAT_2000022c + (uint)(byteValue)(&DAT_200001f0)[deviceIndex] * 3,deviceIndex);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000500": "initialize_or_update_device_08000500",
                "param_1": "deviceIndex",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "byte": "byteValue"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002634",
                "FUN_080025ac",
                "FUN_08002f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000588": {
            "entrypoint": "0x08000588",
            "current_name": "update_flag_08000588",
            "code": "\nvoid update_flag_08000588(int index)\n\n{\n  update_flag_08000588_and_check_08002644(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3);\n  if (((&DAT_200001f0)[index] == DAT_200001ed) && (DAT_200001ed != '\\0')) {\n    DAT_200001ed = DAT_200001ed + -1;\n  }\n  else if (DAT_200001ed != '\\0') {\n    DAT_2000011c = DAT_2000011c + 1;\n    (&DAT_2000011f)[DAT_2000011c] = (&DAT_200001f0)[index];\n  }\n  (&DAT_200001f0)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000588": "update_flag_08000588",
                "param_1": "index"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002644"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "initialize_data_080005e0",
            "code": "\nvoid initializeData_080005e0(void)\n\n{\n  DAT_20000170 = 0;\n  DAT_20000004 = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "initialize_data_080005e0"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005f8": {
            "entrypoint": "0x080005f8",
            "current_name": "process_data_080005f8",
            "code": "\nvoid processData_080005f8(uint dataOffset,int mode)\n\n{\n  int result;\n  char flag;\n  bool isValid;\n  uint adjustedOffset;\n  \n  result = get_char_from_offset_08002fa0(&DAT_200003d4,dataOffset);\n  if (result != 0x7f) {\n    result = get_char_from_offset_08002fa0(&DAT_200003d4,dataOffset);\n    if (result == 6) {\n      if (DAT_20000170 == '\\0') {\n        flag = '\\0';\n      }\n      else {\n        flag = DAT_20000170;\n        if (mode == 6) {\n          flag = '\\0';\n        }\n      }\n    }\n    else {\n      flag = '\\0';\n    }\n    if (flag != '\\0') {\n      initialize_data_080005e0();\n    }\n    if (dataOffset < 0x3c) {\n      if ((&DAT_0800a908)[dataOffset] == -1) {\n        isValid = false;\n      }\n      else {\n        result = check_character_presence_080036ac();\n        if (result == 0) {\n          isValid = false;\n        }\n        else {\n          result = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[dataOffset]);\n          if (result == 1) {\n            isValid = false;\n          }\n          else if (mode == 4) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      if ((byte)(&DAT_200001f0)[dataOffset] < 0xc) {\n        result = extract_bit_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[dataOffset] * 3);\n      }\n      else {\n        result = 0;\n      }\n      if (result != 0) {\n        update_flag_08000588(dataOffset);\n      }\n    }\n    adjustedOffset = dataOffset - 0x2e & 0xff;\n    if (adjustedOffset < 0xe) {\n      if (dataOffset < 0x3c) {\n        result = (int)(char)(&DAT_0800a908)[dataOffset];\n      }\n      else {\n        result = -1;\n      }\n      result = check_character_presence_080036ac(result);\n      if (result == 0) {\n        isValid = false;\n      }\n      else {\n        if (dataOffset < 0x3c) {\n          result = (int)(char)(&DAT_0800a908)[dataOffset];\n        }\n        else {\n          result = -1;\n        }\n        result = check_character_presence_080036ac(result);\n        if (result == 1) {\n          isValid = false;\n        }\n        else {\n          isValid = true;\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      update_data_08000488(adjustedOffset,mode == 2);\n    }\n    if (dataOffset < 0x3c) {\n      if ((&DAT_0800a908)[dataOffset] == -1) {\n        isValid = false;\n      }\n      else {\n        result = check_character_presence_080036ac();\n        if (result == 0) {\n          isValid = false;\n        }\n        else {\n          result = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[dataOffset]);\n          if (result == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      if ((mode == 0) || (mode == 0xb)) {\n        (&DAT_20000174)[dataOffset >> 3] = (&DAT_20000174)[dataOffset >> 3] | (byte)(1 << (dataOffset & 7));\n      }\n      else {\n        (&DAT_20000174)[dataOffset >> 3] = (&DAT_20000174)[dataOffset >> 3] & ~(byte)(1 << (dataOffset & 7));\n      }\n    }\n    write_value_to_memory_08002fc2(&DAT_200003d4,dataOffset,0);\n    switch(mode) {\n    case 0:\n      if (dataOffset < 0x3c) {\n        if ((&DAT_0800a908)[dataOffset] == -1) {\n          isValid = false;\n        }\n        else {\n          result = check_character_presence_080036ac();\n          if (result == 0) {\n            isValid = false;\n          }\n          else {\n            result = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[dataOffset]);\n            if (result == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        initialize_device_08008990(dataOffset,0);\n        update_char_if_not_x7_f_08002fa8(&DAT_200003d4,dataOffset,0);\n        return;\n      }\n      break;\n    case 1:\n      if (dataOffset < 0x3c) {\n        if ((&DAT_0800a908)[dataOffset] == -1) {\n          isValid = false;\n        }\n        else {\n          result = check_character_presence_080036ac();\n          if (result == 0) {\n            isValid = false;\n          }\n          else {\n            result = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[dataOffset]);\n            if (result == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        result = get_char_from_offset_08002fa0(&DAT_200003d4,dataOffset);\n        if (result == 3) {\n          decode_and_update_param_08008a24(dataOffset,0);\n        }\n        initialize_device_08008990(dataOffset,1);\n        update_char_if_not_x7_f_08002fa8(&DAT_200003d4,dataOffset,1);\n        return;\n      }\n      break;\n    case 2:\n      if (adjustedOffset < 0xe) {\n        if (dataOffset < 0x3c) {\n          result = (int)(char)(&DAT_0800a908)[dataOffset];\n        }\n        else {\n          result = -1;\n        }\n        result = check_character_presence_080036ac(result);\n        if (result == 0) {\n          isValid = false;\n        }\n        else {\n          if (dataOffset < 0x3c) {\n            result = (int)(char)(&DAT_0800a908)[dataOffset];\n          }\n          else {\n            result = -1;\n          }\n          result = check_character_presence_080036ac(result);\n          if (result == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        if (dataOffset < 0x3c) {\n          if ((&DAT_0800a908)[dataOffset] == -1) {\n            isValid = false;\n          }\n          else {\n            result = check_character_presence_080036ac();\n            if (result == 0) {\n              isValid = false;\n            }\n            else {\n              result = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[dataOffset]);\n              if (result == 1) {\n                isValid = false;\n              }\n            }\n          }\n        }\n        else {\n          isValid = false;\n        }\n        if (isValid) {\n          initialize_device_08008990(dataOffset,0);\n        }\n        update_char_if_not_x7_f_08002fa8(&DAT_200003d4,dataOffset,2);\n        return;\n      }\n      break;\n    case 3:\n      if (dataOffset < 0x3c) {\n        if ((&DAT_0800a908)[dataOffset] == -1) {\n          result = 0;\n        }\n        else {\n          result = check_character_presence_080036ac();\n          if (result == 0) {\n            result = 0;\n          }\n          else {\n            result = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[dataOffset]);\n            if (result == 1) {\n              result = 0;\n            }\n            else {\n              result = check_match_0800738a((int)(char)(&DAT_0800a908)[dataOffset],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        result = 0;\n      }\n      if (result != 0) {\n        initialize_device_08008990(dataOffset,1);\n        process_and_update_data_080088e0(dataOffset,0);\n        update_char_if_not_x7_f_08002fa8(&DAT_200003d4,dataOffset,3);\n        return;\n      }\n      break;\n    case 4:\n      if (dataOffset < 0x3c) {\n        if ((&DAT_0800a908)[dataOffset] == -1) {\n          isValid = false;\n        }\n        else {\n          result = check_character_presence_080036ac();\n          if (result == 0) {\n            isValid = false;\n          }\n          else {\n            result = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[dataOffset]);\n            if (result == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        update_char_if_not_x7_f_08002fa8(&DAT_200003d4,dataOffset,4);\n        if (((byte)(&DAT_200001f0)[dataOffset] != 0xff) &&\n           (result = extract_bit_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[dataOffset] * 3),\n           result != 0)) {\n          isValid = false;\n        }\n        if (isValid) {\n          initialize_or_update_device_08000500(dataOffset,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      decompress_data_08002f14(&DAT_200003d4,\"Unknown pin mode\");\n      break;\n    case 6:\n      if (dataOffset < 0x3c) {\n        if ((&DAT_0800a908)[dataOffset] == -1) {\n          result = 0;\n        }\n        else {\n          result = check_character_presence_080036ac();\n          if (result == 0) {\n            result = 0;\n          }\n          else {\n            result = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[dataOffset]);\n            if (result == 1) {\n              result = 0;\n            }\n            else {\n              result = check_match_0800738a((int)(char)(&DAT_0800a908)[dataOffset],&DAT_0800a69c);\n              if (result == 0) {\n                result = check_match_0800738a((int)(char)(&DAT_0800a908)[dataOffset],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        result = 0;\n      }\n      if (result != 0) {\n        update_char_if_not_x7_f_08002fa8(&DAT_200003d4,dataOffset,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (dataOffset < 0x3c) {\n        if ((&DAT_0800a908)[dataOffset] == -1) {\n          isValid = false;\n        }\n        else {\n          result = check_character_presence_080036ac();\n          if (result == 0) {\n            isValid = false;\n          }\n          else {\n            result = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[dataOffset]);\n            if (result == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        initialize_device_08008990(dataOffset,2);\n        update_char_if_not_x7_f_08002fa8(&DAT_200003d4,dataOffset,0xb);\n        write_value_to_memory_08002fc2(&DAT_200003d4,dataOffset,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005f8": "process_data_080005f8",
                "param_1": "dataOffset",
                "param_2": "mode",
                "iVar1": "result",
                "cVar2": "flag",
                "bVar3": "isValid",
                "uVar4": "adjustedOffset"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_08000aec"
            ],
            "called": [
                "FUN_080026f8",
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_08002fa8",
                "FUN_080088e0",
                "FUN_08008a24",
                "FUN_080005e0",
                "FUN_08000588",
                "FUN_08000488",
                "FUN_08002f14",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a64": {
            "entrypoint": "0x08000a64",
            "current_name": "process_characters_08000a64",
            "code": "\nvoid process_characters_08000a64(void)\n\n{\n  int presence_check;\n  uint character_index;\n  \n  for (character_index = 0; character_index < 0x3c; character_index = character_index + 1 & 0xff) {\n    if (character_index < 0x3c) {\n      if ((&DAT_0800a908)[character_index] == -1) {\n        presence_check = 0;\n      }\n      else {\n        presence_check = check_character_presence_080036ac();\n        if (presence_check == 0) {\n          presence_check = 0;\n        }\n        else {\n          presence_check = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[character_index]);\n          if (presence_check == 1) {\n            presence_check = 0;\n          }\n          else {\n            presence_check = check_match_0800738a((int)(char)(&DAT_0800a908)[character_index],&DAT_0800a69c);\n            if (presence_check == 0) {\n              presence_check = check_match_0800738a((int)(char)(&DAT_0800a908)[character_index],&DAT_0800a66c);\n            }\n          }\n        }\n      }\n    }\n    else {\n      presence_check = 0;\n    }\n    if (presence_check != 0) {\n      process_data_080005f8(character_index,6);\n    }\n  }\n  DAT_20000170 = 1;\n  initialize_i2_c_pins_08002a26(&DAT_20000314);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a64": "process_characters_08000a64",
                "iVar1": "presence_check",
                "uVar2": "character_index"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_080005f8",
                "FUN_080036ac",
                "FUN_08002a26",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "initialize_data_08000aec",
            "code": "\nvoid initializeData_08000aec(void)\n\n{\n  bool isCharacterValid;\n  int characterPresence;\n  uint index;\n  \n  DAT_20000171 = 1;\n  if (DAT_20000170 != '\\0') {\n    initialize_data_080005e0();\n  }\n  for (index = 0; index < 5; index = index + 1 & 0xff) {\n    (&DAT_200001e8)[index] = 0;\n    (&DAT_20000174)[index] = 0;\n    (&DAT_20000180)[index] = 0;\n  }\n  for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n    if ((index - 0x2e & 0xff) < 0xe) {\n      if (index < 0x3c) {\n        characterPresence = (int)(char)(&DAT_0800a908)[index];\n      }\n      else {\n        characterPresence = -1;\n      }\n      characterPresence = check_character_presence_080036ac(characterPresence);\n      if (characterPresence == 0) {\n        isCharacterValid = false;\n      }\n      else {\n        if (index < 0x3c) {\n          characterPresence = (int)(char)(&DAT_0800a908)[index];\n        }\n        else {\n          characterPresence = -1;\n        }\n        characterPresence = check_character_presence_080036ac(characterPresence);\n        if (characterPresence == 1) {\n          isCharacterValid = false;\n        }\n        else {\n          isCharacterValid = true;\n        }\n      }\n    }\n    else {\n      isCharacterValid = false;\n    }\n    if (isCharacterValid) {\n      process_data_080005f8(index,2);\n    }\n    else {\n      if ((((index < 0x3c) && ((&DAT_0800a908)[index] != -1)) &&\n          (characterPresence = check_character_presence_080036ac(), characterPresence != 0)) &&\n         (characterPresence = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[index]), characterPresence != 1)) {\n        isCharacterValid = true;\n      }\n      if (isCharacterValid) {\n        process_data_080005f8(index,1);\n      }\n    }\n    (&DAT_200001f0)[index] = 0xff;\n  }\n  DAT_20000114 = 0;\n  DAT_2000011c = 0;\n  DAT_200001ed = 0;\n  DAT_20000171 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "initialize_data_08000aec",
                "bVar1": "isCharacterValid",
                "iVar2": "characterPresence",
                "uVar3": "index"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000be8": {
            "entrypoint": "0x08000be8",
            "current_name": "execute_data_processing_08000be8",
            "code": "\nvoid execute_data_processing_08000be8(int index,uint mask,int condition,undefined4 parameter)\n\n{\n  undefined1 *data_ptr_1;\n  undefined1 *data_ptr_2;\n  \n  data_ptr_1 = &DAT_20000174;\n  data_ptr_2 = (undefined1 *)((byte)(&DAT_20000174)[index] & mask);\n  if ((condition != 0) ||\n     (data_ptr_1 = (undefined1 *)(uint)(byte)(&DAT_20000180)[index], data_ptr_2 != data_ptr_1)) {\n    execute_compressed_data_function_08002efe(&DAT_200003d4,index,data_ptr_2,data_ptr_1,parameter);\n    (&DAT_20000180)[index] = (char)data_ptr_2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000be8": "execute_data_processing_08000be8",
                "param_1": "index",
                "param_2": "mask",
                "param_3": "condition",
                "param_4": "parameter",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_08002efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ef8": {
            "entrypoint": "0x08000ef8",
            "current_name": "process_data_08000ef8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n\nvoid processData_08000ef8(void)\n\n{\n  byte bVar1;\n  int iVar2;\n  bool bVar3;\n  byte bVar4;\n  \n  bVar1 = DAT_20000174;\n  if (DAT_200001e8 != '\\0') {\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(3);\n      if (iVar2 == 1) {\n        bVar4 = 0;\n      }\n      else if ((bVar1 & 1) == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0);\n        if (iVar2 == 0) {\n          bVar4 = 0;\n        }\n        else {\n          bVar4 = 1;\n        }\n      }\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(2);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 2) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(1);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(10);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 4) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(2);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x13);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 8) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(3);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x15);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x10) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(4);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x14);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x20) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(5);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x1a);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x40) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(6);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(8);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x80) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(7);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_data_processing_08000be8(0,bVar4);\n  }\n  bVar1 = DAT_20000175;\n  if (DAT_200001e9 != '\\0') {\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(9);\n      if (iVar2 == 1) {\n        bVar4 = 0;\n      }\n      else if ((bVar1 & 1) == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(8);\n        if (iVar2 == 0) {\n          bVar4 = 0;\n        }\n        else {\n          bVar4 = 1;\n        }\n      }\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x27);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 2) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(9);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x16);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 4) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(10);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(7);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 8) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0xb);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(6);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x10) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0xc);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(5);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x20) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0xd);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x19);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x40) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0xe);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x18);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x80) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0xf);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_data_processing_08000be8(1,bVar4,0);\n  }\n  bVar1 = DAT_20000176;\n  if (DAT_200001ea != '\\0') {\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x2a);\n      if (iVar2 == 1) {\n        bVar4 = 0;\n      }\n      else if ((bVar1 & 1) == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x10);\n        if (iVar2 == 0) {\n          bVar4 = 0;\n        }\n        else {\n          bVar4 = 1;\n        }\n      }\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x2c);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 2) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x11);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0xd);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 8) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x13);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0xe);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x10) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x14);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0xf);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x20) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x15);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x17);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x40) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x16);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x2d);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x80) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x17);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_data_processing_08000be8(2,bVar4,0);\n  }\n  bVar1 = DAT_20000177;\n  if (DAT_200001eb != '\\0') {\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x2e);\n      if (iVar2 == 1) {\n        bVar4 = 0;\n      }\n      else if ((bVar1 & 1) == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x18);\n        if (iVar2 == 0) {\n          bVar4 = 0;\n        }\n        else {\n          bVar4 = 1;\n        }\n      }\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x2f);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 2) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x19);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x30);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 4) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x1a);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x31);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 8) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x1b);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x22);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x10) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x1c);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x23);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x20) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x1d);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x2b);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x40) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x1e);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x32);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x80) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x1f);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_data_processing_08000be8(3,bVar4,0);\n  }\n  bVar1 = DAT_20000178;\n  if (DAT_200001ec != '\\0') {\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x29);\n      if (iVar2 == 1) {\n        bVar4 = 0;\n      }\n      else if ((bVar1 & 1) == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x20);\n        if (iVar2 == 0) {\n          bVar4 = 0;\n        }\n        else {\n          bVar4 = 1;\n        }\n      }\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x28);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 2) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x21);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x26);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 4) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x22);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x25);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 8) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x23);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0xc);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x10) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x24);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0xb);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x20) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x25);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x1c);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x40) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x26);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    iVar2 = check_character_presence_080036ac();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = check_character_presence_080036ac(0x1b);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x80) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_bit_validity_08008a6c(0x27);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_data_processing_08000be8(4,bVar4,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ef8": "process_data_08000ef8"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_08008a6c",
                "FUN_08000be8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_gateway_08001b48",
            "code": "\nvoid initializeGateway_08001b48(void)\n\n{\n  processFile(&DAT_200003d4,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/StandardFirmata.ino\",\n               2,5);\n  updateData(&DAT_200003d4,0xe0,0x8000215);\n  updateData(&DAT_200003d4,0x90,label1);\n  updateData(&DAT_200003d4,0xc0,0x8000489);\n  updateData(&DAT_200003d4,0xd0,label2);\n  updateData(&DAT_200003d4,0xf4,0x80005f9);\n  updateData(&DAT_200003d4,0xf5,label3);\n  initializeData(&DAT_200003d4,0xf0,0x8001cd1);\n  setDataIfParameterEquals(&DAT_200003d4,0xff,0x8000aed);\n  initializeDevice(&DAT_200003d4,0xe100);\n  initializeData2();\n  sendInterrupt(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_gateway_08001b48",
                "&LAB_080002ec_1": "label1",
                "&LAB_08000c18_1": "label2",
                "&LAB_080001a8_1": "label3",
                "process_file_08002e44": "processFile",
                "update_data_08002f2c": "updateData",
                "initialize_data_08002f94": "initializeData",
                "set_data_if_parameter_equals_08002f84": "setDataIfParameterEquals",
                "initialize_device_08003048": "initializeDevice",
                "initialize_data_08000aec": "initializeData2",
                "send_interrupt_0800018c": "sendInterrupt"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08003048",
                "FUN_08000aec",
                "FUN_08002f2c",
                "FUN_08002e44",
                "FUN_0800018c",
                "FUN_08002f94",
                "FUN_08002f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bf8": {
            "entrypoint": "0x08001bf8",
            "current_name": "copy_and_update_data_08001bf8",
            "code": "\nvoid copyAndUpdateData_08001bf8(undefined4 sourceData,undefined4 unused1,undefined4 destinationData,undefined4 size)\n\n{\n  copy_and_update_data_0800288c(&DAT_20000314,sourceData,destinationData,size,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001bf8": "copy_and_update_data_08001bf8",
                "param_1": "sourceData",
                "param_2": "unused1",
                "param_3": "destinationData",
                "param_4": "size"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800288c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c08": {
            "entrypoint": "0x08001c08",
            "current_name": "read_byte_from_memory_08001c08",
            "code": "\nundefined readByteFromMemory_08001c08(void)\n\n{\n  undefined result;\n  \n  result = read_byte_from_memory_08002720(&DAT_20000314);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001c08": "read_byte_from_memory_08001c08",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002720"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c18": {
            "entrypoint": "0x08001c18",
            "current_name": "process_input_08001c18",
            "code": "\nvoid processInput_08001c18(undefined4 dataType,uint inputLength,int expectedLength,undefined4 validationData)\n\n{\n  undefined byte;\n  int dataDifference;\n  int currentDifference;\n  bool isDataAvailable;\n  \n  if (inputLength == 0xffffffff) {\n    inputLength = 0;\n  }\n  else {\n    initialize_data_08002a30(&DAT_20000314,dataType);\n    copy_and_update_data_08001bf8(inputLength & 0xff);\n    validate_input_08002a58(&DAT_20000314,validationData);\n  }\n  process_input_08002c14(&DAT_20000314,dataType,expectedLength);\n  dataDifference = calculate_difference_0800270c(&DAT_20000314);\n  if (expectedLength < dataDifference) {\n    decompress_data_08002f14(&DAT_200003d4,\"I2C: Too many bytes received\");\n  }\n  else {\n    dataDifference = calculate_difference_0800270c(&DAT_20000314);\n    if (dataDifference < expectedLength) {\n      decompress_data_08002f14(&DAT_200003d4,\"I2C: Too few bytes received\");\n    }\n  }\n  DAT_20000130 = (undefined)dataType;\n  DAT_20000131 = (undefined)inputLength;\n  dataDifference = 0;\n  while( true ) {\n    if (dataDifference < expectedLength) {\n      currentDifference = calculate_difference_0800270c(&DAT_20000314);\n      if (currentDifference == 0) {\n        isDataAvailable = false;\n      }\n      else {\n        isDataAvailable = true;\n      }\n    }\n    else {\n      isDataAvailable = false;\n    }\n    if (!isDataAvailable) break;\n    byte = read_byte_from_memory_08001c08();\n    (&DAT_20000132)[dataDifference] = byte;\n    dataDifference = dataDifference + 1;\n  }\n  decompress_data_08002f0a(&DAT_200003d4,0x77,expectedLength + 2U & 0xff,&DAT_20000130);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c18": "process_input_08001c18",
                "param_1": "dataType",
                "param_2": "inputLength",
                "param_3": "expectedLength",
                "param_4": "validationData",
                "uVar1": "byte",
                "iVar2": "dataDifference",
                "iVar3": "currentDifference",
                "bVar4": "isDataAvailable"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800270c",
                "FUN_08002c14",
                "FUN_08002a58",
                "FUN_08002f0a",
                "FUN_08001c08",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_08001bf8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "process_data_08001cd0",
            "code": "\nvoid processData_08001cd0(undefined4 opcode,int length,byte *data,undefined4 someParameter)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  undefined4 tempVariable;\n  byte byte4;\n  char charVar;\n  int index;\n  int index2;\n  uint loopVar1;\n  uint loopVar2;\n  int tempIndex;\n  bool flag;\n  \n  switch(opcode) {\n  case 0x69:\n    execute_callback_08002f1e(&DAT_200003d4,0xf0);\n    execute_callback_08002f1e(&DAT_200003d4,0x6a);\n    for (loopVar1 = 0; loopVar1 < 0x3c; loopVar1 = loopVar1 + 1 & 0xff) {\n      loopVar2 = loopVar1 - 0x2e & 0xff;\n      if (loopVar2 < 0xe) {\n        if (loopVar1 < 0x3c) {\n          index = (int)(char)(&DAT_0800a908)[loopVar1];\n        }\n        else {\n          index = -1;\n        }\n        index = check_character_presence_080036ac(index);\n        if (index == 0) {\n          loopVar2 = 0x7f;\n        }\n        else {\n          if (loopVar1 < 0x3c) {\n            index = (int)(char)(&DAT_0800a908)[loopVar1];\n          }\n          else {\n            index = -1;\n          }\n          index = check_character_presence_080036ac(index);\n          if (index == 1) {\n            loopVar2 = 0x7f;\n          }\n        }\n      }\n      else {\n        loopVar2 = 0x7f;\n      }\n      execute_callback_08002f1e(&DAT_200003d4,loopVar2);\n    }\n    execute_callback_08002f1e(&DAT_200003d4,0xf7);\n    break;\n  case 0x6b:\n    execute_callback_08002f1e(&DAT_200003d4,0xf0);\n    execute_callback_08002f1e(&DAT_200003d4,0x6c);\n    for (loopVar1 = 0; loopVar1 < 0x3c; loopVar1 = loopVar1 + 1 & 0xff) {\n      if (loopVar1 < 0x3c) {\n        if ((&DAT_0800a908)[loopVar1] == -1) {\n          flag = false;\n        }\n        else {\n          index = check_character_presence_080036ac();\n          if (index == 0) {\n            flag = false;\n          }\n          else {\n            index = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[loopVar1]);\n            if (index == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        execute_callback_08002f1e(&DAT_200003d4,0);\n        execute_callback_08002f1e(&DAT_200003d4,1);\n        execute_callback_08002f1e(&DAT_200003d4,0xb);\n        execute_callback_08002f1e(&DAT_200003d4,1);\n        execute_callback_08002f1e(&DAT_200003d4,1);\n        execute_callback_08002f1e(&DAT_200003d4,1);\n      }\n      if ((loopVar1 - 0x2e & 0xff) < 0xe) {\n        if (loopVar1 < 0x3c) {\n          index = (int)(char)(&DAT_0800a908)[loopVar1];\n        }\n        else {\n          index = -1;\n        }\n        index = check_character_presence_080036ac(index);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          if (loopVar1 < 0x3c) {\n            index = (int)(char)(&DAT_0800a908)[loopVar1];\n          }\n          else {\n            index = -1;\n          }\n          index = check_character_presence_080036ac(index);\n          if (index == 1) {\n            flag = false;\n          }\n          else {\n            flag = true;\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        execute_callback_08002f1e(&DAT_200003d4,2);\n        execute_callback_08002f1e(&DAT_200003d4,10);\n      }\n      if (loopVar1 < 0x3c) {\n        if ((&DAT_0800a908)[loopVar1] == -1) {\n          index = 0;\n        }\n        else {\n          index = check_character_presence_080036ac();\n          if (index == 0) {\n            index = 0;\n          }\n          else {\n            index = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[loopVar1]);\n            if (index == 1) {\n              index = 0;\n            }\n            else {\n              index = check_match_0800738a((int)(char)(&DAT_0800a908)[loopVar1],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        index = 0;\n      }\n      if (index != 0) {\n        execute_callback_08002f1e(&DAT_200003d4,3);\n        execute_callback_08002f1e(&DAT_200003d4,8);\n      }\n      if (loopVar1 < 0x3c) {\n        if ((&DAT_0800a908)[loopVar1] == -1) {\n          flag = false;\n        }\n        else {\n          index = check_character_presence_080036ac();\n          if (index == 0) {\n            flag = false;\n          }\n          else {\n            index = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[loopVar1]);\n            if (index == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        execute_callback_08002f1e(&DAT_200003d4,4);\n        execute_callback_08002f1e(&DAT_200003d4,0xe);\n      }\n      if (loopVar1 < 0x3c) {\n        if ((&DAT_0800a908)[loopVar1] == -1) {\n          index = 0;\n        }\n        else {\n          index = check_character_presence_080036ac();\n          if (index == 0) {\n            index = 0;\n          }\n          else {\n            index = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[loopVar1]);\n            if (index == 1) {\n              index = 0;\n            }\n            else {\n              index = check_match_0800738a((int)(char)(&DAT_0800a908)[loopVar1],&DAT_0800a69c);\n              if (index == 0) {\n                index = check_match_0800738a((int)(char)(&DAT_0800a908)[loopVar1],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        index = 0;\n      }\n      if (index != 0) {\n        execute_callback_08002f1e(&DAT_200003d4,6);\n        execute_callback_08002f1e(&DAT_200003d4,1);\n      }\n      execute_callback_08002f1e(&DAT_200003d4,0x7f);\n    }\n    execute_callback_08002f1e(&DAT_200003d4,0xf7);\n    return;\n  case 0x6d:\n    if (length != 0) {\n      byte1 = *data;\n      execute_callback_08002f1e(&DAT_200003d4,0xf0);\n      execute_callback_08002f1e(&DAT_200003d4,0x6e);\n      execute_callback_08002f1e(&DAT_200003d4,byte1);\n      if (byte1 < 0x3c) {\n        tempVariable = get_char_from_offset_08002fa0(&DAT_200003d4,byte1);\n        execute_callback_08002f1e(&DAT_200003d4,tempVariable);\n        loopVar1 = get_array_value_08002fba(&DAT_200003d4,byte1);\n        execute_callback_08002f1e(&DAT_200003d4,loopVar1 & 0x7f);\n        loopVar1 = get_array_value_08002fba(&DAT_200003d4,byte1);\n        if ((loopVar1 & 0xff80) != 0) {\n          index = get_array_value_08002fba(&DAT_200003d4,byte1);\n          execute_callback_08002f1e(&DAT_200003d4,(uint)(index << 0x12) >> 0x19);\n        }\n        loopVar1 = get_array_value_08002fba(&DAT_200003d4,byte1);\n        if ((loopVar1 & 0xc000) != 0) {\n          index = get_array_value_08002fba(&DAT_200003d4,byte1);\n          execute_callback_08002f1e(&DAT_200003d4,(uint)(index << 0xb) >> 0x19);\n        }\n      }\n      execute_callback_08002f1e(&DAT_200003d4,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < length) {\n      loopVar1 = (uint)data[1];\n      if (2 < length) {\n        loopVar1 = loopVar1 | (uint)data[2] << 7;\n      }\n      if (3 < length) {\n        loopVar1 = loopVar1 | (uint)data[3] << 0xe;\n      }\n      process_character_08000214(*data,loopVar1);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < length) {\n      loopVar1 = (uint)*data;\n      byte1 = data[1];\n      byte4 = data[2];\n      byte2 = data[3];\n      byte3 = data[4];\n      if (loopVar1 < 0x3c) {\n        if ((&DAT_0800a908)[loopVar1] == -1) {\n          flag = false;\n        }\n        else {\n          index = check_character_presence_080036ac();\n          if (index == 0) {\n            flag = false;\n          }\n          else {\n            index = check_character_presence_080036ac((int)(char)(&DAT_0800a908)[loopVar1]);\n            if (index == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        if ((byte)(&DAT_200001f0)[loopVar1] < 0xc) {\n          index = extract_bit_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[loopVar1] * 3);\n        }\n        else {\n          index = 0;\n        }\n        if (index != 0) {\n          update_flag_08000588(loopVar1);\n        }\n        initialize_or_update_device_08000500(loopVar1,(uint)byte1 + (uint)byte4 * 0x80,(uint)byte2 + (uint)byte3 * 0x80);\n        process_data_080005f8(loopVar1,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    byte1 = data[1];\n    byte4 = byte1 & 0x18;\n    if ((byte1 & 0x20) != 0) {\n      decompress_data_08002f14(&DAT_200003d4,\"10-bit addressing not supported\",byte4,byte1,someParameter);\n      return;\n    }\n    byte2 = *data;\n    flag = (byte1 & 0x40) == 0;\n    if (byte4 < 0x19) {\n      switch(byte4) {\n      case 0:\n        initialize_data_08002a30(&DAT_20000314,byte2);\n        for (loopVar1 = 2; (int)loopVar1 < length; loopVar1 = loopVar1 + 2 & 0xff) {\n          copy_and_update_data_08001bf8(data[loopVar1 + 1] * -0x80 + data[loopVar1]);\n        }\n        validate_and_process_parameters_08002ac0(&DAT_20000314);\n        return;\n      case 8:\n        if (length == 6) {\n          index = (uint)data[2] + (uint)data[3] * 0x80;\n          charVar = data[4] + data[5] * -0x80;\n        }\n        else {\n          charVar = data[2] + data[3] * -0x80;\n          index = -1;\n        }\n        process_input_08001c18(byte2,index,charVar);\n        return;\n      case 0x10:\n        if (DAT_20000004 + 1 < 8) {\n          if (length == 6) {\n            index = (uint)data[2] + (uint)data[3] * 0x80;\n            charVar = data[4] + data[5] * -0x80;\n          }\n          else {\n            charVar = data[2] + data[3] * -0x80;\n            index = -1;\n          }\n          DAT_20000004 = DAT_20000004 + '\\x01';\n          index2 = (int)DAT_20000004;\n          tempIndex = index2 * 0xc;\n          (&DAT_20000188)[tempIndex] = byte2;\n          (&DAT_2000018c)[index2 * 3] = index;\n          (&DAT_20000190)[tempIndex] = charVar;\n          (&DAT_20000191)[tempIndex] = flag;\n          return;\n        }\n        decompress_data_08002f14(&DAT_200003d4,\"too many queries\",(int)DAT_20000004,flag,someParameter);\n        return;\n      case 0x18:\n        if (DAT_20000004 < 1) {\n          DAT_20000004 = 0xff;\n          return;\n        }\n      }\n      for (loopVar1 = 0; index = DAT_20000004 + 1, (int)loopVar1 < index; loopVar1 = loopVar1 + 1 & 0xff) {\n        if (byte2 == (&DAT_20000188)[loopVar1 * 0xc]) goto LAB_08001e66;\n      }\n      loopVar1 = 0;\nLAB_08001e66:\n      for (; (int)loopVar1 < index; loopVar1 = loopVar1 + 1 & 0xff) {\n        if (loopVar1 < 8) {\n          index2 = (loopVar1 + 1) * 0xc;\n          tempIndex = loopVar1 * 0xc;\n          (&DAT_20000188)[tempIndex] = (&DAT_20000188)[index2];\n          (&DAT_2000018c)[loopVar1 * 3] = (&DAT_2000018c)[(loopVar1 + 1) * 3];\n          (&DAT_20000190)[tempIndex] = (&DAT_20000190)[index2];\n          (&DAT_20000191)[tempIndex] = (&DAT_20000191)[index2];\n        }\n      }\n      DAT_20000004 = DAT_20000004 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    index = (uint)*data + (uint)data[1] * 0x80;\n    if ((1 < length) && (index != 0)) {\n      DAT_2000012c = index;\n    }\n    if (DAT_20000170 == '\\0') {\n      process_characters_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < length) &&\n       (DAT_20000008 = (uint)*data + (uint)data[1] * 0x80, DAT_20000008 == 0)) {\n      DAT_20000008 = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "process_data_08001cd0",
                "param_1": "opcode",
                "param_2": "length",
                "param_3": "data",
                "param_4": "someParameter",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "uVar4": "tempVariable",
                "bVar5": "byte4",
                "cVar6": "charVar",
                "iVar7": "index",
                "iVar8": "index2",
                "uVar9": "loopVar1",
                "uVar10": "loopVar2",
                "iVar11": "tempIndex",
                "bVar12": "flag"
            },
            "calling": [],
            "called": [
                "FUN_080026f8",
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_08002ac0",
                "FUN_08000a64",
                "FUN_08000588",
                "FUN_08001bf8",
                "FUN_08001c18",
                "FUN_08002f1e",
                "FUN_08002fba",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08000214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022f8": {
            "entrypoint": "0x080022f8",
            "current_name": "process_and_compress_data_080022f8",
            "code": "\nvoid process_and_compress_data_080022f8(void)\n\n{\n  bool bVar1;\n  int iVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  process_data_08000ef8();\n  while (iVar2 = execute_nested_function(&DAT_200003d4), iVar2 != 0) {\n    process_output(&DAT_200003d4);\n  }\n  DAT_20000118 = initialize_data_08008abc();\n  if (DAT_20000008 < (uint)(DAT_20000118 - DAT_2000017c)) {\n    DAT_2000017c = DAT_2000017c + DAT_20000008;\n    for (uVar4 = 0; uVar4 < 0x3c; uVar4 = uVar4 + 1 & 0xff) {\n      uVar5 = uVar4 - 0x2e & 0xff;\n      if (uVar5 < 0xe) {\n        if (uVar4 < 0x3c) {\n          iVar2 = (int)(char)(&DAT_0800a908)[uVar4];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = check_character_presence(iVar2);\n        if (iVar2 == 0) {\n          bVar1 = false;\n        }\n        else {\n          if (uVar4 < 0x3c) {\n            iVar2 = (int)(char)(&DAT_0800a908)[uVar4];\n          }\n          else {\n            iVar2 = -1;\n          }\n          iVar2 = check_character_presence(iVar2);\n          if (iVar2 == 1) {\n            bVar1 = false;\n          }\n          else {\n            iVar2 = get_character_from_offset(&DAT_200003d4,uVar4);\n            if (iVar2 == 2) {\n              bVar1 = true;\n            }\n            else {\n              bVar1 = false;\n            }\n          }\n        }\n      }\n      else {\n        bVar1 = false;\n      }\n      if ((bVar1) && ((DAT_20000114 >> uVar5 & 1U) != 0)) {\n        uVar3 = process_data(uVar5);\n        compress_data(&DAT_200003d4,uVar5,uVar3);\n      }\n    }\n    if (-1 < DAT_20000004) {\n      for (uVar4 = 0; (int)uVar4 < DAT_20000004 + 1; uVar4 = uVar4 + 1 & 0xff) {\n        iVar2 = uVar4 * 0xc;\n        process_input((&DAT_20000188)[iVar2],(&DAT_2000018c)[uVar4 * 3],(&DAT_20000190)[iVar2],\n                     (&DAT_20000191)[iVar2]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022f8": "process_and_compress_data_080022f8",
                "execute_nested_function_08002ec4": "execute_nested_function",
                "process_output_08002ed2": "process_output",
                "check_character_presence_080036ac": "check_character_presence",
                "get_char_from_offset_08002fa0": "get_character_from_offset",
                "process_data_08008880": "process_data",
                "compress_data_08002ef2": "compress_data",
                "process_input_08001c18": "process_input"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2",
                "FUN_08001c18",
                "FUN_080036ac",
                "FUN_08002ec4",
                "FUN_08002ed2",
                "FUN_08008abc",
                "FUN_08000ef8",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002400": {
            "entrypoint": "0x08002400",
            "current_name": "check_flag_08002400",
            "code": "\nundefined4 check_flag_08002400(int input_value)\n\n{\n  uint counter;\n  \n  counter = 0;\n  while( true ) {\n    if (0xb < counter) {\n      return 0;\n    }\n    if (((&DAT_20000258)[(input_value * 0xc + counter) * 8] & 0x40) != 0) break;\n    counter = counter + 1 & 0xff;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002400": "check_flag_08002400",
                "param_1": "input_value",
                "uVar1": "counter"
            },
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800242c": {
            "entrypoint": "0x0800242c",
            "current_name": "initialize_0800242c",
            "code": "\nvoid initialize_0800242c(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_0800242c_settings(param1,60000,0x5dc,&label_1,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800242c": "initialize_0800242c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "initialize_settings_08007648": "initialize_settings",
                "LAB_08002444_1": "label_1"
            },
            "calling": [
                "FUN_080025ac"
            ],
            "called": [
                "FUN_08007648"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002578": {
            "entrypoint": "0x08002578",
            "current_name": "update_timer_08002578",
            "code": "\nvoid update_timer_08002578(void)\n\n{\n  update_timer_08002578_080076e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002578": "update_timer_08002578"
            },
            "calling": [
                "FUN_08002644"
            ],
            "called": [
                "FUN_080076e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "initialize_data_08002580",
            "code": "\nvoid initializeData_08002580(byte *outputBuffer)\n\n{\n  char nextCharacter;\n  uint dataIndex;\n  \n  dataIndex = (uint)DAT_20000250;\n  if (0xb < dataIndex) {\n    *outputBuffer = 0xff;\n    return;\n  }\n  nextCharacter = DAT_20000250 + 1;\n  *outputBuffer = DAT_20000250;\n  DAT_20000250 = nextCharacter;\n  *(undefined4 *)(&DAT_2000025c + dataIndex * 8) = 0x5dc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "initialize_data_08002580",
                "param_1": "outputBuffer",
                "cVar1": "nextCharacter",
                "uVar2": "dataIndex"
            },
            "calling": [
                "FUN_080004d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ac": {
            "entrypoint": "0x080025ac",
            "current_name": "initialize_and_update_device_080025ac",
            "code": "\nbyte initialize_and_update_device_080025ac(byte *device,uint value,int sub_value1,int sub_value2)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  uint updated_value3;\n  int updated_value4;\n  \n  if (*device < 0xc) {\n    initialize_device_08008990(value,1,sub_value1,*device,sub_value2);\n    updated_value2 = (uint)*device;\n    updated_value1 = (byte)(&DAT_20000258)[updated_value2 * 8] & 0xffffffc0 | value & 0x3f;\n    (&DAT_20000258)[updated_value2 * 8] = (char)updated_value1;\n    updated_value4 = -sub_value1 + 0x220;\n    if (updated_value4 < 0) {\n      updated_value4 = -sub_value1 + 0x223;\n    }\n    device[1] = (byte)((uint)(updated_value4 << 0x16) >> 0x18);\n    updated_value4 = -sub_value2 + 0x960;\n    if (updated_value4 < 0) {\n      updated_value4 = -sub_value2 + 0x963;\n    }\n    device[2] = (byte)((uint)(updated_value4 << 0x16) >> 0x18);\n    updated_value3 = *device / 0xc;\n    updated_value4 = check_flag_08002400(updated_value3,updated_value1,updated_value2,(uint)*device * -0x55555555);\n    if (updated_value4 == 0) {\n      DAT_200002fc = (undefined)updated_value3;\n      initialize_0800242c();\n    }\n    (&DAT_20000258)[(uint)*device * 8] = (&DAT_20000258)[(uint)*device * 8] | 0x40;\n  }\n  return *device;\n}\n\n",
            "renaming": {
                "FUN_080025ac": "initialize_and_update_device_080025ac",
                "param_1": "device",
                "param_2": "value",
                "param_3": "sub_value1",
                "param_4": "sub_value2",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "uVar3": "updated_value3",
                "iVar4": "updated_value4"
            },
            "calling": [
                "FUN_08002634",
                "FUN_08000500"
            ],
            "called": [
                "FUN_08002400",
                "FUN_0800242c",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002634": {
            "entrypoint": "0x08002634",
            "current_name": "initialize_and_update_device_08002634",
            "code": "\nvoid initializeAndUpdateDevice_08002634(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_and_update_device_080025ac(param1,param2,0x220,0x960,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002634": "initialize_and_update_device_08002634",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08000500"
            ],
            "called": [
                "FUN_080025ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002644": {
            "entrypoint": "0x08002644",
            "current_name": "update_flag_and_check_08002644",
            "code": "\nvoid update_flag_and_check_08002644(byte *data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte current_flag;\n  uint first_byte;\n  int result;\n  \n  first_byte = (uint)*data;\n  current_flag = (&DAT_20000258)[first_byte * 8];\n  (&DAT_20000258)[first_byte * 8] = current_flag & 0xbf;\n  result = check_flag_08002400(first_byte / 0xc,param2,current_flag & 0xbf,first_byte * -0x55555555,param4);\n  if (result == 0) {\n    update_timer_08002578(&DAT_200002b8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002644": "update_flag_and_check_08002644",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "current_flag",
                "uVar2": "first_byte",
                "iVar3": "result"
            },
            "calling": [
                "FUN_08000588"
            ],
            "called": [
                "FUN_08002400",
                "FUN_08002578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800267c": {
            "entrypoint": "0x0800267c",
            "current_name": "update_data_0800267c",
            "code": "\nvoid updateData_0800267c(byte *data,int value)\n\n{\n  int result;\n  \n  if (*data < 0xc) {\n    result = (0x88 - (char)data[1]) * 4;\n    if ((result - value == 0 || result < value) &&\n       (result = (600 - (char)data[2]) * 4,\n       value == result || value + (600 - (char)data[2]) * -4 < 0 != SBORROW4(value,result)))\n    {\n      result = value;\n    }\n    *(int *)(&DAT_2000025c + (uint)*data * 8) = result;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800267c": "update_data_0800267c",
                "param_1": "data",
                "param_2": "value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026b0": {
            "entrypoint": "0x080026b0",
            "current_name": "update_data_080026b0",
            "code": "\nvoid updateData_080026b0(int input1,int input2)\n\n{\n  if (input2 < 0x220) {\n    if (input2 < 0) {\n      input2 = 0;\n    }\n    else if (0xb4 < input2) {\n      input2 = 0xb4;\n    }\n    input2 = calculateInterpolatedValue(input2,0,0xb4,(0x88 - *(char *)(input1 + 1)) * 4,\n                           (600 - *(char *)(input1 + 2)) * 4);\n  }\n  updateData_080026b0InMemory(input1,input2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026b0": "update_data_080026b0",
                "param_1": "input1",
                "param_2": "input2",
                "calculate_interpolated_value_08008ef4": "calculateInterpolatedValue",
                "update_data_0800267c": "updateDataInMemory"
            },
            "calling": [
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08008ef4",
                "FUN_0800267c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026f8": {
            "entrypoint": "0x080026f8",
            "current_name": "extract_bit_080026f8",
            "code": "\nuint extractBit_080026f8(byte *data)\n\n{\n  return ((uint)(byte)(&DAT_20000258)[(uint)*data * 8] << 0x19) >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_080026f8": "extract_bit_080026f8",
                "param_1": "data"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800270c": {
            "entrypoint": "0x0800270c",
            "current_name": "calculate_difference_0800270c",
            "code": "\nint calculate_difference_0800270c(void)\n\n{\n  return (uint)DAT_200003b7 - (uint)DAT_200003b5;\n}\n\n",
            "renaming": {
                "FUN_0800270c": "calculate_difference_0800270c"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002720": {
            "entrypoint": "0x08002720",
            "current_name": "read_byte_from_memory_08002720",
            "code": "\nuint readByteFromMemory_08002720(void)\n\n{\n  uint currentOffset;\n  \n  currentOffset = (uint)DAT_200003b5;\n  if (currentOffset < DAT_200003b7) {\n    DAT_200003b5 = DAT_200003b5 + 1;\n    return (uint)*(byte *)(DAT_200003c8 + currentOffset);\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08002720": "read_byte_from_memory_08002720",
                "uVar1": "currentOffset"
            },
            "calling": [
                "FUN_08001c08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f0": {
            "entrypoint": "0x080027f0",
            "current_name": "copy_and_update_data_080027f0",
            "code": "\nuint copy_and_update_data_080027f0(int offset,undefined4 source,uint size)\n\n{\n  int copy_result;\n  uint updated_size;\n  \n  if (DAT_200003b4 == '\\0') {\n    copy_result = copy_data_08007ede(offset + 0x14,source,size & 0xffff);\n    if (copy_result == 0) {\n      return size;\n    }\n    return 0;\n  }\n  updated_size = DAT_200003b8 + size;\n  if (DAT_200003c5 < updated_size) {\n    if (updated_size < 0x20) {\n      updated_size = 0x20;\n    }\n    DAT_200003cc = allocate_and_initialize_memory_08009908(DAT_200003cc,updated_size);\n    if (DAT_200003cc == 0) {\n      DAT_200003c5 = 0;\n    }\n    else {\n      DAT_200003c5 = (byte)updated_size;\n    }\n  }\n  if (DAT_200003cc == 0) {\n    *(undefined4 *)(offset + 4) = 1;\n    return 0;\n  }\n  copy_data_080091b0((uint)DAT_200003b6 + DAT_200003cc,source,size);\n  DAT_200003b6 = DAT_200003b6 + (char)size;\n  DAT_200003b8 = DAT_200003b6;\n  return size;\n}\n\n",
            "renaming": {
                "FUN_080027f0": "copy_and_update_data_080027f0",
                "param_1": "offset",
                "param_2": "source",
                "param_3": "size",
                "iVar1": "copy_result",
                "uVar2": "updated_size"
            },
            "calling": [],
            "called": [
                "FUN_080091b0",
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800288c": {
            "entrypoint": "0x0800288c",
            "current_name": "copy_and_update_data_0800288c",
            "code": "\nundefined4 copyAndUpdateData_0800288c(int inputOffset,undefined inputValue)\n\n{\n  undefined4 successFlag;\n  int copyResult;\n  uint newDataSize;\n  undefined newData;\n  \n  newData = inputValue;\n  if (DAT_200003b4 == '\\0') {\n    copyResult = copy_data_08007ede(inputOffset + 0x14,&newData,1);\n    if (copyResult == 0) {\n      successFlag = 1;\n    }\n    else {\n      successFlag = 0;\n    }\n  }\n  else {\n    newDataSize = DAT_200003b8 + 1;\n    if (DAT_200003c5 < newDataSize) {\n      if (newDataSize < 0x20) {\n        newDataSize = 0x20;\n      }\n      DAT_200003cc = allocate_and_initialize_memory_08009908(DAT_200003cc,newDataSize);\n      if (DAT_200003cc == 0) {\n        DAT_200003c5 = 0;\n      }\n      else {\n        DAT_200003c5 = (byte)newDataSize;\n      }\n    }\n    if (DAT_200003cc == 0) {\n      *(undefined4 *)(inputOffset + 4) = 1;\n      successFlag = 0;\n    }\n    else {\n      *(undefined *)(DAT_200003cc + (uint)DAT_200003b6) = newData;\n      DAT_200003b6 = DAT_200003b6 + 1;\n      successFlag = 1;\n      DAT_200003b8 = DAT_200003b6;\n    }\n  }\n  return successFlag;\n}\n\n",
            "renaming": {
                "FUN_0800288c": "copy_and_update_data_0800288c",
                "param_1": "inputOffset",
                "param_2": "inputValue",
                "uVar1": "successFlag",
                "iVar2": "copyResult",
                "uVar3": "newDataSize",
                "local_11": "newData"
            },
            "calling": [
                "FUN_08001bf8"
            ],
            "called": [
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800291c": {
            "entrypoint": "0x0800291c",
            "current_name": "initialize_param_0800291c",
            "code": "\nvoid initializeParam_0800291c(undefined4 *paramArray)\n\n{\n  paramArray[1] = 0;\n  paramArray[2] = 1000;\n  *paramArray = &PTR_copy_and_update_data_0800288c_1_0800a5a0;\n  *(undefined *)(paramArray + 0x1b) = 0x19;\n  *(undefined *)((int)paramArray + 0x6d) = 0x18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800291c": "initialize_param_0800291c",
                "param_1": "paramArray",
                "param_1[1]": "paramArray[1]",
                "param_1[2]": "paramArray[2]"
            },
            "calling": [
                "FUN_08002948"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002948": {
            "entrypoint": "0x08002948",
            "current_name": "initialize_if_param_1_is_equal_to_1_08002948",
            "code": "\nvoid initialize_if_param_1_is_equal_to_1_08002948(int input_param,int second_input_param)\n\n{\n  if (input_param != 1) {\n    return;\n  }\n  if (second_input_param == 0xffff) {\n    initialize_param_0800291c(&DAT_20000314);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002948": "initialize_if_param_1_is_equal_to_1_08002948",
                "param_1": "input_param",
                "param_2": "second_input_param"
            },
            "calling": [
                "FUN_08002c1e"
            ],
            "called": [
                "FUN_0800291c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002968": {
            "entrypoint": "0x08002968",
            "current_name": "initialize_i2_c_pins_08002968",
            "code": "\nvoid initializeI2CPins_08002968(int baseAddress,uint controlBits)\n\n{\n  int shiftedControlBits;\n  int pinAddress;\n  \n  DAT_200003b5 = 0;\n  DAT_200003b7 = 0;\n  if (DAT_200003c8 != 0) {\n    fill_memory_080091c6(DAT_200003c8,0,DAT_200003c4);\n  }\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  if (DAT_200003cc != 0) {\n    fill_memory_080091c6(DAT_200003cc,0,DAT_200003c5);\n  }\n  DAT_200003b4 = 0;\n  shiftedControlBits = (controlBits & 0x7f) << 1;\n  *(char *)(baseAddress + 0x10) = (char)shiftedControlBits;\n  if (controlBits == 0x33) {\n    *(undefined *)(baseAddress + 0x11) = 1;\n  }\n  else {\n    *(undefined *)(baseAddress + 0x11) = 0;\n  }\n  pinAddress = baseAddress + 0x14;\n  initialize_i2_c_pin_080077b0(pinAddress,100000,0x4000,shiftedControlBits,*(undefined *)(baseAddress + 0x11));\n  if (*(char *)(baseAddress + 0x11) == '\\0') {\n    set_data_and_initialize_08007f8e(pinAddress,&LAB_08002774_1);\n    update_data_08007f7c(pinAddress,&LAB_08002b00_1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002968": "initialize_i2_c_pins_08002968",
                "param_1": "baseAddress",
                "param_2": "controlBits",
                "iVar1": "shiftedControlBits",
                "iVar2": "pinAddress"
            },
            "calling": [
                "FUN_08002a1c"
            ],
            "called": [
                "FUN_08007f7c",
                "FUN_080077b0",
                "FUN_080091c6",
                "FUN_08007f8e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a1c": {
            "entrypoint": "0x08002a1c",
            "current_name": "initialize_i2_c_pins_08002a1c",
            "code": "\nvoid initializeI2CPins_08002a1c(undefined4 pinConfig1,undefined pinConfig2,undefined4 pinConfig3,undefined4 pinConfig4)\n\n{\n  initialize_i2_c_pins_08002968(pinConfig1,pinConfig2,pinConfig3,pinConfig4,pinConfig4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a1c": "initialize_i2_c_pins_08002a1c",
                "param_1": "pinConfig1",
                "param_2": "pinConfig2",
                "param_3": "pinConfig3",
                "param_4": "pinConfig4"
            },
            "calling": [
                "FUN_08002a26"
            ],
            "called": [
                "FUN_08002968"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a26": {
            "entrypoint": "0x08002a26",
            "current_name": "initialize_i2_c_pins_08002a26",
            "code": "\nvoid initializeI2CPins_08002a26(undefined4 pin1,undefined4 pin2,undefined4 pin3,undefined4 pin4)\n\n{\n  initialize_i2_c_pins_08002a1c(pin1,0x33,pin3,pin4,pin4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a26": "initialize_i2_c_pins_08002a26",
                "param_1": "pin1",
                "param_2": "pin2",
                "param_3": "pin3",
                "param_4": "pin4"
            },
            "calling": [
                "FUN_08000a64"
            ],
            "called": [
                "FUN_08002a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a30": {
            "entrypoint": "0x08002a30",
            "current_name": "initialize_data_08002a30",
            "code": "\nvoid initializeData_08002a30(undefined4 unused,int inputValue)\n\n{\n  DAT_200003b4 = 1;\n  DAT_200003d0 = (char)(inputValue << 1);\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "unused",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08002b68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a58": {
            "entrypoint": "0x08002a58",
            "current_name": "validate_input_08002a58",
            "code": "\nundefined4 validate_input_08002a58(int input_value)\n\n{\n  int process_result;\n  undefined4 return_value;\n  \n  if (*(char *)(input_value + 0x11) == '\\0') {\n    return_value = 4;\n  }\n  else {\n    process_result = process_data_08007e74(input_value + 0x14,DAT_200003d0,DAT_200003cc,DAT_200003b8);\n    if (process_result == 0) {\n      return_value = 0;\n    }\n    else if (process_result == 1) {\n      return_value = 1;\n    }\n    else {\n      return_value = 4;\n    }\n    if (DAT_200003cc != 0) {\n      fill_memory_080091c6(DAT_200003cc,0,DAT_200003c5);\n    }\n    DAT_200003b6 = 0;\n    DAT_200003b8 = 0;\n    DAT_200003b4 = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08002a58": "validate_input_08002a58",
                "param_1": "input_value",
                "iVar1": "process_result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08002b68",
                "FUN_08002ac0"
            ],
            "called": [
                "FUN_08007e74",
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ac0": {
            "entrypoint": "0x08002ac0",
            "current_name": "validate_and_process_parameters_08002ac0",
            "code": "\nvoid validate_and_process_parameters_08002ac0(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  validate_input_08002a58(input_1,1,input_3,input_4,input_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ac0": "validate_and_process_parameters_08002ac0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_08002a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002acc": {
            "entrypoint": "0x08002acc",
            "current_name": "allocate_and_initialize_memory_08002acc",
            "code": "\nvoid allocate_and_initialize_memory_08002acc(uint requested_size,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  if (DAT_200003c4 < requested_size) {\n    if (requested_size < 0x20) {\n      requested_size = 0x20;\n    }\n    DAT_200003c8 = allocate_and_initialize_memory_08002acc_08009908(DAT_200003c8,requested_size,param_3,(uint)DAT_200003c4,param_4);\n    if (DAT_200003c8 == 0) {\n      DAT_200003c4 = 0;\n    }\n    else {\n      DAT_200003c4 = (byte)requested_size;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002acc": "allocate_and_initialize_memory_08002acc",
                "param_1": "requested_size"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_08009908"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b68": {
            "entrypoint": "0x08002b68",
            "current_name": "process_input_08002b68",
            "code": "\nundefined4\nprocessInput_08002b68(undefined4 *output,uint sizeOfOutput,undefined4 allocatedMemory,uint inputSize,byte inputData)\n\n{\n  int status;\n  uint inputBytes;\n  uint tempSize;\n  \n  inputBytes = (uint)inputData;\n  if (*(char *)((int)output + 0x11) == '\\0') {\n    return 0;\n  }\n  tempSize = inputSize;\n  allocate_and_initialize_memory_08002acc(allocatedMemory);\n  if (DAT_200003c8 != 0) {\n    if (inputBytes != 0) {\n      initialize_data_08002a30(output,sizeOfOutput);\n      if (3 < inputBytes) {\n        inputBytes = 3;\n      }\n      while( true ) {\n        if (inputBytes == 0) break;\n        (**(code **)*output)(output,inputSize >> ((inputBytes - 1 & 0x1f) << 3) & 0xff);\n        inputBytes = inputBytes - 1 & 0xff;\n      }\n      validate_input_08002a58(output,0);\n    }\n    status = check_connection_status_08007f0e(output + 5,(sizeOfOutput & 0x7f) << 1,DAT_200003c8,allocatedMemory,tempSize);\n    if (status != 0) {\n      allocatedMemory = 0;\n    }\n    DAT_200003b5 = 0;\n    DAT_200003b7 = (char)allocatedMemory;\n    return allocatedMemory;\n  }\n  output[1] = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002b68": "process_input_08002b68",
                "param_1": "output",
                "param_2": "sizeOfOutput",
                "param_3": "allocatedMemory",
                "param_4": "inputSize",
                "param_5": "inputData",
                "iVar1": "status",
                "uVar2": "inputBytes",
                "uVar3": "tempSize"
            },
            "calling": [
                "FUN_08002c00"
            ],
            "called": [
                "FUN_08002a58",
                "FUN_08002acc",
                "FUN_08002a30",
                "FUN_08007f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c00": {
            "entrypoint": "0x08002c00",
            "current_name": "process_input_08002c00",
            "code": "\nvoid process_input_08002c00(void)\n\n{\n  process_input_08002c00_helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c00": "process_input_08002c00",
                "process_input_08002b68": "process_input_helper"
            },
            "calling": [
                "FUN_08002c14"
            ],
            "called": [
                "FUN_08002b68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c14": {
            "entrypoint": "0x08002c14",
            "current_name": "process_input_08002c14",
            "code": "\nvoid process_input_08002c14(void)\n\n{\n  process_input_08002c14_function();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c14": "process_input_08002c14",
                "process_input_08002c00": "process_input_function"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002c00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c1e": {
            "entrypoint": "0x08002c1e",
            "current_name": "initialize_with_params_08002c1e",
            "code": "\nvoid initialize_with_params_08002c1e(undefined4 param_flag,undefined4 param_unused,undefined4 param_count,undefined4 param_value)\n\n{\n  check_param_flag_and_initialize(1,0xffff,param_count,param_value,param_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c1e": "initialize_with_params_08002c1e",
                "param_1": "param_flag",
                "param_2": "param_unused",
                "param_3": "param_count",
                "param_4": "param_value",
                "initialize_if_param_1_is_equal_to_1_08002948": "check_param_flag_and_initialize"
            },
            "calling": [],
            "called": [
                "FUN_08002948"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2c": {
            "entrypoint": "0x08002c2c",
            "current_name": "execute_callback_if_not_null_08002c2c",
            "code": "\nvoid executeCallbackIfNotNull_08002c2c(undefined4 unusedParam1,undefined4 callbackParam1,undefined4 callbackParam2,undefined4 callbackParam3)\n\n{\n  if (DAT_200005d4 != (code *)0x0) {\n    (*DAT_200005d4)(callbackParam1,callbackParam2,callbackParam2,DAT_200005d4,callbackParam3);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c2c": "execute_callback_if_not_null_08002c2c",
                "param_1": "unusedParam1",
                "param_2": "callbackParam1",
                "param_3": "callbackParam2",
                "param_4": "callbackParam3"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ce0": {
            "entrypoint": "0x08002ce0",
            "current_name": "initialize_and_update_parameters_08002ce0",
            "code": "\nint initializeAndUpdateParameters_08002ce0(int paramOffset)\n\n{\n  int iVar1;\n  \n  initializeValue(paramOffset + 0x40);\n  iVar1 = paramOffset + 0x44;\n  initializeStruct(iVar1,paramOffset,0x40);\n  *(undefined *)(paramOffset + 0xc4) = 0;\n  *(undefined4 *)(paramOffset + 200) = 0;\n  *(undefined *)(paramOffset + 0x1f8) = 0;\n  updateParameters(iVar1,0xe0,executeCallbackNonNull + 1,0);\n  updateParameters(iVar1,0x90,label1,0);\n  updateParameters(iVar1,0xc0,label2,0);\n  updateParameters(iVar1,0xd0,label3,0);\n  updateParameters(iVar1,0xf4,label4,0);\n  updateParameters(iVar1,0xf5,label5,0);\n  update_values_08003366(iVar1,0x71,label6,0);\n  update_data_fields_08003370(iVar1,0xf0,label7,0);\n  update_parameters_08003346(iVar1,0x79,label8,paramOffset);\n  update_parameters_08003350(iVar1,0xf9,label9,paramOffset);\n  update_parameters_08003350(iVar1,0xff,label10,0);\n  return paramOffset;\n}\n\n",
            "renaming": {
                "FUN_08002ce0": "initialize_and_update_parameters_08002ce0",
                "param_1": "paramOffset",
                "initialize_value_0800314e": "initializeValue",
                "initialize_struct_080032bc": "initializeStruct",
                "update_parameters_08003306": "updateParameters",
                "execute_callback_if_not_null_08002c2c": "executeCallbackNonNull",
                "&LAB_08002c40_1": "label1",
                "&LAB_08002c7c_1": "label2",
                "&LAB_08002c90_1": "label3",
                "&LAB_08002c54_1": "label4",
                "&LAB_08002c68_1": "label5",
                "&LAB_08002ca4_1": "label6",
                "&LAB_08002cb8_1": "label7",
                "&LAB_08002e1a_1": "label8",
                "&LAB_08002dea_1": "label9",
                "&LAB_08002cd0_1": "label10"
            },
            "calling": [
                "FUN_08002dbc"
            ],
            "called": [
                "FUN_08003306",
                "FUN_08003346",
                "FUN_08003366",
                "FUN_0800314e",
                "FUN_080032bc",
                "FUN_08003350",
                "FUN_08003370"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dbc": {
            "entrypoint": "0x08002dbc",
            "current_name": "initialize_or_update_parameters_08002dbc",
            "code": "\nvoid initialize_or_update_parameters_08002dbc(int status,int value)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    initialize_and_update_parameters_08002ce0(&DAT_200003d4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dbc": "initialize_or_update_parameters_08002dbc",
                "param_1": "status",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "FUN_08002ce0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ddc": {
            "entrypoint": "0x08002ddc",
            "current_name": "execute_function_with_offset_08002ddc",
            "code": "\nvoid execute_function_with_offset_08002ddc(int data_start_address,undefined4 argument_1,undefined4 argument_2,undefined4 argument_3)\n\n{\n  execute_custom_function(data_start_address + 0x40,2,5,argument_3,argument_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ddc": "execute_function_with_offset_08002ddc",
                "param_1": "data_start_address",
                "param_2": "argument_1",
                "param_3": "argument_2",
                "param_4": "argument_3",
                "execute_function_0800322c": "execute_custom_function"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_0800322c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002df6": {
            "entrypoint": "0x08002df6",
            "current_name": "decompress_and_process_data_08002df6",
            "code": "\nvoid decompressAndProcessData_08002df6(int inputData)\n\n{\n  undefined *dataPointer;\n  \n  if (*(byte *)(inputData + 0xc4) == 0) {\n    return;\n  }\n  dataPointer = *(undefined **)(inputData + 200);\n  decompress_and_process_data_080031ce(inputData + 0x40,*dataPointer,dataPointer[1],*(byte *)(inputData + 0xc4) - 2,dataPointer + 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002df6": "decompress_and_process_data_08002df6",
                "param_1": "inputData",
                "puVar1": "dataPointer"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_080031ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e26": {
            "entrypoint": "0x08002e26",
            "current_name": "copy_and_process_data_08002e26",
            "code": "\nvoid copyAndProcessData_08002e26(int inputAddress,undefined4 value)\n\n{\n  *(undefined4 *)(inputAddress + 0xc0) = value;\n  copyValueToPointer(inputAddress + 0x40);\n  executeFunctionWithOffset(inputAddress);\n  decompressAndProcessData(inputAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e26": "copy_and_process_data_08002e26",
                "param_1": "inputAddress",
                "param_2": "value",
                "copy_value_to_pointer_08003154": "copyValueToPointer",
                "execute_function_with_offset_08002ddc": "executeFunctionWithOffset",
                "decompress_and_process_data_08002df6": "decompressAndProcessData"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e44": {
            "entrypoint": "0x08002e44",
            "current_name": "process_file_08002e44",
            "code": "\nvoid processFile_08002e44(int fileData,int filePath,undefined undefined1,undefined undefined2)\n\n{\n  byte byteValue;\n  char charValue;\n  int stringLength;\n  int lastCharIndex;\n  undefined *memoryPointer;\n  \n  stringLength = find_overlap_080099a4(filePath,\".cpp\");\n  lastCharIndex = find_last_char_index_0800997e(filePath,0x2f);\n  if (lastCharIndex == 0) {\n    lastCharIndex = find_last_char_index_0800997e(filePath,0x5c);\n  }\n  if (lastCharIndex != 0) {\n    filePath = lastCharIndex + 1;\n  }\n  if (stringLength == 0) {\n    charValue = find_end_of_string_08000178(filePath);\n    *(char *)(fileData + 0xc4) = charValue + '\\x02';\n  }\n  else {\n    *(char *)(fileData + 0xc4) = ((char)stringLength - (char)filePath) + '\\x02';\n  }\n  process_data_080091a0(*(undefined4 *)(fileData + 200));\n  byteValue = *(byte *)(fileData + 0xc4);\n  memoryPointer = (undefined *)initialize_memory_08009190(byteValue + 1);\n  *(undefined **)(fileData + 200) = memoryPointer;\n  memoryPointer[byteValue] = 0;\n  *memoryPointer = undefined1;\n  memoryPointer[1] = undefined2;\n  copy_string_with_terminator_08009954(memoryPointer + 2,filePath,*(byte *)(fileData + 0xc4) - 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e44": "process_file_08002e44",
                "param_1": "fileData",
                "param_2": "filePath",
                "param_3": "undefined1",
                "param_4": "undefined2",
                "bVar1": "byteValue",
                "cVar2": "charValue",
                "iVar3": "stringLength",
                "iVar4": "lastCharIndex",
                "puVar5": "memoryPointer"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08009190",
                "FUN_0800997e",
                "FUN_08009954",
                "FUN_080091a0",
                "FUN_08000178",
                "FUN_080099a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec4": {
            "entrypoint": "0x08002ec4",
            "current_name": "execute_nested_function_08002ec4",
            "code": "\nvoid executeNestedFunction_08002ec4(int functionPointer)\n\n{\n  (**(code **)(**(int **)(functionPointer + 0xc0) + 8))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec4": "execute_nested_function_08002ec4",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed2": {
            "entrypoint": "0x08002ed2",
            "current_name": "process_output_08002ed2",
            "code": "\nvoid process_output_08002ed2(int input_address)\n\n{\n  uint result;\n  \n  result = (**(code **)(**(int **)(input_address + 0xc0) + 0xc))();\n  if (result != 0xffffffff) {\n    process_input(input_address + 0x44,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed2": "process_output_08002ed2",
                "param_1": "input_address",
                "uVar1": "result",
                "process_input_08003474": "process_input"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003474"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef2": {
            "entrypoint": "0x08002ef2",
            "current_name": "compress_data_08002ef2",
            "code": "\nvoid compressData_08002ef2(int inputBuffer,undefined4 param2,undefined2 param3,undefined4 param4)\n\n{\n  compress_data_08003158(inputBuffer + 0x40,param2,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef2": "compress_data_08002ef2",
                "param_1": "inputBuffer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efe": {
            "entrypoint": "0x08002efe",
            "current_name": "execute_compressed_data_function_08002efe",
            "code": "\nvoid execute_compressed_data_function_08002efe(int input_offset,undefined4 arg2,undefined2 arg3,undefined4 arg4)\n\n{\n  execute_function_with_compressed_data_0800319e(input_offset + 0x40,arg2,arg3,arg4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002efe": "execute_compressed_data_function_08002efe",
                "param_1": "input_offset",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_08000be8"
            ],
            "called": [
                "FUN_0800319e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f0a": {
            "entrypoint": "0x08002f0a",
            "current_name": "decompress_data_08002f0a",
            "code": "\nvoid decompress_data_08002f0a(int input_data)\n\n{\n  decompress_data_08002f0a_0800325a(input_data + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f0a": "decompress_data_08002f0a",
                "param_1": "input_data"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_0800325a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f14": {
            "entrypoint": "0x08002f14",
            "current_name": "decompress_data_08002f14",
            "code": "\nvoid decompress_data_08002f14(int compressed_data)\n\n{\n  decompress_data_08002f14_helper(compressed_data + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f14": "decompress_data_08002f14",
                "param_1": "compressed_data",
                "decompress_data_080032a2": "decompress_data_helper"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000500"
            ],
            "called": [
                "FUN_080032a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f1e": {
            "entrypoint": "0x08002f1e",
            "current_name": "execute_callback_08002f1e",
            "code": "\nvoid executeCallback_08002f1e(int callbackFunction)\n\n{\n  (**(code **)**(undefined4 **)(callbackFunction + 0xc0))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f1e": "execute_callback_08002f1e",
                "param_1": "callbackFunction"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f2c": {
            "entrypoint": "0x08002f2c",
            "current_name": "update_data_08002f2c",
            "code": "\nvoid updateData_08002f2c(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 updatedValue;\n  \n  if (param2 == 0xd0) {\n    DAT_200005f0 = param3;\n    return;\n  }\n  if (0xd0 < param2) {\n    if (param2 == 0xf4) {\n      DAT_200005e0 = param3;\n      return;\n    }\n    updatedValue = param3;\n    if ((param2 != 0xf5) && (updatedValue = DAT_200005e4, param2 == 0xe0)) {\n      DAT_200005d4 = param3;\n      return;\n    }\n    DAT_200005e4 = updatedValue;\n    return;\n  }\n  if (param2 == 0x90) {\n    DAT_200005dc = param3;\n    return;\n  }\n  if (param2 != 0xc0) {\n    return;\n  }\n  DAT_200005ec = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f2c": "update_data_08002f2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f84": {
            "entrypoint": "0x08002f84",
            "current_name": "set_data_if_parameter_equals_08002f84",
            "code": "\nvoid setDataIfParameterEquals_08002f84(undefined4 unusedParam,int valueToCheck,undefined4 dataToSet)\n\n{\n  if (valueToCheck == 0xff) {\n    DAT_200005e8 = dataToSet;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f84": "set_data_if_parameter_equals_08002f84",
                "param_1": "unusedParam",
                "param_2": "valueToCheck",
                "param_3": "dataToSet"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f94": {
            "entrypoint": "0x08002f94",
            "current_name": "initialize_data_08002f94",
            "code": "\nvoid initializeData_08002f94(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  DAT_200005d0 = input3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f94": "initialize_data_08002f94",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa0": {
            "entrypoint": "0x08002fa0",
            "current_name": "get_char_from_offset_08002fa0",
            "code": "\nundefined get_char_from_offset_08002fa0(int offset,int base_address)\n\n{\n  return *(undefined *)(base_address + offset + 0xcc);\n}\n\n",
            "renaming": {
                "FUN_08002fa0": "get_char_from_offset_08002fa0",
                "param_1": "offset",
                "param_2": "base_address"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa8": {
            "entrypoint": "0x08002fa8",
            "current_name": "update_char_if_not_x7_f_08002fa8",
            "code": "\nvoid updateCharIfNotX7F_08002fa8(int baseAddress,int offset,undefined newValue)\n\n{\n  if (*(char *)(baseAddress + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(baseAddress + offset + 0xcc) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fa8": "update_char_if_not_x7_f_08002fa8",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fba": {
            "entrypoint": "0x08002fba",
            "current_name": "get_array_value_08002fba",
            "code": "\nundefined4 getArrayValue_08002fba(int array,int index)\n\n{\n  return *(undefined4 *)(array + (index + 0x42) * 4);\n}\n\n",
            "renaming": {
                "FUN_08002fba": "get_array_value_08002fba",
                "param_1": "array",
                "param_2": "index"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fc2": {
            "entrypoint": "0x08002fc2",
            "current_name": "write_value_to_memory_08002fc2",
            "code": "\nvoid writeValueToMemory_08002fc2(int memoryAddress,int offsetIndex,undefined4 valueToWrite)\n\n{\n  *(undefined4 *)(memoryAddress + (offsetIndex + 0x42) * 4) = valueToWrite;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fc2": "write_value_to_memory_08002fc2",
                "param_1": "memoryAddress",
                "param_2": "offsetIndex",
                "param_3": "valueToWrite"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fca": {
            "entrypoint": "0x08002fca",
            "current_name": "update_params_08002fca",
            "code": "\nvoid update_params_08002fca(undefined4 input_param,undefined4 decode_key,int num_iterations,undefined4 update_value_1,\n                 undefined4 update_value_2)\n\n{\n  uint iteration_count;\n  \n  for (iteration_count = 0; (int)iteration_count < num_iterations; iteration_count = iteration_count + 1 & 0xff) {\n    FUNC_08008ac4(update_value_2);\n    decode_and_update_param_08008a24(decode_key,1);\n    FUNC_08008ac4(update_value_1);\n    decode_and_update_param_08008a24(decode_key,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fca": "update_params_08002fca",
                "param_1": "input_param",
                "param_2": "decode_key",
                "param_3": "num_iterations",
                "param_4": "update_value_1",
                "param_5": "update_value_2",
                "uVar1": "iteration_count"
            },
            "calling": [
                "FUN_08003002"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003002": {
            "entrypoint": "0x08003002",
            "current_name": "initialize_and_update_device_08003002",
            "code": "\nvoid initialize_and_update_device_08003002(int device_parameter)\n\n{\n  if (*(char *)(device_parameter + 0x1f8) != '\\0') {\n    return;\n  }\n  initialize_device(0xd,1);\n  update_device_parameters(device_parameter,0xd,2,0x28,0xd2);\n  FUNC_08008ac4(0xfa);\n  update_device_parameters(device_parameter,0xd,5,0x28,0xd2);\n  FUNC_08008ac4(0x7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003002": "initialize_and_update_device_08003002",
                "param_1": "device_parameter",
                "initialize_device_08008990": "initialize_device",
                "update_params_08002fca": "update_device_parameters"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08002fca",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003048": {
            "entrypoint": "0x08003048",
            "current_name": "initialize_device_08003048",
            "code": "\nvoid initialize_device_08003048(undefined4 param_hardware,undefined4 param_data,undefined4 param_config,undefined4 param_process)\n\n{\n  configure_serial(&DAT_20000700,param_data,6,param_process,param_process);\n  initialize_update_device(param_hardware);\n  process_data(param_hardware,&DAT_20000700);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003048": "initialize_device_08003048",
                "param_1": "param_hardware",
                "param_2": "param_data",
                "param_3": "param_config",
                "param_4": "param_process",
                "configure_hardware_serial_08008c44": "configure_serial",
                "initialize_and_update_device_08003002": "initialize_update_device",
                "copy_and_process_data_08002e26": "process_data"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08002e26",
                "FUN_08008c44",
                "FUN_08003002"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800307a": {
            "entrypoint": "0x0800307a",
            "current_name": "compressed_data_0800307a",
            "code": "\nvoid compressedData_0800307a(undefined4 *functionPointer,uint inputLength,byte *inputData,uint maxOutputLength)\n\n{\n  uint currentByte;\n  uint bitOffset;\n  uint outputLength;\n  uint byteIndex;\n  \n  currentByte = (uint)*inputData;\n  if (maxOutputLength == 0) {\n    maxOutputLength = 0xffffffff;\n  }\n  byteIndex = 0;\n  bitOffset = 0;\n  outputLength = 0;\n  while ((byteIndex < inputLength && (outputLength < maxOutputLength))) {\n    (***(code ***)(undefined4 *)*functionPointer)\n              ((undefined4 *)*functionPointer,((uint)inputData[byteIndex] << (bitOffset & 0xff) | currentByte) & 0x7f);\n    currentByte = (int)(uint)inputData[byteIndex] >> (7 - bitOffset & 0xff) & 0xff;\n    bitOffset = bitOffset + 1;\n    while ((outputLength = outputLength + 1, 6 < bitOffset && (outputLength < maxOutputLength))) {\n      (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,currentByte & 0x7f);\n      currentByte = currentByte >> 7;\n      bitOffset = bitOffset - 7;\n    }\n    byteIndex = byteIndex + 1;\n  }\n  if ((bitOffset != 0) && (outputLength < maxOutputLength)) {\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,(1 << (bitOffset & 0xff)) - 1U & currentByte)\n    ;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800307a": "compressed_data_0800307a",
                "param_1": "functionPointer",
                "param_2": "inputLength",
                "param_3": "inputData",
                "param_4": "maxOutputLength",
                "uVar1": "currentByte",
                "uVar2": "bitOffset",
                "uVar3": "outputLength",
                "uVar4": "byteIndex"
            },
            "calling": [
                "FUN_0800325a",
                "FUN_08003158",
                "FUN_0800319e",
                "FUN_08003106",
                "FUN_080031ce"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003106": {
            "entrypoint": "0x08003106",
            "current_name": "execute_compression_08003106",
            "code": "\nvoid execute_compression_08003106(undefined4 *compressed_data_ptr,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 *function_ptr;\n  \n  function_ptr = (undefined4 *)*compressed_data_ptr;\n  if (function_ptr != (undefined4 *)0x0) {\n    (**(code **)*function_ptr)(function_ptr,0xf0);\n    (***(code ***)(undefined4 *)*compressed_data_ptr)((undefined4 *)*compressed_data_ptr,0x6f);\n    (***(code ***)(undefined4 *)*compressed_data_ptr)((undefined4 *)*compressed_data_ptr,param_2);\n    compressed_data_0800307a(compressed_data_ptr,param_3,param_4,param_3);\n    (***(code ***)(undefined4 *)*compressed_data_ptr)((undefined4 *)*compressed_data_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003106": "execute_compression_08003106",
                "param_1": "compressed_data_ptr",
                "puVar1": "function_ptr"
            },
            "calling": [
                "FUN_08003158"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "initialize_value_0800314e",
            "code": "\nvoid initializeValue_0800314e(undefined4 *outputPtr)\n\n{\n  *outputPtr = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "initialize_value_0800314e",
                "param_1": "outputPtr"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003154": {
            "entrypoint": "0x08003154",
            "current_name": "copy_value_to_pointer_08003154",
            "code": "\nvoid copyValueToPointer_08003154(undefined4 *destination,undefined4 value)\n\n{\n  *destination = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003154": "copy_value_to_pointer_08003154",
                "param_1": "destination",
                "param_2": "value"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003158": {
            "entrypoint": "0x08003158",
            "current_name": "compress_data_08003158",
            "code": "\nvoid compress_data_08003158(undefined4 *data_ptr,uint length,ushort value)\n\n{\n  undefined4 *ptr;\n  ushort compressed_value;\n  \n  ptr = (undefined4 *)*data_ptr;\n  if (ptr != (undefined4 *)0x0) {\n    compressed_value = value;\n    if (((int)length < 0x10) && (value < 0x4000)) {\n      (**(code **)*ptr)(ptr,length | 0xe0);\n      compressed_data_0800307a(data_ptr,2,&compressed_value);\n    }\n    else {\n      execute_compression_08003106(data_ptr,length,2,&compressed_value);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003158": "compress_data_08003158",
                "param_1": "data_ptr",
                "param_2": "length",
                "param_3": "value",
                "puVar1": "ptr",
                "local_a": "compressed_value"
            },
            "calling": [
                "FUN_08002ef2"
            ],
            "called": [
                "FUN_0800307a",
                "FUN_08003106"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800319e": {
            "entrypoint": "0x0800319e",
            "current_name": "execute_function_with_compressed_data_0800319e",
            "code": "\nvoid executeFunctionWithCompressedData_0800319e(undefined4 *functionPointer,uint flags,undefined2 data)\n\n{\n  undefined4 *functionPtr;\n  undefined2 compressedData;\n  \n  functionPtr = (undefined4 *)*functionPointer;\n  if (functionPtr != (undefined4 *)0x0) {\n    compressedData = data;\n    (**(code **)*functionPtr)(functionPtr,flags & 0xf | 0x90);\n    compressed_data_0800307a(functionPointer,2,&compressedData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800319e": "execute_function_with_compressed_data_0800319e",
                "param_1": "functionPointer",
                "param_2": "flags",
                "param_3": "data",
                "puVar1": "functionPtr",
                "local_a": "compressedData"
            },
            "calling": [
                "FUN_08002efe"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031ce": {
            "entrypoint": "0x080031ce",
            "current_name": "decompress_and_process_data_080031ce",
            "code": "\nvoid decompress_and_process_data_080031ce(undefined4 *data_ptr,undefined4 size_param,undefined4 param_3,uint data_length,int additional_param\n                 )\n\n{\n  undefined4 *function_ptr;\n  uint uVar2;\n  \n  function_ptr = (undefined4 *)*data_ptr;\n  if (function_ptr != (undefined4 *)0x0) {\n    (**(code **)*function_ptr)(function_ptr,0xf0,param_3,*(code **)*function_ptr,data_length);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0x79);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,size_param);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,param_3);\n    for (uVar2 = 0; uVar2 < data_length; uVar2 = uVar2 + 1) {\n      compressed_data_0800307a(data_ptr,1,additional_param + uVar2,0);\n    }\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080031ce": "decompress_and_process_data_080031ce",
                "param_1": "data_ptr",
                "param_2": "size_param",
                "param_4": "data_length",
                "param_5": "additional_param",
                "puVar1": "function_ptr"
            },
            "calling": [
                "FUN_08002df6"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800322c": {
            "entrypoint": "0x0800322c",
            "current_name": "execute_function_0800322c",
            "code": "\nvoid executeFunction_0800322c(undefined4 *functionPointer,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 *functionPointerValue;\n  \n  functionPointerValue = (undefined4 *)*functionPointer;\n  if (functionPointerValue != (undefined4 *)0x0) {\n    (**(code **)*functionPointerValue)(functionPointerValue,0xf9);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,param2);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,param3);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800322c": "execute_function_0800322c",
                "param_1": "functionPointer",
                "param_2": "param2",
                "param_3": "param3",
                "puVar1": "functionPointerValue"
            },
            "calling": [
                "FUN_08002ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800325a": {
            "entrypoint": "0x0800325a",
            "current_name": "decompress_data_0800325a",
            "code": "\nvoid decompress_data_0800325a(undefined4 *ptr_data,undefined4 data_length,uint num_iterations,int start_index)\n\n{\n  undefined4 *ptr_function;\n  uint iteration_index;\n  \n  ptr_function = (undefined4 *)*ptr_data;\n  if (ptr_function != (undefined4 *)0x0) {\n    (**(code **)*ptr_function)(ptr_function,0xf0);\n    (***(code ***)(undefined4 *)*ptr_data)((undefined4 *)*ptr_data,data_length);\n    for (iteration_index = 0; iteration_index < num_iterations; iteration_index = iteration_index + 1) {\n      compressed_data_0800307a(ptr_data,1,start_index + iteration_index,0);\n    }\n    (***(code ***)(undefined4 *)*ptr_data)((undefined4 *)*ptr_data,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800325a": "decompress_data_0800325a",
                "param_1": "ptr_data",
                "param_2": "data_length",
                "param_3": "num_iterations",
                "param_4": "start_index",
                "puVar1": "ptr_function",
                "uVar2": "iteration_index"
            },
            "calling": [
                "FUN_08002f0a",
                "FUN_080032a2"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032a2": {
            "entrypoint": "0x080032a2",
            "current_name": "decompress_data_080032a2",
            "code": "\nvoid decompressData_080032a2(undefined4 dataBuffer,undefined4 compressedData,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 endOfString;\n  \n  endOfString = find_end_of_string_08000178(compressedData);\n  decompress_data_0800325a(dataBuffer,0x71,endOfString,compressedData,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032a2": "decompress_data_080032a2",
                "param_1": "dataBuffer",
                "param_2": "compressedData",
                "uVar1": "endOfString"
            },
            "calling": [
                "FUN_08002f14"
            ],
            "called": [
                "FUN_0800325a",
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032bc": {
            "entrypoint": "0x080032bc",
            "current_name": "initialize_struct_080032bc",
            "code": "\nvoid initializeStruct_080032bc(int structAddress,int value1,undefined4 value2)\n\n{\n  *(int *)(structAddress + 4) = value1;\n  *(undefined4 *)(structAddress + 8) = value2;\n  *(undefined *)(structAddress + 0xc) = 0;\n  *(undefined *)(structAddress + 0xd) = 0;\n  *(undefined4 *)(structAddress + 0x10) = 0;\n  *(undefined *)(structAddress + 0x14) = 0;\n  *(undefined4 *)(structAddress + 0x18) = 0;\n  *(undefined4 *)(structAddress + 0x1c) = 0;\n  *(undefined4 *)(structAddress + 0x20) = 0;\n  *(undefined4 *)(structAddress + 0x24) = 0;\n  *(undefined4 *)(structAddress + 0x28) = 0;\n  *(undefined4 *)(structAddress + 0x2c) = 0;\n  *(undefined4 *)(structAddress + 0x30) = 0;\n  *(undefined4 *)(structAddress + 0x34) = 0;\n  *(undefined4 *)(structAddress + 0x38) = 0;\n  *(undefined4 *)(structAddress + 0x3c) = 0;\n  *(undefined4 *)(structAddress + 0x40) = 0;\n  *(undefined4 *)(structAddress + 0x44) = 0;\n  *(undefined4 *)(structAddress + 0x48) = 0;\n  *(undefined4 *)(structAddress + 0x4c) = 0;\n  *(undefined4 *)(structAddress + 0x50) = 0;\n  *(undefined4 *)(structAddress + 0x54) = 0;\n  *(undefined4 *)(structAddress + 0x58) = 0;\n  *(undefined4 *)(structAddress + 0x5c) = 0;\n  *(undefined4 *)(structAddress + 0x60) = 0;\n  *(undefined4 *)(structAddress + 100) = 0;\n  *(undefined4 *)(structAddress + 0x68) = 0;\n  *(undefined4 *)(structAddress + 0x6c) = 0;\n  *(undefined4 *)(structAddress + 0x70) = 0;\n  *(undefined4 *)(structAddress + 0x74) = 0;\n  *(undefined4 *)(structAddress + 0x78) = 0;\n  *(bool *)structAddress = value1 == 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032bc": "initialize_struct_080032bc",
                "param_1": "structAddress",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003306": {
            "entrypoint": "0x08003306",
            "current_name": "update_parameters_08003306",
            "code": "\nvoid updateParameters_08003306(int ptr_struct,uint code,undefined4 value1,undefined4 value2)\n\n{\n  if (code == 0xd0) {\n    *(undefined4 *)(ptr_struct + 0x58) = value1;\n    *(undefined4 *)(ptr_struct + 0x28) = value2;\n    return;\n  }\n  if (0xd0 < code) {\n    if (code == 0xf4) {\n      *(undefined4 *)(ptr_struct + 0x5c) = value1;\n      *(undefined4 *)(ptr_struct + 0x2c) = value2;\n      return;\n    }\n    if (code == 0xf5) {\n      *(undefined4 *)(ptr_struct + 0x60) = value1;\n      *(undefined4 *)(ptr_struct + 0x30) = value2;\n    }\n    else if (code == 0xe0) {\n      *(undefined4 *)(ptr_struct + 0x4c) = value1;\n      *(undefined4 *)(ptr_struct + 0x1c) = value2;\n      return;\n    }\n    return;\n  }\n  if (code == 0x90) {\n    *(undefined4 *)(ptr_struct + 0x50) = value1;\n    *(undefined4 *)(ptr_struct + 0x20) = value2;\n    return;\n  }\n  if (code == 0xc0) {\n    *(undefined4 *)(ptr_struct + 0x54) = value1;\n    *(undefined4 *)(ptr_struct + 0x24) = value2;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003306": "update_parameters_08003306",
                "param_1": "ptr_struct",
                "param_2": "code",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003346": {
            "entrypoint": "0x08003346",
            "current_name": "update_parameters_08003346",
            "code": "\nvoid updateParameters_08003346(int baseAddress,int condition,undefined4 newParam1,undefined4 newParam2)\n\n{\n  if (condition == 0x79) {\n    *(undefined4 *)(baseAddress + 0x70) = newParam1;\n    *(undefined4 *)(baseAddress + 0x34) = newParam2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003346": "update_parameters_08003346",
                "param_1": "baseAddress",
                "param_2": "condition",
                "param_3": "newParam1",
                "param_4": "newParam2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003350": {
            "entrypoint": "0x08003350",
            "current_name": "update_parameters_08003350",
            "code": "\nvoid updateParameters_08003350(int ptr,int value,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (value == 0xf9) {\n    *(undefined4 *)(ptr + 0x74) = newValue1;\n    *(undefined4 *)(ptr + 0x38) = newValue2;\n    return;\n  }\n  if (value != 0xff) {\n    return;\n  }\n  *(undefined4 *)(ptr + 0x78) = newValue1;\n  *(undefined4 *)(ptr + 0x48) = newValue2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003350": "update_parameters_08003350",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003366": {
            "entrypoint": "0x08003366",
            "current_name": "update_values_08003366",
            "code": "\nvoid updateValues_08003366(int baseAddress,int value,undefined4 newParam1,undefined4 newParam2)\n\n{\n  if (value == 0x71) {\n    *(undefined4 *)(baseAddress + 0x68) = newParam1;\n    *(undefined4 *)(baseAddress + 0x40) = newParam2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003366": "update_values_08003366",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "newParam1",
                "param_4": "newParam2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003370": {
            "entrypoint": "0x08003370",
            "current_name": "update_data_fields_08003370",
            "code": "\nvoid updateDataFields_08003370(int dataPointer,undefined4 unusedParam,undefined4 newValue1,undefined4 newValue2)\n\n{\n  *(undefined4 *)(dataPointer + 0x6c) = newValue1;\n  *(undefined4 *)(dataPointer + 0x44) = newValue2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003370": "update_data_fields_08003370",
                "param_1": "dataPointer",
                "param_2": "unusedParam",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003376": {
            "entrypoint": "0x08003376",
            "current_name": "update_memory_08003376",
            "code": "\nvoid updateMemory_08003376(undefined *buffer,undefined data,uint index)\n\n{\n  bool isInvalidIndex;\n  \n  if (index < *(uint *)(buffer + 8)) {\n    isInvalidIndex = false;\n  }\n  else {\n    isInvalidIndex = true;\n    if (*(functionToExecute **)(buffer + 100) != (functionToExecute *)0x0) {\n      *buffer = 1;\n      (**(functionToExecute **)(buffer + 100))(*(undefined4 *)(buffer + 0x3c));\n      if (index < *(uint *)(buffer + 8)) {\n        isInvalidIndex = false;\n      }\n      else {\n        isInvalidIndex = true;\n      }\n    }\n  }\n  if (!isInvalidIndex) {\n    *(undefined *)(*(int *)(buffer + 4) + index) = data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003376": "update_memory_08003376",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "index",
                "bVar1": "isInvalidIndex",
                "code": "functionToExecute"
            },
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033a8": {
            "entrypoint": "0x080033a8",
            "current_name": "copy_and_shift_bits_080033a8",
            "code": "\nvoid copyAndShiftBits_080033a8(undefined4 param1,uint param2,int param3)\n\n{\n  byte currentByte;\n  int outputIndex;\n  uint inputIndex;\n  \n  outputIndex = 0;\n  for (inputIndex = 0; inputIndex < param2; inputIndex = inputIndex + 2) {\n    currentByte = *(byte *)(param3 + inputIndex);\n    *(byte *)(param3 + outputIndex) = currentByte;\n    *(byte *)(param3 + outputIndex) = *(char *)(param3 + inputIndex + 1) << 7 | currentByte;\n    outputIndex = outputIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bits_080033a8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "bVar1": "currentByte",
                "iVar2": "outputIndex",
                "uVar3": "inputIndex"
            },
            "calling": [
                "FUN_080033cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033cc": {
            "entrypoint": "0x080033cc",
            "current_name": "process_input_080033cc",
            "code": "\nvoid processInput_080033cc(int inputData,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  char firstChar;\n  int result;\n  char *inputPtr;\n  \n  inputPtr = *(char **)(inputData + 4);\n  firstChar = *inputPtr;\n  if (firstChar == 'q') {\n    if (*(int *)(inputData + 0x68) != 0) {\n      result = copy_and_shift_bits_080033a8(inputData,*(int *)(inputData + 0x18) + -1,inputPtr + 1,inputPtr,param4);\n      update_memory_08003376(inputData,0,result + 1);\n      (**(code **)(inputData + 0x68))(*(undefined4 *)(inputData + 0x40),*(int *)(inputData + 4) + 1);\n      return;\n    }\n  }\n  else if (firstChar == 'y') {\n    if (*(code **)(inputData + 0x70) != (code *)0x0) {\n      if (*(uint *)(inputData + 0x18) < 3) {\n        (**(code **)(inputData + 0x70))(*(undefined4 *)(inputData + 0x34),0,0);\n        return;\n      }\n      result = copy_and_shift_bits_080033a8(inputData,*(uint *)(inputData + 0x18) - 3,inputPtr + 3,inputPtr,param4);\n      update_memory_08003376(inputData,0,result + 3);\n      result = *(int *)(inputData + 4);\n      (**(code **)(inputData + 0x70))\n                (*(undefined4 *)(inputData + 0x34),*(undefined *)(result + 1),*(undefined *)(result + 2)\n                 ,result + 3);\n      return;\n    }\n  }\n  else if (*(code **)(inputData + 0x6c) != (code *)0x0) {\n    (**(code **)(inputData + 0x6c))\n              (*(undefined4 *)(inputData + 0x44),firstChar,*(int *)(inputData + 0x18) + -1,inputPtr + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033cc": "process_input_080033cc",
                "param_1": "inputData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "firstChar",
                "iVar2": "result",
                "pcVar3": "inputPtr"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [
                "FUN_08003376",
                "FUN_080033a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800344a": {
            "entrypoint": "0x0800344a",
            "current_name": "initialize_data_0800344a",
            "code": "\nvoid initializeData_0800344a(int data)\n\n{\n  uint index;\n  \n  *(undefined4 *)(data + 0x10) = 0;\n  *(undefined *)(data + 0xc) = 0;\n  *(undefined *)(data + 0xd) = 0;\n  for (index = 0; index < *(uint *)(data + 8); index = index + 1) {\n    *(undefined *)(*(int *)(data + 4) + index) = 0;\n  }\n  *(undefined *)(data + 0x14) = 0;\n  *(undefined4 *)(data + 0x18) = 0;\n  if (*(code **)(data + 0x78) != (code *)0x0) {\n    (**(code **)(data + 0x78))(*(undefined4 *)(data + 0x48));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800344a": "initialize_data_0800344a",
                "param_1": "data",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "process_input_08003474",
            "code": "\nvoid processInput_08003474(int input,uint value)\n\n{\n  byte byteVal;\n  \n  if (*(char *)(input + 0x14) != '\\0') {\n    if (value != 0xf7) {\n      update_memory_08003376(input,value,*(undefined4 *)(input + 0x18));\n      *(int *)(input + 0x18) = *(int *)(input + 0x18) + 1;\n      return;\n    }\n    *(undefined *)(input + 0x14) = 0;\n    process_input_080033cc();\n    return;\n  }\n  if ((*(int *)(input + 0x10) == 0) || (0x7f < (int)value)) {\n    if ((int)value < 0xf0) {\n      *(byte *)(input + 0xd) = (byte)value & 0xf;\n      value = value & 0xf0;\n    }\n    if (value == 0xf0) {\n      *(undefined *)(input + 0x14) = 1;\n      *(undefined4 *)(input + 0x18) = 0;\n      return;\n    }\n    if (value < 0xf1) {\n      if (value != 0xc0) {\n        if (value < 0xc1) {\n          if (value != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (value == 0xd0) goto LAB_0800359c;\n          if (value != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(undefined4 *)(input + 0x10) = 2;\n        *(char *)(input + 0xc) = (char)value;\n        return;\n      }\nLAB_0800359c:\n      *(undefined4 *)(input + 0x10) = 1;\n      *(char *)(input + 0xc) = (char)value;\n      return;\n    }\n    if (value != 0xf9) {\n      if (0xf9 < value) {\n        if (value == 0xff) {\n          initialize_data_0800344a(input);\n          return;\n        }\n        return;\n      }\n      if (1 < value - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(code **)(input + 0x74) != (code *)0x0) {\n      (**(code **)(input + 0x74))(*(undefined4 *)(input + 0x38));\n    }\n  }\n  else {\n    *(int *)(input + 0x10) = *(int *)(input + 0x10) + -1;\n    update_memory_08003376();\n    if ((*(int *)(input + 0x10) == 0) && (byteVal = *(byte *)(input + 0xc), byteVal != 0)) {\n      if (byteVal == 0xd0) {\n        if (*(code **)(input + 0x58) != (code *)0x0) {\n          (**(code **)(input + 0x58))\n                    (*(undefined4 *)(input + 0x28),*(undefined *)(input + 0xd),\n                     **(undefined **)(input + 4));\n        }\n      }\n      else if (byteVal < 0xd1) {\n        if (byteVal == 0x90) {\n          if (*(code **)(input + 0x50) != (code *)0x0) {\n            (**(code **)(input + 0x50))\n                      (*(undefined4 *)(input + 0x20),*(undefined *)(input + 0xd),\n                       (uint)(*(byte **)(input + 4))[1] + (uint)**(byte **)(input + 4) * 0x80);\n          }\n        }\n        else if ((byteVal == 0xc0) && (*(code **)(input + 0x54) != (code *)0x0)) {\n          (**(code **)(input + 0x54))\n                    (*(undefined4 *)(input + 0x24),*(undefined *)(input + 0xd),\n                     **(undefined **)(input + 4));\n        }\n      }\n      else if (byteVal == 0xf4) {\n        if (*(code **)(input + 0x5c) != (code *)0x0) {\n          (**(code **)(input + 0x5c))\n                    (*(undefined4 *)(input + 0x2c),(*(undefined **)(input + 4))[1],\n                     **(undefined **)(input + 4));\n        }\n      }\n      else if (byteVal == 0xf5) {\n        if (*(code **)(input + 0x60) != (code *)0x0) {\n          (**(code **)(input + 0x60))\n                    (*(undefined4 *)(input + 0x30),(*(undefined **)(input + 4))[1],\n                     **(undefined **)(input + 4));\n        }\n      }\n      else if ((byteVal == 0xe0) && (*(code **)(input + 0x4c) != (code *)0x0)) {\n        (**(code **)(input + 0x4c))\n                  (*(undefined4 *)(input + 0x1c),*(undefined *)(input + 0xd),\n                   (uint)(*(byte **)(input + 4))[1] + (uint)**(byte **)(input + 4) * 0x80);\n      }\n      *(undefined *)(input + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "process_input_08003474",
                "param_1": "input",
                "param_2": "value",
                "bVar1": "byteVal"
            },
            "calling": [
                "FUN_08002ed2"
            ],
            "called": [
                "FUN_080033cc",
                "FUN_0800344a",
                "FUN_08003376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035b8": {
            "entrypoint": "0x080035b8",
            "current_name": "initialize_and_update_microcontroller_080035b8",
            "code": "\nvoid initialize_and_update_microcontroller_080035b8(void)\n\n{\n  int result;\n  uint data_value;\n  undefined4 local_54 [2];\n  undefined4 memory_offset;\n  undefined4 memory_address;\n  undefined4 memory_value;\n  undefined4 memory_index;\n  undefined4 memory_size;\n  undefined4 memory_flag;\n  undefined4 local_30 [4];\n  undefined4 variable_20;\n  undefined4 variable_1c;\n  undefined4 variable_14;\n  undefined4 variable_10;\n  undefined4 variable_c;\n  \n  local_30[0] = 2;\n  variable_20 = 1;\n  variable_1c = 0x10;\n  variable_14 = 2;\n  variable_10 = 0;\n  variable_c = 0x380000;\n  result = check_and_modify_values_08005460(local_30);\n  if (result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  memory_address = 0xf;\n  memory_value = 2;\n  memory_index = 0;\n  memory_size = 0x400;\n  memory_flag = 0;\n  result = initialize_and_calculate_memory_080058ac(&memory_address);\n  if (result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  local_54[0] = 2;\n  memory_offset = 0x8000;\n  result = update_control_registers_08005aa4(local_54);\n  if (result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  data_value = get_data_value_08005a1c();\n  set_parameters_08003fd8(data_value / 1000);\n  update_status_08004024(4);\n  update_memory_location_08003f30(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035b8": "initialize_and_update_microcontroller_080035b8",
                "iVar1": "result",
                "uVar2": "data_value",
                "local_4c": "memory_offset",
                "local_44": "memory_address",
                "local_40": "memory_value",
                "local_3c": "memory_index",
                "local_38": "memory_size",
                "local_34": "memory_flag",
                "local_20": "variable_20",
                "local_1c": "variable_1c",
                "local_14": "variable_14",
                "local_10": "variable_10",
                "local_c": "variable_c"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080073e8",
                "FUN_08005460",
                "FUN_08003f30",
                "FUN_08003fd8",
                "FUN_08004024",
                "FUN_08005a1c",
                "FUN_08005aa4",
                "FUN_080058ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08003658",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200000f4; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800ac18);\n  }\n  for (puVar2 = &DAT_200000f4; puVar2 < &DAT_20000a3c; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_peripheral_registers_080073ec();\n  execute_functions_08009148();\n  UNRECOVERED_JUMPTABLE = (code *)0x800368a;\n  continuous_processing_08008f1c();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_080073ec",
                "FUN_08009148",
                "FUN_08008f1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a2": {
            "entrypoint": "0x080036a2",
            "current_name": "initialize_and_update_all_devices_080036a2",
            "code": "\nvoid initialize_and_update_all_devices_080036a2(void)\n\n{\n  initialize_and_update_all_devices_080036a2_080072fa();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036a2": "initialize_and_update_all_devices_080036a2"
            },
            "calling": [
                "FUN_08008f0e"
            ],
            "called": [
                "FUN_080072fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036ac": {
            "entrypoint": "0x080036ac",
            "current_name": "check_character_presence_080036ac",
            "code": "\nuint check_character_presence_080036ac(int input_value)\n\n{\n  uint character_index;\n  \n  if ((uint)(input_value << 0x18) >> 0x1c < 5) {\n    for (character_index = 0; (character_index < 0x3c && (input_value != (char)(&DAT_0800a908)[character_index])); character_index = character_index + 1)\n    {\n    }\n  }\n  else {\n    character_index = 0xffffffff;\n  }\n  return character_index;\n}\n\n",
            "renaming": {
                "FUN_080036ac": "check_character_presence_080036ac",
                "param_1": "input_value",
                "uVar1": "character_index"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_08000aec",
                "FUN_08000ef8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036d4": {
            "entrypoint": "0x080036d4",
            "current_name": "FUNC_080036d4",
            "code": "\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "calling": [
                "FUN_08003724"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036d8": {
            "entrypoint": "0x080036d8",
            "current_name": "initialize_memory_080036d8",
            "code": "\nundefined4 initializeMemory_080036d8(uint size)\n\n{\n  int result;\n  \n  result = setMemoryParameters(DAT_20000018 / (1000 / DAT_2000000c));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < size) {\n    return 1;\n  }\n  updateMemoryLocation(0xffffffff,size,0);\n  DAT_20000010 = size;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036d8": "initialize_memory_080036d8",
                "param_1": "size",
                "iVar1": "result",
                "set_parameters_08003fd8": "setMemoryParameters",
                "update_memory_location_08003f30": "updateMemoryLocation"
            },
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "called": [
                "FUN_08003f30",
                "FUN_08003fd8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003724": {
            "entrypoint": "0x08003724",
            "current_name": "initialize_and_update_08003724",
            "code": "\n\n\nundefined4 initialize_and_update_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  update_value(3);\n  initialize_memory(0xf);\n  FUNC_080036d4();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003724": "initialize_and_update_08003724",
                "update_value_08003f0c": "update_value",
                "initialize_memory_080036d8": "initialize_memory"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080036d4",
                "FUN_080036d8",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003748": {
            "entrypoint": "0x08003748",
            "current_name": "update_sum_08003748",
            "code": "\nvoid updateSum_08003748(void)\n\n{\n  DAT_20000a34 = (uint)DAT_2000000c + DAT_20000a34;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003748": "update_sum_08003748"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003760": {
            "entrypoint": "0x08003760",
            "current_name": "get_data_value_08003760",
            "code": "\nundefined4 get_data_value_08003760(void)\n\n{\n  return DAT_20000a34;\n}\n\n",
            "renaming": {
                "FUN_08003760": "get_data_value_08003760"
            },
            "calling": [
                "FUN_08003b8c",
                "FUN_08005460",
                "FUN_080067ac",
                "FUN_08008500",
                "FUN_0800376c",
                "FUN_08007e74",
                "FUN_080058d2",
                "FUN_08003a20",
                "FUN_080066e8",
                "FUN_08003e20",
                "FUN_0800723c",
                "FUN_08007f0e",
                "FUN_08005aa4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376c": {
            "entrypoint": "0x0800376c",
            "current_name": "check_and_increment_counter_0800376c",
            "code": "\nundefined4 checkAndIncrementCounter_0800376c(uint **pointerArray,uint value)\n\n{\n  int dataValue;\n  uint dataCalculation;\n  int dataComparison;\n  undefined4 returnValue;\n  uint *pointer;\n  uint calculationResult;\n  uint counter;\n  \n  counter = 0;\n  dataValue = get_data_value_08003760();\n  calculationResult = DAT_20000018;\n  pointer = *pointerArray;\n  if ((pointer[2] & 0x100) == 0) {\n    if (((pointer[1] & 0x100) == 0) && ((pointer[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**pointerArray & 2) != 0) goto LAB_0800387e;\n      } while ((value == 0xffffffff) ||\n              ((value != 0 && (dataComparison = get_data_value_08003760(), (uint)(dataComparison - dataValue) <= value))));\n      pointerArray[10] = (uint *)((uint)pointerArray[10] | 4);\n      *(undefined *)(pointerArray + 9) = 0;\n      returnValue = 3;\n    }\n    else {\n      dataCalculation = calculate_data_value_08005bb8(2);\n      pointer = *pointerArray;\n      if (((pointer[4] & 0x24924924) == 0) && ((pointer[3] & 0x924924) == 0)) {\n        if ((pointer[4] & 0x12492492) == 0) {\n          if ((pointer[3] & 0x492492) == 0) {\n            dataComparison = 0x14;\n          }\n          else {\n            dataComparison = 0x29;\n          }\n        }\n        else {\n          dataComparison = 0x29;\n        }\n      }\n      else if (((pointer[4] & 0x12492492) == 0) && ((pointer[3] & 0x492492) == 0)) {\n        dataComparison = 0x54;\n      }\n      else if ((pointer[4] & 0x249249) == 0) {\n        if ((pointer[3] & 0x249249) == 0) {\n          dataComparison = 0x54;\n        }\n        else {\n          dataComparison = 0xfc;\n        }\n      }\n      else {\n        dataComparison = 0xfc;\n      }\n      calculationResult = (calculationResult / dataCalculation) * dataComparison;\n      for (; counter <= calculationResult && calculationResult - counter != 0; counter = counter + 1) {\n        if ((value != 0xffffffff) &&\n           ((value == 0 || (dataComparison = get_data_value_08003760(), value < (uint)(dataComparison - dataValue))))) {\n          pointerArray[10] = (uint *)((uint)pointerArray[10] | 4);\n          *(undefined *)(pointerArray + 9) = 0;\n          return 3;\n        }\n      }\nLAB_0800387e:\n      **pointerArray = 0xffffffed;\n      pointerArray[10] = (uint *)((uint)pointerArray[10] | 0x200);\n      if (((*pointerArray)[2] & 0xe0000) == 0xe0000) {\n        if (pointerArray[3] == (uint *)0x0) {\n          pointerArray[10] = (uint *)((uint)pointerArray[10] & 0xfffffeff);\n          if (((uint)pointerArray[10] & 0x1000) == 0) {\n            pointerArray[10] = (uint *)((uint)pointerArray[10] | 1);\n            returnValue = 0;\n          }\n          else {\n            returnValue = 0;\n          }\n        }\n        else {\n          returnValue = 0;\n        }\n      }\n      else {\n        returnValue = 0;\n      }\n    }\n  }\n  else {\n    pointerArray[10] = (uint *)((uint)pointerArray[10] | 0x20);\n    *(undefined *)(pointerArray + 9) = 0;\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800376c": "check_and_increment_counter_0800376c",
                "param_1": "pointerArray",
                "param_2": "value",
                "iVar1": "dataValue",
                "uVar2": "dataCalculation",
                "iVar3": "dataComparison",
                "uVar4": "returnValue",
                "puVar5": "pointer",
                "uVar6": "calculationResult",
                "local_1c": "counter"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038dc": {
            "entrypoint": "0x080038dc",
            "current_name": "get_pointer_value_080038dc",
            "code": "\nundefined4 getPointerValue_080038dc(int *pointer)\n\n{\n  return *(undefined4 *)(*pointer + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_080038dc": "get_pointer_value_080038dc",
                "param_1": "pointer"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038e4": {
            "entrypoint": "0x080038e4",
            "current_name": "update_configuration_080038e4",
            "code": "\nundefined4 updateConfiguration_080038e4(int *config,uint *data)\n\n{\n  undefined4 returnValue;\n  uint value;\n  int loopCounter;\n  \n  if (*(char *)(config + 9) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(config + 9) = 1;\n    value = data[1];\n    if (value < 7) {\n      value = value * 5 - 5;\n      *(uint *)(*config + 0x34) =\n           *data << (value & 0xff) | *(uint *)(*config + 0x34) & ~(0x1f << (value & 0xff));\n    }\n    else if (value < 0xd) {\n      value = value * 5 - 0x23;\n      *(uint *)(*config + 0x30) =\n           *data << (value & 0xff) | *(uint *)(*config + 0x30) & ~(0x1f << (value & 0xff));\n    }\n    else {\n      value = value * 5 - 0x41;\n      *(uint *)(*config + 0x2c) =\n           *data << (value & 0xff) | *(uint *)(*config + 0x2c) & ~(0x1f << (value & 0xff));\n    }\n    value = *data;\n    if (value < 10) {\n      *(uint *)(*config + 0x10) =\n           data[2] << (value * 3 & 0xff) |\n           *(uint *)(*config + 0x10) & ~(7 << (value * 3 & 0xff));\n    }\n    else {\n      value = value * 3 - 0x1e;\n      *(uint *)(*config + 0xc) =\n           data[2] << (value & 0xff) | *(uint *)(*config + 0xc) & ~(7 << (value & 0xff));\n    }\n    if (*data - 0x10 < 2) {\n      if (*config == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*data == 0x10) {\n            for (loopCounter = (DAT_20000018 / 1000000) * 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n            }\n            returnValue = 0;\n          }\n          else {\n            returnValue = 0;\n          }\n        }\n        else {\n          returnValue = 0;\n        }\n      }\n      else {\n        config[10] = config[10] | 0x20;\n        returnValue = 1;\n      }\n    }\n    else {\n      returnValue = 0;\n    }\n    *(undefined *)(config + 9) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080038e4": "update_configuration_080038e4",
                "param_1": "config",
                "param_2": "data",
                "uVar1": "returnValue",
                "uVar2": "value",
                "local_c": "loopCounter"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a1c": {
            "entrypoint": "0x08003a1c",
            "current_name": "get_offset_value_08003a1c",
            "code": "\nundefined4 getOffsetValue_08003a1c(int baseAddress)\n\n{\n  return *(undefined4 *)(baseAddress + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08003a1c": "get_offset_value_08003a1c",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a20": {
            "entrypoint": "0x08003a20",
            "current_name": "update_data_08003a20",
            "code": "\nundefined4 updateData_08003a20(int *dataPointer,undefined4 value)\n\n{\n  int dataValue1;\n  undefined4 result;\n  int dataValue2;\n  uint loopCount;\n  \n  dataValue2 = *dataPointer;\n  if ((*(uint *)(dataValue2 + 8) & 1) == 0) {\n    *(uint *)(dataValue2 + 8) = *(uint *)(dataValue2 + 8) | 1;\n    for (loopCount = DAT_20000018 / 1000000; loopCount != 0; loopCount = loopCount - 1) {\n    }\n    dataValue2 = get_data_value_08003760(dataPointer,value,DAT_20000018 * 0x431bde83);\n    do {\n      if ((*(uint *)(*dataPointer + 8) & 1) != 0) {\n        return 0;\n      }\n      dataValue1 = get_data_value_08003760();\n    } while ((uint)(dataValue1 - dataValue2) < 3);\n    dataPointer[10] = dataPointer[10] | 0x10;\n    dataPointer[0xb] = dataPointer[0xb] | 1;\n    *(undefined *)(dataPointer + 9) = 0;\n    result = 1;\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003a20": "update_data_08003a20",
                "param_1": "dataPointer",
                "param_2": "value",
                "iVar1": "dataValue1",
                "iVar3": "dataValue2",
                "uVar2": "result",
                "local_14": "loopCount"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003aa0": {
            "entrypoint": "0x08003aa0",
            "current_name": "check_and_update_data_08003aa0",
            "code": "\n\n\nint checkAndUpdateData_08003aa0(int *data)\n\n{\n  int result;\n  undefined4 *ptr;\n  int value;\n  \n  if (*(char *)(data + 9) != '\\x01') {\n    *(undefined *)(data + 9) = 1;\n    result = updateData();\n    if (result == 0) {\n      data[10] = data[10] & 0xfffffcfeU | 0x100;\n      ptr = (undefined4 *)*data;\n      if ((ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        data[10] = data[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          data[10] = data[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        data[10] = data[10] & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          data[10] = data[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((data[10] & 0x1000U) == 0) {\n        data[0xb] = 0;\n      }\n      else {\n        data[0xb] = data[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(data + 9) = 0;\n      *ptr = 0xfffffffd;\n      value = *data;\n      if (((*(uint *)(value + 8) & 0xe0000) == 0xe0000) &&\n         ((value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(data + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08003aa0": "check_and_update_data_08003aa0",
                "param_1": "data",
                "iVar1": "result",
                "puVar2": "ptr",
                "iVar3": "value",
                "update_data_08003a20": "updateData"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003a20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b8c": {
            "entrypoint": "0x08003b8c",
            "current_name": "update_data_flags_08003b8c",
            "code": "\nundefined4 updateDataFlags_08003b8c(int *dataPtr)\n\n{\n  int currentValue;\n  int originalValue;\n  \n  originalValue = *dataPtr;\n  if ((*(uint *)(originalValue + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(originalValue + 8) = *(uint *)(originalValue + 8) & 0xfffffffe;\n  originalValue = get_data_value_08003760();\n  do {\n    if ((*(uint *)(*dataPtr + 8) & 1) == 0) {\n      return 0;\n    }\n    currentValue = get_data_value_08003760();\n  } while ((uint)(currentValue - originalValue) < 3);\n  dataPtr[10] = dataPtr[10] | 0x10;\n  dataPtr[0xb] = dataPtr[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003b8c": "update_data_flags_08003b8c",
                "param_1": "dataPtr",
                "iVar1": "currentValue",
                "iVar2": "originalValue"
            },
            "calling": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003bd8": {
            "entrypoint": "0x08003bd8",
            "current_name": "process_data_flags_08003bd8",
            "code": "\nundefined4 process_data_flags_08003bd8(int *data_ptr)\n\n{\n  int flag_update_result;\n  uint combined_flags1;\n  uint combined_flags2;\n  \n  if (data_ptr == (int *)0x0) {\n    return 1;\n  }\n  if (data_ptr[10] == 0) {\n    data_ptr[0xb] = 0;\n    *(undefined *)(data_ptr + 9) = 0;\n    update_register_settings_08006ca8();\n  }\n  flag_update_result = update_data_flags_08003b8c(data_ptr);\n  if (((data_ptr[10] & 0x10U) == 0) && (flag_update_result == 0)) {\n    data_ptr[10] = data_ptr[10] & 0xffffeefdU | 2;\n    combined_flags1 = data_ptr[1] | data_ptr[7] | data_ptr[3] << 1;\n    if (data_ptr[2] == 0x100) {\n      combined_flags2 = 0x100;\n    }\n    else {\n      combined_flags2 = 0;\n      if (data_ptr[2] == 1) {\n        combined_flags2 = 0x100;\n      }\n    }\n    if (data_ptr[5] == 1) {\n      if (data_ptr[3] == 0) {\n        combined_flags2 = combined_flags2 | (data_ptr[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        data_ptr[10] = data_ptr[10] | 0x20;\n        data_ptr[0xb] = data_ptr[0xb] | 1;\n      }\n    }\n    *(uint *)(*data_ptr + 4) = combined_flags2 | *(uint *)(*data_ptr + 4) & 0xffff16ff;\n    *(uint *)(*data_ptr + 8) = *(uint *)(*data_ptr + 8) & 0xffe1f7fd | combined_flags1;\n    if ((data_ptr[2] == 0x100) || (data_ptr[2] == 1)) {\n      combined_flags2 = (data_ptr[4] + -1) * 0x100000;\n    }\n    else {\n      combined_flags2 = 0;\n    }\n    *(uint *)(*data_ptr + 0x2c) = combined_flags2 | *(uint *)(*data_ptr + 0x2c) & 0xff0fffff;\n    if (combined_flags1 != (*(uint *)(*data_ptr + 8) & 0xff1f0efe)) {\n      data_ptr[10] = data_ptr[10] & 0xffffffedU | 0x10;\n      data_ptr[0xb] = data_ptr[0xb] | 1;\n      return 1;\n    }\n    data_ptr[0xb] = 0;\n    data_ptr[10] = data_ptr[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  data_ptr[10] = data_ptr[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003bd8": "process_data_flags_08003bd8",
                "param_1": "data_ptr",
                "iVar1": "flag_update_result",
                "uVar2": "combined_flags1",
                "uVar3": "combined_flags2"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006ca8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ce8": {
            "entrypoint": "0x08003ce8",
            "current_name": "update_data_flags_08003ce8",
            "code": "\nint update_data_flags_08003ce8(int *data_ptr)\n\n{\n  int result;\n  \n  if (data_ptr == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    data_ptr[10] = data_ptr[10] | 2;\n    result = update_data_flags_08003ce8_08003b8c();\n    if (result == 0) {\n      *(undefined4 *)*data_ptr = 0xffffffe0;\n      *(uint *)(*data_ptr + 4) = *(uint *)(*data_ptr + 4) & 0xff3f0000;\n      *(uint *)(*data_ptr + 8) = *(uint *)(*data_ptr + 8) & 0xff0106f0;\n      *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) & 0xff000000;\n      *(uint *)(*data_ptr + 0x10) = *(uint *)(*data_ptr + 0x10) & 0xc0000000;\n      *(uint *)(*data_ptr + 0x14) = *(uint *)(*data_ptr + 0x14) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x20) = *(uint *)(*data_ptr + 0x20) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x24) = *(uint *)(*data_ptr + 0x24) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x28) = *(uint *)(*data_ptr + 0x28) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x2c) = *(uint *)(*data_ptr + 0x2c) & 0xff000000;\n      *(uint *)(*data_ptr + 0x2c) = *(uint *)(*data_ptr + 0x2c) & 0xff000000;\n      *(uint *)(*data_ptr + 0x30) = *(uint *)(*data_ptr + 0x30) & 0xc0000000;\n      *(uint *)(*data_ptr + 0x34) = *(uint *)(*data_ptr + 0x34) & 0xc0000000;\n      *(uint *)(*data_ptr + 0x38) = *(uint *)(*data_ptr + 0x38) & 0xffc00000;\n      *(uint *)(*data_ptr + 0x38) = *(uint *)(*data_ptr + 0x38) & 0xffc00000;\n      update_memory_access_08006d24(data_ptr);\n      data_ptr[0xb] = 0;\n      data_ptr[10] = 0;\n    }\n    *(undefined *)(data_ptr + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003ce8": "update_data_flags_08003ce8",
                "param_1": "data_ptr",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003de4": {
            "entrypoint": "0x08003de4",
            "current_name": "update_data_flags_08003de4",
            "code": "\nint update_data_flags_08003de4(int data_ptr)\n\n{\n  int status;\n  \n  if (*(char *)(data_ptr + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data_ptr + 0x24) = 1;\n  status = update_data_flags_08003de4_helper();\n  if (status == 0) {\n    *(uint *)(data_ptr + 0x28) = *(uint *)(data_ptr + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(data_ptr + 0x24) = 0;\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003de4": "update_data_flags_08003de4",
                "param_1": "data_ptr",
                "iVar1": "status",
                "update_data_flags_08003b8c": "update_data_flags_helper"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e20": {
            "entrypoint": "0x08003e20",
            "current_name": "check_and_update_data_08003e20",
            "code": "\nint checkAndUpdateData_08003e20(int *data)\n\n{\n  uint value1;\n  int result;\n  uint value2;\n  int initialValue;\n  int currentValue;\n  int iterationCount;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  result = update_data_flags_08003b8c();\n  if (result == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    value1 = DAT_20000018;\n    value2 = calculate_data_value_08005bb8(2);\n    for (iterationCount = value1 / value2 << 1; iterationCount != 0; iterationCount = iterationCount + -1) {\n    }\n    update_data_08003a20(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    initialValue = get_data_value_08003760();\n    while (currentValue = *data, (*(uint *)(currentValue + 8) & 8) != 0) {\n      currentValue = get_data_value_08003760();\n      if (10 < (uint)(currentValue - initialValue)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(currentValue + 8) = *(uint *)(currentValue + 8) | 4;\n    initialValue = get_data_value_08003760();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      currentValue = get_data_value_08003760();\n      if (10 < (uint)(currentValue - initialValue)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003e20": "check_and_update_data_08003e20",
                "param_1": "data",
                "uVar1": "value1",
                "iVar2": "result",
                "uVar3": "value2",
                "iVar4": "initialValue",
                "iVar5": "currentValue",
                "local_14": "iterationCount"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08003a20",
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f0c": {
            "entrypoint": "0x08003f0c",
            "current_name": "update_value_08003f0c",
            "code": "\n\n\nvoid updateValue_08003f0c(uint newValue)\n\n{\n  _DAT_e000ed0c = (newValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f0c": "update_value_08003f0c",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f30": {
            "entrypoint": "0x08003f30",
            "current_name": "update_memory_location_08003f30",
            "code": "\n\n\nvoid updateMemoryLocation_08003f30(uint memoryLocation,uint bitMask,uint value)\n\n{\n  uint shiftAmount;\n  uint shiftMod;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftMod = 7 - shiftAmount;\n  if (3 < shiftMod) {\n    shiftMod = 4;\n  }\n  if (shiftAmount + 4 < 7) {\n    shiftAmount = 0;\n  }\n  else {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftAmount = (bitMask & (1 << (shiftMod & 0xff)) - 1U) << (shiftAmount & 0xff) |\n          (1 << (shiftAmount & 0xff)) - 1U & value;\n  if ((int)memoryLocation < 0) {\n    *(char *)((memoryLocation & 0xf) + 0xe000ed14) = (char)(shiftAmount << 4);\n  }\n  else {\n    *(char *)(memoryLocation + 0xe000e400) = (char)(shiftAmount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f30": "update_memory_location_08003f30",
                "param_1": "memoryLocation",
                "param_2": "bitMask",
                "param_3": "value",
                "uVar1": "shiftAmount",
                "uVar2": "shiftMod"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080036d8",
                "FUN_080077b0",
                "FUN_080035b8",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "set_bit_value_08003f94",
            "code": "\nvoid setBitValue_08003f94(uint value)\n\n{\n  if (-1 < (int)value) {\n    *(int *)((value >> 5) * 4 + -0x1fff1f00) = 1 << (value & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "set_bit_value_08003f94",
                "param_1": "value"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080077b0",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fb0": {
            "entrypoint": "0x08003fb0",
            "current_name": "set_bit_in_memory_08003fb0",
            "code": "\nvoid setBitInMemory_08003fb0(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)(((bitIndex >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n    performDataSyncBarrier(0xf);\n    performInstructionSyncBarrier(0xf);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fb0": "set_bit_in_memory_08003fb0",
                "param_1": "bitIndex",
                "DataSynchronizationBarrier": "performDataSyncBarrier",
                "InstructionSynchronizationBarrier": "performInstructionSyncBarrier"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd8": {
            "entrypoint": "0x08003fd8",
            "current_name": "set_parameters_08003fd8",
            "code": "\n\n\nundefined4 setParameters_08003fd8(int inputValue)\n\n{\n  if (inputValue - 1U < 0x1000000) {\n    _DAT_e000e014 = inputValue - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003fd8": "set_parameters_08003fd8",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_080036d8",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004004": {
            "entrypoint": "0x08004004",
            "current_name": "set_bit_in_memory_08004004",
            "code": "\nvoid setBitInMemory_08004004(uint value)\n\n{\n  if (-1 < (int)value) {\n    *(int *)(((value >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (value & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004004": "set_bit_in_memory_08004004",
                "param_1": "value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004024": {
            "entrypoint": "0x08004024",
            "current_name": "update_status_08004024",
            "code": "\n\n\nvoid updateStatus_08004024(int status)\n\n{\n  if (status != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004024": "update_status_08004024",
                "param_1": "status"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004044": {
            "entrypoint": "0x08004044",
            "current_name": "FUNC_08004044",
            "code": "\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "calling": [
                "FUN_08004046"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004046": {
            "entrypoint": "0x08004046",
            "current_name": "initialize_application_08004046",
            "code": "\nvoid initializeApplication_08004046(void)\n\n{\n  FUNC_08004044();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004046": "initialize_application_08004046"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [
                "FUN_08004044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004050": {
            "entrypoint": "0x08004050",
            "current_name": "initialize_options_08004050",
            "code": "\n\n\nundefined4 initializeOptions_08004050(uint **options)\n\n{\n  uint *currentOption;\n  \n  if (*(char *)((int)options + 0x21) != '\\x02') {\n    options[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **options = **options & 0xfffffff1;\n  **options = **options & 0xfffffffe;\n  currentOption = *options;\n  if (currentOption == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (currentOption == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (currentOption == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (currentOption == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (currentOption == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (currentOption == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)options + 0x21) = 1;\n  *(undefined *)(options + 8) = 0;\n  if (options[0xd] != (uint *)0x0) {\n    (*(code *)options[0xd])();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004050": "initialize_options_08004050",
                "param_1": "options",
                "puVar1": "currentOption"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "update_register_settings_080040e8",
            "code": "\n\n\nvoid updateRegisterSettings_080040e8(uint *registerArray1,uint *registerArray2)\n\n{\n  uint *updatedRegister1;\n  uint bitMask;\n  uint bitComparison;\n  uint iteration;\n  uint dataValue;\n  uint updatedValue;\n  int bitOffset;\n  int registerOffset;\n  \n  updatedValue = 0;\n  iteration = 0;\n  do {\n    if (0xf < iteration) {\n      return;\n    }\n    bitMask = 1 << (iteration & 0xff);\n    bitComparison = *registerArray2 & bitMask;\n    if (bitMask == bitComparison) {\n      dataValue = registerArray2[1];\n      if (dataValue == 0x12) {\n        updatedValue = registerArray2[3] + 0xc;\n      }\n      else if (dataValue < 0x13) {\n        if (dataValue == 2) {\n          updatedValue = registerArray2[3] + 8;\n        }\n        else if (dataValue < 3) {\n          if (dataValue == 0) goto LAB_0800423a;\n          if (dataValue == 1) {\n            updatedValue = registerArray2[3];\n          }\n        }\n        else if (dataValue == 3) {\n          updatedValue = 0;\n        }\n        else if (dataValue == 0x11) {\n          updatedValue = registerArray2[3] + 4;\n        }\n      }\n      else if (dataValue == 0x10210000) {\nLAB_0800423a:\n        if (registerArray2[2] == 0) {\n          updatedValue = 4;\n        }\n        else if (registerArray2[2] == 1) {\n          registerArray1[4] = bitMask;\n          updatedValue = 8;\n        }\n        else {\n          registerArray1[5] = bitMask;\n          updatedValue = 8;\n        }\n      }\n      else if (dataValue < 0x10210001) {\n        if ((dataValue == 0x10110000) || (dataValue == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((dataValue == 0x10310000) || ((dataValue == 0x10320000 || (dataValue == 0x10220000))))\n      goto LAB_0800423a;\n      bitMask = iteration;\n      updatedRegister1 = registerArray1;\n      if (0xff < bitComparison) {\n        bitMask = iteration - 8;\n        updatedRegister1 = registerArray1 + 1;\n      }\n      *updatedRegister1 = *updatedRegister1 & ~(0xf << (bitMask << 2 & 0xff)) | updatedValue << (bitMask << 2 & 0xff);\n      if ((registerArray2[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        bitOffset = (iteration & 3) << 2;\n        if (registerArray1 == (uint *)0x40010800) {\n          registerOffset = 0;\n        }\n        else if (registerArray1 == (uint *)0x40010c00) {\n          registerOffset = 1;\n        }\n        else if (registerArray1 == (uint *)0x40011000) {\n          registerOffset = 2;\n        }\n        else if (registerArray1 == (uint *)0x40011400) {\n          registerOffset = 3;\n        }\n        else {\n          registerOffset = 4;\n        }\n        *(uint *)(((iteration >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((iteration >> 2) + 2) * 4 + 0x40010000) & ~(0xf << bitOffset) | registerOffset << bitOffset;\n        if ((registerArray2[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitComparison;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitComparison;\n        }\n        if ((registerArray2[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitComparison;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitComparison;\n        }\n        if ((registerArray2[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitComparison;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitComparison;\n        }\n        if ((registerArray2[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitComparison;\n        }\n        else {\n          _DAT_4001040c = bitComparison | _DAT_4001040c;\n        }\n      }\n    }\n    iteration = iteration + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040e8": "update_register_settings_080040e8",
                "param_1": "registerArray1",
                "param_2": "registerArray2",
                "puVar1": "updatedRegister1",
                "uVar2": "bitMask",
                "uVar3": "bitComparison",
                "uVar4": "iteration",
                "uVar5": "dataValue",
                "uVar6": "updatedValue",
                "iVar7": "bitOffset",
                "iVar8": "registerOffset"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042d4": {
            "entrypoint": "0x080042d4",
            "current_name": "check_bit_080042d4",
            "code": "\nundefined4 check_bit_080042d4(int input_value,uint bit_mask)\n\n{\n  if ((bit_mask & *(uint *)(input_value + 8)) == 0) {\n    is_bit_set 0;\n  }\n  is_bit_set 1;\n}\n\n",
            "renaming": {
                "FUN_080042d4": "check_bit_080042d4",
                "param_1": "input_value",
                "param_2": "bit_mask",
                "return": "is_bit_set"
            },
            "calling": [
                "FUN_080072f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e2": {
            "entrypoint": "0x080042e2",
            "current_name": "update_param_080042e2",
            "code": "\nvoid updateParam_080042e2(int memoryAddress,int newValue,int isShifted)\n\n{\n  if (isShifted == 0) {\n    *(int *)(memoryAddress + 0x10) = newValue << 0x10;\n    return;\n  }\n  *(int *)(memoryAddress + 0x10) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042e2": "update_param_080042e2",
                "param_1": "memoryAddress",
                "param_2": "newValue",
                "param_3": "isShifted"
            },
            "calling": [
                "FUN_080072d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042f0": {
            "entrypoint": "0x080042f0",
            "current_name": "update_and_process_data_080042f0",
            "code": "\n\n\nvoid update_and_process_data_080042f0(uint new_data)\n\n{\n  if ((_DAT_40010414 & new_data) != 0) {\n    _DAT_40010414 = new_data;\n    check_and_process_data_08009094();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042f0": "update_and_process_data_080042f0",
                "param_1": "new_data"
            },
            "calling": [],
            "called": [
                "FUN_08009094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800430c": {
            "entrypoint": "0x0800430c",
            "current_name": "update_permissions_0800430c",
            "code": "\nundefined4 updatePermissions_0800430c(int *data)\n\n{\n  if (*(char *)((int)data + 0x3e) == '@') {\n    if (condition == 0) {\n      *(uint *)(*data + 0x10) = sourceValue & 0xfe;\n    }\n    else {\n      *(uint *)(*data + 0x10) = sourceValue & 0xffU | 1;\n    }\n  }\n  else if (data[4] == 0x4000) {\n    if (*(char *)((int)data + 0x3d) == '!') {\n      *(uint *)(*data + 0x10) = sourceValue & 0xfe;\n    }\n    else {\n      *(uint *)(*data + 0x10) = sourceValue & 0xffU | 1;\n    }\n  }\n  else if (condition == 0) {\n    *(uint *)(*data + 0x10) = (uint)(sourceValue << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (condition == 1) {\n    *(uint *)(*data + 0x10) = (uint)(sourceValue << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800430c": "update_permissions_0800430c",
                "param_1": "data",
                "param_1[0x14]": "condition",
                "param_1[0x11]": "sourceValue"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004396": {
            "entrypoint": "0x08004396",
            "current_name": "extract_and_assign_byte_08004396",
            "code": "\nundefined4 extract_and_assign_byte_08004396(int *input)\n\n{\n  *(uint *)(*input + 0x10) = value_to_extract & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004396": "extract_and_assign_byte_08004396",
                "param_1": "input",
                "param_1[0x11]": "value_to_extract"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043a2": {
            "entrypoint": "0x080043a2",
            "current_name": "update_permissions_080043a2",
            "code": "\nundefined4 updatePermissions_080043a2(uint **permissions)\n\n{\n  uint *currentPermission;\n  \n  currentPermission = permissions[0xb];\n  if ((*(char *)((int)permissions + 0x3d) == '\\\"') &&\n     ((nextPermission != (uint *)0x0 || (*(char *)((int)permissions + 0x3e) != '@')))) {\n    if ((nextPermission == (uint *)0x0) && (someValue == (uint *)0xc000)) {\n      **permissions = **permissions | 0x100;\n      nextPermission = (uint *)((int)nextPermission + 1);\n    }\n    else {\n      if (*(short *)((int)permissions + 0x2a) == 0) {\n        **permissions = **permissions | 0x200;\n      }\n      else if (*(short *)((int)permissions + 0x2a) == 1) {\n        if (currentPermission == (uint *)0xffff0000) {\n          **permissions = **permissions & 0xfffffbff;\n          currentPermission = *permissions;\n          if ((currentPermission[1] & 0x800) == 0) {\n            *currentPermission = *currentPermission | 0x200;\n          }\n          else {\n            *currentPermission = *currentPermission & 0xfffffbff;\n          }\n        }\n        else if (((currentPermission == (uint *)0x4) || (currentPermission == (uint *)0x8)) ||\n                (permissions[0xc] == (uint *)0x12)) {\n          **permissions = **permissions & 0xfffffbff;\n          **permissions = **permissions | 0x200;\n        }\n        else if (permissions[0xb] == (uint *)0x2) {\n          **permissions = **permissions | 0x400;\n        }\n        else {\n          **permissions = **permissions & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)permissions + 0x2a) == 2) {\n        if (permissions[0xb] == (uint *)0x2) {\n          **permissions = **permissions | 0x400;\n        }\n        else {\n          **permissions = **permissions | 0x800;\n          **permissions = **permissions & 0xfffffbff;\n        }\n        currentPermission = *permissions;\n        if ((currentPermission[1] & 0x800) != 0) {\n          currentPermission[1] = currentPermission[1] | 0x1000;\n        }\n      }\n      else {\n        **permissions = **permissions | 0x400;\n        currentPermission = *permissions;\n        if ((currentPermission[1] & 0x800) != 0) {\n          currentPermission[1] = currentPermission[1] | 0x1000;\n        }\n      }\n      nextPermission = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080043a2": "update_permissions_080043a2",
                "param_1": "permissions",
                "puVar1": "currentPermission",
                "param_1[0x14]": "nextPermission",
                "param_1[4]": "someValue"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800457c": {
            "entrypoint": "0x0800457c",
            "current_name": "FUNC_0800457c",
            "code": "\nundefined4 FUNC_0800457c(int *param_1)\n\n{\n  byte *pbVar1;\n  \n  if (*(short *)((int)param_1 + 0x2a) != 0) {\n    pbVar1 = (byte *)param_1[9];\n    param_1[9] = (int)(pbVar1 + 1);\n    *(uint *)(*param_1 + 0x10) = (uint)*pbVar1;\n    *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800457c": "FUNC_0800457c"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800459c": {
            "entrypoint": "0x0800459c",
            "current_name": "update_short_value_0800459c",
            "code": "\nundefined4 updateShortValue_0800459c(int *intArray)\n\n{\n  undefined *ptrValue;\n  \n  if (*(short *)((int)intArray + 0x2a) != 0) {\n    ptrValue = (undefined *)intArray[9];\n    intArray[9] = (int)(ptrValue + 1);\n    *ptrValue = (char)*(undefined4 *)(*intArray + 0x10);\n    *(short *)((int)intArray + 0x2a) = *(short *)((int)intArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800459c": "update_short_value_0800459c",
                "param_1": "intArray",
                "puVar1": "ptrValue"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045bc": {
            "entrypoint": "0x080045bc",
            "current_name": "FUNC_080045bc",
            "code": "\nvoid FUNC_080045bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "calling": [
                "FUN_080045c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045c0": {
            "entrypoint": "0x080045c0",
            "current_name": "calculate_parameters_080045c0",
            "code": "\nundefined4 calculateParameters_080045c0(uint **parameters)\n\n{\n  bool condition;\n  uint shiftedDataValue;\n  uint *dataPointer;\n  uint quotient;\n  \n  if (parameters == (uint **)0x0) {\n    return 1;\n  }\n  if (*(char *)((int)parameters + 0x3d) == '\\0') {\n    *(undefined *)(parameters + 0xf) = 0;\n    FUNC_080045bc();\n  }\n  *(undefined *)((int)parameters + 0x3d) = 0x24;\n  **parameters = **parameters & 0xfffffffe;\n  shiftedDataValue = getShiftedDataValue();\n  if (parameters[1] < (uint *)0x186a1) {\n    if (shiftedDataValue < 2000000) {\n      condition = true;\n    }\n    else {\n      condition = false;\n    }\n  }\n  else {\n    condition = shiftedDataValue < 4000000;\n  }\n  if (condition) {\n    return 1;\n  }\n  quotient = shiftedDataValue / 1000000;\n  (*parameters)[1] = quotient;\n  if ((uint *)0x186a0 < parameters[1]) {\n    quotient = (quotient * 300) / 1000;\n  }\n  (*parameters)[8] = quotient + 1;\n  dataPointer = parameters[1];\n  if (dataPointer < (uint *)0x186a1) {\n    shiftedDataValue = (shiftedDataValue - 1) / (uint)((int)dataPointer << 1) + 1 & 0xfff;\n    if (shiftedDataValue < 4) {\n      shiftedDataValue = 4;\n    }\n  }\n  else {\n    if (parameters[2] == (uint *)0x0) {\n      quotient = (shiftedDataValue - 1) / (uint)((int)dataPointer * 3);\n    }\n    else {\n      quotient = (shiftedDataValue - 1) / (uint)((int)dataPointer * 0x19);\n    }\n    if ((quotient + 1 & 0xfff) == 0) {\n      shiftedDataValue = 1;\n    }\n    else if (parameters[2] == (uint *)0x0) {\n      shiftedDataValue = (shiftedDataValue - 1) / (uint)((int)dataPointer * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      shiftedDataValue = (shiftedDataValue - 1) / (uint)((int)dataPointer * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  (*parameters)[7] = shiftedDataValue;\n  **parameters = (uint)parameters[7] | (uint)parameters[8];\n  (*parameters)[2] = (uint)parameters[4] | (uint)parameters[3];\n  (*parameters)[3] = (uint)parameters[5] | (uint)parameters[6];\n  **parameters = **parameters | 1;\n  parameters[0x10] = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3d) = 0x20;\n  parameters[0xc] = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3e) = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045c0": "calculate_parameters_080045c0",
                "param_1": "parameters",
                "bVar1": "condition",
                "uVar2": "shiftedDataValue",
                "puVar3": "dataPointer",
                "uVar4": "quotient",
                "get_shifted_data_value_08005a28": "getShiftedDataValue"
            },
            "calling": [
                "FUN_080077b0"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_080045bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004728": {
            "entrypoint": "0x08004728",
            "current_name": "process_input_08004728",
            "code": "\nundefined4 processInput_08004728(uint **inputParams,uint *data1,uint *data2,undefined2 paramFlag)\n\n{\n  undefined4 returnValue;\n  uint *ptrToData1;\n  int counter;\n  \n  if (*(char *)((int)inputParams + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        inputParams[0xc] = (uint *)0x0;\n        *(undefined *)((int)inputParams + 0x3d) = 0x20;\n        *(undefined *)(inputParams + 0xf) = 0;\n        return 3;\n      }\n      ptrToData1 = *inputParams;\n      counter = counter + -1;\n    } while ((ptrToData1[6] & 2) != 0);\n    if (*(char *)(inputParams + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(inputParams + 0xf) = 1;\n      if ((*ptrToData1 & 1) == 0) {\n        *ptrToData1 = *ptrToData1 | 1;\n      }\n      **inputParams = **inputParams & 0xfffff7ff;\n      *(undefined *)((int)inputParams + 0x3d) = 0x21;\n      *(undefined *)((int)inputParams + 0x3e) = 0x10;\n      returnValue = 0;\n      inputParams[0x10] = (uint *)0x0;\n      inputParams[9] = data2;\n      *(undefined2 *)((int)inputParams + 0x2a) = paramFlag;\n      inputParams[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(inputParams + 10) = *(undefined2 *)((int)inputParams + 0x2a);\n      inputParams[0x11] = data1;\n      **inputParams = **inputParams | 0x100;\n      *(undefined *)(inputParams + 0xf) = 0;\n      (*inputParams)[1] = (*inputParams)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004728": "process_input_08004728",
                "param_1": "inputParams",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "paramFlag",
                "uVar1": "returnValue",
                "puVar2": "ptrToData1",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08007e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "initialize_connection_080047f4",
            "code": "\nundefined4 initializeConnection_080047f4(uint **connection,uint *data1,uint *data2,undefined2 value)\n\n{\n  undefined4 returnValue;\n  uint *ptr;\n  int count;\n  \n  if (*(char *)((int)connection + 0x3d) == ' ') {\n    count = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (count == 0) {\n        connection[0xc] = (uint *)0x0;\n        *(undefined *)((int)connection + 0x3d) = 0x20;\n        *(undefined *)(connection + 0xf) = 0;\n        return 3;\n      }\n      ptr = *connection;\n      count = count + -1;\n    } while ((ptr[6] & 2) != 0);\n    if (*(char *)(connection + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(connection + 0xf) = 1;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **connection = **connection & 0xfffff7ff;\n      *(undefined *)((int)connection + 0x3d) = 0x22;\n      *(undefined *)((int)connection + 0x3e) = 0x10;\n      returnValue = 0;\n      connection[0x10] = (uint *)0x0;\n      connection[9] = data2;\n      *(undefined2 *)((int)connection + 0x2a) = value;\n      connection[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(connection + 10) = *(undefined2 *)((int)connection + 0x2a);\n      connection[0x11] = data1;\n      **connection = **connection | 0x400;\n      **connection = **connection | 0x100;\n      *(undefined *)(connection + 0xf) = 0;\n      (*connection)[1] = (*connection)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "initialize_connection_080047f4",
                "param_1": "connection",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "value",
                "uVar1": "returnValue",
                "puVar2": "ptr",
                "local_c": "count"
            },
            "calling": [
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048c8": {
            "entrypoint": "0x080048c8",
            "current_name": "initialize_parameters_080048c8",
            "code": "\nundefined4 initializeParameters_080048c8(uint **config,uint *inputParam1,int inputParam2,uint *inputParam3)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)config + 0x3d) == '(') {\n    if (inputParam1 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (inputParam2 == 0) {\n      result = 1;\n    }\n    else if (*(char *)(config + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(config + 0xf) = 1;\n      ptr = *config;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **config = **config & 0xfffff7ff;\n      *(undefined *)((int)config + 0x3d) = 0x29;\n      *(undefined *)((int)config + 0x3e) = 0x20;\n      result = 0;\n      configArray1 = (uint *)0x0;\n      configArray2 = inputParam1;\n      *(short *)((int)config + 0x2a) = shortParam;\n      configArray3 = inputParam3;\n      *(undefined2 *)(config + 10) = *(undefined2 *)((int)config + 0x2a);\n      *(undefined *)(config + 0xf) = 0;\n      (*config)[1] = (*config)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080048c8": "initialize_parameters_080048c8",
                "param_1": "config",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "param_4": "inputParam3",
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1[0x10]": "configArray1",
                "param_1[9]": "configArray2",
                "(short)param_3": "shortParam",
                "param_1[0xb]": "configArray3"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004954": {
            "entrypoint": "0x08004954",
            "current_name": "validate_input_and_initialize_08004954",
            "code": "\nundefined4 validate_input_and_initialize_08004954(uint **param_list,uint *param_ptr,int param_count,uint *param_buffer)\n\n{\n  undefined4 result;\n  uint *ptr_value;\n  \n  if (*(char *)((int)param_list + 0x3d) == '(') {\n    if (param_ptr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (param_count == 0) {\n      result = 1;\n    }\n    else if (*(char *)(param_list + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(param_list + 0xf) = 1;\n      ptr_value = *param_list;\n      if ((*ptr_value & 1) == 0) {\n        *ptr_value = *ptr_value | 1;\n      }\n      **param_list = **param_list & 0xfffff7ff;\n      *(undefined *)((int)param_list + 0x3d) = 0x2a;\n      *(undefined *)((int)param_list + 0x3e) = 0x20;\n      result = 0;\n      param_list[0x10] = (uint *)0x0;\n      param_list[9] = param_ptr;\n      *(short *)((int)param_list + 0x2a) = (short)param_count;\n      param_list[0xb] = param_buffer;\n      *(undefined2 *)(param_list + 10) = *(undefined2 *)((int)param_list + 0x2a);\n      *(undefined *)(param_list + 0xf) = 0;\n      (*param_list)[1] = (*param_list)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004954": "validate_input_and_initialize_08004954",
                "param_1": "param_list",
                "param_2": "param_ptr",
                "param_3": "param_count",
                "param_4": "param_buffer",
                "uVar1": "result",
                "puVar2": "ptr_value"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049e0": {
            "entrypoint": "0x080049e0",
            "current_name": "initialize_data_080049e0",
            "code": "\nundefined4 initializeData_080049e0(uint **dataPointer)\n\n{\n  uint *pointerToData;\n  \n  if (*(char *)((int)dataPointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)dataPointer + 0x3d) = 0x28;\n  pointerToData = *dataPointer;\n  if ((*pointerToData & 1) == 0) {\n    *pointerToData = *pointerToData | 1;\n  }\n  **dataPointer = **dataPointer | 0x400;\n  (*dataPointer)[1] = (*dataPointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080049e0": "initialize_data_080049e0",
                "param_1": "dataPointer",
                "puVar1": "pointerToData"
            },
            "calling": [
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007f8e",
                "FUN_08007ff0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a1e": {
            "entrypoint": "0x08004a1e",
            "current_name": "FUNC_08004a1e",
            "code": "\nvoid FUNC_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a20": {
            "entrypoint": "0x08004a20",
            "current_name": "FUNC_08004a20",
            "code": "\nvoid FUNC_08004a20(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a22": {
            "entrypoint": "0x08004a22",
            "current_name": "FUNC_08004a22",
            "code": "\nvoid FUNC_08004a22(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "calling": [
                "FUN_08004a24",
                "FUN_08004aec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a24": {
            "entrypoint": "0x08004a24",
            "current_name": "update_data_08004a24",
            "code": "\nundefined4 updateData_08004a24(int *dataPtr)\n\n{\n  char charValue;\n  byte *bytePtr;\n  \n  charValue = *(char *)((int)dataPtr + 0x3d);\n  if (*(short *)((int)dataPtr + 0x2a) != 0) {\n    bytePtr = (byte *)dataPtr[9];\n    dataPtr[9] = (int)(bytePtr + 1);\n    *(uint *)(*dataPtr + 0x10) = (uint)*bytePtr;\n    *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n    if ((*(short *)((int)dataPtr + 0x2a) == 0) && (charValue == ')')) {\n      *(uint *)(*dataPtr + 4) = *(uint *)(*dataPtr + 4) & 0xfffffbff;\n      dataPtr[0xc] = 0x21;\n      *(undefined *)((int)dataPtr + 0x3d) = 0x28;\n      FUNC_08004a22();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a24": "update_data_08004a24",
                "param_1": "dataPtr",
                "cVar1": "charValue",
                "pbVar2": "bytePtr"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a22"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a74": {
            "entrypoint": "0x08004a74",
            "current_name": "FUNC_08004a74",
            "code": "\nvoid FUNC_08004a74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a76": {
            "entrypoint": "0x08004a76",
            "current_name": "update_data_08004a76",
            "code": "\nundefined4 updateData_08004a76(int *dataPointer)\n\n{\n  char character;\n  undefined *dataPointer2;\n  \n  character = *(char *)((int)dataPointer + 0x3d);\n  if (*(short *)((int)dataPointer + 0x2a) != 0) {\n    dataPointer2 = (undefined *)dataPointer[9];\n    dataPointer[9] = (int)(dataPointer2 + 1);\n    *dataPointer2 = (char)*(undefined4 *)(*dataPointer + 0x10);\n    *(short *)((int)dataPointer + 0x2a) = *(short *)((int)dataPointer + 0x2a) + -1;\n    if ((*(short *)((int)dataPointer + 0x2a) == 0) && (character == '*')) {\n      *(uint *)(*dataPointer + 4) = *(uint *)(*dataPointer + 4) & 0xfffffbff;\n      dataPointer[0xc] = 0x22;\n      *(undefined *)((int)dataPointer + 0x3d) = 0x28;\n      FUNC_08004a74();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a76": "update_data_08004a76",
                "param_1": "dataPointer",
                "cVar1": "character",
                "puVar2": "dataPointer2"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ac2": {
            "entrypoint": "0x08004ac2",
            "current_name": "initialize_or_validate_08004ac2",
            "code": "\nundefined4 initialize_or_validate_08004ac2(int *input_array,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined2 selected_value;\n  uint flags;\n  \n  flags = *(uint *)(*input_array + 0x18);\n  if ((flags & 0x80) == 0) {\n    selected_value = *(undefined2 *)(input_array + 3);\n  }\n  else {\n    selected_value = *(undefined2 *)(input_array + 6);\n  }\n  initialize_or_validate_08004ac2_08007fa0(input_array,(*(uint *)(*input_array + 0x18) & 4) == 0,selected_value,flags,param_4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ac2": "initialize_or_validate_08004ac2",
                "param_1": "input_array",
                "uVar1": "selected_value",
                "uVar2": "flags"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08007fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004aec": {
            "entrypoint": "0x08004aec",
            "current_name": "handle_param_08004aec",
            "code": "\nundefined4 handleParam_08004aec(uint **paramArray)\n\n{\n  if (((paramArray[0xb] == (uint *)0x4) || (paramArray[0xb] == (uint *)0x8)) &&\n     (*(char *)((int)paramArray + 0x3d) == '(')) {\n    paramArray[0xb] = (uint *)0xffff0000;\n    (*paramArray)[1] = (*paramArray)[1] & 0xfffff8ff;\n    (*paramArray)[5] = 0xfffffbff;\n    **paramArray = **paramArray & 0xfffffbff;\n    paramArray[0xc] = (uint *)0x0;\n    *(undefined *)((int)paramArray + 0x3d) = 0x20;\n    *(undefined *)((int)paramArray + 0x3e) = 0;\n    initAndExecuteFunction();\n  }\n  else if (*(char *)((int)paramArray + 0x3d) == '!') {\n    paramArray[0xb] = (uint *)0xffff0000;\n    paramArray[0xc] = (uint *)0x21;\n    *(undefined *)((int)paramArray + 0x3d) = 0x20;\n    *(undefined *)((int)paramArray + 0x3e) = 0;\n    (*paramArray)[1] = (*paramArray)[1] & 0xfffff8ff;\n    (*paramArray)[5] = 0xfffffbff;\n    **paramArray = **paramArray & 0xfffffbff;\n    FUNC_08004a22();\n  }\n  else {\n    (*paramArray)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004aec": "handle_param_08004aec",
                "param_1": "paramArray",
                "initialize_and_execute_08007ff0": "initAndExecuteFunction"
            },
            "calling": [
                "FUN_080052f0"
            ],
            "called": [
                "FUN_08004a22",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b80": {
            "entrypoint": "0x08004b80",
            "current_name": "FUNC_08004b80",
            "code": "\nvoid FUNC_08004b80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b82": {
            "entrypoint": "0x08004b82",
            "current_name": "process_binary_data_08004b82",
            "code": "\nundefined4 processBinaryData_08004b82(uint **binaryData)\n\n{\n  char character;\n  uint *pointer;\n  \n  character = *(char *)((int)binaryData + 0x3d);\n  pointer = binaryData[0xb];\n  if ((*(short *)(binaryData + 10) == 0) && (character == '!')) {\n    if ((pointer == (uint *)0x4) || ((pointer == (uint *)0x8 || (pointer == (uint *)0xffff0000)))) {\n      (*binaryData)[1] = (*binaryData)[1] & 0xfffff8ff;\n      **binaryData = **binaryData | 0x200;\n      binaryData[0xc] = (uint *)0x0;\n      *(undefined *)((int)binaryData + 0x3d) = 0x20;\n      if (*(char *)((int)binaryData + 0x3e) == '@') {\n        *(undefined *)((int)binaryData + 0x3e) = 0;\n        FUNC_08004b80();\n      }\n      else {\n        *(undefined *)((int)binaryData + 0x3e) = 0;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      (*binaryData)[1] = (*binaryData)[1] & 0xfffff8ff;\n      binaryData[0xc] = (uint *)0x11;\n      *(undefined *)((int)binaryData + 0x3e) = 0;\n      *(undefined *)((int)binaryData + 0x3d) = 0x20;\n      FUNC_08004a1e();\n    }\n  }\n  else if ((character == '!') || ((*(char *)((int)binaryData + 0x3e) == '@' && (character == '\\\"')))) {\n    if (*(short *)((int)binaryData + 0x2a) == 0) {\n      (*binaryData)[1] = (*binaryData)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)binaryData + 0x3e) == '@') {\n      if (binaryData[0x14] == (uint *)0x0) {\n        if (binaryData[0x13] == (uint *)0x1) {\n          (*binaryData)[4] = (uint)binaryData[0x12] & 0xff;\n          binaryData[0x14] = (uint *)((int)binaryData[0x14] + 2);\n        }\n        else {\n          (*binaryData)[4] = (uint)((int)binaryData[0x12] << 0x10) >> 0x18;\n          binaryData[0x14] = (uint *)((int)binaryData[0x14] + 1);\n        }\n      }\n      else if (binaryData[0x14] == (uint *)0x1) {\n        (*binaryData)[4] = (uint)binaryData[0x12] & 0xff;\n        binaryData[0x14] = (uint *)((int)binaryData[0x14] + 1);\n      }\n      else if (binaryData[0x14] == (uint *)0x2) {\n        if (*(char *)((int)binaryData + 0x3d) == '\\\"') {\n          **binaryData = **binaryData | 0x100;\n        }\n        else if (*(char *)((int)binaryData + 0x3d) == '!') {\n          pointer = binaryData[9];\n          binaryData[9] = (uint *)((int)pointer + 1);\n          (*binaryData)[4] = (uint)*(byte *)pointer;\n          *(short *)((int)binaryData + 0x2a) = *(short *)((int)binaryData + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer = binaryData[9];\n      binaryData[9] = (uint *)((int)pointer + 1);\n      (*binaryData)[4] = (uint)*(byte *)pointer;\n      *(short *)((int)binaryData + 0x2a) = *(short *)((int)binaryData + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004b82": "process_binary_data_08004b82",
                "param_1": "binaryData",
                "cVar1": "character",
                "puVar2": "pointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "process_parameter_08004ccc",
            "code": "\nundefined4 processParameter_08004ccc(uint **parameters)\n\n{\n  uint *currentValue;\n  \n  currentValue = parameters[0xb];\n  if (*(char *)((int)parameters + 0x3d) == '!') {\n    if (*(short *)((int)parameters + 0x2a) == 0) {\n      if (((currentValue == (uint *)0x4) || (currentValue == (uint *)0x8)) || (currentValue == (uint *)0xffff0000)) {\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        **parameters = **parameters | 0x200;\n        parameters[0xc] = (uint *)0x0;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        if (*(char *)((int)parameters + 0x3e) == '@') {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08004b80();\n        }\n        else {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08004a1e();\n        }\n      }\n      else {\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        parameters[0xc] = (uint *)0x11;\n        *(undefined *)((int)parameters + 0x3e) = 0;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      currentValue = parameters[9];\n      parameters[9] = (uint *)((int)currentValue + 1);\n      (*parameters)[4] = (uint)*(byte *)currentValue;\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "process_parameter_08004ccc",
                "param_1": "parameters",
                "puVar1": "currentValue"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6a": {
            "entrypoint": "0x08004d6a",
            "current_name": "FUNC_08004d6a",
            "code": "\nvoid FUNC_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6c": {
            "entrypoint": "0x08004d6c",
            "current_name": "process_param_08004d6c",
            "code": "\nundefined4 processParam_08004d6c(uint **param)\n\n{\n  uint *tempVar;\n  \n  if (*(char *)((int)param + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)param + 0x2a) < 4) {\n      if (*(ushort *)((int)param + 0x2a) - 2 < 2) {\n        if (param[0xb] == (uint *)0x2) {\n          **param = **param | 0x400;\n        }\n        else {\n          **param = **param & 0xfffffbff;\n          **param = **param | 0x800;\n        }\n        (*param)[1] = (*param)[1] & 0xfffffbff;\n      }\n      else {\n        if (param[0xb] == (uint *)0x2) {\n          **param = **param | 0x400;\n        }\n        else {\n          **param = **param & 0xfffffbff;\n        }\n        (*param)[1] = (*param)[1] & 0xfffff8ff;\n        tempVar = tempVar;\n        tempVar = (uint *)((int)tempVar + 1);\n        *(char *)tempVar = (char)(*param)[4];\n        *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n        *(undefined *)((int)param + 0x3d) = 0x20;\n        param[0xc] = (uint *)0x0;\n        if (*(char *)((int)param + 0x3e) == '@') {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_08004d6a();\n        }\n        else {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_08004a20();\n        }\n      }\n    }\n    else {\n      tempVar = tempVar;\n      tempVar = (uint *)((int)tempVar + 1);\n      *(char *)tempVar = (char)(*param)[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004d6c": "process_param_08004d6c",
                "param_1": "param",
                "puVar1": "tempVar",
                "param_1[9]": "tempVar"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e3c": {
            "entrypoint": "0x08004e3c",
            "current_name": "process_data_08004e3c",
            "code": "\nundefined4 processData_08004e3c(uint **data)\n\n{\n  uint *currentValue;\n  \n  currentValue = data[0xb];\n  if (*(short *)((int)data + 0x2a) == 3) {\n    if (((currentValue == (uint *)0x4) || (currentValue == (uint *)0x8)) || (currentValue == (uint *)0xffff0000)) {\n      **data = **data & 0xfffffbff;\n    }\n    currentValue = counter;\n    counter = (uint *)((int)currentValue + 1);\n    *(char *)currentValue = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 2) {\n    if (((currentValue == (uint *)0x4) || (currentValue == (uint *)0x8)) || (currentValue == (uint *)0xffff0000)) {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      **data = **data | 0x200;\n    }\n    else {\n      if (currentValue == (uint *)0x2) {\n        **data = **data | 0x400;\n      }\n      else {\n        **data = **data & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    currentValue = counter;\n    counter = (uint *)((int)currentValue + 1);\n    *(char *)currentValue = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    currentValue = counter;\n    counter = (uint *)((int)currentValue + 1);\n    *(char *)currentValue = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    ptrValue = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08004d6a();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08004a20();\n    }\n  }\n  else {\n    currentValue = counter;\n    counter = (uint *)((int)currentValue + 1);\n    *(char *)currentValue = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e3c": "process_data_08004e3c",
                "param_1": "data",
                "puVar1": "currentValue",
                "param_1[9]": "counter",
                "param_1[0xc]": "ptrValue"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3a": {
            "entrypoint": "0x08004f3a",
            "current_name": "FUNC_08004f3a",
            "code": "\nvoid FUNC_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "process_parameters_08004f3c",
            "code": "\nvoid processParameters_08004f3c(uint **parameters)\n\n{\n  int result;\n  uint *pointer2;\n  uint *pointer3;\n  \n  if (*(byte *)((int)parameters + 0x3d) - 0x29 < 2) {\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)parameters + 0x3d) != '`') && (((*parameters)[1] & 0x800) == 0)) {\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n    }\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n  }\n  **parameters = **parameters & 0xfffff7ff;\n  pointer3 = *parameters;\n  if ((pointer3[1] & 0x800) == 0) {\n    if (*(char *)((int)parameters + 0x3d) == '`') {\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      parameters[0x10] = (uint *)0x0;\n      if ((pointer3[5] & 0x40) != 0) {\n        pointer2 = parameters[9];\n        parameters[9] = (uint *)((int)pointer2 + 1);\n        *(char *)pointer2 = (char)pointer3[4];\n      }\n      **parameters = **parameters & 0xfffffffe;\n      FUNC_08004f3a(parameters);\n    }\n    else {\n      if ((pointer3[5] & 0x40) != 0) {\n        pointer2 = parameters[9];\n        parameters[9] = (uint *)((int)pointer2 + 1);\n        *(char *)pointer2 = (char)pointer3[4];\n      }\n      initialize_if_needed_08008020(parameters);\n    }\n  }\n  else {\n    pointer3[1] = pointer3[1] & 0xfffff7ff;\n    if (*(char *)((int)parameters[0xd] + 0x21) == '\\x01') {\n      parameters[0xe][0xd] = (uint)&LAB_080053cc_1;\n      result = initialize_options_08004050(parameters[0xe]);\n      if (result != 0) {\n        if (((*parameters)[5] & 0x40) != 0) {\n          pointer3 = parameters[9];\n          parameters[9] = (uint *)((int)pointer3 + 1);\n          *(char *)pointer3 = (char)(*parameters)[4];\n        }\n        **parameters = **parameters & 0xfffffffe;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        (*(code *)parameters[0xe][0xd])();\n      }\n    }\n    else {\n      parameters[0xd][0xd] = (uint)&LAB_080053cc_1;\n      result = initialize_options_08004050(parameters[0xd]);\n      if (result != 0) {\n        **parameters = **parameters & 0xfffffffe;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        (*(code *)parameters[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)parameters + 0x3d) == '(') && (((uint)parameters[0x10] & 4) != 0)) {\n    parameters[0xb] = (uint *)0xffff0000;\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n    initialize_and_execute_08007ff0(parameters);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "process_parameters_08004f3c",
                "param_1": "parameters",
                "iVar1": "result",
                "puVar2": "pointer2",
                "puVar3": "pointer3"
            },
            "calling": [
                "FUN_080052f0",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08008020",
                "FUN_08004050",
                "FUN_08004f3a",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005084": {
            "entrypoint": "0x08005084",
            "current_name": "process_flags_and_execute_08005084",
            "code": "\nundefined4 process_flags_and_execute_08005084(uint **param_array)\n\n{\n  char char_value;\n  uint *pointer_1;\n  uint *pointer_2;\n  \n  char_value = *(char *)((int)param_array + 0x3d);\n  (*param_array)[1] = (*param_array)[1] & 0xfffff8ff;\n  **param_array = **param_array | 1;\n  **param_array = **param_array & 0xfffffbff;\n  pointer_1 = *param_array;\n  if ((pointer_1[1] & 0x800) != 0) {\n    if ((*(char *)((int)param_array + 0x3d) == '\\\"') || (*(char *)((int)param_array + 0x3d) == '*')) {\n      *(short *)((int)param_array + 0x2a) = (short)*(undefined4 *)(*param_array[0xe] + 4);\n    }\n    else {\n      *(short *)((int)param_array + 0x2a) = (short)*(undefined4 *)(*param_array[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)param_array + 0x2a) != 0) {\n    if ((pointer_1[5] & 4) != 0) {\n      pointer_2 = param_array[9];\n      param_array[9] = (uint *)((int)pointer_2 + 1);\n      *(char *)pointer_2 = (char)pointer_1[4];\n      *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n    }\n    if (((*param_array)[5] & 0x40) != 0) {\n      pointer_1 = param_array[9];\n      param_array[9] = (uint *)((int)pointer_1 + 1);\n      *(char *)pointer_1 = (char)(*param_array)[4];\n      *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n    }\n    param_array[0x10] = (uint *)((uint)param_array[0x10] | 4);\n  }\n  if (param_array[0x10] == (uint *)0x0) {\n    if (((char_value == '(') || (char_value == '*')) || (char_value == ')')) {\n      param_array[0xb] = (uint *)0xffff0000;\n      param_array[0xc] = (uint *)0x0;\n      *(undefined *)((int)param_array + 0x3d) = 0x20;\n      *(undefined *)((int)param_array + 0x3e) = 0;\n      initialize_and_execute_08007ff0();\n    }\n    else if ((param_array[0xc] == (uint *)0x22) || (char_value == '\\\"')) {\n      param_array[0xc] = (uint *)0x0;\n      *(undefined *)((int)param_array + 0x3d) = 0x20;\n      *(undefined *)((int)param_array + 0x3e) = 0;\n      FUNC_08004a74();\n    }\n  }\n  else {\n    process_parameters_08004f3c();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005084": "process_flags_and_execute_08005084",
                "param_1": "param_array",
                "cVar1": "char_value",
                "puVar2": "pointer_1",
                "puVar3": "pointer_2"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004f3c",
                "FUN_08007ff0",
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005188": {
            "entrypoint": "0x08005188",
            "current_name": "process_08005188",
            "code": "\nvoid process_08005188(int *input)\n\n{\n  int param_value;\n  uint flags;\n  uint permissions;\n  uint data;\n  \n  param_value = *input;\n  data = *(uint *)(param_value + 0x18);\n  flags = *(uint *)(param_value + 0x14);\n  permissions = *(uint *)(param_value + 4);\n  if ((*(char *)((int)input + 0x3e) == '\\x10') || (*(char *)((int)input + 0x3e) == '@')) {\n    if (((flags & 0x10001) == 0) || ((permissions & 0x200) == 0)) {\n      if (((flags & 0x10008) == 0) || ((permissions & 0x200) == 0)) {\n        if (((flags & 0x10002) != 0) && ((permissions & 0x200) != 0)) {\n          updatePermissions(input);\n        }\n      }\n      else {\n        extractAndAssignByte(input);\n      }\n    }\n    else {\n      updatePermissions(input);\n    }\n    if ((data & 0x100004) == 0) {\n      if ((((flags & 0x10040) != 0) && ((permissions & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        process_08005188Parameter(input);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((permissions & 0x200) != 0)) {\n        process_08005188Data(input);\n        return;\n      }\n    }\n    else {\n      if ((((flags & 0x10080) != 0) && ((permissions & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        process_08005188BinaryData(input);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((permissions & 0x200) != 0)) {\n        process_08005188Parameter(input);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flags & 0x10002) != 0) && ((permissions & 0x200) != 0)) {\n      initializeOrValidate();\n      return;\n    }\n    if (((flags & 0x10010) != 0) && ((permissions & 0x200) != 0)) {\n      process_08005188FlagsAndExecute(input);\n      return;\n    }\n    if ((data & 0x100004) == 0) {\n      if ((((flags & 0x10040) != 0) && ((permissions & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        updateData(input);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((permissions & 0x200) != 0)) {\n        updateShortValue(input);\n      }\n    }\n    else {\n      if ((((flags & 0x10080) != 0) && ((permissions & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        updateData(input);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((permissions & 0x200) != 0)) {\n        FUNC_0800457c(input);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005188": "process_08005188",
                "param_1": "input",
                "iVar1": "param_value",
                "uVar2": "flags",
                "uVar3": "permissions",
                "uVar4": "data",
                "update_permissions_080043a2": "updatePermissions",
                "extract_and_assign_byte_08004396": "extractAndAssignByte",
                "update_permissions_0800430c": "updatePermissions",
                "process_param_08004d6c": "processParameter",
                "process_data_08004e3c": "processData",
                "process_binary_data_08004b82": "processBinaryData",
                "process_parameter_08004ccc": "processParameter",
                "initialize_or_validate_08004ac2": "initializeOrValidate",
                "process_flags_and_execute_08005084": "processFlagsAndExecute",
                "update_data_08004a76": "updateData",
                "update_short_value_0800459c": "updateShortValue",
                "update_data_08004a24": "updateData"
            },
            "calling": [],
            "called": [
                "FUN_08004ccc",
                "FUN_080043a2",
                "FUN_08004396",
                "FUN_0800430c",
                "FUN_0800459c",
                "FUN_08005084",
                "FUN_08004a76",
                "FUN_08004ac2",
                "FUN_08004b82",
                "FUN_0800457c",
                "FUN_08004d6c",
                "FUN_08004a24",
                "FUN_08004e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052f0": {
            "entrypoint": "0x080052f0",
            "current_name": "process_param_conditions_080052f0",
            "code": "\nvoid process_param_conditions_080052f0(uint **param)\n\n{\n  char char1;\n  uint *ptr1;\n  uint value1;\n  uint value2;\n  \n  ptr1 = *param;\n  value1 = ptr1[5];\n  value2 = ptr1[1];\n  if (((value1 & 0x10100) != 0) && ((value2 & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 1);\n    ptr1[5] = 0xfffffeff;\n    **param = **param | 0x8000;\n  }\n  if (((value1 & 0x10200) != 0) && ((value2 & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 2);\n    (*param)[5] = 0xfffffdff;\n  }\n  if (((value1 & 0x10400) != 0) && ((value2 & 0x100) != 0)) {\n    char1 = *(char *)((int)param + 0x3d);\n    if (((*(char *)((int)param + 0x3e) == ' ') && (*(short *)((int)param + 0x2a) == 0)) &&\n       (((char1 == '!' || (char1 == ')')) || ((char1 == '(' && (param[0xc] == (uint *)0x21)))))) {\n      handle_param_08004aec(param);\n    }\n    else {\n      param[0x10] = (uint *)((uint)param[0x10] | 4);\n      if (*(char *)((int)param + 0x3e) == '\\x10') {\n        **param = **param | 0x200;\n      }\n      (*param)[5] = 0xfffffbff;\n    }\n  }\n  if (((value1 & 0x10800) != 0) && ((value2 & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 8);\n    (*param)[5] = 0xfffff7ff;\n  }\n  if (param[0x10] != (uint *)0x0) {\n    process_parameters_08004f3c(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052f0": "process_param_conditions_080052f0",
                "param_1": "param",
                "cVar1": "char1",
                "puVar2": "ptr1",
                "uVar3": "value1",
                "uVar4": "value2"
            },
            "calling": [],
            "called": [
                "FUN_08004f3c",
                "FUN_08004aec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800542a": {
            "entrypoint": "0x0800542a",
            "current_name": "get_pointer_value_0800542a",
            "code": "\nundefined get_pointer_value_0800542a(int address)\n\n{\n  return *(undefined *)(address + 0x3d);\n}\n\n",
            "renaming": {
                "FUN_0800542a": "get_pointer_value_0800542a",
                "param_1": "address"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005430": {
            "entrypoint": "0x08005430",
            "current_name": "get_value_at_offset_08005430",
            "code": "\nundefined4 get_value_at_offset_08005430(int base_address)\n\n{\n  return *(undefined4 *)(base_address + 0x40);\n}\n\n",
            "renaming": {
                "FUN_08005430": "get_value_at_offset_08005430",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005434": {
            "entrypoint": "0x08005434",
            "current_name": "calculate_iterations_08005434",
            "code": "\nvoid calculateIterations_08005434(int multiplier)\n\n{\n  bool isNotZero;\n  int iterations;\n  \n  iterations = multiplier * (DAT_20000018 / 8000);\n  do {\n    isNotZero = iterations != 0;\n    iterations = iterations + -1;\n  } while (isNotZero);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005434": "calculate_iterations_08005434",
                "param_1": "multiplier",
                "local_4": "iterations",
                "bVar1": "isNotZero"
            },
            "calling": [
                "FUN_08005460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005460": {
            "entrypoint": "0x08005460",
            "current_name": "check_and_modify_values_08005460",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 checkAndModifyValues_08005460(uint *params)\n\n{\n  int initialValue;\n  int currentValue;\n  undefined4 result;\n  uint paramValue;\n  bool isConditionTrue;\n  \n  if ((*params & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (params[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      paramValue = params[1];\n      if (paramValue == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (paramValue == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (paramValue == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (params[1] == 0) {\n        initialValue = get_data_value_08003760();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentValue = get_data_value_08003760();\n          if (100 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        initialValue = get_data_value_08003760();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentValue = get_data_value_08003760();\n          if (100 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*params & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (params[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | params[5] << 3;\n    }\n    else if (params[4] == 0) {\n      _DAT_42420000 = 0;\n      initialValue = get_data_value_08003760();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentValue = get_data_value_08003760();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      initialValue = get_data_value_08003760();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentValue = get_data_value_08003760();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | params[5] << 3;\n    }\n  }\n  if ((*params & 8) != 0) {\n    if (params[6] == 0) {\n      _DAT_42420480 = 0;\n      initialValue = get_data_value_08003760();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentValue = get_data_value_08003760();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      initialValue = get_data_value_08003760();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentValue = get_data_value_08003760();\n        if (2 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n      calculate_iterations_08005434(1);\n    }\n  }\n  if ((*params & 4) != 0) {\n    isConditionTrue = (_DAT_4002101c & 0x10000000) == 0;\n    if (isConditionTrue) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialValue = get_data_value_08003760();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_data_value_08003760();\n        if (100 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    paramValue = params[3];\n    if (paramValue == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (paramValue == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (paramValue == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (params[3] == 0) {\n      initialValue = get_data_value_08003760();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentValue = get_data_value_08003760();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      initialValue = get_data_value_08003760();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentValue = get_data_value_08003760();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (isConditionTrue) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (params[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (params[7] == 2) {\n    _DAT_42420060 = 0;\n    initialValue = get_data_value_08003760();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (params[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | params[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | params[8] | params[9];\n        _DAT_42420060 = 1;\n        initialValue = get_data_value_08003760();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentValue = get_data_value_08003760();\n        } while ((uint)(currentValue - initialValue) < 3);\n        return 3;\n      }\n      currentValue = get_data_value_08003760();\n    } while ((uint)(currentValue - initialValue) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    initialValue = get_data_value_08003760();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentValue = get_data_value_08003760();\n    } while ((uint)(currentValue - initialValue) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005460": "check_and_modify_values_08005460",
                "param_1": "params",
                "iVar1": "initialValue",
                "iVar2": "currentValue",
                "uVar3": "result",
                "uVar4": "paramValue",
                "bVar5": "isConditionTrue"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_timing_value_08005840",
            "code": "\n\n\nuint calculateTimingValue_08005840(void)\n\n{\n  uint timing_value;\n  undefined2 counter;\n  undefined4 multiplier_2;\n  undefined4 multiplier_1;\n  undefined4 multiplier_0;\n  undefined4 constant_3;\n  \n  constant_3 = 0x10100f0e;\n  multiplier_0 = 0xd0c0b0a;\n  multiplier_1 = 0x9080706;\n  multiplier_2 = 0x5040302;\n  counter = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    timing_value = (uint)*(byte *)((int)&multiplier_2 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      timing_value = timing_value * 4000000;\n    }\n    else {\n      timing_value = (timing_value * 8000000) /\n              (uint)*(byte *)((int)&counter - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    timing_value = 8000000;\n  }\n  return timing_value;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_timing_value_08005840",
                "local_1c": "counter",
                "uStack_18": "multiplier_2",
                "uStack_14": "multiplier_1",
                "uStack_10": "multiplier_0",
                "uStack_c": "constant_3",
                "uVar1": "timing_value"
            },
            "calling": [
                "FUN_080058d2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058ac": {
            "entrypoint": "0x080058ac",
            "current_name": "initialize_and_calculate_memory_080058ac",
            "code": "\n\n\nundefined4 initialize_and_calculate_memory_080058ac(uint *memory_settings,uint setting_value)\n\n{\n  int initial_value;\n  int current_value;\n  uint timing_value;\n  \n  if ((_DAT_40022000 & 7) < setting_value) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | setting_value;\n    if (setting_value != (setting_value & 7)) {\n      return 1;\n    }\n  }\n  if ((*memory_settings & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | memory_settings[2];\n  }\n  if ((*memory_settings & 1) != 0) {\n    timing_value = memory_settings[1];\n    if (timing_value == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((timing_value != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = timing_value | _DAT_40021004 & 0xfffffffc;\n    initial_value = get_data_value_08003760();\n    if (memory_settings[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_value = get_data_value_08003760();\n        if (5000 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    else if (memory_settings[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_value = get_data_value_08003760();\n        if (5000 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_value = get_data_value_08003760();\n        if (5000 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (setting_value < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | setting_value;\n    if (setting_value != (setting_value & 7)) {\n      return 1;\n    }\n  }\n  if ((*memory_settings & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | memory_settings[3];\n  }\n  if ((*memory_settings & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | memory_settings[4] << 3;\n  }\n  timing_value = calculate_timing_value_08005840();\n  DAT_20000018 = timing_value >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  initialize_memory_080036d8(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058ac": "initialize_and_calculate_memory_080058ac",
                "param_1": "memory_settings",
                "param_2": "setting_value",
                "iVar1": "initial_value",
                "iVar2": "current_value",
                "uVar3": "timing_value"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080058d2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058d2": {
            "entrypoint": "0x080058d2",
            "current_name": "initialize_and_calculate_080058d2",
            "code": "\n\n\nundefined4 initialize_and_calculate_080058d2(uint *flags,uint size)\n\n{\n  int initialValue;\n  int currentValue;\n  uint timingValue;\n  \n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flags[2];\n  }\n  if ((*flags & 1) != 0) {\n    timingValue = flags[1];\n    if (timingValue == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((timingValue != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = timingValue | _DAT_40021004 & 0xfffffffc;\n    initialValue = get_data_value_08003760();\n    if (flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentValue = get_data_value_08003760();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else if (flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentValue = get_data_value_08003760();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentValue = get_data_value_08003760();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (size < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size;\n    if (size != (size & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flags[4] << 3;\n  }\n  timingValue = calculate_timing_value_08005840();\n  DAT_20000018 = timingValue >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  initialize_memory_080036d8(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058d2": "initialize_and_calculate_080058d2",
                "param_1": "flags",
                "param_2": "size",
                "iVar1": "initialValue",
                "iVar2": "currentValue",
                "uVar3": "timingValue"
            },
            "calling": [
                "FUN_080058ac"
            ],
            "called": [
                "FUN_080036d8",
                "FUN_08003760",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a1c": {
            "entrypoint": "0x08005a1c",
            "current_name": "get_data_value_08005a1c",
            "code": "\nundefined4 get_data_value_08005a1c(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08005a1c": "get_data_value_08005a1c"
            },
            "calling": [
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a28": {
            "entrypoint": "0x08005a28",
            "current_name": "get_shifted_data_value_08005a28",
            "code": "\n\n\nuint get_shifted_data_value_08005a28(void)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value_08005a1c();\n  return data_value >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a28": "get_shifted_data_value_08005a28",
                "uVar1": "data_value"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_080045c0"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a48": {
            "entrypoint": "0x08005a48",
            "current_name": "shifted_data_value_08005a48",
            "code": "\n\n\nuint shiftedDataValue_08005a48(void)\n\n{\n  uint dataValue;\n  \n  dataValue = getDataValue();\n  return dataValue >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a48": "shifted_data_value_08005a48",
                "uVar1": "dataValue",
                "get_data_value_08005a1c": "getDataValue"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_08005bb8"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_params_08005a68",
            "code": "\n\n\nvoid initializeParams_08005a68(undefined4 *outputParams,uint *inputParams)\n\n{\n  *outputParams = 0xf;\n  outputParams[1] = _DAT_40021004 & 3;\n  outputParams[2] = _DAT_40021004 & 0xf0;\n  outputParams[3] = _DAT_40021004 & 0x700;\n  outputParams[4] = _DAT_40021004 >> 3 & 0x700;\n  *inputParams = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_params_08005a68",
                "param_1": "outputParams",
                "param_2": "inputParams"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aa4": {
            "entrypoint": "0x08005aa4",
            "current_name": "update_control_registers_08005aa4",
            "code": "\n\n\nundefined4 updateControlRegisters_08005aa4(uint *param_1)\n\n{\n  uint mask1;\n  uint mask2;\n  int initialValue;\n  int currentValue;\n  bool isSet;\n  \n  if ((*param_1 & 1) != 0) {\n    isSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialValue = get_data_value_08003760();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_data_value_08003760();\n        if (100 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (param_1[1] & 0x300))) {\n      mask2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      mask1 = _DAT_40021020 & 1;\n      _DAT_40021020 = mask2;\n      if (mask1 != 0) {\n        initialValue = get_data_value_08003760();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentValue = get_data_value_08003760();\n          if (5000 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | param_1[1];\n    if (isSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | param_1[2];\n  }\n  if ((*param_1 & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | param_1[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005aa4": "update_control_registers_08005aa4",
                "uVar1": "mask1",
                "uVar2": "mask2",
                "iVar3": "initialValue",
                "iVar4": "currentValue",
                "bVar5": "isSet"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb8": {
            "entrypoint": "0x08005bb8",
            "current_name": "calculate_data_value_08005bb8",
            "code": "\n\n\nuint calculateDataValue_08005bb8(int input)\n\n{\n  uint result;\n  undefined2 shiftedData;\n  undefined4 constantValue1;\n  undefined4 constantValue2;\n  undefined4 constantValue3;\n  undefined4 constantValue4;\n  \n  constantValue4 = 0x10100f0e;\n  constantValue3 = 0xd0c0b0a;\n  constantValue2 = 0x9080706;\n  constantValue1 = 0x5040302;\n  shiftedData = 0x201;\n  if (input == 2) {\n    result = shifted_data_value_08005a48();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&shiftedData - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&constantValue1 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005bb8": "calculate_data_value_08005bb8",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "shiftedData",
                "uStack_20": "constantValue1",
                "uStack_1c": "constantValue2",
                "uStack_18": "constantValue3",
                "uStack_14": "constantValue4"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "called": [
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb4": {
            "entrypoint": "0x08005cb4",
            "current_name": "check_and_execute_callback_08005cb4",
            "code": "\n\n\nvoid checkAndExecuteCallback_08005cb4(uint **input)\n\n{\n  if (((**input & 2) != 0) && (((*input)[1] & 2) != 0)) {\n    executeCallback();\n    (*input)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)input + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb4": "check_and_execute_callback_08005cb4",
                "param_1": "input",
                "execute_callback_function_080073c0": "executeCallback"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "update_memory_layout_08005cec",
            "code": "\nvoid updateMemoryLayout_08005cec(int address,uint *values)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint newValue;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffffe;\n  updatedValue2 = *(uint *)(address + 4);\n  newValue = *values;\n  updatedValue1 = *(uint *)(address + 0x20) & 0xfffffffd | value1;\n  if (address == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffffff7 | value2) & 0xfffffffb;\n    updatedValue2 = updatedValue2 & 0xfffffcff | value3 | value4;\n  }\n  *(uint *)(address + 4) = updatedValue2;\n  *(uint *)(address + 0x18) = *(uint *)(address + 0x18) & 0xffffff8c | newValue;\n  *(uint *)(address + 0x34) = values[1];\n  *(uint *)(address + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "update_memory_layout_08005cec",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "newValue",
                "param_2[2]": "value1",
                "param_2[3]": "value2",
                "param_2[5]": "value3",
                "param_2[6]": "value4"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d48": {
            "entrypoint": "0x08005d48",
            "current_name": "update_function_data_08005d48",
            "code": "\nvoid updateFunctionData_08005d48(int functionData,uint *inputData)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(functionData + 0x20) = *(uint *)(functionData + 0x20) & 0xfffffeff;\n  updatedValue2 = *(uint *)(functionData + 4);\n  updatedValue3 = *inputData;\n  updatedValue1 = *(uint *)(functionData + 0x20) & 0xfffffdff | inputData[2] << 8;\n  if (functionData == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffff7ff | inputData[3] << 8) & 0xfffffbff;\n    updatedValue2 = updatedValue2 & 0xffffcfff | inputData[5] << 4 | inputData[6] << 4;\n  }\n  *(uint *)(functionData + 4) = updatedValue2;\n  *(uint *)(functionData + 0x1c) = *(uint *)(functionData + 0x1c) & 0xffffff8c | updatedValue3;\n  *(uint *)(functionData + 0x3c) = inputData[1];\n  *(uint *)(functionData + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d48": "update_function_data_08005d48",
                "param_1": "functionData",
                "param_2": "inputData",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dac": {
            "entrypoint": "0x08005dac",
            "current_name": "update_memory_08005dac",
            "code": "\nvoid updateMemory_08005dac(int memory_address,int *values)\n\n{\n  uint original_value;\n  int value_1;\n  int value_2;\n  \n  *(uint *)(memory_address + 0x20) = *(uint *)(memory_address + 0x20) & 0xffffefff;\n  original_value = *(uint *)(memory_address + 4);\n  value_1 = *values;\n  value_2 = values[2];\n  if (memory_address == 0x40012c00) {\n    original_value = original_value & 0xffffbfff | values[5] << 6;\n  }\n  *(uint *)(memory_address + 4) = original_value;\n  *(uint *)(memory_address + 0x1c) = *(uint *)(memory_address + 0x1c) & 0xffff8cff | value_1 << 8;\n  *(int *)(memory_address + 0x40) = values[1];\n  *(uint *)(memory_address + 0x20) = *(uint *)(memory_address + 0x20) & 0xffffdfff | value_2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dac": "update_memory_08005dac",
                "param_1": "memory_address",
                "param_2": "values",
                "uVar1": "original_value",
                "iVar2": "value_1",
                "iVar3": "value_2"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005df4": {
            "entrypoint": "0x08005df4",
            "current_name": "update_registers_08005df4",
            "code": "\nvoid update_registers_08005df4(uint **param)\n\n{\n  uint *ptr1;\n  \n  *(undefined *)((int)param + 0x3d) = 2;\n  ptr1 = *param;\n  if ((ptr1[8] & 0x1111) == 0) {\n    if ((ptr1[8] & 0x444) == 0) {\n      *ptr1 = *ptr1 & 0xfffffffe;\n    }\n  }\n  update_register_based_on_value_08007710(param);\n  *(undefined *)((int)param + 0x3d) = 0;\n  *(undefined *)(param + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005df4": "update_registers_08005df4",
                "param_1": "param",
                "puVar1": "ptr1"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08007710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e2e": {
            "entrypoint": "0x08005e2e",
            "current_name": "update_register_value_08005e2e",
            "code": "\nvoid updateRegisterValue_08005e2e(uint **param)\n\n{\n  uint *pointerVar;\n  \n  *(undefined *)((int)param + 0x3d) = 2;\n  pointerVar = *param;\n  if ((pointerVar[8] & 0x1111) == 0) {\n    if ((pointerVar[8] & 0x444) == 0) {\n      *pointerVar = *pointerVar & 0xfffffffe;\n    }\n  }\n  update_register_value_08007110(param);\n  *(undefined *)((int)param + 0x3d) = 0;\n  *(undefined *)(param + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e2e": "update_register_value_08005e2e",
                "param_1": "param",
                "puVar1": "pointerVar"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08007110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e68": {
            "entrypoint": "0x08005e68",
            "current_name": "FUNC_08005e68",
            "code": "\nvoid FUNC_08005e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6a": {
            "entrypoint": "0x08005e6a",
            "current_name": "FUNC_08005e6a",
            "code": "\nvoid FUNC_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6c": {
            "entrypoint": "0x08005e6c",
            "current_name": "FUNC_08005e6c",
            "code": "\nvoid FUNC_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6e": {
            "entrypoint": "0x08005e6e",
            "current_name": "process_flags_08005e6e",
            "code": "\nvoid process_flags_08005e6e(int *flags)\n\n{\n  int current_flag;\n  \n  current_flag = *flags;\n  if (((*(uint *)(current_flag + 0x10) & 2) != 0) && ((*(uint *)(current_flag + 0xc) & 2) != 0)) {\n    *(undefined4 *)(current_flag + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 7) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      execute_callback();\n      FUNC_08005e6a(flags);\n    }\n    else {\n      FUNC_08005e68();\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  current_flag = *flags;\n  if (((*(uint *)(current_flag + 0x10) & 4) != 0) && ((*(uint *)(current_flag + 0xc) & 4) != 0)) {\n    *(undefined4 *)(current_flag + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 7) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      execute_callback(flags);\n      FUNC_08005e6a(flags);\n    }\n    else {\n      FUNC_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  current_flag = *flags;\n  if (((*(uint *)(current_flag + 0x10) & 8) != 0) && ((*(uint *)(current_flag + 0xc) & 8) != 0)) {\n    *(undefined4 *)(current_flag + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 7) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      execute_callback(flags);\n      FUNC_08005e6a(flags);\n    }\n    else {\n      FUNC_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  current_flag = *flags;\n  if (((*(uint *)(current_flag + 0x10) & 0x10) != 0) && ((*(uint *)(current_flag + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(current_flag + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 7) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      execute_callback(flags);\n      FUNC_08005e6a(flags);\n    }\n    else {\n      FUNC_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  current_flag = *flags;\n  if (((*(uint *)(current_flag + 0x10) & 1) != 0) && ((*(uint *)(current_flag + 0xc) & 1) != 0)) {\n    *(undefined4 *)(current_flag + 0x10) = 0xfffffffe;\n    execute_subroutine(flags);\n  }\n  current_flag = *flags;\n  if (((*(uint *)(current_flag + 0x10) & 0x80) != 0) && ((*(uint *)(current_flag + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(current_flag + 0x10) = 0xffffff7f;\n    FUNC_080064ae(flags);\n  }\n  current_flag = *flags;\n  if (((*(uint *)(current_flag + 0x10) & 0x40) != 0) && ((*(uint *)(current_flag + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(current_flag + 0x10) = 0xffffffbf;\n    FUNC_08005e6c(flags);\n  }\n  current_flag = *flags;\n  if (((*(uint *)(current_flag + 0x10) & 0x20) != 0) && ((*(uint *)(current_flag + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(current_flag + 0x10) = 0xffffffdf;\n    FUNC_080064ac(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6e": "process_flags_08005e6e",
                "param_1": "flags",
                "iVar1": "current_flag",
                "execute_callback_if_enabled_0800771c": "execute_callback",
                "execute_subroutine_08007736": "execute_subroutine"
            },
            "calling": [],
            "called": [
                "FUN_08007736",
                "FUN_080064ac",
                "FUN_08005e68",
                "FUN_08005e6a",
                "FUN_0800771c",
                "FUN_08005e6c",
                "FUN_080064ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fe8": {
            "entrypoint": "0x08005fe8",
            "current_name": "update_memory_08005fe8",
            "code": "\nvoid updateMemory_08005fe8(uint *memoryPtr,uint *valuePtr)\n\n{\n  uint originalValue;\n  \n  originalValue = *memoryPtr;\n  if ((((memoryPtr == (uint *)0x40012c00) || (memoryPtr == (uint *)0x40000000)) ||\n      (memoryPtr == (uint *)0x40000400)) || (memoryPtr == (uint *)0x40000800)) {\n    originalValue = originalValue & 0xffffff8f | valuePtr[1];\n  }\n  if (((memoryPtr == (uint *)0x40012c00) || (memoryPtr == (uint *)0x40000000)) ||\n     ((memoryPtr == (uint *)0x40000400 || (memoryPtr == (uint *)0x40000800)))) {\n    originalValue = originalValue & 0xfffffcff | valuePtr[3];\n  }\n  *memoryPtr = originalValue & 0xffffff7f | valuePtr[5];\n  memoryPtr[0xb] = valuePtr[2];\n  memoryPtr[10] = *valuePtr;\n  if (memoryPtr == (uint *)0x40012c00) {\n    specialValue = valuePtr[4];\n  }\n  memoryPtr[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fe8": "update_memory_08005fe8",
                "param_1": "memoryPtr",
                "param_2": "valuePtr",
                "uVar1": "originalValue",
                "uRam40012c30": "specialValue"
            },
            "calling": [
                "FUN_08006060",
                "FUN_08006092"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006060": {
            "entrypoint": "0x08006060",
            "current_name": "initialize_or_update_settings_08006060",
            "code": "\nundefined4 initialize_or_update_settings_08006060(undefined4 *settings)\n\n{\n  if (settings != (undefined4 *)0x0) {\n    if (*(char *)((int)settings + 0x3d) == '\\0') {\n      *(undefined *)(settings + 0xf) = 0;\n      initialize_settings;\n    }\n    *(undefined *)((int)settings + 0x3d) = 2;\n    update_memory_08005fe8(*settings,settings + 1);\n    *(undefined *)((int)settings + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006060": "initialize_or_update_settings_08006060",
                "param_1": "settings",
                "initialize_settings_08007708()": "initialize_settings"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006092": {
            "entrypoint": "0x08006092",
            "current_name": "check_and_update_configuration_08006092",
            "code": "\nundefined4 checkAndUpdateConfiguration_08006092(undefined4 *configData)\n\n{\n  if (configData != (undefined4 *)0x0) {\n    if (*(char *)((int)configData + 0x3d) == '\\0') {\n      *(undefined *)(configData + 0xf) = 0;\n      updateConfiguration();\n    }\n    *(undefined *)((int)configData + 0x3d) = 2;\n    updateMemory(*configData,configData + 1);\n    *(undefined *)((int)configData + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006092": "check_and_update_configuration_08006092",
                "param_1": "configData",
                "update_configuration_08006e68": "updateConfiguration",
                "update_memory_08005fe8": "updateMemory"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08006e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060c4": {
            "entrypoint": "0x080060c4",
            "current_name": "update_register_values_080060c4",
            "code": "\nvoid updateRegisterValues_080060c4(int register,int *values)\n\n{\n  uint modifiedRegister1;\n  uint modifiedRegister2;\n  int selectedValue;\n  \n  *(uint *)(register + 0x20) = *(uint *)(register + 0x20) & 0xffffffef;\n  modifiedRegister2 = *(uint *)(register + 4);\n  selectedValue = *values;\n  modifiedRegister1 = *(uint *)(register + 0x20) & 0xffffffdf | values[2] << 4;\n  if (register == 0x40012c00) {\n    modifiedRegister1 = (modifiedRegister1 & 0xffffff7f | values[3] << 4) & 0xffffffbf;\n    modifiedRegister2 = modifiedRegister2 & 0xfffff3ff | values[5] << 2 | values[6] << 2;\n  }\n  *(uint *)(register + 4) = modifiedRegister2;\n  *(uint *)(register + 0x18) = *(uint *)(register + 0x18) & 0xffff8cff | selectedValue << 8;\n  *(int *)(register + 0x38) = values[1];\n  *(uint *)(register + 0x20) = modifiedRegister1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060c4": "update_register_values_080060c4",
                "param_1": "register",
                "param_2": "values",
                "uVar1": "modifiedRegister1",
                "uVar2": "modifiedRegister2",
                "iVar3": "selectedValue"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006128": {
            "entrypoint": "0x08006128",
            "current_name": "update_data_08006128",
            "code": "\nundefined4 update_data_08006128(undefined4 *data,undefined4 value1,undefined4 value2)\n\n{\n  if (*(char *)(data + 0xf) != '\\x01') {\n    *(undefined *)(data + 0xf) = 1;\n    *(undefined *)((int)data + 0x3d) = 2;\n    switch(value2) {\n    case 0:\n      update_memory_layout(*data);\n      break;\n    case 4:\n      update_register_values(*data);\n      break;\n    case 8:\n      update_function_data(*data);\n      break;\n    case 0xc:\n      update_memory(*data);\n    }\n    *(undefined *)((int)data + 0x3d) = 1;\n    *(undefined *)(data + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006128": "update_data_08006128",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "update_memory_layout_08005cec": "update_memory_layout",
                "update_register_values_080060c4": "update_register_values",
                "update_function_data_08005d48": "update_function_data",
                "update_memory_08005dac": "update_memory"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006186": {
            "entrypoint": "0x08006186",
            "current_name": "update_and_return_status_08006186",
            "code": "\nundefined4 update_and_return_status_08006186(int *ptr1,int param2,undefined4 option)\n\n{\n  if (*(char *)(ptr1 + 0xf) != '\\x01') {\n    *(undefined *)(ptr1 + 0xf) = 1;\n    *(undefined *)((int)ptr1 + 0x3d) = 2;\n    switch(option) {\n    case 0:\n      update_memory_layout_08005cec(*ptr1);\n      *(uint *)(*ptr1 + 0x18) = *(uint *)(*ptr1 + 0x18) | 8;\n      *(uint *)(*ptr1 + 0x18) = *(uint *)(*ptr1 + 0x18) & 0xfffffffb;\n      *(uint *)(*ptr1 + 0x18) = *(uint *)(*ptr1 + 0x18) | *(uint *)(param2 + 0x10);\n      break;\n    case 4:\n      update_register_values_080060c4(*ptr1);\n      *(uint *)(*ptr1 + 0x18) = *(uint *)(*ptr1 + 0x18) | 0x800;\n      *(uint *)(*ptr1 + 0x18) = *(uint *)(*ptr1 + 0x18) & 0xfffffbff;\n      *(uint *)(*ptr1 + 0x18) = *(uint *)(*ptr1 + 0x18) | *(int *)(param2 + 0x10) << 8;\n      break;\n    case 8:\n      update_function_data_08005d48(*ptr1);\n      *(uint *)(*ptr1 + 0x1c) = *(uint *)(*ptr1 + 0x1c) | 8;\n      *(uint *)(*ptr1 + 0x1c) = *(uint *)(*ptr1 + 0x1c) & 0xfffffffb;\n      *(uint *)(*ptr1 + 0x1c) = *(uint *)(*ptr1 + 0x1c) | *(uint *)(param2 + 0x10);\n      break;\n    case 0xc:\n      update_memory_08005dac(*ptr1);\n      *(uint *)(*ptr1 + 0x1c) = *(uint *)(*ptr1 + 0x1c) | 0x800;\n      *(uint *)(*ptr1 + 0x1c) = *(uint *)(*ptr1 + 0x1c) & 0xfffffbff;\n      *(uint *)(*ptr1 + 0x1c) = *(uint *)(*ptr1 + 0x1c) | *(int *)(param2 + 0x10) << 8;\n    }\n    *(undefined *)((int)ptr1 + 0x3d) = 1;\n    *(undefined *)(ptr1 + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006186": "update_and_return_status_08006186",
                "param_1": "ptr1",
                "param_2": "param2",
                "param_3": "option"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006262": {
            "entrypoint": "0x08006262",
            "current_name": "update_bit_value_08006262",
            "code": "\nvoid updateBitValue_08006262(int arrayBase,uint bitPosition,int newValue)\n\n{\n  *(uint *)(arrayBase + 0x20) = *(uint *)(arrayBase + 0x20) bitwiseAnd ~(1 << (bitPosition bitwiseAnd 0xff));\n  *(uint *)(arrayBase + 0x20) = *(uint *)(arrayBase + 0x20) | newValue << (bitPosition bitwiseAnd 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006262": "update_bit_value_08006262",
                "param_1": "arrayBase",
                "param_2": "bitPosition",
                "param_3": "newValue",
                "&": "bitwiseAnd"
            },
            "calling": [
                "FUN_08006280",
                "FUN_08006390",
                "FUN_080063c0",
                "FUN_080062f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006280": {
            "entrypoint": "0x08006280",
            "current_name": "update_bit_values_08006280",
            "code": "\nundefined4 updateBitValues_08006280(uint **param,undefined4 value)\n\n{\n  switch(value) {\n  case 0:\n    (*param)[3] = (*param)[3] | 2;\n    break;\n  case 4:\n    (*param)[3] = (*param)[3] | 4;\n    break;\n  case 8:\n    (*param)[3] = (*param)[3] | 8;\n    break;\n  case 0xc:\n    (*param)[3] = (*param)[3] | 0x10;\n  }\n  update_bit_value_08006262(*param,value,1);\n  if (*param == (uint *)0x40012c00) {\n    status = status | 0x8000;\n  }\n  **param = **param | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006280": "update_bit_values_08006280",
                "param_1": "param",
                "param_2": "value",
                "uRam40012c44": "status"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080062f4": {
            "entrypoint": "0x080062f4",
            "current_name": "update_bit_value_080062f4",
            "code": "\nundefined4 updateBitValue_080062f4(uint **data,undefined4 bitPosition)\n\n{\n  uint *tempPtr;\n  \n  switch(bitPosition) {\n  case 0:\n    (*data)[3] = (*data)[3] & 0xfffffffd;\n    break;\n  case 4:\n    (*data)[3] = (*data)[3] & 0xfffffffb;\n    break;\n  case 8:\n    (*data)[3] = (*data)[3] & 0xfffffff7;\n    break;\n  case 0xc:\n    (*data)[3] = (*data)[3] & 0xffffffef;\n  }\n  updateBitValue_080062f4Helper(*data,bitPosition,0);\n  if (((*data == (uint *)0x40012c00) && ((uRam40012c20 & 0x1111) == 0)) &&\n     ((uRam40012c20 & 0x444) == 0)) {\n    uRam40012c44 = uRam40012c44 & 0xffff7fff;\n  }\n  tempPtr = *data;\n  if (((tempPtr[8] & 0x1111) == 0) && ((tempPtr[8] & 0x444) == 0)) {\n    *tempPtr = *tempPtr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080062f4": "update_bit_value_080062f4",
                "param_1": "data",
                "param_2": "bitPosition",
                "puVar1": "tempPtr",
                "update_bit_value_08006262": "updateBitValueHelper"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006390": {
            "entrypoint": "0x08006390",
            "current_name": "update_bit_and_set_flag_08006390",
            "code": "\nundefined4 update_bit_and_set_flag_08006390(uint **bit_value,undefined4 flag)\n\n{\n  update_bit_value_08006262(*bit_value,flag,1);\n  if (*bit_value == (uint *)0x40012c00) {\n    flag_register = flag_register | 0x8000;\n  }\n  **bit_value = **bit_value | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006390": "update_bit_and_set_flag_08006390",
                "param_1": "bit_value",
                "param_2": "flag",
                "uRam40012c44": "flag_register"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080063c0": {
            "entrypoint": "0x080063c0",
            "current_name": "update_bit_values_080063c0",
            "code": "\nundefined4 update_bit_values_080063c0(uint **bit_values_ptr,undefined4 bit_value)\n\n{\n  uint *current_bit_values;\n  \n  update_bit_value_08006262(*bit_values_ptr,bit_value,0);\n  if (((*bit_values_ptr == (uint *)0x40012c00) && ((data_ptr_2 & 0x1111) == 0)) &&\n     ((data_ptr_2 & 0x444) == 0)) {\n    data_ptr_3 = data_ptr_3 & 0xffff7fff;\n  }\n  current_bit_values = *bit_values_ptr;\n  if (((current_bit_values[8] & 0x1111) == 0) && ((current_bit_values[8] & 0x444) == 0)) {\n    *current_bit_values = *current_bit_values & 0xfffffffe;\n  }\n  *(undefined *)((int)bit_values_ptr + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080063c0": "update_bit_values_080063c0",
                "param_1": "bit_values_ptr",
                "param_2": "bit_value",
                "puVar1": "current_bit_values",
                "uRam40012c20": "data_ptr_2",
                "uRam40012c44": "data_ptr_3"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006420": {
            "entrypoint": "0x08006420",
            "current_name": "set_bit_value_08006420",
            "code": "\nvoid setBitValue_08006420(int baseAddress,uint bitPosition,int value)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | value << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006420": "set_bit_value_08006420",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "value"
            },
            "calling": [
                "FUN_0800643c",
                "FUN_08006460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800643c": {
            "entrypoint": "0x0800643c",
            "current_name": "set_bit_and_update_values_0800643c",
            "code": "\nundefined4 set_bit_and_update_values_0800643c(uint **bit_array,undefined4 bit_position)\n\n{\n  set_bit_value_08006420(*bit_array,bit_position,4);\n  (*bit_array)[0x11] = (*bit_array)[0x11] | 0x8000;\n  **bit_array = **bit_array | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800643c": "set_bit_and_update_values_0800643c",
                "param_1": "bit_array",
                "param_2": "bit_position"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006460": {
            "entrypoint": "0x08006460",
            "current_name": "clear_bit_and_update_flags_08006460",
            "code": "\nundefined4 clearBitAndUpdateFlags_08006460(uint **data,undefined4 bitIndex)\n\n{\n  uint *dataPointer;\n  \n  set_bit_value_08006420(*data,bitIndex,0);\n  dataPointer = *data;\n  if (((dataPointer[8] & 0x1111) == 0) && ((dataPointer[8] & 0x444) == 0)) {\n    dataPointer[0x11] = dataPointer[0x11] & 0xffff7fff;\n  }\n  dataPointer = *data;\n  if (((dataPointer[8] & 0x1111) == 0) && ((dataPointer[8] & 0x444) == 0)) {\n    *dataPointer = *dataPointer & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006460": "clear_bit_and_update_flags_08006460",
                "param_1": "data",
                "param_2": "bitIndex",
                "puVar1": "dataPointer"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ac": {
            "entrypoint": "0x080064ac",
            "current_name": "FUNC_080064ac",
            "code": "\nvoid FUNC_080064ac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064ae": {
            "entrypoint": "0x080064ae",
            "current_name": "FUNC_080064ae",
            "code": "\nvoid FUNC_080064ae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064b0": {
            "entrypoint": "0x080064b0",
            "current_name": "set_flags_and_values_080064b0",
            "code": "\nvoid setFlagsAndValues_080064b0(int *pointer)\n\n{\n  *(uint *)(*pointer + 0xc) = *(uint *)(*pointer + 0xc) & 0xfffffedf;\n  *(uint *)(*pointer + 0x14) = *(uint *)(*pointer + 0x14) & 0xfffffffe;\n  *(undefined *)((int)pointer + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064b0": "set_flags_and_values_080064b0",
                "param_1": "pointer"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064cc": {
            "entrypoint": "0x080064cc",
            "current_name": "process_data_080064cc",
            "code": "\nundefined4 processData_080064cc(int *data)\n\n{\n  short remainingIterations;\n  byte *bytePtr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    bytePtr = (byte *)data[8];\n    data[8] = (int)(bytePtr + 1);\n    *(uint *)(*data + 4) = (uint)*bytePtr;\n  }\n  remainingIterations = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = remainingIterations;\n  if (remainingIterations == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080064cc": "process_data_080064cc",
                "param_1": "data",
                "sVar1": "remainingIterations",
                "pbVar2": "bytePtr"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006538": {
            "entrypoint": "0x08006538",
            "current_name": "calculate_shifted_data_08006538",
            "code": "\nvoid calculateShiftedData_08006538(int *inputArray)\n\n{\n  int value1;\n  int value2;\n  int value3;\n  int value4;\n  int value5;\n  int value6;\n  int value7;\n  int value8;\n  int value9;\n  int inputValue;\n  \n  *(uint *)(*inputArray + 0x10) = *(uint *)(*inputArray + 0x10) & 0xffffcfff | inputArray[3];\n  *(uint *)(*inputArray + 0xc) =\n       inputArray[2] | inputArray[4] | inputArray[5] | *(uint *)(*inputArray + 0xc) & 0xffffe9f3;\n  *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xfffffcff | inputArray[6];\n  inputValue = *inputArray;\n  if (inputValue != 0x40013800) {\n    value1 = getShiftedDataValue();\n    value6 = inputArray[1];\n    value2 = getShiftedDataValue();\n    value7 = inputArray[1];\n    value3 = getShiftedDataValue();\n    value8 = inputArray[1];\n    value4 = getShiftedDataValue();\n    value9 = inputArray[1];\n    value5 = getShiftedDataValue();\n    *(uint *)(inputValue + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(value4 * 0x19) / (uint)(value9 << 2) +\n                        (int)(((ulonglong)(uint)(value5 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(value2 * 0x19) / (uint)(value7 << 2) +\n           (int)(((ulonglong)(uint)(value3 * 0x19) / (ulonglong)(uint)(value8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(value6 << 2)) / 100) * 0x10;\n    return;\n  }\n  inputValue = getShiftedDataValue2();\n  value5 = inputArray[1];\n  value1 = getShiftedDataValue2();\n  value6 = inputArray[1];\n  value2 = getShiftedDataValue2();\n  value7 = inputArray[1];\n  value3 = getShiftedDataValue2();\n  value8 = inputArray[1];\n  value4 = getShiftedDataValue2();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((uint)(value3 * 0x19) / (uint)(value8 << 2) +\n                                (int)(((ulonglong)(uint)(value4 * 0x19) /\n                                      (ulonglong)(uint)(inputArray[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(value1 * 0x19) / (uint)(value6 << 2) +\n                   (int)(((ulonglong)(uint)(value2 * 0x19) / (ulonglong)(uint)(value7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(inputValue * 0x19) / (ulonglong)(uint)(value5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006538": "calculate_shifted_data_08006538",
                "param_1": "inputArray",
                "iVar1": "value1",
                "iVar2": "value2",
                "iVar3": "value3",
                "iVar4": "value4",
                "iVar5": "value5",
                "iVar6": "value6",
                "iVar7": "value7",
                "iVar8": "value8",
                "iVar9": "value9",
                "iVar10": "inputValue",
                "get_shifted_data_value_08005a28": "getShiftedDataValue",
                "shifted_data_value_08005a48": "getShiftedDataValue2"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066e8": {
            "entrypoint": "0x080066e8",
            "current_name": "validate_condition_080066e8",
            "code": "\nundefined4 validate_condition_080066e8(uint **input_values,uint condition_flag,uint expected_result,int data_value,uint max_difference)\n\n{\n  int calculated_difference;\n  \n  do {\n    if (((condition_flag & ~**input_values) == 0) != expected_result) {\n      return 0;\n    }\n  } while ((max_difference == 0xffffffff) ||\n          ((max_difference != 0 && (calculated_difference = get_data_value_08003760(), (uint)(calculated_difference - data_value) <= max_difference))));\n  (*input_values)[3] = (*input_values)[3] & 0xfffffe5f;\n  (*input_values)[5] = (*input_values)[5] & 0xfffffffe;\n  *(undefined *)((int)input_values + 0x39) = 0x20;\n  *(undefined *)((int)input_values + 0x3a) = 0x20;\n  *(undefined *)(input_values + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080066e8": "validate_condition_080066e8",
                "param_1": "input_values",
                "param_2": "condition_flag",
                "param_3": "expected_result",
                "param_4": "data_value",
                "param_5": "max_difference",
                "iVar1": "calculated_difference"
            },
            "calling": [
                "FUN_080067ac"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800674c": {
            "entrypoint": "0x0800674c",
            "current_name": "FUNC_0800674c",
            "code": "\nvoid FUNC_0800674c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674e": {
            "entrypoint": "0x0800674e",
            "current_name": "initialize_data_0800674e",
            "code": "\nundefined4 initializeData_0800674e(int *dataPointer)\n\n{\n  if (dataPointer != (int *)0x0) {\n    if (*(char *)((int)dataPointer + 0x39) == '\\0') {\n      *(undefined *)(dataPointer + 0xe) = 0;\n      FUNC_0800674c();\n    }\n    *(undefined *)((int)dataPointer + 0x39) = 0x24;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xffffdfff;\n    calculateShiftedData(dataPointer);\n    *(uint *)(*dataPointer + 0x10) = *(uint *)(*dataPointer + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataPointer + 0x14) = *(uint *)(*dataPointer + 0x14) & 0xffffffd5;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) | 0x2000;\n    counter = 0;\n    *(undefined *)((int)dataPointer + 0x39) = 0x20;\n    *(undefined *)((int)dataPointer + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800674e": "initialize_data_0800674e",
                "param_1": "dataPointer",
                "calculate_shifted_data_08006538": "calculateShiftedData",
                "param_1[0xf]": "counter"
            },
            "calling": [
                "FUN_08008078"
            ],
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080067ac": {
            "entrypoint": "0x080067ac",
            "current_name": "process_input_080067ac",
            "code": "\nundefined4 processInput_080067ac(int *inputArray,ushort *inputString,int inputLength,undefined4 inputValue)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)inputArray + 0x39) == ' ') {\n    if (inputString == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (inputLength == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(inputArray + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(inputArray + 0xe) = 1;\n      inputArray[0xf] = 0;\n      *(undefined *)((int)inputArray + 0x39) = 0x21;\n      returnValue = get_data_value_08003760();\n      *(short *)(inputArray + 9) = (short)inputLength;\n      *(short *)((int)inputArray + 0x26) = (short)inputLength;\n      while (*(short *)((int)inputArray + 0x26) != 0) {\n        *(short *)((int)inputArray + 0x26) = *(short *)((int)inputArray + 0x26) + -1;\n        if (inputArray[2] == 0x1000) {\n          result = validate_condition_080066e8(inputArray,0x80,0,returnValue,inputValue);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*inputArray + 4) = *inputString & 0x1ff;\n          if (inputArray[4] == 0) {\n            inputString = inputString + 1;\n          }\n          else {\n            inputString = (ushort *)((int)inputString + 1);\n          }\n        }\n        else {\n          result = validate_condition_080066e8(inputArray,0x80,0,returnValue,inputValue);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*inputArray + 4) = (uint)*(byte *)inputString;\n          inputString = (ushort *)((int)inputString + 1);\n        }\n      }\n      result = validate_condition_080066e8(inputArray,0x40,0,returnValue,inputValue);\n      if (result == 0) {\n        *(undefined *)((int)inputArray + 0x39) = 0x20;\n        *(undefined *)(inputArray + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080067ac": "process_input_080067ac",
                "param_1": "inputArray",
                "param_2": "inputString",
                "param_3": "inputLength",
                "param_4": "inputValue",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_080066e8",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800688e": {
            "entrypoint": "0x0800688e",
            "current_name": "validate_input_0800688e",
            "code": "\nundefined4 validate_input_0800688e(int *input_buffer,int length_input,int value_input)\n\n{\n  if (*(char *)((int)input_buffer + 0x39) != ' ') {\n    return 2;\n  }\n  if (length_input == 0) {\n    return 1;\n  }\n  if (value_input == 0) {\n    return 1;\n  }\n  if (*(char *)(input_buffer + 0xe) != '\\x01') {\n    output_1 = length_input;\n    *(short *)(input_buffer + 9) = (short)value_input;\n    *(short *)((int)input_buffer + 0x26) = (short)value_input;\n    output_4 = 0;\n    *(undefined *)((int)input_buffer + 0x39) = 0x21;\n    *(undefined *)(input_buffer + 0xe) = 0;\n    *(uint *)(*input_buffer + 0xc) = *(uint *)(*input_buffer + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800688e": "validate_input_0800688e",
                "param_1": "input_buffer",
                "param_2": "length_input",
                "param_3": "value_input",
                "param_1[8]": "output_1",
                "param_1[0xf]": "output_4"
            },
            "calling": [
                "FUN_08008730",
                "FUN_08008694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068d6": {
            "entrypoint": "0x080068d6",
            "current_name": "FUNC_080068d6",
            "code": "\nundefined4 FUNC_080068d6(int *param_1,int param_2,int param_3)\n\n{\n  if (*(char *)((int)param_1 + 0x3a) != ' ') {\n    return 2;\n  }\n  if (param_2 == 0) {\n    return 1;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  if (*(char *)(param_1 + 0xe) != '\\x01') {\n    param_1[10] = param_2;\n    *(short *)(param_1 + 0xb) = (short)param_3;\n    *(short *)((int)param_1 + 0x2e) = (short)param_3;\n    param_1[0xf] = 0;\n    *(undefined *)((int)param_1 + 0x3a) = 0x22;\n    *(undefined *)(param_1 + 0xe) = 0;\n    *(uint *)(*param_1 + 0xc) = *(uint *)(*param_1 + 0xc) | 0x100;\n    *(uint *)(*param_1 + 0x14) = *(uint *)(*param_1 + 0x14) | 1;\n    *(uint *)(*param_1 + 0xc) = *(uint *)(*param_1 + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080068d6": "FUNC_080068d6"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006932": {
            "entrypoint": "0x08006932",
            "current_name": "clear_bit_and_set_character_08006932",
            "code": "\nundefined4 clearBitAndSetCharacter_08006932(int *inputPtr)\n\n{\n  *(uint *)(*inputPtr + 0xc) = *(uint *)(*inputPtr + 0xc) & 0xffffffbf;\n  *(undefined *)((int)inputPtr + 0x39) = 0x20;\n  validateAndProcessInput();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006932": "clear_bit_and_set_character_08006932",
                "param_1": "inputPtr",
                "validate_and_process_input_08008730": "validateAndProcessInput"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_08008730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800694c": {
            "entrypoint": "0x0800694c",
            "current_name": "process_data_0800694c",
            "code": "\nundefined4 processData_0800694c(int *data)\n\n{\n  byte *bytePointer;\n  short counter;\n  undefined *undefinedPointer;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefinedPointer = (undefined *)data[10];\n    data[10] = (int)(undefinedPointer + 1);\n    *undefinedPointer = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    bytePointer = (byte *)data[10];\n    data[10] = (int)(bytePointer + 1);\n    *bytePointer = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  execute_function_based_on_index_0800870c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "data",
                "pbVar1": "bytePointer",
                "sVar2": "counter",
                "puVar3": "undefinedPointer"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_0800870c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069ec": {
            "entrypoint": "0x080069ec",
            "current_name": "process_data_080069ec",
            "code": "\nvoid process_data_080069ec(uint **data)\n\n{\n  int result;\n  uint var3;\n  uint *ptr;\n  uint var4;\n  uint var5;\n  \n  ptr = *data;\n  var5 = *ptr;\n  var3 = ptr[3];\n  if ((((var5 & 0xf) == 0) && ((var5 & 0x20) != 0)) && ((var3 & 0x20) != 0)) {\n    process_data_080069ec_0800694c(data);\n    return;\n  }\n  if (((var5 & 0xf) == 0) || ((var4 = ptr[5] & 1, var4 == 0 && ((var3 & 0x120) == 0)))) {\n    if (((var5 & 0x80) != 0) && ((var3 & 0x80) != 0)) {\n      process_data_080069ec_080064cc(data);\n      return;\n    }\n    if (((var5 & 0x40) != 0) && ((var3 & 0x40) != 0)) {\n      clear_bit_and_set_character_08006932(data);\n    }\n  }\n  else {\n    if (((var5 & 1) != 0) && ((var3 & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((var5 & 4) != 0) && (var4 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((var5 & 2) != 0) && (var4 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((var5 & 8) != 0) && (var4 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((var5 & 0x20) != 0) && ((var3 & 0x20) != 0)) {\n        process_data_080069ec_0800694c(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        FUNC_0800877c(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      set_flags_and_values_080064b0(data);\n      ptr = *data;\n      if ((ptr[5] & 0x40) == 0) {\n        FUNC_0800877c(data);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        FUNC_0800877c(data);\n        return;\n      }\n      data[0xd][0xd] = (uint)&LAB_08006b0c_1;\n      result = initialize_options_08004050(data[0xd]);\n      if (result != 0) {\n        (*(code *)data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069ec": "process_data_080069ec",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "var3",
                "puVar3": "ptr",
                "uVar4": "var4",
                "uVar5": "var5"
            },
            "calling": [],
            "called": [
                "FUN_0800877c",
                "FUN_08004050",
                "FUN_080064b0",
                "FUN_0800694c",
                "FUN_08006932",
                "FUN_080064cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b1c": {
            "entrypoint": "0x08006b1c",
            "current_name": "combine_bytes_08006b1c",
            "code": "\nbyte combineBytes_08006b1c(int address)\n\n{\n  return *(byte *)(address + 0x3a) | *(byte *)(address + 0x39);\n}\n\n",
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "address"
            },
            "calling": [
                "FUN_080085b8",
                "FUN_080085dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b28": {
            "entrypoint": "0x08006b28",
            "current_name": "extract_bit_08006b28",
            "code": "\nuint extract_bit_08006b28(uint input,int offset)\n\n{\n  return *(uint *)(offset + ((input << 0x18) >> 0x1c) * 4) >> (input & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08006b28": "extract_bit_08006b28",
                "param_1": "input",
                "param_2": "offset"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008a6c",
                "FUN_08008a24",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b3e": {
            "entrypoint": "0x08006b3e",
            "current_name": "update_bitwise_value_08006b3e",
            "code": "\nvoid updateBitwiseValue_08006b3e(uint value,int array)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (value << 0x18) >> 0x1c;\n  *(uint *)(array + shiftedIndex * 4) = *(uint *)(array + shiftedIndex * 4) | 1 << (value & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b3e": "update_bitwise_value_08006b3e",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b5c": {
            "entrypoint": "0x08006b5c",
            "current_name": "clear_bit_in_array_08006b5c",
            "code": "\nvoid clearBitInArray_08006b5c(uint bitIndex,int arrayPointer)\n\n{\n  uint wordIndex;\n  \n  wordIndex = (bitIndex << 0x18) >> 0x1c;\n  *(uint *)(arrayPointer + wordIndex * 4) = *(uint *)(arrayPointer + wordIndex * 4) & ~(1 << (bitIndex & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b5c": "clear_bit_in_array_08006b5c",
                "param_1": "bitIndex",
                "param_2": "arrayPointer",
                "uVar1": "wordIndex"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b7c": {
            "entrypoint": "0x08006b7c",
            "current_name": "map_param_to_address_08006b7c",
            "code": "\nundefined4 mapParamToAddress_08006b7c(undefined4 param)\n\n{\n  switch(param) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08006b7c": "map_param_to_address_08006b7c",
                "param_1": "param"
            },
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006bb8": {
            "entrypoint": "0x08006bb8",
            "current_name": "set_flags_and_return_address_08006bb8",
            "code": "\n\n\nundefined4 setFlagsAndReturnAddress_08006bb8(undefined4 input)\n\n{\n  undefined4 returnValue;\n  \n  switch(input) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    returnValue = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    returnValue = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    returnValue = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    returnValue = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    returnValue = 0x40011800;\n    break;\n  default:\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08006bb8": "set_flags_and_return_address_08006bb8",
                "param_1": "input",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c60": {
            "entrypoint": "0x08006c60",
            "current_name": "calculate_index_08006c60",
            "code": "\nuint calculateIndex_08006c60(undefined4 input1,undefined4 input2,undefined4 param3,undefined4 param4)\n\n{\n  int valueIndex;\n  uint shiftedValue;\n  \n  valueIndex = get_value_index_08007376(input1,&DAT_0800a5b8,param3,param4,param4);\n  shiftedValue = (uint)(valueIndex << 0xc) >> 0x1b;\n  if (0x10 < shiftedValue - 1) {\n    shiftedValue = 0;\n  }\n  return shiftedValue;\n}\n\n",
            "renaming": {
                "FUN_08006c60": "calculate_index_08006c60",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "valueIndex",
                "uVar2": "shiftedValue"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c7c": {
            "entrypoint": "0x08006c7c",
            "current_name": "get_result_08006c7c",
            "code": "\nundefined4 get_result_08006c7c(undefined4 value_1,undefined4 value_2,undefined4 value_3,undefined4 value_4)\n\n{\n  int value_index;\n  uint shifted_value;\n  \n  value_index = get_value_index_08007376(value_1,&DAT_0800a6cc,value_3,value_4,value_4);\n  shifted_value = (uint)(value_index << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08006c7c": "get_result_08006c7c",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "iVar1": "value_index",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ca8": {
            "entrypoint": "0x08006ca8",
            "current_name": "update_register_settings_08006ca8",
            "code": "\n\n\nvoid update_register_settings_08006ca8(int *input_data,undefined4 param_value)\n\n{\n  undefined4 flags_result;\n  uint register_settings;\n  int input_value;\n  uint bit_mask;\n  undefined4 setting1;\n  undefined4 setting2;\n  \n  input_value = *input_data;\n  if (input_value == 0x40012400) {\n    register_settings = _DAT_40021018 | 0x200;\n    input_value = 0x200;\n    _DAT_40021018 = register_settings;\n  }\n  else {\n    register_settings = 0x40012800;\n    if (input_value == 0x40012800) {\n      register_settings = _DAT_40021018 | 0x400;\n      input_value = 0x400;\n      _DAT_40021018 = register_settings;\n    }\n  }\n  flags_result = set_flags_and_return_address_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c,param_value,register_settings,input_value);\n  bit_mask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  setting1 = 3;\n  setting2 = 0;\n  update_register_settings_08006ca8_080040e8(flags_result,&bit_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ca8": "update_register_settings_08006ca8",
                "param_1": "input_data",
                "param_2": "param_value",
                "uVar1": "flags_result",
                "uVar2": "register_settings",
                "iVar3": "input_value",
                "local_18": "bit_mask",
                "local_14": "setting1",
                "local_10": "setting2"
            },
            "calling": [
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d24": {
            "entrypoint": "0x08006d24",
            "current_name": "update_memory_access_08006d24",
            "code": "\n\n\nvoid updateMemoryAccess_08006d24(int *memoryAddress)\n\n{\n  if (*memoryAddress != 0x40012400) {\n    if (*memoryAddress == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d24": "update_memory_access_08006d24",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08003ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d80": {
            "entrypoint": "0x08006d80",
            "current_name": "process_and_update_data_08006d80",
            "code": "\nundefined2 process_and_update_data_08006d80(undefined4 input_param)\n\n{\n  int status;\n  uint offset_value;\n  undefined2 result;\n  uint index;\n  undefined4 config_flag1;\n  undefined4 config_flag2;\n  int data_value;\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 flag3;\n  undefined4 flag4;\n  undefined4 flag5;\n  undefined4 flag6;\n  undefined4 flag7;\n  undefined4 flag8;\n  \n  fill_memory_080091c6(&data_value,0,0x30);\n  index = 0;\n  config_flag1 = 0;\n  config_flag2 = 0;\n  result = 0;\n  data_value = check_and_find_value_08007320(input_param,&DAT_0800a5b8);\n  if (data_value == 0) {\n    result = 0;\n  }\n  else {\n    flag1 = 0;\n    flag2 = 0;\n    flag3 = 0;\n    flag5 = 0;\n    flag7 = 0xe0000;\n    flag8 = 0;\n    flag4 = 1;\n    flag6 = 0;\n    DAT_20000014 = (undefined)input_param;\n    status = process_data_flags_08003bd8(&data_value);\n    if (status == 0) {\n      index = calculate_index_08006c60(input_param);\n      if (index < 0x12) {\n        config_flag1 = 1;\n        config_flag2 = 2;\n        status = update_configuration_080038e4(&data_value,&index);\n        if (status == 0) {\n          status = check_and_update_data_08003e20(&data_value);\n          if (status == 0) {\n            status = check_and_update_data_08003aa0(&data_value);\n            if (status == 0) {\n              status = check_and_increment_counter_0800376c(&data_value,10);\n              if (status == 0) {\n                offset_value = get_offset_value_08003a1c(&data_value);\n                if ((offset_value & 0x200) != 0) {\n                  result = get_pointer_value_080038dc(&data_value);\n                }\n                status = update_data_flags_08003de4(&data_value);\n                if (status == 0) {\n                  status = update_data_flags_08003ce8(&data_value);\n                  if (status != 0) {\n                    result = 0;\n                  }\n                }\n                else {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d80": "process_and_update_data_08006d80",
                "param_1": "input_param",
                "local_46": "result",
                "local_44": "index",
                "local_40": "config_flag1",
                "local_3c": "config_flag2",
                "local_38": "data_value",
                "local_34": "flag1",
                "local_30": "flag2",
                "local_2c": "flag3",
                "local_28": "flag4",
                "local_24": "flag5",
                "local_20": "flag6",
                "local_1c": "flag7",
                "local_10": "flag8",
                "iVar1": "status",
                "uVar2": "offset_value"
            },
            "calling": [
                "FUN_08008880"
            ],
            "called": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08007320",
                "FUN_08003a1c",
                "FUN_08003e20",
                "FUN_080038e4",
                "FUN_080091c6",
                "FUN_08003aa0",
                "FUN_08003bd8",
                "FUN_0800376c",
                "FUN_080038dc",
                "FUN_08006c60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e68": {
            "entrypoint": "0x08006e68",
            "current_name": "update_configuration_08006e68",
            "code": "\n\n\nvoid updateConfiguration_08006e68(undefined4 config)\n\n{\n  int valueIndex;\n  undefined4 address;\n  uint bitMask;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  \n  valueIndex = get_value_index_08007376((int)(char)DAT_20000014,&DAT_0800a6cc);\n  update_settings_08007438(config);\n  address = set_flags_and_return_address_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c);\n  constant1 = 2;\n  constant2 = 0;\n  constant3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((uint)(valueIndex << 0x11) >> 0x19) {\n  case 1:\n    _DAT_40010004 = _DAT_40010004 | 0x7000001;\n    break;\n  case 2:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    _DAT_40010004 = _DAT_40010004 | 0x7000002;\n    break;\n  case 4:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    _DAT_40010004 = _DAT_40010004 | 0x7000004;\n    break;\n  case 6:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    _DAT_40010004 = _DAT_40010004 | 0x7000008;\n    break;\n  case 8:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    _DAT_40010004 = _DAT_40010004 | 0x7000030;\n    break;\n  case 10:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n    break;\n  case 0xd:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    _DAT_40010004 = _DAT_40010004 | 0x7000300;\n    break;\n  case 0x10:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n    break;\n  case 0x14:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    _DAT_40010004 = _DAT_40010004 | 0x7001000;\n    break;\n  case 0x17:\n    _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    _DAT_40010004 = _DAT_40010004 | 0x7008000;\n    break;\n  case 0x1c:\n    _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n    break;\n  case 0x22:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  bitMask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  update_register_settings_080040e8(address,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e68": "update_configuration_08006e68",
                "param_1": "config",
                "iVar1": "valueIndex",
                "uVar2": "address",
                "local_20": "bitMask",
                "local_1c": "constant1",
                "local_18": "constant2",
                "local_14": "constant3"
            },
            "calling": [
                "FUN_08006092"
            ],
            "called": [
                "FUN_08007438",
                "FUN_080040e8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007110": {
            "entrypoint": "0x08007110",
            "current_name": "update_register_value_08007110",
            "code": "\nvoid update_register_value_08007110(void)\n\n{\n  update_register_based_on_value_080074e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007110": "update_register_value_08007110"
            },
            "calling": [
                "FUN_08005e2e"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007118": {
            "entrypoint": "0x08007118",
            "current_name": "process_data_08007118",
            "code": "\nvoid processData_08007118(undefined4 configValue,uint divider,int counter,undefined4 status,char flag)\n\n{\n  uint shiftedData;\n  int configResult;\n  int updateStatus;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 value6;\n  undefined4 value7;\n  int value8;\n  int calculatedValue;\n  undefined4 value9;\n  int value10;\n  undefined4 value11;\n  undefined4 value12;\n  undefined value13;\n  \n  fill_memory_080091c6(&value8,0,0x40);\n  value1 = 0;\n  value2 = 0;\n  value3 = 0;\n  value4 = 0;\n  value5 = 0;\n  value6 = 0;\n  value7 = 0;\n  value8 = check_and_find_value_08007320(configValue,&DAT_0800a6cc);\n  if (value8 != 0) {\n    shiftedData = calculate_shifted_data_080075dc();\n    calculatedValue = shiftedData / divider - 1;\n    value10 = counter + -1;\n    value11 = 0;\n    value9 = 0;\n    value12 = 0;\n    value13 = 0;\n    if (flag == '\\x01') {\n      DAT_20000014 = (undefined)configValue;\n      configResult = check_and_update_configuration_08006092(&value8);\n      if (configResult != 0) {\n        return;\n      }\n    }\n    configResult = get_result_08006c7c(configValue);\n    if ((((configResult == 0) || (configResult == 4)) || (configResult == 8)) || ((configResult == 0xc || (configResult == 0x18)))) {\n      value1 = 0x60;\n      value3 = 0;\n      value5 = 0;\n      value4 = 0;\n      value7 = 0;\n      value6 = 0;\n      value2 = status;\n      updateStatus = update_and_return_status_08006186(&value8,&value1,configResult);\n      if (updateStatus == 0) {\n        shiftedData = get_value_index_08007376(configValue,&DAT_0800a6cc);\n        if ((shiftedData & 0x100000) == 0) {\n          update_bit_and_set_flag_08006390(&value8,configResult);\n        }\n        else {\n          set_bit_and_update_values_0800643c(&value8,configResult);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007118": "process_data_08007118",
                "param_1": "configValue",
                "param_2": "divider",
                "param_3": "counter",
                "param_4": "status",
                "param_5": "flag",
                "uVar1": "shiftedData",
                "iVar2": "configResult",
                "iVar3": "updateStatus",
                "local_74": "value1",
                "local_70": "value2",
                "local_6c": "value3",
                "local_68": "value4",
                "local_64": "value5",
                "local_60": "value6",
                "local_5c": "value7",
                "local_58": "value8",
                "local_54": "calculatedValue",
                "local_50": "value9",
                "local_4c": "value10",
                "local_48": "value11",
                "local_44": "value12",
                "local_1b": "value13"
            },
            "calling": [
                "FUN_080088e0"
            ],
            "called": [
                "FUN_0800643c",
                "FUN_080075dc",
                "FUN_08006390",
                "FUN_08007320",
                "FUN_08006092",
                "FUN_080091c6",
                "FUN_08006186",
                "FUN_08007376",
                "FUN_08006c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071e4": {
            "entrypoint": "0x080071e4",
            "current_name": "update_register_value_080071e4",
            "code": "\nvoid update_register_value_080071e4(undefined4 parameter)\n\n{\n  int result;\n  uint value_index;\n  int values [17];\n  \n  values[0] = check_and_find_value_08007320(parameter,&DAT_0800a6cc);\n  if ((values[0] != 0) &&\n     ((((result = get_result_08006c7c(parameter), result == 0 || (result == 4)) || (result == 8)) ||\n      ((result == 0xc || (result == 0x18)))))) {\n    value_index = get_value_index_08007376(parameter,&DAT_0800a6cc);\n    if ((value_index & 0x100000) == 0) {\n      update_bit_values_080063c0(values,result);\n    }\n    else {\n      clear_bit_and_update_flags_08006460(values,result);\n    }\n    update_register_value_080071e4_08005e2e(values);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071e4": "update_register_value_080071e4",
                "param_1": "parameter",
                "iVar1": "result",
                "uVar2": "value_index",
                "local_50": "values"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_080063c0",
                "FUN_08007376",
                "FUN_08006c7c",
                "FUN_08006460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800723c": {
            "entrypoint": "0x0800723c",
            "current_name": "initialize_data_0800723c",
            "code": "\nvoid initializeData_0800723c(void)\n\n{\n  retrieveDataValue();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800723c": "initialize_data_0800723c",
                "get_data_value_08003760": "retrieveDataValue"
            },
            "calling": [
                "FUN_08008abc"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007244": {
            "entrypoint": "0x08007244",
            "current_name": "FUNC_08007244",
            "code": "\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007246": {
            "entrypoint": "0x08007246",
            "current_name": "initialize_application_08007246",
            "code": "\nvoid initialize_application_08007246(void)\n\n{\n  update_sum();\n  initialize();\n  FUNC_08007244();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007246": "initialize_application_08007246",
                "update_sum_08003748": "update_sum",
                "initialize_application_08004046": "initialize"
            },
            "calling": [],
            "called": [
                "FUN_08004046",
                "FUN_08007244",
                "FUN_08003748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007258": {
            "entrypoint": "0x08007258",
            "current_name": "initialize_device_08007258",
            "code": "\n\n\nvoid initializeDevice_08007258(uint deviceType,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 address;\n  uint flagMask;\n  undefined4 param2New;\n  undefined4 param3New;\n  undefined4 localVar;\n  \n  address = set_flags_and_return_address_08006bb8((deviceType << 0x18) >> 0x1c);\n  flagMask = 1 << (deviceType & 0xf) & 0xffff;\n  localVar = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((deviceType - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((deviceType == 0xf) || (deviceType == 0x13)) || (deviceType == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  param2New = param2;\n  param3New = param3;\n  update_register_settings_080040e8(address,&flagMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007258": "initialize_device_08007258",
                "param_1": "deviceType",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "address",
                "local_20": "flagMask",
                "local_1c": "param2New",
                "local_18": "param3New",
                "local_14": "localVar"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d8": {
            "entrypoint": "0x080072d8",
            "current_name": "update_param_status_080072d8",
            "code": "\nvoid update_param_status_080072d8(undefined4 data_1,undefined2 data_2,int status,undefined4 data_3)\n\n{\n  if (status == 0) {\n    update_param_080042e2(data_1,data_2,0,data_3,data_3);\n    return;\n  }\n  update_param_080042e2(data_1,data_2,1,data_3,data_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d8": "update_param_status_080072d8",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "status",
                "param_4": "data_3"
            },
            "calling": [
                "FUN_08008a24"
            ],
            "called": [
                "FUN_080042e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072f0": {
            "entrypoint": "0x080072f0",
            "current_name": "verify_bit_080072f0",
            "code": "\nvoid verify_bit_080072f0(undefined4 input_param,undefined2 input_param_type,undefined4 verification_param_1,undefined4 verification_param_2)\n\n{\n  check_bit_080042d4(input_param,input_param_type,verification_param_1,verification_param_2,verification_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072f0": "verify_bit_080072f0",
                "param_1": "input_param",
                "param_2": "input_param_type",
                "param_3": "verification_param_1",
                "param_4": "verification_param_2"
            },
            "calling": [
                "FUN_08008a6c"
            ],
            "called": [
                "FUN_080042d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072fa": {
            "entrypoint": "0x080072fa",
            "current_name": "initialize_and_update_all_devices_080072fa",
            "code": "\nvoid initialize_and_update_all_devices_080072fa(void)\n\n{\n  initialize_and_update_sensor();\n  initialize_and_update_microcontroller();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072fa": "initialize_and_update_all_devices_080072fa",
                "initialize_and_update_08003724": "initialize_and_update_sensor",
                "initialize_and_update_microcontroller_080035b8": "initialize_and_update_microcontroller"
            },
            "calling": [
                "FUN_080036a2"
            ],
            "called": [
                "FUN_08003724",
                "FUN_080035b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007306": {
            "entrypoint": "0x08007306",
            "current_name": "find_value_in_param_08007306",
            "code": "\nundefined4 find_value_in_param_08007306(int value,char *parameter)\n\n{\n  while( true ) {\n    if (*parameter == -1) {\n      return 0;\n    }\n    if (*parameter == value) break;\n    parameter = parameter + 0xc;\n  }\n  return *(undefined4 *)(parameter + 4);\n}\n\n",
            "renaming": {
                "FUN_08007306": "find_value_in_param_08007306",
                "param_1": "value",
                "param_2": "parameter"
            },
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007320": {
            "entrypoint": "0x08007320",
            "current_name": "check_and_find_value_08007320",
            "code": "\nundefined4 check_and_find_value_08007320(int input_value)\n\n{\n  undefined4 found_value;\n  \n  if (input_value != -1) {\n    found_value = find_value_in_param_08007306();\n    return found_value;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007320": "check_and_find_value_08007320",
                "param_1": "input_value",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_080084b0",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008500",
                "FUN_08006d80",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007332": {
            "entrypoint": "0x08007332",
            "current_name": "find_value_08007332",
            "code": "\nint find_value_08007332(int value_to_find,char *array_ptr)\n\n{\n  while( true ) {\n    if (*(int *)(array_ptr + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array_ptr + 4) == value_to_find) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return (int)*array_ptr;\n}\n\n",
            "renaming": {
                "FUN_08007332": "find_value_08007332",
                "param_1": "value_to_find",
                "param_2": "array_ptr"
            },
            "calling": [
                "FUN_0800734a",
                "FUN_08007332"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800734a": {
            "entrypoint": "0x0800734a",
            "current_name": "get_found_value_0800734a",
            "code": "\nundefined4 getFoundValue_0800734a(int inputValue)\n\n{\n  undefined4 foundValue;\n  \n  if (inputValue != 0) {\n    foundValue = find_value_08007332();\n    return foundValue;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800734a": "get_found_value_0800734a",
                "param_1": "inputValue",
                "uVar1": "foundValue"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800735a": {
            "entrypoint": "0x0800735a",
            "current_name": "find_value_index_0800735a",
            "code": "\nundefined4 find_value_index_0800735a(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 8);\n}\n\n",
            "renaming": {
                "FUN_0800735a": "find_value_index_0800735a",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800735a",
                "FUN_08007376"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007376": {
            "entrypoint": "0x08007376",
            "current_name": "get_value_index_08007376",
            "code": "\nundefined4 getValueIndex_08007376(int value)\n\n{\n  undefined4 index;\n  \n  if (value == -1) {\n    return 0xffffffff;\n  }\n  index = find_value_index_0800735a();\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08007376": "get_value_index_08007376",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_080071e4",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_08006c7c",
                "FUN_08006c60"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738a": {
            "entrypoint": "0x0800738a",
            "current_name": "check_match_0800738a",
            "code": "\nundefined4 check_match_0800738a(int input_value,char *input_list)\n\n{\n  if (input_value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*input_list == -1) {\n      return 0;\n    }\n    if (input_value == *input_list) break;\n    input_list = input_list + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800738a": "check_match_0800738a",
                "param_1": "input_value",
                "param_2": "input_list"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_080088e0",
                "FUN_0800021a",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ae": {
            "entrypoint": "0x080073ae",
            "current_name": "compare_and_return_nonzero_080073ae",
            "code": "\nint compare_and_return_nonzero_080073ae(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_080073ae": "compare_and_return_nonzero_080073ae",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "execute_callback_function_080073c0",
            "code": "\nvoid executeCallbackFunction_080073c0(void)\n\n{\n  if (DAT_200005f4 != (callbackFunction *)0x0) {\n    (*DAT_200005f4)(DAT_2000060c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "execute_callback_function_080073c0",
                "code": "callbackFunction"
            },
            "calling": [
                "FUN_08005cb4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073e8": {
            "entrypoint": "0x080073e8",
            "current_name": "infinite_loop_080073e8",
            "code": "\nvoid infiniteLoop_080073e8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8"
            },
            "calling": [
                "FUN_080073e8",
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080073e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ec": {
            "entrypoint": "0x080073ec",
            "current_name": "initialize_peripheral_registers_080073ec",
            "code": "\n\n\nvoid initializePeripheralRegisters_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073ec": "initialize_peripheral_registers_080073ec"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007438": {
            "entrypoint": "0x08007438",
            "current_name": "update_settings_08007438",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateSettings_08007438(int *settings)\n\n{\n  if (*settings == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    DAT_20000610 = settings;\n  }\n  if (*settings == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    DAT_20000614 = settings;\n  }\n  if (*settings == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    DAT_20000618 = settings;\n  }\n  if (*settings == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    DAT_2000061c = settings;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007438": "update_settings_08007438",
                "param_1": "settings"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074e0": {
            "entrypoint": "0x080074e0",
            "current_name": "update_register_based_on_value_080074e0",
            "code": "\n\n\nvoid updateRegisterBasedOnValue_080074e0(int *registerValue)\n\n{\n  if (*registerValue == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*registerValue == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*registerValue == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*registerValue == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074e0": "update_register_based_on_value_080074e0",
                "param_1": "registerValue"
            },
            "calling": [
                "FUN_08007110",
                "FUN_08007710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007544": {
            "entrypoint": "0x08007544",
            "current_name": "check_timer_ir_qn_08007544",
            "code": "\nundefined4 checkTimerIRQn_08007544(uint timerIRQn)\n\n{\n  if (timerIRQn == 0xffffffff) {\n    return 0;\n  }\n  if (timerIRQn == 0x40000400) {\n    return 0x1d;\n  }\n  if (timerIRQn < 0x40000401) {\n    if (timerIRQn == 0x40000000) {\n      return 0x1c;\n    }\n  }\n  else {\n    if (timerIRQn == 0x40000800) {\n      return 0x1e;\n    }\n    if (timerIRQn == 0x40012c00) {\n      return 0x19;\n    }\n  }\n  initializeTimerData(\"TIM: Unknown timer IRQn\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007544": "check_timer_ir_qn_08007544",
                "param_1": "timerIRQn",
                "process_and_initialize_data_080098d8": "initializeTimerData"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080076e0"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007594": {
            "entrypoint": "0x08007594",
            "current_name": "identify_timer_instance_08007594",
            "code": "\nundefined4 identifyTimerInstance_08007594(uint timerInstance)\n\n{\n  if (timerInstance == 0xffffffff) {\n    return 0;\n  }\n  if (timerInstance == 0x40000400) {\n    return 1;\n  }\n  if (timerInstance < 0x40000401) {\n    if (timerInstance == 0x40000000) {\n      return 1;\n    }\n  }\n  else {\n    if (timerInstance == 0x40000800) {\n      return 1;\n    }\n    if (timerInstance == 0x40012c00) {\n      return 2;\n    }\n  }\n  initializeTimerData(\"TIM: Unknown timer instance\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007594": "identify_timer_instance_08007594",
                "param_1": "timerInstance",
                "process_and_initialize_data_080098d8": "initializeTimerData"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075dc": {
            "entrypoint": "0x080075dc",
            "current_name": "calculate_shifted_data_080075dc",
            "code": "\nint calculateShiftedData_080075dc(undefined4 input_value)\n\n{\n  uint shifted_data_1;\n  int result;\n  uint shifted_data_2;\n  undefined4 param1_value;\n  undefined4 param2_value;\n  undefined4 param3_value;\n  undefined4 param4_value;\n  uint local_data_1;\n  uint local_data_2;\n  \n  param2_value = 0;\n  param3_value = 0;\n  param4_value = 0;\n  local_data_1 = 0;\n  local_data_2 = 0;\n  param1_value = 0;\n  initialize_params_08005a68(&param2_value,&param1_value);\n  result = identify_timer_instance_08007594(input_value);\n  shifted_data_1 = local_data_2;\n  shifted_data_2 = local_data_1;\n  if (result == 1) {\n    result = get_shifted_data_value_08005a28();\n  }\n  else if (result == 2) {\n    result = shifted_data_value_08005a48();\n    shifted_data_2 = shifted_data_1;\n  }\n  else {\n    process_and_initialize_data_080098d8(\"TIM: Unknown clock source\");\n    result = 0;\n    shifted_data_2 = 0;\n  }\n  if (shifted_data_2 != 0x500) {\n    if (shifted_data_2 < 0x501) {\n      if (shifted_data_2 != 0x400) {\n        return result;\n      }\n    }\n    else if ((shifted_data_2 != 0x600) && (shifted_data_2 != 0x700)) {\n      return result;\n    }\n  }\n  return result << 1;\n}\n\n",
            "renaming": {
                "FUN_080075dc": "calculate_shifted_data_080075dc",
                "param_1": "input_value",
                "uVar1": "shifted_data_1",
                "iVar2": "result",
                "uVar3": "shifted_data_2",
                "local_20": "param1_value",
                "local_1c": "param2_value",
                "local_18": "param3_value",
                "local_14": "param4_value",
                "local_10": "local_data_1",
                "local_c": "local_data_2"
            },
            "calling": [
                "FUN_08007648",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007594",
                "FUN_08005a68",
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007648": {
            "entrypoint": "0x08007648",
            "current_name": "initialize_settings_08007648",
            "code": "\nvoid initializeSettings_08007648(undefined4 *settings,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  char checkValue;\n  uint shiftedData;\n  int result;\n  undefined4 *nextSettingsPtr;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 value6;\n  undefined4 value7;\n  \n  value1 = 0;\n  value2 = 0;\n  value3 = 0;\n  value4 = 0;\n  value5 = 0;\n  value6 = 0;\n  value7 = 0;\n  nextSettingsPtr = settings + 1;\n  *settings = 0x40000000;\n  settings[1] = 0x40000000;\n  settings[4] = param2;\n  shiftedData = calculate_shifted_data_080075dc();\n  settings[2] = shiftedData / 1000000 - 1;\n  settings[5] = 0;\n  settings[3] = 0;\n  settings[6] = 0;\n  settings[0x13] = param4;\n  value1 = 0;\n  value3 = 0;\n  value5 = 0;\n  value4 = 0;\n  value6 = 0;\n  value7 = 0;\n  value2 = param3;\n  checkValue = check_timer_ir_qn_08007544(*settings);\n  update_memory_location_08003f30((int)checkValue,0xe,0);\n  checkValue = check_timer_ir_qn_08007544(*settings);\n  set_bit_value_08003f94((int)checkValue);\n  result = initialize_or_update_settings_08006060(nextSettingsPtr);\n  if ((result == 0) && (result = update_data_08006128(nextSettingsPtr,&value1,0), result == 0)) {\n    update_bit_values_08006280(nextSettingsPtr,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007648": "initialize_settings_08007648",
                "param_1": "settings",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "checkValue",
                "uVar2": "shiftedData",
                "iVar3": "result",
                "puVar4": "nextSettingsPtr",
                "local_34": "value1",
                "local_30": "value2",
                "local_2c": "value3",
                "local_28": "value4",
                "local_24": "value5",
                "local_20": "value6",
                "local_1c": "value7"
            },
            "calling": [
                "FUN_0800242c"
            ],
            "called": [
                "FUN_08006280",
                "FUN_08006128",
                "FUN_08006060",
                "FUN_080075dc",
                "FUN_08003f94",
                "FUN_08007544",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076e0": {
            "entrypoint": "0x080076e0",
            "current_name": "update_timer_080076e0",
            "code": "\nvoid updateTimer_080076e0(undefined4 *functionParams)\n\n{\n  char timerStatus;\n  int registerUpdateStatus;\n  \n  functionParams[0x13] = 0;\n  timerStatus = check_timer_ir_qn_08007544(*functionParams);\n  set_bit_in_memory_08003fb0((int)timerStatus);\n  registerUpdateStatus = update_registers_08005df4(functionParams + 1);\n  if (registerUpdateStatus == 0) {\n    update_bit_value_080062f4(functionParams + 1,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076e0": "update_timer_080076e0",
                "param_1": "functionParams",
                "cVar1": "timerStatus",
                "iVar2": "registerUpdateStatus"
            },
            "calling": [
                "FUN_08002578"
            ],
            "called": [
                "FUN_08005df4",
                "FUN_08003fb0",
                "FUN_08007544",
                "FUN_080062f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007708": {
            "entrypoint": "0x08007708",
            "current_name": "initialize_settings_08007708",
            "code": "\nvoid initialize_settings_08007708(void)\n\n{\n  update_settings();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007708": "initialize_settings_08007708",
                "update_settings_08007438": "update_settings"
            },
            "calling": [
                "FUN_08006060"
            ],
            "called": [
                "FUN_08007438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007710": {
            "entrypoint": "0x08007710",
            "current_name": "update_register_based_on_value_08007710",
            "code": "\nvoid update_register_based_on_value_08007710(void)\n\n{\n  update_register_based_on_value_08007710_080074e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007710": "update_register_based_on_value_08007710"
            },
            "calling": [
                "FUN_08005df4"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007718": {
            "entrypoint": "0x08007718",
            "current_name": "subtract_four_08007718",
            "code": "\nint subtract_four_08007718(int input_number)\n\n{\n  return input_number + -4;\n}\n\n",
            "renaming": {
                "FUN_08007718": "subtract_four_08007718",
                "param_1": "input_number"
            },
            "calling": [
                "FUN_08007736",
                "FUN_0800771c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800771c": {
            "entrypoint": "0x0800771c",
            "current_name": "execute_callback_if_enabled_0800771c",
            "code": "\nvoid executeCallbackIfEnabled_0800771c(int callbackArgument)\n\n{\n  int callbackFunction;\n  \n  callbackFunction = getCallbackFunctionAddress();\n  if ((*(code **)(callbackFunction + 0x4c) != (code *)0x0) && (*(char *)(callbackArgument + 0x1c) == '\\x01')) {\n    (**(code **)(callbackFunction + 0x4c))(callbackFunction,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800771c": "execute_callback_if_enabled_0800771c",
                "param_1": "callbackArgument",
                "iVar1": "callbackFunction",
                "subtract_four_08007718": "getCallbackFunctionAddress"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007736": {
            "entrypoint": "0x08007736",
            "current_name": "execute_subroutine_08007736",
            "code": "\nvoid executeSubroutine_08007736(void)\n\n{\n  int result;\n  \n  result = getSubtractionResult();\n  if (*(code **)(result + 0x48) != (code *)0x0) {\n    (**(code **)(result + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007736": "execute_subroutine_08007736",
                "iVar1": "result",
                "subtract_four_08007718": "getSubtractionResult"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007744": {
            "entrypoint": "0x08007744",
            "current_name": "get_memory_location_08007744",
            "code": "\nundefined4 getMemoryLocation_08007744(int pointer)\n\n{\n  return *(undefined4 *)(*(int *)(pointer + 4) + 0x24);\n}\n\n",
            "renaming": {
                "FUN_08007744": "get_memory_location_08007744",
                "param_1": "pointer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "set_param_value_0800774a",
            "code": "\nvoid setParamValue_0800774a(int objectAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(*(int *)(objectAddress + 4) + 0x24) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "set_param_value_0800774a",
                "param_1": "objectAddress",
                "param_2": "newValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007750": {
            "entrypoint": "0x08007750",
            "current_name": "update_array_value_08007750",
            "code": "\nvoid updateArrayValue_08007750(int array,int index,undefined4 value)\n\n{\n  *(undefined4 *)(*(int *)(array + 4) + 0x34 + index * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007750": "update_array_value_08007750",
                "param_1": "array",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080077b0": {
            "entrypoint": "0x080077b0",
            "current_name": "initialize_i2_c_pin_080077b0",
            "code": "\n\n\nvoid initializeI2CPin_080077b0(int *pinConfig,int param2,int param3,int param4,undefined param5)\n\n{\n  int i2cPinValue1;\n  int i2cPinValue2;\n  undefined4 returnVal;\n  uint registerVal1;\n  uint registerVal2;\n  int *pinValue;\n  uint bitMask1;\n  uint bitMask2;\n  uint bitMask3;\n  undefined4 bitMask4;\n  \n  if (pinConfig != (int *)0x0) {\n    pinValue = pinConfig + 1;\n    i2cPinValue1 = check_and_find_value_08007320((int)*(char *)(pinConfig + 0x16),&DAT_0800a69c);\n    i2cPinValue2 = check_and_find_value_08007320((int)*(char *)((int)pinConfig + 0x59),&DAT_0800a66c);\n    if ((i2cPinValue1 == 0) || (i2cPinValue2 == 0)) {\n      process_and_initialize_data_080098d8(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      i2cPinValue1 = compare_and_return_nonzero_080073ae(i2cPinValue1,i2cPinValue2);\n      *pinConfig = i2cPinValue1;\n      if (i2cPinValue1 == 0) {\n        process_and_initialize_data_080098d8(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (i2cPinValue1 == 0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          *(undefined *)((int)pinConfig + 0x5a) = 0x1f;\n          *(undefined *)((int)pinConfig + 0x5b) = 0x20;\n          DAT_20000668 = pinValue;\n        }\n        if (*pinConfig == 0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          *(undefined *)((int)pinConfig + 0x5a) = 0x21;\n          *(undefined *)((int)pinConfig + 0x5b) = 0x22;\n          DAT_2000066c = pinValue;\n        }\n        returnVal = set_flags_and_return_address_08006bb8((uint)((int)*(char *)((int)pinConfig + 0x59) << 0x18) >> 0x1c);\n        bitMask1 = 1 << ((int)*(char *)((int)pinConfig + 0x59) & 0xfU) & 0xffff;\n        registerVal1 = get_value_index_08007376((int)*(char *)((int)pinConfig + 0x59),&DAT_0800a66c);\n        registerVal2 = get_value_index_08007376((int)*(char *)((int)pinConfig + 0x59),&DAT_0800a66c);\n        bitMask2 = (registerVal1 >> 3 & 1) << 4 | registerVal2 & 7;\n        bitMask4 = 3;\n        i2cPinValue1 = get_value_index_08007376((int)*(char *)((int)pinConfig + 0x59),&DAT_0800a66c);\n        bitMask3 = (uint)(i2cPinValue1 << 0x1a) >> 0x1e;\n        i2cPinValue1 = get_value_index_08007376((int)*(char *)((int)pinConfig + 0x59),&DAT_0800a66c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        registerVal2 = 1;\n        registerVal1 = _DAT_40021018;\n        switch((uint)(i2cPinValue1 << 0x11) >> 0x19) {\n        case 1:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 2:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 3:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 4:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 5:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 6:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 7:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 8:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 9:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 10:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0xb:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0xc:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0xd:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0xe:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0xf:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x10:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x11:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x12:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x13:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x14:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x15:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x16:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x17:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x1b:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x1c:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x21:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x22:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x23:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x24:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = registerVal2;\n        }\n        update_register_settings_080040e8(returnVal,&bitMask1,registerVal1,registerVal2);\n        returnVal = set_flags_and_return_address_08006bb8((uint)((int)*(char *)(pinConfig + 0x16) << 0x18) >> 0x1c);\n        bitMask1 = 1 << ((int)*(char *)(pinConfig + 0x16) & 0xfU) & 0xffff;\n        registerVal1 = get_value_index_08007376((int)*(char *)(pinConfig + 0x16),&DAT_0800a69c);\n        registerVal2 = get_value_index_08007376((int)*(char *)(pinConfig + 0x16),&DAT_0800a69c);\n        bitMask2 = (registerVal1 >> 3 & 1) << 4 | registerVal2 & 7;\n        bitMask4 = 3;\n        i2cPinValue1 = get_value_index_08007376((int)*(char *)(pinConfig + 0x16),&DAT_0800a69c);\n        bitMask3 = (uint)(i2cPinValue1 << 0x1a) >> 0x1e;\n        i2cPinValue1 = get_value_index_08007376((int)*(char *)(pinConfig + 0x16),&DAT_0800a69c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        registerVal2 = 1;\n        registerVal1 = _DAT_40021018;\n        switch((uint)(i2cPinValue1 << 0x11) >> 0x19) {\n        case 1:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 2:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 3:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 4:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 5:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 6:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 7:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 8:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 9:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 10:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0xb:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0xc:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0xd:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0xe:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0xf:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x10:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x11:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x12:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x13:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x14:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x15:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x16:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x17:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x1b:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x1c:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x21:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x22:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x23:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = registerVal2;\n          break;\n        case 0x24:\n          registerVal1 = 0x40010000;\n          registerVal2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = registerVal2;\n        }\n        update_register_settings_080040e8(returnVal,&bitMask1,registerVal1,registerVal2);\n        pinConfig[1] = *pinConfig;\n        pinConfig[2] = param2;\n        pinConfig[3] = 0;\n        pinConfig[4] = param4;\n        pinConfig[7] = 0xff;\n        pinConfig[5] = param3;\n        pinConfig[6] = 0;\n        pinConfig[8] = 0;\n        pinConfig[9] = 0;\n        *(undefined *)((int)pinConfig + 0x41) = 0;\n        update_memory_location_08003f30((int)*(char *)((int)pinConfig + 0x5a),0,1);\n        set_bit_value_08003f94((int)*(char *)((int)pinConfig + 0x5a));\n        update_memory_location_08003f30((int)*(char *)((int)pinConfig + 0x5b),0,1);\n        set_bit_value_08003f94((int)*(char *)((int)pinConfig + 0x5b));\n        calculate_parameters_080045c0(pinValue);\n        *(undefined *)((int)pinConfig + 0x5d) = param5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_pin_080077b0",
                "param_1": "pinConfig",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "i2cPinValue1",
                "iVar2": "i2cPinValue2",
                "uVar3": "returnVal",
                "uVar4": "registerVal1",
                "uVar5": "registerVal2",
                "piVar6": "pinValue",
                "local_38": "bitMask1",
                "local_34": "bitMask2",
                "local_30": "bitMask3",
                "local_2c": "bitMask4"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_08003f94",
                "FUN_080073ae",
                "FUN_08003f30",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_080045c0",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e74": {
            "entrypoint": "0x08007e74",
            "current_name": "process_data_08007e74",
            "code": "\nint processData_08007e74(int data,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int dataValue;\n  int result;\n  uint difference;\n  int status;\n  int iter;\n  undefined4 param4;\n  \n  param4 = arg3;\n  dataValue = get_data_value_08003760();\n  difference = 0;\n  status = 2;\n  do {\n    iter = data + 4;\n    result = process_input_08004728(iter,arg1,arg2,arg3,param4);\n    if (result == 0) {\n      status = 0;\n      while ((result = get_pointer_value_0800542a(iter), result != 0x20 && (status == 0))) {\n        result = get_data_value_08003760();\n        difference = result - dataValue;\n        if (difference < 0x65) {\n          result = get_value_at_offset_08005430(iter);\n          if (result != 0) {\n            status = 2;\n          }\n        }\n        else {\n          status = 1;\n        }\n      }\n    }\n    result = get_value_at_offset_08005430(iter);\n  } while ((result == 4) && (difference < 100));\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08007e74": "process_data_08007e74",
                "param_1": "data",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "dataValue",
                "iVar2": "result",
                "uVar3": "difference",
                "iVar4": "status",
                "iVar5": "iter",
                "uVar6": "param4"
            },
            "calling": [
                "FUN_08002a58"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_08004728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ede": {
            "entrypoint": "0x08007ede",
            "current_name": "copy_data_08007ede",
            "code": "\nundefined4 copyData_08007ede(int destination,int source,uint size)\n\n{\n  uint index;\n  \n  if (0x20 < size) {\n    return 2;\n  }\n  for (index = 0; index < size; index = index + 1 & 0xff) {\n    *(undefined *)(destination + index + 0x68) = *(undefined *)(source + index);\n    *(char *)(destination + 0x88) = *(char *)(destination + 0x88) + '\\x01';\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007ede": "copy_data_08007ede",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f0e": {
            "entrypoint": "0x08007f0e",
            "current_name": "check_connection_status_08007f0e",
            "code": "\nint checkConnectionStatus_08007f0e(int connectionAddress,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int initialDataValue;\n  int connectionStatus;\n  uint dataDifference;\n  int result;\n  int offsetPointer;\n  undefined4 param4Value;\n  \n  param4Value = value3;\n  initialDataValue = get_data_value_08003760();\n  dataDifference = 0;\n  result = 2;\n  do {\n    offsetPointer = connectionAddress + 4;\n    connectionStatus = initialize_connection_080047f4(offsetPointer,value1,value2,value3,param4Value);\n    if (connectionStatus == 0) {\n      result = 0;\n      while ((connectionStatus = get_pointer_value_0800542a(offsetPointer), connectionStatus != 0x20 && (result == 0))) {\n        connectionStatus = get_data_value_08003760();\n        dataDifference = connectionStatus - initialDataValue;\n        if (dataDifference < 0x65) {\n          connectionStatus = get_value_at_offset_08005430(offsetPointer);\n          if (connectionStatus != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    connectionStatus = get_value_at_offset_08005430(offsetPointer);\n  } while ((connectionStatus == 4) && (dataDifference < 100));\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08007f0e": "check_connection_status_08007f0e",
                "param_1": "connectionAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "initialDataValue",
                "iVar2": "connectionStatus",
                "uVar3": "dataDifference",
                "iVar4": "result",
                "iVar5": "offsetPointer",
                "uVar6": "param4Value"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_080047f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f78": {
            "entrypoint": "0x08007f78",
            "current_name": "subtract_four_08007f78",
            "code": "\nint subtractFour_08007f78(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_08007f78": "subtract_four_08007f78",
                "param_1": "input"
            },
            "calling": [
                "FUN_08008020",
                "FUN_08007ff0",
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "entrypoint": "0x08007f7c",
            "current_name": "update_data_08007f7c",
            "code": "\nvoid updateData_08007f7c(int dataPointer,int newValue)\n\n{\n  if (dataPointer != 0) {\n    if (newValue != 0) {\n      *(int *)(dataPointer + 0x60) = newValue;\n      initializeData(dataPointer + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f7c": "update_data_08007f7c",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "initialize_data_080049e0": "initializeData"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f8e": {
            "entrypoint": "0x08007f8e",
            "current_name": "set_data_and_initialize_08007f8e",
            "code": "\nvoid set_data_and_initialize_08007f8e(int data_address,int value)\n\n{\n  if (data_address != 0) {\n    if (value != 0) {\n      *(int *)(data_address + 100) = value;\n      initialize_data(data_address + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f8e": "set_data_and_initialize_08007f8e",
                "param_1": "data_address",
                "param_2": "value",
                "initialize_data_080049e0": "initialize_data"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007fa0": {
            "entrypoint": "0x08007fa0",
            "current_name": "initialize_or_validate_08007fa0",
            "code": "\nvoid initialize_or_validate_08007fa0(int input_address,int input_type,int expected_value,undefined4 additional_param)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (expected_value == *(int *)(input_address + 0xc)) {\n    if (input_type == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      initialize_parameters(input_address,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    validate_and_initialize(input_address,result + 0x68,0x20,8,additional_param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007fa0": "initialize_or_validate_08007fa0",
                "param_1": "input_address",
                "param_2": "input_type",
                "param_3": "expected_value",
                "param_4": "additional_param",
                "iVar1": "result",
                "subtract_four_08007f78": "subtract_four",
                "initialize_parameters_080048c8": "initialize_parameters",
                "validate_input_and_initialize_08004954": "validate_and_initialize"
            },
            "calling": [
                "FUN_08004ac2"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ff0": {
            "entrypoint": "0x08007ff0",
            "current_name": "initialize_and_execute_08007ff0",
            "code": "\nvoid initialize_and_execute_08007ff0(undefined4 parameter)\n\n{\n  int result;\n  \n  result = get_function_pointer();\n  if (((*(function_pointer **)(result + 0x60) != (function_pointer *)0x0) && (*(char *)(result + 0x5c) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(function_pointer **)(result + 0x60))(result + 0x68);\n  }\n  initialize_data(parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ff0": "initialize_and_execute_08007ff0",
                "param_1": "parameter",
                "iVar1": "result",
                "subtract_four_08007f78": "get_function_pointer",
                "code": "function_pointer",
                "initialize_data_080049e0": "initialize_data"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_08004aec",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008020": {
            "entrypoint": "0x08008020",
            "current_name": "initialize_if_needed_08008020",
            "code": "\nvoid initializeIfNeeded_08008020(undefined4 initializeParam)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    initializeData(initializeParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008020": "initialize_if_needed_08008020",
                "param_1": "initializeParam",
                "iVar1": "result",
                "subtract_four_08007f78": "subtractFour",
                "initialize_data_080049e0": "initializeData"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008078": {
            "entrypoint": "0x08008078",
            "current_name": "initialize_uart_pins_08008078",
            "code": "\n\n\nvoid initializeUARTPins_08008078(int *pins)\n\n{\n  int uartPin1;\n  int uartPin2;\n  undefined4 uartSetting1;\n  uint uartSetting2;\n  uint pinMask;\n  uint pinConfig;\n  uint pinMode;\n  undefined4 data;\n  \n  if (pins != (int *)0x0) {\n    uartPin1 = check_and_find_value_08007320((int)*(char *)(pins + 0x16),&DAT_0800a864);\n    uartPin2 = check_and_find_value_08007320((int)*(char *)((int)pins + 0x59),&DAT_0800a81c);\n    if ((uartPin2 == 0) || (uartPin1 == 0)) {\n      process_and_initialize_data_080098d8(\"ERROR: at least one UART pin has no peripheral\\n\",uartPin2);\n    }\n    else {\n      uartPin1 = compareUARTPins(uartPin1);\n      *pins = uartPin1;\n      if (uartPin1 == 0) {\n        process_and_initialize_data_080098d8(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPin1 == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(pins + 0x11) = 0;\n          *(undefined *)((int)pins + 0x5a) = 0x25;\n        }\n        else if (uartPin1 == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(pins + 0x11) = 1;\n          *(undefined *)((int)pins + 0x5a) = 0x26;\n        }\n        else if (uartPin1 == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(pins + 0x11) = 2;\n          *(undefined *)((int)pins + 0x5a) = 0x27;\n        }\n        uartSetting1 = set_flags_and_return_address_08006bb8((uint)((int)*(char *)((int)pins + 0x59) << 0x18) >> 0x1c);\n        uartSetting2 = getValueIndex((int)*(char *)((int)pins + 0x59),&DAT_0800a81c);\n        pinMask = 1 << (*(byte *)((int)pins + 0x59) & 0xf) & 0xffff;\n        pinConfig = (uartSetting2 >> 3 & 1) << 4 | uartSetting2 & 7;\n        pinMode = (uartSetting2 << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((uartSetting2 << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        data = 3;\n        updateRegisterSettings(uartSetting1,&pinMask);\n        uartSetting1 = set_flags_and_return_address_08006bb8((uint)((int)*(char *)(pins + 0x16) << 0x18) >> 0x1c);\n        uartSetting2 = getValueIndex((int)*(char *)(pins + 0x16),&DAT_0800a864);\n        pinMask = 1 << (*(byte *)(pins + 0x16) & 0xf) & 0xffff;\n        pinConfig = (uartSetting2 >> 3 & 1) << 4 | uartSetting2 & 7;\n        pinMode = (uartSetting2 << 0x1a) >> 0x1e;\n        updateRegisterSettings(uartSetting1,&pinMask);\n        (&DAT_200006c0)[*(byte *)(pins + 0x11)] = pins + 1;\n        pins[1] = *pins;\n        pins[2] = pins[0x12];\n        pins[3] = pins[0x13];\n        pins[4] = pins[0x14];\n        pins[5] = pins[0x15];\n        pins[6] = 0xc;\n        pins[7] = 0;\n        pins[8] = 0;\n        initializeData(pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008078": "initialize_uart_pins_08008078",
                "param_1": "pins",
                "iVar1": "uartPin1",
                "iVar2": "uartPin2",
                "uVar3": "uartSetting1",
                "uVar4": "uartSetting2",
                "local_20": "pinMask",
                "local_1c": "pinConfig",
                "local_18": "pinMode",
                "local_14": "data",
                "compare_and_return_nonzero_080073ae": "compareUARTPins",
                "get_value_index_08007376": "getValueIndex",
                "update_register_settings_080040e8": "updateRegisterSettings",
                "initialize_data_0800674e": "initializeData"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_080073ae",
                "FUN_0800674e",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080084b0": {
            "entrypoint": "0x080084b0",
            "current_name": "initialize_system_080084b0",
            "code": "\nvoid initialize_system_080084b0(void)\n\n{\n  int check_result;\n  undefined4 found_value;\n  \n  check_result = check_and_find_value_08007320(2,&DAT_0800a864);\n  if (check_result != 0) {\n    found_value = check_and_find_value_08007320(2,&DAT_0800a864);\n    DAT_20000075 = get_found_value_0800734a(found_value,&DAT_0800a81c);\n    DAT_20000074 = 2;\n    DAT_20000064 = 0x2580;\n    DAT_20000070 = 0;\n    DAT_20000068 = 0;\n    DAT_2000006c = 0;\n    initialize_uart_pins(&DAT_2000001c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080084b0": "initialize_system_080084b0",
                "iVar1": "check_result",
                "uVar2": "found_value",
                "initialize_uart_pins_08008078": "initialize_uart_pins"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08007320",
                "FUN_08008078"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008500": {
            "entrypoint": "0x08008500",
            "current_name": "process_and_check_data_08008500",
            "code": "\nuint process_and_check_data_08008500(undefined4 data_ptr,uint value)\n\n{\n  int data_value;\n  int check_result;\n  uint index;\n  \n  data_value = get_data_value_08003760();\n  check_result = check_and_find_value_08007320(2,&DAT_0800a864);\n  if (check_result == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_200006c0)[index] == 0 ||\n       (check_result = check_and_find_value_08007320(2,&DAT_0800a864), *(int *)(&DAT_200006c0)[index] != check_result))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_20000060) && (initialize_system(), 4 < DAT_20000060)) {\n      return 0;\n    }\n    index = (uint)DAT_20000060;\n  }\n  do {\n    check_result = process_input((&DAT_200006c0)[index],data_ptr,value & 0xffff,1000);\n    if (check_result == 0) {\n      return value;\n    }\n    check_result = get_data_value_08003760();\n  } while ((uint)(check_result - data_value) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008500": "process_and_check_data_08008500",
                "param_1": "data_ptr",
                "param_2": "value",
                "iVar1": "data_value",
                "iVar2": "check_result",
                "uVar3": "index",
                "initialize_system_080084b0": "initialize_system",
                "process_input_080067ac": "process_input"
            },
            "calling": [
                "FUN_0800885c"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080084b0",
                "FUN_080067ac",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085b8": {
            "entrypoint": "0x080085b8",
            "current_name": "check_if_bytes_match_pattern_080085b8",
            "code": "\nbool checkIfBytesMatchPattern_080085b8(int input)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combineBytes((&DAT_200006c0)[*(byte *)(input + 0x44)]);\n  return (combinedBytes & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_080085b8": "check_if_bytes_match_pattern_080085b8",
                "param_1": "input",
                "uVar1": "combinedBytes",
                "combine_bytes_08006b1c": "combineBytes"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085dc": {
            "entrypoint": "0x080085dc",
            "current_name": "is_desirable_value_080085dc",
            "code": "\nbool isDesirableValue_080085dc(int inputValue)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combine_bytes_08006b1c((&DAT_200006c0)[*(byte *)(inputValue + 0x44)]);\n  return (combinedBytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080085dc": "is_desirable_value_080085dc",
                "param_1": "inputValue",
                "uVar1": "combinedBytes"
            },
            "calling": [],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008600": {
            "entrypoint": "0x08008600",
            "current_name": "copy_matching_bytes_08008600",
            "code": "\nundefined4 copyMatchingBytes_08008600(int sourceAddress,undefined *destinationAddress,undefined4 size,undefined4 param_4)\n\n{\n  int matchResult;\n  \n  if (sourceAddress == 0) {\n    return 0xffffffff;\n  }\n  matchResult = check_if_bytes_match_pattern_080085b8();\n  if (matchResult == 0) {\n    *destinationAddress = *(undefined *)(sourceAddress + 0x45);\n    FUNC_080068d6((&DAT_200006c0)[*(byte *)(sourceAddress + 0x44)],sourceAddress + 0x45,1,&DAT_200006c0,param_4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008600": "copy_matching_bytes_08008600",
                "param_1": "sourceAddress",
                "param_2": "destinationAddress",
                "param_3": "size",
                "iVar1": "matchResult"
            },
            "calling": [
                "FUN_08008b66"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800863c": {
            "entrypoint": "0x0800863c",
            "current_name": "update_memory_location_0800863c",
            "code": "\nvoid updateMemoryLocation_0800863c(int inputParam,undefined4 valueParam,undefined4 unusedParam,undefined4 sizeParam)\n\n{\n  int patternMatch;\n  uint byteOffset;\n  \n  if (inputParam != 0) {\n    patternMatch = check_if_bytes_match_pattern_080085b8();\n    if (patternMatch == 0) {\n      byteOffset = (uint)*(byte *)(inputParam + 0x44);\n      *(undefined4 *)(&DAT_20000670 + byteOffset * 4) = valueParam;\n      *(int *)(&DAT_20000684 + byteOffset * 4) = inputParam;\n      updateMemoryLocation_0800863c((int)*(char *)(inputParam + 0x5a),0,1,byteOffset,sizeParam);\n      setBitValue((int)*(char *)(inputParam + 0x5a));\n      FUNC_080068d6((&DAT_200006c0)[*(byte *)(inputParam + 0x44)],inputParam + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800863c": "update_memory_location_0800863c",
                "param_1": "inputParam",
                "param_2": "valueParam",
                "param_3": "unusedParam",
                "param_4": "sizeParam",
                "iVar1": "patternMatch",
                "uVar2": "byteOffset",
                "update_memory_location_08003f30": "updateMemoryLocation",
                "set_bit_value_08003f94": "setBitValue"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6",
                "FUN_08003f94",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008694": {
            "entrypoint": "0x08008694",
            "current_name": "update_and_validate_data_08008694",
            "code": "\nvoid updateAndValidateData_08008694(int dataAddress,undefined4 newValue)\n\n{\n  byte byteValue;\n  \n  if (dataAddress != 0) {\n    byteValue = *(byte *)(dataAddress + 0x44);\n    *(undefined4 *)(&DAT_20000698 + (uint)byteValue * 4) = newValue;\n    *(int *)(&DAT_200006ac + (uint)byteValue * 4) = dataAddress;\n    updateMemoryLocation((int)*(char *)(dataAddress + 0x5a),0,2);\n    setBitValue((int)*(char *)(dataAddress + 0x5a));\n    validateInput((&DAT_200006c0)[*(byte *)(dataAddress + 0x44)],\n                 *(int *)(dataAddress + 100) + (uint)*(ushort *)(dataAddress + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008694": "update_and_validate_data_08008694",
                "param_1": "dataAddress",
                "param_2": "newValue",
                "bVar1": "byteValue",
                "update_memory_location_08003f30": "updateMemoryLocation",
                "set_bit_value_08003f94": "setBitValue",
                "validate_input_0800688e": "validateInput"
            },
            "calling": [],
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080086e8": {
            "entrypoint": "0x080086e8",
            "current_name": "find_index_080086e8",
            "code": "\nuint find_index_080086e8(int number)\n\n{\n  uint index;\n  \n  if (number == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (number == (&DAT_200006c0)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080086e8": "find_index_080086e8",
                "param_1": "number",
                "uVar1": "index"
            },
            "calling": [
                "FUN_0800870c",
                "FUN_08008730"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800870c": {
            "entrypoint": "0x0800870c",
            "current_name": "execute_function_based_on_index_0800870c",
            "code": "\nvoid executeFunctionBasedOnIndex_0800870c(void)\n\n{\n  uint index;\n  \n  index = findIndex();\n  if (index < 5) {\n    (**(code **)(&DAT_20000670 + index * 4))(*(undefined4 *)(&DAT_20000684 + index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800870c": "execute_function_based_on_index_0800870c",
                "uVar1": "index",
                "find_index_080086e8": "findIndex"
            },
            "calling": [
                "FUN_0800694c"
            ],
            "called": [
                "FUN_080086e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008730": {
            "entrypoint": "0x08008730",
            "current_name": "validate_and_process_input_08008730",
            "code": "\nvoid validate_and_process_input_08008730(void)\n\n{\n  uint index;\n  int result;\n  int data;\n  \n  index = find_index();\n  data = *(int *)(&DAT_200006ac + index * 4);\n  if ((index < 5) && (result = (**(code **)(&DAT_20000698 + index * 4))(data), result != -1)) {\n    validate_input((&DAT_200006c0)[*(byte *)(data + 0x44)],\n                 *(int *)(data + 100) + (uint)*(ushort *)(data + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008730": "validate_and_process_input_08008730",
                "uVar1": "index",
                "iVar2": "result",
                "iVar3": "data",
                "find_index_080086e8": "find_index",
                "validate_input_0800688e": "validate_input"
            },
            "calling": [
                "FUN_08006932"
            ],
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800877c": {
            "entrypoint": "0x0800877c",
            "current_name": "FUNC_0800877c",
            "code": "\nvoid FUNC_0800877c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800877c": "FUNC_0800877c"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008804": {
            "entrypoint": "0x08008804",
            "current_name": "get_memory_08008804",
            "code": "\nundefined * getMemory_08008804(int size)\n\n{\n  undefined *memoryPointer;\n  \n  if (DAT_200006d4 == (undefined *)0x0) {\n    DAT_200006d4 = &DAT_20000a3c;\n  }\n  memoryPointer = DAT_200006d4;\n  if (DAT_200006d4 + size <= &stack0x00000000) {\n    DAT_200006d4 = DAT_200006d4 + size;\n    return memoryPointer;\n  }\n  DAT_20000a38 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008804": "get_memory_08008804",
                "param_1": "size",
                "puVar1": "memoryPointer"
            },
            "calling": [
                "FUN_08009918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008840": {
            "entrypoint": "0x08008840",
            "current_name": "get_default_value_08008840",
            "code": "\nuint32_t get_default_value_08008840(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008840": "get_default_value_08008840",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008846": {
            "entrypoint": "0x08008846",
            "current_name": "initialize_memory_08008846",
            "code": "\nundefined4 initializeMemory_08008846(undefined4 param1,int param2)\n\n{\n  *(undefined4 *)(param2 + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008846": "initialize_memory_08008846",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_0800a0ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008850": {
            "entrypoint": "0x08008850",
            "current_name": "initialize_application_08008850",
            "code": "\nundefined4 initializeApplication_08008850(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008850": "initialize_application_08008850"
            },
            "calling": [
                "FUN_0800a110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008854": {
            "entrypoint": "0x08008854",
            "current_name": "initialize_app_08008854",
            "code": "\nundefined4 initializeApp_08008854(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008854": "initialize_app_08008854"
            },
            "calling": [
                "FUN_0800a130"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008858": {
            "entrypoint": "0x08008858",
            "current_name": "initialize_08008858",
            "code": "\nundefined4 initialize_08008858(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008858": "initialize_08008858"
            },
            "calling": [
                "FUN_0800a168"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800885c": {
            "entrypoint": "0x0800885c",
            "current_name": "process_data_0800885c",
            "code": "\nvoid process_data_0800885c(undefined4 input_param,undefined4 data_param_1,undefined4 data_param_2,undefined4 data_param_3)\n\n{\n  process_and_check_data_08008500(data_param_1,data_param_2,data_param_2,data_param_3,data_param_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800885c": "process_data_0800885c",
                "param_1": "input_param",
                "param_2": "data_param_1",
                "param_3": "data_param_2",
                "param_4": "data_param_3"
            },
            "calling": [
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008868": {
            "entrypoint": "0x08008868",
            "current_name": "do_nothing_loop_08008868",
            "code": "\nvoid doNothingLoop_08008868(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008868": "do_nothing_loop_08008868"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "called": [
                "FUN_08008868"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800886c": {
            "entrypoint": "0x0800886c",
            "current_name": "initialize_data_0800886c",
            "code": "\nundefined4 initializeData_0800886c(void)\n\n{\n  DAT_20000a38 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800886c": "initialize_data_0800886c"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800887c": {
            "entrypoint": "0x0800887c",
            "current_name": "check_success_0800887c",
            "code": "\nint check_success_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800887c": "check_success_0800887c",
                "undefined4": "int"
            },
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008880": {
            "entrypoint": "0x08008880",
            "current_name": "process_data_08008880",
            "code": "\nuint process_data_08008880(uint input_value)\n\n{\n  bool is_valid_range;\n  char processed_data;\n  uint updated_data;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_valid_range = true;\n    }\n    else {\n      is_valid_range = false;\n    }\n  }\n  else {\n    is_valid_range = input_value < 0x3c;\n  }\n  if (is_valid_range) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    processed_data = (&DAT_0800a908)[input_value];\n  }\n  else {\n    processed_data = -1;\n  }\n  if (processed_data == -1) {\n    updated_data = 0;\n  }\n  else {\n    updated_data = process_and_update_data_08006d80();\n    if (DAT_20000088 != 0xc) {\n      if (DAT_20000088 < 0xc) {\n        return updated_data >> (0xc - DAT_20000088 & 0xff);\n      }\n      return updated_data << (DAT_20000088 - 0xc & 0xff);\n    }\n  }\n  return updated_data;\n}\n\n",
            "renaming": {
                "FUN_08008880": "process_data_08008880",
                "param_1": "input_value",
                "bVar1": "is_valid_range",
                "cVar2": "processed_data",
                "uVar3": "updated_data"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08006d80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088e0": {
            "entrypoint": "0x080088e0",
            "current_name": "process_and_update_data_080088e0",
            "code": "\nvoid process_and_update_data_080088e0(uint input_index,uint data)\n\n{\n  int match_result;\n  int data_index;\n  \n  if (input_index < 0x3c) {\n    data_index = (int)(char)(&DAT_0800a908)[input_index];\n  }\n  else {\n    data_index = -1;\n  }\n  if (data_index != -1) {\n    match_result = check_match_0800738a(data_index,&DAT_0800a6cc);\n    if (match_result == 0) {\n      initialize_device(input_index,1);\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          data = data << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          data = data >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      if (data < 0x80) {\n        decode_and_update_parameters(input_index,0);\n      }\n      else {\n        decode_and_update_parameters(input_index,1);\n      }\n    }\n    else {\n      match_result = extract_bit(data_index,&DAT_200006d8);\n      if (match_result == 0) {\n        update_bitwise_value(data_index,&DAT_200006d8);\n      }\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          data = data << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          data = data >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      process_data(data_index,0x3e418,0xff,data,match_result == 0);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088e0": "process_and_update_data_080088e0",
                "param_1": "input_index",
                "param_2": "data",
                "iVar1": "match_result",
                "iVar2": "data_index",
                "initialize_device_08008990": "initialize_device",
                "decode_and_update_param_08008a24": "decode_and_update_parameters",
                "extract_bit_08006b28": "extract_bit",
                "update_bitwise_value_08006b3e": "update_bitwise_value",
                "process_data_08007118": "process_data"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08006b3e",
                "FUN_08007118",
                "FUN_08006b28",
                "FUN_08008a24",
                "FUN_0800738a",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008990": {
            "entrypoint": "0x08008990",
            "current_name": "initialize_device_08008990",
            "code": "\nvoid initialize_device_08008990(uint index,undefined4 mode,undefined4 parameter,undefined1 *array)\n\n{\n  int result;\n  undefined1 *base_address;\n  int value;\n  \n  if (index < 0x3c) {\n    value = (int)(char)(&DAT_0800a908)[index];\n    base_address = &DAT_0800a908;\n  }\n  else {\n    value = -1;\n    base_address = array;\n  }\n  if (value != -1) {\n    result = extract_bit(value,&DAT_200006d8,parameter,base_address,array);\n    if (result != 0) {\n      result = check_match(value,&DAT_0800a6cc);\n      if (result != 0) {\n        update_register_value(value);\n      }\n      clear_bit_in_array(value,&DAT_200006d8);\n    }\n    switch(mode) {\n    case 0:\n      initialize_device_08008990(value,0);\n      break;\n    case 1:\n      initialize_device_08008990(value,1,0);\n      break;\n    case 2:\n      initialize_device_08008990(value,0,1);\n      break;\n    case 3:\n      initialize_device_08008990(value,0,2);\n    }\n    update_bitwise_value(value,&DAT_200006ec);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008990": "initialize_device_08008990",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "parameter",
                "param_4": "array",
                "iVar1": "result",
                "puVar2": "base_address",
                "iVar3": "value",
                "extract_bit_08006b28": "extract_bit",
                "check_match_0800738a": "check_match",
                "update_register_value_080071e4": "update_register_value",
                "clear_bit_in_array_08006b5c": "clear_bit_in_array",
                "initialize_device_08007258": "initialize_device",
                "update_bitwise_value_08006b3e": "update_bitwise_value"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_080025ac",
                "FUN_08003002"
            ],
            "called": [
                "FUN_08007258",
                "FUN_080071e4",
                "FUN_08006b5c",
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a24": {
            "entrypoint": "0x08008a24",
            "current_name": "decode_and_update_param_08008a24",
            "code": "\nvoid decode_and_update_param_08008a24(uint input_value,undefined4 param_status,undefined4 address,undefined1 *data_array)\n\n{\n  int bit_extraction_result;\n  undefined4 mapped_address;\n  undefined1 *ptr_data;\n  uint data_value;\n  \n  if (input_value < 0x3c) {\n    data_value = (uint)(char)(&DAT_0800a908)[input_value];\n    ptr_data = &DAT_0800a908;\n  }\n  else {\n    data_value = 0xffffffff;\n    ptr_data = data_array;\n  }\n  if ((data_value != 0xffffffff) &&\n     (bit_extraction_result = extract_bit_08006b28(data_value,&DAT_200006ec,address,ptr_data,data_array), bit_extraction_result != 0)) {\n    mapped_address = map_param_to_address_08006b7c((data_value << 0x18) >> 0x1c);\n    update_param_status_080072d8(mapped_address,1 << (data_value & 0xf) & 0xffff,param_status);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008a24": "decode_and_update_param_08008a24",
                "param_1": "input_value",
                "param_2": "param_status",
                "param_3": "address",
                "param_4": "data_array",
                "iVar1": "bit_extraction_result",
                "uVar2": "mapped_address",
                "puVar3": "ptr_data",
                "uVar4": "data_value"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_08002fca"
            ],
            "called": [
                "FUN_08006b7c",
                "FUN_080072d8",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "check_bit_validity_08008a6c",
            "code": "\nchar checkBitValidity_08008a6c(uint bitIndex)\n\n{\n  char isValid;\n  int bitExtracted;\n  undefined4 mappedAddress;\n  uint bitValue;\n  \n  if (bitIndex < 0x3c) {\n    bitValue = (uint)(char)(&DAT_0800a908)[bitIndex];\n  }\n  else {\n    bitValue = 0xffffffff;\n  }\n  if (bitValue == 0xffffffff) {\n    isValid = '\\0';\n  }\n  else {\n    bitExtracted = extract_bit_08006b28(bitValue,&DAT_200006ec);\n    if (bitExtracted == 0) {\n      isValid = '\\0';\n    }\n    else {\n      mappedAddress = map_param_to_address_08006b7c((bitValue << 0x18) >> 0x1c);\n      isValid = verify_bit_080072f0(mappedAddress,1 << (bitValue & 0xf) & 0xffff);\n    }\n  }\n  if (isValid != '\\0') {\n    isValid = '\\x01';\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "check_bit_validity_08008a6c",
                "param_1": "bitIndex",
                "cVar1": "isValid",
                "iVar2": "bitExtracted",
                "uVar3": "mappedAddress",
                "uVar4": "bitValue"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_080072f0",
                "FUN_08006b7c",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008abc": {
            "entrypoint": "0x08008abc",
            "current_name": "initialize_data_08008abc",
            "code": "\nvoid initialize_data_08008abc(void)\n\n{\n  initialize_data_08008abc_0800723c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008abc": "initialize_data_08008abc"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800723c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac4": {
            "entrypoint": "0x08008ac4",
            "current_name": "FUNC_08008ac4",
            "code": "\nvoid FUNC_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008afa": {
            "entrypoint": "0x08008afa",
            "current_name": "calculate_result_08008afa",
            "code": "\nushort calculateResult_08008afa(int inputValue)\n\n{\n  return (*(short *)(inputValue + 0x134) + 0x40) - *(short *)(inputValue + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08008afa": "calculate_result_08008afa",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08008bf4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b66": {
            "entrypoint": "0x08008b66",
            "current_name": "copy_and_increment_08008b66",
            "code": "\nvoid copyAndIncrement_08008b66(int input)\n\n{\n  int result;\n  ushort nextIndex;\n  undefined currentByte;\n  \n  result = copy_matching_bytes_08008600(input,&currentByte);\n  if ((result == 0) &&\n     (nextIndex = *(short *)(input + 0x60) + 1U & 0x3f, nextIndex != *(ushort *)(input + 0x62))) {\n    *(undefined *)(*(int *)(input + 0x5c) + (uint)*(ushort *)(input + 0x60)) = currentByte;\n    *(ushort *)(input + 0x60) = nextIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b66": "copy_and_increment_08008b66",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "nextIndex",
                "local_9": "currentByte"
            },
            "calling": [],
            "called": [
                "FUN_08008600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf4": {
            "entrypoint": "0x08008bf4",
            "current_name": "FUNC_08008bf4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008afa"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008c20": {
            "entrypoint": "0x08008c20",
            "current_name": "initialize_data_08008c20",
            "code": "\nvoid initializeData_08008c20(int dataPointer)\n\n{\n  *(int *)(dataPointer + 0x130) = dataPointer + 0x11;\n  *(undefined2 *)(dataPointer + 0x134) = 0;\n  *(undefined2 *)(dataPointer + 0x136) = 0;\n  *(int *)(dataPointer + 0x138) = dataPointer + 0x51;\n  *(undefined2 *)(dataPointer + 0x13c) = 0;\n  *(undefined2 *)(dataPointer + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c20": "initialize_data_08008c20",
                "param_1": "dataPointer"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c44": {
            "entrypoint": "0x08008c44",
            "current_name": "configure_hardware_serial_08008c44",
            "code": "\nvoid configureHardwareSerial_08008c44(int serialInstance,undefined4 baudrate,byte configOptions)\n\n{\n  uint numDataBits;\n  byte configBits;\n  int uartConfigValue;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialInstance + 0x11c) = baudrate;\n  *(byte *)(serialInstance + 0x140) = configOptions;\n  configBits = configOptions & 7;\n  if (configBits == 4) {\n    uartConfigValue = 7;\n  }\n  else if (configBits == 6) {\n    uartConfigValue = 8;\n  }\n  else if (configBits == 2) {\n    uartConfigValue = 6;\n  }\n  else {\n    uartConfigValue = 0;\n  }\n  if ((configOptions & 0x30) == 0x30) {\n    *(undefined4 *)(serialInstance + 0x128) = 0x600;\n    uartConfigValue = uartConfigValue + 1;\n  }\n  else if ((configOptions & 0x20) == 0) {\n    *(undefined4 *)(serialInstance + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialInstance + 0x128) = 0x400;\n    uartConfigValue = uartConfigValue + 1;\n  }\n  if ((configOptions & 8) == 0) {\n    *(undefined4 *)(serialInstance + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialInstance + 0x124) = 0x2000;\n  }\n  if (uartConfigValue == 8) {\n    *(undefined4 *)(serialInstance + 0x120) = 0;\n  }\n  else if (uartConfigValue == 9) {\n    *(undefined4 *)(serialInstance + 0x120) = 0x1000;\n  }\n  else {\n    uartConfigValue = 0;\n  }\n  if (uartConfigValue != 0) {\n    initialize_uart_pins_08008078(serialInstance + 0xd4);\n    update_memory_location_0800863c(serialInstance + 0xd4,0x8008b67);\n    return;\n  }\n  jumpTable = (code *)0x8008cee;\n  assertion_failed_080090cc(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  if (numDataBits < 0x3c) {\n    uRam0000012d = (&DAT_0800a908)[numDataBits];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0,numDataBits,&stack0x00000148);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c44": "configure_hardware_serial_08008c44",
                "param_1": "serialInstance",
                "param_2": "baudrate",
                "param_3": "configOptions",
                "extraout_r1": "numDataBits",
                "bVar1": "configBits",
                "iVar2": "uartConfigValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_080090cc",
                "FUN_08008078",
                "FUN_0800863c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d00": {
            "entrypoint": "0x08008d00",
            "current_name": "set_field_value_08008d00",
            "code": "\nvoid setFieldValue_08008d00(int objectAddress,uint fieldIndex)\n\n{\n  undefined fieldValue;\n  code *jumpTable;\n  \n  if (fieldIndex < 0x3c) {\n    fieldValue = (&DAT_0800a908)[fieldIndex];\n  }\n  else {\n    fieldValue = 0xff;\n  }\n  *(undefined *)(objectAddress + 0x12d) = fieldValue;\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d00": "set_field_value_08008d00",
                "param_1": "objectAddress",
                "param_2": "fieldIndex",
                "uVar1": "fieldValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d18": {
            "entrypoint": "0x08008d18",
            "current_name": "set_byte_in_memory_08008d18",
            "code": "\nvoid setByteInMemory_08008d18(int memoryAddress,uint index)\n\n{\n  undefined value;\n  \n  if (index < 0x3c) {\n    value = (&DAT_0800a908)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(memoryAddress + 300) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d18": "set_byte_in_memory_08008d18",
                "param_1": "memoryAddress",
                "param_2": "index",
                "uVar1": "value"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d30": {
            "entrypoint": "0x08008d30",
            "current_name": "initialize_parameters_08008d30",
            "code": "\nundefined4 *\ninitialize_parameters_08008d30(undefined4 *output_array,undefined4 key,undefined4 value1,undefined4 value2)\n\n{\n  undefined found_value;\n  \n  output_array[1] = 0;\n  output_array[2] = 1000;\n  *output_array = &PTR_LAB_08008ba4_1_0800aab8;\n  if (output_array == (undefined4 *)&DAT_20000700) {\n    set_field_value(&DAT_20000700,0,value1,&DAT_20000700,value2);\n    set_byte_in_memory(&DAT_20000700,1);\n  }\n  else {\n    found_value = get_found_value(key,&DAT_0800a81c);\n    *(undefined *)((int)output_array + 0x12d) = found_value;\n    found_value = get_found_value(key,&DAT_0800a864);\n    *(undefined *)(output_array + 0x4b) = found_value;\n  }\n  initialize_data(output_array);\n  return output_array;\n}\n\n",
            "renaming": {
                "FUN_08008d30": "initialize_parameters_08008d30",
                "param_1": "output_array",
                "param_2": "key",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "found_value",
                "set_field_value_08008d00": "set_field_value",
                "set_byte_in_memory_08008d18": "set_byte_in_memory",
                "get_found_value_0800734a": "get_found_value",
                "initialize_data_08008c20": "initialize_data"
            },
            "calling": [
                "FUN_08008d8c"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08008c20",
                "FUN_08008d18",
                "FUN_08008d00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d8c": {
            "entrypoint": "0x08008d8c",
            "current_name": "initialize_if_param1_is_1_08008d8c",
            "code": "\nvoid initialize_if_param1_is_1_08008d8c(int is_param1,int param2_value,undefined4 param3_value,undefined4 param4_value)\n\n{\n  if (is_param1 != 1) {\n    return;\n  }\n  if (param2_value == 0xffff) {\n    initialize_parameters_08008d30(&DAT_20000700,0x40004400,param3_value,0xffff,param4_value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d8c": "initialize_if_param1_is_1_08008d8c",
                "param_1": "is_param1",
                "param_2": "param2_value",
                "param_3": "param3_value",
                "param_4": "param4_value"
            },
            "calling": [],
            "called": [
                "FUN_08008d30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008df8": {
            "entrypoint": "0x08008df8",
            "current_name": "set_data_08008df8",
            "code": "\nvoid set_data_08008df8(undefined4 *output,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *output = &DAT_0800ab0c;\n  *(undefined *)(output + 1) = value1;\n  *(undefined *)((int)output + 5) = value2;\n  *(undefined *)((int)output + 6) = value3;\n  *(undefined *)((int)output + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008df8": "set_data_08008df8",
                "param_1": "output",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08008e14"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e14": {
            "entrypoint": "0x08008e14",
            "current_name": "initialize_data_if_condition_met_08008e14",
            "code": "\nvoid initialize_data_if_condition_met_08008e14(int flag_1,int flag_2)\n\n{\n  if ((flag_1 == 1) && (flag_2 == 0xffff)) {\n    set_data_08008df8(&DAT_20000844,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e14": "initialize_data_if_condition_met_08008e14",
                "param_1": "flag_1",
                "param_2": "flag_2"
            },
            "calling": [],
            "called": [
                "FUN_08008df8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ef4": {
            "entrypoint": "0x08008ef4",
            "current_name": "calculate_interpolated_value_08008ef4",
            "code": "\nint calculate_interpolated_value_08008ef4(int start_value,int start_parameter,int end_parameter,int start_result,int end_result)\n\n{\n  return (uint)((end_result - start_result) * (start_value - start_parameter)) / (uint)(end_parameter - start_parameter) + start_result;\n}\n\n",
            "renaming": {
                "FUN_08008ef4": "calculate_interpolated_value_08008ef4",
                "param_1": "start_value",
                "param_2": "start_parameter",
                "param_3": "end_parameter",
                "param_4": "start_result",
                "param_5": "end_result"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0c": {
            "entrypoint": "0x08008f0c",
            "current_name": "FUNC_08008f0c",
            "code": "\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0e": {
            "entrypoint": "0x08008f0e",
            "current_name": "initialize_devices_08008f0e",
            "code": "\nvoid initializeDevices_08008f0e(void)\n\n{\n  updateValue(3);\n  initializeAndUpdateAllDevices();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0e": "initialize_devices_08008f0e",
                "update_value_08003f0c": "updateValue",
                "initialize_and_update_all_devices_080036a2": "initializeAndUpdateAllDevices"
            },
            "calling": [
                "FUN_08009148"
            ],
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f1c": {
            "entrypoint": "0x08008f1c",
            "current_name": "continuous_processing_08008f1c",
            "code": "\nvoid continuousProcessing_08008f1c(void)\n\n{\n  FUNC_08008f0c();\n  initializeGateway();\n  do {\n    processAndCompressData();\n    FUNC_08008bf4();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008f1c": "continuous_processing_08008f1c",
                "initialize_gateway_08001b48": "initializeGateway",
                "process_and_compress_data_080022f8": "processAndCompressData"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_08008bf4",
                "FUN_080022f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f3c": {
            "entrypoint": "0x08008f3c",
            "current_name": "count_set_bits_08008f3c",
            "code": "\nchar countSetBits_08008f3c(uint input)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; input != 1; input = input >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08008f3c": "count_set_bits_08008f3c",
                "param_1": "input",
                "cVar1": "bitCount"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f78": {
            "entrypoint": "0x08008f78",
            "current_name": "initialize_data_08008f78",
            "code": "\nvoid initializeData_08008f78(int status,int value,undefined4 param_3,undefined4 param_4)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_2000084c = 6;\n    DAT_20000858 = 0;\n    DAT_20000860 = 7;\n    DAT_2000086c = 0;\n    DAT_20000874 = 8;\n    DAT_20000880 = 0;\n    DAT_20000888 = 9;\n    DAT_20000894 = 0;\n    DAT_2000089c = 10;\n    DAT_200008a8 = 0;\n    DAT_200008b0 = 0x17;\n    DAT_200008bc = 0;\n    DAT_200008c4 = 0x17;\n    DAT_200008d0 = 0;\n    DAT_200008d8 = 0x17;\n    DAT_200008e4 = 0;\n    DAT_200008ec = 0x17;\n    DAT_200008f8 = 0;\n    DAT_20000900 = 0x17;\n    DAT_2000090c = 0;\n    DAT_20000914 = 0x28;\n    DAT_20000920 = 0;\n    DAT_20000928 = 0x28;\n    DAT_20000934 = 0;\n    DAT_2000093c = 0x28;\n    DAT_20000948 = 0;\n    DAT_20000950 = 0x28;\n    DAT_2000095c = 0;\n    DAT_20000964 = 0x28;\n    DAT_20000970 = 0;\n    DAT_20000978 = 0x28;\n    DAT_20000984 = 0;\n    shift_left64_bits_080090c2(0,&LAB_08008f50_1,&DAT_20000000,&DAT_2000084c,param_4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f78": "initialize_data_08008f78",
                "param_1": "status",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "FUN_080090c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009084": {
            "entrypoint": "0x08009084",
            "current_name": "process_data_08009084",
            "code": "\nvoid processData_08009084(int data)\n\n{\n  int bitCount;\n  \n  if (*(int *)(data + 8) != 0) {\n    (**(code **)(data + 0xc))();\n    return;\n  }\n  initialize_variables_0800a18c();\n  bitCount = count_set_bits_08008f3c();\n  if ((&DAT_20000858)[bitCount * 5] != 0) {\n    processData_08009084();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009084": "process_data_08009084",
                "param_1": "data",
                "iVar1": "bitCount"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [
                "FUN_0800a18c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009094": {
            "entrypoint": "0x08009094",
            "current_name": "check_and_process_data_08009094",
            "code": "\nvoid checkAndProcessData_08009094(void)\n\n{\n  int bitCount;\n  \n  bitCount = countSetBits();\n  if ((&DAT_20000858)[bitCount * 5] != 0) {\n    processData();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009094": "check_and_process_data_08009094",
                "iVar1": "bitCount",
                "count_set_bits_08008f3c": "countSetBits",
                "process_data_08009084": "processData"
            },
            "calling": [
                "FUN_080042f0"
            ],
            "called": [
                "FUN_08008f3c",
                "FUN_08009084"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c2": {
            "entrypoint": "0x080090c2",
            "current_name": "shift_left64_bits_080090c2",
            "code": "\nvoid shiftLeft64Bits_080090c2(undefined4 value,undefined4 shiftAmount)\n\n{\n  shift_unsigned_int64_left_08009108(shiftAmount,value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090c2": "shift_left64_bits_080090c2",
                "param_1": "value",
                "param_2": "shiftAmount"
            },
            "calling": [
                "FUN_08008f78"
            ],
            "called": [
                "FUN_08009108"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090cc": {
            "entrypoint": "0x080090cc",
            "current_name": "assertion_failed_080090cc",
            "code": "\nvoid assertionFailed_080090cc(undefined4 file,undefined4 line,char *assertionMessage,undefined4 function)\n\n{\n  undefined4 dataPointer;\n  char *suffix;\n  undefined8 result;\n  undefined4 functionParam;\n  \n  dataPointer = *(undefined4 *)(DAT_20000090 + 0xc);\n  functionParam = function;\n  if (assertionMessage == (char *)0x0) goto LAB_080090f0;\n  suffix = \", function: \";\n  do {\n    processAndStoreData(dataPointer,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function,file,line\n                 ,suffix,assertionMessage,functionParam);\n    result = executeFunction();\n    line = (undefined4)((ulonglong)result >> 0x20);\n    dataPointer = (undefined4)result;\nLAB_080090f0:\n    assertionMessage = \"\";\n    suffix = assertionMessage;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080090cc": "assertion_failed_080090cc",
                "param_1": "file",
                "param_2": "line",
                "param_3": "assertionMessage",
                "param_4": "function",
                "uVar1": "dataPointer",
                "pcVar2": "suffix",
                "uVar3": "result",
                "uVar4": "functionParam",
                "process_and_store_data_08009124": "processAndStoreData",
                "execute_function_08009b5c": "executeFunction"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009108": {
            "entrypoint": "0x08009108",
            "current_name": "shift_unsigned_int64_left_08009108",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong shiftUnsignedInt64Left_08009108(undefined4 inputValue,uint shiftAmount)\n\n{\n  return (ulonglong)shiftAmount << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08009108": "shift_unsigned_int64_left_08009108",
                "param_1": "inputValue",
                "param_2": "shiftAmount"
            },
            "calling": [
                "FUN_080090c2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009124": {
            "entrypoint": "0x08009124",
            "current_name": "process_and_store_data_08009124",
            "code": "\nvoid processAndStoreData_08009124(undefined4 input1,undefined4 input2,undefined4 output1,undefined4 output2)\n\n{\n  undefined4 output1_tmp;\n  undefined4 output2_tmp;\n  \n  output1_tmp = output1;\n  output2_tmp = output2;\n  process_data_0800937c(DAT_20000090,input1,input2,&output1_tmp,input1,&output1_tmp);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009124": "process_and_store_data_08009124",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output1",
                "param_4": "output2",
                "uStack_8": "output1_tmp",
                "uStack_4": "output2_tmp"
            },
            "calling": [
                "FUN_080090cc"
            ],
            "called": [
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009148": {
            "entrypoint": "0x08009148",
            "current_name": "execute_functions_08009148",
            "code": "\nvoid executeFunctions_08009148(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(functionPointer *)(&DAT_0800abe4)[index])();\n  }\n  FUNC_0800a424();\n  for (index = 0; index != 0xc; index = index + 1) {\n    (*(functionPointer *)(&DAT_0800abe4)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "iVar1": "index",
                "code": "functionPointer"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009190": {
            "entrypoint": "0x08009190",
            "current_name": "initialize_memory_08009190",
            "code": "\nvoid initializeMemory_08009190(undefined4 param)\n\n{\n  allocateAndInitializeMemory(DAT_20000090,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009190": "initialize_memory_08009190",
                "param_1": "param",
                "allocate_and_initialize_memory_08009270": "allocateAndInitializeMemory"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a0": {
            "entrypoint": "0x080091a0",
            "current_name": "process_data_080091a0",
            "code": "\nvoid processData_080091a0(undefined4 inputData)\n\n{\n  process_data_080091d8(DAT_20000090,inputData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091a0": "process_data_080091a0",
                "param_1": "inputData"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091b0": {
            "entrypoint": "0x080091b0",
            "current_name": "copy_data_080091b0",
            "code": "\nvoid copyData_080091b0(int startAddress,undefined *sourceData,int dataLength)\n\n{\n  undefined *endAddress;\n  undefined *destinationAddress;\n  \n  destinationAddress = (undefined *)(startAddress + -1);\n  endAddress = sourceData + dataLength;\n  for (; sourceData != endAddress; sourceData = sourceData + 1) {\n    destinationAddress = destinationAddress + 1;\n    *destinationAddress = *sourceData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091b0": "copy_data_080091b0",
                "param_1": "startAddress",
                "param_2": "sourceData",
                "param_3": "dataLength",
                "puVar1": "endAddress",
                "puVar2": "destinationAddress"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091c6": {
            "entrypoint": "0x080091c6",
            "current_name": "fill_memory_080091c6",
            "code": "\nvoid fillMemory_080091c6(undefined *memory,undefined valueToFill,int size)\n\n{\n  undefined *endOfMemory;\n  \n  endOfMemory = memory + size;\n  for (; memory != endOfMemory; memory = memory + 1) {\n    *memory = valueToFill;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091c6": "fill_memory_080091c6",
                "param_1": "memory",
                "param_2": "valueToFill",
                "param_3": "size",
                "puVar1": "endOfMemory"
            },
            "calling": [
                "FUN_08009cdc",
                "FUN_08009db0",
                "FUN_08002a58",
                "FUN_08007118",
                "FUN_08009d24",
                "FUN_08006d80",
                "FUN_08002968"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091d8": {
            "entrypoint": "0x080091d8",
            "current_name": "process_data_080091d8",
            "code": "\nvoid processData_080091d8(undefined4 *result,int size,undefined4 param3,undefined4 param4)\n\n{\n  int **extraResult;\n  int **currPtr;\n  int **nextPtr;\n  int *tempPtr;\n  int **prevPtr;\n  int **newPtr;\n  \n  if (size == 0) {\n    return;\n  }\n  newPtr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    newPtr = (int **)((int)newPtr + *(int *)(size + -4));\n  }\n  FUNC_08009f48();\n  nextPtr = (int **)&DAT_2000098c;\n  if (DAT_2000098c == (int **)0x0) {\n    newPtr[1] = (int *)0x0;\n    currPtr = extraResult;\n    DAT_2000098c = newPtr;\n  }\n  else {\n    nextPtr = DAT_2000098c;\n    if (newPtr < DAT_2000098c) {\n      currPtr = (int **)*newPtr;\n      nextPtr = (int **)((int)newPtr + (int)currPtr);\n      if (DAT_2000098c == nextPtr) {\n        tempPtr = *DAT_2000098c;\n        DAT_2000098c = (int **)DAT_2000098c[1];\n        nextPtr = (int **)((int)tempPtr + (int)currPtr);\n        *newPtr = (int *)nextPtr;\n      }\n      newPtr[1] = (int *)DAT_2000098c;\n      DAT_2000098c = newPtr;\n    }\n    else {\n      do {\n        prevPtr = nextPtr;\n        nextPtr = (int **)prevPtr[1];\n        if (nextPtr == (int **)0x0) break;\n      } while (nextPtr <= newPtr);\n      currPtr = (int **)*prevPtr;\n      if ((int **)((int)prevPtr + (int)currPtr) == newPtr) {\n        currPtr = (int **)((int)currPtr + (int)*newPtr);\n        *prevPtr = (int *)currPtr;\n        if (nextPtr == (int **)((int)prevPtr + (int)currPtr)) {\n          tempPtr = *nextPtr;\n          nextPtr = (int **)nextPtr[1];\n          currPtr = (int **)((int)currPtr + (int)tempPtr);\n          *prevPtr = (int *)currPtr;\n          prevPtr[1] = (int *)nextPtr;\n        }\n      }\n      else if (newPtr < (int **)((int)prevPtr + (int)currPtr)) {\n        *result = 0xc;\n      }\n      else {\n        currPtr = (int **)((int)newPtr + (int)*newPtr);\n        if (nextPtr == currPtr) {\n          tempPtr = *nextPtr;\n          nextPtr = (int **)nextPtr[1];\n          currPtr = (int **)((int)tempPtr + (int)*newPtr);\n          *newPtr = (int *)currPtr;\n        }\n        newPtr[1] = (int *)nextPtr;\n        prevPtr[1] = (int *)newPtr;\n      }\n    }\n  }\n  FUNC_08009f4a(result,currPtr,nextPtr,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091d8": "process_data_080091d8",
                "param_1": "result",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "extraResult",
                "ppiVar1": "currPtr",
                "ppiVar2": "nextPtr",
                "piVar3": "tempPtr",
                "ppiVar4": "prevPtr",
                "ppiVar5": "newPtr"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_080091a0",
                "FUN_08009a80",
                "FUN_08009908"
            ],
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009270": {
            "entrypoint": "0x08009270",
            "current_name": "allocate_and_initialize_memory_08009270",
            "code": "\nuint allocate_and_initialize_memory_08009270(undefined4 *result,uint size)\n\n{\n  uint *current_block;\n  int block_size;\n  uint *previous_block;\n  uint difference;\n  uint *previous_block_next;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_08009f48();\n    current_block = DAT_2000098c;\n    previous_block_next = DAT_2000098c;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (previous_block_next == previous_block) {\n            current_block = (uint *)previous_block_next[1];\n            DAT_2000098c = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (previous_block_next != previous_block) {\n            previous_block_next[1] = (uint)current_block;\n            previous_block_next = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = allocated_size;\n          previous_block_next = (uint *)((int)previous_block + difference);\n        }\n        goto LAB_080092d4;\n      }\n      previous_block_next = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_20000990 == 0) {\n      DAT_20000990 = assign_memory(result);\n    }\n    current_block = (uint *)assign_memory(result,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block_next = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block_next ||\n        (block_size = assign_memory(result,(int)previous_block_next - (int)current_block), block_size != -1)))) {\n      *previous_block_next = allocated_size;\nLAB_080092d4:\n      FUNC_08009f4a(result);\n      allocated_size = (int)previous_block_next + 0xbU & 0xfffffff8;\n      block_size = allocated_size - (int)(previous_block_next + 1);\n      if (block_size != 0) {\n        *(int *)((int)previous_block_next + block_size) = -block_size;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *result = 0xc;\n    FUNC_08009f4a(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009270": "allocate_and_initialize_memory_08009270",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "block_size",
                "puVar3": "previous_block",
                "uVar4": "difference",
                "puVar5": "previous_block_next",
                "uVar6": "allocated_size",
                "check_and_assign_memory_08009918": "assign_memory"
            },
            "calling": [
                "FUN_08009190",
                "FUN_08009d24",
                "FUN_08009908",
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08009918",
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800932c": {
            "entrypoint": "0x0800932c",
            "current_name": "process_input_0800932c",
            "code": "\nuint process_input_0800932c(int input_param,byte byte_value,byte **byte_ptr)\n\n{\n  int temp_var1;\n  byte *temp_var2;\n  byte *temp_var3;\n  uint result;\n  \n  temp_var2 = byte_ptr[2] + -1;\n  byte_ptr[2] = temp_var2;\n  if ((-1 < (int)temp_var2) ||\n     (((int)byte_ptr[6] <= (int)temp_var2 && (temp_var2 = (byte *)(uint)byte_value, temp_var2 != (byte *)0xa))))\n  {\n    temp_var2 = *byte_ptr;\n    *byte_ptr = temp_var2 + 1;\n    *temp_var2 = byte_value;\n    return (uint)byte_value;\n  }\n  if ((input_param != 0) && (*(int *)(input_param + 0x18) == 0)) {\n    initialize_data();\n  }\n  if (byte_ptr == (byte **)&DAT_0800aba4) {\n    byte_ptr = *(byte ***)(input_param + 4);\n  }\n  else if (byte_ptr == (byte **)&DAT_0800abc4) {\n    byte_ptr = *(byte ***)(input_param + 8);\n  }\n  else if (byte_ptr == (byte **)&DAT_0800ab84) {\n    byte_ptr = *(byte ***)(input_param + 0xc);\n  }\n  byte_ptr[2] = byte_ptr[6];\n  temp_var3 = (byte *)(uint)*(ushort *)(byte_ptr + 3);\n  temp_var1 = (int)temp_var3 << 0x1c;\n  if (((temp_var1 < 0) && (temp_var3 = byte_ptr[4], temp_var3 != (byte *)0x0)) ||\n     (temp_var1 = process_data1(input_param,byte_ptr,temp_var1,temp_var3,temp_var2), temp_var1 == 0)) {\n    result = (uint)byte_value;\n    temp_var1 = (int)*byte_ptr - (int)byte_ptr[4];\n    if ((temp_var1 < (int)byte_ptr[5]) || (temp_var1 = process_data2(input_param,byte_ptr), temp_var1 == 0)) {\n      byte_ptr[2] = byte_ptr[2] + -1;\n      temp_var2 = *byte_ptr;\n      *byte_ptr = temp_var2 + 1;\n      *temp_var2 = byte_value;\n      if ((byte *)(temp_var1 + 1) != byte_ptr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(byte_ptr + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_var1 = process_data2(input_param,byte_ptr);\n      if (temp_var1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800932c": "process_input_0800932c",
                "param_1": "input_param",
                "param_2": "byte_value",
                "param_3": "byte_ptr",
                "iVar1": "temp_var1",
                "pbVar2": "temp_var2",
                "pbVar3": "temp_var3",
                "uVar4": "result",
                "initialize_data_08009d50": "initialize_data",
                "process_data_08009a80": "process_data1",
                "process_data_08009c7c": "process_data2"
            },
            "calling": [
                "FUN_08009358"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009a80",
                "FUN_08009c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009358": {
            "entrypoint": "0x08009358",
            "current_name": "process_input_08009358",
            "code": "\nint process_input_08009358(undefined4 input_param,undefined4 output_param,undefined *input_data,int data_length)\n\n{\n  int result;\n  undefined *end_ptr;\n  int current_length;\n  \n  end_ptr = input_data + data_length;\n  current_length = data_length;\n  do {\n    if (input_data == end_ptr) {\n      return 0;\n    }\n    result = process_input_08009358_0800932c(input_param,*input_data,output_param,data_length,current_length);\n    data_length = result + 1;\n    input_data = input_data + 1;\n  } while (data_length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009358": "process_input_08009358",
                "param_1": "input_param",
                "param_2": "output_param",
                "param_3": "input_data",
                "param_4": "data_length",
                "iVar1": "result",
                "puVar2": "end_ptr",
                "iVar3": "current_length"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_0800932c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800937c": {
            "entrypoint": "0x0800937c",
            "current_name": "process_data_0800937c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint processData_0800937c(int dataParam,undefined4 *formatParam,byte *inputParam,int *outputParam)\n\n{\n  int result;\n  int *intPtr;\n  bool flag;\n  byte *ptrByte1;\n  byte *ptrByte2;\n  int unaffectedReg;\n  int index;\n  int *localOutput;\n  uint formatFlags;\n  int fieldWidth;\n  undefined4 formatSpecifier;\n  int precision;\n  int byteCount;\n  byte currentChar;\n  undefined charSpace;\n  undefined charPlus;\n  undefined charPad;\n  undefined4 localVar;\n  \n  localOutput = outputParam;\n  if ((dataParam != 0) && (*(int *)(dataParam + 0x18) == 0)) {\n    initialize_data_08009d50();\n  }\n  if (formatParam == &DAT_0800aba4) {\n    formatParam = *(undefined4 **)(dataParam + 4);\n  }\n  else if (formatParam == (undefined4 *)&DAT_0800abc4) {\n    formatParam = *(undefined4 **)(dataParam + 8);\n  }\n  else if (formatParam == (undefined4 *)&DAT_0800ab84) {\n    formatParam = *(undefined4 **)(dataParam + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(formatParam + 3) << 0x1c)) || (formatParam[4] == 0)) &&\n     (index = process_data_08009a80(dataParam,formatParam), index != 0)) {\n    return -1;\n  }\n  byteCount = 0;\n  charSpace = 0x20;\n  charPlus = 0x30;\n  ptrByte1 = inputParam;\nLAB_080093be:\n  ptrByte2 = ptrByte1;\n  if (*ptrByte2 != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  ptrByte1 = ptrByte2 + 1;\n  if (*ptrByte2 != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  index = (int)ptrByte2 - (int)inputParam;\n  if (index != 0) {\n    result = process_input_08009358(dataParam,formatParam,inputParam,index);\n    if (result == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(formatParam + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return byteCount;\n    }\n    byteCount = byteCount + index;\n  }\n  if (*ptrByte2 == 0) goto LAB_08009568;\n  formatFlags = 0;\n  precision = 0;\n  fieldWidth = -1;\n  formatSpecifier = 0;\n  charPad = 0;\n  localVar = 0;\n  ptrByte1 = ptrByte2 + 1;\n  while( true ) {\n    index = find_first_occurrence_08009f2c(\"#-0+ \",*ptrByte1);\n    inputParam = ptrByte1 + 1;\n    if (index == 0) break;\n    formatFlags = 1 << (index + 0xf7ff54b0U & 0xff) | formatFlags;\n    ptrByte1 = inputParam;\n  }\n  if ((int)(formatFlags << 0x1b) < 0) {\n    charPad = 0x20;\n  }\n  if ((int)(formatFlags << 0x1c) < 0) {\n    charPad = 0x2b;\n  }\n  if (*ptrByte1 == 0x2a) {\n    intPtr = localOutput + 1;\n    index = *localOutput;\n    localOutput = intPtr;\n    if (index < 0) {\n      precision = -index;\n      formatFlags = formatFlags | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    flag = false;\n    index = precision;\n    inputParam = ptrByte1;\n    while( true ) {\n      if (9 < *inputParam - 0x30) break;\n      index = index * 10 + (*inputParam - 0x30);\n      flag = true;\n      inputParam = inputParam + 1;\n    }\n    if (!flag) goto LAB_080094a6;\n  }\n  precision = index;\nLAB_080094a6:\n  if (*inputParam == 0x2e) {\n    if (inputParam[1] == 0x2a) {\n      inputParam = inputParam + 2;\n      intPtr = localOutput + 1;\n      fieldWidth = *localOutput;\n      localOutput = intPtr;\n      if (fieldWidth < 0) {\n        fieldWidth = -1;\n      }\n    }\n    else {\n      flag = false;\n      index = 0;\n      fieldWidth = 0;\n      while( true ) {\n        inputParam = inputParam + 1;\n        if (9 < *inputParam - 0x30) break;\n        index = index * 10 + (*inputParam - 0x30);\n        flag = true;\n      }\n      if (flag) {\n        fieldWidth = index;\n      }\n    }\n  }\n  index = find_first_occurrence_08009f2c(&DAT_0800ab56,*inputParam,3);\n  if (index != 0) {\n    inputParam = inputParam + 1;\n    formatFlags = formatFlags | 0x40 << (index + 0xf7ff54aaU & 0xff);\n  }\n  currentChar = *inputParam;\n  inputParam = inputParam + 1;\n  index = find_first_occurrence_08009f2c(\"efgEFG\",currentChar,6);\n  if (index == 0) {\n    unaffectedReg = format_output_08009698(dataParam,&formatFlags,formatParam,0x8009359,&localOutput);\n    if (unaffectedReg == -1) goto LAB_08009568;\n  }\n  else {\n    localOutput = (int *)(((int)localOutput + 7U & 0xfffffff8) + 8);\n  }\n  byteCount = byteCount + unaffectedReg;\n  ptrByte1 = inputParam;\n  goto LAB_080093be;\n}\n\n",
            "renaming": {
                "FUN_0800937c": "process_data_0800937c",
                "param_1": "dataParam",
                "param_2": "formatParam",
                "param_3": "inputParam",
                "param_4": "outputParam",
                "iVar1": "result",
                "piVar2": "intPtr",
                "bVar3": "flag",
                "pbVar4": "ptrByte1",
                "pbVar5": "ptrByte2",
                "unaff_r9": "unaffectedReg",
                "iVar6": "index",
                "local_8c": "localOutput",
                "local_88": "formatFlags",
                "local_84": "fieldWidth",
                "local_80": "formatSpecifier",
                "local_7c": "precision",
                "local_74": "byteCount",
                "local_70": "currentChar",
                "local_6f": "charSpace",
                "local_6e": "charPlus",
                "local_45": "charPad",
                "local_30": "localVar"
            },
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009358",
                "FUN_08009698",
                "FUN_08009f2c",
                "FUN_08009a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095a8": {
            "entrypoint": "0x080095a8",
            "current_name": "FUNC_080095a8",
            "code": "\nundefined4\nFUNC_080095a8(undefined4 param_1,uint *param_2,uint *param_3,undefined4 param_4,code *param_5)\n\n{\n  int iVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  bool bVar5;\n  \n  uVar3 = param_2[4];\n  if ((int)param_2[4] < (int)param_2[2]) {\n    uVar3 = param_2[2];\n  }\n  *param_3 = uVar3;\n  if (*(char *)((int)param_2 + 0x43) != '\\0') {\n    *param_3 = uVar3 + 1;\n  }\n  if ((int)(*param_2 << 0x1a) < 0) {\n    *param_3 = *param_3 + 2;\n  }\n  if ((*param_2 & 6) == 0) {\n    for (iVar1 = 0; iVar1 < (int)(param_2[3] - *param_3); iVar1 = iVar1 + 1) {\n      iVar2 = (*param_5)(param_1,param_4,(int)param_2 + 0x19,1);\n      if (iVar2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uVar3 = (uint)*(byte *)((int)param_2 + 0x43);\n  if (uVar3 != 0) {\n    uVar3 = 1;\n  }\n  uVar4 = uVar3;\n  if ((int)(*param_2 << 0x1a) < 0) {\n    *(undefined *)((int)param_2 + uVar3 + 0x43) = 0x30;\n    uVar4 = uVar3 + 2;\n    *(undefined *)((int)param_2 + uVar3 + 0x44) = *(undefined *)((int)param_2 + 0x45);\n  }\n  iVar1 = (*param_5)(param_1,param_4,(int)param_2 + 0x43,uVar4);\n  if (iVar1 != -1) {\n    uVar3 = param_2[3];\n    bVar5 = (*param_2 & 6) != 4;\n    if (bVar5) {\n      uVar3 = 0;\n    }\n    uVar4 = 0;\n    if (!bVar5) {\n      uVar3 = uVar3 - *param_3;\n    }\n    if (!bVar5) {\n      uVar3 = uVar3 & ~((int)uVar3 >> 0x1f);\n    }\n    if ((int)param_2[4] < (int)param_2[2]) {\n      uVar3 = uVar3 + (param_2[2] - param_2[4]);\n    }\n    while( true ) {\n      if (uVar3 == uVar4) {\n        return 0;\n      }\n      iVar1 = (*param_5)(param_1,param_4,(int)param_2 + 0x1a,1);\n      if (iVar1 == -1) break;\n      uVar4 = uVar4 + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080095a8": "FUNC_080095a8"
            },
            "calling": [
                "FUN_08009698"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009698": {
            "entrypoint": "0x08009698",
            "current_name": "format_output_08009698",
            "code": "\nuint format_output_08009698(undefined4 format_type,uint *format_specifier,undefined4 arg_ptr,code *output_function,uint **arg_ptr_ptr)\n\n{\n  byte specifier_char;\n  int result;\n  uint *arg_ptr_next;\n  int write_result;\n  char *hex_table;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint arg_value_u;\n  uint arg_length;\n  char *output;\n  char *specifier_ptr;\n  uint arg_lengths [2];\n  \n  specifier_char = *(byte *)(format_specifier + 6);\n  specifier_ptr = (char *)((int)format_specifier + 0x43);\n  if (specifier_char != 0x6e) {\n    if (specifier_char < 0x6f) {\n      if (specifier_char != 99) {\n        if (specifier_char < 100) {\n          if (specifier_char == 0) goto LAB_08009852;\n          if (specifier_char != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)format_specifier + 0x45) = 0x58;\n          hex_table = \"0123456789ABCDEF\";\nLAB_080097e2:\n          base = *format_specifier;\n          arg_ptr_next = *arg_ptr_ptr;\n          *arg_ptr_ptr = arg_ptr_next + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            arg_value_u = (uint)*(ushort *)arg_ptr_next;\n          }\n          else {\n            arg_value_u = *arg_ptr_next;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *format_specifier = base | 0x20;\n          }\n          if (arg_value_u == 0) {\n            *format_specifier = *format_specifier & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08009778:\n          *(undefined *)((int)format_specifier + 0x43) = 0;\n        }\n        else {\n          if ((specifier_char != 100) && (specifier_char != 0x69)) goto LAB_080096c8;\n          arg_value_u = *format_specifier;\n          arg_ptr_next = *arg_ptr_ptr;\n          if ((arg_value_u & 0x80) == 0) {\n            *arg_ptr_ptr = arg_ptr_next + 1;\n            if ((arg_value_u & 0x40) == 0) goto LAB_080096e8;\n            arg_value_u = (uint)(short)*(ushort *)arg_ptr_next;\n          }\n          else {\n            *arg_ptr_ptr = arg_ptr_next + 1;\nLAB_080096e8:\n            arg_value_u = *arg_ptr_next;\n          }\n          if ((int)arg_value_u < 0) {\n            arg_value_u = -arg_value_u;\n            *(undefined *)((int)format_specifier + 0x43) = 0x2d;\n          }\n          hex_table = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        arg_length = format_specifier[1];\n        format_specifier[2] = arg_length;\n        output = specifier_ptr;\n        if ((int)arg_length < 0) {\n          if (arg_value_u != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)format_specifier + 0x42) = *hex_table;\n          output = (char *)((int)format_specifier + 0x42);\n        }\n        else {\n          *format_specifier = *format_specifier & 0xfffffffb;\n          if (arg_value_u == 0) {\n            if (arg_length != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              arg_length = arg_value_u / base;\n              output = output + -1;\n              *output = hex_table[arg_value_u - base * arg_length];\n              arg_value_u = arg_length;\n            } while (arg_length != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*format_specifier << 0x1f) < 0)) && ((int)format_specifier[1] <= (int)format_specifier[4]))\n        {\n          output[-1] = '0';\n          output = output + -1;\n        }\n        format_specifier[4] = (int)specifier_ptr - (int)output;\n        specifier_ptr = output;\n        goto LAB_080097be;\n      }\n      arg_ptr_next = *arg_ptr_ptr;\n      *arg_ptr_ptr = arg_ptr_next + 1;\n      *(char *)((int)format_specifier + 0x42) = (char)*arg_ptr_next;\nLAB_08009728:\n      specifier_ptr = (char *)((int)format_specifier + 0x42);\n      arg_value_u = 1;\n    }\n    else {\n      if (specifier_char != 0x73) {\n        if (specifier_char < 0x74) {\n          if (specifier_char == 0x6f) {\nLAB_0800974e:\n            arg_value_u = *format_specifier;\n            arg_ptr_next = *arg_ptr_ptr;\n            if ((arg_value_u & 0x80) == 0) {\n              *arg_ptr_ptr = arg_ptr_next + 1;\n              if ((arg_value_u & 0x40) == 0) goto LAB_0800975c;\n              arg_value_u = (uint)*(ushort *)arg_ptr_next;\n            }\n            else {\n              *arg_ptr_ptr = arg_ptr_next + 1;\nLAB_0800975c:\n              arg_value_u = *arg_ptr_next;\n            }\n            if (specifier_char == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            hex_table = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (specifier_char == 0x70) {\n            *format_specifier = *format_specifier | 0x20;\nLAB_0800970e:\n            hex_table = \"0123456789abcdef\";\n            *(undefined *)((int)format_specifier + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (specifier_char == 0x75) goto LAB_0800974e;\n          if (specifier_char == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)format_specifier + 0x42) = specifier_char;\n        goto LAB_08009728;\n      }\n      ppcVar8 = (char **)*arg_ptr_ptr;\n      *arg_ptr_ptr = (uint *)(ppcVar8 + 1);\n      specifier_ptr = *ppcVar8;\n      result = find_first_occurrence_08009f2c(specifier_ptr,0,format_specifier[1]);\n      if (result != 0) {\n        format_specifier[1] = result - (int)specifier_ptr;\n      }\n      arg_value_u = format_specifier[1];\n    }\n    format_specifier[4] = arg_value_u;\n    *(undefined *)((int)format_specifier + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  arg_value_u = *format_specifier;\n  ppuVar7 = (uint **)*arg_ptr_ptr;\n  base = format_specifier[5];\n  if ((arg_value_u & 0x80) == 0) {\n    *arg_ptr_ptr = (uint *)(ppuVar7 + 1);\n    arg_ptr_next = *ppuVar7;\n    if ((arg_value_u & 0x40) == 0) goto LAB_0800983e;\n    *(short *)arg_ptr_next = (short)base;\n  }\n  else {\n    *arg_ptr_ptr = (uint *)(ppuVar7 + 1);\n    arg_ptr_next = *ppuVar7;\nLAB_0800983e:\n    *arg_ptr_next = base;\n  }\nLAB_08009852:\n  format_specifier[4] = 0;\nLAB_080097be:\n  result = FUNC_080095a8(format_type,format_specifier,arg_lengths,arg_ptr,output_function);\n  if ((result == -1) || (result = (*output_function)(format_type,arg_ptr,specifier_ptr,format_specifier[4]), result == -1)) {\nLAB_080097d2:\n    arg_value_u = 0xffffffff;\n  }\n  else {\n    if ((int)(*format_specifier << 0x1e) < 0) {\n      for (result = 0; result < (int)(format_specifier[3] - arg_lengths[0]); result = result + 1) {\n        write_result = (*output_function)(format_type,arg_ptr,(int)format_specifier + 0x19,1);\n        if (write_result == -1) goto LAB_080097d2;\n      }\n    }\n    arg_value_u = format_specifier[3];\n    if ((int)format_specifier[3] < (int)arg_lengths[0]) {\n      arg_value_u = arg_lengths[0];\n    }\n  }\n  return arg_value_u;\n}\n\n",
            "renaming": {
                "FUN_08009698": "format_output_08009698",
                "param_1": "format_type",
                "param_2": "format_specifier",
                "param_3": "arg_ptr",
                "param_4": "output_function",
                "param_5": "arg_ptr_ptr",
                "bVar1": "specifier_char",
                "iVar2": "result",
                "puVar3": "arg_ptr_next",
                "iVar4": "write_result",
                "pcVar5": "hex_table",
                "uVar6": "base",
                "uVar9": "arg_value_u",
                "uVar10": "arg_length",
                "pcVar11": "output",
                "pcVar12": "specifier_ptr",
                "local_24": "arg_lengths"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_080095a8",
                "FUN_08009f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d8": {
            "entrypoint": "0x080098d8",
            "current_name": "process_and_initialize_data_080098d8",
            "code": "\nvoid processAndInitializeData_080098d8(undefined4 dataParam,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int dataVar;\n  undefined4 param1Var;\n  undefined4 param2Var;\n  undefined4 param3Var;\n  undefined4 param4Var;\n  \n  dataVar = DAT_20000090;\n  param1Var = dataParam;\n  param2Var = param2;\n  param3Var = param3;\n  param4Var = param4;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_data_08009d50(DAT_20000090);\n  }\n  process_data_0800937c(dataVar,*(undefined4 *)(dataVar + 8),dataParam,&param2Var,param1Var,&param2Var);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080098d8": "process_and_initialize_data_080098d8",
                "param_1": "dataParam",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "dataVar",
                "uVar2": "param1Var",
                "uStack_c": "param2Var",
                "uStack_8": "param3Var",
                "uStack_4": "param4Var"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08007594",
                "FUN_080077b0",
                "FUN_08007544",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009908": {
            "entrypoint": "0x08009908",
            "current_name": "allocate_and_initialize_memory_08009908",
            "code": "\nint allocateAndInitializeMemory_08009908(int inputSize,uint offset)\n\n{\n  undefined4 dataPointer;\n  int result;\n  uint calculatedOffset;\n  \n  dataPointer = DAT_20000090;\n  if (inputSize != 0) {\n    if (offset == 0) {\n      process_data_080091d8();\n      result = 0;\n    }\n    else {\n      calculatedOffset = calculate_offset_0800a154();\n      result = inputSize;\n      if ((calculatedOffset < offset) && (result = allocate_and_initialize_memory_08009270(dataPointer,offset), result != 0)) {\n        copy_data_080091b0(result,inputSize,offset);\n        process_data_080091d8(dataPointer,inputSize);\n      }\n    }\n    return result;\n  }\n  result = allocate_and_initialize_memory_08009270(DAT_20000090,offset,offset,&DAT_20000090);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009908": "allocate_and_initialize_memory_08009908",
                "param_1": "inputSize",
                "param_2": "offset",
                "uVar1": "dataPointer",
                "iVar2": "result",
                "uVar3": "calculatedOffset"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08002acc",
                "FUN_0800288c"
            ],
            "called": [
                "FUN_0800a154",
                "FUN_080091b0",
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009918": {
            "entrypoint": "0x08009918",
            "current_name": "check_and_assign_memory_08009918",
            "code": "\nvoid checkAndAssignMemory_08009918(int *resultPointer,undefined4 inputValue)\n\n{\n  int memoryStatus;\n  \n  DAT_20000a38 = 0;\n  memoryStatus = get_memory_08008804(inputValue);\n  if ((memoryStatus == -1) && (DAT_20000a38 != 0)) {\n    *resultPointer = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009918": "check_and_assign_memory_08009918",
                "param_1": "resultPointer",
                "param_2": "inputValue",
                "iVar1": "memoryStatus"
            },
            "calling": [
                "FUN_08009270"
            ],
            "called": [
                "FUN_08008804"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009938": {
            "entrypoint": "0x08009938",
            "current_name": "find_char_index_08009938",
            "code": "\nchar * find_char_index_08009938(char *string,char target_char)\n\n{\n  char *current_char;\n  \n  do {\n    current_char = string;\n    if (*current_char == '\\0') {\n      if (target_char != '\\0') {\n        current_char = (char *)0x0;\n      }\n      return current_char;\n    }\n    string = current_char + 1;\n  } while (target_char != *current_char);\n  return current_char;\n}\n\n",
            "renaming": {
                "FUN_08009938": "find_char_index_08009938",
                "param_1": "string",
                "param_2": "target_char",
                "pcVar1": "current_char"
            },
            "calling": [
                "FUN_0800997e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009954": {
            "entrypoint": "0x08009954",
            "current_name": "copy_string_with_terminator_08009954",
            "code": "\nvoid copyStringWithTerminator_08009954(char *destination,char *source,int length)\n\n{\n  char currentChar;\n  int remainingLength;\n  char *destinationPointer;\n  \n  do {\n    destinationPointer = destination;\n    remainingLength = length;\n    if (remainingLength == 0) {\n      return;\n    }\n    currentChar = *source;\n    destination = destinationPointer + 1;\n    *destinationPointer = currentChar;\n    source = source + 1;\n    length = remainingLength + -1;\n  } while (currentChar != '\\0');\n  for (; destination != destinationPointer + remainingLength; destination = destination + 1) {\n    *destination = '\\0';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009954": "copy_string_with_terminator_08009954",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "currentChar",
                "iVar2": "remainingLength",
                "pcVar3": "destinationPointer"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800997e": {
            "entrypoint": "0x0800997e",
            "current_name": "find_last_char_index_0800997e",
            "code": "\nint find_last_char_index_0800997e(int string,int length,undefined4 char,undefined4 size)\n\n{\n  int index;\n  int last_index;\n  \n  if (length != 0) {\n    last_index = 0;\n    while (index = find_char_index_08009938(string,length,char,string,size), index != 0) {\n      string = index + 1;\n      last_index = index;\n    }\n    return last_index;\n  }\n  last_index = find_char_index_08009938();\n  return last_index;\n}\n\n",
            "renaming": {
                "FUN_0800997e": "find_last_char_index_0800997e",
                "param_1": "string",
                "param_2": "length",
                "param_3": "char",
                "param_4": "size",
                "iVar1": "index",
                "iVar2": "last_index"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099a4": {
            "entrypoint": "0x080099a4",
            "current_name": "find_overlap_080099a4",
            "code": "\nchar * find_overlap_080099a4(char *string1,char *string2)\n\n{\n  char *ptr_string1;\n  char *ptr_string1_prev;\n  char *ptr_string2_current;\n  \n  if (*string1 == '\\0') {\n    if (*string2 != '\\0') {\n      string1 = (char *)0x0;\n    }\n    return string1;\n  }\n  do {\n    ptr_string1 = string1;\n    if (*ptr_string1 == '\\0') {\n      return (char *)0x0;\n    }\n    ptr_string2_current = string2 + -1;\n    ptr_string1_prev = ptr_string1 + -1;\n    do {\n      ptr_string2_current = ptr_string2_current + 1;\n      if (*ptr_string2_current == '\\0') {\n        return ptr_string1;\n      }\n      ptr_string1_prev = ptr_string1_prev + 1;\n      string1 = ptr_string1 + 1;\n    } while (*ptr_string1_prev == *ptr_string2_current);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080099a4": "find_overlap_080099a4",
                "param_1": "string1",
                "param_2": "string2",
                "pcVar1": "ptr_string1",
                "pcVar2": "ptr_string1_prev",
                "pcVar3": "ptr_string2_current"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a80": {
            "entrypoint": "0x08009a80",
            "current_name": "process_data_08009a80",
            "code": "\nuint process_data_08009a80(undefined4 *output_param,undefined4 *input_param)\n\n{\n  int data_ptr;\n  uint result;\n  ushort input_value;\n  \n  data_ptr = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_data_08009d50(DAT_20000090);\n  }\n  if (input_param == &DAT_0800aba4) {\n    input_param = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (input_param == (undefined4 *)&DAT_0800abc4) {\n    input_param = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (input_param == (undefined4 *)&DAT_0800ab84) {\n    input_param = *(undefined4 **)(data_ptr + 0xc);\n  }\n  input_value = *(ushort *)(input_param + 3);\n  result = (uint)input_value;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output_param = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input_param[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_param[0xd] != input_param + 0x11) {\n          process_data_08009a80_080091d8(output_param);\n        }\n        input_param[0xd] = 0;\n      }\n      *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) & 0xffdb;\n      input_param[1] = 0;\n      *input_param = input_param[4];\n    }\n    *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) | 8;\n  }\n  if ((input_param[4] == 0) && ((*(ushort *)(input_param + 3) & 0x280) != 0x200)) {\n    initialize_and_assign_memory_08009eac(output_param,input_param);\n  }\n  input_value = *(ushort *)(input_param + 3);\n  result = input_value & 1;\n  if ((input_value & 1) == 0) {\n    if (-1 < (int)((uint)input_value << 0x1e)) {\n      result = input_param[5];\n    }\n    input_param[2] = result;\n  }\n  else {\n    input_param[2] = 0;\n    input_param[6] = -input_param[5];\n  }\n  if (input_param[4] == 0) {\n    input_value = *(ushort *)(input_param + 3);\n    result = (int)(short)input_value & 0x80;\n    if (result != 0) {\nLAB_08009ab0:\n      *(ushort *)(input_param + 3) = input_value | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009a80": "process_data_08009a80",
                "param_1": "output_param",
                "param_2": "input_param",
                "iVar1": "data_ptr",
                "uVar2": "result",
                "uVar3": "input_value"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009eac",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_08009a80(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    FUNC_08009d50(DAT_20000090);\n  }\n  if (param_2 == &DAT_0800aba4) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800abc4) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800ab84) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          process_data_080091d8(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_and_assign_memory_08009eac(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08009ab0:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_08009b5c": {
            "entrypoint": "0x08009b5c",
            "current_name": "execute_function_08009b5c",
            "code": "\nvoid executeFunction_08009b5c(void)\n\n{\n  uint *ptr;\n  int count;\n  int *array;\n  int *tempArray;\n  uint value;\n  ushort flag;\n  int temp;\n  code *functionPtr;\n  int temp2;\n  uint tempValue;\n  code *jumpTable;\n  bool isFlagSet;\n  undefined8 result;\n  \n  execute_function_08009fe8(6);\n  jumpTable = (code *)0x8009b6b;\n  result = do_nothing_loop_08008868(1);\n  array = (int *)((ulonglong)result >> 0x20);\n  ptr = (uint *)result;\n  flag = *(ushort *)(array + 3);\n  value = (uint)flag;\n  if ((int)(value << 0x1c) < 0) {\n    count = array[4];\n    if (count != 0) {\n      temp = value << 0x1e;\n      isFlagSet = temp != 0;\n      if (isFlagSet) {\n        temp = 0;\n      }\n      temp2 = *array;\n      if (!isFlagSet) {\n        temp = array[5];\n      }\n      *array = count;\n      array[2] = temp;\n      for (temp2 = temp2 - count; 0 < temp2; temp2 = temp2 - temp) {\n        temp = (*(code *)array[10])(ptr,array[8],count,temp2);\n        if (temp < 1) {\n          flag = *(ushort *)(array + 3);\n          goto LAB_08009c62;\n        }\n        count = count + temp;\n      }\n    }\n  }\n  else if (((0 < array[1]) || (0 < array[0x10])) &&\n          (functionPtr = (code *)array[0xb], functionPtr != (code *)0x0)) {\n    tempValue = *ptr;\n    *ptr = 0;\n    if ((flag & 0x1000) == 0) {\n      count = (*functionPtr)(ptr,array[8],value & 0x1000,1);\n      if ((count == -1) && (value = *ptr, value != 0)) {\n        if ((value != 0x1d) && (value != 0x16)) {\n          *(ushort *)(array + 3) = *(ushort *)(array + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTable)();\n          return;\n        }\n        *ptr = tempValue;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      count = array[0x15];\n    }\n    if (((int)((uint)*(ushort *)(array + 3) << 0x1d) < 0) &&\n       (count = count - array[1], array[0xd] != 0)) {\n      count = count - array[0x10];\n    }\n    count = (*(code *)array[0xb])(ptr,array[8],count,0);\n    flag = *(ushort *)(array + 3);\n    if ((count == -1) &&\n       ((0x1d < *ptr || (-1 < (int)((0x20400001U >> (*ptr & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(array + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    array[1] = 0;\n    *array = array[4];\n    if (((int)((uint)flag << 0x13) < 0) && ((count != -1 || (*ptr == 0)))) {\n      array[0x15] = count;\n    }\n    tempArray = (int *)array[0xd];\n    *ptr = tempValue;\n    if (tempArray != (int *)0x0) {\n      if (tempArray != array + 0x11) {\n        process_data_080091d8(ptr);\n      }\n      array[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)();\n      return;\n    }\n  }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009b5c": "execute_function_08009b5c",
                "puVar1": "ptr",
                "iVar2": "count",
                "piVar3": "array",
                "piVar4": "tempArray",
                "uVar5": "value",
                "uVar6": "flag",
                "iVar7": "temp",
                "pcVar8": "functionPtr",
                "iVar9": "temp2",
                "uVar10": "tempValue",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "bVar11": "isFlagSet",
                "uVar12": "result"
            },
            "calling": [
                "FUN_080090cc",
                "FUN_0800a18c"
            ],
            "called": [
                "FUN_08009fe8",
                "FUN_08008868",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009c7c": {
            "entrypoint": "0x08009c7c",
            "current_name": "process_data_08009c7c",
            "code": "\nundefined4 processData_08009c7c(uint *inputArray,int *metadataArray)\n\n{\n  undefined4 result;\n  int counter;\n  int *tempPtr;\n  uint tempValue;\n  ushort flag;\n  int tempVar;\n  undefined4 unusedVar1;\n  undefined4 unusedVar2;\n  code *functionPtr;\n  int tempVar2;\n  uint tempValue2;\n  code *unrecoveredJumptable;\n  bool boolVar;\n  \n  if (metadataArray[4] != 0) {\n    if ((inputArray != (uint *)0x0) && (inputArray[6] == 0)) {\n      initialize_data_08009d50();\n    }\n    if (metadataArray == &DAT_0800aba4) {\n      metadataArray = (int *)inputArray[1];\n    }\n    else if (metadataArray == (int *)&DAT_0800abc4) {\n      metadataArray = (int *)inputArray[2];\n    }\n    else if (metadataArray == (int *)&DAT_0800ab84) {\n      metadataArray = (int *)inputArray[3];\n    }\n    if (*(short *)(metadataArray + 3) != 0) {\n      flag = *(ushort *)(metadataArray + 3);\n      tempValue = (uint)flag;\n      if ((int)(tempValue << 0x1c) < 0) {\n        counter = metadataArray[4];\n        if (counter != 0) {\n          tempVar = tempValue << 0x1e;\n          boolVar = tempVar != 0;\n          if (boolVar) {\n            tempVar = 0;\n          }\n          tempVar2 = *metadataArray;\n          if (!boolVar) {\n            tempVar = metadataArray[5];\n          }\n          *metadataArray = counter;\n          metadataArray[2] = tempVar;\n          for (tempVar2 = tempVar2 - counter; 0 < tempVar2; tempVar2 = tempVar2 - tempVar) {\n            tempVar = (*(code *)metadataArray[10])(inputArray,metadataArray[8],counter,tempVar2,unusedVar1,unusedVar2);\n            if (tempVar < 1) {\n              flag = *(ushort *)(metadataArray + 3);\n              goto LAB_08009c62;\n            }\n            counter = counter + tempVar;\n          }\n        }\n      }\n      else if (((0 < metadataArray[1]) || (0 < metadataArray[0x10])) &&\n              (functionPtr = (code *)metadataArray[0xb], functionPtr != (code *)0x0)) {\n        tempValue2 = *inputArray;\n        *inputArray = 0;\n        if ((flag & 0x1000) == 0) {\n          counter = (*functionPtr)(inputArray,metadataArray[8],tempValue & 0x1000,1);\n          if ((counter == -1) && (tempValue = *inputArray, tempValue != 0)) {\n            if ((tempValue != 0x1d) && (tempValue != 0x16)) {\n              *(ushort *)(metadataArray + 3) = *(ushort *)(metadataArray + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*unrecoveredJumptable)();\n              return result;\n            }\n            *inputArray = tempValue2;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          counter = metadataArray[0x15];\n        }\n        if (((int)((uint)*(ushort *)(metadataArray + 3) << 0x1d) < 0) &&\n           (counter = counter - metadataArray[1], metadataArray[0xd] != 0)) {\n          counter = counter - metadataArray[0x10];\n        }\n        counter = (*(code *)metadataArray[0xb])(inputArray,metadataArray[8],counter,0);\n        flag = *(ushort *)(metadataArray + 3);\n        if ((counter == -1) &&\n           ((0x1d < *inputArray || (-1 < (int)((0x20400001U >> (*inputArray & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(metadataArray + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*unrecoveredJumptable)(0xffffffff);\n          return result;\n        }\n        metadataArray[1] = 0;\n        *metadataArray = metadataArray[4];\n        if (((int)((uint)flag << 0x13) < 0) && ((counter != -1 || (*inputArray == 0)))) {\n          metadataArray[0x15] = counter;\n        }\n        tempPtr = (int *)metadataArray[0xd];\n        *inputArray = tempValue2;\n        if (tempPtr != (int *)0x0) {\n          if (tempPtr != metadataArray + 0x11) {\n            process_data_080091d8(inputArray);\n          }\n          metadataArray[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*unrecoveredJumptable)();\n          return result;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*unrecoveredJumptable)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "inputArray",
                "param_2": "metadataArray",
                "uVar1": "result",
                "iVar2": "counter",
                "piVar3": "tempPtr",
                "uVar4": "tempValue",
                "uVar5": "flag",
                "iVar6": "tempVar",
                "unaff_r4": "unusedVar1",
                "unaff_r5": "unusedVar2",
                "pcVar7": "functionPtr",
                "iVar8": "tempVar2",
                "uVar9": "tempValue2",
                "UNRECOVERED_JUMPTABLE_00": "unrecoveredJumptable",
                "bVar10": "boolVar"
            },
            "calling": [
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_08009c7c(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08009d50();\n    }\n    if (param_2 == &DAT_0800aba4) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_0800abc4) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_0800ab84) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08009c62;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            process_data_080091d8(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08009cdc": {
            "entrypoint": "0x08009cdc",
            "current_name": "initialize_memory_08009cdc",
            "code": "\nvoid initializeMemory_08009cdc(undefined4 *memory,undefined2 value1,undefined2 value2)\n\n{\n  *memory = 0;\n  memory[1] = 0;\n  memory[2] = 0;\n  *(undefined2 *)(memory + 3) = value1;\n  memory[0x19] = 0;\n  *(undefined2 *)((int)memory + 0xe) = value2;\n  memory[4] = 0;\n  memory[5] = 0;\n  memory[6] = 0;\n  fillMemory(memory + 0x17,0,8);\n  memory[8] = memory;\n  memory[9] = 0x800a021;\n  memory[10] = 0x800a043;\n  memory[0xb] = 0x800a07b;\n  memory[0xc] = &label;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cdc": "initialize_memory_08009cdc",
                "param_1": "memory",
                "param_2": "value1",
                "param_3": "value2",
                "fill_memory_080091c6": "fillMemory",
                "LAB_0800a09e_1": "label"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d24": {
            "entrypoint": "0x08009d24",
            "current_name": "allocate_and_initialize_memory_08009d24",
            "code": "\nundefined4 * allocateAndInitializeMemory_08009d24(undefined4 memorySize,int numBlocks)\n\n{\n  undefined4 *allocatedMemory;\n  int totalSize;\n  \n  totalSize = (numBlocks + -1) * 0x68;\n  allocatedMemory = (undefined4 *)allocate_and_initialize_memory_08009270(memorySize,totalSize + 0x74);\n  if (allocatedMemory != (undefined4 *)0x0) {\n    *allocatedMemory = 0;\n    allocatedMemory[1] = numBlocks;\n    allocatedMemory[2] = allocatedMemory + 3;\n    fill_memory_080091c6(allocatedMemory + 3,0,totalSize + 0x68);\n  }\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_08009d24": "allocate_and_initialize_memory_08009d24",
                "param_1": "memorySize",
                "param_2": "numBlocks",
                "puVar1": "allocatedMemory",
                "iVar2": "totalSize"
            },
            "calling": [
                "FUN_08009db0"
            ],
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d50": {
            "entrypoint": "0x08009d50",
            "current_name": "initialize_data_08009d50",
            "code": "\nvoid initializeData_08009d50(undefined4 *dataArray)\n\n{\n  undefined4 returnValue;\n  undefined4 *pointerVar;\n  \n  if (dataArray[6] == 0) {\n    dataArray[0x12] = 0;\n    dataArray[0x13] = 0;\n    dataArray[0x14] = 0;\n    pointerVar = &DAT_20000094;\n    dataArray[10] = &LAB_08009cd0_1;\n    if (dataArray == &DAT_20000094) {\n      pointerVar = (undefined4 *)0x1;\n    }\n    if (dataArray == &DAT_20000094) {\n      dataArray[6] = pointerVar;\n    }\n    returnValue = processData();\n    dataArray[1] = returnValue;\n    returnValue = processData(dataArray);\n    dataArray[2] = returnValue;\n    returnValue = processData(dataArray);\n    dataArray[3] = returnValue;\n    initializeMemory(dataArray[1],4,0);\n    initializeMemory(dataArray[2],9,1);\n    initializeMemory(dataArray[3],0x12,2);\n    dataArray[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009d50": "initialize_data_08009d50",
                "param_1": "dataArray",
                "uVar1": "returnValue",
                "puVar2": "pointerVar",
                "process_data_08009db0": "processData",
                "initialize_memory_08009cdc": "initializeMemory"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009db0",
                "FUN_080098d8",
                "FUN_08009a80",
                "FUN_0800932c",
                "FUN_08009c7c"
            ],
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009db0": {
            "entrypoint": "0x08009db0",
            "current_name": "process_data_08009db0",
            "code": "\nint * processData_08009db0(undefined4 *param_array,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *current_ptr_1;\n  int *current_ptr_2;\n  int **ptr_ptr_array;\n  \n  if (DAT_200000ac == 0) {\n    initialize_data_08009d50(&DAT_20000094);\n  }\n  ptr_ptr_array = (int **)&DAT_200000dc;\n  do {\n    current_ptr_2 = ptr_ptr_array[2];\n    current_ptr_1 = ptr_ptr_array[1];\n    while (current_ptr_1 = (int *)((int)current_ptr_1 + -1), -1 < (int)current_ptr_1) {\n      if (*(short *)(current_ptr_2 + 3) == 0) {\n        *(undefined2 *)((int)current_ptr_2 + 0xe) = 0xffff;\n        current_ptr_2[0x19] = 0;\n        *(undefined2 *)(current_ptr_2 + 3) = 1;\n        *current_ptr_2 = 0;\n        current_ptr_2[2] = 0;\n        current_ptr_2[1] = 0;\n        current_ptr_2[4] = 0;\n        current_ptr_2[5] = 0;\n        current_ptr_2[6] = 0;\n        fill_memory_080091c6(current_ptr_2 + 0x17,0,8,1,param_4);\n        current_ptr_2[0xd] = 0;\n        current_ptr_2[0xe] = 0;\n        current_ptr_2[0x12] = 0;\n        current_ptr_2[0x13] = 0;\n        return current_ptr_2;\n      }\n      current_ptr_2 = current_ptr_2 + 0x1a;\n    }\n    if (*ptr_ptr_array == (int *)0x0) {\n      current_ptr_1 = (int *)allocate_and_initialize_memory_08009d24(param_array,4);\n      *ptr_ptr_array = current_ptr_1;\n      if (current_ptr_1 == (int *)0x0) {\n        *param_array = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ptr_ptr_array = (int **)*ptr_ptr_array;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009db0": "process_data_08009db0",
                "param_1": "param_array",
                "piVar1": "current_ptr_1",
                "piVar2": "current_ptr_2",
                "ppiVar3": "ptr_ptr_array"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_080091c6",
                "FUN_08009d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08009db0(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000ac == 0) {\n    FUNC_08009d50(&DAT_20000094);\n  }\n  ppiVar3 = (int **)&DAT_200000dc;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_080091c6(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_08009d24(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_08009e64": {
            "entrypoint": "0x08009e64",
            "current_name": "initialize_memory_and_assign_08009e64",
            "code": "\nundefined4 initializeMemoryAndAssign_08009e64(undefined4 type,int input,undefined4 *output,uint *status)\n\n{\n  int result;\n  undefined4 newValue;\n  undefined tempBuffer [4];\n  uint flag;\n  \n  if ((*(short *)(input + 0xe) < 0) ||\n     (result = initialize_and_assign_memory_0800a0ec(type,(int)*(short *)(input + 0xe),tempBuffer), result < 0)) {\n    *status = 0;\n    if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n      newValue = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *status = (uint)((flag & 0xf000) == 0x2000);\n  }\n  newValue = 0x400;\nLAB_08009ea4:\n  *output = newValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009e64": "initialize_memory_and_assign_08009e64",
                "param_1": "type",
                "param_2": "input",
                "param_3": "output",
                "param_4": "status",
                "iVar1": "result",
                "uVar2": "newValue",
                "auStack_4c": "tempBuffer",
                "local_48": "flag"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_0800a0ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009eac": {
            "entrypoint": "0x08009eac",
            "current_name": "initialize_and_assign_memory_08009eac",
            "code": "\nvoid initialize_and_assign_memory_08009eac(int base_address,int *memory_pointer)\n\n{\n  ushort initial_value;\n  int allocated_memory;\n  int local_var_1;\n  int *local_var_2;\n  \n  if (-1 < (int)((uint)*(ushort *)(memory_pointer + 3) << 0x1e)) {\n    local_var_1 = base_address;\n    local_var_2 = memory_pointer;\n    initial_value = initialize_memory(base_address,memory_pointer,&local_var_1,&local_var_2);\n    allocated_memory = allocate_and_initialize_memory(base_address,local_var_1);\n    if (allocated_memory != 0) {\n      *(undefined **)(base_address + 0x28) = function_address;\n      *memory_pointer = allocated_memory;\n      *(ushort *)(memory_pointer + 3) = *(ushort *)(memory_pointer + 3) | 0x80;\n      memory_pointer[4] = allocated_memory;\n      memory_pointer[5] = local_var_1;\n      if ((local_var_2 != (int *)0x0) &&\n         (allocated_memory = initialize_and_check_application(base_address,(int)*(short *)((int)memory_pointer + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(memory_pointer + 3) = *(ushort *)(memory_pointer + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_pointer + 3) = initial_value | *(ushort *)(memory_pointer + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_pointer + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memory_pointer + 3) = *(ushort *)(memory_pointer + 3) & 0xfffc | 2;\n  }\n  *memory_pointer = (int)memory_pointer + 0x47;\n  memory_pointer[4] = (int)memory_pointer + 0x47;\n  memory_pointer[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009eac": "initialize_and_assign_memory_08009eac",
                "param_1": "base_address",
                "param_2": "memory_pointer",
                "local_18": "local_var_1",
                "local_14": "local_var_2",
                "uVar1": "initial_value",
                "iVar2": "allocated_memory",
                "&LAB_08009cd0_1": "function_address",
                "initialize_memory_and_assign_08009e64": "initialize_memory",
                "allocate_and_initialize_memory_08009270": "allocate_and_initialize_memory",
                "initialize_and_check_application_0800a110": "initialize_and_check_application"
            },
            "calling": [
                "FUN_08009a80"
            ],
            "called": [
                "FUN_0800a110",
                "FUN_08009e64",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f2c": {
            "entrypoint": "0x08009f2c",
            "current_name": "find_first_occurrence_08009f2c",
            "code": "\nchar * findFirstOccurrence_08009f2c(char *string,char character,int length)\n\n{\n  char *currentPosition;\n  char *nextPosition;\n  \n  currentPosition = string;\n  do {\n    nextPosition = currentPosition;\n    if (nextPosition == string + length) {\n      return (char *)0x0;\n    }\n    currentPosition = nextPosition + 1;\n  } while (*nextPosition != character);\n  return nextPosition;\n}\n\n",
            "renaming": {
                "FUN_08009f2c": "find_first_occurrence_08009f2c",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "currentPosition",
                "pcVar2": "nextPosition"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f48": {
            "entrypoint": "0x08009f48",
            "current_name": "FUNC_08009f48",
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4a": {
            "entrypoint": "0x08009f4a",
            "current_name": "FUNC_08009f4a",
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009fe8": {
            "entrypoint": "0x08009fe8",
            "current_name": "execute_function_08009fe8",
            "code": "\nint executeFunction_08009fe8(uint functionIndex)\n\n{\n  int *dataPtr;\n  undefined4 result;\n  int codePointer;\n  code *functionPointer;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 in_lr;\n  undefined4 *dataPointerPtr;\n  \n  dataPtr = DAT_20000090;\n  dataPointerPtr = &DAT_20000090;\n  if (0x1f < functionIndex) {\n    *DAT_20000090 = 0x16;\n    return -1;\n  }\n  codePointer = DAT_20000090[0x11];\n  if ((codePointer != 0) && (functionPointer = *(code **)(codePointer + functionIndex * 4), functionPointer != (code *)0x0)) {\n    if (functionPointer != (code *)0x1) {\n      if (functionPointer == (code *)0xffffffff) {\n        *DAT_20000090 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(codePointer + functionIndex * 4) = 0;\n      (*functionPointer)(functionIndex);\n    }\n    return 0;\n  }\n  result = thunk_check_success_0800887c(DAT_20000090);\n  DAT_20000a38 = 0;\n  codePointer = initialize_data_0800886c(result,functionIndex,functionIndex,0,dataPointerPtr,unaff_r4,unaff_r5,in_lr);\n  if ((codePointer == -1) && (DAT_20000a38 != 0)) {\n    *dataPtr = DAT_20000a38;\n  }\n  return codePointer;\n}\n\n",
            "renaming": {
                "FUN_08009fe8": "execute_function_08009fe8",
                "param_1": "functionIndex",
                "piVar1": "dataPtr",
                "uVar2": "result",
                "iVar3": "codePointer",
                "pcVar4": "functionPointer",
                "puVar5": "dataPointerPtr"
            },
            "calling": [
                "FUN_08009b5c"
            ],
            "called": [
                "FUN_0800886c",
                "thunk_FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800887c": {
            "entrypoint": "0x0800a01c",
            "current_name": "get_return_value_thunk_0800887c",
            "code": "\nuint32_t getReturnValue_thunk_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800887c": "get_return_value_thunk_0800887c",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [
                "FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a020": {
            "entrypoint": "0x0800a020",
            "current_name": "update_error_code_0800a020",
            "code": "\nvoid updateErrorCode_0800a020(undefined4 errorContainer,int dataContainer)\n\n{\n  int errorCode;\n  uint updatedValue;\n  bool isErrorCodeValid;\n  \n  errorCode = initialize_and_assign_error_code_0800a168(errorContainer,(int)*(short *)(dataContainer + 0xe));\n  isErrorCodeValid = -1 < errorCode;\n  if (isErrorCodeValid) {\n    updatedValue = *(int *)(dataContainer + 0x54) + errorCode;\n  }\n  else {\n    updatedValue = *(ushort *)(dataContainer + 0xc) & 0xffffefff;\n  }\n  if (isErrorCodeValid) {\n    *(uint *)(dataContainer + 0x54) = updatedValue;\n  }\n  if (!isErrorCodeValid) {\n    *(short *)(dataContainer + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a020": "update_error_code_0800a020",
                "param_1": "errorContainer",
                "param_2": "dataContainer",
                "iVar1": "errorCode",
                "uVar2": "updatedValue",
                "bVar3": "isErrorCodeValid"
            },
            "calling": [],
            "called": [
                "FUN_0800a168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a042": {
            "entrypoint": "0x0800a042",
            "current_name": "check_and_process_data_0800a042",
            "code": "\nvoid checkAndProcessData_0800a042(int *output,int data,undefined4 param,undefined4 param2)\n\n{\n  int result;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    initialize_and_check_app_0800a130(output,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  DAT_20000a38 = 0;\n  result = process_data_0800885c((int)*(short *)(data + 0xe),param,param2,param2,param2,unused1,\n                       unused2,unused3);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *output = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a042": "check_and_process_data_0800a042",
                "param_1": "output",
                "param_2": "data",
                "param_3": "param",
                "param_4": "param2",
                "iVar1": "result",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "in_lr": "unused3"
            },
            "calling": [],
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a07a": {
            "entrypoint": "0x0800a07a",
            "current_name": "initialize_and_check_0800a07a",
            "code": "\nvoid initialize_and_check_0800a07a(undefined4 arg1,int arg2)\n\n{\n  int result;\n  ushort modifiedValue;\n  bool isError;\n  \n  result = initialize_and_check_0800a07a_app_0800a130(arg1,(int)*(short *)(arg2 + 0xe));\n  isError = result == -1;\n  if (isError) {\n    modifiedValue = *(ushort *)(arg2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(arg2 + 0x54) = result;\n    modifiedValue = *(ushort *)(arg2 + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(arg2 + 0xc) = modifiedValue;\n  }\n  if (!isError) {\n    *(ushort *)(arg2 + 0xc) = modifiedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a07a": "initialize_and_check_0800a07a",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "result",
                "uVar2": "modifiedValue",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_0800a130"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0ec": {
            "entrypoint": "0x0800a0ec",
            "current_name": "initialize_and_assign_memory_0800a0ec",
            "code": "\nvoid initialize_and_assign_memory_0800a0ec(int *result,undefined4 size_param,undefined4 init_val_param,undefined4 extra_param)\n\n{\n  int init_result;\n  \n  DAT_20000a38 = 0;\n  init_result = initialize_memory_08008846(size_param,init_val_param,init_val_param,0,extra_param);\n  if ((init_result == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0ec": "initialize_and_assign_memory_0800a0ec",
                "param_1": "result",
                "param_2": "size_param",
                "param_3": "init_val_param",
                "param_4": "extra_param",
                "iVar1": "init_result"
            },
            "calling": [
                "FUN_08009e64"
            ],
            "called": [
                "FUN_08008846"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a110": {
            "entrypoint": "0x0800a110",
            "current_name": "initialize_and_check_application_0800a110",
            "code": "\nvoid initialize_and_check_application_0800a110(int *result_ptr,undefined4 value)\n\n{\n  int status;\n  \n  DAT_20000a38 = 0;\n  status = initialize_application_08008850(value);\n  if ((status == -1) && (DAT_20000a38 != 0)) {\n    *result_ptr = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a110": "initialize_and_check_application_0800a110",
                "param_1": "result_ptr",
                "param_2": "value",
                "iVar1": "status"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08008850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a130": {
            "entrypoint": "0x0800a130",
            "current_name": "initialize_and_check_app_0800a130",
            "code": "\nvoid initialize_and_check_app_0800a130(int *app_error,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int app_init_result;\n  \n  DAT_20000a38 = 0;\n  app_init_result = initialize_app_08008854(param_2,param_3,param_4,param_4,param_4);\n  if ((app_init_result == -1) && (DAT_20000a38 != 0)) {\n    *app_error = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a130": "initialize_and_check_app_0800a130",
                "param_1": "app_error",
                "iVar1": "app_init_result"
            },
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a154": {
            "entrypoint": "0x0800a154",
            "current_name": "calculate_offset_0800a154",
            "code": "\nint calculateOffset_0800a154(undefined4 ignoredParameter,int offset)\n\n{\n  int newOffset;\n  \n  newOffset = *(int *)(offset + -4) + -4;\n  if (*(int *)(offset + -4) < 0) {\n    newOffset = newOffset + *(int *)(offset + newOffset);\n  }\n  return newOffset;\n}\n\n",
            "renaming": {
                "FUN_0800a154": "calculate_offset_0800a154",
                "param_1": "ignoredParameter",
                "param_2": "offset",
                "iVar1": "newOffset"
            },
            "calling": [
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a168": {
            "entrypoint": "0x0800a168",
            "current_name": "initialize_and_assign_error_code_0800a168",
            "code": "\nvoid initializeAndAssignErrorCode_0800a168(int *errorCodePointer,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  DAT_20000a38 = 0;\n  result = initialize_08008858(arg1,arg2,arg3,arg3,arg3);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *errorCodePointer = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a168": "initialize_and_assign_error_code_0800a168",
                "param_1": "errorCodePointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800a020"
            ],
            "called": [
                "FUN_08008858"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a18c": {
            "entrypoint": "0x0800a18c",
            "current_name": "initialize_variables_0800a18c",
            "code": "\nvoid initializeVariables_0800a18c(void)\n\n{\n  code *functionPointer;\n  \n  functionPointer = initializeVariables_0800a18c;\n  execute_function_08009b5c();\n  if (-1 < DAT_200009c0 << 0x1f) {\n    DAT_200009c0 = 1;\n  }\n  if (-1 < DAT_200009bc << 0x1f) {\n    DAT_200009bc = 1;\n  }\n  if (-1 < DAT_200009b8 << 0x1f) {\n    DAT_200009b8 = 1;\n  }\n  if (-1 < DAT_200009b4 << 0x1f) {\n    DAT_200009b4 = 1;\n  }\n  if (-1 < DAT_200009b0 << 0x1f) {\n    DAT_200009b0 = 1;\n  }\n  if (-1 < DAT_200009ac << 0x1f) {\n    DAT_200009ac = 1;\n  }\n  if (-1 < DAT_200009a8 << 0x1f) {\n    DAT_200009a8 = 1;\n  }\n  if (-1 < DAT_200009a4 << 0x1f) {\n    DAT_200009a4 = 1;\n  }\n  if (-1 < DAT_200009a0 << 0x1f) {\n    DAT_200009a0 = 1;\n  }\n  if (-1 < DAT_2000099c << 0x1f) {\n    DAT_2000099c = 1;\n  }\n  if (-1 < DAT_20000998 << 0x1f) {\n    DAT_20000998 = 1;\n  }\n  if (-1 < DAT_20000994 << 0x1f) {\n    DAT_20000994 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x0800a224. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a18c": "initialize_variables_0800a18c",
                "UNRECOVERED_JUMPTABLE": "functionPointer"
            },
            "calling": [
                "FUN_08009084"
            ],
            "called": [
                "FUN_08009b5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a424": {
            "entrypoint": "0x0800a424",
            "current_name": "FUNC_0800a424",
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "calling": [
                "FUN_0800010c",
                "FUN_08009148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800a430": {
            "entrypoint": "0x0800a430",
            "current_name": "FUNC_0800a430",
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 207252,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_080005e0",
            "FUN_08002400",
            "FUN_08002580",
            "FUN_0800267c",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_0800291c",
            "FUN_08002a30",
            "FUN_08002c2c",
            "FUN_08002ec4",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_0800307a",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_0800322c",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_0800344a",
            "FUN_080036ac",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005840",
            "FUN_08005a1c",
            "FUN_08005a68",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005fe8",
            "FUN_080060c4",
            "FUN_08006262",
            "FUN_08006420",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006d24",
            "FUN_08007306",
            "FUN_08007332",
            "FUN_0800735a",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007718",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_08007ede",
            "FUN_08007f78",
            "FUN_080086e8",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008afa",
            "FUN_08008c20",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008df8",
            "FUN_08008ef4",
            "FUN_08008f3c",
            "FUN_08009108",
            "FUN_08009148",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_080095a8",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_080099a4",
            "FUN_08009f2c",
            "thunk_FUN_0800887c",
            "FUN_0800a154"
        ],
        [
            "FUN_0800018c",
            "FUN_080004d4",
            "FUN_08001c08",
            "FUN_080026b0",
            "FUN_08002948",
            "FUN_08002ce0",
            "FUN_08002ddc",
            "FUN_08003106",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800325a",
            "FUN_080033cc",
            "FUN_080036d8",
            "FUN_08003a20",
            "FUN_08003b8c",
            "FUN_08005460",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005aa4",
            "FUN_08005cb4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080066e8",
            "FUN_08006ca8",
            "FUN_08007110",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_08007320",
            "FUN_0800734a",
            "FUN_08007376",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007e74",
            "FUN_08007f0e",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008694",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_08008e14",
            "FUN_080090c2",
            "FUN_080091a0",
            "FUN_08009698",
            "FUN_08009918",
            "FUN_0800997e",
            "FUN_08009cdc",
            "FUN_08009fe8",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a168"
        ],
        [
            "FUN_08002a58",
            "FUN_08002c1e",
            "FUN_08002dbc",
            "FUN_08002df6",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08003158",
            "FUN_080032a2",
            "FUN_08003474",
            "FUN_08003724",
            "FUN_08003aa0",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_080045c0",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004f3c",
            "FUN_080058ac",
            "FUN_080058d2",
            "FUN_08005bb8",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08006060",
            "FUN_08006538",
            "FUN_080067ac",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006e68",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008d30",
            "FUN_08008f78",
            "FUN_08009270",
            "FUN_08009b5c",
            "FUN_08009e64",
            "FUN_0800a020",
            "FUN_0800a07a"
        ],
        [
            "FUN_08000be8",
            "FUN_08002ac0",
            "FUN_08002e26",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002f14",
            "FUN_08002fca",
            "FUN_080035b8",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08005084",
            "FUN_080052f0",
            "FUN_08006092",
            "FUN_0800674e",
            "FUN_080069ec",
            "FUN_080071e4",
            "FUN_08008b66",
            "FUN_08008d8c",
            "FUN_08009190",
            "FUN_08009908",
            "FUN_08009d24",
            "FUN_08009eac"
        ],
        [
            "FUN_08000ef8",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_08002acc",
            "FUN_08002e44",
            "FUN_08005188",
            "FUN_08006d80",
            "FUN_080072fa",
            "FUN_08008990"
        ],
        [
            "FUN_08001bf8",
            "FUN_08002b68",
            "FUN_08003002",
            "FUN_080036a2",
            "FUN_08008880"
        ],
        [
            "FUN_08000488",
            "FUN_08002c00",
            "FUN_08008f0e"
        ],
        [
            "FUN_08002c14"
        ],
        [
            "FUN_08001c18"
        ],
        [
            "FUN_080022f8"
        ],
        [
            "FUN_0800a18c"
        ],
        [
            "FUN_08009084"
        ],
        [
            "FUN_08009094"
        ],
        [
            "FUN_080042f0"
        ],
        [
            "FUN_08009a80",
            "FUN_08009c7c",
            "FUN_08009db0"
        ],
        [
            "FUN_08009d50"
        ],
        [
            "FUN_0800932c"
        ],
        [
            "FUN_08009358"
        ],
        [
            "FUN_0800937c"
        ],
        [
            "FUN_08009124",
            "FUN_080098d8"
        ],
        [
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080077b0",
            "FUN_08008078",
            "FUN_080090cc"
        ],
        [
            "FUN_08002968",
            "FUN_080075dc",
            "FUN_080076e0",
            "FUN_080084b0",
            "FUN_08008c44"
        ],
        [
            "FUN_08002578",
            "FUN_08002a1c",
            "FUN_08003048",
            "FUN_08007118",
            "FUN_08007648",
            "FUN_08008500"
        ],
        [
            "FUN_0800242c",
            "FUN_08002644",
            "FUN_08002a26",
            "FUN_0800885c",
            "FUN_080088e0"
        ],
        [
            "FUN_08000214",
            "FUN_0800021a",
            "FUN_08000588",
            "FUN_080025ac",
            "FUN_0800a042"
        ],
        [
            "FUN_08002634"
        ],
        [
            "FUN_08000500"
        ],
        [
            "FUN_080005f8"
        ],
        [
            "FUN_08000a64",
            "FUN_08000aec"
        ],
        [
            "FUN_08001b48",
            "FUN_08001cd0"
        ],
        [
            "FUN_08008f1c"
        ]
    ],
    "locked_functions": []
}