{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "update_completed_status_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 updateCompletedStatus_0800010c(undefined4 input)\n\n{\n  if ((char)completionStatus == '\\0') {\n    completionStatus._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "update_completed_status_0800010c",
                "param_1": "input",
                "completed_8667": "completionStatus"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000130": {
            "entrypoint": "0x08000130",
            "current_name": "FUNC_08000130",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000134) */\n/* WARNING: Removing unreachable block (ram,0x0800014e) */\n/* WARNING: Removing unreachable block (ram,0x08000144) */\n/* WARNING: Removing unreachable block (ram,0x08000160) */\n/* WARNING: Removing unreachable block (ram,0x08000154) */\n\nvoid FUNC_08000130(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000130": "FUNC_08000130"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "get_string_length_08000178",
            "code": "\nsize_t get_string_length_08000178(char *string)\n\n{\n  char current_character;\n  char *next_character;\n  char *current_position;\n  \n  current_position = string;\n  do {\n    next_character = current_position + 1;\n    current_character = *current_position;\n    current_position = next_character;\n  } while (current_character != '\\0');\n  return (size_t)(next_character + (-1 - (int)string));\n}\n\n",
            "renaming": {
                "FUN_08000178": "get_string_length_08000178",
                "__s": "string",
                "cVar1": "current_character",
                "pcVar2": "next_character",
                "pcVar3": "current_position"
            },
            "calling": [
                "sendString",
                "setFirmwareNameAndVersion",
                "printNumber"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "interrupt_and_return_08000188",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t interrupt_and_return_08000188(uint32_t a0,uint32_t a1,int32_t a2)\n\n{\n  software_interrupt(0x3f);\n  return a0;\n}\n\n",
            "renaming": {
                "FUN_08000188": "interrupt_and_return_08000188"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800018c": {
            "entrypoint": "0x0800018c",
            "current_name": "check_for_afl_call_0800018c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint checkForAflCall_0800018c(int inputTicks)\n\n{\n  uint32_t result;\n  \n  if (isHyperCallDisabled != 0) {\n    return 0;\n  }\n  result = aflCall(1,inputTicks,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800018c": "check_for_afl_call_0800018c",
                "ticks": "inputTicks",
                "uVar1": "result",
                "noHyperCall": "isHyperCallDisabled"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001a8": {
            "entrypoint": "0x080001a8",
            "current_name": "update_pin_state_080001a8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updatePinState_080001a8(byte pinNumber,int pinValue)\n\n{\n  bool isPinValid;\n  byte pinMode;\n  uint pinUnsigned;\n  uint32_t digitalPinNumber;\n  \n  pinUnsigned = (uint)pinNumber;\n  if (pinUnsigned < 0x3c) {\n    if (pinUnsigned < 0x3c) {\n      if ((&digitalPin)[pinUnsigned] == NC) {\n        isPinValid = false;\n      }\n      else {\n        digitalPinNumber = pinNumberNametoDigitalPin((&digitalPin)[pinUnsigned]);\n        if (digitalPinNumber == 0) {\n          isPinValid = false;\n        }\n        else {\n          digitalPinNumber = pinNumberNametoDigitalPin((&digitalPin)[pinUnsigned]);\n          if (digitalPinNumber == 1) {\n            isPinValid = false;\n          }\n          else {\n            isPinValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isPinValid = false;\n    }\n  }\n  else {\n    isPinValid = false;\n  }\n  if ((isPinValid) && (pinMode = firmata::FirmataClass::getPinMode(&Firmata,pinNumber), pinMode == '\\x01')) {\n    firmata::FirmataClass::setPinState(&Firmata,pinNumber,pinValue);\n    digitalWrite(pinUnsigned,pinValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001a8": "update_pin_state_080001a8",
                "pin": "pinNumber",
                "value": "pinValue",
                "bVar1": "isPinValid",
                "bVar2": "pinMode",
                "ulPin": "pinUnsigned",
                "uVar3": "digitalPinNumber"
            },
            "calling": [],
            "called": [
                "digitalWrite",
                "pinNametoDigitalPin",
                "getPinMode",
                "setPinState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000214": {
            "entrypoint": "0x08000214",
            "current_name": "handle_pin_operation_08000214",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handlePinOperation_08000214(byte pinNumber,int operationValue)\n\n{\n  bool isServo;\n  byte pinMode;\n  _Bool isValidPin;\n  uint unsignedPin;\n  uint32_t digitalPinValue;\n  void *servoInstance;\n  \n  unsignedPin = (uint)pinNumber;\n  if (0x3b < unsignedPin) {\n    return;\n  }\n  pinMode = firmata::FirmataClass::getPinMode(&firmataInstance,pinNumber);\n  if (pinMode == '\\x03') {\n    if (unsignedPin < 0x3c) {\n      if ((&pinConfig)[unsignedPin] == NoConnection) {\n        isValidPin = false;\n      }\n      else {\n        digitalPinValue = pinNumberNametoDigitalPin((&pinConfig)[unsignedPin]);\n        if (digitalPinValue == 0) {\n          isValidPin = false;\n        }\n        else {\n          digitalPinValue = pinNumberNametoDigitalPin((&pinConfig)[unsignedPin]);\n          if (digitalPinValue == 1) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = pinNumber_in_pinNumbermap((&pinConfig)[unsignedPin],(ConflictingPinMap *)&PwmPinMap);\n          }\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n    if (isValidPin != false) {\n      writeAnalog(unsignedPin,operationValue);\n    }\n    firmata::FirmataClass::setPinState(&firmataInstance,pinNumber,operationValue);\n  }\n  else if (pinMode == '\\x04') {\n    if (unsignedPin < 0x3c) {\n      if ((&pinConfig)[unsignedPin] == NoConnection) {\n        isServo = false;\n      }\n      else {\n        digitalPinValue = pinNumberNametoDigitalPin((&pinConfig)[unsignedPin]);\n        if (digitalPinValue == 0) {\n          isServo = false;\n        }\n        else {\n          digitalPinValue = pinNumberNametoDigitalPin((&pinConfig)[unsignedPin]);\n          if (digitalPinValue == 1) {\n            isServo = false;\n          }\n          else {\n            isServo = true;\n          }\n        }\n      }\n    }\n    else {\n      isServo = false;\n    }\n    if (isServo) {\n      Servo::write(servos + servoPinMapping[unsignedPin],operationValue,servoInstance,(size_t)servos);\n    }\n    firmata::FirmataClass::setPinState(&firmataInstance,pinNumber,operationValue);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000214": "handle_pin_operation_08000214",
                "pin": "pinNumber",
                "value": "operationValue",
                "bVar1": "isServo",
                "bVar2": "pinMode",
                "_Var3": "isValidPin",
                "ulPin": "unsignedPin",
                "uVar4": "digitalPinValue",
                "in_r2": "servoInstance",
                "&Firmata": "&firmataInstance",
                "NC": "NoConnection",
                "&digitalPin": "&pinConfig",
                "PinMap_conflict": "ConflictingPinMap",
                "&PinMap_PWM": "&PwmPinMap",
                "analogWrite": "writeAnalog",
                "servoPinMap": "servoPinMapping"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "getPinMode",
                "write",
                "setPinState",
                "analogWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002ec": {
            "entrypoint": "0x080002ec",
            "current_name": "set_digital_output_080002ec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setDigitalOutput_080002ec(byte pinNumber,int outputValue)\n\n{\n  bool isPinConfigured;\n  byte pinMode;\n  uint portNumber;\n  uint32_t digitalPinNumber;\n  int pinState;\n  byte outputPin;\n  uint32_t currentPin;\n  uint bitmask;\n  byte lastPin;\n  uint upperLimit;\n  byte currentOutputPin;\n  byte currentOutputPin_1;\n  uint32_t basePin;\n  uint outputMask;\n  byte currentOutputValue;\n  \n  portNumber = (uint)pinNumber;\n  if (portNumber < 5) {\n    upperLimit = (portNumber + 1 & 0x1f) * 8;\n    if (0x3c < upperLimit) {\n      upperLimit = 0x3c;\n    }\n    outputMask = 0;\n    bitmask = 1;\n    basePin = (portNumber & 0x1f) * 8;\n    for (currentPin = basePin; currentPin < upperLimit; currentPin = currentPin + 1 & 0xff) {\n      if (currentPin < 0x3c) {\n        if ((&digitalPin)[currentPin] == NC) {\n          isPinConfigured = false;\n        }\n        else {\n          digitalPinNumber = currentOutputPinNametoDigitalPin((&digitalPin)[currentPin]);\n          if (digitalPinNumber == 0) {\n            isPinConfigured = false;\n          }\n          else {\n            digitalPinNumber = currentOutputPinNametoDigitalPin((&digitalPin)[currentPin]);\n            if (digitalPinNumber == 1) {\n              isPinConfigured = false;\n            }\n            else {\n              isPinConfigured = true;\n            }\n          }\n        }\n      }\n      else {\n        isPinConfigured = false;\n      }\n      if (isPinConfigured) {\n        outputPin = (byte)currentPin;\n        pinMode = firmata::FirmataClass::getPinMode(&Firmata,outputPin);\n        if ((pinMode != '\\x01') &&\n           (pinMode = firmata::FirmataClass::getPinMode(&Firmata,outputPin), pinMode != '\\0')) {\n          isPinConfigured = false;\n        }\n        if (isPinConfigured) {\n          portNumber = (uint)((bitmask & outputValue) != 0);\n          pinMode = firmata::FirmataClass::getPinMode(&Firmata,outputPin);\n          if (pinMode == '\\x01') {\n            outputMask = bitmask | outputMask;\n          }\n          else {\n            pinMode = firmata::FirmataClass::getPinMode(&Firmata,outputPin);\n            if (pinMode == '\\0') {\n              if (portNumber == 0) {\n                isPinConfigured = false;\n              }\n              else {\n                pinState = firmata::FirmataClass::getPinState(&Firmata,outputPin);\n                if (pinState == 1) {\n                  isPinConfigured = false;\n                }\n              }\n            }\n            else {\n              isPinConfigured = false;\n            }\n            if (isPinConfigured) {\n              currentOutputPinMode(currentPin,2);\n            }\n          }\n          firmata::FirmataClass::setPinState(&Firmata,outputPin,portNumber);\n        }\n      }\n      bitmask = (bitmask & 0x7f) << 1;\n    }\n    if ((outputMask & 1) != 0) {\n      digitalWrite(basePin,outputValue & 1);\n    }\n    if ((outputMask & 2) != 0) {\n      digitalWrite(basePin + 1,outputValue & 2);\n    }\n    if ((outputMask & 4) != 0) {\n      digitalWrite(basePin + 2,outputValue & 4);\n    }\n    if ((outputMask & 8) != 0) {\n      digitalWrite(basePin + 3,outputValue & 8);\n    }\n    if ((outputMask & 0x10) != 0) {\n      digitalWrite(basePin + 4,outputValue & 0x10);\n    }\n    if ((outputMask & 0x20) != 0) {\n      digitalWrite(basePin + 5,outputValue & 0x20);\n    }\n    if ((outputMask & 0x40) != 0) {\n      digitalWrite(basePin + 6,outputValue & 0x40);\n    }\n    if ((outputMask & 0x80) != 0) {\n      digitalWrite(basePin + 7,outputValue & 0x80);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002ec": "set_digital_output_080002ec",
                "port": "pinNumber",
                "value": "outputValue",
                "bVar1": "isPinConfigured",
                "bVar2": "pinMode",
                "uVar3": "portNumber",
                "uVar4": "digitalPinNumber",
                "iVar5": "pinState",
                "pin_00": "outputPin",
                "ulPin": "currentPin",
                "uVar6": "bitmask",
                "uVar7": "upperLimit",
                "pin": "currentOutputPin",
                "pin_1": "currentOutputPin_1",
                "ulPin_00": "basePin",
                "uVar8": "outputMask",
                "pinValue": "currentOutputValue"
            },
            "calling": [],
            "called": [
                "digitalWrite",
                "getPinState",
                "pinNametoDigitalPin",
                "getPinMode",
                "setPinState",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000488": {
            "entrypoint": "0x08000488",
            "current_name": "manage_analog_input_08000488",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid manageAnalogInput_08000488(byte analogPinNumber,int pinValue)\n\n{\n  uint convertedPin;\n  uint32_t readValue;\n  \n  convertedPin = (uint)analogPinNumber;\n  if (convertedPin < 0xe) {\n    if (pinValue == 0) {\n      analogInputsToReport = analogInputsToReport & ~(1 << convertedPin);\n      return;\n    }\n    analogInputsToReport = 1 << convertedPin | analogInputsToReport;\n    if (!isResetting) {\n      readValue = analogRead(convertedPin);\n      firmata::FirmataClass::sendAnalog(&Firmata,analogPinNumber,readValue);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000488": "manage_analog_input_08000488",
                "analogPin": "analogPinNumber",
                "value": "pinValue",
                "ulPin": "convertedPin",
                "value_00": "readValue"
            },
            "calling": [
                "setPinModeCallback"
            ],
            "called": [
                "analogRead",
                "sendAnalog"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d4": {
            "entrypoint": "0x080004d4",
            "current_name": "initialize_servos_080004d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServos_080004d4(int initializeFlag,int priority)\n\n{\n  int iterator;\n  Servo *currentServo;\n  \n  if (initializeFlag != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    currentServo = allServos;\n    for (iterator = 0xb; -1 < iterator; iterator = iterator + -1) {\n      Servo::Servo(currentServo);\n      currentServo = currentServo + 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004d4": "initialize_servos_080004d4",
                "__initialize_p": "initializeFlag",
                "__priority": "priority",
                "iVar1": "iterator",
                "this": "currentServo",
                "servos": "allServos"
            },
            "calling": [
                "_GLOBAL__sub_I_analogInputsToReport"
            ],
            "called": [
                "Servo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000500": {
            "entrypoint": "0x08000500",
            "current_name": "initialize_servo_08000500",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServo_08000500(byte servoPin,int minimumPulse,int maximumPulse)\n\n{\n  uint convertedPin;\n  \n  convertedPin = (uint)servoPin;\n  if (0xb < totalServos) {\n    firmata::FirmataClass::sendString(firmataInstance,\"Max servoArray attachServoed\");\n    return;\n  }\n  if (detachedServoTracker == 0) {\n    pinToServoMap[convertedPin] = totalServos;\n    totalServos = totalServos + '\\x01';\n  }\n  else {\n    pinToServoMap[convertedPin] = (&DAT_2000011f)[detachedServoTracker];\n    detachedServoTracker = detachedServoTracker + 0xff;\n  }\n  if ((0 < minimumPulse) && (0 < maximumPulse)) {\n    Servo::attachServo(servoArray + pinToServoMap[convertedPin],convertedPin,minimumPulse,maximumPulse);\n    return;\n  }\n  Servo::attachServo(servoArray + pinToServoMap[convertedPin],convertedPin);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000500": "initialize_servo_08000500",
                "pin": "servoPin",
                "minPulse": "minimumPulse",
                "maxPulse": "maximumPulse",
                "pin_00": "convertedPin",
                "servoCount": "totalServos",
                "servoPinMap": "pinToServoMap",
                "detachedServoCount": "detachedServoTracker",
                "servos": "servoArray",
                "attach": "attachServo",
                "&Firmata": "firmataInstance"
            },
            "calling": [
                "setPinModeCallback",
                "sysexCallback"
            ],
            "called": [
                "attach",
                "attach",
                "sendString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000588": {
            "entrypoint": "0x08000588",
            "current_name": "detach_servo_08000588",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid detachServo_08000588(byte inputPin)\n\n{\n  Servo::detach(servoArray + pinMap[inputPin]);\n  if ((pinMap[inputPin] == totalServoCount) && (totalServoCount != '\\0')) {\n    totalServoCount = totalServoCount + 0xff;\n  }\n  else if (totalServoCount != '\\0') {\n    totalDetachedServoCount = totalDetachedServoCount + 1;\n    (&DAT_2000011f)[totalDetachedServoCount] = pinMap[inputPin];\n  }\n  pinMap[inputPin] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000588": "detach_servo_08000588",
                "pin": "inputPin",
                "servos": "servoArray",
                "servoPinMap": "pinMap",
                "servoCount": "totalServoCount",
                "detachedServoCount": "totalDetachedServoCount"
            },
            "calling": [
                "setPinModeCallback",
                "sysexCallback"
            ],
            "called": [
                "detach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "disable_i2_c_080005e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disableI2C_080005e0(void)\n\n{\n  isI2CEnabled = false;\n  queryIndex = -1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "disable_i2_c_080005e0"
            },
            "calling": [
                "systemResetCallback",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005f8": {
            "entrypoint": "0x080005f8",
            "current_name": "configure_pin_mode_080005f8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configurePinMode_080005f8(byte pinNumber,int newMode)\n\n{\n  byte currentMode;\n  PinNameConflict PVar2;\n  bool isDigital;\n  bool isServoAttached;\n  _Bool isPinInMap;\n  uint unsignedPin;\n  uint32_t unsignedVar;\n  char i2cEnabled;\n  uint derivedPin;\n  \n  unsignedPin = (uint)pinNumber;\n  currentMode = firmata::FirmataClass::getPinMode(&Firmata,pinNumber);\n  if (currentMode != '\\x7f') {\n    currentMode = firmata::FirmataClass::getPinMode(&Firmata,pinNumber);\n    if (currentMode == '\\x06') {\n      if (isI2CEnabled == false) {\n        i2cEnabled = '\\0';\n      }\n      else {\n        i2cEnabled = isI2CEnabled;\n        if (newMode == 6) {\n          i2cEnabled = '\\0';\n        }\n      }\n    }\n    else {\n      i2cEnabled = '\\0';\n    }\n    if (i2cEnabled != '\\0') {\n      disableI2CPins();\n    }\n    if (unsignedPin < 0x3c) {\n      if ((&digitalPin)[unsignedPin] == NoConnection) {\n        isDigital = false;\n      }\n      else {\n        unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n        if (unsignedVar == 0) {\n          isDigital = false;\n        }\n        else {\n          unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (unsignedVar == 1) {\n            isDigital = false;\n          }\n          else if (newMode == 4) {\n            isDigital = false;\n          }\n          else {\n            isDigital = true;\n          }\n        }\n      }\n    }\n    else {\n      isDigital = false;\n    }\n    if (isDigital) {\n      if (servoPinMap[unsignedPin] < 0xc) {\n        isDigital = Servo::attached(servoArray + servoPinMap[unsignedPin]);\n      }\n      else {\n        isDigital = false;\n      }\n      if (isDigital != false) {\n        detachServo(pinNumber);\n      }\n    }\n    derivedPin = unsignedPin - 0x2e & 0xff;\n    if (derivedPin < 0xe) {\n      if (unsignedPin < 0x3c) {\n        PVar2 = (&digitalPin)[unsignedPin];\n      }\n      else {\n        PVar2 = NoConnection;\n      }\n      unsignedVar = pinNumberNametoDigitalPin(PVar2);\n      if (unsignedVar == 0) {\n        isDigital = false;\n      }\n      else {\n        if (unsignedPin < 0x3c) {\n          PVar2 = (&digitalPin)[unsignedPin];\n        }\n        else {\n          PVar2 = NoConnection;\n        }\n        unsignedVar = pinNumberNametoDigitalPin(PVar2);\n        if (unsignedVar == 1) {\n          isDigital = false;\n        }\n        else {\n          isDigital = true;\n        }\n      }\n    }\n    else {\n      isDigital = false;\n    }\n    if (isDigital) {\n      reportAnalogCallback((byte)derivedPin,(uint)(newMode == 2));\n    }\n    if (unsignedPin < 0x3c) {\n      if ((&digitalPin)[unsignedPin] == NoConnection) {\n        isDigital = false;\n      }\n      else {\n        unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n        if (unsignedVar == 0) {\n          isDigital = false;\n        }\n        else {\n          unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (unsignedVar == 1) {\n            isDigital = false;\n          }\n          else {\n            isDigital = true;\n          }\n        }\n      }\n    }\n    else {\n      isDigital = false;\n    }\n    if (isDigital) {\n      if ((newMode == 0) || (newMode == 0xb)) {\n        portConfigInputArray[pinNumber >> 3] = portConfigInputArray[pinNumber >> 3] | (byte)(1 << (unsignedPin & 7));\n      }\n      else {\n        portConfigInputArray[pinNumber >> 3] = portConfigInputArray[pinNumber >> 3] & ~(byte)(1 << (unsignedPin & 7));\n      }\n    }\n    firmata::FirmataClass::setPinState(&Firmata,pinNumber,0);\n    switch(newMode) {\n    case 0:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NoConnection) {\n          isDigital = false;\n        }\n        else {\n          unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (unsignedVar == 0) {\n            isDigital = false;\n          }\n          else {\n            unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (unsignedVar == 1) {\n              isDigital = false;\n            }\n            else {\n              isDigital = true;\n            }\n          }\n        }\n      }\n      else {\n        isDigital = false;\n      }\n      if (isDigital) {\n        pinNumberMode(unsignedPin,0);\n        firmata::FirmataClass::setPinMode(&Firmata,pinNumber,'\\0');\n        return;\n      }\n      break;\n    case 1:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NoConnection) {\n          isDigital = false;\n        }\n        else {\n          unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (unsignedVar == 0) {\n            isDigital = false;\n          }\n          else {\n            unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (unsignedVar == 1) {\n              isDigital = false;\n            }\n            else {\n              isDigital = true;\n            }\n          }\n        }\n      }\n      else {\n        isDigital = false;\n      }\n      if (isDigital) {\n        currentMode = firmata::FirmataClass::getPinMode(&Firmata,pinNumber);\n        if (currentMode == '\\x03') {\n          digitalWrite(unsignedPin,0);\n        }\n        pinNumberMode(unsignedPin,1);\n        firmata::FirmataClass::setPinMode(&Firmata,pinNumber,'\\x01');\n        return;\n      }\n      break;\n    case 2:\n      if (derivedPin < 0xe) {\n        if (unsignedPin < 0x3c) {\n          PVar2 = (&digitalPin)[unsignedPin];\n        }\n        else {\n          PVar2 = NoConnection;\n        }\n        unsignedVar = pinNumberNametoDigitalPin(PVar2);\n        if (unsignedVar == 0) {\n          isDigital = false;\n        }\n        else {\n          if (unsignedPin < 0x3c) {\n            PVar2 = (&digitalPin)[unsignedPin];\n          }\n          else {\n            PVar2 = NoConnection;\n          }\n          unsignedVar = pinNumberNametoDigitalPin(PVar2);\n          if (unsignedVar == 1) {\n            isDigital = false;\n          }\n          else {\n            isDigital = true;\n          }\n        }\n      }\n      else {\n        isDigital = false;\n      }\n      if (isDigital) {\n        if (unsignedPin < 0x3c) {\n          if ((&digitalPin)[unsignedPin] == NoConnection) {\n            isDigital = false;\n          }\n          else {\n            unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (unsignedVar == 0) {\n              isDigital = false;\n            }\n            else {\n              unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n              if (unsignedVar == 1) {\n                isDigital = false;\n              }\n            }\n          }\n        }\n        else {\n          isDigital = false;\n        }\n        if (isDigital) {\n          pinNumberMode(unsignedPin,0);\n        }\n        firmata::FirmataClass::setPinMode(&Firmata,pinNumber,'\\x02');\n        return;\n      }\n      break;\n    case 3:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NoConnection) {\n          isPinInMap = false;\n        }\n        else {\n          unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (unsignedVar == 0) {\n            isPinInMap = false;\n          }\n          else {\n            unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (unsignedVar == 1) {\n              isPinInMap = false;\n            }\n            else {\n              isPinInMap = pinNumber_in_pinNumbermap((&digitalPin)[unsignedPin],(PinMapConflict *)&PinMap_PWM);\n            }\n          }\n        }\n      }\n      else {\n        isPinInMap = false;\n      }\n      if (isPinInMap != false) {\n        pinNumberMode(unsignedPin,1);\n        analogWrite(unsignedPin,0);\n        firmata::FirmataClass::setPinMode(&Firmata,pinNumber,'\\x03');\n        return;\n      }\n      break;\n    case 4:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NoConnection) {\n          isDigital = false;\n        }\n        else {\n          unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (unsignedVar == 0) {\n            isDigital = false;\n          }\n          else {\n            unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (unsignedVar == 1) {\n              isDigital = false;\n            }\n            else {\n              isDigital = true;\n            }\n          }\n        }\n      }\n      else {\n        isDigital = false;\n      }\n      if (isDigital) {\n        firmata::FirmataClass::setPinMode(&Firmata,pinNumber,'\\x04');\n        if ((servoPinMap[unsignedPin] != 0xff) &&\n           (isServoAttached = Servo::attached(servoArray + servoPinMap[unsignedPin]), isServoAttached)) {\n          isDigital = false;\n        }\n        if (isDigital) {\n          attachServo(pinNumber,-1,-1);\n          return;\n        }\n      }\n      break;\n    default:\n      firmata::FirmataClass::sendString(&Firmata,\"Unknown pinNumber newMode\");\n      break;\n    case 6:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NoConnection) {\n          isPinInMap = false;\n        }\n        else {\n          unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (unsignedVar == 0) {\n            isPinInMap = false;\n          }\n          else {\n            unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (unsignedVar == 1) {\n              isPinInMap = false;\n            }\n            else {\n              isPinInMap = pinNumber_in_pinNumbermap((&digitalPin)[unsignedPin],(PinMapConflict *)&PinMap_I2C_SDA);\n              if (!isPinInMap) {\n                isPinInMap = pinNumber_in_pinNumbermap((&digitalPin)[unsignedPin],(PinMapConflict *)&PinMap_I2C_SCL);\n              }\n            }\n          }\n        }\n      }\n      else {\n        isPinInMap = false;\n      }\n      if (isPinInMap != false) {\n        firmata::FirmataClass::setPinMode(&Firmata,pinNumber,'\\x06');\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NoConnection) {\n          isDigital = false;\n        }\n        else {\n          unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (unsignedVar == 0) {\n            isDigital = false;\n          }\n          else {\n            unsignedVar = pinNumberNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (unsignedVar == 1) {\n              isDigital = false;\n            }\n            else {\n              isDigital = true;\n            }\n          }\n        }\n      }\n      else {\n        isDigital = false;\n      }\n      if (isDigital) {\n        pinNumberMode(unsignedPin,2);\n        firmata::FirmataClass::setPinMode(&Firmata,pinNumber,'\\v');\n        firmata::FirmataClass::setPinState(&Firmata,pinNumber,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005f8": "configure_pin_mode_080005f8",
                "pin": "pinNumber",
                "mode": "newMode",
                "bVar1": "currentMode",
                "PinName_conflict": "PinNameConflict",
                "bVar3": "isDigital",
                "bVar4": "isServoAttached",
                "_Var5": "isPinInMap",
                "ulPin": "unsignedPin",
                "uVar6": "unsignedVar",
                "cVar7": "i2cEnabled",
                "uVar8": "derivedPin",
                "servos": "servoArray",
                "NC": "NoConnection",
                "portConfigInputs": "portConfigInputArray",
                "PinMap_conflict": "PinMapConflict"
            },
            "calling": [
                "systemResetCallback",
                "enableI2CPins",
                "sysexCallback"
            ],
            "called": [
                "attached",
                "disableI2CPins",
                "setPinMode",
                "setPinState",
                "analogWrite",
                "reportAnalogCallback",
                "digitalWrite",
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "detachServo",
                "getPinMode",
                "sendString",
                "pinMode",
                "attachServo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a64": {
            "entrypoint": "0x08000a64",
            "current_name": "initialize_i2_c_08000a64",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeI2C_08000a64(void)\n\n{\n  _Bool isValidPin;\n  uint32_t digitalPinValue;\n  uint index;\n  \n  for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n    if (index < 0x3c) {\n      if ((digitalPins)[index] == NoConnection) {\n        isValidPin = false;\n      }\n      else {\n        digitalPinValue = getDigitalPin((digitalPins)[index]);\n        if (digitalPinValue == 0) {\n          isValidPin = false;\n        }\n        else {\n          digitalPinValue = getDigitalPin((digitalPins)[index]);\n          if (digitalPinValue == 1) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = isPinInPinmap((digitalPins)[index],(PinMap_conflict *)I2C_SDA_PinMap);\n            if (!isValidPin) {\n              isValidPin = isPinInPinmap((digitalPins)[index],(PinMap_conflict *)I2C_SCL_PinMap);\n            }\n          }\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n    if (isValidPin != false) {\n      setPinMode((byte)index,6);\n    }\n  }\n  isI2CEnabled = true;\n  initializeWire;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a64": "initialize_i2_c_08000a64",
                "uVar3": "index",
                "_Var1": "isValidPin",
                "uVar2": "digitalPinValue",
                "&digitalPin": "digitalPins",
                "NC": "NoConnection",
                "pinNametoDigitalPin": "getDigitalPin",
                "pin_in_pinmap": "isPinInPinmap",
                "&PinMap_I2C_SDA": "I2C_SDA_PinMap",
                "&PinMap_I2C_SCL": "I2C_SCL_PinMap",
                "setPinModeCallback": "setPinMode",
                "TwoWire::begin(&Wire)": "initializeWire"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "begin",
                "setPinModeCallback",
                "pinNametoDigitalPin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "initialize_reset_procedure_08000aec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeResetProcedure_08000aec(void)\n\n{\n  bool bVar1;\n  PinName_conflict PVar2;\n  uint32_t uVar3;\n  byte i;\n  uint uVar4;\n  byte i_1;\n  \n  resetting = true;\n  if (I2CEnabled) {\n    disableI2CPins();\n  }\n  for (uVar4 = 0; uVar4 < 5; uVar4 = uVar4 + 1 & 0xff) {\n    reportedPins[uVar4] = '\\0';\n    inputConfigurations[uVar4] = '\\0';\n    previousPins[uVar4] = '\\0';\n  }\n  for (uVar4 = 0; uVar4 < 0x3c; uVar4 = uVar4 + 1 & 0xff) {\n    if ((uVar4 - 0x2e & 0xff) < 0xe) {\n      if (uVar4 < 0x3c) {\n        PVar2 = (&pinList)[uVar4];\n      }\n      else {\n        PVar2 = NotConnected;\n      }\n      uVar3 = convertPinNametoDigitalPin(PVar2);\n      if (uVar3 == 0) {\n        bVar1 = false;\n      }\n      else {\n        if (uVar4 < 0x3c) {\n          PVar2 = (&pinList)[uVar4];\n        }\n        else {\n          PVar2 = NotConnected;\n        }\n        uVar3 = convertPinNametoDigitalPin(PVar2);\n        if (uVar3 == 1) {\n          bVar1 = false;\n        }\n        else {\n          bVar1 = true;\n        }\n      }\n    }\n    else {\n      bVar1 = false;\n    }\n    if (bVar1) {\n      setPinModeCallback((byte)uVar4,2);\n    }\n    else {\n      if ((((uVar4 < 0x3c) && ((&pinList)[uVar4] != NotConnected)) &&\n          (uVar3 = convertPinNametoDigitalPin((&pinList)[uVar4]), uVar3 != 0)) &&\n         (uVar3 = convertPinNametoDigitalPin((&pinList)[uVar4]), uVar3 != 1)) {\n        bVar1 = true;\n      }\n      if (bVar1) {\n        setPinModeCallback((byte)uVar4,1);\n      }\n    }\n    servoPinMapping[uVar4] = 0xff;\n  }\n  inputsToReport = 0;\n  detachedServos = '\\0';\n  servoCounter = '\\0';\n  resetting = false;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "initialize_reset_procedure_08000aec",
                "isResetting": "resetting",
                "isI2CEnabled": "I2CEnabled",
                "reportPINs": "reportedPins",
                "portConfigInputs": "inputConfigurations",
                "previousPINs": "previousPins",
                "digitalPin": "pinList",
                "NC": "NotConnected",
                "pinNametoDigitalPin": "convertPinNametoDigitalPin",
                "servoPinMap": "servoPinMapping",
                "analogInputsToReport": "inputsToReport",
                "detachedServoCount": "detachedServos",
                "servoCount": "servoCounter"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pinNametoDigitalPin",
                "setPinModeCallback",
                "disableI2CPins"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000be8": {
            "entrypoint": "0x08000be8",
            "current_name": "send_digital_port_if_needed_08000be8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid sendDigitalPortIfNeeded_08000be8(byte portNum,byte portVal,byte shouldForceSend)\n\n{\n  byte inputConfigAndValue;\n  \n  inputConfigAndValue = inputConfig[portNum] & portVal;\n  if ((shouldForceSend != '\\0') || ((uint)inputConfigAndValue != (uint)previousInputValues[portNum])) {\n    firmata::FirmataClass::sendDigitalPort(firmataInstance,portNum,(uint)inputConfigAndValue);\n    previousInputValues[portNum] = inputConfigAndValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000be8": "send_digital_port_if_needed_08000be8",
                "portNumber": "portNum",
                "portValue": "portVal",
                "forceSend": "shouldForceSend",
                "bVar1": "inputConfigAndValue",
                "portConfigInputs": "inputConfig",
                "previousPINs": "previousInputValues",
                "&Firmata": "firmataInstance"
            },
            "calling": [
                "checkDigitalInputs",
                "reportDigitalCallback"
            ],
            "called": [
                "sendDigitalPort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c18": {
            "entrypoint": "0x08000c18",
            "current_name": "update_port_config_08000c18",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updatePortConfig_08000c18(byte portNumber,int newValue)\n\n{\n  byte configInput;\n  bool isPinEnabled;\n  uint32_t pinToCheck;\n  int readResult;\n  uchar pinNumber;\n  uint portIndex;\n  byte updatedPortValue;\n  \n  portIndex = (uint)portNumber;\n  if ((portIndex < 5) && (reportNumberPINs[portIndex] = (byte)newValue, newValue != 0)) {\n    configInput = portNumberConfigInputs[portIndex];\n    portIndex = (portIndex & 0x1f) * 8;\n    if (portIndex < 0x3c) {\n      if ((&digitalPin)[portIndex] == NC) {\n        updatedPortValue = 0;\n      }\n      else {\n        pinToCheck = pinNumberNametoDigitalPin((&digitalPin)[portIndex]);\n        if (pinToCheck == 0) {\n          updatedPortValue = 0;\n        }\n        else {\n          pinToCheck = pinNumberNametoDigitalPin((&digitalPin)[portIndex]);\n          if (pinToCheck == 1) {\n            updatedPortValue = 0;\n          }\n          else if ((configInput & 1) == 0) {\n            updatedPortValue = 0;\n          }\n          else {\n            readResult = digitalRead(portIndex);\n            if (readResult == 0) {\n              updatedPortValue = 0;\n            }\n            else {\n              updatedPortValue = 1;\n            }\n          }\n        }\n      }\n    }\n    else {\n      updatedPortValue = 0;\n    }\n    if (portIndex + 1 < 0x3c) {\n      if ((&DAT_0800a909)[portIndex] == NC) {\n        isPinEnabled = false;\n      }\n      else {\n        pinToCheck = pinNumberNametoDigitalPin((&DAT_0800a909)[portIndex]);\n        if (pinToCheck == 0) {\n          isPinEnabled = false;\n        }\n        else {\n          pinToCheck = pinNumberNametoDigitalPin((&DAT_0800a909)[portIndex]);\n          if (pinToCheck == 1) {\n            isPinEnabled = false;\n          }\n          else if ((configInput & 2) == 0) {\n            isPinEnabled = false;\n          }\n          else {\n            readResult = digitalRead(portIndex + 1);\n            if (readResult == 0) {\n              isPinEnabled = false;\n            }\n            else {\n              isPinEnabled = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      isPinEnabled = false;\n    }\n    if (isPinEnabled) {\n      updatedPortValue = updatedPortValue | 2;\n    }\n    if (portIndex + 2 < 0x3c) {\n      if ((&DAT_0800a90a)[portIndex] == NC) {\n        isPinEnabled = false;\n      }\n      else {\n        pinToCheck = pinNumberNametoDigitalPin((&DAT_0800a90a)[portIndex]);\n        if (pinToCheck == 0) {\n          isPinEnabled = false;\n        }\n        else {\n          pinToCheck = pinNumberNametoDigitalPin((&DAT_0800a90a)[portIndex]);\n          if (pinToCheck == 1) {\n            isPinEnabled = false;\n          }\n          else if ((configInput & 4) == 0) {\n            isPinEnabled = false;\n          }\n          else {\n            readResult = digitalRead(portIndex + 2);\n            if (readResult == 0) {\n              isPinEnabled = false;\n            }\n            else {\n              isPinEnabled = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      isPinEnabled = false;\n    }\n    if (isPinEnabled) {\n      updatedPortValue = updatedPortValue | 4;\n    }\n    if (portIndex + 3 < 0x3c) {\n      if ((&DAT_0800a90b)[portIndex] == NC) {\n        isPinEnabled = false;\n      }\n      else {\n        pinToCheck = pinNumberNametoDigitalPin((&DAT_0800a90b)[portIndex]);\n        if (pinToCheck == 0) {\n          isPinEnabled = false;\n        }\n        else {\n          pinToCheck = pinNumberNametoDigitalPin((&DAT_0800a90b)[portIndex]);\n          if (pinToCheck == 1) {\n            isPinEnabled = false;\n          }\n          else if ((configInput & 8) == 0) {\n            isPinEnabled = false;\n          }\n          else {\n            readResult = digitalRead(portIndex + 3);\n            if (readResult == 0) {\n              isPinEnabled = false;\n            }\n            else {\n              isPinEnabled = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      isPinEnabled = false;\n    }\n    if (isPinEnabled) {\n      updatedPortValue = updatedPortValue | 8;\n    }\n    if (portIndex + 4 < 0x3c) {\n      if ((&DAT_0800a90c)[portIndex] == NC) {\n        isPinEnabled = false;\n      }\n      else {\n        pinToCheck = pinNumberNametoDigitalPin((&DAT_0800a90c)[portIndex]);\n        if (pinToCheck == 0) {\n          isPinEnabled = false;\n        }\n        else {\n          pinToCheck = pinNumberNametoDigitalPin((&DAT_0800a90c)[portIndex]);\n          if (pinToCheck == 1) {\n            isPinEnabled = false;\n          }\n          else if ((configInput & 0x10) == 0) {\n            isPinEnabled = false;\n          }\n          else {\n            readResult = digitalRead(portIndex + 4);\n            if (readResult == 0) {\n              isPinEnabled = false;\n            }\n            else {\n              isPinEnabled = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      isPinEnabled = false;\n    }\n    if (isPinEnabled) {\n      updatedPortValue = updatedPortValue | 0x10;\n    }\n    if (portIndex + 5 < 0x3c) {\n      if ((&DAT_0800a90d)[portIndex] == NC) {\n        isPinEnabled = false;\n      }\n      else {\n        pinToCheck = pinNumberNametoDigitalPin((&DAT_0800a90d)[portIndex]);\n        if (pinToCheck == 0) {\n          isPinEnabled = false;\n        }\n        else {\n          pinToCheck = pinNumberNametoDigitalPin((&DAT_0800a90d)[portIndex]);\n          if (pinToCheck == 1) {\n            isPinEnabled = false;\n          }\n          else if ((configInput & 0x20) == 0) {\n            isPinEnabled = false;\n          }\n          else {\n            readResult = digitalRead(portIndex + 5);\n            if (readResult == 0) {\n              isPinEnabled = false;\n            }\n            else {\n              isPinEnabled = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      isPinEnabled = false;\n    }\n    if (isPinEnabled) {\n      updatedPortValue = updatedPortValue | 0x20;\n    }\n    if (portIndex + 6 < 0x3c) {\n      if ((&DAT_0800a90e)[portIndex] == NC) {\n        isPinEnabled = false;\n      }\n      else {\n        pinToCheck = pinNumberNametoDigitalPin((&DAT_0800a90e)[portIndex]);\n        if (pinToCheck == 0) {\n          isPinEnabled = false;\n        }\n        else {\n          pinToCheck = pinNumberNametoDigitalPin((&DAT_0800a90e)[portIndex]);\n          if (pinToCheck == 1) {\n            isPinEnabled = false;\n          }\n          else if ((configInput & 0x40) == 0) {\n            isPinEnabled = false;\n          }\n          else {\n            readResult = digitalRead(portIndex + 6);\n            if (readResult == 0) {\n              isPinEnabled = false;\n            }\n            else {\n              isPinEnabled = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      isPinEnabled = false;\n    }\n    if (isPinEnabled) {\n      updatedPortValue = updatedPortValue | 0x40;\n    }\n    if (portIndex + 7 < 0x3c) {\n      if ((&DAT_0800a90f)[portIndex] == NC) {\n        isPinEnabled = false;\n      }\n      else {\n        pinToCheck = pinNumberNametoDigitalPin((&DAT_0800a90f)[portIndex]);\n        if (pinToCheck == 0) {\n          isPinEnabled = false;\n        }\n        else {\n          pinToCheck = pinNumberNametoDigitalPin((&DAT_0800a90f)[portIndex]);\n          if (pinToCheck == 1) {\n            isPinEnabled = false;\n          }\n          else if ((configInput & 0x80) == 0) {\n            isPinEnabled = false;\n          }\n          else {\n            readResult = digitalRead(portIndex + 7);\n            if (readResult == 0) {\n              isPinEnabled = false;\n            }\n            else {\n              isPinEnabled = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      isPinEnabled = false;\n    }\n    if (isPinEnabled) {\n      updatedPortValue = updatedPortValue | 0x80;\n    }\n    outputPort(portNumber,updatedPortValue,'\\x01');\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c18": "update_port_config_08000c18",
                "port": "portNumber",
                "value": "newValue",
                "bVar1": "configInput",
                "bVar2": "isPinEnabled",
                "uVar3": "pinToCheck",
                "iVar4": "readResult",
                "pin": "pinNumber",
                "uVar5": "portIndex",
                "portValue": "updatedPortValue"
            },
            "calling": [],
            "called": [
                "outputPort",
                "pinNametoDigitalPin",
                "digitalRead"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ef8": {
            "entrypoint": "0x08000ef8",
            "current_name": "read_digital_inputs_08000ef8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n/* WARNING: Unknown calling convention */\n\nvoid readDigitalInputs_08000ef8(void)\n\n{\n  bool isPinHigh;\n  byte portConfigByte;\n  uint32_t digitalPin;\n  int pinValue;\n  byte outputByte;\n  \n  portConfigByte = portConfig[0];\n  if (reportPins[0] != '\\0') {\n    digitalPin = pinNametoDigitalPin(PA_3);\n    if (digitalPin == 0) {\n      outputByte = 0;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_3);\n      if (digitalPin == 1) {\n        outputByte = 0;\n      }\n      else if ((portConfigByte & 1) == 0) {\n        outputByte = 0;\n      }\n      else {\n        pinValue = digitalRead(0);\n        if (pinValue == 0) {\n          outputByte = 0;\n        }\n        else {\n          outputByte = 1;\n        }\n      }\n    }\n    digitalPin = pinNametoDigitalPin(PA_2);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_2);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 2) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(1);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 2;\n    }\n    digitalPin = pinNametoDigitalPin(PA_10);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_10);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 4) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(2);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 4;\n    }\n    digitalPin = pinNametoDigitalPin(PB_3);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_3);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 8) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(3);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 8;\n    }\n    digitalPin = pinNametoDigitalPin(PB_5);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_5);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x10) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(4);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x10;\n    }\n    digitalPin = pinNametoDigitalPin(PB_4);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_4);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x20) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(5);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x20;\n    }\n    digitalPin = pinNametoDigitalPin(PB_10);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_10);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x40) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(6);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x40;\n    }\n    digitalPin = pinNametoDigitalPin(PA_8);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_8);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x80) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(7);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x80;\n    }\n    outputPort('\\0',outputByte,'\\0');\n  }\n  portConfigByte = portConfig[1];\n  if (reportPins[1] != '\\0') {\n    digitalPin = pinNametoDigitalPin(PA_9);\n    if (digitalPin == 0) {\n      outputByte = 0;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_9);\n      if (digitalPin == 1) {\n        outputByte = 0;\n      }\n      else if ((portConfigByte & 1) == 0) {\n        outputByte = 0;\n      }\n      else {\n        pinValue = digitalRead(8);\n        if (pinValue == 0) {\n          outputByte = 0;\n        }\n        else {\n          outputByte = 1;\n        }\n      }\n    }\n    digitalPin = pinNametoDigitalPin(PC_7);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_7);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 2) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(9);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 2;\n    }\n    digitalPin = pinNametoDigitalPin(PB_6);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_6);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 4) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(10);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 4;\n    }\n    digitalPin = pinNametoDigitalPin(PA_7);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_7);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 8) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0xb);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 8;\n    }\n    digitalPin = pinNametoDigitalPin(PA_6);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_6);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x10) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0xc);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x10;\n    }\n    digitalPin = pinNametoDigitalPin(PA_5);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_5);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x20) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0xd);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x20;\n    }\n    digitalPin = pinNametoDigitalPin(PB_9);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_9);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x40) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0xe);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x40;\n    }\n    digitalPin = pinNametoDigitalPin(PB_8);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_8);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x80) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0xf);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x80;\n    }\n    outputPort('\\x01',outputByte,'\\0');\n  }\n  portConfigByte = portConfig[2];\n  if (reportPins[2] != '\\0') {\n    digitalPin = pinNametoDigitalPin(PC_10);\n    if (digitalPin == 0) {\n      outputByte = 0;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_10);\n      if (digitalPin == 1) {\n        outputByte = 0;\n      }\n      else if ((portConfigByte & 1) == 0) {\n        outputByte = 0;\n      }\n      else {\n        pinValue = digitalRead(0x10);\n        if (pinValue == 0) {\n          outputByte = 0;\n        }\n        else {\n          outputByte = 1;\n        }\n      }\n    }\n    digitalPin = pinNametoDigitalPin(PC_12);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_12);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 2) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x11);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 2;\n    }\n    digitalPin = pinNametoDigitalPin(PA_13);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_13);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 8) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x13);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 8;\n    }\n    digitalPin = pinNametoDigitalPin(PA_14);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_14);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x10) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x14);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x10;\n    }\n    digitalPin = pinNametoDigitalPin(PA_15);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_15);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x20) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x15);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x20;\n    }\n    digitalPin = pinNametoDigitalPin(PB_7);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_7);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x40) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x16);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x40;\n    }\n    digitalPin = pinNametoDigitalPin(PC_13);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_13);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x80) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x17);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x80;\n    }\n    outputPort('\\x02',outputByte,'\\0');\n  }\n  portConfigByte = portConfig[3];\n  if (reportPins[3] != '\\0') {\n    digitalPin = pinNametoDigitalPin(PC_14);\n    if (digitalPin == 0) {\n      outputByte = 0;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_14);\n      if (digitalPin == 1) {\n        outputByte = 0;\n      }\n      else if ((portConfigByte & 1) == 0) {\n        outputByte = 0;\n      }\n      else {\n        pinValue = digitalRead(0x18);\n        if (pinValue == 0) {\n          outputByte = 0;\n        }\n        else {\n          outputByte = 1;\n        }\n      }\n    }\n    digitalPin = pinNametoDigitalPin(PC_15);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_15);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 2) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x19);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 2;\n    }\n    digitalPin = pinNametoDigitalPin(PD_0);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PD_0);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 4) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1a);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 4;\n    }\n    digitalPin = pinNametoDigitalPin(PD_1);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PD_1);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 8) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1b);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 8;\n    }\n    digitalPin = pinNametoDigitalPin(PC_2);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_2);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x10) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1c);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x10;\n    }\n    digitalPin = pinNametoDigitalPin(PC_3);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_3);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x20) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1d);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x20;\n    }\n    digitalPin = pinNametoDigitalPin(PC_11);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_11);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x40) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1e);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x40;\n    }\n    digitalPin = pinNametoDigitalPin(PD_2);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PD_2);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x80) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1f);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x80;\n    }\n    outputPort('\\x03',outputByte,'\\0');\n  }\n  portConfigByte = portConfig[4];\n  if (reportPins[4] != '\\0') {\n    digitalPin = pinNametoDigitalPin(PC_9);\n    if (digitalPin == 0) {\n      outputByte = 0;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_9);\n      if (digitalPin == 1) {\n        outputByte = 0;\n      }\n      else if ((portConfigByte & 1) == 0) {\n        outputByte = 0;\n      }\n      else {\n        pinValue = digitalRead(0x20);\n        if (pinValue == 0) {\n          outputByte = 0;\n        }\n        else {\n          outputByte = 1;\n        }\n      }\n    }\n    digitalPin = pinNametoDigitalPin(PC_8);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_8);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 2) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x21);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 2;\n    }\n    digitalPin = pinNametoDigitalPin(PC_6);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_6);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 4) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x22);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 4;\n    }\n    digitalPin = pinNametoDigitalPin(PC_5);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PC_5);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 8) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x23);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 8;\n    }\n    digitalPin = pinNametoDigitalPin(PA_12);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_12);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x10) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x24);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x10;\n    }\n    digitalPin = pinNametoDigitalPin(PA_11);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PA_11);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x20) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x25);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x20;\n    }\n    digitalPin = pinNametoDigitalPin(PB_12);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_12);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x40) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x26);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x40;\n    }\n    digitalPin = pinNametoDigitalPin(PB_11);\n    if (digitalPin == 0) {\n      isPinHigh = false;\n    }\n    else {\n      digitalPin = pinNametoDigitalPin(PB_11);\n      if (digitalPin == 1) {\n        isPinHigh = false;\n      }\n      else if ((portConfigByte & 0x80) == 0) {\n        isPinHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x27);\n        if (pinValue == 0) {\n          isPinHigh = false;\n        }\n        else {\n          isPinHigh = true;\n        }\n      }\n    }\n    if (isPinHigh) {\n      outputByte = outputByte | 0x80;\n    }\n    outputPort('\\x04',outputByte,'\\0');\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ef8": "read_digital_inputs_08000ef8",
                "portConfigInputs": "portConfig",
                "reportPINs": "reportPins",
                "uVar3": "digitalPin",
                "iVar4": "pinValue",
                "bVar1": "isPinHigh",
                "bVar2": "portConfigByte",
                "bVar5": "outputByte"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "outputPort",
                "pinNametoDigitalPin",
                "digitalRead"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_firmata_08001b48",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeFirmata_08001b48(void)\n\n{\n  firmata::FirmataClass::setFirmwareNameAndVersion\n            (firmataInstance,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/StandardFirmata.ino\",'\\x02',\n             '\\x05');\n  firmata::FirmataClass::attach(firmataInstance,0xe0,analogWriteHandler + 1);\n  firmata::FirmataClass::attach(firmataInstance,0x90,digitalWriteHandler + 1);\n  firmata::FirmataClass::attach(firmataInstance,0xc0,reportAnalogHandler + 1);\n  firmata::FirmataClass::attach(firmataInstance,0xd0,reportDigitalHandler + 1);\n  firmata::FirmataClass::attach(firmataInstance,0xf4,setPinModeHandler + 1);\n  firmata::FirmataClass::attach(firmataInstance,0xf5,setPinValueHandler + 1);\n  firmata::FirmataClass::attach(firmataInstance,0xf0,sysexHandler + 1);\n  firmata::FirmataClass::attach(firmataInstance,0xff,resetSystem);\n  firmata::FirmataClass::begin(firmataInstance,0xe100);\n  resetSystem();\n  launchForkserver(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_firmata_08001b48",
                "&Firmata": "firmataInstance",
                "analogWriteCallback": "analogWriteHandler",
                "digitalWriteCallback": "digitalWriteHandler",
                "reportAnalogCallback": "reportAnalogHandler",
                "reportDigitalCallback": "reportDigitalHandler",
                "setPinModeCallback": "setPinModeHandler",
                "setPinValueCallback": "setPinValueHandler",
                "sysexCallback": "sysexHandler",
                "systemResetCallback": "resetSystem",
                "startForkserver": "launchForkserver"
            },
            "calling": [
                "main"
            ],
            "called": [
                "systemResetCallback",
                "begin",
                "attach",
                "attach",
                "setFirmwareNameAndVersion",
                "startForkserver",
                "attach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001be8": {
            "entrypoint": "0x08001be8",
            "current_name": "initialize_static_variables_08001be8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_static_variables_08001be8(void)\n\n{\n  initialize_static_flags(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001be8": "initialize_static_variables_08001be8",
                "__static_initialization_and_destruction_0": "initialize_static_flags"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bf8": {
            "entrypoint": "0x08001bf8",
            "current_name": "write_data_to_wire_08001bf8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid writeDataToWire_08001bf8(byte byteToSend)\n\n{\n  void *pointer;\n  size_t size;\n  \n  TwocommunicationChannel::write(&communicationChannel,(uint)byteToSend,pointer,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001bf8": "write_data_to_wire_08001bf8",
                "data": "byteToSend",
                "in_r2": "pointer",
                "in_r3": "size",
                "Wire": "communicationChannel"
            },
            "calling": [
                "readAndReportData",
                "sysexCallback"
            ],
            "called": [
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c08": {
            "entrypoint": "0x08001c08",
            "current_name": "read_byte_from_wire_08001c08",
            "code": "\n/* WARNING: Unknown calling convention */\n\nbyte readByteFromWire_08001c08(void)\n\n{\n  ssize_t returnValue;\n  int fileDescriptor;\n  void *buffer;\n  size_t count;\n  \n  returnValue = TwoWire::read(&Wire,fileDescriptor,buffer,count);\n  return (byte)returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001c08": "read_byte_from_wire_08001c08",
                "in_r1": "fileDescriptor",
                "in_r2": "buffer",
                "in_r3": "count",
                "sVar1": "returnValue"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c18": {
            "entrypoint": "0x08001c18",
            "current_name": "process_i2_c_data_08001c18",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid processI2CData_08001c18(byte devAddress,int registerAddress,byte dataLength,byte stopTransmission)\n\n{\n  bool isDataAvailable;\n  byte receivedByte;\n  int receivedDataCount;\n  int availableDataCount;\n  uint expectedDataCount;\n  \n  expectedDataCount = (uint)dataLength;\n  if (registerAddress == -1) {\n    registerAddress = 0;\n  }\n  else {\n    TwoWire::beginTransmission(&Wire,devAddress);\n    wireWrite((byte)registerAddress);\n    TwoWire::endTransmission(&Wire,stopTransmission);\n  }\n  TwoWire::requestFrom(&Wire,devAddress,dataLength);\n  receivedDataCount = TwoWire::available(&Wire);\n  if ((int)expectedDataCount < receivedDataCount) {\n    firmata::FirmataClass::sendString(&Firmata,\"I2C: Too many bytes received\");\n  }\n  else {\n    receivedDataCount = TwoWire::available(&Wire);\n    if (receivedDataCount < (int)expectedDataCount) {\n      firmata::FirmataClass::sendString(&Firmata,\"I2C: Too few bytes received\");\n    }\n  }\n  receivedData[1] = (byte)registerAddress;\n  receivedDataCount = 0;\n  receivedData[0] = devAddress;\n  while( true ) {\n    if (receivedDataCount < (int)expectedDataCount) {\n      availableDataCount = TwoWire::available(&Wire);\n      if (availableDataCount == 0) {\n        isDataAvailable = false;\n      }\n      else {\n        isDataAvailable = true;\n      }\n    }\n    else {\n      isDataAvailable = false;\n    }\n    if (!isDataAvailable) break;\n    receivedByte = readByte();\n    receivedData[receivedDataCount + 2] = receivedByte;\n    receivedDataCount = receivedDataCount + 1;\n  }\n  firmata::FirmataClass::sendSysex(&Firmata,'w',dataLength + '\\x02',receivedData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c18": "process_i2_c_data_08001c18",
                "address": "devAddress",
                "theRegister": "registerAddress",
                "numBytes": "dataLength",
                "stopTX": "stopTransmission",
                "bVar1": "isDataAvailable",
                "bVar2": "receivedByte",
                "iVar3": "receivedDataCount",
                "iVar4": "availableDataCount",
                "uVar5": "expectedDataCount",
                "wireRead": "readByte",
                "i2cRxData": "receivedData"
            },
            "calling": [
                "loop",
                "sysexCallback"
            ],
            "called": [
                "wireRead",
                "sendSysex",
                "beginTransmission",
                "available",
                "requestFrom",
                "sendString",
                "endTransmission",
                "wireWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "improve_firmware_08001cd0",
            "code": "\n/* WARNING: Unknown callinitializeng conventinitializeon */\n\nvoinitialized improveFirmware_08001cd0(byte cmd,byte argc,byte *arguments)\n\n{\n  byte byteVar1;\n  uinitializent8_t deviceAddress;\n  byte byteVar2;\n  byte byteVar3;\n  byte byteVar4;\n  byte slaveAddress;\n  byte data;\n  PinitializenName_conflinitializect pinName;\n  _Bool boolVar;\n  byte byteVar7;\n  uinitializent32_t uintVar;\n  initializent intVar;\n  initializent value;\n  byte pinMode;\n  byte byteVar10;\n  byte stopTransmission;\n  byte initialize;\n  byte initialize1;\n  undefinitializened1 *pointerR3;\n  uinitializent uintVar;\n  uinitializent delayTinitializeme;\n  byte pin1;\n  undefinitializened1 *undefinedVar;\n  sinitializeze_t sizeVar;\n  initializent maximumPulse;\n  byte pinitializen;\n  uinitializent uintVar2;\n  initializent minimumPulse;\n  initializent intVar2;\n  bool boolVar2;\n  \n  uintVar2 = (uinitializent)argc;\n  swinitializetch(cmd) {\n  case 'initialize':\n    finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,0xf0,arguments,(sinitializeze_t)pointerR3);\n    finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,0x6a,arguments,(sinitializeze_t)pointerR3);\n    for (uintVar2 = 0; uintVar2 < 0x3c; uintVar2 = uintVar2 + 1 & 0xff) {\n      uintVar = uintVar2 - 0x2e & 0xff;\n      initializef (uintVar < 0xe) {\n        initializef (uintVar2 < 0x3c) {\n          pointerR3 = &dinitializeginitializetalPinitializen;\n          pinName = (&dinitializeginitializetalPinitializen)[uintVar2];\n        }\n        else {\n          pinName = NC;\n        }\n        uintVar = pinitializenNametoDinitializeginitializetalPinitializen(pinName);\n        initializef (uintVar == 0) {\n          uintVar = 0x7f;\n        }\n        else {\n          initializef (uintVar2 < 0x3c) {\n            pointerR3 = &dinitializeginitializetalPinitializen;\n            pinName = (&dinitializeginitializetalPinitializen)[uintVar2];\n          }\n          else {\n            pinName = NC;\n          }\n          uintVar = pinitializenNametoDinitializeginitializetalPinitializen(pinName);\n          initializef (uintVar == 1) {\n            uintVar = 0x7f;\n          }\n        }\n      }\n      else {\n        uintVar = 0x7f;\n      }\n      finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,uintVar,arguments,(sinitializeze_t)pointerR3);\n    }\n    finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,0xf7,arguments,(sinitializeze_t)pointerR3);\n    break;\n  case 'k':\n    finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,0xf0,arguments,(sinitializeze_t)pointerR3);\n    finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,0x6c,arguments,(sinitializeze_t)pointerR3);\n    for (uintVar2 = 0; uintVar2 < 0x3c; uintVar2 = uintVar2 + 1 & 0xff) {\n      initializef (uintVar2 < 0x3c) {\n        initializef ((&dinitializeginitializetalPinitializen)[uintVar2] == NC) {\n          sizeVar = 0;\n        }\n        else {\n          uintVar = pinitializenNametoDinitializeginitializetalPinitializen((&dinitializeginitializetalPinitializen)[uintVar2]);\n          initializef (uintVar == 0) {\n            sizeVar = 0;\n          }\n          else {\n            uintVar = pinitializenNametoDinitializeginitializetalPinitializen((&dinitializeginitializetalPinitializen)[uintVar2]);\n            initializef (uintVar == 1) {\n              sizeVar = 0;\n            }\n            else {\n              sizeVar = 1;\n            }\n          }\n        }\n      }\n      else {\n        sizeVar = 0;\n      }\n      initializef (sizeVar != 0) {\n        finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,0,arguments,sizeVar);\n        finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,1,arguments,sizeVar);\n        finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,0xb,arguments,sizeVar);\n        finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,1,arguments,sizeVar);\n        finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,1,arguments,sizeVar);\n        finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,1,arguments,sizeVar);\n      }\n      initializef ((uintVar2 - 0x2e & 0xff) < 0xe) {\n        initializef (uintVar2 < 0x3c) {\n          pinName = (&dinitializeginitializetalPinitializen)[uintVar2];\n        }\n        else {\n          pinName = NC;\n        }\n        uintVar = pinitializenNametoDinitializeginitializetalPinitializen(pinName);\n        initializef (uintVar == 0) {\n          undefinedVar = (undefinitializened1 *)0x0;\n        }\n        else {\n          initializef (uintVar2 < 0x3c) {\n            pinName = (&dinitializeginitializetalPinitializen)[uintVar2];\n          }\n          else {\n            pinName = NC;\n          }\n          uintVar = pinitializenNametoDinitializeginitializetalPinitializen(pinName);\n          initializef (uintVar == 1) {\n            undefinedVar = (undefinitializened1 *)0x0;\n          }\n          else {\n            undefinedVar = (undefinitializened1 *)0x1;\n          }\n        }\n      }\n      else {\n        undefinedVar = (undefinitializened1 *)0x0;\n      }\n      initializef (undefinedVar != (undefinitializened1 *)0x0) {\n        finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,2,arguments,(sinitializeze_t)undefinedVar);\n        finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,10,arguments,(sinitializeze_t)undefinedVar);\n      }\n      initializef (uintVar2 < 0x3c) {\n        undefinedVar = &dinitializeginitializetalPinitializen;\n        initializef ((&dinitializeginitializetalPinitializen)[uintVar2] == NC) {\n          boolVar = false;\n        }\n        else {\n          uintVar = pinitializenNametoDinitializeginitializetalPinitializen((&dinitializeginitializetalPinitializen)[uintVar2]);\n          initializef (uintVar == 0) {\n            boolVar = false;\n          }\n          else {\n            undefinedVar = &dinitializeginitializetalPinitializen;\n            uintVar = pinitializenNametoDinitializeginitializetalPinitializen((&dinitializeginitializetalPinitializen)[uintVar2]);\n            initializef (uintVar == 1) {\n              boolVar = false;\n            }\n            else {\n              undefinedVar = &dinitializeginitializetalPinitializen;\n              boolVar = pinitializen_initializen_pinitializenmap((&dinitializeginitializetalPinitializen)[uintVar2],(PinitializenMap_conflinitializect *)&PinitializenMap_PWM);\n            }\n          }\n        }\n      }\n      else {\n        boolVar = false;\n      }\n      initializef (boolVar != false) {\n        finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,3,arguments,(sinitializeze_t)undefinedVar);\n        finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,8,arguments,(sinitializeze_t)undefinedVar);\n      }\n      initializef (uintVar2 < 0x3c) {\n        initializef ((&dinitializeginitializetalPinitializen)[uintVar2] == NC) {\n          sizeVar = 0;\n        }\n        else {\n          uintVar = pinitializenNametoDinitializeginitializetalPinitializen((&dinitializeginitializetalPinitializen)[uintVar2]);\n          initializef (uintVar == 0) {\n            sizeVar = 0;\n          }\n          else {\n            uintVar = pinitializenNametoDinitializeginitializetalPinitializen((&dinitializeginitializetalPinitializen)[uintVar2]);\n            initializef (uintVar == 1) {\n              sizeVar = 0;\n            }\n            else {\n              sizeVar = 1;\n            }\n          }\n        }\n      }\n      else {\n        sizeVar = 0;\n      }\n      initializef (sizeVar != 0) {\n        finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,4,arguments,sizeVar);\n        finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,0xe,arguments,sizeVar);\n      }\n      initializef (uintVar2 < 0x3c) {\n        initializef ((&dinitializeginitializetalPinitializen)[uintVar2] == NC) {\n          pointerR3 = (undefinitializened1 *)0x0;\n        }\n        else {\n          uintVar = pinitializenNametoDinitializeginitializetalPinitializen((&dinitializeginitializetalPinitializen)[uintVar2]);\n          initializef (uintVar == 0) {\n            pointerR3 = (undefinitializened1 *)0x0;\n          }\n          else {\n            uintVar = pinitializenNametoDinitializeginitializetalPinitializen((&dinitializeginitializetalPinitializen)[uintVar2]);\n            initializef (uintVar == 1) {\n              pointerR3 = (undefinitializened1 *)0x0;\n            }\n            else {\n              boolVar = pinitializen_initializen_pinitializenmap((&dinitializeginitializetalPinitializen)[uintVar2],(PinitializenMap_conflinitializect *)&PinitializenMap_I2C_SDA);\n              pointerR3 = (undefinitializened1 *)(uinitializent)boolVar;\n              initializef (pointerR3 == (undefinitializened1 *)0x0) {\n                boolVar = pinitializen_initializen_pinitializenmap((&dinitializeginitializetalPinitializen)[uintVar2],(PinitializenMap_conflinitializect *)&PinitializenMap_I2C_SCL);\n                pointerR3 = (undefinitializened1 *)(uinitializent)boolVar;\n              }\n            }\n          }\n        }\n      }\n      else {\n        pointerR3 = (undefinitializened1 *)0x0;\n      }\n      initializef (pointerR3 != (undefinitializened1 *)0x0) {\n        finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,6,arguments,(sinitializeze_t)pointerR3);\n        finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,1,arguments,(sinitializeze_t)pointerR3);\n      }\n      finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,0x7f,arguments,(sinitializeze_t)pointerR3);\n    }\n    finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,0xf7,arguments,(sinitializeze_t)pointerR3);\n    return;\n  case 'm':\n    initializef (uintVar2 != 0) {\n      byteVar1 = *arguments;\n      finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,0xf0,arguments,(sinitializeze_t)pointerR3);\n      finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,0x6e,arguments,(sinitializeze_t)pointerR3);\n      finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,(uinitializent)byteVar1,arguments,(sinitializeze_t)pointerR3);\n      initializef (byteVar1 < 0x3c) {\n        byteVar7 = finitializermata::FinitializermataClass::getPinitializenMode(&Finitializermata,byteVar1);\n        finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,(uinitializent)byteVar7,arguments,(sinitializeze_t)pointerR3);\n        uintVar2 = finitializermata::FinitializermataClass::getPinitializenState(&Finitializermata,byteVar1);\n        finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,uintVar2 & 0x7f,arguments,(sinitializeze_t)pointerR3);\n        uintVar2 = finitializermata::FinitializermataClass::getPinitializenState(&Finitializermata,byteVar1);\n        pointerR3 = (undefinitializened1 *)0xff80;\n        initializef ((uintVar2 & 0xff80) != 0) {\n          intVar = finitializermata::FinitializermataClass::getPinitializenState(&Finitializermata,byteVar1);\n          finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,(uinitializent)(intVar << 0x12) >> 0x19,arguments,(sinitializeze_t)pointerR3);\n        }\n        uintVar2 = finitializermata::FinitializermataClass::getPinitializenState(&Finitializermata,byteVar1);\n        initializef ((uintVar2 & 0xc000) != 0) {\n          intVar = finitializermata::FinitializermataClass::getPinitializenState(&Finitializermata,byteVar1);\n          finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,(uinitializent)(intVar << 0xb) >> 0x19,arguments,(sinitializeze_t)pointerR3);\n        }\n      }\n      finitializermata::FinitializermataClass::wrinitializete(&Finitializermata,0xf7,arguments,(sinitializeze_t)pointerR3);\n      return;\n    }\n    break;\n  case 'o':\n    initializef (1 < uintVar2) {\n      uintVar = (uinitializent)arguments[1];\n      initializef (2 < uintVar2) {\n        uintVar = uintVar | (uinitializent)arguments[2] << 7;\n      }\n      initializef (3 < uintVar2) {\n        uintVar = uintVar | (uinitializent)arguments[3] << 0xe;\n      }\n      analogWrinitializeteCallback(*arguments,uintVar);\n      return;\n    }\n    break;\n  case 'p':\n    initializef (4 < uintVar2) {\n      byteVar1 = *arguments;\n      uintVar2 = (uinitializent)byteVar1;\n      byteVar7 = arguments[1];\n      byteVar2 = arguments[2];\n      byteVar3 = arguments[3];\n      byteVar4 = arguments[4];\n      initializef (uintVar2 < 0x3c) {\n        initializef ((&dinitializeginitializetalPinitializen)[uintVar2] == NC) {\n          boolVar2 = false;\n        }\n        else {\n          uintVar = pinitializenNametoDinitializeginitializetalPinitializen((&dinitializeginitializetalPinitializen)[uintVar2]);\n          initializef (uintVar == 0) {\n            boolVar2 = false;\n          }\n          else {\n            uintVar = pinitializenNametoDinitializeginitializetalPinitializen((&dinitializeginitializetalPinitializen)[uintVar2]);\n            initializef (uintVar == 1) {\n              boolVar2 = false;\n            }\n            else {\n              boolVar2 = true;\n            }\n          }\n        }\n      }\n      else {\n        boolVar2 = false;\n      }\n      initializef (boolVar2) {\n        initializef (servoPinitializenMap[uintVar2] < 0xc) {\n          boolVar2 = Servo::attached(servos + servoPinitializenMap[uintVar2]);\n        }\n        else {\n          boolVar2 = false;\n        }\n        initializef (boolVar2 != false) {\n          detachServo(byteVar1);\n        }\n        attachServo(byteVar1,(uinitializent)byteVar7 + (uinitializent)byteVar2 * 0x80,(uinitializent)byteVar3 + (uinitializent)byteVar4 * 0x80);\n        setPinitializenModeCallback(byteVar1,4);\n        return;\n      }\n    }\n    break;\n  case 'v':\n    byteVar1 = arguments[1];\n    initializef ((byteVar1 & 0x20) != 0) {\n      finitializermata::FinitializermataClass::sendStrinitializeng(&Finitializermata,\"10-binitializet deviceAddressinitializeng not supported\");\n      return;\n    }\n    deviceAddress = *arguments;\n    boolVar2 = (byteVar1 & 0x40) == 0;\n    initializef ((byteVar1 & 0x18) < 0x19) {\n      swinitializetch(byteVar1 & 0x18) {\n      case 0:\n        TwoWinitializere::beginitializenTransminitializessinitializeon(&Winitializere,deviceAddress);\n        for (uintVar = 2; uintVar < uintVar2; uintVar = uintVar + 2 & 0xff) {\n          winitializereWrinitializete(arguments[uintVar + 1] * -0x80 + arguments[uintVar]);\n        }\n        TwoWinitializere::endTransminitializessinitializeon(&Winitializere);\n        return;\n      case 8:\n        initializef (uintVar2 == 6) {\n          intVar = (uinitializent)arguments[2] + (uinitializent)arguments[3] * 0x80;\n          byteVar10 = arguments[4] + arguments[5] * -0x80;\n        }\n        else {\n          byteVar10 = arguments[2] + arguments[3] * -0x80;\n          intVar = -1;\n        }\n        readAndReportData(deviceAddress,intVar,byteVar10,boolVar2);\n        return;\n      case 0x10:\n        initializef (queryIndex + 1 < 8) {\n          initializef (uintVar2 == 6) {\n            intVar = (uinitializent)arguments[2] + (uinitializent)arguments[3] * 0x80;\n            byteVar10 = arguments[4] + arguments[5] * -0x80;\n          }\n          else {\n            byteVar10 = arguments[2] + arguments[3] * -0x80;\n            intVar = -1;\n          }\n          queryIndex = queryIndex + '\\x01';\n          intVar2 = (initializent)queryIndex;\n          query[intVar2].addr = deviceAddress;\n          query[intVar2].reg = intVar;\n          query[intVar2].bytes = byteVar10;\n          *(bool *)(intVar2 * 0xc + 0x20000191) = boolVar2;\n          return;\n        }\n        finitializermata::FinitializermataClass::sendStrinitializeng(&Finitializermata,\"too many querinitializees\");\n        return;\n      case 0x18:\n        initializef (queryIndex < 1) {\n          queryIndex = -1;\n          return;\n        }\n      }\n      for (uintVar2 = 0; intVar = queryIndex + 1, (initializent)uintVar2 < intVar; uintVar2 = uintVar2 + 1 & 0xff) {\n        initializef (deviceAddress == query[uintVar2].addr) goto LAB_08001e66;\n      }\n      uintVar2 = 0;\nLAB_08001e66:\n      for (; (initializent)uintVar2 < intVar; uintVar2 = uintVar2 + 1 & 0xff) {\n        initializef (uintVar2 < 8) {\n          intVar2 = uintVar2 + 1;\n          query[uintVar2].addr = query[intVar2].addr;\n          query[uintVar2].reg = query[intVar2].reg;\n          query[uintVar2].bytes = query[intVar2].bytes;\n          query[uintVar2].stopTransmission = query[intVar2].stopTransmission;\n        }\n      }\n      queryIndex = queryIndex + -1;\n      return;\n    }\n    break;\n  case 'x':\n    uintVar = (uinitializent)*arguments + (uinitializent)arguments[1] * 0x80;\n    initializef ((1 < uintVar2) && (uintVar != 0)) {\n      initialize2cReadDelayTinitializeme = uintVar;\n    }\n    initializef (!initializesI2CEnabled) {\n      enableI2CPinitializens();\n      return;\n    }\n    break;\n  case 'z':\n    initializef ((1 < uintVar2) &&\n       (samplinitializengIntervalue = (uinitializent)*arguments + (uinitializent)arguments[1] * 0x80, samplinitializengIntervalue == 0)) {\n      samplinitializengIntervalue = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "improve_firmware_08001cd0",
                "command": "cmd",
                "argv": "arguments",
                "bVar1": "byteVar1",
                "address": "deviceAddress",
                "bVar2": "byteVar2",
                "bVar3": "byteVar3",
                "bVar4": "byteVar4",
                "PVar5": "pinName",
                "_Var6": "boolVar",
                "bVar7": "byteVar7",
                "uVar8": "uintVar",
                "iVar9": "intVar",
                "val": "value",
                "mode": "pinMode",
                "bVar10": "byteVar10",
                "stopTX": "stopTransmission",
                "i": "initialize",
                "i_1": "initialize1",
                "in_r3": "pointerR3",
                "uVar11": "uintVar",
                "pin_1": "pin1",
                "__n": "undefinedVar",
                "sVar12": "sizeVar",
                "maxPulse": "maximumPulse",
                "uVar13": "uintVar2",
                "minPulse": "minimumPulse",
                "iVar14": "intVar2",
                "bVar15": "boolVar2"
            },
            "calling": [],
            "called": [
                "attached",
                "analogWriteCallback",
                "beginTransmission",
                "readAndReportData",
                "write",
                "getPinState",
                "endTransmission",
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "setPinModeCallback",
                "detachServo",
                "getPinMode",
                "sendString",
                "attachServo",
                "wireWrite",
                "enableI2CPins"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022f8": {
            "entrypoint": "0x080022f8",
            "current_name": "process_and_send_data_080022f8",
            "code": "\n/* WARNING: Unknown callcounterng conventcounteron */\n\nvocounterd processAndSendData_080022f8(vocounterd)\n\n{\n  bool isDigitalOutput;\n  PcounternName_conflcounterct pinConflict;\n  byte pinMode;\n  counternt availableData;\n  ucounternt32_t digitalPin;\n  byte counter;\n  ucounternt analogPinIndex;\n  byte currentAnalogPin;\n  ucounternt processedPin;\n  \n  checkDcountergcountertalInputs();\n  whcounterle (availableData = isAvailable(firmataPtr), availableData != 0) {\n    processInput(firmataPtr);\n  }\n  currentMilliseconds = FIBMUNotConnectedALR();\n  counterf (interval < currentMilliseconds - previousMilliseconds) {\n    previousMilliseconds = previousMilliseconds + interval;\n    for (analogPinIndex = 0; analogPinIndex < 0x3c; analogPinIndex = analogPinIndex + 1 & 0xff) {\n      processedPin = analogPinIndex - 0x2e & 0xff;\n      counterf (processedPin < 0xe) {\n        counterf (analogPinIndex < 0x3c) {\n          pinConflict = (digitalPinPtr)[analogPinIndex];\n        }\n        else {\n          pinConflict = NotConnected;\n        }\n        digitalPin = convertPinNameToDigitalPin(pinConflict);\n        counterf (digitalPin == 0) {\n          isDigitalOutput = false;\n        }\n        else {\n          counterf (analogPinIndex < 0x3c) {\n            pinConflict = (digitalPinPtr)[analogPinIndex];\n          }\n          else {\n            pinConflict = NotConnected;\n          }\n          digitalPin = convertPinNameToDigitalPin(pinConflict);\n          counterf (digitalPin == 1) {\n            isDigitalOutput = false;\n          }\n          else {\n            pinMode = getPinMode(firmataPtr,(byte)analogPinIndex);\n            counterf (pinMode == '\\x02') {\n              isDigitalOutput = true;\n            }\n            else {\n              isDigitalOutput = false;\n            }\n          }\n        }\n      }\n      else {\n        isDigitalOutput = false;\n      }\n      counterf ((isDigitalOutput) && ((analogInputs >> processedPin & 1U) != 0)) {\n        digitalPin = readAnalog(processedPin);\n        sendAnalog(firmataPtr,(byte)processedPin,digitalPin);\n      }\n    }\n    counterf (-1 < index) {\n      for (analogPinIndex = 0; (counternt)analogPinIndex < index + 1; analogPinIndex = analogPinIndex + 1 & 0xff) {\n        readAndReportData(dataQuery[analogPinIndex].addr,dataQuery[analogPinIndex].reg,dataQuery[analogPinIndex].bytes,dataQuery[analogPinIndex].stopTX)\n        ;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022f8": "process_and_send_data_080022f8",
                "bVar1": "isDigitalOutput",
                "PVar2": "pinConflict",
                "bVar3": "pinMode",
                "iVar4": "availableData",
                "uVar5": "digitalPin",
                "i": "counter",
                "uVar6": "analogPinIndex",
                "analogPin": "currentAnalogPin",
                "ulPin": "processedPin",
                "samplingInterval": "interval",
                "currentMillis": "currentMilliseconds",
                "previousMillis": "previousMilliseconds",
                "digitalPin": "digitalPins",
                "NC": "NotConnected",
                "pinNametoDigitalPin": "convertPinNameToDigitalPin",
                "firmata::FirmataClass::available": "isAvailable",
                "firmata::FirmataClass::processInput": "processInput",
                "millis": "getMilliseconds",
                "&digitalPin": "digitalPinPtr",
                "firmata::FirmataClass::getPinMode": "getPinMode",
                "&Firmata": "firmataPtr",
                "analogInputsToReport": "analogInputs",
                "analogRead": "readAnalog",
                "firmata::FirmataClass::sendAnalog": "sendAnalog",
                "queryIndex": "index",
                "query": "dataQuery"
            },
            "calling": [
                "main"
            ],
            "called": [
                "available",
                "analogRead",
                "millis",
                "pinNametoDigitalPin",
                "sendAnalog",
                "checkDigitalInputs",
                "getPinMode",
                "readAndReportData",
                "processInput"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002400": {
            "entrypoint": "0x08002400",
            "current_name": "has_servo_pin_set_08002400",
            "code": "\n/* WARNING: Unknown calling convention */\n\nboolean hasServoPinSet_08002400(sequence16_Sequence_t sequence)\n\n{\n  uint index;\n  \n  index = 0;\n  while( true ) {\n    if (0xb < index) {\n      return false;\n    }\n    if (((byte)servos[(uint)sequence * 0xc + index].Pin & 0x40) != 0) break;\n    index = index + 1 & 0xff;\n  }\n  return true;\n}\n\n",
            "renaming": {
                "FUN_08002400": "has_servo_pin_set_08002400",
                "timer": "sequence",
                "uVar1": "index"
            },
            "calling": [
                "attach",
                "detach"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800242c": {
            "entrypoint": "0x0800242c",
            "current_name": "initialize_timer_0800242c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimer_0800242c(stimer_t *timerObject)\n\n{\n  initializeTimer_0800242cPulse((timerConfig *)timerObject,60000,0x5dc,irqHandler + 1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800242c": "initialize_timer_0800242c",
                "obj": "timerObject",
                "TimerPulseInit": "initializeTimerPulse",
                "stimer_t_conflict": "timerConfig",
                "ServoIrqHandle": "irqHandler"
            },
            "calling": [
                "attach"
            ],
            "called": [
                "TimerPulseInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002444": {
            "entrypoint": "0x08002444",
            "current_name": "update_servo_channel_08002444",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateServoChannel_08002444(stimer_t *servo,uint32_t servoChannel)\n\n{\n  bool isPinValid;\n  uint32_t counter;\n  int offset;\n  uint index;\n  \n  index = (uint)servo->idx;\n  if ((timerChannel[index] & 0x80U) == 0) {\n    offset = index * 0xc;\n    if (timerChannel[index] + offset < (int)(uint)ServoCount) {\n      if (((byte)servos[timerChannel[index] + offset].Pin & 0x40) == 0) {\n        isPinValid = false;\n      }\n      else {\n        isPinValid = true;\n      }\n    }\n    else {\n      isPinValid = false;\n    }\n    if (isPinValid) {\n      digitalWrite((byte)servos[offset + timerChannel[index]].Pin & 0x3f,0);\n    }\n  }\n  else {\n    setTimerCounter((stimer_t_conflict *)servo,0);\n  }\n  timerChannel[index] = timerChannel[index] + '\\x01';\n  offset = index * 0xc;\n  if (timerChannel[index] + offset < (int)(uint)ServoCount) {\n    if (timerChannel[index] < '\\f') {\n      isPinValid = true;\n    }\n    else {\n      isPinValid = false;\n    }\n  }\n  else {\n    isPinValid = false;\n  }\n  if (isPinValid) {\n    if (((byte)servos[timerChannel[index] + offset].Pin & 0x40) != 0) {\n      digitalWrite((byte)servos[timerChannel[index] + offset].Pin & 0x3f,1);\n    }\n    counter = getTimerCounter((stimer_t_conflict *)servo);\n    setCCRRegister((stimer_t_conflict *)servo,servoChannel,\n                   servos[offset + timerChannel[index]].ticks + counter);\n    return;\n  }\n  counter = getTimerCounter((stimer_t_conflict *)servo);\n  if (counter + 4 < 20000) {\n    setCCRRegister((stimer_t_conflict *)servo,servoChannel,20000);\n  }\n  else {\n    counter = getTimerCounter((stimer_t_conflict *)servo);\n    setCCRRegister((stimer_t_conflict *)servo,servoChannel,counter + 4);\n  }\n  timerChannel[index] = -1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002444": "update_servo_channel_08002444",
                "obj": "servo",
                "channel": "servoChannel",
                "bVar1": "isPinValid",
                "uVar2": "counter",
                "iVar3": "offset",
                "uVar4": "index"
            },
            "calling": [],
            "called": [
                "digitalWrite",
                "setCCRRegister",
                "setTimerCounter",
                "getTimerCounter"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002578": {
            "entrypoint": "0x08002578",
            "current_name": "deinit_timer_pulse_08002578",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid deinitTimerPulse_08002578(stimer_t *timerObject)\n\n{\n  TimerPulseDeinit((stimer_t_conflict *)timerObject);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002578": "deinit_timer_pulse_08002578",
                "obj": "timerObject"
            },
            "calling": [
                "detach"
            ],
            "called": [
                "TimerPulseDeinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "initialize_servo_08002580",
            "code": "\n/* DWARF original prototype: Servo *  Servo(Servo * servo) */\n\nServo * __servocall Servo::initializeServo_08002580(Servo *servo)\n\n{\n  uint8_t newServoCount;\n  uint currentServoCount;\n  \n  currentServoCount = (uint)ServoCount;\n  if (0xb < currentServoCount) {\n    servo->servoIndex = 0xff;\n    return servo;\n  }\n  newServoCount = ServoCount + '\\x01';\n  servo->servoIndex = ServoCount;\n  ServoCount = newServoCount;\n  servos[currentServoCount].ticks = 0x5dc;\n  return servo;\n}\n\n",
            "renaming": {
                "this": "servo",
                "uVar1": "newServoCount",
                "uVar2": "currentServoCount",
                "FUN_08002580": "initialize_servo_08002580"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ac": {
            "entrypoint": "0x080025ac",
            "current_name": "attach_servo_080025ac",
            "code": "\n/* DWARF original prototype: uint8_t  attach(Servo * servo, int servoPin, int minimum, int maximum) */\n\nuint8_t __servocall Servo::attachServo_080025ac(Servo *servo,int servoPin,int minimum,int maximum)\n\n{\n  timerSequence currentTimer_00;\n  boolean isActive;\n  timerSequence currentTimer;\n  int tempVar;\n  \n  if (servo->servoIndex < 0xc) {\n    servoPinMode(servoPin,1);\n    servoList[servo->servoIndex].Pin =\n         (servoPinType)((byte)servoList[servo->servoIndex].Pin & 0xc0 | (byte)servoPin & 0x3f);\n    tempVar = -minimum + 0x220;\n    if (tempVar < 0) {\n      tempVar = -minimum + 0x223;\n    }\n    servo->minimum = (int8_t)((uint)(tempVar << 0x16) >> 0x18);\n    tempVar = -maximum + 0x960;\n    if (tempVar < 0) {\n      tempVar = -maximum + 0x963;\n    }\n    servo->maximum = (int8_t)((uint)(tempVar << 0x16) >> 0x18);\n    currentTimer_00 = servo->servoIndex / 0xc;\n    isActive = isTimerActive(currentTimer_00);\n    if (!isActive) {\n      timerIndex = currentTimer_00;\n      initializeISR(&_currentTimer);\n    }\n    servoList[servo->servoIndex].Pin = (servoPinType)((byte)servoList[servo->servoIndex].Pin | 0x40);\n  }\n  return servo->servoIndex;\n}\n\n",
            "renaming": {
                "this": "servo",
                "pin": "servoPin",
                "min": "minimum",
                "max": "maximum",
                "timer16_Sequence_t": "timerSequence",
                "bVar1": "isActive",
                "timer": "currentTimer",
                "iVar2": "tempVar",
                "servos": "servoList",
                "_timer.idx": "timerIndex",
                "initISR": "initializeISR",
                "ServoPin_t": "servoPinType",
                "FUN_080025ac": "attach_servo_080025ac"
            },
            "calling": [
                "attach",
                "attachServo"
            ],
            "called": [
                "isTimerActive",
                "initISR",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002634": {
            "entrypoint": "0x08002634",
            "current_name": "attach_servo_to_pin_08002634",
            "code": "\n/* DWARF original prototype: uint8_t  attach(Servo * servo_instance, int servo_pin) */\n\nuint8_t __servo_instancecall Servo::attach_servo_to_pin_08002634(Servo *servo_instance,int servo_pin)\n\n{\n  uint8_t uVar1;\n  \n  uVar1 = attach(servo_instance,servo_pin,0x220,0x960);\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08002634": "attach_servo_to_pin_08002634",
                "this": "servo_instance",
                "pin": "servo_pin"
            },
            "calling": [
                "attachServo"
            ],
            "called": [
                "attach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002644": {
            "entrypoint": "0x08002644",
            "current_name": "detach_08002644",
            "code": "\n/* DWARF original prototype: void  detach_08002644(Servo * servo) */\n\nvoid __servocall Servo::detach_08002644(Servo *servo)\n\n{\n  byte index;\n  boolean isTimerActive;\n  \n  index = servo->servoIndex;\n  servoArray[index].Pin = (PinType)((byte)servoArray[index].Pin & 0xbf);\n  isTimerActive = checkTimerActive(index / 0xc);\n  if (!isTimerActive) {\n    endISRCallback(&_timer);\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "servo",
                "bVar1": "index",
                "bVar2": "isTimerActive",
                "servos": "servoArray",
                "ServoPin_t": "PinType",
                "isTimerActive": "checkTimerActive",
                "finISR": "endISRCallback",
                "FUN_08002644": "detach_08002644"
            },
            "calling": [
                "detachServo"
            ],
            "called": [
                "isTimerActive",
                "finISR"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800267c": {
            "entrypoint": "0x0800267c",
            "current_name": "set_servo_microseconds_0800267c",
            "code": "\n/* DWARF original prototype: void  writeMicroseconds(Servo * servo, int microseconds) */\n\nvoid __servocall Servo::setServoMicroseconds_0800267c(Servo *servo,int microseconds)\n\n{\n  uint rangeOffset;\n  int maxOffset;\n  \n  if (servo->servoIndex < 0xc) {\n    rangeOffset = (0x88 - servo->min) * 4;\n    if ((rangeOffset - microseconds == 0 || (int)rangeOffset < microseconds) &&\n       (maxOffset = 600 - servo->max, rangeOffset = maxOffset * 4,\n       microseconds == rangeOffset || microseconds + maxOffset * -4 < 0 != SBORROW4(microseconds,rangeOffset))) {\n      rangeOffset = microseconds;\n    }\n    servos[servo->servoIndex].ticks = rangeOffset;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800267c": "set_servo_microseconds_0800267c",
                "this": "servo",
                "value": "microseconds",
                "uVar1": "rangeOffset",
                "iVar2": "maxOffset"
            },
            "calling": [
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026b0": {
            "entrypoint": "0x080026b0",
            "current_name": "map_servo_value_080026b0",
            "code": "\n/* DWARF original prototype: void  write(Servo * servo, int value) */\n\nssize_t __servocall Servo::map_servo_value_080026b0(Servo *servo,int file_descriptor,void *buffer,size_t buffer_size)\n\n{\n  if (file_descriptor < 0x220) {\n    if (file_descriptor < 0) {\n      file_descriptor = 0;\n    }\n    else if (0xb4 < file_descriptor) {\n      file_descriptor = 0xb4;\n    }\n    file_descriptor = map(file_descriptor,0,0xb4,(0x88 - servo->min) * 4,(600 - servo->max) * 4);\n  }\n  writeMicroseconds(servo,file_descriptor);\n  return (ssize_t)servo;\n}\n\n",
            "renaming": {
                "FUN_080026b0": "map_servo_value_080026b0",
                "this": "servo",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__n": "buffer_size"
            },
            "calling": [
                "analogWriteCallback"
            ],
            "called": [
                "writeMicroseconds",
                "map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026f8": {
            "entrypoint": "0x080026f8",
            "current_name": "is_servo_attached_080026f8",
            "code": "\n/* DWARF original prototype: bool  attached(Servo * servoObject) */\n\nbool __servoObjectcall Servo::isServoAttached_080026f8(Servo *servoObject)\n\n{\n  return convertToBool(((uint)(byte)servos[servoObject->servoIndex].Pin << 0x19) >> 0x1f,0);\n}\n\n",
            "renaming": {
                "FUN_080026f8": "is_servo_attached_080026f8",
                "this": "servoObject",
                "SUB41": "convertToBool"
            },
            "calling": [
                "setPinModeCallback",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800270c": {
            "entrypoint": "0x0800270c",
            "current_name": "calculate_available_size_0800270c",
            "code": "\n/* DWARF original prototype: int  available(TwoWire * wireInstance) */\n\nint __wireInstancecall TwoWire::calculateAvailableSize_0800270c(TwoWire *wireInstance)\n\n{\n  return (uint)receivedBufferSize - (uint)currentIndex;\n}\n\n",
            "renaming": {
                "FUN_0800270c": "calculate_available_size_0800270c",
                "this": "wireInstance",
                "rxBufferLength": "receivedBufferSize",
                "rxBufferIndex": "currentIndex"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002720": {
            "entrypoint": "0x08002720",
            "current_name": "read_wire_data_08002720",
            "code": "\n/* DWARF original prototype: int  read(TwoWire * this) */\n\nssize_t this TwoWire::readWireData_08002720(TwoWire *this,int fileDescriptor,void *buffer,size_t numBytes)\n\n{\n  uint currentIndex;\n  \n  currentIndex = (uint)currentIndex;\n  if (currentIndex < bufferLength) {\n    currentIndex = currentIndex + '\\x01';\n    return (uint)buffer[currentIndex];\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_08002720": "read_wire_data_08002720",
                "__thiscall": "this",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numBytes",
                "uVar1": "currentIndex",
                "rxBufferIndex": "currentIndex",
                "rxBufferLength": "bufferLength",
                "rxBuffer": "buffer"
            },
            "calling": [
                "wireRead"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800274c": {
            "entrypoint": "0x0800274c",
            "current_name": "get_peeked_byte_0800274c",
            "code": "\n/* DWARF original prototype: int  peek(TwoWire * wire) */\n\nint __wirecall TwoWire::getPeekedByte_0800274c(TwoWire *wire)\n\n{\n  if ((uint)bufferIndex < (uint)bufferLength) {\n    return (uint)readBuffer[bufferIndex];\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_0800274c": "get_peeked_byte_0800274c",
                "this": "wire",
                "rxBufferIndex": "bufferIndex",
                "rxBufferLength": "bufferLength",
                "rxBuffer": "readBuffer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002774": {
            "entrypoint": "0x08002774",
            "current_name": "handle_on_request_08002774",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid TwoWire::handleOnRequest_08002774(void)\n\n{\n  if (onRequestHandler != (_func_void *)0x0) {\n    transmitBufferIndex = '\\0';\n    transmitBufferLength = '\\0';\n    (*onRequestHandler)();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002774": "handle_on_request_08002774",
                "user_onRequest": "onRequestHandler",
                "txBufferIndex": "transmitBufferIndex",
                "txBufferLength": "transmitBufferLength"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002798": {
            "entrypoint": "0x08002798",
            "current_name": "clear_buffer_08002798",
            "code": "\n/* DWARF original prototype: void  flush(TwoWire * this) */\n\nvoid __thiscall TwoWire::clearBuffer_08002798(TwoWire *this)\n\n{\n  receiveIndex = '\\0';\n  receiveLength = '\\0';\n  if (receiveBuffer != (uint8_t *)0x0) {\n    memset(receiveBuffer,0,(uint)receiveBufferAllocated);\n  }\n  transmitIndex = '\\0';\n  transmitLength = '\\0';\n  if (transmitBuffer != (uint8_t *)0x0) {\n    memset(transmitBuffer,0,(uint)transmitBufferAllocated);\n  }\n  return;\n}\n\n",
            "renaming": {
                "rxBufferIndex": "receiveIndex",
                "rxBufferLength": "receiveLength",
                "rxBuffer": "receiveBuffer",
                "rxBufferAllocated": "receiveBufferAllocated",
                "txBufferIndex": "transmitIndex",
                "txBufferLength": "transmitLength",
                "txBuffer": "transmitBuffer",
                "txBufferAllocated": "transmitBufferAllocated",
                "FUN_08002798": "clear_buffer_08002798"
            },
            "calling": [],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f0": {
            "entrypoint": "0x080027f0",
            "current_name": "write_data_080027f0",
            "code": "\n/* DWARF original prototype: size_t  write(TwoWire * wire, uint8_t * data, size_t quantity) */\n\nssize_t __wirecall TwoWire::writeData_080027f0(TwoWire *wire,int fileDescriptor,void *buffer,size_t quantity)\n\n{\n  I2CStatus iVar1;\n  size_t totalSize;\n  \n  if (isTransmitting == '\\0') {\n    iVar1 = i2c_slave_write_IT((I2CType *)&wire->_i2c,(uint8_t *)fileDescriptor,(uint16_t)buffer);\n    if (iVar1 == I2CStatus_OK) {\n      return (ssize_t)buffer;\n    }\n    return 0;\n  }\n  totalSize = (uint)transmitBufferLength + (int)buffer;\n  if (transmitBufferAllocated < totalSize) {\n    if (totalSize < 0x20) {\n      totalSize = 0x20;\n    }\n    transmitBuffer = (uint8_t *)realloc(transmitBuffer,totalSize);\n    if (transmitBuffer == (uint8_t *)0x0) {\n      transmitBufferAllocated = '\\0';\n    }\n    else {\n      transmitBufferAllocated = (uint8_t)totalSize;\n    }\n  }\n  if (transmitBuffer == (uint8_t *)0x0) {\n    (wire->super_Stream).super_Print.write_error = 1;\n    return 0;\n  }\n  memcpy(transmitBuffer + transmitBufferIndex,(void *)fileDescriptor,(size_t)buffer);\n  transmitBufferIndex = transmitBufferIndex + (char)buffer;\n  transmitBufferLength = transmitBufferIndex;\n  return (ssize_t)buffer;\n}\n\n",
            "renaming": {
                "FUN_080027f0": "write_data_080027f0",
                "this": "wire",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "quantity",
                "i2c_status_e_conflict": "I2CStatus",
                "__size": "totalSize",
                "transmitting": "isTransmitting",
                "i2c_t_conflict": "I2CType",
                "I2C_OK": "I2CStatus_OK",
                "txBufferLength": "transmitBufferLength",
                "txBufferAllocated": "transmitBufferAllocated",
                "txBuffer": "transmitBuffer",
                "txBufferIndex": "transmitBufferIndex"
            },
            "calling": [],
            "called": [
                "i2c_slave_write_IT",
                "realloc",
                "memcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800288c": {
            "entrypoint": "0x0800288c",
            "current_name": "write_data_0800288c",
            "code": "\n/* DWARF original prototype: size_t  write(TwoWire * this, uint8_t data) */\n\nssize_t instance TwoWire::writeData_0800288c(TwoWire *this,int fileDescriptor,void *buffer,size_t bufferSize)\n\n{\n  i2cStatus status;\n  ssize_t result;\n  size_t newSize;\n  uint8_t dataByte;\n  \n  dataByte = (uint8_t)fileDescriptor;\n  if (isTransmitting == '\\0') {\n    status = i2c_slave_write_IT((i2c *)&this->i2cInstance,&dataByte,1);\n    if (status == I2C_SUCCESS) {\n      result = 1;\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    newSize = transmitBufferLength + 1;\n    if (transmitBufferAllocation < newSize) {\n      if (newSize < 0x20) {\n        newSize = 0x20;\n      }\n      transmitBuffer = (uint8_t *)realloc(transmitBuffer,newSize);\n      if (transmitBuffer == (uint8_t *)0x0) {\n        transmitBufferAllocation = '\\0';\n      }\n      else {\n        transmitBufferAllocation = (uint8_t)newSize;\n      }\n    }\n    if (transmitBuffer == (uint8_t *)0x0) {\n      (this->super_Stream).super_Print.write_error = 1;\n      result = 0;\n    }\n    else {\n      transmitBuffer[transmitBufferIndex] = dataByte;\n      transmitBufferIndex = transmitBufferIndex + '\\x01';\n      result = 1;\n      transmitBufferLength = transmitBufferIndex;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800288c": "write_data_0800288c",
                "__thiscall": "instance",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "bufferSize",
                "iVar1": "status",
                "sVar2": "result",
                "__size": "newSize",
                "local_11": "dataByte",
                "transmitting": "isTransmitting",
                "i2c_status_e_conflict": "i2cStatus",
                "i2c_t_conflict": "i2c",
                "_i2c": "i2cInstance",
                "I2C_OK": "I2C_SUCCESS",
                "txBufferLength": "transmitBufferLength",
                "txBufferAllocated": "transmitBufferAllocation",
                "txBuffer": "transmitBuffer",
                "txBufferIndex": "transmitBufferIndex"
            },
            "calling": [
                "wireWrite"
            ],
            "called": [
                "i2c_slave_write_IT",
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800291c": {
            "entrypoint": "0x0800291c",
            "current_name": "initialize_wire_0800291c",
            "code": "\n/* DWARF original prototype: TwoWire *  TwoWire(TwoWire * wireInstance) */\n\nTwoWire * __wireInstancecall TwoWire::initializeWire_0800291c(TwoWire *wireInstance)\n\n{\n  (wireInstance->super_Stream).super_Print.write_error = 0;\n  (wireInstance->super_Stream)._timeout = 1000;\n  (wireInstance->super_Stream).super_Print._vptr_Print = (_func_int_varargs **)&PTR_write_1_0800a5a0;\n  (wireInstance->_i2c).sda = PB_9;\n  (wireInstance->_i2c).scl = PB_8;\n  return wireInstance;\n}\n\n",
            "renaming": {
                "this": "wireInstance",
                "FUN_0800291c": "initialize_wire_0800291c"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002948": {
            "entrypoint": "0x08002948",
            "current_name": "initialize_wire_08002948",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeWire_08002948(int isInitialize,int priority)\n\n{\n  if (isInitialize != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    createWireInstance(&wire);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002948": "initialize_wire_08002948",
                "__initialize_p": "isInitialize",
                "__priority": "priority",
                "TwoWire::TwoWire": "createWireInstance",
                "Wire": "wire"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN7TwoWire8rxBufferE"
            ],
            "called": [
                "TwoWire"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002968": {
            "entrypoint": "0x08002968",
            "current_name": "initialize_wire_08002968",
            "code": "\n/* DWARF original prototype: void  begin(TwoWire * wireInstance, uint8_t deviceAddress) */\n\nvoid __wireInstancecall TwoWire::initializeWire_08002968(TwoWire *wireInstance,uint8_t deviceAddress)\n\n{\n  uint32_t ownDeviceAddress;\n  i2cDataStruct *i2cObject;\n  \n  receiveBufferIndex = '\\0';\n  receiveBufferLength = '\\0';\n  if (receiveBuffer != (uint8_t *)0x0) {\n    memset(receiveBuffer,0,(uint)receiveBufferAllocated);\n  }\n  transmitBufferIndex = '\\0';\n  transmitBufferLength = '\\0';\n  if (transmitBuffer != (uint8_t *)0x0) {\n    memset(transmitBuffer,0,(uint)transmitBufferAllocated);\n  }\n  isTransmitting = '\\0';\n  ownDeviceAddress = (deviceAddress & 0x7f) << 1;\n  wireInstance->ownDeviceAddress = (uint8_t)ownDeviceAddress;\n  if (deviceAddress == 0x33) {\n    wireInstance->master = true;\n  }\n  else {\n    wireInstance->master = false;\n  }\n  i2cObject = &wireInstance->_i2c;\n  initializeI2C((i2cDataStruct_conflict *)i2cObject,I2C_SPEED_100KHz,0x4000,ownDeviceAddress,wireInstance->master);\n  if (wireInstance->master == false) {\n    attachSlaveTxEvent((i2cDataStruct_conflict *)i2cObject,requestServiceCallback + 1);\n    attachSlaveRxEvent((i2cDataStruct_conflict *)i2cObject,receiveServiceCallback + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "wireInstance",
                "address": "deviceAddress",
                "ownAddress": "ownDeviceAddress",
                "i2c_t": "i2cDataStruct",
                "obj": "i2cObject",
                "rxBufferIndex": "receiveBufferIndex",
                "rxBufferLength": "receiveBufferLength",
                "rxBuffer": "receiveBuffer",
                "rxBufferAllocated": "receiveBufferAllocated",
                "txBufferIndex": "transmitBufferIndex",
                "txBufferLength": "transmitBufferLength",
                "txBuffer": "transmitBuffer",
                "txBufferAllocated": "transmitBufferAllocated",
                "transmitting": "isTransmitting",
                "i2c_custom_init": "initializeI2C",
                "I2C_100KHz": "I2C_SPEED_100KHz",
                "i2c_attachSlaveTxEvent": "attachSlaveTxEvent",
                "i2c_attachSlaveRxEvent": "attachSlaveRxEvent",
                "onRequestService": "requestServiceCallback",
                "onReceiveService": "receiveServiceCallback",
                "FUN_08002968": "initialize_wire_08002968"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "memset",
                "i2c_attachSlaveTxEvent",
                "i2c_attachSlaveRxEvent",
                "i2c_custom_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a1c": {
            "entrypoint": "0x08002a1c",
            "current_name": "initialize_wire_communication_08002a1c",
            "code": "\n/* DWARF original prototype: void  setAddress(Wire * wireInstance, int devAddress) */\n\nvoid __wireInstancecall Wire::initializeWireCommunication_08002a1c(Wire *wireInstance,int devAddress)\n\n{\n  setAddress(wireInstance,(uint8_t)devAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a1c": "initialize_wire_communication_08002a1c",
                "TwoWire": "Wire",
                "begin": "setAddress",
                "this": "wireInstance",
                "address": "devAddress"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a26": {
            "entrypoint": "0x08002a26",
            "current_name": "initialize_wire_communication_08002a26",
            "code": "\n/* DWARF original prototype: void  begin(TwoWire * wireInstance) */\n\nvoid __wireInstancecall TwoWire::initializeWireCommunication_08002a26(TwoWire *wireInstance)\n\n{\n  begin(wireInstance,0x33);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a26": "initialize_wire_communication_08002a26",
                "this": "wireInstance"
            },
            "calling": [
                "enableI2CPins"
            ],
            "called": [
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a30": {
            "entrypoint": "0x08002a30",
            "current_name": "initialize_transmission_08002a30",
            "code": "\n/* DWARF original prototype: void  beginTransmission(TwoWire * wire, uint8_t deviceAddress) */\n\nvoid __wirecall TwoWire::initializeTransmission_08002a30(TwoWire *wire,uint8_t deviceAddress)\n\n{\n  isTransmitting = '\\x01';\n  transmittingAddress = deviceAddress << 1;\n  transmitBufferIndex = '\\0';\n  transmitBufferLength = '\\0';\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a30": "initialize_transmission_08002a30",
                "this": "wire",
                "address": "deviceAddress",
                "transmitting": "isTransmitting",
                "txAddress": "transmittingAddress",
                "txBufferIndex": "transmitBufferIndex",
                "txBufferLength": "transmitBufferLength"
            },
            "calling": [
                "readAndReportData",
                "requestFrom",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a58": {
            "entrypoint": "0x08002a58",
            "current_name": "end_transmission_08002a58",
            "code": "\n/* DWARF original prototype: uint8_t  endTransmission_08002a58(TwoWire * wire, uint8_t sendStop) */\n\nuint8_t __wirecall TwoWire::endTransmission_08002a58(TwoWire *wire,uint8_t sendStop)\n\n{\n  i2cStatus status;\n  uint8_t result;\n  \n  if (wire->isMaster == false) {\n    result = '\\x04';\n  }\n  else {\n    status = i2c_isMaster_write((i2c *)&wire->_i2c,address,buffer,(ushort)bufferLength\n                            );\n    if (status == I2C_OK) {\n      result = '\\0';\n    }\n    else if (status == I2C_TIMEOUT) {\n      result = '\\x01';\n    }\n    else {\n      result = '\\x04';\n    }\n    if (buffer != (uint8_t *)0x0) {\n      memset(buffer,0,(uint)bufferAllocated);\n    }\n    bufferIndex = '\\0';\n    bufferLength = '\\0';\n    isTransmitting = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002a58": "end_transmission_08002a58",
                "this": "wire",
                "i2c_status_e_conflict": "i2cStatus",
                "uVar2": "result",
                "master": "isMaster",
                "iVar1": "status",
                "i2c_t_conflict": "i2c",
                "txAddress": "address",
                "txBuffer": "buffer",
                "txBufferLength": "bufferLength",
                "txBufferAllocated": "bufferAllocated",
                "txBufferIndex": "bufferIndex",
                "transmitting": "isTransmitting"
            },
            "calling": [
                "endTransmission",
                "readAndReportData",
                "requestFrom"
            ],
            "called": [
                "memset",
                "i2c_master_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ac0": {
            "entrypoint": "0x08002ac0",
            "current_name": "send_data_08002ac0",
            "code": "\n/* DWARF original prototype: uint8_t  endTransmission(TwoWire * wireInstance) */\n\nuint8_t __wireInstancecall TwoWire::sendData_08002ac0(TwoWire *wireInstance)\n\n{\n  uint8_t result;\n  \n  result = endTransmission(wireInstance,'\\x01');\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002ac0": "send_data_08002ac0",
                "this": "wireInstance",
                "uVar1": "result"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "endTransmission"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002acc": {
            "entrypoint": "0x08002acc",
            "current_name": "resize_receive_buffer_08002acc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid TwoWire::resizeReceiveBuffer_08002acc(size_t newSize)\n\n{\n  if (currentBufferSize < newSize) {\n    if (newSize < 0x20) {\n      newSize = 0x20;\n    }\n    receiveBuffer = (uint8_t *)realloc(receiveBuffer,newSize);\n    if (receiveBuffer == (uint8_t *)0x0) {\n      currentBufferSize = '\\0';\n    }\n    else {\n      currentBufferSize = (uint8_t)newSize;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "length": "newSize",
                "rxBufferAllocated": "currentBufferSize",
                "rxBuffer": "receiveBuffer",
                "FUN_08002acc": "resize_receive_buffer_08002acc"
            },
            "calling": [
                "onReceiveService",
                "requestFrom"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b00": {
            "entrypoint": "0x08002b00",
            "current_name": "process_received_data_08002b00",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid TwoWire::processReceivedData_08002b00(uint8_t *receivedData,int dataLength)\n\n{\n  if ((onReceiveCallback != (_func_void_int *)0x0) && (bufferLength <= bufferIndex)) {\n    createRxBuffer(dataLength);\n    if (receiveBuffer == (uint8_t *)0x0) {\n      handleError(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/libraries/Wire/src/Wire.cpp\"\n                     ,0x183);\n    }\n    memcpy(receiveBuffer,receivedData,dataLength);\n    bufferIndex = '\\0';\n    bufferLength = (uint8_t)dataLength;\n    (*onReceiveCallback)(dataLength);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b00": "process_received_data_08002b00",
                "inBytes": "receivedData",
                "numBytes": "dataLength",
                "user_onReceive": "onReceiveCallback",
                "rxBufferLength": "bufferLength",
                "rxBufferIndex": "bufferIndex",
                "allocateRxBuffer": "createRxBuffer",
                "rxBuffer": "receiveBuffer",
                "_Error_Handler": "handleError"
            },
            "calling": [],
            "called": [
                "_Error_Handler",
                "allocateRxBuffer",
                "memcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b68": {
            "entrypoint": "0x08002b68",
            "current_name": "request_from_08002b68",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08002bb2 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: uint8_t  requestFrom_08002b68(TwoWire * wire, uint8_t deviceAddress, uint8_t dataQuantity,\n   uint32_t internalAddress, uint8_t addressSize, uint8_t stopSignal) */\n\nuint8_t __wirecall\nTwoWire::requestFrom_08002b68(TwoWire *wire,uint8_t deviceAddress,uint8_t dataQuantity,uint32_t internalAddress,uint8_t addressSize,\n          uint8_t stopSignal)\n\n{\n  i2c_status_e_conflict status;\n  uint size;\n  \n  size = (uint)addressSize;\n  if (wire->master == false) {\n    return '\\0';\n  }\n  allocateRxBuffer((uint)dataQuantity);\n  if (rxBuffer != (uint8_t *)0x0) {\n    if (size != 0) {\n      beginTransmission(wire,deviceAddress);\n      if (3 < size) {\n        size = 3;\n      }\n      while( true ) {\n        if (size == 0) break;\n        (**(wire->super_Stream).super_Print._vptr_Print)\n                  (wire,internalAddress >> ((size - 1 & 0x1f) << 3) & 0xff);\n        size = size - 1 & 0xff;\n      }\n      endTransmission(wire,'\\0');\n    }\n    status = i2c_master_read((i2c_t_conflict *)&wire->_i2c,deviceAddress << 1,rxBuffer,(ushort)dataQuantity);\n    if (status != I2C_OK) {\n      dataQuantity = '\\0';\n    }\n    rxBufferIndex = '\\0';\n    rxBufferLength = dataQuantity;\n    return dataQuantity;\n  }\n  (wire->super_Stream).super_Print.write_error = 1;\n  return '\\0';\n}\n\n",
            "renaming": {
                "FUN_08002b68": "request_from_08002b68",
                "this": "wire",
                "address": "deviceAddress",
                "quantity": "dataQuantity",
                "iaddress": "internalAddress",
                "isize": "addressSize",
                "sendStop": "stopSignal",
                "iVar1": "status",
                "uVar2": "size"
            },
            "calling": [
                "requestFrom"
            ],
            "called": [
                "beginTransmission",
                "i2c_master_read",
                "allocateRxBuffer",
                "endTransmission"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c00": {
            "entrypoint": "0x08002c00",
            "current_name": "request_from_address_08002c00",
            "code": "\n/* DWARF original prototype: uint8_t  requestFrom(TwoWire * wireInstance, uint8_t deviceAddress, uint8_t numBytes,\n   uint8_t stopBit) */\n\nuint8_t __wireInstancecall\nTwoWire::requestFromAddress_08002c00(TwoWire *wireInstance,uint8_t deviceAddress,uint8_t numBytes,uint8_t stopBit)\n\n{\n  uint8_t result;\n  \n  result = requestFrom(wireInstance,deviceAddress,numBytes,0,'\\0',stopBit);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002c00": "request_from_address_08002c00",
                "this": "wireInstance",
                "address": "deviceAddress",
                "quantity": "numBytes",
                "sendStop": "stopBit",
                "uVar1": "result"
            },
            "calling": [
                "requestFrom"
            ],
            "called": [
                "requestFrom"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c14": {
            "entrypoint": "0x08002c14",
            "current_name": "request_from_address_with_quantity_08002c14",
            "code": "\n/* DWARF original prototype: uint8_t  requestFrom(TwoWire * wireObject, uint8_t deviceAddress, uint8_t dataQuantity)\n    */\n\nuint8_t __wireObjectcall TwoWire::requestFromAddressWithQuantity_08002c14(TwoWire *wireObject,uint8_t deviceAddress,uint8_t dataQuantity)\n\n{\n  uint8_t result;\n  \n  result = requestFrom(wireObject,deviceAddress,dataQuantity,'\\x01');\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002c14": "request_from_address_with_quantity_08002c14",
                "this": "wireObject",
                "address": "deviceAddress",
                "quantity": "dataQuantity",
                "uVar1": "result"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "requestFrom"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c1e": {
            "entrypoint": "0x08002c1e",
            "current_name": "initialize_static_variables_08002c1e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_static_variables_08002c1e(void)\n\n{\n  initialize_and_destroy_static_data(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c1e": "initialize_static_variables_08002c1e",
                "__static_initialization_and_destruction_0": "initialize_and_destroy_static_data"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2c": {
            "entrypoint": "0x08002c2c",
            "current_name": "process_analog_command_08002c2c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::processAnalogCommand_08002c2c(void *data,uint8_t analogCommand,uint16_t analogValue)\n\n{\n  if (callbackFunction != (callbackFunction)0x0) {\n    (*callbackFunction)(analogCommand,(int)analogValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c2c": "process_analog_command_08002c2c",
                "param_1": "data",
                "command": "analogCommand",
                "value": "analogValue",
                "currentAnalogCallback": "callbackFunction"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c40": {
            "entrypoint": "0x08002c40",
            "current_name": "handle_digital_command_08002c40",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handleDigitalCommand_08002c40(void *data,uint8_t cmd,uint16_t val)\n\n{\n  if (currentDigitalCallback != (callbackFunction)0x0) {\n    (*currentDigitalCallback)(cmd,(int)val);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c40": "handle_digital_command_08002c40",
                "param_1": "data",
                "command": "cmd",
                "value": "val"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c54": {
            "entrypoint": "0x08002c54",
            "current_name": "handle_pin_mode_08002c54",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handlePinMode_08002c54(void *data,uint8_t pinModeCommand,uint16_t pinValue)\n\n{\n  if (currentPinModeCallback != (callbackFunction)0x0) {\n    (*currentPinModeCallback)(pinModeCommand,(int)pinValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "data",
                "command": "pinModeCommand",
                "value": "pinValue",
                "FUN_08002c54": "handle_pin_mode_08002c54"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c68": {
            "entrypoint": "0x08002c68",
            "current_name": "handle_pin_value_08002c68",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handlePinValue_08002c68(void *data,uint8_t pinNumber,uint16_t pinValue)\n\n{\n  if (pinValueCallback != (pinValueHandler)0x0) {\n    (*pinValueCallback)(pinNumber,(int)pinValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c68": "handle_pin_value_08002c68",
                "param_1": "data",
                "command": "pinNumber",
                "value": "pinValue",
                "currentPinValueCallback": "pinValueCallback",
                "callbackFunction": "pinValueHandler"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c7c": {
            "entrypoint": "0x08002c7c",
            "current_name": "handle_analog_report_08002c7c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handleAnalogReport_08002c7c(void *data,uint8_t command,uint16_t analogValue)\n\n{\n  if (currentReportAnalogCallback != (callbackFunction)0x0) {\n    (*currentReportAnalogCallback)(command,(int)analogValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "data",
                "value": "analogValue",
                "FUN_08002c7c": "handle_analog_report_08002c7c"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c90": {
            "entrypoint": "0x08002c90",
            "current_name": "send_digital_report_08002c90",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::sendDigitalReport_08002c90(void *data,uint8_t digitalCommand,uint16_t digitalValue)\n\n{\n  if (currentReportDigitalCallback != (callbackFunction)0x0) {\n    (*currentReportDigitalCallback)(digitalCommand,(int)digitalValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "data",
                "command": "digitalCommand",
                "value": "digitalValue",
                "FUN_08002c90": "send_digital_report_08002c90"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca4": {
            "entrypoint": "0x08002ca4",
            "current_name": "handle_string_callback_08002ca4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handleStringCallback_08002ca4(void *callbackContext,char *stringData)\n\n{\n  if (currentCallback != (stringCallbackFunction)0x0) {\n    (*currentCallback)(stringData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ca4": "handle_string_callback_08002ca4",
                "param_1": "callbackContext",
                "c_str": "stringData",
                "currentStringCallback": "currentCallback"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb8": {
            "entrypoint": "0x08002cb8",
            "current_name": "process_sysex_command_08002cb8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::processSysexCommand_08002cb8(void *data,uint8_t sysexCommand,size_t argumentCount,uint8_t *arguments)\n\n{\n  if (sysexCallback != (sysexCallbackFunction)0x0) {\n    (*sysexCallback)(sysexCommand,(uint8_t)argumentCount,arguments);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb8": "process_sysex_command_08002cb8",
                "param_1": "data",
                "command": "sysexCommand",
                "argc": "argumentCount",
                "argv": "arguments",
                "currentSysexCallback": "sysexCallback"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cd0": {
            "entrypoint": "0x08002cd0",
            "current_name": "handle_system_reset_08002cd0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handleSystemReset_08002cd0(void *data)\n\n{\n  if (resetCallback != (CallbackFunc)0x0) {\n    (*resetCallback)();\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "data",
                "currentSystemResetCallback": "resetCallback",
                "systemCallbackFunction": "CallbackFunc",
                "FUN_08002cd0": "handle_system_reset_08002cd0"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ce0": {
            "entrypoint": "0x08002ce0",
            "current_name": "initialize_firmata_class_08002ce0",
            "code": "\n/* DWARF original prototype: FirmataClass *  FirmataClass(FirmataClass * firmataClass) */\n\nFirmataClass * __firmataClasscall firmata::FirmataClass::initializeFirmataClass_08002ce0(FirmataClass *firmataClass)\n\n{\n  Parser *firmataParser;\n  \n  Marshaller::Marshaller(&firmataClass->marshaller);\n  firmataParser = &firmataClass->parser;\n  Parser::Parser(firmataParser,firmataClass->parserBuffer,0x40);\n  firmataClass->firmwareVersionCount = '\\0';\n  firmataClass->firmwareVersionVector = (byte *)0x0;\n  firmataClass->blinkVersionDisabled = false;\n  Parser::attach(firmataParser,0xe0,analogCallback + 1,(void *)0x0);\n  Parser::attach(firmataParser,0x90,digitalCallback + 1,(void *)0x0);\n  Parser::attach(firmataParser,0xc0,reportAnalogCallback + 1,(void *)0x0);\n  Parser::attach(firmataParser,0xd0,reportDigitalCallback + 1,(void *)0x0);\n  Parser::attach(firmataParser,0xf4,pinModeCallback + 1,(void *)0x0);\n  Parser::attach(firmataParser,0xf5,pinValueCallback + 1,(void *)0x0);\n  Parser::attach(firmataParser,'q',stringCallback + 1,(void *)0x0);\n  Parser::attach(firmataParser,0xf0,sysexCallback + 1,(void *)0x0);\n  Parser::attach(firmataParser,'y',reportFirmwareCallback + 1,firmataClass);\n  Parser::attach(firmataParser,0xf9,reportVersionCallback + 1,firmataClass);\n  Parser::attach(firmataParser,0xff,systemResetCallback + 1,(void *)0x0);\n  return firmataClass;\n}\n\n",
            "renaming": {
                "FUN_08002ce0": "initialize_firmata_class_08002ce0",
                "this": "firmataClass",
                "this_00": "firmataParser",
                "FirmataMarshaller": "Marshaller",
                "FirmataParser": "Parser",
                "staticAnalogCallback": "analogCallback",
                "staticDigitalCallback": "digitalCallback",
                "staticReportAnalogCallback": "reportAnalogCallback",
                "staticReportDigitalCallback": "reportDigitalCallback",
                "staticPinModeCallback": "pinModeCallback",
                "staticPinValueCallback": "pinValueCallback",
                "staticStringCallback": "stringCallback",
                "staticSysexCallback": "sysexCallback",
                "staticReportFirmwareCallback": "reportFirmwareCallback",
                "staticReportVersionCallback": "reportVersionCallback",
                "staticSystemResetCallback": "systemResetCallback"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "attach",
                "attach",
                "attach",
                "FirmataParser",
                "FirmataMarshaller",
                "attach",
                "attach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dbc": {
            "entrypoint": "0x08002dbc",
            "current_name": "initialize_firmata_08002dbc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeFirmata_08002dbc(int initializeFlag,int priorityLevel)\n\n{\n  if (initializeFlag != 1) {\n    return;\n  }\n  if (priorityLevel == 0xffff) {\n    FirmataConstructor(&firmataObject);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dbc": "initialize_firmata_08002dbc",
                "__initialize_p": "initializeFlag",
                "__priority": "priorityLevel",
                "firmata::FirmataClass::FirmataClass": "FirmataConstructor",
                "Firmata": "firmataObject"
            },
            "calling": [
                "_GLOBAL__sub_I_Firmata"
            ],
            "called": [
                "FirmataClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ddc": {
            "entrypoint": "0x08002ddc",
            "current_name": "send_version_to_marshaller_08002ddc",
            "code": "\n/* DWARF original prototype: void  printVersion(FirmataClass * firmataClassInstance) */\n\nvoid __firmataClassInstancecall firmata::FirmataClass::sendVersionToMarshaller_08002ddc(FirmataClass *firmataClassInstance)\n\n{\n  FirmataMarshaller::sendVersion(&firmataClassInstance->marshaller,'\\x02','\\x05');\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ddc": "send_version_to_marshaller_08002ddc",
                "this": "firmataClassInstance"
            },
            "calling": [
                "begin",
                "staticReportVersionCallback"
            ],
            "called": [
                "sendVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dea": {
            "entrypoint": "0x08002dea",
            "current_name": "print_firmata_version_08002dea",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::printFirmataVersion_08002dea(void *context)\n\n{\n  if (context != (void *)0x0) {\n    printFirmataVersion_08002deaInfo((FirmataClass *)context);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dea": "print_firmata_version_08002dea",
                "printVersion": "printFirmataVersionInfo"
            },
            "calling": [],
            "called": [
                "printVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002df6": {
            "entrypoint": "0x08002df6",
            "current_name": "send_firmware_version_packet_08002df6",
            "code": "\n/* DWARF original prototype: void  printFirmwareVersion(FirmataClass * firmataInstance) */\n\nvoid __firmataInstancecall firmata::FirmataClass::sendFirmwareVersionPacket_08002df6(FirmataClass *firmataInstance)\n\n{\n  uint8_t *firmwareVersionData;\n  \n  if (firmataInstance->firmwareVersionCount == 0) {\n    return;\n  }\n  firmwareVersionData = firmataInstance->firmwareVersionVector;\n  FirmataMarshaller::sendFirmwareVersion\n            (&firmataInstance->marshaller,*firmwareVersionData,firmwareVersionData[1],firmataInstance->firmwareVersionCount - 2,firmwareVersionData + 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002df6": "send_firmware_version_packet_08002df6",
                "this": "firmataInstance",
                "puVar1": "firmwareVersionData"
            },
            "calling": [
                "begin",
                "staticReportFirmwareCallback"
            ],
            "called": [
                "sendFirmwareVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e1a": {
            "entrypoint": "0x08002e1a",
            "current_name": "print_firmware_version_if_context_not_null_08002e1a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::printFirmwareVersionIfContextNotNull_08002e1a(void *context,size_t param2,size_t param3,char *param4)\n\n{\n  if (context != (void *)0x0) {\n    printFirmwareVersion((FirmataClass *)context);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "FUN_08002e1a": "print_firmware_version_if_context_not_null_08002e1a"
            },
            "calling": [],
            "called": [
                "printFirmwareVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e26": {
            "entrypoint": "0x08002e26",
            "current_name": "initialize_firmata_08002e26",
            "code": "\n/* DWARF original prototype: void  begin(FirmataClastreamstream * firmataObject, Stream * stream) */\n\nvoid __firmataObjectcall firmata::FirmataClastreamstream::initializeFirmata_08002e26(FirmataClastreamstream *firmataObject,Stream *stream)\n\n{\n  firmataObject->stream = stream;\n  initializeMarshaller(&firmataObject->marstreamhaller,stream);\n  printLibraryVersion(firmataObject);\n  printFirmwareVerstreamion(firmataObject);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e26": "initialize_firmata_08002e26",
                "this": "firmataObject",
                "s": "stream",
                "FirmataStream": "stream",
                "FirmataMarshaller::begin": "initializeMarshaller",
                "printVersion": "printLibraryVersion"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "printFirmwareVersion",
                "printVersion",
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e44": {
            "entrypoint": "0x08002e44",
            "current_name": "set_firmware_name_and_version_08002e44",
            "code": "\n/* DWARF original prototype: void  setFirmwareNameAndVersion_08002e44(FirmataClass * this, char * providedName, byte\n   firmwareMajor, byte firmwareMinor) */\n\nvoid __thiscall\nfirmata::FirmataClass::setFirmwareNameAndVersion_08002e44(FirmataClass *this,char *providedName,byte firmwareMajor,byte firmwareMinor)\n\n{\n  byte versionCount;\n  char *cppExtension;\n  char *extension;\n  char *lastSlashOrBackslash;\n  char *strippedName;\n  byte *firmwareVersionVector;\n  size_t nameLength;\n  \n  cppExtension = strstr(providedName,\".cpp\");\n  lastSlashOrBackslash = strrchr(providedName,0x2f);\n  if (lastSlashOrBackslash == (char *)0x0) {\n    lastSlashOrBackslash = strrchr(providedName,0x5c);\n  }\n  if (lastSlashOrBackslash != (char *)0x0) {\n    providedName = lastSlashOrBackslash + 1;\n  }\n  if (cppExtension == (char *)0x0) {\n    nameLength = strlen(providedName);\n    this->firmwareVersionCount = (char)nameLength + '\\x02';\n  }\n  else {\n    this->firmwareVersionCount = ((char)cppExtension - (char)providedName) + '\\x02';\n  }\n  free(this->firmwareVersionVector);\n  versionCount = this->firmwareVersionCount;\n  firmwareVersionVector = (byte *)malloc(versionCount + 1);\n  this->firmwareVersionVector = firmwareVersionVector;\n  firmwareVersionVector[versionCount] = '\\0';\n  *firmwareVersionVector = firmwareMajor;\n  firmwareVersionVector[1] = firmwareMinor;\n  strncpy((char *)(firmwareVersionVector + 2),providedName,this->firmwareVersionCount - 2);\n  return;\n}\n\n",
            "renaming": {
                "name": "providedName",
                "major": "firmwareMajor",
                "minor": "firmwareMinor",
                "pcVar2": "cppExtension",
                "pcVar3": "lastSlashOrBackslash",
                "firmwareName": "strippedName",
                "pbVar4": "firmwareVersionVector",
                "sVar5": "nameLength",
                "bVar1": "versionCount",
                "FUN_08002e44": "set_firmware_name_and_version_08002e44"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "free",
                "strrchr",
                "strncpy",
                "strstr",
                "strlen",
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec4": {
            "entrypoint": "0x08002ec4",
            "current_name": "get_available_08002ec4",
            "code": "\n/* DWARF original prototype: int  available(FirmataClass * firmataObj) */\n\nint __firmataObjcall firmata::FirmataClass::getAvailable_08002ec4(FirmataClass *firmataObj)\n\n{\n  int returnValue;\n  \n  returnValue = (*(firmataObj->FirmataStream->super_Print)._vptr_Print[2])();\n  return returnValue;\n}\n\n",
            "renaming": {
                "this": "firmataObj",
                "iVar1": "returnValue",
                "FUN_08002ec4": "get_available_08002ec4"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed2": {
            "entrypoint": "0x08002ed2",
            "current_name": "process_input_08002ed2",
            "code": "\n/* DWARF original prototype: void  processInput_08002ed2(FirmataClass * firmataObject) */\n\nvoid __firmataObjectcall firmata::FirmataClass::processInput_08002ed2(FirmataClass *firmataObject)\n\n{\n  int result;\n  int input;\n  \n  result = (*(firmataObject->firmataStream->superPrint).virtualFunctionTable[3])();\n  if (result != -1) {\n    firmataParser::parse(&firmataObject->parser,(uint8_t)result);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed2": "process_input_08002ed2",
                "this": "firmataObject",
                "iVar1": "result",
                "inputData": "input",
                "FirmataStream": "firmataStream",
                "super_Print": "superPrint",
                "_vptr_Print": "virtualFunctionTable",
                "FirmataParser": "firmataParser"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "parse"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef2": {
            "entrypoint": "0x08002ef2",
            "current_name": "send_analog_value_08002ef2",
            "code": "\n/* DWARF original prototype: void  sendAnalog(FirmataClass * firmataInstance, byte analogPin, int analogValue) */\n\nvoid __firmataInstancecall firmata::FirmataClass::sendAnalogValue_08002ef2(FirmataClass *firmataInstance,byte analogPin,int analogValue)\n\n{\n  FirmataMarshaller::sendAnalog(&firmataInstance->marshaller,analogPin,(uint16_t)analogValue);\n  return;\n}\n\n",
            "renaming": {
                "this": "firmataInstance",
                "pin": "analogPin",
                "value": "analogValue",
                "FUN_08002ef2": "send_analog_value_08002ef2"
            },
            "calling": [
                "loop",
                "reportAnalogCallback"
            ],
            "called": [
                "sendAnalog"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efe": {
            "entrypoint": "0x08002efe",
            "current_name": "send_digital_port_08002efe",
            "code": "\n/* DWARF original prototype: void  sendDigitalPort_08002efe(FirmataClass * firmataInstance, byte portNum, int\n   data) */\n\nvoid __firmataInstancecall firmata::FirmataClass::sendDigitalPort_08002efe(FirmataClass *firmataInstance,byte portNum,int data)\n\n{\n  FirmataMarshaller::sendDigitalPort_08002efe(&firmataInstance->marshaller,portNum,(uint16_t)data);\n  return;\n}\n\n",
            "renaming": {
                "this": "firmataInstance",
                "portNumber": "portNum",
                "portData": "data",
                "FUN_08002efe": "send_digital_port_08002efe"
            },
            "calling": [
                "outputPort"
            ],
            "called": [
                "sendDigitalPort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f0a": {
            "entrypoint": "0x08002f0a",
            "current_name": "send_system_exclusive_08002f0a",
            "code": "\n/* DWARF original prototype: void  sendSysex(FirmataClass * firmataInstance, byte sysexCommand, byte numBytes, byte *\n   byteValues) */\n\nvoid __firmataInstancecall\nfirmata::FirmataClass::sendSystemExclusive_08002f0a(FirmataClass *firmataInstance,byte sysexCommand,byte numBytes,byte *byteValues)\n\n{\n  FirmataMarshaller::sendSysex(&firmataInstance->marshaller,sysexCommand,(uint)numBytes,byteValues);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f0a": "send_system_exclusive_08002f0a",
                "this": "firmataInstance",
                "command": "sysexCommand",
                "bytec": "numBytes",
                "bytev": "byteValues"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "sendSysex"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f14": {
            "entrypoint": "0x08002f14",
            "current_name": "send_string_08002f14",
            "code": "\n/* DWARF original prototype: void  sendString_08002f14(FirmataClass * firmataObject, char * inputString) */\n\nvoid __firmataObjectcall firmata::FirmataClass::sendString_08002f14(FirmataClass *firmataObject,char *inputString)\n\n{\n  FirmataMarshaller::sendString_08002f14(&firmataObject->marshaller,inputString);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f14": "send_string_08002f14",
                "this": "firmataObject",
                "string": "inputString"
            },
            "calling": [
                "setPinModeCallback",
                "readAndReportData",
                "attachServo",
                "sysexCallback"
            ],
            "called": [
                "sendString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f1e": {
            "entrypoint": "0x08002f1e",
            "current_name": "write_to_fd_08002f1e",
            "code": "\n/* DWARF original prototype: void  write(FirmataClass * firmata_obj, byte c) */\n\nssize_t __firmata_objcall\nfirmata::FirmataClass::write_to_fd_08002f1e(FirmataClass *firmata_obj,int __fd,void *buffer,size_t size)\n\n{\n  int result;\n  \n  result = (**(firmata_obj->FirmataStream->super_Print)._vptr_Print)();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002f1e": "write_to_fd_08002f1e",
                "this": "firmata_obj",
                "__buf": "buffer",
                "__n": "size",
                "iVar1": "result"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f2c": {
            "entrypoint": "0x08002f2c",
            "current_name": "attach_08002f2c",
            "code": "\n/* DWARF original prototype: void  attach_08002f2c(Firmata * self, uint8_t command, callbackFunction\n   callback) */\n\nvoid __selfcall\nfirmata::Firmata::attach_08002f2c(Firmata *self,uint8_t command,callbackFunction callback)\n\n{\n  callbackFunction previousCallback;\n  \n  if (command == 0xd0) {\n    digitalReportCallback = callback;\n    return;\n  }\n  if (0xd0 < command) {\n    if (command == 0xf4) {\n      pinModeCallback = callback;\n      return;\n    }\n    previousCallback = callback;\n    if ((command != 0xf5) && (previousCallback = pinValueCallback, command == 0xe0)) {\n      analogCallback = callback;\n      return;\n    }\n    pinValueCallback = previousCallback;\n    return;\n  }\n  if (command == 0x90) {\n    digitalCallback = callback;\n    return;\n  }\n  if (command != 0xc0) {\n    return;\n  }\n  analogReportCallback = callback;\n  return;\n}\n\n",
            "renaming": {
                "FirmataClass": "Firmata",
                "FUN_08002f2c": "attach_08002f2c",
                "this": "self",
                "newFunction": "callback",
                "p_Var1": "previousCallback",
                "currentReportDigitalCallback": "digitalReportCallback",
                "currentPinModeCallback": "pinModeCallback",
                "currentPinValueCallback": "pinValueCallback",
                "currentAnalogCallback": "analogCallback",
                "currentDigitalCallback": "digitalCallback",
                "currentReportAnalogCallback": "analogReportCallback"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f84": {
            "entrypoint": "0x08002f84",
            "current_name": "attach_command_callback_08002f84",
            "code": "\n/* DWARF original prototype: void  attach(FirmataClass * firmataObject, uint8_t callbackCommand,\n   systemCallbackFunction callbackFunction) */\n\nvoid __firmataObjectcall\nfirmata::FirmataClass::attachCommandCallback_08002f84(FirmataClass *firmataObject,uint8_t callbackCommand,systemCallbackFunction callbackFunction)\n\n{\n  if (callbackCommand == 0xff) {\n    systemResetCallback = callbackFunction;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f84": "attach_command_callback_08002f84",
                "this": "firmataObject",
                "command": "callbackCommand",
                "newFunction": "callbackFunction",
                "currentSystemResetCallback": "systemResetCallback"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f94": {
            "entrypoint": "0x08002f94",
            "current_name": "set_sysex_callback_08002f94",
            "code": "\n/* DWARF original prototype: void  attach(FirmataClass * firmataObject, uint8_t newCommand,\n   sysexCallbackFunction callbackFunction) */\n\nvoid __firmataObjectcall\nfirmata::FirmataClass::setSysexCallback_08002f94(FirmataClass *firmataObject,uint8_t newCommand,sysexCallbackFunction callbackFunction)\n\n{\n  currentCallback = callbackFunction;\n  return;\n}\n\n",
            "renaming": {
                "this": "firmataObject",
                "command": "newCommand",
                "newFunction": "callbackFunction",
                "currentSysexCallback": "currentCallback",
                "FUN_08002f94": "set_sysex_callback_08002f94"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa0": {
            "entrypoint": "0x08002fa0",
            "current_name": "get_pin_mode_08002fa0",
            "code": "\n/* DWARF original prototype: byte  getPinMode_08002fa0(FirmataClass * instance, byte pinNumber) */\n\nbyte __instancecall firmata::FirmataClass::getPinMode_08002fa0(FirmataClass *instance,byte pinNumber)\n\n{\n  return instance->pinConfiguration[pinNumber];\n}\n\n",
            "renaming": {
                "FUN_08002fa0": "get_pin_mode_08002fa0",
                "this": "instance",
                "pin": "pinNumber",
                "pinConfig": "pinConfiguration"
            },
            "calling": [
                "digitalWriteCallback",
                "setPinValueCallback",
                "analogWriteCallback",
                "setPinModeCallback",
                "loop",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa8": {
            "entrypoint": "0x08002fa8",
            "current_name": "update_pin_mode_08002fa8",
            "code": "\n/* DWARF original prototype: void  setPinMode(FirmataClass * firmataInstance, byte pinNumber, byte newConfig) */\n\nvoid __firmataInstancecall firmata::FirmataClass::updatePinMode_08002fa8(FirmataClass *firmataInstance,byte pinNumber,byte newConfig)\n\n{\n  if (firmataInstance->pinNumberConfig[pinNumber] != '\\x7f') {\n    firmataInstance->pinNumberConfig[pinNumber] = newConfig;\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "firmataInstance",
                "pin": "pinNumber",
                "config": "newConfig",
                "FUN_08002fa8": "update_pin_mode_08002fa8"
            },
            "calling": [
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fba": {
            "entrypoint": "0x08002fba",
            "current_name": "get_pin_state_08002fba",
            "code": "\n/* DWARF original prototype: int  getPinState_08002fba(FirmataClass * firmataInstance, byte pinNumber) */\n\nint __firmataInstancecall firmata::FirmataClass::getPinState_08002fba(FirmataClass *firmataInstance,byte pinNumber)\n\n{\n  return firmataInstance->pinStates[pinNumber];\n}\n\n",
            "renaming": {
                "FUN_08002fba": "get_pin_state_08002fba",
                "this": "firmataInstance",
                "pin": "pinNumber",
                "pinState": "pinStates"
            },
            "calling": [
                "digitalWriteCallback",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fc2": {
            "entrypoint": "0x08002fc2",
            "current_name": "set_pin_state_08002fc2",
            "code": "\n/* DWARF original prototype: void  setPinState_08002fc2(FirmataClass * firmataObj, byte pinNumber, int newState) */\n\nvoid __firmataObjcall firmata::FirmataClass::setPinState_08002fc2(FirmataClass *firmataObj,byte pinNumber,int newState)\n\n{\n  firmataObj->pinStates[pinNumber] = newState;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fc2": "set_pin_state_08002fc2",
                "this": "firmataObj",
                "pin": "pinNumber",
                "state": "newState",
                "pinState": "pinStates"
            },
            "calling": [
                "digitalWriteCallback",
                "setPinValueCallback",
                "analogWriteCallback",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fca": {
            "entrypoint": "0x08002fca",
            "current_name": "strobe_blink_pin_08002fca",
            "code": "\n/* DWARF original prototype: void  strobeBlinkPin_08002fca(FirmataClass * firmataObj, byte pinNumber, int blinkCount, int\n   onDuration, int offDuration) */\n\nvoid __firmataObjcall\nfirmata::FirmataClass::strobeBlinkPin_08002fca(FirmataClass *firmataObj,byte pinNumber,int blinkCount,int onDuration,int offDuration)\n\n{\n  uint loopCounter;\n  \n  for (loopCounter = 0; (int)loopCounter < blinkCount; loopCounter = loopCounter + 1 & 0xff) {\n    delay(offDuration);\n    digitalWrite((uint)pinNumber,1);\n    delay(onDuration);\n    digitalWrite((uint)pinNumber,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fca": "strobe_blink_pin_08002fca",
                "this": "firmataObj",
                "pin": "pinNumber",
                "count": "blinkCount",
                "onInterval": "onDuration",
                "offInterval": "offDuration",
                "uVar1": "loopCounter"
            },
            "calling": [
                "blinkVersion"
            ],
            "called": [
                "digitalWrite",
                "delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003002": {
            "entrypoint": "0x08003002",
            "current_name": "blink_version_08003002",
            "code": "\n/* DWARF original prototype: void  blinkVersion_08003002(FirmataClass * firmataInstance) */\n\nvoid __firmataInstancecall firmata::FirmataClass::blinkVersion_08003002(FirmataClass *firmataInstance)\n\n{\n  if (firmataInstance->isBlinkVersionDisabled != false) {\n    return;\n  }\n  pinMode(0xd,1);\n  strobeBlinkPin(firmataInstance,'\\r',2,0x28,0xd2);\n  delay(0xfa);\n  strobeBlinkPin(firmataInstance,'\\r',5,0x28,0xd2);\n  delay(0x7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003002": "blink_version_08003002",
                "this": "firmataInstance",
                "blinkVersionDisabled": "isBlinkVersionDisabled"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "strobeBlinkPin",
                "delay",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003048": {
            "entrypoint": "0x08003048",
            "current_name": "initialize_firmata_08003048",
            "code": "\n/* DWARF original prototype: void  begin(FirmataClass * firmata, long baudRate) */\n\nvoid __firmatacall firmata::FirmataClass::initializeFirmata_08003048(FirmataClass *firmata,long baudRate)\n\n{\n  HardwareSerial::begin(&Serial2,baudRate,'\\x06');\n  blinkVersion(firmata);\n  begin(firmata,&Serial2.super_Stream);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003048": "initialize_firmata_08003048",
                "this": "firmata",
                "speed": "baudRate"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "begin",
                "blinkVersion",
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800306c": {
            "entrypoint": "0x0800306c",
            "current_name": "initialize_static_objects_0800306c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeStaticObjects_0800306c(void)\n\n{\n  initializeObjects(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800306c": "initialize_static_objects_0800306c",
                "__static_initialization_and_destruction_0": "initializeObjects"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800307a": {
            "entrypoint": "0x0800307a",
            "current_name": "encode_byte_stream_0800307a",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08003102 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  encodeByteStream_0800307a(FirmataMarshaller * marshaller, size_t numBytes, uint8_t\n   * byteArray, size_t maxBytes) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::encodeByteStream_0800307a(FirmataMarshaller *marshaller,size_t numBytes,uint8_t *byteArray,size_t maxBytes)\n\n{\n  uint8_t transmitByte;\n  uint8_t bitCache;\n  uint firstByte;\n  uint bitCount;\n  uint byteCount;\n  uint currentIndex;\n  \n  firstByte = (uint)*byteArray;\n  if (maxBytes == 0) {\n    maxBytes = 0xffffffff;\n  }\n  currentIndex = 0;\n  bitCount = 0;\n  byteCount = 0;\n  while ((currentIndex < numBytes && (byteCount < maxBytes))) {\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)\n              (marshaller->FirmataStream,((uint)byteArray[currentIndex] << (bitCount & 0xff) | firstByte) & 0x7f);\n    firstByte = (int)(uint)byteArray[currentIndex] >> (7 - bitCount & 0xff) & 0xff;\n    bitCount = bitCount + 1;\n    while ((byteCount = byteCount + 1, 6 < bitCount && (byteCount < maxBytes))) {\n      (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,firstByte & 0x7f);\n      firstByte = firstByte >> 7;\n      bitCount = bitCount - 7;\n    }\n    currentIndex = currentIndex + 1;\n  }\n  if ((bitCount != 0) && (byteCount < maxBytes)) {\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)\n              (marshaller->FirmataStream,(1 << (bitCount & 0xff)) - 1U & firstByte);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800307a": "encode_byte_stream_0800307a",
                "this": "marshaller",
                "bytec": "numBytes",
                "bytev": "byteArray",
                "max_bytes": "maxBytes",
                "transmit_byte": "transmitByte",
                "outstanding_bit_cache": "bitCache",
                "uVar1": "firstByte",
                "uVar2": "bitCount",
                "uVar3": "byteCount",
                "uVar4": "currentIndex"
            },
            "calling": [
                "sendFirmwareVersion",
                "sendSysex",
                "sendAnalog",
                "sendExtendedAnalog",
                "sendDigitalPort"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003106": {
            "entrypoint": "0x08003106",
            "current_name": "send_extended_analog_data_08003106",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x0800311e */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendExtendedAnalog(FirmataMarshaller * marshaller, uint8_t pinNumber, size_t\n   byteCount, uint8_t * byteValues) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendExtendedAnalogData_08003106(FirmataMarshaller *marshaller,uint8_t pinNumber,size_t byteCount,uint8_t *byteValues)\n\n{\n  if (marshaller->firmataStream != (stream *)0x0) {\n    (**(marshaller->firmataStream->super_Print).printFunctionPointer)(marshaller,0xf0);\n    (**(marshaller->firmataStream->super_Print).printFunctionPointer)(marshaller->firmataStream,0x6f);\n    (**(marshaller->firmataStream->super_Print).printFunctionPointer)(marshaller->firmataStream,(uint)pinNumber);\n    encodeBytes(marshaller,byteCount,byteValues,byteCount);\n    (**(marshaller->firmataStream->super_Print).printFunctionPointer)(marshaller->firmataStream,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003106": "send_extended_analog_data_08003106",
                "this": "marshaller",
                "pin": "pinNumber",
                "bytec": "byteCount",
                "bytev": "byteValues",
                "FirmataStream": "firmataStream",
                "Stream": "stream",
                "_vptr_Print": "printFunctionPointer",
                "encodeByteStream": "encodeBytes"
            },
            "calling": [
                "sendAnalog"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "initialize_firmata_marshaller_0800314e",
            "code": "\n/* DWARF original prototype: FirmataMarshaller *  FirmataMarshaller(FirmataMarshaller * marshaller) */\n\nFirmataMarshaller * __marshallercall firmata::FirmataMarshaller::initializeFirmataMarshaller_0800314e(FirmataMarshaller *marshaller)\n\n{\n  marshaller->stream = (Stream *)0x0;\n  return marshaller;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "initialize_firmata_marshaller_0800314e",
                "this": "marshaller",
                "FirmataStream": "stream"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003154": {
            "entrypoint": "0x08003154",
            "current_name": "set_firmata_stream_08003154",
            "code": "\n/* DWARF original prototype: void  begin(FirmataMarstreamhaller * marshaller, Stream * stream) */\n\nvoid __marshallercall firmata::FirmataMarstreamhaller::setFirmataStream_08003154(FirmataMarstreamhaller *marshaller,Stream *stream)\n\n{\n  marshaller->FirmataStream = stream;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003154": "set_firmata_stream_08003154",
                "this": "marshaller",
                "s": "stream"
            },
            "calling": [
                "begin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003158": {
            "entrypoint": "0x08003158",
            "current_name": "send_analog_data_08003158",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x0800318c */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendAnalog(FirmataMarshaller * marshaller, uint8_t analogPin, uint16_t analogValue)\n    */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendAnalogData_08003158(FirmataMarshaller *marshaller,uint8_t analogPin,uint16_t analogValue)\n\n{\n  uint16_t encodedValue;\n  \n  if (marshaller->firmataStream != (stream *)0x0) {\n    encodedValue = analogValue;\n    if ((analogPin < 0x10) && (analogValue < 0x4000)) {\n      (**(marshaller->firmataStream->superPrint).virtualPrint)(marshaller,analogPin | 0xe0);\n      encodeDataStream(marshaller,2,(uint8_t *)&encodedValue,2);\n    }\n    else {\n      sendExtendedAnalogData(marshaller,analogPin,2,(uint8_t *)&encodedValue);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003158": "send_analog_data_08003158",
                "this": "marshaller",
                "pin": "analogPin",
                "value": "analogValue",
                "local_a": "encodedValue",
                "FirmataStream": "firmataStream",
                "Stream": "stream",
                "_vptr_Print": "virtualPrint",
                "sendExtendedAnalog": "sendExtendedAnalogData",
                "super_Print": "superPrint",
                "encodeByteStream": "encodeDataStream"
            },
            "calling": [
                "sendAnalog"
            ],
            "called": [
                "sendExtendedAnalog",
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800319e": {
            "entrypoint": "0x0800319e",
            "current_name": "send_digital_port_0800319e",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x080031ba */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendDigitalPort_0800319e(FirmataMarshaller * marshaller, uint8_t number,\n   uint16_t data) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendDigitalPort_0800319e(FirmataMarshaller *marshaller,uint8_t number,uint16_t data)\n\n{\n  uint16_t encodedData;\n  \n  if (marshaller->FirmataStream != (Stream *)0x0) {\n    encodedData = data;\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller,number & 0xf | 0x90);\n    encodeByteStream(marshaller,2,(uint8_t *)&encodedData,2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800319e": "send_digital_port_0800319e",
                "this": "marshaller",
                "portNumber": "number",
                "portData": "data",
                "local_a": "encodedData"
            },
            "calling": [
                "sendDigitalPort"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031ce": {
            "entrypoint": "0x080031ce",
            "current_name": "send_firmware_version_080031ce",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x080031e8 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendFirmwareVersion_080031ce(FirmataMarshaller * marshaller, uint8_t majorVersion,\n   uint8_t minorVersion, size_t byteCount, uint8_t * byteVector) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendFirmwareVersion_080031ce(FirmataMarshaller *marshaller,uint8_t majorVersion,uint8_t minorVersion,size_t byteCount,uint8_t *byteVector)\n\n{\n  _func_int_varargs *printFuncVarargs;\n  uint iterator;\n  \n  if (marshaller->FirmataStream != (Stream *)0x0) {\n    printFuncVarargs = *(marshaller->FirmataStream->super_Print)._vptr_Print;\n    (*printFuncVarargs)(marshaller,0xf0,(uint)minorVersion,printFuncVarargs,byteCount);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,0x79);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,(uint)majorVersion);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,(uint)minorVersion);\n    for (iterator = 0; iterator < byteCount; iterator = iterator + 1) {\n      encodeByteStream(marshaller,1,byteVector + iterator,0);\n    }\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080031ce": "send_firmware_version_080031ce",
                "this": "marshaller",
                "major": "majorVersion",
                "minor": "minorVersion",
                "bytec": "byteCount",
                "bytev": "byteVector",
                "p_Var1": "printFuncVarargs",
                "uVar2": "iterator"
            },
            "calling": [
                "printFirmwareVersion"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800322c": {
            "entrypoint": "0x0800322c",
            "current_name": "send_version_0800322c",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08003240 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendVersion_0800322c(FirmataMarshaller * marshaller, uint8_t majorVersion, uint8_t\n   minorVersion) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendVersion_0800322c(FirmataMarshaller *marshaller,uint8_t majorVersion,uint8_t minorVersion)\n\n{\n  if (marshaller->FirmataStream != (Stream *)0x0) {\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller,0xf9);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,(uint)majorVersion);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,(uint)minorVersion);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "marshaller",
                "major": "majorVersion",
                "minor": "minorVersion",
                "FUN_0800322c": "send_version_0800322c"
            },
            "calling": [
                "printVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800325a": {
            "entrypoint": "0x0800325a",
            "current_name": "send_sysex_0800325a",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08003272 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendSysex_0800325a(FirmataMarshaller * marshaller, uint8_t sysexCommand, size_t\n   byteCount, uint8_t * byteArray) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendSysex_0800325a(FirmataMarshaller *marshaller,uint8_t sysexCommand,size_t byteCount,uint8_t *byteArray)\n\n{\n  uint index;\n  \n  if (marshaller->FirmataStream != (Stream *)0x0) {\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller,0xf0);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,(uint)sysexCommand);\n    for (index = 0; index < byteCount; index = index + 1) {\n      encodeByteStream(marshaller,1,byteArray + index,0);\n    }\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "marshaller",
                "command": "sysexCommand",
                "bytec": "byteCount",
                "bytev": "byteArray",
                "uVar1": "index",
                "FUN_0800325a": "send_sysex_0800325a"
            },
            "calling": [
                "sendSysex",
                "sendString"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032a2": {
            "entrypoint": "0x080032a2",
            "current_name": "send_string_080032a2",
            "code": "\n/* DWARF original prototype: void  sendString_080032a2(Marshaller * marshaller, char * inputString) */\n\nvoid __marshallercall firmata::Marshaller::sendString_080032a2(Marshaller *marshaller,char *inputString)\n\n{\n  size_t length;\n  \n  length = strlen(inputString);\n  sendSysex(marshaller,'q',length,(uint8_t *)inputString);\n  return;\n}\n\n",
            "renaming": {
                "FirmataMarshaller": "Marshaller",
                "FUN_080032a2": "send_string_080032a2",
                "this": "marshaller",
                "string": "inputString",
                "bytec": "length"
            },
            "calling": [
                "sendString"
            ],
            "called": [
                "sendSysex",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032bc": {
            "entrypoint": "0x080032bc",
            "current_name": "initialize_firmata_parser_080032bc",
            "code": "\n/* DWARF original prototype: FirmataParser *  FirmataParser(FirmataParser * parser, uint8_t *\n   buffer, size_t bufferSize) */\n\nFirmataParser * __parsercall\nfirmata::FirmataParser::initializeFirmataParser_080032bc(FirmataParser *parser,uint8_t *buffer,size_t bufferSize)\n\n{\n  parser->buffer = buffer;\n  parser->bufferSize = bufferSize;\n  parser->multiByteCommand = '\\0';\n  parser->multiByteChannel = '\\0';\n  parser->isWaitingForData = 0;\n  parser->isParsingSysex = false;\n  parser->sysexBytesRead = 0;\n  parser->analogCallbackContext = (void *)0x0;\n  parser->digitalCallbackContext = (void *)0x0;\n  parser->reportAnalogCallbackContext = (void *)0x0;\n  parser->reportDigitalCallbackContext = (void *)0x0;\n  parser->pinModeCallbackContext = (void *)0x0;\n  parser->pinValueCallbackContext = (void *)0x0;\n  parser->reportFirmwareCallbackContext = (void *)0x0;\n  parser->reportVersionCallbackContext = (void *)0x0;\n  parser->dataBufferOverflowCallbackContext = (void *)0x0;\n  parser->stringCallbackContext = (void *)0x0;\n  parser->sysexCallbackContext = (void *)0x0;\n  parser->systemResetCallbackContext = (void *)0x0;\n  parser->analogCallback = (callbackFunction)0x0;\n  parser->digitalCallback = (callbackFunction)0x0;\n  parser->reportAnalogCallback = (callbackFunction)0x0;\n  parser->reportDigitalCallback = (callbackFunction)0x0;\n  parser->pinModeCallback = (callbackFunction)0x0;\n  parser->pinValueCallback = (callbackFunction)0x0;\n  parser->dataBufferOverflowCallback = (bufferOverflowCallbackFunction)0x0;\n  parser->stringCallback = (stringCallbackFunction)0x0;\n  parser->sysexCallback = (sysexCallbackFunction)0x0;\n  parser->reportFirmwareCallback = (versionCallbackFunction)0x0;\n  parser->reportVersionCallback = (systemCallbackFunction)0x0;\n  parser->systemResetCallback = (systemCallbackFunction)0x0;\n  parser->isBufferUpdateAllowed = buffer == (uint8_t *)0x0;\n  return parser;\n}\n\n",
            "renaming": {
                "this": "parser",
                "dataBuffer": "buffer",
                "dataBufferSize": "bufferSize",
                "executeMultiByteCommand": "multiByteCommand",
                "waitForData": "isWaitingForData",
                "parsingSysex": "isParsingSysex",
                "currentAnalogCallbackContext": "analogCallbackContext",
                "currentDigitalCallbackContext": "digitalCallbackContext",
                "currentReportAnalogCallbackContext": "reportAnalogCallbackContext",
                "currentReportDigitalCallbackContext": "reportDigitalCallbackContext",
                "currentPinModeCallbackContext": "pinModeCallbackContext",
                "currentPinValueCallbackContext": "pinValueCallbackContext",
                "currentReportFirmwareCallbackContext": "reportFirmwareCallbackContext",
                "currentReportVersionCallbackContext": "reportVersionCallbackContext",
                "currentDataBufferOverflowCallbackContext": "dataBufferOverflowCallbackContext",
                "currentStringCallbackContext": "stringCallbackContext",
                "currentSysexCallbackContext": "sysexCallbackContext",
                "currentSystemResetCallbackContext": "systemResetCallbackContext",
                "currentAnalogCallback": "analogCallback",
                "currentDigitalCallback": "digitalCallback",
                "currentReportAnalogCallback": "reportAnalogCallback",
                "currentReportDigitalCallback": "reportDigitalCallback",
                "currentPinModeCallback": "pinModeCallback",
                "currentPinValueCallback": "pinValueCallback",
                "currentDataBufferOverflowCallback": "dataBufferOverflowCallback",
                "currentStringCallback": "stringCallback",
                "currentSysexCallback": "sysexCallback",
                "currentReportFirmwareCallback": "reportFirmwareCallback",
                "currentReportVersionCallback": "reportVersionCallback",
                "currentSystemResetCallback": "systemResetCallback",
                "allowBufferUpdate": "isBufferUpdateAllowed",
                "FUN_080032bc": "initialize_firmata_parser_080032bc"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003306": {
            "entrypoint": "0x08003306",
            "current_name": "attach_08003306",
            "code": "\n/* DWARF original prototype: void  attach_08003306(FirmataParser * parser, uint8_t cmd, callbackFunction\n   callback, void * ctx) */\n\nvoid __parsercall\nfirmata::FirmataParser::attach_08003306(FirmataParser *parser,uint8_t cmd,callbackFunction callback,void *ctx)\n\n{\n  if (cmd == 0xd0) {\n    parser->reportDigitalCallback = callback;\n    parser->reportDigitalCallbackContext = ctx;\n    return;\n  }\n  if (0xd0 < cmd) {\n    if (cmd == 0xf4) {\n      parser->pinModeCallback = callback;\n      parser->pinModeCallbackContext = ctx;\n      return;\n    }\n    if (cmd == 0xf5) {\n      parser->pinValueCallback = callback;\n      parser->pinValueCallbackContext = ctx;\n    }\n    else if (cmd == 0xe0) {\n      parser->analogCallback = callback;\n      parser->analogCallbackContext = ctx;\n      return;\n    }\n    return;\n  }\n  if (cmd == 0x90) {\n    parser->digitalCallback = callback;\n    parser->digitalCallbackContext = ctx;\n    return;\n  }\n  if (cmd == 0xc0) {\n    parser->reportAnalogCallback = callback;\n    parser->reportAnalogCallbackContext = ctx;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003306": "attach_08003306",
                "this": "parser",
                "command": "cmd",
                "newFunction": "callback",
                "context": "ctx",
                "currentReportDigitalCallback": "reportDigitalCallback",
                "currentReportDigitalCallbackContext": "reportDigitalCallbackContext",
                "currentPinModeCallback": "pinModeCallback",
                "currentPinModeCallbackContext": "pinModeCallbackContext",
                "currentPinValueCallback": "pinValueCallback",
                "currentPinValueCallbackContext": "pinValueCallbackContext",
                "currentAnalogCallback": "analogCallback",
                "currentAnalogCallbackContext": "analogCallbackContext",
                "currentDigitalCallback": "digitalCallback",
                "currentDigitalCallbackContext": "digitalCallbackContext",
                "currentReportAnalogCallback": "reportAnalogCallback",
                "currentReportAnalogCallbackContext": "reportAnalogCallbackContext"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003346": {
            "entrypoint": "0x08003346",
            "current_name": "attach_firmware_parser_08003346",
            "code": "\n/* DWARF original prototype: void  attach(FirmataParser * firmwareParser, uint8_t firmwareCommand,\n   versionCallbackFunction versionCallback, void * callbackContext) */\n\nvoid __firmwareParsercall\nfirmata::FirmataParser::attachFirmwareParser_08003346(FirmataParser *firmwareParser,uint8_t firmwareCommand,versionCallbackFunction versionCallback,void *callbackContext)\n\n{\n  if (firmwareCommand == 'y') {\n    firmwareParser->currentReportFirmwareCallback = versionCallback;\n    firmwareParser->currentReportFirmwareCallbackContext = callbackContext;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003346": "attach_firmware_parser_08003346",
                "this": "firmwareParser",
                "command": "firmwareCommand",
                "newFunction": "versionCallback",
                "context": "callbackContext"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003350": {
            "entrypoint": "0x08003350",
            "current_name": "attach_callback_08003350",
            "code": "\n/* DWARF original prototype: void  attach(Parser * parser, uint8_t cmd,\n   systemCallbackFunction callback, void * ctx) */\n\nvoid __parsercall\nfirmata::Parser::attachCallback_08003350(Parser *parser,uint8_t cmd,systemCallbackFunction callback,void *ctx)\n\n{\n  if (cmd == 0xf9) {\n    parser->currentReportVersionCallback = callback;\n    parser->currentReportVersionCallbackContext = ctx;\n    return;\n  }\n  if (cmd != 0xff) {\n    return;\n  }\n  parser->currentSystemResetCallback = callback;\n  parser->currentSystemResetCallbackContext = ctx;\n  return;\n}\n\n",
            "renaming": {
                "FirmataParser": "Parser",
                "FUN_08003350": "attach_callback_08003350",
                "this": "parser",
                "command": "cmd",
                "newFunction": "callback",
                "context": "ctx"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003366": {
            "entrypoint": "0x08003366",
            "current_name": "attach_string_callback_08003366",
            "code": "\n/* DWARF original prototype: void  attach(FirmataParser * parser, uint8_t cmd,\n   stringCallbackFunction callbackFunction, void * callbackContext) */\n\nvoid __parsercall\nfirmata::FirmataParser::attachStringCallback_08003366(FirmataParser *parser,uint8_t cmd,stringCallbackFunction callbackFunction,void *callbackContext)\n\n{\n  if (cmd == 'q') {\n    parser->currentStringCallback = callbackFunction;\n    parser->currentStringCallbackContext = callbackContext;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003366": "attach_string_callback_08003366",
                "this": "parser",
                "command": "cmd",
                "newFunction": "callbackFunction",
                "context": "callbackContext"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003370": {
            "entrypoint": "0x08003370",
            "current_name": "attach_08003370",
            "code": "\n/* DWARF original prototype: void  attach_08003370(FirmataParser * parser, uint8_t command,\n   sysexCallbackFunction callbackFunction, void * callbackContext) */\n\nvoid __parsercall\nfirmata::FirmataParser::attach_08003370(FirmataParser *parser,uint8_t command,sysexCallbackFunction callbackFunction,void *callbackContext)\n\n{\n  parser->currentSysexCallback = callbackFunction;\n  parser->currentSysexCallbackContext = callbackContext;\n  return;\n}\n\n",
            "renaming": {
                "this": "parser",
                "newFunction": "callbackFunction",
                "context": "callbackContext",
                "FUN_08003370": "attach_08003370"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003376": {
            "entrypoint": "0x08003376",
            "current_name": "buffer_data_at_position_08003376",
            "code": "\n/* DWARF original prototype: bool  bufferDataAtPosition_08003376(FirmataParser * parser, uint8_t data, size_t\n   position) */\n\nbool __parsercall firmata::FirmataParser::bufferDataAtPosition_08003376(FirmataParser *parser,uint8_t data,size_t position)\n\n{\n  bool isBufferOverflow;\n  bool hasBufferOverflowed;\n  \n  if (position < parser->bufferSize) {\n    isBufferOverflow = false;\n  }\n  else {\n    isBufferOverflow = true;\n    if (parser->dataBufferOverflowCallback != (bufferOverflowCallbackFunction)0x0) {\n      parser->updateBufferAllowed = true;\n      (*parser->dataBufferOverflowCallback)(parser->dataBufferOverflowCallbackContext);\n      if (position < parser->bufferSize) {\n        isBufferOverflow = false;\n      }\n      else {\n        isBufferOverflow = true;\n      }\n    }\n  }\n  if (!isBufferOverflow) {\n    parser->buffer[position] = data;\n  }\n  return isBufferOverflow;\n}\n\n",
            "renaming": {
                "this": "parser",
                "pos": "position",
                "bVar1": "isBufferOverflow",
                "bufferOverflow": "hasBufferOverflowed",
                "currentDataBufferOverflowCallback": "dataBufferOverflowCallback",
                "allowBufferUpdate": "updateBufferAllowed",
                "currentDataBufferOverflowCallbackContext": "dataBufferOverflowCallbackContext",
                "dataBuffer": "buffer",
                "dataBufferSize": "bufferSize",
                "FUN_08003376": "buffer_data_at_position_08003376"
            },
            "calling": [
                "processSysexMessage",
                "parse"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033a8": {
            "entrypoint": "0x080033a8",
            "current_name": "decode_byte_stream_080033a8",
            "code": "\n/* DWARF original prototype: size_t  decodeByteStream_080033a8(FirmataParser * parser, size_t numBytes, uint8_t *\n   byteStream) */\n\nsize_t __parsercall\nfirmata::FirmataParser::decodeByteStream_080033a8(FirmataParser *parser,size_t numBytes,uint8_t *byteStream)\n\n{\n  byte currentByte;\n  size_t decodedBytes;\n  uint index;\n  \n  decodedBytes = 0;\n  for (index = 0; index < numBytes; index = index + 2) {\n    currentByte = byteStream[index];\n    byteStream[decodedBytes] = currentByte;\n    byteStream[decodedBytes] = byteStream[index + 1] << 7 | currentByte;\n    decodedBytes = decodedBytes + 1;\n  }\n  return decodedBytes;\n}\n\n",
            "renaming": {
                "this": "parser",
                "bytec": "numBytes",
                "bytev": "byteStream",
                "bVar1": "currentByte",
                "sVar2": "decodedBytes",
                "uVar3": "index",
                "FUN_080033a8": "decode_byte_stream_080033a8"
            },
            "calling": [
                "processSysexMessage"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033cc": {
            "entrypoint": "0x080033cc",
            "current_name": "process_sysex_message_080033cc",
            "code": "\n/* DWARF original prototype: void  processSysexMessage_080033cc(parser * this) */\n\nvoid __thiscall firmata::parser::processSysexMessage_080033cc(parser *this)\n\n{\n  uint8_t firstByte;\n  size_t decodedSize;\n  uint8_t *dataBufferPtr;\n  \n  dataBufferPtr = this->dataBuffer;\n  firstByte = *dataBufferPtr;\n  if (firstByte == 'q') {\n    if (this->stringCallback != (stringCallbackFunc)0x0) {\n      decodedSize = decodeByteStream(this,this->sysexBytesRead - 1,dataBufferPtr + 1);\n      bufferDataAtPosition(this,'\\0',decodedSize + 1);\n      (*this->stringCallback)\n                (this->stringCallbackContext,(char *)(this->dataBuffer + 1));\n      return;\n    }\n  }\n  else if (firstByte == 'y') {\n    if (this->reportFirmwareCallback != (versionCallbackFunc)0x0) {\n      if (this->sysexBytesRead < 3) {\n        (*this->reportFirmwareCallback)\n                  (this->reportFirmwareCallbackContext,0,0,(char *)0x0);\n        return;\n      }\n      decodedSize = decodeByteStream(this,this->sysexBytesRead - 3,dataBufferPtr + 3);\n      bufferDataAtPosition(this,'\\0',decodedSize + 3);\n      dataBufferPtr = this->dataBuffer;\n      (*this->reportFirmwareCallback)\n                (this->reportFirmwareCallbackContext,(uint)dataBufferPtr[1],(uint)dataBufferPtr[2],\n                 (char *)(dataBufferPtr + 3));\n      return;\n    }\n  }\n  else if (this->sysexCallback != (sysexCallbackFunc)0x0) {\n    (*this->sysexCallback)\n              (this->sysexCallbackContext,firstByte,this->sysexBytesRead - 1,dataBufferPtr + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FirmataParser": "parser",
                "puVar3": "dataBufferPtr",
                "uVar1": "firstByte",
                "sVar2": "decodedSize",
                "currentStringCallback": "stringCallback",
                "stringCallbackFunction": "stringCallbackFunc",
                "currentStringCallbackContext": "stringCallbackContext",
                "currentReportFirmwareCallback": "reportFirmwareCallback",
                "versionCallbackFunction": "versionCallbackFunc",
                "currentReportFirmwareCallbackContext": "reportFirmwareCallbackContext",
                "currentSysexCallback": "sysexCallback",
                "sysexCallbackFunction": "sysexCallbackFunc",
                "FUN_080033cc": "process_sysex_message_080033cc"
            },
            "calling": [
                "parse"
            ],
            "called": [
                "decodeByteStream",
                "bufferDataAtPosition"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800344a": {
            "entrypoint": "0x0800344a",
            "current_name": "reset_firmata_parser_0800344a",
            "code": "\n/* DWARF original prototype: void  systemReset(FirmataParser * parser) */\n\nvoid __parsercall firmata::FirmataParser::resetFirmataParser_0800344a(FirmataParser *parser)\n\n{\n  size_t i;\n  \n  parser->dataWaiting = 0;\n  parser->currentCommand = '\\0';\n  parser->currentChannel = '\\0';\n  for (i = 0; i < parser->bufferSize; i = i + 1) {\n    parser->buffer[i] = '\\0';\n  }\n  parser->isParsingSysex = false;\n  parser->readSysexBytes = 0;\n  if (parser->resetCallback != (callbackFunction)0x0) {\n    (*parser->resetCallback)(parser->resetCallbackContext);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800344a": "reset_firmata_parser_0800344a",
                "this": "parser",
                "waitForData": "dataWaiting",
                "executeMultiByteCommand": "currentCommand",
                "multiByteChannel": "currentChannel",
                "dataBufferSize": "bufferSize",
                "dataBuffer": "buffer",
                "parsingSysex": "isParsingSysex",
                "sysexBytesRead": "readSysexBytes",
                "currentSystemResetCallback": "resetCallback",
                "systemCallbackFunction": "callbackFunction",
                "currentSystemResetCallbackContext": "resetCallbackContext"
            },
            "calling": [
                "parse"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "parse_08003474",
            "code": "\n/* DWARF original prototype: void  parse_08003474(FirmataParser * parse_08003474r, uint8_t input) */\n\nvoid __parse_08003474rcall firmata::FirmataParser::parse_08003474(FirmataParser *parse_08003474r,uint8_t input)\n\n{\n  byteVar bVar1;\n  uint uVar2;\n  size_t pos;\n  \n  uVar2 = (uint)input;\n  if (parse_08003474r->parsingSysex != false) {\n    if (uVar2 != 0xf7) {\n      bufferData(parse_08003474r,input,parse_08003474r->sysexBytesRead);\n      parse_08003474r->sysexBytesRead = parse_08003474r->sysexBytesRead + 1;\n      return;\n    }\n    parse_08003474r->parsingSysex = false;\n    processSysex(parse_08003474r);\n    return;\n  }\n  if ((parse_08003474r->waitForData == 0) || (0x7f < uVar2)) {\n    if (uVar2 < 0xf0) {\n      parse_08003474r->multiByteChannel = input & 0xf;\n      uVar2 = uVar2 & 0xf0;\n    }\n    if (uVar2 == 0xf0) {\n      parse_08003474r->parsingSysex = true;\n      parse_08003474r->sysexBytesRead = 0;\n      return;\n    }\n    if (uVar2 < 0xf1) {\n      if (uVar2 != 0xc0) {\n        if (uVar2 < 0xc1) {\n          if (uVar2 != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (uVar2 == 0xd0) goto LAB_0800359c;\n          if (uVar2 != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        parse_08003474r->waitForData = 2;\n        parse_08003474r->executeMultiByteCommand = (uint8_t)uVar2;\n        return;\n      }\nLAB_0800359c:\n      parse_08003474r->waitForData = 1;\n      parse_08003474r->executeMultiByteCommand = (uint8_t)uVar2;\n      return;\n    }\n    if (uVar2 != 0xf9) {\n      if (0xf9 < uVar2) {\n        if (uVar2 == 0xff) {\n          resetSystem(parse_08003474r);\n          return;\n        }\n        return;\n      }\n      if (1 < uVar2 - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (parse_08003474r->currentReportVersionCallback != (systemCallback)0x0) {\n      (*parse_08003474r->currentReportVersionCallback)(parse_08003474r->currentReportVersionCallbackContext);\n    }\n  }\n  else {\n    pos = parse_08003474r->waitForData - 1;\n    parse_08003474r->waitForData = pos;\n    bufferData(parse_08003474r,input,pos);\n    if ((parse_08003474r->waitForData == 0) && (bVar1 = parse_08003474r->executeMultiByteCommand, bVar1 != 0)) {\n      if (bVar1 == 0xd0) {\n        if (parse_08003474r->currentReportDigitalCallback != (callback)0x0) {\n          (*parse_08003474r->currentReportDigitalCallback)\n                    (parse_08003474r->currentReportDigitalCallbackContext,parse_08003474r->multiByteChannel,\n                     (uint16_t)*parse_08003474r->dataBuffer);\n        }\n      }\n      else if (bVar1 < 0xd1) {\n        if (bVar1 == 0x90) {\n          if (parse_08003474r->currentDigitalCallback != (callback)0x0) {\n            (*parse_08003474r->currentDigitalCallback)\n                      (parse_08003474r->currentDigitalCallbackContext,parse_08003474r->multiByteChannel,\n                       (ushortVar)parse_08003474r->dataBuffer[1] + (ushortVar)*parse_08003474r->dataBuffer * 0x80);\n          }\n        }\n        else if ((bVar1 == 0xc0) && (parse_08003474r->currentReportAnalogCallback != (callback)0x0)) {\n          (*parse_08003474r->currentReportAnalogCallback)\n                    (parse_08003474r->currentReportAnalogCallbackContext,parse_08003474r->multiByteChannel,\n                     (uint16_t)*parse_08003474r->dataBuffer);\n        }\n      }\n      else if (bVar1 == 0xf4) {\n        if (parse_08003474r->currentPinModeCallback != (callback)0x0) {\n          (*parse_08003474r->currentPinModeCallback)\n                    (parse_08003474r->currentPinModeCallbackContext,parse_08003474r->dataBuffer[1],\n                     (uint16_t)*parse_08003474r->dataBuffer);\n        }\n      }\n      else if (bVar1 == 0xf5) {\n        if (parse_08003474r->currentPinValueCallback != (callback)0x0) {\n          (*parse_08003474r->currentPinValueCallback)\n                    (parse_08003474r->currentPinValueCallbackContext,parse_08003474r->dataBuffer[1],\n                     (uint16_t)*parse_08003474r->dataBuffer);\n        }\n      }\n      else if ((bVar1 == 0xe0) && (parse_08003474r->currentAnalogCallback != (callback)0x0)) {\n        (*parse_08003474r->currentAnalogCallback)\n                  (parse_08003474r->currentAnalogCallbackContext,parse_08003474r->multiByteChannel,\n                   (ushortVar)parse_08003474r->dataBuffer[1] + (ushortVar)*parse_08003474r->dataBuffer * 0x80);\n      }\n      parse_08003474r->executeMultiByteCommand = '\\0';\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "parser",
                "inputData": "input",
                "byte": "byteVar",
                "bufferDataAtPosition": "bufferData",
                "processSysexMessage": "processSysex",
                "systemReset": "resetSystem",
                "systemCallbackFunction": "systemCallback",
                "callbackFunction": "callback",
                "ushort": "ushortVar",
                "FUN_08003474": "parse_08003474"
            },
            "calling": [
                "processInput"
            ],
            "called": [
                "processSysexMessage",
                "systemReset",
                "bufferDataAtPosition"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035b8": {
            "entrypoint": "0x080035b8",
            "current_name": "initialize_system_clock_080035b8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSystemClock_080035b8(void)\n\n{\n  HAL_StatusTypeDef_conflict result;\n  uint32_t hclkFreq;\n  PeriphClkInit PeriphClkInit;\n  ClkInitStruct RCC_ClkInitStruct;\n  OscInitStruct oscInitStruct;\n  \n  oscInitStruct.OscillatorType = 2;\n  oscInitStruct.HSIState = 1;\n  oscInitStruct.HSICalibrationValue = 0x10;\n  oscInitStruct.PLL.PLLState = 2;\n  oscInitStruct.PLL.PLLSource = 0;\n  oscInitStruct.PLL.PLLMUL = 0x380000;\n  result = HAL_RCC_OscConfig((OscInitStruct_conflict *)&oscInitStruct);\n  if (result != HAL_OK) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x88);\n  }\n  RCC_ClkInitStruct.ClockType = 0xf;\n  RCC_ClkInitStruct.SYSCLKSource = 2;\n  RCC_ClkInitStruct.AHBCLKDivider = 0;\n  RCC_ClkInitStruct.APB1CLKDivider = 0x400;\n  RCC_ClkInitStruct.APB2CLKDivider = 0;\n  result = HAL_RCC_ClockConfig((ClkInitStruct_conflict *)&RCC_ClkInitStruct,2);\n  if (result != HAL_OK) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x95);\n  }\n  PeriphClkInit.PeriphClockSelection = 2;\n  PeriphClkInit.AdcClockSelection = 0x8000;\n  result = HAL_RCCEx_PeriphCLKConfig((PeriphClkInit_conflict *)&PeriphClkInit);\n  if (result != HAL_OK) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x9c);\n  }\n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclkFreq / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(SysTick_IRQn,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035b8": "initialize_system_clock_080035b8",
                "HVar1": "result",
                "uVar2": "hclkFreq",
                "RCC_PeriphCLKInitTypeDef": "PeriphClkInit",
                "RCC_ClkInitTypeDef": "ClkInitStruct",
                "RCC_OscInitTypeDef": "OscInitStruct",
                "RCC_OscInitStruct": "oscInitStruct"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_RCC_OscConfig",
                "HAL_RCC_GetHCLKFreq",
                "HAL_RCCEx_PeriphCLKConfig",
                "_Error_Handler",
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config",
                "HAL_RCC_ClockConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003658": {
            "entrypoint": "0x08003658",
            "current_name": "initialize_system_08003658",
            "code": "\nvoid initializeSystem_08003658(void)\n\n{\n  int currentOffset;\n  undefined4 *currentPointer;\n  code *jumpTableFunction;\n  \n  for (currentOffset = 0; (undefined4 *)(currentOffset + 0x20000000) < &completed_8667; currentOffset = currentOffset + 4) {\n    *(undefined4 *)(currentOffset + 0x20000000) = *(undefined4 *)(&_sidata + currentOffset);\n  }\n  for (currentPointer = &completed_8667; currentPointer < &_ebss; currentPointer = currentPointer + 1) {\n    *currentPointer = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTableFunction = (code *)0x800368a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTableFunction)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003658": "initialize_system_08003658",
                "iVar1": "currentOffset",
                "puVar2": "currentPointer",
                "UNRECOVERED_JUMPTABLE": "jumpTableFunction"
            },
            "calling": [],
            "called": [
                "main",
                "SystemInit",
                "__libc_init_array"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a0": {
            "entrypoint": "0x080036a0",
            "current_name": "infinite_loop_080036a0",
            "code": "\nvoid infiniteLoop_080036a0(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080036a0": "infinite_loop_080036a0"
            },
            "calling": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "called": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a2": {
            "entrypoint": "0x080036a2",
            "current_name": "initialize_hardware_configuration_080036a2",
            "code": "\nint initializeHardwareConfiguration_080036a2(EVP_PKEY_CTX *context)\n\n{\n  initializeHardwareConfig();\n  return (int)context;\n}\n\n",
            "renaming": {
                "FUN_080036a2": "initialize_hardware_configuration_080036a2",
                "ctx": "context",
                "hw_config_init": "initializeHardwareConfig"
            },
            "calling": [
                "premain"
            ],
            "called": [
                "hw_config_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036ac": {
            "entrypoint": "0x080036ac",
            "current_name": "check_digital_pin_080036ac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t checkDigitalPin_080036ac(PinName_conflict pin)\n\n{\n  uint32_t index;\n  \n  if ((uint)((int)pin << 0x18) >> 0x1c < 5) {\n    for (index = 0; (index < 0x3c && ((int)pin != (int)(char)(&digitalPin)[index])); index = index + 1\n        ) {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080036ac": "check_digital_pin_080036ac",
                "p": "pin",
                "uVar1": "index"
            },
            "calling": [
                "digitalWriteCallback",
                "setPinValueCallback",
                "analogWriteCallback",
                "systemResetCallback",
                "setPinModeCallback",
                "checkDigitalInputs",
                "loop",
                "reportDigitalCallback",
                "enableI2CPins",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036d4": {
            "entrypoint": "0x080036d4",
            "current_name": "FUNC_080036d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036d8": {
            "entrypoint": "0x080036d8",
            "current_name": "configure_sys_tick_080036d8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureSysTick_080036d8(uint32_t priority)\n\n{\n  uint32_t status;\n  \n  status = configureSysTick_080036d8Interrupt((uint32_t)((ulonglong)coreClock / (1000 / (ulonglong)tickFreq))\n                            );\n  if (status != 0) {\n    return HAL_ERROR;\n  }\n  if (0xf < priority) {\n    return HAL_ERROR;\n  }\n  setSysTickPriority(sysTickIRQ,priority,0);\n  tickPriority = priority;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080036d8": "configure_sys_tick_080036d8",
                "TickPriority": "priority",
                "uVar1": "status",
                "SystemCoreClock": "coreClock",
                "uwTickFreq": "tickFreq",
                "HAL_SYSTICK_Config": "configureSysTickInterrupt",
                "HAL_NVIC_SetPriority": "setSysTickPriority",
                "SysTick_IRQn": "sysTickIRQ",
                "uwTickPrio": "tickPriority"
            },
            "calling": [
                "HAL_Init",
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003724": {
            "entrypoint": "0x08003724",
            "current_name": "initialize_hardware_08003724",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef initializeHardware_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  configurePriorityGrouping(3);\n  initializeTick(0xf);\n  initializeMsp();\n  return HAL_SUCCESS;\n}\n\n",
            "renaming": {
                "FUN_08003724": "initialize_hardware_08003724",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "HAL_NVIC_SetPriorityGrouping": "configurePriorityGrouping",
                "HAL_InitTick": "initializeTick",
                "HAL_MspInit": "initializeMsp",
                "HAL_OK": "HAL_SUCCESS"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit",
                "HAL_InitTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003748": {
            "entrypoint": "0x08003748",
            "current_name": "update_tick_value_08003748",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateTickValue_08003748(void)\n\n{\n  currentTick = tickFrequency + currentTick;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003748": "update_tick_value_08003748",
                "uwTick": "currentTick",
                "uwTickFreq": "tickFrequency"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003760": {
            "entrypoint": "0x08003760",
            "current_name": "get_uw_tick_08003760",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t get_uwTick_08003760(void)\n\n{\n  return current_tick;\n}\n\n",
            "renaming": {
                "FUN_08003760": "get_uw_tick_08003760",
                "uwTick": "current_tick"
            },
            "calling": [
                "HAL_UART_Transmit",
                "uart_debug_write",
                "HAL_RCC_OscConfig",
                "HAL_ADCEx_Calibration_Start",
                "ADC_Enable",
                "UART_WaitOnFlagUntilTimeout",
                "HAL_RCCEx_PeriphCLKConfig",
                "GetCurrentMilli",
                "i2c_master_read",
                "i2c_master_write",
                "HAL_RCC_ClockConfig",
                "HAL_ADC_PollForConversion",
                "ADC_ConversionStop_Disable"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376c": {
            "entrypoint": "0x0800376c",
            "current_name": "perform_conversion_timeout_check_0800376c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict perform_conversion_timeout_check_0800376c(ADC_HandleTypeDef *adc_handle,uint32_t timeout)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t start_tick;\n  uint32_t periph_clk_freq;\n  int sample_delay;\n  uint32_t current_tick;\n  ADC_TypeDef *adc_instance;\n  uint conversion_timeout;\n  uint32_t cpu_cycles;\n  \n  cpu_cycles = 0;\n  start_tick = HAL_GetTick();\n  current_tick = SystemCoreClock;\n  adc_instance = adc_handle->Instance;\n  if ((adc_instance->CR2 & 0x100) == 0) {\n    if (((adc_instance->CR1 & 0x100) == 0) && ((adc_instance->SQR1 & 0xf00000) == 0)) {\n      do {\n        if ((adc_handle->Instance->SR & 2) != 0) goto LAB_0800387e;\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (current_tick = HAL_GetTick(), current_tick - start_tick <= timeout))));\n      adc_handle->State = adc_handle->State | 4;\n      adc_handle->Lock = HAL_UNLOCKED;\n      status = HAL_TIMEOUT;\n    }\n    else {\n      periph_clk_freq = HAL_RCCEx_GetPeriphCLKFreq(2);\n      adc_instance = adc_handle->Instance;\n      if (((adc_instance->SMPR2 & 0x24924924) == 0) && ((adc_instance->SMPR1 & 0x924924) == 0)) {\n        if ((adc_instance->SMPR2 & 0x12492492) == 0) {\n          if ((adc_instance->SMPR1 & 0x492492) == 0) {\n            sample_delay = 0x14;\n          }\n          else {\n            sample_delay = 0x29;\n          }\n        }\n        else {\n          sample_delay = 0x29;\n        }\n      }\n      else if (((adc_instance->SMPR2 & 0x12492492) == 0) && ((adc_instance->SMPR1 & 0x492492) == 0)) {\n        sample_delay = 0x54;\n      }\n      else if ((adc_instance->SMPR2 & 0x249249) == 0) {\n        if ((adc_instance->SMPR1 & 0x249249) == 0) {\n          sample_delay = 0x54;\n        }\n        else {\n          sample_delay = 0xfc;\n        }\n      }\n      else {\n        sample_delay = 0xfc;\n      }\n      conversion_timeout = (current_tick / periph_clk_freq) * sample_delay;\n      for (; cpu_cycles <= conversion_timeout && conversion_timeout - cpu_cycles != 0;\n          cpu_cycles = cpu_cycles + 1) {\n        if ((timeout != 0xffffffff) &&\n           ((timeout == 0 || (current_tick = HAL_GetTick(), timeout < current_tick - start_tick)))) {\n          adc_handle->State = adc_handle->State | 4;\n          adc_handle->Lock = HAL_UNLOCKED;\n          return HAL_TIMEOUT;\n        }\n      }\nLAB_0800387e:\n      adc_handle->Instance->SR = 0xffffffed;\n      adc_handle->State = adc_handle->State | 0x200;\n      if ((adc_handle->Instance->CR2 & 0xe0000) == 0xe0000) {\n        if ((adc_handle->Init).ContinuousConvMode == 0) {\n          adc_handle->State = adc_handle->State & 0xfffffeff;\n          if ((adc_handle->State & 0x1000) == 0) {\n            adc_handle->State = adc_handle->State | 1;\n            status = HAL_OK;\n          }\n          else {\n            status = HAL_OK;\n          }\n        }\n        else {\n          status = HAL_OK;\n        }\n      }\n      else {\n        status = HAL_OK;\n      }\n    }\n  }\n  else {\n    adc_handle->State = adc_handle->State | 0x20;\n    adc_handle->Lock = HAL_UNLOCKED;\n    status = HAL_ERROR;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_0800376c": "perform_conversion_timeout_check_0800376c",
                "hadc": "adc_handle",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_tick",
                "uVar3": "periph_clk_freq",
                "iVar4": "sample_delay",
                "uVar5": "current_tick",
                "pAVar6": "adc_instance",
                "uVar7": "conversion_timeout",
                "Conversion_Timeout_CPU_cycles": "cpu_cycles"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038dc": {
            "entrypoint": "0x080038dc",
            "current_name": "get_adc_data_080038dc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t get_ADC_Data_080038dc(ADC_HandleTypeDef *adc_handle)\n\n{\n  return adc_handle->adc_instance->data_register;\n}\n\n",
            "renaming": {
                "FUN_080038dc": "get_adc_data_080038dc",
                "hadc": "adc_handle",
                "Instance": "adc_instance",
                "DR": "data_register"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038e4": {
            "entrypoint": "0x080038e4",
            "current_name": "configure_adc_channel_080038e4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureADCChannel_080038e4(ADC_HandleTypeDef *adcHandle,ADC_ChannelConfTypeDef *channelConfig)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint rank;\n  uint32_t loopIndex;\n  \n  if (adcHandle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    adcHandle->Lock = HAL_LOCKED;\n    rank = channelConfig->Rank;\n    if (rank < 7) {\n      rank = rank * 5 - 5;\n      adcHandle->Instance->SQR3 =\n           channelConfig->Channel << (rank & 0xff) | adcHandle->Instance->SQR3 & ~(0x1f << (rank & 0xff));\n    }\n    else if (rank < 0xd) {\n      rank = rank * 5 - 0x23;\n      adcHandle->Instance->SQR2 =\n           channelConfig->Channel << (rank & 0xff) | adcHandle->Instance->SQR2 & ~(0x1f << (rank & 0xff));\n    }\n    else {\n      rank = rank * 5 - 0x41;\n      adcHandle->Instance->SQR1 =\n           channelConfig->Channel << (rank & 0xff) | adcHandle->Instance->SQR1 & ~(0x1f << (rank & 0xff));\n    }\n    rank = channelConfig->Channel;\n    if (rank < 10) {\n      adcHandle->Instance->SMPR2 =\n           channelConfig->SamplingTime << (rank * 3 & 0xff) |\n           adcHandle->Instance->SMPR2 & ~(7 << (rank * 3 & 0xff));\n    }\n    else {\n      rank = rank * 3 - 0x1e;\n      adcHandle->Instance->SMPR1 =\n           channelConfig->SamplingTime << (rank & 0xff) | adcHandle->Instance->SMPR1 & ~(7 << (rank & 0xff));\n    }\n    if (channelConfig->Channel - 0x10 < 2) {\n      if (adcHandle->Instance == (ADC_TypeDef *)0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (channelConfig->Channel == 0x10) {\n            for (loopIndex = (SystemCoreClock / 1000000) * 10; loopIndex != 0;\n                loopIndex = loopIndex - 1) {\n            }\n            status = HAL_OK;\n          }\n          else {\n            status = HAL_OK;\n          }\n        }\n        else {\n          status = HAL_OK;\n        }\n      }\n      else {\n        adcHandle->State = adcHandle->State | 0x20;\n        status = HAL_ERROR;\n      }\n    }\n    else {\n      status = HAL_OK;\n    }\n    adcHandle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080038e4": "configure_adc_channel_080038e4",
                "hadc": "adcHandle",
                "sConfig": "channelConfig",
                "HVar1": "status",
                "uVar2": "rank",
                "wait_loop_index": "loopIndex"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a1c": {
            "entrypoint": "0x08003a1c",
            "current_name": "get_adc_state_08003a1c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t get_ADC_state_08003a1c(ADC_HandleTypeDef *adc_handle)\n\n{\n  return adc_handle->State;\n}\n\n",
            "renaming": {
                "FUN_08003a1c": "get_adc_state_08003a1c",
                "hadc": "adc_handle"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a20": {
            "entrypoint": "0x08003a20",
            "current_name": "initialize_adc_08003a20",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeADC_08003a20(ADC_HandleTypeDef *adcHandle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t startTime;\n  uint32_t currentTime;\n  ADC_TypeDef *adcInstance;\n  uint32_t loopIndex;\n  \n  adcInstance = adcHandle->Instance;\n  if ((adcInstance->CR2 & 1) == 0) {\n    adcInstance->CR2 = adcInstance->CR2 | 1;\n    for (loopIndex = SystemCoreClock / 1000000; loopIndex != 0;\n        loopIndex = loopIndex - 1) {\n    }\n    startTime = HAL_GetTick();\n    do {\n      if ((adcHandle->Instance->CR2 & 1) != 0) {\n        return HAL_OK;\n      }\n      currentTime = HAL_GetTick();\n    } while (currentTime - startTime < 3);\n    adcHandle->State = adcHandle->State | 0x10;\n    adcHandle->ErrorCode = adcHandle->ErrorCode | 1;\n    adcHandle->Lock = HAL_UNLOCKED;\n    status = HAL_ERROR;\n  }\n  else {\n    status = HAL_OK;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003a20": "initialize_adc_08003a20",
                "hadc": "adcHandle",
                "HVar1": "status",
                "uVar2": "startTime",
                "uVar3": "currentTime",
                "pAVar4": "adcInstance",
                "wait_loop_index": "loopIndex"
            },
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Start"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003aa0": {
            "entrypoint": "0x08003aa0",
            "current_name": "configure_adc_08003aa0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configure_adc_08003aa0(ADC_HandleTypeDef *adc_handle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  ADC_TypeDef *adc_instance;\n  \n  if (adc_handle->Lock != HAL_LOCKED) {\n    adc_handle->Lock = HAL_LOCKED;\n    status = ADC_Enable(adc_handle);\n    if (status == HAL_OK) {\n      adc_handle->State = adc_handle->State & 0xfffffcfe | 0x100;\n      adc_instance = adc_handle->Instance;\n      if ((adc_instance == (ADC_TypeDef *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        adc_handle->State = adc_handle->State | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          adc_handle->State = adc_handle->State & 0xffffcfff | 0x1000;\n        }\n      }\n      else {\n        adc_handle->State = adc_handle->State & 0xffefffff;\n        if ((adc_instance->CR1 & 0x400) != 0) {\n          adc_handle->State = adc_handle->State & 0xffffcfff | 0x1000;\n        }\n      }\n      if ((adc_handle->State & 0x1000) == 0) {\n        adc_handle->ErrorCode = 0;\n      }\n      else {\n        adc_handle->ErrorCode = adc_handle->ErrorCode & 0xfffffff9;\n      }\n      adc_handle->Lock = HAL_UNLOCKED;\n      adc_instance->SR = 0xfffffffd;\n      adc_instance = adc_handle->Instance;\n      if (((adc_instance->CR2 & 0xe0000) == 0xe0000) &&\n         ((adc_instance != (ADC_TypeDef *)0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        adc_instance->CR2 = adc_instance->CR2 | 0x500000;\n      }\n      else {\n        adc_instance->CR2 = adc_instance->CR2 | 0x100000;\n      }\n    }\n    else {\n      adc_handle->Lock = HAL_UNLOCKED;\n    }\n    return status;\n  }\n  return HAL_BUSY;\n}\n\n",
            "renaming": {
                "FUN_08003aa0": "configure_adc_08003aa0",
                "hadc": "adc_handle",
                "HVar1": "status",
                "pAVar2": "adc_instance"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_Enable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b8c": {
            "entrypoint": "0x08003b8c",
            "current_name": "check_adc_status_08003b8c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict checkADCStatus_08003b8c(ADC_HandleTypeDef *adcHandle)\n\n{\n  uint32_t currentTick;\n  uint32_t newTick;\n  ADC_TypeDef *adcInstance;\n  \n  adcInstance = adcHandle->Instance;\n  if ((adcInstance->CR2 & 1) == 0) {\n    return HAL_OK;\n  }\n  adcInstance->CR2 = adcInstance->CR2 & 0xfffffffe;\n  currentTick = HAL_GetTick();\n  do {\n    if ((adcHandle->Instance->CR2 & 1) == 0) {\n      return HAL_OK;\n    }\n    newTick = HAL_GetTick();\n  } while (newTick - currentTick < 3);\n  adcHandle->State = adcHandle->State | 0x10;\n  adcHandle->ErrorCode = adcHandle->ErrorCode | 1;\n  return HAL_ERROR;\n}\n\n",
            "renaming": {
                "FUN_08003b8c": "check_adc_status_08003b8c",
                "hadc": "adcHandle",
                "uVar1": "currentTick",
                "uVar2": "newTick",
                "pAVar3": "adcInstance"
            },
            "calling": [
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Stop",
                "HAL_ADC_DeInit"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003bd8": {
            "entrypoint": "0x08003bd8",
            "current_name": "configure_adc_08003bd8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configure_ADC_08003bd8(ADC_HandleTypeDef *ADC_handle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t value1;\n  uint value2;\n  uint value3;\n  uint32_t value4;\n  \n  if (ADC_handle == (ADC_HandleTypeDef *)0x0) {\n    return HAL_ERROR;\n  }\n  if (ADC_handle->State == 0) {\n    ADC_handle->ErrorCode = 0;\n    ADC_handle->Lock = HAL_UNLOCKED;\n    HAL_ADC_MspInit(ADC_handle);\n  }\n  status = ADC_ConversionStop_Disable(ADC_handle);\n  if (((ADC_handle->State & 0x10) == 0) && (status == HAL_OK)) {\n    ADC_handle->State = ADC_handle->State & 0xffffeefd | 2;\n    value4 = (ADC_handle->Init).ContinuousConvMode;\n    value2 = (ADC_handle->Init).DataAlign | (ADC_handle->Init).ExternalTrigConv | value4 << 1;\n    value1 = (ADC_handle->Init).ScanConvMode;\n    if (value1 == 0x100) {\n      value3 = 0x100;\n    }\n    else {\n      value3 = 0;\n      if (value1 == 1) {\n        value3 = 0x100;\n      }\n    }\n    if ((ADC_handle->Init).DiscontinuousConvMode == 1) {\n      if (value4 == 0) {\n        value3 = value3 | ((ADC_handle->Init).NbrOfDiscConversion - 1) * 0x2000 | 0x800;\n      }\n      else {\n        ADC_handle->State = ADC_handle->State | 0x20;\n        ADC_handle->ErrorCode = ADC_handle->ErrorCode | 1;\n      }\n    }\n    ADC_handle->Instance->CR1 = value3 | ADC_handle->Instance->CR1 & 0xffff16ff;\n    ADC_handle->Instance->CR2 = ADC_handle->Instance->CR2 & 0xffe1f7fd | value2;\n    value1 = (ADC_handle->Init).ScanConvMode;\n    if ((value1 == 0x100) || (value1 == 1)) {\n      value3 = ((ADC_handle->Init).NbrOfConversion - 1) * 0x100000;\n    }\n    else {\n      value3 = 0;\n    }\n    ADC_handle->Instance->SQR1 = value3 | ADC_handle->Instance->SQR1 & 0xff0fffff;\n    if (value2 != (ADC_handle->Instance->CR2 & 0xff1f0efe)) {\n      ADC_handle->State = ADC_handle->State & 0xffffffed | 0x10;\n      ADC_handle->ErrorCode = ADC_handle->ErrorCode | 1;\n      return HAL_ERROR;\n    }\n    ADC_handle->ErrorCode = 0;\n    ADC_handle->State = ADC_handle->State & 0xfffffffc | 1;\n    return HAL_OK;\n  }\n  ADC_handle->State = ADC_handle->State | 0x10;\n  return HAL_ERROR;\n}\n\n",
            "renaming": {
                "FUN_08003bd8": "configure_adc_08003bd8",
                "hadc": "ADC_handle",
                "HVar1": "status",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "value3",
                "uVar5": "value4"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_ADC_MspInit",
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ce8": {
            "entrypoint": "0x08003ce8",
            "current_name": "disable_adc_conversion_08003ce8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef disableADCConversion_08003ce8(ADC_HandleTypeDef *adcHandle)\n\n{\n  HAL_StatusTypeDef status;\n  \n  if (adcHandle == (ADC_HandleTypeDef *)0x0) {\n    status = HAL_ERROR;\n  }\n  else {\n    adcHandle->adcState = adcHandle->adcState | 2;\n    status = disableADCConversion_08003ce8Stop(adcHandle);\n    if (status == HAL_OK) {\n      adcHandle->adcInstance->statusRegister = 0xffffffe0;\n      adcHandle->adcInstance->controlRegister1 = adcHandle->adcInstance->controlRegister1 & 0xff3f0000;\n      adcHandle->adcInstance->controlRegister2 = adcHandle->adcInstance->controlRegister2 & 0xff0106f0;\n      adcHandle->adcInstance->sampleRateRegister1 = adcHandle->adcInstance->sampleRateRegister1 & 0xff000000;\n      adcHandle->adcInstance->sampleRateRegister2 = adcHandle->adcInstance->sampleRateRegister2 & 0xc0000000;\n      adcHandle->adcInstance->jOffsetRegister1 = adcHandle->adcInstance->jOffsetRegister1 & 0xfffff000;\n      adcHandle->adcInstance->jOffsetRegister2 = adcHandle->adcInstance->jOffsetRegister2 & 0xfffff000;\n      adcHandle->adcInstance->jOffsetRegister3 = adcHandle->adcInstance->jOffsetRegister3 & 0xfffff000;\n      adcHandle->adcInstance->jOffsetRegister4 = adcHandle->adcInstance->jOffsetRegister4 & 0xfffff000;\n      adcHandle->adcInstance->highThresholdRegister = adcHandle->adcInstance->highThresholdRegister & 0xfffff000;\n      adcHandle->adcInstance->lowThresholdRegister = adcHandle->adcInstance->lowThresholdRegister & 0xfffff000;\n      adcHandle->adcInstance->sequenceRegister1 = adcHandle->adcInstance->sequenceRegister1 & 0xff000000;\n      adcHandle->adcInstance->sequenceRegister1 = adcHandle->adcInstance->sequenceRegister1 & 0xff000000;\n      adcHandle->adcInstance->sequenceRegister2 = adcHandle->adcInstance->sequenceRegister2 & 0xc0000000;\n      adcHandle->adcInstance->sequenceRegister3 = adcHandle->adcInstance->sequenceRegister3 & 0xc0000000;\n      adcHandle->adcInstance->injectedSequenceRegister = adcHandle->adcInstance->injectedSequenceRegister & 0xffc00000;\n      adcHandle->adcInstance->injectedSequenceRegister = adcHandle->adcInstance->injectedSequenceRegister & 0xffc00000;\n      deinitializeADC(adcHandle);\n      adcHandle->errorCode = 0;\n      adcHandle->adcState = 0;\n    }\n    adcHandle->adcLock = HAL_UNLOCKED;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003ce8": "disable_adc_conversion_08003ce8",
                "hadc": "adcHandle",
                "HVar1": "status",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "ADC_ConversionStop_Disable": "disableADCConversionStop",
                "Instance": "adcInstance",
                "SR": "statusRegister",
                "CR1": "controlRegister1",
                "CR2": "controlRegister2",
                "SMPR1": "sampleRateRegister1",
                "SMPR2": "sampleRateRegister2",
                "JOFR1": "jOffsetRegister1",
                "JOFR2": "jOffsetRegister2",
                "JOFR3": "jOffsetRegister3",
                "JOFR4": "jOffsetRegister4",
                "HTR": "highThresholdRegister",
                "LTR": "lowThresholdRegister",
                "SQR1": "sequenceRegister1",
                "SQR2": "sequenceRegister2",
                "SQR3": "sequenceRegister3",
                "JSQR": "injectedSequenceRegister",
                "HAL_ADC_MspDeInit": "deinitializeADC",
                "ErrorCode": "errorCode",
                "State": "adcState",
                "Lock": "adcLock"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003de4": {
            "entrypoint": "0x08003de4",
            "current_name": "adc_stop_conversion_08003de4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef adc_stop_conversion_08003de4(ADC_HandleTypeDef *adc_handle)\n\n{\n  HAL_StatusTypeDef status;\n  \n  if (adc_handle->Lock == HAL_ADC_LOCKED) {\n    return HAL_ADC_BUSY;\n  }\n  adc_handle->Lock = HAL_ADC_LOCKED;\n  status = adc_conversion_stop_disable(adc_handle);\n  if (status == HAL_OK) {\n    adc_handle->State = adc_handle->State & 0xffffeefe | 1;\n  }\n  adc_handle->Lock = HAL_ADC_UNLOCKED;\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003de4": "adc_stop_conversion_08003de4",
                "hadc": "adc_handle",
                "HVar1": "status",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "HAL_LOCKED": "HAL_ADC_LOCKED",
                "HAL_BUSY": "HAL_ADC_BUSY",
                "HAL_UNLOCKED": "HAL_ADC_UNLOCKED",
                "ADC_ConversionStop_Disable": "adc_conversion_stop_disable"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e20": {
            "entrypoint": "0x08003e20",
            "current_name": "perform_adc_conversion_08003e20",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict perform_ADC_conversion_08003e20(ADC_HandleTypeDef *ADC_handle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t sys_clk_freq;\n  uint32_t sys_clk;\n  ADC_TypeDef *ADC_instance;\n  uint32_t start_time;\n  uint32_t loop_index;\n  \n  if (ADC_handle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  ADC_handle->Lock = HAL_LOCKED;\n  status = ADC_ConversionStop_Disable(ADC_handle);\n  if (status == HAL_OK) {\n    ADC_handle->State = ADC_handle->State & 0xffffeefd | 2;\n    sys_clk = SystemCoreClock;\n    sys_clk_freq = HAL_RCCEx_GetPeriphCLKFreq(2);\n    for (loop_index = sys_clk / sys_clk_freq << 1; loop_index != 0;\n        loop_index = loop_index - 1) {\n    }\n    ADC_Enable(ADC_handle);\n    ADC_handle->Instance->CR2 = ADC_handle->Instance->CR2 | 8;\n    sys_clk = HAL_GetTick();\n    while (ADC_instance = ADC_handle->Instance, (ADC_instance->CR2 & 8) != 0) {\n      sys_clk_freq = HAL_GetTick();\n      if (10 < sys_clk_freq - sys_clk) {\n        ADC_handle->State = ADC_handle->State & 0xffffffed | 0x10;\n        ADC_handle->Lock = HAL_UNLOCKED;\n        return HAL_ERROR;\n      }\n    }\n    ADC_instance->CR2 = ADC_instance->CR2 | 4;\n    sys_clk = HAL_GetTick();\n    while ((ADC_handle->Instance->CR2 & 4) != 0) {\n      sys_clk_freq = HAL_GetTick();\n      if (10 < sys_clk_freq - sys_clk) {\n        ADC_handle->State = ADC_handle->State & 0xffffffed | 0x10;\n        ADC_handle->Lock = HAL_UNLOCKED;\n        return HAL_ERROR;\n      }\n    }\n    ADC_handle->State = ADC_handle->State & 0xfffffffc | 1;\n  }\n  ADC_handle->Lock = HAL_UNLOCKED;\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003e20": "perform_adc_conversion_08003e20",
                "hadc": "ADC_handle",
                "HVar1": "status",
                "uVar2": "sys_clk_freq",
                "uVar3": "sys_clk",
                "pAVar4": "ADC_instance",
                "tickstart": "start_time",
                "wait_loop_index": "loop_index"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_Enable",
                "ADC_ConversionStop_Disable",
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f0c": {
            "entrypoint": "0x08003f0c",
            "current_name": "configure_priority_group_08003f0c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid configurePriorityGroup_08003f0c(uint32_t priorityGroup)\n\n{\n  uint32_t registerValue;\n  \n  _DAT_e000ed0c = (priorityGroup & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f0c": "configure_priority_group_08003f0c",
                "PriorityGroup": "priorityGroup",
                "reg_value": "registerValue"
            },
            "calling": [
                "premain",
                "HAL_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f30": {
            "entrypoint": "0x08003f30",
            "current_name": "set_interrupt_priority_08003f30",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid setInterruptPriority_08003f30(IRQn IRQn,uint32_t preemptPriority,uint32_t subPriority)\n\n{\n  uint irqNumber;\n  uint priorityShift;\n  uint32_t priorityGroupTmp;\n  uint32_t subPriorityBits;\n  uint32_t preemptPriorityBits;\n  \n  irqNumber = (uint)IRQn;\n  priorityShift = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  preemptPriorityBits = 7 - priorityShift;\n  if (3 < preemptPriorityBits) {\n    preemptPriorityBits = 4;\n  }\n  if (priorityShift + 4 < 7) {\n    subPriorityBits = 0;\n  }\n  else {\n    subPriorityBits = priorityShift - 3;\n  }\n  priorityShift = (preemptPriority & (1 << (preemptPriorityBits & 0xff)) - 1U) << (subPriorityBits & 0xff) |\n          (1 << (subPriorityBits & 0xff)) - 1U & subPriority;\n  if ((int)irqNumber < 0) {\n    *(char *)((irqNumber & 0xf) + 0xe000ed14) = (char)(priorityShift << 4);\n  }\n  else {\n    *(char *)(irqNumber + 0xe000e400) = (char)(priorityShift << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f30": "set_interrupt_priority_08003f30",
                "IRQn_Type_conflict": "IRQn",
                "PreemptPriority": "preemptPriority",
                "SubPriority": "subPriority",
                "PriorityGroupTmp": "priorityGroupTmp",
                "SubPriorityBits": "subPriorityBits",
                "PreemptPriorityBits": "preemptPriorityBits",
                "uVar1": "irqNumber",
                "uVar2": "priorityShift"
            },
            "calling": [
                "SystemClock_Config",
                "TimerPulseInit",
                "uart_attach_rx_callback",
                "uart_attach_tx_callback",
                "i2c_custom_init",
                "HAL_InitTick"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "set_irq_enabled_08003f94",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setIRQEnabled_08003f94(IRQNumber IRQn)\n\n{\n  uint convertedIRQNumber;\n  \n  convertedIRQNumber = (uint)IRQn;\n  if (-1 < (int)convertedIRQNumber) {\n    *(int *)((convertedIRQNumber >> 5) * 4 + -0x1fff1f00) = 1 << (convertedIRQNumber & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "set_irq_enabled_08003f94",
                "IRQn_Type_conflict": "IRQNumber",
                "uVar1": "convertedIRQNumber"
            },
            "calling": [
                "TimerPulseInit",
                "uart_attach_rx_callback",
                "uart_attach_tx_callback",
                "i2c_custom_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fb0": {
            "entrypoint": "0x08003fb0",
            "current_name": "configure_interrupt_08003fb0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureInterrupt_08003fb0(interruptType_Type_conflict interruptType)\n\n{\n  uint interruptNum;\n  \n  interruptNum = (uint)interruptType;\n  if (-1 < (int)interruptNum) {\n    *(int *)(((interruptNum >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (interruptNum & 0x1f);\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fb0": "configure_interrupt_08003fb0",
                "IRQn": "interruptType",
                "uVar1": "interruptNum"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd8": {
            "entrypoint": "0x08003fd8",
            "current_name": "set_ticks_numb_08003fd8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t setTicksNumb_08003fd8(uint32_t ticksNumber)\n\n{\n  if (ticksNumber - 1 < 0x1000000) {\n    _DAT_e000e014 = ticksNumber - 1;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003fd8": "set_ticks_numb_08003fd8",
                "TicksNumb": "ticksNumber"
            },
            "calling": [
                "SystemClock_Config",
                "HAL_InitTick"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004004": {
            "entrypoint": "0x08004004",
            "current_name": "set_pending_interrupt_08004004",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setPendingInterrupt_08004004(interruptNumber_Type_conflict interruptNumber)\n\n{\n  uint interruptIndex;\n  \n  interruptIndex = (uint)interruptNumber;\n  if (-1 < (int)interruptIndex) {\n    *(int *)(((interruptIndex >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (interruptIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004004": "set_pending_interrupt_08004004",
                "IRQn": "interruptNumber",
                "uVar1": "interruptIndex"
            },
            "calling": [
                "USART1_IRQHandler",
                "USART3_IRQHandler",
                "USART2_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004024": {
            "entrypoint": "0x08004024",
            "current_name": "configure_clk_source_08004024",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid configureCLKSource_08004024(uint32_t source)\n\n{\n  if (source != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004024": "configure_clk_source_08004024",
                "CLKSource": "source"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004044": {
            "entrypoint": "0x08004044",
            "current_name": "FUNC_08004044",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004046": {
            "entrypoint": "0x08004046",
            "current_name": "handle_sys_tick_interrupt_08004046",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSysTickInterrupt_08004046(void)\n\n{\n  processSysTickInterrupt();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004046": "handle_sys_tick_interrupt_08004046",
                "HAL_SYSTICK_Callback": "processSysTickInterrupt"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004050": {
            "entrypoint": "0x08004050",
            "current_name": "configure_dma_channel_08004050",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef configureDMAChannel_08004050(DMA_HandleTypeDef *dmaHandle)\n\n{\n  DMA_Channel_TypeDef *currentChannel;\n  \n  if (dmaHandle->State != HAL_DMA_STATE_BUSY) {\n    dmaHandle->ErrorCode = 4;\n    return HAL_ERROR;\n  }\n  dmaHandle->Instance->CCR = dmaHandle->Instance->CCR & 0xfffffff1;\n  dmaHandle->Instance->CCR = dmaHandle->Instance->CCR & 0xfffffffe;\n  currentChannel = dmaHandle->Instance;\n  if (currentChannel == (DMA_Channel_TypeDef *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (currentChannel == (DMA_Channel_TypeDef *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (currentChannel == (DMA_Channel_TypeDef *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (currentChannel == (DMA_Channel_TypeDef *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (currentChannel == (DMA_Channel_TypeDef *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (currentChannel == (DMA_Channel_TypeDef *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  dmaHandle->State = HAL_DMA_STATE_READY;\n  dmaHandle->Lock = HAL_UNLOCKED;\n  if (dmaHandle->XferAbortCallback != (_func_void___DMA_HandleTypeDef_ptr_conflict *)0x0) {\n    (*dmaHandle->XferAbortCallback)(dmaHandle);\n    return HAL_OK;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004050": "configure_dma_channel_08004050",
                "hdma": "dmaHandle",
                "pDVar1": "currentChannel",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "DMA_HandleTypeDef_conflict": "DMA_HandleTypeDef",
                "DMA_Channel_TypeDef_conflict": "DMA_Channel_TypeDef"
            },
            "calling": [
                "I2C_ITError",
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "configure_gpio_080040e8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid configureGPIO_080040e8(GPIO_TypeDef *gpioPort,gpioConfigTypeDef *gpioConfig)\n\n{\n  GPIO_TypeDef *currentPin;\n  uint pinBit;\n  uint pinCheck;\n  uint pinIndex;\n  uint pinMode;\n  uint32_t pinSpeed;\n  int registerOffset;\n  uint32_t *configRegister;\n  int portNumber;\n  uint32_t tempRegister;\n  \n  pinSpeed = 0;\n  pinIndex = 0;\n  do {\n    if (0xf < pinIndex) {\n      return;\n    }\n    pinBit = 1 << (pinIndex & 0xff);\n    pinCheck = gpioConfig->Pin & pinBit;\n    if (pinBit == pinCheck) {\n      pinMode = gpioConfig->Mode;\n      if (pinMode == 0x12) {\n        pinSpeed = gpioConfig->Speed + 0xc;\n      }\n      else if (pinMode < 0x13) {\n        if (pinMode == 2) {\n          pinSpeed = gpioConfig->Speed + 8;\n        }\n        else if (pinMode < 3) {\n          if (pinMode == 0) goto LAB_0800423a;\n          if (pinMode == 1) {\n            pinSpeed = gpioConfig->Speed;\n          }\n        }\n        else if (pinMode == 3) {\n          pinSpeed = 0;\n        }\n        else if (pinMode == 0x11) {\n          pinSpeed = gpioConfig->Speed + 4;\n        }\n      }\n      else if (pinMode == 0x10210000) {\nLAB_0800423a:\n        if (gpioConfig->Pull == 0) {\n          pinSpeed = 4;\n        }\n        else if (gpioConfig->Pull == 1) {\n          gpioPort->BSRR = pinBit;\n          pinSpeed = 8;\n        }\n        else {\n          gpioPort->BRR = pinBit;\n          pinSpeed = 8;\n        }\n      }\n      else if (pinMode < 0x10210001) {\n        if ((pinMode == 0x10110000) || (pinMode == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((pinMode == 0x10310000) || ((pinMode == 0x10320000 || (pinMode == 0x10220000))))\n      goto LAB_0800423a;\n      pinBit = pinIndex;\n      currentPin = gpioPort;\n      if (0xff < pinCheck) {\n        pinBit = pinIndex - 8;\n        currentPin = (GPIO_TypeDef *)&gpioPort->CRH;\n      }\n      currentPin->CRL = currentPin->CRL & ~(0xf << (pinBit << 2 & 0xff)) | pinSpeed << (pinBit << 2 & 0xff);\n      if ((gpioConfig->Mode & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        registerOffset = (pinIndex & 3) << 2;\n        if (gpioPort == (GPIO_TypeDef *)0x40010800) {\n          portNumber = 0;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40010c00) {\n          portNumber = 1;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40011000) {\n          portNumber = 2;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40011400) {\n          portNumber = 3;\n        }\n        else {\n          portNumber = 4;\n        }\n        *(uint *)(((pinIndex >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((pinIndex >> 2) + 2) * 4 + 0x40010000) & ~(0xf << registerOffset) | portNumber << registerOffset;\n        if ((gpioConfig->Mode & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~pinCheck;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | pinCheck;\n        }\n        if ((gpioConfig->Mode & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~pinCheck;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | pinCheck;\n        }\n        if ((gpioConfig->Mode & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~pinCheck;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | pinCheck;\n        }\n        if ((gpioConfig->Mode & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~pinCheck;\n        }\n        else {\n          _DAT_4001040c = pinCheck | _DAT_4001040c;\n        }\n      }\n    }\n    pinIndex = pinIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040e8": "configure_gpio_080040e8",
                "GPIOx": "gpioPort",
                "GPIO_Init": "gpioConfig",
                "pGVar1": "currentPin",
                "uVar2": "pinBit",
                "uVar3": "pinCheck",
                "uVar4": "pinIndex",
                "uVar5": "pinMode",
                "uVar6": "pinSpeed",
                "configregister": "configRegister",
                "iVar7": "registerOffset",
                "iVar8": "portNumber",
                "tmpreg": "tempRegister"
            },
            "calling": [
                "uart_init",
                "HAL_TIM_PWM_MspInit",
                "HAL_ADC_MspInit",
                "digital_io_init",
                "i2c_custom_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042d4": {
            "entrypoint": "0x080042d4",
            "current_name": "get_gpio_pin_state_080042d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\ngpio_pinState get_GPIO_PinState_080042d4(GPIO_TypeDef *gpio_port,uint16_t gpio_pin)\n\n{\n  gpio_pinState pin_state;\n  \n  if (((uint)gpio_pin & gpio_port->IDR) == 0) {\n    pin_state = GPIO_PIN_RESET;\n    return pin_state;\n  }\n  return GPIO_PIN_SET;\n}\n\n",
            "renaming": {
                "FUN_080042d4": "get_gpio_pin_state_080042d4",
                "GPIOx": "gpio_port",
                "GPIO_Pin": "gpio_pin",
                "bitstatus": "pin_state"
            },
            "calling": [
                "digital_io_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e2": {
            "entrypoint": "0x080042e2",
            "current_name": "set_gpio_pin_state_080042e2",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setGPIO_PinState_080042e2(GPIO_TypeDef *gpioPort,uint16_t gpioPin,gpioPinState pinState)\n\n{\n  if (pinState == GPIO_PIN_RESET) {\n    gpioPort->BSRR = (uint)gpioPin << 0x10;\n    return;\n  }\n  gpioPort->BSRR = (uint)gpioPin;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042e2": "set_gpio_pin_state_080042e2",
                "GPIOx": "gpioPort",
                "GPIO_Pin": "gpioPin",
                "PinState": "pinState"
            },
            "calling": [
                "digital_io_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042f0": {
            "entrypoint": "0x080042f0",
            "current_name": "handle_triggered_gpio_interrupt_080042f0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid handle_triggered_gpio_interrupt_080042f0(uint16_t triggered_pin)\n\n{\n  if ((_DAT_40010414 & triggered_pin) != 0) {\n    _DAT_40010414 = (uint)triggered_pin;\n    HAL_GPIO_EXTI_Callback(triggered_pin);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042f0": "handle_triggered_gpio_interrupt_080042f0",
                "GPIO_Pin": "triggered_pin"
            },
            "calling": [
                "EXTI15_10_IRQHandler",
                "EXTI3_IRQHandler",
                "EXTI9_5_IRQHandler",
                "EXTI2_IRQHandler",
                "EXTI4_IRQHandler",
                "EXTI1_IRQHandler",
                "EXTI0_IRQHandler"
            ],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800430c": {
            "entrypoint": "0x0800430c",
            "current_name": "configure_i2_c_0800430c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef configureI2C_0800430c(I2C_HandleTypeDef *i2cHandle)\n\n{\n  if (i2cHandle->mode == HAL_I2C_MODE_MEMORY) {\n    if (i2cHandle->eventCount == 0) {\n      i2cHandle->instance->dataRegister = i2cHandle->deviceAddress & 0xfe;\n    }\n    else {\n      i2cHandle->instance->dataRegister = i2cHandle->deviceAddress & 0xff | 1;\n    }\n  }\n  else if ((i2cHandle->init).addressingMode == 0x4000) {\n    if (i2cHandle->state == HAL_I2C_STATE_BUSY_TRANSMIT) {\n      i2cHandle->instance->dataRegister = i2cHandle->deviceAddress & 0xfe;\n    }\n    else {\n      i2cHandle->instance->dataRegister = i2cHandle->deviceAddress & 0xff | 1;\n    }\n  }\n  else if (i2cHandle->eventCount == 0) {\n    i2cHandle->instance->dataRegister = (i2cHandle->deviceAddress << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (i2cHandle->eventCount == 1) {\n    i2cHandle->instance->dataRegister = (i2cHandle->deviceAddress << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_0800430c": "configure_i2_c_0800430c",
                "hi2c": "i2cHandle",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "I2C_HandleTypeDef_conflict": "I2C_HandleTypeDef",
                "Mode": "mode",
                "EventCount": "eventCount",
                "Init": "init",
                "AddressingMode": "addressingMode",
                "State": "state",
                "HAL_I2C_MODE_MEM": "HAL_I2C_MODE_MEMORY",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TRANSMIT",
                "Instance": "instance",
                "Devaddress": "deviceAddress",
                "DR": "dataRegister"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004396": {
            "entrypoint": "0x08004396",
            "current_name": "set_i2_c_device_address_08004396",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict set_I2C_device_address_08004396(I2C_HandleTypeDef_conflict *i2c_handle)\n\n{\n  i2c_handle->i2c_instance->data_register = i2c_handle->device_address & 0xff;\n  return HAL_operation_successful;\n}\n\n",
            "renaming": {
                "FUN_08004396": "set_i2_c_device_address_08004396",
                "hi2c": "i2c_handle",
                "Instance": "i2c_instance",
                "Devaddress": "device_address",
                "DR": "data_register",
                "HAL_OK": "HAL_operation_successful"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043a2": {
            "entrypoint": "0x080043a2",
            "current_name": "initialize_i2_c_080043a2",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeI2C_080043a2(I2C_HandleTypeDef_conflict *i2cHandler)\n\n{\n  uint32_t currentTransferOptions;\n  uint32_t var1;\n  I2C_TypeDef_conflict *iVar2;\n  uint32_t previousState;\n  uint32_t tempReg;\n  uint32_t tempReg1;\n  uint32_t tempReg2;\n  uint32_t tempReg3;\n  uint32_t tempReg4;\n  uint32_t tempReg5;\n  uint32_t tempReg6;\n  uint32_t tempReg7;\n  uint32_t tempReg8;\n  uint32_t tempReg9;\n  uint32_t tempReg10;\n  \n  var1 = i2cHandler->XferOptions;\n  if ((i2cHandler->State == HAL_I2C_STATE_BUSY_RX) &&\n     ((i2cHandler->EventCount != 0 || (i2cHandler->Mode != HAL_I2C_MODE_MEM)))) {\n    if ((i2cHandler->EventCount == 0) && ((i2cHandler->Init).AddressingMode == 0xc000)) {\n      i2cHandler->Instance->CR1 = i2cHandler->Instance->CR1 | 0x100;\n      i2cHandler->EventCount = i2cHandler->EventCount + 1;\n    }\n    else {\n      if (i2cHandler->XferCount == 0) {\n        i2cHandler->Instance->CR1 = i2cHandler->Instance->CR1 | 0x200;\n      }\n      else if (i2cHandler->XferCount == 1) {\n        if (var1 == 0xffff0000) {\n          i2cHandler->Instance->CR1 = i2cHandler->Instance->CR1 & 0xfffffbff;\n          iVar2 = i2cHandler->Instance;\n          if ((iVar2->CR2 & 0x800) == 0) {\n            iVar2->CR1 = iVar2->CR1 | 0x200;\n          }\n          else {\n            iVar2->CR1 = iVar2->CR1 & 0xfffffbff;\n          }\n        }\n        else if (((var1 == 4) || (var1 == 8)) || (i2cHandler->PreviousState == 0x12)) {\n          i2cHandler->Instance->CR1 = i2cHandler->Instance->CR1 & 0xfffffbff;\n          i2cHandler->Instance->CR1 = i2cHandler->Instance->CR1 | 0x200;\n        }\n        else if (i2cHandler->XferOptions == 2) {\n          i2cHandler->Instance->CR1 = i2cHandler->Instance->CR1 | 0x400;\n        }\n        else {\n          i2cHandler->Instance->CR1 = i2cHandler->Instance->CR1 & 0xfffffbff;\n        }\n      }\n      else if (i2cHandler->XferCount == 2) {\n        if (i2cHandler->XferOptions == 2) {\n          i2cHandler->Instance->CR1 = i2cHandler->Instance->CR1 | 0x400;\n        }\n        else {\n          i2cHandler->Instance->CR1 = i2cHandler->Instance->CR1 | 0x800;\n          i2cHandler->Instance->CR1 = i2cHandler->Instance->CR1 & 0xfffffbff;\n        }\n        iVar2 = i2cHandler->Instance;\n        if ((iVar2->CR2 & 0x800) != 0) {\n          iVar2->CR2 = iVar2->CR2 | 0x1000;\n        }\n      }\n      else {\n        i2cHandler->Instance->CR1 = i2cHandler->Instance->CR1 | 0x400;\n        iVar2 = i2cHandler->Instance;\n        if ((iVar2->CR2 & 0x800) != 0) {\n          iVar2->CR2 = iVar2->CR2 | 0x1000;\n        }\n      }\n      i2cHandler->EventCount = 0;\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080043a2": "initialize_i2_c_080043a2",
                "hi2c": "i2cHandler",
                "CurrentXferOptions": "currentTransferOptions",
                "uVar1": "var1",
                "pIVar2": "iVar2",
                "Prev_State": "previousState",
                "tmpreg": "tempReg",
                "tmpreg_1": "tempReg1",
                "tmpreg_2": "tempReg2",
                "tmpreg_3": "tempReg3",
                "tmpreg_4": "tempReg4",
                "tmpreg_5": "tempReg5",
                "tmpreg_6": "tempReg6",
                "tmpreg_7": "tempReg7",
                "tmpreg_8": "tempReg8",
                "tmpreg_9": "tempReg9",
                "tmpreg_10": "tempReg10"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800457c": {
            "entrypoint": "0x0800457c",
            "current_name": "transfer_data_0800457c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict transferData_0800457c(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  byte *bufferPtr;\n  \n  if (i2cHandle->XferCount != 0) {\n    bufferPtr = i2cHandle->pBuffPtr;\n    i2cHandle->pBuffPtr = bufferPtr + 1;\n    i2cHandle->Instance->DR = (uint)*bufferPtr;\n    i2cHandle->XferCount = i2cHandle->XferCount - 1;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_0800457c": "transfer_data_0800457c",
                "hi2c": "i2cHandle",
                "pbVar1": "bufferPtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800459c": {
            "entrypoint": "0x0800459c",
            "current_name": "increment_and_read_data_byte_0800459c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict incrementAndReadDataByte_0800459c(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  uint8_t *puVar1;\n  \n  if (i2cHandle->transferCount != 0) {\n    puVar1 = i2cHandle->bufferPointer;\n    i2cHandle->bufferPointer = puVar1 + 1;\n    *puVar1 = (uint8_t)i2cHandle->i2cInstance->dataRegister;\n    i2cHandle->transferCount = i2cHandle->transferCount - 1;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_0800459c": "increment_and_read_data_byte_0800459c",
                "hi2c": "i2cHandle",
                "XferCount": "transferCount",
                "pBuffPtr": "bufferPointer",
                "Instance": "i2cInstance",
                "DR": "dataRegister"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045bc": {
            "entrypoint": "0x080045bc",
            "current_name": "FUNC_080045bc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080045bc(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "calling": [
                "HAL_I2C_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045c0": {
            "entrypoint": "0x080045c0",
            "current_name": "initialize_i2_c_080045c0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeI2C_080045c0(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  bool isClockSpeedValid;\n  uint32_t pclk1Freq;\n  uint prescaler;\n  uint analogFilter;\n  uint32_t dutyCycle;\n  \n  if (i2cHandle == (I2C_HandleTypeDef_conflict *)0x0) {\n    return HAL_ERROR;\n  }\n  if (i2cHandle->State == HAL_I2C_STATE_RESET) {\n    i2cHandle->Lock = HAL_UNLOCKED;\n    HAL_I2C_MspInit(i2cHandle);\n  }\n  i2cHandle->State = HAL_I2C_STATE_BUSY;\n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffffe;\n  pclk1Freq = HAL_RCC_GetPCLK1Freq();\n  if ((i2cHandle->Init).ClockSpeed < 0x186a1) {\n    if (pclk1Freq < 2000000) {\n      isClockSpeedValid = true;\n    }\n    else {\n      isClockSpeedValid = false;\n    }\n  }\n  else {\n    isClockSpeedValid = pclk1Freq < 4000000;\n  }\n  if (isClockSpeedValid) {\n    return HAL_ERROR;\n  }\n  prescaler = pclk1Freq / 1000000;\n  i2cHandle->Instance->CR2 = prescaler;\n  if (100000 < (i2cHandle->Init).ClockSpeed) {\n    prescaler = (prescaler * 300) / 1000;\n  }\n  i2cHandle->Instance->TRISE = prescaler + 1;\n  prescaler = (i2cHandle->Init).ClockSpeed;\n  if (prescaler < 0x186a1) {\n    pclk1Freq = (pclk1Freq - 1) / (prescaler << 1) + 1 & 0xfff;\n    if (pclk1Freq < 4) {\n      pclk1Freq = 4;\n    }\n  }\n  else {\n    dutyCycle = (i2cHandle->Init).DutyCycle;\n    if (dutyCycle == 0) {\n      analogFilter = (pclk1Freq - 1) / (prescaler * 3);\n    }\n    else {\n      analogFilter = (pclk1Freq - 1) / (prescaler * 0x19);\n    }\n    if ((analogFilter + 1 & 0xfff) == 0) {\n      pclk1Freq = 1;\n    }\n    else if (dutyCycle == 0) {\n      pclk1Freq = (pclk1Freq - 1) / (prescaler * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      pclk1Freq = (pclk1Freq - 1) / (prescaler * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  i2cHandle->Instance->CCR = pclk1Freq;\n  i2cHandle->Instance->CR1 = (i2cHandle->Init).GeneralCallMode | (i2cHandle->Init).NoStretchMode;\n  i2cHandle->Instance->OAR1 = (i2cHandle->Init).AddressingMode | (i2cHandle->Init).OwnAddress1;\n  i2cHandle->Instance->OAR2 = (i2cHandle->Init).DualAddressMode | (i2cHandle->Init).OwnAddress2;\n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 1;\n  i2cHandle->ErrorCode = 0;\n  i2cHandle->State = HAL_I2C_STATE_READY;\n  i2cHandle->PreviousState = 0;\n  i2cHandle->Mode = HAL_I2C_MODE_NONE;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080045c0": "initialize_i2_c_080045c0",
                "hi2c": "i2cHandle",
                "bVar1": "isClockSpeedValid",
                "uVar2": "pclk1Freq",
                "uVar3": "prescaler",
                "uVar4": "analogFilter",
                "uVar5": "dutyCycle"
            },
            "calling": [
                "i2c_custom_init"
            ],
            "called": [
                "HAL_I2C_MspInit",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004728": {
            "entrypoint": "0x08004728",
            "current_name": "initiate_i2_c_transfer_08004728",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\ninitiateI2CTransfer_08004728(I2C_HandleTypeDef_conflict *i2cHandle,uint16_t deviceAddress,uint8_t *dataBuffer,uint16_t dataSize)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef_conflict *i2cInstance;\n  uint32_t timeoutCount;\n  \n  if (i2cHandle->State == HAL_I2C_STATE_READY) {\n    timeoutCount = (SystemCoreClock / 25000) * 0x19;\n    do {\n      if (timeoutCount == 0) {\n        i2cHandle->PreviousState = 0;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        i2cHandle->Lock = HAL_UNLOCKED;\n        return HAL_TIMEOUT;\n      }\n      i2cInstance = i2cHandle->Instance;\n      timeoutCount = timeoutCount - 1;\n    } while ((i2cInstance->SR2 & 2) != 0);\n    if (i2cHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2cHandle->Lock = HAL_LOCKED;\n      if ((i2cInstance->CR1 & 1) == 0) {\n        i2cInstance->CR1 = i2cInstance->CR1 | 1;\n      }\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffff7ff;\n      i2cHandle->State = HAL_I2C_STATE_BUSY_TX;\n      i2cHandle->Mode = HAL_I2C_MODE_MASTER;\n      status = HAL_OK;\n      i2cHandle->ErrorCode = 0;\n      i2cHandle->pBuffPtr = dataBuffer;\n      i2cHandle->XferCount = dataSize;\n      i2cHandle->XferOptions = 0xffff0000;\n      i2cHandle->XferdataSize = i2cHandle->XferCount;\n      i2cHandle->Devaddress = (uint)deviceAddress;\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x100;\n      i2cHandle->Lock = HAL_UNLOCKED;\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 | 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08004728": "initiate_i2_c_transfer_08004728",
                "hi2c": "i2cHandle",
                "DevAddress": "deviceAddress",
                "pData": "dataBuffer",
                "Size": "dataSize",
                "HVar1": "status",
                "pIVar2": "i2cInstance",
                "count": "timeoutCount"
            },
            "calling": [
                "i2c_master_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "perform_i2_c_transfer_080047f4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\nperformI2CTransfer_080047f4(I2C_HandleTypeDef_conflict *i2cHandle,uint16_t deviceAddress,uint8_t *dataBuffer,uint16_t dataSize)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef_conflict *i2cInstance;\n  uint32_t timeoutCount;\n  \n  if (i2cHandle->State == HAL_I2C_STATE_READY) {\n    timeoutCount = (SystemCoreClock / 25000) * 0x19;\n    do {\n      if (timeoutCount == 0) {\n        i2cHandle->PreviousState = 0;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        i2cHandle->Lock = HAL_UNLOCKED;\n        return HAL_TIMEOUT;\n      }\n      i2cInstance = i2cHandle->Instance;\n      timeoutCount = timeoutCount - 1;\n    } while ((i2cInstance->SR2 & 2) != 0);\n    if (i2cHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2cHandle->Lock = HAL_LOCKED;\n      if ((i2cInstance->CR1 & 1) == 0) {\n        i2cInstance->CR1 = i2cInstance->CR1 | 1;\n      }\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffff7ff;\n      i2cHandle->State = HAL_I2C_STATE_BUSY_RX;\n      i2cHandle->Mode = HAL_I2C_MODE_MASTER;\n      status = HAL_OK;\n      i2cHandle->ErrorCode = 0;\n      i2cHandle->pBuffPtr = dataBuffer;\n      i2cHandle->XferCount = dataSize;\n      i2cHandle->XferOptions = 0xffff0000;\n      i2cHandle->XferdataSize = i2cHandle->XferCount;\n      i2cHandle->Devaddress = (uint)deviceAddress;\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x100;\n      i2cHandle->Lock = HAL_UNLOCKED;\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 | 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "perform_i2_c_transfer_080047f4",
                "hi2c": "i2cHandle",
                "DevAddress": "deviceAddress",
                "pData": "dataBuffer",
                "Size": "dataSize",
                "HVar1": "status",
                "pIVar2": "i2cInstance",
                "count": "timeoutCount"
            },
            "calling": [
                "i2c_master_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048c8": {
            "entrypoint": "0x080048c8",
            "current_name": "set_i2_c_listen_mode_080048c8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\nsetI2CListenMode_080048c8(I2C_HandleTypeDef_conflict *i2cHandle,uint8_t *data,uint16_t size,uint32_t transferOptions)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef_conflict *i2cInstance;\n  uint32_t tmpreg;\n  \n  if (i2cHandle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == (uint8_t *)0x0) {\n      status = HAL_ERROR;\n    }\n    else if (size == 0) {\n      status = HAL_ERROR;\n    }\n    else if (i2cHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2cHandle->Lock = HAL_LOCKED;\n      i2cInstance = i2cHandle->Instance;\n      if ((i2cInstance->CR1 & 1) == 0) {\n        i2cInstance->CR1 = i2cInstance->CR1 | 1;\n      }\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffff7ff;\n      i2cHandle->State = HAL_I2C_STATE_BUSY_TX_LISTEN;\n      i2cHandle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      i2cHandle->ErrorCode = 0;\n      i2cHandle->pBuffPtr = data;\n      i2cHandle->XferCount = size;\n      i2cHandle->transferOptions = transferOptions;\n      i2cHandle->Xfersize = i2cHandle->XferCount;\n      i2cHandle->Lock = HAL_UNLOCKED;\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 | 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080048c8": "set_i2_c_listen_mode_080048c8",
                "hi2c": "i2cHandle",
                "pData": "data",
                "Size": "size",
                "XferOptions": "transferOptions",
                "HVar1": "status",
                "pIVar2": "i2cInstance"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004954": {
            "entrypoint": "0x08004954",
            "current_name": "configure_i2_c_listening_mode_08004954",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\nconfigureI2CListeningMode_08004954(I2C_HandleTypeDef_conflict *i2cHandle,uint8_t *dataBuffer,uint16_t bufferSize,uint32_t transferOptions)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef_conflict *i2cInstance;\n  uint32_t tempRegister;\n  \n  if (i2cHandle->State == HAL_I2C_STATE_LISTEN) {\n    if (dataBuffer == (uint8_t *)0x0) {\n      status = HAL_ERROR;\n    }\n    else if (bufferSize == 0) {\n      status = HAL_ERROR;\n    }\n    else if (i2cHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2cHandle->Lock = HAL_LOCKED;\n      i2cInstance = i2cHandle->Instance;\n      if ((i2cInstance->CR1 & 1) == 0) {\n        i2cInstance->CR1 = i2cInstance->CR1 | 1;\n      }\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffff7ff;\n      i2cHandle->State = HAL_I2C_STATE_BUSY_RX_LISTEN;\n      i2cHandle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      i2cHandle->ErrorCode = 0;\n      i2cHandle->pBuffPtr = dataBuffer;\n      i2cHandle->XferCount = bufferSize;\n      i2cHandle->transferOptions = transferOptions;\n      i2cHandle->XferbufferSize = i2cHandle->XferCount;\n      i2cHandle->Lock = HAL_UNLOCKED;\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 | 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08004954": "configure_i2_c_listening_mode_08004954",
                "hi2c": "i2cHandle",
                "pData": "dataBuffer",
                "Size": "bufferSize",
                "XferOptions": "transferOptions",
                "HVar1": "status",
                "pIVar2": "i2cInstance",
                "tmpreg": "tempRegister"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049e0": {
            "entrypoint": "0x080049e0",
            "current_name": "initialize_i2_c_080049e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeI2C_080049e0(I2C_HandleTypeDef_conflict *I2CHandle)\n\n{\n  I2C_Registers *registers;\n  \n  if (I2CHandle->currentState != I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  I2CHandle->currentState = I2C_STATE_LISTEN;\n  registers = I2CHandle->Instance;\n  if ((registers->controlRegister1 & 1) == 0) {\n    registers->controlRegister1 = registers->controlRegister1 | 1;\n  }\n  I2CHandle->Instance->controlRegister1 = I2CHandle->Instance->controlRegister1 | 0x400;\n  I2CHandle->Instance->controlRegister2 = I2CHandle->Instance->controlRegister2 | 0x300;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080049e0": "initialize_i2_c_080049e0",
                "hi2c": "I2CHandle",
                "State": "currentState",
                "HAL_I2C_STATE_READY": "I2C_STATE_READY",
                "HAL_I2C_STATE_LISTEN": "I2C_STATE_LISTEN",
                "I2C_TypeDef_conflict": "I2C_Registers",
                "pIVar1": "registers",
                "CR1": "controlRegister1",
                "CR2": "controlRegister2"
            },
            "calling": [
                "HAL_I2C_ListenCpltCallback",
                "i2c_attachSlaveTxEvent",
                "i2c_attachSlaveRxEvent",
                "HAL_I2C_ErrorCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a1e": {
            "entrypoint": "0x08004a1e",
            "current_name": "FUNC_08004a1e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004a1e(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a20": {
            "entrypoint": "0x08004a20",
            "current_name": "FUNC_08004a20",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004a20(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a22": {
            "entrypoint": "0x08004a22",
            "current_name": "FUNC_08004a22",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004a22(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "calling": [
                "I2C_Slave_AF",
                "I2C_SlaveTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a24": {
            "entrypoint": "0x08004a24",
            "current_name": "perform_i2_c_transfer_08004a24",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_Status performI2CTransfer_08004a24(I2C_HandleTypeDef *i2cHandle)\n\n{\n  HAL_I2C_State currentState;\n  byte *bufferPointer;\n  \n  currentState = i2cHandle->State;\n  if (i2cHandle->XferCount != 0) {\n    bufferPointer = i2cHandle->pBuffPtr;\n    i2cHandle->pBuffPtr = bufferPointer + 1;\n    i2cHandle->Instance->DR = (uint)*bufferPointer;\n    i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    if ((i2cHandle->XferCount == 0) && (currentState == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffffbff;\n      i2cHandle->PreviousState = 0x21;\n      i2cHandle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveTxCpltCallback(i2cHandle);\n    }\n    return HAL_OK;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004a24": "perform_i2_c_transfer_08004a24",
                "hi2c": "i2cHandle",
                "HVar1": "currentState",
                "pbVar2": "bufferPointer",
                "HAL_StatusTypeDef_conflict": "HAL_Status",
                "I2C_HandleTypeDef_conflict": "I2C_HandleTypeDef",
                "HAL_I2C_StateTypeDef_conflict": "HAL_I2C_State"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a74": {
            "entrypoint": "0x08004a74",
            "current_name": "FUNC_08004a74",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004a74(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a76": {
            "entrypoint": "0x08004a76",
            "current_name": "read_byte_from_i2_c_08004a76",
            "code": "\n/* WARNING: Unknown calling convention */\n\nStatus readByteFromI2C_08004a76(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  State currentState;\n  uint8_t *bufferPointer;\n  \n  currentState = i2cHandle->State;\n  if (i2cHandle->XferCount != 0) {\n    bufferPointer = i2cHandle->pBuffPtr;\n    i2cHandle->pBuffPtr = bufferPointer + 1;\n    *bufferPointer = (uint8_t)i2cHandle->Instance->DR;\n    i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    if ((i2cHandle->XferCount == 0) && (currentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffffbff;\n      i2cHandle->PreviousState = 0x22;\n      i2cHandle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveRxCpltCallback(i2cHandle);\n    }\n  }\n  return Success;\n}\n\n",
            "renaming": {
                "FUN_08004a76": "read_byte_from_i2_c_08004a76",
                "hi2c": "i2cHandle",
                "HVar1": "currentState",
                "puVar2": "bufferPointer",
                "HAL_StatusTypeDef_conflict": "Status",
                "HAL_I2C_StateTypeDef_conflict": "State",
                "HAL_OK": "Success"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ac2": {
            "entrypoint": "0x08004ac2",
            "current_name": "update_address_08004ac2",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict updateAddress_08004ac2(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  uint16_t matchCode;\n  \n  if ((i2cHandle->Instance->SR2 & 0x80) == 0) {\n    matchCode = *(uint16_t *)&(i2cHandle->Init).OwnAddress1;\n  }\n  else {\n    matchCode = *(uint16_t *)&(i2cHandle->Init).OwnAddress2;\n  }\n  HAL_I2C_AddrCallback(i2cHandle,(i2cHandle->Instance->SR2 & 4) == 0,matchCode);\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004ac2": "update_address_08004ac2",
                "hi2c": "i2cHandle",
                "AddrMatchCode": "matchCode"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004aec": {
            "entrypoint": "0x08004aec",
            "current_name": "handle_i2_c_state_change_08004aec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict handleI2CStateChange_08004aec(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  uint32_t currentTransferOptions;\n  uint32_t currentState;\n  \n  if (((i2cHandle->XferOptions == 4) || (i2cHandle->XferOptions == 8)) &&\n     (i2cHandle->State == HAL_I2C_STATE_LISTEN)) {\n    i2cHandle->XferOptions = 0xffff0000;\n    i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n    i2cHandle->Instance->SR1 = 0xfffffbff;\n    i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n    i2cHandle->PreviousState = 0;\n    i2cHandle->State = HAL_I2C_STATE_READY;\n    i2cHandle->Mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(i2cHandle);\n  }\n  else if (i2cHandle->State == HAL_I2C_STATE_BUSY_TX) {\n    i2cHandle->XferOptions = 0xffff0000;\n    i2cHandle->PreviousState = 0x21;\n    i2cHandle->State = HAL_I2C_STATE_READY;\n    i2cHandle->Mode = HAL_I2C_MODE_NONE;\n    i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n    i2cHandle->Instance->SR1 = 0xfffffbff;\n    i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n    HAL_I2C_SlaveTxCpltCallback(i2cHandle);\n  }\n  else {\n    i2cHandle->Instance->SR1 = 0xfffffbff;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004aec": "handle_i2_c_state_change_08004aec",
                "hi2c": "i2cHandle",
                "CurrentXferOptions": "currentTransferOptions",
                "CurrentState": "currentState"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "called": [
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b80": {
            "entrypoint": "0x08004b80",
            "current_name": "FUNC_08004b80",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004b80(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b82": {
            "entrypoint": "0x08004b82",
            "current_name": "handle_i2_c_transfer_08004b82",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict handleI2CTransfer_08004b82(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  HAL_I2C_StateTypeDef_conflict currentState;\n  uint32_t currentI2CState;\n  byte *bufferPointer;\n  uint32_t currentTransferOptions;\n  uint32_t transferSize;\n  \n  currentState = i2cHandle->State;\n  transferSize = i2cHandle->XferOptions;\n  if ((i2cHandle->XferSize == 0) && (currentState == HAL_I2C_STATE_BUSY_TX)) {\n    if ((transferSize == 4) || ((transferSize == 8 || (transferSize == 0xffff0000)))) {\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n      i2cHandle->PreviousState = 0;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      if (i2cHandle->Mode == HAL_I2C_MODE_MEM) {\n        i2cHandle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MemTxCpltCallback(i2cHandle);\n      }\n      else {\n        i2cHandle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MasterTxCpltCallback(i2cHandle);\n      }\n    }\n    else {\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n      i2cHandle->PreviousState = 0x11;\n      i2cHandle->Mode = HAL_I2C_MODE_NONE;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      HAL_I2C_MasterTxCpltCallback(i2cHandle);\n    }\n  }\n  else if ((currentState == HAL_I2C_STATE_BUSY_TX) ||\n          ((i2cHandle->Mode == HAL_I2C_MODE_MEM && (currentState == HAL_I2C_STATE_BUSY_RX)))) {\n    if (i2cHandle->XferCount == 0) {\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffffbff;\n    }\n    else if (i2cHandle->Mode == HAL_I2C_MODE_MEM) {\n      if (i2cHandle->EventCount == 0) {\n        if (i2cHandle->MemaddSize == 1) {\n          i2cHandle->Instance->DR = i2cHandle->Memaddress & 0xff;\n          i2cHandle->EventCount = i2cHandle->EventCount + 2;\n        }\n        else {\n          i2cHandle->Instance->DR = (i2cHandle->Memaddress << 0x10) >> 0x18;\n          i2cHandle->EventCount = i2cHandle->EventCount + 1;\n        }\n      }\n      else if (i2cHandle->EventCount == 1) {\n        i2cHandle->Instance->DR = i2cHandle->Memaddress & 0xff;\n        i2cHandle->EventCount = i2cHandle->EventCount + 1;\n      }\n      else if (i2cHandle->EventCount == 2) {\n        if (i2cHandle->State == HAL_I2C_STATE_BUSY_RX) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x100;\n        }\n        else if (i2cHandle->State == HAL_I2C_STATE_BUSY_TX) {\n          bufferPointer = i2cHandle->pBuffPtr;\n          i2cHandle->pBuffPtr = bufferPointer + 1;\n          i2cHandle->Instance->DR = (uint)*bufferPointer;\n          i2cHandle->XferCount = i2cHandle->XferCount - 1;\n        }\n      }\n    }\n    else {\n      bufferPointer = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = bufferPointer + 1;\n      i2cHandle->Instance->DR = (uint)*bufferPointer;\n      i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004b82": "handle_i2_c_transfer_08004b82",
                "hi2c": "i2cHandle",
                "HVar1": "currentState",
                "CurrentState": "currentI2CState",
                "pbVar2": "bufferPointer",
                "CurrentXferOptions": "currentTransferOptions",
                "uVar3": "transferSize"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "transfer_data_08004ccc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict transferData_08004ccc(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  uint32_t transferOptions;\n  uint32_t currentTransferOptions;\n  byte *bufferPointer;\n  \n  transferOptions = i2cHandle->XferOptions;\n  if (i2cHandle->State == HAL_I2C_STATE_BUSY_TX) {\n    if (i2cHandle->XferCount == 0) {\n      if (((transferOptions == 4) || (transferOptions == 8)) || (transferOptions == 0xffff0000)) {\n        i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n        i2cHandle->PreviousState = 0;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        if (i2cHandle->Mode == HAL_I2C_MODE_MEM) {\n          i2cHandle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemTxCpltCallback(i2cHandle);\n        }\n        else {\n          i2cHandle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterTxCpltCallback(i2cHandle);\n        }\n      }\n      else {\n        i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n        i2cHandle->PreviousState = 0x11;\n        i2cHandle->Mode = HAL_I2C_MODE_NONE;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        HAL_I2C_MasterTxCpltCallback(i2cHandle);\n      }\n    }\n    else {\n      bufferPointer = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = bufferPointer + 1;\n      i2cHandle->Instance->DR = (uint)*bufferPointer;\n      i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "transfer_data_08004ccc",
                "hi2c": "i2cHandle",
                "uVar1": "transferOptions",
                "CurrentXferOptions": "currentTransferOptions",
                "pbVar2": "bufferPointer"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6a": {
            "entrypoint": "0x08004d6a",
            "current_name": "FUNC_08004d6a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004d6a(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6c": {
            "entrypoint": "0x08004d6c",
            "current_name": "process_i2_c_rx_data_08004d6c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict processI2CRxData_08004d6c(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  uint8_t *dataPtr;\n  \n  if (i2cHandle->State == HAL_I2C_STATE_BUSY_RX) {\n    if (i2cHandle->XferCount < 4) {\n      if (i2cHandle->XferCount - 2 < 2) {\n        if (i2cHandle->XferOptions == 2) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n        }\n        else {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x800;\n        }\n        i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffffbff;\n      }\n      else {\n        if (i2cHandle->XferOptions == 2) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n        }\n        else {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n        }\n        i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n        dataPtr = i2cHandle->pBuffPtr;\n        i2cHandle->pBuffPtr = dataPtr + 1;\n        *dataPtr = (uint8_t)i2cHandle->Instance->DR;\n        i2cHandle->XferCount = i2cHandle->XferCount - 1;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        i2cHandle->PreviousState = 0;\n        if (i2cHandle->Mode == HAL_I2C_MODE_MEM) {\n          i2cHandle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemRxCpltCallback(i2cHandle);\n        }\n        else {\n          i2cHandle->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterRxCpltCallback(i2cHandle);\n        }\n      }\n    }\n    else {\n      dataPtr = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = dataPtr + 1;\n      *dataPtr = (uint8_t)i2cHandle->Instance->DR;\n      i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004d6c": "process_i2_c_rx_data_08004d6c",
                "hi2c": "i2cHandle",
                "puVar1": "dataPtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e3c": {
            "entrypoint": "0x08004e3c",
            "current_name": "handle_i2_c_data_transfer_08004e3c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict handleI2CDataTransfer_08004e3c(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  uint32_t transferOptions;\n  uint32_t currentTransferOptions;\n  uint8_t *dataPtr;\n  \n  transferOptions = i2cHandle->XferOptions;\n  if (i2cHandle->XferCount == 3) {\n    if (((transferOptions == 4) || (transferOptions == 8)) || (transferOptions == 0xffff0000)) {\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n    }\n    dataPtr = i2cHandle->pBuffPtr;\n    i2cHandle->pBuffPtr = dataPtr + 1;\n    *dataPtr = (uint8_t)i2cHandle->Instance->DR;\n    i2cHandle->XferCount = i2cHandle->XferCount - 1;\n  }\n  else if (i2cHandle->XferCount == 2) {\n    if (((transferOptions == 4) || (transferOptions == 8)) || (transferOptions == 0xffff0000)) {\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffffcff;\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n    }\n    else {\n      if (transferOptions == 2) {\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n      }\n      else {\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n      }\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffffcff;\n    }\n    dataPtr = i2cHandle->pBuffPtr;\n    i2cHandle->pBuffPtr = dataPtr + 1;\n    *dataPtr = (uint8_t)i2cHandle->Instance->DR;\n    i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    dataPtr = i2cHandle->pBuffPtr;\n    i2cHandle->pBuffPtr = dataPtr + 1;\n    *dataPtr = (uint8_t)i2cHandle->Instance->DR;\n    i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    i2cHandle->State = HAL_I2C_STATE_READY;\n    i2cHandle->PreviousState = 0;\n    if (i2cHandle->Mode == HAL_I2C_MODE_MEM) {\n      i2cHandle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MemRxCpltCallback(i2cHandle);\n    }\n    else {\n      i2cHandle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MasterRxCpltCallback(i2cHandle);\n    }\n  }\n  else {\n    dataPtr = i2cHandle->pBuffPtr;\n    i2cHandle->pBuffPtr = dataPtr + 1;\n    *dataPtr = (uint8_t)i2cHandle->Instance->DR;\n    i2cHandle->XferCount = i2cHandle->XferCount - 1;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004e3c": "handle_i2_c_data_transfer_08004e3c",
                "hi2c": "i2cHandle",
                "uVar1": "transferOptions",
                "CurrentXferOptions": "currentTransferOptions",
                "puVar2": "dataPtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3a": {
            "entrypoint": "0x08004f3a",
            "current_name": "FUNC_08004f3a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004f3a(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "handle_i2_c_state_08004f3c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CState_08004f3c(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint8_t *bufferPtr;\n  I2C_TypeDef_conflict *i2cInstance;\n  \n  if (i2cHandle->State - 0x29 < 2) {\n    i2cHandle->PreviousState = 0;\n    i2cHandle->State = HAL_I2C_STATE_LISTEN;\n  }\n  else {\n    if ((i2cHandle->State != HAL_I2C_STATE_ABORT) && ((i2cHandle->Instance->CR2 & 0x800) == 0)) {\n      i2cHandle->State = HAL_I2C_STATE_READY;\n    }\n    i2cHandle->PreviousState = 0;\n    i2cHandle->Mode = HAL_I2C_MODE_NONE;\n  }\n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffff7ff;\n  i2cInstance = i2cHandle->Instance;\n  if ((i2cInstance->CR2 & 0x800) == 0) {\n    if (i2cHandle->State == HAL_I2C_STATE_ABORT) {\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      i2cHandle->ErrorCode = 0;\n      if ((i2cInstance->SR1 & 0x40) != 0) {\n        bufferPtr = i2cHandle->pBuffPtr;\n        i2cHandle->pBuffPtr = bufferPtr + 1;\n        *bufferPtr = (uint8_t)i2cInstance->DR;\n      }\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(i2cHandle);\n    }\n    else {\n      if ((i2cInstance->SR1 & 0x40) != 0) {\n        bufferPtr = i2cHandle->pBuffPtr;\n        i2cHandle->pBuffPtr = bufferPtr + 1;\n        *bufferPtr = (uint8_t)i2cInstance->DR;\n      }\n      HAL_I2C_ErrorCallback(i2cHandle);\n    }\n  }\n  else {\n    i2cInstance->CR2 = i2cInstance->CR2 & 0xfffff7ff;\n    if (i2cHandle->hdmatx->State == HAL_DMA_STATE_READY) {\n      i2cHandle->hdmarx->XferAbortCallback = I2C_DMAAbort + 1;\n      status = HAL_DMA_Abort_IT(i2cHandle->hdmarx);\n      if (status != HAL_OK) {\n        if ((i2cHandle->Instance->SR1 & 0x40) != 0) {\n          bufferPtr = i2cHandle->pBuffPtr;\n          i2cHandle->pBuffPtr = bufferPtr + 1;\n          *bufferPtr = (uint8_t)i2cHandle->Instance->DR;\n        }\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffffe;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        (*i2cHandle->hdmarx->XferAbortCallback)(i2cHandle->hdmarx);\n      }\n    }\n    else {\n      i2cHandle->hdmatx->XferAbortCallback = I2C_DMAAbort + 1;\n      status = HAL_DMA_Abort_IT(i2cHandle->hdmatx);\n      if (status != HAL_OK) {\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffffe;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        (*i2cHandle->hdmatx->XferAbortCallback)(i2cHandle->hdmatx);\n      }\n    }\n  }\n  if ((i2cHandle->State == HAL_I2C_STATE_LISTEN) && ((i2cHandle->ErrorCode & 4) != 0)) {\n    i2cHandle->XferOptions = 0xffff0000;\n    i2cHandle->PreviousState = 0;\n    i2cHandle->State = HAL_I2C_STATE_READY;\n    i2cHandle->Mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(i2cHandle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "handle_i2_c_state_08004f3c",
                "hi2c": "i2cHandle",
                "HVar1": "status",
                "puVar2": "bufferPtr",
                "pIVar3": "i2cInstance"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ListenCpltCallback",
                "HAL_DMA_Abort_IT",
                "HAL_I2C_ErrorCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005084": {
            "entrypoint": "0x08005084",
            "current_name": "handle_i2_c_transfer_08005084",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict handleI2CTransfer_08005084(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  HAL_I2C_StateTypeDef_conflict currentState;\n  I2C_TypeDef_conflict *i2cInstance;\n  uint8_t *bufferPtr;\n  uint32_t currentState;\n  uint32_t temporaryRegister;\n  \n  currentState = i2cHandle->State;\n  i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 1;\n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n  i2cInstance = i2cHandle->Instance;\n  if ((i2cInstance->CR2 & 0x800) != 0) {\n    if ((i2cHandle->State == HAL_I2C_STATE_BUSY_RX) || (i2cHandle->State == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2cHandle->XferCount = (uint16_t)i2cHandle->hdmarx->Instance->CNDTR;\n    }\n    else {\n      i2cHandle->XferCount = (uint16_t)i2cHandle->hdmatx->Instance->CNDTR;\n    }\n  }\n  if (i2cHandle->XferCount != 0) {\n    if ((i2cInstance->SR1 & 4) != 0) {\n      bufferPtr = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = bufferPtr + 1;\n      *bufferPtr = (uint8_t)i2cInstance->DR;\n      i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    }\n    if ((i2cHandle->Instance->SR1 & 0x40) != 0) {\n      bufferPtr = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = bufferPtr + 1;\n      *bufferPtr = (uint8_t)i2cHandle->Instance->DR;\n      i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    }\n    i2cHandle->ErrorCode = i2cHandle->ErrorCode | 4;\n  }\n  if (i2cHandle->ErrorCode == 0) {\n    if (((currentState == HAL_I2C_STATE_LISTEN) || (currentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) ||\n       (currentState == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2cHandle->XferOptions = 0xffff0000;\n      i2cHandle->PreviousState = 0;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      i2cHandle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_ListenCpltCallback(i2cHandle);\n    }\n    else if ((i2cHandle->PreviousState == 0x22) || (currentState == HAL_I2C_STATE_BUSY_RX)) {\n      i2cHandle->PreviousState = 0;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      i2cHandle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_SlaveRxCpltCallback(i2cHandle);\n    }\n  }\n  else {\n    I2C_ITError(i2cHandle);\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08005084": "handle_i2_c_transfer_08005084",
                "hi2c": "i2cHandle",
                "HVar1": "currentState",
                "pIVar2": "i2cInstance",
                "puVar3": "bufferPtr",
                "CurrentState": "currentState",
                "tmpreg": "temporaryRegister"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "I2C_ITError",
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005188": {
            "entrypoint": "0x08005188",
            "current_name": "handle_i2_c_interrupt_08005188",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CInterrupt_08005188(I2CHandle *i2cHandle)\n\n{\n  I2CTypeDef *i2cInstance;\n  uint32_t currentMode;\n  uint statusRegister1;\n  uint32_t statusRegister1ITFlags;\n  uint controlRegister2;\n  uint32_t interruptSources;\n  uint statusRegister2;\n  uint32_t sr2itflags;\n  \n  i2cInstance = i2cHandle->Instance;\n  statusRegister2 = i2cInstance->SR2;\n  statusRegister1 = i2cInstance->SR1;\n  controlRegister2 = i2cInstance->CR2;\n  if ((i2cHandle->Mode == HAL_MasterMode) || (i2cHandle->Mode == HAL_MemMode)) {\n    if (((statusRegister1 & 0x10001) == 0) || ((controlRegister2 & 0x200) == 0)) {\n      if (((statusRegister1 & 0x10008) == 0) || ((controlRegister2 & 0x200) == 0)) {\n        if (((statusRegister1 & 0x10002) != 0) && ((controlRegister2 & 0x200) != 0)) {\n          MasterAddress(i2cHandle);\n        }\n      }\n      else {\n        MasterADD10(i2cHandle);\n      }\n    }\n    else {\n      MasterSB(i2cHandle);\n    }\n    if ((statusRegister2 & 0x100004) == 0) {\n      if ((((statusRegister1 & 0x10040) != 0) && ((controlRegister2 & 0x400) != 0)) && ((statusRegister1 & 0x10004) == 0)) {\n        MasterReceiveRXNE(i2cHandle);\n        return;\n      }\n      if (((statusRegister1 & 0x10004) != 0) && ((controlRegister2 & 0x200) != 0)) {\n        MasterReceiveBTF(i2cHandle);\n        return;\n      }\n    }\n    else {\n      if ((((statusRegister1 & 0x10080) != 0) && ((controlRegister2 & 0x400) != 0)) && ((statusRegister1 & 0x10004) == 0)) {\n        MasterTransmitTXE(i2cHandle);\n        return;\n      }\n      if (((statusRegister1 & 0x10004) != 0) && ((controlRegister2 & 0x200) != 0)) {\n        MasterTransmitBTF(i2cHandle);\n        return;\n      }\n    }\n  }\n  else {\n    if (((statusRegister1 & 0x10002) != 0) && ((controlRegister2 & 0x200) != 0)) {\n      SlaveAddress(i2cHandle);\n      return;\n    }\n    if (((statusRegister1 & 0x10010) != 0) && ((controlRegister2 & 0x200) != 0)) {\n      SlaveSTOPF(i2cHandle);\n      return;\n    }\n    if ((statusRegister2 & 0x100004) == 0) {\n      if ((((statusRegister1 & 0x10040) != 0) && ((controlRegister2 & 0x400) != 0)) && ((statusRegister1 & 0x10004) == 0)) {\n        SlaveReceiveRXNE(i2cHandle);\n        return;\n      }\n      if (((statusRegister1 & 0x10004) != 0) && ((controlRegister2 & 0x200) != 0)) {\n        SlaveReceiveBTF(i2cHandle);\n      }\n    }\n    else {\n      if ((((statusRegister1 & 0x10080) != 0) && ((controlRegister2 & 0x400) != 0)) && ((statusRegister1 & 0x10004) == 0)) {\n        SlaveTransmitTXE(i2cHandle);\n        return;\n      }\n      if (((statusRegister1 & 0x10004) != 0) && ((controlRegister2 & 0x200) != 0)) {\n        SlaveTransmitBTF(i2cHandle);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005188": "handle_i2_c_interrupt_08005188",
                "hi2c": "i2cHandle",
                "I2C_HandleTypeDef_conflict": "I2CHandle",
                "I2C_TypeDef_conflict": "I2CTypeDef",
                "pIVar1": "i2cInstance",
                "CurrentMode": "currentMode",
                "uVar2": "statusRegister1",
                "sr1itflags": "statusRegister1ITFlags",
                "uVar3": "controlRegister2",
                "itsources": "interruptSources",
                "uVar4": "statusRegister2",
                "I2C_MODE_MASTER": "MasterMode",
                "I2C_MODE_MEM": "MemMode",
                "I2C_Master_ADDR": "MasterAddress",
                "I2C_Master_ADD10": "MasterADD10",
                "I2C_Master_SB": "MasterSB",
                "I2C_MasterReceive_RXNE": "MasterReceiveRXNE",
                "I2C_MasterReceive_BTF": "MasterReceiveBTF",
                "I2C_MasterTransmit_TXE": "MasterTransmitTXE",
                "I2C_MasterTransmit_BTF": "MasterTransmitBTF",
                "I2C_Slave_ADDR": "SlaveAddress",
                "I2C_Slave_STOPF": "SlaveSTOPF",
                "I2C_SlaveReceive_RXNE": "SlaveReceiveRXNE",
                "I2C_SlaveReceive_BTF": "SlaveReceiveBTF",
                "I2C_SlaveTransmit_TXE": "SlaveTransmitTXE",
                "I2C_SlaveTransmit_BTF": "SlaveTransmitBTF"
            },
            "calling": [
                "I2C2_EV_IRQHandler",
                "I2C1_EV_IRQHandler"
            ],
            "called": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF",
                "I2C_SlaveReceive_RXNE",
                "I2C_MasterTransmit_TXE",
                "I2C_Slave_ADDR",
                "I2C_SlaveTransmit_TXE",
                "I2C_Master_SB",
                "I2C_Master_ADD10",
                "I2C_MasterTransmit_BTF",
                "I2C_SlaveReceive_BTF",
                "I2C_Slave_STOPF",
                "I2C_Master_ADDR",
                "I2C_SlaveTransmit_BTF"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052f0": {
            "entrypoint": "0x080052f0",
            "current_name": "handle_i2_c_errors_080052f0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_I2C_errors_080052f0(I2C_HandleTypeDef_conflict *i2c_handle)\n\n{\n  HAL_I2C_StateTypeDef_conflict i2c_state;\n  I2C_TypeDef_conflict *i2c;\n  uint32_t status_flags;\n  uint sr1_value;\n  uint32_t itsources;\n  uint cr2_value;\n  \n  i2c = i2c_handle->Instance;\n  sr1_value = i2c->SR1;\n  cr2_value = i2c->CR2;\n  if (((sr1_value & 0x10100) != 0) && ((cr2_value & 0x100) != 0)) {\n    i2c_handle->ErrorCode = i2c_handle->ErrorCode | 1;\n    i2c->SR1 = 0xfffffeff;\n    i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x8000;\n  }\n  if (((sr1_value & 0x10200) != 0) && ((cr2_value & 0x100) != 0)) {\n    i2c_handle->ErrorCode = i2c_handle->ErrorCode | 2;\n    i2c_handle->Instance->SR1 = 0xfffffdff;\n  }\n  if (((sr1_value & 0x10400) != 0) && ((cr2_value & 0x100) != 0)) {\n    i2c_state = i2c_handle->State;\n    if (((i2c_handle->Mode == HAL_I2C_MODE_SLAVE) && (i2c_handle->XferCount == 0)) &&\n       (((i2c_state == HAL_I2C_STATE_BUSY_TX || (i2c_state == HAL_I2C_STATE_BUSY_TX_LISTEN)) ||\n        ((i2c_state == HAL_I2C_STATE_LISTEN && (i2c_handle->PreviousState == 0x21)))))) {\n      I2C_Slave_AF(i2c_handle);\n    }\n    else {\n      i2c_handle->ErrorCode = i2c_handle->ErrorCode | 4;\n      if (i2c_handle->Mode == HAL_I2C_MODE_MASTER) {\n        i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n      }\n      i2c_handle->Instance->SR1 = 0xfffffbff;\n    }\n  }\n  if (((sr1_value & 0x10800) != 0) && ((cr2_value & 0x100) != 0)) {\n    i2c_handle->ErrorCode = i2c_handle->ErrorCode | 8;\n    i2c_handle->Instance->SR1 = 0xfffff7ff;\n  }\n  if (i2c_handle->ErrorCode != 0) {\n    I2C_ITError(i2c_handle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052f0": "handle_i2_c_errors_080052f0",
                "hi2c": "i2c_handle",
                "HVar1": "i2c_state",
                "pIVar2": "i2c",
                "sr1itflags": "status_flags",
                "uVar3": "sr1_value",
                "uVar4": "cr2_value"
            },
            "calling": [
                "I2C2_ER_IRQHandler",
                "I2C1_ER_IRQHandler"
            ],
            "called": [
                "I2C_ITError",
                "I2C_Slave_AF"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053cc": {
            "entrypoint": "0x080053cc",
            "current_name": "reset_i2_c_080053cc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid resetI2C_080053cc(DMA_HandleTypeDef_conflict *dma)\n\n{\n  I2C_HandleTypeDef_conflict *i2cParent;\n  I2C_HandleTypeDef_conflict *i2c;\n  \n  i2cParent = (I2C_HandleTypeDef_conflict *)dma->Parent;\n  i2cParent->Instance->CR1 = i2cParent->Instance->CR1 & 0xfffffbff;\n  i2cParent->XferCount = 0;\n  i2cParent->dmatx->XferAbortCallback = (dmaCallbackFunc *)0x0;\n  i2cParent->dmarx->XferAbortCallback = (dmaCallbackFunc *)0x0;\n  if (i2cParent->State != I2C_STATE_ABORT) {\n    i2cParent->State = I2C_STATE_READY;\n    i2cParent->Mode = I2C_MODE_NONE;\n    i2cParent->Instance->CR1 = i2cParent->Instance->CR1 & 0xfffffffe;\n    i2cErrorHandler(i2cParent);\n    return;\n  }\n  i2cParent->State = I2C_STATE_READY;\n  i2cParent->Mode = I2C_MODE_NONE;\n  i2cParent->ErrorCode = 0;\n  i2cParent->Instance->CR1 = i2cParent->Instance->CR1 & 0xfffffffe;\n  i2cAbortCallback(i2cParent);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053cc": "reset_i2_c_080053cc",
                "hdma": "dma",
                "hi2c_00": "i2cParent",
                "hi2c": "i2c",
                "_func_void___DMA_HandleTypeDef_ptr_conflict": "dmaCallbackFunc",
                "HAL_I2C_STATE_ABORT": "I2C_STATE_ABORT",
                "HAL_I2C_STATE_READY": "I2C_STATE_READY",
                "HAL_I2C_MODE_NONE": "I2C_MODE_NONE",
                "HAL_I2C_ErrorCallback": "i2cErrorHandler",
                "HAL_I2C_AbortCpltCallback": "i2cAbortCallback"
            },
            "calling": [],
            "called": [
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ErrorCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800542a": {
            "entrypoint": "0x0800542a",
            "current_name": "get_i2_c_state_0800542a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_I2C_i2cStateTypeDef_conflict getI2CState_0800542a(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  return i2cHandle->i2cState;\n}\n\n",
            "renaming": {
                "FUN_0800542a": "get_i2_c_state_0800542a",
                "hi2c": "i2cHandle",
                "State": "i2cState"
            },
            "calling": [
                "i2c_master_read",
                "i2c_master_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005430": {
            "entrypoint": "0x08005430",
            "current_name": "get_error_code_at_i2_c_08005430",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getErrorCodeAtI2C_08005430(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  return i2cHandle->ErrorCode;\n}\n\n",
            "renaming": {
                "FUN_08005430": "get_error_code_at_i2_c_08005430",
                "hi2c": "i2cHandle"
            },
            "calling": [
                "i2c_master_read",
                "i2c_master_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005434": {
            "entrypoint": "0x08005434",
            "current_name": "delay_function_08005434",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid delayFunction_08005434(uint32_t millisecondDelay)\n\n{\n  bool isDelayNotZero;\n  uint32_t loopDelay;\n  \n  loopDelay = millisecondDelay * (SystemCoreClock / 8000);\n  do {\n    isDelayNotZero = loopDelay != 0;\n    loopDelay = loopDelay - 1;\n  } while (isDelayNotZero);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005434": "delay_function_08005434",
                "mdelay": "millisecondDelay",
                "Delay": "loopDelay",
                "bVar1": "isDelayNotZero"
            },
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005460": {
            "entrypoint": "0x08005460",
            "current_name": "configure_rcc_oscillators_08005460",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureRCCOscillators_08005460(RCC_OscInitTypeDef_conflict *oscillatorConfig)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t currentTime;\n  uint32_t startTime;\n  bool isConditionTrue;\n  uint32_t temporaryRegister;\n  \n  if ((oscillatorConfig->OscillatorType & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (oscillatorConfig->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      startTime = oscillatorConfig->HSEState;\n      if (startTime == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (startTime == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (startTime == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (oscillatorConfig->HSEState == 0) {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = HAL_GetTick();\n          if (100 < currentTime - startTime) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = HAL_GetTick();\n          if (100 < currentTime - startTime) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((oscillatorConfig->OscillatorType & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (oscillatorConfig->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | oscillatorConfig->HSICalibrationValue << 3;\n    }\n    else if (oscillatorConfig->HSIState == 0) {\n      _DAT_42420000 = 0;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (2 < currentTime - startTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < currentTime - startTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | oscillatorConfig->HSICalibrationValue << 3;\n    }\n  }\n  if ((oscillatorConfig->OscillatorType & 8) != 0) {\n    if (oscillatorConfig->LSIState == 0) {\n      _DAT_42420480 = 0;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (2 < currentTime - startTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < currentTime - startTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((oscillatorConfig->OscillatorType & 4) != 0) {\n    isConditionTrue = (_DAT_4002101c & 0x10000000) == 0;\n    if (isConditionTrue) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = HAL_GetTick();\n        if (100 < currentTime - startTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    startTime = oscillatorConfig->LSEState;\n    if (startTime == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (startTime == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (startTime == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (oscillatorConfig->LSEState == 0) {\n      startTime = HAL_GetTick();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < currentTime - startTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      startTime = HAL_GetTick();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < currentTime - startTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (isConditionTrue) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  startTime = (oscillatorConfig->PLL).PLLState;\n  if (startTime == 0) {\n    status = HAL_OK;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    status = HAL_ERROR;\n  }\n  else if (startTime == 2) {\n    _DAT_42420060 = 0;\n    startTime = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if ((oscillatorConfig->PLL).PLLSource == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | oscillatorConfig->HSEPredivValue;\n        }\n        _DAT_40021004 =\n             _DAT_40021004 & 0xffc2ffff |\n             (oscillatorConfig->PLL).PLLSource | (oscillatorConfig->PLL).PLLMUL;\n        _DAT_42420060 = 1;\n        startTime = HAL_GetTick();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return HAL_OK;\n          }\n          currentTime = HAL_GetTick();\n        } while (currentTime - startTime < 3);\n        return HAL_TIMEOUT;\n      }\n      currentTime = HAL_GetTick();\n    } while (currentTime - startTime < 3);\n    status = HAL_TIMEOUT;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTime = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return HAL_OK;\n      }\n      currentTime = HAL_GetTick();\n    } while (currentTime - startTime < 3);\n    status = HAL_TIMEOUT;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08005460": "configure_rcc_oscillators_08005460",
                "RCC_OscInitStruct": "oscillatorConfig",
                "HVar1": "status",
                "uVar2": "currentTime",
                "uVar3": "startTime",
                "bVar4": "isConditionTrue",
                "tmpreg": "temporaryRegister"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "RCC_Delay",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_clock_frequency_08005840",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t calculateClockFrequency_08005840(void)\n\n{\n  uint32_t clockFrequency;\n  uint8_t predivFactorTable [2];\n  uint8_t pllmulFactorTable [16];\n  \n  pllmulFactorTable[12] = '\\x0e';\n  pllmulFactorTable[13] = '\\x0f';\n  pllmulFactorTable[14] = '\\x10';\n  pllmulFactorTable[15] = '\\x10';\n  pllmulFactorTable[8] = '\\n';\n  pllmulFactorTable[9] = '\\v';\n  pllmulFactorTable[10] = '\\f';\n  pllmulFactorTable[11] = '\\r';\n  pllmulFactorTable[4] = '\\x06';\n  pllmulFactorTable[5] = '\\a';\n  pllmulFactorTable[6] = '\\b';\n  pllmulFactorTable[7] = '\\t';\n  pllmulFactorTable[0] = '\\x02';\n  pllmulFactorTable[1] = '\\x03';\n  pllmulFactorTable[2] = '\\x04';\n  pllmulFactorTable[3] = '\\x05';\n  predivFactorTable[0] = '\\x01';\n  predivFactorTable[1] = '\\x02';\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      clockFrequency = (uint)pllmulFactorTable[(_DAT_40021004 << 10) >> 0x1c] * 4000000;\n    }\n    else {\n      clockFrequency = ((uint)pllmulFactorTable[(_DAT_40021004 << 10) >> 0x1c] * 8000000) /\n              (uint)predivFactorTable[-((int)(_DAT_40021004 << 0xe) >> 0x1f)];\n    }\n  }\n  else {\n    clockFrequency = 8000000;\n  }\n  return clockFrequency;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_clock_frequency_08005840",
                "aPredivFactorTable": "predivFactorTable",
                "aPLLMULFactorTable": "pllmulFactorTable",
                "uVar1": "clockFrequency"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058ac": {
            "entrypoint": "0x080058ac",
            "current_name": "configure_system_clock_080058ac",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef\nconfigureSystemClock_080058ac(RCC_ClkInitTypeDef_conflict *clkInitStruct,uint32_t latency)\n\n{\n  uint32_t uVar1;\n  uint32_t uVar2;\n  uint uVar3;\n  \n  if ((_DAT_40022000 & 7) < latency) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | latency;\n    if (latency != (latency & 7)) {\n      return HAL_ERROR;\n    }\n  }\n  if ((clkInitStruct->ClockType & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | clkInitStruct->AHBCLKDivider;\n  }\n  if ((clkInitStruct->ClockType & 1) != 0) {\n    uVar3 = clkInitStruct->SYSCLKSource;\n    if (uVar3 == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return HAL_ERROR;\n      }\n    }\n    else if ((uVar3 != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return HAL_ERROR;\n    }\n    _DAT_40021004 = uVar3 | _DAT_40021004 & 0xfffffffc;\n    uVar1 = getTick();\n    if (clkInitStruct->SYSCLKSource == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        uVar2 = getTick();\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else if (clkInitStruct->SYSCLKSource == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        uVar2 = getTick();\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        uVar2 = getTick();\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  if (latency < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | latency;\n    if (latency != (latency & 7)) {\n      return HAL_ERROR;\n    }\n  }\n  if ((clkInitStruct->ClockType & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | clkInitStruct->APB1CLKDivider;\n  }\n  if ((clkInitStruct->ClockType & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | clkInitStruct->APB2CLKDivider << 3;\n  }\n  uVar1 = getSysClockFreq();\n  systemCoreClock = uVar1 >> \"\"[(_DAT_40021004 << 0x18) >> 0x1c];\n  initTick(0xf);\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080058ac": "configure_system_clock_080058ac",
                "RCC_ClkInitStruct": "clkInitStruct",
                "FLatency": "latency",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "HAL_GetTick": "getTick",
                "SystemCoreClock": "systemCoreClock",
                "HAL_InitTick": "initTick",
                "HAL_RCC_GetSysClockFreq": "getSysClockFreq"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_RCC_GetSysClockFreq",
                "HAL_GetTick",
                "HAL_InitTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a1c": {
            "entrypoint": "0x08005a1c",
            "current_name": "get_system_core_clock_08005a1c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getSystemCoreClock_08005a1c(void)\n\n{\n  return systemCoreClock;\n}\n\n",
            "renaming": {
                "FUN_08005a1c": "get_system_core_clock_08005a1c",
                "SystemCoreClock": "systemCoreClock"
            },
            "calling": [
                "SystemClock_Config",
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a28": {
            "entrypoint": "0x08005a28",
            "current_name": "get_hclk_frequency_08005a28",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t getHCLKFrequency_08005a28(void)\n\n{\n  uint32_t frequency;\n  \n  frequency = getHCLKFrequency_08005a28();\n  return frequency >> \"\"[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a28": "get_hclk_frequency_08005a28",
                "uVar1": "frequency",
                "HAL_RCC_GetHCLKFreq": "getHCLKFrequency"
            },
            "calling": [
                "getTimerClkFreq",
                "UART_SetConfig",
                "HAL_I2C_Init"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a48": {
            "entrypoint": "0x08005a48",
            "current_name": "get_hclk_frequency_08005a48",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t getHCLKFrequency_08005a48(void)\n\n{\n  uint32_t hclkFreq;\n  \n  hclkFreq = getHCLKFreq();\n  return hclkFreq >> \"\"[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a48": "get_hclk_frequency_08005a48",
                "HAL_RCC_GetHCLKFreq": "getHCLKFreq",
                "uVar1": "hclkFreq"
            },
            "calling": [
                "getTimerClkFreq",
                "HAL_RCCEx_GetPeriphCLKFreq",
                "UART_SetConfig"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_clock_configuration_08005a68",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeClockConfiguration_08005a68(RCC_ClkInitTypeDef_conflict *clockConfig,uint32_t *flashLatencyPtr)\n\n{\n  clockConfig->ClockType = 0xf;\n  clockConfig->SYSCLKSource = _DAT_40021004 & 3;\n  clockConfig->AHBCLKDivider = _DAT_40021004 & 0xf0;\n  clockConfig->APB1CLKDivider = _DAT_40021004 & 0x700;\n  clockConfig->APB2CLKDivider = _DAT_40021004 >> 3 & 0x700;\n  *flashLatencyPtr = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_clock_configuration_08005a68",
                "RCC_ClkInitStruct": "clockConfig",
                "pFLatency": "flashLatencyPtr"
            },
            "calling": [
                "getTimerClkFreq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aa4": {
            "entrypoint": "0x08005aa4",
            "current_name": "configure_periph_clocks_08005aa4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configurePeriphClocks_08005aa4(RCC_PeriphCLKInitTypeDef_conflict *clockInitParams)\n\n{\n  uint var1;\n  uint var2;\n  uint32_t var3;\n  uint32_t var4;\n  bool flag;\n  uint32_t tempRegister;\n  \n  if ((clockInitParams->PeriphClockSelection & 1) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      var3 = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        var4 = HAL_GetTick();\n        if (100 < var4 - var3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) &&\n       ((_DAT_40021020 & 0x300) != (clockInitParams->RTCClockSelection & 0x300))) {\n      var2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      var1 = _DAT_40021020 & 1;\n      _DAT_40021020 = var2;\n      if (var1 != 0) {\n        var3 = HAL_GetTick();\n        while ((_DAT_40021020 & 2) == 0) {\n          var4 = HAL_GetTick();\n          if (5000 < var4 - var3) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | clockInitParams->RTCClockSelection;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((clockInitParams->PeriphClockSelection & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | clockInitParams->AdcClockSelection;\n  }\n  if ((clockInitParams->PeriphClockSelection & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | clockInitParams->UsbClockSelection;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08005aa4": "configure_periph_clocks_08005aa4",
                "PeriphClkInit": "clockInitParams",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "bVar5": "flag",
                "tmpreg": "tempRegister"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb8": {
            "entrypoint": "0x08005bb8",
            "current_name": "calculate_clock_frequency_08005bb8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t calculateClockFrequency_08005bb8(uint32_t clockSource)\n\n{\n  uint32_t frequency;\n  uint divider;\n  uint8_t predivFactorTable [2];\n  uint8_t pllMulFactorTable [16];\n  \n  pllMulFactorTable[12] = '\\x0e';\n  pllMulFactorTable[13] = '\\x0f';\n  pllMulFactorTable[14] = '\\x10';\n  pllMulFactorTable[15] = '\\x10';\n  pllMulFactorTable[8] = '\\n';\n  pllMulFactorTable[9] = '\\v';\n  pllMulFactorTable[10] = '\\f';\n  pllMulFactorTable[11] = '\\r';\n  pllMulFactorTable[4] = '\\x06';\n  pllMulFactorTable[5] = '\\a';\n  pllMulFactorTable[6] = '\\b';\n  pllMulFactorTable[7] = '\\t';\n  pllMulFactorTable[0] = '\\x02';\n  pllMulFactorTable[1] = '\\x03';\n  pllMulFactorTable[2] = '\\x04';\n  pllMulFactorTable[3] = '\\x05';\n  predivFactorTable[0] = '\\x01';\n  predivFactorTable[1] = '\\x02';\n  if (clockSource == 2) {\n    frequency = HAL_RCC_GetPCLK2Freq();\n    frequency = frequency / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (clockSource == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      frequency = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        divider = 4000000;\n      }\n      else {\n        divider = 8000000 / predivFactorTable[-((int)(_DAT_40021004 << 0xe) >> 0x1f)];\n      }\n      frequency = divider * pllMulFactorTable[(_DAT_40021004 << 10) >> 0x1c];\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        frequency = (frequency * 2) / 3;\n      }\n    }\n  }\n  else if (clockSource == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      frequency = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      frequency = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        frequency = 0;\n      }\n      else {\n        frequency = 0xf424;\n      }\n    }\n    else {\n      frequency = 0;\n    }\n  }\n  else {\n    frequency = 0;\n  }\n  return frequency;\n}\n\n",
            "renaming": {
                "FUN_08005bb8": "calculate_clock_frequency_08005bb8",
                "PeriphClk": "clockSource",
                "uVar1": "frequency",
                "uVar2": "divider",
                "aPredivFactorTable": "predivFactorTable",
                "aPLLMULFactorTable": "pllMulFactorTable"
            },
            "calling": [
                "HAL_ADC_PollForConversion",
                "HAL_ADCEx_Calibration_Start"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb4": {
            "entrypoint": "0x08005cb4",
            "current_name": "handle_rtc_alarm_08005cb4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid handle_rtc_alarm_08005cb4(RTC_HandleTypeDef *rtc_handle)\n\n{\n  if (((rtc_handle->Instance->control_high_register & 2) != 0) && ((rtc_handle->Instance->control_low_register & 2) != 0)) {\n    handle_alarm_a_event_callback(rtc_handle);\n    rtc_handle->Instance->control_low_register = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  rtc_handle->rtc_state = HAL_RTC_STATE_READY;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb4": "handle_rtc_alarm_08005cb4",
                "hrtc": "rtc_handle",
                "CRH": "control_high_register",
                "CRL": "control_low_register",
                "HAL_RTC_AlarmAEventCallback": "handle_alarm_a_event_callback",
                "State": "rtc_state"
            },
            "calling": [
                "RTC_Alarm_IRQHandler"
            ],
            "called": [
                "HAL_RTC_AlarmAEventCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "configure_tim_08005cec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTIM_08005cec(TIM_TypeDef_conflict *timer,TIM_OC_InitTypeDef *outputConfig)\n\n{\n  uint32_t CCER_value;\n  uint32_t CR2_value;\n  uint OCMode_value;\n  \n  timer->CCER = timer->CCER & 0xfffffffe;\n  CR2_value = timer->CR2;\n  OCMode_value = outputConfig->OCMode;\n  CCER_value = timer->CCER & 0xfffffffd | outputConfig->OCPolarity;\n  if (timer == (TIM_TypeDef_conflict *)0x40012c00) {\n    CCER_value = (CCER_value & 0xfffffff7 | outputConfig->OCNPolarity) & 0xfffffffb;\n    CR2_value = CR2_value & 0xfffffcff | outputConfig->OCIdleState | outputConfig->OCNIdleState;\n  }\n  timer->CR2 = CR2_value;\n  timer->CCMR1 = timer->CCMR1 & 0xffffff8c | OCMode_value;\n  timer->CCR1 = outputConfig->Pulse;\n  timer->CCER = CCER_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "configure_tim_08005cec",
                "TIMx": "timer",
                "OC_Config": "outputConfig",
                "uVar1": "CCER_value",
                "uVar2": "CR2_value",
                "uVar3": "OCMode_value"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d48": {
            "entrypoint": "0x08005d48",
            "current_name": "configure_timer_oc_08005d48",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTimerOC_08005d48(TIM_TypeDef_conflict *timer,TIM_OC_InitTypeDef *ocConfig)\n\n{\n  uint32_t ccerValue;\n  uint32_t cr2Value;\n  uint ocModeValue;\n  \n  timer->CCER = timer->CCER & 0xfffffeff;\n  cr2Value = timer->CR2;\n  ocModeValue = ocConfig->OCMode;\n  ccerValue = timer->CCER & 0xfffffdff | ocConfig->OCPolarity << 8;\n  if (timer == (TIM_TypeDef_conflict *)0x40012c00) {\n    ccerValue = (ccerValue & 0xfffff7ff | ocConfig->OCNPolarity << 8) & 0xfffffbff;\n    cr2Value = cr2Value & 0xffffcfff | ocConfig->OCIdleState << 4 | ocConfig->OCNIdleState << 4;\n  }\n  timer->CR2 = cr2Value;\n  timer->CCMR2 = timer->CCMR2 & 0xffffff8c | ocModeValue;\n  timer->CCR3 = ocConfig->Pulse;\n  timer->CCER = ccerValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d48": "configure_timer_oc_08005d48",
                "TIMx": "timer",
                "OC_Config": "ocConfig",
                "uVar1": "ccerValue",
                "uVar2": "cr2Value",
                "uVar3": "ocModeValue"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dac": {
            "entrypoint": "0x08005dac",
            "current_name": "configure_timer_output_08005dac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTimerOutput_08005dac(TIM_TypeDef_conflict *timer,TIM_OC_InitTypeDef *outputConfig)\n\n{\n  uint32_t timerCr2;\n  uint32_t outputMode;\n  uint32_t outputPolarity;\n  \n  timer->CCER = timer->CCER & 0xffffefff;\n  timerCr2 = timer->CR2;\n  outputMode = outputConfig->OCMode;\n  outputPolarity = outputConfig->OCPolarity;\n  if (timer == (TIM_TypeDef_conflict *)0x40012c00) {\n    timerCr2 = timerCr2 & 0xffffbfff | outputConfig->OCIdleState << 6;\n  }\n  timer->CR2 = timerCr2;\n  timer->CCMR2 = timer->CCMR2 & 0xffff8cff | outputMode << 8;\n  timer->CCR4 = outputConfig->Pulse;\n  timer->CCER = timer->CCER & 0xffffdfff | outputPolarity << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dac": "configure_timer_output_08005dac",
                "TIMx": "timer",
                "OC_Config": "outputConfig",
                "uVar1": "timerCr2",
                "uVar2": "outputMode",
                "uVar3": "outputPolarity"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005df4": {
            "entrypoint": "0x08005df4",
            "current_name": "reset_timer_08005df4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nStatus resetTimer_08005df4(Handle *timer)\n\n{\n  TypeDef *timerInstance;\n  \n  timer->State = HAL_TIM_STATE_BUSY;\n  timerInstance = timer->Instance;\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->CR1 = timerInstance->CR1 & 0xfffffffe;\n  }\n  HAL_TIM_OC_MspDeInit(timer);\n  timer->State = HAL_TIM_STATE_RESET;\n  timer->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08005df4": "reset_timer_08005df4",
                "htim": "timer",
                "HAL_StatusTypeDef_conflict": "Status",
                "TIM_HandleTypeDef_conflict": "Handle",
                "TIM_TypeDef_conflict": "TypeDef",
                "pTVar1": "timerInstance"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [
                "HAL_TIM_OC_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e2e": {
            "entrypoint": "0x08005e2e",
            "current_name": "reset_timer_08005e2e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict resetTimer_08005e2e(TIM_HandleTypeDef_conflict *timerHandle)\n\n{\n  TIM_TypeDef_conflict *pTVar1;\n  \n  timerHandle->timerState = busyState;\n  pTVar1 = timerHandle->timerInstance;\n  if (((pTVar1->captureCompareEnableRegister & 0x1111) == 0) && ((pTVar1->captureCompareEnableRegister & 0x444) == 0)) {\n    pTVar1->controlRegister1 = pTVar1->controlRegister1 & 0xfffffffe;\n  }\n  deinitializePWM(timerHandle);\n  timerHandle->timerState = resetState;\n  timerHandle->Lock = unlockedState;\n  return successStatus;\n}\n\n",
            "renaming": {
                "FUN_08005e2e": "reset_timer_08005e2e",
                "htim": "timerHandle",
                "State": "timerState",
                "Instance": "timerInstance",
                "CCER": "captureCompareEnableRegister",
                "CR1": "controlRegister1",
                "HAL_TIM_STATE_BUSY": "busyState",
                "HAL_TIM_PWM_MspDeInit": "deinitializePWM",
                "HAL_TIM_STATE_RESET": "resetState",
                "HAL_UNLOCKED": "unlockedState",
                "HAL_OK": "successStatus"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e68": {
            "entrypoint": "0x08005e68",
            "current_name": "FUNC_08005e68",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005e68(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6a": {
            "entrypoint": "0x08005e6a",
            "current_name": "FUNC_08005e6a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005e6a(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6c": {
            "entrypoint": "0x08005e6c",
            "current_name": "FUNC_08005e6c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005e6c(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6e": {
            "entrypoint": "0x08005e6e",
            "current_name": "handle_tim_events_08005e6e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimEvents_08005e6e(AJstatusRegisterDQDECI *htim)\n\n{\n  timInstance *timPtr;\n  \n  timPtr = htim->instance;\n  if (((timPtr->statusRegister & 2) != 0) && ((timPtr->interruptEnableRegister & 2) != 0)) {\n    timPtr->statusRegister = 0xfffffffd;\n    htim->activeChannel = ACTIVE_CHANNEL_1;\n    if ((htim->instance->captureCompareModeRegister1 & 3) == 0) {\n      handleDelayElapsed(htim);\n      handlePulseFinished(htim);\n    }\n    else {\n      handleCapture(htim);\n    }\n    htim->activeChannel = ACTIVE_CHANNEL_CLEARED;\n  }\n  timPtr = htim->instance;\n  if (((timPtr->statusRegister & 4) != 0) && ((timPtr->interruptEnableRegister & 4) != 0)) {\n    timPtr->statusRegister = 0xfffffffb;\n    htim->activeChannel = ACTIVE_CHANNEL_2;\n    if ((htim->instance->captureCompareModeRegister1 & 0x300) == 0) {\n      handleDelayElapsed(htim);\n      handlePulseFinished(htim);\n    }\n    else {\n      handleCapture(htim);\n    }\n    htim->activeChannel = ACTIVE_CHANNEL_CLEARED;\n  }\n  timPtr = htim->instance;\n  if (((timPtr->statusRegister & 8) != 0) && ((timPtr->interruptEnableRegister & 8) != 0)) {\n    timPtr->statusRegister = 0xfffffff7;\n    htim->activeChannel = ACTIVE_CHANNEL_3;\n    if ((htim->instance->captureCompareModeRegister2 & 3) == 0) {\n      handleDelayElapsed(htim);\n      handlePulseFinished(htim);\n    }\n    else {\n      handleCapture(htim);\n    }\n    htim->activeChannel = ACTIVE_CHANNEL_CLEARED;\n  }\n  timPtr = htim->instance;\n  if (((timPtr->statusRegister & 0x10) != 0) && ((timPtr->interruptEnableRegister & 0x10) != 0)) {\n    timPtr->statusRegister = 0xffffffef;\n    htim->activeChannel = ACTIVE_CHANNEL_4;\n    if ((htim->instance->captureCompareModeRegister2 & 0x300) == 0) {\n      handleDelayElapsed(htim);\n      handlePulseFinished(htim);\n    }\n    else {\n      handleCapture(htim);\n    }\n    htim->activeChannel = ACTIVE_CHANNEL_CLEARED;\n  }\n  timPtr = htim->instance;\n  if (((timPtr->statusRegister & 1) != 0) && ((timPtr->interruptEnableRegister & 1) != 0)) {\n    timPtr->statusRegister = 0xfffffffe;\n    handlePeriodElapsed(htim);\n  }\n  timPtr = htim->instance;\n  if (((timPtr->statusRegister & 0x80) != 0) && ((timPtr->interruptEnableRegister & 0x80) != 0)) {\n    timPtr->statusRegister = 0xffffff7f;\n    handleBreak(htim);\n  }\n  timPtr = htim->instance;\n  if (((timPtr->statusRegister & 0x40) != 0) && ((timPtr->interruptEnableRegister & 0x40) != 0)) {\n    timPtr->statusRegister = 0xffffffbf;\n    handleTrigger(htim);\n  }\n  timPtr = htim->instance;\n  if (((timPtr->statusRegister & 0x20) != 0) && ((timPtr->interruptEnableRegister & 0x20) != 0)) {\n    timPtr->statusRegister = 0xffffffdf;\n    handleCommutation(htim);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6e": "handle_tim_events_08005e6e",
                "TIM_HandleTypeDef_conflict": "timHandle",
                "TIM_TypeDef_conflict": "timInstance",
                "pTVar1": "timPtr",
                "Instance": "instance",
                "SR": "statusRegister",
                "DIER": "interruptEnableRegister",
                "Channel": "activeChannel",
                "HAL_TIM_ACTIVE_CHANNEL_1": "ACTIVE_CHANNEL_1",
                "HAL_TIM_ACTIVE_CHANNEL_2": "ACTIVE_CHANNEL_2",
                "HAL_TIM_ACTIVE_CHANNEL_3": "ACTIVE_CHANNEL_3",
                "HAL_TIM_ACTIVE_CHANNEL_4": "ACTIVE_CHANNEL_4",
                "HAL_TIM_ACTIVE_CHANNEL_CLEARED": "ACTIVE_CHANNEL_CLEARED",
                "CCMR1": "captureCompareModeRegister1",
                "CCMR2": "captureCompareModeRegister2",
                "HAL_TIM_OC_DelayElapsedCallback": "handleDelayElapsed",
                "HAL_TIM_PWM_PulseFinishedCallback": "handlePulseFinished",
                "HAL_TIM_IC_CaptureCallback": "handleCapture",
                "HAL_TIM_PeriodElapsedCallback": "handlePeriodElapsed",
                "HAL_TIMEx_BreakCallback": "handleBreak",
                "HAL_TIM_TriggerCallback": "handleTrigger",
                "HAL_TIMEx_CommutationCallback": "handleCommutation"
            },
            "calling": [
                "TIM4_IRQHandler",
                "TIM2_IRQHandler",
                "TIM3_IRQHandler",
                "TIM1_UP_IRQHandler"
            ],
            "called": [
                "HAL_TIMEx_BreakCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fe8": {
            "entrypoint": "0x08005fe8",
            "current_name": "configure_timer_08005fe8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTimer_08005fe8(TIM_TypeDef_conflict *timer,TIM_Base_InitTypeDef_conflict *initParams)\n\n{\n  uint controlReg;\n  \n  controlReg = timer->CR1;\n  if ((((timer == (TIM_TypeDef_conflict *)0x40012c00) || (timer == (TIM_TypeDef_conflict *)0x40000000)\n       ) || (timer == (TIM_TypeDef_conflict *)0x40000400)) ||\n     (timer == (TIM_TypeDef_conflict *)0x40000800)) {\n    controlReg = controlReg & 0xffffff8f | initParams->CounterMode;\n  }\n  if (((timer == (TIM_TypeDef_conflict *)0x40012c00) || (timer == (TIM_TypeDef_conflict *)0x40000000))\n     || ((timer == (TIM_TypeDef_conflict *)0x40000400 || (timer == (TIM_TypeDef_conflict *)0x40000800)\n         ))) {\n    controlReg = controlReg & 0xfffffcff | initParams->ClockDivision;\n  }\n  timer->CR1 = controlReg & 0xffffff7f | initParams->AutoReloadPreload;\n  timer->ARR = initParams->Period;\n  timer->PSC = initParams->Prescaler;\n  if (timer == (TIM_TypeDef_conflict *)0x40012c00) {\n    uRam40012c30 = initParams->RepetitionCounter;\n  }\n  timer->EGR = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fe8": "configure_timer_08005fe8",
                "TIMx": "timer",
                "Structure": "initParams",
                "uVar1": "controlReg"
            },
            "calling": [
                "HAL_TIM_OC_Init",
                "HAL_TIM_PWM_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006060": {
            "entrypoint": "0x08006060",
            "current_name": "initialize_timer_08006060",
            "code": "\n/* WARNING: Unknown calling convention */\n\nStatus initializeTimer_08006060(Handler *timer)\n\n{\n  if (timer != (Handler *)0x0) {\n    if (timer->State == RESET_STATE) {\n      timer->Lock = UNLOCKED;\n      HAL_TIM_OC_MspInit(timer);\n    }\n    timer->State = BUSY_STATE;\n    TIM_Base_SetConfig(timer->Instance,&timer->Init);\n    timer->State = READY_STATE;\n    return OK;\n  }\n  return ERROR;\n}\n\n",
            "renaming": {
                "FUN_08006060": "initialize_timer_08006060",
                "htim": "timer",
                "HAL_StatusTypeDef_conflict": "Status",
                "TIM_HandleTypeDef_conflict": "Handler",
                "HAL_TIM_STATE_RESET": "RESET_STATE",
                "HAL_UNLOCKED": "UNLOCKED",
                "HAL_TIM_STATE_BUSY": "BUSY_STATE",
                "HAL_TIM_STATE_READY": "READY_STATE",
                "HAL_OK": "OK",
                "HAL_ERROR": "ERROR"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "HAL_TIM_OC_MspInit",
                "TIM_Base_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006092": {
            "entrypoint": "0x08006092",
            "current_name": "initialize_tim_pwm_08006092",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef initialize_TIM_PWM_08006092(TIM_HandleTypeDef *tim_handle)\n\n{\n  if (tim_handle != (TIM_HandleTypeDef *)0x0) {\n    if (tim_handle->State == TIM_STATE_RESET) {\n      tim_handle->Lock = TIM_UNLOCKED;\n      TIM_PWM_MspInit(tim_handle);\n    }\n    tim_handle->State = TIM_STATE_BUSY;\n    TIM_Base_Config(tim_handle->Instance,&tim_handle->Init);\n    tim_handle->State = TIM_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}\n\n",
            "renaming": {
                "FUN_08006092": "initialize_tim_pwm_08006092",
                "htim": "tim_handle",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "TIM_HandleTypeDef_conflict": "TIM_HandleTypeDef",
                "HAL_TIM_STATE_RESET": "TIM_STATE_RESET",
                "HAL_UNLOCKED": "TIM_UNLOCKED",
                "HAL_TIM_STATE_BUSY": "TIM_STATE_BUSY",
                "HAL_TIM_STATE_READY": "TIM_STATE_READY",
                "HAL_TIM_PWM_MspInit": "TIM_PWM_MspInit",
                "TIM_Base_SetConfig": "TIM_Base_Config"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "HAL_TIM_PWM_MspInit",
                "TIM_Base_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060c4": {
            "entrypoint": "0x080060c4",
            "current_name": "configure_tim_oc_080060c4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configure_TIM_OC_080060c4(TIM_Struct *TIMx,TIM_OC_InitTypeDef *OC_Config_Struct)\n\n{\n  uint32_t ccer;\n  uint32_t cr2;\n  uint32_t ocMode;\n  \n  TIMx->CCER = TIMx->CCER & 0xffffffef;\n  cr2 = TIMx->CR2;\n  ocMode = OC_Config_Struct->OCMode;\n  ccer = TIMx->CCER & 0xffffffdf | OC_Config_Struct->OCPolarity << 4;\n  if (TIMx == (TIM_Struct *)0x40012c00) {\n    ccer = (ccer & 0xffffff7f | OC_Config_Struct->OCNPolarity << 4) & 0xffffffbf;\n    cr2 = cr2 & 0xfffff3ff | OC_Config_Struct->OCIdleState << 2 | OC_Config_Struct->OCNIdleState << 2;\n  }\n  TIMx->CR2 = cr2;\n  TIMx->CCMR1 = TIMx->CCMR1 & 0xffff8cff | ocMode << 8;\n  TIMx->CCR2 = OC_Config_Struct->Pulse;\n  TIMx->CCER = ccer;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060c4": "configure_tim_oc_080060c4",
                "TIM_TypeDef_conflict": "TIM_Struct",
                "OC_Config": "OC_Config_Struct",
                "uVar1": "ccer",
                "uVar2": "cr2",
                "uVar3": "ocMode"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006128": {
            "entrypoint": "0x08006128",
            "current_name": "configure_timer_output_compare_08006128",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\nconfigureTimerOutputCompare_08006128(TIM_HandleTypeDef_conflict *timerHandle,TIM_OC_InitTypeDef *outputCompareConfig,uint32_t channel)\n\n{\n  if (timerHandle->Lock != HAL_LOCKED) {\n    timerHandle->Lock = HAL_LOCKED;\n    timerHandle->State = HAL_TIM_STATE_BUSY;\n    switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(timerHandle->Instance,outputCompareConfig);\n      break;\n    case 4:\n      TIM_OC2_SetConfig(timerHandle->Instance,outputCompareConfig);\n      break;\n    case 8:\n      TIM_OC3_SetConfig(timerHandle->Instance,outputCompareConfig);\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(timerHandle->Instance,outputCompareConfig);\n    }\n    timerHandle->State = HAL_TIM_STATE_READY;\n    timerHandle->Lock = HAL_UNLOCKED;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}\n\n",
            "renaming": {
                "FUN_08006128": "configure_timer_output_compare_08006128",
                "htim": "timerHandle",
                "sConfig": "outputCompareConfig",
                "Channel": "channel"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "TIM_OC4_SetConfig",
                "TIM_OC2_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC3_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006186": {
            "entrypoint": "0x08006186",
            "current_name": "configure_tim_output_channel_08006186",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\nconfigureTIMOutputChannel_08006186(TIM_HandleTypeDef_conflict *timerHandle,TIM_OC_InitTypeDef *outputConfig,uint32_t channel)\n\n{\n  if (timerHandle->Lock != HAL_LOCKED) {\n    timerHandle->Lock = HAL_LOCKED;\n    timerHandle->State = HAL_TIM_STATE_BUSY;\n    switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(timerHandle->Instance,outputConfig);\n      timerHandle->Instance->CCMR1 = timerHandle->Instance->CCMR1 | 8;\n      timerHandle->Instance->CCMR1 = timerHandle->Instance->CCMR1 & 0xfffffffb;\n      timerHandle->Instance->CCMR1 = timerHandle->Instance->CCMR1 | outputConfig->OCFastMode;\n      break;\n    case 4:\n      TIM_OC2_SetConfig(timerHandle->Instance,outputConfig);\n      timerHandle->Instance->CCMR1 = timerHandle->Instance->CCMR1 | 0x800;\n      timerHandle->Instance->CCMR1 = timerHandle->Instance->CCMR1 & 0xfffffbff;\n      timerHandle->Instance->CCMR1 = timerHandle->Instance->CCMR1 | outputConfig->OCFastMode << 8;\n      break;\n    case 8:\n      TIM_OC3_SetConfig(timerHandle->Instance,outputConfig);\n      timerHandle->Instance->CCMR2 = timerHandle->Instance->CCMR2 | 8;\n      timerHandle->Instance->CCMR2 = timerHandle->Instance->CCMR2 & 0xfffffffb;\n      timerHandle->Instance->CCMR2 = timerHandle->Instance->CCMR2 | outputConfig->OCFastMode;\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(timerHandle->Instance,outputConfig);\n      timerHandle->Instance->CCMR2 = timerHandle->Instance->CCMR2 | 0x800;\n      timerHandle->Instance->CCMR2 = timerHandle->Instance->CCMR2 & 0xfffffbff;\n      timerHandle->Instance->CCMR2 = timerHandle->Instance->CCMR2 | outputConfig->OCFastMode << 8;\n    }\n    timerHandle->State = HAL_TIM_STATE_READY;\n    timerHandle->Lock = HAL_UNLOCKED;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}\n\n",
            "renaming": {
                "FUN_08006186": "configure_tim_output_channel_08006186",
                "htim": "timerHandle",
                "sConfig": "outputConfig",
                "Channel": "channel"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_OC4_SetConfig",
                "TIM_OC2_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC3_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006262": {
            "entrypoint": "0x08006262",
            "current_name": "configure_timer_channel_08006262",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTimerChannel_08006262(TIM_TypeDef_conflict *timer,uint32_t channelNumber,uint32_t channelState)\n\n{\n  timer->CCER = timer->CCER & ~(1 << (channelNumber & 0xff));\n  timer->CCER = timer->CCER | channelState << (channelNumber & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006262": "configure_timer_channel_08006262",
                "TIMx": "timer",
                "Channel": "channelNumber",
                "ChannelState": "channelState"
            },
            "calling": [
                "HAL_TIM_OC_Start_IT",
                "HAL_TIM_OC_Stop_IT",
                "HAL_TIM_PWM_Stop",
                "HAL_TIM_PWM_Start"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006280": {
            "entrypoint": "0x08006280",
            "current_name": "configure_timer_capture_interrupt_08006280",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureTimerCaptureInterrupt_08006280(TIM_HandleTypeDef_conflict *timerHandle,uint32_t channel)\n\n{\n  switch(channel) {\n  case 0:\n    timerHandle->timerInstance->DIER = timerHandle->timerInstance->DIER | 2;\n    break;\n  case 4:\n    timerHandle->timerInstance->DIER = timerHandle->timerInstance->DIER | 4;\n    break;\n  case 8:\n    timerHandle->timerInstance->DIER = timerHandle->timerInstance->DIER | 8;\n    break;\n  case 0xc:\n    timerHandle->timerInstance->DIER = timerHandle->timerInstance->DIER | 0x10;\n  }\n  configureChannelCommand(timerHandle->timerInstance,channel,1);\n  if (timerHandle->timerInstance == (TIM_TypeDef_conflict *)0x40012c00) {\n    register40012c44 = register40012c44 | 0x8000;\n  }\n  timerHandle->timerInstance->CR1 = timerHandle->timerInstance->CR1 | 1;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08006280": "configure_timer_capture_interrupt_08006280",
                "htim": "timerHandle",
                "Channel": "channel",
                "Instance": "timerInstance",
                "TIM_CCxChannelCmd": "configureChannelCommand",
                "uRam40012c44": "register40012c44"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080062f4": {
            "entrypoint": "0x080062f4",
            "current_name": "disable_timer_interrupt_080062f4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict disableTimerInterrupt_080062f4(TIM_HandleTypeDef_conflict *timerHandle,uint32_t channel)\n\n{\n  TIM_TypeDef_conflict *timerInstance;\n  \n  switch(channel) {\n  case 0:\n    timerHandle->Instance->DIER = timerHandle->Instance->DIER & 0xfffffffd;\n    break;\n  case 4:\n    timerHandle->Instance->DIER = timerHandle->Instance->DIER & 0xfffffffb;\n    break;\n  case 8:\n    timerHandle->Instance->DIER = timerHandle->Instance->DIER & 0xfffffff7;\n    break;\n  case 0xc:\n    timerHandle->Instance->DIER = timerHandle->Instance->DIER & 0xffffffef;\n  }\n  TIM_CCxchannelCmd(timerHandle->Instance,channel,0);\n  if (((timerHandle->Instance == (TIM_TypeDef_conflict *)0x40012c00) && ((uRam40012c20 & 0x1111) == 0)) &&\n     ((uRam40012c20 & 0x444) == 0)) {\n    uRam40012c44 = uRam40012c44 & 0xffff7fff;\n  }\n  timerInstance = timerHandle->Instance;\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->CR1 = timerInstance->CR1 & 0xfffffffe;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080062f4": "disable_timer_interrupt_080062f4",
                "htim": "timerHandle",
                "Channel": "channel",
                "pTVar1": "timerInstance"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006390": {
            "entrypoint": "0x08006390",
            "current_name": "enable_timer_channel_08006390",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict enableTimerChannel_08006390(TIM_HandleTypeDef_conflict *timerHandle,uint32_t channel)\n\n{\n  setTimerChannelCommand(timerHandle->Instance,channel,1);\n  if (timerHandle->Instance == (TimerType *)0x40012c00) {\n    dataRegister = dataRegister | 0x8000;\n  }\n  timerHandle->Instance->controlRegister1 = timerHandle->Instance->controlRegister1 | 1;\n  return okay;\n}\n\n",
            "renaming": {
                "FUN_08006390": "enable_timer_channel_08006390",
                "htim": "timerHandle",
                "Channel": "channel",
                "uRam40012c44": "dataRegister",
                "TIM_CCxChannelCmd": "setTimerChannelCommand",
                "TIM_TypeDef_conflict": "TimerType",
                "CR1": "controlRegister1",
                "HAL_OK": "okay"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080063c0": {
            "entrypoint": "0x080063c0",
            "current_name": "initialize_timer_080063c0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeTimer_080063c0(TIM_HandleTypeDef_conflict *timerHandle,uint32_t channel)\n\n{\n  TIM_TypeDef_conflict *timerInstance;\n  \n  TIM_CCxchannelCmd(timerHandle->Instance,channel,0);\n  if (((timerHandle->Instance == (TIM_TypeDef_conflict *)0x40012c00) && ((register1 & 0x1111) == 0)) &&\n     ((register1 & 0x444) == 0)) {\n    register2 = register2 & 0xffff7fff;\n  }\n  timerInstance = timerHandle->Instance;\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->CR1 = timerInstance->CR1 & 0xfffffffe;\n  }\n  timerHandle->State = HAL_TIM_STATE_READY;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080063c0": "initialize_timer_080063c0",
                "htim": "timerHandle",
                "Channel": "channel",
                "pTVar1": "timerInstance",
                "uRam40012c20": "register1",
                "uRam40012c44": "register2"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006420": {
            "entrypoint": "0x08006420",
            "current_name": "configure_timer_channel_state_08006420",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTimerChannelState_08006420(TIM_TypeDef_conflict *timer,uint32_t channelNumber,uint32_t newChannelState)\n\n{\n  timer->CCER = timer->CCER & ~(4 << (channelNumber & 0xff));\n  timer->CCER = timer->CCER | newChannelState << (channelNumber & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006420": "configure_timer_channel_state_08006420",
                "TIMx": "timer",
                "Channel": "channelNumber",
                "ChannelNState": "newChannelState"
            },
            "calling": [
                "HAL_TIMEx_PWMN_Start",
                "HAL_TIMEx_PWMN_Stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800643c": {
            "entrypoint": "0x0800643c",
            "current_name": "initialize_tim_channel_0800643c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeTIMChannel_0800643c(TIM_HandleTypeDef_conflict *timerHandle,uint32_t channel)\n\n{\n  TIM_CCxNchannelCmd(timerHandle->timerInstance,channel,4);\n  timerHandle->timerInstance->breakAndDeadTimeRegister = timerHandle->timerInstance->breakAndDeadTimeRegister | 0x8000;\n  timerHandle->timerInstance->controlRegister = timerHandle->timerInstance->controlRegister | 1;\n  return HAL_StatusTypeDef_OK;\n}\n\n",
            "renaming": {
                "FUN_0800643c": "initialize_tim_channel_0800643c",
                "htim": "timerHandle",
                "Channel": "channel",
                "Instance": "timerInstance",
                "BDTR": "breakAndDeadTimeRegister",
                "CR1": "controlRegister",
                "HAL_OK": "HAL_StatusTypeDef_OK"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006460": {
            "entrypoint": "0x08006460",
            "current_name": "disable_timer_channel_08006460",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict disableTimerChannel_08006460(TIM_HandleTypeDef_conflict *timerHandle,uint32_t channel)\n\n{\n  TIM_TypeDef_conflict *timerInstance;\n  \n  TIM_CCxNchannelCmd(timerHandle->Instance,channel,0);\n  timerInstance = timerHandle->Instance;\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->BDTR = timerInstance->BDTR & 0xffff7fff;\n  }\n  timerInstance = timerHandle->Instance;\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->CR1 = timerInstance->CR1 & 0xfffffffe;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08006460": "disable_timer_channel_08006460",
                "htim": "timerHandle",
                "Channel": "channel",
                "pTVar1": "timerInstance"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ac": {
            "entrypoint": "0x080064ac",
            "current_name": "FUNC_080064ac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080064ac(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064ae": {
            "entrypoint": "0x080064ae",
            "current_name": "FUNC_080064ae",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080064ae(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064b0": {
            "entrypoint": "0x080064b0",
            "current_name": "reset_uart_instance_080064b0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid reset_uart_instance_080064b0(UART_HandleTypeDef *uart_handle)\n\n{\n  uart_handle->Instance->control_register_1 = uart_handle->Instance->control_register_1 & 0xfffffedf;\n  uart_handle->Instance->control_register_3 = uart_handle->Instance->control_register_3 & 0xfffffffe;\n  uart_handle->receive_state = HAL_UART_STATE_READY;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064b0": "reset_uart_instance_080064b0",
                "huart": "uart_handle",
                "CR1": "control_register_1",
                "CR3": "control_register_3",
                "RxState": "receive_state"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064cc": {
            "entrypoint": "0x080064cc",
            "current_name": "transmit_data_080064cc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict transmitData_080064cc(UART_HandleTypeDef *uartHandler)\n\n{\n  uint16_t remainingCount;\n  byte *dataPtr;\n  uint16_t *tempPtr;\n  \n  if (uartHandler->gState != HAL_UART_STATE_BUSY_TX) {\n    return HAL_BUSY;\n  }\n  if ((uartHandler->Init).WordLength == 0x1000) {\n    uartHandler->Instance->DR = *(ushort *)uartHandler->pTxBuffPtr & 0x1ff;\n    if ((uartHandler->Init).Parity == 0) {\n      uartHandler->pTxBuffPtr = uartHandler->pTxBuffPtr + 2;\n    }\n    else {\n      uartHandler->pTxBuffPtr = uartHandler->pTxBuffPtr + 1;\n    }\n  }\n  else {\n    dataPtr = uartHandler->pTxBuffPtr;\n    uartHandler->pTxBuffPtr = dataPtr + 1;\n    uartHandler->Instance->DR = (uint)*dataPtr;\n  }\n  remainingCount = uartHandler->TxXferCount - 1;\n  uartHandler->TxXferCount = remainingCount;\n  if (remainingCount == 0) {\n    uartHandler->Instance->CR1 = uartHandler->Instance->CR1 & 0xffffff7f;\n    uartHandler->Instance->CR1 = uartHandler->Instance->CR1 | 0x40;\n    return HAL_OK;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080064cc": "transmit_data_080064cc",
                "huart": "uartHandler",
                "uVar1": "remainingCount",
                "pbVar2": "dataPtr",
                "tmp": "tempPtr"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006538": {
            "entrypoint": "0x08006538",
            "current_name": "initialize_uart_08006538",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeUART_08006538(UART_HandleTypeDef *uartHandle)\n\n{\n  uint32_t pclkFreq1;\n  uint32_t pclkFreq2;\n  uint32_t pclkFreq3;\n  uint32_t pclkFreq4;\n  uint32_t pclkFreq5;\n  uint32_t baudRate1;\n  uint32_t baudRate2;\n  uint32_t baudRate3;\n  uint32_t baudRate4;\n  USART_TypeDef *uartInstance;\n  \n  uartHandle->Instance->CR2 = uartHandle->Instance->CR2 & 0xffffcfff | (uartHandle->Init).StopBits;\n  uartHandle->Instance->CR1 =\n       (uartHandle->Init).WordLength | (uartHandle->Init).Parity | (uartHandle->Init).Mode |\n       uartHandle->Instance->CR1 & 0xffffe9f3;\n  uartHandle->Instance->CR3 = uartHandle->Instance->CR3 & 0xfffffcff | (uartHandle->Init).HwFlowCtl;\n  uartInstance = uartHandle->Instance;\n  if (uartInstance != (USART_TypeDef *)0x40013800) {\n    pclkFreq1 = HAL_RCC_GetPCLK1Freq();\n    baudRate1 = (uartHandle->Init).BaudRate;\n    pclkFreq2 = HAL_RCC_GetPCLK1Freq();\n    baudRate2 = (uartHandle->Init).BaudRate;\n    pclkFreq3 = HAL_RCC_GetPCLK1Freq();\n    baudRate3 = (uartHandle->Init).BaudRate;\n    pclkFreq4 = HAL_RCC_GetPCLK1Freq();\n    baudRate4 = (uartHandle->Init).BaudRate;\n    pclkFreq5 = HAL_RCC_GetPCLK1Freq();\n    uartInstance->BRR = ((uint)((int)((ulonglong)\n                                 (((pclkFreq4 * 0x19) / (baudRate4 << 2) +\n                                  (int)(((ulonglong)(pclkFreq5 * 0x19) /\n                                        (ulonglong)((uartHandle->Init).BaudRate << 2)) / 100) * -100) *\n                                  0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                   ((((pclkFreq2 * 0x19) / (baudRate2 << 2) +\n                     (int)(((ulonglong)(pclkFreq3 * 0x19) / (ulonglong)(baudRate3 << 2)) / 100) * -100) *\n                     0x10 + 0x32) / 100 & 0xf0) +\n                   (int)(((ulonglong)(pclkFreq1 * 0x19) / (ulonglong)(baudRate1 << 2)) / 100) * 0x10;\n    return;\n  }\n  pclkFreq1 = HAL_RCC_GetPCLK2Freq();\n  baudRate1 = (uartHandle->Init).BaudRate;\n  pclkFreq2 = HAL_RCC_GetPCLK2Freq();\n  baudRate2 = (uartHandle->Init).BaudRate;\n  pclkFreq3 = HAL_RCC_GetPCLK2Freq();\n  baudRate3 = (uartHandle->Init).BaudRate;\n  pclkFreq4 = HAL_RCC_GetPCLK2Freq();\n  baudRate4 = (uartHandle->Init).BaudRate;\n  pclkFreq5 = HAL_RCC_GetPCLK2Freq();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((pclkFreq4 * 0x19) / (baudRate4 << 2) +\n                                (int)(((ulonglong)(pclkFreq5 * 0x19) /\n                                      (ulonglong)((uartHandle->Init).BaudRate << 2)) / 100) * -100) *\n                                0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((pclkFreq2 * 0x19) / (baudRate2 << 2) +\n                   (int)(((ulonglong)(pclkFreq3 * 0x19) / (ulonglong)(baudRate3 << 2)) / 100) * -100) * 0x10\n                  + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(pclkFreq1 * 0x19) / (ulonglong)(baudRate1 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006538": "initialize_uart_08006538",
                "huart": "uartHandle",
                "uVar1": "pclkFreq1",
                "uVar2": "pclkFreq2",
                "uVar3": "pclkFreq3",
                "uVar4": "pclkFreq4",
                "uVar5": "pclkFreq5",
                "uVar6": "baudRate1",
                "uVar7": "baudRate2",
                "uVar8": "baudRate3",
                "uVar9": "baudRate4",
                "pUVar10": "uartInstance"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066e8": {
            "entrypoint": "0x080066e8",
            "current_name": "check_flag_status_080066e8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_desiredStatusTypeDef_conflict\ncheckFlagStatus_080066e8(UART_HandleTypeDef *uartHandler,uint32_t flag,flagdesiredStatus desiredStatus,uint32_t startTick,\n            uint32_t timeout)\n\n{\n  uint32_t currentTick;\n  \n  do {\n    if (((flag & ~uartHandler->Instance->SR) == 0) != (bool)desiredStatus) {\n      return HAL_OK;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currentTick = HAL_GetTick(), currentTick - startTick <= timeout))));\n  uartHandler->Instance->CR1 = uartHandler->Instance->CR1 & 0xfffffe5f;\n  uartHandler->Instance->CR3 = uartHandler->Instance->CR3 & 0xfffffffe;\n  uartHandler->gState = HAL_UART_STATE_READY;\n  uartHandler->RxState = HAL_UART_STATE_READY;\n  uartHandler->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}\n\n",
            "renaming": {
                "FUN_080066e8": "check_flag_status_080066e8",
                "huart": "uartHandler",
                "Flag": "flag",
                "Status": "desiredStatus",
                "Tickstart": "startTick",
                "Timeout": "timeout",
                "uVar1": "currentTick"
            },
            "calling": [
                "HAL_UART_Transmit"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800674c": {
            "entrypoint": "0x0800674c",
            "current_name": "FUNC_0800674c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800674c(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674e": {
            "entrypoint": "0x0800674e",
            "current_name": "initialize_uart_0800674e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeUART_0800674e(UART_HandleTypeDef *uartHandle)\n\n{\n  if (uartHandle != (UART_HandleTypeDef *)0x0) {\n    if (uartHandle->gState == HAL_UART_STATE_RESET) {\n      uartHandle->lockState = HAL_UNLOCKED;\n      initializeUART_0800674e_MSP(uartHandle);\n    }\n    uartHandle->gState = HAL_UART_STATE_BUSY;\n    uartHandle->Instance->CR1 = uartHandle->Instance->CR1 & 0xffffdfff;\n    UART_SetConfig(uartHandle);\n    uartHandle->Instance->CR2 = uartHandle->Instance->CR2 & 0xffffb7ff;\n    uartHandle->Instance->CR3 = uartHandle->Instance->CR3 & 0xffffffd5;\n    uartHandle->Instance->CR1 = uartHandle->Instance->CR1 | 0x2000;\n    uartHandle->ErrorCode = 0;\n    uartHandle->gState = HAL_UART_STATE_READY;\n    uartHandle->RxState = HAL_UART_STATE_READY;\n    return HAL_SUCCESS;\n  }\n  return HAL_FAILURE;\n}\n\n",
            "renaming": {
                "FUN_0800674e": "initialize_uart_0800674e",
                "huart": "uartHandle",
                "Lock": "lockState",
                "HAL_UART_MspInit": "initializeUART_MSP",
                "HAL_OK": "HAL_SUCCESS",
                "HAL_ERROR": "HAL_FAILURE"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "HAL_UART_MspInit",
                "UART_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080067ac": {
            "entrypoint": "0x080067ac",
            "current_name": "transmit_data_080067ac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\ntransmitData_080067ac(UART_HandleTypeDef *uartHandle,uint8_t *data,uint16_t size,uint32_t timeout)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t tickStart;\n  uint16_t *tmp;\n  \n  if (uartHandle->gState == HAL_UART_STATE_READY) {\n    if (data == (uint8_t *)0x0) {\n      status = HAL_ERROR;\n    }\n    else if (size == 0) {\n      status = HAL_ERROR;\n    }\n    else if (uartHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      uartHandle->Lock = HAL_LOCKED;\n      uartHandle->ErrorCode = 0;\n      uartHandle->gState = HAL_UART_STATE_BUSY_TX;\n      tickStart = HAL_GetTick();\n      uartHandle->TxXfersize = size;\n      uartHandle->TxXferCount = size;\n      while (uartHandle->TxXferCount != 0) {\n        uartHandle->TxXferCount = uartHandle->TxXferCount - 1;\n        if ((uartHandle->Init).WordLength == 0x1000) {\n          status = UART_WaitOnFlagUntiltimeout(uartHandle,0x80,RESET,tickStart,timeout);\n          if (status != HAL_OK) {\n            return HAL_TIMEOUT;\n          }\n          uartHandle->Instance->DR = *(ushort *)data & 0x1ff;\n          if ((uartHandle->Init).Parity == 0) {\n            data = (uint8_t *)((int)data + 2);\n          }\n          else {\n            data = (uint8_t *)((int)data + 1);\n          }\n        }\n        else {\n          status = UART_WaitOnFlagUntiltimeout(uartHandle,0x80,RESET,tickStart,timeout);\n          if (status != HAL_OK) {\n            return HAL_TIMEOUT;\n          }\n          uartHandle->Instance->DR = (uint)*data;\n          data = (uint8_t *)((int)data + 1);\n        }\n      }\n      status = UART_WaitOnFlagUntiltimeout(uartHandle,0x40,RESET,tickStart,timeout);\n      if (status == HAL_OK) {\n        uartHandle->gState = HAL_UART_STATE_READY;\n        uartHandle->Lock = HAL_UNLOCKED;\n        status = HAL_OK;\n      }\n      else {\n        status = HAL_TIMEOUT;\n      }\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080067ac": "transmit_data_080067ac",
                "huart": "uartHandle",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "HVar1": "status",
                "Tickstart": "tickStart"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "UART_WaitOnFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800688e": {
            "entrypoint": "0x0800688e",
            "current_name": "initialize_uart_transfer_0800688e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeUartTransfer_0800688e(UART_HandleTypeDef *uartHandle,uint8_t *data,uint16_t size)\n\n{\n  if (uartHandle->gState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (data == (uint8_t *)0x0) {\n    return HAL_ERROR;\n  }\n  if (size == 0) {\n    return HAL_ERROR;\n  }\n  if (uartHandle->Lock != HAL_LOCKED) {\n    uartHandle->pTxBuffPtr = data;\n    uartHandle->TxXfersize = size;\n    uartHandle->TxXferCount = size;\n    uartHandle->ErrorCode = 0;\n    uartHandle->gState = HAL_UART_STATE_BUSY_TX;\n    uartHandle->Lock = HAL_UNLOCKED;\n    uartHandle->Instance->CR1 = uartHandle->Instance->CR1 | 0x80;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}\n\n",
            "renaming": {
                "FUN_0800688e": "initialize_uart_transfer_0800688e",
                "huart": "uartHandle",
                "pData": "data",
                "Size": "size"
            },
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068d6": {
            "entrypoint": "0x080068d6",
            "current_name": "configure_uart_receive_080068d6",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureUARTReceive_080068d6(UART_HandleTypeDef *uartHandle,uint8_t *dataBuffer,uint16_t dataSize)\n\n{\n  if (uartHandle->RxState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (dataBuffer == (uint8_t *)0x0) {\n    return HAL_ERROR;\n  }\n  if (dataSize == 0) {\n    return HAL_ERROR;\n  }\n  if (uartHandle->Lock != HAL_LOCKED) {\n    uartHandle->pRxBuffPtr = dataBuffer;\n    uartHandle->RxXferdataSize = dataSize;\n    uartHandle->RxXferCount = dataSize;\n    uartHandle->ErrorCode = 0;\n    uartHandle->RxState = HAL_UART_STATE_BUSY_RX;\n    uartHandle->Lock = HAL_UNLOCKED;\n    uartHandle->Instance->CR1 = uartHandle->Instance->CR1 | 0x100;\n    uartHandle->Instance->CR3 = uartHandle->Instance->CR3 | 1;\n    uartHandle->Instance->CR1 = uartHandle->Instance->CR1 | 0x20;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}\n\n",
            "renaming": {
                "FUN_080068d6": "configure_uart_receive_080068d6",
                "huart": "uartHandle",
                "pData": "dataBuffer",
                "Size": "dataSize"
            },
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006932": {
            "entrypoint": "0x08006932",
            "current_name": "configure_uart_08006932",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configure_uart_08006932(UART_HandleTypeDef *uart_handle)\n\n{\n  uart_handle->uart_instance->control_register_1 = uart_handle->uart_instance->control_register_1 & 0xffffffbf;\n  uart_handle->uart_state = HAL_UART_STATE_READY;\n  HAL_UART_TxCpltCallback(uart_handle);\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08006932": "configure_uart_08006932",
                "huart": "uart_handle",
                "Instance": "uart_instance",
                "CR1": "control_register_1",
                "gState": "uart_state"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800694c": {
            "entrypoint": "0x0800694c",
            "current_name": "receive_data_0800694c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict receiveData_0800694c(UART_HandleTypeDef *uartHandle)\n\n{\n  uint16_t *dataPointer;\n  byte *bytePointer;\n  uint16_t remainingCount;\n  uint8_t *uint8Pointer;\n  \n  if (uartHandle->RxState != HAL_UART_STATE_BUSY_RX) {\n    return HAL_BUSY;\n  }\n  if ((uartHandle->Init).WordLength == 0x1000) {\n    if ((uartHandle->Init).Parity == 0) {\n      *(ushort *)uartHandle->pRxBuffPtr = (ushort)((uartHandle->Instance->DR << 0x17) >> 0x17);\n      uartHandle->pRxBuffPtr = uartHandle->pRxBuffPtr + 2;\n    }\n    else {\n      *(ushort *)uartHandle->pRxBuffPtr = (ushort)uartHandle->Instance->DR & 0xff;\n      uartHandle->pRxBuffPtr = uartHandle->pRxBuffPtr + 1;\n    }\n  }\n  else if ((uartHandle->Init).Parity == 0) {\n    uint8Pointer = uartHandle->pRxBuffPtr;\n    uartHandle->pRxBuffPtr = uint8Pointer + 1;\n    *uint8Pointer = (uint8_t)uartHandle->Instance->DR;\n  }\n  else {\n    bytePointer = uartHandle->pRxBuffPtr;\n    uartHandle->pRxBuffPtr = bytePointer + 1;\n    *bytePointer = (byte)uartHandle->Instance->DR & 0x7f;\n  }\n  remainingCount = uartHandle->RxXferCount - 1;\n  uartHandle->RxXferCount = remainingCount;\n  if (remainingCount != 0) {\n    return HAL_OK;\n  }\n  uartHandle->Instance->CR1 = uartHandle->Instance->CR1 & 0xffffffdf;\n  uartHandle->Instance->CR1 = uartHandle->Instance->CR1 & 0xfffffeff;\n  uartHandle->Instance->CR3 = uartHandle->Instance->CR3 & 0xfffffffe;\n  uartHandle->RxState = HAL_UART_STATE_READY;\n  HAL_UART_RxCpltCallback(uartHandle);\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_0800694c": "receive_data_0800694c",
                "huart": "uartHandle",
                "tmp": "dataPointer",
                "pbVar1": "bytePointer",
                "uVar2": "remainingCount",
                "puVar3": "uint8Pointer"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069ec": {
            "entrypoint": "0x080069ec",
            "current_name": "handle_uart_interrupt_080069ec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_uart_interrupt_080069ec(UART_HandleTypeDef *uart_handle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint cr1;\n  uint32_t cr1_interrupts;\n  USART_TypeDef *uart_instance;\n  uint32_t cr3_interrupts;\n  uint cr3;\n  uint status_reg;\n  uint32_t interrupt_flags;\n  \n  uart_instance = uart_handle->Instance;\n  status_reg = uart_instance->SR;\n  cr1 = uart_instance->CR1;\n  if ((((status_reg & 0xf) == 0) && ((status_reg & 0x20) != 0)) && ((cr1 & 0x20) != 0)) {\n    UART_Receive_IT(uart_handle);\n    return;\n  }\n  if (((status_reg & 0xf) == 0) || ((cr3 = uart_instance->CR3 & 1, cr3 == 0 && ((cr1 & 0x120) == 0)))) {\n    if (((status_reg & 0x80) != 0) && ((cr1 & 0x80) != 0)) {\n      UART_Transmit_IT(uart_handle);\n      return;\n    }\n    if (((status_reg & 0x40) != 0) && ((cr1 & 0x40) != 0)) {\n      UART_EndTransmit_IT(uart_handle);\n    }\n  }\n  else {\n    if (((status_reg & 1) != 0) && ((cr1 & 0x100) != 0)) {\n      uart_handle->ErrorCode = uart_handle->ErrorCode | 1;\n    }\n    if (((status_reg & 4) != 0) && (cr3 != 0)) {\n      uart_handle->ErrorCode = uart_handle->ErrorCode | 2;\n    }\n    if (((status_reg & 2) != 0) && (cr3 != 0)) {\n      uart_handle->ErrorCode = uart_handle->ErrorCode | 4;\n    }\n    if (((status_reg & 8) != 0) && (cr3 != 0)) {\n      uart_handle->ErrorCode = uart_handle->ErrorCode | 8;\n    }\n    if (uart_handle->ErrorCode != 0) {\n      if (((status_reg & 0x20) != 0) && ((cr1 & 0x20) != 0)) {\n        UART_Receive_IT(uart_handle);\n      }\n      if (((uart_handle->ErrorCode & 8) == 0) && ((uart_handle->Instance->CR3 & 0x40) == 0)) {\n        HAL_UART_ErrorCallback(uart_handle);\n        uart_handle->ErrorCode = 0;\n        return;\n      }\n      UART_EndRxTransfer(uart_handle);\n      uart_instance = uart_handle->Instance;\n      if ((uart_instance->CR3 & 0x40) == 0) {\n        HAL_UART_ErrorCallback(uart_handle);\n        return;\n      }\n      uart_instance->CR3 = uart_instance->CR3 & 0xffffffbf;\n      if (uart_handle->hdmarx == (DMA_HandleTypeDef_conflict *)0x0) {\n        HAL_UART_ErrorCallback(uart_handle);\n        return;\n      }\n      uart_handle->hdmarx->XferAbortCallback = UART_DMAAbortOnError + 1;\n      status = HAL_DMA_Abort_IT(uart_handle->hdmarx);\n      if (status != HAL_OK) {\n        (*uart_handle->hdmarx->XferAbortCallback)(uart_handle->hdmarx);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069ec": "handle_uart_interrupt_080069ec",
                "huart": "uart_handle",
                "HVar1": "status",
                "uVar2": "cr1",
                "uVar4": "cr3",
                "uVar5": "status_reg",
                "cr1its": "cr1_interrupts",
                "pUVar3": "uart_instance",
                "cr3its": "cr3_interrupts",
                "isrflags": "interrupt_flags"
            },
            "calling": [
                "USART1_IRQHandler",
                "USART3_IRQHandler",
                "USART2_IRQHandler"
            ],
            "called": [
                "UART_EndTransmit_IT",
                "UART_Receive_IT",
                "UART_Transmit_IT",
                "HAL_DMA_Abort_IT",
                "HAL_UART_ErrorCallback",
                "UART_EndRxTransfer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b0c": {
            "entrypoint": "0x08006b0c",
            "current_name": "reset_uart_rx_tx_error_08006b0c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid resetUARTRxTxError_08006b0c(DMA_HandleTypeDef_conflict *dmaHandle)\n\n{\n  UART_HandleTypeDef *uartHandle;\n  UART_HandleTypeDef *uartPtr;\n  \n  uartHandle = (UART_HandleTypeDef *)dmaHandle->Parent;\n  uartHandle->RxXferCount = 0;\n  uartHandle->TxXferCount = 0;\n  HAL_UART_ErrorCallback(uartHandle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b0c": "reset_uart_rx_tx_error_08006b0c",
                "hdma": "dmaHandle",
                "huart_00": "uartHandle",
                "huart": "uartPtr"
            },
            "calling": [],
            "called": [
                "HAL_UART_ErrorCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b1c": {
            "entrypoint": "0x08006b1c",
            "current_name": "get_combined_state_08006b1c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_UART_StateTypeDef getCombinedState_08006b1c(UART_HandleTypeDef *uartHandle)\n\n{\n  return uartHandle->receiveState | uartHandle->globalState;\n}\n\n",
            "renaming": {
                "FUN_08006b1c": "get_combined_state_08006b1c",
                "huart": "uartHandle",
                "RxState": "receiveState",
                "gState": "globalState"
            },
            "calling": [
                "serial_rx_active",
                "serial_tx_active"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b28": {
            "entrypoint": "0x08006b28",
            "current_name": "check_pin_state_08006b28",
            "code": "\n/* WARNING: Unknown calling convention */\n\n_Bool checkPinState_08006b28(pin pin,uint32_t *pinStateMap)\n\n{\n  uint32_t pinStateIndex;\n  \n  pinStateIndex = pinStateMap[(uint)((int)pin << 0x18) >> 0x1c];\n  return (_Bool)((byte)(pinStateIndex >> ((int)pin & 0xfU)) & 1);\n}\n\n",
            "renaming": {
                "FUN_08006b28": "check_pin_state_08006b28",
                "PinName_conflict": "pin",
                "map": "pinStateMap",
                "index": "pinStateIndex"
            },
            "calling": [
                "digitalWrite",
                "digitalRead",
                "analogWrite",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b3e": {
            "entrypoint": "0x08006b3e",
            "current_name": "set_pin_to_map_08006b3e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setPinToMap_08006b3e(PinName_conflict pinName,uint32_t *pinMap)\n\n{\n  uint shiftedPin;\n  uint32_t unusedIndex;\n  \n  shiftedPin = (uint)((int)pinName << 0x18) >> 0x1c;\n  pinMap[shiftedPin] = pinMap[shiftedPin] | 1 << ((int)pinName & 0xfU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b3e": "set_pin_to_map_08006b3e",
                "pin": "pinName",
                "map": "pinMap",
                "uVar1": "shiftedPin",
                "index": "unusedIndex"
            },
            "calling": [
                "analogWrite",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b5c": {
            "entrypoint": "0x08006b5c",
            "current_name": "update_pin_map_08006b5c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updatePinMap_08006b5c(PinName_conflict pinName,uint32_t *pinMap)\n\n{\n  uint shiftedIndex;\n  uint32_t unshiftedIndex;\n  \n  shiftedIndex = (uint)((int)pinName << 0x18) >> 0x1c;\n  pinMap[shiftedIndex] = pinMap[shiftedIndex] & ~(1 << ((int)pinName & 0xfU));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b5c": "update_pin_map_08006b5c",
                "pin": "pinName",
                "map": "pinMap",
                "uVar1": "shiftedIndex",
                "index": "unshiftedIndex"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b7c": {
            "entrypoint": "0x08006b7c",
            "current_name": "get_gpio_address_08006b7c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nGPIOType * getGPIOAddress_08006b7c(uint32_t portIndex)\n\n{\n  switch(portIndex) {\n  case 0:\n    return (GPIOType *)0x40010800;\n  case 1:\n    return (GPIOType *)0x40010c00;\n  case 2:\n    return (GPIOType *)0x40011000;\n  case 3:\n    return (GPIOType *)0x40011400;\n  case 4:\n    return (GPIOType *)0x40011800;\n  default:\n    return (GPIOType *)0x0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08006b7c": "get_gpio_address_08006b7c",
                "port_idx": "portIndex",
                "GPIO_TypeDef": "GPIOType"
            },
            "calling": [
                "digitalWrite",
                "digitalRead"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006bb8": {
            "entrypoint": "0x08006bb8",
            "current_name": "get_gpio_08006bb8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nGPIO_TypeDef * getGPIO_08006bb8(uint32_t portIndex)\n\n{\n  GPIO_TypeDef *gpio;\n  uint32_t temporaryRegister;\n  uint32_t temporaryRegister1;\n  uint32_t temporaryRegister2;\n  uint32_t temporaryRegister3;\n  uint32_t temporaryRegister4;\n  \n  switch(portIndex) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    gpio = (GPIO_TypeDef *)0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    gpio = (GPIO_TypeDef *)0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    gpio = (GPIO_TypeDef *)0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    gpio = (GPIO_TypeDef *)0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    gpio = (GPIO_TypeDef *)0x40011800;\n    break;\n  default:\n    gpio = (GPIO_TypeDef *)0x0;\n  }\n  return gpio;\n}\n\n",
            "renaming": {
                "FUN_08006bb8": "get_gpio_08006bb8",
                "port_idx": "portIndex",
                "pGVar1": "gpio",
                "tmpreg": "temporaryRegister",
                "tmpreg_1": "temporaryRegister1",
                "tmpreg_2": "temporaryRegister2",
                "tmpreg_3": "temporaryRegister3",
                "tmpreg_4": "temporaryRegister4"
            },
            "calling": [
                "uart_init",
                "HAL_TIM_PWM_MspInit",
                "HAL_ADC_MspInit",
                "digital_io_init",
                "i2c_custom_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c60": {
            "entrypoint": "0x08006c60",
            "current_name": "get_pin_function_08006c60",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getPinFunction_08006c60(PinName_conflict pinNumber)\n\n{\n  uint32_t pinFunctionValue;\n  uint32_t shiftedValue;\n  \n  pinFunctionValue = pinNumbermap_shiftedValue(pinNumber,(PinMap_conflict *)&PinMap_ADC);\n  shiftedValue = pinFunctionValue << 0xc;\n  shiftedValue = shiftedValue >> 0x1b;\n  if (0x10 < shiftedValue - 1) {\n    shiftedValue = 0;\n  }\n  return shiftedValue;\n}\n\n",
            "renaming": {
                "FUN_08006c60": "get_pin_function_08006c60",
                "pin": "pinNumber",
                "uVar1": "pinFunctionValue",
                "function": "shiftedValue"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c7c": {
            "entrypoint": "0x08006c7c",
            "current_name": "get_pin_function_08006c7c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getPinFunction_08006c7c(pin pin)\n\n{\n  uint32_t pinFunction;\n  uint32_t shiftedFunction;\n  \n  pinFunction = pinmap_shiftedFunction(pin,(PinMap_conflict *)&PinMap_PWM);\n  shiftedFunction = pinFunction << 0xc;\n  shiftedFunction = shiftedFunction >> 0x1b;\n  if (shiftedFunction == 3) {\n    return 8;\n  }\n  if (shiftedFunction != 4) {\n    if (shiftedFunction != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08006c7c": "get_pin_function_08006c7c",
                "PinName_conflict": "pin",
                "uVar1": "pinFunction",
                "function": "shiftedFunction"
            },
            "calling": [
                "pwm_stop",
                "pwm_start"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ca8": {
            "entrypoint": "0x08006ca8",
            "current_name": "configure_adc_gpio_08006ca8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid configure_ADC_GPIO_08006ca8(ADC_HandleTypeDef *ADC_handle)\n\n{\n  GPIO_TypeDef *selected_GPIO_Port;\n  GPIO_TypeDef *selected_port;\n  uint32_t temporary_register;\n  uint32_t temporary_register_1;\n  GPIO_InitTypeDef GPIO_init_structure;\n  \n  if (ADC_handle->Instance == (ADC_TypeDef *)0x40012400) {\n    _DAT_40021018 = _DAT_40021018 | 0x200;\n  }\n  else if (ADC_handle->Instance == (ADC_TypeDef *)0x40012800) {\n    _DAT_40021018 = _DAT_40021018 | 0x400;\n  }\n  selected_GPIO_Port = set_GPIO_Port_Clock((uint)((int)g_current_pin << 0x18) >> 0x1c);\n  GPIO_init_structure.Pin = 1 << (g_current_pin & 0xfU) & 0xffff;\n  GPIO_init_structure.Mode = 3;\n  GPIO_init_structure.Pull = 0;\n  HAL_GPIO_Init(selected_GPIO_Port,&GPIO_init_structure);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ca8": "configure_adc_gpio_08006ca8",
                "hadc": "ADC_handle",
                "GPIOx": "selected_GPIO_Port",
                "port": "selected_port",
                "tmpreg": "temporary_register",
                "tmpreg_1": "temporary_register_1",
                "GPIO_InitStruct": "GPIO_init_structure"
            },
            "calling": [
                "HAL_ADC_Init"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d24": {
            "entrypoint": "0x08006d24",
            "current_name": "disable_adc_interrupts_08006d24",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid disableADCInterrupts_08006d24(ADC_HandleTypeDef *adcHandle)\n\n{\n  if (adcHandle->adcInstance != (ADC_TypeDef *)0x40012400) {\n    if (adcHandle->adcInstance == (ADC_TypeDef *)0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d24": "disable_adc_interrupts_08006d24",
                "hadc": "adcHandle",
                "Instance": "adcInstance"
            },
            "calling": [
                "HAL_ADC_DeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d80": {
            "entrypoint": "0x08006d80",
            "current_name": "read_adc_value_08006d80",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint16_t readADCValue_08006d80(PinName_conflict pinName)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t value;\n  uint16_t convertedValue;\n  ADC_ChannelConfTypeDef adcChannelConfig;\n  ADC_HandleTypeDef adcHandle;\n  \n  memset(&adcHandle,0,0x30);\n  adcChannelConfig.Channel = 0;\n  adcChannelConfig.Rank = 0;\n  adcChannelConfig.SamplingTime = 0;\n  convertedValue = 0;\n  adcHandle.Instance = (ADC_TypeDef *)pinNamemap_peripheral(pinName,(PinMap_conflict *)&PinMap_ADC);\n  if (adcHandle.Instance == (ADC_TypeDef *)0x0) {\n    convertedValue = 0;\n  }\n  else {\n    adcHandle.Init.DataAlign = 0;\n    adcHandle.Init.ScanConvMode = 0;\n    adcHandle.Init.ContinuousConvMode = 0;\n    adcHandle.Init.DiscontinuousConvMode = 0;\n    adcHandle.Init.ExternalTrigConv = 0xe0000;\n    adcHandle.State = 0;\n    adcHandle.Init.NbrOfConversion = 1;\n    adcHandle.Init.NbrOfDiscConversion = 0;\n    g_current_pinName = pinName;\n    status = HAL_ADC_Init(&adcHandle);\n    if (status == HAL_OK) {\n      adcChannelConfig.Channel = get_adc_channel(pinName);\n      if (adcChannelConfig.Channel < 0x12) {\n        adcChannelConfig.Rank = 1;\n        adcChannelConfig.SamplingTime = 2;\n        status = HAL_ADC_ConfigChannel(&adcHandle,&adcChannelConfig);\n        if (status == HAL_OK) {\n          status = HAL_ADCEx_Calibration_Start(&adcHandle);\n          if (status == HAL_OK) {\n            status = HAL_ADC_Start(&adcHandle);\n            if (status == HAL_OK) {\n              status = HAL_ADC_PollForConversion(&adcHandle,10);\n              if (status == HAL_OK) {\n                value = HAL_ADC_GetState(&adcHandle);\n                if ((value & 0x200) != 0) {\n                  value = HAL_ADC_GetValue(&adcHandle);\n                  convertedValue = (uint16_t)value;\n                }\n                status = HAL_ADC_Stop(&adcHandle);\n                if (status == HAL_OK) {\n                  status = HAL_ADC_DeInit(&adcHandle);\n                  if (status != HAL_OK) {\n                    convertedValue = 0;\n                  }\n                }\n                else {\n                  convertedValue = 0;\n                }\n              }\n              else {\n                convertedValue = 0;\n              }\n            }\n            else {\n              convertedValue = 0;\n            }\n          }\n          else {\n            convertedValue = 0;\n          }\n        }\n        else {\n          convertedValue = 0;\n        }\n      }\n      else {\n        convertedValue = 0;\n      }\n    }\n    else {\n      convertedValue = 0;\n    }\n  }\n  return convertedValue;\n}\n\n",
            "renaming": {
                "FUN_08006d80": "read_adc_value_08006d80",
                "pin": "pinName",
                "HVar1": "status",
                "uVar2": "value",
                "uhADCxConvertedValue": "convertedValue",
                "AdcChannelConf": "adcChannelConfig",
                "AdcHandle": "adcHandle"
            },
            "calling": [
                "analogRead"
            ],
            "called": [
                "memset",
                "HAL_ADC_ConfigChannel",
                "HAL_ADC_PollForConversion",
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_GetValue",
                "get_adc_channel",
                "pinmap_peripheral",
                "HAL_ADC_GetState",
                "HAL_ADC_Start",
                "HAL_ADC_Stop",
                "HAL_ADC_DeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e68": {
            "entrypoint": "0x08006e68",
            "current_name": "initialize_pwm_08006e68",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initialize_PWM_08006e68(TIM_HandleTypeDef_conflict *timer_handle)\n\n{\n  uint32_t pin_function;\n  uint32_t unknown_function;\n  GPIO_TypeDef *gpio_port;\n  GPIO_TypeDef *gpio_port;\n  uint32_t temporary_register_13;\n  uint32_t temporary_register_1;\n  uint32_t temporary_register_2;\n  uint32_t temporary_register_3;\n  uint32_t temporary_register_4;\n  uint32_t temporary_register_5;\n  uint32_t temporary_register_6;\n  uint32_t temporary_register_7;\n  uint32_t temporary_register_8;\n  uint32_t temporary_register_9;\n  uint32_t temporary_register_10;\n  uint32_t temporary_register_11;\n  uint32_t temporary_register_12;\n  uint32_t temporary_register;\n  GPIO_InitTypeDef gpio_init_struct;\n  \n  pin_function = pinmap_unknown_function(current_pin,(PinMap_conflict *)&PinMap_PWM);\n  timer_enable_clock(timer_handle);\n  gpio_port = set_GPIO_Port_Clock((uint)((int)current_pin << 0x18) >> 0x1c);\n  gpio_init_struct.Mode = 2;\n  gpio_init_struct.Pull = 0;\n  gpio_init_struct.Speed = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((pin_function << 0x11) >> 0x19) {\n  case 1:\n    temporary_register_10 = temporary_register_10 | 0x7000001;\n    break;\n  case 2:\n    temporary_register_10 = temporary_register_10 & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    temporary_register_10 = temporary_register_10 | 0x7000002;\n    break;\n  case 4:\n    temporary_register_10 = temporary_register_10 & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    temporary_register_10 = temporary_register_10 | 0x7000004;\n    break;\n  case 6:\n    temporary_register_10 = temporary_register_10 & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    temporary_register_10 = temporary_register_10 | 0x7000008;\n    break;\n  case 8:\n    temporary_register_10 = temporary_register_10 & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    temporary_register_10 = temporary_register_10 | 0x7000030;\n    break;\n  case 10:\n    temporary_register_1 = temporary_register_10 & 0xffffffcf;\n    temporary_register_10 = temporary_register_1 | 0x7000010;\n    break;\n  case 0xb:\n    temporary_register_2 = temporary_register_10 & 0xffffffcf;\n    temporary_register_10 = temporary_register_2 | 0x7000000;\n    break;\n  case 0xc:\n    temporary_register_10 = temporary_register_10 | 0x70000c0;\n    break;\n  case 0xd:\n    temporary_register_3 = temporary_register_10 & 0xffffff3f;\n    temporary_register_10 = temporary_register_3 | 0x7000040;\n    break;\n  case 0xe:\n    temporary_register_4 = temporary_register_10 & 0xffffff3f;\n    temporary_register_10 = temporary_register_4 | 0x7000000;\n    break;\n  case 0xf:\n    temporary_register_10 = temporary_register_10 | 0x7000300;\n    break;\n  case 0x10:\n    temporary_register_5 = temporary_register_10 & 0xfffffcff;\n    temporary_register_10 = temporary_register_5 | 0x7000200;\n    break;\n  case 0x11:\n    temporary_register_6 = temporary_register_10 & 0xfffffcff;\n    temporary_register_10 = temporary_register_6 | 0x7000100;\n    break;\n  case 0x12:\n    temporary_register_7 = temporary_register_10 & 0xfffffcff;\n    temporary_register_10 = temporary_register_7 | 0x7000000;\n    break;\n  case 0x13:\n    temporary_register_10 = temporary_register_10 | 0x7000c00;\n    break;\n  case 0x14:\n    temporary_register_8 = temporary_register_10 & 0xfffff3ff;\n    temporary_register_10 = temporary_register_8 | 0x7000800;\n    break;\n  case 0x15:\n    temporary_register_9 = temporary_register_10 & 0xfffff3ff;\n    temporary_register_10 = temporary_register_9 | 0x7000000;\n    break;\n  case 0x16:\n    temporary_register_10 = temporary_register_10 | 0x7001000;\n    break;\n  case 0x17:\n    temporary_register_10 = temporary_register_10 & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    temporary_register_10 = temporary_register_10 | 0x7008000;\n    break;\n  case 0x1c:\n    temporary_register_10 = temporary_register_10 & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    temporary_register_10 = temporary_register_10 & 0xf8ffffff;\n    break;\n  case 0x22:\n    temporary_register_11 = temporary_register_10 & 0xf8ffffff;\n    temporary_register_10 = temporary_register_11 | 0x1000000;\n    break;\n  case 0x23:\n    temporary_register_12 = temporary_register_10 & 0xf8ffffff;\n    temporary_register_10 = temporary_register_12 | 0x2000000;\n    break;\n  case 0x24:\n    temporary_register_10 = temporary_register_10 & 0xf8ffffff | 0x4000000;\n  }\n  gpio_init_struct.Pin = 1 << (current_pin & 0xfU) & 0xffff;\n  HAL_GPIO_Init(gpio_port,&gpio_init_struct);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e68": "initialize_pwm_08006e68",
                "htim": "timer_handle",
                "uVar1": "pin_function",
                "function": "unknown_function",
                "GPIOx": "gpio_port",
                "port": "gpio_port",
                "tmpreg_13": "temporary_register_13",
                "tmpreg_1": "temporary_register_1",
                "tmpreg_2": "temporary_register_2",
                "tmpreg_3": "temporary_register_3",
                "tmpreg_4": "temporary_register_4",
                "tmpreg_5": "temporary_register_5",
                "tmpreg_6": "temporary_register_6",
                "tmpreg_7": "temporary_register_7",
                "tmpreg_8": "temporary_register_8",
                "tmpreg_9": "temporary_register_9",
                "tmpreg_10": "temporary_register_10",
                "tmpreg_11": "temporary_register_11",
                "tmpreg_12": "temporary_register_12",
                "tmpreg": "temporary_register",
                "GPIO_InitStruct": "gpio_init_struct",
                "g_current_pin": "current_pin"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "timer_enable_clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007110": {
            "entrypoint": "0x08007110",
            "current_name": "disable_timer_clock_08007110",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disableTimerClock_08007110(TIM_HandleTypeDef_conflict *timerHandle)\n\n{\n  timer_disable_clock(timerHandle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007110": "disable_timer_clock_08007110",
                "htim": "timerHandle"
            },
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007118": {
            "entrypoint": "0x08007118",
            "current_name": "configure_pwm_08007118",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configurePWM_08007118(pin pin,uint32_t clockFrequency,uint32_t period,uint32_t pulseValue,\n                 uint8_t initialize)\n\n{\n  HAL_StatusTypeDef_conflict HVar1;\n  uint32_t uVar2;\n  uint32_t timChannel;\n  uint32_t uVar3;\n  TIM_OC_InitTypeDef timConfig;\n  TIM_HandleTypeDef_conflict timHandle;\n  \n  memset(&timHandle,0,0x40);\n  timConfig.OCMode = 0;\n  timConfig.Pulse = 0;\n  timConfig.OCPolarity = 0;\n  timConfig.OCNPolarity = 0;\n  timConfig.OCFastMode = 0;\n  timConfig.OCIdleState = 0;\n  timConfig.OCNIdleState = 0;\n  timHandle.Instance = (TIM_TypeDef_conflict *)pinmap_peripheral(pin,(PinMap_conflict *)&PinMap_PWM)\n  ;\n  if (timHandle.Instance != (TIM_TypeDef_conflict *)0x0) {\n    uVar2 = getTimerClkFreq(timHandle.Instance);\n    timHandle.Init.Prescaler = uVar2 / clockFrequency - 1;\n    timHandle.Init.Period = period - 1;\n    timHandle.Init.ClockDivision = 0;\n    timHandle.Init.CounterMode = 0;\n    timHandle.Init.RepetitionCounter = 0;\n    timHandle.State = HAL_TIM_STATE_RESET;\n    if (((initialize != '\\x01') ||\n        (g_current_pin = pin, HVar1 = HAL_TIM_PWM_Init(&timHandle), HVar1 == HAL_OK)) &&\n       (((uVar2 = get_pwm_channel(pin), uVar2 == 0 ||\n         (((uVar2 == 4 || (uVar2 == 8)) || (uVar2 == 0xc)))) || (uVar2 == 0x18)))) {\n      timConfig.OCMode = 0x60;\n      timConfig.OCPolarity = 0;\n      timConfig.OCFastMode = 0;\n      timConfig.OCNPolarity = 0;\n      timConfig.OCNIdleState = 0;\n      timConfig.OCIdleState = 0;\n      timConfig.Pulse = pulseValue;\n      HVar1 = HAL_TIM_PWM_ConfigChannel(&timHandle,&timConfig,uVar2);\n      if (HVar1 == HAL_OK) {\n        uVar3 = pinmap_function(pin,(PinMap_conflict *)&PinMap_PWM);\n        if ((uVar3 & 0x100000) == 0) {\n          HAL_TIM_PWM_Start(&timHandle,uVar2);\n        }\n        else {\n          HAL_TIMEx_PWMN_Start(&timHandle,uVar2);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007118": "configure_pwm_08007118",
                "PinName_conflict": "pin",
                "clock_freq": "clockFrequency",
                "value": "pulseValue",
                "do_init": "initialize"
            },
            "calling": [
                "analogWrite"
            ],
            "called": [
                "memset",
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIMEx_PWMN_Start",
                "pinmap_function",
                "get_pwm_channel",
                "HAL_TIM_PWM_Start",
                "pinmap_peripheral",
                "getTimerClkFreq",
                "HAL_TIM_PWM_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071e4": {
            "entrypoint": "0x080071e4",
            "current_name": "stop_pwm_channel_080071e4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid stopPwmChannel_080071e4(PinName_conflict pwmPin)\n\n{\n  uint32_t pwmChannel;\n  uint32_t timerChannel;\n  uint32_t functionCode;\n  TIM_HandleTypeDef_conflict timerHandle;\n  \n  timerHandle.Instance = (TIM_TypeDef_conflict *)pwmPinmap_peripheral(pwmPin,(PinMap_conflict *)&PinMap_PWM)\n  ;\n  if ((timerHandle.Instance != (TIM_TypeDef_conflict *)0x0) &&\n     ((((pwmChannel = get_pwm_channel(pwmPin), pwmChannel == 0 || (pwmChannel == 4)) || (pwmChannel == 8)) ||\n      ((pwmChannel == 0xc || (pwmChannel == 0x18)))))) {\n    functionCode = pwmPinmap_function(pwmPin,(PinMap_conflict *)&PinMap_PWM);\n    if ((functionCode & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(&timerHandle,pwmChannel);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(&timerHandle,pwmChannel);\n    }\n    HAL_TIM_PWM_DeInit(&timerHandle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071e4": "stop_pwm_channel_080071e4",
                "pin": "pwmPin",
                "Channel": "pwmChannel",
                "timChannel": "timerChannel",
                "uVar1": "functionCode",
                "timHandle": "timerHandle"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "HAL_TIM_PWM_DeInit",
                "HAL_TIM_PWM_Stop",
                "get_pwm_channel",
                "pinmap_function",
                "pinmap_peripheral",
                "HAL_TIMEx_PWMN_Stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800723c": {
            "entrypoint": "0x0800723c",
            "current_name": "get_system_tick_0800723c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t get_system_tick_0800723c(void)\n\n{\n  uint32_t system_tick;\n  \n  system_tick = HAL_GetTick();\n  return system_tick;\n}\n\n",
            "renaming": {
                "FUN_0800723c": "get_system_tick_0800723c",
                "uVar1": "system_tick"
            },
            "calling": [
                "millis"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007244": {
            "entrypoint": "0x08007244",
            "current_name": "FUNC_08007244",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007246": {
            "entrypoint": "0x08007246",
            "current_name": "handle_system_tick_08007246",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSystemTick_08007246(void)\n\n{\n  incrementSystemTick();\n  handleSysTickInterrupt();\n  handleNoOsSysTick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007246": "handle_system_tick_08007246",
                "HAL_IncTick": "incrementSystemTick",
                "HAL_SYSTICK_IRQHandler": "handleSysTickInterrupt",
                "noOsSystickHandler": "handleNoOsSysTick"
            },
            "calling": [],
            "called": [
                "HAL_SYSTICK_IRQHandler",
                "HAL_IncTick",
                "noOsSystickHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007258": {
            "entrypoint": "0x08007258",
            "current_name": "initialize_gpio_08007258",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeGPIO_08007258(PinName_conflict pinName,uint32_t gpioMode,uint32_t gpioPull)\n\n{\n  uint pinIndex;\n  GPIO_TypeDef *gpioPort;\n  GPIO_TypeDef *gpioPort;\n  uint32_t tmpRegister2;\n  uint32_t tmpRegister1;\n  uint32_t tmpRegister;\n  GPIO_InitTypeDef gpioInitStructure;\n  \n  pinIndex = (uint)pinName;\n  gpioPort = set_GPIO_Port_Clock((pinIndex << 0x18) >> 0x1c);\n  gpioInitStructure.Pin = 1 << (pinIndex & 0xf) & 0xffff;\n  gpioInitStructure.Speed = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((pinIndex - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((pinIndex == 0xf) || (pinIndex == 0x13)) || (pinIndex == 0x14)) {\n    tmpRegister1 = _DAT_40010004 & 0xf8ffffff;\n    _DAT_40010004 = tmpRegister1 | 0x2000000;\n  }\n  gpioInitStructure.Mode = gpioMode;\n  gpioInitStructure.Pull = gpioPull;\n  HAL_GPIO_Init(gpioPort,&gpioInitStructure);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007258": "initialize_gpio_08007258",
                "pin": "pinName",
                "mode": "gpioMode",
                "pull": "gpioPull",
                "uVar1": "pinIndex",
                "GPIOx": "gpioPort",
                "port": "gpioPort",
                "tmpreg_2": "tmpRegister2",
                "tmpreg_1": "tmpRegister1",
                "tmpreg": "tmpRegister",
                "GPIO_InitStructure": "gpioInitStructure"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d8": {
            "entrypoint": "0x080072d8",
            "current_name": "write_pin_state_080072d8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid writePinState_080072d8(GPIO_TypeDef *gpioPort,uint32_t pinNumber,uint32_t state)\n\n{\n  if (state == 0) {\n    HAL_GPIO_WritePin(gpioPort,(uint16_t)pinNumber,GPIO_PIN_RESET);\n    return;\n  }\n  HAL_GPIO_WritePin(gpioPort,(uint16_t)pinNumber,GPIO_PIN_SET);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d8": "write_pin_state_080072d8",
                "port": "gpioPort",
                "pin": "pinNumber",
                "val": "state"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072f0": {
            "entrypoint": "0x080072f0",
            "current_name": "read_pin_state_080072f0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t readPinState_080072f0(GPIO_TypeDef *gpioPort,uint32_t pinNumber)\n\n{\n  GPIO_PinState pinState;\n  \n  pinState = HAL_GPIO_ReadPin(gpioPort,(uint16_t)pinNumber);\n  return (uint)pinState;\n}\n\n",
            "renaming": {
                "FUN_080072f0": "read_pin_state_080072f0",
                "port": "gpioPort",
                "pin": "pinNumber",
                "GVar1": "pinState"
            },
            "calling": [
                "digitalRead"
            ],
            "called": [
                "HAL_GPIO_ReadPin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072fa": {
            "entrypoint": "0x080072fa",
            "current_name": "initialize_system_080072fa",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSystem_080072fa(void)\n\n{\n  initializeHardware();\n  configureSystemClock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072fa": "initialize_system_080072fa",
                "HAL_Init": "initializeHardware",
                "SystemClock_Config": "configureSystemClock"
            },
            "calling": [
                "init"
            ],
            "called": [
                "SystemClock_Config",
                "HAL_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007306": {
            "entrypoint": "0x08007306",
            "current_name": "find_peripheral_address_08007306",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid * findPeripheralAddress_08007306(PinName_conflict requestedPin,PinMap_conflict *pinMap)\n\n{\n  while( true ) {\n    if (pinMap->requestedPin == NotConnected) {\n      return (void *)0x0;\n    }\n    if (pinMap->requestedPin == requestedPin) break;\n    pinMap = pinMap + 1;\n  }\n  return pinMap->peripheral;\n}\n\n",
            "renaming": {
                "FUN_08007306": "find_peripheral_address_08007306",
                "pin": "requestedPin",
                "map": "pinMap",
                "NC": "NotConnected"
            },
            "calling": [
                "pinmap_peripheral",
                "pinmap_find_peripheral"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007320": {
            "entrypoint": "0x08007320",
            "current_name": "find_peripheral_08007320",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid * find_peripheral_08007320(pin pin,map *map)\n\n{\n  void *peripheral;\n  \n  if (pin != NC) {\n    peripheral = pinmap_find_peripheral_08007320(pin,map);\n    return peripheral;\n  }\n  return (void *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08007320": "find_peripheral_08007320",
                "PinName_conflict": "pin",
                "PinMap_conflict": "map",
                "pvVar1": "peripheral"
            },
            "calling": [
                "uart_debug_write",
                "uart_init",
                "adc_read_value",
                "uart_debug_init",
                "pwm_stop",
                "pwm_start",
                "i2c_custom_init"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007332": {
            "entrypoint": "0x08007332",
            "current_name": "find_pin_from_peripheral_08007332",
            "code": "\n/* WARNING: Unknown calling convention */\n\nPinName findPinFromPeripheral_08007332(void *peripheral,PinMap *pinMap)\n\n{\n  while( true ) {\n    if (pinMap->peripheral == (void *)0x0) {\n      return NoConnection;\n    }\n    if (pinMap->peripheral == peripheral) break;\n    pinMap = pinMap + 1;\n  }\n  return pinMap->pin;\n}\n\n",
            "renaming": {
                "FUN_08007332": "find_pin_from_peripheral_08007332",
                "map": "pinMap",
                "PinName_conflict": "PinName",
                "PinMap_conflict": "PinMap",
                "NC": "NoConnection"
            },
            "calling": [
                "pinmap_pin",
                "pinmap_find_pin"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800734a": {
            "entrypoint": "0x0800734a",
            "current_name": "find_peripheral_pin_0800734a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nPinName_conflict findPeripheralPin_0800734a(void *peripheral,PinMap_conflict *pinMap)\n\n{\n  PinName_conflict foundPin;\n  \n  if (peripheral != (void *)0x0) {\n    foundPin = pinpinMap_find_pin(peripheral,pinMap);\n    return foundPin;\n  }\n  return NC;\n}\n\n",
            "renaming": {
                "FUN_0800734a": "find_peripheral_pin_0800734a",
                "map": "pinMap",
                "PVar1": "foundPin"
            },
            "calling": [
                "uart_debug_init",
                "HardwareSerial"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800735a": {
            "entrypoint": "0x0800735a",
            "current_name": "find_pin_function_0800735a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t findPinFunction_0800735a(PinName_conflict requestedPin,PinMap_conflict *pinMap)\n\n{\n  while( true ) {\n    if (pinMap->requestedPin == NotConnected) {\n      return 0xffffffff;\n    }\n    if (pinMap->requestedPin == requestedPin) break;\n    pinMap = pinMap + 1;\n  }\n  return pinMap->function;\n}\n\n",
            "renaming": {
                "FUN_0800735a": "find_pin_function_0800735a",
                "pin": "requestedPin",
                "map": "pinMap",
                "NC": "NotConnected"
            },
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007376": {
            "entrypoint": "0x08007376",
            "current_name": "pinmap_find_function_and_return_08007376",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t pinmap_find_function_and_return_08007376(pin pin,map *map)\n\n{\n  uint32_t function_index;\n  \n  if (pin == NC) {\n    return 0xffffffff;\n  }\n  function_index = pinmap_find_function(pin,map);\n  return function_index;\n}\n\n",
            "renaming": {
                "FUN_08007376": "pinmap_find_function_and_return_08007376",
                "PinName_conflict": "pin",
                "PinMap_conflict": "map",
                "uVar1": "function_index"
            },
            "calling": [
                "uart_init",
                "HAL_TIM_PWM_MspInit",
                "get_pwm_channel",
                "pwm_stop",
                "get_adc_channel",
                "pwm_start",
                "i2c_custom_init"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738a": {
            "entrypoint": "0x0800738a",
            "current_name": "check_pin_mapping_0800738a",
            "code": "\n/* WARNING: Unknown calling convention */\n\n_Bool checkPinMapping_0800738a(PinName_conflict pinToCheck,PinMap_conflict *pinMap)\n\n{\n  if (pinToCheck == NC) {\n    return false;\n  }\n  while( true ) {\n    if (pinMap->pinToCheck == NC) {\n      return false;\n    }\n    if (pinToCheck == pinMap->pinToCheck) break;\n    pinMap = pinMap + 1;\n  }\n  return true;\n}\n\n",
            "renaming": {
                "FUN_0800738a": "check_pin_mapping_0800738a",
                "pin": "pinToCheck",
                "map": "pinMap"
            },
            "calling": [
                "analogWriteCallback",
                "setPinModeCallback",
                "analogWrite",
                "pinMode",
                "enableI2CPins",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ae": {
            "entrypoint": "0x080073ae",
            "current_name": "merge_pointers_080073ae",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid * merge_pointers_080073ae(void *a,void *b)\n\n{\n  if (a != b) {\n    if (a == (void *)0x0) {\n      return b;\n    }\n    if (b == (void *)0x0) {\n      return a;\n    }\n    a = (void *)0x0;\n  }\n  return a;\n}\n\n",
            "renaming": {
                "FUN_080073ae": "merge_pointers_080073ae"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "execute_user_rtc_callback_080073c0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid executeUserRTCCallback_080073c0(RTC_HandleTypeDef *rtcHandler)\n\n{\n  if (userCallback != (genericCallbackPtr)0x0) {\n    (*userCallback)(userData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "execute_user_rtc_callback_080073c0",
                "hrtc": "rtcHandler",
                "RTCUserCallback": "userCallback",
                "voidCallbackPtr": "genericCallbackPtr",
                "callbackUserData": "userData"
            },
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073d8": {
            "entrypoint": "0x080073d8",
            "current_name": "handle_rtc_alarm_irq_080073d8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleRtcAlarmIRQ_080073d8(void)\n\n{\n  HAL_RTC_AlarmIRQHandler(&rtcHandle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d8": "handle_rtc_alarm_irq_080073d8",
                "&RtcHandle": "&rtcHandle"
            },
            "calling": [],
            "called": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073e8": {
            "entrypoint": "0x080073e8",
            "current_name": "loop_forever_080073e8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid loopForever_080073e8(char *message,int value)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080073e8": "loop_forever_080073e8",
                "msg": "message",
                "val": "value"
            },
            "calling": [
                "SystemClock_Config",
                "_Error_Handler",
                "onReceiveService"
            ],
            "called": [
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ec": {
            "entrypoint": "0x080073ec",
            "current_name": "initialize_periph_080073ec",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializePeriph_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073ec": "initialize_periph_080073ec"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007438": {
            "entrypoint": "0x08007438",
            "current_name": "configure_timer_08007438",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n/* WARNING: Unknown calling convention */\n\nvoid configureTimer_08007438(TIM_HandleTypeDef_conflict *timerHandle)\n\n{\n  uint32_t temporaryRegister;\n  uint32_t temporaryRegister1;\n  uint32_t temporaryRegister2;\n  uint32_t temporaryRegister3;\n  \n  if (timerHandle->Instance == (TIM_TypeDef_conflict *)0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    timer_handles[0] = timerHandle;\n  }\n  if (timerHandle->Instance == (TIM_TypeDef_conflict *)0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    timer_handles[1] = timerHandle;\n  }\n  if (timerHandle->Instance == (TIM_TypeDef_conflict *)0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    timer_handles[2] = timerHandle;\n  }\n  if (timerHandle->Instance == (TIM_TypeDef_conflict *)0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    timer_handles[3] = timerHandle;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007438": "configure_timer_08007438",
                "htim": "timerHandle",
                "tmpreg": "temporaryRegister",
                "tmpreg_1": "temporaryRegister1",
                "tmpreg_2": "temporaryRegister2",
                "tmpreg_3": "temporaryRegister3"
            },
            "calling": [
                "HAL_TIM_PWM_MspInit",
                "HAL_TIM_OC_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074e0": {
            "entrypoint": "0x080074e0",
            "current_name": "configure_timer_interrupt_080074e0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid configureTimerInterrupt_080074e0(TIM_HandleTypeDef_conflict *timerHandle)\n\n{\n  if (timerHandle->timerInstance == (TIM_TypeDef_conflict *)0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (timerHandle->timerInstance == (TIM_TypeDef_conflict *)0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (timerHandle->timerInstance == (TIM_TypeDef_conflict *)0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (timerHandle->timerInstance == (TIM_TypeDef_conflict *)0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074e0": "configure_timer_interrupt_080074e0",
                "htim": "timerHandle",
                "Instance": "timerInstance"
            },
            "calling": [
                "HAL_TIM_OC_MspDeInit",
                "HAL_TIM_PWM_MspDeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007544": {
            "entrypoint": "0x08007544",
            "current_name": "determine_timer_ir_qn_08007544",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t determineTimerIRQn_08007544(TimerTypeDef *timer)\n\n{\n  if (timer == (TimerTypeDef *)0xffffffff) {\n    return 0;\n  }\n  if (timer == (TimerTypeDef *)0x40000400) {\n    return 0x1d;\n  }\n  if (timer < (TimerTypeDef *)0x40000401) {\n    if (timer == (TimerTypeDef *)0x40000000) {\n      return 0x1c;\n    }\n  }\n  else {\n    if (timer == (TimerTypeDef *)0x40000800) {\n      return 0x1e;\n    }\n    if (timer == (TimerTypeDef *)0x40012c00) {\n      return 0x19;\n    }\n  }\n  printUnknownTimerIRQn(\"TIM: Unknown timerer IRQn\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007544": "determine_timer_ir_qn_08007544",
                "tim": "timer",
                "TIM_TypeDef_conflict": "TimerTypeDef",
                "iprintf": "printUnknownTimerIRQn"
            },
            "calling": [
                "TimerPulseInit",
                "TimerPulseDeinit"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007594": {
            "entrypoint": "0x08007594",
            "current_name": "get_timer_instance_08007594",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t getTimerInstance_08007594(TIM_TypeDef_conflict *timer)\n\n{\n  if (timer == (TIM_TypeDef_conflict *)0xffffffff) {\n    return '\\0';\n  }\n  if (timer == (TIM_TypeDef_conflict *)0x40000400) {\n    return '\\x01';\n  }\n  if (timer < (TIM_TypeDef_conflict *)0x40000401) {\n    if (timer == (TIM_TypeDef_conflict *)0x40000000) {\n      return '\\x01';\n    }\n  }\n  else {\n    if (timer == (TIM_TypeDef_conflict *)0x40000800) {\n      return '\\x01';\n    }\n    if (timer == (TIM_TypeDef_conflict *)0x40012c00) {\n      return '\\x02';\n    }\n  }\n  iprintf(\"TIM: Unknown timerer instance\");\n  return '\\0';\n}\n\n",
            "renaming": {
                "FUN_08007594": "get_timer_instance_08007594",
                "tim": "timer"
            },
            "calling": [
                "getTimerClkFreq"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075dc": {
            "entrypoint": "0x080075dc",
            "current_name": "get_timer_frequency_080075dc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getTimerFrequency_080075dc(TIM_TypeDef_conflict *tim)\n\n{\n  uint32_t apb2Divider;\n  uint8_t timerClkSrc;\n  uint32_t timerFreq;\n  uint32_t apb1Divider;\n  uint32_t flashLatency;\n  RCC_ClkInitTypeDef_conflict rccClkConfig;\n  \n  rccClkConfig.ClockType = 0;\n  rccClkConfig.SYSCLKSource = 0;\n  rccClkConfig.AHBCLKDivider = 0;\n  rccClkConfig.APB1CLKDivider = 0;\n  rccClkConfig.APB2CLKDivider = 0;\n  flashLatency = 0;\n  HAL_RCC_GetClockConfig(&rccClkConfig,&flashLatency);\n  timerClkSrc = getTimerClkSrc(tim);\n  apb2Divider = rccClkConfig.APB2CLKDivider;\n  apb1Divider = rccClkConfig.APB1CLKDivider;\n  if (timerClkSrc == '\\x01') {\n    timerFreq = HAL_RCC_GetPCLK1Freq();\n  }\n  else if (timerClkSrc == '\\x02') {\n    timerFreq = HAL_RCC_GetPCLK2Freq();\n    apb1Divider = apb2Divider;\n  }\n  else {\n    iprintf(\"TIM: Unknown clock source\");\n    timerFreq = 0;\n    apb1Divider = 0;\n  }\n  if (apb1Divider != 0x500) {\n    if (apb1Divider < 0x501) {\n      if (apb1Divider != 0x400) {\n        return timerFreq;\n      }\n    }\n    else if ((apb1Divider != 0x600) && (apb1Divider != 0x700)) {\n      return timerFreq;\n    }\n  }\n  return timerFreq << 1;\n}\n\n",
            "renaming": {
                "FUN_080075dc": "get_timer_frequency_080075dc",
                "uVar1": "apb2Divider",
                "uVar2": "timerClkSrc",
                "uVar3": "timerFreq",
                "uVar4": "apb1Divider",
                "pFLatency": "flashLatency",
                "clkconfig": "rccClkConfig"
            },
            "calling": [
                "TimerPulseInit",
                "pwm_start"
            ],
            "called": [
                "getTimerClkSrc",
                "HAL_RCC_GetClockConfig",
                "HAL_RCC_GetPCLK2Freq",
                "iprintf",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007648": {
            "entrypoint": "0x08007648",
            "current_name": "initialize_timer_08007648",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimer_08007648(stimer_t_conflict *timerConf,uint16_t timerPeriod,uint16_t timerPulseWidth,\n                 _func_void_stimer_t_ptr_uint32_t_conflict *irqHandler)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t timerClkFreq;\n  TIM_HandleTypeDef_conflict *timerHandle;\n  TIM_HandleTypeDef_conflict *timerHandleConflict;\n  TIM_OC_InitTypeDef outputCompareConfig;\n  \n  outputCompareConfig.OCMode = 0;\n  outputCompareConfig.Pulse = 0;\n  outputCompareConfig.OCPolarity = 0;\n  outputCompareConfig.OCNPolarity = 0;\n  outputCompareConfig.OCFastMode = 0;\n  outputCompareConfig.OCIdleState = 0;\n  outputCompareConfig.OCNIdleState = 0;\n  timerHandleConflict = &timerConf->timerHandle;\n  timerConf->timer = (TIM_TypeDef_conflict *)0x40000000;\n  (timerConf->timerHandle).Instance = (TIM_TypeDef_conflict *)0x40000000;\n  (timerConf->timerHandle).Init.Period = (uint)timerPeriod;\n  timerClkFreq = getTimerClkFreq((TIM_TypeDef_conflict *)0x40000000);\n  (timerConf->timerHandle).Init.Prescaler = timerClkFreq / 1000000 - 1;\n  (timerConf->timerHandle).Init.ClockDivision = 0;\n  (timerConf->timerHandle).Init.CounterMode = 0;\n  (timerConf->timerHandle).Init.RepetitionCounter = 0;\n  timerConf->irqHandlerOC = irqHandler;\n  outputCompareConfig.OCMode = 0;\n  outputCompareConfig.OCPolarity = 0;\n  outputCompareConfig.OCFastMode = 0;\n  outputCompareConfig.OCNPolarity = 0;\n  outputCompareConfig.OCIdleState = 0;\n  outputCompareConfig.OCNIdleState = 0;\n  outputCompareConfig.Pulse = (uint)timerPulseWidth;\n  timerClkFreq = getTimerIrq(timerConf->timer);\n  HAL_NVIC_SetPriority((IRQn_Type_conflict)timerClkFreq,0xe,0);\n  timerClkFreq = getTimerIrq(timerConf->timer);\n  HAL_NVIC_EnableIRQ((IRQn_Type_conflict)timerClkFreq);\n  status = HAL_TIM_OC_Init(timerHandleConflict);\n  if ((status == HAL_OK) && (status = HAL_TIM_OC_ConfigChannel(timerHandleConflict,&outputCompareConfig,0), status == HAL_OK)) {\n    HAL_TIM_OC_Start_IT(timerHandleConflict,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007648": "initialize_timer_08007648",
                "obj": "timerConf",
                "period": "timerPeriod",
                "pulseWidth": "timerPulseWidth",
                "irqHandle": "irqHandler",
                "HVar1": "status",
                "uVar2": "timerClkFreq",
                "handle": "timerHandle",
                "htim": "timerHandleConflict",
                "sConfig": "outputCompareConfig"
            },
            "calling": [
                "initISR"
            ],
            "called": [
                "HAL_TIM_OC_Start_IT",
                "getTimerIrq",
                "HAL_TIM_OC_ConfigChannel",
                "HAL_TIM_OC_Init",
                "getTimerClkFreq",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076e0": {
            "entrypoint": "0x080076e0",
            "current_name": "disable_and_stop_timer_080076e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disableAndStopTimer_080076e0(stimer_t_conflict *timerObject)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t irqNumber;\n  TIM_HandleTypeDef_conflict *timerHandle;\n  \n  timerObject->irqHandleOC = (_func_void_stimer_t_ptr_uint32_t_conflict *)0x0;\n  irqNumber = getTimerIrq(timerObject->timer);\n  HAL_NVIC_DisableIRQ((IRQn_Type_conflict)irqNumber);\n  status = HAL_TIM_OC_DeInit(&timerObject->timerHandle);\n  if (status == HAL_OK) {\n    HAL_TIM_OC_Stop_IT(&timerObject->timerHandle,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076e0": "disable_and_stop_timer_080076e0",
                "obj": "timerObject",
                "HVar1": "status",
                "uVar2": "irqNumber",
                "handle": "timerHandle"
            },
            "calling": [
                "finISR"
            ],
            "called": [
                "HAL_TIM_OC_Stop_IT",
                "getTimerIrq",
                "HAL_TIM_OC_DeInit",
                "HAL_NVIC_DisableIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007708": {
            "entrypoint": "0x08007708",
            "current_name": "initialize_timer_08007708",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimer_08007708(TIM_HandleTypeDef_conflict *timerHandle)\n\n{\n  timer_enable_clock(timerHandle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007708": "initialize_timer_08007708",
                "htim": "timerHandle"
            },
            "calling": [
                "HAL_TIM_OC_Init"
            ],
            "called": [
                "timer_enable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007710": {
            "entrypoint": "0x08007710",
            "current_name": "disable_timer_clock_08007710",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disable_timer_clock_08007710(TIM_HandleTypeDef_conflict *timer_handle)\n\n{\n  disable_timer_clock_08007710(timer_handle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007710": "disable_timer_clock_08007710",
                "htim": "timer_handle",
                "timer_disable_clock": "disable_timer_clock"
            },
            "calling": [
                "HAL_TIM_OC_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007718": {
            "entrypoint": "0x08007718",
            "current_name": "get_stimer_t_from_tim_handle_type_def_08007718",
            "code": "\n/* WARNING: Unknown calling convention */\n\nStimer * get_stimer_t_from_TIM_HandleTypeDef_08007718(TIM_HandleTypeDef_conflict *TIM_HandleTypeDef)\n\n{\n  return (Stimer *)&TIM_HandleTypeDef[-1].lock;\n}\n\n",
            "renaming": {
                "FUN_08007718": "get_stimer_t_from_tim_handle_type_def_08007718",
                "htim": "TIM_HandleTypeDef",
                "stimer_t_conflict": "Stimer",
                "Lock": "lock"
            },
            "calling": [
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800771c": {
            "entrypoint": "0x0800771c",
            "current_name": "handle_timer_interrupt_0800771c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimerInterrupt_0800771c(TIM_HandleTypeDef_conflict *timerHandle)\n\n{\n  stimer_t_conflict *timerObj;\n  stimer_t_conflict *timerObject;\n  \n  timerObj = get_timer_timerObject(timerHandle);\n  if ((timerObj->irqHandleOC != (_func_void_stimer_t_ptr_uint32_t_conflict *)0x0) &&\n     (timerHandle->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {\n    (*timerObj->irqHandleOC)(timerObj,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800771c": "handle_timer_interrupt_0800771c",
                "htim": "timerHandle",
                "psVar1": "timerObj",
                "obj": "timerObject"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007736": {
            "entrypoint": "0x08007736",
            "current_name": "handle_timer_interrupt_08007736",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimerInterrupt_08007736(TIM_HandleTypeDef_conflict *timerHandle)\n\n{\n  stimer_t_conflict *timerObj;\n  stimer_t_conflict *pointerObj;\n  \n  timerObj = get_timer_pointerObj(timerHandle);\n  if (timerObj->irqHandle != (_func_void_stimer_t_ptr_conflict *)0x0) {\n    (*timerObj->irqHandle)(timerObj);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007736": "handle_timer_interrupt_08007736",
                "htim": "timerHandle",
                "psVar1": "timerObj",
                "obj": "pointerObj"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007744": {
            "entrypoint": "0x08007744",
            "current_name": "get_timer_counter_08007744",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getTimerCounter_08007744(stimer_t_conflict *obj)\n\n{\n  return ((obj->handle).Instance)->timerCounter;\n}\n\n",
            "renaming": {
                "FUN_08007744": "get_timer_counter_08007744",
                "CNT": "timerCounter"
            },
            "calling": [
                "ServoIrqHandle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "set_timer_count_0800774a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setTimerCount_0800774a(stimer_t_conflict *timerConfig,uint32_t countValue)\n\n{\n  ((timerConfig->handle).Instance)->CNT = countValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "set_timer_count_0800774a",
                "obj": "timerConfig",
                "value": "countValue"
            },
            "calling": [
                "ServoIrqHandle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007750": {
            "entrypoint": "0x08007750",
            "current_name": "set_channel_value_08007750",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setChannelValue_08007750(stimer_t_conflict *timerObject,uint32_t channelNumber,uint32_t newValue)\n\n{\n  (&((timerObject->handle).Instance)->CCR1)[channelNumber] = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007750": "set_channel_value_08007750",
                "obj": "timerObject",
                "channel": "channelNumber",
                "value": "newValue"
            },
            "calling": [
                "ServoIrqHandle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007760": {
            "entrypoint": "0x08007760",
            "current_name": "handle_timer_interrupt_08007760",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimerInterrupt_08007760(void)\n\n{\n  if (handleArray[0] != (TimerHandleConflict *)0x0) {\n    handleTimerIRQ(handleArray[0]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007760": "handle_timer_interrupt_08007760",
                "timer_handles": "handleArray",
                "TIM_HandleTypeDef_conflict": "TimerHandleConflict",
                "HAL_TIM_IRQHandler": "handleTimerIRQ"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007774": {
            "entrypoint": "0x08007774",
            "current_name": "handle_timer_interrupt_08007774",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimerInterrupt_08007774(void)\n\n{\n  if (timerHandles[1] != (TimerHandleConflict *)0x0) {\n    HAL_TIM_IRQHandler(timerHandles[1]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007774": "handle_timer_interrupt_08007774",
                "timer_handles": "timerHandles",
                "TIM_HandleTypeDef_conflict": "TimerHandleConflict"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007788": {
            "entrypoint": "0x08007788",
            "current_name": "handle_timer_interrupt_08007788",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimerInterrupt_08007788(void)\n\n{\n  if (timerHandles[2] != (TimerHandleConflict *)0x0) {\n    handleTimerIRQ(timerHandles[2]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007788": "handle_timer_interrupt_08007788",
                "timer_handles": "timerHandles",
                "TIM_HandleTypeDef_conflict": "TimerHandleConflict",
                "HAL_TIM_IRQHandler": "handleTimerIRQ"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800779c": {
            "entrypoint": "0x0800779c",
            "current_name": "handle_timer_interrupt_0800779c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimerInterrupt_0800779c(void)\n\n{\n  if (timerHandle != (Timer_HandleTypeDef *)0x0) {\n    handleTimerIRQ(timerHandle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800779c": "handle_timer_interrupt_0800779c",
                "timer_handles[3]": "timerHandle",
                "TIM_HandleTypeDef_conflict": "Timer_HandleTypeDef",
                "HAL_TIM_IRQHandler": "handleTimerIRQ"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080077b0": {
            "entrypoint": "0x080077b0",
            "current_name": "initialize_i2_c_080077b0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeI2C_080077b0(i2c_t_conflict *i2cObject,i2c_timing_e_conflict timing,uint32_t addressMode,\n                 uint32_t ownAddress,uint8_t isMaster)\n\n{\n  void *a;\n  I2C_TypeDef_conflict *sdaI2C;\n  void *b;\n  I2C_TypeDef_conflict *sclI2C;\n  I2C_TypeDef_conflict *mergedPeripheral;\n  GPIO_TypeDef *gpioPort;\n  GPIO_TypeDef *port;\n  uint32_t pinMapFunc1;\n  uint32_t pinMapFunc2;\n  uint32_t tmpreg3;\n  uint32_t tmpreg4;\n  uint32_t tmpreg5;\n  uint32_t tmpreg6;\n  uint32_t tmpreg7;\n  uint32_t tmpreg8;\n  uint32_t tmpreg9;\n  uint32_t tmpreg10;\n  uint32_t tmpreg11;\n  uint32_t tmpreg12;\n  uint32_t tmpreg13;\n  uint32_t tmpreg14;\n  uint32_t tmpreg15;\n  uint32_t tmpreg17;\n  uint32_t tmpreg18;\n  uint32_t tmpreg19;\n  uint32_t tmpreg20;\n  uint32_t tmpreg21;\n  uint32_t tmpreg22;\n  uint32_t tmpreg23;\n  uint32_t tmpreg24;\n  uint32_t tmpreg25;\n  uint32_t tmpreg26;\n  uint32_t tmpreg27;\n  uint32_t tmpreg28;\n  uint32_t tmpreg29;\n  I2C_HandleTypeDef_conflict *handle;\n  I2C_HandleTypeDef_conflict *handle;\n  uint32_t tmpreg;\n  uint32_t tmpreg1;\n  uint32_t tmpreg16;\n  uint32_t tmpreg2;\n  GPIO_InitTypeDef gpioInitStruct;\n  \n  if (i2cObject != (i2c_t_conflict *)0x0) {\n    handle = &i2cObject->handle;\n    a = pinmap_peripheral(i2cObject->sda,(PinMap_conflict *)&PinMap_I2C_SDA);\n    b = pinmap_peripheral(i2cObject->scl,(PinMap_conflict *)&PinMap_I2C_SCL);\n    if ((a == (void *)0x0) || (b == (void *)0x0)) {\n      iprintf(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      mergedPeripheral = (I2C_TypeDef_conflict *)pinmap_merge_peripheral(a,b);\n      i2cObject->i2c = mergedPeripheral;\n      if (mergedPeripheral == (I2C_TypeDef_conflict *)0x0) {\n        iprintf(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (mergedPeripheral == (I2C_TypeDef_conflict *)0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          i2cObject->irq = I2C1_EV_IRQn;\n          i2cObject->irqER = I2C1_ER_IRQn;\n          i2c_handles = handle;\n        }\n        if (i2cObject->i2c == (I2C_TypeDef_conflict *)0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          i2cObject->irq = I2C2_EV_IRQn;\n          i2cObject->irqER = I2C2_ER_IRQn;\n          I2C2_ER_IRQHandler::handle = handle;\n        }\n        gpioPort = set_GPIO_Port_Clock((uint)((int)i2cObject->scl << 0x18) >> 0x1c);\n        port = (GPIO_TypeDef *)(int)i2cObject->scl;\n        gpioInitStruct.Pin = 1 << ((uint)port & 0xf) & 0xffff;\n        pinMapFunc1 = pinmap_function(i2cObject->scl,(PinMap_conflict *)&PinMap_I2C_SCL);\n        pinMapFunc2 = pinmap_function(i2cObject->scl,(PinMap_conflict *)&PinMap_I2C_SCL);\n        gpioInitStruct.Mode = (pinMapFunc1 >> 3 & 1) << 4 | pinMapFunc2 & 7;\n        gpioInitStruct.Speed = 3;\n        pinMapFunc1 = pinmap_function(i2cObject->scl,(PinMap_conflict *)&PinMap_I2C_SCL);\n        gpioInitStruct.Pull = (pinMapFunc1 << 0x1a) >> 0x1e;\n        pinMapFunc1 = pinmap_function(i2cObject->scl,(PinMap_conflict *)&PinMap_I2C_SCL);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((pinMapFunc1 << 0x11) >> 0x19) {\n        case 1:\n          tmpreg26 = tmpreg26 | 0x7000001;\n          break;\n        case 2:\n          tmpreg26 = tmpreg26 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          tmpreg26 = tmpreg26 | 0x7000002;\n          break;\n        case 4:\n          tmpreg26 = tmpreg26 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          tmpreg26 = tmpreg26 | 0x7000004;\n          break;\n        case 6:\n          tmpreg26 = tmpreg26 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          tmpreg26 = tmpreg26 | 0x7000008;\n          break;\n        case 8:\n          tmpreg26 = tmpreg26 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          tmpreg26 = tmpreg26 | 0x7000030;\n          break;\n        case 10:\n          tmpreg3 = tmpreg26 & 0xffffffcf;\n          tmpreg26 = tmpreg3 | 0x7000010;\n          break;\n        case 0xb:\n          tmpreg4 = tmpreg26 & 0xffffffcf;\n          tmpreg26 = tmpreg4 | 0x7000000;\n          break;\n        case 0xc:\n          tmpreg26 = tmpreg26 | 0x70000c0;\n          break;\n        case 0xd:\n          tmpreg5 = tmpreg26 & 0xffffff3f;\n          tmpreg26 = tmpreg5 | 0x7000040;\n          break;\n        case 0xe:\n          tmpreg6 = tmpreg26 & 0xffffff3f;\n          tmpreg26 = tmpreg6 | 0x7000000;\n          break;\n        case 0xf:\n          tmpreg26 = tmpreg26 | 0x7000300;\n          break;\n        case 0x10:\n          tmpreg7 = tmpreg26 & 0xfffffcff;\n          tmpreg26 = tmpreg7 | 0x7000200;\n          break;\n        case 0x11:\n          tmpreg8 = tmpreg26 & 0xfffffcff;\n          tmpreg26 = tmpreg8 | 0x7000100;\n          break;\n        case 0x12:\n          tmpreg9 = tmpreg26 & 0xfffffcff;\n          tmpreg26 = tmpreg9 | 0x7000000;\n          break;\n        case 0x13:\n          tmpreg26 = tmpreg26 | 0x7000c00;\n          break;\n        case 0x14:\n          tmpreg10 = tmpreg26 & 0xfffff3ff;\n          tmpreg26 = tmpreg10 | 0x7000800;\n          break;\n        case 0x15:\n          tmpreg11 = tmpreg26 & 0xfffff3ff;\n          tmpreg26 = tmpreg11 | 0x7000000;\n          break;\n        case 0x16:\n          tmpreg26 = tmpreg26 | 0x7001000;\n          break;\n        case 0x17:\n          tmpreg26 = tmpreg26 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          tmpreg26 = tmpreg26 | 0x7008000;\n          break;\n        case 0x1c:\n          tmpreg26 = tmpreg26 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          tmpreg12 = tmpreg26 & 0xf8ffffff;\n          tmpreg26 = tmpreg12;\n          break;\n        case 0x22:\n          tmpreg13 = tmpreg26 & 0xf8ffffff;\n          tmpreg26 = tmpreg13 | 0x1000000;\n          break;\n        case 0x23:\n          tmpreg14 = tmpreg26 & 0xf8ffffff;\n          tmpreg26 = tmpreg14 | 0x2000000;\n          break;\n        case 0x24:\n          tmpreg15 = tmpreg26 & 0xf8ffffff;\n          tmpreg26 = tmpreg15 | 0x4000000;\n        }\n        HAL_GPIO_Init(gpioPort,&gpioInitStruct);\n        gpioPort = set_GPIO_Port_Clock((uint)((int)i2cObject->sda << 0x18) >> 0x1c);\n        gpioInitStruct.Pin = 1 << ((int)i2cObject->sda & 0xfU) & 0xffff;\n        pinMapFunc1 = pinmap_function(i2cObject->sda,(PinMap_conflict *)&PinMap_I2C_SDA);\n        pinMapFunc2 = pinmap_function(i2cObject->sda,(PinMap_conflict *)&PinMap_I2C_SDA);\n        gpioInitStruct.Mode = (pinMapFunc1 >> 3 & 1) << 4 | pinMapFunc2 & 7;\n        gpioInitStruct.Speed = 3;\n        pinMapFunc1 = pinmap_function(i2cObject->sda,(PinMap_conflict *)&PinMap_I2C_SDA);\n        gpioInitStruct.Pull = (pinMapFunc1 << 0x1a) >> 0x1e;\n        pinMapFunc1 = pinmap_function(i2cObject->sda,(PinMap_conflict *)&PinMap_I2C_SDA);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((pinMapFunc1 << 0x11) >> 0x19) {\n        case 1:\n          tmpreg26 = tmpreg26 | 0x7000001;\n          break;\n        case 2:\n          tmpreg26 = tmpreg26 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          tmpreg26 = tmpreg26 | 0x7000002;\n          break;\n        case 4:\n          tmpreg26 = tmpreg26 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          tmpreg26 = tmpreg26 | 0x7000004;\n          break;\n        case 6:\n          tmpreg26 = tmpreg26 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          tmpreg26 = tmpreg26 | 0x7000008;\n          break;\n        case 8:\n          tmpreg26 = tmpreg26 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          tmpreg26 = tmpreg26 | 0x7000030;\n          break;\n        case 10:\n          tmpreg17 = tmpreg26 & 0xffffffcf;\n          tmpreg26 = tmpreg17 | 0x7000010;\n          break;\n        case 0xb:\n          tmpreg18 = tmpreg26 & 0xffffffcf;\n          tmpreg26 = tmpreg18 | 0x7000000;\n          break;\n        case 0xc:\n          tmpreg26 = tmpreg26 | 0x70000c0;\n          break;\n        case 0xd:\n          tmpreg19 = tmpreg26 & 0xffffff3f;\n          tmpreg26 = tmpreg19 | 0x7000040;\n          break;\n        case 0xe:\n          tmpreg20 = tmpreg26 & 0xffffff3f;\n          tmpreg26 = tmpreg20 | 0x7000000;\n          break;\n        case 0xf:\n          tmpreg26 = tmpreg26 | 0x7000300;\n          break;\n        case 0x10:\n          tmpreg21 = tmpreg26 & 0xfffffcff;\n          tmpreg26 = tmpreg21 | 0x7000200;\n          break;\n        case 0x11:\n          tmpreg22 = tmpreg26 & 0xfffffcff;\n          tmpreg26 = tmpreg22 | 0x7000100;\n          break;\n        case 0x12:\n          tmpreg23 = tmpreg26 & 0xfffffcff;\n          tmpreg26 = tmpreg23 | 0x7000000;\n          break;\n        case 0x13:\n          tmpreg26 = tmpreg26 | 0x7000c00;\n          break;\n        case 0x14:\n          tmpreg24 = tmpreg26 & 0xfffff3ff;\n          tmpreg26 = tmpreg24 | 0x7000800;\n          break;\n        case 0x15:\n          tmpreg25 = tmpreg26 & 0xfffff3ff;\n          tmpreg26 = tmpreg25 | 0x7000000;\n          break;\n        case 0x16:\n          tmpreg26 = tmpreg26 | 0x7001000;\n          break;\n        case 0x17:\n          tmpreg26 = tmpreg26 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          tmpreg26 = tmpreg26 | 0x7008000;\n          break;\n        case 0x1c:\n          tmpreg26 = tmpreg26 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          tmpreg26 = tmpreg26 & 0xf8ffffff;\n          break;\n        case 0x22:\n          tmpreg27 = tmpreg26 & 0xf8ffffff;\n          tmpreg26 = tmpreg27 | 0x1000000;\n          break;\n        case 0x23:\n          tmpreg28 = tmpreg26 & 0xf8ffffff;\n          tmpreg26 = tmpreg28 | 0x2000000;\n          break;\n        case 0x24:\n          tmpreg29 = tmpreg26 & 0xf8ffffff;\n          tmpreg26 = tmpreg29 | 0x4000000;\n        }\n        HAL_GPIO_Init(gpioPort,&gpioInitStruct);\n        (i2cObject->handle).Instance = i2cObject->i2c;\n        (i2cObject->handle).Init.ClockSpeed = timing;\n        (i2cObject->handle).Init.DutyCycle = 0;\n        (i2cObject->handle).Init.OwnAddress1 = ownAddress;\n        (i2cObject->handle).Init.OwnAddress2 = 0xff;\n        (i2cObject->handle).Init.AddressingMode = addressMode;\n        (i2cObject->handle).Init.DualAddressMode = 0;\n        (i2cObject->handle).Init.GeneralCallMode = 0;\n        (i2cObject->handle).Init.NoStretchMode = 0;\n        (i2cObject->handle).State = HAL_I2C_STATE_RESET;\n        HAL_NVIC_SetPriority(i2cObject->irq,0,1);\n        HAL_NVIC_EnableIRQ(i2cObject->irq);\n        HAL_NVIC_SetPriority(i2cObject->irqER,0,1);\n        HAL_NVIC_EnableIRQ(i2cObject->irqER);\n        HAL_I2C_Init(handle);\n        i2cObject->isMaster = isMaster;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_080077b0",
                "obj": "i2cObject",
                "addressingMode": "addressMode",
                "master": "isMaster",
                "i2c_sda": "sdaI2C",
                "i2c_scl": "sclI2C",
                "pIVar1": "mergedPeripheral",
                "pGVar2": "gpioPort",
                "uVar3": "pinMapFunc1",
                "uVar4": "pinMapFunc2",
                "tmpreg_3": "tmpreg3",
                "tmpreg_4": "tmpreg4",
                "tmpreg_5": "tmpreg5",
                "tmpreg_6": "tmpreg6",
                "tmpreg_7": "tmpreg7",
                "tmpreg_8": "tmpreg8",
                "tmpreg_9": "tmpreg9",
                "tmpreg_10": "tmpreg10",
                "tmpreg_11": "tmpreg11",
                "tmpreg_12": "tmpreg12",
                "tmpreg_13": "tmpreg13",
                "tmpreg_14": "tmpreg14",
                "tmpreg_15": "tmpreg15",
                "tmpreg_17": "tmpreg17",
                "tmpreg_18": "tmpreg18",
                "tmpreg_19": "tmpreg19",
                "tmpreg_20": "tmpreg20",
                "tmpreg_21": "tmpreg21",
                "tmpreg_22": "tmpreg22",
                "tmpreg_23": "tmpreg23",
                "tmpreg_24": "tmpreg24",
                "tmpreg_25": "tmpreg25",
                "tmpreg_26": "tmpreg26",
                "tmpreg_27": "tmpreg27",
                "tmpreg_28": "tmpreg28",
                "tmpreg_29": "tmpreg29",
                "hi2c": "handle",
                "tmpreg_1": "tmpreg1",
                "tmpreg_16": "tmpreg16",
                "tmpreg_2": "tmpreg2",
                "GPIO_InitStruct": "gpioInitStruct"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "pinmap_function",
                "pinmap_peripheral",
                "pinmap_merge_peripheral",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority",
                "HAL_GPIO_Init",
                "iprintf",
                "HAL_I2C_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e74": {
            "entrypoint": "0x08007e74",
            "current_name": "transmit_data_over_i2_c_08007e74",
            "code": "\n/* WARNING: Unknown calling convention */\n\ni2c_status_e_conflict\ntransmitDataOverI2C_08007e74(i2c_t_conflict *i2cObject,uint8_t deviceAddress,uint8_t *dataBuffer,uint16_t dataSize)\n\n{\n  HAL_I2C_StateTypeDef_conflict i2cState;\n  HAL_StatusTypeDef_conflict transmitStatus;\n  uint32_t startTime;\n  uint32_t tickstart;\n  uint32_t elapsedTime;\n  uint timeout;\n  i2c_status_e_conflict transmitResult;\n  I2C_HandleTypeDef_conflict *i2cHandle;\n  \n  startTime = HAL_GetTick();\n  timeout = 0;\n  transmitResult = I2C_ERROR;\n  do {\n    i2cHandle = &i2cObject->handle;\n    transmitStatus = HAL_I2C_Master_Transmit_IT(i2cHandle,(ushort)deviceAddress,dataBuffer,dataSize);\n    if (transmitStatus == HAL_OK) {\n      transmitResult = I2C_OK;\n      while ((i2cState = HAL_I2C_GetState(i2cHandle), i2cState != HAL_I2C_STATE_READY && (transmitResult == I2C_OK))) {\n        elapsedTime = HAL_GetTick();\n        timeout = elapsedTime - startTime;\n        if (timeout < 0x65) {\n          elapsedTime = HAL_I2C_GetError(i2cHandle);\n          if (elapsedTime != 0) {\n            transmitResult = I2C_ERROR;\n          }\n        }\n        else {\n          transmitResult = I2C_TIMEOUT;\n        }\n      }\n    }\n    elapsedTime = HAL_I2C_GetError(i2cHandle);\n  } while ((elapsedTime == 4) && (timeout < 100));\n  return transmitResult;\n}\n\n",
            "renaming": {
                "FUN_08007e74": "transmit_data_over_i2_c_08007e74",
                "obj": "i2cObject",
                "dev_address": "deviceAddress",
                "data": "dataBuffer",
                "size": "dataSize",
                "HVar1": "i2cState",
                "HVar2": "transmitStatus",
                "uVar3": "startTime",
                "uVar4": "elapsedTime",
                "uVar5": "timeout",
                "iVar6": "transmitResult",
                "hi2c": "i2cHandle"
            },
            "calling": [
                "endTransmission"
            ],
            "called": [
                "HAL_I2C_GetError",
                "HAL_I2C_GetState",
                "HAL_I2C_Master_Transmit_IT",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ede": {
            "entrypoint": "0x08007ede",
            "current_name": "copy_data_to_buffer_08007ede",
            "code": "\n/* WARNING: Unknown calling convention */\n\ni2c_status_e_conflict copyDataToBuffer_08007ede(i2c_t_conflict *i2cObject,uint8_t *inputData,uint16_t dataSize)\n\n{\n  uint index;\n  \n  if (0x20 < dataSize) {\n    return I2C_ERROR;\n  }\n  for (index = 0; index < dataSize; index = index + 1 & 0xff) {\n    i2cObject->i2cTxRxBuffer[index] = inputData[index];\n    i2cObject->i2cTxRxBufferSize = i2cObject->i2cTxRxBufferSize + '\\x01';\n  }\n  return I2C_OK;\n}\n\n",
            "renaming": {
                "FUN_08007ede": "copy_data_to_buffer_08007ede",
                "obj": "i2cObject",
                "data": "inputData",
                "size": "dataSize",
                "uVar1": "index"
            },
            "calling": [
                "write",
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f0e": {
            "entrypoint": "0x08007f0e",
            "current_name": "receive_data_from_i2_c_master_08007f0e",
            "code": "\n/* WARNING: Unknown calling convention */\n\ni2c_status_e_conflict\nreceiveDataFromI2CMaster_08007f0e(i2c_t_conflict *i2cDevice,uint8_t deviceAddress,uint8_t *buffer,uint16_t bufferSize)\n\n{\n  HAL_I2C_StateTypeDef_conflict i2cState;\n  HAL_StatusTypeDef_conflict status;\n  uint32_t startTime;\n  uint32_t tickStart;\n  uint32_t currentTime;\n  uint elapsedTime;\n  i2c_status_e_conflict result;\n  I2C_HandleTypeDef_conflict *i2cHandle;\n  \n  startTime = HAL_GetTick();\n  elapsedTime = 0;\n  result = I2C_ERROR;\n  do {\n    i2cHandle = &i2cDevice->handle;\n    status = HAL_I2C_Master_Receive_IT(i2cHandle,(ushort)deviceAddress,buffer,bufferSize);\n    if (status == HAL_OK) {\n      result = I2C_OK;\n      while ((i2cState = HAL_I2C_GetState(i2cHandle), i2cState != HAL_I2C_STATE_READY && (result == I2C_OK))) {\n        currentTime = HAL_GetTick();\n        elapsedTime = currentTime - startTime;\n        if (elapsedTime < 0x65) {\n          currentTime = HAL_I2C_GetError(i2cHandle);\n          if (currentTime != 0) {\n            result = I2C_ERROR;\n          }\n        }\n        else {\n          result = I2C_TIMEOUT;\n        }\n      }\n    }\n    currentTime = HAL_I2C_GetError(i2cHandle);\n  } while ((currentTime == 4) && (elapsedTime < 100));\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08007f0e": "receive_data_from_i2_c_master_08007f0e",
                "obj": "i2cDevice",
                "dev_address": "deviceAddress",
                "data": "buffer",
                "size": "bufferSize",
                "HVar1": "i2cState",
                "HVar2": "status",
                "uVar3": "startTime",
                "tickstart": "tickStart",
                "uVar4": "currentTime",
                "uVar5": "elapsedTime",
                "iVar6": "result",
                "hi2c": "i2cHandle"
            },
            "calling": [
                "requestFrom"
            ],
            "called": [
                "HAL_I2C_GetError",
                "HAL_I2C_GetState",
                "HAL_GetTick",
                "HAL_I2C_Master_Receive_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f78": {
            "entrypoint": "0x08007f78",
            "current_name": "get_i2c_event_count_08007f78",
            "code": "\n/* WARNING: Unknown calling convention */\n\ni2c_data_type * get_i2c_event_count_08007f78(I2C_HandleTypeDef_conflict *i2c_handle)\n\n{\n  return (i2c_data_type *)&i2c_handle[-1].event_count;\n}\n\n",
            "renaming": {
                "FUN_08007f78": "get_i2c_event_count_08007f78",
                "hi2c": "i2c_handle",
                "i2c_t_conflict": "i2c_data_type",
                "EventCount": "event_count"
            },
            "calling": [
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "entrypoint": "0x08007f7c",
            "current_name": "set_slave_receive_callback_08007f7c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid set_slave_receive_callback_08007f7c(i2c_t_conflict *object,_func_void_uint8_t_ptr_int *callback_function)\n\n{\n  if (object != (i2c_t_conflict *)0x0) {\n    if (callback_function != (_func_void_uint8_t_ptr_int *)0x0) {\n      object->i2c_onSlaveReceive = callback_function;\n      HAL_I2C_EnableListen_IT(&object->handle);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f7c": "set_slave_receive_callback_08007f7c",
                "obj": "object",
                "function": "callback_function"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f8e": {
            "entrypoint": "0x08007f8e",
            "current_name": "initialize_object_and_enable_slave_transmit_08007f8e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeObjectAndEnableSlaveTransmit_08007f8e(i2c_t_conflict *object,_func_void *callbackFunction)\n\n{\n  if (object != (i2c_t_conflict *)0x0) {\n    if (callbackFunction != (_func_void *)0x0) {\n      object->onSlaveTransmit = callbackFunction;\n      enableListenInterrupt(&object->i2cHandle);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f8e": "initialize_object_and_enable_slave_transmit_08007f8e",
                "obj": "object",
                "function": "callbackFunction",
                "i2c_onSlaveTransmit": "onSlaveTransmit",
                "HAL_I2C_EnableListen_IT": "enableListenInterrupt",
                "handle": "i2cHandle"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007fa0": {
            "entrypoint": "0x08007fa0",
            "current_name": "handle_transfer_08007fa0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTransfer_08007fa0(I2C_HandleTypeDef_conflict *i2cHandle,uint8_t transferDirection,uint16_t addressMatchCode)\n\n{\n  i2c_t_conflict *i2cObj;\n  i2c_t_conflict *object;\n  \n  i2cObj = get_i2c_object(i2cHandle);\n  if ((uint)addressMatchCode == (i2cHandle->Init).OwnAddress1) {\n    if (transferDirection == '\\0') {\n      i2cObj->i2cTxRxBufferSize = '\\0';\n      i2cObj->slaveMode = '\\0';\n      if (i2cObj->i2c_onSlaveTransmit != (_func_void *)0x0) {\n        (*i2cObj->i2c_onSlaveTransmit)();\n      }\n      HAL_I2C_Slave_Sequential_Transmit_IT\n                (i2cHandle,i2cObj->i2cTxRxBuffer,(ushort)i2cObj->i2cTxRxBufferSize,8);\n      return;\n    }\n    i2cObj->slaveMode = '\\x01';\n    HAL_I2C_Slave_Sequential_Receive_IT(i2cHandle,i2cObj->i2cTxRxBuffer,0x20,8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007fa0": "handle_transfer_08007fa0",
                "hi2c": "i2cHandle",
                "TransferDirection": "transferDirection",
                "AddrMatchCode": "addressMatchCode",
                "piVar1": "i2cObj",
                "obj": "object"
            },
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_Slave_Sequential_Transmit_IT",
                "HAL_I2C_Slave_Sequential_Receive_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ff0": {
            "entrypoint": "0x08007ff0",
            "current_name": "enable_i2c_slave_receive_08007ff0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid enable_i2c_slave_receive_08007ff0(I2C_HandleTypeDef_conflict *i2c_handle)\n\n{\n  i2c_t_conflict *i2c_object;\n  i2c_t_conflict *i2c_object_iterator;\n  uint remaining_space;\n  \n  i2c_object = get_i2c_i2c_object_iterator(i2c_handle);\n  if (((i2c_object->i2c_onSlaveReceive != (_func_void_uint8_t_ptr_int *)0x0) &&\n      (i2c_object->slaveMode == '\\x01')) &&\n     (remaining_space = 0x20 - *(byte *)&(i2c_object->handle).XferSize & 0xff, remaining_space != 0)) {\n    (*i2c_object->i2c_onSlaveReceive)(i2c_object->i2cTxRxBuffer,remaining_space);\n  }\n  HAL_I2C_EnableListen_IT(i2c_handle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ff0": "enable_i2c_slave_receive_08007ff0",
                "hi2c": "i2c_handle",
                "piVar1": "i2c_object",
                "obj": "i2c_object_iterator",
                "uVar2": "remaining_space"
            },
            "calling": [
                "I2C_ITError",
                "I2C_Slave_AF",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008020": {
            "entrypoint": "0x08008020",
            "current_name": "enable_listen_interrupt_08008020",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid enableListenInterrupt_08008020(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  i2c_t_conflict *i2cObject;\n  i2c_t_conflict *i2cObjectTemp;\n  \n  i2cObject = getI2cObject(i2cHandle);\n  if (i2cObject->isMaster == '\\0') {\n    HAL_I2C_EnableListen_IT(i2cHandle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008020": "enable_listen_interrupt_08008020",
                "hi2c": "i2cHandle",
                "piVar1": "i2cObject",
                "get_i2c_obj": "getI2cObject",
                "obj": "i2cObjectTemp"
            },
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008038": {
            "entrypoint": "0x08008038",
            "current_name": "handle_i2_c_event_08008038",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CEvent_08008038(void)\n\n{\n  HAL_I2C_EV_IRQHandler(ptr_i2cHandles);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008038": "handle_i2_c_event_08008038",
                "i2c_handles": "ptr_i2cHandles"
            },
            "calling": [],
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008048": {
            "entrypoint": "0x08008048",
            "current_name": "handle_i2c_error_08008048",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2cError_08008048(void)\n\n{\n  HAL_I2C_ER_IRQHandler(i2cHandles);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008048": "handle_i2c_error_08008048",
                "i2c_handles": "i2cHandles"
            },
            "calling": [],
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008058": {
            "entrypoint": "0x08008058",
            "current_name": "handle_i2_c2_error_08008058",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2C2Error_08008058(void)\n\n{\n  HAL_I2C_EV_IRQHandler(i2c2ErrorHandler);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008058": "handle_i2_c2_error_08008058",
                "I2C2_ER_IRQHandler::handle": "i2c2ErrorHandler"
            },
            "calling": [],
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008068": {
            "entrypoint": "0x08008068",
            "current_name": "i2c_error_handler_08008068",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid i2cErrorHandler_08008068(void)\n\n{\n  HAL_I2C_ER_IRQHandler(i2cErrorHandle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008068": "i2c_error_handler_08008068",
                "I2C2_ER_IRQHandler::handle": "i2cErrorHandle"
            },
            "calling": [],
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008078": {
            "entrypoint": "0x08008078",
            "current_name": "initialize_serial_object_08008078",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerialObject_08008078(serial_t *serialObj)\n\n{\n  void *a;\n  USART_TypeDef *uart_tx;\n  void *b;\n  USART_TypeDef *uart_rx;\n  USART_TypeDef *selected_peripheral;\n  GPIO_TypeDef *selected_GPIO_port;\n  GPIO_TypeDef *GPIO_port;\n  uint32_t pinmap_function_output;\n  uint32_t tmpreg_4;\n  uint32_t tmpreg_5;\n  uint32_t tmpreg_6;\n  uint32_t tmpreg_7;\n  uint32_t tmpreg_8;\n  uint32_t tmpreg_9;\n  uint32_t tmpreg_10;\n  uint32_t tmpreg_11;\n  uint32_t tmpreg_12;\n  uint32_t tmpreg_13;\n  uint32_t tmpreg_14;\n  uint32_t tmpreg_15;\n  uint32_t tmpreg_16;\n  UART_HandleTypeDef *uart_handle;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  GPIO_InitTypeDef GPIO_init_struct;\n  \n  if (serialObj != (serial_t *)0x0) {\n    a = pinmap_peripheral(serialObj->pin_tx,(PinMap_conflict *)&PinMap_UART_TX);\n    b = pinmap_peripheral(serialObj->pin_rx,(PinMap_conflict *)&PinMap_UART_RX);\n    if ((b == (void *)0x0) || (a == (void *)0x0)) {\n      iprintf(\"ERROR: at least one UART pin has no peripheral\\n\");\n    }\n    else {\n      selected_peripheral = (USART_TypeDef *)pinmap_merge_peripheral(a,b);\n      serialObj->uart = selected_peripheral;\n      if (selected_peripheral == (USART_TypeDef *)0x0) {\n        iprintf(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (selected_peripheral == (USART_TypeDef *)0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          serialObj->index = '\\0';\n          serialObj->irq = USART1_IRQn;\n        }\n        else if (selected_peripheral == (USART_TypeDef *)0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          serialObj->index = '\\x01';\n          serialObj->irq = USART2_IRQn;\n        }\n        else if (selected_peripheral == (USART_TypeDef *)0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          serialObj->index = '\\x02';\n          serialObj->irq = USART3_IRQn;\n        }\n        selected_GPIO_port = set_GPIO_Port_Clock((uint)((int)serialObj->pin_rx << 0x18) >> 0x1c);\n        pinmap_function_output = pinmap_function(serialObj->pin_rx,(PinMap_conflict *)&PinMap_UART_RX);\n        GPIO_init_struct.Pin = 1 << (serialObj->pin_rx & 0xfU) & 0xffff;\n        GPIO_init_struct.Mode = (pinmap_function_output >> 3 & 1) << 4 | pinmap_function_output & 7;\n        GPIO_init_struct.Pull = (pinmap_function_output << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((pinmap_function_output << 0x11) >> 0x19) {\n        case 1:\n          tmpreg_13 = tmpreg_13 | 0x7000001;\n          break;\n        case 2:\n          tmpreg_13 = tmpreg_13 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          tmpreg_13 = tmpreg_13 | 0x7000002;\n          break;\n        case 4:\n          tmpreg_13 = tmpreg_13 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          tmpreg_13 = tmpreg_13 | 0x7000004;\n          break;\n        case 6:\n          tmpreg_13 = tmpreg_13 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          tmpreg_13 = tmpreg_13 | 0x7000008;\n          break;\n        case 8:\n          tmpreg_13 = tmpreg_13 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          tmpreg_13 = tmpreg_13 | 0x7000030;\n          break;\n        case 10:\n          tmpreg_4 = tmpreg_13 & 0xffffffcf;\n          tmpreg_13 = tmpreg_4 | 0x7000010;\n          break;\n        case 0xb:\n          tmpreg_5 = tmpreg_13 & 0xffffffcf;\n          tmpreg_13 = tmpreg_5 | 0x7000000;\n          break;\n        case 0xc:\n          tmpreg_13 = tmpreg_13 | 0x70000c0;\n          break;\n        case 0xd:\n          tmpreg_6 = tmpreg_13 & 0xffffff3f;\n          tmpreg_13 = tmpreg_6 | 0x7000040;\n          break;\n        case 0xe:\n          tmpreg_7 = tmpreg_13 & 0xffffff3f;\n          tmpreg_13 = tmpreg_7 | 0x7000000;\n          break;\n        case 0xf:\n          tmpreg_13 = tmpreg_13 | 0x7000300;\n          break;\n        case 0x10:\n          tmpreg_8 = tmpreg_13 & 0xfffffcff;\n          tmpreg_13 = tmpreg_8 | 0x7000200;\n          break;\n        case 0x11:\n          tmpreg_9 = tmpreg_13 & 0xfffffcff;\n          tmpreg_13 = tmpreg_9 | 0x7000100;\n          break;\n        case 0x12:\n          tmpreg_10 = tmpreg_13 & 0xfffffcff;\n          tmpreg_13 = tmpreg_10 | 0x7000000;\n          break;\n        case 0x13:\n          tmpreg_13 = tmpreg_13 | 0x7000c00;\n          break;\n        case 0x14:\n          tmpreg_11 = tmpreg_13 & 0xfffff3ff;\n          tmpreg_13 = tmpreg_11 | 0x7000800;\n          break;\n        case 0x15:\n          tmpreg_12 = tmpreg_13 & 0xfffff3ff;\n          tmpreg_13 = tmpreg_12 | 0x7000000;\n          break;\n        case 0x16:\n          tmpreg_13 = tmpreg_13 | 0x7001000;\n          break;\n        case 0x17:\n          tmpreg_13 = tmpreg_13 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          tmpreg_13 = tmpreg_13 | 0x7008000;\n          break;\n        case 0x1c:\n          tmpreg_13 = tmpreg_13 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          tmpreg_13 = tmpreg_13 & 0xf8ffffff;\n          break;\n        case 0x22:\n          tmpreg_14 = tmpreg_13 & 0xf8ffffff;\n          tmpreg_13 = tmpreg_14 | 0x1000000;\n          break;\n        case 0x23:\n          tmpreg_15 = tmpreg_13 & 0xf8ffffff;\n          tmpreg_13 = tmpreg_15 | 0x2000000;\n          break;\n        case 0x24:\n          tmpreg_16 = tmpreg_13 & 0xf8ffffff;\n          tmpreg_13 = tmpreg_16 | 0x4000000;\n        }\n        GPIO_init_struct.Speed = 3;\n        HAL_GPIO_Init(selected_GPIO_port,&GPIO_init_struct);\n        selected_GPIO_port = set_GPIO_Port_Clock((uint)((int)serialObj->pin_tx << 0x18) >> 0x1c);\n        pinmap_function_output = pinmap_function(serialObj->pin_tx,(PinMap_conflict *)&PinMap_UART_TX);\n        GPIO_init_struct.Pin = 1 << (serialObj->pin_tx & 0xfU) & 0xffff;\n        GPIO_init_struct.Mode = (pinmap_function_output >> 3 & 1) << 4 | pinmap_function_output & 7;\n        GPIO_init_struct.Pull = (pinmap_function_output << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(selected_GPIO_port,&GPIO_init_struct);\n        uart_handlers[serialObj->index] = &serialObj->handle;\n        (serialObj->handle).Instance = serialObj->uart;\n        (serialObj->handle).Init.BaudRate = serialObj->baudrate;\n        (serialObj->handle).Init.WordLength = serialObj->databits;\n        (serialObj->handle).Init.StopBits = serialObj->stopbits;\n        (serialObj->handle).Init.Parity = serialObj->parity;\n        (serialObj->handle).Init.Mode = 0xc;\n        (serialObj->handle).Init.HwFlowCtl = 0;\n        (serialObj->handle).Init.OverSampling = 0;\n        HAL_UART_Init(&serialObj->handle);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008078": "initialize_serial_object_08008078",
                "obj": "serialObj",
                "pUVar1": "selected_peripheral",
                "pGVar2": "selected_GPIO_port",
                "port": "GPIO_port",
                "uVar3": "pinmap_function_output",
                "huart": "uart_handle",
                "GPIO_InitStruct": "GPIO_init_struct"
            },
            "calling": [
                "uart_debug_init",
                "begin"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "pinmap_function",
                "HAL_UART_Init",
                "pinmap_peripheral",
                "pinmap_merge_peripheral",
                "HAL_GPIO_Init",
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080084b0": {
            "entrypoint": "0x080084b0",
            "current_name": "initialize_uart_080084b0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeUART_080084b0(void)\n\n{\n  void *peripheralPointer;\n  \n  peripheralPointer = findPeripheral(pinPA2,(conflictingPinMap *)&txPin);\n  if (peripheralPointer != (void *)0x0) {\n    peripheralPointer = findPeripheral(pinPA2,(conflictingPinMap *)&txPin);\n    debugSerial.pin_rx = findPin(peripheralPointer,(conflictingPinMap *)&rxPin);\n    debugSerial.pin_tx = pinPA2;\n    debugSerial.baudrate = 0x2580;\n    debugSerial.parity = 0;\n    debugSerial.databits = 0;\n    debugSerial.stopbits = 0;\n    initializeUART_080084b0(&debugSerial);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080084b0": "initialize_uart_080084b0",
                "pvVar1": "peripheralPointer",
                "pinmap_peripheral": "findPeripheral",
                "PA_2": "pinPA2",
                "PinMap_conflict": "conflictingPinMap",
                "&PinMap_UART_TX": "&txPin",
                "serial_debug": "debugSerial",
                "pinmap_pin": "findPin",
                "&PinMap_UART_RX": "&rxPin",
                "uart_init": "initializeUART"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "uart_init",
                "pinmap_pin",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008500": {
            "entrypoint": "0x08008500",
            "current_name": "transmit_data_08008500",
            "code": "\n/* WARNING: Unknown calling convention */\n\ndataSize_t transmitData_08008500(uint8_t *dataBuffer,uint32_t dataSize)\n\n{\n  HAL_StatusTypeDef_conflict transmitStatus;\n  uint32_t startTime;\n  uint32_t tickstart;\n  void *uartPeripheral;\n  USART_TypeDef *uartInstance;\n  uint32_t currentTime;\n  uint uartIndex;\n  \n  startTime = HAL_GetTick();\n  uartPeripheral = pinmap_peripheral(PA_2,(PinMap_conflict *)&PinMap_UART_TX);\n  if (uartPeripheral == (void *)0x0) {\n    return 0;\n  }\n  uartIndex = 0;\n  while ((uartIndex < 5 &&\n         ((uart_handlers[uartIndex] == (UART_HandleTypeDef *)0x0 ||\n          (uartInstance = (USART_TypeDef *)pinmap_peripheral(PA_2,(PinMap_conflict *)&PinMap_UART_TX),\n          uart_handlers[uartIndex]->Instance != uartInstance))))) {\n    uartIndex = uartIndex + 1 & 0xff;\n  }\n  if (4 < uartIndex) {\n    if ((4 < serial_debug.index) && (uart_debug_init(), 4 < serial_debug.index)) {\n      return 0;\n    }\n    uartIndex = (uint)serial_debug.index;\n  }\n  do {\n    transmitStatus = HAL_UART_Transmit(uart_handlers[uartIndex],dataBuffer,(uint16_t)dataSize,1000);\n    if (transmitStatus == HAL_OK) {\n      return dataSize;\n    }\n    currentTime = HAL_GetTick();\n  } while (currentTime - startTime < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008500": "transmit_data_08008500",
                "data": "dataBuffer",
                "size": "dataSize",
                "HVar1": "transmitStatus",
                "uVar2": "startTime",
                "pvVar3": "uartPeripheral",
                "pUVar4": "uartInstance",
                "uVar5": "currentTime",
                "uVar6": "uartIndex"
            },
            "calling": [
                "_write"
            ],
            "called": [
                "HAL_UART_Transmit",
                "uart_debug_init",
                "pinmap_peripheral",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085b8": {
            "entrypoint": "0x080085b8",
            "current_name": "check_uart_state_080085b8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t check_uart_state_080085b8(serial_t *serial_object)\n\n{\n  HAL_UART_StateTypeDef uart_state;\n  \n  uart_state = HAL_UART_GetState(uart_handlers[serial_object->index]);\n  return (uart_state & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_080085b8": "check_uart_state_080085b8",
                "obj": "serial_object",
                "HVar1": "uart_state"
            },
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085dc": {
            "entrypoint": "0x080085dc",
            "current_name": "check_uart_state_080085dc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t check_uart_state_080085dc(serial_t *serial_object)\n\n{\n  HAL_UART_StateTypeDef uart_state;\n  \n  uart_state = HAL_UART_GetState(uart_handler_array[serial_object->index]);\n  return (uart_state & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080085dc": "check_uart_state_080085dc",
                "obj": "serial_object",
                "HVar1": "uart_state",
                "uart_handlers": "uart_handler_array"
            },
            "calling": [
                "write"
            ],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008600": {
            "entrypoint": "0x08008600",
            "current_name": "extract_data_08008600",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint extractData_08008600(serial_t *serialObject,uchar *c)\n\n{\n  uint8_t isRxActive;\n  \n  if (serialObject == (serial_t *)0x0) {\n    return -1;\n  }\n  isRxActive = serial_rx_active(serialObject);\n  if (isRxActive == '\\0') {\n    *c = serialObject->recv;\n    HAL_UART_Receive_IT(uart_handlers[serialObject->index],&serialObject->recv,1);\n    return 0;\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_08008600": "extract_data_08008600",
                "obj": "serialObject",
                "uVar1": "isRxActive"
            },
            "calling": [
                "_rx_complete_irq"
            ],
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800863c": {
            "entrypoint": "0x0800863c",
            "current_name": "initialize_serial_listener_0800863c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerialListener_0800863c(serial_t *serialObject,_func_void_serial_t_ptr *serialFunctionCallback)\n\n{\n  byte byteVar;\n  uint8_t rxStatus;\n  \n  if (serialObject != (serial_t *)0x0) {\n    rxStatus = isSerialRxActive(serialObject);\n    if (rxStatus == '\\0') {\n      byteVar = serialObject->index;\n      rxCallbackArray[byteVar] = serialFunctionCallback;\n      rxCallbackObjectArray[byteVar] = serialObject;\n      setPriority(serialObject->irq,0,1);\n      enableIRQ(serialObject->irq);\n      receiveUartData(uart_handlers[serialObject->index],&serialObject->recv,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800863c": "initialize_serial_listener_0800863c",
                "obj": "serialObject",
                "callback": "serialFunctionCallback",
                "bVar1": "byteVar",
                "uVar2": "rxStatus",
                "serial_rx_active": "isSerialRxActive",
                "rx_callback": "rxCallbackArray",
                "rx_callback_obj": "rxCallbackObjectArray",
                "HAL_NVIC_SetPriority": "setPriority",
                "HAL_NVIC_EnableIRQ": "enableIRQ",
                "HAL_UART_Receive_IT": "receiveUartData"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008694": {
            "entrypoint": "0x08008694",
            "current_name": "transmit_data_08008694",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid transmitData_08008694(serial_t *serialObject,_func_int_serial_t_ptr *callbackFunction)\n\n{\n  byte byteValue;\n  \n  if (serialObject != (serial_t *)0x0) {\n    byteValue = serialObject->index;\n    tx_callbackFunction[byteValue] = callbackFunction;\n    tx_callbackFunction_serialObject[byteValue] = serialObject;\n    HAL_NVIC_SetPriority(serialObject->irq,0,2);\n    HAL_NVIC_EnableIRQ(serialObject->irq);\n    HAL_UART_Transmit_IT(uart_handlers[serialObject->index],serialObject->tx_buff + serialObject->tx_tail,1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008694": "transmit_data_08008694",
                "obj": "serialObject",
                "callback": "callbackFunction",
                "bVar1": "byteValue"
            },
            "calling": [
                "write"
            ],
            "called": [
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080086e8": {
            "entrypoint": "0x080086e8",
            "current_name": "get_uart_handler_index_080086e8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t get_uart_handler_index_080086e8(UART_HandleTypeDef *uart_handler)\n\n{\n  uint index;\n  \n  if (uart_handler == (UART_HandleTypeDef *)0x0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return (uint8_t)index;\n      }\n      if (uart_handler == uart_handlers[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return (uint8_t)index;\n}\n\n",
            "renaming": {
                "FUN_080086e8": "get_uart_handler_index_080086e8",
                "huart": "uart_handler",
                "uVar1": "index"
            },
            "calling": [
                "HAL_UART_RxCpltCallback",
                "HAL_UART_TxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800870c": {
            "entrypoint": "0x0800870c",
            "current_name": "process_uart_data_0800870c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid process_uart_data_0800870c(UART_HandleTypeDef *uart_handle)\n\n{\n  byte index;\n  uint8_t index;\n  uint converted_index;\n  \n  index = uart_index(uart_handle);\n  converted_index = (uint)index;\n  if (converted_index < 5) {\n    (*rx_callback[converted_index])(rx_callback_obj[converted_index]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800870c": "process_uart_data_0800870c",
                "huart": "uart_handle",
                "bVar1": "index",
                "uVar2": "converted_index"
            },
            "calling": [
                "UART_Receive_IT"
            ],
            "called": [
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008730": {
            "entrypoint": "0x08008730",
            "current_name": "transmit_one_byte_08008730",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid transmitOneByte_08008730(UART_HandleTypeDef *uartHandler)\n\n{\n  byte uartIndex;\n  uint8_t serialIndex;\n  int callbackResult;\n  serial_t *serialObj;\n  serial_t *callbackObj;\n  uint serialIndex;\n  \n  uartIndex = uart_serialIndex(uartHandler);\n  serialIndex = (uint)uartIndex;\n  callbackObj = tx_callback_serialObj[serialIndex];\n  if ((serialIndex < 5) && (callbackResult = (*tx_callback[serialIndex])(callbackObj), callbackResult != -1)) {\n    HAL_UART_Transmit_IT(uart_handlers[callbackObj->serialIndex],callbackObj->tx_buff + callbackObj->tx_tail,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008730": "transmit_one_byte_08008730",
                "huart": "uartHandler",
                "bVar1": "uartIndex",
                "index": "serialIndex",
                "iVar3": "callbackResult",
                "obj": "serialObj",
                "psVar4": "callbackObj",
                "uVar2": "serialIndex"
            },
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "called": [
                "HAL_UART_Transmit_IT",
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800877c": {
            "entrypoint": "0x0800877c",
            "current_name": "initialize_uart_0800877c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_UART_0800877c(UART_HandleTypeDef *uart_interface)\n\n{\n  uint32_t temporary_value;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_0800877c": "initialize_uart_0800877c",
                "huart": "uart_interface",
                "tmpval": "temporary_value"
            },
            "calling": [
                "UART_DMAAbortOnError",
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080087bc": {
            "entrypoint": "0x080087bc",
            "current_name": "handle_uart1_interrupt_080087bc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_UART1_interrupt_080087bc(void)\n\n{\n  clear_pending_interrupt(UART1_interrupt_number);\n  handle_UART_interrupt(uart_interrupt_handlers[0]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080087bc": "handle_uart1_interrupt_080087bc",
                "USART1_IRQn": "UART1_interrupt_number",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_interrupt",
                "HAL_UART_IRQHandler": "handle_UART_interrupt",
                "uart_handlers": "uart_interrupt_handlers"
            },
            "calling": [],
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080087d4": {
            "entrypoint": "0x080087d4",
            "current_name": "handle_usart2_interrupt_080087d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_USART2_interrupt_080087d4(void)\n\n{\n  clear_pending_IRQ(interrupt_source_USART2);\n  handle_UART_IRQ(UART_handlers[1]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080087d4": "handle_usart2_interrupt_080087d4",
                "USART2_IRQn": "interrupt_source_USART2",
                "uart_handlers": "UART_handlers",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_IRQ",
                "HAL_UART_IRQHandler": "handle_UART_IRQ"
            },
            "calling": [],
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080087ec": {
            "entrypoint": "0x080087ec",
            "current_name": "handle_usart3_interrupt_080087ec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_USART3_interrupt_080087ec(void)\n\n{\n  HAL_NVIC_ClearPendingIRQ(USART3_IRQn);\n  if (uart_handlers[2] != (UART_HandleTypeDef *)0x0) {\n    HAL_UART_IRQHandler(uart_handlers[2]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080087ec": "handle_usart3_interrupt_080087ec"
            },
            "calling": [],
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008804": {
            "entrypoint": "0x08008804",
            "current_name": "expand_heap_08008804",
            "code": "\nvoid * expandHeap_08008804(intptr_t delta)\n\n{\n  char *currentHeapEnd;\n  char *previousHeapEnd;\n  \n  if (_sbrk::heap_end == (char *)0x0) {\n    _sbrk::heap_end = &_ebss;\n  }\n  currentHeapEnd = _sbrk::heap_end;\n  if (_sbrk::heap_end + delta <= &stack0x00000000) {\n    _sbrk::heap_end = _sbrk::heap_end + delta;\n    return currentHeapEnd;\n  }\n  errno = 0xc;\n  return (void *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008804": "expand_heap_08008804",
                "__delta": "delta",
                "pcVar1": "currentHeapEnd",
                "prev_heap_end": "previousHeapEnd"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008840": {
            "entrypoint": "0x08008840",
            "current_name": "check_file_validity_08008840",
            "code": "\nint check_file_validity_08008840(int file_descriptor)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_08008840": "check_file_validity_08008840",
                "__fd": "file_descriptor"
            },
            "calling": [
                "_close_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008846": {
            "entrypoint": "0x08008846",
            "current_name": "set_device_type_08008846",
            "code": "\nint setDeviceType_08008846(int fileDescriptor,stat *fileStats)\n\n{\n  *(undefined4 *)((int)&fileStats->st_dev + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008846": "set_device_type_08008846",
                "__fd": "fileDescriptor",
                "__buf": "fileStats"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008850": {
            "entrypoint": "0x08008850",
            "current_name": "check_file_descriptor_08008850",
            "code": "\nint check_file_descriptor_08008850(int file_descriptor)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008850": "check_file_descriptor_08008850",
                "__fd": "file_descriptor"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008854": {
            "entrypoint": "0x08008854",
            "current_name": "get_file_offset_08008854",
            "code": "\n__off_t get_file_offset_08008854(int file_descriptor,__off_t offset,int whence)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008854": "get_file_offset_08008854",
                "__fd": "file_descriptor",
                "__offset": "offset",
                "__whence": "whence"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008858": {
            "entrypoint": "0x08008858",
            "current_name": "count_and_return_zero_08008858",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint count_and_return_zero_08008858(int input_file,char *data_pointer,int data_length)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008858": "count_and_return_zero_08008858",
                "file_UNUSED": "input_file",
                "ptr_UNUSED": "data_pointer",
                "len_UNUSED": "data_length"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800885c": {
            "entrypoint": "0x0800885c",
            "current_name": "write_to_uart_debug_0800885c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint write_to_uart_debug_0800885c(int file_descriptor,char *data_pointer,int data_length)\n\n{\n  size_t bytes_written;\n  \n  bytes_written = uart_debug_write((uint8_t *)data_pointer,data_length);\n  return bytes_written;\n}\n\n",
            "renaming": {
                "FUN_0800885c": "write_to_uart_debug_0800885c",
                "file_UNUSED": "file_descriptor",
                "ptr": "data_pointer",
                "len": "data_length",
                "sVar1": "bytes_written"
            },
            "calling": [
                "_write_r"
            ],
            "called": [
                "uart_debug_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008868": {
            "entrypoint": "0x08008868",
            "current_name": "infinite_loop_08008868",
            "code": "\nvoid infiniteLoop_08008868(int status)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008868": "infinite_loop_08008868",
                "__status": "status"
            },
            "calling": [
                "_exit",
                "abort"
            ],
            "called": [
                "_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800886c": {
            "entrypoint": "0x0800886c",
            "current_name": "set_errno_0800886c",
            "code": "\nint setErrno_0800886c(processId_t processId,int signalNumber)\n\n{\n  errno = 0x16;\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_0800886c": "set_errno_0800886c",
                "__pid": "processId",
                "__sig": "signalNumber"
            },
            "calling": [
                "_kill_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800887c": {
            "entrypoint": "0x0800887c",
            "current_name": "get_process_id_0800887c",
            "code": "\n\n\nProcessID getProcessID_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800887c": "get_process_id_0800887c",
                "__pid_t": "ProcessID"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008880": {
            "entrypoint": "0x08008880",
            "current_name": "get_pin_value_08008880",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getPinValue_08008880(uint32_t pinNumber)\n\n{\n  bool isWithinRange;\n  PinName_conflict pin;\n  uint16_t adcValue;\n  uint32_t convertedValue;\n  \n  if (pinNumber < 0xe) {\n    if (pinNumber + 0x2e < 0x3c) {\n      isWithinRange = true;\n    }\n    else {\n      isWithinRange = false;\n    }\n  }\n  else {\n    isWithinRange = pinNumber < 0x3c;\n  }\n  if (isWithinRange) {\n    if (pinNumber < 0xe) {\n      pinNumber = pinNumber + 0x2e;\n    }\n    pin = (&digitalPin)[pinNumber];\n  }\n  else {\n    pin = NC;\n  }\n  if (pin == NC) {\n    convertedValue = 0;\n  }\n  else {\n    adcValue = adc_read_value(pin);\n    convertedValue = (uint32_t)adcValue;\n    if (_readResolution != 0xc) {\n      if ((uint)_readResolution < 0xc) {\n        return (uint)(adcValue >> (0xcU - _readResolution & 0xff));\n      }\n      return convertedValue << (_readResolution - 0xcU & 0xff);\n    }\n  }\n  return convertedValue;\n}\n\n",
            "renaming": {
                "FUN_08008880": "get_pin_value_08008880",
                "ulPin": "pinNumber",
                "bVar1": "isWithinRange",
                "p": "pin",
                "uVar2": "adcValue",
                "uVar3": "convertedValue"
            },
            "calling": [
                "loop",
                "reportAnalogCallback"
            ],
            "called": [
                "adc_read_value"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088e0": {
            "entrypoint": "0x080088e0",
            "current_name": "configure_pin_for_pwm_080088e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configurePinForPWM_080088e0(uint32_t pinNumber,uint32_t pinValue)\n\n{\n  _Bool isPWMSupported;\n  PinName_conflict pinConfiguration;\n  \n  if (pinNumber < 0x3c) {\n    pinConfiguration = (&digitalPins)[pinNumber];\n  }\n  else {\n    pinConfiguration = notConnected;\n  }\n  if (pinConfiguration != notConnected) {\n    isPWMSupported = isPinInPinmap(pinConfiguration,(PinMapinConfiguration_conflict *)&UMnotConnectedJIFGSB);\n    if (isPWMSupported) {\n      isPWMSupported = isPinConfigured(pinConfiguration,g_anOutpinConfigurationutPinConfigured);\n      if (!isPWMSupported) {\n        setPinConfigured(pinConfiguration,g_anOutpinConfigurationutPinConfigured);\n      }\n      if (writeResolution != 8) {\n        if ((uint)writeResolution < 9) {\n          pinValue = pinValue << (8U - writeResolution & 0xff);\n        }\n        else {\n          pinValue = pinValue >> (writeResolution - 8U & 0xff);\n        }\n      }\n      startPWM(pinConfiguration,0x3e418,0xff,pinValue,!isPWMSupported);\n    }\n    else {\n      notConnectedGCJZHOTT(pinNumber,1);\n      if (writeResolution != 8) {\n        if ((uint)writeResolution < 9) {\n          pinValue = pinValue << (8U - writeResolution & 0xff);\n        }\n        else {\n          pinValue = pinValue >> (writeResolution - 8U & 0xff);\n        }\n      }\n      if (pinValue < 0x80) {\n        writeDigitalValue(pinNumber,0);\n      }\n      else {\n        writeDigitalValue(pinNumber,1);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088e0": "configure_pin_for_pwm_080088e0",
                "ulPin": "pinNumber",
                "ulValue": "pinValue",
                "_Var1": "isPWMSupported",
                "p": "pinConfiguration",
                "digitalPin": "digitalPins",
                "NC": "notConnected",
                "pin_in_pinmap": "isPinInPinmap",
                "PinMap_PWM": "PWM_PinMap",
                "is_pin_configured": "isPinConfigured",
                "set_pin_configured": "setPinConfigured",
                "_writeResolution": "writeResolution",
                "pwm_start": "startPWM",
                "pinMode": "setPinMode",
                "digitalWrite": "writeDigitalValue"
            },
            "calling": [
                "analogWriteCallback",
                "setPinModeCallback"
            ],
            "called": [
                "digitalWrite",
                "is_pin_configured",
                "pin_in_pinmap",
                "set_pin_configured",
                "pwm_start",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008990": {
            "entrypoint": "0x08008990",
            "current_name": "configure_pin_08008990",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configurePin_08008990(uint32_t pinNumber,uint32_t pinMode)\n\n{\n  bool _Var1;\n  PinName p;\n  \n  if (pinNumber < 0x3c) {\n    p = (pinArray)[pinNumber];\n  }\n  else {\n    p = NotConnected;\n  }\n  if (p != NotConnected) {\n    _Var1 = isPinConfigured(p,outputPinConfiguredArray);\n    if (_Var1) {\n      _Var1 = isPinInPinMap(p,(PinMap *)pwmPinMap);\n      if (_Var1) {\n        stopPWM(p);\n      }\n      resetPinConfigured(p,outputPinConfiguredArray);\n    }\n    switch(pinMode) {\n    case 0:\n      initializeDigitalIO(p,0,0);\n      break;\n    case 1:\n      initializeDigitalIO(p,1,0);\n      break;\n    case 2:\n      initializeDigitalIO(p,0,1);\n      break;\n    case 3:\n      initializeDigitalIO(p,0,2);\n    }\n    setPinConfigured(p,digPinConfigured);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008990": "configure_pin_08008990",
                "ulPin": "pinNumber",
                "ulMode": "pinMode",
                "_Bool": "bool",
                "PinName_conflict": "PinName",
                "&digitalPin": "pinArray",
                "NC": "NotConnected",
                "is_pin_configured": "isPinConfigured",
                "g_anOutputPinConfigured": "outputPinConfiguredArray",
                "pin_in_pinmap": "isPinInPinMap",
                "PinMap_conflict": "PinMap",
                "&PinMap_PWM": "pwmPinMap",
                "pwm_stop": "stopPWM",
                "reset_pin_configured": "resetPinConfigured",
                "digital_io_init": "initializeDigitalIO",
                "set_pin_configured": "setPinConfigured",
                "g_digPinConfigured": "digPinConfigured"
            },
            "calling": [
                "digitalWriteCallback",
                "blinkVersion",
                "attach",
                "setPinModeCallback",
                "analogWrite"
            ],
            "called": [
                "digital_io_init",
                "is_pin_configured",
                "pin_in_pinmap",
                "pwm_stop",
                "set_pin_configured",
                "reset_pin_configured"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a24": {
            "entrypoint": "0x08008a24",
            "current_name": "configure_pin_08008a24",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configurePin_08008a24(uint32_t pinNumber,uint32_t pinValue)\n\n{\n  _Bool isConfigured;\n  GPIO_TypinNameeDef *gpioPort;\n  PinName_conflict pinName;\n  uint mappedPin;\n  \n  if (pinNumber < 0x3c) {\n    mappedPin = (uint)(char)(&digitalPin)[pinNumber];\n  }\n  else {\n    mappedPin = 0xffffffff;\n  }\n  if ((mappedPin != 0xffffffff) &&\n     (isConfigured = is_pinNamein_configured((PinName_conflict)mappedPin,g_digPinConfigured), isConfigured)) {\n    gpioPort = get_GPIO_Port((mappedPin << 0x18) >> 0x1c);\n    digital_io_write(gpioPort,1 << (mappedPin & 0xf) & 0xffff,pinValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008a24": "configure_pin_08008a24",
                "ulPin": "pinNumber",
                "ulVal": "pinValue",
                "_Var1": "isConfigured",
                "port": "gpioPort",
                "p": "pinName",
                "uVar2": "mappedPin"
            },
            "calling": [
                "digitalWriteCallback",
                "setPinValueCallback",
                "strobeBlinkPin",
                "ServoIrqHandle",
                "setPinModeCallback",
                "analogWrite"
            ],
            "called": [
                "get_GPIO_Port",
                "is_pin_configured",
                "digital_io_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "pin_status_08008a6c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint pinStatus_08008a6c(uint32_t pin)\n\n{\n  _Bool isConfigured;\n  GPIO_TypinNameConflicteDef *gpioPort;\n  uint32_t ioReadResult;\n  PinName_conflict pinNameConflict;\n  uint mappedPin;\n  \n  if (pin < 0x3c) {\n    mappedPin = (uint)(char)(&digitalPin)[pin];\n  }\n  else {\n    mappedPin = 0xffffffff;\n  }\n  if (mappedPin == 0xffffffff) {\n    mappedPin = 0;\n  }\n  else {\n    isConfigured = is_pinNameConflictin_configured((PinName_conflict)mappedPin,g_digPinConfigured);\n    if (isConfigured) {\n      gpioPort = get_GPIO_Port((mappedPin << 0x18) >> 0x1c);\n      ioReadResult = digital_io_read(gpioPort,1 << (mappedPin & 0xf) & 0xffff);\n      mappedPin = ioReadResult & 0xff;\n    }\n    else {\n      mappedPin = 0;\n    }\n  }\n  if (mappedPin != 0) {\n    mappedPin = 1;\n  }\n  return mappedPin;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "pin_status_08008a6c",
                "ulPin": "pin",
                "_Var1": "isConfigured",
                "port": "gpioPort",
                "uVar2": "ioReadResult",
                "p": "pinNameConflict",
                "uVar3": "mappedPin"
            },
            "calling": [
                "checkDigitalInputs",
                "reportDigitalCallback"
            ],
            "called": [
                "get_GPIO_Port",
                "is_pin_configured",
                "digital_io_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008abc": {
            "entrypoint": "0x08008abc",
            "current_name": "get_current_milli_08008abc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t get_current_milli_08008abc(void)\n\n{\n  uint32_t current_milli;\n  \n  current_milli = GetCurrentMilli();\n  return current_milli;\n}\n\n",
            "renaming": {
                "FUN_08008abc": "get_current_milli_08008abc",
                "uVar1": "current_milli"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "GetCurrentMilli"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac4": {
            "entrypoint": "0x08008ac4",
            "current_name": "FUNC_08008ac4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08008ac4(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "calling": [
                "blinkVersion",
                "strobeBlinkPin"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac6": {
            "entrypoint": "0x08008ac6",
            "current_name": "update_tx_tail_08008ac6",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint HardwareSerial::updateTxTail_08008ac6(serial_t_conflict *serialObj)\n\n{\n  ushort newTxTail;\n  uint16_t updatedTxTail;\n  int txTailIncremented;\n  \n  txTailIncremented = serialObj->tx_tail + 1;\n  newTxTail = (ushort)txTailIncremented;\n  updatedTxTail = newTxTail & 0x7f;\n  if (txTailIncremented == 0) {\n    updatedTxTail = -(-newTxTail & 0x7f);\n  }\n  serialObj->tx_tail = updatedTxTail;\n  if (serialObj->tx_head != serialObj->tx_tail) {\n    return 0;\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_08008ac6": "update_tx_tail_08008ac6",
                "obj": "serialObj",
                "uVar1": "newTxTail",
                "uVar2": "updatedTxTail",
                "iVar3": "txTailIncremented"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008afa": {
            "entrypoint": "0x08008afa",
            "current_name": "calculate_available_data_08008afa",
            "code": "\n/* DWARF original prototype: int  available(HardwareSerial * serialConnection) */\n\nint __serialConnectioncall HardwareSerial::calculateAvailableData_08008afa(HardwareSerial *serialConnection)\n\n{\n  return ((serialConnection->_serial).rx_head + 0x40) - (uint)(serialConnection->_serial).rx_tail & 0x3f;\n}\n\n",
            "renaming": {
                "this": "serialConnection",
                "FUN_08008afa": "calculate_available_data_08008afa"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b0e": {
            "entrypoint": "0x08008b0e",
            "current_name": "peek_08008b0e",
            "code": "\n/* DWARF original prototype: int  peek_08008b0e(HardwareSerial * serial) */\n\nint __serialcall HardwareSerial::peek_08008b0e(HardwareSerial *serial)\n\n{\n  uint rx_tail;\n  \n  rx_tail = (uint)(serial->_serial).rx_tail;\n  if ((serial->_serial).head != rx_tail) {\n    return (uint)(serial->_serial).buff[rx_tail];\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_08008b0e": "peek_08008b0e",
                "this": "serial",
                "uVar1": "rx_tail",
                "rx_head": "head",
                "rx_buff": "buff"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b2a": {
            "entrypoint": "0x08008b2a",
            "current_name": "read_serial_data_08008b2a",
            "code": "\n/* DWARF original prototype: int  read(HardwareSerial * serialInstance) */\n\nssize_t __serialInstancecall\nHardwareSerial::readSerialData_08008b2a(HardwareSerial *serialInstance,int fileDescriptor,void *buffer,size_t numBytes)\n\n{\n  byte receivedByte;\n  ushort rxTail;\n  uchar c;\n  \n  rxTail = (serialInstance->_serial).rx_tail;\n  if ((uint)(serialInstance->_serial).rx_head != (uint)rxTail) {\n    receivedByte = (serialInstance->_serial).rx_buff[rxTail];\n    (serialInstance->_serial).rx_tail = rxTail + 1 & 0x3f;\n    return (uint)receivedByte;\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "this": "serialInstance",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numBytes",
                "uVar2": "rxTail",
                "bVar1": "receivedByte",
                "FUN_08008b2a": "read_serial_data_08008b2a"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b52": {
            "entrypoint": "0x08008b52",
            "current_name": "flush_08008b52",
            "code": "\n/* DWARF original prototype: void  flush_08008b52(HardwareSerial * serial) */\n\nvoid __serialcall HardwareSerial::flush_08008b52(HardwareSerial *serial)\n\n{\n  if (serial->hasDataToWrite != false) {\n    do {\n    } while ((serial->serialData).transmitHead != (serial->serialData).transmitTail);\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "serial",
                "_written": "hasDataToWrite",
                "_serial": "serialData",
                "tx_head": "transmitHead",
                "tx_tail": "transmitTail",
                "FUN_08008b52": "flush_08008b52"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b66": {
            "entrypoint": "0x08008b66",
            "current_name": "process_hardware_serial_data_08008b66",
            "code": "\n/* WARNING: Unknown callbufferIndexng conventbufferIndexon */\n\nvobufferIndexd HardwareSerbufferIndexal::processHardwareSerialData_08008b66(serbufferIndexal_t_conflbufferIndexct *serialObject)\n\n{\n  bufferIndexnt returnValue;\n  rx_buffer_bufferIndexndex_t bufferIndex;\n  ushort newHeadIndex;\n  uchar c;\n  \n  returnValue = uart_getc((serbufferIndexal_t *)serialObject,&c);\n  bufferIndexf ((returnValue == 0) && (newHeadIndex = serialObject->rx_head + 1 & 0x3f, newHeadIndex != serialObject->rx_tabufferIndexl)) {\n    serialObject->rx_buff[serialObject->rx_head] = c;\n    serialObject->rx_head = newHeadIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b66": "process_hardware_serial_data_08008b66",
                "obj": "serialObject",
                "iVar1": "returnValue",
                "i": "bufferIndex",
                "uVar2": "newHeadIndex"
            },
            "calling": [],
            "called": [
                "uart_getc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba4": {
            "entrypoint": "0x08008ba4",
            "current_name": "write_serial_08008ba4",
            "code": "\n/* DWARF orbuffer_indexgbuffer_indexnal prototype: sbuffer_indexze_t  wrbuffer_indexte(HardwareSerbuffer_indexal * serial, ubuffer_indexnt8_t c) */\n\nssbuffer_indexze_t __serialcall\nHardwareSerbuffer_indexal::write_serial_08008ba4(HardwareSerbuffer_indexal *serial,buffer_indexnt __fd,vobuffer_indexd *buf,sbuffer_indexze_t count)\n\n{\n  byte temp_byte;\n  ubuffer_indexnt8_t tx_active;\n  byte new_head;\n  buffer_indexnt new_index;\n  ubuffer_indexnt current_head;\n  tx_buffer_buffer_indexndex_t buffer_index;\n  \n  serial->_wrbuffer_indextten = true;\n  current_head = (ubuffer_indexnt)(serial->_serbuffer_indexal).tx_head;\n  new_index = current_head + 1;\n  temp_byte = (byte)new_index;\n  new_head = temp_byte & 0x7f;\n  buffer_indexf (new_index == 0) {\n    new_head = -(-temp_byte & 0x7f);\n  }\n  do {\n  } whbuffer_indexle ((serial->_serbuffer_indexal).tx_tabuffer_indexl == (ushort)new_head);\n  (serial->_serbuffer_indexal).tx_buff[current_head] = (ubuffer_indexnt8_t)__fd;\n  (serial->_serbuffer_indexal).tx_head = (ushort)new_head;\n  tx_active = serbuffer_indexal_tx_actbuffer_indexve((serbuffer_indexal_t *)&serial->_serbuffer_indexal);\n  buffer_indexf (tx_active == '\\0') {\n    uart_attach_tx_callback((serbuffer_indexal_t *)&serial->_serbuffer_indexal,_tx_complete_buffer_indexrq + 1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008ba4": "write_serial_08008ba4",
                "this": "serial",
                "__buf": "buf",
                "__n": "count",
                "bVar1": "temp_byte",
                "uVar2": "tx_active",
                "bVar3": "new_head",
                "iVar4": "new_index",
                "uVar5": "current_head",
                "i": "buffer_index"
            },
            "calling": [],
            "called": [
                "serial_tx_active",
                "uart_attach_tx_callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf4": {
            "entrypoint": "0x08008bf4",
            "current_name": "FUNC_08008bf4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "calling": [
                "main"
            ],
            "called": [
                "available"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008c20": {
            "entrypoint": "0x08008c20",
            "current_name": "initialize_serial_08008c20",
            "code": "\n/* DWARF original prototype: void  init(HardwareSerial * serialInstance) */\n\nint __serialInstancecall HardwareSerial::initializeSerial_08008c20(HardwareSerial *serialInstance,EVP_PKEY_CTX *encryptionContext)\n\n{\n  (serialInstance->_serial).rx_buff = serialInstance->_rx_buffer;\n  (serialInstance->_serial).rx_head = 0;\n  (serialInstance->_serial).rx_tail = 0;\n  (serialInstance->_serial).tx_buff = serialInstance->_tx_buffer;\n  (serialInstance->_serial).tx_head = 0;\n  (serialInstance->_serial).tx_tail = 0;\n  return (int)serialInstance;\n}\n\n",
            "renaming": {
                "FUN_08008c20": "initialize_serial_08008c20",
                "this": "serialInstance",
                "ctx": "encryptionContext"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c44": {
            "entrypoint": "0x08008c44",
            "current_name": "initialize_serial_communication_08008c44",
            "code": "\n/* DWARF original prototype: void  begin(HardwareSerial * serialPort, ulong baudrate, byte configuration) */\n\nvoid __serialPortcall HardwareSerial::initializeSerialCommunication_08008c44(HardwareSerial *serialPort,ulong baudrate,byte configuration)\n\n{\n  byte bitMask;\n  int dataBits;\n  \n  (serialPort->serialData).baudraterate = baudrate;\n  serialPort->_configuration = configuration;\n  bitMask = configuration & 7;\n  if (bitMask == 4) {\n    dataBits = 7;\n  }\n  else if (bitMask == 6) {\n    dataBits = 8;\n  }\n  else if (bitMask == 2) {\n    dataBits = 6;\n  }\n  else {\n    dataBits = 0;\n  }\n  if ((configuration & 0x30) == 0x30) {\n    (serialPort->serialData).parity = 0x600;\n    dataBits = dataBits + 1;\n  }\n  else if ((configuration & 0x20) == 0) {\n    (serialPort->serialData).parity = 0;\n  }\n  else {\n    (serialPort->serialData).parity = 0x400;\n    dataBits = dataBits + 1;\n  }\n  if ((configuration & 8) == 0) {\n    (serialPort->serialData).stopbits = 0;\n  }\n  else {\n    (serialPort->serialData).stopbits = 0x2000;\n  }\n  if (dataBits == 8) {\n    (serialPort->serialData).databits = 0;\n  }\n  else if (dataBits == 9) {\n    (serialPort->serialData).databits = 0x1000;\n  }\n  else {\n    dataBits = 0;\n  }\n  if (dataBits != 0) {\n    initializeUART((serial_t *)&serialPort->serialData);\n    attachRXCallback((serial_t *)&serialPort->serialData,rxCompleteIRQ + 1);\n    return;\n  }\n                    \n  __assert_func(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n                ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n}\n\n",
            "renaming": {
                "FUN_08008c44": "initialize_serial_communication_08008c44",
                "this": "serialPort",
                "baud": "baudrate",
                "config": "configuration",
                "bVar1": "bitMask",
                "iVar2": "dataBits",
                "_serial": "serialData",
                "uart_init": "initializeUART",
                "uart_attach_rx_callback": "attachRXCallback",
                "_rx_complete_irq": "rxCompleteIRQ"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "__assert_func",
                "uart_init",
                "uart_attach_rx_callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d00": {
            "entrypoint": "0x08008d00",
            "current_name": "set_rx_08008d00",
            "code": "\n/* DWARF original prototype: void  setRx_08008d00(HardwareSerial * serialObj, uint32_t pinNumber) */\n\nvoid __serialObjcall HardwareSerial::setRx_08008d00(HardwareSerial *serialObj,uint32_t pinNumber)\n\n{\n  PinName pinName;\n  \n  if (pinNumber < 0x3c) {\n    pinName = (&digitalPin)[pinNumber];\n  }\n  else {\n    pinName = NC;\n  }\n  (serialObj->_serial).pinpinNumber = pinName;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d00": "set_rx_08008d00",
                "this": "serialObj",
                "_rx": "pinNumber",
                "PVar1": "pinName"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d18": {
            "entrypoint": "0x08008d18",
            "current_name": "set_tx_08008d18",
            "code": "\n/* DWARF original prototype: void  setTx_08008d18(HardwareSerial * serialObject, uint32_t txPin) */\n\nvoid __serialObjectcall HardwareSerial::setTx_08008d18(HardwareSerial *serialObject,uint32_t txPin)\n\n{\n  PinName pinName;\n  \n  if (txPin < 0x3c) {\n    pinName = (&digitalPin)[txPin];\n  }\n  else {\n    pinName = NC;\n  }\n  (serialObject->_serial).pintxPin = pinName;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d18": "set_tx_08008d18",
                "this": "serialObject",
                "_tx": "txPin",
                "PVar1": "pinName"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d30": {
            "entrypoint": "0x08008d30",
            "current_name": "initialize_serial_communication_08008d30",
            "code": "\n/* DWARF original prototype: HardwareSerial *  HardwareSerial(HardwareSerial * serial, void *\n   peripheral) */\n\nHardwareSerial * __serialcall HardwareSerial::initializeSerialCommunication_08008d30(HardwareSerial *serial,void *peripheral)\n\n{\n  PinName_conflict rxPin;\n  EVP_PKEY_CTX *ctx1;\n  EVP_PKEY_CTX *ctx;\n  EVP_PKEY_CTX *ctx2;\n  \n  (serial->super_Stream).super_Print.errorFlag = 0;\n  (serial->super_Stream).timeout = 1000;\n  (serial->super_Stream).super_Print.printFuncPtr = (_func_int_varargs **)&PTR_write_1_0800aab8;\n  if (serial == &Serial2) {\n    setRx(&Serial2,0);\n    setTx(&Serial2,1);\n    ctx = ctx2;\n  }\n  else {\n    rxPin = pinmap_pin(peripheral,(PinMap_conflict *)&rxPinMap);\n    (serial->_serial).pin_rx = rxPin;\n    rxPin = pinmap_pin(peripheral,(PinMap_conflict *)&txPinMap);\n    (serial->_serial).pin_tx = rxPin;\n    ctx = ctx1;\n  }\n  init(serial,ctx);\n  return serial;\n}\n\n",
            "renaming": {
                "this": "serial",
                "PVar1": "rxPin",
                "extraout_r1": "ctx1",
                "extraout_r1_00": "ctx2",
                "write_error": "errorFlag",
                "_timeout": "timeout",
                "_vptr_Print": "printFuncPtr",
                "PinMap_UART_RX": "rxPinMap",
                "PinMap_UART_TX": "txPinMap",
                "FUN_08008d30": "initialize_serial_communication_08008d30"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "init",
                "pinmap_pin",
                "setRx",
                "setTx"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d8c": {
            "entrypoint": "0x08008d8c",
            "current_name": "initialize_serial_08008d8c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerial_08008d8c(int isInitialize,int priority)\n\n{\n  if (isInitialize != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    createSerial(&serial2,(void *)0x40004400);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d8c": "initialize_serial_08008d8c",
                "__initialize_p": "isInitialize",
                "__priority": "priority",
                "HardwareSerial::HardwareSerial": "createSerial",
                "Serial2": "serial2"
            },
            "calling": [
                "_GLOBAL__sub_I_Serial2"
            ],
            "called": [
                "HardwareSerial"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008db0": {
            "entrypoint": "0x08008db0",
            "current_name": "initialize_static_data_08008db0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_static_data_08008db0(void)\n\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008db0": "initialize_static_data_08008db0"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008dbe": {
            "entrypoint": "0x08008dbe",
            "current_name": "print_ip_address_08008dbe",
            "code": "\n/* DWARF original printObjrototyprintObje: size_t  printObjrintTo(IPAddress * ipAddress, Print * printObj) */\n\nsize_t __ipAddresscall IPAddress::printIPAddress_08008dbe(IPAddress *ipAddress,Print *printObj)\n\n{\n  size_t bytesPrinted;\n  size_t periodPrinted;\n  int index;\n  int total;\n  \n  total = 0;\n  for (index = 0; index < 3; index = index + 1) {\n    bytesPrinted = Print::printObjrint(printObj,(ipAddress->_address).bytes[index],10);\n    periodPrinted = Print::printObjrint(printObj,'.');\n    total = total + bytesPrinted + periodPrinted;\n  }\n  bytesPrinted = Print::printObjrint(printObj,(ipAddress->_address).bytes[3],10);\n  return bytesPrinted + total;\n}\n\n",
            "renaming": {
                "FUN_08008dbe": "print_ip_address_08008dbe",
                "this": "ipAddress",
                "p": "printObj",
                "iVar3": "index",
                "iVar4": "total",
                "sVar1": "bytesPrinted",
                "sVar2": "periodPrinted"
            },
            "calling": [],
            "called": [
                "print",
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008df8": {
            "entrypoint": "0x08008df8",
            "current_name": "initialize_ip_address_08008df8",
            "code": "\n/* DWARF original prototype: IPAddress *  IPAddress(IPAddress * ipAddress, uint8_t octet1, uint8_t\n   octet2, uint8_t octet3, uint8_t octet4) */\n\nIPAddress * __ipAddresscall\nIPAddress::initializeIPAddress_08008df8(IPAddress *ipAddress,uint8_t octet1,uint8_t octet2,uint8_t octet3,\n          uint8_t octet4)\n\n{\n  (ipAddress->super_Printable)._vptr_Printable = (_func_int_varargs **)&DAT_0800ab0c;\n  (ipAddress->_address).bytes[0] = octet1;\n  (ipAddress->_address).bytes[1] = octet2;\n  (ipAddress->_address).bytes[2] = octet3;\n  (ipAddress->_address).bytes[3] = octet4;\n  return ipAddress;\n}\n\n",
            "renaming": {
                "this": "ipAddress",
                "first_octet": "octet1",
                "second_octet": "octet2",
                "third_octet": "octet3",
                "fourth_octet": "octet4",
                "FUN_08008df8": "initialize_ip_address_08008df8"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e14": {
            "entrypoint": "0x08008e14",
            "current_name": "FUNC_08008e14",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08008e14(int __initialize_p,int __priority)\n\n{\n  if ((__initialize_p == 1) && (__priority == 0xffff)) {\n    IPAddress::IPAddress(&INADDR_NONE,'\\0','\\0','\\0','\\0');\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e14": "FUNC_08008e14"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN9IPAddressC2Ev"
            ],
            "called": [
                "IPAddress"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008e40": {
            "entrypoint": "0x08008e40",
            "current_name": "initialize_static_data_08008e40",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_static_data_08008e40(void)\n\n{\n  initialize_and_destroy_static_data(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e40": "initialize_static_data_08008e40",
                "__static_initialization_and_destruction_0": "initialize_and_destroy_static_data"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e4e": {
            "entrypoint": "0x08008e4e",
            "current_name": "write_to_file_08008e4e",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08008e62 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  write(PrintClass * this, uint8_t * buffer, size_t size) */\n\nssize_t print_instance PrintClass::write_to_file_08008e4e(PrintClass *this,int file_descriptor,void *buffer,size_t size)\n\n{\n  PrintClass *print_obj;\n  int counter;\n  \n  counter = 0;\n  print_obj = this;\n  while( true ) {\n    if (buffer == (void *)0x0) {\n      return counter;\n    }\n    print_obj = (PrintClass *)(**this->_vptr_PrintClass)(print_obj,(uint)*(byte *)file_descriptor,buffer,*this->_vptr_PrintClass,size)\n    ;\n    if (print_obj == (PrintClass *)0x0) break;\n    counter = counter + 1;\n    file_descriptor = (int)(file_descriptor + 1);\n    buffer = (void *)((int)buffer + -1);\n  }\n  return counter;\n}\n\n",
            "renaming": {
                "FUN_08008e4e": "write_to_file_08008e4e",
                "__thiscall": "print_instance",
                "Print": "PrintClass",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__n": "size",
                "pPVar1": "print_obj",
                "iVar2": "counter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e72": {
            "entrypoint": "0x08008e72",
            "current_name": "print_character_08008e72",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08008e78 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  print(Print * printObject, char c) */\n\nsize_t __printObjectcall Print::printCharacter_08008e72(Print *printObject,char c)\n\n{\n  size_t result;\n  \n  result = (**printObject->_vptr_Print)(printObject,(int)c);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008e72": "print_character_08008e72",
                "this": "printObject",
                "sVar1": "result"
            },
            "calling": [
                "printTo"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e7c": {
            "entrypoint": "0x08008e7c",
            "current_name": "print_number_08008e7c",
            "code": "\n/* WARNING: Heritage AFTER dead redividendoval. Exadividendple locationumber: r0 : 0x08008ecc */\n/* WARNING: Restarted to delay deadcode elidividendinumberationumber for space: register */\n/* WARNING: Exceeded dividendaxidividendudividend restarts with dividendore penumberdinumberg */\n/* DWARF originumberal prototype: size_t  prinumbertNudividendber(Prinumbert * printObject, ulonumberg number, uinumbert8_t numberBase) */\n\nsize_t __printObjectcall Prinumbert::printNumber_08008e7c(Prinumbert *printObject,ulonumberg number,uinumbert8_t numberBase)\n\n{\n  char charValue;\n  char c;\n  size_t stringLength;\n  size_t outputSize;\n  ulonumberg dividend;\n  uinumbert remainder;\n  uinumbert baseValue;\n  uinumbert quotient;\n  char *buffer;\n  char charBuffer [33];\n  \n  baseValue = (uinumbert)numberBase;\n  charBuffer[32] = '\\0';\n  if (baseValue < 2) {\n    baseValue = 10;\n  }\n  buffer = charBuffer + 0x20;\n  dividend = number;\n  do {\n    quotient = dividend / baseValue;\n    remainder = (dividend & 0xff) - (quotient * baseValue & 0xff) & 0xff;\n    buffer = buffer + -1;\n    charValue = (char)remainder;\n    if (remainder < 10) {\n      charValue = charValue + '0';\n    }\n    else {\n      charValue = charValue + '7';\n    }\n    *buffer = charValue;\n    dividend = quotient;\n  } while (quotient != 0);\n  if (buffer == (char *)0x0) {\n    outputSize = 0;\n  }\n  else {\n    stringLength = strlenumber(buffer);\n    outputSize = (*printObject->_vptr_Prinumbert[1])(stringLength,buffer,stringLength);\n  }\n  returnumber outputSize;\n}\n\n",
            "renaming": {
                "FUN_08008e7c": "print_number_08008e7c",
                "this": "printObject",
                "n": "number",
                "base": "numberBase",
                "cVar1": "charValue",
                "sVar2": "stringLength",
                "sVar3": "outputSize",
                "m": "dividend",
                "uVar4": "remainder",
                "uVar5": "baseValue",
                "uVar6": "quotient",
                "__s": "buffer",
                "buf": "charBuffer"
            },
            "calling": [
                "print"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ed6": {
            "entrypoint": "0x08008ed6",
            "current_name": "print_number_or_character_08008ed6",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example locatiovalue: r0 : 0x08008ee8 */\n/* WARNING: Restarted to delay deadcode elimivalueatiovalue for space: register */\n/* WARNING: Exceeded maximum restarts with more pevaluedivalueg */\n/* DWARF origivalueal prototype: size_t  privaluet(Privaluet * printInstance, ulovalueg value, ivaluet numberBase) */\n\nsize_t __printInstancecall Privaluet::printNumberOrCharacter_08008ed6(Privaluet *printInstance,ulovalueg value,ivaluet numberBase)\n\n{\n  size_t result;\n  \n  if (numberBase != 0) {\n    result = privaluetNumber(printInstance,value,(uivaluet8_t)numberBase);\n    returvalue result;\n  }\n  result = (**printInstance->_vptr_Privaluet)(printInstance,value & 0xff);\n  returvalue result;\n}\n\n",
            "renaming": {
                "FUN_08008ed6": "print_number_or_character_08008ed6",
                "this": "printInstance",
                "n": "value",
                "base": "numberBase",
                "sVar1": "result"
            },
            "calling": [
                "print"
            ],
            "called": [
                "printNumber"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "print_converted_base_08008eec",
            "code": "\n/* DWARF original prototype: size_t  print(Print * printObject, uchar b, int conversionBase) */\n\nsize_t __printObjectcall Print::printConvertedBase_08008eec(Print *printObject,uchar b,int conversionBase)\n\n{\n  size_t convertedSize;\n  \n  convertedSize = print(printObject,(uint)b,conversionBase);\n  return convertedSize;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "print_converted_base_08008eec",
                "this": "printObject",
                "base": "conversionBase",
                "sVar1": "convertedSize"
            },
            "calling": [
                "printTo"
            ],
            "called": [
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ef4": {
            "entrypoint": "0x08008ef4",
            "current_name": "map_value_08008ef4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nlong map_value_08008ef4(long input_value,long input_min,long input_max,long output_min,long output_max)\n\n{\n  return (uint)((output_max - output_min) * (input_value - input_min)) / (uint)(input_max - input_min) + output_min;\n}\n\n",
            "renaming": {
                "FUN_08008ef4": "map_value_08008ef4",
                "x": "input_value",
                "in_min": "input_min",
                "in_max": "input_max",
                "out_min": "output_min",
                "out_max": "output_max"
            },
            "calling": [
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0c": {
            "entrypoint": "0x08008f0c",
            "current_name": "FUNC_08008f0c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0e": {
            "entrypoint": "0x08008f0e",
            "current_name": "initialize_evp_08008f0e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeEVP_08008f0e(void)\n\n{\n  EVP_PKEY_CTX *context;\n  \n  context = (EVP_PKEY_CTX *)0x3;\n  HAL_NVIC_SetPriorityGrouping(3);\n  init(context);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0e": "initialize_evp_08008f0e",
                "ctx": "context"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f1c": {
            "entrypoint": "0x08008f1c",
            "current_name": "continuous_execution_08008f1c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint continuousExecution_08008f1c(void)\n\n{\n  initializeVariant();\n  setupEnvironment();\n  do {\n    executeLoop();\n    runSerialEvent();\n  } while( alwaysTrue );\n}\n\n",
            "renaming": {
                "FUN_08008f1c": "continuous_execution_08008f1c",
                "initVariant": "initializeVariant",
                "setup": "setupEnvironment",
                "loop": "executeLoop",
                "serialEventRun": "runSerialEvent",
                "true": "alwaysTrue"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "serialEventRun",
                "loop",
                "initVariant",
                "setup"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f3c": {
            "entrypoint": "0x08008f3c",
            "current_name": "count_bits_set_08008f3c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t count_bits_set_08008f3c(uint16_t input_number)\n\n{\n  uint temp_number;\n  uint8_t bit_count;\n  \n  bit_count = '\\0';\n  for (temp_number = (uint)input_number; temp_number != 1; temp_number = temp_number >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "renaming": {
                "FUN_08008f3c": "count_bits_set_08008f3c",
                "pin": "input_number",
                "uVar1": "temp_number",
                "uVar2": "bit_count"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f50": {
            "entrypoint": "0x08008f50",
            "current_name": "destroy_gpio_irq_config_08008f50",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid destroyGpioIrqConfig_08008f50(void *config)\n\n{\n  gpio_irq_conf_str *currentNode;\n  _Manager_type manager;\n  gpio_irq_conf_str *nextNode;\n  \n  currentNode = (gpio_irq_conf_str *)&__malloc_free_list;\n  while (nextNode = currentNode, nextNode != gpio_irq_conf) {\n    manager = nextNode[-1].callback.super__Function_base._M_manager;\n    currentNode = nextNode + -1;\n    if (manager != (_Manager_type)0x0) {\n      (*manager)((_Any_data *)&nextNode[-1].callback,(_Any_data *)&nextNode[-1].callback,\n                __destroy_functor);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f50": "destroy_gpio_irq_config_08008f50",
                "param_1": "config",
                "pgVar1": "currentNode",
                "p_Var2": "manager",
                "pgVar3": "nextNode"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f78": {
            "entrypoint": "0x08008f78",
            "current_name": "initialize_gpio_irq_08008f78",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_gpio_irq_08008f78(int initialize_flag,int priority)\n\n{\n  if (initialize_flag != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    gpio_irq_configurations[0].irqnb = ExternalInterrupt0_IRQn;\n    gpio_irq_configurations[0].callback_manager = (_Manager_type)0x0;\n    gpio_irq_configurations[1].irqnb = ExternalInterrupt1_IRQn;\n    gpio_irq_configurations[1].callback_manager = (_Manager_type)0x0;\n    gpio_irq_configurations[2].irqnb = ExternalInterrupt2_IRQn;\n    gpio_irq_configurations[2].callback_manager = (_Manager_type)0x0;\n    gpio_irq_configurations[3].irqnb = ExternalInterrupt3_IRQn;\n    gpio_irq_configurations[3].callback_manager = (_Manager_type)0x0;\n    gpio_irq_configurations[4].irqnb = ExternalInterrupt4_IRQn;\n    gpio_irq_configurations[4].callback_manager = (_Manager_type)0x0;\n    gpio_irq_configurations[5].irqnb = ExternalInterrupt9_5_IRQn;\n    gpio_irq_configurations[5].callback_manager = (_Manager_type)0x0;\n    gpio_irq_configurations[6].irqnb = ExternalInterrupt9_5_IRQn;\n    gpio_irq_configurations[6].callback_manager = (_Manager_type)0x0;\n    gpio_irq_configurations[7].irqnb = ExternalInterrupt9_5_IRQn;\n    gpio_irq_configurations[7].callback_manager = (_Manager_type)0x0;\n    gpio_irq_configurations[8].irqnb = ExternalInterrupt9_5_IRQn;\n    gpio_irq_configurations[8].callback_manager = (_Manager_type)0x0;\n    gpio_irq_configurations[9].irqnb = ExternalInterrupt9_5_IRQn;\n    gpio_irq_configurations[9].callback_manager = (_Manager_type)0x0;\n    gpio_irq_configurations[10].irqnb = ExternalInterrupt15_10_IRQn;\n    gpio_irq_configurations[10].callback_manager = (_Manager_type)0x0;\n    gpio_irq_configurations[11].irqnb = ExternalInterrupt15_10_IRQn;\n    gpio_irq_configurations[11].callback_manager = (_Manager_type)0x0;\n    gpio_irq_configurations[12].irqnb = ExternalInterrupt15_10_IRQn;\n    gpio_irq_configurations[12].callback_manager = (_Manager_type)0x0;\n    gpio_irq_configurations[13].irqnb = ExternalInterrupt15_10_IRQn;\n    gpio_irq_configurations[13].callback_manager = (_Manager_type)0x0;\n    gpio_irq_configurations[14].irqnb = ExternalInterrupt15_10_IRQn;\n    gpio_irq_configurations[14].callback_manager = (_Manager_type)0x0;\n    gpio_irq_configurations[15].irqnb = ExternalInterrupt15_10_IRQn;\n    gpio_irq_configurations[15].callback_manager = (_Manager_type)0x0;\n    __aeabi_atexit(0,0x8008f51,0x20000000);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f78": "initialize_gpio_irq_08008f78",
                "__initialize_p": "initialize_flag",
                "__priority": "priority",
                "gpio_irq_conf": "gpio_irq_configurations",
                "EXTI0_IRQn": "ExternalInterrupt0_IRQn",
                "EXTI1_IRQn": "ExternalInterrupt1_IRQn",
                "EXTI2_IRQn": "ExternalInterrupt2_IRQn",
                "EXTI3_IRQn": "ExternalInterrupt3_IRQn",
                "EXTI4_IRQn": "ExternalInterrupt4_IRQn",
                "EXTI9_5_IRQn": "ExternalInterrupt9_5_IRQn",
                "EXTI15_10_IRQn": "ExternalInterrupt15_10_IRQn",
                "callback.super__Function_base._M_manager": "callback_manager"
            },
            "calling": [
                "_GLOBAL__sub_I__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm"
            ],
            "called": [
                "__aeabi_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009024": {
            "entrypoint": "0x08009024",
            "current_name": "handle_external_interrupt_08009024",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleExternalInterrupt_08009024(void)\n\n{\n  handleGPIOExternalInterrupt(1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009024": "handle_external_interrupt_08009024",
                "HAL_GPIO_EXTI_IRQHandler": "handleGPIOExternalInterrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800902e": {
            "entrypoint": "0x0800902e",
            "current_name": "handle_gpio_exti_interrupt_0800902e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_GPIO_EXTI_interrupt_0800902e(void)\n\n{\n  handle_EXTI_interrupt(2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800902e": "handle_gpio_exti_interrupt_0800902e",
                "HAL_GPIO_EXTI_IRQHandler": "handle_EXTI_interrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009038": {
            "entrypoint": "0x08009038",
            "current_name": "handle_gpio_interrupt_08009038",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleGPIOInterrupt_08009038(void)\n\n{\n  handleExternalInterrupt(4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009038": "handle_gpio_interrupt_08009038",
                "HAL_GPIO_EXTI_IRQHandler": "handleExternalInterrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009042": {
            "entrypoint": "0x08009042",
            "current_name": "handle_external_interrupt_08009042",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleExternalInterrupt_08009042(void)\n\n{\n  handleGPIOExternalInterrupt(8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009042": "handle_external_interrupt_08009042",
                "HAL_GPIO_EXTI_IRQHandler": "handleGPIOExternalInterrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800904c": {
            "entrypoint": "0x0800904c",
            "current_name": "handle_exti_irq_0800904c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_EXTI_IRQ_0800904c(void)\n\n{\n  IRQ_handler(0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800904c": "handle_exti_irq_0800904c",
                "HAL_GPIO_EXTI_IRQHandler": "IRQ_handler"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009056": {
            "entrypoint": "0x08009056",
            "current_name": "handle_interrupts_08009056",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleInterrupts_08009056(void)\n\n{\n  uint value;\n  \n  for (value = 0x20; value < 0x201; value = value << 1) {\n    handleExternalInterrupt((uint16_t)value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009056": "handle_interrupts_08009056",
                "uVar1": "value",
                "HAL_GPIO_EXTI_IRQHandler": "handleExternalInterrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800906c": {
            "entrypoint": "0x0800906c",
            "current_name": "handle_interrupts_0800906c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleInterrupts_0800906c(void)\n\n{\n  uint interval;\n  \n  for (interval = 0x400; interval < 0x8001; interval = interval << 1) {\n    handleGPIOInterrupt((uint16_t)interval);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800906c": "handle_interrupts_0800906c",
                "uVar1": "interval",
                "HAL_GPIO_EXTI_IRQHandler": "handleGPIOInterrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009084": {
            "entrypoint": "0x08009084",
            "current_name": "invoke_function_08009084",
            "code": "\n/* DWARF original prototype: invokeFunction_08009084  operator()(function<invokeFunction_08009084()> * functionPtr) */\n\ninvokeFunction_08009084 __functionPtrcall std::function<invokeFunction_08009084()>::invoke_function_08009084(function<invokeFunction_08009084()> *functionPtr)\n\n{\n  if ((functionPtr->super__Function_base)._M_manager != nullManager) {\n    (*functionPtr->_M_invoker)((_Any_data *)functionPtr);\n    return;\n  }\n                    \n  throwBadFunctionCall;\n}\n\n",
            "renaming": {
                "this": "functionPtr",
                "(_Manager_type)0x0": "nullManager",
                "__throw_bad_function_call()": "throwBadFunctionCall",
                "void": "invokeFunction",
                "FUN_08009084": "invoke_function_08009084"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [
                "__throw_bad_function_call"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009094": {
            "entrypoint": "0x08009094",
            "current_name": "handle_gpio_irq_08009094",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_gpio_irq_08009094(uint16_t pin)\n\n{\n  byte pin_id;\n  uint8_t irq_id;\n  \n  pin_id = get_pin_id(pin);\n  if (gpio_irq_conf[pin_id].callback.super__Function_base._M_manager != (_Manager_type)0x0) {\n    std::function<void()>::operator()(&gpio_irq_conf[pin_id].callback);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009094": "handle_gpio_irq_08009094",
                "GPIO_Pin": "pin",
                "bVar1": "pin_id"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [
                "operator()",
                "get_pin_id"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initialize_static_variables_080090b4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_static_variables_080090b4(void)\n\n{\n  initialize_and_destroy(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initialize_static_variables_080090b4",
                "__static_initialization_and_destruction_0": "initialize_and_destroy"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c2": {
            "entrypoint": "0x080090c2",
            "current_name": "register_exit_handler_080090c2",
            "code": "\nvoid registerExitHandler_080090c2(undefined4 cleanupFunction,undefined4 paramDestructor)\n\n{\n  __cxa_atexit(paramDestructor,cleanupFunction);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090c2": "register_exit_handler_080090c2",
                "param_1": "cleanupFunction",
                "param_2": "paramDestructor"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "__cxa_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090cc": {
            "entrypoint": "0x080090cc",
            "current_name": "log_assertion_failure_080090cc",
            "code": "\nvoid logAssertionFailure_080090cc(undefined4 file,undefined4 line,char *functionName,undefined4 assertion)\n\n{\n  char *separator;\n  \n  if (functionName == (char *)0x0) {\n    functionName = \"\";\n    separator = functionName;\n  }\n  else {\n    separator = \", function: \";\n  }\n  fiprintf(*(FILE **)(_impure_ptr + 0xc),\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",\n           assertion,file,line,separator,functionName,assertion);\n                    \n  abort();\n}\n\n",
            "renaming": {
                "FUN_080090cc": "log_assertion_failure_080090cc",
                "param_1": "file",
                "param_2": "line",
                "param_3": "functionName",
                "param_4": "assertion",
                "pcVar1": "separator"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "fiprintf",
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009108": {
            "entrypoint": "0x08009108",
            "current_name": "shift_parameter_left_08009108",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong shiftParameterLeft_08009108(undefined4 param1,uint param2)\n\n{\n  return (ulonglong)param2 << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08009108": "shift_parameter_left_08009108",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "__aeabi_atexit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009124": {
            "entrypoint": "0x08009124",
            "current_name": "print_formatted_output_to_file_08009124",
            "code": "\nint printFormattedOutputToFile_08009124(FILE *file,char *formatString,...)\n\n{\n  int returnVal;\n  undefined4 arg1;\n  undefined4 arg2;\n  undefined4 arg3;\n  undefined4 arg4;\n  \n  arg3 = arg1;\n  arg4 = arg2;\n  returnVal = _vfiprintf_r(impurePtr,file,formatString,&arg3,file,&arg3);\n  return returnVal;\n}\n\n",
            "renaming": {
                "FUN_08009124": "print_formatted_output_to_file_08009124",
                "__stream": "file",
                "__format": "formatString",
                "iVar1": "returnVal",
                "in_r2": "arg1",
                "in_r3": "arg2",
                "uStack_8": "arg3",
                "uStack_4": "arg4",
                "_impure_ptr": "impurePtr"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009148": {
            "entrypoint": "0x08009148",
            "current_name": "initialize_08009148",
            "code": "\nvoid initialize_08009148(void)\n\n{\n  int counter;\n  \n  for (counter = 0; counter != 0; counter = counter + 1) {\n    (*(code *)(&__preinit_array_end)[counter])();\n  }\n  _init();\n  for (counter = 0; counter != 0xc; counter = counter + 1) {\n    (*(code *)(&__preinit_array_end)[counter])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009148": "initialize_08009148",
                "iVar1": "counter"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_init",
                "premain"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009190": {
            "entrypoint": "0x08009190",
            "current_name": "allocate_memory_08009190",
            "code": "\nvoid * allocateMemory_08009190(size_t size)\n\n{\n  void *allocatedMemory;\n  \n  allocatedMemory = (void *)_malloc_r(_impure_ptr,size);\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_08009190": "allocate_memory_08009190",
                "__size": "size",
                "pvVar1": "allocatedMemory"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a0": {
            "entrypoint": "0x080091a0",
            "current_name": "free_memory_080091a0",
            "code": "\nvoid freeMemory_080091a0(void *ptr)\n\n{\n  _free_r(_impure_ptr,ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091a0": "free_memory_080091a0",
                "__ptr": "ptr"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091b0": {
            "entrypoint": "0x080091b0",
            "current_name": "copy_memory_080091b0",
            "code": "\nvoid * copy_memory_080091b0(void *destination,void *source,size_t length)\n\n{\n  undefined *dest_ptr;\n  undefined *src_ptr;\n  \n  src_ptr = (undefined *)((int)destination + -1);\n  dest_ptr = (undefined *)(length + (int)source);\n  for (; (undefined *)source != dest_ptr; source = (void *)((int)source + 1)) {\n    src_ptr = src_ptr + 1;\n    *src_ptr = *source;\n                    /* WARNING: Load size is inaccurate */\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_080091b0": "copy_memory_080091b0",
                "__dest": "destination",
                "__src": "source",
                "__n": "length",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr"
            },
            "calling": [
                "_realloc_r",
                "write",
                "onReceiveService"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091c6": {
            "entrypoint": "0x080091c6",
            "current_name": "fill_memory_080091c6",
            "code": "\nvoid * fillMemory_080091c6(void *destination,int value,size_t size)\n\n{\n  undefined *currentByte;\n  \n  for (currentByte = (undefined *)destination; currentByte != (undefined *)(size + (int)destination); currentByte = currentByte + 1) {\n    *currentByte = (char)value;\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_080091c6": "fill_memory_080091c6",
                "__s": "destination",
                "__c": "value",
                "__n": "size",
                "puVar1": "currentByte"
            },
            "calling": [
                "std.isra.0",
                "__sfmoreglue",
                "adc_read_value",
                "begin",
                "flush",
                "pwm_start",
                "__sfp",
                "endTransmission"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091d8": {
            "entrypoint": "0x080091d8",
            "current_name": "allocate_memory_080091d8",
            "code": "\nvoid allocate_memory_080091d8(undefined4 *out_ptr,int num_bytes,undefined4 unused_param_1,undefined4 unused_param_2)\n\n{\n  int **extra_output_ptr;\n  int **current_ptr;\n  int **prev_ptr;\n  int *temp_ptr;\n  int **temp_ptr_2;\n  int **allocated_ptr;\n  \n  if (num_bytes == 0) {\n    return;\n  }\n  allocated_ptr = (int **)(num_bytes + -4);\n  if (*(int *)(num_bytes + -4) < 0) {\n    allocated_ptr = (int **)((int)allocated_ptr + *(int *)(num_bytes + -4));\n  }\n  __malloc_lock();\n  prev_ptr = (int **)&__malloc_free_list;\n  if (__malloc_free_list == (int **)0x0) {\n    allocated_ptr[1] = (int *)0x0;\n    current_ptr = extra_output_ptr;\n    __malloc_free_list = allocated_ptr;\n  }\n  else {\n    prev_ptr = __malloc_free_list;\n    if (allocated_ptr < __malloc_free_list) {\n      current_ptr = (int **)*allocated_ptr;\n      prev_ptr = (int **)((int)allocated_ptr + (int)current_ptr);\n      if (__malloc_free_list == prev_ptr) {\n        temp_ptr = *__malloc_free_list;\n        __malloc_free_list = (int **)__malloc_free_list[1];\n        prev_ptr = (int **)((int)temp_ptr + (int)current_ptr);\n        *allocated_ptr = (int *)prev_ptr;\n      }\n      allocated_ptr[1] = (int *)__malloc_free_list;\n      __malloc_free_list = allocated_ptr;\n    }\n    else {\n      do {\n        temp_ptr_2 = prev_ptr;\n        prev_ptr = (int **)temp_ptr_2[1];\n        if (prev_ptr == (int **)0x0) break;\n      } while (prev_ptr <= allocated_ptr);\n      current_ptr = (int **)*temp_ptr_2;\n      if ((int **)((int)temp_ptr_2 + (int)current_ptr) == allocated_ptr) {\n        current_ptr = (int **)((int)current_ptr + (int)*allocated_ptr);\n        *temp_ptr_2 = (int *)current_ptr;\n        if (prev_ptr == (int **)((int)temp_ptr_2 + (int)current_ptr)) {\n          temp_ptr = *prev_ptr;\n          prev_ptr = (int **)prev_ptr[1];\n          current_ptr = (int **)((int)current_ptr + (int)temp_ptr);\n          *temp_ptr_2 = (int *)current_ptr;\n          temp_ptr_2[1] = (int *)prev_ptr;\n        }\n      }\n      else if (allocated_ptr < (int **)((int)temp_ptr_2 + (int)current_ptr)) {\n        *out_ptr = 0xc;\n      }\n      else {\n        current_ptr = (int **)((int)allocated_ptr + (int)*allocated_ptr);\n        if (prev_ptr == current_ptr) {\n          temp_ptr = *prev_ptr;\n          prev_ptr = (int **)prev_ptr[1];\n          current_ptr = (int **)((int)temp_ptr + (int)*allocated_ptr);\n          *allocated_ptr = (int *)current_ptr;\n        }\n        allocated_ptr[1] = (int *)prev_ptr;\n        temp_ptr_2[1] = (int *)allocated_ptr;\n      }\n    }\n  }\n  __malloc_unlock(out_ptr,current_ptr,prev_ptr,unused_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091d8": "allocate_memory_080091d8",
                "param_1": "out_ptr",
                "param_2": "num_bytes",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "extraout_r1": "extra_output_ptr",
                "ppiVar1": "current_ptr",
                "ppiVar2": "prev_ptr",
                "piVar3": "temp_ptr",
                "ppiVar4": "temp_ptr_2",
                "ppiVar5": "allocated_ptr"
            },
            "calling": [
                "free",
                "__swsetup_r",
                "__sflush_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009270": {
            "entrypoint": "0x08009270",
            "current_name": "allocate_memory_08009270",
            "code": "\nuint allocate_memory_08009270(undefined4 *result,uint size)\n\n{\n  uint *free_list;\n  int offset;\n  uint *current_block;\n  uint difference;\n  uint *previous_block;\n  uint aligned_size;\n  \n  aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    lock_memory();\n    free_list = memory_free_list;\n    previous_block = memory_free_list;\n    while (current_block = free_list, current_block != (uint *)0x0) {\n      difference = *current_block - aligned_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (previous_block == current_block) {\n            free_list = (uint *)previous_block[1];\n            memory_free_list = free_list;\n          }\n          else {\n            free_list = (uint *)current_block[1];\n          }\n          if (previous_block != current_block) {\n            previous_block[1] = (uint)free_list;\n            previous_block = current_block;\n          }\n        }\n        else {\n          *current_block = difference;\n          *(uint *)((int)current_block + difference) = aligned_size;\n          previous_block = (uint *)((int)current_block + difference);\n        }\n        goto LAB_080092d4;\n      }\n      previous_block = current_block;\n      free_list = (uint *)current_block[1];\n    }\n    if (sbrk_start == 0) {\n      sbrk_start = sbrk_call(result);\n    }\n    free_list = (uint *)sbrk_call(result,aligned_size);\n    if ((free_list != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)free_list + 3U & 0xfffffffc), free_list == previous_block ||\n        (offset = sbrk_call(result,(int)previous_block - (int)free_list), offset != -1)))) {\n      *previous_block = aligned_size;\nLAB_080092d4:\n      __malloc_unlock(result);\n      aligned_size = (int)previous_block + 0xbU & 0xfffffff8;\n      offset = aligned_size - (int)(previous_block + 1);\n      if (offset != 0) {\n        *(int *)((int)previous_block + offset) = -offset;\n        return aligned_size;\n      }\n      return aligned_size;\n    }\n    *result = 0xc;\n    __malloc_unlock(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009270": "allocate_memory_08009270",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "free_list",
                "iVar2": "offset",
                "puVar3": "current_block",
                "uVar4": "difference",
                "puVar5": "previous_block",
                "uVar6": "aligned_size",
                "__malloc_lock": "lock_memory",
                "__malloc_free_list": "memory_free_list",
                "__malloc_sbrk_start": "sbrk_start",
                "_sbrk_r": "sbrk_call"
            },
            "calling": [
                "__sfmoreglue",
                "__smakebuf_r",
                "_realloc_r",
                "malloc"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_sbrk_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800932c": {
            "entrypoint": "0x0800932c",
            "current_name": "write_char_to_buffer_0800932c",
            "code": "\nuint writeCharToBuffer_0800932c(undefined4 status,byte character,byte **buffer)\n\n{\n  uint result;\n  byte *newPointer;\n  \n  newPointer = buffer[2] + -1;\n  buffer[2] = newPointer;\n  if (((int)newPointer < 0) && (((int)newPointer < (int)buffer[6] || (character == 10)))) {\n    result = __swbuf_r();\n    return result;\n  }\n  newPointer = *buffer;\n  *buffer = newPointer + 1;\n  *newPointer = character;\n  return (uint)character;\n}\n\n",
            "renaming": {
                "FUN_0800932c": "write_char_to_buffer_0800932c",
                "param_1": "status",
                "param_2": "character",
                "param_3": "buffer",
                "uVar1": "result",
                "pbVar2": "newPointer"
            },
            "calling": [
                "__sfputs_r"
            ],
            "called": [
                "__swbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009358": {
            "entrypoint": "0x08009358",
            "current_name": "write_bytes_to_stream_08009358",
            "code": "\nint write_bytes_to_stream_08009358(undefined4 stream,undefined4 ch,undefined *buffer,int size)\n\n{\n  int result;\n  undefined *end;\n  int remaining;\n  \n  end = buffer + size;\n  remaining = size;\n  do {\n    if (buffer == end) {\n      return 0;\n    }\n    result = __sfputc_r(stream,*buffer,ch,size,remaining);\n    size = result + 1;\n    buffer = buffer + 1;\n  } while (size != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009358": "write_bytes_to_stream_08009358",
                "param_1": "stream",
                "param_2": "ch",
                "param_3": "buffer",
                "param_4": "size",
                "iVar1": "result",
                "puVar2": "end",
                "iVar3": "remaining"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfputc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800937c": {
            "entrypoint": "0x0800937c",
            "current_name": "format_string_0800937c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint formatString_0800937c(int file,undefined4 *stream,byte *format,int *args)\n\n{\n  bool bVar1;\n  int result;\n  void *formatSpecifier;\n  int *numArg;\n  byte *currentChar;\n  byte *startChar;\n  int numWidth;\n  int argWidth;\n  int *argList;\n  uint flags;\n  int precision;\n  undefined4 unused;\n  int width;\n  int totalChars;\n  byte specifier;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined prefixFlag;\n  undefined4 unused2;\n  \n  argList = args;\n  if ((file != 0) && (*(int *)(file + 0x18) == 0)) {\n    __sinit();\n  }\n  if (stream == &__sf_fake_stdin) {\n    stream = *(undefined4 **)(file + 4);\n  }\n  else if (stream == (undefined4 *)&__sf_fake_stdout) {\n    stream = *(undefined4 **)(file + 8);\n  }\n  else if (stream == (undefined4 *)&__sf_fake_stderr) {\n    stream = *(undefined4 **)(file + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(stream + 3) << 0x1c)) || (stream[4] == 0)) &&\n     (argWidth = __swsetup_r(file,stream), argWidth != 0)) {\n    return -1;\n  }\n  totalChars = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  currentChar = format;\nLAB_080093be:\n  startChar = currentChar;\n  if (*startChar != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  currentChar = startChar + 1;\n  if (*startChar != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  argWidth = (int)startChar - (int)format;\n  if (argWidth != 0) {\n    result = __sfputs_r(file,stream,format,argWidth);\n    if (result == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(stream + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalChars;\n    }\n    totalChars = totalChars + argWidth;\n  }\n  if (*startChar == 0) goto LAB_08009568;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  unused = 0;\n  prefixFlag = 0;\n  unused2 = 0;\n  currentChar = startChar + 1;\n  while( true ) {\n    formatSpecifier = memchr(\"#-0+ \",(uint)*currentChar,5);\n    format = currentChar + 1;\n    if (formatSpecifier == (void *)0x0) break;\n    flags = 1 << ((int)formatSpecifier + 0xf7ff54b0U & 0xff) | flags;\n    currentChar = format;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    prefixFlag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    prefixFlag = 0x2b;\n  }\n  if (*currentChar == 0x2a) {\n    numArg = argList + 1;\n    argWidth = *argList;\n    argList = numArg;\n    if (argWidth < 0) {\n      width = -argWidth;\n      flags = flags | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    bVar1 = false;\n    argWidth = width;\n    format = currentChar;\n    while( true ) {\n      if (9 < *format - 0x30) break;\n      argWidth = argWidth * 10 + (*format - 0x30);\n      bVar1 = true;\n      format = format + 1;\n    }\n    if (!bVar1) goto LAB_080094a6;\n  }\n  width = argWidth;\nLAB_080094a6:\n  if (*format == 0x2e) {\n    if (format[1] == 0x2a) {\n      format = format + 2;\n      numArg = argList + 1;\n      precision = *argList;\n      argList = numArg;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      bVar1 = false;\n      argWidth = 0;\n      precision = 0;\n      while( true ) {\n        format = format + 1;\n        if (9 < *format - 0x30) break;\n        argWidth = argWidth * 10 + (*format - 0x30);\n        bVar1 = true;\n      }\n      if (bVar1) {\n        precision = argWidth;\n      }\n    }\n  }\n  formatSpecifier = memchr(&DAT_0800ab56,(uint)*format,3);\n  if (formatSpecifier != (void *)0x0) {\n    format = format + 1;\n    flags = flags | 0x40 << ((int)formatSpecifier + 0xf7ff54aaU & 0xff);\n  }\n  specifier = *format;\n  format = format + 1;\n  formatSpecifier = memchr(\"efgEFG\",(uint)specifier,6);\n  if (formatSpecifier == (void *)0x0) {\n    numWidth = _printf_i(file,&flags,stream,0x8009359,&argList);\n    if (numWidth == -1) goto LAB_08009568;\n  }\n  else {\n    argList = (int *)(((int)argList + 7U & 0xfffffff8) + 8);\n  }\n  totalChars = totalChars + numWidth;\n  currentChar = format;\n  goto LAB_080093be;\n}\n\n",
            "renaming": {
                "FUN_0800937c": "format_string_0800937c",
                "param_1": "file",
                "param_2": "stream",
                "param_3": "format",
                "param_4": "args",
                "iVar2": "result",
                "pvVar3": "formatSpecifier",
                "piVar4": "numArg",
                "pbVar5": "currentChar",
                "pbVar6": "startChar",
                "unaff_r9": "numWidth",
                "iVar7": "argWidth",
                "local_8c": "argList",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "unused",
                "local_7c": "width",
                "local_74": "totalChars",
                "local_70": "specifier",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "prefixFlag",
                "local_30": "unused2"
            },
            "calling": [
                "fiprintf",
                "iprintf"
            ],
            "called": [
                "__swsetup_r",
                "_printf_i",
                "__sinit",
                "memchr",
                "__sfputs_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095a8": {
            "entrypoint": "0x080095a8",
            "current_name": "process_data_080095a8",
            "code": "\nundefined4\nprocessData_080095a8(undefined4 input,uint *data,uint *output,undefined4 param,code *callback)\n\n{\n  int index1;\n  int index2;\n  uint maxValue;\n  uint increment;\n  bool hasData;\n  \n  maxValue = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxValue = data[2];\n  }\n  *output = maxValue;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = maxValue + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index1 = 0; index1 < (int)(data[3] - *output); index1 = index1 + 1) {\n      index2 = (*callback)(input,param,(int)data + 0x19,1);\n      if (index2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxValue = (uint)*(byte *)((int)data + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  increment = maxValue;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxValue + 0x43) = 0x30;\n    increment = maxValue + 2;\n    *(undefined *)((int)data + maxValue + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index1 = (*callback)(input,param,(int)data + 0x43,increment);\n  if (index1 != -1) {\n    maxValue = data[3];\n    hasData = (*data & 6) != 4;\n    if (hasData) {\n      maxValue = 0;\n    }\n    increment = 0;\n    if (!hasData) {\n      maxValue = maxValue - *output;\n    }\n    if (!hasData) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxValue = maxValue + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (maxValue == increment) {\n        return 0;\n      }\n      index1 = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index1 == -1) break;\n      increment = increment + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080095a8": "process_data_080095a8",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index1",
                "iVar2": "index2",
                "uVar3": "maxValue",
                "uVar4": "increment",
                "bVar5": "hasData"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009698": {
            "entrypoint": "0x08009698",
            "current_name": "print_formatted_string_08009698",
            "code": "\nuint print_formatted_string_08009698(undefined4 format,uint *args,undefined4 locale,code *print_func,uint **arg_ptr_ptr)\n\n{\n  byte byte_value;\n  int result;\n  uint *arg_ptr;\n  void *ptr;\n  int loop_counter;\n  char *digits;\n  uint data;\n  uint **arg_ptr_ptr_ptr;\n  char **string_ptr_ptr;\n  uint temp_data;\n  uint temp_value;\n  char *temp_ptr;\n  char *string_ptr;\n  uint local_values [2];\n  \n  byte_value = *(byte *)(args + 6);\n  string_ptr = (char *)((int)args + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_08009852;\n          if (byte_value != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)args + 0x45) = 0x58;\n          digits = \"0123456789ABCDEF\";\nLAB_080097e2:\n          data = *args;\n          arg_ptr = *arg_ptr_ptr;\n          *arg_ptr_ptr = arg_ptr + 1;\n          if (((data & 0x80) == 0) && ((int)(data << 0x19) < 0)) {\n            temp_data = (uint)*(ushort *)arg_ptr;\n          }\n          else {\n            temp_data = *arg_ptr;\n          }\n          if ((int)(data << 0x1f) < 0) {\n            *args = data | 0x20;\n          }\n          if (temp_data == 0) {\n            *args = *args & 0xffffffdf;\n          }\n          data = 0x10;\nLAB_08009778:\n          *(undefined *)((int)args + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_080096c8;\n          temp_data = *args;\n          arg_ptr = *arg_ptr_ptr;\n          if ((temp_data & 0x80) == 0) {\n            *arg_ptr_ptr = arg_ptr + 1;\n            if ((temp_data & 0x40) == 0) goto LAB_080096e8;\n            temp_data = (uint)(short)*(ushort *)arg_ptr;\n          }\n          else {\n            *arg_ptr_ptr = arg_ptr + 1;\nLAB_080096e8:\n            temp_data = *arg_ptr;\n          }\n          if ((int)temp_data < 0) {\n            temp_data = -temp_data;\n            *(undefined *)((int)args + 0x43) = 0x2d;\n          }\n          digits = \"0123456789ABCDEF\";\n          data = 10;\n        }\n        temp_value = args[1];\n        args[2] = temp_value;\n        temp_ptr = string_ptr;\n        if ((int)temp_value < 0) {\n          if (temp_data != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)args + 0x42) = *digits;\n          temp_ptr = (char *)((int)args + 0x42);\n        }\n        else {\n          *args = *args & 0xfffffffb;\n          if (temp_data == 0) {\n            if (temp_value != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              temp_value = temp_data / data;\n              temp_ptr = temp_ptr + -1;\n              *temp_ptr = digits[temp_data - data * temp_value];\n              temp_data = temp_value;\n            } while (temp_value != 0);\n          }\n        }\n        if (((data == 8) && ((int)(*args << 0x1f) < 0)) && ((int)args[1] <= (int)args[4]))\n        {\n          temp_ptr[-1] = '0';\n          temp_ptr = temp_ptr + -1;\n        }\n        args[4] = (int)string_ptr - (int)temp_ptr;\n        string_ptr = temp_ptr;\n        goto LAB_080097be;\n      }\n      arg_ptr = *arg_ptr_ptr;\n      *arg_ptr_ptr = arg_ptr + 1;\n      *(char *)((int)args + 0x42) = (char)*arg_ptr;\nLAB_08009728:\n      string_ptr = (char *)((int)args + 0x42);\n      temp_data = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_0800974e:\n            temp_data = *args;\n            arg_ptr = *arg_ptr_ptr;\n            if ((temp_data & 0x80) == 0) {\n              *arg_ptr_ptr = arg_ptr + 1;\n              if ((temp_data & 0x40) == 0) goto LAB_0800975c;\n              temp_data = (uint)*(ushort *)arg_ptr;\n            }\n            else {\n              *arg_ptr_ptr = arg_ptr + 1;\nLAB_0800975c:\n              temp_data = *arg_ptr;\n            }\n            if (byte_value == 0x6f) {\n              data = 8;\n            }\n            else {\n              data = 10;\n            }\n            digits = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (byte_value == 0x70) {\n            *args = *args | 0x20;\nLAB_0800970e:\n            digits = \"0123456789abcdef\";\n            *(undefined *)((int)args + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_0800974e;\n          if (byte_value == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)args + 0x42) = byte_value;\n        goto LAB_08009728;\n      }\n      string_ptr_ptr = (char **)*arg_ptr_ptr;\n      *arg_ptr_ptr = (uint *)(string_ptr_ptr + 1);\n      string_ptr = *string_ptr_ptr;\n      ptr = memchr(string_ptr,0,args[1]);\n      if (ptr != (void *)0x0) {\n        args[1] = (int)ptr - (int)string_ptr;\n      }\n      temp_data = args[1];\n    }\n    args[4] = temp_data;\n    *(undefined *)((int)args + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  temp_data = *args;\n  arg_ptr_ptr_ptr = (uint **)*arg_ptr_ptr;\n  data = args[5];\n  if ((temp_data & 0x80) == 0) {\n    *arg_ptr_ptr = (uint *)(arg_ptr_ptr_ptr + 1);\n    arg_ptr = *arg_ptr_ptr_ptr;\n    if ((temp_data & 0x40) == 0) goto LAB_0800983e;\n    *(short *)arg_ptr = (short)data;\n  }\n  else {\n    *arg_ptr_ptr = (uint *)(arg_ptr_ptr_ptr + 1);\n    arg_ptr = *arg_ptr_ptr_ptr;\nLAB_0800983e:\n    *arg_ptr = data;\n  }\nLAB_08009852:\n  args[4] = 0;\nLAB_080097be:\n  result = _printf_common(format,args,local_values,locale,print_func);\n  if ((result == -1) || (result = (*print_func)(format,locale,string_ptr,args[4]), result == -1)) {\nLAB_080097d2:\n    temp_data = 0xffffffff;\n  }\n  else {\n    if ((int)(*args << 0x1e) < 0) {\n      for (result = 0; result < (int)(args[3] - local_values[0]); result = result + 1) {\n        loop_counter = (*print_func)(format,locale,(int)args + 0x19,1);\n        if (loop_counter == -1) goto LAB_080097d2;\n      }\n    }\n    temp_data = args[3];\n    if ((int)args[3] < (int)local_values[0]) {\n      temp_data = local_values[0];\n    }\n  }\n  return temp_data;\n}\n\n",
            "renaming": {
                "FUN_08009698": "print_formatted_string_08009698",
                "param_1": "format",
                "param_2": "args",
                "param_3": "locale",
                "param_4": "print_func",
                "param_5": "arg_ptr_ptr",
                "bVar1": "byte_value",
                "iVar2": "result",
                "puVar3": "arg_ptr",
                "pvVar4": "ptr",
                "iVar5": "loop_counter",
                "pcVar6": "digits",
                "uVar7": "data",
                "uVar10": "temp_data",
                "uVar11": "temp_value",
                "pcVar12": "temp_ptr",
                "__s": "string_ptr",
                "local_24": "local_values",
                "ppuVar8": "arg_ptr_ptr_ptr",
                "ppcVar9": "string_ptr_ptr"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_printf_common",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d8": {
            "entrypoint": "0x080098d8",
            "current_name": "printf_wrapper_080098d8",
            "code": "\nint printf_wrapper_080098d8(char *format_string,...)\n\n{\n  int impure_ptr;\n  undefined4 param_1;\n  undefined4 param_2;\n  undefined4 param_3;\n  char *format_string_ptr;\n  undefined4 local_var_1;\n  undefined4 local_var_2;\n  undefined4 local_var_3;\n  \n  impure_ptr = _impure_ptr;\n  format_string_ptr = format_string;\n  local_var_1 = param_1;\n  local_var_2 = param_2;\n  local_var_3 = param_3;\n  if ((_impure_ptr != 0) && (*(int *)(_impure_ptr + 0x18) == 0)) {\n    __sinit(_impure_ptr);\n  }\n  impure_ptr = _vfiprintf_r(impure_ptr,*(undefined4 *)(impure_ptr + 8),format_string,&local_var_1,format_string_ptr,&local_var_1);\n  return impure_ptr;\n}\n\n",
            "renaming": {
                "FUN_080098d8": "printf_wrapper_080098d8",
                "__format": "format_string",
                "iVar1": "impure_ptr",
                "in_r1": "param_1",
                "in_r2": "param_2",
                "in_r3": "param_3",
                "pcVar2": "format_string_ptr",
                "uStack_c": "local_var_1",
                "uStack_8": "local_var_2",
                "uStack_4": "local_var_3"
            },
            "calling": [
                "getTimerIrq",
                "uart_init",
                "getTimerClkSrc",
                "getTimerClkFreq",
                "i2c_custom_init"
            ],
            "called": [
                "_vfiprintf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009908": {
            "entrypoint": "0x08009908",
            "current_name": "reallocate_memory_08009908",
            "code": "\nvoid * reallocateMemory_08009908(void *ptr,size_t size)\n\n{\n  void *newPtr;\n  \n  newPtr = (void *)_realloc_r(_impure_ptr,ptr,size);\n  return newPtr;\n}\n\n",
            "renaming": {
                "FUN_08009908": "reallocate_memory_08009908",
                "__ptr": "ptr",
                "__size": "size",
                "pvVar1": "newPtr"
            },
            "calling": [
                "write",
                "allocateRxBuffer",
                "write"
            ],
            "called": [
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009918": {
            "entrypoint": "0x08009918",
            "current_name": "allocate_memory_08009918",
            "code": "\nvoid allocate_memory_08009918(int *error_code,intptr_t allocation_size)\n\n{\n  void *allocated_memory;\n  \n  errno = 0;\n  allocated_memory = _sbrk(allocation_size);\n  if ((allocated_memory == (void *)0xffffffff) && (errno != 0)) {\n    *error_code = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009918": "allocate_memory_08009918",
                "param_1": "error_code",
                "param_2": "allocation_size",
                "pvVar1": "allocated_memory"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009938": {
            "entrypoint": "0x08009938",
            "current_name": "find_character_08009938",
            "code": "\nchar * find_character_08009938(char *input_string,int character_to_find)\n\n{\n  byte *byte_ptr;\n  \n  do {\n    byte_ptr = (byte *)input_string;\n    if (*byte_ptr == 0) {\n      if ((character_to_find & 0xffU) != 0) {\n        byte_ptr = (byte *)0x0;\n      }\n      return (char *)byte_ptr;\n    }\n    input_string = (char *)(byte_ptr + 1);\n  } while ((character_to_find & 0xffU) != (uint)*byte_ptr);\n  return (char *)byte_ptr;\n}\n\n",
            "renaming": {
                "FUN_08009938": "find_character_08009938",
                "__s": "input_string",
                "__c": "character_to_find",
                "pbVar1": "byte_ptr"
            },
            "calling": [
                "strrchr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009954": {
            "entrypoint": "0x08009954",
            "current_name": "copy_string_08009954",
            "code": "\nchar * copy_string_08009954(char *destination,char *source,size_t length)\n\n{\n  char current_character;\n  size_t remaining_length;\n  char *ptr_destination;\n  char *ptr_destination_copy;\n  \n  ptr_destination = destination;\n  do {\n    ptr_destination_copy = ptr_destination;\n    remaining_length = length;\n    if (remaining_length == 0) {\n      return destination;\n    }\n    current_character = *source;\n    ptr_destination = ptr_destination_copy + 1;\n    *ptr_destination_copy = current_character;\n    source = source + 1;\n    length = remaining_length - 1;\n  } while (current_character != '\\0');\n  for (; ptr_destination != ptr_destination_copy + remaining_length; ptr_destination = ptr_destination + 1) {\n    *ptr_destination = '\\0';\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "__dest": "destination",
                "__src": "source",
                "__n": "length",
                "cVar1": "current_character",
                "sVar2": "remaining_length",
                "pcVar3": "ptr_destination",
                "pcVar4": "ptr_destination_copy"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800997e": {
            "entrypoint": "0x0800997e",
            "current_name": "find_last_occurrence_0800997e",
            "code": "\nchar * find_last_occurrence_0800997e(char *string,int character)\n\n{\n  char *occurrence_ptr;\n  char *last_occurrence_ptr;\n  \n  if (character != 0) {\n    last_occurrence_ptr = (char *)0x0;\n    while (occurrence_ptr = strchr(string,character), occurrence_ptr != (char *)0x0) {\n      string = occurrence_ptr + 1;\n      last_occurrence_ptr = occurrence_ptr;\n    }\n    return last_occurrence_ptr;\n  }\n  last_occurrence_ptr = strchr(string,0);\n  return last_occurrence_ptr;\n}\n\n",
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "__s": "string",
                "__c": "character",
                "pcVar1": "occurrence_ptr",
                "pcVar2": "last_occurrence_ptr"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "strchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099a4": {
            "entrypoint": "0x080099a4",
            "current_name": "find_substring_080099a4",
            "code": "\nchar * find_substring_080099a4(char *haystack,char *needle)\n\n{\n  char *current_pos;\n  char *check_pos;\n  char *needle_pos;\n  \n  if (*haystack == '\\0') {\n    if (*needle != '\\0') {\n      haystack = (char *)0x0;\n    }\n    return haystack;\n  }\n  do {\n    current_pos = haystack;\n    if (*current_pos == '\\0') {\n      return (char *)0x0;\n    }\n    needle_pos = needle + -1;\n    check_pos = current_pos + -1;\n    do {\n      needle_pos = needle_pos + 1;\n      if (*needle_pos == '\\0') {\n        return current_pos;\n      }\n      check_pos = check_pos + 1;\n      haystack = current_pos + 1;\n    } while (*check_pos == *needle_pos);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "__haystack": "haystack",
                "__needle": "needle",
                "pcVar1": "current_pos",
                "pcVar2": "check_pos",
                "pcVar3": "needle_pos"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099dc": {
            "entrypoint": "0x080099dc",
            "current_name": "write_to_stream_080099dc",
            "code": "\nuint write_to_stream_080099dc(int stream,uint character,int *stream_buffer,undefined4 mode)\n\n{\n  int result;\n  uint stream_mode;\n  undefined *stream_ptr;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (stream_buffer == &__sf_fake_stdin) {\n    stream_buffer = *(int **)(stream + 4);\n  }\n  else if (stream_buffer == (int *)&__sf_fake_stdout) {\n    stream_buffer = *(int **)(stream + 8);\n  }\n  else if (stream_buffer == (int *)&__sf_fake_stderr) {\n    stream_buffer = *(int **)(stream + 0xc);\n  }\n  stream_buffer[2] = stream_buffer[6];\n  stream_mode = (uint)*(ushort *)(stream_buffer + 3);\n  result = stream_mode << 0x1c;\n  if (((result < 0) && (stream_mode = stream_buffer[4], stream_mode != 0)) ||\n     (result = __swsetup_r(stream,stream_buffer,result,stream_mode,mode), result == 0)) {\n    character = character & 0xff;\n    result = *stream_buffer - stream_buffer[4];\n    if ((result < stream_buffer[5]) || (result = _fflush_r(stream,stream_buffer), result == 0)) {\n      stream_buffer[2] = stream_buffer[2] + -1;\n      stream_ptr = (undefined *)*stream_buffer;\n      *stream_buffer = (int)(stream_ptr + 1);\n      *stream_ptr = (char)character;\n      if (result + 1 != stream_buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(stream_buffer + 3) << 0x1f)) {\n          return character;\n        }\n        if (character != 10) {\n          return character;\n        }\n      }\n      result = _fflush_r(stream,stream_buffer);\n      if (result == 0) {\n        return character;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080099dc": "write_to_stream_080099dc",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "stream_buffer",
                "param_4": "mode",
                "iVar1": "result",
                "uVar2": "stream_mode",
                "puVar3": "stream_ptr"
            },
            "calling": [
                "__sfputc_r"
            ],
            "called": [
                "__swsetup_r",
                "_fflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a80": {
            "entrypoint": "0x08009a80",
            "current_name": "sanitize_input_08009a80",
            "code": "\nuint sanitizeInput_08009a80(undefined4 *output,undefined4 *input)\n\n{\n  int ptr;\n  uint result;\n  ushort flags;\n  \n  ptr = _impure_ptr;\n  if ((_impure_ptr != 0) && (*(int *)(_impure_ptr + 0x18) == 0)) {\n    __sinit(_impure_ptr);\n  }\n  if (input == &__sf_fake_stdin) {\n    input = *(undefined4 **)(ptr + 4);\n  }\n  else if (input == (undefined4 *)&__sf_fake_stdout) {\n    input = *(undefined4 **)(ptr + 8);\n  }\n  else if (input == (undefined4 *)&__sf_fake_stderr) {\n    input = *(undefined4 **)(ptr + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          _free_r(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(output,input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08009ab0:\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009a80": "sanitize_input_08009a80",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "ptr",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "calling": [
                "_vfiprintf_r",
                "__swbuf_r"
            ],
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b5c": {
            "entrypoint": "0x08009b5c",
            "current_name": "terminate_program_08009b5c",
            "code": "\n\n\nvoid terminate_program_08009b5c(void)\n\n{\n  raise(6);\n                    \n  _exit(1);\n}\n\n",
            "renaming": {
                "FUN_08009b5c": "terminate_program_08009b5c"
            },
            "calling": [
                "__assert_func",
                "__throw_bad_function_call"
            ],
            "called": [
                "_exit",
                "raise"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b6c": {
            "entrypoint": "0x08009b6c",
            "current_name": "execute_command_08009b6c",
            "code": "\nundefined4 execute_command_08009b6c(uint *command_data,int *parameters)\n\n{\n  int temp_variable1;\n  int *temp_variable2;\n  uint ushort_value;\n  ushort ushort_data;\n  int temp_variable3;\n  code *function_pointer;\n  int temp_variable4;\n  uint uint_value;\n  bool check_flag;\n  \n  ushort_data = *(ushort *)(parameters + 3);\n  ushort_value = (uint)ushort_data;\n  if ((int)(ushort_value << 0x1c) < 0) {\n    temp_variable1 = parameters[4];\n    if (temp_variable1 != 0) {\n      temp_variable3 = ushort_value << 0x1e;\n      check_flag = temp_variable3 != 0;\n      if (check_flag) {\n        temp_variable3 = 0;\n      }\n      temp_variable4 = *parameters;\n      if (!check_flag) {\n        temp_variable3 = parameters[5];\n      }\n      *parameters = temp_variable1;\n      parameters[2] = temp_variable3;\n      for (temp_variable4 = temp_variable4 - temp_variable1; 0 < temp_variable4; temp_variable4 = temp_variable4 - temp_variable3) {\n        temp_variable3 = (*(code *)parameters[10])(command_data,parameters[8],temp_variable1,temp_variable4);\n        if (temp_variable3 < 1) {\n          ushort_data = *(ushort *)(parameters + 3);\n          goto LAB_08009c62;\n        }\n        temp_variable1 = temp_variable1 + temp_variable3;\n      }\n    }\n  }\n  else if (((0 < parameters[1]) || (0 < parameters[0x10])) &&\n          (function_pointer = (code *)parameters[0xb], function_pointer != (code *)0x0)) {\n    uint_value = *command_data;\n    *command_data = 0;\n    if ((ushort_data & 0x1000) == 0) {\n      temp_variable1 = (*function_pointer)(command_data,parameters[8],ushort_value & 0x1000,1);\n      if ((temp_variable1 == -1) && (ushort_value = *command_data, ushort_value != 0)) {\n        if ((ushort_value != 0x1d) && (ushort_value != 0x16)) {\n          *(ushort *)(parameters + 3) = *(ushort *)(parameters + 3) | 0x40;\n          return 0xffffffff;\n        }\n        *command_data = uint_value;\n        return 0;\n      }\n    }\n    else {\n      temp_variable1 = parameters[0x15];\n    }\n    if (((int)((uint)*(ushort *)(parameters + 3) << 0x1d) < 0) &&\n       (temp_variable1 = temp_variable1 - parameters[1], parameters[0xd] != 0)) {\n      temp_variable1 = temp_variable1 - parameters[0x10];\n    }\n    temp_variable1 = (*(code *)parameters[0xb])(command_data,parameters[8],temp_variable1,0);\n    ushort_data = *(ushort *)(parameters + 3);\n    if ((temp_variable1 == -1) &&\n       ((0x1d < *command_data || (-1 < (int)((0x20400001U >> (*command_data & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(parameters + 3) = ushort_data | 0x40;\n      return 0xffffffff;\n    }\n    parameters[1] = 0;\n    *parameters = parameters[4];\n    if (((int)((uint)ushort_data << 0x13) < 0) && ((temp_variable1 != -1 || (*command_data == 0)))) {\n      parameters[0x15] = temp_variable1;\n    }\n    temp_variable2 = (int *)parameters[0xd];\n    *command_data = uint_value;\n    if (temp_variable2 != (int *)0x0) {\n      if (temp_variable2 != parameters + 0x11) {\n        _free_r(command_data);\n      }\n      parameters[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009b6c": "execute_command_08009b6c",
                "param_1": "command_data",
                "param_2": "parameters",
                "iVar1": "temp_variable1",
                "piVar2": "temp_variable2",
                "uVar3": "ushort_value",
                "uVar4": "ushort_data",
                "iVar5": "temp_variable3",
                "pcVar6": "function_pointer",
                "iVar7": "temp_variable4",
                "uVar8": "uint_value",
                "bVar9": "check_flag"
            },
            "calling": [
                "_fflush_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009c7c": {
            "entrypoint": "0x08009c7c",
            "current_name": "check_and_flush_stdio_08009c7c",
            "code": "\nundefined4 check_and_flush_stdio_08009c7c(int stream,undefined4 *stream_address,undefined4 stream_pos,undefined4 stream_end)\n\n{\n  undefined4 flush_result;\n  \n  if (stream_address[4] != 0) {\n    if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n      __sinit();\n    }\n    if (stream_address == &__sf_fake_stdin) {\n      stream_address = *(undefined4 **)(stream + 4);\n    }\n    else if (stream_address == (undefined4 *)&__sf_fake_stdout) {\n      stream_address = *(undefined4 **)(stream + 8);\n    }\n    else if (stream_address == (undefined4 *)&__sf_fake_stderr) {\n      stream_address = *(undefined4 **)(stream + 0xc);\n    }\n    if (*(short *)(stream_address + 3) != 0) {\n      flush_result = __sflush_r(stream,stream_address,stream_pos,stream_end);\n      return flush_result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009c7c": "check_and_flush_stdio_08009c7c",
                "param_1": "stream",
                "param_2": "stream_address",
                "param_3": "stream_pos",
                "param_4": "stream_end",
                "uVar1": "flush_result"
            },
            "calling": [
                "__swbuf_r"
            ],
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009cd0": {
            "entrypoint": "0x08009cd0",
            "current_name": "execute_fwalk_reent_08009cd0",
            "code": "\nvoid execute_fwalk_reent_08009cd0(undefined4 arg)\n\n{\n  execute_file_walk_reentrant(arg,0x8009c7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cd0": "execute_fwalk_reent_08009cd0",
                "param_1": "arg",
                "_fwalk_reent": "execute_file_walk_reentrant"
            },
            "calling": [],
            "called": [
                "_fwalk_reent"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009cdc": {
            "entrypoint": "0x08009cdc",
            "current_name": "initialize_data_08009cdc",
            "code": "\nvoid initializeData_08009cdc(undefined4 *data,undefined2 value1,undefined2 value2)\n\n{\n  *data = 0;\n  data[1] = 0;\n  data[2] = 0;\n  *(undefined2 *)(data + 3) = value1;\n  data[25] = 0;\n  *(undefined2 *)((int)data + 0xe) = value2;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  memset(data + 0x17,0,8);\n  data[8] = data;\n  data[9] = 0x800a021;\n  data[10] = 0x800a043;\n  data[11] = 0x800a07b;\n  data[12] = 0x800a09f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cdc": "initialize_data_08009cdc",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[1]": "data[1]",
                "param_1[2]": "data[2]",
                "param_1[0x19]": "data[25]",
                "param_1[4]": "data[4]",
                "param_1[5]": "data[5]",
                "param_1[6]": "data[6]",
                "param_1[8]": "data[8]",
                "param_1[9]": "data[9]",
                "param_1[10]": "data[10]",
                "param_1[0xb]": "data[11]",
                "param_1[0xc]": "data[12]"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d24": {
            "entrypoint": "0x08009d24",
            "current_name": "allocate_memory_for_structure_08009d24",
            "code": "\nundefined4 * allocate_memory_for_structure_08009d24(undefined4 size_of_structure,int number_of_elements)\n\n{\n  undefined4 *structure_pointer;\n  int structure_size;\n  \n  structure_size = (number_of_elements + -1) * 0x68;\n  structure_pointer = (undefined4 *)_malloc_r(size_of_structure,structure_size + 0x74);\n  if (structure_pointer != (undefined4 *)0x0) {\n    *structure_pointer = 0;\n    structure_pointer[1] = number_of_elements;\n    structure_pointer[2] = structure_pointer + 3;\n    memset(structure_pointer + 3,0,structure_size + 0x68);\n  }\n  return structure_pointer;\n}\n\n",
            "renaming": {
                "FUN_08009d24": "allocate_memory_for_structure_08009d24",
                "param_1": "size_of_structure",
                "param_2": "number_of_elements",
                "puVar1": "structure_pointer",
                "iVar2": "structure_size"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d50": {
            "entrypoint": "0x08009d50",
            "current_name": "initialize_data_08009d50",
            "code": "\nvoid initializeData_08009d50(undefined1 *dataPtr)\n\n{\n  undefined4 uninitializedVar;\n  undefined1 *pointerVar;\n  \n  if (*(int *)(dataPtr + 0x18) == 0) {\n    *(undefined4 *)(dataPtr + 0x48) = 0;\n    *(undefined4 *)(dataPtr + 0x4c) = 0;\n    *(undefined4 *)(dataPtr + 0x50) = 0;\n    pointerVar = &impureData;\n    *(undefined4 *)(dataPtr + 0x28) = 0x8009cd1;\n    if (dataPtr == &impureData) {\n      pointerVar = (undefined1 *)0x1;\n    }\n    if (dataPtr == &impureData) {\n      *(undefined1 **)(dataPtr + 0x18) = pointerVar;\n    }\n    uninitializedVar = getSfp();\n    *(undefined4 *)(dataPtr + 4) = uninitializedVar;\n    uninitializedVar = getSfp(dataPtr);\n    *(undefined4 *)(dataPtr + 8) = uninitializedVar;\n    uninitializedVar = getSfp(dataPtr);\n    *(undefined4 *)(dataPtr + 0xc) = uninitializedVar;\n    standardFunction(*(undefined4 *)(dataPtr + 4),4,0);\n    standardFunction(*(undefined4 *)(dataPtr + 8),9,1);\n    standardFunction(*(undefined4 *)(dataPtr + 0xc),0x12,2);\n    *(undefined4 *)(dataPtr + 0x18) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009d50": "initialize_data_08009d50",
                "param_1": "dataPtr",
                "uVar1": "uninitializedVar",
                "puVar2": "pointerVar",
                "impure_data": "impureData",
                "__sfp": "getSfp",
                "std_isra_0": "standardFunction"
            },
            "calling": [
                "__swsetup_r",
                "_fflush_r",
                "_vfiprintf_r",
                "__swbuf_r",
                "iprintf",
                "__sfp"
            ],
            "called": [
                "std.isra.0",
                "__sfp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009db0": {
            "entrypoint": "0x08009db0",
            "current_name": "initialize_array_08009db0",
            "code": "\nint * initializeArray_08009db0(undefined4 *array)\n\n{\n  int *currentItem;\n  int *currentArray;\n  int **arrayList;\n  \n  if (DAT_200000ac == 0) {\n    __sinit(&impure_data);\n  }\n  arrayList = (int **)&DAT_200000dc;\n  do {\n    currentArray = arrayList[2];\n    currentItem = arrayList[1];\n    while (currentItem = (int *)((int)currentItem + -1), -1 < (int)currentItem) {\n      if (*(short *)(currentArray + 3) == 0) {\n        *(undefined2 *)((int)currentArray + 0xe) = 0xffff;\n        currentArray[0x19] = 0;\n        *(undefined2 *)(currentArray + 3) = 1;\n        *currentArray = 0;\n        currentArray[2] = 0;\n        currentArray[1] = 0;\n        currentArray[4] = 0;\n        currentArray[5] = 0;\n        currentArray[6] = 0;\n        memset(currentArray + 0x17,0,8);\n        currentArray[0xd] = 0;\n        currentArray[0xe] = 0;\n        currentArray[0x12] = 0;\n        currentArray[0x13] = 0;\n        return currentArray;\n      }\n      currentArray = currentArray + 0x1a;\n    }\n    if (*arrayList == (int *)0x0) {\n      currentItem = (int *)__sfmoreglue(array,4);\n      *arrayList = currentItem;\n      if (currentItem == (int *)0x0) {\n        *array = 0xc;\n        return (int *)0x0;\n      }\n    }\n    arrayList = (int **)*arrayList;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009db0": "initialize_array_08009db0",
                "param_1": "array",
                "piVar1": "currentItem",
                "piVar2": "currentArray",
                "ppiVar3": "arrayList"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "__sfmoreglue",
                "memset",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e28": {
            "entrypoint": "0x08009e28",
            "current_name": "process_data_08009e28",
            "code": "\nuint processData_08009e28(int dataStart,code *functionPtr,undefined4 paramA,undefined4 paramB)\n\n{\n  uint result;\n  int count;\n  int *ptr;\n  int varA;\n  uint combinedResult;\n  int varB;\n  \n  combinedResult = 0;\n  for (ptr = (int *)(dataStart + 0x48); ptr != (int *)0x0; ptr = (int *)*ptr) {\n    varA = ptr[2];\n    varB = ptr[1];\n    while (varB = varB + -1, -1 < varB) {\n      if ((1 < *(ushort *)(varA + 0xc)) && (count = *(short *)(varA + 0xe) + 1, count != 0)) {\n        result = (*functionPtr)(dataStart,varA,paramA,count,paramB);\n        combinedResult = combinedResult | result;\n      }\n      varA = varA + 0x68;\n    }\n  }\n  return combinedResult;\n}\n\n",
            "renaming": {
                "FUN_08009e28": "process_data_08009e28",
                "param_1": "dataStart",
                "param_2": "functionPtr",
                "param_3": "paramA",
                "param_4": "paramB",
                "uVar1": "result",
                "iVar2": "count",
                "piVar3": "ptr",
                "iVar4": "varA",
                "uVar5": "combinedResult",
                "iVar6": "varB"
            },
            "calling": [
                "_cleanup_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e64": {
            "entrypoint": "0x08009e64",
            "current_name": "check_file_permissions_08009e64",
            "code": "\nundefined4 checkFilePermissions_08009e64(undefined4 fileDescriptor,int fileStatBuffer,undefined4 *result,uint *isExecutable)\n\n{\n  int statResult;\n  undefined4 permissionFlag;\n  undefined tempBuffer [4];\n  uint fileMode;\n  \n  if ((*(short *)(fileStatBuffer + 0xe) < 0) ||\n     (statResult = _fstat_r(fileDescriptor,(int)*(short *)(fileStatBuffer + 0xe),tempBuffer), statResult < 0)) {\n    *isExecutable = 0;\n    if ((int)((uint)*(ushort *)(fileStatBuffer + 0xc) << 0x18) < 0) {\n      permissionFlag = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *isExecutable = (uint)((fileMode & 0xf000) == 0x2000);\n  }\n  permissionFlag = 0x400;\nLAB_08009ea4:\n  *result = permissionFlag;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009e64": "check_file_permissions_08009e64",
                "param_1": "fileDescriptor",
                "param_2": "fileStatBuffer",
                "param_3": "result",
                "param_4": "isExecutable",
                "iVar1": "statResult",
                "uVar2": "permissionFlag",
                "auStack_4c": "tempBuffer",
                "local_48": "fileMode"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009eac": {
            "entrypoint": "0x08009eac",
            "current_name": "process_data_08009eac",
            "code": "\nvoid processData_08009eac(int dataSize,int *dataPointer)\n\n{\n  ushort result;\n  int allocatedMemory;\n  int sizeVariable;\n  int *tempPointer;\n  \n  if (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x1e)) {\n    sizeVariable = dataSize;\n    tempPointer = dataPointer;\n    result = __swhatbuf_r(dataSize,dataPointer,&sizeVariable,&tempPointer);\n    allocatedMemory = _malloc_r(dataSize,sizeVariable);\n    if (allocatedMemory != 0) {\n      *(undefined4 *)(dataSize + 0x28) = 0x8009cd1;\n      *dataPointer = allocatedMemory;\n      *(ushort *)(dataPointer + 3) = *(ushort *)(dataPointer + 3) | 0x80;\n      dataPointer[4] = allocatedMemory;\n      dataPointer[5] = sizeVariable;\n      if ((tempPointer != (int *)0x0) &&\n         (allocatedMemory = _isatty_r(dataSize,(int)*(short *)((int)dataPointer + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(dataPointer + 3) = *(ushort *)(dataPointer + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(dataPointer + 3) = result | *(ushort *)(dataPointer + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(dataPointer + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(dataPointer + 3) = *(ushort *)(dataPointer + 3) & 0xfffc | 2;\n  }\n  *dataPointer = (int)dataPointer + 0x47;\n  dataPointer[4] = (int)dataPointer + 0x47;\n  dataPointer[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009eac": "process_data_08009eac",
                "param_1": "dataSize",
                "param_2": "dataPointer",
                "uVar1": "result",
                "iVar2": "allocatedMemory",
                "local_18": "sizeVariable",
                "local_14": "tempPointer"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "__swhatbuf_r",
                "_isatty_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f2c": {
            "entrypoint": "0x08009f2c",
            "current_name": "find_byte_in_memory_08009f2c",
            "code": "\nvoid * find_byte_in_memory_08009f2c(void *buffer,int target_byte,size_t size)\n\n{\n  byte *byte_pointer1;\n  byte *byte_pointer2;\n  \n  byte_pointer1 = (byte *)buffer;\n  do {\n    byte_pointer2 = byte_pointer1;\n    if (byte_pointer2 == (byte *)(size + (int)buffer)) {\n      return (void *)0x0;\n    }\n    byte_pointer1 = byte_pointer2 + 1;\n  } while ((uint)*byte_pointer2 != (target_byte & 0xffU));\n  return byte_pointer2;\n}\n\n",
            "renaming": {
                "FUN_08009f2c": "find_byte_in_memory_08009f2c",
                "__s": "buffer",
                "__c": "target_byte",
                "__n": "size",
                "pbVar1": "byte_pointer1",
                "pbVar2": "byte_pointer2"
            },
            "calling": [
                "_printf_i",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f48": {
            "entrypoint": "0x08009f48",
            "current_name": "FUNC_08009f48",
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4a": {
            "entrypoint": "0x08009f4a",
            "current_name": "FUNC_08009f4a",
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4c": {
            "entrypoint": "0x08009f4c",
            "current_name": "allocate_or_copy_memory_08009f4c",
            "code": "\nvoid * allocate_or_copy_memory_08009f4c(undefined4 context,void *source,uint size,undefined4 extra_param)\n\n{\n  void *result;\n  uint usable_size;\n  \n  if (source != (void *)0x0) {\n    if (size == 0) {\n      _free_r();\n      result = (void *)0x0;\n    }\n    else {\n      usable_size = _malloc_usable_size_r();\n      result = source;\n      if ((usable_size < size) && (result = (void *)_malloc_r(context,size), result != (void *)0x0))\n      {\n        memcpy(result,source,size);\n        _free_r(context,source);\n      }\n    }\n    return result;\n  }\n  result = (void *)_malloc_r(context,size,size,extra_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009f4c": "allocate_or_copy_memory_08009f4c",
                "param_1": "context",
                "param_2": "source",
                "param_3": "size",
                "param_4": "extra_param",
                "pvVar1": "result",
                "uVar2": "usable_size"
            },
            "calling": [
                "realloc"
            ],
            "called": [
                "_free_r",
                "_malloc_usable_size_r",
                "_malloc_r",
                "memcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f98": {
            "entrypoint": "0x08009f98",
            "current_name": "execute_process_08009f98",
            "code": "\nundefined4 executeProcess_08009f98(undefined4 *status,uint processCode,undefined4 param3,undefined4 param4)\n\n{\n  __pid_t pid;\n  undefined4 result;\n  int processArray;\n  code *processFunction;\n  \n  if (0x1f < processCode) {\n    *status = 0x16;\n    return 0xffffffff;\n  }\n  processArray = status[0x11];\n  if ((processArray != 0) && (processFunction = *(code **)(processArray + processCode * 4), processFunction != (code *)0x0)) {\n    if (processFunction != (code *)0x1) {\n      if (processFunction == (code *)0xffffffff) {\n        *status = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(processArray + processCode * 4) = 0;\n      (*processFunction)(processCode);\n    }\n    return 0;\n  }\n  pid = _getpid_r();\n  result = _kill_r(status,pid,processCode,param4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009f98": "execute_process_08009f98",
                "param_1": "status",
                "param_2": "processCode",
                "param_3": "param3",
                "param_4": "param4",
                "_Var1": "pid",
                "uVar2": "result",
                "iVar3": "processArray",
                "pcVar4": "processFunction"
            },
            "calling": [
                "raise"
            ],
            "called": [
                "_kill_r",
                "_getpid_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009fe8": {
            "entrypoint": "0x08009fe8",
            "current_name": "raise_signal_08009fe8",
            "code": "\nint raise_signal_08009fe8(int signal_number)\n\n{\n  int result;\n  \n  result = _raise_r(_impure_ptr,signal_number);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009fe8": "raise_signal_08009fe8",
                "__sig": "signal_number",
                "iVar1": "result"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_raise_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009ff8": {
            "entrypoint": "0x08009ff8",
            "current_name": "kill_process_08009ff8",
            "code": "\nvoid kill_process_08009ff8(int *error_code,__pid_t process_id,int signal)\n\n{\n  int kill_result;\n  \n  errno = 0;\n  kill_result = _kill(process_id,signal);\n  if ((kill_result == -1) && (errno != 0)) {\n    *error_code = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009ff8": "kill_process_08009ff8",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal",
                "iVar1": "kill_result"
            },
            "calling": [
                "_raise_r"
            ],
            "called": [
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a01c": {
            "entrypoint": "0x0800a01c",
            "current_name": "FUN_0800a01c",
            "code": "\n\n\n__pid_t _getpid(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {},
            "calling": [
                "_raise_r"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a020": {
            "entrypoint": "0x0800a020",
            "current_name": "update_data_0800a020",
            "code": "\nvoid updateData_0800a020(undefined4 dataBuffer,int dataOffset)\n\n{\n  int readResult;\n  uint updatedValue;\n  bool isReadSuccessful;\n  \n  readResult = _read_r(dataBuffer,(int)*(short *)(dataOffset + 0xe));\n  isReadSuccessful = -1 < readResult;\n  if (isReadSuccessful) {\n    updatedValue = *(int *)(dataOffset + 0x54) + readResult;\n  }\n  else {\n    updatedValue = *(ushort *)(dataOffset + 0xc) & 0xffffefff;\n  }\n  if (isReadSuccessful) {\n    *(uint *)(dataOffset + 0x54) = updatedValue;\n  }\n  if (!isReadSuccessful) {\n    *(short *)(dataOffset + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a020": "update_data_0800a020",
                "param_1": "dataBuffer",
                "param_2": "dataOffset",
                "iVar1": "readResult",
                "uVar2": "updatedValue",
                "bVar3": "isReadSuccessful"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a042": {
            "entrypoint": "0x0800a042",
            "current_name": "seek_and_write_data_0800a042",
            "code": "\nvoid seekAndWriteData_0800a042(undefined4 fileDescriptor,int dataPointer,undefined4 data,undefined4 size)\n\n{\n  if ((int)((uint)*(ushortValue *)(dataPointer + 0xc) << 0x17) < 0) {\n    _setFilePosition(fileDescriptor,(int)*(short *)(dataPointer + 0xe),0,2);\n  }\n  *(ushortValue *)(dataPointer + 0xc) = *(ushortValue *)(dataPointer + 0xc) & 0xefff;\n  _writeToFile(fileDescriptor,(int)*(short *)(dataPointer + 0xe),data,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a042": "seek_and_write_data_0800a042",
                "param_1": "fileDescriptor",
                "param_2": "dataPointer",
                "param_3": "data",
                "param_4": "size",
                "ushort": "ushortValue",
                "lseek_r": "setFilePosition",
                "write_r": "writeToFile"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a07a": {
            "entrypoint": "0x0800a07a",
            "current_name": "seek_and_set_flags_0800a07a",
            "code": "\nvoid seekAndSetFlags_0800a07a(undefined4 fileDesc,int dataStruct)\n\n{\n  int seekResult;\n  ushort newFlags;\n  bool seekFailed;\n  \n  seekResult = _lseek_r(fileDesc,(int)*(short *)(dataStruct + 0xe));\n  seekFailed = seekResult == -1;\n  if (seekFailed) {\n    newFlags = *(ushort *)(dataStruct + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(dataStruct + 0x54) = seekResult;\n    newFlags = *(ushort *)(dataStruct + 0xc) | 0x1000;\n  }\n  if (seekFailed) {\n    *(ushort *)(dataStruct + 0xc) = newFlags;\n  }\n  if (!seekFailed) {\n    *(ushort *)(dataStruct + 0xc) = newFlags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a07a": "seek_and_set_flags_0800a07a",
                "param_1": "fileDesc",
                "param_2": "dataStruct",
                "iVar1": "seekResult",
                "uVar2": "newFlags",
                "bVar3": "seekFailed"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a09e": {
            "entrypoint": "0x0800a09e",
            "current_name": "close_file_0800a09e",
            "code": "\nvoid closeFile_0800a09e(undefined4 fileDescriptor,int memoryOffset)\n\n{\n  _close_r(fileDescriptor,(int)*(short *)(memoryOffset + 0xe));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a09e": "close_file_0800a09e",
                "param_1": "fileDescriptor",
                "param_2": "memoryOffset"
            },
            "calling": [],
            "called": [
                "_close_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0a8": {
            "entrypoint": "0x0800a0a8",
            "current_name": "write_data_to_file_0800a0a8",
            "code": "\nvoid writeDataToFile_0800a0a8(int *errorNumber,int fileDescriptor,char *buffer,int size)\n\n{\n  int writeResult;\n  \n  errno = 0;\n  writeResult = _write(fileDescriptor,buffer,size);\n  if ((writeResult == -1) && (errno != 0)) {\n    *errorNumber = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0a8": "write_data_to_file_0800a0a8",
                "param_1": "errorNumber",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "size",
                "iVar1": "writeResult"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0cc": {
            "entrypoint": "0x0800a0cc",
            "current_name": "close_file_and_handle_errors_0800a0cc",
            "code": "\nvoid closeFileAndHandleErrors_0800a0cc(int *errorCode,int fileDescriptor)\n\n{\n  int closeResult;\n  \n  errno = 0;\n  closeResult = _close(fileDescriptor);\n  if ((closeResult == -1) && (errno != 0)) {\n    *errorCode = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0cc": "close_file_and_handle_errors_0800a0cc",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "iVar1": "closeResult"
            },
            "calling": [
                "__sclose"
            ],
            "called": [
                "_close"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0ec": {
            "entrypoint": "0x0800a0ec",
            "current_name": "get_file_info_0800a0ec",
            "code": "\nvoid getFileInfo_0800a0ec(int *error,int fileDescriptor,stat *fileStat)\n\n{\n  int fileStatus;\n  \n  errno = 0;\n  fileStatus = _fstat(fileDescriptor,fileStat);\n  if ((fileStatus == -1) && (errno != 0)) {\n    *error = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0ec": "get_file_info_0800a0ec",
                "param_1": "error",
                "param_2": "fileDescriptor",
                "param_3": "fileStat",
                "iVar1": "fileStatus"
            },
            "calling": [
                "__swhatbuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a110": {
            "entrypoint": "0x0800a110",
            "current_name": "check_if_file_descriptor_is_tty_0800a110",
            "code": "\nvoid checkIfFileDescriptorIsTty_0800a110(int *errorCode,int fileDescriptor)\n\n{\n  int isTty;\n  \n  errorNumber = 0;\n  isTty = _isatty(fileDescriptor);\n  if ((isTty == -1) && (errorNumber != 0)) {\n    *errorCode = errorNumber;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a110": "check_if_file_descriptor_is_tty_0800a110",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "iVar1": "isTty",
                "errno": "errorNumber"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a130": {
            "entrypoint": "0x0800a130",
            "current_name": "perform_lseek_and_report_error_0800a130",
            "code": "\nvoid performLseekAndReportError_0800a130(int *errorNumber,int fileDescriptor,__off_t offset,int whence)\n\n{\n  __off_t lseekResult;\n  \n  errno = 0;\n  lseekResult = _lseek(fileDescriptor,offset,whence);\n  if ((lseekResult == -1) && (errno != 0)) {\n    *errorNumber = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a130": "perform_lseek_and_report_error_0800a130",
                "param_1": "errorNumber",
                "param_2": "fileDescriptor",
                "param_3": "offset",
                "param_4": "whence",
                "_Var1": "lseekResult"
            },
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a154": {
            "entrypoint": "0x0800a154",
            "current_name": "calculate_sum_0800a154",
            "code": "\nint calculateSum_0800a154(undefined4 inputValue,int arrayPointer)\n\n{\n  int sum;\n  \n  sum = *(int *)(arrayPointer + -4) + -4;\n  if (*(int *)(arrayPointer + -4) < 0) {\n    sum = sum + *(int *)(arrayPointer + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_0800a154": "calculate_sum_0800a154",
                "param_1": "inputValue",
                "param_2": "arrayPointer",
                "iVar1": "sum"
            },
            "calling": [
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a168": {
            "entrypoint": "0x0800a168",
            "current_name": "read_file_with_error_code_0800a168",
            "code": "\nvoid readFileWithErrorCode_0800a168(int *errorCode,int fileDescriptor,char *buffer,int size)\n\n{\n  int readResult;\n  \n  errno = 0;\n  readResult = _read(fileDescriptor,buffer,size);\n  if ((readResult == -1) && (errno != 0)) {\n    *errorCode = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a168": "read_file_with_error_code_0800a168",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "size",
                "iVar1": "readResult"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a18c": {
            "entrypoint": "0x0800a18c",
            "current_name": "abort_function_0800a18c",
            "code": "\n\n/* std::__throw_bad_function_call() */\n\nvoid std::abort_function_0800a18c(void)\n\n{\n                    \n  abort();\n}\n\n",
            "renaming": {
                "FUN_0800a18c": "abort_function_0800a18c"
            },
            "calling": [
                "operator()"
            ],
            "called": [
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a194": {
            "entrypoint": "0x0800a194",
            "current_name": "initialize_locale_specific_facets_0800a194",
            "code": "\n/* std::ctype_byname<char>::ctype_byname(std::basic_string<char, std::char_traits<char>,\n   std::allocator<char> > const&, unsigned int) */\n\nvoid std::ctype_byname<char>::initializeLocaleSpecificFacets_0800a194(void)\n\n{\n  if (-1 < moneypunct<char,false>::id << 0x1f) {\n    moneypunct<char,false>::id = 1;\n  }\n  if (-1 < moneypunct<char,true>::id << 0x1f) {\n    moneypunct<char,true>::id = 1;\n  }\n  if (-1 < money_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    money_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < money_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    money_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < numpunct<char>::id << 0x1f) {\n    numpunct<char>::id = 1;\n  }\n  if (-1 < num_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    num_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < num_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    num_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < __timepunct<char>::id << 0x1f) {\n    __timepunct<char>::id = 1;\n  }\n  if (-1 < time_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    time_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < time_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    time_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < messages<char>::id << 0x1f) {\n    messages<char>::id = 1;\n  }\n  if (-1 < collate<char>::id << 0x1f) {\n    collate<char>::id = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a194": "initialize_locale_specific_facets_0800a194"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a258": {
            "entrypoint": "0x0800a258",
            "current_name": "initialize_ctype_by_name_0800a258",
            "code": "\n/* std::ctype_byname<wchar_t>::ctype_byname(std::basic_string<char, std::char_traits<char>,\n   std::allocator<char> > const&, unsigned int) */\n\nvoid std::ctype_byname<wchar_t>::initializeCtypeByName_0800a258(void)\n\n{\n  if (-1 < moneypunct<wchar_t,false>::id << 0x1f) {\n    moneypunct<wchar_t,false>::id = 1;\n  }\n  if (-1 < moneypunct<wchar_t,true>::id << 0x1f) {\n    moneypunct<wchar_t,true>::id = 1;\n  }\n  if (-1 < money_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id <<\n           0x1f) {\n    money_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < money_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id <<\n           0x1f) {\n    money_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < numpunct<wchar_t>::id << 0x1f) {\n    numpunct<wchar_t>::id = 1;\n  }\n  if (-1 < num_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id << 0x1f)\n  {\n    num_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id << 0x1f)\n  {\n    num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < __timepunct<wchar_t>::id << 0x1f) {\n    __timepunct<wchar_t>::id = 1;\n  }\n  if (-1 < time_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id << 0x1f\n     ) {\n    time_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id << 0x1f\n     ) {\n    time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < messages<wchar_t>::id << 0x1f) {\n    messages<wchar_t>::id = 1;\n  }\n  if (-1 < collate<wchar_t>::id << 0x1f) {\n    collate<wchar_t>::id = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a258": "initialize_ctype_by_name_0800a258"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a31c": {
            "entrypoint": "0x0800a31c",
            "current_name": "initialize_locale_0800a31c",
            "code": "\n/* std::ctype_byname<wchar_t>::ctype_byname(std::__cxx11::basic_string<char, std::char_traits<char>,\n   std::allocator<char> > const&, unsigned int) */\n\nvoid std::ctype_byname<wchar_t>::initializeLocale_0800a31c(void)\n\n{\n  if (-1 < __cxx11::moneypunct<wchar_t,false>::id << 0x1f) {\n    __cxx11::moneypunct<wchar_t,false>::id = 1;\n  }\n  if (-1 < __cxx11::moneypunct<wchar_t,true>::id << 0x1f) {\n    __cxx11::moneypunct<wchar_t,true>::id = 1;\n  }\n  if (-1 < __cxx11::money_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::\n           id << 0x1f) {\n    __cxx11::money_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < __cxx11::money_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::\n           id << 0x1f) {\n    __cxx11::money_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < __cxx11::numpunct<wchar_t>::id << 0x1f) {\n    __cxx11::numpunct<wchar_t>::id = 1;\n  }\n  if (-1 < __cxx11::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::\n           id << 0x1f) {\n    __cxx11::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < __cxx11::messages<wchar_t>::id << 0x1f) {\n    __cxx11::messages<wchar_t>::id = 1;\n  }\n  if (-1 < __cxx11::collate<wchar_t>::id << 0x1f) {\n    __cxx11::collate<wchar_t>::id = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a31c": "initialize_locale_0800a31c"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a3a0": {
            "entrypoint": "0x0800a3a0",
            "current_name": "initialize_locale_c_type_0800a3a0",
            "code": "\n/* std::ctype_byname<char>::ctype_byname(std::__cxx11::basic_string<char, std::char_traits<char>,\n   std::allocator<char> > const&, unsigned int) */\n\nvoid std::ctype_byname<char>::initializeLocaleCType_0800a3a0(void)\n\n{\n  if (-1 < __cxx11::moneypunct<char,false>::id << 0x1f) {\n    __cxx11::moneypunct<char,false>::id = 1;\n  }\n  if (-1 < __cxx11::moneypunct<char,true>::id << 0x1f) {\n    __cxx11::moneypunct<char,true>::id = 1;\n  }\n  if (-1 < __cxx11::money_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id <<\n           0x1f) {\n    __cxx11::money_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < __cxx11::money_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id <<\n           0x1f) {\n    __cxx11::money_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < __cxx11::numpunct<char>::id << 0x1f) {\n    __cxx11::numpunct<char>::id = 1;\n  }\n  if (-1 < __cxx11::time_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f\n     ) {\n    __cxx11::time_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < __cxx11::messages<char>::id << 0x1f) {\n    __cxx11::messages<char>::id = 1;\n  }\n  if (-1 < __cxx11::collate<char>::id << 0x1f) {\n    __cxx11::collate<char>::id = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a3a0": "initialize_locale_c_type_0800a3a0"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a424": {
            "entrypoint": "0x0800a424",
            "current_name": "FUNC_0800a424",
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "calling": [
                "__do_global_dtors_aux",
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800a430": {
            "entrypoint": "0x0800a430",
            "current_name": "FUNC_0800a430",
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 236621,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_0800018c",
            "FUN_080001a8",
            "FUN_08000214",
            "FUN_080002ec",
            "FUN_08000488",
            "FUN_080004d4",
            "FUN_08000500",
            "FUN_08000588",
            "FUN_080005e0",
            "FUN_080005f8",
            "FUN_08000a64",
            "FUN_08000aec",
            "FUN_08000be8",
            "FUN_08000c18",
            "FUN_08000ef8",
            "FUN_08001b48",
            "FUN_08001be8",
            "FUN_08001bf8",
            "FUN_08001c08",
            "FUN_08001c18",
            "FUN_08001cd0",
            "FUN_080022f8",
            "FUN_08002400",
            "FUN_0800242c",
            "FUN_08002444",
            "FUN_08002578",
            "FUN_08002580",
            "FUN_080025ac",
            "FUN_08002634",
            "FUN_08002644",
            "FUN_0800267c",
            "FUN_080026b0",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_0800274c",
            "FUN_08002774",
            "FUN_08002798",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_0800291c",
            "FUN_08002948",
            "FUN_08002968",
            "FUN_08002a1c",
            "FUN_08002a26",
            "FUN_08002a30",
            "FUN_08002a58",
            "FUN_08002ac0",
            "FUN_08002acc",
            "FUN_08002b00",
            "FUN_08002b68",
            "FUN_08002c00",
            "FUN_08002c14",
            "FUN_08002c1e",
            "FUN_08002c2c",
            "FUN_08002c40",
            "FUN_08002c54",
            "FUN_08002c68",
            "FUN_08002c7c",
            "FUN_08002c90",
            "FUN_08002ca4",
            "FUN_08002cb8",
            "FUN_08002cd0",
            "FUN_08002ce0",
            "FUN_08002dbc",
            "FUN_08002ddc",
            "FUN_08002dea",
            "FUN_08002df6",
            "FUN_08002e1a",
            "FUN_08002e26",
            "FUN_08002e44",
            "FUN_08002ec4",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08002f14",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_08002fca",
            "FUN_08003002",
            "FUN_08003048",
            "FUN_0800306c",
            "FUN_0800307a",
            "FUN_08003106",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_08003158",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800322c",
            "FUN_0800325a",
            "FUN_080032a2",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_080033cc",
            "FUN_0800344a",
            "FUN_08003474",
            "FUN_080035b8",
            "FUN_08003658",
            "FUN_080036a0",
            "FUN_080036a2",
            "FUN_080036ac",
            "FUN_080036d8",
            "FUN_08003724",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_0800376c",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003a20",
            "FUN_08003aa0",
            "FUN_08003b8c",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_08003e20",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_080042f0",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_080045c0",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_08004f3c",
            "FUN_08005084",
            "FUN_08005188",
            "FUN_080052f0",
            "FUN_080053cc",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005460",
            "FUN_08005840",
            "FUN_080058ac",
            "FUN_08005a1c",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005a68",
            "FUN_08005aa4",
            "FUN_08005bb8",
            "FUN_08005cb4",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08005fe8",
            "FUN_08006060",
            "FUN_08006092",
            "FUN_080060c4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006262",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_08006420",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_08006538",
            "FUN_080066e8",
            "FUN_0800674e",
            "FUN_080067ac",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_080069ec",
            "FUN_08006b0c",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006ca8",
            "FUN_08006d24",
            "FUN_08006d80",
            "FUN_08006e68",
            "FUN_08007110",
            "FUN_08007118",
            "FUN_080071e4",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_080072fa",
            "FUN_08007306",
            "FUN_08007320",
            "FUN_08007332",
            "FUN_0800734a",
            "FUN_0800735a",
            "FUN_08007376",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073d8",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080075dc",
            "FUN_08007648",
            "FUN_080076e0",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_08007718",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_08007760",
            "FUN_08007774",
            "FUN_08007788",
            "FUN_0800779c",
            "FUN_080077b0",
            "FUN_08007e74",
            "FUN_08007ede",
            "FUN_08007f0e",
            "FUN_08007f78",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_08008038",
            "FUN_08008048",
            "FUN_08008058",
            "FUN_08008068",
            "FUN_08008078",
            "FUN_080084b0",
            "FUN_08008500",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008694",
            "FUN_080086e8",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_0800877c",
            "FUN_080087bc",
            "FUN_080087d4",
            "FUN_080087ec",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_0800885c",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008880",
            "FUN_080088e0",
            "FUN_08008990",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008ac6",
            "FUN_08008afa",
            "FUN_08008b0e",
            "FUN_08008b2a",
            "FUN_08008b52",
            "FUN_08008b66",
            "FUN_08008ba4",
            "FUN_08008c20",
            "FUN_08008c44",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008d30",
            "FUN_08008d8c",
            "FUN_08008db0",
            "FUN_08008dbe",
            "FUN_08008df8",
            "FUN_08008e14",
            "FUN_08008e40",
            "FUN_08008e4e",
            "FUN_08008e72",
            "FUN_08008e7c",
            "FUN_08008ed6",
            "FUN_08008eec",
            "FUN_08008ef4",
            "FUN_08008f0e",
            "FUN_08008f1c",
            "FUN_08008f3c",
            "FUN_08008f50",
            "FUN_08008f78",
            "FUN_08009024",
            "FUN_0800902e",
            "FUN_08009038",
            "FUN_08009042",
            "FUN_0800904c",
            "FUN_08009056",
            "FUN_0800906c",
            "FUN_08009084",
            "FUN_08009094",
            "FUN_080090b4",
            "FUN_080090c2",
            "FUN_080090cc",
            "FUN_08009108",
            "FUN_08009124",
            "FUN_08009148",
            "FUN_08009190",
            "FUN_080091a0",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_08009270",
            "FUN_0800932c",
            "FUN_08009358",
            "FUN_0800937c",
            "FUN_080095a8",
            "FUN_08009698",
            "FUN_080098d8",
            "FUN_08009908",
            "FUN_08009918",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_0800997e",
            "FUN_080099a4",
            "FUN_080099dc",
            "FUN_08009a80",
            "FUN_08009b5c",
            "FUN_08009b6c",
            "FUN_08009c7c",
            "FUN_08009cd0",
            "FUN_08009cdc",
            "FUN_08009d24",
            "FUN_08009d50",
            "FUN_08009db0",
            "FUN_08009e28",
            "FUN_08009e64",
            "FUN_08009eac",
            "FUN_08009f2c",
            "FUN_08009f4c",
            "FUN_08009f98",
            "FUN_08009fe8",
            "FUN_08009ff8",
            "FUN_0800a020",
            "FUN_0800a042",
            "FUN_0800a07a",
            "FUN_0800a09e",
            "FUN_0800a0a8",
            "FUN_0800a0cc",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a154",
            "FUN_0800a168",
            "FUN_0800a18c",
            "FUN_0800a194",
            "FUN_0800a258",
            "FUN_0800a31c",
            "FUN_0800a3a0"
        ]
    ],
    "locked_functions": []
}