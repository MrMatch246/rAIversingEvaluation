{
    "functions": {
        "FUN_08007246": {
            "renaming": {
                "FUN_08007246": "run_all_functions_08007246",
                "FUN_08004046": "load_data",
                "FUN_08003748": "initialize_graphics",
                "do_nothing_08007244": "do_nothing"
            },
            "code": "void run_all_functions_08007246(void)\n{\n  initialize_graphics();\n  load_data();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08007244",
                "FUN_08003748",
                "FUN_08004046"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007246",
            "calling": [],
            "imported": true,
            "current_name": "run_all_functions_08007246"
        },
        "FUN_0800a042": {
            "renaming": {
                "sVar1": "data_value",
                "FUN_0800a042": "process_data_0800a042",
                "iVar3": "result",
                "puVar2": "ptr_data",
                "param_1": "output",
                "unaff_r5": "unaff_r5",
                "unaff_r4": "unaff_r4",
                "param_2": "input_offset",
                "param_3": "param_3",
                "param_4": "param_4",
                "in_lr": "in_lr"
            },
            "code": "void process_data_0800a042(int *output, int input_offset, undefined4 param_3, undefined4 param_4)\n{\n  short data_value;\n  undefined *ptr_data;\n  int result;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 in_lr;\n  \n  if ((int)((uint)*(ushort *)(input_offset + 0xc) << 0x17) < 0) {\n    set_data(output,(int)*(short *)(input_offset + 0xe),0,2);\n  }\n  *(ushort *)(input_offset + 0xc) = *(ushort *)(input_offset + 0xc) & 0xefff;\n  ptr_data = PTR_DAT_0800a0c8;\n  data_value = *(short *)(input_offset + 0xe);\n  *(undefined4 *)PTR_DAT_0800a0c8 = 0;\n  result = calculate_value((int)data_value,param_3,param_4,param_4,param_4,unaff_r4,unaff_r5,in_lr);\n  if ((result == -1) && (*(int *)ptr_data != 0)) {\n    *output = *(int *)ptr_data;\n  }\n  return;\n}",
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a042",
            "calling": [],
            "imported": true,
            "current_name": "process_data_0800a042"
        },
        "FUN_08008694": {
            "renaming": {
                "bVar1": "byte_index",
                "PTR_DAT_080086dc": "ptr_data_1",
                "FUN_08008694": "update_data_structure_08008694",
                "char_index": "char_index",
                "param_1": "data_structure_index",
                "PTR_DAT_080086e0": "ptr_data_2",
                "FUN_0800688e": "update_function_3",
                "param_2": "new_data",
                "PTR_DAT_080086e4": "ptr_data_3",
                "FUN_08003f94": "update_function_2",
                "FUN_08003f30": "update_function_1"
            },
            "code": "void update_data_structure_08008694(int data_structure_index, int new_data) {\n\tif (data_structure_index != 0) {\n\t\tint byte_index = *(byte *)(data_structure_index + 0x44);\n\t\t*(undefined4 *)(PTR_DAT_080086dc + (uint)byte_index * 4) = new_data;\n\t\t*(int *)(PTR_DAT_080086e0 + (uint)byte_index * 4) = data_structure_index;\n\t\tint char_index = *(char *)(data_structure_index + 0x5a);\n\t\tupdate_function_1(char_index, 0, 2);\n\t\tupdate_function_2(char_index);\n\t\tint ptr_index = *(byte *)(data_structure_index + 0x44);\n\t\tupdate_function_3(*(undefined4 *)(PTR_DAT_080086e4 + (uint)ptr_index * 4), *(int *)(data_structure_index + 100) + (uint)*(ushort *)(data_structure_index + 0x6a), 1);\n\t}\n}",
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_0800688e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008694",
            "calling": [],
            "imported": true,
            "current_name": "update_data_structure_08008694"
        },
        "FUN_08002ce0": {
            "renaming": {
                "iVar1": "data_ptr",
                "PTR_LAB_08002cd0_1_08002db8": "ptr_lab_10",
                "PTR_LAB_08002c68_1_08002da4": "ptr_lab_5",
                "FUN_08002ce0": "initialize_data_structures_08002ce0",
                "PTR_LAB_08002cb8_1_08002dac": "ptr_lab_7",
                "param_1": "data_structure_ptr",
                "PTR_LAB_08002c90_1_08002d9c": "ptr_lab_3",
                "PTR_LAB_08002c40_1_08002d94": "ptr_lab_1",
                "PTR_LAB_08002c7c_1_08002d98": "ptr_lab_2",
                "PTR_LAB_08002e1a_1_08002db0": "ptr_lab_8",
                "PTR_FUN_08002c2c_1_08002d90": "ptr_fun_1",
                "FUN_0800314e": "initialize_data",
                "PTR_LAB_08002c54_1_08002da0": "ptr_lab_4",
                "PTR_LAB_08002dea_1_08002db4": "ptr_lab_9",
                "PTR_LAB_08002ca4_1_08002da8": "ptr_lab_6"
            },
            "code": "int initialize_data_structures_08002ce0(int data_structure_ptr)\n{\n  int data_ptr = data_structure_ptr + 0x44;\n  memset((void *)(data_structure_ptr + 0x40), 0, 0x40);\n  memset((void *)(data_structure_ptr + 0xc4), 0, 1);\n  memset((void *)(data_structure_ptr + 200), 0, 4);\n  memset((void *)(data_structure_ptr + 0x1f8), 0, 1);\n  initialize_data(data_ptr, 0xe0, PTR_FUN_08002c2c_1_08002d90, 0);\n  initialize_data(data_ptr, 0x90, PTR_LAB_08002c40_1_08002d94, 0);\n  initialize_data(data_ptr, 0xc0, PTR_LAB_08002c7c_1_08002d98, 0);\n  initialize_data(data_ptr, 0xd0, PTR_LAB_08002c90_1_08002d9c, 0);\n  initialize_data(data_ptr, 0xf4, PTR_LAB_08002c54_1_08002da0, 0);\n  initialize_data(data_ptr, 0xf5, PTR_LAB_08002c68_1_08002da4, 0);\n  initialize_data(data_ptr, 0x71, PTR_LAB_08002ca4_1_08002da8, 0);\n  initialize_data(data_ptr, 0xf0, PTR_LAB_08002cb8_1_08002dac, 0);\n  initialize_data(data_ptr, 0x79, PTR_LAB_08002e1a_1_08002db0, data_structure_ptr);\n  initialize_data(data_ptr, 0xf9, PTR_LAB_08002dea_1_08002db4, data_structure_ptr);\n  initialize_data(data_ptr, 0xff, PTR_LAB_08002cd0_1_08002db8, 0);\n  return data_structure_ptr;\n}",
            "called": [
                "FUN_0800314e",
                "FUN_080032bc",
                "FUN_08003370",
                "FUN_08003350",
                "FUN_08003346",
                "FUN_08003306",
                "FUN_08003366"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ce0",
            "calling": [
                "FUN_08002dbc"
            ],
            "imported": true,
            "current_name": "initialize_data_structures_08002ce0"
        },
        "FUN_08009db0": {
            "renaming": {
                "iVar3": "array_ptr_offset",
                "FUN_08009db0": "find_unused_item_08009db0",
                "FUN_08009d50": "initialize_array",
                "piVar2": "item_array_ptr",
                "param_1": "error_code",
                "piVar1": "item_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_080091c6": "initialize_item",
                "PTR_PTR_DAT_08009e24": "array_ptr_offset_ptr",
                "ppiVar4": "array_ptr_ptr"
            },
            "code": "int* find_unused_item_08009db0(undefined4* error_code, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int* item_ptr;\n  int* item_array_ptr;\n  int array_ptr_offset;\n  int** array_ptr_ptr;\n  \n  array_ptr_offset = *(int*)PTR_PTR_DAT_08009e24;\n  if (*(int*)(array_ptr_offset + 0x18) == 0)\n  {\n    initialize_array(array_ptr_offset);\n  }\n  array_ptr_ptr = (int**)(array_ptr_offset + 0x48);\n  do\n  {\n    item_array_ptr = array_ptr_ptr[2];\n    item_ptr = array_ptr_ptr[1];\n    while (item_ptr = (int*)((int)item_ptr + -1), -1 < (int)item_ptr)\n    {\n      if (*(short*)(item_array_ptr + 3) == 0)\n      {\n        *(undefined2*)((int)item_array_ptr + 0xe) = 0xffff;\n        item_array_ptr[0x19] = 0;\n        *(undefined2*)(item_array_ptr + 3) = 1;\n        *item_array_ptr = 0;\n        item_array_ptr[2] = 0;\n        item_array_ptr[1] = 0;\n        item_array_ptr[4] = 0;\n        item_array_ptr[5] = 0;\n        item_array_ptr[6] = 0;\n        initialize_item(item_array_ptr + 0x17, 0, 8, 1, param_4);\n        item_array_ptr[0xd] = 0;\n        item_array_ptr[0xe] = 0;\n        item_array_ptr[0x12] = 0;\n        item_array_ptr[0x13] = 0;\n        return item_array_ptr;\n      }\n      item_array_ptr = item_array_ptr + 0x1a;\n    }\n    if (*array_ptr_ptr == (int*)0x0)\n    {\n      item_ptr = (int*)create_item(error_code, 4);\n      *array_ptr_ptr = item_ptr;\n      if (item_ptr == (int*)0x0)\n      {\n        *error_code = 0xc;\n        return (int*)0x0;\n      }\n    }\n    array_ptr_ptr = (int**)*array_ptr_ptr;\n  } while (true);\n}",
            "called": [
                "FUN_08009d50",
                "FUN_080091c6",
                "FUN_08009d24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009db0",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": true,
            "current_name": "find_unused_item_08009db0"
        },
        "FUN_08007244": {
            "renaming": {
                "FUN_08007244": "do_nothing_08007244"
            },
            "code": "\nvoid do_nothing_08007244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007244",
            "calling": [
                "FUN_08007246"
            ],
            "imported": true,
            "current_name": "do_nothing_08007244"
        },
        "FUN_08005188": {
            "renaming": {
                "FUN_08005188": "process_data_08005188"
            },
            "code": "void process_data_08005188(int *data){\n  int data_ptr = *data;\n  uint var1 = *(uint *)(data_ptr + 0x18);\n  uint var2 = *(uint *)(data_ptr + 0x14);\n  uint var3 = *(uint *)(data_ptr + 4);\n  if ((*(char *)((int)data + 0x3e) == '\\x10') || (*(char *)((int)data + 0x3e) == '@')) {\n    if (((var2 & 0x10001) == 0) || ((var3 & 0x200) == 0)) {\n      if (((PTR_DAT_080052e8 & var2) == 0) || ((var3 & 0x200) == 0)) {\n        if (((PTR_DAT_080052d4 & var2) != 0) && ((var3 & 0x200) != 0)) {\n          FUN_080043a2(data);\n        }\n      }\n      else {\n        FUN_08004396(data);\n      }\n    }\n    else {\n      FUN_0800430c(data);\n    }\n    if ((PTR_DAT_080052dc & var1) == 0) {\n      if ((((PTR_DAT_080052ec & var2) != 0) && ((var3 & 0x400) != 0)) && ((PTR_DAT_080052e4 & var2) == 0)) {\n        FUN_08004d6c(data);\n        return;\n      }\n      if (((PTR_DAT_080052e4 & var2) != 0) && ((var3 & 0x200) != 0)) {\n        FUN_08004e3c(data);\n        return;\n      }\n    }\n    else {\n      if ((((PTR_DAT_080052e0 & var2) != 0) && ((var3 & 0x400) != 0)) && ((PTR_DAT_080052e4 & var2) == 0)) {\n        FUN_08004b82(data);\n        return;\n      }\n      if (((PTR_DAT_080052e4 & var2) != 0) && ((var3 & 0x200) != 0)) {\n        FUN_08004ccc(data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((PTR_DAT_080052d4 & var2) != 0) && ((var3 & 0x200) != 0)) {\n      FUN_08004ac2();\n      return;\n    }\n    if (((PTR_DAT_080052d8 & var2) != 0) && ((var3 & 0x200) != 0)) {\n      FUN_08005084(data);\n      return;\n    }\n    if ((PTR_DAT_080052dc & var1) == 0) {\n      if ((((PTR_DAT_080052ec & var2) != 0) && ((var3 & 0x400) != 0)) && ((PTR_DAT_080052e4 & var2) == 0)) {\n        FUN_08004a76(data);\n        return;\n      }\n      if (((PTR_DAT_080052e4 & var2) != 0) && ((var3 & 0x200) != 0)) {\n        FUN_0800459c(data);\n      }\n    }\n    else {\n      if ((((PTR_DAT_080052e0 & var2) != 0) && ((var3 & 0x400) != 0)) && ((PTR_DAT_080052e4 & var2) == 0)) {\n        FUN_08004a24(data);\n        return;\n      }\n      if (((PTR_DAT_080052e4 & var2) != 0) && ((var3 & 0x200) != 0)) {\n        FUN_0800457c(data);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_0800457c",
                "FUN_08004b82",
                "FUN_08004a24",
                "FUN_08004d6c",
                "FUN_08004ac2",
                "FUN_0800430c",
                "FUN_08004a76",
                "FUN_08004ccc",
                "FUN_08005084",
                "FUN_08004396",
                "FUN_080043a2",
                "FUN_08004e3c",
                "FUN_0800459c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005188",
            "calling": [],
            "imported": true,
            "current_name": "process_data_08005188"
        },
        "FUN_08002c2c": {
            "renaming": {
                "pcVar1": "function",
                "FUN_08002c2c": "execute_function_if_not_null_08002c2c",
                "param_1": "function_pointer",
                "param_2": "param_1",
                "param_3": "param_2",
                "param_4": "param_3",
                "PTR_DAT_08002c3c": "function_pointer_pointer"
            },
            "code": "void execute_function_if_not_null_08002c2c(code* function_pointer, int param_1, int param_2, int param_3, int param_4) {\n  code* function = *(code**)PTR_DAT_08002c3c;\n  if (function != NULL) {\n    (*function)(param_1, param_2, param_3, function, param_4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2c",
            "calling": [],
            "imported": true,
            "current_name": "execute_function_if_not_null_08002c2c"
        },
        "FUN_080072f0": {
            "renaming": {
                "FUN_080072f0": "call_with_params_and_double_080072f0",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "ptr1",
                "FUN_080042d4": "call_with_five_params",
                "param_4": "ptr2"
            },
            "code": "void call_with_params_and_double_080072f0(undefined4 num1, undefined2 num2, undefined4 ptr1, undefined4 ptr2)\n{\n  call_with_five_params(num1, num2, ptr1, ptr2, ptr2);\n  return;\n}",
            "called": [
                "FUN_080042d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072f0",
            "calling": [
                "FUN_08008a6c"
            ],
            "imported": true,
            "current_name": "call_with_params_and_double_080072f0"
        },
        "FUN_08001bf8": {
            "renaming": {
                "PTR_DAT_08001c04": "PTR_DAT_08001c04",
                "FUN_08001bf8": "call_function_with_params_08001bf8",
                "param_1": "function_pointer",
                "param_2": "param_1",
                "param_3": "param_2",
                "param_4": "param_3"
            },
            "code": "void call_function_with_params_08001bf8(void* function_pointer, int param_1, int param_2, int param_3)\n{\n  call_function_with_four_params(PTR_DAT_08001c04, function_pointer, param_1, param_2, param_3);\n  return;\n}",
            "called": [
                "FUN_0800288c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bf8",
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "imported": true,
            "current_name": "call_function_with_params_08001bf8"
        },
        "FUN_08000178": {
            "renaming": {
                "pcVar2": "current_char",
                "pcVar3": "current_char_pointer",
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "str",
                "cVar1": "current_char_value"
            },
            "code": "char* find_end_of_string_08000178(char* str) {\n  char* current_char = str;\n  while (*current_char != '\\0') {\n    current_char++;\n  }\n  return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_08008e7c",
                "FUN_08002e44",
                "FUN_080032a2"
            ],
            "imported": true,
            "current_name": "find_end_of_string_08000178"
        },
        "FUN_0800a168": {
            "renaming": {
                "iVar2": "status",
                "param_1": "result",
                "FUN_0800a168": "process_data_0800a168",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "data_ptr"
            },
            "code": "void process_data_0800a168(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n  undefined *data_ptr = PTR_DAT_0800a188;\n  *(undefined4 *)PTR_DAT_0800a188 = 0;\n  int status = FUN_08008858(param_2, param_3, param_4, param_4, param_4);\n  if (status == -1 && *(int *)data_ptr != 0) {\n    *result = *(int *)data_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a168",
            "calling": [
                "FUN_0800a020"
            ],
            "imported": true,
            "current_name": "process_data_0800a168"
        },
        "FUN_080069ec": {
            "renaming": {
                "iVar1": "result",
                "FUN_080064cc": "execute_function_2",
                "puVar3": "data_ptr",
                "param_1": "data",
                "FUN_080069ec": "process_data_080069ec",
                "FUN_08006932": "execute_function_3",
                "FUN_080064b0": "execute_function_4",
                "uVar2": "third_value",
                "uVar5": "first_value",
                "uVar4": "is_bit_set",
                "FUN_08004050": "execute_function_5",
                "FUN_0800694c": "execute_function_1"
            },
            "code": "void process_data_080069ec(uint **data)\n{\n  uint *data_ptr = *data;\n  uint first_value = *data_ptr;\n  uint third_value = data_ptr[3];\n  \n  if ((((first_value & 0xf) == 0) && ((first_value & 0x20) != 0)) && ((third_value & 0x20) != 0))) {\n    execute_function_1(data);\n    return;\n  }\n  if (((first_value & 0xf) == 0) || ((data_ptr[5] & 1) == 0 && ((third_value & 0x120) == 0)))) {\n    if (((first_value & 0x80) != 0) && ((third_value & 0x80) != 0))) {\n      execute_function_2(data);\n      return;\n    }\n    if (((first_value & 0x40) != 0) && ((third_value & 0x40) != 0))) {\n      execute_function_3(data);\n    }\n  }\n  else {\n    if (((first_value & 1) != 0) && ((third_value & 0x100) != 0))) {\n      data[15] = (uint *)((uint)data[15] | 1);\n    }\n    if (((first_value & 4) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 2);\n    }\n    if (((first_value & 2) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 4);\n    }\n    if (((first_value & 8) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 8);\n    }\n    if (data[15] != (uint *)0x0) {\n      if (((first_value & 0x20) != 0) && ((third_value & 0x20) != 0))) {\n        execute_function_1(data);\n      }\n      if ((((uint)data[15] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        do_nothing(data);\n        data[15] = (uint *)0x0;\n        return;\n      }\n      execute_function_4(data);\n      data_ptr = *data;\n      if ((data_ptr[5] & 0x40) == 0) {\n        do_nothing(data);\n        return;\n      }\n      data_ptr[5] = data_ptr[5] & 0xffffffbf;\n      if (data[13] == (uint *)0x0) {\n        do_nothing(data);\n        return;\n      }\n      data[13][13] = (uint)PTR_LAB_08006b0c_1_08006b08;\n      int result = execute_function_5(data[13]);\n      if (result != 0) {\n        (*(code *)data[13][13])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080064cc",
                "FUN_0800694c",
                "FUN_08004050",
                "FUN_0800877c",
                "FUN_08006932",
                "FUN_080064b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069ec",
            "calling": [],
            "imported": true,
            "current_name": "process_data_080069ec"
        },
        "FUN_080067ac": {
            "renaming": {
                "iVar2": "result",
                "uVar1": "data",
                "param_1": "data_ptr",
                "FUN_080067ac": "process_data_080067ac",
                "param_2": "data_buffer",
                "param_3": "buffer_length",
                "param_4": "param_4",
                "current_char": "current_char"
            },
            "code": "int process_data_080067ac(int *data_ptr, ushort *data_buffer, int buffer_length, undefined4 param_4) {\n  undefined4 uVar1;\n  int result;\n  char current_char = *(char *)((int)data_ptr + 0x39);\n  if (current_char == ' ') {\n    if (data_buffer == (ushort *)0x0 || buffer_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      uVar1 = get_data(param_4);\n      *(short *)(data_ptr + 9) = (short)buffer_length;\n      *(short *)((int)data_ptr + 0x26) = (short)buffer_length;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          result = process_data_080067ac(data_ptr,0x80,0,uVar1,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *data_buffer & 0x1ff;\n          if (data_ptr[4] == 0) {\n            data_buffer = data_buffer + 1;\n          }\n          else {\n            data_buffer = (ushort *)((int)data_buffer + 1);\n          }\n        }\n        else {\n          result = process_data_080067ac(data_ptr,0x80,0,uVar1,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)data_buffer;\n          data_buffer = (ushort *)((int)data_buffer + 1);\n        }\n      }\n      result = process_data_080067ac(data_ptr,0x40,0,uVar1,param_4);\n      if (result == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_080066e8",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080067ac",
            "calling": [
                "FUN_08008500"
            ],
            "imported": true,
            "current_name": "process_data_080067ac"
        },
        "FUN_08008c20": {
            "renaming": {
                "param_1": "data_structure_address",
                "FUN_08008c20": "initialize_data_structures_08008c20",
                "PTR_": "ptr_to_",
                "DAT_": "data_"
            },
            "code": "void initialize_data_structures_08008c20(int DAT_structure_address)\n{\n  int* PTR_DAT_structure_start = (int*)(DAT_structure_address + 0x130);\n  *PTR_DAT_structure_start = DAT_structure_address + 0x11;\n  short* PTR_DAT_structure_null1 = (short*)(DAT_structure_address + 0x134);\n  *PTR_DAT_structure_null1 = 0;\n  short* PTR_DAT_structure_null2 = (short*)(DAT_structure_address + 0x136);\n  *PTR_DAT_structure_null2 = 0;\n  int* PTR_DAT_structure_end = (int*)(DAT_structure_address + 0x138);\n  *PTR_DAT_structure_end = DAT_structure_address + 0x51;\n  short* PTR_DAT_structure_null3 = (short*)(DAT_structure_address + 0x13c);\n  *PTR_DAT_structure_null3 = 0;\n  short* PTR_DAT_structure_null4 = (short*)(DAT_structure_address + 0x13e);\n  *PTR_DAT_structure_null4 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c20",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": true,
            "current_name": "initialize_data_structures_08008c20"
        },
        "FUN_0800735a": {
            "renaming": {
                "0xffffffff": "0xffffffff",
                "*(undefined4 *)(param_2 + 8)": "*(unsigned int *)(array_ptr + 8)",
                "undefined4": "unsigned int",
                "param_1": "value_to_find",
                "*param_2": "*array_ptr",
                "FUN_0800735a": "find_value_in_array_0800735a",
                "param_2": "array_ptr"
            },
            "code": "unsigned int find_value_in_array_0800735a(int value_to_find, char* array_ptr){\n  while(1){\n    if (*array_ptr == -1){\n      return 0xffffffff;\n    }\n    if (*array_ptr == value_to_find) break;\n    array_ptr = array_ptr + 12;\n  }\n  return *(unsigned int *)(array_ptr + 8);\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800735a",
            "calling": [
                "FUN_08007376",
                "FUN_0800735a"
            ],
            "imported": true,
            "current_name": "find_value_in_array_0800735a"
        },
        "FUN_08000a64": {
            "renaming": {
                "iVar1": "command_result",
                "PTR_DAT_08000adc": "arguments1",
                "FUN_0800738a": "execute_command_with_arguments",
                "PTR_DAT_08000ae0": "arguments2",
                "FUNC_080005f8": "print_result",
                "FUN_080036ac": "execute_command",
                "PTR_DAT_08000ad8": "commands",
                "PTR_DAT_08000ae8": "final_command",
                "FUN_08000a64": "check_and_execute_commands_08000a64",
                "uVar2": "command_index",
                "FUN_08002a26": "execute_final_command",
                "*PTR_DAT_08000ae4": "final_command_result"
            },
            "code": "void check_and_execute_commands_08000a64(void)\n{\n  int command_result;\n  uint8_t command_index;\n\n  for (command_index = 0; command_index < 0x3c; command_index++) {\n    if (command_index < 0x3c) {\n      if (PTR_DAT_08000ad8[command_index] == -1) {\n        command_result = 0;\n      }\n      else {\n        command_result = execute_command((int)(char)PTR_DAT_08000ad8[command_index]);\n        if (command_result == 0) {\n          command_result = 0;\n        }\n        else {\n          command_result = execute_command((int)(char)PTR_DAT_08000ad8[command_index]);\n          if (command_result == 1) {\n            command_result = 0;\n          }\n          else {\n            command_result = execute_command_with_arguments((int)(char)PTR_DAT_08000ad8[command_index],PTR_DAT_08000adc);\n            if (command_result == 0) {\n              command_result = execute_command_with_arguments((int)(char)PTR_DAT_08000ad8[command_index],PTR_DAT_08000ae0);\n            }\n          }\n        }\n      }\n    }\n    else {\n      command_result = 0;\n    }\n    if (command_result != 0) {\n      print_result(command_index,6);\n    }\n  }\n  *PTR_DAT_08000ae4 = 1;\n  execute_PTR_DAT_08000ae8(PTR_DAT_08000ae8);\n  return;\n}",
            "called": [
                "FUN_0800738a",
                "FUN_080005f8",
                "FUN_08002a26",
                "FUN_080036ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a64",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": true,
            "current_name": "check_and_execute_commands_08000a64"
        },
        "FUN_0800723c": {
            "renaming": {
                "FUN_08003760": "initialize_system",
                "FUN_0800723c": "execute_main_function_0800723c"
            },
            "code": "void execute_main_function_0800723c(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800723c",
            "calling": [
                "FUN_08008abc"
            ],
            "imported": true,
            "current_name": "execute_main_function_0800723c"
        },
        "FUN_080043a2": {
            "renaming": {
                "PTR_DAT_080045b8": "NULL",
                "PTR_DAT_080045a8": "0x1000",
                "PTR_DAT_080045b0": "0xc000",
                "param_1": "params",
                "PTR_DAT_080045b4": "0xffff0000",
                "PTR_DAT_080045a4": "0x12",
                "puVar1": "flag_ptr",
                "FUN_080043a2": "get_flags_080043a2",
                "PTR_DAT_080045ac": "0x800"
            },
            "code": "uint get_flags_080043a2(uint **params)\n{\n  uint *flag_ptr;\n  flag_ptr = params[11];\n  if ((*(char *)((int)params + 61) == '\"') && ((params[20] != PTR_DAT_080045b8 || (*(char *)((int)params + 62) != '@')))) {\n    if ((params[20] == PTR_DAT_080045b8) && (params[4] == (uint *)PTR_DAT_080045b0)) {\n      **params = **params | 0x100;\n      params[20] = (uint *)((int)params[20] + 1);\n    }\n    else {\n      if (*(short *)((int)params + 42) == 0) {\n        **params = **params | 0x200;\n      }\n      else if (*(short *)((int)params + 42) == 1) {\n        if (flag_ptr == (uint *)PTR_DAT_080045b4) {\n          **params = **params & 0xfffffbff;\n          flag_ptr = *params;\n          if ((flag_ptr[1] & PTR_DAT_080045ac) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint *)0x4) || (flag_ptr == (uint *)0x8)) || (params[12] == (uint *)PTR_DAT_080045a4)) {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x200;\n        }\n        else if (params[11] == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)params + 42) == 2) {\n        if (params[11] == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params | PTR_DAT_080045ac;\n          **params = **params & 0xfffffbff;\n        }\n        flag_ptr = *params;\n        if ((flag_ptr[1] & PTR_DAT_080045ac) != 0) {\n          flag_ptr[1] = flag_ptr[1] | PTR_DAT_080045a8;\n        }\n      }\n      else {\n        **params = **params | 0x400;\n        flag_ptr = *params;\n        if ((flag_ptr[1] & PTR_DAT_080045ac) != 0) {\n          flag_ptr[1] = flag_ptr[1] | PTR_DAT_080045a8;\n        }\n      }\n      params[20] = PTR_DAT_080045b8;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043a2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "get_flags_080043a2"
        },
        "FUN_0800694c": {
            "renaming": {
                "sVar2": "counter",
                "puVar3": "undefined_ptr",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "FUN_0800694c": "process_data_0800694c"
            },
            "code": "undefined4 process_data_0800694c(int *data)\n{\n  byte *byte_ptr;\n  short counter;\n  undefined *undefined_ptr;\n  \n  if (*(char *)((int)data + 0x3a) != '\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] += 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10]++;\n    }\n  }\n  else if (data[4] == 0) {\n    undefined_ptr = (undefined *)data[10];\n    data[10] = (int)(undefined_ptr + 1);\n    *undefined_ptr = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    byte_ptr = (byte *)data[10];\n    data[10] = (int)(byte_ptr + 1);\n    *byte_ptr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) &= 0xffffffdf;\n  *(uint *)(*data + 0xc) &= 0xfffffeff;\n  *(uint *)(*data + 0x14) &= 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  FUN_0800870c();\n  return 0;\n}",
            "called": [
                "FUN_0800870c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800694c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": true,
            "current_name": "process_data_0800694c"
        },
        "FUN_08006280": {
            "renaming": {
                "param_1": "data_ptr",
                "DAT_080062f0": "PTR_DAT_080062f0",
                "param_2": "flag_mask",
                "puVar1": "data",
                "FUN_08006280": "update_flags_08006280"
            },
            "code": "int update_flags_08006280(uint **data_ptr, uint flag_mask) {\n  uint *data = *data_ptr;\n  switch(flag_mask) {\n    case 0x0: data[3] |= 0x2; break;\n    case 0x4: data[3] |= 0x4; break;\n    case 0x8: data[3] |= 0x8; break;\n    case 0xC: data[3] |= 0x10; break;\n  }\n  update_data(data_ptr, flag_mask, 1);\n  if (data == DAT_080062f0) {\n    data[0x11] |= 0x8000;\n  }\n  **data_ptr |= 0x1;\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006280",
            "calling": [
                "FUN_08007648"
            ],
            "imported": true,
            "current_name": "update_flags_08006280"
        },
        "FUN_08007258": {
            "renaming": {
                "FUN_08007258": "decode_data_08007258",
                "uVar1": "decoded_data",
                "param_1": "data",
                "local_1c": "param_2_copy",
                "local_18": "param_3_copy",
                "param_2": "param_2",
                "param_3": "param_3",
                "local_20": "bit_mask",
                "local_14": "constant_3"
            },
            "code": "void decode_data_08007258(uint data, undefined4 param_2, undefined4 param_3)\n{\n  undefined4 decoded_data = decode_value((data << 0x18) >> 0x1c);\n  uint bit_mask = 1 << (data & 0xf) & 0xffff;\n  uint constant_3 = 3;\n  *(uint *)(DAT_080072d0 + 0x18) = *(uint *)(DAT_080072d0 + 0x18) | 1;\n  if ((data - 0xd & 0xff) < 2) {\n    *(uint *)(DAT_080072d4 + 4) = *(uint *)(DAT_080072d4 + 4) & 0xf8ffffff | 0x4000000;\n  }\n  if (((data == 0xf) || (data == 0x13)) || (data == 0x14)) {\n    *(uint *)(DAT_080072d4 + 4) = *(uint *)(DAT_080072d4 + 4) & 0xf8ffffff | 0x2000000;\n  }\n  undefined4 param_2_copy = param_2;\n  undefined4 param_3_copy = param_3;\n  apply_to_decoded(decoded_data, &bit_mask);\n  return;\n}",
            "called": [
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007258",
            "calling": [
                "FUN_08008990"
            ],
            "imported": true,
            "current_name": "decode_data_08007258"
        },
        "FUN_0800a0ec": {
            "renaming": {
                "FUN_0800a0ec": "find_and_set_value_0800a0ec",
                "iVar2": "result",
                "param_1": "output_value",
                "param_2": "input_param_1",
                "param_3": "input_param_2",
                "param_4": "input_param_3",
                "puVar1": "ptr_to_data"
            },
            "code": "void find_and_set_value_0800a0ec(int *output_value, undefined4 input_param_1, undefined4 input_param_2, undefined4 input_param_3)\n{\n  undefined *ptr_to_data = PTR_DAT_0800a10c;\n  *(undefined4 *)PTR_DAT_0800a10c = 0;\n  int result = FUN_08008846(input_param_1, input_param_2, input_param_2, 0, input_param_3);\n  if ((result == -1) && (*(int *)ptr_to_data != 0)) {\n    *output_value = *(int *)ptr_to_data;\n  }\n  return;\n}",
            "called": [
                "FUN_08008846"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a0ec",
            "calling": [
                "FUN_08009e64"
            ],
            "imported": true,
            "current_name": "find_and_set_value_0800a0ec"
        },
        "FUN_08008df8": {
            "renaming": {
                "FUN_08008df8": "initialize_data_pointers_08008df8",
                "param_1": "data_pointers",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "code": "void initialize_data_pointers_08008df8(undefined4 *data_pointers, undefined value1, undefined value2, undefined value3, undefined value4){\n  *data_pointers = PTR_PTR_LAB_08008dbe_1_08008e10;\n  *(undefined *)(data_pointers + 1) = value1;\n  *(undefined *)((int)data_pointers + 5) = value2;\n  *(undefined *)((int)data_pointers + 6) = value3;\n  *(undefined *)((int)data_pointers + 7) = value4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008df8",
            "calling": [
                "FUN_08008e14"
            ],
            "imported": true,
            "current_name": "initialize_data_pointers_08008df8"
        },
        "FUN_08009f4a": {
            "renaming": {
                "FUN_08009f4a": "do_nothing_08009f4a"
            },
            "code": "\nvoid do_nothing_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f4a",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": true,
            "current_name": "do_nothing_08009f4a"
        },
        "FUN_08006c7c": {
            "renaming": {
                "iVar1": "function_result",
                "FUN_08006c7c": "determine_value_from_function_call_08006c7c",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar2": "shifted_result"
            },
            "code": "int determine_value_from_function_call_08006c7c(int first_param, uint* second_param, int third_param, int fourth_param){\n  int function_result = FUN_08007376(first_param, second_param, third_param, fourth_param, fourth_param);\n  uint shifted_result = (uint)(function_result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c7c",
            "calling": [
                "FUN_08007118",
                "FUN_080071e4"
            ],
            "imported": true,
            "current_name": "determine_value_from_function_call_08006c7c"
        },
        "FUN_08006b5c": {
            "renaming": {
                "FUN_08006b5c": "set_bit_to_zero_08006b5c",
                "uVar1": "array_index",
                "param_1": "bit_index",
                "param_2": "array",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ set_bit_to_zero_08006b5c(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_~DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b5c",
            "calling": [
                "FUN_08008990"
            ],
            "imported": true,
            "current_name": "set_bit_to_zero_08006b5c"
        },
        "FUN_08007376": {
            "renaming": {
                "uVar1": "result",
                "FUN_08007376": "get_result_08007376",
                "param_1": "input",
                "FUN_0800735a": "calculate_result"
            },
            "code": "int get_result_08007376(int input) {\n  int result = -1;\n  if (input != -1) {\n    result = calculate_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007376",
            "calling": [
                "FUN_08006e68",
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_080071e4",
                "FUN_08006c7c",
                "FUN_08006c60"
            ],
            "imported": true,
            "current_name": "get_result_08007376"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "interrupt_software_call_08000188"
            },
            "code": "void interrupt_software_call_08000188(void)\n{\n  software_interrupt(0x3f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [
                "FUN_0800018c"
            ],
            "imported": true,
            "current_name": "interrupt_software_call_08000188"
        },
        "FUN_08004f3c": {
            "renaming": {
                "iVar1": "index",
                "puVar2": "next_input",
                "FUN_08004f3c": "process_input_08004f3c",
                "puVar3": "current_input",
                "param_1": "input"
            },
            "code": "void process_input_08004f3c(uint **input)\n{\n  int index;\n  uint *current_input;\n  uint *next_input;\n  \n  if (*(byte *)((int)input + 0x3d) - 0x29 < 2)) {\n    input[12] = (uint *)0x0;\n    *(undefined *)((int)input + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)input + 0x3d) != '`') && (((*input)[1] & 0x800) == 0)) {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n    }\n    input[12] = (uint *)0x0;\n    *(undefined *)((int)input + 0x3e) = 0;\n  }\n  **input = **input & 0xfffff7ff;\n  current_input = *input;\n  if ((current_input[1] & 0x800) == 0) {\n    if (*(char *)((int)input + 0x3d) == '`') {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      input[16] = (uint *)0x0;\n      if ((current_input[5] & 0x40) != 0) {\n        next_input = input[9];\n        input[9] = (uint *)((int)next_input + 1);\n        *(char *)next_input = (char)current_input[4];\n      }\n      **input = **input & 0xfffffffe;\n      do_nothing_08004f3a(input);\n    }\n    else {\n      if ((current_input[5] & 0x40) != 0) {\n        next_input = input[9];\n        input[9] = (uint *)((int)next_input + 1);\n        *(char *)next_input = (char)current_input[4];\n      }\n      process_input_08004f3c_part_2(input);\n    }\n  }\n  else {\n    current_input[1] = current_input[1] & 0xfffff7ff;\n    if (*(char *)((int)input[13] + 0x21) == '\\x01') {\n      input[14][0xd] = (uint)PTR_LAB_080053cc_1_0800507c;\n      index = FUN_08004050(input[14]);\n      if (index != 0) {\n        if (((*input)[5] & 0x40) != 0) {\n          next_input = input[9];\n          input[9] = (uint *)((int)next_input + 1);\n          *(char *)next_input = (char)(*input)[4];\n        }\n        **input = **input & 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)input[14][0xd])();\n      }\n    }\n    else {\n      input[13][0xd] = (uint)PTR_LAB_080053cc_1_0800507c;\n      index = FUN_08004050(input[13]);\n      if (index != 0) {\n        **input = **input & 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)input[13][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)input + 0x3d) == '(') && (((uint)input[16] & 4) != 0)) {\n    input[11] = DAT_08005080;\n    input[12] = (uint *)0x0;\n    *(undefined *)((int)input + 0x3d) = 0x20;\n    *(undefined *)((int)input + 0x3e) = 0;\n    process_input_08004f3c_part_3(input);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08004f3a",
                "FUN_08004050",
                "FUN_08008020",
                "FUN_08007ff0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_08005084",
                "FUN_080052f0"
            ],
            "imported": true,
            "current_name": "process_input_08004f3c"
        },
        "FUN_080033cc": {
            "renaming": {
                "iVar2": "processed_len",
                "pcVar3": "string",
                "FUN_08003376": "increase_counter",
                "FUN_080033cc": "process_input_080033cc",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "cVar1": "first_char",
                "FUN_080033a8": "process_string"
            },
            "code": "void process_input_080033cc(int input, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n  char first_char = *(*(char **)(input + 4));\n  if (first_char == 'q') {\n    if (*(int *)(input + 0x68) != 0) {\n      int processed_len = process_string(input, *(int *)(input + 0x18) - 1, *(char **)(input + 4) + 1, *(char **)(input + 4), param_4);\n      increase_counter(input, 0, processed_len + 1);\n      (**(code **)(input + 0x68))(*(undefined4 *)(input + 0x40), *(int *)(input + 4) + 1);\n      return;\n    }\n  }\n  else if (first_char == 'y') {\n    if (*(code **)(input + 0x70) != (code *)0x0) {\n      if (*(uint *)(input + 0x18) < 3) {\n        (**(code **)(input + 0x70))(*(undefined4 *)(input + 0x34), 0, 0);\n        return;\n      }\n      int processed_len = process_string(input, *(uint *)(input + 0x18) - 3, *(char **)(input + 4) + 3, *(char **)(input + 4), param_4);\n      increase_counter(input, 0, processed_len + 3);\n      int start_index = *(int *)(input + 4);\n      (**(code **)(input + 0x70))(*(undefined4 *)(input + 0x34), *(undefined *)(start_index + 1), *(undefined *)(start_index + 2), start_index + 3);\n      return;\n    }\n  }\n  else if (*(code **)(input + 0x6c) != (code *)0x0) {\n    int len = *(int *)(input + 0x18) - 1;\n    char *string = *(char **)(input + 4) + 1;\n    (**(code **)(input + 0x6c))(*(undefined4 *)(input + 0x44), first_char, len, string);\n  }\n  return;\n}",
            "called": [
                "FUN_08003376",
                "FUN_080033a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033cc",
            "calling": [
                "FUN_08003474"
            ],
            "imported": true,
            "current_name": "process_input_080033cc"
        },
        "FUN_08003de4": {
            "renaming": {
                "0xffffeefe": "0b11111111111111101111111011111110",
                "iVar1": "result",
                "*(undefined *)(param_1 + 0x24)": "*status_ptr",
                "FUN_08003de4": "check_status_08003de4",
                "param_1": "status",
                "*(char *)(param_1 + 0x24)": "*status_ptr",
                "FUN_08003b8c()": "perform_check()",
                "*(uint *)(param_1 + 0x28)": "*status_flag_ptr"
            },
            "code": "int check_status_08003de4(int status)\n{\n  int result;\n  char* status_ptr = (char*)(status + 0x24);\n  uint* status_flag_ptr = (uint*)(status + 0x28);\n  if (*status_ptr == '\\x01') {\n    result = 2;\n  }\n  else {\n    *status_ptr = 1;\n    result = perform_check();\n    if (result == 0) {\n      *status_flag_ptr = (*status_flag_ptr & 0xffffeefe) | 1;\n    }\n    *status_ptr = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003de4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "check_status_08003de4"
        },
        "FUN_08004f3a": {
            "renaming": {
                "FUN_08004f3a": "do_nothing_08004f3a"
            },
            "code": "\nvoid do_nothing_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3a",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": true,
            "current_name": "do_nothing_08004f3a"
        },
        "FUN_08000500": {
            "renaming": {
                "PTR_DAT_0800057c": "servo_pulse_widths_start_ptr",
                "PTR_DAT_0800056c": "servo_count_ptr",
                "PTR_DAT_08000570": "last_detached_servo_index_ptr",
                "param_1": "servo_index",
                "FUN_08000500": "attach_servo_08000500",
                "s_Max_servos_attached_08000580": "max_servos_attached_msg",
                "FUN_080025ac": "set_servo_pulse_width",
                "FUN_08002634": "stop_servo",
                "PTR_DAT_08000578": "servo_pulse_widths",
                "param_2": "min_pulse_width",
                "param_3": "max_pulse_width",
                "PTR_DAT_08000574": "detached_servo_pulse_widths",
                "param_4": "param_4",
                "FUN_08002f14": "print_error_msg"
            },
            "code": "void attach_servo_08000500(int servo_index, int min_pulse_width, int max_pulse_width, undefined4 param_4)\n{\n  byte servo_count = *PTR_DAT_0800056c;\n  if (servo_count > 0xb) {\n    print_error_msg(max_servos_attached_msg, param_4, param_4);\n    return;\n  }\n  byte last_detached_servo_index = *PTR_DAT_08000570;\n  if (last_detached_servo_index == 0) {\n    PTR_DAT_08000578[servo_index] = servo_count;\n    *PTR_DAT_0800056c = servo_count + 1;\n  }\n  else {\n    PTR_DAT_08000578[servo_index] = PTR_DAT_08000574[last_detached_servo_index - 1];\n    *PTR_DAT_08000570 = last_detached_servo_index - 1;\n  }\n  if ((min_pulse_width > 0) && (max_pulse_width > 0)) {\n    set_servo_pulse_width(PTR_DAT_08000578[servo_index] * 3 + PTR_DAT_0800057c, servo_index, min_pulse_width, max_pulse_width);\n    return;\n  }\n  stop_servo(PTR_DAT_08000578[servo_index] * 3 + PTR_DAT_0800057c, servo_index);\n  return;\n}",
            "called": [
                "FUN_080025ac",
                "FUN_08002634",
                "FUN_08002f14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000500",
            "calling": [
                "FUN_080005f8",
                "FUN_08001cd0"
            ],
            "imported": true,
            "current_name": "attach_servo_08000500"
        },
        "FUN_08009d24": {
            "renaming": {
                "iVar2": "total_size",
                "param_1": "num_blocks",
                "FUN_08009d24": "allocate_memory_08009d24",
                "param_2": "block_size",
                "FUN_080091c6": "initialize_allocated_blocks",
                "puVar1": "allocated_blocks",
                "FUN_08009270": "allocate_memory"
            },
            "code": "undefined4 * allocate_memory_08009d24(int num_blocks, int block_size)\n{\n  undefined4 *allocated_blocks;\n  int total_size = (num_blocks - 1) * 0x68;\n  allocated_blocks = (undefined4 *)allocate_memory_08009d24(total_size + 0x74);\n  if (allocated_blocks != (undefined4 *)0x0) {\n    *allocated_blocks = 0;\n    allocated_blocks[1] = num_blocks;\n    allocated_blocks[2] = allocated_blocks + 3;\n    initialize_allocated_blocks(allocated_blocks + 3, 0, total_size + 0x68);\n  }\n  return allocated_blocks;\n}",
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d24",
            "calling": [
                "FUN_08009db0"
            ],
            "imported": true,
            "current_name": "allocate_memory_08009d24"
        },
        "FUN_0800344a": {
            "renaming": {
                "uVar1": "index",
                "param_1": "data_struct",
                "FUN_0800344a": "clear_data_struct_0800344a"
            },
            "code": "void clear_data_struct_0800344a(int data_struct){\n  uint index = 0;\n  *(undefined4 *)(data_struct + 0x10) = 0;\n  *(undefined *)(data_struct + 0xc) = 0;\n  *(undefined *)(data_struct + 0xd) = 0;\n  for (index = 0; index < *(uint *)(data_struct + 8); index++) {\n    *(undefined *)(*(int *)(data_struct + 4) + index) = 0;\n  }\n  *(undefined *)(data_struct + 0x14) = 0;\n  *(undefined4 *)(data_struct + 0x18) = 0;\n  if (*(code **)(data_struct + 0x78) != (code *)0x0) {\n    (**(code **)(data_struct + 0x78))(*(undefined4 *)(data_struct + 0x48));\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800344a",
            "calling": [
                "FUN_08003474"
            ],
            "imported": true,
            "current_name": "clear_data_struct_0800344a"
        },
        "FUN_080071e4": {
            "renaming": {
                "FUN_08006460": "process_data_array_v2",
                "iVar1": "status",
                "local_50": "data_array",
                "FUN_08006c7c": "get_status",
                "FUN_08007320": "calculate_value",
                "FUN_08007376": "get_flag",
                "param_1": "data",
                "FUN_08005e2e": "finalize_data_processing",
                "FUN_080063c0": "process_data_array",
                "FUN_080071e4": "process_data_080071e4",
                "PTR_DAT_08007238": "PTR_DAT_08007238",
                "uVar2": "flag"
            },
            "code": "void process_data_080071e4(int data){\n  int status;\n  uint flag;\n  int data_array [17];\n  \n  data_array[0] = calculate_value(data, PTR_DAT_08007238);\n  if ((data_array[0] != 0) &&\n     ((((status = get_status(data)), status == 0 || (status == 4)) || (status == 8)) ||\n      ((status == 0xc || (status == 0x18)))))) {\n    flag = get_flag(data, PTR_DAT_08007238);\n    if ((flag & 0x100000) == 0) {\n      process_data_080071e4_array(data_array,status);\n    }\n    else {\n      process_data_080071e4_array_v2(data_array,status);\n    }\n    finalize_data_processing(data_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08007320",
                "FUN_08007376",
                "FUN_080063c0",
                "FUN_08006460",
                "FUN_08005e2e",
                "FUN_08006c7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071e4",
            "calling": [
                "FUN_08008990"
            ],
            "imported": true,
            "current_name": "process_data_080071e4"
        },
        "FUN_08008e72": {
            "renaming": {
                "param_1": "function_pointer",
                "FUN_08008e72": "execute_function_pointer_08008e72"
            },
            "code": "void execute_function_pointer_08008e72(void* function_pointer) {\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e72",
            "calling": [],
            "imported": true,
            "current_name": "execute_function_pointer_08008e72"
        },
        "FUN_080022f8": {
            "renaming": {
                "bVar1": "is_valid",
                "PTR_DAT_080023e8": "base_ptr",
                "FUN_08001c18": "update_data",
                "iVar2": "result",
                "FUN_08008880": "get_new_value",
                "*(char *)PTR_DAT_080023f8": "count",
                "FUN_08002ef2": "update_item",
                "PTR_DAT_080023e4": "result_ptr",
                "PTR_DAT_080023f4": "item_ptr",
                "PTR_DAT_080023fc": "data_ptr",
                "FUN_08002fa0": "get_item_type",
                "FUN_08002ed2": "process_item",
                "*(int *)PTR_DAT_080023f0": "bit_mask",
                "FUN_08002ec4": "get_next_item",
                "FUN_080036ac": "validate_item",
                "FUN_08008abc": "get_value",
                "PTR_DAT_080023ec": "threshold_ptr",
                "FUN_080022f8": "main_function_080022f8",
                "uVar3": "value",
                "uVar5": "index2",
                "PTR_DAT_080023e0": "data_ptr",
                "uVar4": "index1",
                "FUNC_08000ef8": "initialize"
            },
            "code": "void main_function_080022f8()\n{\n  bool is_valid;\n  int result;\n  undefined4 value;\n  uint index1;\n  uint index2;\n  \n  initialize();\n  while (result = get_next_item(PTR_DAT_080023e0), result != 0) {\n    process_item(PTR_DAT_080023e0);\n  }\n  result = get_value();\n  *(int *)PTR_DAT_080023e4 = result;\n  if (*(uint *)PTR_DAT_080023ec < (uint)(result - *(int *)PTR_DAT_080023e8)) {\n    *(uint *)PTR_DAT_080023e8 = *(int *)PTR_DAT_080023e8 + *(uint *)PTR_DAT_080023ec;\n    for (index1 = 0; index1 < 0x3c; index1 = index1 + 1 & 0xff) {\n      index2 = index1 - 0x2e & 0xff;\n      if (index2 < 0xe) {\n        if (index1 < 0x3c) {\n          result = (int)(char)PTR_DAT_080023f4[index1];\n        }\n        else {\n          result = -1;\n        }\n        result = validate_item(result);\n        if (result == 0) {\n          is_valid = false;\n        }\n        else {\n          if (index1 < 0x3c) {\n            result = (int)(char)PTR_DAT_080023f4[index1];\n          }\n          else {\n            result = -1;\n          }\n          result = validate_item(result);\n          if (result == 1) {\n            is_valid = false;\n          }\n          else {\n            result = get_item_type(PTR_DAT_080023e0,index1);\n            if (result == 2) {\n              is_valid = true;\n            }\n            else {\n              is_valid = false;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if ((is_valid) && ((*(int *)PTR_DAT_080023f0 >> index2 & 1U) != 0)) {\n        value = get_new_value(index2);\n        update_item(PTR_DAT_080023e0,index2,value);\n      }\n    }\n    if (-1 < (char)*PTR_DAT_080023f8) {\n      for (index1 = 0; (int)index1 < (char)*PTR_DAT_080023f8 + 1; index1 = index1 + 1 & 0xff) {\n        result = index1 * 0xc;\n        update_data(PTR_DAT_080023fc[result],*(undefined4 *)(PTR_DAT_080023fc + result + 4),\n                     PTR_DAT_080023fc[result + 8],PTR_DAT_080023fc[result + 9]);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08008880",
                "FUN_08001c18",
                "FUN_08002fa0",
                "FUN_08002ec4",
                "FUN_08008abc",
                "FUN_08002ed2",
                "FUN_080036ac",
                "FUN_08002ef2",
                "FUN_08000ef8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022f8",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": true,
            "current_name": "main_function_080022f8"
        },
        "FUN_080072fa": {
            "renaming": {
                "FUN_080035b8": "initialize_audio",
                "FUN_08003724": "initialize_graphics",
                "FUN_080072fa": "initialize_game_080072fa"
            },
            "code": "void initialize_game_080072fa(void)\n{\n  initialize_graphics();\n  initialize_audio();\n  return;\n}",
            "called": [
                "FUN_080035b8",
                "FUN_08003724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072fa",
            "calling": [
                "FUN_080036a2"
            ],
            "imported": true,
            "current_name": "initialize_game_080072fa"
        },
        "FUN_08005084": {
            "renaming": {
                "puVar2": "array_ptr",
                "puVar3": "array_ptr_9",
                "param_1": "input_array",
                "cVar1": "current_char",
                "FUN_08005084": "parse_input_08005084"
            },
            "code": "uint32_t parse_input_08005084(uint32_t **input_array){\n  char current_char = *(char *)((int)input_array + 0x3d);\n  (*input_array)[1] &= 0xfffff8ff;\n  **input_array |= 1;\n  **input_array &= 0xfffffbff;\n  uint32_t *array_ptr = *input_array;\n  if ((array_ptr[1] & 0x800) != 0) {\n    if ((*(char *)((int)input_array + 0x3d) == '\"') || (*(char *)((int)input_array + 0x3d) == '*')) {\n      *(int16_t *)((int)input_array + 0x2a) = (int16_t)*(uint32_t *)(*input_array[0xe] + 4);\n    }\n    else {\n      *(int16_t *)((int)input_array + 0x2a) = (int16_t)*(uint32_t *)(*input_array[0xd] + 4);\n    }\n  }\n  if (*(int16_t *)((int)input_array + 0x2a) != 0) {\n    if ((array_ptr[5] & 4) != 0) {\n      uint32_t *array_ptr_9 = input_array[9];\n      input_array[9] = (uint32_t *)((int)array_ptr_9 + 1);\n      *(char *)array_ptr_9 = (char)array_ptr[4];\n      *(int16_t *)((int)input_array + 0x2a) -= 1;\n    }\n    if (((*input_array)[5] & 0x40) != 0) {\n      array_ptr = input_array[9];\n      input_array[9] = (uint32_t *)((int)array_ptr + 1);\n      *(char *)array_ptr = (char)(*input_array)[4];\n      *(int16_t *)((int)input_array + 0x2a) -= 1;\n    }\n    input_array[0x10] = (uint32_t *)((uint32_t)input_array[0x10] | 4);\n  }\n  if (input_array[0x10] == (uint32_t *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      input_array[0xb] = PTR_DAT_08005184;\n      input_array[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input_array + 0x3d) = 0x20;\n      *(undefined *)((int)input_array + 0x3e) = 0;\n      do_something_08007ff0();\n    }\n    else if ((input_array[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n      input_array[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input_array + 0x3d) = 0x20;\n      *(undefined *)((int)input_array + 0x3e) = 0;\n      do_nothing_08004a74();\n    }\n  }\n  else {\n    do_something_else_08004f3c();\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004f3c",
                "FUN_08007ff0",
                "FUN_08004a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005084",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "parse_input_08005084"
        },
        "FUN_0800291c": {
            "renaming": {
                "FUN_0800291c": "initialize_parameters_0800291c",
                "param_1": "parameters",
                "puVar1": "pointer1"
            },
            "code": "void initialize_parameters_0800291c(undefined4 *parameters)\n{\n  undefined *pointer1;\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  *parameters = function_pointer;\n  pointer1 = data_pointer;\n  *(undefined *)(parameters + 0x1b) = data_pointer[0xe];\n  *(undefined *)((int)parameters + 0x6d) = pointer1[0xf];\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800291c",
            "calling": [
                "FUN_08002948"
            ],
            "imported": true,
            "current_name": "initialize_parameters_0800291c"
        },
        "FUN_08002ac0": {
            "renaming": {
                "FUN_08002ac0": "print_with_padding_08002ac0",
                "param_1": "str",
                "param_2": "padding_size",
                "param_3": "unused",
                "param_4": "unused",
                "FUN_08002a58": "print_spaces"
            },
            "code": "void print_with_padding_08002ac0(char* str, int padding_size) {\n    print_spaces(padding_size);\n    printf(\"%s\\n\", str);\n}",
            "called": [
                "FUN_08002a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ac0",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": true,
            "current_name": "print_with_padding_08002ac0"
        },
        "FUN_08003346": {
            "renaming": {
                "FUN_08003346": "update_data_08003346",
                "param_1": "data_address",
                "*(undefined4 *)(param_1 + 0x70)": "*(undefined4 *)(data_address + 112)",
                "param_2": "data_value",
                "param_3": "param_3",
                "*(undefined4 *)(param_1 + 0x34)": "*(undefined4 *)(data_address + 52)",
                "param_4": "param_4"
            },
            "code": "void update_data_08003346(int data_address, int data_value, undefined4 param_3, undefined4 param_4)\n{\n  if (data_value == 121) {\n    *(undefined4 *)(data_address + 112) = param_3;\n    *(undefined4 *)(data_address + 52) = param_4;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003346",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": true,
            "current_name": "update_data_08003346"
        },
        "FUN_080032bc": {
            "renaming": {
                "uVar1": "leading_zeroes",
                "FUN_080032bc": "initialize_data_struct_080032bc",
                "param_1": "data",
                "param_2": "param_2",
                "param_3": "param_3"
            },
            "code": "void initialize_data_struct_080032bc(uint8_t *data, uint32_t param_2, uint32_t param_3) {\n  memset(data, 0, 112);\n  uint32_t leading_zeroes = count_leading_zeroes(param_2);\n  data[0] = (uint8_t)(leading_zeroes >> 5);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032bc",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": true,
            "current_name": "initialize_data_struct_080032bc"
        },
        "FUN_08003106": {
            "renaming": {
                "*puVar1": "*function",
                "param_1": "function_ptr",
                "FUN_0800307a": "execute_another_function",
                "FUN_08003106": "execute_function_if_not_null_08003106",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "function"
            },
            "code": "void execute_function_if_not_null_08003106(undefined4 *function_ptr, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined4 *function = (undefined4 *)*function_ptr;\n  if (function != (undefined4 *)0x0) {\n    (**(code **)*function)(function,0xf0);\n    (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr,0x6f);\n    (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr,arg1);\n    execute_another_function(function_ptr,arg2,arg3,arg2);\n    (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr,0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003106",
            "calling": [
                "FUN_08003158"
            ],
            "imported": true,
            "current_name": "execute_function_if_not_null_08003106"
        },
        "FUN_080077b0": {
            "renaming": {
                "FUN_080077b0": "FUNC_080077b0"
            },
            "code": "\nvoid FUNC_080077b0(int *param_1,int param_2,int param_3,int param_4,undefined param_5)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  uint local_38;\n  uint local_34;\n  uint local_30;\n  undefined4 local_2c;\n  \n  if (param_1 != (int *)0x0) {\n    piVar9 = param_1 + 1;\n    iVar2 = FUN_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n    iVar3 = FUN_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n    if ((iVar2 == 0) || (iVar3 == 0)) {\n      FUN_080098d8(PTR_s_ERROR__at_least_one_I2C_pin_has_n_08007a88);\n    }\n    else {\n      iVar3 = FUN_080073ae(iVar2,iVar3);\n      *param_1 = iVar3;\n      iVar2 = DAT_08007a7c;\n      if (iVar3 == 0) {\n        FUN_080098d8(PTR_s_ERROR__I2C_pins_mismatch_08007a8c);\n      }\n      else {\n        if (iVar3 == DAT_08007a7c) {\n          *(uint *)(DAT_08007a7c + 0x1bc1c) = *(uint *)(DAT_08007a7c + 0x1bc1c) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) & 0xffdfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x1f;\n          *(undefined *)((int)param_1 + 0x5b) = 0x20;\n          *(int **)PTR_DAT_08007a90 = piVar9;\n        }\n        iVar2 = DAT_08007a80;\n        if (*param_1 == DAT_08007a80) {\n          *(uint *)(DAT_08007a80 + 0x1b81c) = *(uint *)(DAT_08007a80 + 0x1b81c) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) & 0xffbfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x21;\n          *(undefined *)((int)param_1 + 0x5b) = 0x22;\n          *(int **)(PTR_DAT_08007a90 + 4) = piVar9;\n        }\n        uVar4 = FUN_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a78;\n        local_38 = 1 << ((int)*(char *)((int)param_1 + 0x59) & 0xfU) & 0xffff;\n        uVar5 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n        uVar6 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007d4c;\n        uVar5 = DAT_08007a94;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000001;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000002;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000004;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000300;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000c00;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7001000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7008000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        FUN_080040e8(uVar4,&local_38,uVar7,uVar8);\n        uVar4 = FUN_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a74;\n        local_38 = 1 << ((int)*(char *)(param_1 + 0x16) & 0xfU) & 0xffff;\n        uVar5 = FUN_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n        uVar6 = FUN_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = FUN_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = FUN_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007e70;\n        uVar5 = DAT_08007d4c;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000001;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000002;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000004;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000300;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000c00;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7001000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7008000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        FUN_080040e8(uVar4,&local_38,uVar7,uVar8);\n        param_1[1] = *param_1;\n        param_1[2] = param_2;\n        param_1[3] = 0;\n        param_1[4] = param_4;\n        param_1[7] = 0xff;\n        param_1[5] = param_3;\n        param_1[6] = 0;\n        param_1[8] = 0;\n        param_1[9] = 0;\n        *(undefined *)((int)param_1 + 0x41) = 0;\n        FUN_08003f30((int)*(char *)((int)param_1 + 0x5a),0,1);\n        FUN_08003f94((int)*(char *)((int)param_1 + 0x5a));\n        FUN_08003f30((int)*(char *)((int)param_1 + 0x5b),0,1);\n        FUN_08003f94((int)*(char *)((int)param_1 + 0x5b));\n        FUN_080045c0(piVar9);\n        *(undefined *)((int)param_1 + 0x5d) = param_5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08006bb8",
                "FUN_080073ae",
                "FUN_080040e8",
                "FUN_08003f94",
                "FUN_08007320",
                "FUN_08007376",
                "FUN_08003f30",
                "FUN_080045c0",
                "FUN_080098d8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080077b0",
            "calling": [
                "FUN_08002968"
            ],
            "imported": true,
            "current_name": "FUNC_080077b0"
        },
        "FUN_08007708": {
            "renaming": {
                "FUN_08007438": "initialize_application",
                "FUN_08007708": "execute_main_function_08007708"
            },
            "code": "void execute_main_function_08007708(void)\n{\n  initialize_application();\n  return;\n}",
            "called": [
                "FUN_08007438"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007708",
            "calling": [
                "FUN_08006060"
            ],
            "imported": true,
            "current_name": "execute_main_function_08007708"
        },
        "FUN_0800018c": {
            "renaming": {
                "uVar1": "returnValue",
                "FUN_08000188": "call_function",
                "param_1": "value1",
                "param_2": "value2",
                "FUN_0800018c": "check_and_call_function_0800018c",
                "param_3": "value3",
                "param_4": "value4"
            },
            "code": "int check_and_call_function_0800018c(int value1, int value2, int value3, int value4)\n{\n  int returnValue;\n  if (*(int *)PTR_DAT_080001a4 != 0) {\n    return 0;\n  }\n  returnValue = call_function(1, value1, 0, 0, value4);\n  return returnValue;\n}",
            "called": [
                "FUN_08000188"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800018c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "check_and_call_function_0800018c"
        },
        "FUN_08003f94": {
            "renaming": {
                "param_1": "index",
                "FUN_08003f94": "set_bit_at_index_08003f94",
                "DAT_08003fac": "array_base_ptr"
            },
            "code": "void set_bit_at_index_08003f94(uint index) {\n  if (index >= 0) {\n    uint bit_index = index & 0x1f;\n    uint array_index = index >> 5;\n    uint* array_ptr = (uint*)(DAT_08003fac + array_index * 4);\n    uint bit_mask = 1 << bit_index;\n    *array_ptr = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_08007648",
                "FUN_080077b0",
                "FUN_0800863c",
                "FUN_08008694"
            ],
            "imported": true,
            "current_name": "set_bit_at_index_08003f94"
        },
        "FUN_08008c44": {
            "renaming": {
                "bVar1": "flag_mask",
                "iVar2": "flag_sum",
                "param_1": "function_arg_1",
                "UNRECOVERED_JUMPTABLE": "jumptable_index",
                "param_2": "flag_value",
                "param_3": "flag_byte",
                "FUN_08008c44": "set_flags_and_call_func_08008c44"
            },
            "code": "void set_flags_and_call_func_08008c44(int param_1, int flag_value, byte flag_byte) {\n  uint jumptable_index;\n  byte flag_mask = flag_byte & 7;\n  int flag_sum = 0;\n  if (flag_mask == 4) {\n    flag_sum = 7;\n  }\n  else if (flag_mask == 6) {\n    flag_sum = 8;\n  }\n  else if (flag_mask == 2) {\n    flag_sum = 6;\n  }\n  if ((flag_byte & 0x30) == 0x30) {\n    *(int *)(param_1 + 0x128) = 0x600;\n    flag_sum++;\n  }\n  else if ((flag_byte & 0x20) == 0) {\n    *(int *)(param_1 + 0x128) = 0;\n  }\n  else {\n    *(int *)(param_1 + 0x128) = 0x400;\n    flag_sum++;\n  }\n  if ((flag_byte & 8) == 0) {\n    *(int *)(param_1 + 0x124) = 0;\n  }\n  else {\n    *(int *)(param_1 + 0x124) = 0x2000;\n  }\n  if (flag_sum == 8) {\n    *(int *)(param_1 + 0x120) = 0;\n  }\n  else if (flag_sum == 9) {\n    *(int *)(param_1 + 0x120) = 0x1000;\n  }\n  else {\n    flag_sum = 0;\n  }\n  if (flag_sum != 0) {\n    FUNC_08008078(param_1 + 0xd4);\n    FUN_0800863c(param_1 + 0xd4,uRam08008cf0);\n    return;\n  }\n  jumptable_index = (uint)0x8008cee;\n  FUN_080090cc(uRam08008cfc,299,uRam08008cf8,uRam08008cf4);\n  if (extraout_r1 < 0x3c) {\n    uRam0000012d = PTR_DAT_08008d14[extraout_r1];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n  (* (code *)jumptable_index)(0,extraout_r1,&stack0x00000148);\n  return;\n}",
            "called": [
                "FUN_08008078",
                "FUN_080090cc",
                "FUN_0800863c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c44",
            "calling": [
                "FUN_08003048"
            ],
            "imported": true,
            "current_name": "set_flags_and_call_func_08008c44"
        },
        "FUN_08002a26": {
            "renaming": {
                "param_1": "data",
                "FUN_08002a1c": "encrypt_byte",
                "param_2": "key",
                "param_3": "buffer1",
                "param_4": "buffer2",
                "FUN_08002a26": "encrypt_data_08002a26"
            },
            "code": "void encrypt_data_08002a26(int data, int key, int buffer1, int buffer2)\n{\n  encrypt_byte(data, 0x33, buffer1, buffer2, buffer2);\n  return;\n}",
            "called": [
                "FUN_08002a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a26",
            "calling": [
                "FUN_08000a64"
            ],
            "imported": true,
            "current_name": "encrypt_data_08002a26"
        },
        "FUN_0800430c": {
            "renaming": {
                "param_1[0x14]": "param_array[0x14]",
                "param_1[4]": "param_array[4]",
                "param_1": "param_array",
                "*(char *)((int)param_1 + 0x3e)": "param_array[0x3e]",
                "*(char *)((int)param_1 + 0x3d)": "param_array[0x3d]",
                "param_1[0x11]": "param_array[0x11]",
                "FUN_0800430c": "get_value_based_on_conditions_0800430c",
                "*(uint *)(*param_1 + 0x10)": "value"
            },
            "code": "uint8_t get_value_based_on_conditions_0800430c(int *param_array)\n{\n    uint8_t value = 0;\n    if (*(char *)((int)param_array + 0x3e) == '@') {\n        if (param_array[0x14] == 0) {\n            value = param_array[0x11] & 0xfe;\n        }\n        else {\n            value = param_array[0x11] & 0xffU | 1;\n        }\n    }\n    else if (param_array[4] == 0x4000) {\n        if (*(char *)((int)param_array + 0x3d) == '!') {\n            value = param_array[0x11] & 0xfe;\n        }\n        else {\n            value = param_array[0x11] & 0xffU | 1;\n        }\n    }\n    else if (param_array[0x14] == 0) {\n        value = (uint8_t)((param_array[0x11] << 0x10) >> 0x17 & 6) | 0xf0;\n    }\n    else if (param_array[0x14] == 1) {\n        value = (uint8_t)((param_array[0x11] << 0x10) >> 0x17 & 6) | 0xf1;\n    }\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800430c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "get_value_based_on_conditions_0800430c"
        },
        "FUN_08006060": {
            "renaming": {
                "FUN_08005fe8": "process_data_helper",
                "param_1": "data_array",
                "*(char *)((int)param_1 + 0x3d)": "data_array[61]",
                "FUN_08007708": "perform_action",
                "FUN_08006060": "process_data_08006060",
                "*(undefined *)(param_1 + 0xf)": "data_array[15]"
            },
            "code": "int process_data_08006060(int *data_array)\n{\n    if (data_array != NULL) {\n        if (data_array[15] == 0) {\n            data_array[15] = 0;\n            perform_action();\n        }\n        data_array[61] = 2;\n        process_data_08006060_helper(data_array[0], &data_array[1]);\n        data_array[61] = 1;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006060",
            "calling": [
                "FUN_08007648"
            ],
            "imported": true,
            "current_name": "process_data_08006060"
        },
        "FUN_08003350": {
            "renaming": {
                "FUN_08003350": "set_values_based_on_condition_08003350",
                "*(undefined4 *)(param_1 + 0x74)": "*(int *)(obj_addr + 116)",
                "param_1": "obj_addr",
                "*(undefined4 *)(param_1 + 0x38)": "*(int *)(obj_addr + 56)",
                "param_2": "condition",
                "param_3": "value1",
                "*(undefined4 *)(param_1 + 0x78)": "*(int *)(obj_addr + 120)",
                "param_4": "value2",
                "*(undefined4 *)(param_1 + 0x48)": "*(int *)(obj_addr + 72)"
            },
            "code": "void set_values_based_on_condition_08003350(int obj_addr, int condition, int value1, int value2) {\n  if (condition == 249) {\n    *(int *)(obj_addr + 116) = value1;\n    *(int *)(obj_addr + 56) = value2;\n    return;\n  }\n  if (condition != 255) {\n    return;\n  }\n  *(int *)(obj_addr + 120) = value1;\n  *(int *)(obj_addr + 72) = value2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003350",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": true,
            "current_name": "set_values_based_on_condition_08003350"
        },
        "FUN_08009698": {
            "renaming": {
                "FUN_08009698": "FUNC_08009698"
            },
            "code": "\nuint FUNC_08009698(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08009852;\n          if (bVar1 != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\nLAB_080097e2:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08009778:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080096c8;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_080096e8;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_080096e8:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080097be;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08009728:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_0800974e:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_0800975c;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_0800975c:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08009778;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_0800970e:\n            puVar5 = PTR_s_0123456789abcdef_080098d0;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_0800974e;\n          if (bVar1 == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08009728;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = FUN_08009f2c(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_0800983e;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_0800983e:\n    *puVar3 = uVar6;\n  }\nLAB_08009852:\n  param_2[4] = 0;\nLAB_080097be:\n  iVar2 = FUN_080095a8(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080097d2:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080097d2;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_080095a8",
                "FUN_08009f2c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009698",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": true,
            "current_name": "FUNC_08009698"
        },
        "FUN_08006186": {
            "renaming": {
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)param_array + 0x3d)",
                "FUN_08006186": "set_parameters_08006186",
                "*(uint *)(*param_1 + 0x18)": "*(uint *)(*param_array + 0x18)",
                "*(int *)(param_2 + 0x10)": "*(int *)(array_size + 0x10)",
                "function_2": "set_parameter_type_4",
                "param_1": "param_array",
                "function_1": "set_parameter_type_0",
                "function_4": "set_parameter_type_12",
                "function_3": "set_parameter_type_8",
                "*(uint *)(*param_1 + 0x1c)": "*(uint *)(*param_array + 0x1c)",
                "param_2": "array_size",
                "param_3": "parameter_value",
                "*(char *)(param_1 + 0xf)": "*(char *)(param_array + 0xf)",
                "*(uint *)(param_2 + 0x10)": "*(uint *)(array_size + 0x10)",
                "*(undefined *)(param_1 + 0xf)": "*(undefined *)(param_array + 0xf)"
            },
            "code": "int set_parameters_08006186(int *param_array, int array_size, int parameter_value) {\n  if (*(char *)(param_array + 0xf) != '\\x01') {\n    *(undefined *)(param_array + 0xf) = 1;\n    *(undefined *)((int)param_array + 0x3d) = 2;\n    switch(parameter_value) {\n      case 0:\n        function_1(*param_array);\n        *(uint *)(*param_array + 0x18) |= 8;\n        *(uint *)(*param_array + 0x18) &= 0xfffffffb;\n        *(uint *)(*param_array + 0x18) |= *(uint *)(array_size + 0x10);\n        break;\n      case 4:\n        function_2(*param_array);\n        *(uint *)(*param_array + 0x18) |= 0x800;\n        *(uint *)(*param_array + 0x18) &= 0xfffffbff;\n        *(uint *)(*param_array + 0x18) |= *(int *)(array_size + 0x10) << 8;\n        break;\n      case 8:\n        function_3(*param_array);\n        *(uint *)(*param_array + 0x1c) |= 8;\n        *(uint *)(*param_array + 0x1c) &= 0xfffffffb;\n        *(uint *)(*param_array + 0x1c) |= *(uint *)(array_size + 0x10);\n        break;\n      case 0xc:\n        function_4(*param_array);\n        *(uint *)(*param_array + 0x1c) |= 0x800;\n        *(uint *)(*param_array + 0x1c) &= 0xfffffbff;\n        *(uint *)(*param_array + 0x1c) |= *(int *)(array_size + 0x10) << 8;\n    }\n    *(undefined *)((int)param_array + 0x3d) = 1;\n    *(undefined *)(param_array + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08005cec",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005dac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006186",
            "calling": [
                "FUN_08007118"
            ],
            "imported": true,
            "current_name": "set_parameters_08006186"
        },
        "FUN_08007710": {
            "renaming": {
                "FUN_08007710": "execute_main_function_08007710",
                "FUN_080074e0": "initialize_system"
            },
            "code": "void execute_main_function_08007710(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007710",
            "calling": [
                "FUN_08005df4"
            ],
            "imported": true,
            "current_name": "execute_main_function_08007710"
        },
        "FUN_08003474": {
            "renaming": {
                "bVar1": "byte_value",
                "FUN_08003474": "process_input_08003474",
                "param_1": "input_index",
                "param_2": "input_value"
            },
            "code": "void process_input_08003474(int input_index, uint8_t input_value)\\n{\\n  uint8_t byte_value;\\n  if (*(char *)(input_index + 0x14) != \"\\0\") {\\n    if (input_value != 0xf7) {\\n      process_input_08003474_value(input_index, input_value, *(uint32_t *)(input_index + 0x18));\\n      *(int *)(input_index + 0x18) = *(int *)(input_index + 0x18) + 1;\\n      return;\\n    }\\n    *(uint8_t *)(input_index + 0x14) = 0;\\n    process_end_of_input();\\n    return;\\n  }\\n  if ((*(int *)(input_index + 0x10) == 0) || (0x7f < (int)input_value)) {\\n    if ((int)input_value < 0xf0) {\\n      *(uint8_t *)(input_index + 0xd) = (uint8_t)input_value & 0xf;\\n      input_value = input_value & 0xf0;\\n    }\\n    if (input_value == 0xf0) {\\n      *(uint8_t *)(input_index + 0x14) = 1;\\n      *(uint32_t *)(input_index + 0x18) = 0;\\n      return;\\n    }\\n    if (input_value < 0xf1) {\\n      if (input_value != 0xc0) {\\n        if (input_value < 0xc1) {\\n          if (input_value != 0x90) {\\n            return;\\n          }\\n        }\\n        else {\\n          if (input_value == 0xd0) goto LAB_INPUT_D0;\\n          if (input_value != 0xe0) {\\n            return;\\n          }\\n        }\\nLAB_INPUT_80:\\n        *(uint32_t *)(input_index + 0x10) = 2;\\n        *(uint8_t *)(input_index + 0xc) = (uint8_t)input_value;\\n        return;\\n      }\\nLAB_INPUT_D0:\\n      *(uint32_t *)(input_index + 0x10) = 1;\\n      *(uint8_t *)(input_index + 0xc) = (uint8_t)input_value;\\n      return;\\n    }\\n    if (input_value != 0xf9) {\\n      if (0xf9 < input_value) {\\n        if (input_value == 0xff) {\\n          process_input_08003474_end(input_index);\\n          return;\\n        }\\n        return;\\n      }\\n      if (1 < input_value - 0xf4) {\\n        return;\\n      }\\n      goto LAB_INPUT_80;\\n    }\\n    if (*(code **)(input_index + 0x74) != (code *)0x0) {\\n      (**(code **)(input_index + 0x74))(*(uint32_t *)(input_index + 0x38));\\n    }\\n  }\\n  else {\\n    *(int *)(input_index + 0x10) = *(int *)(input_index + 0x10) + -1;\\n    process_input_08003474_value(input_index, *(uint8_t *)(input_index + 0xc), *(uint32_t *)(input_index + 0x18));\\n    if ((*(int *)(input_index + 0x10) == 0) && (byte_value = *(uint8_t *)(input_index + 0xc), byte_value != 0)) {\\n      if (byte_value == 0xd0) {\\n        if (*(code **)(input_index + 0x58) != (code *)0x0) {\\n          (**(code **)(input_index + 0x58))(*(uint32_t *)(input_index + 0x28),*(uint8_t *)(input_index + 0xd),**(uint8_t **)(input_index + 4));\\n        }\\n      }\\n      else if (byte_value < 0xd1) {\\n        if (byte_value == 0x90) {\\n          if (*(code **)(input_index + 0x50) != (code *)0x0) {\\n            (**(code **)(input_index + 0x50))(*(uint32_t *)(input_index + 0x20),*(uint8_t *)(input_index + 0xd),(uint)(*(uint8_t **)(input_index + 4))[1] + (uint)**(uint8_t **)(input_index + 4) * 0x80);\\n          }\\n        }\\n        else if ((byte_value == 0xc0) && (*(code **)(input_index + 0x54) != (code *)0x0)) {\\n          (**(code **)(input_index + 0x54))(*(uint32_t *)(input_index + 0x24),*(uint8_t *)(input_index + 0xd),**(uint8_t **)(input_index + 4));\\n        }\\n      }\\n      else if (byte_value == 0xf4) {\\n        if (*(code **)(input_index + 0x5c) != (code *)0x0) {\\n          (**(code **)(input_index + 0x5c))(*(uint32_t *)(input_index + 0x2c),(*((uint8_t **)(input_index + 4)) + 1),**(uint8_t **)(input_index + 4));\\n        }\\n      }\\n      else if (byte_value == 0xf5) {\\n        if (*(code **)(input_index + 0x60) != (code *)0x0) {\\n          (**(code **)(input_index + 0x60))(*(uint32_t *)(input_index + 0x30),(*((uint8_t **)(input_index + 4)) + 1),**(uint8_t **)(input_index + 4));\\n        }\\n      }\\n      else if ((byte_value == 0xe0) && (*(code **)(input_index + 0x4c) != (code *)0x0)) {\\n        (**(code **)(input_index + 0x4c))(*(uint32_t *)(input_index + 0x1c),*(uint8_t *)(input_index + 0xd),(uint)(*(uint8_t **)(input_index + 4))[1] + (uint)**(uint8_t **)(input_index + 4) * 0x80);\\n      }\\n      *(uint8_t *)(input_index + 0xc) = 0;\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_080033cc",
                "FUN_0800344a",
                "FUN_08003376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08002ed2"
            ],
            "imported": true,
            "current_name": "process_input_08003474"
        },
        "FUN_08006b7c": {
            "renaming": {
                "DAT_08006bac": "data_3",
                "FUN_08006b7c": "get_data_by_index_08006b7c",
                "param_1": "index",
                "DAT_08006ba8": "data_2",
                "DAT_08006bb4": "data_1",
                "DAT_08006ba4": "data_0",
                "DAT_08006bb0": "data_4"
            },
            "code": "int get_data_by_index_08006b7c(int index) {\n  switch(index) {\n    case 0:\n      return DAT_08006ba4;\n    case 1:\n      return DAT_08006bb4;\n    case 2:\n      return DAT_08006ba8;\n    case 3:\n      return DAT_08006bac;\n    case 4:\n      return DAT_08006bb0;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b7c",
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "imported": true,
            "current_name": "get_data_by_index_08006b7c"
        },
        "FUN_08008e7c": {
            "renaming": {
                "FUN_08008e7c": "convert_decimal_to_base_08008e7c",
                "param_1": "num",
                "local_15": "buffer",
                "param_2": "base",
                "param_3": "num_digits",
                "cVar1": "digit",
                "uVar3": "remainder",
                "uVar2": "result",
                "uVar4": "quotient",
                "pcVar5": "result_ptr"
            },
            "code": "int convert_decimal_to_base_08008e7c(int *num, uint base, uint num_digits)\n{\n  char digit;\n  int quotient;\n  uint remainder;\n  char *result;\n  char buffer [9];\n  result = buffer + 1;\n  buffer[1] = 0;\n  if ((int)num_digits < 2) {\n    num_digits = 10;\n  }\n  do {\n    quotient = *num / base;\n    remainder = (*num & 0xff) - (quotient * base & 0xff) & 0xff;\n    result--;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit += '0';\n    }\n    else {\n      digit += '7';\n    }\n    *result = digit;\n    *num = quotient;\n  } while (quotient != 0);\n  return (**(int (**)(int*,char*,int))(num + 4))(num,result,FUN_08000178(result));\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e7c",
            "calling": [
                "FUN_08008ed6"
            ],
            "imported": true,
            "current_name": "convert_decimal_to_base_08008e7c"
        },
        "FUN_08003aa0": {
            "renaming": {
                "DAT_08003b84": "PTR_DAT_08003b84",
                "iVar1": "status",
                "flag": "flag",
                "DAT_08003b88": "PTR_DAT_08003b88",
                "FUN_08003aa0": "check_status_of_param_08003aa0",
                "puVar2": "ptr",
                "param_1": "parameters"
            },
            "code": "int check_status_of_param_08003aa0(undefined4 *param_1)\n{\n  int status;\n  undefined4 *ptr;\n  char *flag = (char *)(param_1 + 9);\n  \n  if (*flag != '\\x01') {\n    *flag = 1;\n    status = get_status();\n    if (status == 0) {\n      param_1[10] = (param_1[10] & 0xfffffcfe) | 0x100;\n      ptr = (undefined4 *)*param_1;\n      if ((ptr == DAT_08003b84) && ((DAT_08003b84[-0xff] & 0xf0000) != 0)) {\n        param_1[10] = param_1[10] | 0x100000;\n        if ((*(uint *)(DAT_08003b88 + 4) & 0x400) != 0) {\n          param_1[10] = (param_1[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      else {\n        param_1[10] = param_1[10] & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          param_1[10] = (param_1[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      if ((param_1[10] & 0x1000) == 0) {\n        param_1[0xb] = 0;\n      }\n      else {\n        param_1[0xb] = param_1[0xb] & 0xfffffff9;\n      }\n      *flag = 0;\n      *ptr = 0xfffffffd;\n      param_1 = (undefined4 *)*param_1;\n      if (((param_1[2] & 0xe0000) == 0xe0000) &&\n         ((param_1 != DAT_08003b84 || ((DAT_08003b84[-0xff] & 0xf0000) == 0)))) {\n        param_1[2] = param_1[2] | 0x500000;\n      }\n      else {\n        param_1[2] = param_1[2] | 0x100000;\n      }\n    }\n    else {\n      *flag = 0;\n    }\n    return status;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08003a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003aa0",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "check_status_of_param_08003aa0"
        },
        "FUN_08003ce8": {
            "renaming": {
                "iVar1": "result",
                "FUN_08003ce8": "initialize_08003ce8",
                "param_1": "config"
            },
            "code": "int initialize_08003ce8(int *config)\n{\n  int result;\n  if (config == NULL) {\n    result = 1;\n  }\n  else {\n    config[10] |= 2;\n    result = check_config();\n    if (result == 0) {\n      *(int *)*config = -32;\n      *(unsigned int *)(*config + 4) &= DAT_08003ddc;\n      *(unsigned int *)(*config + 8) &= DAT_08003de0;\n      *(unsigned int *)(*config + 12) &= 0xff000000;\n      *(unsigned int *)(*config + 16) &= 0xc0000000;\n      *(unsigned int *)(*config + 20) &= 0xfffff000;\n      *(unsigned int *)(*config + 24) &= 0xfffff000;\n      *(unsigned int *)(*config + 28) &= 0xfffff000;\n      *(unsigned int *)(*config + 32) &= 0xfffff000;\n      *(unsigned int *)(*config + 36) &= 0xfffff000;\n      *(unsigned int *)(*config + 40) &= 0xfffff000;\n      *(unsigned int *)(*config + 44) &= 0xff000000;\n      *(unsigned int *)(*config + 48) &= 0xff000000;\n      *(unsigned int *)(*config + 52) &= 0xc0000000;\n      *(unsigned int *)(*config + 56) &= 0xc0000000;\n      *(unsigned int *)(*config + 60) &= 0xffc00000;\n      *(unsigned int *)(*config + 64) &= 0xffc00000;\n      cleanup(config);\n      config[11] = 0;\n      config[10] = 0;\n    }\n    *(char *)(config + 9) = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003b8c",
                "FUN_08006d24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ce8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "initialize_08003ce8"
        },
        "FUN_08005fe8": {
            "renaming": {
                "uVar1": "current_value",
                "FUN_08005fe8": "update_config_08005fe8",
                "param_1": "config_values",
                "param_2": "new_values"
            },
            "code": "void update_config_08005fe8(uint *config_values, uint *new_values)\n{\n  uint current_value = *config_values;\n  if ((((config_values == PTR_DAT_0800605c) || (config_values == (uint *)0x40000000)) ||\n      (config_values == PTR_DAT_0800605c - 0x4a00)) || (config_values == PTR_DAT_0800605c - 0x4900)) {\n    current_value = current_value & 0xffffff8f | new_values[1];\n  }\n  if (((config_values == PTR_DAT_0800605c) || (config_values == (uint *)0x40000000)) ||\n     ((config_values == PTR_DAT_0800605c - 0x4a00 || (config_values == PTR_DAT_0800605c - 0x4900)))) {\n    current_value = current_value & 0xfffffcff | new_values[3];\n  }\n  *config_values = current_value & 0xffffff7f | new_values[5];\n  config_values[0xb] = new_values[2];\n  config_values[10] = *new_values;\n  if (config_values == PTR_DAT_0800605c) {\n    config_values[0xc] = new_values[4];\n  }\n  config_values[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fe8",
            "calling": [
                "FUN_08006092",
                "FUN_08006060"
            ],
            "imported": true,
            "current_name": "update_config_08005fe8"
        },
        "FUN_08008804": {
            "renaming": {
                "iVar1": "nextIndex",
                "FUN_08008804": "getNextIndex_08008804",
                "puVar2": "stackPointer",
                "param_1": "currentIndex"
            },
            "code": "int getNextIndex_08008804(int currentIndex)\n{\n  int nextIndex;\n  undefined *stackPointer;\n  \n  if (*(int *)PTR_DAT_08008834 == 0) {\n    *(undefined **)PTR_DAT_08008834 = PTR_DAT_08008838;\n  }\n  nextIndex = *(int *)PTR_DAT_08008834;\n  stackPointer = (undefined *)(currentIndex + nextIndex);\n  if (stackPointer <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_08008834 = stackPointer;\n    return nextIndex;\n  }\n  *(undefined4 *)PTR_DAT_0800883c = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008804",
            "calling": [
                "FUN_08009918"
            ],
            "imported": true,
            "current_name": "getNextIndex_08008804"
        },
        "FUN_0800738a": {
            "renaming": {
                "undefined4": "int",
                "FUN_0800738a": "check_for_match_0800738a",
                "param_1": "input_value",
                "param_2": "input_array"
            },
            "code": "int check_for_match_0800738a(int input_value, char *input_array)\n{\n  if (input_value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*input_array == -1) {\n      return 0;\n    }\n    if (input_value == *input_array) break;\n    input_array = input_array + 0xc;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738a",
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_0800021a",
                "FUN_08001cd0",
                "FUN_08008990",
                "FUN_08000a64"
            ],
            "imported": true,
            "current_name": "check_for_match_0800738a"
        },
        "FUN_08004e3c": {
            "renaming": {
                "puVar2": "ptr2",
                "FUN_08004e3c": "process_data_08004e3c",
                "param_1": "data",
                "puVar1": "ptr1"
            },
            "code": "uint32_t process_data_08004e3c(uint32_t **data)\n{\n  uint32_t *ptr1;\n  ptr1 = data[11];\n  if (*(uint16_t *)((int)data + 0x2a) == 3) {\n    if (((ptr1 == (uint32_t *)0x4) || (ptr1 == (uint32_t *)0x8)) || (ptr1 == (uint32_t *)0xffff0000)) {\n      **data = **data & 0xfffffbff;\n    }\n    uint32_t *ptr2 = data[9];\n    data[9] = (uint32_t *)((int)ptr2 + 1);\n    *(char *)ptr2 = (char)(*data)[4];\n    *(uint16_t *)((int)data + 0x2a) = *(uint16_t *)((int)data + 0x2a) + -1;\n  }\n  else if (*(uint16_t *)((int)data + 0x2a) == 2) {\n    if (((ptr1 == (uint32_t *)0x4) || (ptr1 == (uint32_t *)0x8)) || (ptr1 == (uint32_t *)0xffff0000)) {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      **data = **data | 0x200;\n    }\n    else {\n      if (ptr1 == (uint32_t *)0x2) {\n        **data = **data | 0x400;\n      }\n      else {\n        **data = **data & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    uint32_t *ptr2 = data[9];\n    data[9] = (uint32_t *)((int)ptr2 + 1);\n    *(char *)ptr2 = (char)(*data)[4];\n    *(uint16_t *)((int)data + 0x2a) = *(uint16_t *)((int)data + 0x2a) + -1;\n    ptr2 = data[9];\n    data[9] = (uint32_t *)((int)ptr2 + 1);\n    *(char *)ptr2 = (char)(*data)[4];\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    data[12] = (uint32_t *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      do_nothing_08004d6a();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      do_nothing_08004a20();\n    }\n  }\n  else {\n    uint32_t *ptr2 = data[9];\n    data[9] = (uint32_t *)((int)ptr2 + 1);\n    *(char *)ptr2 = (char)(*data)[4];\n    *(uint16_t *)((int)data + 0x2a) = *(uint16_t *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004d6a",
                "FUN_08004a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e3c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "process_data_08004e3c"
        },
        "FUN_080091a0": {
            "renaming": {
                "FUN_080091a0": "call_function_with_param_080091a0",
                "param_1": "parameter",
                "FUN_080091d8": "call_function",
                "PTR_PTR_DAT_080091ac": "function_pointer"
            },
            "code": "void call_function_with_param_080091a0(void* PTR_PTR_DAT_080091ac, int parameter){\n  call_function(PTR_PTR_DAT_080091ac, parameter);\n  return;\n}",
            "called": [
                "FUN_080091d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a0",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": true,
            "current_name": "call_function_with_param_080091a0"
        },
        "FUN_08002a1c": {
            "renaming": {
                "FUN_08002a1c": "executeFunctionWithParameters_08002a1c",
                "param_1": "param1",
                "FUN_08002968": "executeFunctionWithMultipleParameters",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "void executeFunctionWithParameters_08002a1c(void* param1, char param2, int param3, int param4)\n{\n  executeFunctionWithMultipleParameters(param1, param2, param3, param4, param4);\n  return;\n}",
            "called": [
                "FUN_08002968"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a1c",
            "calling": [
                "FUN_08002a26"
            ],
            "imported": true,
            "current_name": "executeFunctionWithParameters_08002a1c"
        },
        "FUN_08007718": {
            "renaming": {
                "FUN_08007718": "subtract_four_08007718",
                "param_1": "num"
            },
            "code": "int subtract_four_08007718(int num){\n  return num - 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007718",
            "calling": [
                "FUN_08007736",
                "FUN_0800771c"
            ],
            "imported": true,
            "current_name": "subtract_four_08007718"
        },
        "FUN_08002948": {
            "renaming": {
                "FUN_0800291c": "execute_function",
                "param_1": "input_one",
                "FUN_08002948": "check_and_execute_08002948",
                "param_2": "input_two"
            },
            "code": "void check_and_execute_08002948(int input_one, int input_two)\n{\n  if (input_one == 1) {\n    if (input_two == 0xffff) {\n      execute_function(PTR_DAT_08002964);\n    }\n  }\n}\n",
            "called": [
                "FUN_0800291c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002948",
            "calling": [
                "FUN_08002c1e"
            ],
            "imported": true,
            "current_name": "check_and_execute_08002948"
        },
        "FUN_08009e64": {
            "renaming": {
                "auStack_4c": "stack_buffer",
                "iVar1": "permission_check_result",
                "param_1": "file_path",
                "(uint)((local_48 & 0xf000) == 0x2000)": "is_success",
                "*param_3": "*permission_flags",
                "local_48": "local_buffer",
                "FUN_08009e64": "check_file_permissions_08009e64",
                "param_2": "file_descriptor",
                "param_3": "permission_flags",
                "param_4": "success_flag",
                "uVar2": "permission_flags_result",
                "*param_4": "*success_flag"
            },
            "code": "undefined4 check_file_permissions_08009e64(undefined4 file_path, int file_descriptor, undefined4 *permission_flags, uint *success_flag) {\n  int permission_check_result;\n  undefined4 permission_flags_result;\n  undefined4 stack_buffer [1];\n  uint is_success;\n  if ((*(short *)(file_descriptor + 0xe) < 0) || (permission_check_result = check_permission(file_path, (int)*(short *)(file_descriptor + 0xe), stack_buffer), permission_check_result < 0)) {\n    *success_flag = 0;\n    if ((int)((uint)*(ushort *)(file_descriptor + 0xc) << 0x18) < 0) {\n      permission_flags_result = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    is_success = (uint)((local_buffer & 0xf000) == 0x2000);\n    *success_flag = is_success;\n  }\n  permission_flags_result = 0x400;\nLAB_08009ea4:\n  *permission_flags = permission_flags_result;\n  return 0;\n}",
            "called": [
                "FUN_0800a0ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e64",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": true,
            "current_name": "check_file_permissions_08009e64"
        },
        "FUN_08002acc": {
            "renaming": {
                "iVar2": "updated_value",
                "param_1": "value_to_update",
                "param_2": "default_value",
                "FUN_08002acc": "update_value_if_greater_than_threshold_08002acc",
                "param_3": "threshold",
                "param_4": "max_value",
                "puVar1": "data_pointer",
                "uVar3": "updated_value_byte"
            },
            "code": "void update_value_if_greater_than_threshold_08002acc(uint value_to_update, uint threshold, uint default_value, uint max_value) {\n  undefined *data_pointer = PTR_DAT_08002afc;\n  if ((byte)*PTR_DAT_08002af8 < value_to_update) {\n    if (value_to_update < 0x20) {\n      value_to_update = 0x20;\n    }\n    int updated_value = FUN_08009908(*(undefined4 *)PTR_DAT_08002afc, value_to_update, default_value, (uint)(byte)*PTR_DAT_08002af8, max_value);\n    *(int *)data_pointer = updated_value;\n    if (updated_value == 0) {\n      undefined updated_value_byte = 0;\n    }\n    else {\n      undefined updated_value_byte = (undefined)value_to_update;\n    }\n    *PTR_DAT_08002af8 = updated_value_byte;\n  }\n  return;\n}",
            "called": [
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002acc",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": true,
            "current_name": "update_value_if_greater_than_threshold_08002acc"
        },
        "FUN_08002a30": {
            "renaming": {
                "param_1": "value",
                "param_2": "shiftAmount",
                "FUN_08002a30": "initialize_08002a30"
            },
            "code": "void initialize_08002a30(int value, int shiftAmount)\n{\n  *PTR_DAT_08002a48 = 1;\n  *PTR_DAT_08002a4c = (char)(shiftAmount << 1);\n  *PTR_DAT_08002a50 = 0;\n  *PTR_DAT_08002a54 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a30",
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08002b68"
            ],
            "imported": true,
            "current_name": "initialize_08002a30"
        },
        "FUN_0800932c": {
            "renaming": {
                "iVar1": "buffer_offset",
                "FUN_08009d50": "error_handler",
                "param_1": "input_length",
                "FUN_08009a80": "error_handler",
                "PTR_DAT_08009a7c": "ptr_data_3",
                "pbVar2": "current_buffer_pos",
                "PTR_DAT_08009a78": "ptr_data_2",
                "pbVar3": "buffer_start",
                "param_2": "input_char",
                "param_3": "input_buffer",
                "FUN_0800932c": "process_input_0800932c",
                "FUN_08009c7c": "error_handler",
                "uVar4": "result_char",
                "PTR_DAT_08009a74": "ptr_data_1"
            },
            "code": "unsigned int process_input_0800932c(int input_length, unsigned char input_char, unsigned char **input_buffer){\n  int buffer_offset;\n  unsigned char *current_buffer_pos;\n  unsigned char *buffer_start;\n  unsigned int result_char;\n  \n  buffer_offset = (*input_buffer)[2] + -1;\n  (*input_buffer)[2] = buffer_offset;\n  if ((buffer_offset >= -1) && ((buffer_offset >= (int)(*input_buffer)[6]) || (input_char != 0xa))){\n    current_buffer_pos = *input_buffer;\n    *input_buffer = current_buffer_pos + 1;\n    *current_buffer_pos = input_char;\n    return (unsigned int)input_char;\n  }\n  if ((input_length != 0) && (*(int *)(input_length + 0x18) == 0)) {\n    error_handler();\n  }\n  if (input_buffer == (unsigned char **)PTR_DAT_08009a74) {\n    input_buffer = *(unsigned char ***)(input_length + 4);\n  }\n  else if (input_buffer == (unsigned char **)PTR_DAT_08009a78) {\n    input_buffer = *(unsigned char ***)(input_length + 8);\n  }\n  else if (input_buffer == (unsigned char **)PTR_DAT_08009a7c) {\n    input_buffer = *(unsigned char ***)(input_length + 0xc);\n  }\n  (*input_buffer)[2] = (*input_buffer)[6];\n  buffer_start = (unsigned char *)(unsigned int)*(unsigned short *)(input_buffer + 3);\n  buffer_offset = (int)buffer_start << 0x1c;\n  if (((buffer_offset < 0) && ((buffer_start = input_buffer[4]) != (unsigned char *)0x0)) || ((buffer_offset = error_handler(input_length, input_buffer, buffer_offset, buffer_start, current_buffer_pos), buffer_offset == 0))) {\n    result_char = (unsigned int)input_char;\n    buffer_offset = (int)*input_buffer - (int)input_buffer[4];\n    if ((buffer_offset < (int)input_buffer[5]) || ((buffer_offset = error_handler(input_length, input_buffer), buffer_offset == 0))) {\n      (*input_buffer)[2] = (*input_buffer)[2] + -1;\n      current_buffer_pos = *input_buffer;\n      *input_buffer = current_buffer_pos + 1;\n      *current_buffer_pos = input_char;\n      if ((unsigned int)(buffer_offset + 1) != (unsigned int)input_buffer[5]) {\n        if (-1 >= (int)((unsigned int)*(unsigned short *)(input_buffer + 3) << 0x1f)) {\n          if (input_char == 10) {\n            return result_char;\n          }\n        }\n        else {\n          return result_char;\n        }\n      }\n      buffer_offset = error_handler(input_length, input_buffer);\n      if (buffer_offset == 0) {\n        return result_char;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_08009c7c",
                "FUN_08009d50",
                "FUN_08009a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800932c",
            "calling": [
                "FUN_08009358"
            ],
            "imported": true,
            "current_name": "process_input_0800932c"
        },
        "FUN_0800322c": {
            "renaming": {
                "param_1": "function_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "puVar1": "function",
                "FUN_0800322c": "execute_function_if_exists_0800322c"
            },
            "code": "void execute_function_if_exists_0800322c(int* function_ptr, int param_2, int param_3)\n{\n  int* function = (int*)*function_ptr;\n  if (function != NULL) {\n    (**(void (**)(int*, int))(function))(function, 0xf9);\n    (***(void (***)(int*))(int*)*function_ptr)((int*)*function_ptr, param_2);\n    (***(void (***)(int*))(int*)*function_ptr)((int*)*function_ptr, param_3);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800322c",
            "calling": [
                "FUN_08002ddc"
            ],
            "imported": true,
            "current_name": "execute_function_if_exists_0800322c"
        },
        "FUN_080099a4": {
            "renaming": {
                "pcVar2": "current_char_in_substring",
                "pcVar3": "potential_start_of_substring",
                "pcVar1": "current_char_in_string",
                "param_1": "string",
                "param_2": "substring",
                "FUN_080099a4": "find_substring_080099a4"
            },
            "code": "char* find_substring_080099a4(char* string, char* substring) {\\\n  char* current_char_in_string;\\\n  char* current_char_in_substring;\\\n  char* potential_start_of_substring;\\\n  \\\n  if (*string == \"\\0\") {\\\n    if (*substring != \"\\0\") {\\\n      string = NULL;\\\n    }\\\n    return string;\\\n  }\\\n  \\\n  do {\\\n    current_char_in_string = string;\\\n    \\\n    if (*current_char_in_string == \"\\0\") {\\\n      return NULL;\\\n    }\\\n    \\\n    potential_start_of_substring = substring - 1;\\\n    current_char_in_substring = current_char_in_string - 1;\\\n    \\\n    do {\\\n      potential_start_of_substring++;\\\n      \\\n      if (*potential_start_of_substring == \"\\0\") {\\\n        return current_char_in_string;\\\n      }\\\n      \\\n      current_char_in_substring++;\\\n      string = current_char_in_string + 1;\\\n    } while (*current_char_in_substring == *potential_start_of_substring);\\\n  } while(true);\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099a4",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": true,
            "current_name": "find_substring_080099a4"
        },
        "FUN_08005a1c": {
            "renaming": {
                "FUN_08005a1c": "get_pointer_value_08005a1c",
                "PTR_DAT_08005a24": "pointer_data"
            },
            "code": "get_pointer_value_08005a1c() {\n    return *(undefined4 *)PTR_DAT_08005a24;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a1c",
            "calling": [
                "FUN_080035b8",
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "imported": true,
            "current_name": "get_pointer_value_08005a1c"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "FUNC_08001cd0"
            },
            "code": "\nvoid FUNC_08001cd0(undefined4 param_1,int param_2,byte *param_3,undefined4 param_4)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte bVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined4 uVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  int iVar10;\n  char cVar11;\n  uint uVar12;\n  uint uVar13;\n  int iVar14;\n  bool bVar15;\n  \n  puVar5 = PTR_DAT_080022e8;\n  puVar4 = PTR_DAT_08002044;\n  switch(param_1) {\n  case 0x69:\n    FUN_08002f1e(PTR_DAT_080022e8,0xf0);\n    FUN_08002f1e(puVar5,0x6a);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      uVar13 = uVar12 - 0x2e & 0xff;\n      if (uVar13 < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = FUN_080036ac(iVar9);\n        if (iVar9 == 0) {\n          uVar13 = 0x7f;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = FUN_080036ac(iVar9);\n          if (iVar9 == 1) {\n            uVar13 = 0x7f;\n          }\n        }\n      }\n      else {\n        uVar13 = 0x7f;\n      }\n      FUN_08002f1e(PTR_DAT_080022e8,uVar13);\n    }\n    FUN_08002f1e(PTR_DAT_080022e8,0xf7);\n    break;\n  case 0x6b:\n    FUN_08002f1e(PTR_DAT_08002044,0xf0);\n    FUN_08002f1e(puVar4,0x6c);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_08002044;\n      if (bVar15) {\n        FUN_08002f1e(PTR_DAT_08002044,0);\n        FUN_08002f1e(puVar4,1);\n        FUN_08002f1e(puVar4,0xb);\n        FUN_08002f1e(puVar4,1);\n        FUN_08002f1e(puVar4,1);\n        FUN_08002f1e(puVar4,1);\n      }\n      if ((uVar12 - 0x2e & 0xff) < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = FUN_080036ac(iVar9);\n        if (iVar9 == 0) {\n          bVar15 = false;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = FUN_080036ac(iVar9);\n          if (iVar9 == 1) {\n            bVar15 = false;\n          }\n          else {\n            bVar15 = true;\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        FUN_08002f1e(PTR_DAT_080022e8,2);\n        FUN_08002f1e(puVar4,10);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = FUN_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022ec);\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        FUN_08002f1e(PTR_DAT_080022e8,3);\n        FUN_08002f1e(puVar4,8);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        FUN_08002f1e(PTR_DAT_080022e8,4);\n        FUN_08002f1e(puVar4,0xe);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = FUN_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f0);\n              if (iVar9 == 0) {\n                iVar9 = FUN_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f4);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        FUN_08002f1e(PTR_DAT_080022e8,6);\n        FUN_08002f1e(puVar4,1);\n      }\n      FUN_08002f1e(PTR_DAT_080022e8,0x7f);\n    }\n    FUN_08002f1e(PTR_DAT_080022e8,0xf7);\n    return;\n  case 0x6d:\n    if (param_2 != 0) {\n      bVar1 = *param_3;\n      FUN_08002f1e(PTR_DAT_080022e8,0xf0);\n      FUN_08002f1e(puVar5,0x6e);\n      FUN_08002f1e(puVar5,bVar1);\n      if (bVar1 < 0x3c) {\n        uVar6 = FUN_08002fa0(puVar5,bVar1);\n        FUN_08002f1e(puVar5,uVar6);\n        uVar12 = FUN_08002fba(puVar5,bVar1);\n        FUN_08002f1e(puVar5,uVar12 & 0x7f);\n        uVar12 = FUN_08002fba(puVar5,bVar1);\n        if ((uVar12 & 0xff80) != 0) {\n          iVar9 = FUN_08002fba(puVar5,bVar1);\n          FUN_08002f1e(puVar5,(uint)(iVar9 << 0x12) >> 0x19);\n        }\n        uVar12 = FUN_08002fba(PTR_DAT_080022e8,bVar1);\n        puVar4 = PTR_DAT_080022e8;\n        if ((uVar12 & 0xc000) != 0) {\n          iVar9 = FUN_08002fba(PTR_DAT_080022e8,bVar1);\n          FUN_08002f1e(puVar4,(uint)(iVar9 << 0xb) >> 0x19);\n        }\n      }\n      FUN_08002f1e(PTR_DAT_080022e8,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < param_2) {\n      uVar12 = (uint)param_3[1];\n      if (2 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[2] << 7;\n      }\n      if (3 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[3] << 0xe;\n      }\n      FUN_08000214(*param_3,uVar12);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < param_2) {\n      uVar12 = (uint)*param_3;\n      bVar1 = param_3[1];\n      bVar7 = param_3[2];\n      bVar2 = param_3[3];\n      bVar3 = param_3[4];\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_08002060[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      if (bVar15) {\n        if ((byte)PTR_DAT_08002064[uVar12] < 0xc) {\n          iVar9 = FUN_080026f8(PTR_DAT_08002068 + (uint)(byte)PTR_DAT_08002064[uVar12] * 3);\n        }\n        else {\n          iVar9 = 0;\n        }\n        if (iVar9 != 0) {\n          FUN_08000588(uVar12);\n        }\n        FUN_08000500(uVar12,(uint)bVar1 + (uint)bVar7 * 0x80,(uint)bVar2 + (uint)bVar3 * 0x80);\n        FUNC_080005f8(uVar12,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    bVar1 = param_3[1];\n    bVar7 = bVar1 & 0x18;\n    if ((bVar1 & 0x20) != 0) {\n      FUN_08002f14(PTR_DAT_08002044,PTR_s_10_bit_addressing_not_supported_08002040,bVar7,bVar1,\n                   param_4);\n      return;\n    }\n    bVar2 = *param_3;\n    bVar15 = (bVar1 & 0x40) == 0;\n    if (bVar7 < 0x19) {\n      switch(bVar7) {\n      case 0:\n        FUN_08002a30(PTR_DAT_08002048,bVar2);\n        for (uVar12 = 2; (int)uVar12 < param_2; uVar12 = uVar12 + 2 & 0xff) {\n          FUN_08001bf8(param_3[uVar12 + 1] * -0x80 + param_3[uVar12]);\n        }\n        FUN_08002ac0(PTR_DAT_08002048);\n        return;\n      case 8:\n        if (param_2 == 6) {\n          iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n          cVar8 = param_3[4] + param_3[5] * -0x80;\n        }\n        else {\n          cVar8 = param_3[2] + param_3[3] * -0x80;\n          iVar9 = -1;\n        }\n        FUN_08001c18(bVar2,iVar9,cVar8);\n        return;\n      case 0x10:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 + 1 < 8) {\n          if (param_2 == 6) {\n            iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n            cVar11 = param_3[4] + param_3[5] * -0x80;\n          }\n          else {\n            cVar11 = param_3[2] + param_3[3] * -0x80;\n            iVar9 = -1;\n          }\n          *PTR_DAT_0800204c = cVar8 + '\\x01';\n          puVar4 = PTR_DAT_08002050;\n          iVar10 = (char)(cVar8 + '\\x01') * 0xc;\n          PTR_DAT_08002050[iVar10] = bVar2;\n          *(int *)(puVar4 + iVar10 + 4) = iVar9;\n          puVar4[iVar10 + 8] = cVar11;\n          puVar4[iVar10 + 9] = bVar15;\n          return;\n        }\n        FUN_08002f14(PTR_DAT_08002044,PTR_s_too_many_queries_08002054,(int)cVar8,bVar15,param_4);\n        return;\n      case 0x18:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 < 1) {\n          *PTR_DAT_0800204c = 0xff;\n          return;\n        }\n      }\n      for (uVar12 = 0; iVar9 = cVar8 + 1, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (bVar2 == PTR_DAT_08002050[uVar12 * 0xc]) goto LAB_08001e66;\n      }\n      uVar12 = 0;\nLAB_08001e66:\n      for (; puVar4 = PTR_DAT_08002050, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (uVar12 < 8) {\n          iVar10 = (uVar12 + 1) * 0xc;\n          iVar14 = uVar12 * 0xc;\n          PTR_DAT_08002050[iVar14] = PTR_DAT_08002050[iVar10];\n          *(undefined4 *)(puVar4 + iVar14 + 4) = *(undefined4 *)(puVar4 + iVar10 + 4);\n          puVar4[iVar14 + 8] = puVar4[iVar10 + 8];\n          puVar4[iVar14 + 9] = puVar4[iVar10 + 9];\n        }\n      }\n      *PTR_DAT_0800204c = cVar8 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80;\n    if ((1 < param_2) && (iVar9 != 0)) {\n      *(int *)PTR_DAT_08002058 = iVar9;\n    }\n    if (*PTR_DAT_0800205c == '\\0') {\n      FUN_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < param_2) &&\n       (iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80, *(int *)PTR_DAT_0800206c = iVar9,\n       iVar9 == 0)) {\n      *(undefined4 *)PTR_DAT_0800206c = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08001c18",
                "FUN_08002f1e",
                "FUN_08001bf8",
                "FUN_08002ac0",
                "FUN_08002a30",
                "FUN_08000214",
                "FUN_08000a64",
                "FUN_08000588",
                "FUN_08002fba",
                "FUN_08002f14",
                "FUN_080036ac",
                "FUN_08002fa0",
                "FUN_0800738a",
                "FUN_080005f8",
                "FUN_08000500",
                "FUN_080026f8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001cd0",
            "calling": [],
            "imported": true,
            "current_name": "FUNC_08001cd0"
        },
        "FUN_08003760": {
            "renaming": {
                "FUN_08003760": "get_pointer_value_08003760",
                "PTR_DAT_08003768": "pointer_address"
            },
            "code": "get_pointer_value_08003760() {\n  return *(undefined4 *)PTR_DAT_08003768;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003760",
            "calling": [
                "FUN_0800723c",
                "FUN_08007e74",
                "FUN_08003e20",
                "FUN_08007f0e",
                "FUN_08008500",
                "FUN_0800376c",
                "FUN_08003b8c",
                "FUN_080066e8",
                "FUN_08003a20",
                "FUN_080067ac",
                "FUN_080058d2",
                "FUN_08005460",
                "FUN_08005aa4"
            ],
            "imported": true,
            "current_name": "get_pointer_value_08003760"
        },
        "FUN_08007320": {
            "renaming": {
                "FUN_08007320": "check_param_and_call_08007320",
                "uVar1": "result",
                "param_1": "param_value",
                "FUN_08007306": "call_another_function"
            },
            "code": "int check_param_and_call_08007320(int param_value)\n{\n  int result;\n  if (param_value != -1) {\n    result = call_another_function();\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007320",
            "calling": [
                "FUN_08006d80",
                "FUN_080084b0",
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08008500",
                "FUN_08007118",
                "FUN_080071e4"
            ],
            "imported": true,
            "current_name": "check_param_and_call_08007320"
        },
        "FUN_08000be8": {
            "renaming": {
                "PTR_DAT_08000c14": "ptr_data_4",
                "PTR_DAT_08000c10": "ptr_data_3",
                "puVar2": "data_ptr_1",
                "param_1": "index",
                "FUN_08000be8": "updateData_08000be8",
                "PTR_DAT_08000c0c": "ptr_data_1",
                "param_2": "mask",
                "param_3": "value",
                "param_4": "param_4",
                "puVar1": "data_ptr_2"
            },
            "code": "void updateData_08000be8(int index, uint8_t mask, int value, uint32_t param_4)\n{\n  uint8_t* data_ptr_1 = (uint8_t*)((byte)PTR_DAT_08000c0c[index] & mask);\n  uint8_t* data_ptr_2 = ptr_data_2;\n  if ((value != 0) || (data_ptr_1 != (uint8_t*)(uint)data_ptr_3[index])) {\n    performUpdate(PTR_DAT_08000c14, index, data_ptr_1, (uint8_t*)(uint)data_ptr_3[index], param_4);\n    data_ptr_3[index] = (char)data_ptr_1;\n  }\n  return;\n}",
            "called": [
                "FUN_08002efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000be8",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": true,
            "current_name": "updateData_08000be8"
        },
        "FUN_08003fd8": {
            "renaming": {
                "param_1": "param",
                "FUN_08003fd8": "check_param_validity_08003fd8",
                "DAT_08004000": "memory_address",
                "puVar1": "param_ptr",
                "DAT_08003ffc": "param_ptr"
            },
            "code": "int check_param_validity_08003fd8(int param) {\n  int *DAT_08003ffc;\n  DAT_08003ffc = DAT_08003ffc;\n  if (param - 1U < 0x1000000) {\n    DAT_08003ffc[1] = param - 1U;\n    *(undefined *)(DAT_08004000 + 0x23) = 0xf0;\n    DAT_08003ffc[2] = 0;\n    *DAT_08003ffc = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd8",
            "calling": [
                "FUN_080035b8",
                "FUN_080036d8"
            ],
            "imported": true,
            "current_name": "check_param_validity_08003fd8"
        },
        "FUN_0800307a": {
            "renaming": {
                "uVar1": "curr_byte",
                "param_1": "encoder",
                "FUN_0800307a": "encode_data_0800307a",
                "param_2": "data_length",
                "param_3": "data",
                "param_4": "max_data_length",
                "uVar3": "total_bits_processed",
                "uVar2": "bits_processed",
                "uVar4": "bits_in_curr_byte"
            },
            "code": "void encode_data_0800307a(uint32_t *encoder, uint data_length, uint8_t *data, uint max_data_length)\n{\n  uint curr_byte = (uint)*data;\n  if (max_data_length == 0) {\n    max_data_length = 0xffffffff;\n  }\n  uint bits_processed = 0;\n  uint bits_in_curr_byte = 0;\n  uint total_bits_processed = 0;\n  while ((bits_processed < data_length && (total_bits_processed < max_data_length))) {\n    (***(code ***)(uint32_t *)*encoder)\n              ((uint32_t *)*encoder,((uint)data[bits_processed] << (bits_in_curr_byte & 0xff) | curr_byte) & 0x7f);\n    curr_byte = (int)(uint)data[bits_processed] >> (7 - bits_in_curr_byte & 0xff) & 0xff;\n    bits_in_curr_byte = bits_in_curr_byte + 1;\n    while ((total_bits_processed = total_bits_processed + 1, 6 < bits_in_curr_byte && (total_bits_processed < max_data_length))) {\n      (***(code ***)(uint32_t *)*encoder)((uint32_t *)*encoder,curr_byte & 0x7f);\n      curr_byte = curr_byte >> 7;\n      bits_in_curr_byte = bits_in_curr_byte - 7;\n    }\n    bits_processed = bits_processed + 1;\n  }\n  if ((bits_in_curr_byte != 0) && (total_bits_processed < max_data_length)) {\n    (***(code ***)(uint32_t *)*encoder)((uint32_t *)*encoder,(1 << (bits_in_curr_byte & 0xff)) - 1U & curr_byte)\n    ;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800307a",
            "calling": [
                "FUN_08003106",
                "FUN_08003158",
                "FUN_0800325a",
                "FUN_0800319e",
                "FUN_080031ce"
            ],
            "imported": true,
            "current_name": "encode_data_0800307a"
        },
        "FUN_08004b80": {
            "renaming": {
                "FUN_08004b80": "do_nothing_08004b80"
            },
            "code": "\nvoid do_nothing_08004b80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b80",
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "imported": true,
            "current_name": "do_nothing_08004b80"
        },
        "FUN_0800319e": {
            "renaming": {
                "local_a": "local_value",
                "param_1": "ptr_to_function",
                "FUN_0800307a": "update_ptr_and_value",
                "FUN_0800319e": "execute_function_on_ptr_0800319e",
                "param_2": "param_2",
                "param_3": "param_3",
                "puVar1": "function_ptr"
            },
            "code": "void execute_function_on_ptr_0800319e(void *ptr_to_function, uint32_t param_2, uint16_t param_3) {\n  void (*function_ptr)(void*, uint32_t) = *(void (**)(void*, uint32_t))ptr_to_function;\n  if (function_ptr != NULL) {\n    function_ptr(ptr_to_function, param_2 & 0xf | 0x90);\n    update_ptr_and_value(ptr_to_function, 2, &param_3);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800319e",
            "calling": [
                "FUN_08002efe"
            ],
            "imported": true,
            "current_name": "execute_function_on_ptr_0800319e"
        },
        "FUN_08008d00": {
            "renaming": {
                "uVar1": "lookup_value",
                "param_1": "offset",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "FUN_08008d00": "set_value_at_offset_08008d00",
                "param_2": "value"
            },
            "code": "void set_value_at_offset_08008d00(int offset, uint8_t value) {\n  uint8_t lookup_value = (value < 0x3c) ? PTR_DAT_08008d14[value] : 0xff;\n  *(uint8_t *)(offset + 0x12d) = lookup_value;\n  code *jump_table = UNRECOVERED_JUMPTABLE;\n  jump_table();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d00",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": true,
            "current_name": "set_value_at_offset_08008d00"
        },
        "FUN_08009190": {
            "renaming": {
                "param_1": "parameter",
                "PTR_PTR_DAT_0800919c": "function_pointer",
                "FUN_08009190": "call_function_with_param_08009190",
                "FUN_08009270": "call_function"
            },
            "code": "void call_function_with_param_08009190(void* PTR_PTR_DAT_0800919c, int parameter){\n  call_function(PTR_PTR_DAT_0800919c, parameter);\n  return;\n}",
            "called": [
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009190",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": true,
            "current_name": "call_function_with_param_08009190"
        },
        "FUN_08004b82": {
            "renaming": {
                "puVar2": "ptr",
                "param_1": "input",
                "FUN_08004b82": "process_input_08004b82",
                "cVar1": "current_char"
            },
            "code": "uint32_t process_input_08004b82(uint32_t **input)\n{\n  char current_char;\n  uint32_t *ptr;\n  \n  current_char = *(char *)((int)input + 0x3d);\n  ptr = input[0xb];\n  if ((*(uint16_t *)(input + 10) == 0) && (current_char == '!')) {\n    if ((ptr == (uint32_t *)0x4) || ((ptr == (uint32_t *)0x8 || (ptr == (uint32_t *)0xffff0000)))) {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      **input = **input | 0x200;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      if (*(char *)((int)input + 0x3e) == '@') {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08004b80();\n      }\n      else {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08004a1e();\n      }\n    }\n    else {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      input[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)input + 0x3e) = 0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      do_nothing_08004a1e();\n    }\n  }\n  else if ((current_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (current_char == '\"')))) {\n    if (*(uint16_t *)((int)input + 0x2a) == 0) {\n      (*input)[1] = (*input)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input + 0x3e) == '@') {\n      if (input[0x14] == (uint32_t *)0x0) {\n        if (input[0x13] == (uint32_t *)0x1) {\n          (*input)[4] = (uint32_t)input[0x12] & 0xff;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n        }\n        else {\n          (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n        }\n      }\n      else if (input[0x14] == (uint32_t *)0x1) {\n        (*input)[4] = (uint32_t)input[0x12] & 0xff;\n        input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n      }\n      else if (input[0x14] == (uint32_t *)0x2) {\n        if (*(char *)((int)input + 0x3d) == '\"') {\n          **input = **input | 0x100;\n        }\n        else if (*(char *)((int)input + 0x3d) == '!') {\n          ptr = input[9];\n          input[9] = (uint32_t *)((int)ptr + 1);\n          (*input)[4] = (uint32_t)*(uint8_t *)ptr;\n          *(uint16_t *)((int)input + 0x2a) = *(uint16_t *)((int)input + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptr = input[9];\n      input[9] = (uint32_t *)((int)ptr + 1);\n      (*input)[4] = (uint32_t)*(uint8_t *)ptr;\n      *(uint16_t *)((int)input + 0x2a) = *(uint16_t *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b82",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "process_input_08004b82"
        },
        "FUN_0800997e": {
            "renaming": {
                "iVar1": "last_occurrence_index",
                "iVar2": "last_occurrence_index",
                "param_1": "start_index",
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "param_2": "end_index"
            },
            "code": "int find_last_occurrence_0800997e(int start_index, int end_index, undefined4 param_3, undefined4 param_4) {\n  int last_occurrence_index;\n  if (end_index != 0) {\n    last_occurrence_index = 0;\n    while (last_occurrence_index = FUN_08009938(start_index, end_index, param_3, start_index, param_4), last_occurrence_index != 0) {\n      start_index = last_occurrence_index + 1;\n      last_occurrence_index = last_occurrence_index;\n    }\n    return last_occurrence_index;\n  }\n  last_occurrence_index = FUN_08009938();\n  return last_occurrence_index;\n}",
            "called": [
                "FUN_08009938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800997e",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": true,
            "current_name": "find_last_occurrence_0800997e"
        },
        "FUN_08002dbc": {
            "renaming": {
                "FUN_08002ce0": "execute_function",
                "param_1": "param_value",
                "param_2": "param_flag",
                "FUN_08002dbc": "check_param_and_execute_08002dbc"
            },
            "code": "void check_param_and_execute_08002dbc(int param_value, int param_flag){\n  if (param_value != 1) {\n    return;\n  }\n  if (param_flag == 0xffff) {\n    execute_function(PTR_DAT_08002dd8);\n  }\n  return;\n}",
            "called": [
                "FUN_08002ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dbc",
            "calling": [],
            "imported": true,
            "current_name": "check_param_and_execute_08002dbc"
        },
        "FUN_08002e44": {
            "renaming": {
                "bVar1": "string_length",
                "iVar3": "cpp_index",
                "iVar4": "slash_index",
                "param_1": "output_buffer",
                "puVar5": "string",
                "param_2": "input_buffer",
                "param_3": "char1",
                "param_4": "char2",
                "FUN_08002e44": "generate_string_08002e44"
            },
            "code": "void generate_string_08002e44(int output_buffer, int input_buffer, char char1, char char2) {\n  int index1 = find_string(input_buffer, \"cpp\");\n  int index2 = find_character(input_buffer, '/');\n  if (index2 == 0) {\n    index2 = find_character(input_buffer, '\\');\n  }\n  if (index2 != 0) {\n    input_buffer = index2 + 1;\n  }\n  if (index1 == 0) {\n    char1 = get_character(input_buffer);\n    *(char *)(output_buffer + 196) = char1 + 2;\n  }\n  else {\n    *(char *)(output_buffer + 196) = ((char)index1 - (char)input_buffer) + 2;\n  }\n  allocate_memory(*(int *)(output_buffer + 200));\n  byte string_length = *(byte *)(output_buffer + 196);\n  undefined *string = (undefined *)allocate_memory(string_length + 1);\n  *(undefined **)(output_buffer + 200) = string;\n  string[string_length] = 0;\n  *string = char1;\n  string[1] = char2;\n  copy_string(string + 2, input_buffer, string_length - 2);\n  return;\n}",
            "called": [
                "FUN_08009954",
                "FUN_080091a0",
                "FUN_080099a4",
                "FUN_08009190",
                "FUN_0800997e",
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e44",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "generate_string_08002e44"
        },
        "FUN_0800242c": {
            "renaming": {
                "param_1": "server_address",
                "FUN_08007648": "send_request",
                "param_2": "timeout_ms",
                "PTR_LAB_08002444_1_08002440": "buffer_size",
                "param_3": "port_number",
                "param_4": "data_buffer",
                "FUN_0800242c": "send_data_to_server_0800242c"
            },
            "code": "void send_data_to_server_0800242c(unsigned int server_address, unsigned int timeout_ms, unsigned int port_number, const char* data_buffer, unsigned int PTR_LAB_08002444_1_08002440)\n{\n  send_request(server_address, timeout_ms, port_number, data_buffer, PTR_LAB_08002444_1_08002440);\n  return;\n}",
            "called": [
                "FUN_08007648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800242c",
            "calling": [
                "FUN_080025ac"
            ],
            "imported": true,
            "current_name": "send_data_to_server_0800242c"
        },
        "FUN_080058d2": {
            "renaming": {
                "iVar2": "start_time",
                "iVar3": "current_time",
                "param_1": "parameters",
                "param_2": "param_count",
                "puVar1": "data_ptr",
                "FUN_080058d2": "process_parameters_080058d2",
                "uVar4": "status"
            },
            "code": "uint32_t process_parameters_080058d2(uint32_t *parameters, uint32_t param_count) {\n  uint32_t *data_ptr;\n  int32_t start_time;\n  int32_t current_time;\n  uint32_t status;\n\n  if ((*parameters & 2) != 0) {\n    data_ptr[1] = data_ptr[1] & 0xffffff0f | parameters[2];\n  }\n\n  if ((*parameters & 1) != 0) {\n    uint32_t mode = parameters[1];\n    if (mode == 1) {\n      if ((*data_ptr & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((mode != 2) && ((*data_ptr & 2) == 0)) {\n      return 1;\n    }\n    data_ptr[1] = mode | data_ptr[1] & 0xfffffffc;\n    start_time = get_current_time();\n    if (mode == 1) {\n      while ((data_ptr[1] & 0xc) != 4) {\n        current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (mode == 2) {\n      while ((data_ptr[1] & 0xc) != 8) {\n        current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((data_ptr[1] & 0xc) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n\n  data_ptr = data_ptr;\n  if ((param_count < (*data_ptr & 7)) &&\n     (*data_ptr = *data_ptr & 0xfffffff8 | param_count, param_count != (*data_ptr & 7))) {\n    return 1;\n  }\n\n  if ((*parameters & 4) != 0) {\n    data_ptr[1] = data_ptr[1] & 0xfffff8ff | parameters[3];\n  }\n\n  if ((*parameters & 8) != 0) {\n    data_ptr[1] = data_ptr[1] & 0xffffc7ff | parameters[4] << 3;\n  }\n\n  status = process_data();\n  *(uint32_t *)PTR_RESULT = status >> PTR_SHIFT[(data_ptr[1] << 0x18) >> 0x1c];\n  FUN_080036d8(0xf);\n  return 0;\n}",
            "called": [
                "FUN_080036d8",
                "FUN_08003760",
                "FUN_08005840"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058d2",
            "calling": [
                "FUN_080058ac"
            ],
            "imported": true,
            "current_name": "process_parameters_080058d2"
        },
        "FUN_08002c00": {
            "renaming": {
                "FUN_08002b68": "initialize_environment",
                "FUN_08002c00": "execute_program_08002c00"
            },
            "code": "void execute_program_08002c00(void)\n{\n  initialize_environment();\n  return;\n}",
            "called": [
                "FUN_08002b68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c00",
            "calling": [
                "FUN_08002c14"
            ],
            "imported": true,
            "current_name": "execute_program_08002c00"
        },
        "FUN_08003f30": {
            "renaming": {
                "uVar1": "shift",
                "param_1": "position",
                "param_2": "value",
                "param_3": "mask",
                "uVar2": "bits_remaining",
                "FUN_08003f30": "set_bits_at_position_08003f30"
            },
            "code": "void set_bits_at_position_08003f30(uint position, uint value, uint mask) {\n  uint shift = (uint)(*(int *)(DAT_08003f8c + 0xc) << 0x15) >> 0x1d;\n  uint bits_remaining = 7 - shift;\n  if (bits_remaining > 3) {\n    bits_remaining = 4;\n  }\n  if (shift + 4 < 7) {\n    shift = 0;\n  }\n  else {\n    shift = shift - 3;\n  }\n  uint masked_value = (value & (1 << (bits_remaining & 0xff)) - 1U) << (shift & 0xff) |\n          (1 << (shift & 0xff)) - 1U & mask;\n  if ((int)position < 0) {\n    *(char *)(DAT_08003f90 + (position & 0xf)) = (char)(masked_value << 4);\n  }\n  else {\n    *(char *)(position + 0xe000e400) = (char)(masked_value << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f30",
            "calling": [
                "FUN_08007648",
                "FUN_080035b8",
                "FUN_080036d8",
                "FUN_080077b0",
                "FUN_0800863c",
                "FUN_08008694"
            ],
            "imported": true,
            "current_name": "set_bits_at_position_08003f30"
        },
        "FUN_08007f78": {
            "renaming": {
                "param_1": "value",
                "FUN_08007f78": "subtract_four_from_value_08007f78",
                "return": "result"
            },
            "code": "int subtract_four_from_value_08007f78(int value)\n{\n  int result = value - 4;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f78",
            "calling": [
                "FUN_08007fa0",
                "FUN_08008020",
                "FUN_08007ff0"
            ],
            "imported": true,
            "current_name": "subtract_four_from_value_08007f78"
        },
        "FUN_08006b28": {
            "renaming": {
                "param_1": "number",
                "param_2": "index",
                "PTR_": "ptr_",
                "DAT_": "dat_",
                "FUN_08006b28": "get_bit_at_index_08006b28"
            },
            "code": "uint get_bit_at_index_08006b28(uint number, int index) {\n    uint shifted_index = (number << 0x18) >> 0x1c;\n    uint PTR_value = *(uint *)(index + shifted_index * 4);\n    uint masked_value = number & 0xf;\n    uint bit_value = PTR_value >> masked_value & 1;\n    return bit_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b28",
            "calling": [
                "FUN_08008a6c",
                "FUN_080088e0",
                "FUN_08008990",
                "FUN_08008a24"
            ],
            "imported": true,
            "current_name": "get_bit_at_index_08006b28"
        },
        "FUN_080085dc": {
            "renaming": {
                "FUN_080085dc": "is_valid_input_080085dc",
                "PTR_DAT_080085fc": "PTR_DAT",
                "uVar1": "uVar",
                "byte": "byte_val",
                "param_1": "input_index"
            },
            "code": "bool is_valid_input_080085dc(int input_index) {\n    uint32_t ptr_data = PTR_DAT_080085fc_080085fc + (uint32_t)*(uint8_t *)(input_index + 0x44) * 4;\n    uint32_t uVar = FUN_08006b1c(*(uint32_t *)ptr_data);\n    return (uVar & 0x21) == 0x21;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085dc",
            "calling": [],
            "imported": true,
            "current_name": "is_valid_input_080085dc"
        },
        "FUN_08006b1c": {
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "ptr_param",
                "* (byte *) (param_1 + 0x3a)": "byte1",
                "* (byte *) (param_1 + 0x39)": "byte2"
            },
            "code": "byte combine_bytes_08006b1c(int ptr_param){\n    byte byte1 = *(byte *)(ptr_param + 0x3a);\n    byte byte2 = *(byte *)(ptr_param + 0x39);\n    return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b1c",
            "calling": [
                "FUN_080085dc",
                "FUN_080085b8"
            ],
            "imported": true,
            "current_name": "combine_bytes_08006b1c"
        },
        "FUN_08008ed6": {
            "renaming": {
                "FUN_08008ed6": "process_data_08008ed6",
                "param_1": "function_ptr",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "data3"
            },
            "code": "void process_data_08008ed6(undefined4 *function_ptr, uint data1, uint data2, undefined4 data3)\n{\n  if (data2 != 0) {\n    FUN_08008e7c(function_ptr, data1, data2 & 0xff);\n    return;\n  }\n  (**(code **)*function_ptr)(function_ptr, data1 & 0xff, 0, *(code **)*function_ptr, data3);\n  return;\n}",
            "called": [
                "FUN_08008e7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ed6",
            "calling": [
                "FUN_08008eec"
            ],
            "imported": true,
            "current_name": "process_data_08008ed6"
        },
        "FUN_0800a130": {
            "renaming": {
                "FUN_0800a130": "checkReturnValueAndUpdateResult_0800a130",
                "iVar2": "returnValue",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "resultPointer"
            },
            "code": "void checkReturnValueAndUpdateResult_0800a130(int* result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *resultPointer = PTR_DAT_0800a150;\n  *(undefined4 *)resultPointer = 0;\n  int returnValue = FUN_08008854(arg1, arg2, arg3, arg3, arg3);\n  if ((returnValue == -1) && (*(int *)resultPointer != 0))\n  {\n    *result = *(int *)resultPointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08008854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a130",
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "imported": true,
            "current_name": "checkReturnValueAndUpdateResult_0800a130"
        },
        "FUN_08008f3c": {
            "renaming": {
                "FUN_08008f3c": "count_bits_set_08008f3c",
                "param_1": "number",
                "cVar1": "bit_count"
            },
            "code": "char count_bits_set_08008f3c(uint number) { \n  char bit_count = 0; \n  while (number != 1) { \n    bit_count++; \n    number = number >> 1; \n  } \n  return bit_count; \n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f3c",
            "calling": [
                "FUN_08009094"
            ],
            "imported": true,
            "current_name": "count_bits_set_08008f3c"
        },
        "FUN_08002ef2": {
            "renaming": {
                "FUN_08002ef2": "copy_data_to_buffer_08002ef2",
                "param_1": "source_address",
                "FUN_08003158": "copy_data",
                "param_2": "source_size",
                "param_3": "destination_buffer",
                "param_4": "destination_size"
            },
            "code": "void copy_data_to_buffer_08002ef2(int source_address, undefined4 source_size, undefined2 destination_buffer, undefined4 destination_size)\n{\n  copy_data(source_address + 0x40, source_size, destination_buffer, destination_size, destination_size);\n  return;\n}",
            "called": [
                "FUN_08003158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef2",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": true,
            "current_name": "copy_data_to_buffer_08002ef2"
        },
        "FUN_08007332": {
            "renaming": {
                "FUN_08007332": "find_value_by_key_08007332",
                "param_1": "key",
                "*param_2": "*data",
                "param_2": "data"
            },
            "code": "int find_value_by_key_08007332(int key, char *data)\n{\n  while( true ) {\n    if (*(int *)(data + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(data + 4) == key) break;\n    data = data + 0xc;\n  }\n  return (int)*data;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007332",
            "calling": [
                "FUN_08007332",
                "FUN_0800734a"
            ],
            "imported": true,
            "current_name": "find_value_by_key_08007332"
        },
        "FUN_08006128": {
            "renaming": {
                "FUN_08006128": "process_request_08006128",
                "param_1": "request_data",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)request_data + 0x3d)",
                "FUN_08005cec": "handle_request_type_0",
                "FUN_080060c4": "handle_request_type_4",
                "param_2": "request_type",
                "param_3": "request_type",
                "*(char *)(param_1 + 0xf)": "*(char *)(request_data + 0xf)",
                "FUN_08005dac": "handle_request_type_c",
                "FUN_08005d48": "handle_request_type_8"
            },
            "code": "int process_request_08006128(int *request_data, int request_type, int request_size)\n{\n  if (*(char *)(request_data + 0xf) != '\\x01') {\n    *(char *)(request_data + 0xf) = 1;\n    *(char *)((int)request_data + 0x3d) = 2;\n    switch(request_type) {\n    case 0:\n      handle_request_type_0(*request_data);\n      break;\n    case 4:\n      handle_request_type_4(*request_data);\n      break;\n    case 8:\n      handle_request_type_8(*request_data);\n      break;\n    case 0xc:\n      handle_request_type_c(*request_data);\n    }\n    *(char *)((int)request_data + 0x3d) = 1;\n    *(char *)(request_data + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08005cec",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005dac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006128",
            "calling": [
                "FUN_08007648"
            ],
            "imported": true,
            "current_name": "process_request_08006128"
        },
        "FUN_08003658": {
            "renaming": {
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "FUN_08003658": "copy_and_initialize_memory_08003658",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_and_initialize_memory_08003658(void)\n{\n  int index;\n  undefined4 *dest_ptr;\n  code *jump_table;\n  for (index = 0; PTR_DAT_08003690 + index < PTR_DAT_08003694; index += 4) {\n    *(undefined4 *)(PTR_DAT_08003690 + index) = *(undefined4 *)(DAT_0800368c + index);\n  }\n  for (dest_ptr = (undefined4 *)PTR_DAT_08003698; dest_ptr < PTR_DAT_0800369c; dest_ptr++) {\n    *dest_ptr = 0;\n  }\n  execute_function_at_address(0x080073ec);\n  execute_function_at_address(0x08009148);\n  jump_table = (code *)0x800368a;\n  execute_function_at_address(0x08008f1c);\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08009148",
                "FUN_080073ec",
                "FUN_08008f1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003658",
            "calling": [],
            "imported": true,
            "current_name": "copy_and_initialize_memory_08003658"
        },
        "FUN_08009a80": {
            "renaming": {
                "iVar3": "ptr",
                "uVar1": "value",
                "param_1": "result",
                "FUN_08009a80": "process_data_08009a80",
                "PTR_PTR_DAT_08009b4c": "PTR_1",
                "PTR_DAT_08009b54": "PTR_3",
                "param_2": "data",
                "PTR_DAT_08009b58": "PTR_4",
                "uVar2": "flags",
                "PTR_DAT_08009b50": "PTR_2"
            },
            "code": "uint process_data_08009a80(undefined4 *result,undefined4 *data)\n{\n  uint value;\n  ushort flags;\n  int ptr;\n  ptr = *(int *)PTR_PTR_DAT_08009b4c;\n  if ((ptr != 0) && (*(int *)(ptr + 0x18) == 0)) {\n    cleanup(ptr);\n  }\n  if (data == (undefined4 *)PTR_DAT_08009b50) {\n    data = *(undefined4 **)(ptr + 4);\n  }\n  else if (data == (undefined4 *)PTR_DAT_08009b54) {\n    data = *(undefined4 **)(ptr + 8);\n  }\n  else if (data == (undefined4 *)PTR_DAT_08009b58) {\n    data = *(undefined4 **)(ptr + 0xc);\n  }\n  flags = *(ushort *)(data + 3);\n  value = (uint)flags;\n  if (-1 < (int)(value << 0x1c)) {\n    if (-1 < (int)(value << 0x1b)) {\n      *result = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(value << 0x1d) < 0) {\n      if ((undefined4 *)data[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)data[0xd] != data + 0x11) {\n          handle_error(result);\n        }\n        data[0xd] = 0;\n      }\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xffdb;\n      data[1] = 0;\n      *data = data[4];\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 8;\n  }\n  if ((data[4] == 0) && ((*(ushort *)(data + 3) & 0x280) != 0x200)) {\n    handle_error(result,data);\n  }\n  flags = *(ushort *)(data + 3);\n  value = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      value = data[5];\n    }\n    data[2] = value;\n  }\n  else {\n    data[2] = 0;\n    data[6] = -data[5];\n  }\n  if (data[4] == 0) {\n    flags = *(ushort *)(data + 3);\n    value = (int)(short)flags & 0x80;\n    if (value != 0) {\n      *(ushort *)(data + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    value = 0;\n  }\n  return value;\n}\n",
            "called": [
                "FUN_080091d8",
                "FUN_08009d50",
                "FUN_08009eac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a80",
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "imported": true,
            "current_name": "process_data_08009a80"
        },
        "FUN_08004a74": {
            "renaming": {
                "FUN_08004a74": "do_nothing_08004a74"
            },
            "code": "\nvoid do_nothing_08004a74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a74",
            "calling": [
                "FUN_08005084",
                "FUN_08004a76"
            ],
            "imported": true,
            "current_name": "do_nothing_08004a74"
        },
        "FUN_080062f4": {
            "renaming": {
                "param_1": "data",
                "FUN_080062f4": "clear_bits_080062f4",
                "param_2": "bit_mask",
                "puVar1": "data_ptr"
            },
            "code": "uint32_t clear_bits_080062f4(uint32_t **data, uint32_t bit_mask) {\n  uint32_t *data_ptr = *data;\n  switch(bit_mask) {\n    case 0x0:\n      data_ptr[3] &= 0xfffffffd;\n      break;\n    case 0x4:\n      data_ptr[3] &= 0xfffffffb;\n      break;\n    case 0x8:\n      data_ptr[3] &= 0xfffffff7;\n      break;\n    case 0xc:\n      data_ptr[3] &= 0xffffffef;\n      break;\n  }\n  clear_bits_080062f4_helper(data_ptr, bit_mask);\n  if (((data_ptr == PTR_DAT_0800638c) && ((data_ptr[8] & 0x1111) == 0)) && ((data_ptr[8] & 0x444) == 0)) {\n    data_ptr[0x11] &= 0xffff7fff;\n  }\n  if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\n    *data_ptr &= 0xfffffffe;\n  }\n  return 0;\n}\n",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080062f4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": true,
            "current_name": "clear_bits_080062f4"
        },
        "FUN_080073e8": {
            "renaming": {
                "FUN_080073e8": "wait_forever_080073e8"
            },
            "code": "void wait_forever_080073e8(void)\n{\n  while(true) {\n    // Do nothing. Just wait forever.\n  }\n}",
            "called": [
                "FUN_080073e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073e8",
            "calling": [
                "FUN_080035b8",
                "FUN_080073e8"
            ],
            "imported": true,
            "current_name": "wait_forever_080073e8"
        },
        "FUN_08004a76": {
            "renaming": {
                "puVar2": "output_array",
                "param_1": "input_array",
                "cVar1": "last_char",
                "FUN_08004a76": "process_input_08004a76"
            },
            "code": "int process_input_08004a76(int *input_array)\n{\n  char last_char = *(char *)((int)input_array + 0x3d);\n  if (*(short *)((int)input_array + 0x2a) != 0) {\n    undefined *output_array = (undefined *)input_array[9];\n    input_array[9] = (int)(output_array + 1);\n    *output_array = (char)*(undefined4 *)(*input_array + 0x10);\n    *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n    if ((*(short *)((int)input_array + 0x2a) == 0) && (last_char == '*')) {\n      *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n      input_array[0xc] = 0x22;\n      *(undefined *)((int)input_array + 0x3d) = 0x28;\n      do_nothing_08004a74();\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a76",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "process_input_08004a76"
        },
        "FUN_0800877c": {
            "renaming": {
                "FUN_0800877c": "do_nothing_0800877c"
            },
            "code": "\nvoid do_nothing_0800877c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800877c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": true,
            "current_name": "do_nothing_0800877c"
        },
        "FUN_0800267c": {
            "renaming": {
                "iVar1": "calculated_value",
                "param_1": "input_array",
                "param_2": "input_value",
                "first_calculation": "first_calculation",
                "second_calculation": "second_calculation",
                "FUN_0800267c": "calculate_value_based_on_input_0800267c"
            },
            "code": "void calculate_value_based_on_input_0800267c(byte *input_array, int input_value) {\n  int calculated_value;\n  if (*input_array < 0xc) {\n    int first_calculation = (0x88 - (char)input_array[1]) * 4;\n    int second_calculation = (600 - (char)input_array[2]) * 4;\n    if ((first_calculation - input_value == 0 || first_calculation < input_value) && (input_value == second_calculation || input_value + (600 - (char)input_array[2]) * -4 < 0 != SBORROW4(input_value, second_calculation))) {\n      calculated_value = input_value;\n    }\n    *(int *)(PTR_DAT_080026ac + (uint)*input_array * 8 + 4) = calculated_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800267c",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": true,
            "current_name": "calculate_value_based_on_input_0800267c"
        },
        "FUN_080047f4": {
            "renaming": {
                "local_c": "count",
                "uVar1": "status",
                "puVar2": "ptr",
                "param_1": "data",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_080047f4": "process_data_080047f4"
            },
            "code": "uint process_data_080047f4(uint **data, uint *param_2, uint *param_3, uint16_t param_4)\n{\n  uint status;\n  uint *ptr;\n  int count = 0;\n  \n  if (*((char *)(*data + 0x3d)) == ' ')\n  {\n    count = (uint)((ulonglong)DAT_080048c0 * (ulonglong)(*(uint *)PTR_DAT_080048bc >> 3) >> 0x28) * 0x19;\n    do {\n      if (count == 0)\n      {\n        (*data)[0xc] = (uint *)0x0;\n        *((char *)(*data) + 0x3d) = 0x20;\n        *((char *)(*data + 0xf)) = 0;\n        return 3;\n      }\n      ptr = *data;\n      count--;\n    } while ((ptr[6] & 2) != 0);\n    if (*((char *)(*data + 0xf)) == '\\x01')\n    {\n      status = 2;\n    }\n    else\n    {\n      *((char *)(*data + 0xf)) = 1;\n      if ((*ptr & 1) == 0)\n      {\n        *ptr = *ptr | 1;\n      }\n      **data = **data & 0xfffff7ff;\n      *((char *)(*data) + 0x3d) = 0x22;\n      *((char *)(*data) + 0x3e) = 0x10;\n      status = 0;\n      (*data)[0x10] = (uint *)0x0;\n      (*data)[9] = param_3;\n      *((uint16_t *)(*data + 0x2a)) = param_4;\n      (*data)[0xb] = DAT_080048c4;\n      *((uint16_t *)(*data + 0x14)) = *((uint16_t *)(*data + 0x2a));\n      (*data)[0x11] = param_2;\n      **data = **data | 0x400;\n      **data = **data | 0x100;\n      *((char *)(*data + 0xf)) = 0;\n      (*data)[1] = (*data)[1] | 0x700;\n    }\n  }\n  else\n  {\n    status = 2;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08007f0e"
            ],
            "imported": true,
            "current_name": "process_data_080047f4"
        },
        "FUN_0800376c": {
            "renaming": {
                "iVar1": "time_start",
                "iVar3": "time_elapsed",
                "param_1": "instruction",
                "puVar5": "current_instruction",
                "local_1c": "iterations",
                "param_2": "param",
                "uVar2": "current_flags",
                "FUN_0800376c": "calculate_result_0800376c",
                "uVar4": "result",
                "uVar6": "current_operand5"
            },
            "code": "int calculate_result_0800376c(uint **instruction, uint param) {\n  int time_start = get_start_time();\n  uint *current_instruction = *instruction;\n  uint current_flags = current_instruction[2];\n  uint current_operand1 = current_instruction[1];\n  uint current_operand2 = current_instruction[0xb];\n  uint current_operand3 = current_instruction[3];\n  uint current_operand4 = current_instruction[4];\n  uint current_operand5 = *(uint *)PTR_DAT_080038c8;\n  uint divisor = calculate_divisor(2);\n  int result = 0;\n  uint time_elapsed = 0;\n  uint max_time = (param == 0xffffffff) ? 0xffffffff : (param + time_start);\n  if ((current_flags & 0x100) == 0) {\n    if ((current_operand1 & 0x100) == 0 && (current_operand2 & 0xf00000) == 0) {\n      while ((current_instruction[0] & 2) == 0) {\n        if (max_time != 0xffffffff && (time_elapsed = get_elapsed_time(time_start)) > param) {\n          set_flag(instruction, 4);\n          instruction[10] = (uint *)((uint)instruction[10] & 0xfffffeff);\n          return 3;\n        }\n      }\n      set_flag(instruction, 4);\n      instruction[10] = (uint *)((uint)instruction[10] | 1);\n      result = 0;\n    } else {\n      if ((current_operand4 & DAT_080038cc) == 0 && (current_operand3 & (DAT_080038cc + 0xdc000000)) == 0) {\n        if ((current_operand4 & DAT_080038d0) == 0) {\n          if ((current_operand3 & DAT_080038d4) == 0) {\n            result = 20;\n          } else {\n            result = 41;\n          }\n        } else {\n          result = 41;\n        }\n      } else if ((current_operand4 & DAT_080038d0) == 0 && (current_operand3 & (DAT_080038d0 + 0xee000000)) == 0) {\n        result = 84;\n      } else if ((current_operand4 & DAT_080038d8) == 0) {\n        if ((current_operand3 & DAT_080038d8) == 0) {\n          result = 84;\n        } else {\n          result = 252;\n        }\n      } else {\n        result = 252;\n      }\n      uint iterations = ((current_operand5 / divisor) * result);\n      for (uint i = 0; i <= iterations && iterations - i != 0; i++) {\n        if (max_time != 0xffffffff && (time_elapsed = get_elapsed_time(time_start)) > param) {\n          set_flag(instruction, 4);\n          instruction[10] = (uint *)((uint)instruction[10] & 0xfffffeff);\n          return 3;\n        }\n      }\n      set_flag(instruction, 0xffffffed);\n      instruction[10] = (uint *)((uint)instruction[10] | 0x200);\n      if ((current_flags & 0xe0000) == 0xe0000) {\n        if (instruction[3] == (uint *)0x0) {\n          instruction[10] = (uint *)((uint)instruction[10] & 0xfffffeff);\n          if ((instruction[10] & 0x1000) == 0) {\n            instruction[10] = (uint *)((uint)instruction[10] | 1);\n            result = 0;\n          } else {\n            result = 0;\n          }\n        } else {\n          result = 0;\n        }\n      } else {\n        result = 1;\n      }\n    }\n  } else {\n    set_flag(instruction, 0x20);\n    instruction[10] = (uint *)((uint)instruction[10] | 0x20);\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_08005bb8",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "calculate_result_0800376c"
        },
        "FUN_08003e20": {
            "renaming": {
                "iVar1": "result",
                "iVar3": "start_time",
                "iVar4": "current_time",
                "param_1": "data",
                "uVar2": "divisor",
                "uVar5": "end_time",
                "FUN_08003e20": "process_data_08003e20",
                "local_14": "status"
            },
            "code": "int process_data_08003e20(int *data)\n{\n  int result = 0;\n  uint divisor = 0;\n  int start_time = 0;\n  int current_time = 0;\n  int end_time = 0;\n  int status = 0;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  result = initialize_data();\n  if (result == 0) {\n    data[10] = (data[10] & 0xffffeefdU) | 2;\n    divisor = *(uint *)PTR_DAT_08003f08;\n    divisor = FUN_08005bb8(2);\n    end_time = divisor / divisor << 1;\n    while (end_time != 0) {\n      end_time--;\n    }\n    update_data(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    start_time = get_time();\n    while ((*(uint *)(*data + 8) & 8) != 0) {\n      current_time = get_time();\n      if (10 < (uint)(current_time - start_time)) {\n        data[10] = (data[10] & 0xffffffedU) | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 4;\n    start_time = get_time();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      current_time = get_time();\n      if (10 < (uint)(current_time - start_time)) {\n        data[10] = (data[10] & 0xffffffedU) | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = (data[10] & 0xfffffffcU) | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return result;\n}",
            "called": [
                "FUN_08005bb8",
                "FUN_08003b8c",
                "FUN_08003760",
                "FUN_08003a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e20",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "process_data_08003e20"
        },
        "FUN_08005a48": {
            "renaming": {
                "FUN_08005a1c": "get_initial_value",
                "uVar1": "shifted_value",
                "DAT_08005a60": "data_pointer",
                "PTR_DAT_08005a64": "shift_array",
                "FUN_08005a48": "calculate_shifted_value_08005a48"
            },
            "code": "uint calculate_shifted_value_08005a48(void)\n{\n  uint shifted_value;\n  shifted_value = get_initial_value();\n  uint index = (*(int *)(DAT_08005a60 + 4) << 0x12) >> 0x1d;\n  uint shift_amount = PTR_DAT_08005a64[index];\n  return shifted_value >> shift_amount;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a48",
            "calling": [
                "FUN_08005bb8",
                "FUN_08006538",
                "FUN_080075dc"
            ],
            "imported": true,
            "current_name": "calculate_shifted_value_08005a48"
        },
        "FUN_080033a8": {
            "renaming": {
                "bVar1": "byte1",
                "iVar2": "i",
                "param_1": "dest",
                "param_2": "num_bytes",
                "param_3": "src",
                "uVar3": "j",
                "FUN_080033a8": "copy_and_shift_high_bit_080033a8"
            },
            "code": "void copy_and_shift_high_bit_080033a8(uint8_t *dest, const uint8_t *src, uint32_t num_bytes) {\n  uint32_t i = 0;\n  for (uint32_t j = 0; j < num_bytes; j += 2) {\n    uint8_t byte1 = *(src + j);\n    uint8_t byte2 = *(src + j + 1);\n    *(dest + i) = byte1;\n    *(dest + i + 1) = (byte2 << 7) | byte1;\n    i += 2;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033a8",
            "calling": [
                "FUN_080033cc"
            ],
            "imported": true,
            "current_name": "copy_and_shift_high_bit_080033a8"
        },
        "FUN_08002c14": {
            "renaming": {
                "FUN_08002c00": "call_another_function",
                "FUN_08002c14": "call_function_and_return_08002c14"
            },
            "code": "void call_function_and_return_08002c14(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_08002c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c14",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": true,
            "current_name": "call_function_and_return_08002c14"
        },
        "FUN_08008d18": {
            "renaming": {
                "uVar1": "value_to_set",
                "param_1": "index",
                "param_2": "value",
                "FUN_08008d18": "set_value_at_index_08008d18"
            },
            "code": "void set_value_at_index_08008d18(int index, uint value)\n{\n  undefined value_to_set;\n  if (value < 0x3c) {\n    value_to_set = PTR_DAT_08008d2c[value];\n  }\n  else {\n    value_to_set = 0xff;\n  }\n  *(undefined *)(index + 300) = value_to_set;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d18",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": true,
            "current_name": "set_value_at_index_08008d18"
        },
        "FUN_08009084": {
            "renaming": {
                "get_index": "get_index",
                "iVar1": "function_pointer",
                "param_1": "param",
                "initialize": "initialize",
                "PTR_DAT_080090b0": "PTR_DAT_080090b0",
                "FUN_08009084": "execute_function_08009084"
            },
            "code": "void execute_function_08009084(int param)\n{\n  int function_pointer = *(int *)(param + 8);\n  \n  if (function_pointer != 0) \n  {\n    (**(code **)(param + 0xc))();\n    return;\n  }\n  \n  initialize();\n  \n  int index = get_index();\n  \n  if (*(int *)(PTR_DAT_080090b0 + index * 0x14 + 0xc) != 0) \n  {\n    execute_function_08009084();\n  }\n  return;\n}",
            "called": [
                "FUN_0800a18c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009084",
            "calling": [
                "FUN_08009094"
            ],
            "imported": true,
            "current_name": "execute_function_08009084"
        },
        "FUN_0800a020": {
            "renaming": {
                "FUN_0800a020": "calculate_value_and_update_0800a020",
                "iVar1": "value",
                "bVar3": "is_value_positive",
                "param_1": "address",
                "param_2": "offset",
                "uVar2": "updated_value"
            },
            "code": "void calculate_value_and_update_0800a020(uint32_t address, int32_t offset)\n{\n  int32_t value = calculate_value(address, *(int16_t *)(offset + 0xe));\n  bool is_value_positive = value >= 0;\n  uint32_t updated_value = is_value_positive ? *(uint32_t *)(offset + 0x54) + value : *(uint16_t *)(offset + 0xc) & 0xffffefff;\n  if (is_value_positive) {\n    *(uint32_t *)(offset + 0x54) = updated_value;\n  }\n  if (!is_value_positive) {\n    *(int16_t *)(offset + 0xc) = (int16_t)updated_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800a168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a020",
            "calling": [],
            "imported": true,
            "current_name": "calculate_value_and_update_0800a020"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_value_08005840",
                "uVar1": "value",
                "uStack_14": "stack_3",
                "local_1c": "local_value",
                "uStack_10": "stack_2",
                "uStack_c": "stack_1",
                "uVar2": "flags",
                "abStack_18": "stack_array"
            },
            "code": "uint calculate_value_08005840(void)\n{\n  uint value;\n  uint flags;\n  undefined2 local_value;\n  byte stack_array[4];\n  undefined4 stack_3;\n  undefined4 stack_2;\n  undefined4 stack_1;\n  stack_1 = *(undefined4 *)(PTR_DAT_0800589c + 8);\n  stack_2 = *(undefined4 *)(PTR_DAT_0800589c + 4);\n  stack_3 = *(undefined4 *)PTR_DAT_0800589c;\n  local_value = *(undefined2 *)(PTR_DAT_0800589c + 0x10);\n  flags = *(uint *)(DAT_080058a0 + 4);\n  value = DAT_080058a8;\n  if ((flags & 0xc) == 8) {\n    if ((flags & 0x10000) == 0) {\n      value = DAT_080058a4 * (uint)stack_array[(flags << 10) >> 0x1c];\n    }\n    else {\n      value = (DAT_080058a8 * stack_array[(flags << 10) >> 0x1c]) /\n              (uint)*(byte *)((int)&local_value - ((*(int *)(DAT_080058a0 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "FUN_080058d2"
            ],
            "imported": true,
            "current_name": "calculate_value_08005840"
        },
        "FUN_08007f7c": {
            "renaming": {
                "FUN_08007f7c": "update_data_08007f7c",
                "param_1": "data_address",
                "param_2": "new_data_value",
                "PTR_": "",
                "DAT_": "",
                "FUN_080049e0": "update_subdata",
                "data_ptr": "data_ptr"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ update_data_08007f7c(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_6DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f7c",
            "calling": [
                "FUN_08002968"
            ],
            "imported": true,
            "current_name": "update_data_08007f7c"
        },
        "FUN_08006d80": {
            "renaming": {
                "FUN_08006d80": "parse_data_08006d80",
                "param_1": "input",
                "local_1c": "unused",
                "local_2c": "unused",
                "local_3c": "unused",
                "local_28": "unused",
                "local_38": "output.data",
                "local_10": "unused",
                "local_20": "unused",
                "local_30": "unused",
                "local_40": "output.flags",
                "local_46": "output.result",
                "local_24": "unused",
                "local_34": "unused",
                "local_44": "output.length"
            },
            "code": "typedef struct {\n    int result;\n    uint32_t length;\n    uint32_t flags;\n    char* data;\n} ParsedData;\n\nParsedData parse_data_08006d80(uint32_t input) {\n    ParsedData output = {0};\n    char* ptr = (char*)&input;\n    output.result = FUN_08007320(input, PTR_DAT_08006e60);\n    if (output.result != 0) {\n        uint32_t temp = 0;\n        output.flags = 1;\n        output.length = 2;\n        output.data = (char*)malloc(0xe0000);\n        *PTR_DAT_08006e64 = *ptr;\n        if (FUN_08003bd8(&output.result) == 0) {\n            output.length = FUN_08006c60(input);\n            if (output.length < 0x12) {\n                if (FUN_080038e4(&output.result, &output.length) == 0) {\n                    if (FUN_08003e20(&output.result) == 0) {\n                        if (FUN_08003aa0(&output.result) == 0) {\n                            if (FUN_0800376c(&output.result, 10) == 0) {\n                                uint32_t flags = FUN_08003a1c(&output.result);\n                                if ((flags & 0x200) != 0) {\n                                    output.data = FUN_080038dc(&output.result);\n                                }\n                                if (FUN_08003de4(&output.result) != 0 || FUN_08003ce8(&output.result) != 0) {\n                                    output.result = 0;\n                                }\n                            }\n                            else {\n                                output.result = 0;\n                            }\n                        }\n                        else {\n                            output.result = 0;\n                        }\n                    }\n                    else {\n                        output.result = 0;\n                    }\n                }\n                else {\n                    output.result = 0;\n                }\n            }\n            else {\n                output.result = 0;\n            }\n        }\n        else {\n            output.result = 0;\n        }\n    }\n    return output;\n}",
            "called": [
                "FUN_08003a1c",
                "FUN_08003e20",
                "FUN_0800376c",
                "FUN_08007320",
                "FUN_080038dc",
                "FUN_08003bd8",
                "FUN_080038e4",
                "FUN_080091c6",
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08003aa0",
                "FUN_08006c60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d80",
            "calling": [
                "FUN_08008880"
            ],
            "imported": true,
            "current_name": "parse_data_08006d80"
        },
        "FUN_08006c60": {
            "renaming": {
                "iVar1": "shifted_val",
                "FUN_08006c60": "get_shifted_value_08006c60",
                "param_1": "input_val",
                "param_2": "N/A",
                "param_3": "shift_amount",
                "param_4": "N/A",
                "uVar2": "masked_val"
            },
            "code": "uint get_shifted_value_08006c60(uint input_val, uint shift_amount) {\n  int shifted_val = FUN_08007376(input_val, PTR_DAT_08006c78, shift_amount, shift_amount, shift_amount);\n  uint masked_val = (uint)(shifted_val << 0xc) >> 0x1b;\n  if (masked_val > 0x10) {\n    masked_val = 0;\n  }\n  return masked_val;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c60",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "get_shifted_value_08006c60"
        },
        "FUN_08003306": {
            "renaming": {
                "param_1": "address",
                "FUN_08003306": "set_values_at_address_based_on_param_08003306",
                "param_2": "value_type",
                "param_3": "value1",
                "param_4": "value2"
            },
            "code": "void set_values_at_address_based_on_param_08003306(uint32_t address, uint32_t value_type, uint32_t value1, uint32_t value2) {\n  if (value_type == 0xd0) {\n    *(uint32_t *)(address + 0x58) = value1;\n    *(uint32_t *)(address + 0x28) = value2;\n    return;\n  }\n  if (value_type > 0xd0) {\n    if (value_type == 0xf4) {\n      *(uint32_t *)(address + 0x5c) = value1;\n      *(uint32_t *)(address + 0x2c) = value2;\n      return;\n    }\n    if (value_type == 0xf5) {\n      *(uint32_t *)(address + 0x60) = value1;\n      *(uint32_t *)(address + 0x30) = value2;\n      return;\n    }\n    if (value_type == 0xe0) {\n      *(uint32_t *)(address + 0x4c) = value1;\n      *(uint32_t *)(address + 0x1c) = value2;\n      return;\n    }\n    return;\n  }\n  if (value_type == 0x90) {\n    *(uint32_t *)(address + 0x50) = value1;\n    *(uint32_t *)(address + 0x20) = value2;\n    return;\n  }\n  if (value_type == 0xc0) {\n    *(uint32_t *)(address + 0x54) = value1;\n    *(uint32_t *)(address + 0x24) = value2;\n    return;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003306",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": true,
            "current_name": "set_values_at_address_based_on_param_08003306"
        },
        "FUN_08002578": {
            "renaming": {
                "FUN_08002578": "execute_main_function_08002578",
                "FUN_080076e0": "call_sub_function"
            },
            "code": "void execute_main_function_08002578(void)\n{\n  call_sub_function();\n  return;\n}",
            "called": [
                "FUN_080076e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002578",
            "calling": [
                "FUN_08002644"
            ],
            "imported": true,
            "current_name": "execute_main_function_08002578"
        },
        "FUN_08006932": {
            "renaming": {
                "FUN_08008730": "call_some_other_function",
                "param_1": "ptr_param1",
                "uint": "unsigned int",
                "FUN_08006932": "clear_bit_and_set_space_08006932",
                "int": "signed int",
                "undefined": "void",
                "*param_1": "*ptr_param1",
                "char": "signed char"
            },
            "code": "int clear_bit_and_set_space_08006932(int *ptr_param1)\n{\n  uint *ptr_temp = (uint *)(*ptr_param1 + 0xc);\n  *ptr_temp = *ptr_temp & 0xffffffbf;\n  char *ptr_temp2 = (char *)(ptr_param1 + 0x39);\n  *ptr_temp2 = ' ';\n  call_some_other_function();\n  return 0;\n}",
            "called": [
                "FUN_08008730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006932",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": true,
            "current_name": "clear_bit_and_set_space_08006932"
        },
        "FUN_080060c4": {
            "renaming": {
                "iVar3": "var3",
                "uVar1": "var1",
                "mask1": "mask1",
                "mask3": "mask3",
                "param_1": "base_address",
                "mask2": "mask2",
                "FUN_080060c4": "set_values_080060c4",
                "param_2": "values",
                "uVar2": "var2"
            },
            "code": "void set_values_080060c4(int base_address,int *values)\n{\n  uint mask1 = 0xffffffef;\n  uint mask2 = 0xfffff3ff;\n  uint mask3 = 0xffff8cff;\n  uint var1 = *(uint *)(base_address + 0x20) & mask1;\n  uint var2 = *(uint *)(base_address + 4);\n  int var3 = *values;\n  var1 = var1 & 0xffffffdf | values[2] << 4;\n  if (base_address == PTR_DAT_08006124) {\n    var1 = (var1 & 0xffffff7f | values[3] << 4) & 0xffffffbf;\n    var2 = var2 & mask2 | values[5] << 2 | values[6] << 2;\n  }\n  *(uint *)(base_address + 4) = var2;\n  *(uint *)(base_address + 0x18) = *(uint *)(base_address + 0x18) & mask3 | var3 << 8;\n  *(int *)(base_address + 0x38) = values[1];\n  *(uint *)(base_address + 0x20) = var1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060c4",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": true,
            "current_name": "set_values_080060c4"
        },
        "FUN_08009eac": {
            "renaming": {
                "iVar2": "temp1",
                "uVar1": "flag",
                "param_1": "data_address",
                "FUN_08009eac": "process_data_08009eac",
                "local_18": "temp2",
                "param_2": "data_array",
                "local_14": "temp2_pointer"
            },
            "code": "void process_data_08009eac(int data_address, int *data_array)\n{\n    ushort flag;\n    int temp1;\n    int temp2;\n    \n    if ((int)((uint)*(ushort *)(data_array + 3) << 0x1e) >= 0)\n    {\n        temp1 = data_address;\n        temp2 = data_array;\n        flag = get_flag(data_address, data_array, &temp1, &temp2);\n        if (check_value(data_address, temp1) != 0)\n        {\n            *(undefined **)(data_address + 0x28) = PTR_LAB_08009cd0_1_08009f28;\n            *data_array = check_value(data_address, temp1);\n            *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x80;\n            data_array[4] = check_value(data_address, temp1);\n            data_array[5] = temp1;\n            if ((temp2 != (int *)0x0) && (check_value(data_address, (int)*(short *)((int)data_array + 0xe)) != 0))\n            {\n                *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 1;\n            }\n            *(ushort *)(data_array + 3) = flag | *(ushort *)(data_array + 3);\n            return;\n        }\n        if ((int)(short)*(ushort *)(data_array + 3) << 0x16 >= 0)\n        {\n            *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 2;\n        }\n        return;\n    }\n    *data_array = data_array + 0x47;\n    data_array[4] = data_array + 0x47;\n    data_array[5] = 1;\n    return;\n}",
            "called": [
                "FUN_0800a110",
                "FUN_08009270",
                "FUN_08009e64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009eac",
            "calling": [
                "FUN_08009a80"
            ],
            "imported": true,
            "current_name": "process_data_08009eac"
        },
        "FUN_080072d8": {
            "renaming": {
                "param_1": "param1",
                "FUN_080042e2": "call_func",
                "FUN_080072d8": "check_if_param_is_zero_and_call_func_with_appropriate_value_080072d8",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "void check_if_param_is_zero_and_call_func_with_appropriate_value_080072d8(undefined4 param1, undefined2 param2, int param3, undefined4 param4){\n  if (param3 == 0) {\n    call_func(param1, param2, 0, param4, param4);\n    return;\n  }\n  call_func(param1, param2, 1, param4, param4);\n  return;\n}",
            "called": [
                "FUN_080042e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d8",
            "calling": [
                "FUN_08008a24"
            ],
            "imported": true,
            "current_name": "check_if_param_is_zero_and_call_func_with_appropriate_value_080072d8"
        },
        "FUN_080045c0": {
            "renaming": {
                "bVar1": "is_valid",
                "puVar3": "ptr_1",
                "param_1": "parameters",
                "FUN_080045c0": "calculate_parameters_080045c0",
                "uVar2": "random_value",
                "uVar5": "count_leading_zeroes_result",
                "uVar4": "product"
            },
            "code": "uint32_t calculate_parameters_080045c0(uint32_t **parameters)\\n\\\n{\\n\\\n  bool is_valid;\\n\\\n  uint32_t random_value, quotient, count_leading_zeroes_result;\\n\\\n  uint32_t *ptr_1, *ptr_2;\\n\\\n  uint32_t product, uVar4, uVar5;\\n\\\n  \\n\\\n  if (parameters == (uint32_t **)0x0) {\\n\\\n    return 1;\\n\\\n  }\\n\\\n  if (*(char *)((int)parameters + 0x3d) == \"\\0\") {\\n\\\n    *(undefined *)(parameters + 0xf) = 0;\\n\\\n    do_nothing_080045bc();\\n\\\n  }\\n\\\n  *(undefined *)((int)parameters + 0x3d) = 0x24;\\n\\\n  **parameters = **parameters & 0xfffffffe;\\n\\\n  random_value = FUN_08005a28();\\n\\\n  if (DAT_08004714 < parameters[1]) {\\n\\\n    is_valid = random_value <= DAT_08004720;\\n\\\n  }\\n\\\n  else if (DAT_08004718 < random_value) {\\n\\\n    is_valid = false;\\n\\\n  }\\n\\\n  else {\\n\\\n    is_valid = true;\\n\\\n  }\\n\\\n  if (is_valid) {\\n\\\n    return 1;\\n\\\n  }\\n\\\n  product = (uint32_t)((uint64_t)DAT_0800471c * (uint64_t)random_value >> 0x32);\\n\\\n  (*parameters)[1] = product;\\n\\\n  if (DAT_08004714 < parameters[1]) {\\n\\\n    product = (uint32_t)((uint64_t)DAT_08004724 * (uint64_t)(product * 300) >> 0x26);\\n\\\n  }\\n\\\n  (*parameters)[8] = product + 1;\\n\\\n  ptr_1 = parameters[1];\\n\\\n  if (DAT_08004714 < ptr_1) {\\n\\\n    if (parameters[2] == (uint32_t *)0x0) {\\n\\\n      quotient = (random_value - 1) / (uint32_t)((int)ptr_1 * 3) + 1 & 0xfff;\\n\\\n      count_leading_zeroes_result = count_leading_zeroes(quotient);\\n\\\n    }\\n\\\n    else {\\n\\\n      quotient = (random_value - 1) / (uint32_t)((int)ptr_1 * 0x19) + 1 & 0xfff;\\n\\\n      count_leading_zeroes_result = count_leading_zeroes(quotient);\\n\\\n    }\\n\\\n    if (count_leading_zeroes_result >> 5 == 0) {\\n\\\n      if (parameters[2] == (uint32_t *)0x0) {\\n\\\n        quotient = (random_value - 1) / (uint32_t)((int)ptr_1 * 3) + 1 & 0xfff | 0x8000;\\n\\\n      }\\n\\\n      else {\\n\\\n        quotient = (random_value - 1) / (uint32_t)((int)ptr_1 * 0x19) + 1 & 0xfff | 0xc000;\\n\\\n      }\\n\\\n    }\\n\\\n    else {\\n\\\n      quotient = 1;\\n\\\n    }\\n\\\n  }\\n\\\n  else {\\n\\\n    quotient = (random_value - 1) / (uint32_t)((int)ptr_1 << 1) + 1 & 0xfff;\\n\\\n    if (quotient < 4) {\\n\\\n      quotient = 4;\\n\\\n    }\\n\\\n  }\\n\\\n  (*parameters)[7] = quotient;\\n\\\n  **parameters = (uint32_t)parameters[7] | (uint32_t)parameters[8];\\n\\\n  (*parameters)[2] = (uint32_t)parameters[4] | (uint32_t)parameters[3];\\n\\\n  (*parameters)[3] = (uint32_t)parameters[5] | (uint32_t)parameters[6];\\n\\\n  **parameters = **parameters | 1;\\n\\\n  parameters[0x10] = (uint32_t *)0x0;\\n\\\n  *(undefined *)((int)parameters + 0x3d) = 0x20;\\n\\\n  parameters[0xc] = (uint32_t *)0x0;\\n\\\n  *(undefined *)((int)parameters + 0x3e) = 0;\\n\\\n  return 0;\\n\\\n}",
            "called": [
                "FUN_080045bc",
                "FUN_08005a28"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c0",
            "calling": [
                "FUN_080077b0"
            ],
            "imported": true,
            "current_name": "calculate_parameters_080045c0"
        },
        "FUN_08007e74": {
            "renaming": {
                "iVar1": "start_time",
                "iVar2": "input_value",
                "FUN_08003760": "get_current_time",
                "iVar4": "status",
                "iVar5": "input_address",
                "FUN_08005430": "get_input_value",
                "param_1": "input",
                "FUN_08004728": "get_input_value",
                "param_2": "param_2",
                "param_3": "param_3",
                "FUN_0800542a": "get_input_value",
                "FUN_08007e74": "check_input_validity_08007e74",
                "param_4": "param_4",
                "uVar3": "time_diff",
                "uVar6": "param_4"
            },
            "code": "int check_input_validity_08007e74(int input, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int start_time = get_current_time();\n  uint time_diff = 0;\n  int status = 2;\n  do {\n    int input_address = input + 4;\n    int input_value = get_input_value(input_address, param_2, param_3, param_4, start_time);\n    if (input_value == 0) {\n      status = 0;\n      while ((input_value = get_input_value(input_address), input_value != 0x20 && (status == 0))) {\n        int current_time = get_current_time();\n        time_diff = current_time - start_time;\n        if (time_diff < 0x65) {\n          input_value = get_input_value(input_address);\n          if (input_value != 0) {\n            status = 2;\n          }\n        }\n        else {\n          status = 1;\n        }\n      }\n    }\n    input_value = get_input_value(input_address);\n  } while ((input_value == 4) && (time_diff < 100));\n  return status;\n}",
            "called": [
                "FUN_0800542a",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_08004728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e74",
            "calling": [
                "FUN_08002a58"
            ],
            "imported": true,
            "current_name": "check_input_validity_08007e74"
        },
        "FUN_08002efe": {
            "renaming": {
                "param_1": "base_address",
                "FUN_0800319e": "some_function",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "FUN_08002efe": "calculate_new_address_and_call_function_08002efe"
            },
            "code": "void calculate_new_address_and_call_function_08002efe(int base_address, int parameter_2, short parameter_3, int parameter_4) {\n  // calculate new address by adding 0x40 to base_address\n  int new_address = base_address + 0x40;\n  // call function with new address and parameters\n  some_function(new_address, parameter_2, parameter_3, parameter_4, parameter_4);\n  return;\n}",
            "called": [
                "FUN_0800319e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efe",
            "calling": [
                "FUN_08000be8"
            ],
            "imported": true,
            "current_name": "calculate_new_address_and_call_function_08002efe"
        },
        "FUN_08002f84": {
            "renaming": {
                "param_1": "value_to_update",
                "param_2": "param_value",
                "PTR_DAT_08002f90": "PTR_DAT_08002f90",
                "param_3": "value_to_store",
                "FUN_08002f84": "update_value_if_param_is_255_08002f84"
            },
            "code": "void update_value_if_param_is_255_08002f84(int value_to_update, int param_value, int value_to_store){\n  if (param_value == 0xff) {\n    *(int *)PTR_DAT_08002f90 = value_to_store;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f84",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "update_value_if_param_is_255_08002f84"
        },
        "FUN_08002ddc": {
            "renaming": {
                "param_1": "buffer_start",
                "param_2": "buffer_size",
                "param_3": "data_size",
                "param_4": "data",
                "FUN_0800322c": "copy_data",
                "FUN_08002ddc": "copy_data_to_buffer_08002ddc"
            },
            "code": "void copy_data_to_buffer_08002ddc(int buffer_start, int buffer_size, int data_size, int data) {\n  copy_data(buffer_start + 0x40, buffer_size, data_size, data, data);\n  return;\n}",
            "called": [
                "FUN_0800322c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ddc",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": true,
            "current_name": "copy_data_to_buffer_08002ddc"
        },
        "FUN_08009094": {
            "renaming": {
                "iVar1": "index",
                "0xc": "offset",
                "PTR_DAT_080090b0": "arrayPtr",
                "0x14": "elementSize",
                "FUN_08009084": "performAction",
                "FUN_08009094": "checkForNonZeroValueInArray_08009094"
            },
            "code": "void checkForNonZeroValueInArray_08009094(void)\n{\n  int index = getIndex();\n  int* PTR_DAT_080090b0 = PTR_DAT_080090b0 + index * 0x14 + 0xc;\n  if (*PTR_DAT_080090b0 != 0) {\n    performAction();\n  }\n  return;\n}",
            "called": [
                "FUN_08008f3c",
                "FUN_08009084"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009094",
            "calling": [
                "FUN_080042f0"
            ],
            "imported": true,
            "current_name": "checkForNonZeroValueInArray_08009094"
        },
        "FUN_08009f2c": {
            "renaming": {
                "FUN_08009f2c": "find_char_in_string_08009f2c",
                "pcVar2": "next_char",
                "pcVar1": "current_char",
                "param_1": "str",
                "param_2": "target_char",
                "param_3": "str_length"
            },
            "code": "char* find_char_in_string_08009f2c(char* str, char target_char, int str_length) {\n  char* current_char = str;\n  while (current_char != str + str_length) {\n    if (*current_char == target_char) {\n      return current_char;\n    }\n    current_char++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f2c",
            "calling": [
                "FUN_0800937c",
                "FUN_08009698"
            ],
            "imported": true,
            "current_name": "find_char_in_string_08009f2c"
        },
        "FUN_0800a154": {
            "renaming": {
                "FUN_0800a154": "get_offset_0800a154",
                "iVar1": "offset",
                "param_1": "base_offset",
                "param_2": "data"
            },
            "code": "int get_offset_0800a154(int base_offset, int* data) {\n  int offset = *(data + base_offset) - 4;\n  if (*(data + base_offset) < 0) {\n    offset += *(data + offset + base_offset);\n  }\n  return offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a154",
            "calling": [
                "FUN_08009908"
            ],
            "imported": true,
            "current_name": "get_offset_0800a154"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "increment_and_assign_08002580",
                "bVar1": "current_value",
                "*param_1": "*output_byte"
            },
            "code": "void increment_and_assign_08002580(byte *output_byte) {\n  byte current_value = *PTR_DAT_080025a4;\n  if (current_value > 11) {\n    *output_byte = 0xff;\n    return;\n  }\n  *PTR_DAT_080025a4 = current_value + 1;\n  *output_byte = current_value;\n  *(undefined4 *)(PTR_DAT_080025a8 + (uint)current_value * 8 + 4) = 0x5dc;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_080004d4"
            ],
            "imported": true,
            "current_name": "increment_and_assign_08002580"
        },
        "FUN_08007f8e": {
            "renaming": {
                "FUN_08007f8e": "set_param_value_if_not_null_08007f8e",
                "param_1": "param_offset",
                "*(int *)(param_1 + 100)": "*(int *)(param_offset + 100)",
                "param_2": "param_value",
                "FUN_080049e0": "call_init_function"
            },
            "code": "void set_param_value_if_not_null_08007f8e(int param_offset, int param_value) {\n  if (param_offset != 0) {\n    if (param_value != 0) {\n      *(int *)(param_offset + 100) = param_value;\n      call_init_function(param_offset + 4);\n    }\n  }\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f8e",
            "calling": [
                "FUN_08002968"
            ],
            "imported": true,
            "current_name": "set_param_value_if_not_null_08007f8e"
        },
        "FUN_08006b3e": {
            "renaming": {
                "FUN_08006b3e": "set_bit_in_array_08006b3e",
                "uVar1": "array_index",
                "1 << (param_1 & 0xf)": "bit_mask",
                "param_1": "bit_index",
                "param_2": "array",
                "*(uint *)(param_2 + uVar1 * 4)": "array_ptr"
            },
            "code": "void set_bit_in_array_08006b3e(uint bit_index, int* array) {\n  uint array_index = (bit_index << 0x18) >> 0x1c;\n  uint* array_ptr = (uint*)(array + array_index * 4);\n  uint bit_mask = 1 << (bit_index & 0xf);\n  *array_ptr |= bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b3e",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "imported": true,
            "current_name": "set_bit_in_array_08006b3e"
        },
        "FUN_08006262": {
            "renaming": {
                "FUN_08006262": "set_bit_08006262",
                "*(uint *)(param_1 + 0x20)": "*data",
                "param_1": "data",
                "~(1 << (param_2 & 0xff))": "~mask",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "param_3 << (param_2 & 0xff)": "bit_value << (bit_index & 0xff)"
            },
            "code": "void set_bit_08006262(uint32_t* data, uint8_t bit_index, uint8_t bit_value) {\n    uint32_t mask = 1 << (bit_index & 0xff);\n    *data &= ~mask;\n    *data |= (bit_value << (bit_index & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006262",
            "calling": [
                "FUN_08006390",
                "FUN_080063c0",
                "FUN_080062f4",
                "FUN_08006280"
            ],
            "imported": true,
            "current_name": "set_bit_08006262"
        },
        "FUN_08007110": {
            "renaming": {
                "FUN_08007110": "call_function_08007110",
                "FUN_080074e0": "perform_task"
            },
            "code": "void call_function_08007110(void)\n{\n  perform_task();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007110",
            "calling": [
                "FUN_08005e2e"
            ],
            "imported": true,
            "current_name": "call_function_08007110"
        },
        "FUN_08007594": {
            "renaming": {
                "DAT_080075d0": "timer_instance_1",
                "FUN_08007594": "determine_timer_instance_08007594",
                "DAT_080075d4": "timer_instance_2",
                "param_1": "timer_value",
                "PTR_s_TIM__Unknown_timer_instance_080075d8": "unknown_timer_instance"
            },
            "code": "int determine_timer_instance_08007594(uint timer_value) {\n  if (timer_value == 0xffffffff) {\n    return 0;\n  }\n  if (timer_value == DAT_080075d0) {\n    return 1;\n  }\n  if (DAT_080075d0 < timer_value) {\n    if (timer_value == DAT_080075d4) {\n      return 1;\n    }\n    if (timer_value == DAT_080075d4 + 0x12400) {\n      return 2;\n    }\n  }\n  else if (timer_value == 0x40000000) {\n    return 1;\n  }\n  start_unknown_timer(PTR_s_TIM__Unknown_timer_instance_080075d8);\n  return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007594",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": true,
            "current_name": "determine_timer_instance_08007594"
        },
        "FUN_080073ec": {
            "renaming": {
                "puVar1[2]": "ptr_data[2]",
                "*puVar1": "*ptr_data",
                "DAT_0800742c": "ptr_data",
                "FUN_080073ec": "set_bit_and_clear_masks_080073ec",
                "puVar1[1]": "ptr_data[1]",
                "DAT_08007430": "MASK_BIT_CLEAR",
                "*(undefined4 *)(DAT_08007434 + 8)": "*(undefined4 *)(DAT_08007434 + 8)"
            },
            "code": "void set_bit_and_clear_masks_080073ec(void)\n{\n  uint *DAT_0800742c = DAT_0800742c;\n  *DAT_0800742c |= 1;\n  DAT_0800742c[1] &= DAT_08007430;\n  *DAT_0800742c &= 0xfef6ffff;\n  *DAT_0800742c &= 0xfffbffff;\n  DAT_0800742c[1] &= 0xff80ffff;\n  DAT_0800742c[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08007434 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ec",
            "calling": [
                "FUN_08003658"
            ],
            "imported": true,
            "current_name": "set_bit_and_clear_masks_080073ec"
        },
        "FUN_08008ef4": {
            "renaming": {
                "FUN_08008ef4": "calculate_new_value_08008ef4",
                "param_1": "current_value",
                "param_2": "initial_value",
                "param_3": "final_value",
                "param_4": "initial_range",
                "param_5": "final_range"
            },
            "code": "int calculate_new_value_08008ef4(int current_value, int initial_value, int final_value, int initial_range, int final_range) {\n    int range_difference = final_range - initial_range;\n    int value_difference = current_value - initial_value;\n    int new_value = (value_difference * range_difference) / (final_value - initial_value) + initial_range;\n    return new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ef4",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": true,
            "current_name": "calculate_new_value_08008ef4"
        },
        "FUN_08002df6": {
            "renaming": {
                "FUN_08002df6": "process_data_08002df6",
                "*(undefined **)(param_1 + 200)": "*(undefined **)(data_ptr + 200)",
                "*(byte *)(param_1 + 0xc4) - 2": "*(byte *)(data_ptr + 196) - 2",
                "param_1": "data_ptr",
                "puVar1": "data",
                "*(byte *)(param_1 + 0xc4)": "*(byte *)(data_ptr + 196)"
            },
            "code": "void process_data_08002df6(int data_ptr) {\n  if (*(byte *)(data_ptr + 196) == 0) {\n    return;\n  }\n  undefined *data = *(undefined **)(data_ptr + 200);\n  int data_size = *(byte *)(data_ptr + 196) - 2;\n  FUN_080031ce(data_ptr + 64, *data, data[1], data_size, data + 2);\n  return;\n}",
            "called": [
                "FUN_080031ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002df6",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": true,
            "current_name": "process_data_08002df6"
        },
        "FUN_080045bc": {
            "renaming": {
                "FUN_080045bc": "do_nothing_080045bc"
            },
            "code": "\nvoid do_nothing_080045bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045bc",
            "calling": [
                "FUN_080045c0"
            ],
            "imported": true,
            "current_name": "do_nothing_080045bc"
        },
        "FUN_08007118": {
            "renaming": {
                "FUN_080075dc": "function_2",
                "PTR_DAT_080071dc": "ptr_data",
                "iVar2": "var_13",
                "iVar3": "var_14",
                "local_60": "var_11",
                "FUN_08007320": "function_1",
                "local_4c": "var_10",
                "local_6c": "var_5",
                "param_1": "data",
                "local_48": "var_9",
                "local_64": "var_9",
                "local_68": "var_6",
                "local_44": "var_12",
                "PTR_DAT_080071e0": "ptr_flag",
                "FUN_08006186": "function_5",
                "local_50": "var_11",
                "FUN_08006c7c": "function_4",
                "uVar1": "quotient",
                "local_70": "var_4",
                "FUN_08007376": "function_6",
                "local_5c": "var_12",
                "FUN_08007118": "process_data_08007118",
                "local_1b": "flag_1",
                "param_2": "divisor",
                "param_3": "param_3",
                "FUN_0800643c": "function_8",
                "param_4": "param_4",
                "FUN_080091c6": "allocate_memory",
                "param_5": "flag",
                "local_54": "var_8",
                "FUN_08006092": "function_3",
                "local_74": "var_3",
                "local_58": "var_7",
                "FUN_08006390": "function_7"
            },
            "code": "void process_data_08007118(undefined4 data, uint divisor, int param_3, undefined4 param_4, char flag)\n{\n  uint quotient = 0;\n  int var_1 = 0;\n  int var_2 = 0;\n  undefined4 var_3 = 0;\n  undefined4 var_4 = 0;\n  undefined4 var_5 = 0;\n  undefined4 var_6 = 0;\n  int var_7 = 0;\n  int var_8 = 0;\n  undefined4 var_9 = 0;\n  int var_10 = 0;\n  undefined4 var_11 = 0;\n  undefined4 var_12 = 0;\n  undefined flag_1 = 0;\n  allocate_memory(&var_7, 0, 0x40);\n  var_3 = 0;\n  var_4 = 0;\n  var_5 = 0;\n  var_6 = 0;\n  var_1 = function_1(data, PTR_DAT_080071dc);\n  if (var_1 != 0) {\n    quotient = function_2();\n    var_8 = quotient / divisor - 1;\n    var_10 = param_3 + -1;\n    var_9 = 0;\n    var_11 = 0;\n    var_12 = 0;\n    flag_1 = 0;\n    if (flag == '\\x01') {\n      *PTR_DAT_080071e0 = (char)data;\n      int result = function_3(&var_7);\n      if (result != 0) {\n        return;\n      }\n    }\n    int var_13 = function_4(data);\n    if ((((var_13 == 0) || (var_13 == 4)) || (var_13 == 8)) || ((var_13 == 0xc || (var_13 == 0x18)))) {\n      var_3 = 0x60;\n      var_5 = 0;\n      var_4 = 0;\n      var_6 = 0;\n      var_9 = 0;\n      var_11 = 0;\n      var_4 = param_4;\n      int var_14 = function_5(&var_7, &var_3, var_13);\n      if (var_14 == 0) {\n        quotient = function_6(data, PTR_DAT_080071dc);\n        if ((quotient & 0x100000) == 0) {\n          function_7(&var_7, var_13);\n        }\n        else {\n          function_8(&var_7, var_13);\n        }\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08006092",
                "FUN_08006390",
                "FUN_08007320",
                "FUN_08007376",
                "FUN_0800643c",
                "FUN_080091c6",
                "FUN_08006c7c",
                "FUN_08006186",
                "FUN_080075dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007118",
            "calling": [
                "FUN_080088e0"
            ],
            "imported": true,
            "current_name": "process_data_08007118"
        },
        "FUN_08009fe8": {
            "renaming": {
                "iVar4": "function_ptr",
                "param_1": "function_index",
                "piVar3": "function_pointers",
                "puVar6": "function_pointers_ptr_ptr_copy",
                "FUN_08009fe8": "execute_function_08009fe8",
                "unaff_r5": "register_unaff_r5",
                "unaff_r4": "register_unaff_r4",
                "puVar1": "undefined_pointer",
                "uVar2": "function_result",
                "pcVar5": "function_ptr_value",
                "in_lr": "link_register"
            },
            "code": "int execute_function_08009fe8(uint function_index) {\n  int *function_pointers = *(int **)function_pointers_ptr_ptr;\n  if (function_index > 31) {\n    *function_pointers = 22;\n    return -1;\n  }\n  int function_ptr = function_pointers[17 * 4];\n  if ((function_ptr != 0) && (function_pointers[function_index * 4] != (int)NULL)) {\n    if (function_pointers[function_index * 4] != 1) {\n      if (function_pointers[function_index * 4] == -1) {\n        *function_pointers = 22;\n        return 1;\n      }\n      function_pointers[function_index * 4] = (int)NULL;\n      (*(code *)function_ptr)(function_index);\n    }\n    return 0;\n  }\n  undefined *function_pointers_ptr_ptr_copy = function_pointers_ptr_ptr;\n  int function_result = thunk_FUN_0800887c(function_pointers);\n  undefined *undefined_pointer = undefined_pointer_copy;\n  *(undefined4 *)undefined_pointer = 0;\n  int result = FUN_0800886c(function_result, function_index, function_index, 0, function_pointers_ptr_ptr_copy, unaff_r4, unaff_r5, in_lr);\n  if ((result == -1) && (*(int *)undefined_pointer != 0)) {\n    *function_pointers = *(int *)undefined_pointer;\n  }\n  return result;\n}",
            "called": [
                "thunk_FUN_0800887c",
                "FUN_0800886c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009fe8",
            "calling": [
                "FUN_08009b5c"
            ],
            "imported": true,
            "current_name": "execute_function_08009fe8"
        },
        "FUN_08002c1e": {
            "renaming": {
                "param_1": "device_id",
                "FUN_08002c1e": "send_data_to_device_08002c1e",
                "FUN_08002948": "send_data",
                "param_2": "max_data_size",
                "param_3": "data",
                "param_4": "data_size"
            },
            "code": "void send_data_to_device_08002c1e(int device_id, int max_data_size, int data[], int data_size)\n{\n  send_data(device_id, max_data_size, data, data_size, data_size);\n  return;\n}",
            "called": [
                "FUN_08002948"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c1e",
            "calling": [],
            "imported": true,
            "current_name": "send_data_to_device_08002c1e"
        },
        "FUN_08005a68": {
            "renaming": {
                "iVar1": "data_ptr",
                "*(uint *)(iVar1 + 4) >> 3 & 0x700": "DAT_buffer[1] >> 3 & 0x700",
                "param_1": "output_buffer",
                "*(uint *)(iVar1 + 4) & 0x700": "DAT_buffer[1] & 0x700",
                "*DAT_08005aa0": "DAT_input_buffer",
                "*DAT_08005aa0 & 7": "DAT_input_buffer & 7",
                "*param_1": "data",
                "*(uint *)(iVar1 + 4) & 3": "DAT_buffer[1] & 3",
                "FUN_08005a68": "extract_data_08005a68",
                "*(uint *)(DAT_08005a9c + 4)": "DAT_buffer[1]",
                "*(uint *)(iVar1 + 4) & 0xf0": "DAT_buffer[1] & 0xf0",
                "*param_2": "input_data",
                "param_2": "input_buffer",
                "DAT_08005a9c": "DAT_buffer"
            },
            "code": "void extract_data_08005a68(uint32_t *output_buffer, uint32_t *input_buffer)\n{\n  uint32_t data = 0xf;\n  uint32_t *data_ptr = &DAT_08005a9c;\n  output_buffer[0] = data;\n  output_buffer[1] = *(uint32_t *)(data_ptr + 1) & 3;\n  output_buffer[2] = *(uint32_t *)(data_ptr + 1) & 0xf0;\n  output_buffer[3] = *(uint32_t *)(data_ptr + 1) & 0x700;\n  output_buffer[4] = *(uint32_t *)(data_ptr + 1) >> 3 & 0x700;\n  *input_buffer = *DAT_08005aa0 & 7;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": true,
            "current_name": "extract_data_08005a68"
        },
        "FUN_08008f78": {
            "renaming": {
                "param_1": "first_param",
                "FUN_08008f78": "initialize_data_if_needed_08008f78",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "puVar1": "data_pointer"
            },
            "code": "void initialize_data_if_needed_08008f78(int first_param, int second_param, undefined4 third_param, undefined4 fourth_param) {\n    undefined *data_pointer;\n    data_pointer = PTR_DAT_08009018;\n    if (first_param != 1) {\n        return;\n    }\n    if (second_param == 0xffff) {\n        *PTR_DAT_08009018 = 6;\n        *(undefined4 *)(data_pointer + 0xc) = 0;\n        data_pointer[0x14] = 7;\n        *(undefined4 *)(data_pointer + 0x20) = 0;\n        data_pointer[0x28] = 8;\n        *(undefined4 *)(data_pointer + 0x34) = 0;\n        data_pointer[0x3c] = 9;\n        *(undefined4 *)(data_pointer + 0x48) = 0;\n        data_pointer[0x50] = 10;\n        *(undefined4 *)(data_pointer + 0x5c) = 0;\n        data_pointer[100] = 0x17;\n        *(undefined4 *)(data_pointer + 0x70) = 0;\n        data_pointer[0x78] = 0x17;\n        *(undefined4 *)(data_pointer + 0x84) = 0;\n        data_pointer[0x8c] = 0x17;\n        *(undefined4 *)(data_pointer + 0x98) = 0;\n        data_pointer[0xa0] = 0x17;\n        *(undefined4 *)(data_pointer + 0xac) = 0;\n        data_pointer[0xb4] = 0x17;\n        *(undefined4 *)(data_pointer + 0xc0) = 0;\n        data_pointer[200] = 0x28;\n        *(undefined4 *)(data_pointer + 0xd4) = 0;\n        data_pointer[0xdc] = 0x28;\n        *(undefined4 *)(data_pointer + 0xe8) = 0;\n        data_pointer[0xf0] = 0x28;\n        *(undefined4 *)(data_pointer + 0xfc) = 0;\n        data_pointer[0x104] = 0x28;\n        *(undefined4 *)(data_pointer + 0x110) = 0;\n        data_pointer[0x118] = 0x28;\n        *(undefined4 *)(data_pointer + 0x124) = 0;\n        data_pointer[300] = 0x28;\n        *(undefined4 *)(data_pointer + 0x138) = 0;\n        FUN_080090c2(0, PTR_LAB_08008f50_1_08009020, PTR_DAT_0800901c, data_pointer, fourth_param);\n    }\n    return;\n}",
            "called": [
                "FUN_080090c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f78",
            "calling": [],
            "imported": true,
            "current_name": "initialize_data_if_needed_08008f78"
        },
        "FUN_08008d30": {
            "renaming": {
                "uVar1": "uVar",
                "param_1": "parameters",
                "FUN_08008d00": "initialize_parameters_1",
                "PTR_DAT_08008d84": "ptr_data_2",
                "FUN_08008d30": "initialize_parameters_08008d30",
                "param_2": "arg2",
                "param_3": "arg3",
                "FUN_0800734a": "get_value",
                "param_4": "arg4",
                "PTR_DAT_08008d88": "ptr_data_3",
                "PTR_PTR_LAB_08008ba4_1_08008d7c": "ptr_ptr_label_1_2",
                "PTR_DAT_08008d80": "ptr_data_1",
                "FUN_08008d18": "initialize_parameters_2"
            },
            "code": "undefined4 initialize_parameters_08008d30(undefined4 *parameters, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  undefined uVar;\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  *parameters = PTR_PTR_LAB_08008ba4_1_08008d7c;\n  if (parameters == (undefined4 *)PTR_DAT_08008d80)\n  {\n    initialize_parameters_08008d30_1(parameters, 0, arg3, PTR_DAT_08008d80, arg4);\n    initialize_parameters_08008d30_2(parameters, 1);\n  }\n  else\n  {\n    uVar = get_value(arg2, PTR_DAT_08008d84);\n    *(undefined *)((int)parameters + 0x12d) = uVar;\n    uVar = get_value(arg2, PTR_DAT_08008d88);\n    *(undefined *)(parameters + 0x4b) = uVar;\n  }\n  finalize_parameters(parameters);\n  return parameters;\n}",
            "called": [
                "FUN_08008d00",
                "FUN_08008d18",
                "FUN_08008c20",
                "FUN_0800734a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d30",
            "calling": [
                "FUN_08008d8c"
            ],
            "imported": true,
            "current_name": "initialize_parameters_08008d30"
        },
        "FUN_08002f94": {
            "renaming": {
                "PTR_DAT_08002f9c": "GLOBAL_VAR_PTR",
                "param_1": "new_value",
                "param_2": "",
                "FUN_08002f94": "set_param_value_to_global_var_08002f94",
                "param_3": ""
            },
            "code": "void set_param_value_to_global_var_08002f94(int new_value){\n  *(int *)PTR_DAT_08002f9c = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f94",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "set_param_value_to_global_var_08002f94"
        },
        "FUN_0800734a": {
            "renaming": {
                "uVar1": "result",
                "FUN_08007332": "calculate_result",
                "param_1": "input",
                "FUN_0800734a": "check_param_0800734a"
            },
            "code": "int check_param_0800734a(int input){\n  int result;\n  if (input != 0) {\n    result = calculate_result();\n    return result;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800734a",
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "imported": true,
            "current_name": "check_param_0800734a"
        },
        "FUN_08000aec": {
            "renaming": {
                "bVar1": "is_valid",
                "iVar2": "character_value",
                "PTR_DAT_08000bcc": "data_array_2",
                "PTR_DAT_08000bdc": "data_pointer_3",
                "PTR_DAT_08000bd0": "data_array_3",
                "PTR_DAT_08000be0": "data_pointer_4",
                "FUNC_080005f8": "set_data",
                "FUN_080036ac": "check_value",
                "PTR_DAT_08000bd8": "data_array_5",
                "PTR_DAT_08000bc4": "data_pointer_2",
                "PTR_DAT_08000bd4": "data_array_4",
                "PTR_DAT_08000be4": "data_pointer_5",
                "FUN_08000aec": "process_data_08000aec",
                "PTR_DAT_08000bc0": "data_pointer_1",
                "uVar3": "index",
                "FUN_080005e0": "initialize_data",
                "PTR_DAT_08000bc8": "data_array_1"
            },
            "code": "void process_data_08000aec(void)\\n{\\n  bool is_valid = false;\\n  int character_value;\\n  uint index;\\n  *PTR_DAT_08000bc0 = 1;\\n  if (*PTR_DAT_08000bc4 != \"\\0\") {\\n    initialize_data();\\n  }\\n  for (index = 0; index < 5; index++) {\\n    PTR_DAT_08000bc8[index] = 0;\\n    PTR_DAT_08000bcc[index] = 0;\\n    PTR_DAT_08000bd0[index] = 0;\\n  }\\n  for (index = 0; index < 0x3c; index++) {\\n    if ((index - 0x2e & 0xff) < 0xe) {\\n      if (index < 0x3c) {\\n        character_value = (int)(char)PTR_DAT_08000bd4[index];\\n      }\\n      else {\\n        character_value = -1;\\n      }\\n      character_value = check_value(character_value);\\n      if (character_value == 0) {\\n        is_valid = false;\\n      }\\n      else {\\n        if (index < 0x3c) {\\n          character_value = (int)(char)PTR_DAT_08000bd4[index];\\n        }\\n        else {\\n          character_value = -1;\\n        }\\n        character_value = check_value(character_value);\\n        if (character_value == 1) {\\n          is_valid = false;\\n        }\\n        else {\\n          is_valid = true;\\n        }\\n      }\\n    }\\n    else {\\n      is_valid = false;\\n    }\\n    if (is_valid) {\\n      set_data(index, 2);\\n    }\\n    else {\\n      if (index < 0x3c) {\\n        if (((PTR_DAT_08000bd4[index] != -1) && (character_value = check_value(), character_value != 0)) &&\\n           (character_value = check_value((int)(char)PTR_DAT_08000bd4[index]), character_value != 1)) {\\n          is_valid = true;\\n        }\\n      }\\n      if (is_valid) {\\n        set_data(index, 1);\\n      }\\n    }\\n    PTR_DAT_08000bd8[index] = 0xff;\\n  }\\n  *(undefined4 *)PTR_DAT_08000bdc = 0;\\n  *PTR_DAT_08000be0 = 0;\\n  *PTR_DAT_08000be4 = 0;\\n  *PTR_DAT_08000bc0 = 0;\\n  return;\\n}",
            "called": [
                "FUN_080005e0",
                "FUN_080005f8",
                "FUN_080036ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "process_data_08000aec"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008ed6": "call_helper_function",
                "FUN_08008eec": "execute_function_08008eec"
            },
            "code": "void execute_function_08008eec(void)\n{\n  call_helper_function();\n  return;\n}",
            "called": [
                "FUN_08008ed6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008eec",
            "calling": [],
            "imported": true,
            "current_name": "execute_function_08008eec"
        },
        "FUN_080068d6": {
            "renaming": {
                "*(char *)((int)param_1 + 0x3a)": "input_array[58]",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*input_array + 20)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 12)",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[58]",
                "param_1": "input_array",
                "*(short *)((int)param_1 + 0x2e)": "input_array[14]",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[15]",
                "param_2": "input_size",
                "param_3": "input_flag",
                "FUN_080068d6": "validate_input_080068d6",
                "*(short *)(param_1 + 0xb)": "input_array[11]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]"
            },
            "code": "int validate_input_080068d6(int *input_array, int input_size, int input_flag)\n{\n  if (input_array[10] != ' ') {\n    return 2;\n  }\n  if (input_size == 0) {\n    return 1;\n  }\n  if (input_flag == 0) {\n    return 1;\n  }\n  if (input_array[14] != '\\x01') {\n    input_array[10] = input_size;\n    input_array[11] = (short)input_flag;\n    input_array[14] = (short)input_flag;\n    input_array[15] = 0;\n    input_array[58] = 0x22;\n    input_array[14] = 0;\n    *(uint *)(*input_array + 12) = *(uint *)(*input_array + 12) | 0x100;\n    *(uint *)(*input_array + 20) = *(uint *)(*input_array + 20) | 1;\n    *(uint *)(*input_array + 12) = *(uint *)(*input_array + 12) | 0x20;\n    return 0;\n  }\n  return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068d6",
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "imported": true,
            "current_name": "validate_input_080068d6"
        },
        "FUN_080032a2": {
            "renaming": {
                "uVar1": "message_id",
                "param_1": "recipient_id",
                "FUN_08000178": "generate_message_id",
                "FUN_0800325a": "send_message_over_network",
                "param_2": "message_type",
                "param_3": "message_length",
                "param_4": "message_data",
                "FUN_080032a2": "send_message_080032a2"
            },
            "code": "void send_message_080032a2(int recipient_id, int message_type, int message_length, void* message_data)\n{\n  int message_id = generate_message_id(recipient_id);\n  void* message = create_message(message_type, message_length, message_data);\n  send_message_080032a2_over_network(message_id, message);\n  return;\n}",
            "called": [
                "FUN_0800325a",
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032a2",
            "calling": [
                "FUN_08002f14"
            ],
            "imported": true,
            "current_name": "send_message_080032a2"
        },
        "FUN_08001b48": {
            "renaming": {
                "PTR_LAB_08000c18_1_08001bd4": "component_5",
                "PTR_DAT_08001bc0": "ptr_data",
                "PTR_LAB_080002ec_1_08001bcc": "component_3",
                "DAT_08001be4": "component_9",
                "DAT_08001bd8": "component_6",
                "PTR_FUNC_08001cd0_1_08001be0": "component_8",
                "PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4": "component_1",
                "2": "component_1_param_2",
                "PTR_LAB_080001a8_1_08001bdc": "component_7",
                "DAT_08001bd0": "component_4",
                "5": "component_1_param_3",
                "PTR_FUN_08000214_1_08001bc8": "component_2",
                "puVar1": "ptr_data",
                "FUN_08001b48": "initialize_components_08001b48"
            },
            "code": "void initialize_components_08001b48(void)\n{\n  undefined *PTR_DAT_08001bc0 = PTR_DAT_08001bc0;\n  initialize_component(PTR_DAT_08001bc0, PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4, 2, 5);\n  initialize_component(PTR_DAT_08001bc0, 0xe0, PTR_FUN_08000214_1_08001bc8);\n  initialize_component(PTR_DAT_08001bc0, 0x90, PTR_LAB_080002ec_1_08001bcc);\n  initialize_component(PTR_DAT_08001bc0, 0xc0, DAT_08001bd0);\n  initialize_component(PTR_DAT_08001bc0, 0xd0, PTR_LAB_08000c18_1_08001bd4);\n  initialize_component(PTR_DAT_08001bc0, 0xf4, DAT_08001bd8);\n  initialize_component(PTR_DAT_08001bc0, 0xf5, PTR_LAB_080001a8_1_08001bdc);\n  initialize_component(PTR_DAT_08001bc0, 0xf0, PTR_FUNC_08001cd0_1_08001be0);\n  initialize_component(PTR_DAT_08001bc0, 0xff, DAT_08001be4);\n  initialize_component(PTR_DAT_08001bc0, 0xe100);\n  initialize_component();\n  disable_interrupts();\n}\n",
            "called": [
                "FUN_08002f94",
                "FUN_08002f2c",
                "FUN_08002e44",
                "FUN_0800018c",
                "FUN_08003048",
                "FUN_08000aec",
                "FUN_08002f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": true,
            "current_name": "initialize_components_08001b48"
        },
        "FUN_08006390": {
            "renaming": {
                "param_1": "ptr_to_ptr",
                "param_2": "constant_value",
                "DAT_080063bc": "CONSTANT_PTR",
                "puVar1": "ptr",
                "FUN_08006390": "set_flag_if_pointer_equals_constant_08006390"
            },
            "code": "uint32_t set_flag_if_pointer_equals_constant_08006390(uint32_t **ptr_to_ptr, uint32_t constant_value)\n{\n  uint32_t *ptr = *ptr_to_ptr;\n  FUN_08006262(*ptr_to_ptr, constant_value, 1);\n  if (ptr == DAT_080063bc) {\n    ptr[0x11] |= 0x8000;\n  }\n  **ptr_to_ptr |= 1;\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006390",
            "calling": [
                "FUN_08007118"
            ],
            "imported": true,
            "current_name": "set_flag_if_pointer_equals_constant_08006390"
        },
        "FUN_08009f48": {
            "renaming": {
                "FUN_08009f48": "do_nothing_08009f48"
            },
            "code": "\nvoid do_nothing_08009f48(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f48",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": true,
            "current_name": "do_nothing_08009f48"
        },
        "FUN_08004d6a": {
            "renaming": {
                "FUN_08004d6a": "do_nothing_08004d6a"
            },
            "code": "\nvoid do_nothing_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6a",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": true,
            "current_name": "do_nothing_08004d6a"
        },
        "FUN_08008730": {
            "renaming": {
                "FUN_08008730": "select_random_item_and_use_it_08008730",
                "PTR_DAT_08008770": "item_list_address",
                "iVar2": "item_result",
                "iVar3": "item_address",
                "uVar1": "random_index",
                "PTR_DAT_08008774": "item_function_list_address",
                "PTR_DAT_08008778": "item_data_address"
            },
            "code": "void select_random_item_and_use_it_08008730() {\n  uint random_index = generate_random_index();\n  int item_address = *(int *)(PTR_DAT_08008770 + random_index * 4);\n  if ((random_index < 5) && (item_address = (**(code **)(PTR_DAT_08008774 + random_index * 4))(item_address), item_address != -1)) {\n    int item_type = *(byte *)(item_address + 0x44);\n    int item_quantity = *(int *)(item_address + 100) + *(ushort *)(item_address + 0x6a);\n    use_item(item_type, item_quantity, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_0800688e",
                "FUN_080086e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008730",
            "calling": [
                "FUN_08006932"
            ],
            "imported": true,
            "current_name": "select_random_item_and_use_it_08008730"
        },
        "FUN_08005df4": {
            "renaming": {
                "FUN_08005df4": "update_data_08005df4",
                "param_1": "data",
                "puVar1": "data_ptr"
            },
            "code": "void update_data_08005df4(uint **data)\n{\n  uint *data_ptr;\n  *(undefined *)((int)data + 0x3d) = 2;\n  data_ptr = *data;\n  if ((data_ptr[8] & 0x1111) == 0) {\n    if ((data_ptr[8] & 0x444) == 0) {\n      *data_ptr = *data_ptr & 0xfffffffe;\n    }\n  }\n  update_data_08005df4_helper(data);\n  *(undefined *)((int)data + 0x3d) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  return;\n}",
            "called": [
                "FUN_08007710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005df4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": true,
            "current_name": "update_data_08005df4"
        },
        "FUN_08009148": {
            "renaming": {
                "FUN_08009148": "execute_all_functions_08009148"
            },
            "code": "void execute_all_functions_08009148(void)\n{\n  void **function_ptrs = PTR_DAT_08009180;\n  int num_functions = (int)PTR_DAT_08009184 - (int)PTR_DAT_08009180;\n  for (int i = 0; i < num_functions >> 2; i++) {\n    (**(void (**)(void))(function_ptrs + i * 4))();\n  }\n  do_nothing_0800a424();\n  function_ptrs = PTR_DAT_08009188;\n  num_functions = (int)PTR_DAT_0800918c - (int)PTR_DAT_08009188;\n  for (int i = 0; i < num_functions >> 2; i++) {\n    (**(void (**)(void))(function_ptrs + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009148",
            "calling": [
                "FUN_08003658"
            ],
            "imported": true,
            "current_name": "execute_all_functions_08009148"
        },
        "FUN_08005460": {
            "renaming": {
                "FUN_08005460": "FUNC_08005460"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08005460(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08005720;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 4) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) != 0)))) {\n      if (((*DAT_08005720 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08005720 = *DAT_08005720 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08005720 = *DAT_08005720 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = FUN_08003760();\n        while ((*DAT_08005720 & 0x20000) != 0) {\n          iVar4 = FUN_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = FUN_08003760();\n        while ((*DAT_08005720 & 0x20000) == 0) {\n          iVar4 = FUN_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 0) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) == 0)))) {\n      if (((*DAT_08005720 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08005724 = 0;\n      iVar3 = FUN_08003760();\n      while ((*DAT_08005720 & 2) != 0) {\n        iVar4 = FUN_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005724 = 1;\n      iVar3 = FUN_08003760();\n      while ((*DAT_08005720 & 2) == 0) {\n        iVar4 = FUN_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08005728 = 0;\n      iVar3 = FUN_08003760();\n      while ((DAT_08005720[9] & 2) != 0) {\n        iVar4 = FUN_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005728 = 1;\n      iVar3 = FUN_08003760();\n      while ((DAT_08005720[9] & 2) == 0) {\n        iVar4 = FUN_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      FUN_08005434(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08005720[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08005720[7] = DAT_08005720[7] | 0x10000000;\n    }\n    if ((*DAT_0800572c & 0x100) == 0) {\n      *DAT_0800572c = *DAT_0800572c | 0x100;\n      iVar3 = FUN_08003760();\n      while ((*DAT_0800572c & 0x100) == 0) {\n        iVar4 = FUN_08003760();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08005838;\n    puVar1 = DAT_08005720;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08005720[8] = DAT_08005720[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08005838[8] = DAT_08005838[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08005720[8] = DAT_08005720[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = FUN_08003760();\n      while ((DAT_08005838[8] & 2) != 0) {\n        iVar4 = FUN_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = FUN_08003760();\n      while ((DAT_08005720[8] & 2) == 0) {\n        iVar4 = FUN_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08005838[7] = DAT_08005838[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08005838[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800583c = 0;\n    iVar3 = FUN_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08005838[1] = DAT_08005838[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08005838[1] = DAT_08005838[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_0800583c = 1;\n        iVar3 = FUN_08003760();\n        do {\n          if ((*DAT_08005838 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = FUN_08003760();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = FUN_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_0800583c = 0;\n    iVar3 = FUN_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = FUN_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_08003760",
                "FUN_08005434"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005460",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": true,
            "current_name": "FUNC_08005460"
        },
        "FUN_08008854": {
            "renaming": {
                "FUN_08008854": "return_zero_08008854"
            },
            "code": "int32_t return_zero_08008854(void)\n{\n  int32_t result = 0;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008854",
            "calling": [
                "FUN_0800a130"
            ],
            "imported": true,
            "current_name": "return_zero_08008854"
        },
        "FUN_080064cc": {
            "renaming": {
                "sVar1": "remaining_bytes",
                "FUN_080064cc": "decode_message_080064cc",
                "destination": "destination",
                "param_1": "message_ptr",
                "source": "source",
                "flag_ptr": "flag_ptr",
                "pbVar2": "source"
            },
            "code": "undefined4 decode_message_080064cc(int *message_ptr) {\n  short remaining_bytes = *(short *)((int)message_ptr + 0x26) - 1;\n  if (*(char *)((int)message_ptr + 0x39) != '!') {\n    return 2;\n  }\n  if (message_ptr[2] == 0x1000) {\n    uint *destination = (uint *)(*message_ptr + 4);\n    ushort *source = (ushort *)message_ptr[8];\n    *destination = *source & 0x1ff;\n    if (message_ptr[4] == 0) {\n      message_ptr[8] += 2;\n    }\n    else {\n      message_ptr[8]++;\n    }\n  }\n  else {\n    byte *source = (byte *)message_ptr[8];\n    uint *destination = (uint *)(*message_ptr + 4);\n    *destination = (uint)*source;\n    message_ptr[8] = (int)(source + 1);\n  }\n  *(short *)((int)message_ptr + 0x26) = remaining_bytes;\n  if (remaining_bytes == 0) {\n    uint *flag_ptr = (uint *)(*message_ptr + 0xc);\n    *flag_ptr &= 0xffffff7f;\n    *flag_ptr |= 0x40;\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064cc",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": true,
            "current_name": "decode_message_080064cc"
        },
        "FUN_08004d6c": {
            "renaming": {
                "ushort_ptr": "params + 0x2a",
                "FUN_08004d6c": "process_quoted_string_08004d6c",
                "char_ptr2": "params + 0x3e",
                "param_1": "params",
                "param1": "params[1]",
                "char_ptr": "params + 0x3d",
                "puVar1": "param9",
                "paramb": "params[0xb]"
            },
            "code": "int process_quoted_string_08004d6c(uint **params) {\n  uint *param0 = params[0];\n  char *char_ptr = (char *)(params + 0x3d);\n  ushort *ushort_ptr = (ushort *)(params + 0x2a);\n  uint *paramb = params[0xb];\n  uint *param1 = params[1];\n  uint *param9 = params[9];\n  char *char_ptr2 = (char *)(params + 0x3e);\n  \n  if (*char_ptr == '\"') {\n    if (*ushort_ptr < 4) {\n      if (*ushort_ptr - 2 < 2) {\n        if (paramb == (uint *)0x2) {\n          **params |= 0x400;\n        }\n        else {\n          **params &= 0xfffffbff;\n          **params |= 0x800;\n        }\n        param1[1] &= 0xfffffbff;\n      }\n      else {\n        if (paramb == (uint *)0x2) {\n          **params |= 0x400;\n        }\n        else {\n          **params &= 0xfffffbff;\n        }\n        param1[1] &= 0xfffff8ff;\n        *param9++ = (uint)(*param1 + 4);\n        (*ushort_ptr)--;\n        *char_ptr = ' ';\n        params[0xc] = (uint *)0x0;\n        if (*char_ptr2 == '@') {\n          *char_ptr2 = 0;\n          do_nothing_08004d6a();\n        }\n        else {\n          *char_ptr2 = 0;\n          do_nothing_08004a20();\n        }\n      }\n    }\n    else {\n      *param9++ = (uint)(*param1 + 4);\n      (*ushort_ptr)--;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004d6a",
                "FUN_08004a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "process_quoted_string_08004d6c"
        },
        "FUN_08004ac2": {
            "renaming": {
                "uVar1": "value",
                "FUN_08004ac2": "process_data_08004ac2",
                "param_1": "data_ptr",
                "param_2": "flag1",
                "param_3": "flag2",
                "param_4": "flag3",
                "uVar2": "data"
            },
            "code": "int process_data_08004ac2(int *data_ptr, int flag1, int flag2, int flag3)\n{\n  uint32_t data = *(uint32_t *)(*data_ptr + 0x18);\n  uint16_t value;\n  if ((data & 0x80) == 0) {\n    value = *(uint16_t *)(data_ptr + 3);\n  }\n  else {\n    value = *(uint16_t *)(data_ptr + 6);\n  }\n  process_data_08004ac2_helper(data_ptr, (data & 4) == 0, value, data, flag3);\n  return 0;\n}",
            "called": [
                "FUN_08007fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ac2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "process_data_08004ac2"
        },
        "FUN_08008850": {
            "renaming": {
                "FUN_08008850": "always_returns_one_08008850"
            },
            "code": "int always_returns_one_08008850(void) {\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008850",
            "calling": [
                "FUN_0800a110"
            ],
            "imported": true,
            "current_name": "always_returns_one_08008850"
        },
        "FUN_08006ca8": {
            "renaming": {
                "iVar2": "STATUS_REGISTER_PTR",
                "FUN_08006ca8": "update_status_08006ca8",
                "param_1": "status_register",
                "local_18": "bit_position",
                "param_2": "input_value",
                "puVar1": "data_ptr",
                "uVar3": "result",
                "local_10": "flag2",
                "uVar5": "current_status",
                "uVar4": "mask",
                "local_14": "flag1"
            },
            "code": "void update_status_08006ca8(uint *status_register, undefined4 input_value) {\n  uint current_status = *status_register;\n  uint mask = 0;\n  if (current_status == STATUS_A) {\n    mask = *(uint *)(STATUS_REGISTER_PTR + 0x18) | 0x200;\n    *(uint *)(STATUS_REGISTER_PTR + 0x18) = mask;\n    current_status = *(uint *)(STATUS_REGISTER_PTR + 0x18) & 0x200;\n  }\n  else {\n    if (current_status == STATUS_B) {\n      mask = *(uint *)(STATUS_REGISTER_PTR + 0x18) | 0x400;\n      *(uint *)(STATUS_REGISTER_PTR + 0x18) = mask;\n      current_status = *(uint *)(STATUS_REGISTER_PTR + 0x18) & 0x400;\n    }\n  }\n  undefined *data_ptr = DATA_PTR;\n  undefined4 result = calculate_result((uint)((int)(char)*DATA_PTR << 0x18) >> 0x1c, input_value, mask, current_status);\n  uint bit_position = 1 << ((byte)*data_ptr & 0xf) & 0xffff;\n  uint flag1 = 3;\n  uint flag2 = 0;\n  set_bit(result, &bit_position);\n  return;\n}",
            "called": [
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ca8",
            "calling": [
                "FUN_08003bd8"
            ],
            "imported": true,
            "current_name": "update_status_08006ca8"
        },
        "FUN_08002fc2": {
            "renaming": {
                "FUN_08002fc2": "set_value_at_index_offset_08002fc2",
                "param_1": "array",
                "param_2": "index",
                "param_3": "value"
            },
            "code": "void set_value_at_index_offset_08002fc2(int* array, int index, int value) {\n  *(array + (index + 0x42) * 4) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fc2",
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": true,
            "current_name": "set_value_at_index_offset_08002fc2"
        },
        "FUN_08008afa": {
            "renaming": {
                "*(short *)(param_1 + 0x136)": "offset_2",
                "*(short *)(param_1 + 0x134)": "offset_1",
                "FUN_08008afa": "calculate_offset_08008afa",
                "param_1": "memory_address",
                "result": "result"
            },
            "code": "ushort calculate_offset_08008afa(int memory_address)\n{\n    ushort offset_1 = *(short *)(memory_address + 0x134);\n    ushort offset_2 = *(short *)(memory_address + 0x136);\n    ushort result = (offset_1 + 0x40) - offset_2;\n    return result & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008afa",
            "calling": [
                "FUN_08008bf4"
            ],
            "imported": true,
            "current_name": "calculate_offset_08008afa"
        },
        "FUN_08003048": {
            "renaming": {
                "FUN_08003048": "print_and_copy_string_08003048",
                "param_1": "string_to_print",
                "param_2": "string_to_copy",
                "param_3": "string_length",
                "param_4": "padding",
                "puVar1": "string_pointer",
                "PTR_DAT_08003068": "string_pointer"
            },
            "code": "void print_and_copy_string_08003048(char* string_to_print, char* string_to_copy, int string_length, int padding){\n  char* PTR_DAT_08003068 = PTR_DAT_08003068;\n  print_string(PTR_DAT_08003068, string_to_print, string_length, padding);\n  copy_string(string_to_copy, PTR_DAT_08003068);\n  return;\n}",
            "called": [
                "FUN_08002e26",
                "FUN_08003002",
                "FUN_08008c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003048",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "print_and_copy_string_08003048"
        },
        "FUN_0800937c": {
            "renaming": {
                "FUN_0800937c": "FUNC_0800937c"
            },
            "code": "\nint FUNC_0800937c(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_08009d50();\n  }\n  if (param_2 == PTR_DAT_08009588) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08009590) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08009594) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = FUN_08009a80(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080093be:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = FUN_08009358(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08009568;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = FUN_08009f2c(PTR_s___0__0800958c,*pbVar5);\n    puVar1 = PTR_DAT_08009598;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__0800958c & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08009498;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08009498:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = FUN_08009f2c(PTR_DAT_08009598,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = FUN_08009f2c(PTR_s_efgEFG_0800959c,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08009698(param_1,&local_88,param_2,DAT_080095a4,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080095a0 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_0800951a;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08009568;\nLAB_0800951a:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080093be;\n}\n\n",
            "called": [
                "FUN_08009d50",
                "FUN_08009358",
                "FUN_08009698",
                "FUN_08009f2c",
                "FUN_08009a80"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800937c",
            "calling": [
                "FUN_08009124",
                "FUN_080098d8"
            ],
            "imported": true,
            "current_name": "FUNC_0800937c"
        },
        "FUN_08000214": {
            "renaming": {
                "bVar1": "data_valid",
                "PTR_DAT_080002d8": "PTR_DATA_ARRAY",
                "iVar2": "result",
                "PTR_DAT_080002e4": "DATA_ARRAY",
                "FUN_08002fa0": "get_data",
                "FUN_0800738a": "process_data",
                "param_1": "data_index",
                "FUN_08000214": "process_data_08000214",
                "FUN_080036ac": "check_data",
                "param_2": "param_2",
                "PTR_DAT_080002dc": "DATA_VALID_ARRAY",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_080088e0": "update_data",
                "PTR_DAT_080002e0": "DATA_INDEX_ARRAY"
            },
            "code": "void process_data_08000214(uint data_index, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n  bool data_valid;\n  int result;\n  if (data_index > 59) {\n    return;\n  }\n  result = get_data(PTR_DAT_080002d8, data_index, param_3, param_4, param_4);\n  if (result == 3) {\n    if (data_index < 60) {\n      if (PTR_DAT_080002dc[data_index] == -1) {\n        result = 0;\n      }\n      else {\n        result = check_data();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = check_data(PTR_DAT_080002dc[data_index]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = process_data_08000214(PTR_DAT_080002dc[data_index], PTR_DAT_080002d8);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      process_data_08000214(data_index, param_2);\n    }\n    update_data(PTR_DAT_080002d8, data_index, param_2);\n  }\n  else if (result == 4) {\n    if (data_index < 60) {\n      if (PTR_DAT_080002dc[data_index] == -1) {\n        data_valid = false;\n      }\n      else {\n        result = check_data();\n        if (result == 0) {\n          data_valid = false;\n        }\n        else {\n          result = check_data(PTR_DAT_080002dc[data_index]);\n          if (result == 1) {\n            data_valid = false;\n          }\n          else {\n            data_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      data_valid = false;\n    }\n    if (data_valid) {\n      process_data_08000214(PTR_DAT_080002d8 + (uint)(byte)PTR_DAT_080002e4[data_index] * 3, param_2);\n    }\n    update_data(PTR_DAT_080002d8, data_index, param_2);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0800021a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000214",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": true,
            "current_name": "process_data_08000214"
        },
        "FUN_08003724": {
            "renaming": {
                "FUN_08003724": "set_flag_and_call_functions_08003724",
                "FUN_08003f0c": "call_function_1",
                "DAT_08003744": "data_ptr",
                "do_nothing_080036d4": "do_nothing",
                "FUN_080036d8": "call_function_2"
            },
            "code": "int set_flag_and_call_functions_08003724(void)\n{\n  int* DAT_08003744 = DAT_08003744;\n  *DAT_08003744 |= 0x10;\n  call_function_1(3);\n  call_function_2(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_080036d4",
                "FUN_08003f0c",
                "FUN_080036d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003724",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": true,
            "current_name": "set_flag_and_call_functions_08003724"
        },
        "FUN_080038dc": {
            "renaming": {
                "param_1": "pointer",
                "FUN_080038dc": "get_value_from_pointer_offset_080038dc"
            },
            "code": "int get_value_from_pointer_offset_080038dc(int *pointer)\n{\n  int offset = 0x4c;\n  int *value_pointer = (int *)(*pointer + offset);\n  return *value_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038dc",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_offset_080038dc"
        },
        "FUN_080025ac": {
            "renaming": {
                "uVar1": "mask",
                "iVar4": "temp2",
                "FUN_080025ac": "process_data_080025ac",
                "*param_1": "data",
                "param_2": "data_size",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar3": "temp1",
                "uVar2": "index"
            },
            "code": "byte process_data_080025ac(byte *data, uint data_size, int param_3, int param_4)\n{\n  uint index;\n  uint mask;\n  uint temp1;\n  int temp2;\n  \n  if (*data < 0xc) {\n    process_data_080025ac_helper(data_size, 1, param_3, *data, param_4);\n    index = (uint)*data;\n    mask = (byte)PTR_DAT_08002628[index * 8] & 0xffffffc0 | data_size & 0x3f;\n    PTR_DAT_08002628[index * 8] = (char)mask;\n    temp2 = -param_3 + 0x220;\n    if (temp2 < 0) {\n      temp2 = -param_3 + 0x223;\n    }\n    data[1] = (byte)((uint)(temp2 << 0x16) >> 0x18);\n    temp2 = -param_4 + 0x960;\n    if (temp2 < 0) {\n      temp2 = -param_4 + 0x963;\n    }\n    data[2] = (byte)((uint)(temp2 << 0x16) >> 0x18);\n    temp1 = (uint)((ulonglong)DAT_0800262c * (ulonglong)*data >> 0x23);\n    temp2 = process_data_080025ac_helper2(temp1, mask, index, (int)((ulonglong)DAT_0800262c * (ulonglong)*data));\n    if (temp2 == 0) {\n      PTR_DAT_08002630[0x44] = (char)temp1;\n      process_data_080025ac_helper3();\n    }\n    PTR_DAT_08002628[(uint)*data * 8] = PTR_DAT_08002628[(uint)*data * 8] | 0x40;\n  }\n  return *data;\n}",
            "called": [
                "FUN_08002400",
                "FUN_0800242c",
                "FUN_08008990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ac",
            "calling": [
                "FUN_08000500",
                "FUN_08002634"
            ],
            "imported": true,
            "current_name": "process_data_080025ac"
        },
        "FUN_08002634": {
            "renaming": {
                "param_1": "employee_id",
                "FUN_08002634": "print_report_08002634",
                "FUN_080025ac": "generate_report",
                "param_2": "department_id",
                "param_3": "report_type",
                "param_4": "report_id"
            },
            "code": "void print_report_08002634(int employee_id, int department_id, int report_type, int report_id)\n{\n  generate_report(employee_id, department_id, 0x220, 0x960, report_id);\n  return;\n}",
            "called": [
                "FUN_080025ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002634",
            "calling": [
                "FUN_08000500"
            ],
            "imported": true,
            "current_name": "print_report_08002634"
        },
        "FUN_08002f0a": {
            "renaming": {
                "param_1": "buffer_offset",
                "FUN_08002f0a": "copy_data_to_buffer_08002f0a"
            },
            "code": "void copy_data_to_buffer_08002f0a(int buffer_offset)\n{\n  copy_data_to_buffer_08002f0a(buffer_offset + 0x40);\n  return;\n}",
            "called": [
                "FUN_0800325a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f0a",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": true,
            "current_name": "copy_data_to_buffer_08002f0a"
        },
        "FUN_08005bb8": {
            "renaming": {
                "uVar1": "result",
                "uStack_14": "stack_var3",
                "param_1": "input",
                "FUN_08005bb8": "calculate_value_08005bb8",
                "abStack_20": "stack_array",
                "uStack_18": "stack_var2",
                "uStack_1c": "stack_var1",
                "local_24": "local_var1"
            },
            "code": "uint calculate_value_08005bb8(int input) {\n  uint result;\n  undefined2 local_var1;\n  byte stack_array[4];\n  undefined4 stack_var1;\n  undefined4 stack_var2;\n  undefined4 stack_var3;\n  \n  stack_var3 = *(undefined4 *)(PTR_DAT_08005ca0 + 8);\n  stack_var2 = *(undefined4 *)(PTR_DAT_08005ca0 + 4);\n  stack_var1 = *(undefined4 *)PTR_DAT_08005ca0;\n  local_var1 = *(undefined2 *)(PTR_DAT_08005ca0 + 0x10);\n  if (input == 2) {\n    result = calculate_divided_value();\n    result = result / ((((DAT_08005ca4[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((*DAT_08005ca4 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08005cb0;\n      if ((DAT_08005ca4[1] & 0x10000) != 0) {\n        result = DAT_08005ca8 / *(byte *)((int)&local_var1 - ((int)(DAT_08005ca4[1] << 0xe) >> 0x1f));\n      }\n      result = result * stack_array[(DAT_08005ca4[1] << 10) >> 0x1c];\n      if ((DAT_08005ca4[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08005cac * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((DAT_08005ca4[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08005ca4[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08005ca4[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08005ca4 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb8",
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "imported": true,
            "current_name": "calculate_value_08005bb8"
        },
        "FUN_08007648": {
            "renaming": {
                "iVar3": "result2",
                "puVar4": "ptr1",
                "param_1": "data",
                "local_1c": "zero",
                "local_2c": "zero3",
                "FUN_08007648": "initialize_data_for_operation_08007648",
                "local_28": "zero4",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "cVar1": "result3",
                "uVar2": "result1",
                "local_20": "zero6",
                "local_30": "zero2",
                "local_24": "zero5",
                "local_34": "zero1"
            },
            "code": "void initialize_data_for_operation_08007648(uint32_t *data, uint32_t param_2, uint32_t param_3, uint32_t param_4)\n{\n  uint32_t result1;\n  int result2;\n  uint32_t *ptr1;\n  uint32_t zero = 0;\n  uint32_t *ptr2 = data + 1;\n  data[0] = 0x40000000;\n  data[1] = 0x40000000;\n  data[4] = param_2;\n  result1 = calculate_result();\n  data[2] = (uint32_t)((uint64_t)DAT_080076dc * (uint64_t)result1 >> 0x32) - 1;\n  data[5] = 0;\n  data[3] = 0;\n  data[6] = 0;\n  data[19] = param_4;\n  uint32_t zero1 = 0;\n  uint32_t zero2 = 0;\n  uint32_t zero3 = 0;\n  uint32_t zero4 = 0;\n  uint32_t zero5 = 0;\n  uint32_t zero6 = 0;\n  zero1 = param_3;\n  char result3 = get_result(*data);\n  print_result((int)result3, 0xe, 0);\n  result3 = get_result(*data);\n  print_result((int)result3);\n  result2 = function1(ptr2);\n  if ((result2 == 0) && (result2 = function2(ptr2, &zero1, 0), result2 == 0)) {\n    function3(ptr2, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003f94",
                "FUN_08006128",
                "FUN_08003f30",
                "FUN_08007544",
                "FUN_080075dc",
                "FUN_08006280",
                "FUN_08006060"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007648",
            "calling": [
                "FUN_0800242c"
            ],
            "imported": true,
            "current_name": "initialize_data_for_operation_08007648"
        },
        "FUN_08008858": {
            "renaming": {
                "FUN_08008858": "returnZero_08008858"
            },
            "code": "int returnZero_08008858(void)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008858",
            "calling": [
                "FUN_0800a168"
            ],
            "imported": true,
            "current_name": "returnZero_08008858"
        },
        "FUN_08004a20": {
            "renaming": {
                "FUN_08004a20": "do_nothing_08004a20"
            },
            "code": "\nvoid do_nothing_08004a20(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a20",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": true,
            "current_name": "do_nothing_08004a20"
        },
        "FUN_080063c0": {
            "renaming": {
                "param_1": "data_pointer",
                "FUN_080063c0": "improve_data_080063c0",
                "param_2": "data_value",
                "puVar1": "pointer_to_data"
            },
            "code": "uint* pointer_to_data = improve_data_080063c0(pointer_to_data, param_2, 0);\nif ((pointer_to_data == DAT_0800641c) && ((pointer_to_data[8] & 0x1111) == 0) && ((pointer_to_data[8] & 0x444) == 0)) {\n    pointer_to_data[0x11] &= 0xffff7fff;\n}\nif (((pointer_to_data[8] & 0x1111) == 0) && ((pointer_to_data[8] & 0x444) == 0)) {\n    *pointer_to_data &= 0xfffffffe;\n}\n*(undefined *)((int)param_1 + 0x3d) = 1;\nreturn 0;",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080063c0",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": true,
            "current_name": "improve_data_080063c0"
        },
        "FUN_08004a24": {
            "renaming": {
                "param_1": "param_array",
                "pbVar2": "byte_array",
                "FUN_08004a24": "decode_08004a24",
                "cVar1": "end_char"
            },
            "code": "int decode_08004a24(int *param_array)\n{\n  char end_char = *(char *)((int)param_array + 0x3d);\n  if (*(short *)((int)param_array + 0x2a) != 0) {\n    byte *byte_array = (byte *)param_array[9];\n    param_array[9] = (int)(byte_array + 1);\n    *(uint *)(*param_array + 0x10) = (uint)*byte_array;\n    *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n    if ((*(short *)((int)param_array + 0x2a) == 0) && (end_char == ')')) {\n      *(uint *)(*param_array + 4) = *(uint *)(*param_array + 4) & 0xfffffbff;\n      param_array[0xc] = 0x21;\n      *(undefined *)((int)param_array + 0x3d) = 0x28;\n      do_nothing();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a24",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "decode_08004a24"
        },
        "FUN_08004a22": {
            "renaming": {
                "FUN_08004a22": "do_nothing_08004a22"
            },
            "code": "\nvoid do_nothing_08004a22(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a22",
            "calling": [
                "FUN_08004aec",
                "FUN_08004a24"
            ],
            "imported": true,
            "current_name": "do_nothing_08004a22"
        },
        "FUN_08002fba": {
            "renaming": {
                "param_1": "array_start_index",
                "param_2": "index",
                "FUN_08002fba": "get_value_at_index_08002fba"
            },
            "code": "int get_value_at_index_08002fba(int array_start_index, int index) {\n    return *(int *)(array_start_index + (index + 0x42) * 4);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fba",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": true,
            "current_name": "get_value_at_index_08002fba"
        },
        "FUN_080090cc": {
            "renaming": {
                "uVar1": "error_message_address",
                "puVar2": "assertion_failed_message",
                "param_1": "assertion_type",
                "param_2": "line_number",
                "param_3": "file_name",
                "param_4": "error_code",
                "uVar3": "random_value",
                "FUN_080090cc": "validate_assertion_080090cc",
                "uVar4": "error_code"
            },
            "code": "void validate_assertion_080090cc(int assertion_type, int line_number, char *file_name, int error_code) {\n  int error_message_address = *(int *)PTR_PTR_DAT_080090f8 + 0xc;\n  char *assertion_failed_message = PTR_s___function__080090fc;\n  if (file_name == (char *)0x0) goto LAB_080090f0;\n  do {\n    FUN_08009124(error_message_address, PTR_s_assertion___s__failed__file___s__08009100, error_code, assertion_type, line_number, assertion_failed_message, file_name, error_code);\n    long long unsigned int random_value = FUN_08009b5c();\n    line_number = (int)((random_value) >> 0x20);\n    error_message_address = (int)random_value;\nLAB_080090f0:\n    file_name = PTR_s__08009104;\n    assertion_failed_message = PTR_s__08009104;\n  } while(true);\n}",
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090cc",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": true,
            "current_name": "validate_assertion_080090cc"
        },
        "FUN_080049e0": {
            "renaming": {
                "flag": "flag",
                "param_1": "data_ptr",
                "puVar1": "data",
                "FUN_080049e0": "set_bit_and_flags_080049e0"
            },
            "code": "int set_bit_and_flags_080049e0(uint **data_ptr)\n{\n  uint *data = *data_ptr;\n  char flag = *(char *)((int)data_ptr + 0x3d);\n  if (flag != ' ')\n  {\n    return 2;\n  }\n  *(char *)((int)data_ptr + 0x3d) = '(';\n  if ((data[0] & 1) == 0)\n  {\n    data[0] |= 1;\n  }\n  *data |= 0x400;\n  data[1] |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049e0",
            "calling": [
                "FUN_08007f8e",
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007ff0"
            ],
            "imported": true,
            "current_name": "set_bit_and_flags_080049e0"
        },
        "FUN_08006d24": {
            "renaming": {
                "flag_value": "flag_value",
                "iVar1": "flags_start",
                "DAT_08006d78": "FLAG_B",
                "DAT_08006d74": "FLAG_A",
                "param_1": "flag_ptr",
                "DAT_08006d7c": "flags_start",
                "*(uint *)(iVar1 + 0x18)": "*(uint *)(flags_start + 0x18)",
                "*(uint *)(DAT_08006d7c + 0xc)": "*flags_ptr",
                "*(uint *)(iVar1 + 0xc)": "*(uint *)(flags_start + 0xc)",
                "FUN_08006d24": "update_flags_08006d24"
            },
            "code": "void update_flags_08006d24(int *flag_ptr)\n{\n  int DAT_08006d7c = DAT_08006d7c;\n  int flag_value = *flag_ptr;\n  if (flag_value != DAT_08006d74) {\n    if (flag_value == DAT_08006d78) {\n      uint *(uint *)(DAT_08006d7c + 0xc) = (uint *)(DAT_08006d7c + 0xc);\n      *(uint *)(DAT_08006d7c + 0xc) |= 0x400;\n      *(uint *)(DAT_08006d7c + 0xc) &= 0xfffffbff;\n      *(uint *)(DAT_08006d7c + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  uint *(uint *)(DAT_08006d7c + 0xc) = (uint *)(DAT_08006d7c + 0xc);\n  *(uint *)(DAT_08006d7c + 0xc) |= 0x200;\n  *(uint *)(DAT_08006d7c + 0xc) &= 0xfffffdff;\n  *(uint *)(DAT_08006d7c + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d24",
            "calling": [
                "FUN_08003ce8"
            ],
            "imported": true,
            "current_name": "update_flags_08006d24"
        },
        "FUN_080098d8": {
            "renaming": {
                "iVar1": "ptr",
                "release_memory": "release_memory",
                "uStack_8": "data3",
                "param_1": "data1",
                "execute": "execute",
                "uStack_4": "data4",
                "PTR_PTR_DAT_08009904": "PTR_DATA",
                "uStack_c": "data2",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "uVar2": "data1",
                "FUN_080098d8": "process_data_080098d8"
            },
            "code": "void process_data_080098d8(int data1, int data2, int data3, int data4)\n{\n  int ptr = *(int *)PTR_PTR_DAT_08009904;\n  if ((ptr != 0) && (*(int *)(ptr + 0x18) == 0)) {\n    release_memory(ptr);\n  }\n  execute(ptr, *(int *)(ptr + 8), data1, &data2, data1, &data2);\n  return;\n}",
            "called": [
                "FUN_08009d50",
                "FUN_0800937c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d8",
            "calling": [
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08007594",
                "FUN_08007544",
                "FUN_080075dc"
            ],
            "imported": true,
            "current_name": "process_data_080098d8"
        },
        "FUN_08009270": {
            "renaming": {
                "iVar4": "block_offset",
                "puVar3": "prev_block",
                "param_1": "size_ptr",
                "puVar5": "current_block",
                "puVar7": "prev_block",
                "param_2": "size",
                "puVar1": "current_byte",
                "uVar2": "ret_val",
                "uVar6": "block_size",
                "FUN_08009270": "allocate_memory_08009270",
                "uVar8": "padded_size"
            },
            "code": "uint allocate_memory_08009270(uint *size_ptr, uint size)\n{\n  uint *current_block;\n  uint *prev_block;\n  uint block_size;\n  uint padded_size = (size + 3 & 0xfffffffc) + 8;\n  if (padded_size < 0xc) {\n    padded_size = 0xc;\n  }\n  if (((int)padded_size < 0) || (padded_size < size)) {\n    *size_ptr = 0xc;\n  }\n  else {\n    do_nothing_08009f48();\n    current_block = *(uint **)PTR_DAT_08009324;\n    prev_block = *(uint **)PTR_DAT_08009324;\n    while (prev_block != (uint *)0x0) {\n      block_size = *prev_block - padded_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (current_block == prev_block) {\n            padded_size = current_block[1];\n            *(uint *)PTR_DAT_08009324 = padded_size;\n          }\n          else {\n            padded_size = prev_block[1];\n          }\n          if (current_block != prev_block) {\n            current_block[1] = padded_size;\n            current_block = prev_block;\n          }\n        }\n        else {\n          *prev_block = block_size;\n          *(uint *)((int)prev_block + block_size) = padded_size;\n          current_block = (uint *)((int)prev_block + block_size);\n        }\n        goto LAB_080092d4;\n      }\n      current_block = prev_block;\n      prev_block = (uint *)prev_block[1];\n    }\n    if (*(int *)PTR_DAT_08009328 == 0) {\n      uint ret_val = FUN_08009918(size_ptr);\n      *(uint *)PTR_DAT_08009328 = ret_val;\n    }\n    prev_block = (uint *)FUN_08009918(size_ptr,padded_size);\n    if ((prev_block != (uint *)0xffffffff) &&\n       ((current_block = (uint *)((int)prev_block + 3U & 0xfffffffc), prev_block == current_block ||\n        (block_size = FUN_08009918(size_ptr,(int)current_block - (int)prev_block), block_size != -1)))) {\n      *current_block = padded_size;\nLAB_080092d4:\n      do_nothing_08009f4a(size_ptr);\n      padded_size = (int)current_block + 0xbU & 0xfffffff8;\n      block_size = padded_size - (int)(current_block + 1);\n      if (block_size != 0) {\n        *(int *)((int)current_block + block_size) = -block_size;\n        return padded_size;\n      }\n      return padded_size;\n    }\n    *size_ptr = 0xc;\n    do_nothing_08009f4a(size_ptr);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48",
                "FUN_08009918"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009270",
            "calling": [
                "FUN_08009190",
                "FUN_08009eac",
                "FUN_08009d24",
                "FUN_08009908"
            ],
            "imported": true,
            "current_name": "allocate_memory_08009270"
        },
        "FUN_08005e6c": {
            "renaming": {
                "FUN_08005e6c": "do_nothing_08005e6c"
            },
            "code": "\nvoid do_nothing_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": true,
            "current_name": "do_nothing_08005e6c"
        },
        "FUN_08008500": {
            "renaming": {
                "FUN_08008500": "check_data_08008500",
                "iVar2": "start_time",
                "FUN_08003760": "get_start_time",
                "iVar3": "data_hash",
                "FUN_08007320": "get_data_hash",
                "PTR_DAT_080085b4": "data_array",
                "param_1": "data",
                "PTR_DAT_080085a8": "data_array",
                "FUN_080067ac": "process_data",
                "param_2": "param",
                "cVar1": "data_char",
                "PTR_DAT_080085b0": "data_array",
                "PTR_DAT_080085ac": "data_array",
                "uVar4": "i",
                "handle_error()": "handle_error"
            },
            "code": "uint check_data_08008500(uint data, uint param)\n{\n  int start_time = get_start_time();\n  char data_char = PTR_DAT_080085a8[1];\n  int data_hash = get_data_hash((int)data_char, PTR_DAT_080085a8);\n  if (data_hash == 0) {\n    return 0;\n  }\n  uint i = 0;\n  while ((i < 5 && ((PTR_DAT_080085a8[i] == 0) || (data_hash != get_data_hash((int)data_char, PTR_DAT_080085a8[i]))))) {\n    i++;\n  }\n  if (i > 4) {\n    if ((4 < (byte)PTR_DAT_080085a8[0x44]) && (handle_error(), 4 < (byte)PTR_DAT_080085a8[0x44])) {\n      return 0;\n    }\n    i = (uint)(byte)PTR_DAT_080085a8[0x44];\n  }\n  do {\n    data_hash = process_data(PTR_DAT_080085a8[i], data, param & 0xffff, 1000);\n    if (data_hash == 0) {\n      return param;\n    }\n    start_time = get_start_time();\n  } while ((uint)(start_time - get_start_time()) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_080084b0",
                "FUN_08007320",
                "FUN_08003760",
                "FUN_080067ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008500",
            "calling": [
                "FUN_0800885c"
            ],
            "imported": true,
            "current_name": "check_data_08008500"
        },
        "FUN_080048c8": {
            "renaming": {
                "FUN_080048c8": "process_input_080048c8",
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_len",
                "param_4": "output_data"
            },
            "code": "int process_input_080048c8(uint **input_ptr, uint *input_data, int input_len, uint *output_data){\n  int result = 0;\n  uint *ptr;\n  \n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (input_data == NULL) {\n      result = 1;\n    }\n    else if (input_len == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      ptr = *input_ptr;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_ptr = **input_ptr & 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x29;\n      *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n      result = 0;\n      input_ptr[0x10] = NULL;\n      input_ptr[9] = input_data;\n      *(short *)((int)input_ptr + 0x2a) = (short)input_len;\n      input_ptr[0xb] = output_data;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048c8",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": true,
            "current_name": "process_input_080048c8"
        },
        "FUN_08009954": {
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "iVar2": "remaining_length",
                "pcVar3": "destination_start",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "current_char"
            },
            "code": "void copy_string_08009954(char *destination, char *source, int length)\n{\n  char current_char;\n  int remaining_length;\n  char *destination_start = destination;\n  while ((current_char = *source) != '\\0' && remaining_length > 0) {\n    *destination++ = current_char;\n    source++;\n    remaining_length--;\n  }\n  while (destination < destination_start + length) {\n    *destination++ = '\\0';\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009954",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": true,
            "current_name": "copy_string_08009954"
        },
        "FUN_08005aa4": {
            "renaming": {
                "FUN_08005aa4": "set_flags_08005aa4",
                "iVar2": "start_time",
                "iVar3": "curr_time",
                "param_1": "flags",
                "puVar1": "flag_ptr",
                "uVar4": "flag_val",
                "bVar5": "flag_check"
            },
            "code": "uint32_t set_flags_08005aa4(uint32_t *flags)\n{\n  uint32_t *flag_ptr;\n  int32_t start_time;\n  int32_t curr_time;\n  uint32_t flag_val;\n  bool flag_check;\n  \n  if ((*flags & 1) != 0) {\n    flag_check = (*(uint32_t *)(DATA_08005bac + 0x1c) & 0x10000000) == 0;\n    if (flag_check) {\n      *(uint32_t *)(DATA_08005bac + 0x1c) = *(uint32_t *)(DATA_08005bac + 0x1c) | 0x10000000;\n    }\n    if ((*DATA_08005bb0 & 0x100) == 0) {\n      *DATA_08005bb0 = *DATA_08005bb0 | 0x100;\n      start_time = get_time();\n      while ((*DATA_08005bb0 & 0x100) == 0) {\n        curr_time = get_time();\n        if (100 < (uint32_t)(curr_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    flag_ptr = DATA_08005bb4;\n    start_time = DATA_08005bac;\n    flag_val = *(uint32_t *)(DATA_08005bac + 0x20) & 0x300;\n    if ((flag_val != 0) && (flag_val != (flags[1] & 0x300))) {\n      flag_val = *(uint32_t *)(DATA_08005bac + 0x20);\n      *DATA_08005bb4 = 1;\n      *flag_ptr = 0;\n      *(uint32_t *)(start_time + 0x20) = flag_val & 0xfffffcff;\n      if ((flag_val & 1) != 0) {\n        start_time = get_time();\n        while ((*(uint32_t *)(DATA_08005bac + 0x20) & 2) == 0) {\n          curr_time = get_time();\n          if (5000 < (uint32_t)(curr_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n    start_time = DATA_08005bac;\n    *(uint32_t *)(DATA_08005bac + 0x20) = *(uint32_t *)(DATA_08005bac + 0x20) & 0xfffffcff | flags[1];\n    if (flag_check) {\n      *(uint32_t *)(start_time + 0x1c) = *(uint32_t *)(start_time + 0x1c) & 0xefffffff;\n    }\n  }\n  if ((*flags & 2) != 0) {\n    *(uint32_t *)(DATA_08005bac + 4) = *(uint32_t *)(DATA_08005bac + 4) & 0xffff3fff | flags[2];\n  }\n  if ((*flags & 0x10) != 0) {\n    *(uint32_t *)(DATA_08005bac + 4) = *(uint32_t *)(DATA_08005bac + 4) & 0xffbfffff | flags[3];\n  }\n  return 0;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005aa4",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": true,
            "current_name": "set_flags_08005aa4"
        },
        "FUN_08005e6e": {
            "renaming": {
                "do_nothing_080064ae": "do_nothing_4",
                "FUN_08005e6e": "process_flags_08005e6e",
                "iVar1": "flags",
                "param_1": "params",
                "FUN_08007736": "do_something_3",
                "do_nothing_08005e68": "do_nothing_2",
                "do_nothing_08005e6c": "do_nothing_5",
                "do_nothing_08005e6a": "do_nothing",
                "do_nothing_080064ac": "do_nothing_6",
                "FUN_0800771c": "do_something_1"
            },
            "code": "void process_flags_08005e6e(int *params)\n{\n  int flags = *params;\n  if (((*(uint *)(flags + 0x10) & 2) != 0) && ((*(uint *)(flags + 0xc) & 2) != 0)) {\n    *(undefined4 *)(flags + 0x10) = 0xfffffffd;\n    *(undefined *)(params + 7) = 1;\n    if ((*(uint *)(*params + 0x18) & 3) == 0) {\n      do_something_1(params);\n      do_nothing(params);\n    }\n    else {\n      do_nothing_2(params);\n    }\n    *(undefined *)(params + 7) = 0;\n  }\n  flags = *params;\n  if (((*(uint *)(flags + 0x10) & 4) != 0) && ((*(uint *)(flags + 0xc) & 4) != 0)) {\n    *(undefined4 *)(flags + 0x10) = 0xfffffffb;\n    *(undefined *)(params + 7) = 2;\n    if ((*(uint *)(*params + 0x18) & 0x300) == 0) {\n      do_something_1(params);\n      do_nothing(params);\n    }\n    else {\n      do_nothing_2(params);\n    }\n    *(undefined *)(params + 7) = 0;\n  }\n  flags = *params;\n  if (((*(uint *)(flags + 0x10) & 8) != 0) && ((*(uint *)(flags + 0xc) & 8) != 0)) {\n    *(undefined4 *)(flags + 0x10) = 0xfffffff7;\n    *(undefined *)(params + 7) = 4;\n    if ((*(uint *)(*params + 0x1c) & 3) == 0) {\n      do_something_1(params);\n      do_nothing(params);\n    }\n    else {\n      do_nothing_2(params);\n    }\n    *(undefined *)(params + 7) = 0;\n  }\n  flags = *params;\n  if (((*(uint *)(flags + 0x10) & 0x10) != 0) && ((*(uint *)(flags + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(flags + 0x10) = 0xffffffef;\n    *(undefined *)(params + 7) = 8;\n    if ((*(uint *)(*params + 0x1c) & 0x300) == 0) {\n      do_something_1(params);\n      do_nothing(params);\n    }\n    else {\n      do_nothing_2(params);\n    }\n    *(undefined *)(params + 7) = 0;\n  }\n  flags = *params;\n  if (((*(uint *)(flags + 0x10) & 1) != 0) && ((*(uint *)(flags + 0xc) & 1) != 0)) {\n    *(undefined4 *)(flags + 0x10) = 0xfffffffe;\n    do_something_3(params);\n  }\n  flags = *params;\n  if (((*(uint *)(flags + 0x10) & 0x80) != 0) && ((*(uint *)(flags + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(flags + 0x10) = 0xffffff7f;\n    do_nothing_4(params);\n  }\n  flags = *params;\n  if (((*(uint *)(flags + 0x10) & 0x40) != 0) && ((*(uint *)(flags + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(flags + 0x10) = 0xffffffbf;\n    do_nothing_5(params);\n  }\n  flags = *params;\n  if (((*(uint *)(flags + 0x10) & 0x20) != 0) && ((*(uint *)(flags + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(flags + 0x10) = 0xffffffdf;\n    do_nothing_6(params);\n  }\n  return;\n}",
            "called": [
                "FUN_080064ae",
                "FUN_080064ac",
                "FUN_08005e6c",
                "FUN_08007736",
                "FUN_08005e6a",
                "FUN_0800771c",
                "FUN_08005e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6e",
            "calling": [],
            "imported": true,
            "current_name": "process_flags_08005e6e"
        },
        "FUN_08004024": {
            "renaming": {
                "FUN_08004024": "updateFlag_08004024",
                "param_1": "flagValue",
                "DAT_08004040": "flagPtr"
            },
            "code": "void updateFlag_08004024(int flagValue) {\n  if (flagValue != 4) {\n    *DAT_08004040 = *DAT_08004040 & 0xfffffffb;\n    return;\n  }\n  *DAT_08004040 = *DAT_08004040 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004024",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": true,
            "current_name": "updateFlag_08004024"
        },
        "FUN_08005e6a": {
            "renaming": {
                "FUN_08005e6a": "do_nothing_08005e6a"
            },
            "code": "\nvoid do_nothing_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6a",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": true,
            "current_name": "do_nothing_08005e6a"
        },
        "FUN_08002400": {
            "renaming": {
                "uVar1": "index",
                "FUN_08002400": "is_valid_param_08002400",
                "param_1": "param_index"
            },
            "code": "int is_valid_param_08002400(int param_index) {\n  int index = 0;\n  while (true) {\n    if (index > 11) {\n      return 0;\n    }\n    if ((PTR_DAT_08002428[(param_index * 12 + index) * 8] & 0x40) != 0) {\n      break;\n    }\n    index = (index + 1) % 256;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002400",
            "calling": [
                "FUN_080025ac",
                "FUN_08002644"
            ],
            "imported": true,
            "current_name": "is_valid_param_08002400"
        },
        "FUN_08004a1e": {
            "renaming": {
                "FUN_08004a1e": "do_nothing_08004a1e"
            },
            "code": "\nvoid do_nothing_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a1e",
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "imported": true,
            "current_name": "do_nothing_08004a1e"
        },
        "FUN_08000588": {
            "renaming": {
                "PTR_DAT_080005d4": "target_char_ptr",
                "PTR_DAT_080005d0": "decoded_char_array",
                "puVar3": "character_array",
                "param_1": "index",
                "FUN_08000588": "decode_character_08000588",
                "PTR_DAT_080005d8": "next_char_index_ptr",
                "FUN_08002644": "decode_character_helper",
                "PTR_DAT_080005cc": "character_array",
                "PTR_DAT_080005dc": "decoded_char_array",
                "cVar2": "current_char",
                "cVar1": "target_char"
            },
            "code": "void decode_character_08000588(int index) {\n  char current_char = PTR_DAT_080005cc[index];\n  char target_char = *PTR_DAT_080005d4;\n  if ((current_char == target_char) && (target_char != '\\0')) {\n    *PTR_DAT_080005d4 = target_char - 1;\n  }\n  else if (target_char != '\\0') {\n    char next_index = *PTR_DAT_080005d8;\n    *PTR_DAT_080005d8 = next_index + 1;\n    PTR_DAT_080005d0[next_index + 1 - 1] = current_char;\n  }\n  PTR_DAT_080005cc[index] = 0xff;\n  return;\n}",
            "called": [
                "FUN_08002644"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000588",
            "calling": [
                "FUN_080005f8",
                "FUN_08001cd0"
            ],
            "imported": true,
            "current_name": "decode_character_08000588"
        },
        "FUN_08002644": {
            "renaming": {
                "bVar1": "current_byte",
                "iVar3": "result",
                "DAT_08002674": "constant",
                "FUN_08002400": "perform_calculation",
                "PTR_DAT_08002670": "byte_array",
                "param_1": "input",
                "FUN_08002644": "process_byte_08002644",
                "FUN_08002578": "execute_function",
                "PTR_DAT_08002678": "function_pointer",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar2": "byte_index"
            },
            "code": "void process_byte_08002644(byte *input, uint32_t param_2, uint32_t param_3, uint32_t param_4) {\n  byte current_byte = PTR_DAT_08002670[*input * 8];\n  PTR_DAT_08002670[*input * 8] = current_byte & 0xbf;\n  int result = perform_calculation((uint32_t)((uint64_t)DAT_08002674 * (uint64_t)*input >> 0x23), param_2, current_byte & 0xbf, (int)((uint64_t)DAT_08002674 * (uint64_t)*input), param_4);\n  if (result == 0) {\n    execute_function(PTR_DAT_08002678);\n  }\n  return;\n}",
            "called": [
                "FUN_08002578",
                "FUN_08002400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002644",
            "calling": [
                "FUN_08000588"
            ],
            "imported": true,
            "current_name": "process_byte_08002644"
        },
        "FUN_08008868": {
            "renaming": {
                "FUN_08008868": "infiniteLoop_08008868"
            },
            "code": "void infiniteLoop_08008868(void)\n{\n  do {\n    /* WARNING: Do nothing block with infinite loop */\n  } while(true);\n}",
            "called": [
                "FUN_08008868"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008868",
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "imported": true,
            "current_name": "infiniteLoop_08008868"
        },
        "FUN_080036ac": {
            "renaming": {
                "uVar1": "index",
                "PTR_DAT_080036d0": "char_array",
                "param_1": "character",
                "FUN_080036ac": "find_char_index_080036ac"
            },
            "code": "uint find_char_index_080036ac(int character) {\n  uint index;\n  if ((uint)(character << 0x18) >> 0x1c < 5) {\n    for (index = 0; (index < 0x3c && (character != (char)PTR_DAT_080036d0[index])); index = index + 1)\n    {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036ac",
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a",
                "FUN_08001cd0",
                "FUN_080022f8",
                "FUN_08000aec",
                "FUN_08000a64",
                "FUN_08000ef8"
            ],
            "imported": true,
            "current_name": "find_char_index_080036ac"
        },
        "FUN_08002f1e": {
            "renaming": {
                "param_1": "function_pointer_address",
                "FUN_08002f1e": "call_function_pointer_08002f1e"
            },
            "code": "void call_function_pointer_08002f1e(int function_pointer_address) {\n  (**(void (**)())**(int *)(function_pointer_address + 0xc0))();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f1e",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": true,
            "current_name": "call_function_pointer_08002f1e"
        },
        "FUN_0800885c": {
            "renaming": {
                "FUN_08008500": "execute_function",
                "param_1": "function",
                "FUN_0800885c": "execute_function_with_params_0800885c",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3"
            },
            "code": "void execute_function_with_params_0800885c(void* function, void* param1, void* param2, void* param3)\n{\n    execute_function(function, param1, param2, param2, param3, param3);\n    return;\n}",
            "called": [
                "FUN_08008500"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800885c",
            "calling": [
                "FUN_0800a042"
            ],
            "imported": true,
            "current_name": "execute_function_with_params_0800885c"
        },
        "FUN_0800643c": {
            "renaming": {
                "PTR_DAT_0804a00c": "value_pointer",
                "FUN_08006420": "set_value_at_index",
                "param_1": "element_pointer",
                "DAT_0804a008": "index_value",
                "param_2": "flag_value",
                "FUN_0800643c": "set_flag_for_element_0800643c"
            },
            "code": "void set_flag_for_element_0800643c(uint **element_pointer, uint flag_value) {\n    set_value_at_index(*element_pointer, flag_value, 4);\n    (*element_pointer)[17] |= 0x8000;\n    **element_pointer |= 1;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800643c",
            "calling": [
                "FUN_08007118"
            ],
            "imported": true,
            "current_name": "set_flag_for_element_0800643c"
        },
        "FUN_08002fca": {
            "renaming": {
                "uVar1": "repeat_count",
                "param_1": "action",
                "param_2": "delay",
                "param_3": "num_repeats",
                "param_4": "arg1",
                "FUN_08008a24": "call_with_arg",
                "param_5": "arg2",
                "FUN_08002fca": "repeat_action_with_delay_08002fca",
                "do_nothing_08008ac4": "do_nothing"
            },
            "code": "void repeat_action_with_delay_08002fca(void* action, void* delay, int num_repeats, void* arg1, void* arg2)\n{\n  uint repeat_count;\n  for (repeat_count = 0; repeat_count < num_repeats; repeat_count++) {\n    do_nothing(arg2);\n    call_with_arg(action, arg1);\n    do_nothing(delay);\n    call_with_arg(action, arg2);\n  }\n  return;\n}",
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fca",
            "calling": [
                "FUN_08003002"
            ],
            "imported": true,
            "current_name": "repeat_action_with_delay_08002fca"
        },
        "FUN_08009c7c": {
            "renaming": {
                "bVar10": "carry_flag",
                "iVar2": "size_diff",
                "uVar1": "result",
                "iVar6": "bytes_processed",
                "iVar8": "carry_flag",
                "param_1": "data",
                "piVar3": "param_ptr",
                "UNRECOVERED_JUMPTABLE_00": "UNRECOVERED_JUMPTABLE_1",
                "unaff_r5": "FLAGS_2",
                "unaff_r4": "FLAGS_1",
                "param_2": "params",
                "FUN_08009c7c": "process_data_08009c7c",
                "pcVar7": "process_func",
                "uVar5": "flag_bits",
                "uVar4": "param_value",
                "uVar9": "flags"
            },
            "code": "uint32_t process_data_08009c7c(uint32_t *data, int *params)\n{\n    uint32_t result;\n    int size_diff, bytes_processed;\n    uint32_t flags;\n    uint16_t flag_bits;\n    int *param_ptr;\n    uint32_t param_value;\n    void *process_func;\n    bool carry_flag;\n    \n    if (params[4] == 0)\n    {\n        return 0;\n    }\n    \n    if (data != NULL && data[6] == 0)\n    {\n        initialize_data();\n    }\n    \n    if (params == PARAMS_1)\n    {\n        param_ptr = (int *)data[1];\n    }\n    else if (params == PARAMS_2)\n    {\n        param_ptr = (int *)data[2];\n    }\n    else if (params == PARAMS_3)\n    {\n        param_ptr = (int *)data[3];\n    }\n    \n    flag_bits = *(uint16_t *)(param_ptr + 3);\n    flags = (uint32_t)flag_bits;\n    \n    if ((int)(flags << 0x1c) < 0)\n    {\n        size_diff = params[4];\n        if (size_diff != 0)\n        {\n            carry_flag = (flags << 0x1e) != 0;\n            bytes_processed = 0;\n            if (!carry_flag)\n            {\n                bytes_processed = param_ptr[5];\n            }\n            process_func = (void *)param_ptr[10];\n            param_ptr[0] = size_diff;\n            param_ptr[2] = bytes_processed;\n            while (size_diff > 0)\n            {\n                bytes_processed = (*(func_ptr_t)process_func)(data, param_ptr[8], size_diff, bytes_processed, FLAGS_1, FLAGS_2);\n                if (bytes_processed < 1)\n                {\n                    flag_bits = *(uint16_t *)(param_ptr + 3);\n                    goto ERROR_HANDLER_1;\n                }\n                size_diff += bytes_processed;\n            }\n        }\n    }\n    else if ((params[1] > 0 || params[16] > 0) && (process_func = (void *)param_ptr[11]) != NULL)\n    {\n        param_value = *data;\n        *data = 0;\n        if ((flags & 0x1000) == 0)\n        {\n            bytes_processed = (*(func_ptr_t)process_func)(data, param_ptr[8], flags & 0x1000, 1, FLAGS_1, FLAGS_2);\n            if (bytes_processed == -1 && *data != 0)\n            {\n                if (*data != 0x1d && *data != 0x16)\n                {\n                    flag_bits = *(uint16_t *)(param_ptr + 3);\n                    goto ERROR_HANDLER_2;\n                }\n                *data = param_value;\n                goto END;\n            }\n        }\n        else\n        {\n            bytes_processed = params[21];\n        }\n        if ((int)(flags << 0x1d) < 0 && (size_diff = bytes_processed - params[1], param_ptr[13] != 0))\n        {\n            size_diff -= params[16];\n        }\n        bytes_processed = (*(func_ptr_t)process_func)(data, param_ptr[8], size_diff, 0, FLAGS_1, FLAGS_2);\n        flag_bits = *(uint16_t *)(param_ptr + 3);\n        if (bytes_processed == -1 && (*data > 0x1d || (-1 < (int)(flag_bits << (*data & 0xff)) << 0x1f)))\n        {\n            goto ERROR_HANDLER_1;\n        }\n        param_ptr[1] = 0;\n        param_ptr[0] = params[4];\n        if ((int)(flag_bits << 0x13) < 0 && (bytes_processed != -1 || *data == 0))\n        {\n            params[21] = bytes_processed;\n        }\n        if ((process_func = (void *)param_ptr[13]) != NULL)\n        {\n            if (process_func != param_ptr + 0x11)\n            {\n                cleanup_data();\n            }\n            param_ptr[13] = 0;\n            goto END;\n        }\n    }\n    \n    result = 0;\n    goto END;\n\nERROR_HANDLER_1:\n    flag_bits |= 0x40;\n    UNRECOVERED_JUMPTABLE_1();\n    result = -1;\n    goto END;\n\nERROR_HANDLER_2:\n    flag_bits |= 0x40;\n    UNRECOVERED_JUMPTABLE_2();\n    result = -1;\n    goto END;\n\nEND:\n    return result;\n}",
            "called": [
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009c7c",
            "calling": [
                "FUN_0800932c"
            ],
            "imported": true,
            "current_name": "process_data_08009c7c"
        },
        "FUN_08009b5c": {
            "renaming": {
                "uVar10": "data_uint_value",
                "bVar11": "bool_value",
                "uVar12": "undefined_value",
                "iVar2": "data_index",
                "piVar4": "data_array_ptr_2",
                "iVar7": "data_int_value",
                "piVar3": "data_array_ptr",
                "iVar9": "data_int_value_2",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "puVar1": "data_ptr",
                "FUN_08009b5c": "process_data_08009b5c",
                "uVar5": "data_value",
                "uVar6": "data_ushort_value",
                "pcVar8": "jump_table_ptr"
            },
            "code": "void process_data_08009b5c(void)\n{\n  uint *data_ptr;\n  int data_index;\n  int *data_array_ptr;\n  int *data_array_ptr_2;\n  uint data_value;\n  ushort data_ushort_value;\n  int data_int_value;\n  code *jump_table_ptr;\n  int data_int_value_2;\n  uint data_uint_value;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bool_value;\n  undefined8 undefined_value;\n  initialize(6);\n  UNRECOVERED_JUMPTABLE_00 = (code *)0x8009b6b;\n  undefined_value = get_data(1);\n  data_array_ptr = (int *)((ulonglong)undefined_value >> 0x20);\n  data_ptr = (uint *)undefined_value;\n  data_ushort_value = *(ushort *)(data_array_ptr + 3);\n  data_value = (uint)data_ushort_value;\n  if ((int)(data_value << 0x1c) < 0) {\n    data_index = data_array_ptr[4];\n    if (data_index != 0) {\n      data_int_value = data_value << 0x1e;\n      bool_value = data_int_value == 0;\n      if (bool_value) {\n        data_int_value = 0;\n      }\n      data_int_value_2 = *data_array_ptr;\n      if (!bool_value) {\n        data_int_value = data_array_ptr[5];\n      }\n      *data_array_ptr = data_index;\n      data_array_ptr[2] = data_int_value;\n      for (data_int_value_2 = data_int_value_2 - data_index; 0 < data_int_value_2; data_int_value_2 = data_int_value_2 - data_int_value) {\n        data_int_value = (*(code *)data_array_ptr[10])(data_ptr,data_array_ptr[8],data_index,data_int_value_2);\n        if (data_int_value < 1) {\n          data_ushort_value = *(ushort *)(data_array_ptr + 3);\n          goto LAB_08009c62;\n        }\n        data_index = data_index + data_int_value;\n      }\n    }\n  }\n  else if (((0 < data_array_ptr[1]) || (0 < data_array_ptr[0x10])) && (jump_table_ptr = (code *)data_array_ptr[0xb], jump_table_ptr != (code *)0x0)) {\n    data_uint_value = *data_ptr;\n    *data_ptr = 0;\n    if ((data_value & 0x1000) == 0) {\n      data_index = (*jump_table_ptr)(data_ptr,data_array_ptr[8],data_value & 0x1000,1);\n      if ((data_index == -1) && (data_value = *data_ptr, data_value != 0)) {\n        if ((data_value != 0x1d) && (data_value != 0x16)) {\n          *(ushort *)(data_array_ptr + 3) = *(ushort *)(data_array_ptr + 3) | 0x40;\n                    (*UNRECOVERED_JUMPTABLE_00)();\n          return;\n        }\n        *data_ptr = data_uint_value;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      data_index = data_array_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(data_array_ptr + 3) << 0x1d) < 0) && (data_index = data_index - data_array_ptr[1], data_array_ptr[0xd] != 0)) {\n      data_index = data_index - data_array_ptr[0x10];\n    }\n    data_index = (*(code *)data_array_ptr[0xb])(data_ptr,data_array_ptr[8],data_index,0);\n    data_ushort_value = *(ushort *)(data_array_ptr + 3);\n    if ((data_index == -1) && ((0x1d < *data_ptr || (-1 < (int)((DAT_08009c78 >> (*data_ptr & 0xff)) << 0x1f)))) {\nLAB_08009c62:\n      *(ushort *)(data_array_ptr + 3) = data_ushort_value | 0x40;\n                    (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    data_array_ptr[1] = 0;\n    *data_array_ptr = data_array_ptr[4];\n    if (((int)((uint)data_ushort_value << 0x13) < 0) && ((data_index != -1 || (*data_ptr == 0)))) {\n      data_array_ptr[0x15] = data_index;\n    }\n    data_array_ptr_2 = (int *)data_array_ptr[0xd];\n    *data_ptr = data_uint_value;\n    if (data_array_ptr_2 != (int *)0x0) {\n      if (data_array_ptr_2 != data_array_ptr + 0x11) {\n        cleanup(data_ptr);\n      }\n      data_array_ptr[0xd] = 0;\n                    (*UNRECOVERED_JUMPTABLE_00)();\n      return;\n    }\n  }\nLAB_08009b86:\n                    (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}",
            "called": [
                "FUN_08008868",
                "FUN_08009fe8",
                "FUN_080091d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009b5c",
            "calling": [
                "FUN_080090cc",
                "FUN_0800a18c"
            ],
            "imported": true,
            "current_name": "process_data_08009b5c"
        },
        "FUN_0800021a": {
            "renaming": {
                "PTR_DAT_080002e8": "PTR_DATA_ARRAY_3",
                "bVar1": "is_valid_data",
                "PTR_DAT_080002d8": "PTR_DATA_ARRAY",
                "iVar2": "result",
                "PTR_DAT_080002e4": "PTR_DATA_ARRAY_4",
                "FUN_08002fa0": "get_data",
                "FUN_0800738a": "check_valid_data",
                "FUN_08002fc2": "save_data",
                "param_1": "data_index",
                "FUN_080036ac": "get_temp_result",
                "param_2": "param_2",
                "PTR_DAT_080002dc": "PTR_DATA_ARRAY_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_080088e0": "process_valid_data",
                "PTR_DAT_080002e0": "PTR_DATA_ARRAY_5",
                "FUN_0800021a": "process_data_0800021a"
            },
            "code": "void process_data_0800021a(uint data_index, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  bool is_valid_data = false;\n  int result = get_data(PTR_DAT_080002d8, data_index, param_3, param_4, param_4);\n  \n  if (result == 3) {\n    if (data_index < 0x3c) {\n      if (PTR_DAT_080002dc[data_index] == -1) {\n        is_valid_data = false;\n      }\n      else {\n        int temp_result = get_temp_result();\n        if (temp_result == 0) {\n          is_valid_data = false;\n        }\n        else {\n          temp_result = get_temp_result((int)(char)PTR_DAT_080002dc[data_index]);\n          if (temp_result == 1) {\n            is_valid_data = false;\n          }\n          else {\n            is_valid_data = check_valid_data((int)(char)PTR_DAT_080002dc[data_index], PTR_DAT_080002e8);\n          }\n        }\n      }\n    }\n    else {\n      is_valid_data = false;\n    }\n    if (is_valid_data) {\n      process_valid_data(data_index, param_2);\n    }\n    save_data(PTR_DAT_080002d8, data_index, param_2);\n  }\n  else if (result == 4) {\n    if (data_index < 0x3c) {\n      if (PTR_DAT_080002dc[data_index] == -1) {\n        is_valid_data = false;\n      }\n      else {\n        int temp_result = get_temp_result();\n        if (temp_result == 0) {\n          is_valid_data = false;\n        }\n        else {\n          temp_result = get_temp_result((int)(char)PTR_DAT_080002dc[data_index]);\n          if (temp_result == 1) {\n            is_valid_data = false;\n          }\n          else {\n            is_valid_data = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid_data = false;\n    }\n    if (is_valid_data) {\n      process_valid_data(PTR_DAT_080002e4 + (uint)(byte)PTR_DAT_080002e0[data_index] * 3, param_2);\n    }\n    save_data(PTR_DAT_080002d8, data_index, param_2);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08002fa0",
                "FUN_0800738a",
                "FUN_080088e0",
                "FUN_08002fc2",
                "FUN_080026b0",
                "FUN_080036ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800021a",
            "calling": [
                "FUN_08000214"
            ],
            "imported": true,
            "current_name": "process_data_0800021a"
        },
        "FUN_08008a6c": {
            "renaming": {
                "iVar2": "index",
                "PTR_DAT_08008ab4": "char_array",
                "param_1": "input",
                "cVar1": "result",
                "uVar3": "val",
                "FUN_08008a6c": "is_valid_input_08008a6c",
                "uVar4": "char_val",
                "PTR_DAT_08008ab8": "index_array"
            },
            "code": "bool is_valid_input_08008a6c(uint input) {\n    uint char_val;\n    if (input < 0x3c) {\n        char_val = (uint)(char)PTR_DAT_08008ab4[input];\n    }\n    else {\n        char_val = 0xffffffff;\n    }\n    if (char_val == 0xffffffff) {\n        return false;\n    }\n    else {\n        int index = FUN_08006b28(char_val, PTR_DAT_08008ab8);\n        if (index == 0) {\n            return false;\n        }\n        else {\n            uint mask = (char_val << 0x18) >> 0x1c;\n            uint bit = 1 << (char_val & 0xf) & 0xffff;\n            uint val = FUN_08006b7c(mask);\n            return FUN_080072f0(val, bit) != 0;\n        }\n    }\n}",
            "called": [
                "FUN_08006b28",
                "FUN_08006b7c",
                "FUN_080072f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a6c",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": true,
            "current_name": "is_valid_input_08008a6c"
        },
        "FUN_080026f8": {
            "renaming": {
                "*param_1": "input_byte",
                "PTR_DAT_08002708": "PTR_DAT_08002708",
                "FUN_080026f8": "get_shifted_byte_value_080026f8"
            },
            "code": "uint get_shifted_byte_value_080026f8(byte *input_byte){\n    uint byte_index = (uint)*input_byte * 8;\n    uint shifted_value = (uint)(byte)PTR_DAT_08002708[byte_index] << 25;\n    uint masked_value = shifted_value >> 31;\n    return masked_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026f8",
            "calling": [
                "FUN_080005f8",
                "FUN_08001cd0"
            ],
            "imported": true,
            "current_name": "get_shifted_byte_value_080026f8"
        },
        "FUN_080085b8": {
            "renaming": {
                "uVar1": "recordValue",
                "param_1": "recordAddress",
                "FUN_080085b8": "isFlaggedAsValid_080085b8"
            },
            "code": "bool isFlaggedAsValid_080085b8(int recordAddress) {\n  uint recordValue = getValueFromRecord(*(undefined4 *)(PTR_DAT_080085d8 + (uint)*(byte *)(recordAddress + 0x44) * 4));\n  return (recordValue & 0x22) == 0x22;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085b8",
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "imported": true,
            "current_name": "isFlaggedAsValid_080085b8"
        },
        "FUN_08001c08": {
            "renaming": {
                "FUN_08001c08": "get_data_from_pointer_08001c08",
                "PTR_DAT_08001c14": "PTR_DATA",
                "uVar1": "data",
                "FUN_08002720": "get_data_from_pointer"
            },
            "code": "undefined get_data_from_pointer_08001c08(void)\n{\n  undefined data;\n  data = get_data_from_pointer_08001c08(PTR_DAT_08001c14);\n  return data;\n}",
            "called": [
                "FUN_08002720"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c08",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": true,
            "current_name": "get_data_from_pointer_08001c08"
        },
        "FUN_080075dc": {
            "renaming": {
                "FUN_080075dc": "check_clock_source_080075dc",
                "local_c": "local_var3",
                "FUN_08007594": "check_source_type",
                "param_1": "clock_source",
                "local_1c": "local_var4",
                "local_18": "local_var5",
                "FUN_08005a68": "get_local_vars",
                "PTR_s_TIM__Unknown_clock_source_08007644": "unknown_clock_source",
                "local_10": "local_var1",
                "local_20": "local_var6",
                "local_14": "local_var6",
                "FUN_08005a48": "get_source_type2",
                "FUN_08005a28": "get_source_type1"
            },
            "code": "int check_clock_source_080075dc(uint clock_source)\n{\n  uint local_var1;\n  int result;\n  uint local_var3;\n  uint local_var4;\n  uint local_var5;\n  uint local_var6;\n  local_var4 = 0;\n  local_var5 = 0;\n  local_var6 = 0;\n  local_var1 = 0;\n  result = 0;\n  FUN_08005a68(&local_var4,&local_var6);\n  int check_result = FUN_08007594(clock_source);\n  if (check_result == 1) {\n    result = FUN_08005a28();\n  }\n  else if (check_result == 2) {\n    result = FUN_08005a48();\n    local_var3 = local_var1;\n  }\n  else {\n    FUN_080098d8(PTR_s_TIM__Unknown_clock_source_08007644);\n    result = 0;\n    local_var3 = 0;\n  }\n  if (local_var3 != 0x500) {\n    if (local_var3 < 0x501) {\n      if (local_var3 != 0x400) {\n        return result;\n      }\n    }\n    else if ((local_var3 != 0x600) && (local_var3 != 0x700)) {\n      return result;\n    }\n  }\n  return result << 1;\n}",
            "called": [
                "FUN_08005a28",
                "FUN_08005a68",
                "FUN_08007594",
                "FUN_08005a48",
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080075dc",
            "calling": [
                "FUN_08007648",
                "FUN_08007118"
            ],
            "imported": true,
            "current_name": "check_clock_source_080075dc"
        },
        "FUN_08007544": {
            "renaming": {
                "FUN_08007544": "get_timer_type_08007544",
                "DAT_0800758c": "timer_threshold_2",
                "param_1": "timer_value",
                "DAT_08007588": "timer_threshold_1",
                "PTR_s_TIM__Unknown_timer_IRQn_08007590": "timer_interrupt_handler"
            },
            "code": "int get_timer_type_08007544(uint32_t timer_value) {\n  if (timer_value == UINT32_MAX) {\n    return 0;\n  }\n  if (timer_value == DAT_08007588) {\n    return 29;\n  }\n  if (DAT_08007588 < timer_value) {\n    if (timer_value == DAT_0800758c) {\n      return 30;\n    }\n    if (timer_value == DAT_0800758c + 0x12400) {\n      return 25;\n    }\n  }\n  else if (timer_value == 0x40000000) {\n    return 28;\n  }\n  trigger_timer_interrupt(PTR_s_TIM__Unknown_timer_IRQn_08007590);\n  return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007544",
            "calling": [
                "FUN_080076e0",
                "FUN_08007648"
            ],
            "imported": true,
            "current_name": "get_timer_type_08007544"
        },
        "FUN_08007ff0": {
            "renaming": {
                "(code **)": "(function_pointer **)",
                "iVar1": "function_pointer",
                "FUN_08007ff0": "check_and_execute_function_08007ff0",
                "param_1": "input_param",
                "(char *)": "(function_pointer *)",
                "(code *)": "(function_pointer *)",
                "FUN_080049e0": "execute_another_function",
                "FUN_08007f78": "get_function_pointer"
            },
            "code": "void check_and_execute_function_08007ff0(undefined4 input_param)\n{\n  int function_pointer;\n  \n  function_pointer = get_function_pointer();\n  if (((*(code **)(function_pointer + 0x60) != (code *)0x0) && (*(char *)(function_pointer + 0x5c) == '\\x01')) &&\n     (*(char *)(function_pointer + 0x2c) != ' ')) {\n    (**(code **)(function_pointer + 0x60))(function_pointer + 0x68);\n  }\n  execute_another_function(input_param);\n  return;\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ff0",
            "calling": [
                "FUN_08004aec",
                "FUN_08005084",
                "FUN_08004f3c"
            ],
            "imported": true,
            "current_name": "check_and_execute_function_08007ff0"
        },
        "FUN_08008990": {
            "renaming": {
                "iVar1": "result",
                "FUN_08008990": "process_data_08008990",
                "iVar3": "index",
                "puVar2": "buffer_ptr",
                "param_1": "data_index",
                "param_2": "mode",
                "param_3": "flag",
                "param_4": "data_buffer"
            },
            "code": "void process_data_08008990(uint data_index, uint mode, uint flag, char* data_buffer) {\n  int index = -1;\n  char* buffer_ptr = PTR_DAT_08008a14;\n  if (data_index < 0x3c) {\n    index = (int)(char)buffer_ptr[data_index];\n  }\n  else {\n    buffer_ptr = data_buffer;\n  }\n  if (index != -1) {\n    int result = FUN_08006b28(index, PTR_DAT_08008a18, flag, buffer_ptr, data_buffer);\n    if (result != 0) {\n      result = FUN_0800738a(index, PTR_DAT_08008a1c);\n      if (result != 0) {\n        FUN_080071e4(index);\n      }\n      FUN_08006b5c(index, PTR_DAT_08008a18);\n    }\n    switch(mode) {\n    case 0:\n      FUN_08007258(index, 0);\n      break;\n    case 1:\n      FUN_08007258(index, 1, 0);\n      break;\n    case 2:\n      FUN_08007258(index, 0, 1);\n      break;\n    case 3:\n      FUN_08007258(index, 0, 2);\n    }\n    FUN_08006b3e(index, PTR_DAT_08008a20);\n  }\n  return;\n}",
            "called": [
                "FUN_08006b5c",
                "FUN_0800738a",
                "FUN_08006b28",
                "FUN_080071e4",
                "FUN_08006b3e",
                "FUN_08007258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008990",
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_080025ac",
                "FUN_08003002"
            ],
            "imported": true,
            "current_name": "process_data_08008990"
        },
        "FUN_08008078": {
            "renaming": {
                "FUN_08008078": "FUNC_08008078"
            },
            "code": "\nvoid FUNC_08008078(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = FUN_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n    iVar3 = FUN_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      FUN_080098d8(PTR_s_ERROR__at_least_one_UART_pin_has_08008348,iVar3);\n    }\n    else {\n      iVar4 = FUN_080073ae(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08008340;\n      iVar3 = DAT_0800833c;\n      iVar2 = DAT_08008338;\n      if (iVar4 == 0) {\n        FUN_080098d8(PTR_s_ERROR__U_S_ART_pins_mismatch_0800834c);\n      }\n      else {\n        if (iVar4 == DAT_08008338) {\n          *(uint *)(DAT_08008338 + 0xd80c) = *(uint *)(DAT_08008338 + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_0800833c) {\n          *(uint *)(DAT_0800833c + 0x1cc10) = *(uint *)(DAT_0800833c + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08008340) {\n          *(uint *)(DAT_08008340 + 0x1c810) = *(uint *)(DAT_08008340 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = FUN_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08008344 + 0x18) = *(uint *)(DAT_08008344 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        FUN_080040e8(uVar5,&local_20);\n        uVar5 = FUN_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = FUN_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        FUN_080040e8(uVar5,&local_20);\n        *(int **)(PTR_DAT_08008354 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        FUN_0800674e(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08006bb8",
                "FUN_080073ae",
                "FUN_080040e8",
                "FUN_08007320",
                "FUN_0800674e",
                "FUN_08007376",
                "FUN_080098d8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008078",
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "imported": true,
            "current_name": "FUNC_08008078"
        },
        "FUN_08004396": {
            "renaming": {
                "FUN_08004396": "set_value_at_offset_08004396",
                "param_1": "base_ptr"
            },
            "code": "void set_value_at_offset_08004396(int *base_ptr, int offset) {\n    uint8_t value = base_ptr[offset + 0x11] & 0xff;\n    *(uint *)(base_ptr + 0x10) = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004396",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "set_value_at_offset_08004396"
        },
        "FUN_08003fb0": {
            "renaming": {
                "DAT_08003fd4": "array_start_ptr",
                "FUN_08003fb0": "set_bit_in_array_08003fb0",
                "param_1": "bit_index"
            },
            "code": "void set_bit_in_array_08003fb0(uint bit_index)\n{\n  if (bit_index >= 0) {\n    uint array_index = (bit_index >> 5) + 0x20;\n    uint* array_ptr = (uint*)(DAT_08003fd4 + array_index * 4);\n    uint mask = 1 << (bit_index & 0x1f);\n    *array_ptr = mask;\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fb0",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": true,
            "current_name": "set_bit_in_array_08003fb0"
        },
        "FUN_080052f0": {
            "renaming": {
                "puVar2": "param_ptr",
                "FUN_08004f3c": "update_params",
                "param_1": "params",
                "FUN_080052f0": "check_and_update_flags_080052f0",
                "FUN_08004aec": "perform_action",
                "param_1[0xc]": "params[12]",
                "cVar1": "c",
                "uVar3": "flags1",
                "DAT_080053c8": "FLAG_1",
                "uVar4": "flags2"
            },
            "code": "void check_and_update_flags_080052f0(uint **params)\n{\n  char c;\n  uint *param_ptr;\n  uint flags1;\n  uint flags2;\n  \n  param_ptr = *params;\n  flags1 = param_ptr[5];\n  flags2 = param_ptr[1];\n  if (((flags1 & DAT_080053c8) != 0) && ((flags2 & 0x100) != 0)) {\n    params[16] = (uint *)((uint)params[16] | 1);\n    param_ptr[5] = 0xfffffeff;\n    **params = **params | 0x8000;\n  }\n  if (((flags1 & FLAG_2) != 0) && ((flags2 & 0x100) != 0)) {\n    params[16] = (uint *)((uint)params[16] | 2);\n    (*params)[5] = 0xfffffdff;\n  }\n  if (((flags1 & FLAG_3) != 0) && ((flags2 & 0x100) != 0)) {\n    c = *(char *)((int)params + 0x3d);\n    if (((*(char *)((int)params + 0x3e) == ' ') && (*(short *)((int)params + 0x2a) == 0)) &&\n       (((c == '!' || (c == ')')) || ((c == '(' && (params[0xc] == (uint *)0x21)))))) {\n      perform_action(params);\n    }\n    else {\n      params[16] = (uint *)((uint)params[16] | 4);\n      if (*(char *)((int)params + 0x3e) == '\\x10') {\n        **params = **params | 0x200;\n      }\n      (*params)[5] = 0xfffffbff;\n    }\n  }\n  if (((flags1 & FLAG_4) != 0) && ((flags2 & 0x100) != 0)) {\n    params[16] = (uint *)((uint)params[16] | 8);\n    (*params)[5] = 0xfffff7ff;\n  }\n  if (params[16] != (uint *)0x0) {\n    update_params(params);\n  }\n  return;\n}",
            "called": [
                "FUN_08004aec",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052f0",
            "calling": [],
            "imported": true,
            "current_name": "check_and_update_flags_080052f0"
        },
        "FUN_08008f0c": {
            "renaming": {
                "FUN_08008f0c": "do_nothing_08008f0c"
            },
            "code": "\nvoid do_nothing_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0c",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": true,
            "current_name": "do_nothing_08008f0c"
        },
        "FUN_08002ec4": {
            "renaming": {
                "param_1": "pointer_address",
                "FUN_08002ec4": "call_function_pointer_08002ec4",
                "**(int **)(param_1 + 0xc0) + 8": "**(int **)(pointer_address + 0xc0) + 8",
                "**function_pointer": "function_pointer()"
            },
            "code": "void call_function_pointer_08002ec4(int pointer_address){\n    void (*function_pointer)() = (*(void (**)(void))(**(int **)(pointer_address + 0xc0) + 8));\n    function_pointer();\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec4",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": true,
            "current_name": "call_function_pointer_08002ec4"
        },
        "FUN_08007306": {
            "renaming": {
                "param_1": "value",
                "FUN_08007306": "find_value_in_array_08007306",
                "*param_2": "*array",
                "param_2": "array",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ find_value_in_array_08007306(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_-DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007306",
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "imported": true,
            "current_name": "find_value_in_array_08007306"
        },
        "FUN_08008f0e": {
            "renaming": {
                "FUN_08003f0c": "set_system_mode",
                "FUN_08008f0e": "initialize_system_08008f0e",
                "FUN_080036a2": "initialize_components"
            },
            "code": "void initialize_system_08008f0e(void)\n{\n  set_system_mode(3);\n  initialize_components();\n  return;\n}",
            "called": [
                "FUN_08003f0c",
                "FUN_080036a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0e",
            "calling": [
                "FUN_08009148"
            ],
            "imported": true,
            "current_name": "initialize_system_08008f0e"
        },
        "FUN_08002f2c": {
            "renaming": {
                "param_1": "unused",
                "FUN_08002f2c": "set_value_at_address_based_on_parameter_08002f2c",
                "param_2": "parameter",
                "param_3": "value"
            },
            "code": "void set_value_at_address_based_on_parameter_08002f2c(uint8_t parameter, uint32_t value) {\n  switch(parameter) {\n    case 0x90:\n      *(uint32_t *)PTR_DAT_08002f74 = value;\n      break;\n    case 0xc0:\n      *(uint32_t *)PTR_DAT_08002f70 = value;\n      break;\n    case 0xd0:\n      *(uint32_t *)PTR_DAT_08002f78 = value;\n      break;\n    case 0xe0:\n      *(uint32_t *)PTR_DAT_08002f6c = value;\n      break;\n    case 0xf4:\n      *(uint32_t *)PTR_DAT_08002f7c = value;\n      break;\n    case 0xf5:\n      *(uint32_t *)PTR_DAT_08002f80 = value;\n      break;\n    default:\n      break;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f2c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": true,
            "current_name": "set_value_at_address_based_on_parameter_08002f2c"
        },
        "FUN_08004954": {
            "renaming": {
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1": "input_ptr",
                "FUN_08004954": "process_input_08004954",
                "param_2": "input_val",
                "param_3": "input_len",
                "param_4": "input_buf"
            },
            "code": "int process_input_08004954(uint **input_ptr, uint *input_val, int input_len, uint *input_buf){\n  int result;\n  uint *ptr;\n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (input_val == NULL) {\n      result = 1;\n    }\n    else if (input_len == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      ptr = *input_ptr;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_ptr = **input_ptr & 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x2a;\n      *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n      result = 0;\n      input_ptr[0x10] = NULL;\n      input_ptr[9] = input_val;\n      *(short *)((int)input_ptr + 0x2a) = (short)input_len;\n      input_ptr[0xb] = input_buf;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004954",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": true,
            "current_name": "process_input_08004954"
        },
        "FUN_08005cec": {
            "renaming": {
                "uVar1": "modified_val_1",
                "param_1": "struct_address",
                "FUN_08005cec": "update_data_struct_08005cec",
                "param_2": "data_array",
                "uVar3": "modified_val_3",
                "uVar2": "modified_val_2"
            },
            "code": "void update_data_struct_08005cec(int struct_address, uint *data_array)\n{\n  uint modified_val_1;\n  uint modified_val_2;\n  uint modified_val_3;\n  \n  modified_val_1 = *(uint *)(struct_address + 0x20) & 0xfffffffe;\n  modified_val_2 = *(uint *)(struct_address + 4);\n  modified_val_3 = *data_array;\n  modified_val_1 = (modified_val_1 & 0xfffffffd) | data_array[2];\n  if (struct_address == PTR_08005d44) {\n    modified_val_1 = (modified_val_1 & 0xfffffff7) | data_array[3];\n    modified_val_2 = (modified_val_2 & 0xfffffcff) | data_array[5] | data_array[6];\n  }\n  *(uint *)(struct_address + 4) = modified_val_2;\n  *(uint *)(struct_address + 0x18) = *(uint *)(struct_address + 0x18) & 0xffffff8c | modified_val_3;\n  *(uint *)(struct_address + 0x34) = data_array[1];\n  *(uint *)(struct_address + 0x20) = modified_val_1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": true,
            "current_name": "update_data_struct_08005cec"
        },
        "FUN_0800886c": {
            "renaming": {
                "FUN_0800886c": "set_pointer_value_0800886c",
                "PTR_DAT_08008878": "pointer_to_value"
            },
            "code": "void set_pointer_value_0800886c(void)\n{\n  int new_value = 22;\n  int* PTR_DAT_08008878 = (int*) PTR_DAT_08008878;\n  *PTR_DAT_08008878 = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800886c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": true,
            "current_name": "set_pointer_value_0800886c"
        },
        "FUN_08003748": {
            "renaming": {
                "*PTR_DAT_08003758": "intPointer",
                "*PTR_DAT_0800375c": "bytePointer",
                "FUN_08003748": "addByteToUintAndStore_08003748"
            },
            "code": "void addByteToUintAndStore_08003748() {\n    uint* u*PTR_DAT_08003758 = (uint*)PTR_DAT_08003758;\n    byte* *PTR_DAT_0800375c = (byte*)PTR_DAT_0800375c;\n    int* *PTR_DAT_08003758 = (int*)PTR_DAT_08003758;\n    u*PTR_DAT_08003758[0] = *PTR_DAT_0800375c[0] + *PTR_DAT_08003758[0];\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003748",
            "calling": [
                "FUN_08007246"
            ],
            "imported": true,
            "current_name": "addByteToUintAndStore_08003748"
        },
        "FUN_080040e8": {
            "renaming": {
                "iVar8": "i",
                "update_data": "update_data",
                "param_1": "bits_to_update",
                "iVar10": "update_index",
                "update_mask": "update_mask",
                "FUN_080040e8": "decode_and_update_bits_080040e8",
                "param_2": "bits_to_decode",
                "puVar1": "bits_ptr",
                "uVar3": "bit_value",
                "uVar2": "bit_mask",
                "update_ptr": "update_ptr",
                "uVar5": "decoded_offset",
                "uVar4": "decoded_value",
                "uVar7": "update_value",
                "uVar6": "bit_offset",
                "uVar9": "decoded_data"
            },
            "code": "void decode_and_update_bits_080040e8(uint *bits_to_update, uint *bits_to_decode) {\n  uint *bits_ptr;\n  uint bit_mask;\n  uint bit_value;\n  uint decoded_value;\n  uint decoded_offset;\n  uint bit_offset;\n  uint update_value;\n  int update_index;\n  uint *update_ptr;\n  uint *update_mask;\n  uint *update_data;\n  int i;\n\n  decoded_offset = 0;\n  bit_offset = 0;\n  while (bit_offset <= 0xf) {\n    if (bit_offset > 0xf) {\n      return;\n    }\n    bit_mask = 1 << (bit_offset & 0xff);\n    bit_value = *bits_to_decode & bit_mask;\n    if (bit_mask == bit_value) {\n      decoded_value = bits_to_decode[1];\n      if (decoded_value == 0x12) {\n        decoded_offset = bits_to_decode[3] + 0xc;\n      } else if (decoded_value < 0x13) {\n        if (decoded_value == 2) {\n          decoded_offset = bits_to_decode[3] + 8;\n        } else if (decoded_value < 3) {\n          if (decoded_value == 0) goto LAB_0800423a;\n          if (decoded_value == 1) {\n            decoded_offset = bits_to_decode[3];\n          }\n        } else if (decoded_value == 3) {\n          decoded_offset = 0;\n        } else if (decoded_value == 0x11) {\n          decoded_offset = bits_to_decode[3] + 4;\n        }\n      } else {\n        if (decoded_value != PTR_DAT_080042c8) {\n          if (PTR_DAT_080042c8 < decoded_value) {\n            if (decoded_value == PTR_DAT_080042cc) goto LAB_0800423a;\n            decoded_data = PTR_DAT_080042cc + 0x10000;\n            decoded_mask = PTR_DAT_080042cc;\n          } else {\n            decoded_data = PTR_DAT_080042c8 - 0x100000;\n            decoded_mask = PTR_DAT_080042c8;\n          }\n          if ((decoded_value != decoded_data) && (decoded_value != decoded_mask - 0xf0000)) goto LAB_080040fe;\n        }\n      }\n      decoded_offset = decoded_offset << (decoded_offset << 2 & 0xff);\n      update_index = bit_offset;\n      update_ptr = bits_to_update;\n      if (0xff < bit_value) {\n        update_index = bit_offset - 8;\n        update_ptr = bits_to_update + 1;\n      }\n      update_value = *update_ptr & ~(0xf << (update_index << 2 & 0xff)) | decoded_offset << (update_index << 2 & 0xff);\n      *update_ptr = update_value;\n      if ((bits_to_decode[1] & 0x10000000) != 0) {\n        *PTR_DAT_080042bc = *PTR_DAT_080042bc | 1;\n        i = (bit_offset & 3) << 2;\n        if (update_ptr == PTR_DAT_080042d0) {\n          update_data = 0;\n        } else if (update_ptr == PTR_DAT_080042d0 + 0x100) {\n          update_data = 1;\n        } else if (update_ptr == PTR_DAT_080042d0 + 0x200) {\n          update_data = 2;\n        } else if (update_ptr == PTR_DAT_080042d0 + 0x300) {\n          update_data = 3;\n        } else {\n          update_data = 4;\n        }\n        *(uint *)(PTR_DAT_080042c0 + ((bit_offset >> 2) + 2) * 4) = *(uint *)(PTR_DAT_080042c0 + ((bit_offset >> 2) + 2) * 4) & ~(0xf << i) | update_data << i;\n        if ((bits_to_decode[1] & 0x10000) == 0) {\n          *PTR_DAT_080042c4 = *PTR_DAT_080042c4 & ~bit_mask;\n        } else {\n          *PTR_DAT_080042c4 = *PTR_DAT_080042c4 | bit_mask;\n        }\n        if ((bits_to_decode[1] & 0x20000) == 0) {\n          PTR_DAT_080042c4[1] = PTR_DAT_080042c4[1] & ~bit_mask;\n        } else {\n          PTR_DAT_080042c4[1] = PTR_DAT_080042c4[1] | bit_mask;\n        }\n        if ((bits_to_decode[1] & 0x100000) == 0) {\n          PTR_DAT_080042c4[2] = PTR_DAT_080042c4[2] & ~bit_mask;\n        } else {\n          PTR_DAT_080042c4[2] = PTR_DAT_080042c4[2] | bit_mask;\n        }\n        if ((bits_to_decode[1] & 0x200000) == 0) {\n          PTR_DAT_080042c4[3] = PTR_DAT_080042c4[3] & ~bit_mask;\n        } else {\n          PTR_DAT_080042c4[3] = bit_mask | PTR_DAT_080042c4[3];\n        }\n      }\n    }\n    bit_offset = bit_offset + 1;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_08006ca8",
                "FUN_08006e68",
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08007258"
            ],
            "imported": true,
            "current_name": "decode_and_update_bits_080040e8"
        },
        "FUN_080036d4": {
            "renaming": {
                "FUN_080036d4": "do_nothing_080036d4"
            },
            "code": "\nvoid do_nothing_080036d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d4",
            "calling": [
                "FUN_08003724"
            ],
            "imported": true,
            "current_name": "do_nothing_080036d4"
        },
        "FUN_0800288c": {
            "renaming": {
                "iVar2": "status",
                "param_1": "data_size",
                "cVar4": "count_char",
                "param_2": "data_byte",
                "puVar1": "data_ptr",
                "uVar3": "result",
                "uVar5": "new_count",
                "FUN_0800288c": "process_data_0800288c",
                "uVar6": "count",
                "local_11": "local_byte"
            },
            "code": "int process_data_0800288c(int data_size, char data_byte)\n{\n  int *data_ptr = PTR_DATA_PTR;\n  int result = 0;\n  char local_byte = data_byte;\n  if (*PTR_FLAG == 0)\n  {\n    int status = FUNC_A(data_size + 0x14, &local_byte, 1);\n    if (status == 0)\n    {\n      result = 1;\n    }\n  }\n  else\n  {\n    uint8_t count = (uint8_t)*PTR_COUNT + 1;\n    if ((uint8_t)*PTR_LIMIT < count)\n    {\n      count = 0x20;\n    }\n    int new_data = FUNC_B(*(int *)PTR_DATA_PTR, count);\n    *data_ptr = new_data;\n    if (new_data == 0)\n    {\n      result = 0;\n    }\n    else\n    {\n      *(char *)(*(int *)PTR_DATA_PTR + (uint8_t)*PTR_INDEX) = local_byte;\n      char count_char = *PTR_COUNT + 1;\n      *PTR_COUNT = count_char;\n      *PTR_LIMIT = count_char;\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08007ede",
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800288c",
            "calling": [
                "FUN_08001bf8"
            ],
            "imported": true,
            "current_name": "process_data_0800288c"
        },
        "FUN_0800010c": {
            "renaming": {
                "param_1": "hasFunctionPointer",
                "DAT_08000128": "functionPointer",
                "PTR_DAT_08000124": "hasCalledBefore",
                "FUN_0800010c": "isFirstCall_0800010c"
            },
            "code": "bool isFirstCall_0800010c(bool* PTR_DAT_08000124){\n  if (*PTR_DAT_08000124 == false) {\n    if (hasFunctionPointer != nullptr) {\n      hasFunctionPointer = nullptr;\n    }\n    *PTR_DAT_08000124 = true;\n  }\n  return hasFunctionPointer != nullptr;\n}",
            "called": [
                "FUN_0800a424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": true,
            "current_name": "isFirstCall_0800010c"
        },
        "FUN_08002e26": {
            "renaming": {
                "FUN_08003154": "call_function_1",
                "FUN_08002df6": "call_function_3",
                "param_1": "obj_address",
                "param_2": "value",
                "FUN_08002ddc": "call_function_2",
                "FUN_08002e26": "set_param_value_08002e26"
            },
            "code": "void set_param_value_08002e26(int obj_address, undefined4 value){\n  *(undefined4 *)(obj_address + 0xc0) = value;\n  call_function_1(obj_address);\n  call_function_2(obj_address);\n  call_function_3(obj_address);\n  return;\n}",
            "called": [
                "FUN_08002ddc",
                "FUN_08003154",
                "FUN_08002df6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e26",
            "calling": [
                "FUN_08003048"
            ],
            "imported": true,
            "current_name": "set_param_value_08002e26"
        },
        "FUN_080036d8": {
            "renaming": {
                "iVar1": "result",
                "param_1": "duration",
                "PTR_DAT_0800371c": "frequency_ptr",
                "PTR_DAT_08003718": "interval_ptr",
                "FUN_080036d8": "set_timer_080036d8"
            },
            "code": "uint32_t set_timer_080036d8(uint32_t duration)\n{\n  uint32_t frequency = *(uint32_t *)PTR_DAT_0800371c / (1000 / (uint8_t)*PTR_DAT_08003718);\n  int32_t result = FUN_08003fd8(frequency);\n  if (result != 0) {\n    return 1;\n  }\n  if (duration > 0xf) {\n    return 1;\n  }\n  FUN_08003f30(0xffffffff, duration, 0);\n  *(uint32_t *)PTR_DAT_08003720 = duration;\n  return 0;\n}",
            "called": [
                "FUN_08003f30",
                "FUN_08003fd8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d8",
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "imported": true,
            "current_name": "set_timer_080036d8"
        },
        "FUN_08006e68": {
            "renaming": {
                "FUN_08006e68": "FUNC_08006e68"
            },
            "code": "\nvoid FUNC_08006e68(undefined4 param_1)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  undefined4 uVar3;\n  uint local_20;\n  undefined4 local_1c;\n  undefined4 local_18;\n  undefined4 local_14;\n  \n  puVar1 = PTR_DAT_08007100;\n  iVar2 = FUN_08007376((int)(char)*PTR_DAT_08007100,PTR_DAT_08007104);\n  FUN_08007438(param_1);\n  uVar3 = FUN_08006bb8((uint)((int)(char)*puVar1 << 0x18) >> 0x1c);\n  local_1c = 2;\n  local_18 = 0;\n  local_14 = 3;\n  *(uint *)(DAT_08007108 + 0x18) = *(uint *)(DAT_08007108 + 0x18) | 1;\n  switch((uint)(iVar2 << 0x11) >> 0x19) {\n  case 1:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000001;\n    break;\n  case 2:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000002;\n    break;\n  case 4:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000004;\n    break;\n  case 6:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000008;\n    break;\n  case 8:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000030;\n    break;\n  case 10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x70000c0;\n    break;\n  case 0xd:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000300;\n    break;\n  case 0x10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000c00;\n    break;\n  case 0x14:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7001000;\n    break;\n  case 0x17:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7008000;\n    break;\n  case 0x1c:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff;\n    break;\n  case 0x22:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  local_20 = 1 << ((byte)*PTR_DAT_08007100 & 0xf) & 0xffff;\n  FUN_080040e8(uVar3,&local_20);\n  return;\n}\n\n",
            "called": [
                "FUN_08006bb8",
                "FUN_080040e8",
                "FUN_08007376",
                "FUN_08007438"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006e68",
            "calling": [
                "FUN_08006092"
            ],
            "imported": true,
            "current_name": "FUNC_08006e68"
        },
        "FUN_080086e8": {
            "renaming": {
                "uVar1": "index_found",
                "param_1": "value_to_find",
                "FUN_080086e8": "find_index_of_value_in_array_080086e8"
            },
            "code": "uint find_index_of_value_in_array_080086e8(int value_to_find)\n{\n  uint index_found;\n  if (value_to_find == 0) {\n    index_found = 5;\n  }\n  else {\n    index_found = 0;\n    while (true) {\n      if (index_found > 4) {\n        return index_found;\n      }\n      if (value_to_find == *(int *)(PTR_DAT_08008708 + index_found * 4)) break;\n      index_found = (index_found + 1) & 0xff;\n    }\n  }\n  return index_found;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080086e8",
            "calling": [
                "FUN_08008730",
                "FUN_0800870c"
            ],
            "imported": true,
            "current_name": "find_index_of_value_in_array_080086e8"
        },
        "FUN_0800a110": {
            "renaming": {
                "FUN_0800a110": "initialize_param1_if_param2_not_valid_0800a110",
                "iVar2": "result",
                "param_1": "param1",
                "param_2": "param2",
                "puVar1": "ptr_dat"
            },
            "code": "void initialize_param1_if_param2_not_valid_0800a110(int *param1, undefined4 param2)\n{\n  undefined *ptr_dat = PTR_DAT_0800a12c;\n  *(undefined4 *)ptr_dat = 0;\n  int result = get_valid_param2(param2);\n  if ((result == -1) && (*(int *)ptr_dat != 0)) {\n    *param1 = *(int *)ptr_dat;\n  }\n  return;\n}",
            "called": [
                "FUN_08008850"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a110",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": true,
            "current_name": "initialize_param1_if_param2_not_valid_0800a110"
        },
        "FUN_08003b8c": {
            "renaming": {
                "FUN_08003b8c": "check_and_update_08003b8c",
                "iVar1": "ptr_var_1",
                "iVar2": "ptr_var_2",
                "FUN_08003760()": "FUN_08003760()",
                "param_1": "ptr_param_1",
                "*(uint *)(*param_1 + 8)": "*(unsigned int *)(*ptr_param_1 + 8)",
                "param_1[10]": "ptr_param_1[10]",
                "*param_1": "*ptr_param_1",
                "param_1[0xb]": "ptr_param_1[0xb]",
                "*(uint *)(iVar2 + 8)": "*(unsigned int *)(ptr_var_2 + 8)"
            },
            "code": "int check_and_update_08003b8c(int *ptr_param_1)\n{\n  int ptr_var_1 = *ptr_param_1;\n  if ((*(unsigned int *)(ptr_var_1 + 8) & 1) == 0) {\n    return 0;\n  }\n  *(unsigned int *)(ptr_var_1 + 8) &= 0xfffffffe;\n  int ptr_var_2 = FUN_08003760();\n  do {\n    if ((*(unsigned int *)(*ptr_param_1 + 8) & 1) == 0) {\n      return 0;\n    }\n    int ptr_var_3 = FUN_08003760();\n  } while ((unsigned int)(ptr_var_3 - ptr_var_2) < 3);\n  ptr_param_1[10] |= 0x10;\n  ptr_param_1[0xb] |= 1;\n  return 1;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b8c",
            "calling": [
                "FUN_08003e20",
                "FUN_08003bd8",
                "FUN_08003ce8",
                "FUN_08003de4"
            ],
            "imported": true,
            "current_name": "check_and_update_08003b8c"
        },
        "FUN_080035b8": {
            "renaming": {
                "FUN_080035b8": "initialize_080035b8",
                "iVar1": "result1",
                "local_c": "parameter6",
                "local_1c": "parameter3",
                "local_3c": "parameter9",
                "local_38": "parameter10",
                "local_10": "parameter5",
                "local_54": "parameters11",
                "uVar2": "result2",
                "local_20": "parameter2",
                "local_30": "parameters1",
                "local_40": "parameter8",
                "local_14": "parameter4",
                "local_44": "parameter7"
            },
            "code": "void initialize_080035b8(){\n  int result1;\n  uint result2;\n  int parameters1[2] = {2,0};\n  int parameter2 = 0x10;\n  int parameter3 = 2;\n  int parameter4 = 0;\n  int parameter5 = 0x380000;\n  \n  result1 = check_parameters(parameters1);\n  if (result1 != 0) {\n    print_error(\"Error: Invalid parameters\",0x88);\n  }\n  \n  int parameter6 = 0xf;\n  int parameter7 = 2;\n  int parameter8 = 0;\n  int parameter9 = 0x400;\n  int parameter10 = 0;\n  result1 = check_parameters(&parameter6);\n  if (result1 != 0) {\n    print_error(\"Error: Invalid parameters\",0x95);\n  }\n  \n  int parameters11[2] = {2,0x8000};\n  result1 = check_parameters(parameters11);\n  if (result1 != 0) {\n    print_error(\"Error: Invalid parameters\",0x9c);\n  }\n  \n  result2 = get_value();\n  print_result((uint)((ulonglong)result2 * (ulonglong)parameter5 >> 0x26));\n  print_parameter(4);\n  print_parameter(-1,-1);\n  return;\n}",
            "called": [
                "FUN_080073e8",
                "FUN_08003f30",
                "FUN_080058ac",
                "FUN_08005a1c",
                "FUN_08005460",
                "FUN_08003fd8",
                "FUN_08004024",
                "FUN_08005aa4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035b8",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": true,
            "current_name": "initialize_080035b8"
        },
        "FUN_08001c18": {
            "renaming": {
                "FUN_08001c18": "receive_data_and_check_08001c18",
                "iVar3": "num_bytes_received",
                "iVar4": "num_bytes_available",
                "param_1": "device_address",
                "param_2": "num_bytes_expected",
                "param_3": "error_code",
                "param_4": "received_data",
                "puVar1": "data_ptr",
                "uVar2": "received_byte",
                "bVar5": "is_byte_received"
            },
            "code": "void receive_data_and_check_08001c18(uint8_t device_address, uint32_t num_bytes_expected, int error_code, uint8_t *received_data)\n{\n  uint8_t *data_ptr;\n  uint8_t received_byte;\n  int num_bytes_received = 0;\n  bool is_byte_received;\n\n  data_ptr = DAT_08001cbc;\n  if (num_bytes_expected == 0xffffffff) {\n    num_bytes_expected = 0;\n  }\n  else {\n    send_device_address_and_set_read_mode(DAT_08001cbc, device_address);\n    send_num_bytes_to_read(num_bytes_expected & 0xff);\n    send_device_address_and_set_write_mode(DAT_08001cbc, device_address);\n  }\n  data_ptr = DAT_08001cbc;\n  send_device_address_and_set_read_mode(DAT_08001cbc, device_address);\n  set_num_bytes_to_read(num_bytes_expected);\n  if (get_num_bytes_received(data_ptr) < num_bytes_expected) {\n    print_error_message(PTR_DAT_08001cc4, PTR_s_I2C__Too_few_bytes_received_08001ccc);\n  }\n  else if (get_num_bytes_received(data_ptr) > num_bytes_expected) {\n    print_error_message(PTR_DAT_08001cc4, PTR_s_I2C__Too_many_bytes_received_08001cc0);\n  }\n  else {\n    *received_data = device_address;\n    *(received_data + 1) = num_bytes_expected & 0xff;\n    while (num_bytes_received < num_bytes_expected) {\n      is_byte_received = (get_num_bytes_received(data_ptr) != 0);\n      if (!is_byte_received) break;\n      received_byte = receive_byte();\n      *(received_data + num_bytes_received + 2) = received_byte;\n      num_bytes_received++;\n    }\n    print_data(PTR_DAT_08001cc4, 0x77, num_bytes_expected + 2U & 0xff, received_data);\n  }\n}\n",
            "called": [
                "FUN_08002a58",
                "FUN_08001c08",
                "FUN_08001bf8",
                "FUN_08002a30",
                "FUN_08002f0a",
                "FUN_08002c14",
                "FUN_0800270c",
                "FUN_08002f14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c18",
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "imported": true,
            "current_name": "receive_data_and_check_08001c18"
        },
        "FUN_08006460": {
            "renaming": {
                "FUN_08006460": "FUNC_08006460"
            },
            "code": "\nundefined4 FUNC_08006460(uint **param_1,undefined4 param_2)\n\n{\n  uint *puVar1;\n  \n  FUN_08006420(*param_1,param_2,0);\n  puVar1 = *param_1;\n  if (((puVar1[8] & 0x1111) == 0) && ((puVar1[8] & 0x444) == 0)) {\n    puVar1[0x11] = puVar1[0x11] & 0xffff7fff;\n  }\n  puVar1 = *param_1;\n  if (((puVar1[8] & 0x1111) == 0) && ((puVar1[8] & 0x444) == 0)) {\n    *puVar1 = *puVar1 & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08006420"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006460",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": true,
            "current_name": "FUNC_08006460"
        },
        "FUN_08004046": {
            "renaming": {
                "FUN_08004046": "do_nothing_and_return_08004046",
                "do_nothing_08004044": "do_nothing"
            },
            "code": "void do_nothing_and_return_08004046(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08004044"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004046",
            "calling": [
                "FUN_08007246"
            ],
            "imported": true,
            "current_name": "do_nothing_and_return_08004046"
        },
        "FUN_08008880": {
            "renaming": {
                "bVar1": "is_small_value",
                "FUN_08008880": "get_encoded_value_08008880",
                "param_1": "value",
                "cVar2": "encoded_char",
                "uVar3": "encoded_value",
                "uVar4": "shift_amount"
            },
            "code": "uint get_encoded_value_08008880(uint value)\n{\n  bool is_small_value = false;\n  char encoded_char;\n  uint encoded_value;\n\n  if (value < 14) {\n    if (value + 46 < 60) {\n      is_small_value = true;\n    }\n  }\n  else {\n    is_small_value = value < 60;\n  }\n\n  if (is_small_value) {\n    if (value < 14) {\n      value += 46;\n    }\n    encoded_char = PTR_DAT_080088d8[value];\n  }\n  else {\n    encoded_char = -1;\n  }\n\n  if (encoded_char == -1) {\n    encoded_value = 0;\n  }\n  else {\n    encoded_value = FUN_08006d80();\n    uint shift_amount = *(uint *)PTR_DAT_080088dc;\n    if (shift_amount != 12) {\n      if (shift_amount < 12) {\n        return encoded_value >> (12 - shift_amount);\n      }\n      return encoded_value << (shift_amount - 12);\n    }\n  }\n  return encoded_value;\n}",
            "called": [
                "FUN_08006d80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008880",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": true,
            "current_name": "get_encoded_value_08008880"
        },
        "FUN_08004044": {
            "renaming": {
                "FUN_08004044": "do_nothing_08004044"
            },
            "code": "\nvoid do_nothing_08004044(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004044",
            "calling": [
                "FUN_08004046"
            ],
            "imported": true,
            "current_name": "do_nothing_08004044"
        },
        "FUN_08002ed2": {
            "renaming": {
                "FUN_08003474": "set_value",
                "uVar1": "result",
                "PTR_08002e3c": "INSTANCE_OFFSET",
                "FUN_08002ed2": "execute_function_08002ed2",
                "param_1": "instance_address",
                "PTR_08002e44": "VALUE_OFFSET",
                "PTR_08002e40": "FUNCTION_OFFSET"
            },
            "code": "void execute_function_08002ed2(int instance_address) {\n  uint32_t result;\n  function_ptr = *(function_ptr *)(*(int *)(instance_address + PTR_08002e3c) + PTR_08002e40);\n  result = (*function_ptr)();\n  if (result != 0xffffffff) {\n    set_value(instance_address + PTR_08002e44, result & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed2",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": true,
            "current_name": "execute_function_08002ed2"
        },
        "FUN_080073ae": {
            "renaming": {
                "param_1": "first_value",
                "FUN_080073ae": "compare_and_return_080073ae",
                "param_2": "second_value"
            },
            "code": "int compare_and_return_080073ae(int first_value, int second_value) {\n  if (first_value != second_value) {\n    if (first_value == 0) {\n      return second_value;\n    }\n    if (second_value == 0) {\n      return first_value;\n    }\n    first_value = 0;\n  }\n  return first_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ae",
            "calling": [
                "FUN_08008078",
                "FUN_080077b0"
            ],
            "imported": true,
            "current_name": "compare_and_return_080073ae"
        },
        "FUN_08000488": {
            "renaming": {
                "FUN_08008880": "generate_new_value",
                "*(uint *)PTR_DAT_080004c8": "*bitfield_ptr",
                "FUN_08002ef2": "update_data",
                "uVar1": "new_value",
                "PTR_DAT_080004d0": "data_ptr",
                "*(uint *)PTR_DAT_080004cc": "*flag_ptr",
                "param_1": "bit_index",
                "PTR_DAT_080004c8": "bitfield_ptr",
                "FUN_08000488": "update_bit_08000488",
                "param_2": "bit_value"
            },
            "code": "void update_bit_08000488(uint bit_index, int bit_value) {\\n  if (bit_index < 14) {\\n    if (bit_value == 0) {\\n      *(uint *)PTR_DAT_080004c8 = *(uint *)PTR_DAT_080004c8 & ~(1 << (bit_index & 0xff));\\n      return;\\n    }\\n    *(uint *)PTR_DAT_080004c8 = 1 << (bit_index & 0xff) | *(uint *)PTR_DAT_080004c8;\\n    if (*(uint *)PTR_DAT_080004cc == \"\\0\") {\\n      uint new_value = generate_new_value();\\n      update_data(new_value, bit_index);\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000488",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": true,
            "current_name": "update_bit_08000488"
        },
        "FUN_08003f0c": {
            "renaming": {
                "PTR_08003f2c": "ptr",
                "param_1": "value",
                "FUN_08003f0c": "updateValue_08003f0c",
                "DAT_08003f2c": "ptr"
            },
            "code": "void updateValue_08003f0c(uint value) {\n  uint* PTR_08003f2c = (uint*)(DAT_08003f2c + 0xc);\n  uint mask = 0xf8ff;\n  uint newValue = (value & 7) << 8 | (*PTR_08003f2c & mask) | 0x5fa0000;\n  *PTR_08003f2c = newValue;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0c",
            "calling": [
                "FUN_08008f0e",
                "FUN_08003724"
            ],
            "imported": true,
            "current_name": "updateValue_08003f0c"
        },
        "FUN_08008f1c": {
            "renaming": {
                "FUN_08008bf4": "finalize_system",
                "FUN_08008f1c": "loop_until_condition_is_true_08008f1c",
                "FUN_080022f8": "execute_loop",
                "FUN_08001b48": "initialize_system",
                "DAT_08008f38": "condition_is_false"
            },
            "code": "void loop_until_condition_is_true_08008f1c() {\n  do_nothing();\n  initialize_system();\n  do {\n    do {\n      execute_loop();\n    } while (DAT_08008f38());\n    finalize_system();\n  } while(true);\n}",
            "called": [
                "FUN_08008f0c",
                "FUN_08008bf4",
                "FUN_080022f8",
                "FUN_08001b48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f1c",
            "calling": [
                "FUN_08003658"
            ],
            "imported": true,
            "current_name": "loop_until_condition_is_true_08008f1c"
        },
        "FUN_080058ac": {
            "renaming": {
                "iVar2": "start_time",
                "iVar3": "current_time",
                "param_1": "data",
                "FUN_080058ac": "perform_operation_080058ac",
                "param_2": "size",
                "puVar1": "ptr",
                "uVar4": "result"
            },
            "code": "uint32_t perform_operation_080058ac(uint32_t *data, uint32_t size) {\n  uint32_t *ptr = global_data_ptr;\n  if (((*global_data_ptr & 7) < size) && (*global_data_ptr = *global_data_ptr & 0xfffffff8 | size, size != (*ptr & 7))) {\n    return 1;\n  }\n  if ((*data & 2) != 0) {\n    global_data_ptr[1] = global_data_ptr[1] & 0xffffff0f | data[2];\n  }\n  if ((*data & 1) != 0) {\n    uint32_t operation_type = data[1];\n    if (operation_type == 1) {\n      if ((*global_data_ptr & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((operation_type != 2) && ((*global_data_ptr & 2) == 0)) {\n      return 1;\n    }\n    global_data_ptr[1] = operation_type | global_data_ptr[1] & 0xfffffffc;\n    int32_t start_time = get_time();\n    if (data[1] == 1) {\n      while ((global_data_ptr[1] & 0xc) != 4) {\n        int32_t current_time = get_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (data[1] == 2) {\n      while ((global_data_ptr[1] & 0xc) != 8) {\n        int32_t current_time = get_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((global_data_ptr[1] & 0xc) != 0) {\n        int32_t current_time = get_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  ptr = global_data_ptr;\n  if ((size < (*global_data_ptr & 7)) && (*global_data_ptr = *global_data_ptr & 0xfffffff8 | size, size != (*ptr & 7))) {\n    return 1;\n  }\n  if ((*data & 4) != 0) {\n    global_data_ptr[1] = global_data_ptr[1] & 0xfffff8ff | data[3];\n  }\n  if ((*data & 8) != 0) {\n    global_data_ptr[1] = global_data_ptr[1] & 0xffffc7ff | data[4] << 3;\n  }\n  uint32_t result = perform_sub_operation();\n  *(uint32_t *)global_result_ptr = result >> global_shift_amount[(global_data_ptr[1] << 0x18) >> 0x1c];\n  perform_final_operation(0xf);\n  return 0;\n}",
            "called": [
                "FUN_080058d2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ac",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": true,
            "current_name": "perform_operation_080058ac"
        },
        "FUN_08006bb8": {
            "renaming": {
                "uVar1": "flag_return_value",
                "param_1": "flag_index",
                "FUN_08006bb8": "set_flag_08006bb8",
                "DAT_08006c4c": "flag_return_values",
                "DAT_08006c48": "flag_ptr"
            },
            "code": "uint32_t set_flag_08006bb8(uint32_t flag_index) {\n  uint32_t* DAT_08006c48 = (uint32_t*)DAT_08006c48 + 0x18;\n  uint32_t flag_value = 0;\n  switch(flag_index) {\n    case 0:\n      flag_value = 4;\n      break;\n    case 1:\n      flag_value = 8;\n      break;\n    case 2:\n      flag_value = 0x10;\n      break;\n    case 3:\n      flag_value = 0x20;\n      break;\n    case 4:\n      flag_value = 0x40;\n      break;\n    default:\n      return 0;\n  }\n  *DAT_08006c48 |= flag_value;\n  return flag_index < 5 ? *((uint32_t*)DAT_08006c4c + flag_index) : 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006bb8",
            "calling": [
                "FUN_08006ca8",
                "FUN_08006e68",
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08007258"
            ],
            "imported": true,
            "current_name": "set_flag_08006bb8"
        },
        "FUN_08007438": {
            "renaming": {
                "0x40000000": "FLAG_B",
                "DAT_080074d0": "FLAG_A",
                "0x2081c": "OFFSET_D",
                "DAT_080074d4": "FLAG_C",
                "0x20c1c": "OFFSET_C",
                "param_1": "flag_ptr",
                "0x800": "MASK_A",
                "0xe418": "OFFSET_A",
                "FUN_08007438": "set_flags_08007438",
                "_DAT_4002101c": "_DAT_B",
                "1": "MASK_B",
                "2": "MASK_C",
                "4": "MASK_D",
                "DAT_080074dc": "ptr_a",
                "DAT_080074d8": "FLAG_D"
            },
            "code": "void set_flags_08007438(int *flag_ptr) {\n  if (*flag_ptr == DAT_080074d0) {\n    *(uint *)(DAT_080074d0 + OFFSET_A) |= MASK_A;\n    *(int **)DAT_080074dc = flag_ptr;\n  }\n  if (*flag_ptr == FLAG_B) {\n    *_DAT_4002101c |= MASK_B;\n    *(int **)(DAT_080074dc + OFFSET_B) = flag_ptr;\n  }\n  if (*flag_ptr == DAT_080074d4) {\n    *(uint *)(DAT_080074d4 + OFFSET_C) |= MASK_C;\n    *(int **)(DAT_080074dc + OFFSET_C) = flag_ptr;\n  }\n  if (*flag_ptr == DAT_080074d8) {\n    *(uint *)(DAT_080074d8 + OFFSET_D) |= MASK_D;\n    *(int **)(DAT_080074dc + OFFSET_D) = flag_ptr;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007438",
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "imported": true,
            "current_name": "set_flags_08007438"
        },
        "FUN_08004aec": {
            "renaming": {
                "do_nothing_08004a22": "do_nothing",
                "param_1": "param_array",
                "uint": "unsigned int",
                "FUN_08004aec": "set_param_08004aec",
                "DAT_08004b7c": "DAT_constant",
                "do_nothing_08007ff0": "do_something",
                "char": "unsigned char"
            },
            "code": "int set_param_08004aec(uint **param_array)\n{\n    if (((*param_array)[11] == (uint *)0x4) || ((*param_array)[11] == (uint *)0x8))\n    {\n        (*param_array)[11] = DAT_08004b7c;\n        (*param_array)[0x1] &= 0xfffff8ff;\n        (*param_array)[0x5] = 0xfffffbff;\n        **param_array &= 0xfffffbff;\n        (*param_array)[12] = (uint *)0x0;\n        (*(char *)((int)*param_array + 0x3d)) = 0x20;\n        (*(char *)((int)*param_array + 0x3e)) = 0;\n        do_something();\n    }\n    else if ((*(char *)((int)*param_array + 0x3d)) == '!')\n    {\n        (*param_array)[11] = DAT_08004b7c;\n        (*param_array)[12] = (uint *)0x21;\n        (*(char *)((int)*param_array + 0x3d)) = 0x20;\n        (*(char *)((int)*param_array + 0x3e)) = 0;\n        (*param_array)[0x1] &= 0xfffff8ff;\n        (*param_array)[0x5] = 0xfffffbff;\n        **param_array &= 0xfffffbff;\n        do_nothing();\n    }\n    else\n    {\n        (*param_array)[0x5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004a22",
                "FUN_08007ff0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004aec",
            "calling": [
                "FUN_080052f0"
            ],
            "imported": true,
            "current_name": "set_param_08004aec"
        },
        "FUN_0800887c": {
            "renaming": {
                "undefined4": "int",
                "FUN_0800887c": "return_one_0800887c"
            },
            "code": "int return_one_0800887c(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800887c",
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "imported": true,
            "current_name": "return_one_0800887c"
        },
        "FUN_08004728": {
            "renaming": {
                "*(undefined *)((int)param_1 + 0x3e)": "(*request)[0x3e]",
                "*puVar2": "*current_request_element",
                "param_1": "request",
                "DAT_080047ec": "request_constant_A",
                "param_1[0x11]": "request[0x11]",
                "*(undefined2 *)(param_1 + 10)": "(*request)[10]",
                "param_1[0xc]": "request[0xc]",
                "*(char *)(param_1 + 0xf)": "(*request)[0xf]",
                "*(undefined2 *)((int)param_1 + 0x2a)": "flag",
                "*(undefined *)((int)param_1 + 0x3d)": "(*request)[0x3d]",
                "local_c": "counter",
                "puVar2[6]": "current_request_element[6]",
                "param_1[9]": "request[9]",
                "uVar1": "result",
                "puVar2": "current_request_element",
                "param_1[0x10]": "request[0x10]",
                "*(char *)((int)param_1 + 0x3d)": "(*request)[0x3d]",
                "(*param_1)[1]": "(*request)[1]",
                "PTR_DAT_080047e8": "request_constant_B",
                "param_1[0xf]": "request[0xf]",
                "FUN_08004728": "process_request_08004728",
                "param_2": "data1",
                "param_3": "data2",
                "param_1[0xb]": "request[0xb]",
                "param_4": "flag",
                "*(undefined *)(param_1 + 0xf)": "(*request)[0xf]"
            },
            "code": "uint32_t process_request_08004728(uint32_t **request, uint32_t *data1, uint32_t *data2, uint16_t flag) {\n  uint32_t result;\n  uint32_t *current_request_element;\n  int counter;\n  if ((*request)[0x3d] == ' ') {\n    counter = ((uint64_t)DAT_080047ec * ((uint64_t)(*request)[PTR_DAT_080047e8] >> 3)) >> 0x28;\n    do {\n      if (counter == 0) {\n        (*request)[0xc] = (uint32_t *)0x0;\n        (*request)[0x3d] = 0x20;\n        (*request)[0xf] = 0;\n        return 3;\n      }\n      current_request_element = *request;\n      counter--;\n    } while ((current_request_element[6] & 2) != 0);\n    if ((*request)[0xf] == '\\x01') {\n      result = 2;\n    }\n    else {\n      (*request)[0xf] = 1;\n      if ((*(current_request_element) & 1) == 0) {\n        *(current_request_element) = *(current_request_element) | 1;\n      }\n      **request = **request & 0xfffff7ff;\n      (*request)[0x3d] = 0x21;\n      (*request)[0x3e] = 0x10;\n      result = 0;\n      (*request)[0x10] = (uint32_t *)0x0;\n      (*request)[9] = data2;\n      (*request)[0xb] = request_constant_C;\n      (*request)[10] = flag;\n      (*request)[0x11] = data1;\n      **request = **request | 0x100;\n      (*request)[0xf] = 0;\n      (*request)[1] = (*request)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004728",
            "calling": [
                "FUN_08007e74"
            ],
            "imported": true,
            "current_name": "process_request_08004728"
        },
        "FUN_08007ede": {
            "renaming": {
                "uVar1": "current_data_index",
                "param_1": "buffer_address",
                "FUN_08007ede": "copy_data_to_buffer_08007ede",
                "param_2": "data_address",
                "param_3": "data_size"
            },
            "code": "int copy_data_to_buffer_08007ede(int buffer_address, int data_address, uint data_size) {\n  uint current_data_index;\n\n  if (data_size > 0x20) {\n    return 2;\n  }\n  for (current_data_index = 0; current_data_index < data_size; current_data_index++) {\n    *(undefined *)(buffer_address + current_data_index + 0x68) = *(undefined *)(data_address + current_data_index);\n    *(char *)(buffer_address + 0x88) = *(char *)(buffer_address + 0x88) + '\\x01';\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ede",
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": true,
            "current_name": "copy_data_to_buffer_08007ede"
        },
        "FUN_0800863c": {
            "renaming": {
                "iVar1": "success",
                "PTR_DAT_08008688": "data_array1",
                "param_1": "data_address",
                "PTR_DAT_08008690": "data_array3",
                "PTR_DAT_0800868c": "data_array2",
                "FUN_0800863c": "update_data_0800863c",
                "param_2": "new_data",
                "param_3": "unused_param1",
                "FUN_08003f94": "update_data3",
                "param_4": "unused_param2",
                "FUN_080068d6": "update_data4",
                "uVar2": "data_index",
                "FUN_08003f30": "update_data2",
                "FUN_080085b8": "check_success"
            },
            "code": "void update_data_0800863c(int data_address, int new_data, int unused_param1, int unused_param2) {\n  int success;\n  uint data_index;\n  if (data_address != 0) {\n    success = check_success();\n    if (success == 0) {\n      data_index = (uint)*(byte *)(data_address + 0x44);\n      *(int *)(PTR_DAT_08008688 + data_index * 4) = new_data;\n      *(int *)(PTR_DAT_0800868c + data_index * 4) = data_address;\n      update_data_0800863c2((int)*(char *)(data_address + 0x5a), 0, 1, data_index, unused_param2);\n      update_data_0800863c3((int)*(char *)(data_address + 0x5a));\n      update_data_0800863c4(*(int *)(PTR_DAT_08008690 + data_index * 4), data_address + 0x45, 1);\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_080085b8",
                "FUN_080068d6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800863c",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": true,
            "current_name": "update_data_0800863c"
        },
        "thunk_FUN_0800887c": {
            "renaming": {
                "thunk_FUN_0800887c": "get_true_value_thunk_0800887c"
            },
            "code": "int get_true_value_thunk_0800887c(void)\n{\n  return 1;\n}",
            "called": [
                "FUN_0800887c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a01c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": true,
            "current_name": "get_true_value_thunk_0800887c"
        },
        "FUN_080074e0": {
            "renaming": {
                "0x40000000": "FLAG_B",
                "*(uint *)(DAT_08007540 + 0x18)": "*(uint32_t *)(FLAG_PTR + 0x18)",
                "DAT_08007538": "FLAG_C",
                "param_1": "flag",
                "0xfffffffb": "0b11111111111111111111111111111011",
                "0xfffffffd": "0b11111111111111111111111111111101",
                "0xfffffffe": "0b11111111111111111111111111111110",
                "*param_1": "current_flag",
                "DAT_08007540": "FLAG_PTR",
                "FUN_080074e0": "update_flags_080074e0",
                "DAT_08007534": "FLAG_A",
                "0xfffff7ff": "0b11111111111111110111111111111111"
            },
            "code": "void update_flags_080074e0(int *flag) {\n  int current_flag = *flag;\n  if (current_flag == DAT_08007534) {\n    uint32_t *flag_ptr = (uint32_t *)(DAT_08007540 + 0x18);\n    *flag_ptr &= 0xfffff7ff;\n  }\n  if (current_flag == FLAG_B) {\n    uint32_t *flag_ptr = (uint32_t *)(DAT_08007540 + 0x1c);\n    *flag_ptr &= 0xfffffffe;\n  }\n  if (current_flag == DAT_08007538) {\n    uint32_t *flag_ptr = (uint32_t *)(DAT_08007540 + 0x1c);\n    *flag_ptr &= 0xfffffffd;\n  }\n  if (current_flag == FLAG_D) {\n    uint32_t *flag_ptr = (uint32_t *)(DAT_08007540 + 0x1c);\n    *flag_ptr &= 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074e0",
            "calling": [
                "FUN_08007710",
                "FUN_08007110"
            ],
            "imported": true,
            "current_name": "update_flags_080074e0"
        },
        "FUN_080073c0": {
            "renaming": {
                "PTR_DAT_080073d0": "function_pointer_data",
                "FUN_080073c0": "execute_code_if_available_080073c0",
                "PTR_DAT_080073d4": "argument_data"
            },
            "code": "void execute_code_if_available_080073c0(void)\n{\n  code* function_pointer = *(code**)PTR_DAT_080073d0;\n  if (function_pointer != NULL)\n  {\n    (*function_pointer)(*(int*)PTR_DAT_080073d4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_08005cb4"
            ],
            "imported": true,
            "current_name": "execute_code_if_available_080073c0"
        },
        "FUN_080084b0": {
            "renaming": {
                "iVar4": "index",
                "puVar2": "data_pointer",
                "FUN_080084b0": "set_data_from_pointer_array_080084b0",
                "cVar1": "data",
                "uVar3": "value",
                "uVar5": "value_index"
            },
            "code": "void set_data_from_pointer_array_080084b0(void)\n{\n  char data = data_array[1];\n  int index = get_index(data, index_array);\n  if (index != 0) {\n    int value = get_value(data, value_array);\n    char* data_pointer = data_pointer_array;\n    data_pointer[0x59] = value;\n    data_pointer[0x58] = data;\n    *(int*)(data_pointer + 0x48) = 0x2580;\n    *(int*)(data_pointer + 0x54) = 0;\n    *(int*)(data_pointer + 0x4c) = 0;\n    *(int*)(data_pointer + 0x50) = 0;\n    set_data(data_pointer);\n  }\n  return;\n}",
            "called": [
                "FUN_08007320",
                "FUN_08008078",
                "FUN_0800734a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080084b0",
            "calling": [
                "FUN_08008500"
            ],
            "imported": true,
            "current_name": "set_data_from_pointer_array_080084b0"
        },
        "FUN_08004050": {
            "renaming": {
                "uVar1": "value",
                "puVar2": "ptr",
                "param_1": "param_array",
                "FUN_08004050": "get_value_and_set_flag_08004050"
            },
            "code": "uint get_value_and_set_flag_08004050(uint **param_array)\n{\n  uint value;\n  uint *ptr;\n  if (*(char *)((int)param_array + 0x21) != '\\x02') {\n    param_array[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **param_array = **param_array & 0xfffffff1;\n  **param_array = **param_array & 0xfffffffe;\n  ptr = *param_array;\n  if (ptr == PTR_DAT_080040e0) {\n    value = 1;\n  }\n  else if (ptr == PTR_DAT_080040e0 + 5) {\n    value = 0x10;\n  }\n  else if (ptr == PTR_DAT_080040e0 + 10) {\n    value = 0x100;\n  }\n  else if (ptr == PTR_DAT_080040e0 + 0xf) {\n    value = 0x1000;\n  }\n  else if (ptr == PTR_DAT_080040e0 + 0x14) {\n    value = 0x10000;\n  }\n  else if (ptr == PTR_DAT_080040e0 + 0x19) {\n    value = 0x100000;\n  }\n  else {\n    value = 0x1000000;\n  }\n  *(uint *)(PTR_DAT_080040e4 + 4) = value;\n  *(char *)((int)param_array + 0x21) = 1;\n  *(uint *)(param_array + 8) = 0;\n  if (param_array[0xd] != (uint *)0x0) {\n    (*(code *)param_array[0xd])();\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004050",
            "calling": [
                "FUN_080069ec",
                "FUN_08004f3c"
            ],
            "imported": true,
            "current_name": "get_value_and_set_flag_08004050"
        },
        "FUN_08008e14": {
            "renaming": {
                "FUN_08008df8": "reset_device",
                "param_1": "device_type",
                "param_2": "device_id",
                "FUN_08008e14": "initialize_system_08008e14"
            },
            "code": "void initialize_system_08008e14(int device_type, int device_id)\n{\n  if ((device_type == 1) && (device_id == 0xffff)) {\n    reset_device(PTR_DAT_08008e3c,0,0,0,0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08008df8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e14",
            "calling": [],
            "imported": true,
            "current_name": "initialize_system_08008e14"
        },
        "FUN_08005a28": {
            "renaming": {
                "FUN_08005a1c": "get_function_result",
                "DAT_08005a40": "data_array",
                "uVar1": "shifted_value",
                "PTR_DAT_08005a44": "array_of_shift_values",
                "FUN_08005a28": "calculate_shifted_value_08005a28"
            },
            "code": "uint calculate_shifted_value_08005a28(void)\n{\n  uint shifted_value;\n  uint function_result = get_function_result();\n  shifted_value = function_result >> PTR_DAT_08005a44[(uint)(*(int *)(DAT_08005a40 + 4) << 0x15) >> 0x1d];\n  return shifted_value;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a28",
            "calling": [
                "FUN_08006538",
                "FUN_080045c0",
                "FUN_080075dc"
            ],
            "imported": true,
            "current_name": "calculate_shifted_value_08005a28"
        },
        "FUN_080095a8": {
            "renaming": {
                "bVar4": "has_flags",
                "iVar1": "pos",
                "param_1": "data",
                "param_2": "start_pos",
                "param_3": "end_pos",
                "param_4": "param_4",
                "param_5": "callback",
                "uVar3": "flags",
                "uVar2": "max_pos",
                "FUN_080095a8": "process_data_080095a8"
            },
            "code": "undefined4 process_data_080095a8(uint32_t data, uint32_t *start_pos, uint32_t *end_pos, uint32_t param_4, code *callback)\\n{\\n  int pos = 0;\\n  uint32_t max_pos = start_pos[4];\\n  if ((int)start_pos[4] < (int)start_pos[2]) {\\n    max_pos = start_pos[2];\\n  }\\n  *end_pos = max_pos;\\n  if (*(char *)((int)start_pos + 0x43) != \"\\0\") {\\n    *end_pos = max_pos + 1;\\n  }\\n  if ((int)(*start_pos << 0x1a) < 0) {\\n    *end_pos = *end_pos + 2;\\n  }\\n  uint32_t flags = *start_pos & 6;\\n  if (flags == 0) {\\n    for (; (int)flags < (int)(start_pos[3] - *end_pos); flags++) {\\n      int result = (*callback)(data, param_4, (int)start_pos + 0x19, 1);\\n      if (result == -1) {\\n        return 0xffffffff;\\n      }\\n    }\\n  }\\n  uint32_t extra_chars = (uint32_t)*(byte *)((int)start_pos + 0x43);\\n  if (extra_chars != 0) {\\n    extra_chars = 1;\\n  }\\n  uint32_t end_pos_with_extra_chars = extra_chars;\\n  if ((int)(*start_pos << 0x1a) < 0) {\\n    *(undefined *)((int)start_pos + extra_chars + 0x43) = 0x30;\\n    end_pos_with_extra_chars = extra_chars + 2;\\n    *(undefined *)((int)start_pos + extra_chars + 0x44) = *(undefined *)((int)start_pos + 0x45);\\n  }\\n  int result = (*callback)(data, param_4, (int)start_pos + 0x43, end_pos_with_extra_chars);\\n  if (result != -1) {\\n    uint32_t data_length = start_pos[3];\\n    bool has_flags = (*start_pos & 6) != 4;\\n    if (has_flags) {\\n      data_length = 0;\\n    }\\n    uint32_t remaining_data_length = 0;\\n    if (!has_flags) {\\n      data_length = data_length - *end_pos;\\n    }\\n    if (!has_flags) {\\n      data_length = data_length & ~((int)data_length >> 0x1f);\\n    }\\n    if ((int)start_pos[4] < (int)start_pos[2]) {\\n      data_length = data_length + (start_pos[2] - start_pos[4]);\\n    }\\n    while (remaining_data_length != data_length) {\\n      result = (*callback)(data, param_4, (int)start_pos + 0x1a, 1);\\n      if (result == -1) break;\\n      remaining_data_length = remaining_data_length + 1;\\n    }\\n    if (remaining_data_length == data_length) {\\n      return 0;\\n    }\\n  }\\n  return 0xffffffff;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095a8",
            "calling": [
                "FUN_08009698"
            ],
            "imported": true,
            "current_name": "process_data_080095a8"
        },
        "FUN_08003002": {
            "renaming": {
                "FUN_08008990": "execute_with_params",
                "FUN_08003002": "check_and_execute_08003002",
                "param_1": "address",
                "FUN_08002fca": "execute_with_params",
                "do_nothing_08008ac4": "do_nothing"
            },
            "code": "void check_and_execute_08003002(int address)\\n{\\n  char* flag = (char*)(address + 0x1f8);\\n  if (*flag != \"\\0\") {\\n    return;\\n  }\\n  execute_with_params(0xd, 1);\\n  execute_with_params(address, 0xd, 2, 0x28, 0xd2);\\n  do_nothing(0xfa);\\n  execute_with_params(address, 0xd, 5, 0x28, 0xd2);\\n  do_nothing(0x7d);\\n  return;\\n}",
            "called": [
                "FUN_08002fca",
                "FUN_08008ac4",
                "FUN_08008990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003002",
            "calling": [
                "FUN_08003048"
            ],
            "imported": true,
            "current_name": "check_and_execute_08003002"
        },
        "FUN_08008ac4": {
            "renaming": {
                "FUN_08008ac4": "do_nothing_08008ac4"
            },
            "code": "\nvoid do_nothing_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ac4",
            "calling": [
                "FUN_08002fca",
                "FUN_08003002"
            ],
            "imported": true,
            "current_name": "do_nothing_08008ac4"
        },
        "FUN_08003bd8": {
            "renaming": {
                "FUN_08003b8c": "check_input",
                "iVar1": "is_valid",
                "FUN_08003bd8": "validate_input_08003bd8",
                "FUN_08006ca8": "initialize",
                "param_1": "input_array",
                "DAT_08003ce0": "GLOBAL_CONSTANT",
                "DAT_08003ce4": "GLOBAL_CONSTANT_2",
                "uVar3": "bit_value",
                "uVar2": "bit_mask"
            },
            "code": "int validate_input_08003bd8(int *input_array)\n{\n  int is_valid = 0;\n  int bit_mask = 0;\n  int bit_value = 0;\n  if (input_array == NULL) {\n    return 1;\n  }\n  if (input_array[10] == 0) {\n    input_array[11] = 0;\n    *(char *)(input_array + 9) = 0;\n    initialize();\n  }\n  is_valid = check_input(input_array);\n  bit_mask = input_array[10] & 0x10;\n  if ((bit_mask == 0) && (is_valid == 0)) {\n    input_array[10] = input_array[10] & 0xffffeefdU | 2;\n    bit_value = input_array[1] | input_array[7] | input_array[3] << 1;\n    if (input_array[2] == 0x100 || input_array[2] == 1) {\n      bit_mask = 0x100;\n    }\n    if (input_array[5] == 1) {\n      if (input_array[3] == 0) {\n        bit_mask = bit_mask | (input_array[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        input_array[10] = input_array[10] | 0x20;\n        input_array[11] = input_array[11] | 1;\n      }\n    }\n    *(uint *)(*input_array + 4) = bit_mask | *(uint *)(*input_array + 4) & 0xffff16ff;\n    *(uint *)(*input_array + 8) = DAT_08003ce0 & *(uint *)(*input_array + 8) | bit_value;\n    if (input_array[2] == 0x100 || input_array[2] == 1) {\n      bit_mask = (input_array[4] + -1) * 0x100000;\n    }\n    else {\n      bit_mask = 0;\n    }\n    *(uint *)(*input_array + 0x2c) = bit_mask | *(uint *)(*input_array + 0x2c) & 0xff0fffff;\n    if (bit_value != (DAT_08003ce4 & *(uint *)(*input_array + 8))) {\n      input_array[10] = input_array[10] & 0xffffffedU | 0x10;\n      input_array[11] = input_array[11] | 1;\n      return 1;\n    }\n    input_array[11] = 0;\n    input_array[10] = input_array[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  input_array[10] = input_array[10] | 0x10;\n  return 1;\n}",
            "called": [
                "FUN_08006ca8",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003bd8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "validate_input_08003bd8"
        },
        "FUN_08009d50": {
            "renaming": {
                "bVar3": "is_parameter_address",
                "iVar2": "temp_var_1",
                "uVar1": "result_1",
                "FUN_08009d50": "initialize_parameter_08009d50",
                "param_1": "parameter_address"
            },
            "code": "void initialize_parameter_08009d50(int parameter_address)\n{\n  undefined4 result_1;\n  int temp_var_1;\n  bool is_parameter_address;\n  if (*(int *)(parameter_address + 0x18) == 0) {\n    *(undefined4 *)(parameter_address + 0x48) = 0;\n    *(undefined4 *)(parameter_address + 0x4c) = 0;\n    *(undefined4 *)(parameter_address + 0x50) = 0;\n    temp_var_1 = *(int *)PTR_PTR_DAT_08009da8;\n    *(undefined **)(parameter_address + 0x28) = PTR_LAB_08009cd0_1_08009dac;\n    is_parameter_address = parameter_address == temp_var_1;\n    if (is_parameter_address) {\n      temp_var_1 = 1;\n    }\n    if (is_parameter_address) {\n      *(int *)(parameter_address + 0x18) = temp_var_1;\n    }\n    result_1 = FUN_08009db0();\n    *(undefined4 *)(parameter_address + 4) = result_1;\n    result_1 = FUN_08009db0(parameter_address);\n    *(undefined4 *)(parameter_address + 8) = result_1;\n    result_1 = FUN_08009db0(parameter_address);\n    *(undefined4 *)(parameter_address + 0xc) = result_1;\n    FUN_08009cdc(*(undefined4 *)(parameter_address + 4), 4, 0);\n    FUN_08009cdc(*(undefined4 *)(parameter_address + 8), 9, 1);\n    FUN_08009cdc(*(undefined4 *)(parameter_address + 0xc), 0x12, 2);\n    *(undefined4 *)(parameter_address + 0x18) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d50",
            "calling": [
                "FUN_08009c7c",
                "FUN_08009db0",
                "FUN_0800937c",
                "FUN_080098d8",
                "FUN_0800932c",
                "FUN_08009a80"
            ],
            "imported": true,
            "current_name": "initialize_parameter_08009d50"
        },
        "FUN_08003366": {
            "renaming": {
                "FUN_08003366": "update_params_08003366",
                "param_1": "base_addr",
                "param_2": "param_value",
                "param_3": "new_param1",
                "param_4": "new_param2"
            },
            "code": "void update_params_08003366(int base_addr, int param_value, undefined4 new_param1, undefined4 new_param2)\n{\n  if (param_value == 0x71) {\n    *(undefined4 *)(base_addr + 0x68) = new_param1;\n    *(undefined4 *)(base_addr + 0x40) = new_param2;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003366",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": true,
            "current_name": "update_params_08003366"
        },
        "FUN_080091b0": {
            "renaming": {
                "puVar2": "target_data",
                "FUN_080091b0": "copy_data_080091b0",
                "param_1": "start_index",
                "param_2": "source_data",
                "param_3": "length",
                "puVar1": "end_data"
            },
            "code": "void copy_data_080091b0(int start_index, undefined *source_data, int length) {\n  undefined *target_data = (undefined *)(start_index - 1);\n  undefined *end_data = source_data + length;\n  for (; source_data != end_data; source_data++) {\n    target_data++;\n    *target_data = *source_data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091b0",
            "calling": [
                "FUN_080027f0",
                "FUN_08009908"
            ],
            "imported": true,
            "current_name": "copy_data_080091b0"
        },
        "FUN_08009108": {
            "renaming": {
                "param_1": "input_value_1",
                "FUN_08009108": "calculate_result_if_data_not_null_08009108",
                "param_2": "input_value_2",
                "DAT_08009120": "data_is_not_null"
            },
            "code": "longlong calculate_result_if_data_not_null_08009108(undefined4 param_1,uint param_2)\n{\n  if (DAT_08009120 != 0) {\n    return CONCAT44(param_1,2);\n  }\n  return (ulonglong)param_2 << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009108",
            "calling": [
                "FUN_080090c2"
            ],
            "imported": true,
            "current_name": "calculate_result_if_data_not_null_08009108"
        },
        "FUN_0800a18c": {
            "renaming": {
                "PTR_DAT_0800a250": "data_ptr_11",
                "PTR_DAT_0800a230": "data_ptr_3",
                "PTR_DAT_0800a240": "data_ptr_7",
                "set_flag_if_negative": "set_flag_if_negative",
                "PTR_DAT_0800a24c": "data_ptr_10",
                "PTR_DAT_0800a22c": "data_ptr_2",
                "PTR_DAT_0800a23c": "data_ptr_6",
                "UNRECOVERED_JUMPTABLE": "jump_table_ptr",
                "FUN_0800a18c": "process_data_0800a18c",
                "PTR_DAT_0800a228": "data_ptr_1",
                "FUN_08009b5c": "unspecified_function",
                "PTR_DAT_0800a238": "data_ptr_5",
                "PTR_DAT_0800a248": "data_ptr_9",
                "PTR_DAT_0800a254": "data_ptr_12",
                "PTR_DAT_0800a234": "data_ptr_4",
                "PTR_DAT_0800a244": "data_ptr_8"
            },
            "code": "void process_data_0800a18c(void)\n{\n  code *jump_table_ptr;\n  jump_table_ptr = process_data_0800a18c;\n  set_flag_if_negative(PTR_DAT_0800a228);\n  set_flag_if_negative(PTR_DAT_0800a22c);\n  set_flag_if_negative(PTR_DAT_0800a230);\n  set_flag_if_negative(PTR_DAT_0800a234);\n  set_flag_if_negative(PTR_DAT_0800a238);\n  set_flag_if_negative(PTR_DAT_0800a23c);\n  set_flag_if_negative(PTR_DAT_0800a240);\n  set_flag_if_negative(PTR_DAT_0800a244);\n  set_flag_if_negative(PTR_DAT_0800a248);\n  set_flag_if_negative(PTR_DAT_0800a24c);\n  set_flag_if_negative(PTR_DAT_0800a250);\n  set_flag_if_negative(PTR_DAT_0800a254);\n  (*jump_table_ptr)();\n  return;\n}\n\nvoid set_flag_if_negative(int *data_ptr)\n{\n  if (*data_ptr < 0)\n  {\n    *data_ptr = 1;\n  }\n}\n",
            "called": [
                "FUN_08009b5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a18c",
            "calling": [
                "FUN_08009084"
            ],
            "imported": true,
            "current_name": "process_data_0800a18c"
        },
        "FUN_08009908": {
            "renaming": {
                "FUN_0800a154": "perform_calculation",
                "uVar1": "constant",
                "param_1": "num1",
                "PTR_PTR_DAT_08009914": "PTR_PTR_DAT_08009914",
                "FUN_080091d8": "handle_error",
                "param_2": "num2",
                "FUN_08009908": "calculate_result_08009908",
                "uVar3": "result1",
                "uVar2": "result2",
                "FUN_08009270": "handle_result"
            },
            "code": "uint calculate_result_08009908(uint num1, uint num2)\n{\n  undefined4 constant = *(undefined4 *)PTR_PTR_DAT_08009914;\n  if (num1 != 0) {\n    if (num2 == 0) {\n      handle_error();\n      return num2;\n    }\n    else {\n      uint result1 = perform_calculation();\n      uint result2 = num1;\n      if ((result1 < num2) && (result2 = handle_result(constant, num2), result2 != 0)) {\n        handle_success(result2, num1, num2);\n        handle_error(constant, num1);\n      }\n      return result2;\n    }\n  }\n  uint result3 = handle_result(constant, num2, num2, PTR_PTR_DAT_08009914);\n  return result3;\n}",
            "called": [
                "FUN_080091b0",
                "FUN_080091d8",
                "FUN_0800a154",
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009908",
            "calling": [
                "FUN_080027f0",
                "FUN_08002acc",
                "FUN_0800288c"
            ],
            "imported": true,
            "current_name": "calculate_result_08009908"
        },
        "FUN_08008a24": {
            "renaming": {
                "iVar1": "decoded_data",
                "FUN_08006b7c": "decode_index",
                "puVar3": "data_ptr",
                "param_1": "data_index",
                "PTR_DAT_08008a64": "data_array",
                "FUN_080072d8": "set_bit",
                "param_2": "param_2",
                "param_3": "param_3",
                "FUN_08008a24": "decode_data_08008a24",
                "param_4": "data_ptr",
                "uVar2": "decoded_value",
                "uVar4": "data_value",
                "FUN_08006b28": "decode_value"
            },
            "code": "void decode_data_08008a24(uint data_index, undefined4 param_2, undefined4 param_3, undefined *data_ptr)\n{\n  int decoded_data = -1;\n  uint data_value;\n\n  if (data_index < 0x3c) {\n    data_value = (uint)(char)PTR_DAT_08008a64[data_index];\n  }\n  else {\n    data_value = 0xffffffff;\n    data_ptr = data_ptr;\n  }\n  if ((data_value != 0xffffffff) && (decoded_data = decode_value(data_value, PTR_DAT_08008a68, param_3, data_ptr, data_ptr), decoded_data != 0)) {\n    uint decoded_value = decode_index((data_value << 0x18) >> 0x1c);\n    set_bit(decoded_value, 1 << (data_value & 0xf) & 0xffff, param_2);\n  }\n  return;\n}",
            "called": [
                "FUN_08006b28",
                "FUN_08006b7c",
                "FUN_080072d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a24",
            "calling": [
                "FUN_08002fca",
                "FUN_080005f8",
                "FUN_080088e0"
            ],
            "imported": true,
            "current_name": "decode_data_08008a24"
        },
        "FUN_08008abc": {
            "renaming": {
                "FUN_08008abc": "execute_main_function_08008abc",
                "FUN_0800723c": "initialize_system"
            },
            "code": "void execute_main_function_08008abc(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_0800723c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008abc",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": true,
            "current_name": "execute_main_function_08008abc"
        },
        "FUN_08002b68": {
            "renaming": {
                "iVar1": "success",
                "PTR_DAT_08002bf4": "ptr_dat_1",
                "FUN_08007f0e": "decode_and_check_internal",
                "param_1": "buffer",
                "param_2": "buffer_len",
                "param_3": "key",
                "FUN_08002acc": "decode_key",
                "param_4": "key_len",
                "FUN_08002a30": "function_1",
                "param_5": "num_bytes_to_decode",
                "FUN_08002b68": "decode_and_check_08002b68",
                "uVar3": "key_index",
                "FUN_08002a58": "function_2",
                "uVar2": "num_bytes_to_use"
            },
            "code": "int decode_and_check_08002b68(uint32_t *buffer, uint32_t buffer_len, uint32_t key, uint32_t key_len, uint8_t num_bytes_to_decode) {\n  int success = 0;\n  uint8_t num_bytes_to_use = num_bytes_to_decode;\n  uint32_t key_index = 0;\n  if (buffer[4] == 0) {\n    return 0;\n  }\n  decode_key(key);\n  if (*(int *)PTR_DAT_08002bf4 != 0) {\n    if (num_bytes_to_use > 3) {\n      num_bytes_to_use = 3;\n    }\n    for (uint8_t i = num_bytes_to_use; i > 0; i--) {\n      uint8_t byte_to_decode = (key_len >> ((i - 1) * 8)) & 0xff;\n      (*(void (**)(uint32_t *, uint8_t))(*buffer)[0])(buffer, byte_to_decode);\n    }\n    (*(void (**)(uint32_t *, uint8_t))(*buffer)[1])(buffer, 0);\n    success = decode_and_check_08002b68_internal(buffer + 5, (buffer_len & 0x7f) << 1, *(uint32_t *)PTR_DAT_08002bf4, key, key_len);\n    if (success != 0) {\n      key_index = 0;\n    }\n    *PTR_DAT_08002bf8 = 0;\n    *PTR_DAT_08002bfc = (char)key_index;\n    return key_index;\n  }\n  buffer[1] = 1;\n  return 0;\n}",
            "called": [
                "FUN_08002a58",
                "FUN_08007f0e",
                "FUN_08002a30",
                "FUN_08002acc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b68",
            "calling": [
                "FUN_08002c00"
            ],
            "imported": true,
            "current_name": "decode_and_check_08002b68"
        },
        "FUN_080005e0": {
            "renaming": {
                "PTR_DAT_080005f4": "ptr_dat_f4",
                "PTR_DAT_080005f0": "ptr_dat_f0",
                "FUN_080005e0": "reset_values_080005e0"
            },
            "code": "void reset_values_080005e0(void)\n{\n  unsigned char* PTR_DAT_080005f0 = 0;\n  unsigned char* PTR_DAT_080005f4 = 0xff;\n  *PTR_DAT_080005f0 = 0;\n  *PTR_DAT_080005f4 = 0xff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_080005f8",
                "FUN_08000aec"
            ],
            "imported": true,
            "current_name": "reset_values_080005e0"
        },
        "FUN_08008020": {
            "renaming": {
                "*(char *)(iVar1 + 0x5d)": "*(char *)(result + 0x5d)",
                "iVar1": "result",
                "param_1": "param",
                "FUN_08008020": "check_and_call_function_if_not_called_before_08008020",
                "FUN_080049e0": "call_function",
                "FUN_08007f78": "get_result_of_previous_function_call"
            },
            "code": "void check_and_call_function_if_not_called_before_08008020(undefined4 param)\n{\n  int result = get_result_of_previous_function_call();\n  if (*(char *)(result + 0x5d) == \"\\0\") {\n    call_function(param);\n  }\n  return;\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008020",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": true,
            "current_name": "check_and_call_function_if_not_called_before_08008020"
        },
        "FUN_0800674c": {
            "renaming": {
                "FUN_0800674c": "do_nothing_0800674c"
            },
            "code": "\nvoid do_nothing_0800674c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674c",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": true,
            "current_name": "do_nothing_0800674c"
        },
        "FUN_08005dac": {
            "renaming": {
                "iVar2": "first_value",
                "iVar3": "second_value",
                "uVar1": "value",
                "param_1": "target_address",
                "DAT_08005df0": "constant_address",
                "param_2": "source_array",
                "FUN_08005dac": "set_values_08005dac"
            },
            "code": "void set_values_08005dac(int target_address, int *source_array)\n{\n  uint bitmask = 0xffffefff;\n  uint value = *(uint *)(target_address + 4);\n  int first_value = *source_array;\n  int second_value = source_array[2];\n  if (target_address == DAT_08005df0) {\n    value = value & 0xffffbfff | source_array[5] << 6;\n  }\n  *(uint *)(target_address + 4) = value;\n  *(uint *)(target_address + 0x1c) = *(uint *)(target_address + 0x1c) & 0xffff8cff | first_value << 8;\n  *(int *)(target_address + 0x40) = source_array[1];\n  *(uint *)(target_address + 0x20) = *(uint *)(target_address + 0x20) & 0xffffdfff | second_value << 0xc;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dac",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": true,
            "current_name": "set_values_08005dac"
        },
        "FUN_0800674e": {
            "renaming": {
                "param_1": "device_ptr",
                "do_nothing_0800674c": "do_nothing",
                "FUN_0800674e": "initialize_device_0800674e"
            },
            "code": "int initialize_device_0800674e(int *device_ptr) {\n  if (device_ptr != NULL) {\n    if (*(char *)((int)device_ptr + 0x39) == '\\0') {\n      *(undefined *)(device_ptr + 0xe) = 0;\n      do_nothing();\n    }\n    *(undefined *)((int)device_ptr + 0x39) = 0x24;\n    *(uint *)(*device_ptr + 0xc) &= 0xffffdfff;\n    initialize_device_0800674e_subroutine(device_ptr);\n    *(uint *)(*device_ptr + 0x10) &= 0xffffb7ff;\n    *(uint *)(*device_ptr + 0x14) &= 0xffffffd5;\n    *(uint *)(*device_ptr + 0xc) |= 0x2000;\n    device_ptr[0xf] = 0;\n    *(undefined *)((int)device_ptr + 0x39) = 0x20;\n    *(undefined *)((int)device_ptr + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_0800674c",
                "FUN_08006538"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674e",
            "calling": [
                "FUN_08008078"
            ],
            "imported": true,
            "current_name": "initialize_device_0800674e"
        },
        "FUN_0800771c": {
            "renaming": {
                "iVar1": "callback_ptr",
                "param_1": "flag",
                "FUN_08007718": "get_callback_ptr",
                "FUN_0800771c": "execute_callback_if_flag_set_0800771c"
            },
            "code": "void execute_callback_if_flag_set_0800771c(int flag) {\n  int callback_ptr = get_callback_ptr();\n  if (*(code **)(callback_ptr + 0x4c) != (code *)0x0 && *(char *)(flag + 0x1c) == '\\x01') {\n    (**(code **)(callback_ptr + 0x4c))(callback_ptr, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800771c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": true,
            "current_name": "execute_callback_if_flag_set_0800771c"
        },
        "FUN_080066e8": {
            "renaming": {
                "iVar1": "comparison_result",
                "param_1": "parameters",
                "param_2": "num_parameters",
                "param_3": "expected_result",
                "param_4": "comparison_value",
                "param_5": "max_value",
                "FUN_080066e8": "check_parameters_080066e8"
            },
            "code": "uint check_parameters_080066e8(uint **parameters, uint num_parameters, uint expected_result, int comparison_value, uint max_value){\n  int comparison_result;\n  do {\n    comparison_result = ((num_parameters & ~**parameters) == 0) != comparison_value;\n    if (comparison_result){\n      return 0;\n    }\n  } while ((max_value == 0xffffffff) || ((max_value != 0 && (comparison_result = FUN_08003760(), (uint)(comparison_result - expected_result) <= max_value))));\n  (*parameters)[3] = (*parameters)[3] & 0xfffffe5f;\n  (*parameters)[5] = (*parameters)[5] & 0xfffffffe;\n  *(undefined *)((int)parameters + 0x39) = 0x20;\n  *(undefined *)((int)parameters + 0x3a) = 0x20;\n  *(undefined *)(parameters + 0xe) = 0;\n  return 3;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066e8",
            "calling": [
                "FUN_080067ac"
            ],
            "imported": true,
            "current_name": "check_parameters_080066e8"
        },
        "FUN_08009358": {
            "renaming": {
                "FUN_08009358": "process_data_08009358",
                "iVar1": "result",
                "iVar3": "index",
                "puVar2": "end_of_data",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "length"
            },
            "code": "int process_data_08009358(int arg1, int arg2, char *data, int length) {\n  int index = 0;\n  char *end_of_data = data + length;\n  while (data != end_of_data) {\n    if (index == 0) {\n      return 0;\n    }\n    int result = process_byte(arg1, *data, arg2, length, index);\n    length = result + 1;\n    data++;\n  }\n  return result;\n}",
            "called": [
                "FUN_0800932c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009358",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": true,
            "current_name": "process_data_08009358"
        },
        "FUN_0800270c": {
            "renaming": {
                "FUN_0800270c": "calculate_difference_between_two_pointers_0800270c",
                "PTR_DAT_0800271c": "second_pointer",
                "PTR_DAT_08002718": "first_pointer"
            },
            "code": "int calculate_difference_between_two_pointers_0800270c(void)\n{\n  uint first_value = (uint)(byte)*PTR_DAT_08002718;\n  uint second_value = (uint)(byte)*PTR_DAT_0800271c;\n  uint difference = first_value - second_value;\n  return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800270c",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": true,
            "current_name": "calculate_difference_between_two_pointers_0800270c"
        },
        "FUN_08003370": {
            "renaming": {
                "FUN_08003370": "set_data_in_struct_08003370",
                "param_1": "struct_address",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "N/A"
            },
            "code": "void set_data_in_struct_08003370(int struct_address, int data1, int data2)\n{\n  *(int *)(struct_address + 0x6c) = data1;\n  *(int *)(struct_address + 0x44) = data2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003370",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": true,
            "current_name": "set_data_in_struct_08003370"
        },
        "FUN_08007fa0": {
            "renaming": {
                "FUN_08007fa0": "process_params_08007fa0",
                "iVar1": "iVar",
                "*(int *)(param_1 + 0xc)": "*(int *)(param1 + 0xc)",
                "process_param1": "process_param1",
                "process_param2": "process_param2",
                "param_1": "param1",
                "*(undefined *)(iVar1 + 0x5c)": "*(undefined *)(iVar + 0x5c)",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "*(code **)(iVar1 + 100)": "*(code **)(iVar + 100)",
                "FUN_08007f78": "get_iVar",
                "*(undefined *)(iVar1 + 0x88)": "*(undefined *)(iVar + 0x88)"
            },
            "code": "void process_params_08007fa0(int param1, int param2, int param3, undefined4 param4) {\n  int iVar;\n  iVar = get_iVar();\n  if (param3 == *(int *)(param1 + 0xc)) {\n    if (param2 == 0) {\n      *(undefined *)(iVar + 0x88) = 0;\n      *(undefined *)(iVar + 0x5c) = 0;\n      if (*(code **)(iVar + 100) != (code *)0x0) {\n        (**(code **)(iVar + 100))();\n      }\n      process_param1(param1, iVar + 0x68, *(undefined *)(iVar + 0x88), 8);\n      return;\n    }\n    *(undefined *)(iVar + 0x5c) = 1;\n    process_param2(param1, iVar + 0x68, 0x20, 8, param4);\n  }\n  return;\n}",
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007fa0",
            "calling": [
                "FUN_08004ac2"
            ],
            "imported": true,
            "current_name": "process_params_08007fa0"
        },
        "FUN_08003376": {
            "renaming": {
                "bVar1": "is_data_valid",
                "FUN_08003376": "process_data_08003376",
                "max_data_length": "max_data_length",
                "param_1": "data_buffer",
                "param_2": "data",
                "param_3": "data_length",
                "PTR_100": "data_processor"
            },
            "code": "void process_data_08003376(uint8_t *data_buffer, uint8_t data, uint32_t data_length) {\n  bool is_data_valid;\n  uint32_t max_data_length = *(uint32_t *)(data_buffer + 8);\n  if (data_length < max_data_length) {\n    is_data_valid = false;\n  }\n  else {\n    is_data_valid = true;\n    code *PTR_100 = *(code **)(data_buffer + 100);\n    if (PTR_100 != (code *)0x0) {\n      *data_buffer = 1;\n      (*PTR_100)(*(uint32_t *)(data_buffer + 0x3c));\n      if (data_length < max_data_length) {\n        is_data_valid = false;\n      }\n      else {\n        is_data_valid = true;\n      }\n    }\n  }\n  if (!is_data_valid) {\n    *(uint8_t *)(*(int *)(data_buffer + 4) + data_length) = data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003376",
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "imported": true,
            "current_name": "process_data_08003376"
        },
        "FUN_08008bf4": {
            "renaming": {
                "FUN_08008bf4": "checkDataValidity_08008bf4",
                "PTR_DAT_08008c1c": "dataPointer",
                "FUN_08008afa": "processData",
                "DAT_08008c18": "dataIsValid"
            },
            "code": "void checkDataValidity_08008bf4(void)\n{\n  if (DAT_08008c18 != 0)\n  {\n    processData(PTR_DAT_08008c1c);\n  }\n  return;\n}",
            "called": [
                "FUN_08008afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf4",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": true,
            "current_name": "checkDataValidity_08008bf4"
        },
        "FUN_08005430": {
            "renaming": {
                "FUN_08005430": "get_value_from_offset_08005430",
                "param_1": "base_address"
            },
            "code": "int get_value_from_offset_08005430(int base_address){\n  int value = *(int *)(base_address + 0x40);\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005430",
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "imported": true,
            "current_name": "get_value_from_offset_08005430"
        },
        "FUN_08002720": {
            "renaming": {
                "bVar2": "byte_value",
                "bVar1": "current_byte_index",
                "FUN_08002720": "read_byte_from_memory_08002720",
                "PTR_DAT_08002744": "max_byte_pointer",
                "PTR_DAT_08002740": "current_byte_pointer",
                "PTR_DAT_08002748": "byte_array_pointer"
            },
            "code": "uint read_byte_from_memory_08002720() {\n  uint current_byte_index = *PTR_DAT_08002740;\n  uint max_byte_index = (uint)(byte)*PTR_DAT_08002744;\n  if (current_byte_index < max_byte_index) {\n    uint byte_address = *(int *)PTR_DAT_08002748 + current_byte_index;\n    uint byte_value = *(byte *)byte_address;\n    *PTR_DAT_08002740 = current_byte_index + 1;\n    return byte_value;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002720",
            "calling": [
                "FUN_08001c08"
            ],
            "imported": true,
            "current_name": "read_byte_from_memory_08002720"
        },
        "FUN_080031ce": {
            "renaming": {
                "FUN_080031ce": "execute_command_080031ce",
                "param_1": "command_ptr",
                "FUN_0800307a": "set_parameter",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "num_params",
                "param_5": "param_offset",
                "puVar1": "command_vtable",
                "uVar2": "i"
            },
            "code": "void execute_command_080031ce(void* command_ptr, uint32_t param_2, uint32_t param_3, uint32_t num_params, int param_offset) {\n  void (*command_func)(void*, uint32_t, uint32_t, void*, uint32_t);\n  void** command_vtable = (void**)*((void**)command_ptr);\n  if (command_vtable != NULL) {\n    command_func = (void (*)(void*, uint32_t, uint32_t, void*, uint32_t))command_vtable[15];\n    command_func(command_vtable, 0xf0, param_3, (void*)command_vtable[0], num_params);\n    ((void (*)(void*, uint32_t))command_vtable[121])(command_vtable, 0x79);\n    ((void (*)(void*, uint32_t))command_vtable[121])(command_vtable, param_2);\n    ((void (*)(void*, uint32_t))command_vtable[121])(command_vtable, param_3);\n    for (uint32_t i=0; i<num_params; i++) {\n      set_parameter(command_ptr, 1, param_offset + i, 0);\n    }\n    ((void (*)(void*, uint32_t))command_vtable[121])(command_vtable, 0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031ce",
            "calling": [
                "FUN_08002df6"
            ],
            "imported": true,
            "current_name": "execute_command_080031ce"
        },
        "FUN_08009918": {
            "renaming": {
                "iVar2": "value",
                "FUN_08009918": "initialize_param_08009918",
                "param_1": "result",
                "param_2": "param_2",
                "puVar1": "data_ptr"
            },
            "code": "void initialize_param_08009918(int *result, undefined4 param_2)\n{\n  undefined *data_ptr = PTR_DAT_08009934;\n  *(undefined4 *)PTR_DAT_08009934 = 0;\n  int value = find_value(param_2);\n  if ((value == -1) && (*(int *)data_ptr != 0)) {\n    *result = *(int *)data_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008804"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009918",
            "calling": [
                "FUN_08009270"
            ],
            "imported": true,
            "current_name": "initialize_param_08009918"
        },
        "FUN_08005434": {
            "renaming": {
                "bVar1": "loop_condition",
                "DAT_0800545c": "multiplier_constant",
                "FUN_08005434": "count_down_08005434",
                "param_1": "num",
                "local_4": "countdown",
                "uint": "uint64_t",
                "PTR_DAT_08005458": "PTR_multiplier"
            },
            "code": "void count_down_08005434(int num) {\n  uint64_t multiplier = (uint64_t)DAT_0800545c * (uint64_t)*(uint *)PTR_DAT_08005458 >> 0x29;\n  int countdown = num * multiplier;\n  while (countdown > 0) {\n    countdown--;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005434",
            "calling": [
                "FUN_08005460"
            ],
            "imported": true,
            "current_name": "count_down_08005434"
        },
        "FUN_08005e2e": {
            "renaming": {
                "param_1": "data",
                "FUN_08005e2e": "process_data_08005e2e",
                "puVar1": "data_ptr"
            },
            "code": "void process_data_08005e2e(uint **data)\n{\n  uint *data_ptr;\n  (*data)[61] = 2;\n  data_ptr = *data;\n  if ((data_ptr[8] & 0x1111) == 0) {\n    if ((data_ptr[8] & 0x444) == 0) {\n      *data_ptr = *data_ptr & 0xfffffffe;\n    }\n  }\n  perform_task(data);\n  (*data)[61] = 0;\n  (*data + 15) = 0;\n  return;\n}",
            "called": [
                "FUN_08007110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e2e",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": true,
            "current_name": "process_data_08005e2e"
        },
        "FUN_08007736": {
            "renaming": {
                "iVar1": "function_address",
                "(code *)0x0": "null_pointer",
                "FUN_08007718": "get_function_address",
                "FUN_08007736": "execute_function_if_not_null_08007736",
                "*(code **)(iVar1 + 0x48)": "function_pointer"
            },
            "code": "void execute_function_if_not_null_08007736(void)\n{\n  int function_address = get_function_address();\n  if (*(code **)(function_address + 0x48) != (code *)0x0) {\n    (**(code **)(function_address + 0x48))();\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007736",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": true,
            "current_name": "execute_function_if_not_null_08007736"
        },
        "FUN_08002968": {
            "renaming": {
                "data_constant_1": "0x4000",
                "iVar1": "data_offset",
                "iVar2": "index",
                "data_constant_3": "data_constant_3",
                "data_constant_2": "data_constant_2",
                "(char)iVar1": "(char)data_offset",
                "*PTR_DAT_080029f0": "*data_counter_2",
                "PTR_LAB_08002b00_1_08002a18": "data_label_2",
                "param_1": "data_address",
                "*(char *)(param_1 + 0x10)": "*(char *)(data_address + 0x10)",
                "execute_function_3": "execute_function_3",
                "execute_function_2": "execute_function_2",
                "*PTR_DAT_08002a08": "*data_pointer_4",
                "*(int *)PTR_DAT_080029f4": "*(int *)data_pointer_1",
                "*PTR_DAT_080029fc": "*data_counter_3",
                "*(undefined *)(param_1 + 0x11)": "*(undefined *)(data_address + 0x11)",
                "DAT_08002a10": "data_constant_1",
                "*PTR_DAT_080029ec": "*data_counter_1",
                "*PTR_DAT_08002a00": "*data_counter_4",
                "PTR_LAB_08002774_1_08002a14": "data_label_1",
                "*PTR_DAT_080029f8": "*data_pointer_3",
                "FUN_08002968": "initialize_data_08002968",
                "*(int *)PTR_DAT_08002a04": "*(int *)data_pointer_2",
                "param_2": "data_value",
                "FUN_080091c6": "execute_function_1",
                "*PTR_DAT_08002a0c": "*data_counter_5"
            },
            "code": "void initialize_data_08002968(int data_address, uint data_value)\n{\n  int index;\n  int data_offset;\n  \n  *PTR_DAT_080029ec = 0;\n  *PTR_DAT_080029f0 = 0;\n  if (*(int *)PTR_DAT_080029f4 != 0) {\n    execute_function_1(*(int *)PTR_DAT_080029f4,0,*PTR_DAT_080029f8);\n  }\n  *PTR_DAT_080029fc = 0;\n  *PTR_DAT_08002a00 = 0;\n  if (*(int *)PTR_DAT_08002a04 != 0) {\n    execute_function_1(*(int *)PTR_DAT_08002a04,0,*PTR_DAT_08002a08);\n  }\n  *PTR_DAT_08002a0c = 0;\n  data_offset = (data_value & 0x7f) << 1;\n  *(char *)(data_address + 0x10) = (char)data_offset;\n  if (data_value == 0x33) {\n    *(undefined *)(data_address + 0x11) = 1;\n  }\n  else {\n    *(undefined *)(data_address + 0x11) = 0;\n  }\n  index = data_address + 0x14;\n  execute_function_2(index,DAT_08002a10,0x4000,data_offset,*(undefined *)(data_address + 0x11));\n  if (*(char *)(data_address + 0x11) == \"\\0\") {\n    execute_function_3(index,data_constant_2,PTR_LAB_08002774_1_08002a14);\n    execute_function_3(index,data_constant_3,PTR_LAB_08002b00_1_08002a18);\n  }\n  return;\n}",
            "called": [
                "FUN_08007f8e",
                "FUN_080077b0",
                "FUN_08007f7c",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002968",
            "calling": [
                "FUN_08002a1c"
            ],
            "imported": true,
            "current_name": "initialize_data_08002968"
        },
        "FUN_08004ccc": {
            "renaming": {
                "param_1": "input_data",
                "FUN_08004ccc": "process_input_08004ccc",
                "puVar1": "flag_ptr"
            },
            "code": "int process_input_08004ccc(uint **input_data)\n{\n  uint *flag_ptr;\n  flag_ptr = input_data[11];\n  if (*(char *)((int)input_data + 61) == '!') {\n    if (*(short *)((int)input_data + 42) == 0) {\n      if (((flag_ptr == (uint *)0x4) || (flag_ptr == (uint *)0x8)) || (flag_ptr == (uint *)0xffff0000)) {\n        (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n        **input_data = **input_data | 0x200;\n        input_data[12] = (uint *)0x0;\n        *(undefined *)((int)input_data + 61) = 0x20;\n        if (*(char *)((int)input_data + 62) == '@') {\n          *(undefined *)((int)input_data + 62) = 0;\n          do_nothing_08004b80();\n        }\n        else {\n          *(undefined *)((int)input_data + 62) = 0;\n          do_nothing_08004a1e();\n        }\n      }\n      else {\n        (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n        input_data[12] = (uint *)0x11;\n        *(undefined *)((int)input_data + 62) = 0;\n        *(undefined *)((int)input_data + 61) = 0x20;\n        do_nothing_08004a1e();\n      }\n    }\n    else {\n      flag_ptr = input_data[9];\n      input_data[9] = (uint *)((int)flag_ptr + 1);\n      (*input_data)[4] = (uint)*(byte *)flag_ptr;\n      *(short *)((int)input_data + 42) = *(short *)((int)input_data + 42) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "process_input_08004ccc"
        },
        "FUN_080042d4": {
            "renaming": {
                "param_1": "bitmask",
                "param_2": "ptr_data",
                "PTR_": "ptr_",
                "FUN_080042d4": "is_bit_set_080042d4",
                "DAT_": "dat_"
            },
            "code": "int is_bit_set_080042d4(uint bitmask, uint* PTR_data){\n  if ((bitmask & *PTR_data) == 0) {\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042d4",
            "calling": [
                "FUN_080072f0"
            ],
            "imported": true,
            "current_name": "is_bit_set_080042d4"
        },
        "FUN_0800542a": {
            "renaming": {
                "param_1": "offset",
                "FUN_0800542a": "get_value_from_offset_0800542a"
            },
            "code": "unsigned char get_value_from_offset_0800542a(int offset)\n{\n  return *(unsigned char *)(offset + 0x3d);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800542a",
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "imported": true,
            "current_name": "get_value_from_offset_0800542a"
        },
        "FUN_0800457c": {
            "renaming": {
                "param_1": "array_ptr",
                "pbVar1": "ptr_to_byte",
                "PTR_": "ptr_to_",
                "FUN_0800457c": "increment_and_store_byte_at_address_0800457c",
                "DAT_": "data_"
            },
            "code": "int increment_and_store_byte_at_address_0800457c(int *array_ptr){\n  int *PTR_short = array_ptr + 10; \n  if (*PTR_short != 0) {\n    byte *PTR_byte = (byte *)array_ptr[9];\n    array_ptr[9] = (int)(PTR_byte + 1);\n    *(uint *)(*array_ptr + 16) = (uint)*PTR_byte;\n    *PTR_short = *PTR_short - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800457c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "increment_and_store_byte_at_address_0800457c"
        },
        "FUN_080091c6": {
            "renaming": {
                "param_1": "array",
                "*param_1": "*array",
                "param_2": "value",
                "param_3": "array_length",
                "FUN_080091c6": "fill_array_with_value_080091c6",
                "puVar1": "end_of_array"
            },
            "code": "void fill_array_with_value_080091c6(unsigned char *array, unsigned char value, int array_length)\n{\n  unsigned char *end_of_array = array + array_length;\n  for (; array != end_of_array; array++) {\n    *array = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091c6",
            "calling": [
                "FUN_08006d80",
                "FUN_08002a58",
                "FUN_08009cdc",
                "FUN_08007118",
                "FUN_08009db0",
                "FUN_08009d24",
                "FUN_08002968"
            ],
            "imported": true,
            "current_name": "fill_array_with_value_080091c6"
        },
        "FUN_0800a07a": {
            "renaming": {
                "iVar1": "result",
                "bVar3": "is_result_negative",
                "param_1": "data",
                "param_2": "data_info",
                "FUN_0800a07a": "check_and_update_data_0800a07a",
                "uVar2": "updated_data_info"
            },
            "code": "void check_and_update_data_0800a07a(undefined4 data, int data_info) {\n  int result = FUN_0800a130(data, (int)*(short *)(data_info + 0xe));\n  bool is_result_negative = result == -1;\n  ushort updated_data_info;\n  if (is_result_negative) {\n    updated_data_info = *(ushort *)(data_info + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data_info + 0x54) = result;\n    updated_data_info = *(ushort *)(data_info + 0xc) | 0x1000;\n  }\n  *(ushort *)(data_info + 0xc) = updated_data_info;\n}\n",
            "called": [
                "FUN_0800a130"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a07a",
            "calling": [],
            "imported": true,
            "current_name": "check_and_update_data_0800a07a"
        },
        "FUN_08003a20": {
            "renaming": {
                "iVar1": "next_result",
                "iVar3": "block_start",
                "param_1": "memory_block",
                "param_2": "param_2",
                "FUN_08003a20": "initialize_08003a20",
                "uVar2": "result",
                "local_14": "local_counter"
            },
            "code": "int initialize_08003a20(int *memory_block, uint32_t param_2)\n{\n  int block_start = *memory_block;\n  if ((*(uint32_t *)(block_start + 8) & 1) == 0) {\n    *(uint32_t *)(block_start + 8) |= 1;\n    uint32_t local_counter = (uint32_t)((uint64_t)constant_multiplier * (uint64_t)*(uint32_t *)constant_pointer >> 0x32);\n    for (local_counter; local_counter != 0; local_counter--) {\n    }\n    int result = process(memory_block, param_2, (int)((uint64_t)constant_multiplier * (uint64_t)*(uint32_t *)constant_pointer));\n    do {\n      if ((*(uint32_t *)(*memory_block + 8) & 1) != 0) {\n        return 0;\n      }\n      int next_result = process(memory_block, param_2, (int)((uint64_t)constant_multiplier * (uint64_t)*(uint32_t *)constant_pointer));\n    } while ((uint32_t)(next_result - result) < 3);\n    memory_block[10] |= 0x10;\n    memory_block[0xb] |= 1;\n    *(undefined *)(memory_block + 9) = 0;\n    return 1;\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a20",
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "imported": true,
            "current_name": "initialize_08003a20"
        },
        "FUN_080064b0": {
            "renaming": {
                "*(uint *)(*param_1 + 0x14)": "*otherFlagsAddress",
                "0xfffffedf": "flagsMask",
                "*(uint *)(*param_1 + 0xc)": "*flagsAddress",
                "param_1": "memoryAddress",
                "uint": "uint32_t",
                "0xfffffffe": "otherFlagsMask",
                "*param_1": "*memoryAddress",
                "FUN_080064b0": "clearFlagsAndSetSpaceCharacter_080064b0",
                "0xc": "flagsOffset",
                "0x14": "otherFlagsOffset"
            },
            "code": "void clearFlagsAndSetSpaceCharacter_080064b0(int *memoryAddress)\n{\n  uint32_t *flagsAddress = (uint32_t *)(*memoryAddress + 0xc);\n  uint32_t *otherFlagsAddress = (uint32_t *)(*memoryAddress + 0x14);\n  *flagsAddress = *flagsAddress & 0xfffffedf;\n  *otherFlagsAddress = *otherFlagsAddress & 0xfffffffe;\n  *(undefined *)((int)memoryAddress + 0x3a) = 0x20;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064b0",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": true,
            "current_name": "clearFlagsAndSetSpaceCharacter_080064b0"
        },
        "FUN_08009cdc": {
            "renaming": {
                "uVar1": "uVar1",
                "param_1": "params",
                "param_2": "param_2",
                "param_3": "param_3",
                "FUN_08009cdc": "initialize_params_08009cdc"
            },
            "code": "void initialize_params_08009cdc(undefined4 *params, undefined2 param_2, undefined2 param_3) {\n  params[0] = 0;\n  params[1] = 0;\n  params[2] = 0;\n  *(undefined2 *)(params + 3) = param_2;\n  params[0x19] = 0;\n  *(undefined2 *)((int)params + 0xe) = param_3;\n  params[4] = 0;\n  params[5] = 0;\n  params[6] = 0;\n  memset(params + 0x17, 0, 8);\n  params[8] = params;\n  params[9] = DAT_08009d14;\n  params[10] = PTR_FUN_0800a042_1_08009d18;\n  params[0xb] = PTR_FUN_0800a07a_1_08009d1c;\n  params[0xc] = PTR_LAB_0800a09e_1_08009d20;\n  return;\n}",
            "called": [
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009cdc",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": true,
            "current_name": "initialize_params_08009cdc"
        },
        "FUN_08002a58": {
            "renaming": {
                "iVar1": "comparison_result",
                "param_1": "input",
                "FUN_08002a58": "check_if_null_terminator_08002a58",
                "uVar2": "result"
            },
            "code": "int check_if_null_terminator_08002a58(int input)\n{\n  int result;\n  if (*(char *)(input + 0x11) == '\\0') {\n    result = 4;\n  }\n  else {\n    int comparison_result = perform_comparison(input + 0x14, *PTR_DAT_08002ab0, *(unsigned int *)PTR_DAT_08002aac, *PTR_DAT_08002aa8);\n    if (comparison_result == 0) {\n      result = 0;\n    }\n    else if (comparison_result == 1) {\n      result = 1;\n    }\n    else {\n      result = 4;\n    }\n    if (*(unsigned int *)PTR_DAT_08002aac != 0) {\n      perform_operation(*(unsigned int *)PTR_DAT_08002aac, 0, *PTR_DAT_08002ab4);\n    }\n    *PTR_DAT_08002ab8 = 0;\n    *PTR_DAT_08002aa8 = 0;\n    *PTR_DAT_08002abc = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08007e74",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a58",
            "calling": [
                "FUN_08001c18",
                "FUN_08002ac0",
                "FUN_08002b68"
            ],
            "imported": true,
            "current_name": "check_if_null_terminator_08002a58"
        },
        "FUN_080026b0": {
            "renaming": {
                "FUN_08008ef4": "calculate_new_value",
                "param_1": "data_address",
                "param_2": "data_value",
                "FUN_080026b0": "process_data_080026b0",
                "FUN_0800267c": "update_data"
            },
            "code": "void process_data_080026b0(int data_address,int data_value)\n{\n  if (data_value < 546) {\n    if (data_value < 0) {\n      data_value = 0;\n    }\n    else if (180 < data_value) {\n      data_value = 180;\n    }\n    data_value = calculate_new_value(data_value,0,180,(0x88 - *(char *)(data_address + 1)) * 4,(600 - *(char *)(data_address + 2)) * 4);\n  }\n  update_data(data_address,data_value);\n  return;\n}",
            "called": [
                "FUN_0800267c",
                "FUN_08008ef4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026b0",
            "calling": [
                "FUN_0800021a"
            ],
            "imported": true,
            "current_name": "process_data_080026b0"
        },
        "FUN_08006092": {
            "renaming": {
                "FUN_08005fe8": "process_data_internal",
                "param_1 + 1": "&data[1]",
                "param_1": "data",
                "*(char *)((int)param_1 + 0x3d)": "data[61]",
                "FUNC_08006e68()": "call_helper_function()",
                "*param_1": "data[0]",
                "FUN_08006092": "process_data_08006092",
                "*(undefined *)(param_1 + 0xf)": "data[15]"
            },
            "code": "int process_data_08006092(int *data)\n{\n  if (data != NULL)\n  {\n    if (data[15] == 0)\n    {\n      data[15] = 0;\n      call_helper_function();\n    }\n    data[61] = 2;\n    process_data_08006092_internal(data[0], &data[1]);\n    data[61] = 1;\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_08006e68",
                "FUN_08005fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [
                "FUN_08007118"
            ],
            "imported": true,
            "current_name": "process_data_08006092"
        },
        "FUN_08008d8c": {
            "renaming": {
                "param_1": "parameter_1",
                "DAT_08008da8": "DAT_08008da8",
                "param_2": "parameter_2",
                "PTR_DAT_08008dac": "PTR_DAT_08008dac",
                "FUN_08008d30": "execute_action",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "FUN_08008d8c": "check_parameter_and_execute_action_08008d8c"
            },
            "code": "void check_parameter_and_execute_action_08008d8c(int parameter_1, int parameter_2, undefined4 parameter_3, undefined4 parameter_4) {\n  if (parameter_1 == 1) {\n    if (parameter_2 == 0xffff) {\n      execute_action(PTR_DAT_08008dac, DAT_08008da8, parameter_3, 0xffff, parameter_4);\n    }\n  }\n}",
            "called": [
                "FUN_08008d30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d8c",
            "calling": [],
            "imported": true,
            "current_name": "check_parameter_and_execute_action_08008d8c"
        },
        "FUN_080004d4": {
            "renaming": {
                "FUN_08002580": "process_data",
                "iVar1": "i",
                "puVar2": "data_ptr",
                "param_1": "mode",
                "param_2": "value",
                "FUN_080004d4": "initialize_080004d4"
            },
            "code": "void initialize_080004d4(int mode, int value){\n  if (mode != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    undefined *data_ptr = PTR_DAT_080004fc;\n    for (int i = 11; i >= 0; i--) {\n      process_data(data_ptr);\n      data_ptr += 3;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004d4",
            "calling": [],
            "imported": true,
            "current_name": "initialize_080004d4"
        },
        "FUN_080005f8": {
            "renaming": {
                "FUN_080005f8": "FUNC_080005f8"
            },
            "code": "\nvoid FUNC_080005f8(uint param_1,int param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  char cVar3;\n  bool bVar4;\n  uint uVar5;\n  \n  iVar2 = FUN_08002fa0(PTR_DAT_08000874,param_1);\n  if (iVar2 != 0x7f) {\n    iVar2 = FUN_08002fa0(PTR_DAT_08000874,param_1);\n    if (iVar2 == 6) {\n      cVar3 = *PTR_DAT_0800087c;\n      if (cVar3 == '\\0') {\n        cVar3 = '\\0';\n      }\n      else if (param_2 == 6) {\n        cVar3 = '\\0';\n      }\n    }\n    else {\n      cVar3 = '\\0';\n    }\n    if (cVar3 != '\\0') {\n      FUN_080005e0();\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else if (param_2 == 4) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((byte)PTR_DAT_08000880[param_1] < 0xc) {\n        iVar2 = FUN_080026f8(PTR_DAT_08000884 + (uint)(byte)PTR_DAT_08000880[param_1] * 3);\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        FUN_08000588(param_1);\n      }\n    }\n    uVar5 = param_1 - 0x2e & 0xff;\n    if (uVar5 < 0xe) {\n      if (param_1 < 0x3c) {\n        iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n      }\n      else {\n        iVar2 = -1;\n      }\n      iVar2 = FUN_080036ac(iVar2);\n      if (iVar2 == 0) {\n        bVar4 = false;\n      }\n      else {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = FUN_080036ac(iVar2);\n        if (iVar2 == 1) {\n          bVar4 = false;\n        }\n        else {\n          bVar4 = true;\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      FUN_08000488(uVar5,param_2 == 2);\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((param_2 == 0) || (param_2 == 0xb)) {\n        PTR_DAT_08000888[param_1 >> 3] = PTR_DAT_08000888[param_1 >> 3] | (byte)(1 << (param_1 & 7))\n        ;\n      }\n      else {\n        PTR_DAT_08000888[param_1 >> 3] =\n             PTR_DAT_08000888[param_1 >> 3] & ~(byte)(1 << (param_1 & 7));\n      }\n    }\n    FUN_08002fc2(PTR_DAT_08000874,param_1,0);\n    switch(param_2) {\n    case 0:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        FUN_08008990(param_1,0);\n        FUN_08002fa8(PTR_DAT_08000874,param_1,0);\n        return;\n      }\n      break;\n    case 1:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        iVar2 = FUN_08002fa0(PTR_DAT_08000a44,param_1);\n        if (iVar2 == 3) {\n          FUN_08008a24(param_1,0);\n        }\n        FUN_08008990(param_1,1);\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,1);\n        return;\n      }\n      break;\n    case 2:\n      if (uVar5 < 0xe) {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = FUN_080036ac(iVar2);\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          if (param_1 < 0x3c) {\n            iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n          }\n          else {\n            iVar2 = -1;\n          }\n          iVar2 = FUN_080036ac(iVar2);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        if (param_1 < 0x3c) {\n          if (PTR_DAT_08000878[param_1] == -1) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac();\n            if (iVar2 == 0) {\n              bVar4 = false;\n            }\n            else {\n              iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n              if (iVar2 == 1) {\n                bVar4 = false;\n              }\n            }\n          }\n        }\n        else {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          FUN_08008990(param_1,0);\n        }\n        FUN_08002fa8(PTR_DAT_08000874,param_1,2);\n        return;\n      }\n      break;\n    case 3:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = FUN_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a4c);\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        FUN_08008990(param_1,1);\n        FUN_080088e0(param_1,0);\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,3);\n        return;\n      }\n      break;\n    case 4:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,4);\n        if (((byte)PTR_DAT_08000a50[param_1] != 0xff) &&\n           (iVar2 = FUN_080026f8(PTR_DAT_08000a54 + (uint)(byte)PTR_DAT_08000a50[param_1] * 3),\n           iVar2 != 0)) {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          FUN_08000500(param_1,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      FUN_08002f14(PTR_DAT_08000a44,PTR_s_Unknown_pin_mode_08000a60);\n      break;\n    case 6:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = FUN_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a58);\n              if (iVar2 == 0) {\n                iVar2 = FUN_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a5c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        FUN_08008990(param_1,2);\n        puVar1 = PTR_DAT_08000a44;\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,0xb);\n        FUN_08002fc2(puVar1,param_1,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080005e0",
                "FUN_08008990",
                "FUN_08000588",
                "FUN_080036ac",
                "FUN_08002f14",
                "FUN_08002fa8",
                "FUN_08002fa0",
                "FUN_0800738a",
                "FUN_080088e0",
                "FUN_08000500",
                "FUN_080026f8",
                "FUN_08002fc2",
                "FUN_08008a24",
                "FUN_08000488"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080005f8",
            "calling": [
                "FUN_08001cd0",
                "FUN_08000aec",
                "FUN_08000a64"
            ],
            "imported": true,
            "current_name": "FUNC_080005f8"
        },
        "FUN_08009124": {
            "renaming": {
                "FUN_08009124": "process_data_and_update_results_08009124",
                "uStack_8": "current_data_index",
                "param_1": "data_size",
                "uStack_4": "current_data",
                "param_2": "data",
                "param_3": "result_1",
                "param_4": "result_2"
            },
            "code": "void process_data_and_update_results_08009124(int data_size, int data[], int* result_1, int* result_2)\n{\n  int current_data_index = 0;\n  int current_data = 0;\n  \n  current_data = data[current_data_index];\n  current_data_index++;\n  calculate_result_1(current_data, data_size, result_1);\n  calculate_result_2(current_data, data_size, result_2);\n  return;\n}",
            "called": [
                "FUN_0800937c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009124",
            "calling": [
                "FUN_080090cc"
            ],
            "imported": true,
            "current_name": "process_data_and_update_results_08009124"
        },
        "FUN_08002fa0": {
            "renaming": {
                "FUN_08002fa0": "get_value_at_offset_08002fa0",
                "param_1": "base_address",
                "param_2": "offset"
            },
            "code": "unsigned char get_value_at_offset_08002fa0(int base_address, int offset) {\n    return *(unsigned char *)(base_address + offset + 0xcc);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa0",
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a",
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "imported": true,
            "current_name": "get_value_at_offset_08002fa0"
        },
        "FUN_080064ae": {
            "renaming": {
                "FUN_080064ae": "do_nothing_080064ae"
            },
            "code": "\nvoid do_nothing_080064ae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ae",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": true,
            "current_name": "do_nothing_080064ae"
        },
        "FUN_0800a424": {
            "renaming": {
                "FUN_0800a424": "do_nothing_0800a424"
            },
            "code": "\nvoid do_nothing_0800a424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a424",
            "calling": [
                "FUN_08009148",
                "FUN_0800010c"
            ],
            "imported": true,
            "current_name": "do_nothing_0800a424"
        },
        "FUN_08003a1c": {
            "renaming": {
                "undefined4": "int",
                "FUN_08003a1c": "get_value_at_offset_08003a1c",
                "param_1": "base_address",
                "PTR_": "",
                "DAT_": "",
                "value": "result"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ get_value_at_offset_08003a1c(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a1c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "get_value_at_offset_08003a1c"
        },
        "FUN_080064ac": {
            "renaming": {
                "FUN_080064ac": "do_nothing_080064ac"
            },
            "code": "\nvoid do_nothing_080064ac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ac",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": true,
            "current_name": "do_nothing_080064ac"
        },
        "FUN_08005cb4": {
            "renaming": {
                "**param_1": "flag_1",
                "DAT_08005ce8": "dat_ptr",
                "param_1": "flags",
                "FUN_08005cb4": "check_and_update_flags_08005cb4",
                "(*param_1)[1]": "flag_2",
                "FUN_080073c0": "execute_update"
            },
            "code": "void check_and_update_flags_08005cb4(uint **flags)\n{\n    uint flag_1 = **flags;\n    uint flag_2 = (*flags)[1];\n\n    if ((flag_1 & 2) && (flag_2 & 2)) {\n        execute_update();\n        (*flags)[1] = 0xfffffffd;\n    }\n\n    uint *DAT_08005ce8 = (uint *)(DAT_08005ce8 + 0x14);\n    *DAT_08005ce8 = 0x20000;\n    uint *param_ptr = (uint *)((int)flags + 0x11);\n    *param_ptr = 1;\n}",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb4",
            "calling": [],
            "imported": true,
            "current_name": "check_and_update_flags_08005cb4"
        },
        "FUN_08007744": {
            "renaming": {
                "param_1": "ptr_address",
                "FUN_08007744": "get_data_from_ptr_08007744",
                "PTR_": "ptr_",
                "DAT_": "data"
            },
            "code": "int get_data_from_ptr_08007744(int PTR_address)\n{\n    int PTR_to_inner_ptr = *(int *)(PTR_address + 4);\n    int DAT_ = *(int *)(PTR_to_inner_ptr + 0x24);\n    return DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007744",
            "calling": [],
            "imported": true,
            "current_name": "get_data_from_ptr_08007744"
        },
        "FUN_08006538": {
            "renaming": {
                "DAT_080066e0": "PTR_DAT_080066e0",
                "DAT_080066e4": "u_var3",
                "iVar3": "var_2",
                "iVar4": "var_4",
                "iVar5": "var_5",
                "iVar6": "var_6",
                "iVar11": "var_11",
                "iVar7": "var_7",
                "iVar12": "var_12",
                "iVar8": "var_3",
                "iVar9": "var_9",
                "iVar10": "var_10",
                "param_1": "param_1",
                "var_8": "var_3",
                "var_9": "var_9",
                "FUN_08006538": "calculate_score_08006538",
                "var_10": "var_10",
                "score_params_0": "score_params_0",
                "uVar2": "u_var2",
                "var_12": "var_12",
                "var_11": "var_11",
                "uVar1": "u_var1",
                "*param_1": "*score_params",
                "param_6": "param_6",
                "var_4": "var_4",
                "var_5": "var_5",
                "var_6": "var_6",
                "var_7": "var_7",
                "param_2": "param_2",
                "param_3": "param_3",
                "var_1": "var_1",
                "param_4": "param_4",
                "var_2": "var_2",
                "param_5": "param_5",
                "var_3": "var_3",
                "*score_params": "*score_params"
            },
            "code": "void calculate_score_08006538(int *score_params) {\n  ulonglong u_var1;\n  uint u_var2;\n  int param_3 = score_params[3];\n  int param_2 = score_params[2];\n  int param_4 = score_params[4];\n  int param_5 = score_params[5];\n  int param_6 = score_params[6];\n  int param_1 = score_params[1];\n  int var_1 = *(uint *)(*score_params + 0xc);\n  var_1 = var_1 & 0xffffe9f3 | param_2 | param_4 | param_5;\n  *(uint *)(*score_params + 0xc) = var_1;\n  *(uint *)(*score_params + 0x10) = *(uint *)(*score_params + 0x10) & 0xffffcfff | param_3;\n  *(uint *)(*score_params + 0x14) = *(uint *)(*score_params + 0x14) & 0xfffffcff | param_6;\n  int score_params_0 = *score_params;\n  if (score_params_0 != DAT_080066e0) {\n    int var_2 = FUN_08005a28();\n    uint DAT_080066e4 = DAT_080066e4;\n    int var_3 = score_params[1];\n    ulonglong u_var4 = (ulonglong)DAT_080066e4;\n    int var_4 = FUN_08005a28();\n    int var_5 = FUN_08005a28();\n    int var_6 = score_params[1];\n    int var_7 = FUN_08005a28();\n    int var_8 = score_params[1];\n    int var_9 = FUN_08005a28();\n    int var_10 = score_params[1];\n    int var_11 = FUN_08005a28();\n    int var_12 = score_params[1];\n    *(uint *)(score_params_0 + 8) = ((uint)((int)((ulonglong)DAT_080066e4 * (ulonglong)(((uint)(var_9 * 0x19) / (uint)(var_10 << 2) + (uint)((ulonglong)DAT_080066e4 * ((ulonglong)(uint)(var_11 * 0x19) / (ulonglong)(uint)(var_12 << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) + ((uint)((ulonglong)DAT_080066e4 * (ulonglong)(((uint)(var_4 * 0x19) / (uint)(var_3 << 2) + (uint)((ulonglong)DAT_080066e4 * ((ulonglong)(uint)(var_5 * 0x19) / (ulonglong)(uint)(var_6 << 2)) >> 0x25)) * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) + (uint)(u_var4 * ((ulonglong)(uint)(var_2 * 0x19) / (ulonglong)(uint)(param_1 << 2)) >> 0x25) * 0x10;\n    return;\n  }\n  int var_2 = FUN_08005a48();\n  uint DAT_080066e4 = DAT_080066e4;\n  int var_3 = score_params[1];\n  ulonglong u_var4 = (ulonglong)DAT_080066e4;\n  int var_4 = FUN_08005a48();\n  int var_5 = FUN_08005a48();\n  int var_6 = score_params[1];\n  int var_7 = FUN_08005a48();\n  int var_8 = score_params[1];\n  int var_9 = FUN_08005a48();\n  int var_10 = score_params[1];\n  int var_11 = FUN_08005a48();\n  int var_12 = score_params[1];\n  *(uint *)(score_params_0 + 8) = ((uint)((int)((ulonglong)DAT_080066e4 * (ulonglong)(((uint)(var_9 * 0x19) / (uint)(var_10 << 2) + (uint)((ulonglong)DAT_080066e4 * ((ulonglong)(uint)(var_11 * 0x19) / (ulonglong)(uint)(var_12 << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) + ((uint)((ulonglong)DAT_080066e4 * (ulonglong)(((uint)(var_4 * 0x19) / (uint)(var_3 << 2) + (uint)((ulonglong)DAT_080066e4 * ((ulonglong)(uint)(var_5 * 0x19) / (ulonglong)(uint)(var_6 << 2)) >> 0x25)) * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) + (uint)(u_var4 * ((ulonglong)(uint)(var_2 * 0x19) / (ulonglong)(uint)(param_1 << 2)) >> 0x25) * 0x10;\n  return;\n}",
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006538",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": true,
            "current_name": "calculate_score_08006538"
        },
        "FUN_080042e2": {
            "renaming": {
                "param_1": "base_address",
                "FUN_080042e2": "set_param_080042e2",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "code": "void set_param_080042e2(int base_address, int value, int is_shifted) {\n  if (is_shifted == 0) {\n    *(int *)(base_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e2",
            "calling": [
                "FUN_080072d8"
            ],
            "imported": true,
            "current_name": "set_param_080042e2"
        },
        "FUN_08002fa8": {
            "renaming": {
                "param_1": "memory_address",
                "FUN_08002fa8": "update_memory_08002fa8",
                "param_2": "offset",
                "param_3": "value"
            },
            "code": "void update_memory_08002fa8(int memory_address, int offset, undefined value) {\n  if (*(char *)(memory_address + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(memory_address + offset + 0xcc) = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa8",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": true,
            "current_name": "update_memory_08002fa8"
        },
        "FUN_0800325a": {
            "renaming": {
                "param_1": "command_ptr",
                "FUN_0800325a": "execute_command_0800325a",
                "param_2": "command_arg",
                "param_3": "num_args",
                "param_4": "arg_offset",
                "puVar1": "command_func_ptr",
                "uVar2": "i"
            },
            "code": "void execute_command_0800325a(void** command_ptr, uint32_t command_arg, uint32_t num_args, int32_t arg_offset)\n{\n  void** command_func_ptr;\n  uint32_t i;\n  command_func_ptr = (void**)*command_ptr;\n  if (command_func_ptr != NULL) {\n    (**(void (**)(void**, uint32_t))(command_func_ptr[0]))(command_ptr, 0xf0);\n    (***(void (***)(void*))(command_ptr[0]))((void*)*command_ptr, command_arg);\n    for (i = 0; i < num_args; i++) {\n      execute_command_0800325a(command_ptr, 1, arg_offset + i, 0);\n    }\n    (***(void (***)(void*))(command_ptr[0]))((void*)*command_ptr, 0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800325a",
            "calling": [
                "FUN_08002f0a",
                "FUN_080032a2"
            ],
            "imported": true,
            "current_name": "execute_command_0800325a"
        },
        "FUN_080091d8": {
            "renaming": {
                "piVar4": "node_ptr",
                "param_1": "status",
                "ppiVar6": "current_node_ptr",
                "FUN_080091d8": "add_to_linked_list_080091d8",
                "ppiVar7": "new_node_ptr",
                "param_2": "value",
                "param_3": "unused1",
                "param_4": "unused2",
                "puVar1": "unused_ptr",
                "ppiVar2": "current_node_ptr_ptr",
                "extraout_r1": "prev_node_ptr_ptr",
                "ppiVar3": "prev_node_ptr_ptr",
                "ppiVar5": "head_ptr"
            },
            "code": "void add_to_linked_list_080091d8(undefined4 *status, int value, undefined4 unused1, undefined4 unused2)\n{\n  int **current_node_ptr;\n  int **prev_node_ptr;\n  int **head_ptr = *(int ***)PTR_DAT_0800926c;\n  int *new_node_ptr = (int *) (value - 4);\n\n  if (value == 0) {\n    return;\n  }\n\n  do_nothing_08009f48();\n\n  if (head_ptr == (int **)0x0) {\n    new_node_ptr[1] = (int *)0x0;\n    *(int ***)PTR_DAT_0800926c = (int **)new_node_ptr;\n    prev_node_ptr = extraout_r1;\n    current_node_ptr = (int **)PTR_DAT_0800926c;\n  }\n  else if (new_node_ptr < head_ptr) {\n    current_node_ptr = (int **)head_ptr;\n    prev_node_ptr = (int **)((int)head_ptr + (int)*current_node_ptr);\n    if (head_ptr == prev_node_ptr) {\n      int *node_ptr = *prev_node_ptr;\n      head_ptr = (int **)prev_node_ptr[1];\n      prev_node_ptr = (int **)((int)node_ptr + (int)current_node_ptr);\n      *new_node_ptr = (int *)prev_node_ptr;\n    }\n    new_node_ptr[1] = (int *)head_ptr;\n    *(int ***)PTR_DAT_0800926c = (int **)new_node_ptr;\n  }\n  else {\n    do {\n      prev_node_ptr = current_node_ptr;\n      current_node_ptr = (int **)prev_node_ptr[1];\n    } while (current_node_ptr <= new_node_ptr);\n\n    int *node_ptr = *prev_node_ptr;\n    if ((int **)((int)prev_node_ptr + (int)node_ptr) == new_node_ptr) {\n      node_ptr = (int **)((int)node_ptr + (int)*new_node_ptr);\n      *prev_node_ptr = (int *)node_ptr;\n      if (current_node_ptr == (int **)((int)prev_node_ptr + (int)node_ptr)) {\n        int *next_node_ptr = *(int ***)((int)node_ptr + 4);\n        node_ptr = (int **)((int)node_ptr + (int)next_node_ptr);\n        *prev_node_ptr = (int *)node_ptr;\n        prev_node_ptr[1] = (int *)next_node_ptr;\n      }\n    }\n    else if (new_node_ptr < (int **)((int)prev_node_ptr + (int)node_ptr)) {\n      *status = 0xc;\n    }\n    else {\n      node_ptr = (int **)((int)new_node_ptr + (int)*new_node_ptr);\n      if (current_node_ptr == node_ptr) {\n        int *next_node_ptr = *(int ***)((int)node_ptr + 4);\n        node_ptr = (int **)((int)node_ptr + (int)*new_node_ptr);\n        *new_node_ptr = (int *)node_ptr;\n        prev_node_ptr[1] = (int *)next_node_ptr;\n      }\n      new_node_ptr[1] = (int *)current_node_ptr;\n      prev_node_ptr[1] = (int *)new_node_ptr;\n    }\n  }\n  do_nothing_08009f4a(status, current_node_ptr, prev_node_ptr, unused2);\n  return;\n}",
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091d8",
            "calling": [
                "FUN_08009b5c",
                "FUN_080091a0",
                "FUN_08009908",
                "FUN_08009a80"
            ],
            "imported": true,
            "current_name": "add_to_linked_list_080091d8"
        },
        "FUN_0800688e": {
            "renaming": {
                "*(short *)(param_1 + 9)": "*(short *)(param_array + 9)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*param_array + 0xc)",
                "param_1[8]": "param_array[8]",
                "param_1": "param_array",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)param_array + 0x39)",
                "param_1[0xf]": "param_array[0xf]",
                "FUN_0800688e": "set_param_values_0800688e",
                "param_2": "param1",
                "param_2 == 0": "param1 == 0 || param2 == 0",
                "param_3": "param2",
                "*(char *)((int)param_1 + 0x39)": "*(char *)((int)param_array + 0x39)",
                "*(char *)(param_1 + 0xe)": "*(char *)(param_array + 0xe)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(param_array + 0xe)",
                "*(short *)((int)param_1 + 0x26)": "*(short *)((int)param_array + 0x26)"
            },
            "code": "int set_param_values_0800688e(int *param_array, int param1, int param2)\n{\n    if (*(char *)((int)param_array + 0x39) != ' ')\n    {\n        return 2;\n    }\n    if (param1 == 0 || param2 == 0)\n    {\n        return 1;\n    }\n    if (*(char *)(param_array + 0xe) != '\\x01')\n    {\n        param_array[8] = param1;\n        *(short *)(param_array + 9) = (short)param2;\n        *(short *)((int)param_array + 0x26) = (short)param2;\n        param_array[0xf] = 0;\n        *(undefined *)((int)param_array + 0x39) = 0x21;\n        *(undefined *)(param_array + 0xe) = 0;\n        *(uint *)(*param_array + 0xc) |= 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800688e",
            "calling": [
                "FUN_08008730",
                "FUN_08008694"
            ],
            "imported": true,
            "current_name": "set_param_values_0800688e"
        },
        "FUN_080088e0": {
            "renaming": {
                "iVar1": "func_result",
                "iVar3": "index_value",
                "param_1": "data_index",
                "param_2": "data_value",
                "FUN_080088e0": "process_data_080088e0",
                "uVar2": "shift_value"
            },
            "code": "void process_data_080088e0(uint data_index, uint data_value) {\n  int index_value;\n  uint shift_value;\n  int func_result;\n\n  if (data_index < 0x3c) {\n    index_value = (int)(char)PTR_DAT_0800897c[data_index];\n  }\n  else {\n    index_value = -1;\n  }\n  if (index_value != -1) {\n    func_result = FUN_0800738a(index_value,PTR_DAT_08008980);\n    if (func_result == 0) {\n      FUN_08008990(data_index,1);\n      shift_value = *(uint *)PTR_DAT_08008988;\n      if (shift_value != 8) {\n        if (shift_value < 9) {\n          data_value = data_value << (8 - shift_value & 0xff);\n        }\n        else {\n          data_value = data_value >> (shift_value - 8 & 0xff);\n        }\n      }\n      if (data_value < 0x80) {\n        FUN_08008a24(data_index,0);\n      }\n      else {\n        FUN_08008a24(data_index,1);\n      }\n    }\n    else {\n      func_result = FUN_08006b28(index_value,PTR_DAT_08008984);\n      if (func_result == 0) {\n        FUN_08006b3e(index_value,PTR_DAT_08008984);\n      }\n      shift_value = *(uint *)PTR_DAT_08008988;\n      if (shift_value != 8) {\n        if (shift_value < 9) {\n          data_value = data_value << (8 - shift_value & 0xff);\n        }\n        else {\n          data_value = data_value >> (shift_value - 8 & 0xff);\n        }\n      }\n      FUN_08007118(index_value,DAT_0800898c,0xff,data_value,func_result == 0);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08006b28",
                "FUN_0800738a",
                "FUN_08007118",
                "FUN_08006b3e",
                "FUN_08008990",
                "FUN_08008a24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080088e0",
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": true,
            "current_name": "process_data_080088e0"
        },
        "FUN_08008b66": {
            "renaming": {
                "iVar1": "function_result",
                "param_1": "data_address",
                "local_9": "new_data",
                "FUN_08008b66": "update_data_08008b66",
                "uVar2": "next_index"
            },
            "code": "void update_data_08008b66(int data_address)\n{\n  int function_result;\n  ushort next_index;\n  undefined new_data;\n  function_result = retrieve_data(data_address, &new_data);\n  if ((function_result == 0) && (next_index = *(short *)(data_address + 0x60) + 1U & 0x3f, next_index != *(ushort *)(data_address + 0x62))) {\n    *(undefined *)(*(int *)(data_address + 0x5c) + (uint)*(ushort *)(data_address + 0x60)) = new_data;\n    *(ushort *)(data_address + 0x60) = next_index;\n  }\n  return;\n}",
            "called": [
                "FUN_08008600"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b66",
            "calling": [],
            "imported": true,
            "current_name": "update_data_08008b66"
        },
        "FUN_0800870c": {
            "renaming": {
                "uVar1": "argument",
                "(PTR_DAT_0800872c + uVar1 * 4)": "argument_array_pointer",
                "FUN_080086e8": "get_argument",
                "(PTR_DAT_08008728 + uVar1 * 4)": "function_array_pointer",
                "FUN_0800870c": "execute_function_if_argument_less_than_five_0800870c"
            },
            "code": "void execute_function_if_argument_less_than_five_0800870c(void)\n{\n  uint argument;\n  argument = get_argument();\n  if (argument < 5) {\n    (**(code **)((PTR_DAT_08008728 + uVar1 * 4) + argument * 4))(*(undefined4 *)((PTR_DAT_0800872c + uVar1 * 4) + argument * 4));\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800870c",
            "calling": [
                "FUN_0800694c"
            ],
            "imported": true,
            "current_name": "execute_function_if_argument_less_than_five_0800870c"
        },
        "FUN_08008840": {
            "renaming": {
                "FUN_08008840": "return_error_code_08008840",
                "undefined4": "int32_t"
            },
            "code": "int32_t return_error_code_08008840(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008840",
            "calling": [],
            "imported": true,
            "current_name": "return_error_code_08008840"
        },
        "FUN_08008600": {
            "renaming": {
                "FUN_08008600": "read_and_copy_08008600",
                "iVar1": "read_result",
                "param_1": "file_descriptor",
                "param_2": "buffer",
                "param_3": "buffer_size",
                "param_4": "offset"
            },
            "code": "int read_and_copy_08008600(int file_descriptor, char* buffer, int buffer_size, int offset) {\n  if (file_descriptor == 0) {\n    return -1;\n  }\n  int read_result = read(file_descriptor, buffer, buffer_size);\n  if (read_result == -1) {\n    return -1;\n  }\n  memcpy(buffer + offset, buffer, read_result);\n  return read_result;\n}",
            "called": [
                "FUN_080085b8",
                "FUN_080068d6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008600",
            "calling": [
                "FUN_08008b66"
            ],
            "imported": true,
            "current_name": "read_and_copy_08008600"
        },
        "FUN_08003154": {
            "renaming": {
                "FUN_08003154": "set_parameter_value_08003154",
                "param_1": "param_value_ptr",
                "param_2": "param_value"
            },
            "code": "void set_parameter_value_08003154(int* param_value_ptr, int param_value) {\n  *param_value_ptr = param_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003154",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": true,
            "current_name": "set_parameter_value_08003154"
        },
        "FUN_08006420": {
            "renaming": {
                "FUN_08006420": "update_bits_08006420",
                "param_1": "data",
                "param_2": "bit_position",
                "PTR_": "",
                "param_3": "new_value",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ update_bits_08006420(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_~DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006420",
            "calling": [
                "FUN_08006460",
                "FUN_0800643c"
            ],
            "imported": true,
            "current_name": "update_bits_08006420"
        },
        "FUN_08007750": {
            "renaming": {
                "FUN_08007750": "set_param_value_at_index_08007750",
                "param_1": "param_list_ptr",
                "param_2": "index",
                "param_3": "param_value"
            },
            "code": "void set_param_value_at_index_08007750(int param_list_ptr, int index, int param_value) {\n    int* param_list = *(int*)(param_list_ptr + 4);\n    int offset = 0x34 + index * 4;\n    *(int*)(param_list + offset) = param_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007750",
            "calling": [],
            "imported": true,
            "current_name": "set_param_value_at_index_08007750"
        },
        "FUN_08009938": {
            "renaming": {
                "pcVar1": "current_char_pointer",
                "FUN_08009938": "find_char_in_string_08009938",
                "param_1": "str",
                "param_2": "target"
            },
            "code": "char* find_char_in_string_08009938(char* str, char target) {\n  char* current_char_pointer;\n  do {\n    current_char_pointer = str;\n    if (*current_char_pointer == '\\0') {\n      if (target != '\\0') {\n        current_char_pointer = NULL;\n      }\n      return current_char_pointer;\n    }\n    str = current_char_pointer + 1;\n  } while (target != *current_char_pointer);\n  return current_char_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009938",
            "calling": [
                "FUN_0800997e"
            ],
            "imported": true,
            "current_name": "find_char_in_string_08009938"
        },
        "FUN_08007f0e": {
            "renaming": {
                "iVar1": "start_time",
                "iVar2": "input_status",
                "iVar4": "status",
                "iVar5": "input_ptr",
                "FUN_08007f0e": "check_input_08007f0e",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar3": "time_diff",
                "uVar6": "param_4"
            },
            "code": "int check_input_08007f0e(int input, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int start_time = FUN_08003760();\n  uint time_diff = 0;\n  int status = 2;\n  do {\n    int input_ptr = input + 4;\n    int input_status = FUN_080047f4(input_ptr, param_2, param_3, param_4, param_4);\n    if (input_status == 0) {\n      status = 0;\n      int space_found = 0;\n      while ((input_status = FUN_0800542a(input_ptr), input_status != 0x20 && (space_found == 0))) {\n        int current_time = FUN_08003760();\n        time_diff = current_time - start_time;\n        if (time_diff < 0x65) {\n          input_status = FUN_08005430(input_ptr);\n          if (input_status != 0) {\n            space_found = 2;\n          }\n        }\n        else {\n          space_found = 1;\n        }\n      }\n    }\n    input_status = FUN_08005430(input_ptr);\n  } while ((input_status == 4) && (time_diff < 100));\n  return status;\n}",
            "called": [
                "FUN_0800542a",
                "FUN_080047f4",
                "FUN_08003760",
                "FUN_08005430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f0e",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": true,
            "current_name": "check_input_08007f0e"
        },
        "FUN_08004004": {
            "renaming": {
                "FUN_08004004": "set_bit_08004004",
                "param_1": "bit_index",
                "DAT_08004020": "bit_array_start_ptr"
            },
            "code": "void set_bit_08004004(uint bit_index){\n  if (bit_index >= 0) {\n    int* bit_array_ptr = (int*)(DAT_08004020 + ((bit_index >> 5) + 0x60) * 4);\n    *bit_array_ptr = 1 << (bit_index & 0x1f);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004004",
            "calling": [],
            "imported": true,
            "current_name": "set_bit_08004004"
        },
        "FUN_08003158": {
            "renaming": {
                "local_a": "message_content",
                "FUN_08003158": "send_message_if_possible_08003158",
                "param_1": "message_pointer",
                "FUN_0800307a": "write_message_to_buffer",
                "FUN_08003106": "send_large_message",
                "param_2": "message_length",
                "param_3": "message_type",
                "puVar1": "function_pointer"
            },
            "code": "void send_message_if_possible_08003158(undefined4 *message_pointer, uint message_length, ushort message_type)\n{\n  undefined4 *function_pointer;\n  ushort message_content;\n  \n  function_pointer = (undefined4 *)*message_pointer;\n  if (function_pointer != (undefined4 *)0x0) {\n    message_content = message_type;\n    if (((int)message_length < 0x10) && (message_type < 0x4000)) {\n      (**(code **)*function_pointer)(function_pointer,message_length | 0xe0);\n      write_message_to_buffer(message_pointer, 2, &message_content);\n    }\n    else {\n      send_large_message(message_pointer,message_length,2,&message_content);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08003106",
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003158",
            "calling": [
                "FUN_08002ef2"
            ],
            "imported": true,
            "current_name": "send_message_if_possible_08003158"
        },
        "FUN_080090c2": {
            "renaming": {
                "FUN_080090c2": "copy_values_to_destination_080090c2",
                "param_1": "source",
                "FUN_08009108": "memcpy",
                "param_2": "destination"
            },
            "code": "void copy_values_to_destination_080090c2(void* source, void* destination) {\n  memcpy(destination, source, sizeof(source));\n  return;\n}",
            "called": [
                "FUN_08009108"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c2",
            "calling": [
                "FUN_08008f78"
            ],
            "imported": true,
            "current_name": "copy_values_to_destination_080090c2"
        },
        "FUN_08000ef8": {
            "renaming": {
                "FUN_08000ef8": "FUNC_08000ef8"
            },
            "code": "\nvoid FUNC_08000ef8(void)\n\n{\n  byte bVar1;\n  int iVar2;\n  bool bVar3;\n  byte bVar4;\n  \n  if (*PTR_DAT_08001188 != '\\0') {\n    bVar1 = *PTR_DAT_0800118c;\n    if (*PTR_DAT_08001190 == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)*PTR_DAT_08001190);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001190[1] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[1]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(1);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001190[2] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[2]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(2);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001190[3] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[3]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(3);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001190[4] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[4]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(4);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001190[5] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[5]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(5);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001190[6] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[6]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(6);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001190[7] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[7]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(7);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(0,bVar4);\n  }\n  if (PTR_DAT_08001188[1] != '\\0') {\n    bVar1 = PTR_DAT_0800118c[1];\n    if (PTR_DAT_08001190[8] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[8]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(8);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001424[9] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[9]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(9);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001424[10] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[10]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(10);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001424[0xb] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xb]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xb);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001424[0xc] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xc]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xc);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001424[0xd] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xd]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xd);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001424[0xe] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xe]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xe);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001424[0xf] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xf]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xf);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(1,bVar4,0);\n  }\n  if (PTR_DAT_08001428[2] != '\\0') {\n    bVar1 = PTR_DAT_0800142c[2];\n    if (PTR_DAT_08001424[0x10] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0x10]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x10);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x11] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x11]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x11);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_080016c4[0x12] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x12]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x12);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_080016c4[0x13] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x13]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x13);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_080016c4[0x14] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x14]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x14);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_080016c4[0x15] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x15]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x15);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_080016c4[0x16] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x16]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x16);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_080016c4[0x17] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x17]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x17);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(2,bVar4,0);\n  }\n  if (PTR_DAT_080016c8[3] != '\\0') {\n    bVar1 = PTR_DAT_080016cc[3];\n    if (PTR_DAT_080016c4[0x18] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x18]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x18);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x19] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x19]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x19);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001960[0x1a] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1a]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1a);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001960[0x1b] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1b]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1b);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001960[0x1c] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1c]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1c);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001960[0x1d] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1d]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1d);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001960[0x1e] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1e]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1e);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001960[0x1f] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1f]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1f);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(3,bVar4,0);\n  }\n  if (PTR_DAT_08001964[4] != '\\0') {\n    bVar1 = PTR_DAT_08001968[4];\n    if (PTR_DAT_08001960[0x20] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x20]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x20);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001960[0x21] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x21]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x21);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001b44[0x22] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x22]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x22);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001b44[0x23] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x23]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x23);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001b44[0x24] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x24]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x24);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001b44[0x25] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x25]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x25);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001b44[0x26] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x26]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x26);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001b44[0x27] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x27]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x27);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(4,bVar4,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000be8",
                "FUN_08008a6c",
                "FUN_080036ac"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ef8",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": true,
            "current_name": "FUNC_08000ef8"
        },
        "FUN_08008846": {
            "renaming": {
                "param_1": "address",
                "FUN_08008846": "set_memory_permissions_08008846",
                "param_2": "permission",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ set_memory_permissions_08008846(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008846",
            "calling": [
                "FUN_0800a0ec"
            ],
            "imported": true,
            "current_name": "set_memory_permissions_08008846"
        },
        "FUN_0800a430": {
            "renaming": {
                "FUN_0800a430": "do_nothing_0800a430"
            },
            "code": "\nvoid do_nothing_0800a430(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a430",
            "calling": [],
            "imported": true,
            "current_name": "do_nothing_0800a430"
        },
        "FUN_0800459c": {
            "renaming": {
                "param_1": "param_array",
                "FUN_0800459c": "increment_and_store_char_at_index_0800459c",
                "puVar1": "char_ptr"
            },
            "code": "int increment_and_store_char_at_index_0800459c(int *param_array) {\n  int *short_ptr = (int *)((char *)param_array + 0x2a);\n  if (*short_ptr != 0) {\n    char *char_ptr = (char *)param_array[9];\n    param_array[9] = (int)(char_ptr + 1);\n    *char_ptr = (char)*(int *)(*param_array + 0x10);\n    *short_ptr = *short_ptr - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800459c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": true,
            "current_name": "increment_and_store_char_at_index_0800459c"
        },
        "FUN_0800774a": {
            "renaming": {
                "*(int *)(param_1 + 4)": "ptr_to_object",
                "param_1": "object_address",
                "FUN_0800774a": "set_parameter_at_offset_0800774a",
                "param_2": "parameter_value",
                "*(undefined4 *)(*(int *)(param_1 + 4) + 0x24)": "*ptr_to_parameter",
                "0x24": "offset_to_parameter"
            },
            "code": "void set_parameter_at_offset_0800774a(int object_address, int parameter_value) {\n    int ptr_to_object = *(int *)(object_address + 4);\n    int offset_to_parameter = 0x24;\n    int* ptr_to_parameter = (int *)(ptr_to_object + offset_to_parameter);\n    *ptr_to_parameter = parameter_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800774a",
            "calling": [],
            "imported": true,
            "current_name": "set_parameter_at_offset_0800774a"
        },
        "FUN_080042f0": {
            "renaming": {
                "param_1": "flag",
                "DAT_08004308": "flag_data",
                "FUN_080042f0": "update_flag_080042f0",
                "PTR_08009094": "call_function"
            },
            "code": "void update_flag_080042f0(uint flag) {\n  uint* flag_ptr = (uint*)(DAT_08004308 + 0x14);\n  if ((*flag_ptr & flag) != 0) {\n    *flag_ptr = flag;\n    PTR_08009094();\n  }\n  return;\n}",
            "called": [
                "FUN_08009094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042f0",
            "calling": [],
            "imported": true,
            "current_name": "update_flag_080042f0"
        },
        "FUN_080027f0": {
            "renaming": {
                "*PTR_DAT_08002878": "*data_pointer_2",
                "iVar3": "result",
                "*puVar2": "*data_pointer_5",
                "puVar2": "data_ptr",
                "param_1": "data_start",
                "*PTR_DAT_0800287c": "*data_pointer_7",
                "FUN_080091b0": "process_data_4",
                "PTR_DAT_08002888": "data_pointer_6",
                "FUN_08007ede": "process_data_2",
                "param_2": "data_size",
                "PTR_DAT_08002884": "data_pointer_1",
                "FUN_080027f0": "process_data_080027f0",
                "param_3": "checksum",
                "FUN_08009908": "process_data_3",
                "cVar1": "current_char",
                "uVar5": "new_checksum_value",
                "uVar4": "new_checksum_byte",
                "*PTR_DAT_08002880": "*data_pointer_4"
            },
            "code": "uint process_data_080027f0(int data_start, undefined4 data_size, uint checksum) {\n  char current_char;\n  undefined *data_ptr;\n  int result;\n  undefined new_checksum_byte;\n  uint new_checksum_value;\n  \n  data_ptr = PTR_DAT_08002884;\n  if (*PTR_DAT_08002878 == '\\0') {\n    result = process_data_080027f0_2(data_start + 0x14, data_size, checksum & 0xffff);\n    if (result != 0) {\n      return 0;\n    }\n    return checksum;\n  }\n  new_checksum_value = (byte)*data_pointer_3 + checksum;\n  if ((byte)*PTR_DAT_08002880 < new_checksum_value) {\n    if (new_checksum_value < 0x20) {\n      new_checksum_value = 0x20;\n    }\n    result = process_data_080027f0_3(*(undefined4 *)PTR_DAT_08002884, new_checksum_value);\n    *PTR_DAT_08002880 = (undefined)new_checksum_value;\n    if (result == 0) {\n      new_checksum_byte = 0;\n    }\n    else {\n      new_checksum_byte = (undefined)new_checksum_value;\n    }\n    *data_pointer_5 = new_checksum_byte;\n  }\n  data_ptr = PTR_DAT_08002888;\n  if (*(int *)PTR_DAT_08002884 != 0) {\n    process_data_080027f0_4((uint)(byte)*PTR_DAT_08002888 + *(int *)PTR_DAT_08002884, data_size, checksum);\n    current_char = *PTR_DAT_0800287c + (char)checksum;\n    *PTR_DAT_0800287c = current_char;\n    *data_pointer_3 = current_char;\n    return checksum;\n  }\n  *(undefined4 *)(data_start + 4) = 1;\n  return 0;\n}",
            "called": [
                "FUN_080091b0",
                "FUN_08007ede",
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f0",
            "calling": [],
            "imported": true,
            "current_name": "process_data_080027f0"
        },
        "FUN_0800314e": {
            "renaming": {
                "param_1": "value_ptr",
                "FUN_0800314e": "reset_value_to_zero_0800314e"
            },
            "code": "void reset_value_to_zero_0800314e(int *value_ptr) {\n  *value_ptr = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": true,
            "current_name": "reset_value_to_zero_0800314e"
        },
        "FUN_080076e0": {
            "renaming": {
                "FUN_08005df4": "analyze_data",
                "FUN_08007544": "get_processed_char",
                "iVar2": "result",
                "FUN_08003fb0": "print_data",
                "*param_1": "*data",
                "FUN_080062f4": "reset_data",
                "FUN_080076e0": "process_data_080076e0",
                "cVar1": "processed_char"
            },
            "code": "void process_data_080076e0(undefined4 *data)\n{\n  char processed_char;\n  int result;\n\n  data[19] = 0;\n  processed_char = get_processed_char(*data);\n  print_data((int)processed_char);\n  result = analyze_data(data + 1);\n  if (result == 0) {\n    reset_data(data + 1, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08007544",
                "FUN_08005df4",
                "FUN_080062f4",
                "FUN_08003fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076e0",
            "calling": [
                "FUN_08002578"
            ],
            "imported": true,
            "current_name": "process_data_080076e0"
        },
        "FUN_08002f14": {
            "renaming": {
                "param_1": "input_offset",
                "param_1 + 0x40": "offset",
                "FUN_080032a2": "execute_function",
                "FUN_08002f14": "execute_function_with_offset_08002f14"
            },
            "code": "void execute_function_with_offset_08002f14(int input_offset)\n{\n  int offset = input_offset + 0x40;\n  execute_function(offset);\n  return;\n}",
            "called": [
                "FUN_080032a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f14",
            "calling": [
                "FUN_08001c18",
                "FUN_080005f8",
                "FUN_08001cd0",
                "FUN_08000500"
            ],
            "imported": true,
            "current_name": "execute_function_with_offset_08002f14"
        },
        "FUN_080036a2": {
            "renaming": {
                "FUN_080072fa": "initialize_application",
                "FUN_080036a2": "execute_application_080036a2"
            },
            "code": "void execute_application_080036a2(void)\n{\n  initialize_application();\n  return;\n}",
            "called": [
                "FUN_080072fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a2",
            "calling": [
                "FUN_08008f0e"
            ],
            "imported": true,
            "current_name": "execute_application_080036a2"
        },
        "FUN_080038e4": {
            "renaming": {
                "local_c": "value3",
                "iVar3": "param",
                "uVar1": "result",
                "param_1": "param_array",
                "param_2": "value_array",
                "uVar2": "value1",
                "FUN_080038e4": "calculate_parameters_080038e4"
            },
            "code": "uint32_t calculate_parameters_080038e4(int32_t *param_array, uint32_t *value_array)\n{\n    uint32_t result;\n    uint32_t value1;\n    uint32_t value2;\n    uint32_t value3;\n    int32_t param;\n    \n    if (*(char *)(param_array + 9) == '\\x01') {\n        result = 2;\n    }\n    else {\n        *(undefined *)(param_array + 9) = 1;\n        value1 = value_array[1];\n        if (value1 < 7) {\n            value1 = value1 * 5 - 5;\n            *(uint32_t *)(*param_array + 0x34) =\n                *value_array << (value1 & 0xff) | *(uint32_t *)(*param_array + 0x34) & ~(0x1f << (value1 & 0xff));\n        }\n        else if (value1 < 0xd) {\n            value1 = value1 * 5 - 0x23;\n            *(uint32_t *)(*param_array + 0x30) =\n                *value_array << (value1 & 0xff) | *(uint32_t *)(*param_array + 0x30) & ~(0x1f << (value1 & 0xff));\n        }\n        else {\n            value1 = value1 * 5 - 0x41;\n            *(uint32_t *)(*param_array + 0x2c) =\n                *value_array << (value1 & 0xff) | *(uint32_t *)(*param_array + 0x2c) & ~(0x1f << (value1 & 0xff));\n        }\n        value1 = *value_array;\n        if (value1 < 10) {\n            *(uint32_t *)(*param_array + 0x10) =\n                value_array[2] << (value1 * 3 & 0xff) |\n                *(uint32_t *)(*param_array + 0x10) & ~(7 << (value1 * 3 & 0xff));\n        }\n        else {\n            value1 = value1 * 3 - 0x1e;\n            *(uint32_t *)(*param_array + 0xc) =\n                value_array[2] << (value1 & 0xff) | *(uint32_t *)(*param_array + 0xc) & ~(7 << (value1 & 0xff));\n        }\n        if (*value_array - 0x10 < 2) {\n            param = *param_array;\n            if (param == DAT_08003a10) {\n                if ((*(uint32_t *)(param + 8) & 0x800000) == 0) {\n                    *(uint32_t *)(param + 8) = *(uint32_t *)(param + 8) | 0x800000;\n                    if (*value_array == 0x10) {\n                        for (value3 = (uint32_t)((uint64_t)DAT_08003a18 * (uint64_t)*(uint32_t *)PTR_DAT_08003a14 >>\n                                             0x32) * 10; value3 != 0; value3 = value3 + -1) {\n                        }\n                        result = 0;\n                    }\n                    else {\n                        result = 0;\n                    }\n                }\n                else {\n                    result = 0;\n                }\n            }\n            else {\n                param_array[10] = param_array[10] | 0x20;\n                result = 1;\n            }\n        }\n        else {\n            result = 0;\n        }\n        *(undefined *)(param_array + 9) = 0;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038e4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": true,
            "current_name": "calculate_parameters_080038e4"
        },
        "FUN_08005e68": {
            "renaming": {
                "FUN_08005e68": "do_nothing_08005e68"
            },
            "code": "\nvoid do_nothing_08005e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e68",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": true,
            "current_name": "do_nothing_08005e68"
        },
        "FUN_08005d48": {
            "renaming": {
                "mask4": "0xfffffbff",
                "uVar1": "new_param1",
                "mask1": "0xfffffeff",
                "mask3": "0xfffff7ff",
                "param_1": "param_offset",
                "mask2": "0xfffffdff",
                "DAT_08005da8": "PTR_DAT_08005da8",
                "param_2": "new_params",
                "uVar3": "old_param3",
                "uVar2": "old_param2",
                "FUN_08005d48": "update_parameters_08005d48"
            },
            "code": "void update_parameters_08005d48(int param_offset, uint *new_params)\n{\n  uint mask1 = 0xfffffeff;\n  uint mask2 = 0xfffffdff;\n  uint mask3 = 0xfffff7ff;\n  uint mask4 = 0xfffffbff;\n  uint old_param2 = *(uint *)(param_offset + 4);\n  uint old_param3 = *(uint *)(param_offset + 0x1c);\n  uint old_param4 = *(uint *)(param_offset + 0x20);\n  uint new_param1 = (old_param4 & mask2) | (new_params[2] << 8);\n  uint new_param2 = old_param2 & 0xffffcfff | (new_params[5] << 4) | (new_params[6] << 4);\n  uint new_param3 = old_param3 & 0xffffff8c | new_params[0];\n  *(uint *)(param_offset + 4) = new_param2;\n  *(uint *)(param_offset + 0x1c) = new_param3;\n  *(uint *)(param_offset + 0x3c) = new_params[1];\n  if (param_offset == DAT_08005da8)\n  {\n    new_param1 = (new_param1 & mask3) | (new_params[3] << 8);\n    new_param1 &= mask4;\n  }\n  *(uint *)(param_offset + 0x20) = new_param1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d48",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": true,
            "current_name": "update_parameters_08005d48"
        }
    },
    "used_tokens": 269261,
    "layers": [
        [
            "FUN_08007246",
            "FUN_0800a042",
            "FUN_08008694",
            "FUN_08002ce0",
            "FUN_08005188",
            "FUN_08009db0",
            "FUN_08002c2c",
            "FUN_08001bf8",
            "FUN_080072f0",
            "FUN_08000178",
            "FUN_080069ec",
            "FUN_0800a168",
            "FUN_080067ac",
            "FUN_0800735a",
            "FUN_08008c20",
            "FUN_08000a64",
            "FUN_0800723c",
            "FUN_080043a2",
            "FUN_0800694c",
            "FUN_08006280",
            "FUN_08007258",
            "FUN_0800a0ec",
            "FUN_08008df8",
            "FUN_08006c7c",
            "FUN_08006b5c",
            "FUN_08007376",
            "FUN_08000188",
            "FUN_08004f3c",
            "FUN_080033cc",
            "FUN_08003de4",
            "FUN_08000500",
            "FUN_08009d24",
            "FUN_0800344a",
            "FUN_080071e4",
            "FUN_08008e72",
            "FUN_080022f8",
            "FUN_080072fa",
            "FUN_08005084",
            "FUN_0800291c",
            "FUN_08002ac0",
            "FUN_08003346",
            "FUN_080032bc",
            "FUN_08003106",
            "FUN_08007708",
            "FUN_0800018c",
            "FUN_08003f94",
            "FUN_08008c44",
            "FUN_08002a26",
            "FUN_0800430c",
            "FUN_08006060",
            "FUN_08003350",
            "FUN_08006186",
            "FUN_08007710",
            "FUN_08003474",
            "FUN_08006b7c",
            "FUN_08008e7c",
            "FUN_08003aa0",
            "FUN_08003ce8",
            "FUN_08005fe8",
            "FUN_08008804",
            "FUN_0800738a",
            "FUN_08004e3c",
            "FUN_080091a0",
            "FUN_08002a1c",
            "FUN_08007718",
            "FUN_08002948",
            "FUN_08009e64",
            "FUN_08002acc",
            "FUN_08002a30",
            "FUN_0800932c",
            "FUN_0800322c",
            "FUN_080099a4",
            "FUN_08005a1c",
            "FUN_08003760",
            "FUN_08007320",
            "FUN_08000be8",
            "FUN_08003fd8",
            "FUN_0800307a",
            "FUN_0800319e",
            "FUN_08008d00",
            "FUN_08009190",
            "FUN_08004b82",
            "FUN_0800997e",
            "FUN_08002dbc",
            "FUN_08002e44",
            "FUN_0800242c",
            "FUN_080058d2",
            "FUN_08002c00",
            "FUN_08003f30",
            "FUN_08007f78",
            "FUN_08006b28",
            "FUN_080085dc",
            "FUN_08006b1c",
            "FUN_08008ed6",
            "FUN_0800a130",
            "FUN_08008f3c",
            "FUN_08002ef2",
            "FUN_08007332",
            "FUN_08006128",
            "FUN_08003658",
            "FUN_08009a80",
            "FUN_080062f4",
            "FUN_080073e8",
            "FUN_08004a76",
            "FUN_0800267c",
            "FUN_080047f4",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08005a48",
            "FUN_080033a8",
            "FUN_08002c14",
            "FUN_08008d18",
            "FUN_08009084",
            "FUN_0800a020",
            "FUN_08005840",
            "FUN_08007f7c",
            "FUN_08006d80",
            "FUN_08006c60",
            "FUN_08003306",
            "FUN_08002578",
            "FUN_08006932",
            "FUN_080060c4",
            "FUN_08009eac",
            "FUN_080072d8",
            "FUN_080045c0",
            "FUN_08007e74",
            "FUN_08002efe",
            "FUN_08002f84",
            "FUN_08002ddc",
            "FUN_08009094",
            "FUN_08009f2c",
            "FUN_0800a154",
            "FUN_08002580",
            "FUN_08007f8e",
            "FUN_08006b3e",
            "FUN_08006262",
            "FUN_08007110",
            "FUN_08007594",
            "FUN_080073ec",
            "FUN_08008ef4",
            "FUN_08002df6",
            "FUN_08007118",
            "FUN_08009fe8",
            "FUN_08002c1e",
            "FUN_08005a68",
            "FUN_08008f78",
            "FUN_08008d30",
            "FUN_08002f94",
            "FUN_0800734a",
            "FUN_08000aec",
            "FUN_08008eec",
            "FUN_080068d6",
            "FUN_080032a2",
            "FUN_08001b48",
            "FUN_08006390",
            "FUN_08008730",
            "FUN_08005df4",
            "FUN_08009148",
            "FUN_08008854",
            "FUN_080064cc",
            "FUN_08004d6c",
            "FUN_08004ac2",
            "FUN_08008850",
            "FUN_08006ca8",
            "FUN_08002fc2",
            "FUN_08008afa",
            "FUN_08003048",
            "FUN_08000214",
            "FUN_08003724",
            "FUN_080038dc",
            "FUN_080025ac",
            "FUN_08002634",
            "FUN_08002f0a",
            "FUN_08005bb8",
            "FUN_08007648",
            "FUN_08008858",
            "FUN_080063c0",
            "FUN_08004a24",
            "FUN_08002fba",
            "FUN_080090cc",
            "FUN_080049e0",
            "FUN_08006d24",
            "FUN_080098d8",
            "FUN_08009270",
            "FUN_08008500",
            "FUN_080048c8",
            "FUN_08009954",
            "FUN_08005aa4",
            "FUN_08005e6e",
            "FUN_08004024",
            "FUN_08002400",
            "FUN_08000588",
            "FUN_08002644",
            "FUN_08008868",
            "FUN_080036ac",
            "FUN_08002f1e",
            "FUN_0800885c",
            "FUN_0800643c",
            "FUN_08002fca",
            "FUN_08009c7c",
            "FUN_08009b5c",
            "FUN_0800021a",
            "FUN_08008a6c",
            "FUN_080026f8",
            "FUN_080085b8",
            "FUN_08001c08",
            "FUN_080075dc",
            "FUN_08007544",
            "FUN_08007ff0",
            "FUN_08008990",
            "FUN_08004396",
            "FUN_08003fb0",
            "FUN_080052f0",
            "FUN_08002ec4",
            "FUN_08007306",
            "FUN_08008f0e",
            "FUN_08002f2c",
            "FUN_08004954",
            "FUN_08005cec",
            "FUN_0800886c",
            "FUN_08003748",
            "FUN_080040e8",
            "FUN_0800288c",
            "FUN_0800010c",
            "FUN_08002e26",
            "FUN_080036d8",
            "FUN_080086e8",
            "FUN_0800a110",
            "FUN_08003b8c",
            "FUN_080035b8",
            "FUN_08001c18",
            "FUN_08006460",
            "FUN_08004046",
            "FUN_08008880",
            "FUN_08002ed2",
            "FUN_080073ae",
            "FUN_08000488",
            "FUN_08003f0c",
            "FUN_08008f1c",
            "FUN_080058ac",
            "FUN_08006bb8",
            "FUN_08007438",
            "FUN_08004aec",
            "FUN_0800887c",
            "FUN_08004728",
            "FUN_08007ede",
            "FUN_0800863c",
            "thunk_FUN_0800887c",
            "FUN_080074e0",
            "FUN_080073c0",
            "FUN_080084b0",
            "FUN_08004050",
            "FUN_08008e14",
            "FUN_08005a28",
            "FUN_080095a8",
            "FUN_08003002",
            "FUN_08003bd8",
            "FUN_08009d50",
            "FUN_08003366",
            "FUN_080091b0",
            "FUN_08009108",
            "FUN_0800a18c",
            "FUN_08009908",
            "FUN_08008a24",
            "FUN_08008abc",
            "FUN_08002b68",
            "FUN_080005e0",
            "FUN_08008020",
            "FUN_08005dac",
            "FUN_0800674e",
            "FUN_0800771c",
            "FUN_080066e8",
            "FUN_08009358",
            "FUN_0800270c",
            "FUN_08003370",
            "FUN_08007fa0",
            "FUN_08003376",
            "FUN_08008bf4",
            "FUN_08005430",
            "FUN_08002720",
            "FUN_080031ce",
            "FUN_08009918",
            "FUN_08005434",
            "FUN_08005e2e",
            "FUN_08007736",
            "FUN_08002968",
            "FUN_08004ccc",
            "FUN_080042d4",
            "FUN_0800542a",
            "FUN_0800457c",
            "FUN_080091c6",
            "FUN_0800a07a",
            "FUN_08003a20",
            "FUN_080064b0",
            "FUN_08009cdc",
            "FUN_08002a58",
            "FUN_080026b0",
            "FUN_08006092",
            "FUN_08008d8c",
            "FUN_080004d4",
            "FUN_08009124",
            "FUN_08002fa0",
            "FUN_08003a1c",
            "FUN_08005cb4",
            "FUN_08007744",
            "FUN_08006538",
            "FUN_080042e2",
            "FUN_08002fa8",
            "FUN_0800325a",
            "FUN_080091d8",
            "FUN_0800688e",
            "FUN_080088e0",
            "FUN_08008b66",
            "FUN_0800870c",
            "FUN_08008840",
            "FUN_08008600",
            "FUN_08003154",
            "FUN_08006420",
            "FUN_08007750",
            "FUN_08009938",
            "FUN_08007f0e",
            "FUN_08004004",
            "FUN_08003158",
            "FUN_080090c2",
            "FUN_08008846",
            "FUN_0800459c",
            "FUN_0800774a",
            "FUN_080042f0",
            "FUN_080027f0",
            "FUN_0800314e",
            "FUN_080076e0",
            "FUN_08002f14",
            "FUN_080036a2",
            "FUN_080038e4",
            "FUN_08005d48"
        ]
    ],
    "locked_functions": []
}