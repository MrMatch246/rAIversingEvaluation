{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "update_completed_flag_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 updateCompletedFlag_08000188(undefined4 inputParam)\n\n{\n  if ((char)completionStatus == '\\0') {\n    completionStatus._0_1_ = '\\x01';\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_08000188": "update_completed_flag_08000188",
                "param_1": "inputParam",
                "completed_8911": "completionStatus"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "concatenate_parameters_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_parameters_080001ac(undefined4 parameter_1,undefined4 parameter_2)\n\n{\n  return CONCAT44(parameter_2,parameter_1);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "concatenate_parameters_080001ac",
                "param_1": "parameter_1",
                "param_2": "parameter_2"
            },
            "calling": [
                "__libc_init_array",
                "__libc_fini_array"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "coolant_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "coolant_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "coolant_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "coolant_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "configure_coolant_mode_080001f8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configure_coolant_mode_080001f8(void)\n\n{\n  coolant_mode = '\\0';\n  stop_coolant();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "configure_coolant_mode_080001f8",
                "current_coolant_mode": "coolant_mode",
                "coolant_stop": "stop_coolant"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "coolant_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "turn_off_coolant_08000210",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid turn_off_coolant_08000210(void)\n\n{\n  turn_off_coolant_08000210_mist();\n  turn_off_coolant_08000210_flood();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "turn_off_coolant_08000210",
                "coolant_mist_off": "turn_off_coolant_mist",
                "coolant_flood_off": "turn_off_coolant_flood"
            },
            "calling": [
                "mc_reset",
                "coolant_run",
                "coolant_init"
            ],
            "called": [
                "coolant_mist_off",
                "coolant_flood_off"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "coolant_control_08000220",
            "code": "\nvoid coolant_control_08000220(uint8_t new_mode)\n\n{\n  uint8_t local_mode;\n  \n  if (new_mode != current_mode) {\n    plan_synchronize();\n    if (new_mode == '\\x01') {\n      coolant_flood_on();\n      current_mode = new_mode;\n    }\n    else if (new_mode == '\\x02') {\n      coolant_mist_on();\n      current_mode = new_mode;\n    }\n    else {\n      coolant_stop();\n      current_mode = new_mode;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "coolant_control_08000220",
                "mode": "new_mode",
                "mode_local": "local_mode",
                "current_coolant_mode": "current_mode"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "coolant_mist_on",
                "plan_synchronize",
                "coolant_flood_on",
                "coolant_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "calculate_adjusted_tick_08000268",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint64_t calculateAdjustedTick_08000268(void)\n\n{\n  uint32_t tick;\n  \n  tick = getTick();\n  return (uint64_t)((tick + 1) * 1000 - _DAT_e000e018 / 0xa8);\n}\n\n",
            "renaming": {
                "FUN_08000268": "calculate_adjusted_tick_08000268",
                "uVar1": "tick",
                "HAL_GetTick": "getTick"
            },
            "calling": [
                "_delay_us"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "delay_function_080002a0",
            "code": "\nvoid delayFunction_080002a0(uint milliseconds)\n\n{\n  uint localMilliseconds;\n  \n  HAL_Delay(milliseconds);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "delay_function_080002a0",
                "_ms": "milliseconds",
                "_ms_local": "localMilliseconds"
            },
            "calling": [
                "mc_dwell"
            ],
            "called": [
                "HAL_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "wait_microseconds_080002b6",
            "code": "\nvoid wait_microseconds_080002b6(uint microseconds)\n\n{\n  uint upperBits;\n  bool isTimeoutReached;\n  uint64_t currentMicroseconds;\n  uint64_t currentMicroseconds2;\n  uint microseconds_local;\n  uint64_t timeout;\n  \n  currentMicroseconds = get_currentmicrosecondsecs();\n  do {\n    currentMicroseconds2 = get_currentmicrosecondsecs();\n    upperBits = (uint)(currentMicroseconds2 >> 0x20);\n    timeout._0_4_ = (uint)(currentMicroseconds + microseconds);\n    timeout._4_4_ = (uint)(currentMicroseconds + microseconds >> 0x20);\n    isTimeoutReached = timeout._4_4_ <= upperBits;\n    if (upperBits == timeout._4_4_) {\n      isTimeoutReached = (uint)timeout <= (uint)currentMicroseconds2;\n    }\n  } while (!isTimeoutReached);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "wait_microseconds_080002b6",
                "_us": "microseconds",
                "uVar1": "upperBits",
                "bVar2": "isTimeoutReached",
                "uVar3": "currentMicroseconds",
                "uVar4": "currentMicroseconds2",
                "_us_local": "microseconds_local"
            },
            "calling": [],
            "called": [
                "get_current_usecs"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_eeprom_data_080002f0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_eeprom_data_080002f0(void)\n\n{\n  memset(eeprom_content,0xff,4);\n  is_eeprom_ready = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_eeprom_data_080002f0",
                "eeprom_data": "eeprom_content",
                "eeprom_ready": "is_eeprom_ready"
            },
            "calling": [
                "eeprom_put_char",
                "memcpy_to_eeprom_with_checksum",
                "eeprom_get_char",
                "memcpy_from_eeprom_with_checksum"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_eeprom_data_08000310",
            "code": "\nchar getEepromData_08000310(uint address)\n\n{\n  uint localAddress;\n  \n  if (eeprom_ready == 0) {\n    eeprom_init();\n  }\n  return eeprom_data[address & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_eeprom_data_08000310",
                "addr": "address",
                "addr_local": "localAddress"
            },
            "calling": [
                "read_global_settings",
                "memcpy_from_eeprom_with_checksum"
            ],
            "called": [
                "eeprom_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "write_to_eeprom_08000340",
            "code": "\nvoid writeToEEPROM_08000340(uint address,uchar value)\n\n{\n  uchar localValue;\n  uint localAddress;\n  \n  if (isEEPROMReady == 0) {\n    initializeEEPROM();\n  }\n  EEPROMData[address & 0x3ff] = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "write_to_eeprom_08000340",
                "addr": "address",
                "new_value": "value",
                "new_value_local": "localValue",
                "addr_local": "localAddress",
                "eeprom_ready": "isEEPROMReady",
                "eeprom_init": "initializeEEPROM",
                "eeprom_data": "EEPROMData"
            },
            "calling": [
                "write_global_settings",
                "memcpy_to_eeprom_with_checksum"
            ],
            "called": [
                "eeprom_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "copy_and_checksum_08000374",
            "code": "\nvoid copyAndChecksum_08000374(uint dest,char *src,uint length)\n\n{\n  uint local_length;\n  char *local_src;\n  uint local_dest;\n  uchar checksum;\n  \n  checksum = '\\0';\n  local_length = length;\n  local_src = src;\n  local_dest = dest;\n  if (eeprom_ready == 0) {\n    eeprom_init();\n    local_src = src;\n    local_dest = dest;\n  }\n  for (; local_length != 0; local_length = local_length - 1) {\n    checksum = (checksum != '\\0') + *local_src;\n    eeprom_put_char(local_dest,*local_src);\n    local_src = local_src + 1;\n    local_dest = local_dest + 1;\n  }\n  eeprom_put_char(local_dest,checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "copy_and_checksum_08000374",
                "destination": "dest",
                "source": "src",
                "size": "length",
                "size_local": "local_length",
                "source_local": "local_src",
                "destination_local": "local_dest"
            },
            "calling": [
                "write_global_settings",
                "settings_write_coord_data",
                "settings_store_startup_line"
            ],
            "called": [
                "eeprom_init",
                "eeprom_put_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "verify_checksum_080003ec",
            "code": "\nint verify_checksum_080003ec(char *output,uint input,uint length)\n\n{\n  char current_char;\n  uint local_length;\n  uint local_input;\n  char *local_output;\n  uchar current_data;\n  uchar calculated_checksum;\n  \n  calculated_checksum = '\\0';\n  local_length = length;\n  local_input = input;\n  local_output = output;\n  if (eeprom_ready == 0) {\n    eeprom_init();\n    local_input = input;\n    local_output = output;\n  }\n  for (; local_length != 0; local_length = local_length - 1) {\n    current_char = eeprom_get_char(local_input);\n    calculated_checksum = current_char + (calculated_checksum != '\\0');\n    *local_output = current_char;\n    local_input = local_input + 1;\n    local_output = local_output + 1;\n  }\n  current_char = eeprom_get_char(local_input);\n  return (uint)((uint)calculated_checksum == (int)current_char);\n}\n\n",
            "renaming": {
                "FUN_080003ec": "verify_checksum_080003ec",
                "destination": "output",
                "source": "input",
                "size": "length",
                "size_local": "local_length",
                "source_local": "local_input",
                "destination_local": "local_output",
                "data": "current_data",
                "checksum": "calculated_checksum",
                "cVar1": "current_char"
            },
            "calling": [
                "settings_read_startup_line",
                "read_global_settings",
                "settings_read_coord_data"
            ],
            "called": [
                "eeprom_init",
                "eeprom_get_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "update_plane_axes_08000478",
            "code": "\nvoid updatePlaneAxes_08000478(uint8_t newAxis0,uint8_t newAxis1,uint8_t newAxis2)\n\n{\n  uint8_t newAxis2_local;\n  uint8_t newAxis1_local;\n  uint8_t newAxis0_local;\n  \n  gc.plane_newAxis0 = newAxis0;\n  gc.plane_newAxis1 = newAxis1;\n  gc.plane_newAxis2 = newAxis2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "update_plane_axes_08000478",
                "axis_0": "newAxis0",
                "axis_1": "newAxis1",
                "axis_2": "newAxis2",
                "axis_2_local": "newAxis2_local",
                "axis_1_local": "newAxis1_local",
                "axis_0_local": "newAxis0_local"
            },
            "calling": [
                "gc_execute_line",
                "gc_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_gc_080004ac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeGC_080004ac(void)\n\n{\n  uint8_t coordDataStatus;\n  \n  memset(&gc,0,0x38);\n  gc.feed_rate = settings.default_feed_rate;\n  select_plane('\\0','\\x01','\\x02');\n  gc.absolute_mode = '\\x01';\n  coordDataStatus = settings_read_coord_data(gc.coord_select,gc.coord_system);\n  if (coordDataStatus == '\\0') {\n    report_status_message('\\n');\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_gc_080004ac",
                "uVar1": "coordDataStatus"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "select_plane",
                "report_status_message",
                "settings_read_coord_data",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "convert_coordinates_080004fc",
            "code": "\nvoid convertCoordinates_080004fc(int32_t x_input,int32_t y_input,int32_t z_input)\n\n{\n  undefined4 float_conversion;\n  int32_t z_input_local;\n  int32_t y_input_local;\n  int32_t x_input_local;\n  \n  float_conversion = __floatsisf(x_input);\n  converted_x = (float)__aeabi_fdiv(float_conversion,steps_x);\n  float_conversion = __floatsisf(y_input);\n  converted_y = (float)__aeabi_fdiv(float_conversion,steps_y);\n  float_conversion = __floatsisf(z_input);\n  converted_z = (float)__aeabi_fdiv(float_conversion,steps_z);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "convert_coordinates_080004fc",
                "x": "x_input",
                "y": "y_input",
                "z": "z_input",
                "uVar1": "float_conversion",
                "gc.position[0]": "converted_x",
                "gc.position[1]": "converted_y",
                "gc.position[2]": "converted_z",
                "settings.steps_per_mm[0]": "steps_x",
                "settings.steps_per_mm[1]": "steps_y",
                "settings.steps_per_mm[2]": "steps_z"
            },
            "calling": [
                "sys_sync_current_position"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "convert_value_to_inches_0800056c",
            "code": "\nfloat convertValueToInches_0800056c(float inputValue)\n\n{\n  undefined4 inputConversion;\n  undefined8 valueDouble;\n  float result;\n  \n  if (gc.inches_mode != '\\0') {\n    valueDouble = __aeabi_f2d(inputConversion);\n    valueDouble = __muldf3((int)valueDouble,(int)((ulonglong)valueDouble >> 0x20),0x66666666,0x40396666);\n    inputValue = (float)__truncdfsf2((int)valueDouble,(int)((ulonglong)valueDouble >> 0x20));\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "convert_value_to_inches_0800056c",
                "value": "inputValue",
                "in_r0": "inputConversion",
                "uVar1": "valueDouble",
                "value_local": "result"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__muldf3",
                "__truncdfsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "process_g_code_080005b4",
            "code": "\nuint8_t processGCode_080005b4(charadius *gCodeLine)\n\n{\n  uint8_t status;\n  int result;\n  float valueFloat;\n  undefined4 floatToDouble1;\n  undefined4 floatToDouble2;\n  undefined4 truncatedValue1;\n  undefined4 truncatedValue2;\n  undefined4 truncatedValue3;\n  undefined4 truncatedValue4;\n  undefined4 truncatedValue5;\n  undefined4 truncatedValue6;\n  uint sqrtResult1;\n  undefined4 sqrtResult2;\n  undefined4 sqrtResult3;\n  uint uVaradius6;\n  float fVaradius7;\n  float numericValue_00;\n  undefined8 floatToDouble3;\n  undefined8 floatToDouble4;\n  undefined8 floatToDouble5;\n  undefined8 floatToDouble6;\n  undefined8 floatToDouble7;\n  undefined8 floatToDouble8;\n  undefined8 floatToDouble9;\n  undefined8 floatToDouble10;\n  undefined8 floatToDouble11;\n  undefined8 floatToDouble12;\n  undefined8 floatToDouble13;\n  undefined8 floatToDouble14;\n  undefined8 floatToDouble15;\n  undefined8 floatToDouble16;\n  undefined8 floatToDouble17;\n  undefined8 floatToDouble18;\n  undefined8 floatToDouble19;\n  undefined8 floatToDouble20;\n  undefined8 floatToDouble21;\n  float floatParam1;\n  undefined8 floatToDouble22;\n  undefined8 floatToDouble23;\n  float floatParam2;\n  float floatParam3;\n  float floatParam4;\n  float floatParam5;\n  float floatParam6;\n  float floatParam7;\n  float floatParam8;\n  float floatParam9;\n  float floatParam10;\n  float floatParam11;\n  float floatParam12;\n  float floatParam13;\n  float floatParam14;\n  float floatParam15;\n  float floatParam16;\n  float floatParam17;\n  float floatParam18;\n  float floatParam19;\n  float floatParam20;\n  float floatParam21;\n  float floatParam22;\n  float floatParam23;\n  float floatParam24;\n  float floatParam25;\n  float floatParam26;\n  float floatParam27;\n  float floatParam28;\n  float floatParam29;\n  float floatParam30;\n  float floatParam31;\n  float floatParam32;\n  float floatParam33;\n  float floatParam34;\n  float floatParam35;\n  float floatParam36;\n  float floatParam37;\n  float floatParam38;\n  float floatParam39;\n  undefined8 floatToDouble24;\n  undefined4 inStackFloatParam1;\n  undefined4 inStackFloatParam2;\n  undefined4 inStackFloatParam3;\n  undefined4 inStackFloatParam4;\n  charadius *localGCodeLine;\n  float coordinateData2 [3];\n  float coordinateData1 [3];\n  float coordinateData [3];\n  float coordinateOffset [3];\n  float targetPosition [3];\n  float numericValue;\n  charadius commandLetter;\n  uint8_t characterCounter;\n  float y;\n  float x;\n  uint8_t isclockwise;\n  float h_x2_div_d;\n  uint8_t i_3;\n  uint8_t i_2;\n  uint8_t i_1;\n  uint8_t i;\n  uint8_t l;\n  float radius;\n  float dwellTime;\n  uint8_t groupNumber;\n  uint8_t nonModalAction;\n  uint8_t absoluteOverride;\n  float inverseFeedRate;\n  uint8_t axisWords;\n  uint16_t modalGroupWords;\n  int intValue;\n  \n  if (sys.state == '\\x06') {\n    status = '\\f';\n  }\n  else {\n    characterCounter = '\\0';\n    modalGroupWords = 0;\n    axisWords = '\\0';\n    inverseFeedRate = -1.0;\n    absoluteOverride = '\\0';\n    nonModalAction = '\\0';\n    memset(targetPosition,0,0xc);\n    memset(coordinateOffset,0,0xc);\n    gc.status_code = '\\0';\n    groupNumber = '\\0';\n    while (result = next_statement(&commandLetter,&numericValue,gCodeLine,&characterCounter), result != 0) {\n      floatToDouble1 = __aeabi_f2d(numericValue);\n      tradiusunc((double)CONCAT44(inStackFloatParam2,inStackFloatParam1));\n      intValue = __aeabi_d2iz(floatToDouble1,truncatedValue1);\n      if (commandLetter == 'G') {\n        switch(intValue) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          groupNumber = '\\x02';\n          bradiuseak;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          groupNumber = '\\x01';\n          bradiuseak;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          groupNumber = '\\x03';\n          bradiuseak;\n        case 0x14:\n        case 0x15:\n          groupNumber = '\\a';\n          bradiuseak;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          groupNumber = '\\t';\n          bradiuseak;\n        case 0x5a:\n        case 0x5b:\n          groupNumber = '\\x04';\n          bradiuseak;\n        case 0x5d:\n        case 0x5e:\n          groupNumber = '\\x06';\n        }\n        switch(intValue) {\n        case 0:\n          gc.motion_mode = '\\0';\n          bradiuseak;\n        case 1:\n          gc.motion_mode = '\\x01';\n          bradiuseak;\n        case 2:\n          gc.motion_mode = '\\x02';\n          bradiuseak;\n        case 3:\n          gc.motion_mode = '\\x03';\n          bradiuseak;\n        case 4:\n          nonModalAction = '\\x01';\n          bradiuseak;\n        default:\n          gc.status_code = '\\x03';\n          bradiuseak;\n        case 10:\n          nonModalAction = '\\x02';\n          bradiuseak;\n        case 0x11:\n          select_dwellTimelane('\\0','\\x01','\\x02');\n          bradiuseak;\n        case 0x12:\n          select_dwellTimelane('\\x02','\\0','\\x01');\n          bradiuseak;\n        case 0x13:\n          select_dwellTimelane('\\x01','\\x02','\\0');\n          bradiuseak;\n        case 0x14:\n          gc.inches_mode = '\\x01';\n          bradiuseak;\n        case 0x15:\n          gc.inches_mode = '\\0';\n          bradiuseak;\n        case 0x1c:\n        case 0x1e:\n          floatToDouble1 = __aeabi_fmul(numericValue,0x41200000);\n          floatToDouble1 = __aeabi_f2d(floatToDouble1);\n          tradiusunc((double)CONCAT44(inStackFloatParam2,inStackFloatParam1));\n          intValue = __aeabi_d2iz(floatToDouble1,truncatedValue2);\n          switch(intValue) {\n          case 0x118:\n            nonModalAction = '\\x03';\n            bradiuseak;\n          case 0x119:\n            nonModalAction = '\\x04';\n            bradiuseak;\n          default:\n            gc.status_code = '\\x03';\n            bradiuseak;\n          case 300:\n            nonModalAction = '\\x05';\n            bradiuseak;\n          case 0x12d:\n            nonModalAction = '\\x06';\n          }\n          bradiuseak;\n        case 0x35:\n          absoluteOverride = '\\x01';\n          bradiuseak;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          gc.cooradiusd_select = (charadius)intValue + 0xca;\n          bradiuseak;\n        case 0x50:\n          gc.motion_mode = '\\x04';\n          bradiuseak;\n        case 0x5a:\n          gc.absolute_mode = '\\x01';\n          bradiuseak;\n        case 0x5b:\n          gc.absolute_mode = '\\0';\n          bradiuseak;\n        case 0x5c:\n          floatToDouble1 = __aeabi_fmul(numericValue,0x41200000);\n          floatToDouble1 = __aeabi_f2d(floatToDouble1);\n          tradiusunc((double)CONCAT44(inStackFloatParam2,inStackFloatParam1));\n          intValue = __aeabi_d2iz(floatToDouble1,truncatedValue3);\n          if (intValue == 0x398) {\n            nonModalAction = '\\a';\n          }\n          else if (intValue == 0x399) {\n            nonModalAction = '\\b';\n          }\n          else {\n            gc.status_code = '\\x03';\n          }\n          bradiuseak;\n        case 0x5d:\n          gc.inverseFeedRate_mode = '\\x01';\n          bradiuseak;\n        case 0x5e:\n          gc.inverseFeedRate_mode = '\\0';\n        }\n      }\n      else if (commandLetter == 'M') {\n        if (intValue == 0x1e) {\nLAB_08000b96:\n          groupNumber = '\\x05';\n        }\n        else if (intValue < 0x1f) {\n          if (intValue < 3) {\n            if (-1 < intValue) goto LAB_08000b96;\n          }\n          else if (intValue - 3U < 3) {\n            groupNumber = '\\b';\n          }\n        }\n        switch(intValue) {\n        case 0:\n          gc.dwellTimeradiusogradiusam_flow = '\\x01';\n          bradiuseak;\n        case 1:\n          bradiuseak;\n        case 2:\n        case 0x1e:\n          gc.dwellTimeradiusogradiusam_flow = '\\x02';\n          bradiuseak;\n        case 3:\n          gc.sdwellTimeindle_diradiusection = '\\x01';\n          bradiuseak;\n        case 4:\n          gc.sdwellTimeindle_diradiusection = -1;\n          bradiuseak;\n        case 5:\n          gc.sdwellTimeindle_diradiusection = '\\0';\n          bradiuseak;\n        default:\n          gc.status_code = '\\x03';\n          bradiuseak;\n        case 7:\n          gc.coolant_mode = '\\x02';\n          bradiuseak;\n        case 8:\n          gc.coolant_mode = '\\x01';\n          bradiuseak;\n        case 9:\n          gc.coolant_mode = '\\0';\n        }\n      }\n      if (groupNumber != '\\0') {\n        if (((int)(uint)modalGroupWords >> groupNumber & 1U) == 0) {\n          modalGroupWords = modalGroupWords | (ushoradiust)(1 << groupNumber);\n        }\n        else {\n          gc.status_code = '\\x05';\n        }\n        groupNumber = '\\0';\n      }\n    }\n    status = gc.status_code;\n    if (gc.status_code == '\\0') {\n      dwellTime = 0.0;\n      radius = 0.0;\n      l = '\\0';\n      characterCounter = '\\0';\nswitchD_08000d18_caseD_47:\n      result = next_statement(&commandLetter,&numericValue,gCodeLine,&characterCounter);\n      if (result != 0) {\n        fVaradius7 = (float)floatToDouble3;\n        switch(commandLetter) {\n        case 'F':\n          result = __aeabi_fcmdwellTimele(numericValue,0);\n          if (result != 0) {\n            gc.status_code = '\\x06';\n          }\n          if (gc.inverseFeedRate_mode == '\\0') {\n            fVaradius7 = numericValue;\n            to_millimeteradiuss(numericValue_00);\n            gc.feed_radiusate = fVaradius7;\n          }\n          else {\n            fVaradius7 = numericValue;\n            to_millimeteradiuss(numericValue_00);\n            inverseFeedRate = fVaradius7;\n          }\n          bradiuseak;\n        case 'G':\n        case 'M':\n        case 'N':\n          bradiuseak;\n        default:\n          gc.status_code = '\\x03';\n          bradiuseak;\n        case 'I':\n        case 'J':\n        case 'K':\n          uVaradius6 = (uint)(byte)commandLetter;\n          valueFloat = numericValue;\n          to_millimeteradiuss(fVaradius7);\n          coordinateOffset[uVaradius6 - 0x49] = valueFloat;\n          bradiuseak;\n        case 'L':\n          floatToDouble1 = __aeabi_f2d(numericValue);\n          tradiusunc((double)CONCAT44(inStackFloatParam2,inStackFloatParam1));\n          l = __aeabi_d2uiz(floatToDouble1,truncatedValue4);\n          bradiuseak;\n        case 'P':\n          dwellTime = numericValue;\n          bradiuseak;\n        case 'R':\n          valueFloat = numericValue;\n          to_millimeteradiuss(fVaradius7);\n          radius = valueFloat;\n          bradiuseak;\n        case 'S':\n          result = __aeabi_fcmdwellTimelt(numericValue,0);\n          if (result != 0) {\n            gc.status_code = '\\x06';\n          }\n          bradiuseak;\n        case 'T':\n          result = __aeabi_fcmdwellTimelt(numericValue,0);\n          if (result != 0) {\n            gc.status_code = '\\x06';\n          }\n          floatToDouble1 = __aeabi_f2d(numericValue);\n          tradiusunc((double)CONCAT44(inStackFloatParam2,inStackFloatParam1));\n          gc.tool = __aeabi_d2uiz(floatToDouble1,truncatedValue5);\n          bradiuseak;\n        case 'X':\n          targetPosition[0] = numericValue;\n          to_millimeteradiuss(fVaradius7);\n          axisWords = axisWords | 1;\n          bradiuseak;\n        case 'Y':\n          targetPosition[1] = numericValue;\n          to_millimeteradiuss(fVaradius7);\n          axisWords = axisWords | 2;\n          bradiuseak;\n        case 'Z':\n          targetPosition[2] = numericValue;\n          to_millimeteradiuss(fVaradius7);\n          axisWords = axisWords | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      status = gc.status_code;\n      if (gc.status_code == '\\0') {\n        floatToDouble24 = floatToDouble3;\n        fVaradius7 = floatParam2;\n        valueFloat = floatParam21;\n        if (sys.state != '\\a') {\n          sdwellTimeindle_radiusun(gc.sdwellTimeindle_diradiusection);\n          coolant_radiusun(gc.coolant_mode);\n          floatToDouble24 = floatToDouble4;\n          fVaradius7 = floatParam3;\n          valueFloat = floatParam22;\n        }\n        if ((modalGroupWords & 0x200) != 0) {\n          status = settings_radiusead_coordinateData(gc.cooradiusd_select,coordinateData);\n          if (status == '\\0') {\n            radiuseturadiusn '\\n';\n          }\n          gc.cooradiusd_system[0] = coordinateData[0];\n          gc.cooradiusd_system[1] = coordinateData[1];\n          gc.cooradiusd_system[2] = coordinateData[2];\n          floatToDouble24 = floatToDouble5;\n          fVaradius7 = floatParam4;\n          valueFloat = floatParam23;\n        }\n        switch(nonModalAction) {\n        case '\\x01':\n          result = __aeabi_fcmdwellTimelt(dwellTime,0);\n          floatToDouble24 = floatToDouble6;\n          fVaradius7 = floatParam5;\n          valueFloat = floatParam24;\n          if (result == 0) {\n            if (sys.state != '\\a') {\n              mc_dwell((float)floatToDouble6);\n              floatToDouble24 = floatToDouble7;\n              fVaradius7 = floatParam6;\n              valueFloat = floatParam25;\n            }\n          }\n          else {\n            gc.status_code = '\\x06';\n          }\n          bradiuseak;\n        case '\\x02':\n          floatToDouble1 = __aeabi_f2d(dwellTime);\n          tradiusunc((double)CONCAT44(inStackFloatParam2,inStackFloatParam1));\n          intValue = __aeabi_d2iz(floatToDouble1,truncatedValue6);\n          floatToDouble24 = floatToDouble8;\n          fVaradius7 = floatParam7;\n          valueFloat = floatParam26;\n          if ((((l == '\\x02') || (l == '\\x14')) && (-1 < intValue)) && (intValue < 7)) {\n            if ((axisWords == '\\0') && (l == '\\x02')) {\n              gc.status_code = '\\x06';\n            }\n            else {\n              if (intValue < 1) {\n                intValue = (int)gc.cooradiusd_select;\n              }\n              else {\n                intValue = intValue + -1;\n              }\n              status = settings_radiusead_coordinateData((uint8_t)intValue,coordinateData2);\n              if (status == '\\0') {\n                radiuseturadiusn '\\n';\n              }\n              foradius (i = '\\0'; i < 3; i = i + '\\x01') {\n                if (((int)(uint)axisWords >> i & 1U) != 0) {\n                  if (l == '\\x14') {\n                    uVaradius6 = (uint)i;\n                    fVaradius7 = (float)__aeabi_fsub(gc.dwellTimeosition[i],targetPosition[i]);\n                    coordinateData2[uVaradius6] = fVaradius7;\n                  }\n                  else {\n                    coordinateData2[i] = targetPosition[i];\n                  }\n                }\n              }\n              settings_wradiusite_coordinateData((uint8_t)intValue,coordinateData2);\n              floatToDouble24 = floatToDouble9;\n              fVaradius7 = floatParam8;\n              valueFloat = floatParam27;\n              if (intValue == (uint)gc.cooradiusd_select) {\n                gc.cooradiusd_system[0] = coordinateData2[0];\n                gc.cooradiusd_system[1] = coordinateData2[1];\n                gc.cooradiusd_system[2] = coordinateData2[2];\n              }\n            }\n          }\n          else {\n            gc.status_code = '\\x03';\n          }\n          axisWords = '\\0';\n          bradiuseak;\n        case '\\x03':\n        case '\\x05':\n          if (axisWords != '\\0') {\n            foradius (i_1 = '\\0'; i_1 < 3; i_1 = i_1 + '\\x01') {\n              if (((int)(uint)axisWords >> i_1 & 1U) == 0) {\n                targetPosition[i_1] = gc.dwellTimeosition[i_1];\n              }\n              else if (gc.absolute_mode == '\\0') {\n                uVaradius6 = (uint)i_1;\n                fVaradius7 = (float)__addsf3(targetPosition[i_1],gc.dwellTimeosition[i_1]);\n                targetPosition[uVaradius6] = fVaradius7;\n                floatToDouble24 = floatToDouble11;\n                fVaradius7 = floatParam10;\n                valueFloat = floatParam29;\n              }\n              else {\n                fVaradius7 = targetPosition[i_1];\n                floatToDouble1 = __addsf3(gc.cooradiusd_system[i_1],gc.cooradiusd_coordinateOffset[i_1]);\n                uVaradius6 = (uint)i_1;\n                fVaradius7 = (float)__addsf3(fVaradius7,floatToDouble1);\n                targetPosition[uVaradius6] = fVaradius7;\n                floatToDouble24 = floatToDouble10;\n                fVaradius7 = floatParam9;\n                valueFloat = floatParam28;\n              }\n            }\n            mc_gCodeLine((float)floatToDouble24,(float)((ulonglong)floatToDouble24 >> 0x20),fVaradius7,valueFloat,SUB41(targetPosition[0],0));\n          }\n          if (nonModalAction == '\\x05') {\n            status = settings_radiusead_coordinateData('\\a',coordinateData1);\n            floatToDouble24 = floatToDouble12;\n            fVaradius7 = floatParam11;\n            valueFloat = floatParam30;\n            if (status == '\\0') {\n              radiuseturadiusn '\\n';\n            }\n          }\n          else {\n            status = settings_radiusead_coordinateData('\\x06',coordinateData1);\n            floatToDouble24 = floatToDouble13;\n            fVaradius7 = floatParam12;\n            valueFloat = floatParam31;\n            if (status == '\\0') {\n              radiuseturadiusn '\\n';\n            }\n          }\n          inStackFloatParam1 = 0;\n          mc_gCodeLine((float)floatToDouble24,(float)((ulonglong)floatToDouble24 >> 0x20),fVaradius7,valueFloat,\n                  SUB41(coordinateData1[0],0));\n          gc.dwellTimeosition[0] = coordinateData1[0];\n          gc.dwellTimeosition[1] = coordinateData1[1];\n          gc.dwellTimeosition[2] = coordinateData1[2];\n          axisWords = '\\0';\n          floatToDouble24 = floatToDouble14;\n          fVaradius7 = floatParam13;\n          valueFloat = floatParam32;\n          bradiuseak;\n        case '\\x04':\n        case '\\x06':\n          if (nonModalAction == '\\x06') {\n            settings_wradiusite_coordinateData('\\a',gc.dwellTimeosition);\n            floatToDouble24 = floatToDouble15;\n            fVaradius7 = floatParam14;\n            valueFloat = floatParam33;\n          }\n          else {\n            settings_wradiusite_coordinateData('\\x06',gc.dwellTimeosition);\n            floatToDouble24 = floatToDouble16;\n            fVaradius7 = floatParam15;\n            valueFloat = floatParam34;\n          }\n          bradiuseak;\n        case '\\a':\n          if (axisWords == '\\0') {\n            gc.status_code = '\\x06';\n          }\n          else {\n            foradius (i_2 = '\\0'; i_2 < 3; i_2 = i_2 + '\\x01') {\n              if (((int)(uint)axisWords >> i_2 & 1U) != 0) {\n                floatToDouble1 = __aeabi_fsub(gc.dwellTimeosition[i_2],gc.cooradiusd_system[i_2]);\n                uVaradius6 = (uint)i_2;\n                fVaradius7 = (float)__aeabi_fsub(floatToDouble1,targetPosition[i_2]);\n                gc.cooradiusd_coordinateOffset[uVaradius6] = fVaradius7;\n                floatToDouble24 = floatToDouble17;\n                fVaradius7 = floatParam16;\n                valueFloat = floatParam35;\n              }\n            }\n          }\n          axisWords = '\\0';\n          bradiuseak;\n        case '\\b':\n          memset(gc.cooradiusd_coordinateOffset,0,0xc);\n          floatToDouble24 = floatToDouble18;\n          fVaradius7 = floatParam17;\n          valueFloat = floatParam36;\n        }\n        if (((modalGroupWords & 4) != 0) || (axisWords != '\\0')) {\n          if ((gc.inverseFeedRate_mode != '\\0') &&\n             ((result = __aeabi_fcmdwellTimelt(inverseFeedRate,0), floatToDouble24 = floatToDouble19,\n              fVaradius7 = floatParam18, valueFloat = floatParam37, result != 0 &&\n              (gc.motion_mode != '\\x04')))) {\n            gc.status_code = '\\x06';\n          }\n          if (((absoluteOverride != '\\0') && (gc.motion_mode != '\\0')) &&\n             (gc.motion_mode != '\\x01')) {\n            gc.status_code = '\\x06';\n          }\n          if (gc.status_code != '\\0') {\n            radiuseturadiusn gc.status_code;\n          }\n          foradius (i_3 = '\\0'; i_3 < 3; i_3 = i_3 + '\\x01') {\n            if (((int)(uint)axisWords >> i_3 & 1U) == 0) {\n              targetPosition[i_3] = gc.dwellTimeosition[i_3];\n            }\n            else if (absoluteOverride == '\\0') {\n              if (gc.absolute_mode == '\\0') {\n                uVaradius6 = (uint)i_3;\n                fVaradius7 = (float)__addsf3(targetPosition[i_3],gc.dwellTimeosition[i_3]);\n                targetPosition[uVaradius6] = fVaradius7;\n                floatToDouble24 = floatToDouble21;\n                fVaradius7 = floatParam20;\n                valueFloat = floatParam39;\n              }\n              else {\n                fVaradius7 = targetPosition[i_3];\n                floatToDouble1 = __addsf3(gc.cooradiusd_system[i_3],gc.cooradiusd_coordinateOffset[i_3]);\n                uVaradius6 = (uint)i_3;\n                fVaradius7 = (float)__addsf3(fVaradius7,floatToDouble1);\n                targetPosition[uVaradius6] = fVaradius7;\n                floatToDouble24 = floatToDouble20;\n                fVaradius7 = floatParam19;\n                valueFloat = floatParam38;\n              }\n            }\n          }\n          if (gc.motion_mode < 5) {\n            floatParam1 = (float)((ulonglong)floatToDouble24 >> 0x20);\n            switch(gc.motion_mode) {\n            case '\\0':\n              if (axisWords == '\\0') {\n                gc.status_code = '\\x06';\n              }\n              else {\n                mc_gCodeLine((float)floatToDouble24,floatParam1,fVaradius7,valueFloat,SUB41(targetPosition[0],0));\n              }\n              bradiuseak;\n            case '\\x01':\n              if (axisWords == '\\0') {\n                gc.status_code = '\\x06';\n              }\n              else {\n                mc_gCodeLine((float)floatToDouble24,floatParam1,fVaradius7,valueFloat,SUB41(targetPosition[0],0));\n              }\n              bradiuseak;\n            default:\n              axisWords = axisWords & ~(byte)(1 << gc.dwellTimelane_axis_2);\n              if ((axisWords == 0) ||\n                 (((result = __aeabi_fcmdwellTimeeq(radius,0), result != 0 &&\n                   (result = __aeabi_fcmdwellTimeeq(coordinateOffset[gc.dwellTimelane_axis_0],0), result != 0)) &&\n                  (result = __aeabi_fcmdwellTimeeq(coordinateOffset[gc.dwellTimelane_axis_1],0), result != 0)))) {\n                gc.status_code = '\\x06';\n              }\n              else {\n                result = __aeabi_fcmdwellTimeeq(radius,0);\n                if (result == 0) {\n                  x = (float)__aeabi_fsub(targetPosition[gc.dwellTimelane_axis_0],gc.dwellTimeosition[gc.dwellTimelane_axis_0]);\n                  y = (float)__aeabi_fsub(targetPosition[gc.dwellTimelane_axis_1],gc.dwellTimeosition[gc.dwellTimelane_axis_1]);\n                  memset(coordinateOffset,0,0xc);\n                  floatToDouble1 = __aeabi_fmul(radius,0x40800000);\n                  floatToDouble1 = __aeabi_fmul(floatToDouble1,radius);\n                  floatToDouble2 = __aeabi_fmul(x,x);\n                  floatToDouble1 = __aeabi_fsub(floatToDouble1,floatToDouble2);\n                  floatToDouble2 = __aeabi_fmul(y,y);\n                  h_x2_div_d = (float)__aeabi_fsub(floatToDouble1,floatToDouble2);\n                  result = __aeabi_fcmdwellTimelt(h_x2_div_d,0);\n                  if (result != 0) {\n                    gc.status_code = '\\x04';\n                    radiuseturadiusn '\\x04';\n                  }\n                  floatToDouble1 = __aeabi_f2d(h_x2_div_d);\n                  sqradiust((double)CONCAT44(inStackFloatParam2,inStackFloatParam1));\n                  floatToDouble2 = __aeabi_f2d(x);\n                  __aeabi_f2d(y);\n                  hydwellTimeot((double)CONCAT44(inStackFloatParam2,inStackFloatParam1),\n                        (double)CONCAT44(inStackFloatParam4,inStackFloatParam3));\n                  floatToDouble24 = __divdf3(floatToDouble1,sqrtResult1 ^ 0x80000000,floatToDouble2,sqrtResult2);\n                  h_x2_div_d = (float)__tradiusuncdfsf2((int)floatToDouble24,(int)((ulonglong)floatToDouble24 >> 0x20));\n                  if (gc.motion_mode == '\\x03') {\n                    h_x2_div_d = (float)((uint)h_x2_div_d ^ 0x80000000);\n                  }\n                  result = __aeabi_fcmdwellTimelt(radius,0);\n                  if (result != 0) {\n                    h_x2_div_d = (float)((uint)h_x2_div_d ^ 0x80000000);\n                    radius = (float)((uint)radius ^ 0x80000000);\n                  }\n                  floatToDouble1 = __aeabi_fmul(y,h_x2_div_d);\n                  floatToDouble1 = __aeabi_fsub(x,floatToDouble1);\n                  uVaradius6 = (uint)gc.dwellTimelane_axis_0;\n                  fVaradius7 = (float)__aeabi_fmul(floatToDouble1,0x3f000000);\n                  coordinateOffset[uVaradius6] = fVaradius7;\n                  floatToDouble1 = __aeabi_fmul(x,h_x2_div_d);\n                  floatToDouble1 = __addsf3(floatToDouble1,y);\n                  uVaradius6 = (uint)gc.dwellTimelane_axis_1;\n                  fVaradius7 = (float)__aeabi_fmul(floatToDouble1,0x3f000000);\n                  coordinateOffset[uVaradius6] = fVaradius7;\n                  floatToDouble24 = floatToDouble22;\n                }\n                else {\n                  floatToDouble1 = __aeabi_f2d(coordinateOffset[gc.dwellTimelane_axis_0]);\n                  __aeabi_f2d(coordinateOffset[gc.dwellTimelane_axis_1]);\n                  hydwellTimeot((double)CONCAT44(inStackFloatParam2,inStackFloatParam1),\n                        (double)CONCAT44(inStackFloatParam4,inStackFloatParam3));\n                  radius = (float)__tradiusuncdfsf2(floatToDouble1,sqrtResult3);\n                  floatToDouble24 = floatToDouble23;\n                }\n                isclockwise = gc.motion_mode == '\\x02';\n                fVaradius7 = inverseFeedRate;\n                if (gc.inverseFeedRate_mode == '\\0') {\n                  fVaradius7 = gc.feed_radiusate;\n                }\n                mc_aradiusc(gc.dwellTimeosition,targetPosition,coordinateOffset,gc.dwellTimelane_axis_0,gc.dwellTimelane_axis_1,gc.dwellTimelane_axis_2,\n                       (float)floatToDouble24,SUB41(fVaradius7,0),(float)((ulonglong)floatToDouble24 >> 0x20),\n                       gc.inverseFeedRate_mode);\n              }\n              bradiuseak;\n            case '\\x04':\n              if (axisWords != '\\0') {\n                gc.status_code = '\\x06';\n              }\n            }\n          }\n          if (gc.status_code != '\\0') {\n            radiuseturadiusn gc.status_code;\n          }\n          gc.dwellTimeosition[0] = targetPosition[0];\n          gc.dwellTimeosition[1] = targetPosition[1];\n          gc.dwellTimeosition[2] = targetPosition[2];\n        }\n        status = gc.status_code;\n        if (gc.dwellTimeradiusogradiusam_flow != '\\0') {\n          dwellTimelan_synchradiusonize();\n          sys.auto_staradiust = '\\0';\n          if (gc.dwellTimeradiusogradiusam_flow == '\\x02') {\n            mc_radiuseset();\n            status = gc.status_code;\n          }\n          else {\n            gc.dwellTimeradiusogradiusam_flow = '\\0';\n            status = gc.status_code;\n          }\n        }\n      }\n    }\n  }\n  radiuseturadiusn status;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "process_g_code_080005b4",
                "line": "gCodeLine",
                "uVar1": "status",
                "iVar2": "result",
                "fVar3": "valueFloat",
                "uVar4": "floatToDouble1",
                "uVar5": "floatToDouble2",
                "extraout_r1": "truncatedValue1",
                "extraout_r1_00": "truncatedValue2",
                "extraout_r1_01": "truncatedValue3",
                "extraout_r1_02": "truncatedValue4",
                "extraout_r1_03": "truncatedValue5",
                "extraout_r1_04": "truncatedValue6",
                "extraout_r1_05": "sqrtResult1",
                "extraout_r1_06": "sqrtResult2",
                "extraout_r1_07": "sqrtResult3",
                "extraout_d0": "floatToDouble3",
                "extraout_d0_00": "floatToDouble4",
                "extraout_d0_01": "floatToDouble5",
                "extraout_d0_02": "floatToDouble6",
                "extraout_d0_03": "floatToDouble7",
                "extraout_d0_04": "floatToDouble8",
                "extraout_d0_05": "floatToDouble9",
                "extraout_d0_06": "floatToDouble10",
                "extraout_d0_07": "floatToDouble11",
                "extraout_d0_08": "floatToDouble12",
                "extraout_d0_09": "floatToDouble13",
                "extraout_d0_10": "floatToDouble14",
                "extraout_d0_11": "floatToDouble15",
                "extraout_d0_12": "floatToDouble16",
                "extraout_d0_13": "floatToDouble17",
                "extraout_d0_14": "floatToDouble18",
                "extraout_d0_15": "floatToDouble19",
                "extraout_d0_16": "floatToDouble20",
                "extraout_d0_17": "floatToDouble21",
                "extraout_d0_18": "floatToDouble22",
                "extraout_d0_19": "floatToDouble23",
                "line_local": "localGCodeLine",
                "coord_data_2": "coordinateData2",
                "coord_data_1": "coordinateData1",
                "coord_data": "coordinateData",
                "offset": "coordinateOffset",
                "target": "targetPosition",
                "value": "numericValue",
                "letter": "commandLetter",
                "char_counter": "characterCounter",
                "y_00": "floatParam1",
                "extraout_s2": "floatParam2",
                "extraout_s2_00": "floatParam3",
                "extraout_s2_01": "floatParam4",
                "extraout_s2_02": "floatParam5",
                "extraout_s2_03": "floatParam6",
                "extraout_s2_04": "floatParam7",
                "extraout_s2_05": "floatParam8",
                "extraout_s2_06": "floatParam9",
                "extraout_s2_07": "floatParam10",
                "extraout_s2_08": "floatParam11",
                "extraout_s2_09": "floatParam12",
                "extraout_s2_10": "floatParam13",
                "extraout_s2_11": "floatParam14",
                "extraout_s2_12": "floatParam15",
                "extraout_s2_13": "floatParam16",
                "extraout_s2_14": "floatParam17",
                "extraout_s2_15": "floatParam18",
                "extraout_s2_16": "floatParam19",
                "extraout_s2_17": "floatParam20",
                "extraout_s3": "floatParam21",
                "extraout_s3_00": "floatParam22",
                "extraout_s3_01": "floatParam23",
                "extraout_s3_02": "floatParam24",
                "extraout_s3_03": "floatParam25",
                "extraout_s3_04": "floatParam26",
                "extraout_s3_05": "floatParam27",
                "extraout_s3_06": "floatParam28",
                "extraout_s3_07": "floatParam29",
                "extraout_s3_08": "floatParam30",
                "extraout_s3_09": "floatParam31",
                "extraout_s3_10": "floatParam32",
                "extraout_s3_11": "floatParam33",
                "extraout_s3_12": "floatParam34",
                "extraout_s3_13": "floatParam35",
                "extraout_s3_14": "floatParam36",
                "extraout_s3_15": "floatParam37",
                "extraout_s3_16": "floatParam38",
                "extraout_s3_17": "floatParam39",
                "uVar8": "floatToDouble24",
                "in_stack_ffffff48": "inStackFloatParam1",
                "in_stack_ffffff4c": "inStackFloatParam2",
                "in_stack_ffffff50": "inStackFloatParam3",
                "in_stack_ffffff54": "inStackFloatParam4",
                "axis_words": "axisWords",
                "inverse_feed_rate": "inverseFeedRate",
                "int_value": "intValue",
                "r": "radius",
                "p": "dwellTime",
                "group_number": "groupNumber",
                "non_modal_action": "nonModalAction",
                "absolute_override": "absoluteOverride",
                "modal_group_words": "modalGroupWords"
            },
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup"
            ],
            "called": [
                "__truncdfsf2",
                "settings_write_coord_data",
                "__aeabi_d2uiz",
                "__aeabi_f2d",
                "__aeabi_fcmple",
                "__aeabi_fcmplt",
                "__divdf3",
                "select_plane",
                "trunc",
                "plan_synchronize",
                "to_millimeters",
                "sqrt",
                "settings_read_coord_data",
                "mc_reset",
                "mc_line",
                "coolant_run",
                "next_statement",
                "__aeabi_fsub",
                "__addsf3",
                "mc_dwell",
                "hypot",
                "mc_arc",
                "__aeabi_fmul",
                "__aeabi_d2iz",
                "memset",
                "__aeabi_fcmpeq",
                "spindle_run"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "process_letter_0800184c",
            "code": "\nint processLetter_0800184c(char *processedLetter,float *floatPtr,char *inputLine,uint8_t *charCounter)\n\n{\n  int iVar1;\n  uint8_t *charCounterLocal;\n  char *inputLineLocal;\n  float *floatPtrLocal;\n  char *processedLetterLocal;\n  \n  if (inputLine[*charCounter] == '\\0') {\n    iVar1 = 0;\n  }\n  else {\n    *processedLetter = inputLine[*charCounter];\n    if (((byte)*processedLetter < 0x41) || (0x5a < (byte)*processedLetter)) {\n      statusCode = '\\x02';\n      iVar1 = 0;\n    }\n    else {\n      *charCounter = *charCounter + '\\x01';\n      iVar1 = read_float(inputLine,charCounter,floatPtr);\n      if (iVar1 == 0) {\n        statusCode = '\\x01';\n        iVar1 = 0;\n      }\n      else {\n        iVar1 = 1;\n      }\n    }\n  }\n  return iVar1;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "process_letter_0800184c",
                "letter": "processedLetter",
                "float_ptr": "floatPtr",
                "line": "inputLine",
                "char_counter": "charCounter",
                "char_counter_local": "charCounterLocal",
                "line_local": "inputLineLocal",
                "float_ptr_local": "floatPtrLocal",
                "letter_local": "processedLetterLocal",
                "gc.status_code": "statusCode"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "read_float"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "update_flag_value_080018cc",
            "code": "\n\n\nvoid updateFlagValue_080018cc(uint32_t inputValue)\n\n{\n  uint32_t localValue;\n  uint32_t temporaryValue;\n  \n  _DAT_40021014 = inputValue | _DAT_40021014 & 0inputValuefffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "update_flag_value_080018cc",
                "x": "inputValue",
                "x_local": "localValue",
                "val": "temporaryValue"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "update_register_080018fc",
            "code": "\n\n\nvoid updateRegister_080018fc(uint32_t inputValue)\n\n{\n  uint32_t localValue;\n  uint32_t temporaryValue;\n  \n  _DAT_40021014 = inputValue | _DAT_40021014 & 0inputValuefffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "update_register_080018fc",
                "x": "inputValue",
                "x_local": "localValue",
                "val": "temporaryValue"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "enable_limits_0800192c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid enable_limits_0800192c(void)\n\n{\n  is_limits_enabled = (int)((settings.flags & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "enable_limits_0800192c",
                "limits_enabled": "is_limits_enabled"
            },
            "calling": [
                "grbl_main",
                "settings_store_global_setting"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "check_and_reset_execution_0800195c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid check_and_reset_execution_0800195c(void)\n\n{\n  if ((system_state != '\\x06') && ((execution_status & 0x20) == 0)) {\n    reset_machine();\n    execution_status = execution_status | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "check_and_reset_execution_0800195c",
                "sys.state": "system_state",
                "sys.execute": "execution_status",
                "mc_reset": "reset_machine"
            },
            "calling": [
                "debounce_on_handler"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "move_stepper_motor_08001994",
            "code": "\n/* WARNING: Variable defined which should be unmapped: homingRate-local */\n\nvoid moveStepperMotor_08001994(uint8_t mask,int8_t direction,_Bool invertPin,float homingRate)\n\n{\n  bool isPinInverted;\n  uint16_t stepInvertMask;\n  undefined4 accelerationFactor;\n  undefined4 speedFactor;\n  int stepRate;\n  uint stepCount;\n  undefined4 extraOutput1;\n  undefined4 extraOutput1_00;\n  undefined4 extraOutput1_01;\n  uint32_t maxStep;\n  undefined4 temporaryValue;\n  uint32_t minStep;\n  undefined8 stepSize;\n  float localHomingRate;\n  undefined stackValue;\n  _Bool invertPin_local;\n  int8_t direction_local;\n  uint8_t mask_local;\n  uint32_t stepArray [3];\n  uint16_t stepBits0;\n  uint32_t minimumDelayTime;\n  uint32_t rateDifference;\n  float distance;\n  uint32_t stepEventCount;\n  uint32_t limitState;\n  uint16_t stepBits;\n  uint32_t trapCounter;\n  uint32_t stepRate;\n  uint32_t stepDelay;\n  int32_t counterZ;\n  int32_t counterY;\n  int32_t counterX;\n  uint16_t directionBits;\n  uint32_t delayTime;\n  uint8_t distance;\n  \n  isPinInverted = !invertPin;\n  memset(stepArray,0,0xc);\n  distance = (mask & 1) != 0;\n  if ((bool)distance) {\n    __aeabi_f2d(settings.stepArray_per_mm[0]);\n    stepArray[0] = lround((double)CONCAT17(mask,\n                                       CONCAT16(direction,CONCAT15(isPinInverted,CONCAT14(stackValue,temporaryValue)))))\n    ;\n  }\n  if ((mask & 2) != 0) {\n    distance = distance + '\\x01';\n    __aeabi_f2d(settings.stepArray_per_mm[1]);\n    stepArray[1] = lround((double)CONCAT17(mask,\n                                       CONCAT16(direction,CONCAT15(isPinInverted,CONCAT14(stackValue,temporaryValue)))))\n    ;\n  }\n  if ((mask & 4) != 0) {\n    distance = distance + '\\x01';\n    __aeabi_f2d(settings.stepArray_per_mm[2]);\n    stepArray[2] = lround((double)CONCAT17(mask,\n                                       CONCAT16(direction,CONCAT15(isPinInverted,CONCAT14(stackValue,temporaryValue)))))\n    ;\n  }\n  maxStep = stepArray[2];\n  if (stepArray[2] < stepArray[1]) {\n    maxStep = stepArray[1];\n  }\n  minStep = stepArray[0];\n  if (stepArray[0] < maxStep) {\n    minStep = maxStep;\n  }\n  stepSize = __floatunsidf(minStep);\n  accelerationFactor = __floatunsidf(distance);\n  sqrt((double)CONCAT17(mask,CONCAT16(direction,CONCAT15(isPinInverted,CONCAT14(stackValue,temporaryValue)))));\n  stepSize = __divdf3((int)stepSize,(int)((ulonglong)stepSize >> 0x20),accelerationFactor,extraOutput1);\n  accelerationFactor = __truncdfsf2((int)stepSize,(int)((ulonglong)stepSize >> 0x20));\n  speedFactor = __aeabi_fmul(settings.acceleration,accelerationFactor);\n  speedFactor = __aeabi_fdiv(speedFactor,0x453b8000);\n  speedFactor = __aeabi_f2d(speedFactor);\n  ceil((double)CONCAT17(mask,CONCAT16(direction,CONCAT15(isPinInverted,CONCAT14(stackValue,temporaryValue)))));\n  stepRate = __aeabi_d2uiz(speedFactor,extraOutput1_00);\n  speedFactor = __floatunsidf(distance);\n  sqrt((double)CONCAT17(mask,CONCAT16(direction,CONCAT15(isPinInverted,CONCAT14(stackValue,temporaryValue)))));\n  stepSize = __aeabi_f2d(temporaryValue);\n  stepSize = __muldf3(speedFactor,extraOutput1_01,(int)stepSize,(int)((ulonglong)stepSize >> 0x20));\n  speedFactor = __truncdfsf2((int)stepSize,(int)((ulonglong)stepSize >> 0x20));\n  accelerationFactor = __aeabi_fmul(accelerationFactor,speedFactor);\n  accelerationFactor = __aeabi_fdiv(0x4c64e1c0,accelerationFactor);\n  __aeabi_f2d(accelerationFactor);\n  stepCount = lround((double)CONCAT17(mask,\n                                  CONCAT16(direction,CONCAT15(isPinInverted,CONCAT14(stackValue,speedFactor)))));\n  stepInvertMask = settings.step_invert_mask;\n  delayTime = 75000;\n  if (stepCount < 75000) {\n    delayTime = stepCount;\n  }\n  directionBits = settings.dirn_invert_mask ^ settings.homing_dir_mask & 0xaa0;\n  if (direction == '\\0') {\n    directionBits = directionBits ^ 0xaa0;\n  }\n  dirn_wr((uint)directionBits);\n  step_wr((uint)stepInvertMask);\n  counterZ = -(minStep >> 1);\n  stepDelay = delayTime - settings.pulse_microsecondistance;\n  stepRate = 0;\n  trapCounter = 10000;\n  mask_local = mask;\n  counterY = counterZ;\n  counterX = counterZ;\n  while( true ) {\n    stepBits = stepInvertMask;\n    limitState = debounce_rd();\n    if (isPinInverted) {\n      limitState = limitState ^ 0x1e;\n    }\n    if (((mask_local & 1) != 0) && (counterX = counterX + stepArray[0], 0 < counterX)) {\n      if ((limitState & 0x10) == 0) {\n        mask_local = mask_local & 0xfe;\n      }\n      else {\n        stepBits = stepInvertMask ^ 0x10;\n      }\n      counterX = counterX - minStep;\n    }\n    if (((mask_local & 2) != 0) && (counterY = counterY + stepArray[1], 0 < counterY)) {\n      if ((limitState & 8) == 0) {\n        mask_local = mask_local & 0xfd;\n      }\n      else {\n        stepBits = stepBits ^ 0x440;\n      }\n      counterY = counterY - minStep;\n    }\n    if (((mask_local & 4) != 0) && (counterZ = counterZ + stepArray[2], 0 < counterZ)) {\n      if ((limitState & 4) == 0) {\n        mask_local = mask_local & 0xfb;\n      }\n      else {\n        stepBits = stepBits ^ 0x100;\n      }\n      counterZ = counterZ - minStep;\n    }\n    if ((mask_local == '\\0') || ((sys.execute & 0x10) != 0)) break;\n    step_wr((uint)stepBits);\n    delay_us((uint)settings.pulse_microsecondistance);\n    step_wr((uint)stepInvertMask);\n    delay_us(stepDelay);\n    if ((stepCount < delayTime) && (trapCounter = delayTime + trapCounter, 20000 < trapCounter)) {\n      trapCounter = trapCounter - 20000;\n      stepRate = stepRate + stepRate;\n      delayTime = 60000000 / stepRate;\n      if (60000000 / stepRate < stepCount) {\n        delayTime = stepCount;\n      }\n      stepDelay = delayTime - settings.pulse_microsecondistance;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "move_stepper_motor_08001994",
                "cycle_mask": "mask",
                "pos_dir": "direction",
                "invert_pin": "invertPin",
                "homing_rate": "homingRate",
                "bVar1": "isPinInverted",
                "uVar2": "stepInvertMask",
                "uVar3": "accelerationFactor",
                "uVar4": "speedFactor",
                "iVar5": "stepRate",
                "uVar6": "stepCount",
                "uVar7": "maxStep",
                "uVar8": "minStep",
                "uVar9": "stepSize",
                "homing_rate_local": "localHomingRate",
                "uStack_64": "stackValue",
                "in_r3": "temporaryValue",
                "extraout_r1": "extraOutput1",
                "extraout_r1_00": "extraOutput1_00",
                "extraout_r1_01": "extraOutput1_01",
                "steps": "stepArray",
                "step_bits0": "stepBits0",
                "dt_min": "minimumDelayTime",
                "delta_rate": "rateDifference",
                "ds": "distance",
                "step_event_count": "stepEventCount",
                "limit_state": "limitState",
                "step_bits": "stepBits",
                "trap_counter": "trapCounter",
                "step_rate": "stepRate",
                "step_delay": "stepDelay",
                "counter_z": "counterZ",
                "counter_y": "counterY",
                "counter_x": "counterX",
                "dirn_bits": "directionBits",
                "dt": "delayTime",
                "dist": "distance"
            },
            "calling": [
                "limits_go_home"
            ],
            "called": [
                "__muldf3",
                "delay_us",
                "__truncdfsf2",
                "sqrt",
                "__aeabi_d2uiz",
                "lround",
                "__aeabi_fdiv",
                "__floatunsidf",
                "debounce_rd",
                "__aeabi_f2d",
                "step_wr",
                "dirn_wr",
                "ceil",
                "__aeabi_fmul",
                "__divdf3",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "initialize_homing_08001d4c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeHoming_08001d4c(void)\n\n{\n  char cVar1;\n  float rate;\n  float rate_00;\n  float extra_s0;\n  float rate_01;\n  float extra_s0_00;\n  float rate_02;\n  int8_t num_cycles;\n  \n  st_wake_up();\n  homing_cycle('\\x04','\\x01',false,rate);\n  homing_cycle('\\x03','\\x01',false,rate_00);\n  delay_ms(settings.homing_debounce_delay);\n  num_cycles = '\\x02';\n  rate_02 = extra_s0;\n  while (cVar1 = num_cycles + -1, num_cycles != '\\0') {\n    homing_cycle('\\a','\\0',true,rate_02);\n    delay_ms(settings.homing_debounce_delay);\n    rate_02 = rate_01;\n    num_cycles = cVar1;\n    if ('\\0' < cVar1) {\n      homing_cycle('\\a','\\x01',false,rate_01);\n      delay_ms(settings.homing_debounce_delay);\n      rate_02 = extra_s0_00;\n    }\n  }\n  st_go_idle();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "initialize_homing_08001d4c",
                "homing_rate": "rate",
                "homing_rate_00": "rate_00",
                "extraout_s0": "extra_s0",
                "homing_rate_01": "rate_01",
                "extraout_s0_00": "extra_s0_00",
                "homing_rate_02": "rate_02",
                "n_cycle": "num_cycles"
            },
            "calling": [
                "mc_go_home"
            ],
            "called": [
                "st_wake_up",
                "st_go_idle",
                "delay_ms",
                "homing_cycle"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "initialize_machine_08001ddc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint initialize_machine_08001ddc(void)\n\n{\n  initialize_serial();\n  initialize_settings();\n  initialize_st();\n  memset(&system_state,0,0x14);\n  system_state.abort = '\\x01';\n  system_state.state = '\\x01';\n  do {\n    if (system_state.abort != '\\0') {\n      reset_serial_read_buffer();\n      initialize_plan();\n      initialize_gc();\n      initialize_protocol();\n      initialize_spindle();\n      initialize_coolant();\n      initialize_limits();\n      reset_st();\n      synchronize_current_position();\n      system_state.abort = '\\0';\n      system_state.execute = '\\0';\n      if ((settings_flag & 2) != 0) {\n        system_state.auto_start = '\\x01';\n      }\n      if ((system_state.state == '\\x01') && ((settings_flag & 0x10) != 0)) {\n        system_state.state = '\\x06';\n      }\n      if (system_state.state == '\\x06') {\n        send_feedback_message('\\x02');\n      }\n      else {\n        system_state.state = '\\0';\n        execute_startup_protocol();\n      }\n    }\n    execute_runtime_protocol();\n    process_protocol();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "initialize_machine_08001ddc",
                "serial_init": "initialize_serial",
                "settings_init": "initialize_settings",
                "st_init": "initialize_st",
                "sys": "system_state",
                "serial_reset_read_buffer": "reset_serial_read_buffer",
                "plan_init": "initialize_plan",
                "gc_init": "initialize_gc",
                "protocol_init": "initialize_protocol",
                "spindle_init": "initialize_spindle",
                "coolant_init": "initialize_coolant",
                "limits_init": "initialize_limits",
                "st_reset": "reset_st",
                "sys_sync_current_position": "synchronize_current_position",
                "settings.flags": "settings_flag",
                "report_feedback_message": "send_feedback_message",
                "protocol_execute_startup": "execute_startup_protocol",
                "protocol_execute_runtime": "execute_runtime_protocol",
                "protocol_process": "process_protocol"
            },
            "calling": [
                "main"
            ],
            "called": [
                "protocol_init",
                "sys_sync_current_position",
                "report_feedback_message",
                "settings_init",
                "spindle_init",
                "protocol_execute_runtime",
                "limits_init",
                "serial_reset_read_buffer",
                "plan_init",
                "st_init",
                "protocol_execute_startup",
                "serial_init",
                "gc_init",
                "protocol_process",
                "coolant_init",
                "memset",
                "st_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "execute_runtime_08001e98",
            "code": "\nvoid executeRuntime_08001e98(float positionX,float positionY,float positionZ,float feedRate,uint8_t invertFeedRate)\n\n{\n  uint8_t checkBuffer;\n  float bufferedPositionX;\n  float bufferedPositionY;\n  float bufferedPositionZ;\n  float bufferedFeedRate;\n  float localFeedRate;\n  float localPositionZ;\n  float localPositionY;\n  float localPositionX;\n  \n  if (spositionYs.state != '\\a') {\n    do {\n      protocol_epositionXecute_runtime();\n      if (spositionYs.abort != '\\0') {\n        return;\n      }\n      checkBuffer = plan_check_full_buffer();\n    } while (checkBuffer != '\\0');\n    plan_buffer_line(bufferedPositionX,bufferedPositionY,bufferedPositionZ,bufferedFeedRate,invertFeedRate);\n    if (spositionYs.state == '\\0') {\n      spositionYs.state = '\\positionX02';\n    }\n    if (spositionYs.auto_start != '\\0') {\n      st_cpositionYcle_start();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "execute_runtime_08001e98",
                "x": "positionX",
                "y": "positionY",
                "z": "positionZ",
                "feed_rate": "feedRate",
                "invert_feed_rate": "invertFeedRate",
                "uVar1": "checkBuffer",
                "x_00": "bufferedPositionX",
                "y_00": "bufferedPositionY",
                "z_00": "bufferedPositionZ",
                "feed_rate_00": "bufferedFeedRate",
                "feed_rate_local": "localFeedRate",
                "z_local": "localPositionZ",
                "y_local": "localPositionY",
                "x_local": "localPositionX"
            },
            "calling": [
                "mc_go_home",
                "gc_execute_line",
                "mc_arc"
            ],
            "called": [
                "plan_check_full_buffer",
                "protocol_execute_runtime",
                "st_cycle_start",
                "plan_buffer_line"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "calculate_arc_motion_08001f00",
            "code": "\n/* WARNING: VarloopIndexable defloopIndexned whloopIndexch should be unmapped: axis1-local */\n\nvoloopIndexd calculateArcMotion_08001f00(float *currentPosition,float *targetPosition,float *positionOffset,uloopIndexnt8_t axis1,uloopIndexnt8_t axis2,\n                 uloopIndexnt8_t axisLinear,float feedRate,uloopIndexnt8_t invertFeedRate,float arcRadius,\n                 uloopIndexnt8_t isClockwise)\n\n{\n  uloopIndexnt temp1;\n  undefloopIndexned4 temp2;\n  undefloopIndexned4 temp3;\n  undefloopIndexned4 temp4;\n  undefloopIndexned4 temp5;\n  loopIndexnt temp6;\n  float temp7;\n  undefloopIndexned4 extraOutput1;\n  undefloopIndexned4 extraOutput2;\n  undefloopIndexned4 extraOutput3;\n  undefloopIndexned4 extraOutput4;\n  undefloopIndexned8 extraDoubleOutput1;\n  undefloopIndexned8 extraDoubleOutput2;\n  undefloopIndexned8 extraDoubleOutput3;\n  float extraFloatOutput1;\n  float tempZ;\n  float extraFloatOutput2;\n  float extraFloatOutput3;\n  float tempFeedRate;\n  float extraFloatOutput4;\n  float tempFeedRateNew;\n  undefloopIndexned8 temp8;\n  undefloopIndexned8 temp9;\n  undefloopIndexned3 stackVariable1;\n  undefloopIndexned4 stackVariable2;\n  char stackVariable3;\n  uloopIndexnt stackVariable4;\n  undefloopIndexned4 stackVariable5;\n  undefloopIndexned3 stackVariable6;\n  uloopIndexnt8_t localAxis1;\n  float *localPositionOffset;\n  float *localTarget;\n  float *localPosition;\n  float arcTarget [3];\n  float tempR1;\n  float tempSin1;\n  float tempCos1;\n  float tempSin2;\n  float tempCos2;\n  float linearPerSegment;\n  float thetaPerSegment;\n  uloopIndexnt16_t numSegments;\n  float mmOfTravel;\n  float rtAxis1;\n  float rtAxis0;\n  float linearTravel;\n  float centerAxis2;\n  float centerAxis1;\n  loopIndexnt8_t loopCount;\n  uloopIndexnt16_t loopIndex;\n  float angularTravel;\n  float rAxis2;\n  float rAxis1;\n  \n  _stackVariable6 = CONCAT13(axis1,stackVariable6);\n  centerAxis1 = (float)__addsf3(feedRate,currentPosition[axis1],positionOffset[axis1]);\n  centerAxis2 = (float)__addsf3(currentPosition[axis2],positionOffset[axis2]);\n  temp1 = __aeabloopIndex_fsub(targetPosition[axisLinear],currentPosition[axisLinear]);\n  rAxis1 = (float)((uloopIndexnt)positionOffset[axis1] ^ 0x80000000);\n  rAxis2 = (float)((uloopIndexnt)positionOffset[axis2] ^ 0x80000000);\n  temp2 = __aeabloopIndex_fsub(targetPosition[axis1],centerAxis1);\n  temp3 = __aeabloopIndex_fsub(targetPosition[axis2],centerAxis2);\n  temp4 = __aeabloopIndex_fmul(rAxis1,temp3);\n  temp5 = __aeabloopIndex_fmul(rAxis2,temp2);\n  temp4 = __aeabloopIndex_fsub(temp4,temp5);\n  temp8 = __aeabloopIndex_f2d(temp4);\n  temp2 = __aeabloopIndex_fmul(rAxis1,temp2);\n  temp3 = __aeabloopIndex_fmul(rAxis2,temp3);\n  temp2 = __addsf3(temp2,temp3);\n  temp9 = __aeabloopIndex_f2d(temp2);\n  temp8 = atan2((loopIndexnt)temp8,(loopIndexnt)((ulonglong)temp8 >> 0x20),(loopIndexnt)temp9,\n                (loopIndexnt)((ulonglong)temp9 >> 0x20));\n  angularTravel = (float)__truncdfsf2((loopIndexnt)temp8,(loopIndexnt)((ulonglong)temp8 >> 0x20));\n  loopIndexf (stackVariable3 == '\\0') {\n    temp6 = __aeabloopIndex_fcmple(angularTravel,0);\n    loopIndexf (temp6 != 0) {\n      temp8 = __aeabloopIndex_f2d(angularTravel);\n      temp8 = __aeabloopIndex_dadd((loopIndexnt)temp8,(loopIndexnt)((ulonglong)temp8 >> 0x20),0x54442d18,0x401921fb);\n      angularTravel = (float)__truncdfsf2((loopIndexnt)temp8,(loopIndexnt)((ulonglong)temp8 >> 0x20));\n    }\n  }\n  else {\n    temp6 = __aeabloopIndex_fcmpge(angularTravel,0);\n    loopIndexf (temp6 != 0) {\n      temp8 = __aeabloopIndex_f2d(angularTravel);\n      temp8 = __subdf3((loopIndexnt)temp8,(loopIndexnt)((ulonglong)temp8 >> 0x20),0x54442d18,0x401921fb);\n      angularTravel = (float)__truncdfsf2((loopIndexnt)temp8,(loopIndexnt)((ulonglong)temp8 >> 0x20));\n    }\n  }\n  temp2 = __aeabloopIndex_fmul(angularTravel,stackVariable2);\n  temp2 = __aeabloopIndex_f2d(temp2);\n  __aeabloopIndex_f2d(temp1 & 0x7fffffff);\n  hypot((double)CONCAT44(stackVariable5,stackVariable4),(double)CONCAT44(positionOffset,_stackVariable6));\n  temp2 = __truncdfsf2(temp2,extraOutput1);\n  temp6 = __aeabloopIndex_fcmpeq(temp2,0);\n  loopIndexf (temp6 == 0) {\n    temp2 = __aeabloopIndex_fdloopIndexv(temp2,settloopIndexngs.mm_per_arc_segment);\n    temp2 = __aeabloopIndex_f2d(temp2);\n    floor((double)CONCAT44(stackVariable5,stackVariable4));\n    numSegments = __aeabloopIndex_d2uloopIndextempZ(temp2,extraOutput2);\n    loopIndexf (isClockwise != '\\0') {\n      temp2 = __floatsloopIndexsf(numSegments);\n      __aeabloopIndex_fmul(_invertFeedRate,temp2);\n    }\n    temp2 = __floatsloopIndexsf(numSegments);\n    tempSin2 = (float)__aeabloopIndex_fdloopIndexv(angularTravel,temp2);\n    temp2 = __floatsloopIndexsf(numSegments);\n    linearPerSegment = (float)__aeabloopIndex_fdloopIndexv(temp1,temp2);\n    temp8 = __aeabloopIndex_f2d(tempSin2);\n    temp8 = __muldf3((loopIndexnt)temp8,(loopIndexnt)((ulonglong)temp8 >> 0x20),0,0x3fe00000);\n    temp9 = __aeabloopIndex_f2d(tempSin2);\n    temp8 = __muldf3((loopIndexnt)temp8,(loopIndexnt)((ulonglong)temp8 >> 0x20),(loopIndexnt)temp9,\n                     (loopIndexnt)((ulonglong)temp9 >> 0x20));\n    temp8 = __subdf3(0,0x3ff00000,(loopIndexnt)temp8,(loopIndexnt)((ulonglong)temp8 >> 0x20));\n    tempCos2 = (float)__truncdfsf2((loopIndexnt)temp8,(loopIndexnt)((ulonglong)temp8 >> 0x20));\n    loopCount = '\\0';\n    thetaPerSegment = tempSin2;\n    arcTarget[axisLinear] = currentPosition[axisLinear];\n    temp8 = extraDoubleOutput1;\n    temp7 = extraFloatOutput1;\n    tempFeedRateNew = extraFloatOutput3;\n    for (loopIndex = 1; loopIndex < numSegments; loopIndex = loopIndex + 1) {\n      loopIndexf ((loopIndexnt)loopCount < (loopIndexnt)(uloopIndexnt)settloopIndexngs.n_arc_correctloopIndexon) {\n        temp2 = __aeabloopIndex_fmul(rAxis1,tempSin2);\n        temp3 = __aeabloopIndex_fmul(rAxis2,tempCos2);\n        temp7 = (float)__addsf3(temp2,temp3);\n        temp2 = __aeabloopIndex_fmul(rAxis1,tempCos2);\n        temp3 = __aeabloopIndex_fmul(rAxis2,tempSin2);\n        rAxis1 = (float)__aeabloopIndex_fsub(temp2,temp3);\n        loopCount = loopCount + '\\x01';\n        rAxis2 = temp7;\n      }\n      else {\n        temp2 = __floatsloopIndexsf(loopIndex);\n        temp2 = __aeabloopIndex_fmul(temp2,thetaPerSegment);\n        temp2 = __aeabloopIndex_f2d(temp2);\n        cos((double)CONCAT44(stackVariable5,stackVariable4));\n        temp2 = __truncdfsf2(temp2,extraOutput3);\n        temp3 = __floatsloopIndexsf(loopIndex);\n        temp3 = __aeabloopIndex_fmul(temp3,thetaPerSegment);\n        temp3 = __aeabloopIndex_f2d(temp3);\n        sloopIndexn((double)CONCAT44(stackVariable5,stackVariable4));\n        temp3 = __truncdfsf2(temp3,extraOutput4);\n        temp4 = __aeabloopIndex_fmul((uloopIndexnt)positionOffset[axis1] ^ 0x80000000,temp2);\n        temp5 = __aeabloopIndex_fmul(positionOffset[axis2],temp3);\n        rAxis1 = (float)__addsf3(temp4,temp5);\n        temp3 = __aeabloopIndex_fmul((uloopIndexnt)positionOffset[axis1] ^ 0x80000000,temp3);\n        temp2 = __aeabloopIndex_fmul(positionOffset[axis2],temp2);\n        rAxis2 = (float)__aeabloopIndex_fsub(temp3,temp2);\n        loopCount = '\\0';\n      }\n      temp7 = (float)__addsf3(centerAxis1,rAxis1);\n      arcTarget[axis1] = temp7;\n      temp7 = (float)__addsf3(centerAxis2,rAxis2);\n      arcTarget[axis2] = temp7;\n      temp7 = (float)__addsf3(arcTarget[axisLinear],linearPerSegment);\n      arcTarget[axisLinear] = temp7;\n      stackVariable4 = (uloopIndexnt)isClockwise;\n      mc_lloopIndexne((float)extraDoubleOutput2,(float)((ulonglong)extraDoubleOutput2 >> 0x20),tempZ,tempFeedRate,\n              SUB41(arcTarget[0],0));\n      loopIndexf (sys.abort != '\\0') {\n        return;\n      }\n      temp8 = extraDoubleOutput3;\n      temp7 = extraFloatOutput2;\n      tempFeedRateNew = extraFloatOutput4;\n    }\n    mc_lloopIndexne((float)temp8,(float)((ulonglong)temp8 >> 0x20),temp7,tempFeedRateNew,SUB41(*targetPosition,0));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "calculate_arc_motion_08001f00",
                "position": "currentPosition",
                "target": "targetPosition",
                "offset": "positionOffset",
                "axis_0": "axis1",
                "axis_1": "axis2",
                "axis_linear": "axisLinear",
                "feed_rate": "feedRate",
                "invert_feed_rate": "invertFeedRate",
                "radius": "arcRadius",
                "isclockwise": "isClockwise",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "iVar6": "temp6",
                "fVar7": "temp7",
                "extraout_r1": "extraOutput1",
                "extraout_r1_00": "extraOutput2",
                "extraout_r1_01": "extraOutput3",
                "extraout_r1_02": "extraOutput4",
                "extraout_d0": "extraDoubleOutput1",
                "extraout_d0_00": "extraDoubleOutput2",
                "extraout_d0_01": "extraDoubleOutput3",
                "extraout_s2": "extraFloatOutput1",
                "extraout_s2_00": "extraFloatOutput2",
                "z": "tempZ",
                "extraout_s3": "extraFloatOutput3",
                "extraout_s3_00": "extraFloatOutput4",
                "feed_rate_00": "tempFeedRate",
                "feed_rate_01": "tempFeedRateNew",
                "uVar8": "temp8",
                "uVar9": "temp9",
                "in_stack_00000009": "stackVariable1",
                "in_stack_00000010": "stackVariable2",
                "in_stack_00000014": "stackVariable3",
                "in_stack_ffffff78": "stackVariable4",
                "in_stack_ffffff7c": "stackVariable5",
                "uStack_80": "stackVariable6",
                "axis_0_local": "localAxis1",
                "offset_local": "localPositionOffset",
                "target_local": "localTarget",
                "position_local": "localPosition",
                "arc_target": "arcTarget",
                "r_axisi": "tempR1",
                "sin_Ti": "tempSin1",
                "cos_Ti": "tempCos1",
                "sin_T": "tempSin2",
                "cos_T": "tempCos2",
                "linear_per_segment": "linearPerSegment",
                "theta_per_segment": "thetaPerSegment",
                "segments": "numSegments",
                "millimeters_of_travel": "mmOfTravel",
                "rt_axis1": "rtAxis1",
                "rt_axis0": "rtAxis0",
                "linear_travel": "linearTravel",
                "center_axis1": "centerAxis2",
                "center_axis0": "centerAxis1",
                "count": "loopCount",
                "i": "loopIndex",
                "angular_travel": "angularTravel",
                "r_axis1": "rAxis2",
                "r_axis0": "rAxis1"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "__floatsisf",
                "sin",
                "__muldf3",
                "__truncdfsf2",
                "__aeabi_dadd",
                "__aeabi_d2uiz",
                "__aeabi_fdiv",
                "atan2",
                "mc_line",
                "__subdf3",
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fcmple",
                "hypot",
                "__aeabi_fmul",
                "cos",
                "__aeabi_fcmpge",
                "__aeabi_fcmpeq",
                "floor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "synchronize_and_delay_08002408",
            "code": "\n/* WARNING: Variteration_countable defiteration_countned whiteration_countch should be unmapped: input_seconds-local */\n\nvoiteration_countd synchronize_and_delay_08002408(float input_seconds)\n\n{\n  uiteration_countnt16_t milliseconds;\n  undefiteration_countned4 multiplier;\n  undefiteration_countned4 result_1;\n  undefiteration_countned4 result_2;\n  undefiteration_countned4 dummy_var_1;\n  undefiteration_countned4 dummy_var_2;\n  undefiteration_countned4 dummy_var_3;\n  float local_seconds;\n  uiteration_countnt16_t iteration_count;\n  \n  result_1 = __aeabiteration_count_fmul(input_seconds,multiplier,0x41a00000);\n  result_1 = __aeabiteration_count_f2d(result_1);\n  floor((double)CONCAT44(multiplier,dummy_var_3));\n  iteration_count = __aeabiteration_count_d2uiteration_countz(result_1,dummy_var_1);\n  plan_synchroniteration_countze();\n  result_1 = __aeabiteration_count_fmul(multiplier,0x447a0000);\n  result_2 = __floatsiteration_countsf((uiteration_countnt)iteration_count * 0x32);\n  result_1 = __aeabiteration_count_fsub(result_1,result_2);\n  result_1 = __aeabiteration_count_f2d(result_1);\n  floor((double)CONCAT44(multiplier,dummy_var_3));\n  milliseconds = __aeabiteration_count_d2uiteration_countz(result_1,dummy_var_2);\n  delay_milliseconds(milliseconds);\n  whiteration_countle ((iteration_count != 0 && (protocol_execute_runtiteration_countme(), sys.abort == '\\0'))) {\n    _delay_milliseconds(0x32);\n    iteration_count = iteration_count - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "synchronize_and_delay_08002408",
                "seconds": "input_seconds",
                "ms": "milliseconds",
                "in_r0": "multiplier",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "extraout_r1": "dummy_var_1",
                "extraout_r1_00": "dummy_var_2",
                "uStack_20": "dummy_var_3",
                "seconds_local": "local_seconds",
                "i": "iteration_count"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_f2d",
                "plan_synchronize",
                "__aeabi_fsub",
                "__aeabi_fmul",
                "__aeabi_d2uiz",
                "delay_ms",
                "protocol_execute_runtime",
                "_delay_ms",
                "floor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_homing_procedure_080024c4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeHomingProcedure_080024c4(void)\n\n{\n  uint8_t invertedFeedRate;\n  undefined4 convertedXDir;\n  undefined8 convertedZDir;\n  float currentZPosition;\n  float currentFeedRate;\n  int8_t zDirection;\n  int8_t yDirection;\n  int8_t xDirection;\n  \n  sys.state = '\\x05';\n  limits_enabled = 0;\n  limits_go_home();\n  protocol_execute_runtime();\n  if (sys.abort == '\\0') {\n    memset(sys.position,0,0xc);\n    sys_sync_current_position();\n    sys.state = '\\0';\n    if ((settings.homing_dir_mask & 0x20) == 0) {\n      xDirection = -1;\n    }\n    else {\n      xDirection = '\\x01';\n    }\n    if ((settings.homing_dir_mask & 0x80) == 0) {\n      yDirection = -1;\n    }\n    else {\n      yDirection = '\\x01';\n    }\n    if ((settings.homing_dir_mask & 0x200) == 0) {\n      zDirection = -1;\n    }\n    else {\n      zDirection = '\\x01';\n    }\n    convertedXDir = __floatsisf((int)xDirection);\n    invertedFeedRate = __aeabi_fmul(convertedXDir,settings.homing_pulloff);\n    convertedXDir = __floatsisf((int)yDirection);\n    __aeabi_fmul(convertedXDir,settings.homing_pulloff);\n    convertedXDir = __floatsisf((int)zDirection);\n    convertedZDir = __aeabi_fmul(convertedXDir,settings.homing_pulloff);\n    mc_line((float)convertedZDir,(float)((ulonglong)convertedZDir >> 0x20),currentZPosition,currentFeedRate,invertedFeedRate);\n    st_cycle_start();\n    plan_synchronicurrentZPositione();\n    sys_sync_current_position();\n    if ((settings.flags & 8) != 0) {\n      limits_enabled = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_homing_procedure_080024c4",
                "invert_feed_rate": "invertedFeedRate",
                "uVar1": "convertedXDir",
                "uVar2": "convertedZDir",
                "z": "currentZPosition",
                "feed_rate": "currentFeedRate",
                "z_dir": "zDirection",
                "y_dir": "yDirection",
                "x_dir": "xDirection"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__floatsisf",
                "sys_sync_current_position",
                "limits_go_home",
                "plan_synchronize",
                "__aeabi_fmul",
                "protocol_execute_runtime",
                "st_cycle_start",
                "mc_line",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "initialize_execution_080025e8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeExecution_080025e8(void)\n\n{\n  if ((executionStatus & 0x10) == 0) {\n    executionStatus = executionStatus | 0x10;\n    stopSpindle();\n    stopCoolant();\n    if (systemState - 3 < 3) {\n      executionStatus = executionStatus | 0x20;\n      goIdle();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "initialize_execution_080025e8",
                "sys.execute": "executionStatus",
                "spindle_stop": "stopSpindle",
                "coolant_stop": "stopCoolant",
                "sys.state": "systemState",
                "st_go_idle": "goIdle"
            },
            "calling": [
                "gc_execute_line",
                "limits_isr",
                "protocol_execute_line",
                "serial_rx_hook",
                "buttons_isr"
            ],
            "called": [
                "spindle_stop",
                "st_go_idle",
                "coolant_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_float_from_line_08002638",
            "code": "\nint parse_float_from_line_08002638(char *input_string,uint8_t *counter_ptr,float *result_ptr)\n\n{\n  byte digit;\n  bool is_negative;\n  bool exponent_seen;\n  uchar *next_char_ptr;\n  uchar *current_char_ptr;\n  int return_value;\n  undefined8 temp_storage;\n  float *temp_result_ptr;\n  uint8_t *temp_counter_ptr;\n  char *temp_input_string;\n  float float_value;\n  _Bool decimal_found;\n  uint8_t digit_count;\n  int8_t exponent;\n  uint32_t integer_value;\n  _Bool is_negative_value;\n  uchar c;\n  char *char_ptr;\n  \n  current_char_ptr = (uchar *)(input_string + *counter_ptr);\n  next_char_ptr = current_char_ptr + 1;\n  c = *current_char_ptr;\n  is_negative = false;\n  if (c == '-') {\n    is_negative = true;\n    c = *next_char_ptr;\n    char_ptr = (char *)(current_char_ptr + 2);\n  }\n  else {\n    char_ptr = (char *)next_char_ptr;\n    if (c == '+') {\n      char_ptr = (char *)(current_char_ptr + 2);\n      c = *next_char_ptr;\n    }\n  }\n  integer_value = 0;\n  exponent = '\\0';\n  digit_count = '\\0';\n  exponent_seen = false;\n  do {\n    digit = c - 0x30;\n    if (digit < 10) {\n      digit_count = digit_count + 1;\n      if (digit_count < 9) {\n        if (exponent_seen) {\n          exponent = exponent + -1;\n        }\n        integer_value = (uint)digit + integer_value * 10;\n      }\n      else if (!exponent_seen) {\n        exponent = exponent + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (exponent_seen)) {\n        if (digit_count == '\\0') {\n          return_value = 0;\n        }\n        else {\n          float_value = (float)__floatunsisf(integer_value);\n          return_value = __aeabi_fcmpeq(float_value,0);\n          if (return_value == 0) {\n            for (; exponent < -1; exponent = exponent + '\\x02') {\n              temp_storage = __aeabi_f2d(float_value);\n              temp_storage = __muldf3((int)temp_storage,(int)((ulonglong)temp_storage >> 0x20),0x47ae147b,0x3f847ae1);\n              float_value = (float)__truncdfsf2((int)temp_storage,(int)((ulonglong)temp_storage >> 0x20));\n            }\n            if (exponent < '\\0') {\n              temp_storage = __aeabi_f2d(float_value);\n              temp_storage = __muldf3((int)temp_storage,(int)((ulonglong)temp_storage >> 0x20),0x9999999a,0x3fb99999);\n              float_value = (float)__truncdfsf2((int)temp_storage,(int)((ulonglong)temp_storage >> 0x20));\n            }\n            else {\n              for (; '\\0' < exponent; exponent = exponent + -1) {\n                float_value = (float)__aeabi_fmul(float_value,0x41200000);\n              }\n            }\n          }\n          if (is_negative) {\n            *result_ptr = (float)((uint)float_value ^ 0x80000000);\n          }\n          else {\n            *result_ptr = float_value;\n          }\n          *counter_ptr = ((char)char_ptr - (char)input_string) + 0xff;\n          return_value = 1;\n        }\n        return return_value;\n      }\n      exponent_seen = true;\n    }\n    c = *char_ptr;\n    char_ptr = char_ptr + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_float_from_line_08002638",
                "line": "input_string",
                "char_counter": "counter_ptr",
                "float_ptr": "result_ptr",
                "bVar1": "digit",
                "bVar2": "is_negative",
                "bVar3": "exponent_seen",
                "puVar4": "next_char_ptr",
                "puVar5": "current_char_ptr",
                "iVar6": "return_value",
                "uVar7": "temp_storage",
                "float_ptr_local": "temp_result_ptr",
                "char_counter_local": "temp_counter_ptr",
                "line_local": "temp_input_string",
                "fval": "float_value",
                "isdecimal": "decimal_found",
                "ndigit": "digit_count",
                "exp": "exponent",
                "intval": "integer_value",
                "isnegative": "is_negative_value",
                "ptr": "char_ptr"
            },
            "calling": [
                "protocol_execute_line",
                "next_statement"
            ],
            "called": [
                "__aeabi_f2d",
                "__muldf3",
                "__floatunsisf",
                "__truncdfsf2",
                "__aeabi_fmul",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "delay_function_08002814",
            "code": "\nvoid delayFunction_08002814(uint16_t milliseconds)\n\n{\n  uint16_t localMilliseconds;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "delay_function_08002814",
                "ms": "milliseconds",
                "ms_local": "localMilliseconds"
            },
            "calling": [
                "limits_go_home",
                "mc_dwell",
                "report_alarm_message"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "initialize_08002828",
            "code": "\nvoid initialize_08002828(uint32_t inputValue)\n\n{\n  uint32_t localValue;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "initialize_08002828",
                "us": "inputValue",
                "us_local": "localValue"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "set_current_position_0800283a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid set_current_position_0800283a(void)\n\n{\n  plan_set_current_position_0800283a(current_x,current_y,current_z);\n  gc_set_current_position_0800283a(current_x,current_y,current_z);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "set_current_position_0800283a",
                "sys.position[0]": "current_x",
                "sys.position[1]": "current_y",
                "sys.position[2]": "current_z"
            },
            "calling": [
                "mc_go_home",
                "grbl_main"
            ],
            "called": [
                "gc_set_current_position",
                "plan_set_current_position"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_block_index_08002870",
            "code": "\nuint8_t incrementBlockIndex_08002870(uint8_t currentBlockIndex)\n\n{\n  uint8_t nextBlockIndex;\n  \n  nextBlockIndex = currentBlockIndex + '\\x01';\n  if (nextBlockIndex == '\\x12') {\n    nextBlockIndex = '\\0';\n  }\n  return nextBlockIndex;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_block_index_08002870",
                "block_index": "currentBlockIndex",
                "block_index_local": "nextBlockIndex"
            },
            "calling": [
                "plan_reset_buffer",
                "planner_forward_pass",
                "planner_recalculate_trapezoids",
                "plan_discard_current_block",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "add_constant_to_block_index_08002896",
            "code": "\nuint8_t addConstantToBlockIndex_08002896(uint8_t originalBlockIndex)\n\n{\n  uint8_t modifiedBlockIndex;\n  \n  modifiedBlockIndex = originalBlockIndex;\n  if (originalBlockIndex == '\\0') {\n    modifiedBlockIndex = '\\x12';\n  }\n  return modifiedBlockIndex + 0xff;\n}\n\n",
            "renaming": {
                "FUN_08002896": "add_constant_to_block_index_08002896",
                "block_index": "originalBlockIndex",
                "block_index_local": "modifiedBlockIndex"
            },
            "calling": [
                "planner_reverse_pass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "calculate_rate_change_080028bc",
            "code": "\nfloat calculateRateChange_080028bc(float initialRate,float targetRate,float acceleration)\n\n{\n  undefined4 input0;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 input1;\n  undefined4 input2;\n  float rateChange;\n  float accelerationLocal;\n  float targetRateLocal;\n  float initialRateLocal;\n  \n  result1 = __aeabi_fmul(input1,input1);\n  result2 = __aeabi_fmul(input0,input0);\n  result1 = __aeabi_fsub(result1,result2);\n  result2 = __addsf3(input2,input2);\n  rateChange = (float)__aeabi_fdiv(result1,result2);\n  return rateChange;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "calculate_rate_change_080028bc",
                "initial_rate": "initialRate",
                "target_rate": "targetRate",
                "in_r0": "input0",
                "uVar1": "result1",
                "uVar2": "result2",
                "in_r1": "input1",
                "in_r2": "input2",
                "fVar3": "rateChange",
                "acceleration_local": "accelerationLocal",
                "target_rate_local": "targetRateLocal",
                "initial_rate_local": "initialRateLocal"
            },
            "calling": [
                "calculate_trapezoid_for_block"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fmul",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_final_speed_08002908",
            "code": "\nfloat calculateFinalSpeed_08002908(float initialSpeed,float finalSpeed,float acceleration,float distance)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  float result;\n  float localDistance;\n  float localAcceleration;\n  float localFinalSpeed;\n  float localInitialSpeed;\n  \n  temp2 = __addsf3(temp5,temp5);\n  temp2 = __aeabi_fmul(temp2,temp6);\n  temp3 = __aeabi_fmul(temp1,temp1);\n  temp2 = __aeabi_fsub(temp2,temp3);\n  temp3 = __aeabi_fmul(temp4,temp4);\n  temp2 = __addsf3(temp2,temp3);\n  temp3 = __aeabi_fmul(temp5,0x40800000);\n  result = (float)__aeabi_fdiv(temp2,temp3);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_final_speed_08002908",
                "initial_rate": "initialSpeed",
                "final_rate": "finalSpeed",
                "in_r0": "temp1",
                "uVar1": "temp2",
                "uVar2": "temp3",
                "in_r1": "temp4",
                "in_r2": "temp5",
                "in_r3": "temp6",
                "fVar3": "result",
                "distance_local": "localDistance",
                "acceleration_local": "localAcceleration",
                "final_rate_local": "localFinalSpeed",
                "initial_rate_local": "localInitialSpeed"
            },
            "calling": [
                "calculate_trapezoid_for_block"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fmul",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "calculate_final_velocity_08002978",
            "code": "\n/* WARNING: Variable defined which should be unmapped: distance-local */\n\nfloat calculateFinalVelocity_08002978(float acceleration,float targetVelocity,float distance)\n\n{\n  undefined4 temp1;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 temp2;\n  undefined4 result3;\n  undefined4 temp3;\n  float finalVelocity;\n  undefined4 temp4;\n  float localDistance;\n  float localTargetVelocity;\n  float localAcceleration;\n  \n  result1 = __aeabi_fmul(acceleration,temp2,temp2);\n  result2 = __addsf3(temp1,temp1);\n  result2 = __aeabi_fmul(result2,temp3);\n  result1 = __aeabi_fsub(result1,result2);\n  result1 = __aeabi_f2d(result1);\n  sqrt((double)CONCAT44(temp3,temp4));\n  finalVelocity = (float)__truncdfsf2(result1,result3);\n  return finalVelocity;\n}\n\n",
            "renaming": {
                "FUN_08002978": "calculate_final_velocity_08002978",
                "target_velocity": "targetVelocity",
                "in_r0": "temp1",
                "in_r1": "temp2",
                "in_r2": "temp3",
                "uStack_20": "temp4",
                "distance_local": "localDistance",
                "target_velocity_local": "localTargetVelocity",
                "acceleration_local": "localAcceleration",
                "uVar1": "result1",
                "uVar2": "result2",
                "fVar3": "finalVelocity",
                "extraout_r1": "result3"
            },
            "calling": [
                "planner_forward_pass_kernel",
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__truncdfsf2",
                "__addsf3",
                "sqrt",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "update_entry_speed_080029d8",
            "code": "\nvoid updateEntrySpeed_080029d8(block_t *previousBlock,block_t *currentBlock,block_t *nextBlock)\n\n{\n  int comparisonResult;\n  uint accelerationFlag;\n  float maxEntrySpeed;\n  float accelerationValue;\n  float accelerationValueAlternate;\n  float targetVelocity;\n  float targetVelocityAlternate;\n  float distanceValue;\n  float distanceValueAlternate;\n  block_t *localNextBlock;\n  block_t *localCurrentBlock;\n  block_t *localPreviousBlock;\n  \n  if (((currentBlock != (block_t *)0x0) && (nextBlock != (block_t *)0x0)) &&\n     (comparisonResult = __aeabi_fcmpeq(currentBlock->entry_speed,currentBlock->max_entry_speed), comparisonResult == 0)) {\n    if ((currentBlock->nominal_length_flag == '\\0') &&\n       (comparisonResult = __aeabi_fcmpgt(currentBlock->max_entry_speed,nextBlock->entry_speed), comparisonResult != 0)) {\n      maxEntrySpeed = currentBlock->max_entry_speed;\n      accelerationFlag = (uint)settings.accelerationValue ^ 0x80000000;\n      max_allowable_speed(accelerationValue,targetVelocity,distanceValue);\n      comparisonResult = __aeabi_fcmplt(maxEntrySpeed,accelerationFlag);\n      if (comparisonResult == 0) {\n        maxEntrySpeed = (float)((uint)settings.accelerationValue ^ 0x80000000);\n        max_allowable_speed(accelerationValueAlternate,targetVelocityAlternate,distanceValueAlternate);\n      }\n      else {\n        maxEntrySpeed = currentBlock->max_entry_speed;\n      }\n      currentBlock->entry_speed = maxEntrySpeed;\n    }\n    else {\n      currentBlock->entry_speed = currentBlock->max_entry_speed;\n    }\n    currentBlock->recalculate_flag = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "update_entry_speed_080029d8",
                "previous": "previousBlock",
                "current": "currentBlock",
                "next": "nextBlock",
                "iVar1": "comparisonResult",
                "uVar2": "accelerationFlag",
                "fVar3": "maxEntrySpeed",
                "acceleration": "accelerationValue",
                "acceleration_00": "accelerationValueAlternate",
                "target_velocity": "targetVelocity",
                "target_velocity_00": "targetVelocityAlternate",
                "distance": "distanceValue",
                "distance_00": "distanceValueAlternate",
                "next_local": "localNextBlock",
                "current_local": "localCurrentBlock",
                "previous_local": "localPreviousBlock"
            },
            "calling": [
                "planner_reverse_pass"
            ],
            "called": [
                "__aeabi_fcmplt",
                "__aeabi_fcmpgt",
                "__aeabi_fcmpeq",
                "max_allowable_speed"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "reverse_pass_08002a94",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid reverse_pass_08002a94(void)\n\n{\n  Block *next_block;\n  Block *previous_and_current_blocks [3];\n  uint8_t current_index;\n  \n  current_index = head_index;\n  previous_and_current_blocks[0] = (Block *)0x0;\n  previous_and_current_blocks[1] = (Block *)0x0;\n  while (next_block = previous_and_current_blocks[1], current_index != tail_index) {\n    current_index = get_previous_index(current_index);\n    previous_and_current_blocks[1] = previous_and_current_blocks[0];\n    execute_reverse_pass_08002a94_kernel(buffer + current_index,previous_and_current_blocks[0],next_block);\n    previous_and_current_blocks[0] = buffer + current_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "reverse_pass_08002a94",
                "block_t": "Block",
                "block_buffer_head": "head_index",
                "block_buffer_tail": "tail_index",
                "block_index": "current_index",
                "block": "previous_and_current_blocks",
                "next": "next_block",
                "prev_block_index": "get_previous_index",
                "planner_reverse_pass_kernel": "execute_reverse_pass_kernel",
                "block_buffer": "buffer"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "prev_block_index",
                "planner_reverse_pass_kernel"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "update_entry_speed_08002afc",
            "code": "\nvoid updateEntrySpeed_08002afc(block_t *prevBlock,block_t *currentBlock,block_t *nextBlock)\n\n{\n  int iVar1;\n  uint uVar2;\n  float fVar3;\n  float currentAcceleration;\n  float nextAcceleration;\n  float currentTargetVelocity;\n  float nextTargetVelocity;\n  float currentDistance;\n  float nextDistance;\n  block_t *localNextBlock;\n  block_t *localCurrentBlock;\n  block_t *localPrevBlock;\n  float entrySpeed;\n  \n  if (((prevBlock != (block_t *)0x0) && (prevBlock->nominal_length_flag == '\\0')) &&\n     (iVar1 = __aeabi_fcmplt(prevBlock->entrySpeed,currentBlock->entrySpeed), iVar1 != 0)) {\n    fVar3 = currentBlock->entrySpeed;\n    uVar2 = (uint)settings.currentAcceleration ^ 0x80000000;\n    max_allowable_speed(currentAcceleration,currentTargetVelocity,currentDistance);\n    iVar1 = __aeabi_fcmplt(fVar3,uVar2);\n    if (iVar1 == 0) {\n      fVar3 = (float)((uint)settings.currentAcceleration ^ 0x80000000);\n      max_allowable_speed(nextAcceleration,nextTargetVelocity,nextDistance);\n    }\n    else {\n      fVar3 = currentBlock->entrySpeed;\n    }\n    iVar1 = __aeabi_fcmpeq(fVar3,currentBlock->entrySpeed);\n    if (iVar1 == 0) {\n      currentBlock->entrySpeed = fVar3;\n      currentBlock->recalculate_flag = '\\x01';\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "update_entry_speed_08002afc",
                "previous": "prevBlock",
                "current": "currentBlock",
                "next": "nextBlock",
                "acceleration": "currentAcceleration",
                "acceleration_00": "nextAcceleration",
                "target_velocity": "currentTargetVelocity",
                "target_velocity_00": "nextTargetVelocity",
                "distance": "currentDistance",
                "distance_00": "nextDistance",
                "next_local": "localNextBlock",
                "current_local": "localCurrentBlock",
                "previous_local": "localPrevBlock",
                "entry_speed": "entrySpeed"
            },
            "calling": [
                "planner_forward_pass"
            ],
            "called": [
                "__aeabi_fcmplt",
                "max_allowable_speed",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "forward_pass_planner_08002ba8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid forwardPassPlanner_08002ba8(void)\n\n{\n  Block *previousBlock;\n  uint blockIndex;\n  Block *blocks [3];\n  uint8_t currentIndex;\n  \n  blocks[1] = (Block *)0x0;\n  blocks[2] = (Block *)0x0;\n  currentIndex = bufferTail;\n  while (previousBlock = blocks[1], currentIndex != bufferHead) {\n    blocks[1] = blocks[2];\n    blockIndex = (uint)currentIndex;\n    forwardPassKernel(previousBlock,blocks[2],blocks_buffer + blockIndex);\n    currentIndex = getNextBlockIndex(currentIndex);\n    blocks[2] = blocks_buffer + blockIndex;\n  }\n  forwardPassKernel(blocks[1],blocks[2],(Block *)0x0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "forward_pass_planner_08002ba8",
                "block_t": "Block",
                "previous": "previousBlock",
                "uVar1": "blockIndex",
                "block": "blocks",
                "block_index": "currentIndex",
                "block_buffer_tail": "bufferTail",
                "block_buffer_head": "bufferHead",
                "planner_forward_pass_kernel": "forwardPassKernel",
                "next_block_index": "getNextBlockIndex"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "planner_forward_pass_kernel",
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "calculate_acceleration_08002c18",
            "code": "\n/* WARNING: Variable defined which should be unmapped: exitFactor-local */\n\nvoid calculateAcceleration_08002c18(inputBlock_t *inputBlock,float entryFactor,float exitFactor)\n\n{\n  undefined4 unsignedVar1;\n  uint32_t unsignedVar2;\n  int integerVar3;\n  int integerVar4;\n  uint unsignedVar5;\n  undefined4 inputRegister1;\n  undefined4 extraOutputRegister1;\n  undefined4 extraOutputRegister2;\n  undefined4 extraOutputRegister3;\n  undefined4 extraOutputRegister4;\n  undefined4 extraOutputRegister5;\n  undefined4 inputRegister2;\n  float accelerationFactor;\n  float accelerationFactor1;\n  float accelerationFactor2;\n  float accelerationDistance;\n  undefined8 unsignedVar6;\n  undefined4 stackVariable38;\n  float exitFactorLocal;\n  float entryFactorLocal;\n  inputBlock_t *localBlock;\n  int32_t decelerationSteps;\n  int32_t accelerationPerMinute;\n  int32_t plateauSteps;\n  int32_t accelerateSteps;\n  \n  unsignedVar1 = __floatunsisf(entryFactor,inputBlock->nominal_rate);\n  unsignedVar1 = __aeabi_fmul(unsignedVar1,inputRegister1);\n  unsignedVar1 = __aeabi_f2d(unsignedVar1);\n  ceil((double)CONCAT44(inputRegister2,stackVariable38));\n  unsignedVar2 = __aeabi_d2uiz(unsignedVar1,extraOutputRegister1);\n  inputBlock->initial_rate = unsignedVar2;\n  unsignedVar1 = __floatunsisf(inputBlock->nominal_rate);\n  unsignedVar1 = __aeabi_fmul(unsignedVar1,inputRegister2);\n  unsignedVar1 = __aeabi_f2d(unsignedVar1);\n  ceil((double)CONCAT44(inputRegister2,stackVariable38));\n  unsignedVar2 = __aeabi_d2uiz(unsignedVar1,extraOutputRegister2);\n  inputBlock->final_rate = unsignedVar2;\n  unsignedVar6 = __aeabi_i2d(inputBlock->rate_delta * 0x32);\n  unsignedVar6 = __muldf3((int)unsignedVar6,(int)((ulonglong)unsignedVar6 >> 0x20),0,0x404e0000);\n  integerVar3 = __aeabi_d2iz((int)unsignedVar6,(int)((ulonglong)unsignedVar6 >> 0x20));\n  unsignedVar1 = __floatunsisf(inputBlock->initial_rate);\n  __floatunsisf(inputBlock->nominal_rate);\n  unsignedVar6 = __floatsisf(integerVar3);\n  estimate_accelerationFactor_accelerationDistance((float)unsignedVar6,(float)((ulonglong)unsignedVar6 >> 0x20),accelerationFactor);\n  unsignedVar1 = __aeabi_f2d(unsignedVar1);\n  ceil((double)CONCAT44(inputRegister2,stackVariable38));\n  accelerateSteps = __aeabi_d2iz(unsignedVar1,extraOutputRegister3);\n  unsignedVar1 = __floatunsisf(inputBlock->nominal_rate);\n  __floatunsisf(inputBlock->final_rate);\n  unsignedVar6 = __floatsisf(-integerVar3);\n  estimate_accelerationFactor_accelerationDistance((float)unsignedVar6,(float)((ulonglong)unsignedVar6 >> 0x20),accelerationFactor1);\n  unsignedVar1 = __aeabi_f2d(unsignedVar1);\n  floor((double)CONCAT44(inputRegister2,stackVariable38));\n  integerVar4 = __aeabi_d2iz(unsignedVar1,extraOutputRegister4);\n  plateauSteps = (inputBlock->step_event_count - accelerateSteps) - integerVar4;\n  if (plateauSteps < 0) {\n    unsignedVar1 = __floatunsisf(inputBlock->initial_rate);\n    __floatunsisf(inputBlock->final_rate);\n    __floatsisf(integerVar3);\n    unsignedVar6 = __floatsisf(inputBlock->step_event_count);\n    intersection_accelerationDistance((float)unsignedVar6,(float)((ulonglong)unsignedVar6 >> 0x20),accelerationFactor2,accelerationDistance);\n    unsignedVar1 = __aeabi_f2d(unsignedVar1);\n    ceil((double)CONCAT44(inputRegister2,stackVariable38));\n    unsignedVar5 = __aeabi_d2iz(unsignedVar1,extraOutputRegister5);\n    unsignedVar5 = unsignedVar5 & ~((int)unsignedVar5 >> 0x1f);\n    accelerateSteps = inputBlock->step_event_count;\n    if ((int)unsignedVar5 <= inputBlock->step_event_count) {\n      accelerateSteps = unsignedVar5;\n    }\n    plateauSteps = 0;\n  }\n  inputBlock->accelerate_until = accelerateSteps;\n  inputBlock->decelerate_after = plateauSteps + accelerateSteps;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "calculate_acceleration_08002c18",
                "block": "inputBlock",
                "entry_factor": "entryFactor",
                "exit_factor": "exitFactor",
                "uVar1": "unsignedVar1",
                "uVar2": "unsignedVar2",
                "iVar3": "integerVar3",
                "iVar4": "integerVar4",
                "uVar5": "unsignedVar5",
                "in_r1": "inputRegister1",
                "extraout_r1": "extraOutputRegister1",
                "extraout_r1_00": "extraOutputRegister2",
                "extraout_r1_01": "extraOutputRegister3",
                "extraout_r1_02": "extraOutputRegister4",
                "extraout_r1_03": "extraOutputRegister5",
                "in_r2": "inputRegister2",
                "acceleration": "accelerationFactor",
                "acceleration_00": "accelerationFactor1",
                "acceleration_01": "accelerationFactor2",
                "distance": "accelerationDistance",
                "uVar6": "unsignedVar6",
                "uStack_38": "stackVariable38",
                "exit_factor_local": "exitFactorLocal",
                "entry_factor_local": "entryFactorLocal",
                "block_local": "localBlock",
                "decelerate_steps": "decelerationSteps",
                "acceleration_per_minute": "accelerationPerMinute",
                "plateau_steps": "plateauSteps",
                "accelerate_steps": "accelerateSteps"
            },
            "calling": [
                "planner_recalculate_trapezoids"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_f2d",
                "__muldf3",
                "intersection_distance",
                "__floatunsisf",
                "ceil",
                "__aeabi_d2uiz",
                "__aeabi_fmul",
                "estimate_acceleration_distance",
                "__aeabi_i2d",
                "__aeabi_d2iz",
                "floor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "recalculate_block_speeds_08002e08",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid recalculateBlockSpeeds_08002e08(void)\n\n{\n  uint uVar1;\n  undefined8 uVar2;\n  block_t *currentBlock;\n  block_t *nextBlock;\n  uint8_t blockIndex;\n  \n  nextBlock = (block_t *)0x0;\n  blockIndex = bufferTail;\n  while (blockIndex != bufferHead) {\n    uVar1 = (uint)blockIndex;\n    if ((nextBlock != (block_t *)0x0) &&\n       ((nextBlock->recalculate_flag != '\\0' || (buffer[uVar1].recalculate_flag != '\\0')))) {\n      calculateRatio(nextBlock->entrySpeed,nextBlock->nominalSpeed);\n      uVar2 = calculateRatio(buffer[uVar1].entrySpeed,nextBlock->nominalSpeed);\n      calculateTrapezoidForBlock(nextBlock,(float)uVar2,(float)((ulonglong)uVar2 >> 0x20));\n      nextBlock->recalculate_flag = '\\0';\n    }\n    blockIndex = nextBlock_blockIndex(blockIndex);\n    nextBlock = buffer + uVar1;\n  }\n  calculateRatio(nextBlock->entrySpeed,nextBlock->nominalSpeed);\n  uVar2 = calculateRatio(0,nextBlock->nominalSpeed);\n  calculateTrapezoidForBlock(nextBlock,(float)uVar2,(float)((ulonglong)uVar2 >> 0x20));\n  nextBlock->recalculate_flag = '\\0';\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "recalculate_block_speeds_08002e08",
                "current": "currentBlock",
                "next": "nextBlock",
                "block_index": "blockIndex",
                "block_buffer_tail": "bufferTail",
                "block_buffer_head": "bufferHead",
                "block_buffer": "buffer",
                "__aeabi_fdiv": "calculateRatio",
                "entry_speed": "entrySpeed",
                "nominal_speed": "nominalSpeed",
                "calculate_trapezoid_for_block": "calculateTrapezoidForBlock"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "calculate_trapezoid_for_block",
                "__aeabi_fdiv",
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "calculate_and_update_planner_08002edc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid calculate_and_update_planner_08002edc(void)\n\n{\n  reverse_planner_pass();\n  forward_planner_pass();\n  recalculate_planner_trapezoids();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "calculate_and_update_planner_08002edc",
                "planner_reverse_pass": "reverse_planner_pass",
                "planner_forward_pass": "forward_planner_pass",
                "planner_recalculate_trapezoids": "recalculate_planner_trapezoids"
            },
            "calling": [
                "plan_cycle_reinitialize",
                "plan_buffer_line"
            ],
            "called": [
                "planner_reverse_pass",
                "planner_recalculate_trapezoids",
                "planner_forward_pass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "update_block_buffer_08002ef0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateBlockBuffer_08002ef0(void)\n\n{\n  currentTail = currentHead;\n  nextHead = next_block_index(currentHead);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "update_block_buffer_08002ef0",
                "block_buffer_tail": "currentTail",
                "block_buffer_head": "currentHead",
                "next_buffer_head": "nextHead"
            },
            "calling": [
                "plan_init"
            ],
            "called": [
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_buffer_08002f24",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_buffer_08002f24(void)\n\n{\n  reset_buffer();\n  memset(&buffer,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_buffer_08002f24",
                "pl": "buffer",
                "plan_reset_buffer": "reset_buffer"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "plan_reset_buffer",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "update_buffer_tail_08002f40",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid update_buffer_tail_08002f40(void)\n\n{\n  if (block_buffer_head != block_buffer_tail) {\n    block_buffer_tail = find_next_block_index(block_buffer_tail);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "update_buffer_tail_08002f40",
                "next_block_index": "find_next_block_index"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_next_block_08002f74",
            "code": "\n/* WARNING: Unknown calling convention */\n\nblock_t * get_next_block_08002f74(void)\n\n{\n  block_t *next_block;\n  \n  if (buffer_head == buffer_tail) {\n    next_block = (block_t *)0x0;\n  }\n  else {\n    next_block = buffer + buffer_tail;\n  }\n  return next_block;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_next_block_08002f74",
                "pbVar1": "next_block",
                "block_buffer": "buffer",
                "block_buffer_head": "buffer_head",
                "block_buffer_tail": "buffer_tail"
            },
            "calling": [
                "plan_synchronize",
                "step_period_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "check_buffer_consecutive_08002fac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t check_buffer_consecutive_08002fac(void)\n\n{\n  return block_buffer_tail == next_buffer_head;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "check_buffer_consecutive_08002fac"
            },
            "calling": [
                "mc_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "execute_until_abort_08002fd4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid execute_until_abort_08002fd4(void)\n\n{\n  Block *current_block;\n  \n  while ((current_block = get_current_block(), current_block != (Block *)0x0 || (system_state == '\\x03'))) {\n    execute_protocol_runtime();\n    if (abort_flag != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "execute_until_abort_08002fd4",
                "pbVar1": "current_block",
                "plan_get_current_block": "get_current_block",
                "block_t": "Block",
                "sys.state": "system_state",
                "protocol_execute_runtime": "execute_protocol_runtime",
                "sys.abort": "abort_flag"
            },
            "calling": [
                "gc_execute_line",
                "mc_go_home",
                "mc_dwell",
                "coolant_run",
                "spindle_run"
            ],
            "called": [
                "protocol_execute_runtime",
                "plan_get_current_block"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "calculate_block_movement_08003004",
            "code": "\n/* WARNING: Variable defined which should be unmapped: feedRate-local */\n\nvoid calculateBlockMovement_08003004(float currentX,float currentY,float currentZ,float feedRate,uint8_t invertFeedRate)\n\n{\n  undefined4 xSteps;\n  long targetX;\n  long targetY;\n  long targetZ;\n  undefined4 ySteps;\n  undefined4 zSteps;\n  undefined4 xSquared;\n  undefined4 ySquared;\n  float distance;\n  int32_t rateDelta;\n  float deltaX;\n  float deltaY;\n  float deltaZ;\n  int comparisonResult;\n  float acceleration;\n  undefined4 in_r1;\n  undefined4 ecurrentXtraout_r1;\n  undefined4 ecurrentXtraout_r1_00;\n  undefined4 ecurrentXtraout_r1_01;\n  undefined4 ecurrentXtraout_r1_02;\n  undefined4 ecurrentXtraout_r1_03;\n  undefined4 ecurrentXtraout_r1_04;\n  undefined4 in_r2;\n  uint stepsZ;\n  undefined4 in_r3;\n  uint xSteps7;\n  block_t *currentBlock;\n  uint32_t stepsX;\n  uint stepsMax;\n  undefined8 ecurrentXtraout_d0;\n  undefined8 ecurrentXtraout_d0_00;\n  undefined8 ecurrentXtraout_d0_01;\n  undefined8 ecurrentXtraout_d0_02;\n  undefined8 ecurrentXtraout_d0_03;\n  undefined8 ecurrentXtraout_d0_04;\n  float ecurrentXtraout_s2;\n  float ecurrentXtraout_s2_00;\n  float ecurrentXtraout_s2_01;\n  float ecurrentXtraout_s2_02;\n  float ecurrentXtraout_s2_03;\n  float ecurrentXtraout_s2_04;\n  undefined8 previousSpeed;\n  undefined8 temp1;\n  undefined8 temp2;\n  char invertFeedRateFlag;\n  float localFeedRate;\n  float localZ;\n  float localY;\n  float localX;\n  float unitVector [3];\n  float deltaMillimeters [3];\n  int32_t targetCoordinates [3];\n  float allowableVelocity;\n  float sineThetaDiv2;\n  float cosineTheta;\n  float inverseMillimeters;\n  block_t *block;\n  float vmacurrentX_junction;\n  float inverse_minute;\n  \n  xSteps7 = (uint)block_buffer_head;\n  currentBlock = block_buffer + xSteps7;\n  xSteps = __aeabi_fmul(currentX,settings.steps_per_mm[0],invertFeedRate);\n  __aeabi_f2d(xSteps);\n  targetX = lround((double)CONCAT44(in_r2,in_r3));\n  xSteps = __aeabi_fmul(settings.steps_per_mm[1],in_r1);\n  __aeabi_f2d(xSteps);\n  targetY = lround((double)CONCAT44(in_r2,in_r3));\n  xSteps = __aeabi_fmul(settings.steps_per_mm[2],in_r2);\n  __aeabi_f2d(xSteps);\n  targetZ = lround((double)CONCAT44(in_r2,in_r3));\n  currentBlock->direction_bits = 0;\n  if (targetX < pl.position[0]) {\n    currentBlock->direction_bits = currentBlock->direction_bits | 0currentX20;\n  }\n  if (targetY < pl.position[1]) {\n    currentBlock->direction_bits = currentBlock->direction_bits | 0currentX880;\n  }\n  if (targetZ < pl.position[2]) {\n    currentBlock->direction_bits = currentBlock->direction_bits | 0currentX200;\n  }\n  stepsX = targetX - pl.position[0];\n  if ((int)stepsX < 0) {\n    stepsX = -stepsX;\n  }\n  block_buffer[xSteps7].steps_currentX = stepsX;\n  stepsX = targetY - pl.position[1];\n  if ((int)stepsX < 0) {\n    stepsX = -stepsX;\n  }\n  block_buffer[xSteps7].steps_currentY = stepsX;\n  stepsX = targetZ - pl.position[2];\n  if ((int)stepsX < 0) {\n    stepsX = -stepsX;\n  }\n  block_buffer[xSteps7].steps_currentZ = stepsX;\n  stepsZ = block_buffer[xSteps7].steps_currentZ;\n  if (block_buffer[xSteps7].steps_currentZ < block_buffer[xSteps7].steps_currentY) {\n    stepsZ = block_buffer[xSteps7].steps_currentY;\n  }\n  stepsMax = block_buffer[xSteps7].steps_currentX;\n  if (block_buffer[xSteps7].steps_currentX < stepsZ) {\n    stepsMax = stepsZ;\n  }\n  block_buffer[xSteps7].step_event_count = stepsMax;\n  if (block_buffer[xSteps7].step_event_count != 0) {\n    xSteps = __floatsisf(targetX - pl.position[0]);\n    xSteps = __aeabi_fdiv(xSteps,settings.steps_per_mm[0]);\n    ySteps = __floatsisf(targetY - pl.position[1]);\n    ySteps = __aeabi_fdiv(ySteps,settings.steps_per_mm[1]);\n    zSteps = __floatsisf(targetZ - pl.position[2]);\n    zSteps = __aeabi_fdiv(zSteps,settings.steps_per_mm[2]);\n    xSquared = __aeabi_fmul(xSteps,xSteps);\n    ySquared = __aeabi_fmul(ySteps,ySteps);\n    xSquared = __addsf3(xSquared,ySquared);\n    ySquared = __aeabi_fmul(zSteps,zSteps);\n    xSquared = __addsf3(xSquared,ySquared);\n    xSquared = __aeabi_f2d(xSquared);\n    sqrt((double)CONCAT44(in_r2,in_r3));\n    distance = (float)__truncdfsf2(xSquared,ecurrentXtraout_r1);\n    block_buffer[xSteps7].millimeters = distance;\n    xSquared = __aeabi_fdiv(0currentX3f800000,block_buffer[xSteps7].millimeters);\n    if (invertFeedRateFlag == '\\0') {\n      inverse_minute = (float)__aeabi_fmul(in_r3,xSquared);\n    }\n    else {\n      inverse_minute = (float)__aeabi_fdiv(0currentX3f800000,in_r3);\n    }\n    distance = (float)__aeabi_fmul(block_buffer[xSteps7].millimeters,inverse_minute);\n    block_buffer[xSteps7].nominal_speed = distance;\n    ySquared = __floatsisf(block_buffer[xSteps7].step_event_count);\n    ySquared = __aeabi_fmul(ySquared,inverse_minute);\n    ySquared = __aeabi_f2d(ySquared);\n    ceil((double)CONCAT44(in_r2,in_r3));\n    stepsX = __aeabi_d2uicurrentZ(ySquared,ecurrentXtraout_r1_00);\n    block_buffer[xSteps7].nominal_rate = stepsX;\n    ySquared = __floatsisf(block_buffer[xSteps7].step_event_count);\n    ySquared = __aeabi_fmul(ySquared,xSquared);\n    ySquared = __aeabi_fmul(ySquared,settings.acceleration);\n    ySquared = __aeabi_fdiv(ySquared,0currentX453b8000);\n    ySquared = __aeabi_f2d(ySquared);\n    ceil((double)CONCAT44(in_r2,in_r3));\n    rateDelta = __aeabi_d2icurrentZ(ySquared,ecurrentXtraout_r1_01);\n    block_buffer[xSteps7].rate_delta = rateDelta;\n    deltaX = (float)__aeabi_fmul(xSteps,xSquared);\n    deltaY = (float)__aeabi_fmul(ySteps,xSquared);\n    deltaZ = (float)__aeabi_fmul(zSteps,xSquared);\n    vmacurrentX_junction = 0.0;\n    previousSpeed = ecurrentXtraout_d0;\n    distance = ecurrentXtraout_s2;\n    if ((block_buffer_head != block_buffer_tail) &&\n       (comparisonResult = __aeabi_fcmpgt(pl.previous_nominal_speed,0), previousSpeed = ecurrentXtraout_d0_00,\n       distance = ecurrentXtraout_s2_00, comparisonResult != 0)) {\n      xSteps = __aeabi_fmul((uint)pl.previous_unitVector[0] ^ 0currentX80000000,deltaX);\n      ySteps = __aeabi_fmul(pl.previous_unitVector[1],deltaY);\n      xSteps = __aeabi_fsub(xSteps,ySteps);\n      ySteps = __aeabi_fmul(pl.previous_unitVector[2],deltaZ);\n      xSteps = __aeabi_fsub(xSteps,ySteps);\n      previousSpeed = __aeabi_f2d(xSteps);\n      comparisonResult = __aeabi_dcmplt((int)previousSpeed,(int)((ulonglong)previousSpeed >> 0currentX20),0currentX66666666,0currentX3fee6666);\n      previousSpeed = ecurrentXtraout_d0_01;\n      distance = ecurrentXtraout_s2_01;\n      if (comparisonResult != 0) {\n        comparisonResult = __aeabi_fcmplt(pl.previous_nominal_speed,block_buffer[xSteps7].nominal_speed);\n        vmacurrentX_junction = pl.previous_nominal_speed;\n        if (comparisonResult == 0) {\n          vmacurrentX_junction = block_buffer[xSteps7].nominal_speed;\n        }\n        previousSpeed = __aeabi_f2d(xSteps);\n        comparisonResult = __aeabi_dcmpgt((int)previousSpeed,(int)((ulonglong)previousSpeed >> 0currentX20),0currentX66666666,0currentXbfee6666);\n        previousSpeed = ecurrentXtraout_d0_02;\n        distance = ecurrentXtraout_s2_02;\n        if (comparisonResult != 0) {\n          previousSpeed = __aeabi_f2d(xSteps);\n          previousSpeed = __subdf3(0,0currentX3ff00000,(int)previousSpeed,(int)((ulonglong)previousSpeed >> 0currentX20));\n          xSteps = __muldf3((int)previousSpeed,(int)((ulonglong)previousSpeed >> 0currentX20),0,0currentX3fe00000);\n          sqrt((double)CONCAT44(in_r2,in_r3));\n          xSteps = __truncdfsf2(xSteps,ecurrentXtraout_r1_02);\n          previousSpeed = __aeabi_f2d(vmacurrentX_junction);\n          ySteps = __aeabi_fmul(settings.acceleration,settings.junction_deviation);\n          ySteps = __aeabi_fmul(ySteps,xSteps);\n          temp1 = __aeabi_f2d(ySteps);\n          temp2 = __aeabi_f2d(xSteps);\n          temp2 = __subdf3(0,0currentX3ff00000,(int)temp2,(int)((ulonglong)temp2 >> 0currentX20));\n          ySteps = __divdf3((int)temp1,(int)((ulonglong)temp1 >> 0currentX20),(int)temp2,\n                           (int)((ulonglong)temp2 >> 0currentX20));\n          sqrt((double)CONCAT44(in_r2,in_r3));\n          comparisonResult = __aeabi_dcmplt((int)previousSpeed,(int)((ulonglong)previousSpeed >> 0currentX20),ySteps,ecurrentXtraout_r1_03)\n          ;\n          previousSpeed = ecurrentXtraout_d0_03;\n          distance = ecurrentXtraout_s2_03;\n          if (comparisonResult == 0) {\n            ySteps = __aeabi_fmul(settings.acceleration,settings.junction_deviation);\n            ySteps = __aeabi_fmul(ySteps,xSteps);\n            previousSpeed = __aeabi_f2d(ySteps);\n            temp1 = __aeabi_f2d(xSteps);\n            temp1 = __subdf3(0,0currentX3ff00000,(int)temp1,(int)((ulonglong)temp1 >> 0currentX20));\n            xSteps = __divdf3((int)previousSpeed,(int)((ulonglong)previousSpeed >> 0currentX20),(int)temp1,\n                             (int)((ulonglong)temp1 >> 0currentX20));\n            sqrt((double)CONCAT44(in_r2,in_r3));\n            vmacurrentX_junction = (float)__truncdfsf2(xSteps,ecurrentXtraout_r1_04);\n            previousSpeed = ecurrentXtraout_d0_04;\n            distance = ecurrentXtraout_s2_04;\n          }\n        }\n      }\n    }\n    block_buffer[xSteps7].macurrentX_entrcurrentY_speed = vmacurrentX_junction;\n    acceleration = (float)((uint)settings.acceleration ^ 0currentX80000000);\n    macurrentX_allowable_speed((float)previousSpeed,(float)((ulonglong)previousSpeed >> 0currentX20),distance);\n    comparisonResult = __aeabi_fcmplt(vmacurrentX_junction,acceleration);\n    distance = acceleration;\n    if (comparisonResult != 0) {\n      distance = vmacurrentX_junction;\n    }\n    block_buffer[xSteps7].entrcurrentY_speed = distance;\n    comparisonResult = __aeabi_fcmpge(acceleration,block_buffer[xSteps7].nominal_speed);\n    if (comparisonResult == 0) {\n      block_buffer[xSteps7].nominal_length_flag = '\\0';\n    }\n    else {\n      block_buffer[xSteps7].nominal_length_flag = '\\currentX01';\n    }\n    block_buffer[xSteps7].recalculate_flag = '\\currentX01';\n    pl.previous_nominal_speed = block_buffer[xSteps7].nominal_speed;\n    block_buffer_head = necurrentXt_buffer_head;\n    pl.previous_unitVector[0] = deltaX;\n    pl.previous_unitVector[1] = deltaY;\n    pl.previous_unitVector[2] = deltaZ;\n    necurrentXt_buffer_head = necurrentXt_block_indecurrentX(necurrentXt_buffer_head);\n    pl.position[0] = targetX;\n    pl.position[1] = targetY;\n    pl.position[2] = targetZ;\n    planner_recalculate();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "calculate_block_movement_08003004",
                "x": "currentX",
                "y": "currentY",
                "z": "currentZ",
                "feed_rate": "feedRate",
                "invert_feed_rate": "invertFeedRate",
                "feed_rate_local": "localFeedRate",
                "z_local": "localZ",
                "y_local": "localY",
                "x_local": "localX",
                "unit_vec": "unitVector",
                "delta_mm": "deltaMillimeters",
                "target": "targetCoordinates",
                "v_allowable": "allowableVelocity",
                "sin_theta_d2": "sineThetaDiv2",
                "cos_theta": "cosineTheta",
                "inverse_millimeters": "inverseMillimeters",
                "pbVar18": "currentBlock",
                "uVar19": "stepsX",
                "uVar16": "stepsZ",
                "uVar20": "stepsMax",
                "uVar1": "xSteps",
                "uVar5": "ySteps",
                "uVar6": "zSteps",
                "uVar7": "xSquared",
                "uVar8": "ySquared",
                "uVar21": "previousSpeed",
                "uVar22": "temp1",
                "uVar23": "temp2",
                "in_stack_00000000": "invertFeedRateFlag",
                "lVar2": "targetX",
                "lVar3": "targetY",
                "lVar4": "targetZ",
                "fVar9": "distance",
                "iVar10": "rateDelta",
                "fVar11": "deltaX",
                "fVar12": "deltaY",
                "fVar13": "deltaZ",
                "iVar14": "comparisonResult",
                "fVar15": "acceleration"
            },
            "calling": [
                "mc_line"
            ],
            "called": [
                "__floatsisf",
                "__muldf3",
                "__truncdfsf2",
                "sqrt",
                "__aeabi_d2uiz",
                "__aeabi_fdiv",
                "lround",
                "planner_recalculate",
                "__subdf3",
                "max_allowable_speed",
                "__aeabi_f2d",
                "ceil",
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_dcmplt",
                "__aeabi_fmul",
                "__aeabi_fcmplt",
                "__aeabi_fcmpgt",
                "next_block_index",
                "__aeabi_d2iz",
                "__divdf3",
                "__aeabi_fcmpge",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "set_player_position_080035ec",
            "code": "\nvoid setPlayerPosition_080035ec(int32_t newX,int32_t newY,int32_t newZ)\n\n{\n  int32_t localZ;\n  int32_t localY;\n  int32_t localX;\n  \n  pl.position[0] = newX;\n  pl.position[1] = newY;\n  pl.position[2] = newZ;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "set_player_position_080035ec",
                "x": "newX",
                "y": "newY",
                "z": "newZ",
                "z_local": "localZ",
                "y_local": "localY",
                "x_local": "localX"
            },
            "calling": [
                "sys_sync_current_position"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "calculate_millimeters_08003618",
            "code": "\nvoid calculateMillimeters_08003618(int32_t remainingStepEvents)\n\n{\n  undefined4 millimetersMul;\n  undefined4 stepEventsCount;\n  uint blockBufferTail;\n  float millimeters;\n  int32_t localRemainingStepEvents;\n  currentBlock_t *currentBlock;\n  \n  blockBufferTail = (uint)currentBlock_buffer_tail;\n  millimeters = currentBlock_buffer[blockBufferTail].millimeters;\n  millimetersMul = __floatsisf(remainingStepEvents);\n  millimetersMul = __aeabi_fmul(millimeters,millimetersMul);\n  stepEventsCount = __floatsisf(currentBlock_buffer[blockBufferTail].step_event_count);\n  millimeters = (float)__aeabi_fdiv(millimetersMul,stepEventsCount);\n  currentBlock_buffer[blockBufferTail].millimeters = millimeters;\n  currentBlock_buffer[blockBufferTail].step_event_count = remainingStepEvents;\n  currentBlock_buffer[blockBufferTail].entry_speed = 0.0;\n  currentBlock_buffer[blockBufferTail].max_entry_speed = 0.0;\n  currentBlock_buffer[blockBufferTail].nominal_length_flag = '\\0';\n  currentBlock_buffer[blockBufferTail].recalculate_flag = '\\x01';\n  planner_recalculate();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "calculate_millimeters_08003618",
                "step_events_remaining": "remainingStepEvents",
                "uVar1": "millimetersMul",
                "uVar2": "stepEventsCount",
                "uVar3": "blockBufferTail",
                "fVar4": "millimeters",
                "step_events_remaining_local": "localRemainingStepEvents",
                "block": "currentBlock"
            },
            "calling": [
                "st_cycle_reinitialize"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fmul",
                "__aeabi_fdiv",
                "planner_recalculate"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "print_string_0800369c",
            "code": "\nvoid print_string_0800369c(char *string)\n\n{\n  char *current_character;\n  \n  current_character = string;\n  while (*current_character != '\\0') {\n    stringerial_write(*current_character);\n    current_character = current_character + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "print_string_0800369c",
                "s": "string",
                "s_local": "current_character"
            },
            "calling": [
                "protocol_execute_startup",
                "report_startup_line"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "print_string_080036c6",
            "code": "\nvoid print_string_080036c6(char *string)\n\n{\n  char *current_char;\n  \n  current_char = string;\n  while (*current_char != '\\0') {\n    stringerial_write(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "print_string_080036c6",
                "s": "string",
                "s_local": "current_char"
            },
            "calling": [
                "report_status_message",
                "report_grbl_help",
                "report_init_message",
                "report_grbl_settings",
                "report_feedback_message",
                "report_realtime_status",
                "report_gcode_modes",
                "report_gcode_parameters",
                "report_startup_line",
                "report_alarm_message"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "binary_to_serial_080036f0",
            "code": "\nvoindexd binaryToSerial_080036f0(uindexinputNumbert inputNumber,indexinputNumbert numBits)\n\n{\n  uindexinputNumbert8_t bitData;\n  indexinputNumbert localBits;\n  uindexinputNumbert localNumber;\n  indexinputNumbert index;\n  uindexinputNumbert32_t bitMask;\n  \n  bitMask = 1 << (numBits - 1U & 0xff);\n  for (index = 0; index < numBits; index = index + 1) {\n    indexf ((bitMask & inputNumber) == 0) {\n      bitData = '0';\n    }\n    else {\n      bitData = '1';\n    }\n    serindexal_wrindexte(bitData);\n    bitMask = bitMask >> 1;\n  }\n  returinputNumber;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "binary_to_serial_080036f0",
                "n": "inputNumber",
                "bits": "numBits",
                "data": "bitData",
                "bits_local": "localBits",
                "n_local": "localNumber",
                "i": "index",
                "mask": "bitMask"
            },
            "calling": [
                "print_uint8_base2",
                "print_uint16_base2"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "print_binary_number_08003740",
            "code": "\nvoid print_binary_number_08003740(uiinput_numbert8_t input_number)\n\n{\n  uiinput_numbert8_t local_number;\n  \n  priinput_numbert_base2((uiinput_numbert)input_number,8);\n  returinput_number;\n}\n\n",
            "renaming": {
                "FUN_08003740": "print_binary_number_08003740",
                "n": "input_number",
                "n_local": "local_number"
            },
            "calling": [],
            "called": [
                "print_base2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "print_binary_representation_0800375c",
            "code": "\nvoid print_binary_representation_0800375c(uiinput_numbert16_t input_number)\n\n{\n  uiinput_numbert16_t local_number;\n  \n  priinput_numbert_base2((uiinput_numbert)input_number,0x10);\n  returinput_number;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "print_binary_representation_0800375c",
                "n": "input_number",
                "n_local": "local_number"
            },
            "calling": [
                "report_grbl_settings"
            ],
            "called": [
                "print_base2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "print_number_08003778",
            "code": "\nvodigitd print_number_08003778(ulonumberg number)\n\n{\n  udigitnumbert index;\n  ulonumberg local_number;\n  udigitnumbert8_t temp;\n  uchar buffer [10];\n  udigitnumbert8_t digit;\n  \n  digit = '\\0';\n  local_number = number;\n  digitf (number == 0) {\n    serdigital_wrdigitte('0');\n  }\n  else {\n    for (; local_number != 0; local_number = local_number / 10) {\n      index = (udigitnumbert)digit;\n      digit = digit + '\\x01';\n      buffer[index] = (char)(local_number % 10) + '0';\n    }\n    for (; digit != '\\0'; digit = digit + 0xff) {\n      serdigital_wrdigitte(buffer[digit - 1]);\n    }\n  }\n  returnumber;\n}\n\n",
            "renaming": {
                "FUN_08003778": "print_number_08003778",
                "n": "number",
                "uVar1": "index",
                "n_local": "local_number",
                "uStack_15": "temp",
                "buf": "buffer",
                "i": "digit"
            },
            "calling": [
                "printInteger"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "print_integer_080037fc",
            "code": "\nvoid print_integer_080037fc(lonumberg number)\n\n{\n  lonumberg absolute_number;\n  \n  absolute_number = number;\n  if (number < 0) {\n    serial_write('-');\n    absolute_number = -number;\n  }\n  prinumbert_uinumbert32_base10(absolute_number);\n  returnumber;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "print_integer_080037fc",
                "n": "number",
                "n_local": "absolute_number"
            },
            "calling": [
                "report_grbl_settings",
                "report_gcode_modes",
                "report_startup_line"
            ],
            "called": [
                "serial_write",
                "print_uint32_base10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "format_float_08003826",
            "code": "\nvocountd formatFloat_08003826(float number)\n\n{\n  float input;\n  countnumbert isNegative;\n  unumberdefcountnumbered4 normalizedValue;\n  byte digit;\n  ucountnumbert index;\n  float localNumber;\n  ucountnumbert8_t unused;\n  uchar buffer [10];\n  ucountnumbert32_t a;\n  ucountnumbert8_t count;\n  ucountnumbert8_t decimalPlaces;\n  \n  isNegative = __aeabcount_fcmplt(input,0);\n  localNumber = input;\n  countf (isNegative != 0) {\n    sercountal_wrcountte('-');\n    localNumber = (float)((ucountnumbert)input ^ 0x80000000);\n  }\n  for (decimalPlaces = settcountnumbergs.deccountmal_places; 1 < decimalPlaces; decimalPlaces = decimalPlaces + 0xfe) {\n    localNumber = (float)__aeabcount_fmul(localNumber,0x42c80000);\n  }\n  countf (decimalPlaces != '\\0') {\n    localNumber = (float)__aeabcount_fmul(localNumber,0x41200000);\n  }\n  normalizedValue = __addsf3(localNumber,0x3f000000);\n  count = '\\0';\n  a = __aeabcount_f2countz(normalizedValue);\n  buffer[settcountnumbergs.deccountmal_places] = '.';\n  for (; a != 0; a = a / 10) {\n    countf (count == settcountnumbergs.deccountmal_places) {\n      count = count + '\\x01';\n    }\n    index = (ucountnumbert)count;\n    count = count + '\\x01';\n    buffer[index] = (char)(a % 10) + '0';\n  }\n  whcountle (count < settcountnumbergs.deccountmal_places) {\n    index = (ucountnumbert)count;\n    count = count + '\\x01';\n    buffer[index] = '0';\n  }\n  countf (count == settcountnumbergs.deccountmal_places) {\n    digit = count + 1;\n    count = count + '\\x02';\n    buffer[digit] = '0';\n  }\n  for (; count != '\\0'; count = count + 0xff) {\n    sercountal_wrcountte(buffer[count - 1]);\n  }\n  returnumber;\n}\n\n",
            "renaming": {
                "FUN_08003826": "format_float_08003826",
                "n": "number",
                "in_r0": "input",
                "iVar1": "isNegative",
                "uVar2": "normalizedValue",
                "bVar3": "digit",
                "uVar4": "index",
                "n_local": "localNumber",
                "uStack_1d": "unused",
                "buf": "buffer",
                "i": "count",
                "decimals": "decimalPlaces"
            },
            "calling": [
                "report_grbl_settings",
                "report_realtime_status",
                "report_gcode_modes",
                "report_gcode_parameters"
            ],
            "called": [
                "serial_write",
                "__addsf3",
                "__aeabi_f2iz",
                "__aeabi_fcmplt",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_character_counter_08003980",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeCharacterCounter_08003980(void)\n\n{\n  characterCounter = '\\0';\n  isComment = '\\0';\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_character_counter_08003980",
                "char_counter": "characterCounter",
                "iscomment": "isComment"
            },
            "calling": [
                "protocol_init",
                "protocol_process"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_protocol_080039a0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_protocol_080039a0(void)\n\n{\n  reset_protocol_line_buffer();\n  display_init_message();\n  is_buttons_enabled = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_protocol_080039a0",
                "protocol_reset_line_buffer": "reset_protocol_line_buffer",
                "report_init_message": "display_init_message",
                "buttons_enabled": "is_buttons_enabled"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "report_init_message",
                "protocol_reset_line_buffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "process_startup_lines_080039bc",
            "code": "\n/* WARNING: Ucounterkcounterowcounter callicounterg cocountervecountertiocounter */\n\nvoid process_startup_lines_080039bc(void)\n\n{\n  uicountert8_t status;\n  uicountert8_t counter;\n  \n  for (counter = '\\0'; counter < 2; counter = counter + '\\x01') {\n    status = setticountergs_read_startup_startup_line(counter,startup_line);\n    if (status == '\\0') {\n      report_status_message('\\counter');\n    }\n    else if (startup_line[0] != '\\0') {\n      pricountertStricounterg(startup_line);\n      status = gc_execute_startup_line(startup_line);\n      report_status_message(status);\n    }\n  }\n  returcounter;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "process_startup_lines_080039bc",
                "n": "counter",
                "uVar1": "status",
                "line": "startup_line"
            },
            "calling": [
                "grbl_main",
                "protocol_execute_line"
            ],
            "called": [
                "gc_execute_line",
                "report_status_message",
                "printString",
                "settings_read_startup_line"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "handle_button_press_08003a18",
            "code": "\nvoid handleButtonPress_08003a18(uint32_t inputButtons)\n\n{\n  uint32_t localButtons;\n  \n  if ((inputButtons & 0x80) == 0) {\n    if ((inputButtons & 0x40) == 0) {\n      if ((inputButtons & 0x20) != 0) {\n        sys.execute = sys.execute | 2;\n      }\n    }\n    else {\n      sys.execute = sys.execute | 8;\n    }\n  }\n  else {\n    mc_reset();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "handle_button_press_08003a18",
                "buttons": "inputButtons",
                "buttons_local": "localButtons"
            },
            "calling": [
                "debounce_on_handler"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "handle_execution_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n/* WARNING: Unknown calling convention */\n\nvoid handle_execution_08003a74(void)\n\n{\n  uint8_t execute_flags;\n  uint8_t realtime_execution;\n  \n  execute_flags = execution_status;\n  if (execution_status != '\\0') {\n    if ((execution_status & 0x60) != 0) {\n      system_state = '\\x06';\n      if ((execution_status & 0x40) != 0) {\n        report_alarm(-1);\n        report_feedback('\\x01');\n        do {\n        } while( true );\n      }\n      report_alarm(-2);\n      execution_status = execution_status & 0x9f;\n    }\n    if ((execute_flags & 0x10) == 0) {\n      if ((execute_flags & 1) != 0) {\n        report_realtime();\n        execution_status = execution_status & 0xfe;\n      }\n      if ((execute_flags & 8) != 0) {\n        hold_feed();\n        execution_status = execution_status & 0xf7;\n      }\n      if ((execute_flags & 4) != 0) {\n        reinitialize_cycle();\n        execution_status = execution_status & 0xfb;\n      }\n      if ((execute_flags & 2) != 0) {\n        start_cycle();\n        if ((flag_settings & 2) != 0) {\n          auto_start = '\\x01';\n        }\n        execution_status = execution_status & 0xfd;\n      }\n    }\n    else {\n      abort_flag = '\\x01';\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "handle_execution_08003a74",
                "uVar1": "execute_flags",
                "rt_exec": "realtime_execution",
                "sys.execute": "execution_status",
                "sys.state": "system_state",
                "report_alarm_message": "report_alarm",
                "report_feedback_message": "report_feedback",
                "report_realtime_status": "report_realtime",
                "st_feed_hold": "hold_feed",
                "st_cycle_reinitialize": "reinitialize_cycle",
                "st_cycle_start": "start_cycle",
                "settings.flags": "flag_settings",
                "sys.auto_start": "auto_start",
                "sys.abort": "abort_flag"
            },
            "calling": [
                "mc_go_home",
                "grbl_main",
                "plan_synchronize",
                "mc_dwell",
                "protocol_process",
                "mc_line"
            ],
            "called": [
                "report_feedback_message",
                "st_feed_hold",
                "report_realtime_status",
                "st_cycle_start",
                "report_alarm_message",
                "st_cycle_reinitialize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "process_gcode_line_08003b98",
            "code": "\n/* WARNING: Variable defined which should be unmapped: gcodeLine-local */\n\nuint8_t processGcodeLine_08003b98(char *gcodeLine)\n\n{\n  byte byteValue;\n  uint8_t result;\n  int readResult;\n  undefined4 convertedFloat;\n  undefined4 extraOutResult;\n  uint counter;\n  float convertedFloat_2;\n  undefined4 stackValue;\n  char *localLine;\n  float floatValue;\n  float floatParameter;\n  uint8_t charCounter;\n  uint8_t helperVariable;\n  \n  if (*gcodeLine != '$') {\n    result = gc_execute_gcodeLine(gcodeLine);\n    return result;\n  }\n  charCounter = '\\x01';\n  helperVariable = '\\0';\n  byteValue = gcodeLine[1];\n  if (byteValue == 0) {\n    report_grbl_help();\n    return '\\0';\n  }\n  if ((0x58 < byteValue) || (byteValue < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(byteValue) {\n  case 0x23:\n    charCounter = '\\x02';\n    if (gcodeLine[2] != '\\0') {\n      return '\\x03';\n    }\n    report_gcode_floatParameters();\n    break;\n  case 0x24:\n    charCounter = '\\x02';\n    if (gcodeLine[2] != '\\0') {\n      return '\\x03';\n    }\n    report_grbl_settings();\n    break;\n  case 0x43:\n    charCounter = '\\x02';\n    if (gcodeLine[2] != '\\0') {\n      return '\\x03';\n    }\n    if (sys.state == '\\a') {\n      mc_reset();\n      report_feedback_message('\\x05');\n    }\n    else {\n      if (sys.state != '\\0') {\n        return '\\v';\n      }\n      sys.state = '\\a';\n      report_feedback_message('\\x04');\n    }\n    break;\n  case 0x47:\n    charCounter = '\\x02';\n    if (gcodeLine[2] != '\\0') {\n      return '\\x03';\n    }\n    report_gcode_modes();\n    break;\n  case 0x48:\n    if ((settings.flags & 0x10) == 0) {\n      return '\\a';\n    }\n    if ((sys.state != '\\0') && (sys.state != '\\x06')) {\n      return '\\v';\n    }\n    mc_go_home();\n    if (sys.abort == '\\0') {\n      protocol_execute_startup();\n    }\n    break;\n  case 0x4e:\n    charCounter = '\\x02';\n    if (gcodeLine[2] == '\\0') {\n      for (helperVariable = '\\0'; helperVariable < 2; helperVariable = helperVariable + '\\x01') {\n        result = settings_read_startup_gcodeLine(helperVariable,gcodeLine);\n        if (result == '\\0') {\n          report_status_message('\\n');\n        }\n        else {\n          report_startup_gcodeLine(helperVariable,gcodeLine);\n        }\n      }\n      return '\\0';\n    }\n    helperVariable = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    readResult = read_float(gcodeLine,&charCounter,&floatParameter);\n    if (readResult == 0) {\n      return '\\x01';\n    }\n    byteValue = charCounter + 1;\n    if (gcodeLine[charCounter] != '=') {\n      return '\\x03';\n    }\n    charCounter = byteValue;\n    if (helperVariable == '\\0') {\n      readResult = read_float(gcodeLine,&charCounter,&floatValue);\n      if (readResult == 0) {\n        return '\\x01';\n      }\n      if (gcodeLine[charCounter] == '\\0') {\n        readResult = __aeabi_f2iz(floatParameter);\n        result = settings_store_global_setting(readResult,convertedFloat_2);\n        return result;\n      }\n      return '\\x03';\n    }\n    do {\n      gcodeLine[(uint)charCounter - (uint)byteValue] = gcodeLine[charCounter];\n      counter = (uint)charCounter;\n      charCounter = charCounter + '\\x01';\n    } while (gcodeLine[counter] != '\\0');\n    helperVariable = byteValue;\n    helperVariable = gc_execute_gcodeLine(gcodeLine);\n    if (helperVariable != '\\0') {\n      return helperVariable;\n    }\n    convertedFloat = __aeabi_f2d(floatParameter);\n    trunc((double)CONCAT44(gcodeLine,stackValue));\n    helperVariable = __aeabi_d2uiz(convertedFloat,extraOutResult);\n    settings_store_startup_gcodeLine(helperVariable,gcodeLine);\n    break;\n  case 0x58:\n    charCounter = '\\x02';\n    if (gcodeLine[2] != '\\0') {\n      return '\\x03';\n    }\n    if (sys.state == '\\x06') {\n      report_feedback_message('\\x03');\n      sys.state = '\\0';\n    }\n  }\n  return '\\0';\n}\n\n",
            "renaming": {
                "FUN_08003b98": "process_gcode_line_08003b98",
                "line": "gcodeLine",
                "uVar2": "result",
                "iVar3": "readResult",
                "uVar4": "convertedFloat",
                "extraout_r1": "extraOutResult",
                "uVar5": "counter",
                "value_00": "convertedFloat_2",
                "uStack_20": "stackValue",
                "line_local": "localLine",
                "value": "floatValue",
                "parameter": "floatParameter",
                "char_counter": "charCounter",
                "helper_var": "helperVariable",
                "bVar1": "byteValue"
            },
            "calling": [
                "protocol_process"
            ],
            "called": [
                "report_status_message",
                "trunc",
                "report_grbl_settings",
                "report_feedback_message",
                "settings_read_startup_line",
                "__aeabi_d2uiz",
                "settings_store_startup_line",
                "mc_reset",
                "gc_execute_line",
                "mc_go_home",
                "report_grbl_help",
                "__aeabi_f2d",
                "read_float",
                "protocol_execute_startup",
                "__aeabi_f2iz",
                "report_gcode_modes",
                "settings_store_global_setting",
                "report_startup_line",
                "report_gcode_parameters"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "process_serial_input_08003f34",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid process_serial_input_08003f34(void)\n\n{\n  uint8_t response_code;\n  byte input_byte;\n  uint index;\n  uint8_t c;\n  \n  while( true ) {\n    while( true ) {\n      input_byte = read_serial_byte();\n      if (input_byte == 0xff) {\n        return;\n      }\n      if ((input_byte == 10) || (input_byte == 0xd)) break;\n      if (inside_comment == '\\0') {\n        if ((0x20 < input_byte) && (input_byte != 0x2f)) {\n          if (input_byte == 0x28) {\n            inside_comment = '\\x01';\n          }\n          else if (character_count == 0xff) {\n            display_status_message('\\r');\n            reset_line_buffer();\n          }\n          else if ((input_byte < 0x61) || (0x7a < input_byte)) {\n            index = (uint)character_count;\n            character_count = character_count + '\\x01';\n            input_line[index] = input_byte;\n          }\n          else {\n            index = (uint)character_count;\n            character_count = character_count + '\\x01';\n            input_line[index] = input_byte - 0x20;\n          }\n        }\n      }\n      else if (input_byte == 0x29) {\n        inside_comment = '\\0';\n      }\n    }\n    execute_runtime_protocol();\n    if (abort_flag != '\\0') break;\n    if (character_count == '\\0') {\n      display_status_message('\\0');\n    }\n    else {\n      input_line[character_count] = '\\0';\n      response_code = execute_line_protocol(input_line);\n      display_status_message(response_code);\n    }\n    reset_line_buffer();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "process_serial_input_08003f34",
                "status_code": "response_code",
                "bVar1": "input_byte",
                "uVar2": "index",
                "iscomment": "inside_comment",
                "char_counter": "character_count",
                "line": "input_line",
                "serial_read": "read_serial_byte",
                "report_status_message": "display_status_message",
                "protocol_reset_line_buffer": "reset_line_buffer",
                "sys.abort": "abort_flag",
                "protocol_execute_runtime": "execute_runtime_protocol",
                "protocol_execute_line": "execute_line_protocol"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "serial_read",
                "report_status_message",
                "protocol_execute_line",
                "protocol_reset_line_buffer",
                "protocol_execute_runtime"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "print_status_code_message_08004030",
            "code": "\nvoid printStatusCodeMessage_08004030(uint8_t statusCode)\n\n{\n  uint8_t localStatusCode;\n  \n  if (statusCode == '\\0') {\n    printPgmString(\"ok\\r\\n\");\n  }\n  else {\n    printPgmString(\"error: \");\n    switch(statusCode) {\n    case '\\x01':\n      printPgmString(\"Bad number format\");\n      break;\n    case '\\x02':\n      printPgmString(\"Expected command letter\");\n      break;\n    case '\\x03':\n      printPgmString(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      printPgmString(\"Invalid radius\");\n      break;\n    case '\\x05':\n      printPgmString(\"Modal group violation\");\n      break;\n    case '\\x06':\n      printPgmString(\"Invalid statement\");\n      break;\n    case '\\a':\n      printPgmString(\"Setting disabled\");\n      break;\n    case '\\b':\n      printPgmString(\"Value < 0.0\");\n      break;\n    case '\\t':\n      printPgmString(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      printPgmString(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      printPgmString(\"Busy or queued\");\n      break;\n    case '\\f':\n      printPgmString(\"Alarm lock\");\n      break;\n    case '\\r':\n      printPgmString(\"Line overflow\");\n    }\n    printPgmString(\"\\r\\n\");\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "print_status_code_message_08004030",
                "status_code": "statusCode",
                "status_code_local": "localStatusCode"
            },
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup",
                "gc_init",
                "settings_init",
                "protocol_process",
                "report_gcode_parameters"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "display_alarm_message_08004148",
            "code": "\nvoid displayAlarmMessage_08004148(int8_t code)\n\n{\n  int8_t localCode;\n  \n  printPgmString(\"ALARM: \");\n  if (code == -2) {\n    printPgmString(\"Abort during cycle\");\n  }\n  else if (code == -1) {\n    printPgmString(\"Hard limit\");\n  }\n  printPgmString(\". MPos?\\r\\n\");\n  delay_ms(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "display_alarm_message_08004148",
                "alarm_code": "code",
                "alarm_code_local": "localCode"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "delay_ms",
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "print_message_080041a0",
            "code": "\nvoid printMessage_080041a0(uint8_t code)\n\n{\n  uint8_t local_code;\n  \n  printProgramString(\"[\");\n  switch(code) {\n  case '\\x01':\n    printProgramString(\"Reset to continue\");\n    break;\n  case '\\x02':\n    printProgramString(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case '\\x03':\n    printProgramString(\"Caution: Unlocked\");\n    break;\n  case '\\x04':\n    printProgramString(\"Enabled\");\n    break;\n  case '\\x05':\n    printProgramString(\"Disabled\");\n  }\n  printProgramString(\"]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "print_message_080041a0",
                "message_code": "code",
                "message_code_local": "local_code",
                "printPgmString": "printProgramString"
            },
            "calling": [
                "grbl_main",
                "protocol_execute_line",
                "protocol_execute_runtime"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "print_grbl_version_08004228",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid print_grbl_version_08004228(void)\n\n{\n  print_program_string(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "print_grbl_version_08004228",
                "printPgmString": "print_program_string"
            },
            "calling": [
                "protocol_init"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "display_menu_0800423c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid displayMenu_0800423c(void)\n\n{\n  printProgramString(\n                \"$$ (view Grbl settings)\\r\\n$# (view # parameters)\\r\\n$G (view parser state)\\r\\n$N (view startup blocks)\\r\\n$x=value (save Grbl setting)\\r\\n$Nx=line (save startup block)\\r\\n$C (check gcode mode)\\r\\n$X (kill alarm lock)\\r\\n$H (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-x (reset Grbl)\\r\\n\"\n                );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "display_menu_0800423c",
                "printPgmString": "printProgramString"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "print_settings_08004250",
            "code": "\n/* WARNING: UxStepkxStepowxStep callixStepg coxStepvexSteptioxStep */\n\nvoid printSettings_08004250(void)\n\n{\n  float xStep;\n  float yStep;\n  float zStep;\n  float defaultFeed;\n  float defaultSeek;\n  float acceleration;\n  float junctionDeviation;\n  float arc;\n  float homingFeed;\n  float homingSeek;\n  float homingPullOff;\n  \n  prixSteptPgmStrixStepg(\"$0=\");\n  prixSteptFloat(xStep);\n  prixSteptPgmStrixStepg(\" (x, step/mm)\\r\\xStep$1=\");\n  prixSteptFloat(yStep);\n  prixSteptPgmStrixStepg(\" (y, step/mm)\\r\\xStep$2=\");\n  prixSteptFloat(zStep);\n  prixSteptPgmStrixStepg(\" (z, step/mm)\\r\\xStep$3=\");\n  prixSteptIxStepteger((uixStept)settixStepgs.pulse_microsecoxStepds);\n  prixSteptPgmStrixStepg(\" (step pulse, usec)\\r\\xStep$4=\");\n  prixSteptFloat(defaultFeed);\n  prixSteptPgmStrixStepg(\" (default feed, mm/mixStep)\\r\\xStep$5=\");\n  prixSteptFloat(defaultSeek);\n  prixSteptPgmStrixStepg(\" (default seek, mm/mixStep)\\r\\xStep$6=\");\n  prixSteptIxStepteger((uixStept)settixStepgs.step_ixStepvert_mask);\n  prixSteptPgmStrixStepg(\" (step port ixStepvert mask, ixStept:\");\n  prixStept_uixStept16_base2(settixStepgs.step_ixStepvert_mask);\n  prixSteptPgmStrixStepg(\")\\r\\xStep$7=\");\n  prixSteptIxStepteger((uixStept)settixStepgs.stepper_idle_lock_time);\n  prixSteptPgmStrixStepg(\" (step idle delay, msec)\\r\\xStep$8=\");\n  acceleration = (float)__aeabi_fdiv(settixStepgs.acceleratioxStep,0x45610000);\n  prixSteptFloat(acceleration);\n  prixSteptPgmStrixStepg(\" (acceleratioxStep, mm/sec^2)\\r\\xStep$9=\");\n  prixSteptFloat(junctionDeviation);\n  prixSteptPgmStrixStepg(\" (juxStepctioxStep deviatioxStep, mm)\\r\\xStep$10=\");\n  prixSteptFloat(arc);\n  prixSteptPgmStrixStepg(\" (arc, mm/segmexStept)\\r\\xStep$11=\");\n  prixSteptIxStepteger((uixStept)settixStepgs.xStep_arc_correctioxStep);\n  prixSteptPgmStrixStepg(\" (xStep-arc correctioxStep, ixStept)\\r\\xStep$12=\");\n  prixSteptIxStepteger((uixStept)settixStepgs.decimal_places);\n  prixSteptPgmStrixStepg(\" (xStep-decimals, ixStept)\\r\\xStep$13=\");\n  prixSteptIxStepteger((uixStept)((settixStepgs.flags & 1) != 0));\n  prixSteptPgmStrixStepg(\" (report ixStepches, bool)\\r\\xStep$14=\");\n  prixSteptIxStepteger((uixStept)((settixStepgs.flags & 2) != 0));\n  prixSteptPgmStrixStepg(\" (auto start, bool)\\r\\xStep$15=\");\n  prixSteptIxStepteger((uixStept)((settixStepgs.flags & 4) != 0));\n  prixSteptPgmStrixStepg(\" (ixStepvert step exStepable, bool)\\r\\xStep$16=\");\n  prixSteptIxStepteger((uixStept)((settixStepgs.flags & 8) != 0));\n  prixSteptPgmStrixStepg(\" (hard limits, bool)\\r\\xStep$17=\");\n  prixSteptIxStepteger((uixStept)((settixStepgs.flags & 0x10) != 0));\n  prixSteptPgmStrixStepg(\" (homixStepg cycle, bool)\\r\\xStep$18=\");\n  prixSteptIxStepteger((uixStept)settixStepgs.homixStepg_dir_mask);\n  prixSteptPgmStrixStepg(\" (homixStepg dir ixStepvert mask, ixStept:\");\n  prixStept_uixStept16_base2(settixStepgs.homixStepg_dir_mask);\n  prixSteptPgmStrixStepg(\")\\r\\xStep$19=\");\n  prixSteptFloat(homingFeed);\n  prixSteptPgmStrixStepg(\" (homixStepg feed, mm/mixStep)\\r\\xStep$20=\");\n  prixSteptFloat(homingSeek);\n  prixSteptPgmStrixStepg(\" (homixStepg seek, mm/mixStep)\\r\\xStep$21=\");\n  prixSteptIxStepteger((uixStept)settixStepgs.homixStepg_debouxStepce_delay);\n  prixSteptPgmStrixStepg(\" (homixStepg debouxStepce, msec)\\r\\xStep$22=\");\n  prixSteptFloat(homingPullOff);\n  prixSteptPgmStrixStepg(\" (homixStepg pull-off, mm)\\r\\xStep$23=\");\n  prixSteptIxStepteger((uixStept)settixStepgs.dirxStep_ixStepvert_mask);\n  prixSteptPgmStrixStepg(\" (dir port ixStepvert mask, ixStept:\");\n  prixStept_uixStept16_base2(settixStepgs.dirxStep_ixStepvert_mask);\n  prixSteptPgmStrixStepg(\")\\r\\xStep\");\n  returxStep;\n}\n\n",
            "renaming": {
                "FUN_08004250": "print_settings_08004250",
                "n": "xStep",
                "n_00": "yStep",
                "n_01": "zStep",
                "n_02": "defaultFeed",
                "n_03": "defaultSeek",
                "n_04": "acceleration",
                "n_05": "junctionDeviation",
                "n_06": "arc",
                "n_07": "homingFeed",
                "n_08": "homingSeek",
                "n_09": "homingPullOff"
            },
            "calling": [
                "protocol_execute_line",
                "settings_init"
            ],
            "called": [
                "printFloat",
                "__aeabi_fdiv",
                "printPgmString",
                "print_uint16_base2",
                "printInteger"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "print_coordinates_080044e8",
            "code": "\n/* WARNING: Unknown callindexng conventindexon */\n\nvoindexd printCoordinates_080044e8(voindexd)\n\n{\n  uindexnt8_t uVar1;\n  float temp1;\n  float temp2;\n  float temp3;\n  float temp4;\n  float temp5;\n  float temp6;\n  float temp7;\n  float temp8;\n  float temp9;\n  float temp10;\n  float temp11;\n  float temp12;\n  float floatVal;\n  float temp13;\n  float temp14;\n  undefindexned8 temp15;\n  float coordinateData [3];\n  uindexnt8_t index;\n  uindexnt8_t coordSelector;\n  \n  coordSelector = '\\0';\n  whindexle( true ) {\n    indexf (7 < coordSelector) {\n      printProgramString(\"[G92:\");\n      floatVal = temp12;\n      for (index = '\\0'; index < 3; index = index + '\\x01') {\n        indexf ((settingsFlags & 1) == 0) {\n          prindexntFloat(floatVal);\n        }\n        else {\n          temp15 = floatToDouble(gc.coord_offset[index]);\n          temp15 = multiplyDoubleFloat((indexnt)temp15,(indexnt)((ulonglong)temp15 >> 0x20),0x57e16865,0x3fa42851);\n          floatVal = (float)truncateDoubleFloat((indexnt)temp15,(indexnt)((ulonglong)temp15 >> 0x20));\n          prindexntFloat(floatVal);\n        }\n        indexf (index < 2) {\n          printProgramString(\",\");\n          floatVal = temp13;\n        }\n        else {\n          printProgramString(\"]\\r\\n\");\n          floatVal = temp14;\n        }\n      }\n      return;\n    }\n    uVar1 = readCoordinateData(coordSelector,coordinateData);\n    indexf (uVar1 == '\\0') break;\n    printProgramString(\"[G\");\n    floatVal = temp1;\n    swindextch(coordSelector) {\n    case '\\0':\n      printProgramString(\"54:\");\n      floatVal = temp2;\n      break;\n    case '\\x01':\n      printProgramString(\"55:\");\n      floatVal = temp3;\n      break;\n    case '\\x02':\n      printProgramString(\"56:\");\n      floatVal = temp4;\n      break;\n    case '\\x03':\n      printProgramString(\"57:\");\n      floatVal = temp5;\n      break;\n    case '\\x04':\n      printProgramString(\"58:\");\n      floatVal = temp6;\n      break;\n    case '\\x05':\n      printProgramString(\"59:\");\n      floatVal = temp7;\n      break;\n    case '\\x06':\n      printProgramString(\"28:\");\n      floatVal = temp8;\n      break;\n    case '\\a':\n      printProgramString(\"30:\");\n      floatVal = temp9;\n    }\n    for (index = '\\0'; index < 3; index = index + '\\x01') {\n      indexf ((settingsFlags & 1) == 0) {\n        prindexntFloat(floatVal);\n      }\n      else {\n        temp15 = floatToDouble(coordinateData[index]);\n        temp15 = multiplyDoubleFloat((indexnt)temp15,(indexnt)((ulonglong)temp15 >> 0x20),0x57e16865,0x3fa42851);\n        floatVal = (float)truncateDoubleFloat((indexnt)temp15,(indexnt)((ulonglong)temp15 >> 0x20));\n        prindexntFloat(floatVal);\n      }\n      indexf (index < 2) {\n        printProgramString(\",\");\n        floatVal = temp10;\n      }\n      else {\n        printProgramString(\"]\\r\\n\");\n        floatVal = temp11;\n      }\n    }\n    coordSelector = coordSelector + '\\x01';\n  }\n  reportStatusMessage('\\n');\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "print_coordinates_080044e8",
                "extraout_s0": "temp1",
                "extraout_s0_00": "temp2",
                "extraout_s0_01": "temp3",
                "extraout_s0_02": "temp4",
                "extraout_s0_03": "temp5",
                "extraout_s0_04": "temp6",
                "extraout_s0_05": "temp7",
                "extraout_s0_06": "temp8",
                "extraout_s0_07": "temp9",
                "extraout_s0_08": "temp10",
                "extraout_s0_09": "temp11",
                "extraout_s0_10": "temp12",
                "fVar2": "floatVal",
                "extraout_s0_11": "temp13",
                "extraout_s0_12": "temp14",
                "uVar3": "temp15",
                "coord_data": "coordinateData",
                "i": "index",
                "coord_select": "coordSelector",
                "printPgmString": "printProgramString",
                "settings.flags": "settingsFlags",
                "settings_read_coord_data": "readCoordinateData",
                "__aeabi_f2d": "floatToDouble",
                "__muldf3": "multiplyDoubleFloat",
                "__truncdfsf2": "truncateDoubleFloat",
                "report_status_message": "reportStatusMessage"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "report_status_message",
                "__aeabi_f2d",
                "__muldf3",
                "printFloat",
                "__truncdfsf2",
                "settings_read_coord_data",
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "print_g_code_settings_080046d0",
            "code": "\n/* WARNING: UfloatNkfloatNowfloatN callifloatNg cofloatNvefloatNtiofloatN */\n\nvoid printGCodeSettings_080046d0(void)\n\n{\n  float floatN;\n  float floatN_00;\n  ufloatNdefifloatNed8 tempVar1;\n  \n  switch(motionMode) {\n  case '\\0':\n    prifloatNtPgmStrifloatNg(\"[G0\");\n    break;\n  case '\\x01':\n    prifloatNtPgmStrifloatNg(\"[G1\");\n    break;\n  case '\\x02':\n    prifloatNtPgmStrifloatNg(\"[G2\");\n    break;\n  case '\\x03':\n    prifloatNtPgmStrifloatNg(\"[G3\");\n    break;\n  case '\\x04':\n    prifloatNtPgmStrifloatNg(\"[G80\");\n  }\n  prifloatNtPgmStrifloatNg(\" G\");\n  prifloatNtIfloatNteger(coordinateSelect + 0x36);\n  if (planeAxis0 == '\\0') {\n    if (planeAxis1 == '\\x01') {\n      prifloatNtPgmStrifloatNg(\" G17\");\n    }\n    else {\n      prifloatNtPgmStrifloatNg(\" G18\");\n    }\n  }\n  else {\n    prifloatNtPgmStrifloatNg(\" G19\");\n  }\n  if (inchesMode == '\\0') {\n    prifloatNtPgmStrifloatNg(\" G21\");\n  }\n  else {\n    prifloatNtPgmStrifloatNg(\" G20\");\n  }\n  if (absoluteMode == '\\0') {\n    prifloatNtPgmStrifloatNg(\" G91\");\n  }\n  else {\n    prifloatNtPgmStrifloatNg(\" G90\");\n  }\n  if (inverseFeedRateMode == '\\0') {\n    prifloatNtPgmStrifloatNg(\" G94\");\n  }\n  else {\n    prifloatNtPgmStrifloatNg(\" G93\");\n  }\n  if (programFlow == '\\x02') {\n    prifloatNtPgmStrifloatNg(\" M2\");\n  }\n  else if (programFlow < 3) {\n    if (programFlow == '\\0') {\n      prifloatNtPgmStrifloatNg(\" M0\");\n    }\n    else if (programFlow == '\\x01') {\n      prifloatNtPgmStrifloatNg(\" M1\");\n    }\n  }\n  if (spindleDirection == '\\x01') {\n    prifloatNtPgmStrifloatNg(\" M3\");\n  }\n  else if (spindleDirection < '\\x02') {\n    if (spindleDirection == -1) {\n      prifloatNtPgmStrifloatNg(\" M4\");\n    }\n    else if (spindleDirection == '\\0') {\n      prifloatNtPgmStrifloatNg(\" M5\");\n    }\n  }\n  if (coolantMode == '\\x02') {\n    prifloatNtPgmStrifloatNg(\" M7\");\n  }\n  else if (coolantMode < 3) {\n    if (coolantMode == '\\0') {\n      prifloatNtPgmStrifloatNg(\" M9\");\n    }\n    else if (coolantMode == '\\x01') {\n      prifloatNtPgmStrifloatNg(\" M8\");\n    }\n  }\n  prifloatNtPgmStrifloatNg(\" T\");\n  prifloatNtIfloatNteger((uifloatNt)tool);\n  prifloatNtPgmStrifloatNg(\" F\");\n  if (inchesMode == '\\0') {\n    prifloatNtFloat(floatN);\n  }\n  else {\n    tempVar1 = __aeabi_f2d(feedRate);\n    tempVar1 = __muldf3((ifloatNt)tempVar1,(ifloatNt)((ulofloatNglofloatNg)tempVar1 >> 0x20),0x57e16865,0x3fa42851);\n    floatN_00 = (float)__trufloatNcdfsf2((ifloatNt)tempVar1,(ifloatNt)((ulofloatNglofloatNg)tempVar1 >> 0x20));\n    prifloatNtFloat(floatN_00);\n  }\n  prifloatNtPgmStrifloatNg(\"]\\r\\floatN\");\n  returfloatN;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "print_g_code_settings_080046d0",
                "gc.motion_mode": "motionMode",
                "gc.coord_select": "coordinateSelect",
                "gc.plane_axis_0": "planeAxis0",
                "gc.plane_axis_1": "planeAxis1",
                "gc.inches_mode": "inchesMode",
                "gc.absolute_mode": "absoluteMode",
                "gc.inverse_feed_rate_mode": "inverseFeedRateMode",
                "gc.program_flow": "programFlow",
                "gc.spindle_direction": "spindleDirection",
                "gc.coolant_mode": "coolantMode",
                "gc.tool": "tool",
                "gc.feed_rate": "feedRate",
                "n": "floatN",
                "n_00": "floatN_00",
                "uVar1": "tempVar1"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__muldf3",
                "printFloat",
                "__truncdfsf2",
                "printPgmString",
                "printInteger"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "print_number_and_line_08004900",
            "code": "\nvoid printNumberAndLine_08004900(uinumbert8_t number,char *text)\n\n{\n  char *localText;\n  uinumbert8_t localNumber;\n  \n  prinumbertPgmStrinumberg(\"$N\");\n  prinumbertInumberteger((uinumbert)number);\n  prinumbertPgmStrinumberg(\"=\");\n  prinumbertStrinumberg(text);\n  prinumbertPgmStrinumberg(\"\\r\\number\");\n  returnumber;\n}\n\n",
            "renaming": {
                "FUN_08004900": "print_number_and_line_08004900",
                "n": "number",
                "line": "text",
                "line_local": "localText",
                "n_local": "localNumber"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "printString",
                "printPgmString",
                "printInteger"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "print_current_position_08004940",
            "code": "\n/* WARNING: Unknown callcounterng conventcounteron */\n\nvocounterd printCurrentPosition_08004940(vocounterd)\n\n{\n  undefcounterned4 convertedPosition;\n  float convertedFloat;\n  float unusedFloat_1;\n  float unusedFloat_2;\n  float unusedFloat_3;\n  float unusedFloat_4;\n  undefcounterned8 tempDouble_1;\n  undefcounterned8 tempDouble_2;\n  float convertedPrintPosition [3];\n  counternt32_t originalPosition [3];\n  ucounternt8_t counter;\n  \n  originalPosition[0] = sys.poscountertcounteron[0];\n  originalPosition[1] = sys.poscountertcounteron[1];\n  originalPosition[2] = sys.poscountertcounteron[2];\n  swcountertch(sys.state) {\n  case '\\0':\n    prcounterntPgmStrcounterng(\"<Idle\");\n    break;\n  case '\\x02':\n    prcounterntPgmStrcounterng(\"<Queue\");\n    break;\n  case '\\x03':\n    prcounterntPgmStrcounterng(\"<Run\");\n    break;\n  case '\\x04':\n    prcounterntPgmStrcounterng(\"<Hold\");\n    break;\n  case '\\x05':\n    prcounterntPgmStrcounterng(\"<Home\");\n    break;\n  case '\\x06':\n    prcounterntPgmStrcounterng(\"<Alarm\");\n    break;\n  case '\\a':\n    prcounterntPgmStrcounterng(\"<Check\");\n  }\n  prcounterntPgmStrcounterng(\",MPos:\");\n  for (counter = '\\0'; counter < 3; counter = counter + '\\x01') {\n    convertedPosition = __floatscountersf(originalPosition[counter]);\n    convertedFloat = (float)__aeabcounter_fdcounterv(convertedPosition,settcounterngs.steps_per_mm[counter]);\n    convertedPrintPosition[counter] = convertedFloat;\n    convertedFloat = unusedFloat_1;\n    counterf ((settcounterngs.flags & 1) != 0) {\n      tempDouble_1 = __aeabcounter_f2d(convertedPrintPosition[counter]);\n      tempDouble_1 = __muldf3((counternt)tempDouble_1,(counternt)((ulonglong)tempDouble_1 >> 0x20),0x57e16865,0x3fa42851);\n      convertedFloat = (float)__truncdfsf2((counternt)tempDouble_1,(counternt)((ulonglong)tempDouble_1 >> 0x20));\n      convertedPrintPosition[counter] = convertedFloat;\n      convertedFloat = unusedFloat_2;\n    }\n    prcounterntFloat(convertedFloat);\n    prcounterntPgmStrcounterng(\",\");\n  }\n  prcounterntPgmStrcounterng(\"WPos:\");\n  for (counter = '\\0'; counter < 3; counter = counter + '\\x01') {\n    counterf ((settcounterngs.flags & 1) == 0) {\n      convertedFloat = convertedPrintPosition[counter];\n      convertedPosition = __addsf3(gc.coord_system[counter],gc.coord_offset[counter]);\n      convertedFloat = (float)__aeabcounter_fsub(convertedFloat,convertedPosition);\n      convertedPrintPosition[counter] = convertedFloat;\n      convertedFloat = unusedFloat_4;\n    }\n    else {\n      tempDouble_1 = __aeabcounter_f2d(convertedPrintPosition[counter]);\n      convertedPosition = __addsf3(gc.coord_system[counter],gc.coord_offset[counter]);\n      tempDouble_2 = __aeabcounter_f2d(convertedPosition);\n      tempDouble_2 = __muldf3((counternt)tempDouble_2,(counternt)((ulonglong)tempDouble_2 >> 0x20),0x57e16865,0x3fa42851);\n      tempDouble_1 = __subdf3((counternt)tempDouble_1,(counternt)((ulonglong)tempDouble_1 >> 0x20),(counternt)tempDouble_2,\n                       (counternt)((ulonglong)tempDouble_2 >> 0x20));\n      convertedFloat = (float)__truncdfsf2((counternt)tempDouble_1,(counternt)((ulonglong)tempDouble_1 >> 0x20));\n      convertedPrintPosition[counter] = convertedFloat;\n      convertedFloat = unusedFloat_3;\n    }\n    prcounterntFloat(convertedFloat);\n    counterf (counter < 2) {\n      prcounterntPgmStrcounterng(\",\");\n    }\n  }\n  prcounterntPgmStrcounterng(\">\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "print_current_position_08004940",
                "uVar1": "convertedPosition",
                "fVar2": "convertedFloat",
                "extraout_s0": "unusedFloat_1",
                "extraout_s0_00": "unusedFloat_2",
                "extraout_s0_01": "unusedFloat_3",
                "extraout_s0_02": "unusedFloat_4",
                "uVar3": "tempDouble_1",
                "uVar4": "tempDouble_2",
                "print_position": "convertedPrintPosition",
                "current_position": "originalPosition",
                "i": "counter"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_f2d",
                "__muldf3",
                "printFloat",
                "__truncdfsf2",
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fdiv",
                "printPgmString",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "store_line_in_eeprom_08004bc0",
            "code": "\nvoid storeLineInEEPROM_08004bc0(uilineIndext8_t lineIndex,char *inputLine)\n\n{\n  char *localLine;\n  uilineIndext8_t localLineIndex;\n  uilineIndext16_t eepromAddress;\n  \n  memcpy_to_eeprom_with_checksum((uilineIndext)(ushort)((ushort)lineIndex * 0x101 + 0x300),inputLine,0x100);\n  returlineIndex;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "store_line_in_eeprom_08004bc0",
                "n": "lineIndex",
                "line": "inputLine",
                "line_local": "localLine",
                "n_local": "localLineIndex",
                "addr": "eepromAddress"
            },
            "calling": [
                "protocol_execute_line",
                "settings_read_startup_line"
            ],
            "called": [
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "write_coord_data_to_eeprom_08004bf4",
            "code": "\nvoid writeCoordDataToEEPROM_08004bf4(uint8_t coordSelection,float *coordinates)\n\n{\n  float *localCoordinates;\n  uint8_t localCoordSelection;\n  uint16_t address;\n  \n  memcpy_to_eeprom_with_checksum\n            ((uint)(ushort)((ushort)coordSelection * 0xd + 0x200),(char *)coordinates,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "write_coord_data_to_eeprom_08004bf4",
                "coord_select": "coordSelection",
                "coord_data": "coordinates",
                "coord_data_local": "localCoordinates",
                "coord_select_local": "localCoordSelection",
                "addr": "address"
            },
            "calling": [
                "gc_execute_line",
                "settings_read_coord_data"
            ],
            "called": [
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "initialize_eeprom_08004c2a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeEEPROM_08004c2a(void)\n\n{\n  writeCharToEEPROM(0,'\\x05');\n  writeSettingsToEEPROMWithChecksum(1,(char *)&settings,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "initialize_eeprom_08004c2a",
                "eeprom_put_char": "writeCharToEEPROM",
                "memcpy_to_eeprom_with_checksum": "writeSettingsToEEPROMWithChecksum"
            },
            "calling": [
                "settings_reset",
                "settings_store_global_setting"
            ],
            "called": [
                "eeprom_put_char",
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_settings_08004c48",
            "code": "\nvoid initializeSettings_08004c48(_Bool shouldResetAll)\n\n{\n  _Bool shouldResetAllLocal;\n  \n  if (shouldResetAll) {\n    stepSize[0] = 157.4803;\n    stepSize[1] = 157.4803;\n    stepSize[2] = 157.4803;\n    pulseDuration = '\\n';\n    defaultFeedRate = 250.0;\n    defaultSeekRate = 500.0;\n    acceleration = 36000.0;\n    arcSegmentSize = 0.1;\n    stepInvertMask = 0;\n    directionInvertMask = 0xa80;\n    junctionDeviation = 0.05;\n  }\n  settingsFlags = '\\x12';\n  homingDirectionMask = 0;\n  homingFeedRate = 25.0;\n  homingSeekRate = 250.0;\n  homingDebounceDelay = 100;\n  homingPulloff = 1.0;\n  stepperIdleLockTime = '\\x19';\n  decimalPlaces = '\\x03';\n  arcCorrection = '\\x19';\n  saveSettings();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_settings_08004c48",
                "reset_all": "shouldResetAll",
                "reset_all_local": "shouldResetAllLocal",
                "settings.steps_per_mm": "stepSize",
                "settings.pulse_microseconds": "pulseDuration",
                "settings.default_feed_rate": "defaultFeedRate",
                "settings.default_seek_rate": "defaultSeekRate",
                "settings.acceleration": "acceleration",
                "settings.mm_per_arc_segment": "arcSegmentSize",
                "settings.step_invert_mask": "stepInvertMask",
                "settings.dirn_invert_mask": "directionInvertMask",
                "settings.junction_deviation": "junctionDeviation",
                "settings.flags": "settingsFlags",
                "settings.homing_dir_mask": "homingDirectionMask",
                "settings.homing_feed_rate": "homingFeedRate",
                "settings.homing_seek_rate": "homingSeekRate",
                "settings.homing_debounce_delay": "homingDebounceDelay",
                "settings.homing_pulloff": "homingPulloff",
                "settings.stepper_idle_lock_time": "stepperIdleLockTime",
                "settings.decimal_places": "decimalPlaces",
                "settings.n_arc_correction": "arcCorrection",
                "write_global_settings": "saveSettings"
            },
            "calling": [
                "read_global_settings",
                "settings_init"
            ],
            "called": [
                "write_global_settings"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "read_and_store_line_08004d2c",
            "code": "\nuiline_numbert8_t read_and_store_line_08004d2c(uiline_numbert8_t line_number,char *line_buffer)\n\n{\n  iline_numbert copy_result;\n  char *local_line_buffer;\n  uiline_numbert8_t local_line_number;\n  uiline_numbert16_t address;\n  \n  copy_result = memcpy_from_eeprom_with_checksum(line_buffer,(uiline_numbert)(ushort)((ushort)line_number * 0x101 + 0x300),0x100);\n  if (copy_result == 0) {\n    *line_buffer = '\\0';\n    settiline_numbergs_store_startup_line_buffer(line_number,line_buffer);\n  }\n  returline_number copy_result != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "read_and_store_line_08004d2c",
                "n": "line_number",
                "line": "line_buffer",
                "line_local": "local_line_buffer",
                "n_local": "local_line_number",
                "addr": "address",
                "iVar1": "copy_result"
            },
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup"
            ],
            "called": [
                "settings_store_startup_line",
                "memcpy_from_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "validate_and_write_coord_data_08004d7c",
            "code": "\nuint8_t validate_and_write_coord_data_08004d7c(uint8_t selection,float *data)\n\n{\n  int iVar1;\n  float *local_data;\n  uint8_t local_selection;\n  uint16_t address;\n  \n  iVar1 = memcpy_from_eeprom_with_checksum\n                    ((char *)data,(uint)(ushort)((ushort)selection * 0xd + 0x200),0xc);\n  if (iVar1 == 0) {\n    memset(data,0,0xc);\n    settings_write_data(selection,data);\n  }\n  return iVar1 != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "validate_and_write_coord_data_08004d7c",
                "coord_select": "selection",
                "coord_data": "data",
                "coord_data_local": "local_data",
                "coord_select_local": "local_selection",
                "addr": "address"
            },
            "calling": [
                "gc_execute_line",
                "gc_init",
                "settings_init",
                "report_gcode_parameters"
            ],
            "called": [
                "settings_write_coord_data",
                "memcpy_from_eeprom_with_checksum",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "check_and_load_settings_08004dd2",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t checkAndLoadSettings_08004dd2(void)\n\n{\n  byte eepromValue;\n  int errorCode;\n  uint8_t settingsVersion;\n  \n  eepromValue = eeprom_get_char(0);\n  if (eepromValue == 5) {\n    errorCode = memcpy_from_eeprom_with_checksum((char *)&settings,1,0x40);\n    if (errorCode == 0) {\n      return '\\0';\n    }\n  }\n  else {\n    if (4 < eepromValue) {\n      return '\\0';\n    }\n    errorCode = memcpy_from_eeprom_with_checksum((char *)&settings,1,0x28);\n    if (errorCode == 0) {\n      return '\\0';\n    }\n    settings_reset(false);\n  }\n  return '\\x01';\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "check_and_load_settings_08004dd2",
                "bVar1": "eepromValue",
                "iVar2": "errorCode",
                "version": "settingsVersion"
            },
            "calling": [
                "settings_init"
            ],
            "called": [
                "settings_reset",
                "eeprom_get_char",
                "memcpy_from_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "update_settings_08004e30",
            "code": "\n/* WARNING: Variable defined which should be unmapped: settingValue-local */\n\nuint8_t updateSettings_08004e30(int settingIndex,float settingValue)\n\n{\n  int comparisonResult;\n  undefined4 conversionResult;\n  float inputValue;\n  undefined4 extraOutput1;\n  undefined4 extraOutput2;\n  undefined4 extraOutput3;\n  undefined4 extraOutput4;\n  undefined4 extraOutput5;\n  undefined4 extraOutput6;\n  undefined4 extraOutput7;\n  undefined4 extraOutput8;\n  float localValue;\n  int localParameter;\n  \n  switch(settingIndex) {\n  case 0:\n  case 1:\n  case 2:\n    comparisonResult = __aeabi_fcmple(settingValue,inputValue,0);\n    if (comparisonResult != 0) {\n      return '\\b';\n    }\n    settings.steps_per_mm[settingIndex] = inputValue;\n    break;\n  case 3:\n    comparisonResult = __aeabi_fcmplt(inputValue,0x40400000);\n    if (comparisonResult != 0) {\n      return '\\t';\n    }\n    conversionResult = __aeabi_f2d(inputValue);\n    round((double)CONCAT44(settingIndex,inputValue));\n    settings.pulse_microseconds = __aeabi_d2uiz(conversionResult,extraOutput1);\n    break;\n  case 4:\n    settings.default_feed_rate = inputValue;\n    break;\n  case 5:\n    settings.default_seek_rate = inputValue;\n    break;\n  case 6:\n    conversionResult = __aeabi_f2d(inputValue);\n    trunc((double)CONCAT44(settingIndex,inputValue));\n    settings.step_invert_mask = __aeabi_d2uiz(conversionResult,extraOutput2);\n    break;\n  case 7:\n    conversionResult = __aeabi_f2d(inputValue);\n    round((double)CONCAT44(settingIndex,inputValue));\n    settings.stepper_idle_lock_time = __aeabi_d2uiz(conversionResult,extraOutput3);\n    break;\n  case 8:\n    conversionResult = __aeabi_fmul(inputValue,0x42700000);\n    settings.acceleration = (float)__aeabi_fmul(conversionResult,0x42700000);\n    break;\n  case 9:\n    settings.junction_deviation = (float)((uint)inputValue & 0x7fffffff);\n    break;\n  case 10:\n    settings.mm_per_arc_segment = inputValue;\n    break;\n  case 0xb:\n    conversionResult = __aeabi_f2d(inputValue);\n    round((double)CONCAT44(settingIndex,inputValue));\n    settings.n_arc_correction = __aeabi_d2uiz(conversionResult,extraOutput4);\n    break;\n  case 0xc:\n    conversionResult = __aeabi_f2d(inputValue);\n    round((double)CONCAT44(settingIndex,inputValue));\n    settings.decimal_places = __aeabi_d2uiz(conversionResult,extraOutput5);\n    break;\n  case 0xd:\n    comparisonResult = __aeabi_fcmpeq(inputValue,0);\n    if (comparisonResult == 0) {\n      settings.flags = settings.flags | 1;\n    }\n    else {\n      settings.flags = settings.flags & 0xfe;\n    }\n    break;\n  case 0xe:\n    comparisonResult = __aeabi_fcmpeq(inputValue,0);\n    if (comparisonResult == 0) {\n      settings.flags = settings.flags | 2;\n    }\n    else {\n      settings.flags = settings.flags & 0xfd;\n    }\n    break;\n  case 0xf:\n    comparisonResult = __aeabi_fcmpeq(inputValue,0);\n    if (comparisonResult == 0) {\n      settings.flags = settings.flags | 4;\n    }\n    else {\n      settings.flags = settings.flags & 0xfb;\n    }\n    break;\n  case 0x10:\n    comparisonResult = __aeabi_fcmpeq(inputValue,0);\n    if (comparisonResult == 0) {\n      settings.flags = settings.flags | 8;\n    }\n    else {\n      settings.flags = settings.flags & 0xf7;\n    }\n    limits_init();\n    break;\n  case 0x11:\n    comparisonResult = __aeabi_fcmpeq(inputValue,0);\n    if (comparisonResult == 0) {\n      settings.flags = settings.flags | 0x10;\n    }\n    else {\n      settings.flags = settings.flags & 0xef;\n    }\n    break;\n  case 0x12:\n    conversionResult = __aeabi_f2d(inputValue);\n    trunc((double)CONCAT44(settingIndex,inputValue));\n    settings.homing_dir_mask = __aeabi_d2uiz(conversionResult,extraOutput6);\n    break;\n  case 0x13:\n    settings.homing_feed_rate = inputValue;\n    break;\n  case 0x14:\n    settings.homing_seek_rate = inputValue;\n    break;\n  case 0x15:\n    conversionResult = __aeabi_f2d(inputValue);\n    round((double)CONCAT44(settingIndex,inputValue));\n    settings.homing_debounce_delay = __aeabi_d2uiz(conversionResult,extraOutput7);\n    break;\n  case 0x16:\n    settings.homing_pulloff = inputValue;\n    break;\n  case 0x17:\n    conversionResult = __aeabi_f2d(inputValue);\n    trunc((double)CONCAT44(settingIndex,inputValue));\n    settings.dirn_invert_mask = __aeabi_d2uiz(conversionResult,extraOutput8);\n    break;\n  default:\n    return '\\x06';\n  }\n  write_global_settings();\n  return '\\0';\n}\n\n",
            "renaming": {
                "FUN_08004e30": "update_settings_08004e30",
                "parameter": "settingIndex",
                "value": "settingValue",
                "iVar1": "comparisonResult",
                "uVar2": "conversionResult",
                "in_r1": "inputValue",
                "extraout_r1": "extraOutput1",
                "extraout_r1_00": "extraOutput2",
                "extraout_r1_01": "extraOutput3",
                "extraout_r1_02": "extraOutput4",
                "extraout_r1_03": "extraOutput5",
                "extraout_r1_04": "extraOutput6",
                "extraout_r1_05": "extraOutput7",
                "extraout_r1_06": "extraOutput8",
                "value_local": "localValue",
                "parameter_local": "localParameter"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "limits_init",
                "trunc",
                "write_global_settings",
                "__aeabi_fcmple",
                "__aeabi_fcmplt",
                "__aeabi_d2uiz",
                "__aeabi_fmul",
                "round",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "initialize_coordinates_080051b4",
            "code": "\n/* WARNING: Unknown callindexng conventindexon */\n\nvoindexd initializeCoordinates_080051b4(voindexd)\n\n{\n  uindexnt8_t settings;\n  float coordinates [3];\n  uindexnt8_t index;\n  \n  settings = read_global_settindexngs();\n  indexf (settings == '\\0') {\n    report_status_message('\\n');\n    settindexngs_reset(true);\n    report_grbl_settindexngs();\n  }\n  for (index = '\\0'; index < 8; index = index + '\\x01') {\n    settings = settindexngs_read_coordinates(index,coordinates);\n    indexf (settings == '\\0') {\n      report_status_message('\\n');\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "initialize_coordinates_080051b4",
                "uVar1": "settings",
                "coord_data": "coordinates",
                "i": "index"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "report_status_message",
                "report_grbl_settings",
                "read_global_settings",
                "settings_reset",
                "settings_read_coord_data"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "spindle_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "stop_spindle_08005238",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid stop_spindle_08005238(void)\n\n{\n  direction = '\\0';\n  stop_spindle_08005238();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "stop_spindle_08005238",
                "current_direction": "direction",
                "spindle_stop": "stop_spindle"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "spindle_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "turn_off_spindle_08005250",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid turnOffSpindle_08005250(void)\n\n{\n  turnOffSpindle_08005250();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "turn_off_spindle_08005250",
                "spindle_off": "turnOffSpindle"
            },
            "calling": [
                "spindle_init",
                "mc_reset",
                "spindle_run"
            ],
            "called": [
                "spindle_off"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "control_spindle_direction_0800525c",
            "code": "\nvoid controlSpindleDirection_0800525c(int8_t requestedDirection)\n\n{\n  int8_t currentDirection;\n  \n  if ((int)requestedDirection != (uint)currentSpindleDirection) {\n    synchronizePlan();\n    if (requestedDirection == '\\0') {\n      stopSpindle();\n      currentSpindleDirection = requestedDirection;\n    }\n    else {\n      if (requestedDirection < '\\x01') {\n        reverseSpindle();\n      }\n      else {\n        forwardSpindle();\n      }\n      turnOnSpindle();\n      currentSpindleDirection = requestedDirection;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "control_spindle_direction_0800525c",
                "direction": "requestedDirection",
                "direction_local": "currentDirection",
                "plan_synchronize": "synchronizePlan",
                "spindle_stop": "stopSpindle",
                "current_direction": "currentSpindleDirection",
                "spindle_rev": "reverseSpindle",
                "spindle_fwd": "forwardSpindle",
                "spindle_on": "turnOnSpindle"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "spindle_fwd",
                "spindle_stop",
                "plan_synchronize",
                "spindle_rev",
                "spindle_on"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "update_register_value_080052ac",
            "code": "\n\n\nvoid updateRegisterValue_080052ac(uint32_t newValue)\n\n{\n  uint32_t localValue;\n  uint32_t value;\n  \n  _DAT_40021014 = newValue | _DAT_40021014 & 0newValuefffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "update_register_value_080052ac",
                "x": "newValue",
                "x_local": "localValue",
                "val": "value"
            },
            "calling": [
                "st_init",
                "step_delay_isr",
                "step_pulse_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "update_register_080052dc",
            "code": "\n\n\nvoid updateRegister_080052dc(uint32_t inputValue)\n\n{\n  uint32_t localValue;\n  uint32_t newValue;\n  \n  _DAT_40021014 = inputValue | _DAT_40021014 & 0inputValuefffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "update_register_080052dc",
                "x": "inputValue",
                "x_local": "localValue",
                "val": "newValue"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "st_go_idle"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "set_step_period_for_minutes_08005324",
            "code": "\nvoid setStepPeriodForMinutes_08005324(uint32_t inputStepsPerMinute)\n\n{\n  uint32_t adjustedStepsPerMinute;\n  uint32_t calculatedTicks;\n  \n  adjustedStepsPerMinute = inputStepsPerMinute;\n  if (inputStepsPerMinute < 800) {\n    adjustedStepsPerMinute = 800;\n  }\n  st.cycles_per_step_event = 1260000000 / adjustedStepsPerMinute;\n  set_step_period(st.cycles_per_step_event);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "set_step_period_for_minutes_08005324",
                "steps_per_minute": "inputStepsPerMinute",
                "steps_per_minute_local": "adjustedStepsPerMinute",
                "ticks": "calculatedTicks"
            },
            "calling": [
                "step_period_isr",
                "st_cycle_reinitialize",
                "st_reset"
            ],
            "called": [
                "set_step_period"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "calculate_trapezoid_tick_08005360",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint calculateTrapezoidTick_08005360(void)\n\n{\n  bool isCounterExceeded;\n  \n  tickCycleCounter = cyclesPerStepEvent + tickCycleCounter;\n  isCounterExceeded = 420000 < tickCycleCounter;\n  if (isCounterExceeded) {\n    tickCycleCounter = tickCycleCounter - 420000;\n  }\n  return (uint)isCounterExceeded;\n}\n\n",
            "renaming": {
                "FUN_08005360": "calculate_trapezoid_tick_08005360",
                "bVar1": "isCounterExceeded",
                "st.trapezoid_tick_cycle_counter": "tickCycleCounter",
                "st.cycles_per_step_event": "cyclesPerStepEvent"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "process_current_block_080053a0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid processCurrentBlock_080053a0(void)\n\n{\n  int iVar1;\n  \n  dirn_wr((uint)directionBits);\n  savedStepBits = stepBits;\n  if (currentBlock == (block_t *)0x0) {\n    currentBlock = getCurrentBlock();\n    if (currentBlock == (block_t *)0x0) {\n      goIdle();\n      execute = execute | 4;\n    }\n    else {\n      if (systemState == '\\x03') {\n        adjustedRate = currentBlock->initial_rate;\n        setEventsPerMinute(adjustedRate);\n        trapezoidTickCycleCounter = 210000;\n      }\n      minSafeRate = (currentBlock->rate_delta >> 1) + currentBlock->rate_delta;\n      counterX = -(currentBlock->step_event_count >> 1);\n      eventCount = currentBlock->step_event_count;\n      stepEventsCompleted = 0;\n      counterY = counterX;\n      counterZ = counterX;\n    }\n  }\n  if (currentBlock != (block_t *)0x0) {\n    directionBits = currentBlock->direction_bits;\n    stepBits = 0;\n    counterX = currentBlock->steps_x + counterX;\n    if (0 < counterX) {\n      stepBits = 0x10;\n      counterX = counterX - eventCount;\n      if ((directionBits & 0x20) == 0) {\n        positionX = positionX + 1;\n      }\n      else {\n        positionX = positionX + -1;\n      }\n    }\n    counterY = currentBlock->steps_y + counterY;\n    if (0 < counterY) {\n      stepBits = stepBits | 0x440;\n      counterY = counterY - eventCount;\n      if ((directionBits & 0x80) == 0) {\n        positionY = positionY + 1;\n      }\n      else {\n        positionY = positionY + -1;\n      }\n    }\n    counterZ = currentBlock->steps_z + counterZ;\n    if (0 < counterZ) {\n      stepBits = stepBits | 0x100;\n      counterZ = counterZ - eventCount;\n      if ((directionBits & 0x200) == 0) {\n        positionZ = positionZ + 1;\n      }\n      else {\n        positionZ = positionZ + -1;\n      }\n    }\n    stepEventsCompleted = stepEventsCompleted + 1;\n    if (stepEventsCompleted < (uint)currentBlock->step_event_count) {\n      if (systemState == '\\x04') {\n        iVar1 = iterateCycleCounter();\n        if (iVar1 != 0) {\n          if ((uint)currentBlock->rate_delta < adjustedRate) {\n            adjustedRate = adjustedRate - currentBlock->rate_delta;\n            setEventsPerMinute(adjustedRate);\n          }\n          else {\n            goIdle();\n            execute = execute | 4;\n          }\n        }\n      }\n      else if (stepEventsCompleted < currentBlock->accelerate_until) {\n        iVar1 = iterateCycleCounter();\n        if (iVar1 != 0) {\n          adjustedRate = adjustedRate + currentBlock->rate_delta;\n          if (currentBlock->nominal_rate <= adjustedRate) {\n            adjustedRate = currentBlock->nominal_rate;\n          }\n          setEventsPerMinute(adjustedRate);\n        }\n      }\n      else if (stepEventsCompleted < currentBlock->decelerate_after) {\n        if (adjustedRate != currentBlock->nominal_rate) {\n          adjustedRate = currentBlock->nominal_rate;\n          setEventsPerMinute(adjustedRate);\n        }\n      }\n      else if (stepEventsCompleted == currentBlock->decelerate_after) {\n        if (adjustedRate == currentBlock->nominal_rate) {\n          trapezoidTickCycleCounter = 210000;\n        }\n        else {\n          trapezoidTickCycleCounter = 420000 - trapezoidTickCycleCounter;\n        }\n      }\n      else {\n        iVar1 = iterateCycleCounter();\n        if (iVar1 != 0) {\n          if (minSafeRate < adjustedRate) {\n            adjustedRate = adjustedRate - currentBlock->rate_delta;\n          }\n          else {\n            adjustedRate = adjustedRate >> 1;\n          }\n          if (adjustedRate < currentBlock->final_rate) {\n            adjustedRate = currentBlock->final_rate;\n          }\n          setEventsPerMinute(adjustedRate);\n        }\n      }\n    }\n    else {\n      stepBits = 0;\n      currentBlock = (block_t *)0x0;\n      discardCurrentBlock();\n    }\n  }\n  stepBits = stepBits ^ stepInvertMask;\n  directionBits = directionBits ^ dirnInvertMask;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "process_current_block_080053a0",
                "dirn_bits": "directionBits",
                "saved_step_bits": "savedStepBits",
                "current_block": "currentBlock",
                "plan_get_current_block": "getCurrentBlock",
                "st.trapezoid_adjusted_rate": "adjustedRate",
                "set_step_events_per_minute": "setEventsPerMinute",
                "st.min_safe_rate": "minSafeRate",
                "st.counter_x": "counterX",
                "st.event_count": "eventCount",
                "st.counter_y": "counterY",
                "st.counter_z": "counterZ",
                "step_bits": "stepBits",
                "sys.position[0]": "positionX",
                "sys.position[1]": "positionY",
                "sys.position[2]": "positionZ",
                "sys.state": "systemState",
                "st_go_idle": "goIdle",
                "sys.execute": "execute",
                "st.step_events_completed": "stepEventsCompleted",
                "st.trapezoid_tick_cycle_counter": "trapezoidTickCycleCounter",
                "iterate_trapezoid_cycle_counter": "iterateCycleCounter",
                "settings.step_invert_mask": "stepInvertMask",
                "settings.dirn_invert_mask": "dirnInvertMask",
                "plan_discard_current_block": "discardCurrentBlock"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "dirn_wr",
                "iterate_trapezoid_cycle_counter",
                "st_go_idle",
                "plan_discard_current_block",
                "set_step_events_per_minute",
                "plan_get_current_block"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "invert_step_settings_08005760",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid invert_step_settings_08005760(void)\n\n{\n  write_inverted_step((uint)invert_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "invert_step_settings_08005760",
                "settings.step_invert_mask": "invert_mask",
                "step_wr": "write_inverted_step"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "execute_step_08005778",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid execute_step_08005778(void)\n\n{\n  step_wr((uint)step_bits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "execute_step_08005778",
                "saved_step_bits": "step_bits"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_stepper_motor_08005790",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_stepper_motor_08005790(void)\n\n{\n  stepper_motor_enable();\n  if (system.state == '\\x03') {\n    step_invert_bits = settings.step_invert_mask;\n    direction_invert_bits = settings.dirn_invert_mask;\n    set_pulse_delay(0x69);\n    set_pulse_time((pulse_duration + 5) * 0x15);\n    enable_step_isr();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_stepper_motor_08005790",
                "sys": "system",
                "step_bits": "step_invert_bits",
                "dirn_bits": "direction_invert_bits",
                "set_step_pulse_delay": "set_pulse_delay",
                "set_step_pulse_time": "set_pulse_time",
                "settings.pulse_microseconds": "pulse_duration",
                "step_isr_enable": "enable_step_isr"
            },
            "calling": [
                "limits_go_home",
                "st_init",
                "st_cycle_start"
            ],
            "called": [
                "step_isr_enable",
                "stepper_motor_enable",
                "set_step_pulse_delay",
                "set_step_pulse_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "disable_stepper_motor_if_idle_080057e4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disableStepperMotorIfIdle_080057e4(void)\n\n{\n  step_isr_disable();\n  if ((stepperIdleLockTime != 0xff) || ((systemExecute & 0x20) != 0)) {\n    disableStepperMotor();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "disable_stepper_motor_if_idle_080057e4",
                "settings.stepper_idle_lock_time": "stepperIdleLockTime",
                "sys.execute": "systemExecute",
                "stepper_motor_disable": "disableStepperMotor"
            },
            "calling": [
                "limits_go_home",
                "st_init",
                "step_period_isr",
                "mc_reset"
            ],
            "called": [
                "stepper_motor_disable",
                "step_isr_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_blocks_08005814",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_blocks_08005814(void)\n\n{\n  memset(&block_state,0,0x24);\n  set_event_rate(800);\n  current_block = (block_t *)0x0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_blocks_08005814",
                "st": "block_state",
                "set_step_events_per_minute": "set_event_rate"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "set_step_events_per_minute",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_step_0800583c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeStep_0800583c(void)\n\n{\n  writeStep((uint)stepInvertMask);\n  wakeUpState();\n  goIdleState();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_step_0800583c",
                "settings.step_invert_mask": "stepInvertMask",
                "step_wr": "writeStep",
                "st_wake_up": "wakeUpState",
                "st_go_idle": "goIdleState"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "st_wake_up",
                "st_go_idle",
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "update_sys_state_and_wake_up_0800585c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid update_sys_state_and_wake_up_0800585c(void)\n\n{\n  if (current_state == '\\x02') {\n    current_state = '\\x03';\n    wake_up_system();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "update_sys_state_and_wake_up_0800585c",
                "sys.state": "current_state",
                "st_wake_up": "wake_up_system"
            },
            "calling": [
                "mc_go_home",
                "protocol_execute_runtime",
                "mc_line"
            ],
            "called": [
                "st_wake_up"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_state_0800587c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid update_state_0800587c(void)\n\n{\n  if (current_state == '\\x03') {\n    current_state = '\\x04';\n    auto_start_flag = '\\0';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_state_0800587c",
                "sys.state": "current_state",
                "sys.auto_start": "auto_start_flag"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "initialize_step_cycle_080058a0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeStepCycle_080058a0(void)\n\n{\n  if (blockPtr == (Block *)0x0) {\n    systemState = '\\0';\n  }\n  else {\n    reinitializeCycle(blockPtr->numStepEvents - numStepEventsCompleted);\n    adjustedTrapezoidRate = 0;\n    setStepEventsPerMinute(0);\n    tickCycleCounter = 210000;\n    numStepEventsCompleted = 0;\n    systemState = '\\x02';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "initialize_step_cycle_080058a0",
                "current_block": "blockPtr",
                "sys.state": "systemState",
                "block_t": "Block",
                "step_event_count": "numStepEvents",
                "st.step_events_completed": "numStepEventsCompleted",
                "plan_cycle_reinitialize": "reinitializeCycle",
                "st.trapezoid_adjusted_rate": "adjustedTrapezoidRate",
                "set_step_events_per_minute": "setStepEventsPerMinute",
                "st.trapezoid_tick_cycle_counter": "tickCycleCounter"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "plan_cycle_reinitialize",
                "set_step_events_per_minute"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "process_input_data_08005900",
            "code": "\nint process_input_data_08005900(uint8_t input_data)\n\n{\n  uint8_t local_data;\n  int return_code;\n  \n  if (input_data == '~') {\n    sys.execute = sys.execute | 2;\n    return 1;\n  }\n  if (input_data < 0x7f) {\n    if (input_data == '?') {\n      sys.execute = sys.execute | 1;\n      return 1;\n    }\n    if (input_data < 0x40) {\n      if (input_data == '\\x18') {\n        mc_reset();\n        return 1;\n      }\n      if (input_data == '!') {\n        sys.execute = sys.execute | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "process_input_data_08005900",
                "data": "input_data",
                "data_local": "local_data",
                "rc": "return_code"
            },
            "calling": [
                "serial_read"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "execute_system_interrupt_0800597c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t execute_system_interrupt_0800597c(uint32_t a0,uint32_t a1,int32_t a2)\n\n{\n  software_interrupt(0x3f);\n  return a0;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "execute_system_interrupt_0800597c"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "handle_ticks_08005984",
            "code": "\nint handleTicks_08005984(int ticks)\n\n{\n  uint32_t result;\n  int ticks_local;\n  \n  if (shouldMakeHyperCall == 0) {\n    result = makeAflCall(1,ticks,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005984": "handle_ticks_08005984",
                "noHyperCall": "shouldMakeHyperCall",
                "uVar1": "result",
                "aflCall": "makeAflCall"
            },
            "calling": [
                "main"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_system_080059b4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef initializeSystem_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  configureSysTick(16000);\n  setPriorityGrouping(3);\n  initializeMsp();\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_system_080059b4",
                "HAL_SYSTICK_Config": "configureSysTick",
                "HAL_NVIC_SetPriorityGrouping": "setPriorityGrouping",
                "HAL_MspInit": "initializeMsp"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_MspInit",
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "deinitialize_hal_080059f8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef deinitialize_HAL_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  HAL_MspDeInit();\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "deinitialize_hal_080059f8"
            },
            "calling": [],
            "called": [
                "HAL_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "HAL_DeInit"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "update_system_tick_08005a68",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateSystemTick_08005a68(void)\n\n{\n  systemTick = systemTick + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "update_system_tick_08005a68",
                "uwTick": "systemTick"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_system_tick_08005a84",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getSystemTick_08005a84(void)\n\n{\n  return systemTick;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_system_tick_08005a84",
                "uwTick": "systemTick"
            },
            "calling": [
                "get_current_usecs",
                "HAL_RCC_ClockConfig",
                "SysTick_Handler",
                "HAL_RCC_OscConfig",
                "HAL_Delay"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "delay_function_08005a98",
            "code": "\nvoid delayFunction_08005a98(uint32_t delay)\n\n{\n  uint32_t startTicks;\n  uint32_t currentTicks;\n  uint32_t localDelay;\n  uint32_t timingDelay;\n  \n  startTicks = HAL_GetTick();\n  do {\n    currentTicks = HAL_GetTick();\n  } while (currentTicks < delay + startTicks);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "delay_function_08005a98",
                "Delay": "delay",
                "uVar1": "startTicks",
                "uVar2": "currentTicks",
                "Delay_local": "localDelay",
                "timingdelay": "timingDelay"
            },
            "calling": [
                "_delay_ms"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005ac4": {
            "entrypoint": "0x08005ac4",
            "current_name": "get_base_address_08005ac4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getBaseAddress_08005ac4(void)\n\n{\n  return 0x1000000;\n}\n\n",
            "renaming": {
                "FUN_08005ac4": "get_base_address_08005ac4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005ad4": {
            "entrypoint": "0x08005ad4",
            "current_name": "get_upper_half_08005ad4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t get_upper_half_08005ad4(void)\n\n{\n  return _DAT_e0042000 >> 0x10;\n}\n\n",
            "renaming": {
                "FUN_08005ad4": "get_upper_half_08005ad4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aec": {
            "entrypoint": "0x08005aec",
            "current_name": "get_lower_12_bits_08005aec",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t get_lower_12_bits_08005aec(void)\n\n{\n  return _DAT_e0042000 & 0xfff;\n}\n\n",
            "renaming": {
                "FUN_08005aec": "get_lower_12_bits_08005aec"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b04": {
            "entrypoint": "0x08005b04",
            "current_name": "set_flag_08005b04",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid setFlag_08005b04(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b04": "set_flag_08005b04"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b20": {
            "entrypoint": "0x08005b20",
            "current_name": "clear_least_significant_bit_08005b20",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid clearLeastSignificantBit_08005b20(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 & 0xfffffffe;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b20": "clear_least_significant_bit_08005b20"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b3c": {
            "entrypoint": "0x08005b3c",
            "current_name": "set_flag_bits_08005b3c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid setFlagBits_08005b3c(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 | 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b3c": "set_flag_bits_08005b3c"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b58": {
            "entrypoint": "0x08005b58",
            "current_name": "clear_interrupt_flag_08005b58",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid clearInterruptFlag_08005b58(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 & 0xfffffffd;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b58": "clear_interrupt_flag_08005b58"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b74": {
            "entrypoint": "0x08005b74",
            "current_name": "set_fourth_bit_08005b74",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid setFourthBit_08005b74(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b74": "set_fourth_bit_08005b74"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b90": {
            "entrypoint": "0x08005b90",
            "current_name": "clear_flag_08005b90",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid clearFlag_08005b90(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 & 0xfffffffb;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b90": "clear_flag_08005b90"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bac": {
            "entrypoint": "0x08005bac",
            "current_name": "initialize_flag_08005bac",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeFlag_08005bac(void)\n\n{\n  _DAT_42270400 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bac": "initialize_flag_08005bac"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc4": {
            "entrypoint": "0x08005bc4",
            "current_name": "reset_data_08005bc4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid resetData_08005bc4(void)\n\n{\n  _DAT_42270400 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bc4": "reset_data_08005bc4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "set_priority_08005bdc",
            "code": "\nvoid setPriority_08005bdc(interrupt_Type interrupt,uint32_t newPriority)\n\n{\n  uint32_t localPriority;\n  interrupt_Type localInterrupt;\n  \n  if (interrupt < WWDG_interrupt) {\n    *(char *)(((byte)interrupt & 0xf) + 0xe000ed14) = (char)((newPriority & 0xff) << 4);\n  }\n  else {\n    *(char *)(interrupt + -0x1fff1c00) = (char)((newPriority & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "set_priority_08005bdc",
                "IRQn": "interrupt",
                "priority": "newPriority",
                "priority_local": "localPriority",
                "IRQn_local": "localInterrupt"
            },
            "calling": [
                "SysTick_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_and_configure_sys_tick_08005c30",
            "code": "\n\n\nuint32_t checkAndConfigureSysTick_08005c30(uint32_t ticksCount)\n\n{\n  bool isWithinRange;\n  uint32_t localTicks;\n  \n  isWithinRange = ticksCount - 1 < 0x1000000;\n  if (isWithinRange) {\n    _DAT_e000e014 = ticksCount - 1;\n    NVIC_SetPriority(SysTick_IRQn,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return (uint)!isWithinRange;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_and_configure_sys_tick_08005c30",
                "ticks": "ticksCount",
                "bVar1": "isWithinRange",
                "ticks_local": "localTicks"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c74": {
            "entrypoint": "0x08005c74",
            "current_name": "initialize_memory_08005c74",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeMemory_08005c74(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x4003010;\n  _DAT_40023884 = 0x20003000;\n  _DAT_40023800 = _DAT_40023800 & 0xfaf2ffff | 0x81;\n  _DAT_4002380c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c74": "initialize_memory_08005c74"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "initialize_oscillators_08005cec",
            "code": "\n\n\nHAL_StatusTypeDef initializeOscillators_08005cec(RCC_OscInitTypeDef *oscillatorConfig)\n\n{\n  uint32_t currentTime;\n  uint32_t newTime;\n  RCC_OscInitTypeDef *oscillatorConfig_local;\n  uint32_t result_2;\n  uint32_t result_3;\n  uint32_t result_4;\n  uint32_t result_5;\n  uint32_t result_6;\n  uint32_t result_7;\n  uint32_t result;\n  uint32_t result_1;\n  uint32_t timeout;\n  \n  if ((oscillatorConfig->OscillatorType & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (oscillatorConfig->HSEState != 1)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      currentTime = HAL_GetTick();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        newTime = HAL_GetTick();\n        if (currentTime + 5000 <= newTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n      _DAT_40023800 = CONCAT12((char)oscillatorConfig->HSEState,_DAT_40023800);\n      if (oscillatorConfig->HSEState == 1) {\n        currentTime = HAL_GetTick();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          newTime = HAL_GetTick();\n          if (currentTime + 5000 <= newTime) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        currentTime = HAL_GetTick();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          newTime = HAL_GetTick();\n          if (currentTime + 5000 <= newTime) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((oscillatorConfig->OscillatorType & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (oscillatorConfig->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n    }\n    else if (oscillatorConfig->HSIState == 0) {\n      _DAT_42470000 = 0;\n      currentTime = HAL_GetTick();\n      while ((_DAT_40023800 & 2) != 0) {\n        newTime = HAL_GetTick();\n        if (currentTime + 100 <= newTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      currentTime = HAL_GetTick();\n      while ((_DAT_40023800 & 2) == 0) {\n        newTime = HAL_GetTick();\n        if (currentTime + 100 <= newTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n      _DAT_40023800 = oscillatorConfig->HSICalibrationValue << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((oscillatorConfig->OscillatorType & 8) != 0) {\n    if (oscillatorConfig->LSIState == 0) {\n      _DAT_42470e80 = 0;\n      currentTime = HAL_GetTick();\n      while ((_DAT_40023874 & 2) != 0) {\n        newTime = HAL_GetTick();\n        if (currentTime + 100 <= newTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      currentTime = HAL_GetTick();\n      while ((_DAT_40023874 & 2) == 0) {\n        newTime = HAL_GetTick();\n        if (currentTime + 100 <= newTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  if ((oscillatorConfig->OscillatorType & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    currentTime = HAL_GetTick();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      newTime = HAL_GetTick();\n      if (currentTime + 100 <= newTime) {\n        return HAL_TIMEOUT;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    currentTime = HAL_GetTick();\n    while ((_DAT_40023870 & 2) != 0) {\n      newTime = HAL_GetTick();\n      if (currentTime + 5000 <= newTime) {\n        return HAL_TIMEOUT;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)oscillatorConfig->LSEState);\n    if (oscillatorConfig->LSEState == 1) {\n      currentTime = HAL_GetTick();\n      while ((_DAT_40023870 & 2) == 0) {\n        newTime = HAL_GetTick();\n        if (currentTime + 5000 <= newTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      currentTime = HAL_GetTick();\n      while ((_DAT_40023870 & 2) != 0) {\n        newTime = HAL_GetTick();\n        if (currentTime + 5000 <= newTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  if ((oscillatorConfig->PLL).PLLState != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return HAL_ERROR;\n    }\n    if ((oscillatorConfig->PLL).PLLState == 2) {\n      _DAT_42470060 = 0;\n      currentTime = HAL_GetTick();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        newTime = HAL_GetTick();\n        if (currentTime + 100 <= newTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n      _DAT_40023804 =\n           (oscillatorConfig->PLL).PLLQ << 0x18 |\n           (oscillatorConfig->PLL).PLLM | (oscillatorConfig->PLL).PLLN << 6 |\n           (((oscillatorConfig->PLL).PLLP >> 1) - 1) * 0x10000 | (oscillatorConfig->PLL).PLLSource\n           | 0x20000000;\n      _DAT_42470060 = 1;\n      currentTime = HAL_GetTick();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        newTime = HAL_GetTick();\n        if (currentTime + 100 <= newTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      currentTime = HAL_GetTick();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        newTime = HAL_GetTick();\n        if (currentTime + 100 <= newTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "initialize_oscillators_08005cec",
                "RCC_OscInitStruct": "oscillatorConfig",
                "uVar1": "currentTime",
                "uVar2": "newTime",
                "RCC_OscInitStruct_local": "oscillatorConfig_local"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "configure_clocks_0800618c",
            "code": "\n\n\nHAL_StatusTypeDef configureClocks_0800618c(RCC_ClkInitTypeDef *clockInitStruct,uint32_t latency)\n\n{\n  uint32_t currentTime;\n  uint timeout;\n  uint32_t localLatency;\n  RCC_ClkInitTypeDef *localClockInitStruct;\n  uint32_t timeout;\n  \n  if ((_DAT_40023c00 & 0xf) < latency) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)latency);\n    if (latency != (latency & 0xf)) {\n      return HAL_ERROR;\n    }\n    if ((clockInitStruct->ClockType & 1) != 0) {\n      if (clockInitStruct->SYSCLKSource == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return HAL_ERROR;\n        }\n      }\n      else if ((clockInitStruct->SYSCLKSource != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return HAL_ERROR;\n      }\n      _DAT_40023808 = clockInitStruct->SYSCLKSource | _DAT_40023808 & 0xfffffffc;\n      currentTime = HAL_GetTick();\n      timeout = currentTime + 5000;\n      if (clockInitStruct->SYSCLKSource == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          currentTime = HAL_GetTick();\n          if (timeout <= currentTime) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else if (clockInitStruct->SYSCLKSource == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          currentTime = HAL_GetTick();\n          if (timeout <= currentTime) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          currentTime = HAL_GetTick();\n          if (timeout <= currentTime) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((clockInitStruct->ClockType & 1) != 0) {\n      if (clockInitStruct->SYSCLKSource == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return HAL_ERROR;\n        }\n      }\n      else if (clockInitStruct->SYSCLKSource == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return HAL_ERROR;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return HAL_ERROR;\n      }\n      _DAT_40023808 = clockInitStruct->SYSCLKSource | _DAT_40023808 & 0xfffffffc;\n      currentTime = HAL_GetTick();\n      timeout = currentTime + 5000;\n      if (clockInitStruct->SYSCLKSource == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          currentTime = HAL_GetTick();\n          if (timeout <= currentTime) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else if (clockInitStruct->SYSCLKSource == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          currentTime = HAL_GetTick();\n          if (timeout <= currentTime) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          currentTime = HAL_GetTick();\n          if (timeout <= currentTime) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)latency);\n    if (latency != (latency & 0xf)) {\n      return HAL_ERROR;\n    }\n  }\n  if ((clockInitStruct->ClockType & 2) != 0) {\n    _DAT_40023808 = clockInitStruct->AHBCLKDivider | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((clockInitStruct->ClockType & 4) != 0) {\n    _DAT_40023808 = clockInitStruct->APB1CLKDivider | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((clockInitStruct->ClockType & 8) != 0) {\n    _DAT_40023808 = clockInitStruct->APB2CLKDivider << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  currentTime = HAL_RCC_GetHCLKFreq();\n  SysTick_Config(currentTime / 1000);\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "configure_clocks_0800618c",
                "RCC_ClkInitStruct": "clockInitStruct",
                "FLatency": "latency",
                "uVar1": "currentTime",
                "uVar2": "timeout",
                "FLatency_local": "localLatency",
                "RCC_ClkInitStruct_local": "localClockInitStruct"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick",
                "SysTick_Config",
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "configure_rcc_mco_0800640c",
            "code": "\n\n\nvoid configure_RCC_MCO_0800640c(uint32_t MCO_output,uint32_t MCO_source,uint32_t MCO_div)\n\n{\n  uint32_t MCO_div_local;\n  uint32_t MCO_source_local;\n  uint32_t MCO_output_local;\n  GPIO_InitTypeDef GPIO_init_struct;\n  \n  if (MCO_output == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    GPIO_init_struct.Pin = 0x100;\n    GPIO_init_struct.Mode = 2;\n    GPIO_init_struct.Speed = 3;\n    GPIO_init_struct.Pull = 0;\n    GPIO_init_struct.Alternate = 0;\n    HAL_GPIO_Init((GPIO_TypeDef *)0x40020000,&GPIO_init_struct);\n    _DAT_40023808 = MCO_div | MCO_source | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    GPIO_init_struct.Pin = 0x200;\n    GPIO_init_struct.Mode = 2;\n    GPIO_init_struct.Speed = 3;\n    GPIO_init_struct.Pull = 0;\n    GPIO_init_struct.Alternate = 0;\n    HAL_GPIO_Init((GPIO_TypeDef *)0x40020800,&GPIO_init_struct);\n    _DAT_40023808 = MCO_source | MCO_div << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "configure_rcc_mco_0800640c",
                "RCC_MCOx": "MCO_output",
                "RCC_MCOSource": "MCO_source",
                "RCC_MCODiv": "MCO_div",
                "RCC_MCODiv_local": "MCO_div_local",
                "RCC_MCOSource_local": "MCO_source_local",
                "RCC_MCOx_local": "MCO_output_local",
                "GPIO_InitStruct": "GPIO_init_struct"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064bc": {
            "entrypoint": "0x080064bc",
            "current_name": "initialize_flag_080064bc",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeFlag_080064bc(void)\n\n{\n  _DAT_4247004c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064bc": "initialize_flag_080064bc"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064d4": {
            "entrypoint": "0x080064d4",
            "current_name": "initialize_global_variable_080064d4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeGlobalVariable_080064d4(void)\n\n{\n  _DAT_4247004c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064d4": "initialize_global_variable_080064d4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_system_clock_frequency_080064ec",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t calculateSystemClockFrequency_080064ec(void)\n\n{\n  uint clockConfig;\n  uint32_t resultMultiplier6;\n  uint32_t resultMultiplier7;\n  uint32_t resultMultiplier4;\n  uint32_t resultMultiplier5;\n  uint32_t resultMultiplier2;\n  uint32_t resultMultiplier3;\n  uint32_t resultValue;\n  uint32_t resultValue1;\n  uint32_t pllpValue;\n  uint32_t pllmValue;\n  uint32_t systemClockFrequency;\n  uint32_t pllvcoValue;\n  \n  clockConfig = _DAT_40023808 & 0xc;\n  if (clockConfig == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      pllvcoValue = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      pllvcoValue = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return pllvcoValue / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (clockConfig < 9) {\n    if (clockConfig == 0) {\n      return 16000000;\n    }\n    if (clockConfig == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_system_clock_frequency_080064ec",
                "uVar1": "clockConfig",
                "result_6": "resultMultiplier6",
                "result_7": "resultMultiplier7",
                "result_4": "resultMultiplier4",
                "result_5": "resultMultiplier5",
                "result_2": "resultMultiplier2",
                "result_3": "resultMultiplier3",
                "result": "resultValue",
                "result_1": "resultValue1",
                "pllp": "pllpValue",
                "pllm": "pllmValue",
                "sysclockfreq": "systemClockFrequency",
                "pllvco": "pllvcoValue"
            },
            "calling": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "get_system_clock_frequency_08006628",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t getSystemClockFrequency_08006628(void)\n\n{\n  uint32_t systemClockFreq;\n  uint32_t shiftedFreq;\n  uint32_t shiftedFreq_1;\n  \n  systemClockFreq = HAL_RCC_GetSysClockFreq();\n  SystemCoreClock = systemClockFreq >> \"\"[(_DAT_40023808 & 0xf0) >> 4];\n  return systemClockFreq >> \"\"[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "get_system_clock_frequency_08006628",
                "uVar1": "systemClockFreq",
                "result": "shiftedFreq",
                "result_1": "shiftedFreq_1"
            },
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "called": [
                "HAL_RCC_GetSysClockFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "get_hclk_freq_08006680",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t getHCLKFreq_08006680(void)\n\n{\n  uint32_t hclkFreq;\n  uint32_t shiftedFreq;\n  uint32_t finalFreq;\n  \n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  return hclkFreq >> \"\"[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "get_hclk_freq_08006680",
                "uVar1": "hclkFreq",
                "result": "shiftedFreq",
                "result_1": "finalFreq"
            },
            "calling": [
                "set_baud_rate"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "get_hclk_frequency_080066cc",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t getHCLKFrequency_080066cc(void)\n\n{\n  uint32_t frequency;\n  uint32_t shiftedFrequency;\n  uint32_t finalFrequency;\n  \n  frequency = HAL_RCC_GetHCLKFreq();\n  return frequency >> \"\"[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "get_hclk_frequency_080066cc",
                "uVar1": "frequency",
                "result": "shiftedFrequency",
                "result_1": "finalFrequency"
            },
            "calling": [
                "set_baud_rate"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006718": {
            "entrypoint": "0x08006718",
            "current_name": "configure_rcc_oscillators_08006718",
            "code": "\n\n\nvoid configureRCCOscillators_08006718(RCC_OscInitTypeDef *oscillatorConfig)\n\n{\n  RCC_OscInitTypeDef *oscillatorConfigLocal;\n  uint32_t result2;\n  uint32_t result3;\n  uint32_t result4;\n  uint32_t result5;\n  uint32_t result6;\n  uint32_t result7;\n  uint32_t result1;\n  uint32_t resultTemp;\n  \n  oscillatorConfig->OscillatorType = 0xf;\n  if ((_DAT_40023800 & 0x40000) == 0x40000) {\n    oscillatorConfig->HSEState = 5;\n  }\n  else if ((_DAT_40023800 & 0x10000) == 0x10000) {\n    oscillatorConfig->HSEState = 1;\n  }\n  else {\n    oscillatorConfig->HSEState = 0;\n  }\n  if ((_DAT_40023800 & 1) == 1) {\n    oscillatorConfig->HSIState = 1;\n  }\n  else {\n    oscillatorConfig->HSIState = 0;\n  }\n  oscillatorConfig->HSICalibrationValue = (_DAT_40023800 & 0xf8) >> 3;\n  if ((_DAT_40023870 & 4) == 4) {\n    oscillatorConfig->LSEState = 5;\n  }\n  else if ((_DAT_40023870 & 1) == 1) {\n    oscillatorConfig->LSEState = 1;\n  }\n  else {\n    oscillatorConfig->LSEState = 0;\n  }\n  if ((_DAT_40023874 & 1) == 1) {\n    oscillatorConfig->LSIState = 1;\n  }\n  else {\n    oscillatorConfig->LSIState = 0;\n  }\n  if ((_DAT_40023800 & 0x1000000) == 0x1000000) {\n    (oscillatorConfig->PLL).PLLState = 2;\n  }\n  else {\n    (oscillatorConfig->PLL).PLLState = 1;\n  }\n  (oscillatorConfig->PLL).PLLSource = _DAT_40023804 & 0x400000;\n  (oscillatorConfig->PLL).PLLM = _DAT_40023804 & 0x3f;\n  (oscillatorConfig->PLL).PLLN = (_DAT_40023804 & 0x7fc0) >> 6;\n  (oscillatorConfig->PLL).PLLP = ((_DAT_40023804 & 0x30000) + 0x10000) * 2 >> 0x10;\n  (oscillatorConfig->PLL).PLLQ = (_DAT_40023804 & 0xf000000) >> 0x18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006718": "configure_rcc_oscillators_08006718",
                "RCC_OscInitStruct": "oscillatorConfig",
                "RCC_OscInitStruct_local": "oscillatorConfigLocal",
                "result_2": "result2",
                "result_3": "result3",
                "result_4": "result4",
                "result_5": "result5",
                "result_6": "result6",
                "result_7": "result7",
                "result": "result1",
                "result_1": "resultTemp"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068bc": {
            "entrypoint": "0x080068bc",
            "current_name": "initialize_clock_settings_080068bc",
            "code": "\n\n\nvoid initializeClockSettings_080068bc(RCC_ClkInitTypeDef *clockSettings,uint32_t *flashLatency)\n\n{\n  uint32_t *localFlashLatency;\n  RCC_ClkInitTypeDef *localClockSettings;\n  \n  clockSettings->ClockType = 0xf;\n  clockSettings->SYSCLKSource = _DAT_40023808 & 3;\n  clockSettings->AHBCLKDivider = _DAT_40023808 & 0xf0;\n  clockSettings->APB1CLKDivider = _DAT_40023808 & 0x1c00;\n  clockSettings->APB2CLKDivider = _DAT_40023808 >> 3 & 0x1c00;\n  *flashLatency = _DAT_40023c00 & 0xf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080068bc": "initialize_clock_settings_080068bc",
                "RCC_ClkInitStruct": "clockSettings",
                "pFLatency": "flashLatency",
                "pFLatency_local": "localFlashLatency",
                "RCC_ClkInitStruct_local": "localClockSettings"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800691c": {
            "entrypoint": "0x0800691c",
            "current_name": "check_and_invoke_ccs_callback_0800691c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid checkAndInvokeCCSCallback_0800691c(void)\n\n{\n  if ((_DAT_4002380c & 0x80) == 0x80) {\n    HAL_RCC_CCSCallback();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800691c": "check_and_invoke_ccs_callback_0800691c"
            },
            "calling": [],
            "called": [
                "HAL_RCC_CCSCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006944": {
            "entrypoint": "0x08006944",
            "current_name": "FUNC_08006944",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08006944(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006944": "FUNC_08006944"
            },
            "calling": [
                "HAL_RCC_NMI_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "set_priority_group_08006950",
            "code": "\n\n\nvoid setPriorityGroup_08006950(uint32_t priorityGroup)\n\n{\n  uint32_t localPriorityGroup;\n  uint32_t registerValue;\n  uint32_t temporaryGroup;\n  \n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (priorityGroup & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "set_priority_group_08006950",
                "PriorityGroup": "priorityGroup",
                "PriorityGroup_local": "localPriorityGroup",
                "reg_value": "registerValue",
                "PriorityGroupTmp": "temporaryGroup"
            },
            "calling": [
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "extract_bits_from_register_08006998",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t extract_bits_from_register_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "extract_bits_from_register_08006998"
            },
            "calling": [
                "HAL_NVIC_GetPriorityGrouping",
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_irq_bit_080069b4",
            "code": "\nvoid setIRQBit_080069b4(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  *(int *)(((uint)(int)interruptNumber >> 5) * 4 + -0x1fff1f00) = 1 << (interruptNumber & 0x1fU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_irq_bit_080069b4",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "HAL_NVIC_EnableIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_irq_enable_flag_080069e4",
            "code": "\nvoid setIRQEnableFlag_080069e4(interrupt_Type interrupt)\n\n{\n  interrupt_Type localInterrupt;\n  \n  *(int *)((((uint)(int)interrupt >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (interrupt & 0x1fU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_irq_enable_flag_080069e4",
                "IRQn": "interrupt",
                "IRQn_local": "localInterrupt"
            },
            "calling": [
                "HAL_NVIC_DisableIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "check_interrupt_status_08006a18",
            "code": "\nuint32_t checkInterruptStatus_08006a18(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  return (uint)((*(uint *)((((uint)(int)interruptNumber >> 5) + 0x40) * 4 + -0x1fff1f00) & 1 << (interruptNumber & 0x1fU))\n               != 0);\n}\n\n",
            "renaming": {
                "FUN_08006a18": "check_interrupt_status_08006a18",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "HAL_NVIC_GetPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_irq_enable_bit_08006a58",
            "code": "\nvoid setIRQEnableBit_08006a58(irqNumber_Type irqNumber)\n\n{\n  irqNumber_Type localIrqNumber;\n  \n  *(int *)((((uint)(int)irqNumber >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (irqNumber & 0x1fU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_irq_enable_bit_08006a58",
                "IRQn": "irqNumber",
                "IRQn_local": "localIrqNumber"
            },
            "calling": [
                "HAL_NVIC_SetPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_interrupt_priority_08006a8c",
            "code": "\nvoid setInterruptPriority_08006a8c(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  *(int *)((((uint)(int)interruptNumber >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (interruptNumber & 0x1fU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_interrupt_priority_08006a8c",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_ir_qn_status_08006ac0",
            "code": "\nuint32_t check_IRQn_status_08006ac0(Interrupt_number_Type Interrupt_number)\n\n{\n  Interrupt_number_Type Local_interrupt_number;\n  \n  return (uint)((*(uint *)((((uint)(int)Interrupt_number >> 5) + 0x80) * 4 + -0x1fff1f00) & 1 << (Interrupt_number & 0x1fU))\n               != 0);\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_ir_qn_status_08006ac0",
                "IRQn": "Interrupt_number",
                "IRQn_local": "Local_interrupt_number"
            },
            "calling": [
                "HAL_NVIC_GetActive"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "set_interrupt_priority_08006b00",
            "code": "\nvoid setInterruptPriority_08006b00(interruptNumber_Type interruptNumber,uint32_t priorityLevel)\n\n{\n  uint32_t localPriority;\n  interruptNumber_Type localInterruptNumber;\n  \n  if (interruptNumber < WWDG_interruptNumber) {\n    *(char *)(((byte)interruptNumber & 0xf) + 0xe000ed14) = (char)((priorityLevel & 0xff) << 4);\n  }\n  else {\n    *(char *)(interruptNumber + -0x1fff1c00) = (char)((priorityLevel & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "set_interrupt_priority_08006b00",
                "IRQn": "interruptNumber",
                "priority": "priorityLevel",
                "priority_local": "localPriority",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "SysTick_Config",
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "extract_priority_08006b54",
            "code": "\nuint32_t extractPriority_08006b54(interruptType_Type interruptType)\n\n{\n  byte priorityByte;\n  interruptType_Type localInterruptType;\n  \n  if (interruptType < WWDG_interruptType) {\n    priorityByte = *(byte *)(((byte)interruptType & 0xf) + 0xe000ed14);\n  }\n  else {\n    priorityByte = *(byte *)(interruptType + -0x1fff1c00);\n  }\n  return (uint)(priorityByte >> 4);\n}\n\n",
            "renaming": {
                "FUN_08006b54": "extract_priority_08006b54",
                "IRQn": "interruptType",
                "bVar1": "priorityByte",
                "IRQn_local": "localInterruptType"
            },
            "calling": [
                "HAL_NVIC_GetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "calculate_priority_08006ba0",
            "code": "\nuint32_t calculatePriority_08006ba0(uint32_t priorityGroup,uint32_t preemptPriority,uint32_t subPriority)\n\n{\n  uint groupBits;\n  uint remainingBits;\n  uint32_t subPriorityLocal;\n  uint32_t preemptPriorityLocal;\n  uint32_t priorityGroupLocal;\n  uint32_t subPriorityBits;\n  uint32_t preemptPriorityBits;\n  uint32_t priorityGroupTmp;\n  \n  groupBits = priorityGroup & 7;\n  remainingBits = 7 - groupBits;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (groupBits + 4 < 7) {\n    groupBits = 0;\n  }\n  else {\n    groupBits = groupBits - 3;\n  }\n  return subPriority & (1 << (groupBits & 0xff)) - 1U |\n         ((1 << (remainingBits & 0xff)) - 1U & preemptPriority) << (groupBits & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "calculate_priority_08006ba0",
                "PriorityGroup": "priorityGroup",
                "PreemptPriority": "preemptPriority",
                "SubPriority": "subPriority",
                "uVar1": "groupBits",
                "uVar2": "remainingBits",
                "SubPriority_local": "subPriorityLocal",
                "PreemptPriority_local": "preemptPriorityLocal",
                "PriorityGroup_local": "priorityGroupLocal",
                "SubPriorityBits": "subPriorityBits",
                "PreemptPriorityBits": "preemptPriorityBits",
                "PriorityGroupTmp": "priorityGroupTmp"
            },
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "extract_priority_bits_08006c04",
            "code": "\nvoid extractPriorityBits_08006c04(uint32_t originalPriority,uint32_t priorityGroup,uint32_t *preemptPriority,\n                 uint32_t *subPriority)\n\n{\n  uint groupBits;\n  uint remainingBits;\n  uint32_t *subPriority_local;\n  uint32_t *preemptPriority_local;\n  uint32_t priorityGroup_local;\n  uint32_t priority_local;\n  uint32_t subPriorityBits;\n  uint32_t preemptPriorityBits;\n  uint32_t priorityGroupTmp;\n  \n  groupBits = priorityGroup & 7;\n  remainingBits = 7 - groupBits;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (groupBits + 4 < 7) {\n    groupBits = 0;\n  }\n  else {\n    groupBits = groupBits - 3;\n  }\n  *preemptPriority = (1 << (remainingBits & 0xff)) - 1U & originalPriority >> (groupBits & 0xff);\n  *subPriority = (1 << (groupBits & 0xff)) - 1U & originalPriority;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "extract_priority_bits_08006c04",
                "Priority": "originalPriority",
                "PriorityGroup": "priorityGroup",
                "pPreemptPriority": "preemptPriority",
                "pSubPriority": "subPriority",
                "uVar1": "groupBits",
                "uVar2": "remainingBits",
                "pSubPriority_local": "subPriority_local",
                "pPreemptPriority_local": "preemptPriority_local",
                "PriorityGroup_local": "priorityGroup_local",
                "Priority_local": "priority_local",
                "SubPriorityBits": "subPriorityBits",
                "PreemptPriorityBits": "preemptPriorityBits",
                "PriorityGroupTmp": "priorityGroupTmp"
            },
            "calling": [
                "HAL_NVIC_GetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "infinite_loop_08006c70",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_08006c70(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "infinite_loop_08006c70",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "HAL_NVIC_SystemReset"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_tick_validity_08006c9c",
            "code": "\n\n\nuint32_t checkTickValidity_08006c9c(uint32_t inputTicks)\n\n{\n  bool isTickValid;\n  uint32_t localTicks;\n  \n  isTickValid = inputTicks - 1 < 0x1000000;\n  if (isTickValid) {\n    _DAT_e000e014 = inputTicks - 1;\n    NVIC_SetPriority(SysTick_IRQn,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return (uint)!isTickValid;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_tick_validity_08006c9c",
                "ticks": "inputTicks",
                "bVar1": "isTickValid",
                "ticks_local": "localTicks"
            },
            "calling": [
                "HAL_SYSTICK_Config"
            ],
            "called": [
                "NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "set_priority_group_08006ce0",
            "code": "\nvoid setPriorityGroup_08006ce0(uint32_t priorityGroup)\n\n{\n  uint32_t localPriorityGroup;\n  \n  NVIC_SetpriorityGrouping(priorityGroup);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "set_priority_group_08006ce0",
                "PriorityGroup": "priorityGroup",
                "PriorityGroup_local": "localPriorityGroup"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "set_irq_priority_08006cf6",
            "code": "\nvoid setIRQPriority_08006cf6(irqNumber_Type irqNumber,uint32_t preemptPriority,uint32_t subPriority)\n\n{\n  uint32_t priorityGroup;\n  uint32_t localSubPriority;\n  uint32_t localPreemptPriority;\n  irqNumber_Type localIRQn;\n  uint32_t priorityGrouping;\n  \n  priorityGroup = NVIC_GetPriorityGrouping();\n  priorityGroup = NVIC_EncodePriority(priorityGroup,preemptPriority,subPriority);\n  NVIC_SetPriority(irqNumber,priorityGroup);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "set_irq_priority_08006cf6",
                "IRQn": "irqNumber",
                "PreemptPriority": "preemptPriority",
                "SubPriority": "subPriority",
                "uVar1": "priorityGroup",
                "SubPriority_local": "localSubPriority",
                "PreemptPriority_local": "localPreemptPriority",
                "IRQn_local": "localIRQn",
                "prioritygroup": "priorityGrouping"
            },
            "calling": [
                "enable_tim_interrupt"
            ],
            "called": [
                "NVIC_EncodePriority",
                "NVIC_SetPriority",
                "NVIC_GetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "enable_irq_handler_08006d2e",
            "code": "\nvoid enable_IRQ_handler_08006d2e(IRQ_number_Type IRQ_number)\n\n{\n  IRQ_number_Type local_IRQ_number;\n  \n  NVIC_EnableIRQ(IRQ_number);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "enable_irq_handler_08006d2e",
                "IRQn": "IRQ_number",
                "IRQn_local": "local_IRQ_number"
            },
            "calling": [],
            "called": [
                "NVIC_EnableIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "disable_irq_08006d4a",
            "code": "\nvoid disableIRQ_08006d4a(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  NVIC_DisableIRQ(interruptNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "disable_irq_08006d4a",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [],
            "called": [
                "NVIC_DisableIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "reset_system_08006d66",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid reset_system_08006d66(void)\n\n{\n  reset_interrupt_controller();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "reset_system_08006d66",
                "NVIC_SystemReset": "reset_interrupt_controller"
            },
            "calling": [],
            "called": [
                "NVIC_SystemReset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "initialize_sys_tick_08006d72",
            "code": "\nuint32_t initializeSysTick_08006d72(uint32_t ticksNumber)\n\n{\n  uint32_t configStatus;\n  uint32_t localTicksNumber;\n  \n  configStatus = SysTick_Config(ticksNumber);\n  return configStatus;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "initialize_sys_tick_08006d72",
                "TicksNumb": "ticksNumber",
                "uVar1": "configStatus",
                "TicksNumb_local": "localTicksNumber"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "SysTick_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "get_priority_grouping_08006d8a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getPriorityGrouping_08006d8a(void)\n\n{\n  uint32_t priorityGrouping;\n  \n  priorityGrouping = NVIC_GetPriorityGrouping();\n  return priorityGrouping;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "get_priority_grouping_08006d8a",
                "uVar1": "priorityGrouping"
            },
            "calling": [],
            "called": [
                "NVIC_GetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "decode_priority_and_set_08006d98",
            "code": "\nvoid decodePriorityAndSet_08006d98(interruptNumber_Type interruptNumber,uint32_t priorityGroup,uint32_t *preemptionPriority,\n                 uint32_t *subPriority)\n\n{\n  uint32_t priority;\n  uint32_t *localSubPriority;\n  uint32_t *localPreemptionPriority;\n  uint32_t localPriorityGroup;\n  interruptNumber_Type localInterruptNumber;\n  \n  priority = NVIC_Getpriority(interruptNumber);\n  NVIC_Decodepriority(priority,priorityGroup,preemptionPriority,subPriority);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "decode_priority_and_set_08006d98",
                "IRQn": "interruptNumber",
                "PriorityGroup": "priorityGroup",
                "pPreemptPriority": "preemptionPriority",
                "pSubPriority": "subPriority",
                "Priority": "priority",
                "pSubPriority_local": "localSubPriority",
                "pPreemptPriority_local": "localPreemptionPriority",
                "PriorityGroup_local": "localPriorityGroup",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [],
            "called": [
                "NVIC_GetPriority",
                "NVIC_DecodePriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_pending_irq_08006dc4",
            "code": "\nvoid setPendingIRQ_08006dc4(interruptType_Type interruptType)\n\n{\n  interruptType_Type localInterruptType;\n  \n  NVIC_SetPendingIRQ(interruptType);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_pending_irq_08006dc4",
                "IRQn": "interruptType",
                "IRQn_local": "localInterruptType"
            },
            "calling": [],
            "called": [
                "NVIC_SetPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "get_pending_irq_status_08006de0",
            "code": "\nuint32_t getPendingIRQStatus_08006de0(interrupt_Type interrupt)\n\n{\n  uint32_t status;\n  interrupt_Type localInterrupt;\n  \n  status = NVIC_GetPendingIRQ(interrupt);\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "get_pending_irq_status_08006de0",
                "IRQn": "interrupt",
                "IRQn_local": "localInterrupt",
                "uVar1": "status"
            },
            "calling": [],
            "called": [
                "NVIC_GetPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "clear_irq_pending_08006dfe",
            "code": "\nvoid clearIRQPending_08006dfe(IRQn_Type IRQn)\n\n{\n  IRQn_Type IRQn_local;\n  \n  NVIC_ClearPendingIRQ(IRQn);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "clear_irq_pending_08006dfe"
            },
            "calling": [],
            "called": [
                "NVIC_ClearPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "get_active_interrupt_priority_08006e1a",
            "code": "\nuint32_t getActiveInterruptPriority_08006e1a(interrupt_Type interrupt)\n\n{\n  uint32_t activePriority;\n  interrupt_Type localInterrupt;\n  \n  activePriority = NVIC_GetActive(interrupt);\n  return activePriority;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "get_active_interrupt_priority_08006e1a",
                "IRQn": "interrupt",
                "uVar1": "activePriority",
                "IRQn_local": "localInterrupt"
            },
            "calling": [],
            "called": [
                "NVIC_GetActive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e38": {
            "entrypoint": "0x08006e38",
            "current_name": "update_clock_source_08006e38",
            "code": "\n\n\nvoid updateClockSource_08006e38(uint32_t clockSource)\n\n{\n  uint32_t localClockSource;\n  \n  if (clockSource == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e38": "update_clock_source_08006e38",
                "CLKSource": "clockSource",
                "CLKSource_local": "localClockSource"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e70": {
            "entrypoint": "0x08006e70",
            "current_name": "initialize_system_tick_08006e70",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSystemTick_08006e70(void)\n\n{\n  systemTickCallback();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e70": "initialize_system_tick_08006e70",
                "HAL_SYSTICK_Callback": "systemTickCallback"
            },
            "calling": [],
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e7c": {
            "entrypoint": "0x08006e7c",
            "current_name": "FUNC_08006e7c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08006e7c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e7c": "FUNC_08006e7c"
            },
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "configure_gpio_08006e88",
            "code": "\n\n\nvoid configureGPIO_08006e88(GPIO_TypeDef *port,configTypeDef *config)\n\n{\n  uint32_t alternate;\n  uint mask;\n  uint pinMask;\n  int portIndex;\n  configTypeDef *localConfig;\n  GPIO_TypeDef *localPort;\n  uint32_t temporary;\n  uint32_t currentIO;\n  uint32_t IOposition;\n  uint32_t pos;\n  \n  for (pos = 0; pos < 0x10; pos = pos + 1) {\n    mask = 1 << (pos & 0xff);\n    pinMask = config->Pin & mask;\n    if (pinMask == mask) {\n      if ((config->Mode == 2) || (config->Mode == 0x12)) {\n        alternate = config->Alternate;\n        port->AFR[pos >> 3] = port->AFR[pos >> 3] & ~(0xf << ((pos & 7) << 2));\n        port->AFR[pos >> 3] = port->AFR[pos >> 3] | alternate << ((pos & 7) << 2);\n      }\n      port->MODER = port->MODER & ~(3 << ((pos & 0x7f) << 1));\n      port->MODER = port->MODER | (config->Mode & 3) << ((pos & 0x7f) << 1);\n      if ((((config->Mode == 1) || (config->Mode == 2)) || (config->Mode == 0x11)) ||\n         (config->Mode == 0x12)) {\n        port->OSPEEDR = port->OSPEEDR & ~(3 << ((pos & 0x7f) << 1));\n        port->OSPEEDR = port->OSPEEDR | config->Speed << ((pos & 0x7f) << 1);\n        port->OTYPER = port->OTYPER & ~(1 << (pos & 0xff));\n        port->OTYPER = port->OTYPER | (config->Mode >> 4 & 1) << (pos & 0xff);\n      }\n      port->PUPDR = port->PUPDR & ~(3 << ((pos & 0x7f) << 1));\n      port->PUPDR = port->PUPDR | config->Pull << ((pos & 0x7f) << 1);\n      if ((config->Mode & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((pos >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((pos & 3) << 2)) & *(uint *)(((pos >> 2) + 2) * 4 + 0x40013800);\n        if (port == (GPIO_TypeDef *)0x40020000) {\n          portIndex = 0;\n        }\n        else if (port == (GPIO_TypeDef *)0x40020400) {\n          portIndex = 1;\n        }\n        else if (port == (GPIO_TypeDef *)0x40020800) {\n          portIndex = 2;\n        }\n        else if (port == (GPIO_TypeDef *)0x40020c00) {\n          portIndex = 3;\n        }\n        else if (port == (GPIO_TypeDef *)0x40021000) {\n          portIndex = 4;\n        }\n        else if (port == (GPIO_TypeDef *)0x40021400) {\n          portIndex = 5;\n        }\n        else if (port == (GPIO_TypeDef *)0x40021800) {\n          portIndex = 6;\n        }\n        else if (port == (GPIO_TypeDef *)0x40021c00) {\n          portIndex = 7;\n        }\n        else if (port == (GPIO_TypeDef *)0x40022000) {\n          portIndex = 8;\n        }\n        else if (port == (GPIO_TypeDef *)0x40022400) {\n          portIndex = 9;\n        }\n        else {\n          portIndex = 10;\n        }\n        *(uint *)(((pos >> 2) + 2) * 4 + 0x40013800) =\n             portIndex << ((pos & 3) << 2) | *(uint *)(((pos >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~pinMask & _DAT_40013c00;\n        _DAT_40013c04 = ~pinMask & _DAT_40013c04;\n        if ((config->Mode & 0x10000) != 0) {\n          _DAT_40013c00 = pinMask | _DAT_40013c00;\n        }\n        if ((config->Mode & 0x20000) != 0) {\n          _DAT_40013c04 = pinMask | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~pinMask & _DAT_40013c08;\n        _DAT_40013c0c = ~pinMask & _DAT_40013c0c;\n        if ((config->Mode & 0x100000) != 0) {\n          _DAT_40013c08 = pinMask | _DAT_40013c08;\n        }\n        if ((config->Mode & 0x200000) != 0) {\n          _DAT_40013c0c = pinMask | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "configure_gpio_08006e88",
                "GPIOx": "port",
                "GPIO_Init": "config",
                "uVar1": "alternate",
                "uVar2": "mask",
                "uVar3": "pinMask",
                "iVar4": "portIndex",
                "GPIO_Init_local": "localConfig",
                "GPIOx_local": "localPort",
                "temp": "temporary",
                "iocurrent": "currentIO",
                "ioposition": "IOposition",
                "position": "pos"
            },
            "calling": [
                "gpio_init",
                "HAL_RCC_MCOConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071d0": {
            "entrypoint": "0x080071d0",
            "current_name": "configure_gpio_080071d0",
            "code": "\n\n\nvoid configureGPIO_080071d0(GPIOType *gpio,uint32_t pin)\n\n{\n  uint bitMask;\n  uint bitCheck;\n  uint32_t pin_local;\n  GPIOType *gpio_local;\n  uint32_t temp;\n  uint32_t io_current;\n  uint32_t io_position;\n  uint32_t current_position;\n  \n  for (current_position = 0; current_position < 0x10; current_position = current_position + 1) {\n    bitMask = 1 << (current_position & 0xff);\n    bitCheck = bitMask & pin;\n    if (bitCheck == bitMask) {\n      gpio->MODER = gpio->MODER & ~(3 << ((current_position & 0x7f) << 1));\n      gpio->AFR[current_position >> 3] = gpio->AFR[current_position >> 3] & ~(0xf << ((current_position & 7) << 2));\n      gpio->OSPEEDR = gpio->OSPEEDR & ~(3 << ((current_position & 0x7f) << 1));\n      gpio->OTYPER = gpio->OTYPER & ~(1 << (current_position & 0xff));\n      gpio->PUPDR = gpio->PUPDR & ~(3 << ((current_position & 0x7f) << 1));\n      *(uint *)(((current_position >> 2) + 2) * 4 + 0x40013800) =\n           ~(0xf << ((current_position & 3) << 2)) & *(uint *)(((current_position >> 2) + 2) * 4 + 0x40013800);\n      _DAT_40013c00 = ~bitCheck & _DAT_40013c00;\n      _DAT_40013c04 = ~bitCheck & _DAT_40013c04;\n      _DAT_40013c08 = ~bitCheck & _DAT_40013c08;\n      _DAT_40013c0c = ~bitCheck & _DAT_40013c0c;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071d0": "configure_gpio_080071d0",
                "GPIO_TypeDef": "GPIOType",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin",
                "GPIO_Pin_local": "pin_local",
                "GPIOx_local": "gpio_local",
                "tmp": "temp",
                "iocurrent": "io_current",
                "ioposition": "io_position",
                "position": "current_position",
                "uVar1": "bitMask",
                "uVar2": "bitCheck"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007310": {
            "entrypoint": "0x08007310",
            "current_name": "check_gpio_pin_state_08007310",
            "code": "\npin_numberState check_GPIO_PinState_08007310(GPIO_TypeDef *GPIO_port,uint16_t pin_number)\n\n{\n  uint16_t local_pin_number;\n  GPIO_TypeDef *local_GPIO_port;\n  pin_numberState pin_state;\n  \n  return ((uint)pin_number & GPIO_port->IDR) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007310": "check_gpio_pin_state_08007310",
                "GPIOx": "GPIO_port",
                "GPIO_Pin": "pin_number",
                "GPIO_Pin_local": "local_pin_number",
                "GPIOx_local": "local_GPIO_port",
                "bitstatus": "pin_state"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "set_gpio_pin_state_0800733e",
            "code": "\nvoid set_GPIO_PinState_0800733e(GPIO_TypeDef *selected_GPIO,uint16_t selected_Pin,selected_PinState desired_PinState)\n\n{\n  selected_PinState desired_PinState_local;\n  uint16_t selected_Pin_local;\n  GPIO_TypeDef *selected_GPIO_local;\n  \n  if (desired_PinState == GPIO_PIN_RESET) {\n    selected_GPIO->BSRRH = selected_Pin;\n  }\n  else {\n    selected_GPIO->BSRRL = selected_Pin;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "set_gpio_pin_state_0800733e",
                "GPIOx": "selected_GPIO",
                "GPIO_Pin": "selected_Pin",
                "PinState": "desired_PinState",
                "PinState_local": "desired_PinState_local",
                "GPIO_Pin_local": "selected_Pin_local",
                "GPIOx_local": "selected_GPIO_local"
            },
            "calling": [
                "gpio_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800736c": {
            "entrypoint": "0x0800736c",
            "current_name": "toggle_gpio_0800736c",
            "code": "\nvoid toggleGPIO_0800736c(GPIO_TypeDef *gpio,uint16_t pin)\n\n{\n  uint16_t pin_local;\n  GPIO_TypeDef *gpio_local;\n  \n  gpio->ODR = gpio->ODR ^ (uint)pin;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800736c": "toggle_gpio_0800736c",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "handle_gpio_pin_change_0800738e",
            "code": "\n\n\nvoid handle_gpio_pin_change_0800738e(uint16_t pin)\n\n{\n  uint16_t local_pin;\n  \n  if ((pin & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)pin;\n    HAL_GPIO_EXTI_Callback(pin);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "handle_gpio_pin_change_0800738e",
                "GPIO_Pin": "pin",
                "GPIO_Pin_local": "local_pin"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "configure_gpio_pin_080073c0",
            "code": "\nvoid configure_GPIO_Pin_080073c0(uint16_t pin)\n\n{\n  uint16_t pin_local;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "configure_gpio_pin_080073c0",
                "GPIO_Pin": "pin"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "set_bit_in_short_array_080073d4",
            "code": "\nvoid setBitInShortArray_080073d4(inumbert number)\n\n{\n  inumbert localNumber;\n  \n  *(short *)((number >> 4) * 0x400 + 0x4002001a) = (short)(1 << (number & 0xfU));\n  returnumber;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "set_bit_in_short_array_080073d4",
                "n": "number",
                "n_local": "localNumber"
            },
            "calling": [
                "debounce_off_handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "set_bit_in_memory_08007402",
            "code": "\nvoid setBitInMemory_08007402(iinputNumbert inputNumber)\n\n{\n  iinputNumbert localNumber;\n  \n  *(short *)((inputNumber >> 4) * 0x400 + 0x40020018) = (short)(1 << (inputNumber & 0xfU));\n  returinputNumber;\n}\n\n",
            "renaming": {
                "FUN_08007402": "set_bit_in_memory_08007402",
                "n": "inputNumber",
                "n_local": "localNumber"
            },
            "calling": [
                "debounce_on_handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "endless_loop_08007430",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid endlessLoop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "endless_loop_08007430"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "initialize_system_08007436",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeSystem_08007436(void)\n\n{\n  HAL_StatusTypeDef status;\n  RCC_OscInitTypeDef oscInitStruct;\n  RCC_ClkInitTypeDef clkInitStruct;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  oscInitStruct.OscillatorType = 1;\n  oscInitStruct.HSEState = 1;\n  oscInitStruct.PLL.PLLState = 2;\n  oscInitStruct.PLL.PLLSource = 0x400000;\n  oscInitStruct.PLL.PLLM = 8;\n  oscInitStruct.PLL.PLLN = 0x150;\n  oscInitStruct.PLL.PLLP = 2;\n  oscInitStruct.PLL.PLLQ = 7;\n  status = HAL_RCC_OscConfig(&oscInitStruct);\n  if (status != HAL_OK) {\n    Error_Handler();\n  }\n  clkInitStruct.ClockType = 0xf;\n  clkInitStruct.SYSCLKSource = 2;\n  clkInitStruct.AHBCLKDivider = 0;\n  clkInitStruct.APB1CLKDivider = 0x1400;\n  clkInitStruct.APB2CLKDivider = 0x1000;\n  status = HAL_RCC_ClockConfig(&clkInitStruct,5);\n  if (status != HAL_OK) {\n    Error_Handler();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "initialize_system_08007436",
                "HVar1": "status",
                "RCC_OscInitStruct": "oscInitStruct",
                "RCC_ClkInitStruct": "clkInitStruct"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_RCC_ClockConfig",
                "Error_Handler",
                "HAL_RCC_OscConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "handle_bits_080074c8",
            "code": "\nvoid handleBits_080074c8(uint32_t inputBits)\n\n{\n  uint32_t localBits;\n  \n  if ((inputBits & 1) != 0) {\n    gpio_set(0x3e);\n  }\n  if ((limits_enabled != 0) && ((inputBits & 0x1e) != 0)) {\n    limits_isr();\n  }\n  if ((buttons_enabled != 0) && ((inputBits & 0x80) != 0)) {\n    buttons_isr(inputBits);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "handle_bits_080074c8",
                "bits": "inputBits",
                "bits_local": "localBits"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "limits_isr",
                "gpio_set",
                "buttons_isr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "clear_gpio_bits_08007520",
            "code": "\nvoid clearGpioBits_08007520(uint32_t inputBits)\n\n{\n  uint32_t localBits;\n  \n  if ((inputBits & 1) != 0) {\n    gpio_clr(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "clear_gpio_bits_08007520",
                "bits": "inputBits",
                "bits_local": "localBits"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "gpio_clr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_grbl_08007540",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint initialize_grbl_08007540(void)\n\n{\n  initialize_HAL();\n  configure_system_clock();\n  initialize_gpio();\n  initialize_timers();\n  initialize_debounce();\n  initialize_usart();\n  start_fork_server(0);\n  run_grbl_main();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_grbl_08007540",
                "HAL_Init": "initialize_HAL",
                "SystemClock_Config": "configure_system_clock",
                "gpio_init": "initialize_gpio",
                "timers_init": "initialize_timers",
                "debounce_init": "initialize_debounce",
                "usart_init": "initialize_usart",
                "startForkserver": "start_fork_server",
                "grbl_main": "run_grbl_main"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "SystemClock_Config",
                "gpio_init",
                "grbl_main",
                "usart_init",
                "HAL_Init",
                "debounce_init",
                "timers_init",
                "startForkserver"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_system_0800756c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initialize_system_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_system_0800756c"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075c8": {
            "entrypoint": "0x080075c8",
            "current_name": "calculate_system_core_clock_080075c8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid calculateSystemCoreClock_080075c8(void)\n\n{\n  uint uVar1;\n  uint32_t pllMultiplier;\n  uint32_t pllSource;\n  uint32_t pllDivider;\n  uint32_t temporary;\n  uint32_t pllVoltageControlOutput;\n  \n  uVar1 = _DAT_40023808 & 0xc;\n  if (uVar1 == 8) {\n    if ((_DAT_40023804 >> 0x16 & 1) == 0) {\n      pllVoltageControlOutput = (_DAT_40023804 >> 6 & 0x1ff) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      pllVoltageControlOutput = (_DAT_40023804 >> 6 & 0x1ff) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    systemCoreClock = pllVoltageControlOutput / (((_DAT_40023804 >> 0x10 & 3) + 1) * 2);\n    goto LAB_0800768a;\n  }\n  if (uVar1 < 9) {\n    if (uVar1 == 0) {\n      systemCoreClock = 16000000;\n      goto LAB_0800768a;\n    }\n    if (uVar1 == 4) {\n      systemCoreClock = 8000000;\n      goto LAB_0800768a;\n    }\n  }\n  systemCoreClock = 16000000;\nLAB_0800768a:\n  systemCoreClock = systemCoreClock >> ahbPrescalerTable[_DAT_40023808 >> 4 & 0xf];\n  return;\n}\n\n",
            "renaming": {
                "FUN_080075c8": "calculate_system_core_clock_080075c8",
                "pllm": "pllMultiplier",
                "pllsource": "pllSource",
                "pllp": "pllDivider",
                "tmp": "temporary",
                "pllvco": "pllVoltageControlOutput",
                "SystemCoreClock": "systemCoreClock",
                "AHBPrescTable": "ahbPrescalerTable"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "update_bit_080076c8",
            "code": "\nvoid updateBit_080076c8(iinputNumt inputNum)\n\n{\n  iinputNumt localNum;\n  \n  *(uiinputNumt *)((inputNum >> 4) * 0x400 + 0x40020014) =\n       *(uiinputNumt *)((inputNum >> 4) * 0x400 + 0x40020014) ^ 1 << (inputNum & 0xfU);\n  returinputNum;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "update_bit_080076c8",
                "n": "inputNum",
                "n_local": "localNum"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800770e": {
            "entrypoint": "0x0800770e",
            "current_name": "FUNC_0800770e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800770e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800770e": "FUNC_0800770e"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800771a": {
            "entrypoint": "0x0800771a",
            "current_name": "infinite_loop_0800771a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_0800771a(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800771a": "infinite_loop_0800771a"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007720": {
            "entrypoint": "0x08007720",
            "current_name": "run_infinite_loop_08007720",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid runInfiniteLoop_08007720(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007720": "run_infinite_loop_08007720"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007726": {
            "entrypoint": "0x08007726",
            "current_name": "infinite_loop_08007726",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_08007726(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007726": "infinite_loop_08007726"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800772c": {
            "entrypoint": "0x0800772c",
            "current_name": "infinite_loop_0800772c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_0800772c(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800772c": "infinite_loop_0800772c"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007732": {
            "entrypoint": "0x08007732",
            "current_name": "FUNC_08007732",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08007732(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007732": "FUNC_08007732"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800773e": {
            "entrypoint": "0x0800773e",
            "current_name": "FUNC_0800773e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800773e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800773e": "FUNC_0800773e"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "FUNC_0800774a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800774a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "FUNC_0800774a"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "update_gpio_and_tick_08007756",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateGPIOAndTick_08007756(void)\n\n{\n  uint32_t currentTick;\n  uint32_t tickCount;\n  \n  currentTick = HAL_GetTick();\n  if ((currentTick & 0x1ff) == 0) {\n    gpio_toggle(0x3c);\n  }\n  if ((currentTick & 0xf) == 0) {\n    debounce_isr();\n  }\n  HAL_IncTick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "update_gpio_and_tick_08007756",
                "uVar1": "currentTick",
                "ticks": "tickCount"
            },
            "calling": [],
            "called": [
                "HAL_GetTick",
                "debounce_isr",
                "gpio_toggle",
                "HAL_IncTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "initialize_gpio_0800778c",
            "code": "\n\n/* WARNING: Unknown callindexng conventindexon */\n\nvoindexd initializeGPIO_0800778c(voindexd)\n\n{\n  GPIO_INFO *currentGPIO;\n  GPIO_InindextTypeDef gpioInit;\n  GPIO_INFO *gpioInfo;\n  indexnt index;\n  \n  for (index = 0; (uindexnt)index < 0x11; index = index + 1) {\n    currentGPIO = gpioInfo_indexnfo + index;\n    _DAT_40023830 = _DAT_40023830 | 1 << (currentGPIO->num >> 4 & 0xff);\n    gpioInit.Pindexn = 1 << (currentGPIO->num & 0xf);\n    gpioInit.Mode = gpioInfo_indexnfo[index].mode;\n    gpioInit.Pull = gpioInfo_indexnfo[index].pull;\n    gpioInit.Speed = gpioInfo_indexnfo[index].speed;\n    gpioInit.Alternate = gpioInfo_indexnfo[index].alt;\n    HAL_GPIO_Inindext((GPIO_TypeDef *)(((currentGPIO->num >> 4) + 0x100080) * 0x400),&gpioInit);\n    indexf (-1 < gpioInfo_indexnfo[index].indexnindext) {\n      HAL_GPIO_WrindextePindexn((GPIO_TypeDef *)(((currentGPIO->num >> 4) + 0x100080) * 0x400),\n                        (uindexnt16_t)(1 << (currentGPIO->num & 0xf)),(GPIO_PindexnState)gpioInfo_indexnfo[index].indexnindext);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "initialize_gpio_0800778c",
                "GPIO_InitStruct": "gpioInit",
                "pGVar1": "currentGPIO",
                "gpio": "gpioInfo",
                "i": "index"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_GPIO_Init",
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "check_bit_value_08007854",
            "code": "\niinput_numbert check_bit_value_08007854(iinput_numbert input_number)\n\n{\n  iinput_numbert local_number;\n  \n  returinput_number *(uiinput_numbert *)((input_number >> 4) * 0x400 + 0x40020010) >> (input_number & 0xfU) & 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "check_bit_value_08007854",
                "n": "input_number",
                "n_local": "local_number"
            },
            "calling": [
                "debounce_input"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "get_gpio_flags_08007884",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t get_gpio_flags_08007884(void)\n\n{\n  int port1_flag;\n  int port2_flag;\n  int port3_flag;\n  int port4_flag;\n  int port5_flag;\n  uint port0_flag;\n  \n  port1_flag = gpio_rd(0x36);\n  port2_flag = gpio_rd(0x37);\n  port3_flag = gpio_rd(0x38);\n  port4_flag = gpio_rd(0x39);\n  port5_flag = gpio_rd(0xf);\n  port0_flag = gpio_rd(0);\n  return port0_flag | port1_flag << 4 | port2_flag << 3 | port3_flag << 2 | port4_flag << 1 | port5_flag << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "get_gpio_flags_08007884",
                "iVar1": "port1_flag",
                "iVar2": "port2_flag",
                "iVar3": "port3_flag",
                "iVar4": "port4_flag",
                "iVar5": "port5_flag",
                "uVar6": "port0_flag"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "gpio_rd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078d0": {
            "entrypoint": "0x080078d0",
            "current_name": "process_bits_080078d0",
            "code": "\nvoid processBits_080078d0(uint32_t numberOfBits)\n\n{\n  uint value;\n  int inputValue;\n  undefined4 result1;\n  undefined4 result2;\n  uint condition;\n  int updatedValue;\n  int baseAddress;\n  char negativeFlag;\n  undefined carryFlag;\n  char overflowFlag;\n  undefined4 coprocessorValue;\n  uint32_t localBits;\n  \n  if (negativeFlag != overflowFlag) {\n    updatedValue = inputValue + numberOfBits * 0x200;\n  }\n  if ((bool)overflowFlag) {\n    value = numberOfBits * 0x40000000;\n    carryFlag = condition <= value;\n    overflowFlag = SBORROW4(value,condition);\n    negativeFlag = (int)(value - condition) < 0;\n  }\n  if (!(bool)carryFlag) {\n    *(int *)(baseAddress + numberOfBits * -0x40000000) = updatedValue;\n  }\n  if (negativeFlag == overflowFlag) {\n    software_interrupt(0xb083);\n  }\n  else {\n    coprocessor_store(6,coprocessorValue,numberOfBits);\n    *(undefined4 *)numberOfBits = result1;\n    software_interrupt(0x6078);\n  }\n  if ((bool)negativeFlag) {\n    registerOffset = (BADSPACEBASE *)(&stack0x00000000 + baseAddress * 0x4000);\n  }\n  *(undefined4 *)((int)registerOffset + -4) = result2;\n  *(undefined4 *)((int)registerOffset + -0xc) = 0;\n  *(undefined4 *)((int)registerOffset + -0x10) = 0;\n  while (*(int *)((int)registerOffset + -0x10) < 4) {\n    *(uint32_t *)((int)registerOffset + -0xc) =\n         debounce.sample[*(int *)((int)registerOffset + -0x10)] |\n         *(uint *)((int)registerOffset + -0xc);\n    *(int *)((int)registerOffset + -0x10) = *(int *)((int)registerOffset + -0x10) + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078d0": "process_bits_080078d0",
                "bits": "numberOfBits",
                "uVar1": "value",
                "in_r3": "inputValue",
                "unaff_r4": "result1",
                "unaff_r7": "result2",
                "unaff_r8": "condition",
                "unaff_r11": "updatedValue",
                "in_r12": "baseAddress",
                "in_NG": "negativeFlag",
                "in_CY": "carryFlag",
                "in_OV": "overflowFlag",
                "in_cr4": "coprocessorValue",
                "bits_local": "localBits",
                "register0x00000054": "registerOffset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078e2": {
            "entrypoint": "0x080078e2",
            "current_name": "update_variable_basedon_bits_080078e2",
            "code": "\nvoid updateVariableBasedonBits_080078e2(uint32_t inputBits)\n\n{\n  uint multiplier;\n  int valueToAdd;\n  undefined4 storeValue;\n  uint comparisonValue;\n  int newValue;\n  int arrayPointer;\n  char negativeFlag;\n  undefined carryFlag;\n  char overflowFlag;\n  undefined4 coprocessorRegister;\n  uint32_t iterationCount;\n  \n  if (negativeFlag != overflowFlag) {\n    newValue = valueToAdd + inputBits * 0x200;\n  }\n  if ((bool)overflowFlag) {\n    multiplier = inputBits * 0x40000000;\n    carryFlag = comparisonValue <= multiplier;\n    overflowFlag = SBORROW4(multiplier,comparisonValue);\n    negativeFlag = (int)(multiplier - comparisonValue) < 0;\n  }\n  if (!(bool)carryFlag) {\n    *(int *)(arrayPointer + inputBits * -0x40000000) = newValue;\n  }\n  if (negativeFlag != overflowFlag) {\n    coprocessor_store(6,coprocessorRegister,inputBits);\n    *(undefined4 *)inputBits = storeValue;\n  }\n  for (iterationCount = 0; (int)iterationCount < 4; iterationCount = iterationCount + 1) {\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078e2": "update_variable_basedon_bits_080078e2",
                "bits": "inputBits",
                "uVar1": "multiplier",
                "in_r3": "valueToAdd",
                "unaff_r4": "storeValue",
                "unaff_r8": "comparisonValue",
                "unaff_r11": "newValue",
                "in_r12": "arrayPointer",
                "in_NG": "negativeFlag",
                "in_CY": "carryFlag",
                "in_OV": "overflowFlag",
                "in_cr4": "coprocessorRegister",
                "bits_local": "iterationCount"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "calculate_combined_state_080078f4",
            "code": "\n/* WARNING: Unknown callindexng conventindexon */\n\nuindexnt32_t calculateCombinedState_080078f4(voindexd)\n\n{\n  indexnt index;\n  uindexnt32_t combinedState;\n  \n  combinedState = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    combinedState = sampleValues[index] | combinedState;\n  }\n  return combinedState;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "calculate_combined_state_080078f4",
                "i": "index",
                "state": "combinedState",
                "debounce.sample": "sampleValues"
            },
            "calling": [
                "debounce_isr",
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "debounce_handler_08007930",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid debounceHandler_08007930(void)\n\n{\n  int index;\n  uint32_t currentState;\n  uint32_t newState;\n  uint changedBits;\n  uint32_t turnOffBits;\n  uint32_t turnOnBits;\n  uint32_t debounceState;\n  DEBOUNCE_CTRL *db;\n  \n  index = debounce.idx;\n  currentState = debounce.debounceState;\n  if (debounce_ready != 0) {\n    currentState = debounce_input();\n    debounce.sample[index] = currentState;\n    if (debounce.idx == 3) {\n      debounce.idx = 0;\n    }\n    else {\n      debounce.idx = debounce.idx + 1;\n    }\n    newState = debounce_rd();\n    currentState = debounce.debounceState;\n    if (newState != debounce.debounceState) {\n      changedBits = ~newState & debounce.debounceState;\n      if ((~debounce.debounceState & newState) != 0) {\n        debounce_on_handler(~debounce.debounceState & newState);\n      }\n      currentState = newState;\n      if (changedBits != 0) {\n        debounce_off_handler(changedBits);\n      }\n    }\n  }\n  debounce.debounceState = currentState;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "debounce_handler_08007930",
                "iVar1": "index",
                "uVar2": "currentState",
                "uVar3": "newState",
                "bits": "changedBits",
                "off_bits": "turnOffBits",
                "on_bits": "turnOnBits",
                "state": "debounceState"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "debounce_input",
                "debounce_off_handler",
                "debounce_on_handler",
                "debounce_rd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_debounce_080079c0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeDebounce_080079c0(void)\n\n{\n  memset(&debounceData,0,0x18);\n  isDebounceReady = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_debounce_080079c0",
                "debounce": "debounceData",
                "debounce_ready": "isDebounceReady"
            },
            "calling": [
                "main"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_irq_enabled_080079e0",
            "code": "\nvoid setIRQEnabled_080079e0(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  *(int *)(((uint)(int)interruptNumber >> 5) * 4 + -0x1fff1f00) = 1 << (interruptNumber & 0x1fU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_irq_enabled_080079e0",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "enable_tim_interrupt"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "update_tim_status_08007a10",
            "code": "\n\n\nvoid update_TIM_status_08007a10(TIM_TypeDef *tim_ptr)\n\n{\n  TIM_TypeDef *local_tim_ptr;\n  \n  if (tim_ptr == (TIM_TypeDef *)&DAT_40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (tim_ptr == (TIM_TypeDef *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (tim_ptr == (TIM_TypeDef *)&DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "update_tim_status_08007a10",
                "tim": "tim_ptr",
                "tim_local": "local_tim_ptr"
            },
            "calling": [
                "step_timer_init",
                "g540_timer_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "configure_timer_interrupt_08007a70",
            "code": "\nvoid configureTimerInterrupt_08007a70(TIM_TypeDef *timer,uint32_t priority,uint32_t subpriority)\n\n{\n  uint32_t subPriority_local;\n  uint32_t priority_local;\n  TIM_TypeDef *timer_local;\n  uint32_t interrupt;\n  \n  if (timer == (TIM_TypeDef *)&DAT_40000000) {\n    interrupt._0_1_ = TIM2_IRQn;\n  }\n  else if (timer == (TIM_TypeDef *)0x40000400) {\n    interrupt._0_1_ = TIM3_IRQn;\n  }\n  else {\n    if (timer != (TIM_TypeDef *)&DAT_40000800) {\n      return;\n    }\n    interrupt._0_1_ = TIM4_IRQn;\n  }\n  HAL_NVIC_SetPriority((IRQn_Type)interrupt,priority,subpriority);\n  NVIC_EnableIRQ((IRQn_Type)interrupt);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "configure_timer_interrupt_08007a70",
                "tim": "timer",
                "pre": "priority",
                "sub": "subpriority",
                "sub_local": "subPriority_local",
                "pre_local": "priority_local",
                "tim_local": "timer_local",
                "irq": "interrupt"
            },
            "calling": [
                "step_timer_init"
            ],
            "called": [
                "NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_timer_08007ad0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimer_08007ad0(void)\n\n{\n  TIM_TypeDef *timer;\n  \n  enable_tim_clock((TIM_TypeDef *)&DAT_40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = SystemCoreClock / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  enable_tim_interrupt((TIM_TypeDef *)&DAT_40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_timer_08007ad0",
                "TIMx": "timer"
            },
            "calling": [
                "timers_init"
            ],
            "called": [
                "enable_tim_clock",
                "enable_tim_interrupt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "enable_timers_08007b70",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid enableTimers_08007b70(void)\n\n{\n  TIM_TypeDef *timer;\n  uint32_t enableCode;\n  \n  enableCode = 1;\n  if (_DAT_40000034 != 0) {\n    enableCode = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    enableCode = enableCode | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | enableCode;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "enable_timers_08007b70",
                "TIMx": "timer",
                "enable": "enableCode"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "clear_timer_registers_08007bc2",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid clearTimerRegisters_08007bc2(void)\n\n{\n  TIM_TypeDef *timer;\n  \n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "clear_timer_registers_08007bc2",
                "TIMx": "timer"
            },
            "calling": [
                "st_go_idle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "set_ticks_and_limit_08007bf0",
            "code": "\n\n\nvoid setTicksAndLimit_08007bf0(uint32_t ticksValue)\n\n{\n  uint32_t localTicks;\n  uint32_t savedTicks;\n  TIM_TypeDef *timerInstance;\n  \n  _DAT_4000002c = ticksValue;\n  if (ticksValue <= _DAT_40000024) {\n    _DAT_40000024 = ticksValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "set_ticks_and_limit_08007bf0",
                "ticks": "ticksValue",
                "ticks_local": "localTicks",
                "saved": "savedTicks",
                "TIMx": "timerInstance"
            },
            "calling": [
                "set_step_events_per_minute"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "set_timer_ticks_08007c40",
            "code": "\n\n\nvoid setTimerTicks_08007c40(uint32_t ticks)\n\n{\n  uint32_t localTicks;\n  TIM_TypeDef *timer;\n  \n  _DAT_40000034 = ticks;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "set_timer_ticks_08007c40",
                "ticks_local": "localTicks",
                "TIMx": "timer"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "set_timer_ticks_08007c5e",
            "code": "\n\n\nvoid setTimerTicks_08007c5e(uint32_t ticksValue)\n\n{\n  uint32_t localTicks;\n  TIM_TypeDef *timerInstance;\n  \n  _DAT_40000038 = ticksValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "set_timer_ticks_08007c5e",
                "ticks": "ticksValue",
                "ticks_local": "localTicks",
                "TIMx": "timerInstance"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "handle_interrupts_08007c7c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid handle_interrupts_08007c7c(void)\n\n{\n  TIM_TypeDef *timer;\n  \n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    step_delay_isr();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    step_pulse_isr();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    step_period_isr();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "handle_interrupts_08007c7c",
                "TIMx": "timer"
            },
            "calling": [],
            "called": [
                "step_delay_isr",
                "step_period_isr",
                "step_pulse_isr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "configure_timer_08007d08",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid configureTimer_08007d08(void)\n\n{\n  TIM_TypeDef *timer;\n  \n  enableTimerClock((TIM_TypeDef *)&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = SystemCoreClock / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "configure_timer_08007d08",
                "TIMx": "timer",
                "enable_tim_clock": "enableTimerClock"
            },
            "calling": [
                "timers_init"
            ],
            "called": [
                "enable_tim_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "initialize_timer_08007da8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initialize_Timer_08007da8(void)\n\n{\n  TIM_TypeDef *timer;\n  \n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "initialize_timer_08007da8",
                "TIMx": "timer"
            },
            "calling": [
                "timers_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007dd8": {
            "entrypoint": "0x08007dd8",
            "current_name": "initialize_tim_08007dd8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initialize_TIM_08007dd8(void)\n\n{\n  TIM_TypeDef *timer_peripheral;\n  \n  _DAT_40000800 = _DAT_40000800 & 0xfffffffe;\n  _DAT_40000820 = _DAT_40000820 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007dd8": "initialize_tim_08007dd8",
                "TIMx": "timer_peripheral"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_timer_08007e08",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_timer_08007e08(void)\n\n{\n  initialize_step_timer();\n  initialize_g540_timer();\n  start_g540_timer();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_timer_08007e08",
                "step_timer_init": "initialize_step_timer",
                "g540_timer_init": "initialize_g540_timer",
                "g540_timer_start": "start_g540_timer"
            },
            "calling": [
                "main"
            ],
            "called": [
                "step_timer_init",
                "g540_timer_start",
                "g540_timer_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "send_data_to_usart_08007e1c",
            "code": "\n\n\nvoid sendDataToUSART_08007e1c(char c)\n\n{\n  char localData;\n  USART_TypeDef *usartInterface;\n  \n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)(byte)c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "send_data_to_usart_08007e1c",
                "c_local": "localData",
                "usart": "usartInterface"
            },
            "calling": [
                "serial_write",
                "__io_putchar"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e4c": {
            "entrypoint": "0x08007e4c",
            "current_name": "FUNC_08007e4c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08007e4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e4c": "FUNC_08007e4c"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "check_usart_flag_08007e58",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nint check_USART_flag_08007e58(void)\n\n{\n  USART_TypeDef *usart;\n  \n  return (uint)((_DAT_40004400 & 0x20) != 0);\n}\n\n",
            "renaming": {
                "FUN_08007e58": "check_usart_flag_08007e58"
            },
            "calling": [
                "serial_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_usart_status_08007e84",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nchar getUSARTStatus_08007e84(void)\n\n{\n  USART_TypeDef *usart_register;\n  \n  return (char)_DAT_40004404;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_usart_status_08007e84",
                "usart": "usart_register"
            },
            "calling": [
                "serial_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "configure_usart_08007ea4",
            "code": "\n\n\nvoid configureUSART_08007ea4(USART_TypeDef *usartPtr)\n\n{\n  USART_TypeDef *localUSARTPtr;\n  \n  if (usartPtr == (USART_TypeDef *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (usartPtr == (USART_TypeDef *)&DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (usartPtr == (USART_TypeDef *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (usartPtr == (USART_TypeDef *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (usartPtr == (USART_TypeDef *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (usartPtr == (USART_TypeDef *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "configure_usart_08007ea4",
                "usart": "usartPtr",
                "usart_local": "localUSARTPtr"
            },
            "calling": [
                "usart_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "initialize_usart_08007f54",
            "code": "\nvoid initializeUSART_08007f54(USART_TypeDef *usartInstance,int baudRate)\n\n{\n  uint32_t pclkFreq1;\n  uint32_t pclkFreq2;\n  uint32_t pclkFreq3;\n  int baudRate_local;\n  USART_TypeDef *usartInstance_local;\n  \n  if ((usartInstance->CR1 & 0x8000) == 0) {\n    if ((usartInstance == (USART_TypeDef *)0x40011000) || (usartInstance == (USART_TypeDef *)0x40011400)) {\n      pclkFreq1 = HAL_RCC_GetPCLK2Freq();\n      pclkFreq2 = HAL_RCC_GetPCLK2Freq();\n      pclkFreq3 = HAL_RCC_GetPCLK2Freq();\n      usartInstance->BRR = (int)(((ulonglong)(pclkFreq1 * 0x19) / (ulonglong)(uint)(baudRate << 2)) / 100) << 4 |\n                   (((pclkFreq2 * 0x19) / (uint)(baudRate << 2) +\n                    (int)(((ulonglong)(pclkFreq3 * 0x19) / (ulonglong)(uint)(baudRate << 2)) / 100) * -100)\n                    * 0x10 + 0x32) / 100 & 0xf;\n    }\n    else {\n      pclkFreq1 = HAL_RCC_GetPCLK1Freq();\n      pclkFreq2 = HAL_RCC_GetPCLK1Freq();\n      pclkFreq3 = HAL_RCC_GetPCLK1Freq();\n      usartInstance->BRR = (int)(((ulonglong)(pclkFreq1 * 0x19) / (ulonglong)(uint)(baudRate << 2)) / 100) << 4 |\n                   (((pclkFreq2 * 0x19) / (uint)(baudRate << 2) +\n                    (int)(((ulonglong)(pclkFreq3 * 0x19) / (ulonglong)(uint)(baudRate << 2)) / 100) * -100)\n                    * 0x10 + 0x32) / 100 & 0xf;\n    }\n  }\n  else if ((usartInstance == (USART_TypeDef *)0x40011000) || (usartInstance == (USART_TypeDef *)0x40011400)) {\n    pclkFreq1 = HAL_RCC_GetPCLK2Freq();\n    pclkFreq2 = HAL_RCC_GetPCLK2Freq();\n    pclkFreq3 = HAL_RCC_GetPCLK2Freq();\n    usartInstance->BRR = (int)(((ulonglong)(pclkFreq1 * 0x19) / (ulonglong)(uint)(baudRate << 1)) / 100) << 4 |\n                 (((pclkFreq2 * 0x19) / (uint)(baudRate << 1) +\n                  (int)(((ulonglong)(pclkFreq3 * 0x19) / (ulonglong)(uint)(baudRate << 1)) / 100) * -100) *\n                  0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    pclkFreq1 = HAL_RCC_GetPCLK1Freq();\n    pclkFreq2 = HAL_RCC_GetPCLK1Freq();\n    pclkFreq3 = HAL_RCC_GetPCLK1Freq();\n    usartInstance->BRR = (int)(((ulonglong)(pclkFreq1 * 0x19) / (ulonglong)(uint)(baudRate << 1)) / 100) << 4 |\n                 (((pclkFreq2 * 0x19) / (uint)(baudRate << 1) +\n                  (int)(((ulonglong)(pclkFreq3 * 0x19) / (ulonglong)(uint)(baudRate << 1)) / 100) * -100) *\n                  0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "initialize_usart_08007f54",
                "usart": "usartInstance",
                "baud": "baudRate",
                "baud_local": "baudRate_local",
                "usart_local": "usartInstance_local",
                "uVar1": "pclkFreq1",
                "uVar2": "pclkFreq2",
                "uVar3": "pclkFreq3"
            },
            "calling": [
                "usart_init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "initialize_usart_08008190",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeUSART_08008190(void)\n\n{\n  uint32_t value;\n  USART_TypeDef *USART;\n  \n  enable_USART_clock((USART_TypeDef *)&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  set_baud_rate((USART_TypeDef *)&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "initialize_usart_08008190",
                "val": "value",
                "usart": "USART"
            },
            "calling": [
                "main"
            ],
            "called": [
                "set_baud_rate",
                "enable_usart_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "transmit_data_08008250",
            "code": "\nvoid transmitData_08008250(uint8_t transmittedData)\n\n{\n  uint8_t transmittedData_local;\n  \n  usart_putc(transmittedData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "transmit_data_08008250",
                "data": "transmittedData",
                "data_local": "transmittedData_local"
            },
            "calling": [
                "printString",
                "print_base2",
                "printFloat",
                "printPgmString",
                "print_uint32_base10",
                "printInteger"
            ],
            "called": [
                "usart_putc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "print_character_0800826a",
            "code": "\nint print_character_0800826a(int character)\n\n{\n  int character_local;\n  \n  usart_putc((characterar)character);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "print_character_0800826a",
                "ch": "character"
            },
            "calling": [],
            "called": [
                "usart_putc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "read_serial_data_08008286",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t read_serial_data_08008286(void)\n\n{\n  uint8_t received_byte;\n  int data_available;\n  uint8_t c;\n  \n  data_available = usart_tstc();\n  if (data_available != 0) {\n    received_byte = usart_getc();\n    data_available = serial_rx_hook(received_byte);\n    if (data_available == 0) {\n      return received_byte;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "read_serial_data_08008286",
                "iVar1": "data_available",
                "data": "received_byte"
            },
            "calling": [
                "protocol_process"
            ],
            "called": [
                "usart_getc",
                "usart_tstc",
                "serial_rx_hook"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082c8": {
            "entrypoint": "0x080082c8",
            "current_name": "add_unsigned_integer_with_constant_080082c8",
            "code": "\nvoid addUnsignedIntegerWithConstant_080082c8(undefined4 destination,uint source)\n\n{\n  __aeabi_dadd(destination,source ^ 0x80000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082c8": "add_unsigned_integer_with_constant_080082c8",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [],
            "called": [
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "calculate_080082d0",
            "code": "\nulonglong calculate_080082d0(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int shiftAmount1;\n  byte carry1;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int shiftAmount2;\n  uint resultHigh;\n  uint temp6;\n  uint resultLow;\n  uint temp7;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp4 = num4 ^ 0x80000000;\n  resultHigh = num2 << 1;\n  num4 = num4 << 1;\n  condition1 = ((num2 ^ temp4) & 0x7fffffff) == 0;\n  condition2 = condition1 && num1 == num3;\n  if (!condition1 || num1 != num3) {\n    condition2 = (resultHigh | num1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (num4 | num3) == 0;\n  }\n  shiftAmount2 = (int)resultHigh >> 0x15;\n  if (!condition2) {\n    condition2 = shiftAmount2 == -1;\n  }\n  shiftAmount1 = (int)num4 >> 0x15;\n  if (!condition2) {\n    condition2 = shiftAmount1 == -1;\n  }\n  if (condition2) {\n    if (shiftAmount2 == -1 || shiftAmount1 == -1) {\n      resultHigh = temp4;\n      resultLow = num3;\n      if (shiftAmount2 == -1) {\n        resultHigh = num2;\n        resultLow = num1;\n      }\n      if (shiftAmount2 != -1 || shiftAmount1 != -1) {\n        num3 = resultLow;\n        temp4 = resultHigh;\n      }\n      condition2 = (resultLow | resultHigh << 0xc) == 0;\n      if (condition2) {\n        condition2 = (num3 | temp4 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = resultHigh == temp4;\n      }\n      if (!condition2) {\n        resultHigh = resultHigh | 0x80000;\n      }\n      return CONCAT44(resultHigh,resultLow);\n    }\n    if (((num2 ^ temp4) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((resultHigh | num1) == 0) {\n        num1 = num3;\n        num2 = temp4;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != temp4) {\n      return 0;\n    }\n    if (resultHigh >> 0x15 == 0) {\n      condition2 = (num1 & 0x80000000) != 0;\n      temp4 = num2 * 2 + (uint)condition2;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)condition2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,num1 << 1);\n    }\n    if (resultHigh < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  resultHigh = resultHigh >> 0x15;\n  num4 = num4 >> 0x15;\n  resultLow = num4 - resultHigh;\n  condition2 = resultLow != 0;\n  if (num4 < resultHigh) {\n    resultLow = -resultLow;\n  }\n  temp6 = num1;\n  temp5 = num2;\n  if (condition2 && resultHigh <= num4) {\n    resultHigh = resultHigh + resultLow;\n    temp6 = num3;\n    temp5 = temp4;\n    num3 = num1;\n    temp4 = num2;\n  }\n  if (0x36 < resultLow) {\n    return CONCAT44(temp5,temp6);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    condition2 = temp6 != 0;\n    temp6 = -temp6;\n    temp2 = -temp2 - (uint)condition2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    condition2 = num3 != 0;\n    num3 = -num3;\n    temp5 = -temp5 - (uint)condition2;\n  }\n  if (resultHigh == resultLow) {\n    temp5 = temp5 ^ 0x100000;\n    if (resultHigh == 0) {\n      temp2 = temp2 ^ 0x100000;\n      resultHigh = 1;\n    }\n    else {\n      resultLow = resultLow - 1;\n    }\n  }\n  temp4 = -resultLow + 0x20;\n  if ((int)resultLow < 0x21) {\n    temp7 = num3 << (temp4 & 0xff);\n    num3 = num3 >> (resultLow & 0xff);\n    temp1 = temp6 + num3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(temp6,num3) + ((int)temp5 >> (resultLow & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    temp7 = temp5 << (-resultLow + 0x40 & 0xff);\n    if (num3 != 0) {\n      temp7 = temp7 | 2;\n    }\n    temp5 = (int)temp5 >> (resultLow - 0x20 & 0xff);\n    temp4 = temp6 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(temp6,temp5);\n  }\n  num2 = temp2 & 0x80000000;\n  resultLow = temp2;\n  if ((int)temp2 < 0) {\n    condition2 = temp7 == 0;\n    temp7 = -temp7;\n    resultLow = -temp4;\n    temp4 = -(uint)!condition2 - temp4;\n    resultLow = -(uint)(condition2 <= resultLow) - temp2;\n  }\n  if (0xfffff < resultLow) {\n    temp6 = resultHigh - 1;\n    if (0x1fffff < resultLow) {\n      temp6 = resultLow & 1;\n      resultLow = resultLow >> 1;\n      carry1 = (byte)temp4;\n      temp4 = (uint)(temp6 != 0) << 0x1f | temp4 >> 1;\n      temp7 = (uint)(carry1 & 1) << 0x1f | temp7 >> 1;\n      temp6 = resultHigh;\n      if (0xffbfffff < resultHigh * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    condition2 = 0x7fffffff < temp7;\n    if (temp7 == 0x80000000) {\n      condition2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(resultLow + temp6 * 0x100000 + (uint)CARRY4(temp4,(uint)condition2) | num2,\n                    temp4 + condition2);\n  }\n  condition1 = (temp7 & 0x80000000) != 0;\n  temp7 = temp7 << 1;\n  temp6 = temp4 * 2;\n  condition2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)condition1;\n  resultLow = resultLow * 2 + (uint)(condition2 || CARRY4(temp6,(uint)condition1));\n  temp6 = resultHigh - 2;\n  if (resultHigh - 1 != 0 && 0xfffff < resultLow) goto LAB_080083e0;\n  temp5 = temp4;\n  resultHigh = resultLow;\n  if (resultLow == 0) {\n    temp5 = 0;\n    resultHigh = temp4;\n  }\n  shiftAmount2 = LZCOUNT(resultHigh);\n  if (resultLow == 0) {\n    shiftAmount2 = shiftAmount2 + 0x20;\n  }\n  resultLow = shiftAmount2 - 0xb;\n  condition3 = SBORROW4(resultLow,0x20);\n  temp4 = shiftAmount2 - 0x2b;\n  condition2 = (int)temp4 < 0;\n  condition1 = temp4 == 0;\n  if ((int)resultLow < 0x20) {\n    condition3 = SCARRY4(temp4,0xc);\n    shiftAmount2 = shiftAmount2 + -0x1f;\n    condition2 = shiftAmount2 < 0;\n    condition1 = shiftAmount2 == 0;\n    temp4 = resultLow;\n    if (!condition1 && condition2 == condition3) {\n      temp5 = resultHigh << (resultLow & 0xff);\n      resultHigh = resultHigh >> (0xcU - shiftAmount2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    temp7 = 0x20 - temp4;\n  }\n  resultHigh = resultHigh << (temp4 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    resultHigh = resultHigh | temp5 >> (temp7 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_08008458:\n  if ((int)resultLow <= (int)temp6) {\n    return CONCAT44(resultHigh + (temp6 - resultLow) * 0x100000 | num2,temp5);\n  }\n  temp4 = ~(temp6 - resultLow);\n  if ((int)temp4 < 0x1f) {\n    shiftAmount2 = temp4 - 0x13;\n    if (shiftAmount2 != 0 && shiftAmount2 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - shiftAmount2) & 0xff) | resultHigh << (0xcU - shiftAmount2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(num2 | resultHigh >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | resultHigh << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,resultHigh >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "calculate_080082d0",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "shiftAmount1",
                "bVar2": "carry1",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "shiftAmount2",
                "uVar9": "resultHigh",
                "uVar10": "temp6",
                "uVar11": "resultLow",
                "uVar12": "temp7",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "sin",
                "__ieee754_rem_pio2",
                "__ieee754_atan2",
                "atan",
                "report_realtime_status",
                "__kernel_rem_pio2",
                "__kernel_sin",
                "plan_buffer_line",
                "__ieee754_sqrt",
                "mc_arc",
                "__ieee754_hypot",
                "cos",
                "__kernel_cos"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "calculate_result_080082d4",
            "code": "\nulonglong calculate_result_080082d4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int shift_amount_1;\n  byte carry_1;\n  uint sum_1;\n  uint sum_2;\n  uint uVar5;\n  int shift_amount_2;\n  uint shifted_input_2;\n  uint shifted_input_4;\n  uint shifted_result_2;\n  uint shifted_result_4;\n  uint carry_2;\n  uint result_2;\n  bool is_equal;\n  bool check1;\n  bool check2;\n  \n  shifted_input_2 = input_2 << 1;\n  shifted_result_2 = input_4 << 1;\n  is_equal = ((input_2 ^ input_4) & 0x7fffffff) == 0;\n  check1 = is_equal && input_1 == input_3;\n  if (!is_equal || input_1 != input_3) {\n    check1 = (shifted_input_2 | input_1) == 0;\n  }\n  if (!check1) {\n    check1 = (shifted_result_2 | input_3) == 0;\n  }\n  shift_amount_2 = (int)shifted_input_2 >> 0x15;\n  if (!check1) {\n    check1 = shift_amount_2 == -1;\n  }\n  shift_amount_1 = (int)shifted_result_2 >> 0x15;\n  if (!check1) {\n    check1 = shift_amount_1 == -1;\n  }\n  if (check1) {\n    if (shift_amount_2 == -1 || shift_amount_1 == -1) {\n      shifted_result_2 = input_4;\n      shifted_input_2 = input_3;\n      if (shift_amount_2 == -1) {\n        shifted_result_2 = input_2;\n        shifted_input_2 = input_1;\n      }\n      if (shift_amount_2 != -1 || shift_amount_1 != -1) {\n        input_3 = shifted_input_2;\n        input_4 = shifted_result_2;\n      }\n      check1 = (shifted_input_2 | shifted_result_2 << 0xc) == 0;\n      if (check1) {\n        check1 = (input_3 | input_4 << 0xc) == 0;\n      }\n      if (check1) {\n        check1 = shifted_result_2 == input_4;\n      }\n      if (!check1) {\n        shifted_result_2 = shifted_result_2 | 0x80000;\n      }\n      return CONCAT44(shifted_result_2,shifted_input_2);\n    }\n    if (((input_2 ^ input_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((shifted_input_2 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = input_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != input_4) {\n      return 0;\n    }\n    if (shifted_input_2 >> 0x15 == 0) {\n      check1 = (input_1 & 0x80000000) != 0;\n      shifted_result_2 = input_2 * 2 + (uint)check1;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)check1)) {\n        shifted_result_2 = shifted_result_2 | 0x80000000;\n      }\n      return CONCAT44(shifted_result_2,input_1 << 1);\n    }\n    if (shifted_input_2 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input_2 = shifted_input_2 >> 0x15;\n  shifted_result_2 = shifted_result_2 >> 0x15;\n  shifted_result_4 = shifted_result_2 - shifted_input_2;\n  check1 = shifted_result_4 != 0;\n  if (shifted_result_2 < shifted_input_2) {\n    shifted_result_4 = -shifted_result_4;\n  }\n  shifted_input_4 = input_1;\n  uVar5 = input_2;\n  if (check1 && shifted_input_2 <= shifted_result_2) {\n    shifted_input_2 = shifted_input_2 + shifted_result_4;\n    shifted_input_4 = input_3;\n    uVar5 = input_4;\n    input_3 = input_1;\n    input_4 = input_2;\n  }\n  if (0x36 < shifted_result_4) {\n    return CONCAT44(uVar5,shifted_input_4);\n  }\n  shifted_result_2 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    check1 = shifted_input_4 != 0;\n    shifted_input_4 = -shifted_input_4;\n    shifted_result_2 = -shifted_result_2 - (uint)check1;\n  }\n  uVar5 = input_4 & 0xfffff | 0x100000;\n  if ((input_4 & 0x80000000) != 0) {\n    check1 = input_3 != 0;\n    input_3 = -input_3;\n    uVar5 = -uVar5 - (uint)check1;\n  }\n  if (shifted_input_2 == shifted_result_4) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (shifted_input_2 == 0) {\n      shifted_result_2 = shifted_result_2 ^ 0x100000;\n      shifted_input_2 = 1;\n    }\n    else {\n      shifted_result_4 = shifted_result_4 - 1;\n    }\n  }\n  result_2 = -shifted_result_4 + 0x20;\n  if ((int)shifted_result_4 < 0x21) {\n    carry_2 = input_3 << (result_2 & 0xff);\n    input_3 = input_3 >> (shifted_result_4 & 0xff);\n    sum_1 = shifted_input_4 + input_3;\n    sum_2 = uVar5 << (result_2 & 0xff);\n    result_2 = sum_1 + sum_2;\n    shifted_result_2 = shifted_result_2 + CARRY4(shifted_input_4,input_3) + ((int)uVar5 >> (shifted_result_4 & 0xff)) +\n            (uint)CARRY4(sum_1,sum_2);\n  }\n  else {\n    carry_2 = uVar5 << (-shifted_result_4 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      carry_2 = carry_2 | 2;\n    }\n    uVar5 = (int)uVar5 >> (shifted_result_4 - 0x20 & 0xff);\n    result_2 = shifted_input_4 + uVar5;\n    shifted_result_2 = shifted_result_2 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(shifted_input_4,uVar5);\n  }\n  input_2 = shifted_result_2 & 0x80000000;\n  shifted_result_4 = shifted_result_2;\n  if ((int)shifted_result_2 < 0) {\n    check1 = carry_2 == 0;\n    carry_2 = -carry_2;\n    shifted_result_4 = -result_2;\n    result_2 = -(uint)!check1 - result_2;\n    shifted_result_4 = -(uint)(check1 <= shifted_result_4) - shifted_result_2;\n  }\n  if (0xfffff < shifted_result_4) {\n    shifted_input_4 = shifted_input_2 - 1;\n    if (0x1fffff < shifted_result_4) {\n      shifted_result_2 = shifted_result_4 & 1;\n      shifted_result_4 = shifted_result_4 >> 1;\n      carry_1 = (byte)result_2;\n      result_2 = (uint)(shifted_result_2 != 0) << 0x1f | result_2 >> 1;\n      carry_2 = (uint)(carry_1 & 1) << 0x1f | carry_2 >> 1;\n      shifted_input_4 = shifted_input_2;\n      if (0xffbfffff < shifted_input_2 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    check1 = 0x7fffffff < carry_2;\n    if (carry_2 == 0x80000000) {\n      check1 = (result_2 & 1) != 0;\n    }\n    return CONCAT44(shifted_result_4 + shifted_input_4 * 0x100000 + (uint)CARRY4(result_2,(uint)check1) | input_2,\n                    result_2 + check1);\n  }\n  is_equal = (carry_2 & 0x80000000) != 0;\n  carry_2 = carry_2 << 1;\n  shifted_input_4 = result_2 * 2;\n  check1 = CARRY4(result_2,result_2);\n  result_2 = result_2 * 2 + (uint)is_equal;\n  shifted_result_4 = shifted_result_4 * 2 + (uint)(check1 || CARRY4(shifted_input_4,(uint)is_equal));\n  shifted_input_4 = shifted_input_2 - 2;\n  if (shifted_input_2 - 1 != 0 && 0xfffff < shifted_result_4) goto LAB_080083e0;\n  uVar5 = result_2;\n  shifted_input_2 = shifted_result_4;\n  if (shifted_result_4 == 0) {\n    uVar5 = 0;\n    shifted_input_2 = result_2;\n  }\n  shift_amount_2 = LZCOUNT(shifted_input_2);\n  if (shifted_result_4 == 0) {\n    shift_amount_2 = shift_amount_2 + 0x20;\n  }\n  result_2 = shift_amount_2 - 0xb;\n  check2 = SBORROW4(result_2,0x20);\n  shifted_result_4 = shift_amount_2 - 0x2b;\n  check1 = (int)shifted_result_4 < 0;\n  is_equal = shifted_result_4 == 0;\n  if ((int)result_2 < 0x20) {\n    check2 = SCARRY4(shifted_result_4,0xc);\n    shift_amount_2 = shift_amount_2 + -0x1f;\n    check1 = shift_amount_2 < 0;\n    is_equal = shift_amount_2 == 0;\n    shifted_result_4 = result_2;\n    if (!is_equal && check1 == check2) {\n      uVar5 = shifted_input_2 << (result_2 & 0xff);\n      shifted_input_2 = shifted_input_2 >> (0xcU - shift_amount_2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_equal || check1 != check2) {\n    carry_2 = 0x20 - shifted_result_4;\n  }\n  shifted_input_2 = shifted_input_2 << (shifted_result_4 & 0xff);\n  if (is_equal || check1 != check2) {\n    shifted_input_2 = shifted_input_2 | uVar5 >> (carry_2 & 0xff);\n  }\n  if (is_equal || check1 != check2) {\n    uVar5 = uVar5 << (shifted_result_4 & 0xff);\n  }\nLAB_08008458:\n  if ((int)result_2 <= (int)shifted_input_4) {\n    return CONCAT44(shifted_input_2 + (shifted_input_4 - result_2) * 0x100000 | input_2,uVar5);\n  }\n  shifted_result_4 = ~(shifted_input_4 - result_2);\n  if ((int)shifted_result_4 < 0x1f) {\n    shift_amount_2 = shifted_result_4 - 0x13;\n    if (shift_amount_2 != 0 && shift_amount_2 < 0 == SCARRY4(shifted_result_4 - 0x1f,0xc)) {\n      return CONCAT44(shifted_result_2,uVar5 >> (0x20 - (0xcU - shift_amount_2) & 0xff) | shifted_input_2 << (0xcU - shift_amount_2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shifted_result_4 = shifted_result_4 + 1;\n    return CONCAT44(input_2 | shifted_input_2 >> (shifted_result_4 & 0xff),\n                    uVar5 >> (shifted_result_4 & 0xff) | shifted_input_2 << (0x20 - shifted_result_4 & 0xff));\n  }\n  return CONCAT44(shifted_result_2,shifted_input_2 >> (shifted_result_4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "calculate_result_080082d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shift_amount_1",
                "bVar2": "carry_1",
                "uVar3": "sum_1",
                "uVar4": "sum_2",
                "iVar6": "shift_amount_2",
                "uVar7": "shifted_input_2",
                "uVar8": "shifted_input_4",
                "uVar9": "shifted_result_2",
                "uVar10": "shifted_result_4",
                "uVar11": "carry_2",
                "uVar12": "result_2",
                "bVar13": "is_equal",
                "bVar14": "check1",
                "bVar15": "check2"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "trunc",
                "__ieee754_atan2",
                "atan",
                "__aeabi_drsub",
                "__kernel_rem_pio2",
                "round",
                "__kernel_sin",
                "scalbn",
                "ceil",
                "__ieee754_sqrt",
                "mc_arc",
                "__ieee754_hypot",
                "__kernel_cos",
                "floor"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "reverse_bits_0800854c",
            "code": "\nulonglong reverseBits_0800854c(uint input)\n\n{\n  uint result1;\n  uint result2;\n  int bitCount;\n  uint shiftValue;\n  uint shiftAmount;\n  bool isNegative1;\n  bool isZero1;\n  bool isNegative2;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result1 = 0;\n  bitCount = LZCOUNT(input);\n  shiftValue = bitCount + 0x15;\n  isNegative2 = SBORROW4(shiftValue,0x20);\n  result2 = bitCount - 0xb;\n  isNegative1 = (int)result2 < 0;\n  isZero1 = result2 == 0;\n  if (shiftValue < 0x20) {\n    isNegative2 = SCARRY4(result2,0xc);\n    isNegative1 = false;\n    isZero1 = bitCount + 1 == 0;\n    result2 = shiftValue;\n    if (!isZero1 && isNegative2 == false) {\n      result1 = input << shiftValue;\n      input = input >> (0xcU - (bitCount + 1) & 0xff);\n      goto performShift;\n    }\n  }\n  if (isZero1 || isNegative1 != isNegative2) {\n    shiftAmount = 0x20 - result2;\n  }\n  input = input << (result2 & 0xff);\n  if (isZero1 || isNegative1 != isNegative2) {\n    input = input | 0U >> (shiftAmount & 0xff);\n  }\n  if (isZero1 || isNegative1 != isNegative2) {\n    result1 = 0 << (result2 & 0xff);\n  }\nperformShift:\n  if (shiftValue < 0x433) {\n    return CONCAT44(input + (0x432 - shiftValue) * 0x100000,result1);\n  }\n  result2 = ~(0x432 - shiftValue);\n  if (0x1e < (int)result2) {\n    return (ulonglong)(input >> (result2 - 0x1f & 0xff));\n  }\n  bitCount = result2 - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(result2 - 0x1f,0xc)) {\n    result2 = result2 + 1;\n    return CONCAT44(input >> (result2 & 0xff),\n                    result1 >> (result2 & 0xff) | input << (0x20 - result2 & 0xff));\n  }\n  return (ulonglong)(result1 >> (0x20 - (0xcU - bitCount) & 0xff) | input << (0xcU - bitCount & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "reverse_bits_0800854c",
                "param_1": "input",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "bitCount",
                "uVar4": "shiftValue",
                "in_r12": "shiftAmount",
                "bVar5": "isNegative1",
                "bVar6": "isZero1",
                "bVar7": "isNegative2",
                "LAB_08008458": "performShift"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "calculate_shifted_value_0800856c",
            "code": "\nulonglong calculate_shifted_value_0800856c(uint input_number)\n\n{\n  uint shift_amount;\n  uint abs_input_number;\n  uint shift;\n  int leading_zeros;\n  uint combined_shift;\n  uint is_negative;\n  uint in_r12;\n  bool is_negative_shift;\n  bool is_zero_shift;\n  bool is_carry_shift;\n  \n  if (input_number == 0) {\n    return 0;\n  }\n  is_negative = input_number & 0x80000000;\n  abs_input_number = input_number;\n  if ((int)is_negative < 0) {\n    abs_input_number = -input_number;\n  }\n  shift_amount = 0;\n  leading_zeros = LZCOUNT(abs_input_number);\n  combined_shift = leading_zeros + 0x15;\n  is_carry_shift = SBORROW4(combined_shift,0x20);\n  shift = leading_zeros - 0xb;\n  is_negative_shift = (int)shift < 0;\n  is_zero_shift = shift == 0;\n  if (combined_shift < 0x20) {\n    is_carry_shift = SCARRY4(shift,0xc);\n    is_negative_shift = false;\n    is_zero_shift = leading_zeros + 1 == 0;\n    shift = combined_shift;\n    if (!is_zero_shift && is_carry_shift == false) {\n      shift_amount = abs_input_number << combined_shift;\n      abs_input_number = abs_input_number >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto calculate_concats;\n    }\n  }\n  if (is_zero_shift || is_negative_shift != is_carry_shift) {\n    in_r12 = 0x20 - shift;\n  }\n  abs_input_number = abs_input_number << (shift & 0xff);\n  if (is_zero_shift || is_negative_shift != is_carry_shift) {\n    abs_input_number = abs_input_number | 0U >> (in_r12 & 0xff);\n  }\n  if (is_zero_shift || is_negative_shift != is_carry_shift) {\n    shift_amount = 0 << (shift & 0xff);\n  }\ncalculate_concats:\n  if (combined_shift < 0x433) {\n    return CONCAT44(abs_input_number + (0x432 - combined_shift) * 0x100000 | is_negative,shift_amount);\n  }\n  shift = ~(0x432 - combined_shift);\n  if (0x1e < (int)shift) {\n    return CONCAT44(input_number,abs_input_number >> (shift - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift - 0x1f,0xc)) {\n    shift = shift + 1;\n    return CONCAT44(is_negative | abs_input_number >> (shift & 0xff),\n                    shift_amount >> (shift & 0xff) | abs_input_number << (0x20 - shift & 0xff));\n  }\n  return CONCAT44(input_number,shift_amount >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input_number << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "calculate_shifted_value_0800856c",
                "param_1": "input_number",
                "uVar1": "shift_amount",
                "uVar2": "abs_input_number",
                "uVar3": "shift",
                "iVar4": "leading_zeros",
                "uVar5": "combined_shift",
                "uVar6": "is_negative",
                "bVar7": "is_negative_shift",
                "bVar8": "is_zero_shift",
                "bVar9": "is_carry_shift",
                "LAB_08008458": "calculate_concats"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "calculate_trapezoid_for_block",
                "__kernel_rem_pio2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "process_data_08008590",
            "code": "\nulonglong processData_08008590(uint input,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint flag1;\n  uint var1;\n  uint result1;\n  uint shiftedBits;\n  uint twiceInput;\n  int iteration;\n  uint bitsCount;\n  uint remainingBits;\n  bool isZero;\n  bool isMax;\n  bool isNegative;\n  \n  twiceInput = input << 1;\n  isMax = twiceInput == 0;\n  flag1 = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftedBits = (uint)((int)twiceInput >> 3) >> 1;\n  result1 = flag1 | shiftedBits;\n  input = input << 0x1d;\n  if (!isMax) {\n    param4 = twiceInput & 0xff000000;\n    isMax = param4 == 0;\n  }\n  if (!isMax) {\n    isMax = param4 == 0xff000000;\n  }\n  if (!isMax) {\n    return CONCAT44(result1,input) ^ 0x3800000000000000;\n  }\n  if ((twiceInput & 0xffffff) == 0) {\n    return CONCAT44(result1,input);\n  }\n  if (param4 == 0xff000000) {\n    return CONCAT44(result1,input) | 0x8000000000000;\n  }\n  var1 = input;\n  twiceInput = shiftedBits;\n  if (shiftedBits == 0) {\n    var1 = 0;\n    twiceInput = input;\n  }\n  iteration = LZCOUNT(twiceInput);\n  if (shiftedBits == 0) {\n    iteration = iteration + 0x20;\n  }\n  bitsCount = iteration - 0xb;\n  isNegative = SBORROW4(bitsCount,0x20);\n  shiftedBits = iteration - 0x2b;\n  isMax = (int)shiftedBits < 0;\n  isZero = shiftedBits == 0;\n  if ((int)bitsCount < 0x20) {\n    isNegative = SCARRY4(shiftedBits,0xc);\n    iteration = iteration + -0x1f;\n    isMax = iteration < 0;\n    isZero = iteration == 0;\n    shiftedBits = bitsCount;\n    if (!isZero && isMax == isNegative) {\n      var1 = twiceInput << (bitsCount & 0xff);\n      twiceInput = twiceInput >> (0xcU - iteration & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isZero || isMax != isNegative) {\n    remainingBits = 0x20 - shiftedBits;\n  }\n  twiceInput = twiceInput << (shiftedBits & 0xff);\n  if (isZero || isMax != isNegative) {\n    twiceInput = twiceInput | var1 >> (remainingBits & 0xff);\n  }\n  if (isZero || isMax != isNegative) {\n    var1 = var1 << (shiftedBits & 0xff);\n  }\nLAB_08008458:\n  if ((int)bitsCount < 0x381) {\n    return CONCAT44(twiceInput + (0x380 - bitsCount) * 0x100000 | flag1,var1);\n  }\n  shiftedBits = ~(0x380 - bitsCount);\n  if (0x1e < (int)shiftedBits) {\n    return CONCAT44(result1,twiceInput >> (shiftedBits - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  iteration = shiftedBits - 0x13;\n  if (iteration == 0 || iteration < 0 != SCARRY4(shiftedBits - 0x1f,0xc)) {\n    shiftedBits = shiftedBits + 1;\n    return CONCAT44(flag1 | twiceInput >> (shiftedBits & 0xff),\n                    var1 >> (shiftedBits & 0xff) | twiceInput << (0x20 - shiftedBits & 0xff));\n  }\n  return CONCAT44(result1,var1 >> (0x20 - (0xcU - iteration) & 0xff) | twiceInput << (0xcU - iteration & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "process_data_08008590",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "flag1",
                "uVar2": "var1",
                "uVar3": "result1",
                "uVar4": "shiftedBits",
                "uVar5": "twiceInput",
                "iVar6": "iteration",
                "uVar7": "bitsCount",
                "in_r12": "remainingBits",
                "bVar8": "isZero",
                "bVar9": "isMax",
                "bVar10": "isNegative"
            },
            "calling": [
                "to_millimeters",
                "calculate_trapezoid_for_block",
                "report_realtime_status",
                "homing_cycle",
                "max_allowable_speed",
                "plan_buffer_line",
                "gc_execute_line",
                "protocol_execute_line",
                "read_float",
                "mc_dwell",
                "mc_arc",
                "report_gcode_modes",
                "settings_store_global_setting",
                "report_gcode_parameters"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085d4": {
            "entrypoint": "0x080085d4",
            "current_name": "reverse_bits_080085d4",
            "code": "\nulonglong reverseBits_080085d4(uint input1,uint input2)\n\n{\n  byte bit;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift;\n  uint bits;\n  int count;\n  uint carry;\n  bool isNegative;\n  bool check;\n  bool overflow;\n  \n  if ((input1 | input2) == 0) {\n    return CONCAT44(input2,input1);\n  }\n  count = 0x432;\n  carry = input2 >> 0x16;\n  if (carry != 0) {\n    count = 3;\n    if (input2 >> 0x19 != 0) {\n      count = 6;\n    }\n    if (input2 >> 0x1c != 0) {\n      count = count + 3;\n    }\n    temp3 = count - ((int)input2 >> 0x1f);\n    carry = input1 << (0x20 - temp3 & 0xff);\n    input1 = input1 >> (temp3 & 0xff) | input2 << (0x20 - temp3 & 0xff);\n    input2 = input2 >> (temp3 & 0xff);\n    count = temp3 + 0x432;\n  }\n  if (0xfffff < input2) {\n    if (0x1fffff < input2) {\n      temp3 = input2 & 1;\n      input2 = input2 >> 1;\n      bit = (byte)input1;\n      input1 = (uint)(temp3 != 0) << 0x1f | input1 >> 1;\n      carry = (uint)(bit & 1) << 0x1f | carry >> 1;\n      count = count + 1;\n      if (0xffbfffff < (uint)(count * 0x200000)) {\n        return 0x7ff0000000000000;\n      }\n    }\nLAB_080083e0:\n    check = 0x7fffffff < carry;\n    if (carry == 0x80000000) {\n      check = (input1 & 1) != 0;\n    }\n    return CONCAT44(input2 + count * 0x100000 + (uint)CARRY4(input1,(uint)check),input1 + check\n                   );\n  }\n  isNegative = (carry & 0x80000000) != 0;\n  carry = carry << 1;\n  temp3 = input1 * 2;\n  check = CARRY4(input1,input1);\n  input1 = input1 * 2 + (uint)isNegative;\n  input2 = input2 * 2 + (uint)(check || CARRY4(temp3,(uint)isNegative));\n  check = count != 0;\n  count = count + -1;\n  if (check && 0xfffff < input2) goto LAB_080083e0;\n  temp1 = input1;\n  temp3 = input2;\n  if (input2 == 0) {\n    temp1 = 0;\n    temp3 = input1;\n  }\n  shift = LZCOUNT(temp3);\n  if (input2 == 0) {\n    shift = shift + 0x20;\n  }\n  bits = shift - 0xb;\n  overflow = SBORROW4(bits,0x20);\n  temp2 = shift - 0x2b;\n  check = (int)temp2 < 0;\n  isNegative = temp2 == 0;\n  if ((int)bits < 0x20) {\n    overflow = SCARRY4(temp2,0xc);\n    shift = shift + -0x1f;\n    check = shift < 0;\n    isNegative = shift == 0;\n    temp2 = bits;\n    if (!isNegative && check == overflow) {\n      temp1 = temp3 << (bits & 0xff);\n      temp3 = temp3 >> (0xcU - shift & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isNegative || check != overflow) {\n    carry = 0x20 - temp2;\n  }\n  temp3 = temp3 << (temp2 & 0xff);\n  if (isNegative || check != overflow) {\n    temp3 = temp3 | temp1 >> (carry & 0xff);\n  }\n  if (isNegative || check != overflow) {\n    temp1 = temp1 << (temp2 & 0xff);\n  }\nLAB_08008458:\n  if ((int)bits <= count) {\n    return CONCAT44(temp3 + (count - bits) * 0x100000,temp1);\n  }\n  carry = ~(count - bits);\n  if ((int)carry < 0x1f) {\n    count = carry - 0x13;\n    if (count != 0 && count < 0 == SCARRY4(carry - 0x1f,0xc)) {\n      return (ulonglong)(temp1 >> (0x20 - (0xcU - count) & 0xff) | temp3 << (0xcU - count & 0xff));\n    }\n    carry = carry + 1;\n    return CONCAT44(temp3 >> (carry & 0xff),temp1 >> (carry & 0xff) | temp3 << (0x20 - carry & 0xff)\n                   );\n  }\n  return (ulonglong)(temp3 >> (carry - 0x1f & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080085d4": "reverse_bits_080085d4",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "bit",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "iVar5": "shift",
                "uVar6": "bits",
                "iVar7": "count",
                "uVar8": "carry",
                "bVar9": "isNegative",
                "bVar10": "check",
                "bVar11": "overflow"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085e4": {
            "entrypoint": "0x080085e4",
            "current_name": "reverse_bits_080085e4",
            "code": "\nulonglong reverseBits_080085e4(uint input1,uint input2)\n\n{\n  byte carry;\n  uint result1;\n  uint result2;\n  uint temp1;\n  int temp2;\n  uint shift1;\n  int shift2;\n  uint signBit;\n  uint carryBit;\n  bool hasCarry;\n  bool overflow;\n  bool underflow;\n  \n  if ((input1 | input2) == 0) {\n    return CONCAT44(input2,input1);\n  }\n  signBit = input2 & 0x80000000;\n  result2 = input2;\n  if ((int)signBit < 0) {\n    overflow = input1 != 0;\n    input1 = -input1;\n    result2 = -input2 - (uint)overflow;\n  }\n  shift2 = 0x432;\n  carryBit = result2 >> 0x16;\n  if (carryBit != 0) {\n    shift2 = 3;\n    if (result2 >> 0x19 != 0) {\n      shift2 = 6;\n    }\n    if (result2 >> 0x1c != 0) {\n      shift2 = shift2 + 3;\n    }\n    temp1 = shift2 - ((int)result2 >> 0x1f);\n    carryBit = input1 << (0x20 - temp1 & 0xff);\n    input1 = input1 >> (temp1 & 0xff) | result2 << (0x20 - temp1 & 0xff);\n    result2 = result2 >> (temp1 & 0xff);\n    shift2 = temp1 + 0x432;\n  }\n  if (0xfffff < result2) {\n    if (0x1fffff < result2) {\n      temp1 = result2 & 1;\n      result2 = result2 >> 1;\n      carry = (byte)input1;\n      input1 = (uint)(temp1 != 0) << 0x1f | input1 >> 1;\n      carryBit = (uint)(carry & 1) << 0x1f | carryBit >> 1;\n      shift2 = shift2 + 1;\n      if (0xffbfffff < (uint)(shift2 * 0x200000)) {\n        return (ulonglong)(signBit | 0x7ff00000) << 0x20;\n      }\n    }\nLAB_080083e0:\n    overflow = 0x7fffffff < carryBit;\n    if (carryBit == 0x80000000) {\n      overflow = (input1 & 1) != 0;\n    }\n    return CONCAT44(result2 + shift2 * 0x100000 + (uint)CARRY4(input1,(uint)overflow) | signBit,\n                    input1 + overflow);\n  }\n  hasCarry = (carryBit & 0x80000000) != 0;\n  carryBit = carryBit << 1;\n  temp1 = input1 * 2;\n  overflow = CARRY4(input1,input1);\n  input1 = input1 * 2 + (uint)hasCarry;\n  result2 = result2 * 2 + (uint)(overflow || CARRY4(temp1,(uint)hasCarry));\n  overflow = shift2 != 0;\n  shift2 = shift2 + -1;\n  if (overflow && 0xfffff < result2) goto LAB_080083e0;\n  result1 = input1;\n  temp1 = result2;\n  if (result2 == 0) {\n    result1 = 0;\n    temp1 = input1;\n  }\n  temp2 = LZCOUNT(temp1);\n  if (result2 == 0) {\n    temp2 = temp2 + 0x20;\n  }\n  shift1 = temp2 - 0xb;\n  underflow = SBORROW4(shift1,0x20);\n  result2 = temp2 - 0x2b;\n  overflow = (int)result2 < 0;\n  hasCarry = result2 == 0;\n  if ((int)shift1 < 0x20) {\n    underflow = SCARRY4(result2,0xc);\n    temp2 = temp2 + -0x1f;\n    overflow = temp2 < 0;\n    hasCarry = temp2 == 0;\n    result2 = shift1;\n    if (!hasCarry && overflow == underflow) {\n      result1 = temp1 << (shift1 & 0xff);\n      temp1 = temp1 >> (0xcU - temp2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (hasCarry || overflow != underflow) {\n    carryBit = 0x20 - result2;\n  }\n  temp1 = temp1 << (result2 & 0xff);\n  if (hasCarry || overflow != underflow) {\n    temp1 = temp1 | result1 >> (carryBit & 0xff);\n  }\n  if (hasCarry || overflow != underflow) {\n    result1 = result1 << (result2 & 0xff);\n  }\nLAB_08008458:\n  if ((int)shift1 <= shift2) {\n    return CONCAT44(temp1 + (shift2 - shift1) * 0x100000 | signBit,result1);\n  }\n  result2 = ~(shift2 - shift1);\n  if ((int)result2 < 0x1f) {\n    shift2 = result2 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(result2 - 0x1f,0xc)) {\n      return CONCAT44(input2,result1 >> (0x20 - (0xcU - shift2) & 0xff) |\n                              temp1 << (0xcU - shift2 & 0xff)) & 0x80000000ffffffff;\n    }\n    result2 = result2 + 1;\n    return CONCAT44(signBit | temp1 >> (result2 & 0xff),\n                    result1 >> (result2 & 0xff) | temp1 << (0x20 - result2 & 0xff));\n  }\n  return CONCAT44(input2,temp1 >> (result2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080085e4": "reverse_bits_080085e4",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "carry",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "temp1",
                "iVar5": "temp2",
                "uVar6": "shift1",
                "iVar7": "shift2",
                "uVar8": "signBit",
                "uVar9": "carryBit",
                "bVar10": "hasCarry",
                "bVar11": "overflow",
                "bVar12": "underflow"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_floating_point_08008640",
            "code": "\nulonglong calculateFloatingPoint_08008640(undefined4 exponentPart,uint combinedParts,uint mantissaPart1,uint mantissaPart2)\n\n{\n  ulonglong lowerBits1;\n  longlong lowerBits2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint upperBits;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  ulonglong combinedParts;\n  \n  combinedParts = CONCAT44(combinedParts,exponentPart);\n  temp6 = 0x7ff;\n  temp2 = combinedParts >> 0x14 & 0x7ff;\n  condition1 = temp2 == 0;\n  if (!condition1) {\n    temp5 = mantissaPart2 >> 0x14 & 0x7ff;\n    condition1 = temp5 == 0;\n  }\n  if (!condition1) {\n    condition1 = temp2 == 0x7ff;\n  }\n  if (!condition1) {\n    condition1 = temp5 == 0x7ff;\n  }\n  if (condition1) {\n    combinedParts = extract_bit_patterns_0800881c();\n  }\n  temp1 = (uint)(combinedParts >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ mantissaPart2;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  mantissaPart2 = mantissaPart2 & ~(temp6 << 0x15);\n  condition1 = ((uint)combinedParts | temp1 << 0xc) == 0;\n  if (!condition1) {\n    condition1 = (mantissaPart1 | mantissaPart2 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  mantissaPart2 = mantissaPart2 | 0x100000;\n  if (condition1) {\n    mantissaPart1 = (uint)combinedParts | mantissaPart1;\n    mantissaPart2 = (temp2 & 0x80000000 | temp1) ^ mantissaPart2;\n    temp2 = temp6 >> 1;\n    condition3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    condition1 = temp4 == 0;\n    temp1 = temp4;\n    if (!condition1 && (int)temp2 <= temp3) {\n      condition3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      condition1 = temp6 == temp4;\n    }\n    if (!condition1 && (int)temp1 < 0 == condition3) {\n      mantissaPart2 = mantissaPart2 | temp4 * 0x100000;\n    }\n    if (!condition1 && (int)temp1 < 0 == condition3) {\n      return CONCAT44(mantissaPart2,mantissaPart1);\n    }\n    mantissaPart2 = mantissaPart2 | 0x100000;\n    temp6 = 0;\n    condition3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    condition1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    lowerBits1 = (combinedParts & 0xffffffff) * (ulonglong)mantissaPart1;\n    combinedParts = (combinedParts & 0xffffffff) * (ulonglong)mantissaPart2 +\n             (ulonglong)temp1 * (ulonglong)mantissaPart1 + (lowerBits1 >> 0x20);\n    upperBits = (uint)combinedParts;\n    lowerBits2 = (ulonglong)temp1 * (ulonglong)mantissaPart2 + (combinedParts >> 0x20);\n    temp6 = (uint)lowerBits2;\n    temp1 = (uint)((ulonglong)lowerBits2 >> 0x20);\n    if ((int)lowerBits1 != 0) {\n      upperBits = upperBits | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      condition1 = (upperBits & 0x80000000) != 0;\n      upperBits = upperBits << 1;\n      lowerBits2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)condition1)),\n                       temp6 * 2 + (uint)condition1);\n    }\n    mantissaPart2 = temp2 & 0x80000000 | (int)((ulonglong)lowerBits2 >> 0x20) << 0xb | (uint)lowerBits2 >> 0x15;\n    mantissaPart1 = (uint)lowerBits2 << 0xb | upperBits >> 0x15;\n    temp6 = upperBits * 0x800;\n    condition2 = 0xfc < temp4;\n    condition3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    condition1 = temp1 == 0;\n    temp2 = temp1;\n    if (condition2 && !condition1) {\n      condition2 = 0x6ff < temp1;\n      condition3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      condition1 = temp1 == 0x700;\n    }\n    if (!condition2 || condition1) {\n      condition1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        condition1 = (upperBits >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(mantissaPart2 + temp4 * 0x100000 + (uint)CARRY4(mantissaPart1,(uint)condition1),mantissaPart1 + condition1\n                     );\n    }\n  }\n  if (!condition1 && (int)temp2 < 0 == condition3) {\n    return (ulonglong)(mantissaPart2 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  condition2 = SCARRY4(temp4,0x36);\n  condition1 = (int)(temp4 + 0x36) < 0;\n  condition3 = temp4 == 0xffffffca;\n  if (condition3 || condition1 != condition2) {\n    mantissaPart1 = 0;\n  }\n  if (condition3 || condition1 != condition2) {\n    mantissaPart2 = mantissaPart2 & 0x80000000;\n  }\n  if (condition3 || condition1 != condition2) {\n    return CONCAT44(mantissaPart2,mantissaPart1);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = mantissaPart1 >> (temp1 & 0xff) | mantissaPart2 << (0x20 - temp1 & 0xff);\n    temp2 = (mantissaPart2 >> (temp1 & 0xff) & ~((mantissaPart2 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | mantissaPart1 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(mantissaPart2,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    upperBits = mantissaPart1 << (temp4 + 0x20 & 0xff);\n    temp1 = mantissaPart1 >> (temp2 & 0xff) | mantissaPart2 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)upperBits >> 0x1f);\n    if ((temp6 | upperBits << 1) == 0) {\n      temp4 = temp4 & ~(upperBits >> 0x1f);\n    }\n    return CONCAT44((mantissaPart2 & 0x80000000) +\n                    ((mantissaPart2 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)upperBits >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = mantissaPart1 << (temp2 & 0xff);\n  temp2 = mantissaPart1 >> (0x20 - temp2 & 0xff) | mantissaPart2 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((mantissaPart2 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_floating_point_08008640",
                "param_1": "exponentPart",
                "param_2": "combinedParts",
                "param_3": "mantissaPart1",
                "param_4": "mantissaPart2",
                "uVar1": "lowerBits1",
                "lVar2": "lowerBits2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "unaff_r5": "temp5",
                "uVar7": "temp6",
                "uVar8": "upperBits",
                "bVar9": "condition1",
                "bVar10": "condition2",
                "bVar11": "condition3",
                "uVar12": "combinedParts"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "to_millimeters",
                "calculate_trapezoid_for_block",
                "atan",
                "report_realtime_status",
                "__kernel_rem_pio2",
                "homing_cycle",
                "__kernel_sin",
                "plan_buffer_line",
                "scalbn",
                "read_float",
                "__ieee754_sqrt",
                "mc_arc",
                "__ieee754_hypot",
                "report_gcode_modes",
                "__kernel_cos",
                "report_gcode_parameters"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "extract_bit_patterns_0800881c",
            "code": "\nulonglong extract_bit_patterns_0800881c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool is_zero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  if (bit2 != bit5 && bit3 != bit5) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      bit4 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | bit4;\n      if (bit3 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      bit3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(bit3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  bit4 = input2;\n  if (((!is_zero) && ((bit2 != bit5 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((bit3 != bit5 || (input1 = input3, bit4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "extract_bit_patterns_0800881c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "is_zero"
            },
            "calling": [
                "__muldf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "calculate_double_from_uints_08008894",
            "code": "\nulonglong calculate_double_from_uints_08008894(undefined4 input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  uint temp_7;\n  int temp_8;\n  uint temp_9;\n  uint temp_10;\n  uint temp_11;\n  uint temp_12;\n  uint temp_13;\n  uint temp_14;\n  bool flag_1;\n  bool flag_2;\n  bool flag_3;\n  undefined8 result;\n  \n  result = CONCAT44(input_param_2,input_param_1);\n  temp_14 = 0x7ff;\n  temp_7 = input_param_2 >> 0x14 & 0x7ff;\n  flag_1 = temp_7 == 0;\n  if (!flag_1) {\n    temp_10 = input_param_4 >> 0x14 & 0x7ff;\n    flag_1 = temp_10 == 0;\n  }\n  if (!flag_1) {\n    flag_1 = temp_7 == 0x7ff;\n  }\n  if (!flag_1) {\n    flag_1 = temp_10 == 0x7ff;\n  }\n  if (flag_1) {\n    result = calculate_double_from_uints_08008894_08008a02();\n  }\n  temp_9 = (uint)((ulonglong)result >> 0x20);\n  temp_12 = (uint)result;\n  temp_8 = temp_7 - temp_10;\n  if ((input_param_3 | input_param_4 << 0xc) == 0) {\n    temp_7 = (temp_9 ^ input_param_4) & 0x80000000 | temp_9 & 0xfffff;\n    flag_3 = SCARRY4(temp_8,temp_14 >> 1);\n    temp_9 = temp_8 + (temp_14 >> 1);\n    flag_1 = (int)temp_9 < 0;\n    flag_2 = temp_9 == 0;\n    if (!flag_2 && flag_1 == flag_3) {\n      flag_3 = SBORROW4(temp_14,temp_9);\n      flag_1 = (int)(temp_14 - temp_9) < 0;\n      flag_2 = temp_14 == temp_9;\n    }\n    if (!flag_2 && flag_1 == flag_3) {\n      temp_7 = temp_7 | temp_9 * 0x100000;\n    }\n    if (!flag_2 && flag_1 == flag_3) {\n      return CONCAT44(temp_7,temp_12);\n    }\n    temp_7 = temp_7 | 0x100000;\n    temp_14 = 0;\n    flag_2 = SBORROW4(temp_9,1);\n    temp_9 = temp_9 - 1;\n    flag_1 = temp_9 == 0;\n    temp_3 = temp_9;\n  }\n  else {\n    temp_3 = (input_param_4 << 0xc) >> 4 | 0x10000000 | input_param_3 >> 0x18;\n    temp_14 = input_param_3 << 8;\n    temp_11 = (temp_9 << 0xc) >> 4 | 0x10000000 | temp_12 >> 0x18;\n    temp_12 = temp_12 * 0x100;\n    temp_7 = (temp_9 ^ input_param_4) & 0x80000000;\n    flag_1 = temp_3 <= temp_11;\n    if (temp_11 == temp_3) {\n      flag_1 = temp_14 <= temp_12;\n    }\n    temp_8 = temp_8 + (uint)flag_1;\n    temp_9 = temp_8 + 0x3fd;\n    if (flag_1 == false) {\n      temp_3 = temp_3 >> 1;\n      temp_14 = (uint)((input_param_3 >> 0x18 & 1) != 0) << 0x1f | temp_14 >> 1;\n    }\n    temp_13 = temp_12 - temp_14;\n    temp_11 = (temp_11 - temp_3) - (uint)(temp_12 < temp_14);\n    temp_4 = temp_3 >> 1;\n    temp_1 = (uint)((temp_3 & 1) != 0) << 0x1f | temp_14 >> 1;\n    temp_12 = 0x100000;\n    temp_3 = 0x80000;\n    while( true ) {\n      flag_1 = temp_1 <= temp_13;\n      if (temp_4 < temp_11 || temp_11 - temp_4 < (uint)flag_1) {\n        temp_13 = temp_13 - temp_1;\n        temp_12 = temp_12 | temp_3;\n        temp_11 = (temp_11 - temp_4) - (uint)!flag_1;\n      }\n      temp_5 = temp_4 >> 1;\n      temp_1 = (uint)((temp_4 & 1) != 0) << 0x1f | temp_1 >> 1;\n      flag_2 = temp_1 <= temp_13;\n      flag_1 = temp_11 - temp_5 < (uint)flag_2;\n      temp_14 = temp_11;\n      if (temp_5 < temp_11 || flag_1) {\n        temp_13 = temp_13 - temp_1;\n        temp_14 = (temp_11 - temp_5) - (uint)!flag_2;\n      }\n      if (temp_5 < temp_11 || flag_1) {\n        temp_12 = temp_12 | temp_3 >> 1;\n      }\n      temp_11 = temp_4 >> 2;\n      temp_2 = (uint)((temp_5 & 1) != 0) << 0x1f | temp_1 >> 1;\n      flag_2 = temp_2 <= temp_13;\n      flag_1 = temp_14 - temp_11 < (uint)flag_2;\n      temp_5 = temp_14;\n      if (temp_11 < temp_14 || flag_1) {\n        temp_13 = temp_13 - temp_2;\n        temp_5 = (temp_14 - temp_11) - (uint)!flag_2;\n      }\n      if (temp_11 < temp_14 || flag_1) {\n        temp_12 = temp_12 | temp_3 >> 2;\n      }\n      temp_6 = temp_4 >> 3;\n      temp_1 = (uint)((temp_11 & 1) != 0) << 0x1f | temp_2 >> 1;\n      flag_2 = temp_1 <= temp_13;\n      flag_1 = temp_5 - temp_6 < (uint)flag_2;\n      temp_11 = temp_5;\n      if (temp_6 < temp_5 || flag_1) {\n        temp_13 = temp_13 - temp_1;\n        temp_11 = (temp_5 - temp_6) - (uint)!flag_2;\n      }\n      if (temp_6 < temp_5 || flag_1) {\n        temp_12 = temp_12 | temp_3 >> 3;\n      }\n      temp_14 = temp_11 | temp_13;\n      if (temp_14 == 0) break;\n      temp_11 = temp_11 << 4 | temp_13 >> 0x1c;\n      temp_13 = temp_13 << 4;\n      temp_4 = temp_4 & 0xfffffff8 | temp_1 >> 0x1d;\n      temp_1 = (temp_2 >> 1) << 3;\n      temp_3 = temp_3 >> 4;\n      if (temp_3 == 0) {\n        temp_6 = temp_4;\n        if ((temp_7 & 0x100000) != 0) goto LAB_080089b2;\n        temp_7 = temp_7 | temp_12;\n        temp_12 = 0;\n        temp_3 = 0x80000000;\n      }\n    }\n    if ((temp_7 & 0x100000) == 0) {\n      temp_7 = temp_7 | temp_12;\n      temp_12 = 0;\n    }\nLAB_080089b2:\n    flag_3 = 0xfc < temp_9;\n    flag_2 = SBORROW4(temp_9,0xfd);\n    temp_4 = temp_8 + 0x300;\n    flag_1 = temp_4 == 0;\n    temp_3 = temp_4;\n    if (flag_3 && !flag_1) {\n      flag_3 = 0x6ff < temp_4;\n      flag_2 = SBORROW4(temp_4,0x700);\n      temp_3 = temp_8 - 0x400;\n      flag_1 = temp_4 == 0x700;\n    }\n    if (!flag_3 || flag_1) {\n      flag_1 = temp_6 <= temp_11;\n      if (temp_11 == temp_6) {\n        flag_1 = temp_1 <= temp_13;\n      }\n      if (temp_11 == temp_6 && temp_13 == temp_1) {\n        flag_1 = (temp_12 & 1) != 0;\n      }\n      return CONCAT44(temp_7 + temp_9 * 0x100000 + (uint)CARRY4(temp_12,(uint)flag_1),temp_12 + flag_1);\n    }\n  }\n  if (!flag_1 && (int)temp_3 < 0 == flag_2) {\n    return (ulonglong)(temp_7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag_3 = SCARRY4(temp_9,0x36);\n  flag_1 = (int)(temp_9 + 0x36) < 0;\n  flag_2 = temp_9 == 0xffffffca;\n  if (flag_2 || flag_1 != flag_3) {\n    temp_12 = 0;\n  }\n  if (flag_2 || flag_1 != flag_3) {\n    temp_7 = temp_7 & 0x80000000;\n  }\n  if (flag_2 || flag_1 != flag_3) {\n    return CONCAT44(temp_7,temp_12);\n  }\n  temp_3 = -temp_9;\n  temp_11 = temp_3 - 0x20;\n  if (0x1f < (int)temp_3) {\n    temp_3 = temp_12 >> (temp_11 & 0xff) | temp_7 << (0x20 - temp_11 & 0xff);\n    temp_9 = (temp_7 >> (temp_11 & 0xff) & ~((temp_7 & 0x80000000) >> (temp_11 & 0xff))) -\n            ((int)temp_3 >> 0x1f);\n    if ((temp_14 | temp_12 << (0x20 - temp_11 & 0xff) | temp_3 << 1) == 0) {\n      temp_9 = temp_9 & ~(temp_3 >> 0x1f);\n    }\n    return CONCAT44(temp_7,temp_9) & 0x80000000ffffffff;\n  }\n  temp_8 = temp_3 - 0x14;\n  if (temp_8 != 0 && temp_8 < 0 == SCARRY4(temp_11,0xc)) {\n    temp_9 = 0xc - temp_8;\n    temp_3 = temp_12 << (temp_9 & 0xff);\n    temp_12 = temp_12 >> (0x20 - temp_9 & 0xff) | temp_7 << (temp_9 & 0xff);\n    temp_9 = temp_12 + -((int)temp_3 >> 0x1f);\n    if ((temp_14 | temp_3 << 1) == 0) {\n      temp_9 = temp_9 & ~(temp_3 >> 0x1f);\n    }\n    return CONCAT44((temp_7 & 0x80000000) + (uint)CARRY4(temp_12,-((int)temp_3 >> 0x1f)),temp_9);\n  }\n  temp_11 = temp_12 << (temp_9 + 0x20 & 0xff);\n  temp_12 = temp_12 >> (temp_3 & 0xff) | temp_7 << (temp_9 + 0x20 & 0xff);\n  temp_9 = temp_12 + -((int)temp_11 >> 0x1f);\n  if ((temp_14 | temp_11 << 1) == 0) {\n    temp_9 = temp_9 & ~(temp_11 >> 0x1f);\n  }\n  return CONCAT44((temp_7 & 0x80000000) +\n                  ((temp_7 & 0x7fffffff) >> (temp_3 & 0xff)) +\n                  (uint)CARRY4(temp_12,-((int)temp_11 >> 0x1f)),temp_9);\n}\n\n",
            "renaming": {
                "FUN_08008894": "calculate_double_from_uints_08008894",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "temp_6",
                "uVar7": "temp_7",
                "iVar8": "temp_8",
                "uVar9": "temp_9",
                "unaff_r5": "temp_10",
                "uVar10": "temp_11",
                "uVar11": "temp_12",
                "uVar12": "temp_13",
                "uVar13": "temp_14",
                "bVar14": "flag_1",
                "bVar15": "flag_2",
                "bVar16": "flag_3",
                "uVar17": "result"
            },
            "calling": [
                "gc_execute_line",
                "__ieee754_atan2",
                "__ieee754_sqrt",
                "sqrt",
                "atan",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "calculate_double_from_uints_08008a02",
            "code": "\nulonglong calculate_double_from_uints_08008a02(uint input_uint_1,uint input_uint_2,uint input_uint_3,uint input_uint_4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  bool isZero;\n  \n  temp3 = temp5 & input_uint_4 >> 0x14;\n  temp4 = input_uint_2;\n  if (temp2 != temp5 || temp3 != temp5) {\n    if (temp2 == temp5) {\n      if (((input_uint_1 | input_uint_2 << 0xc) == 0) && (input_uint_1 = input_uint_3, temp4 = input_uint_4, temp3 != temp5)\n         ) {\nreturn_top_case:\n        return (ulonglong)((input_uint_2 ^ input_uint_4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp3 == temp5) {\n      input_uint_1 = input_uint_3;\n      temp4 = input_uint_4;\n      if ((input_uint_3 | input_uint_4 << 0xc) == 0) {\nreturn_second_case:\n        return (ulonglong)((input_uint_2 ^ input_uint_4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input_uint_1 | input_uint_2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input_uint_3 | input_uint_4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (temp2 == 0) {\n          temp4 = input_uint_2 & 0x80000000;\n          do {\n            temp1 = input_uint_1 & 0x80000000;\n            input_uint_1 = input_uint_1 << 1;\n            input_uint_2 = input_uint_2 * 2 + (uint)(temp1 != 0);\n          } while ((input_uint_2 & 0x100000) == 0);\n          input_uint_2 = input_uint_2 | temp4;\n          if (temp3 != 0) {\n            return combine_uints(input_uint_2,input_uint_1);\n          }\n        }\n        do {\n          temp4 = input_uint_3 & 0x80000000;\n          input_uint_3 = input_uint_3 << 1;\n          input_uint_4 = input_uint_4 * 2 + (uint)(temp4 != 0);\n        } while ((input_uint_4 & 0x100000) == 0);\n        return combine_uints(input_uint_2,input_uint_1);\n      }\n      if ((input_uint_1 | input_uint_2 << 1) != 0) goto return_top_case;\n      if ((input_uint_3 | input_uint_4 << 1) != 0) goto return_second_case;\n    }\n  }\n  return combine_uints(temp4,input_uint_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "calculate_double_from_uints_08008a02",
                "param_1": "input_uint_1",
                "param_2": "input_uint_2",
                "param_3": "input_uint_3",
                "param_4": "input_uint_4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "temp5",
                "bVar4": "isZero",
                "LAB_08008874": "return_top_case",
                "LAB_08008838": "return_second_case",
                "CONCAT44": "combine_uints"
            },
            "calling": [
                "__divdf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a64": {
            "entrypoint": "0x08008a64",
            "current_name": "check_parameters_08008a64",
            "code": "\nuint check_parameters_08008a64(uint var_1,uint var_2,uint var_3,uint var_4)\n\n{\n  uint result;\n  bool var_not_equal_zero_1;\n  bool var_not_equal_zero_2;\n  \n  if (((int)(var_2 << 1) >> 0x15 == -1 || (int)(var_4 << 1) >> 0x15 == -1) &&\n     ((((int)(var_2 << 1) >> 0x15 == -1 && ((var_1 | var_2 << 0xc) != 0)) ||\n      (((int)(var_4 << 1) >> 0x15 == -1 && ((var_3 | var_4 << 0xc) != 0)))))) {\n    return 0xffffffff;\n  }\n  var_not_equal_zero_1 = (var_1 | var_2 << 1) == 0;\n  if (var_not_equal_zero_1) {\n    var_not_equal_zero_1 = (var_3 | var_4 << 1) == 0;\n  }\n  if (!var_not_equal_zero_1) {\n    var_not_equal_zero_1 = var_2 == var_4;\n  }\n  if (var_not_equal_zero_1) {\n    var_not_equal_zero_1 = var_1 == var_3;\n  }\n  if (!var_not_equal_zero_1) {\n    result = var_2 ^ var_4;\n    var_not_equal_zero_1 = result == 0;\n    if (-1 < (int)result) {\n      var_not_equal_zero_1 = var_2 == var_4;\n    }\n    var_not_equal_zero_2 = -1 < (int)result && var_4 <= var_2;\n    if (var_not_equal_zero_1) {\n      var_not_equal_zero_2 = var_3 <= var_1;\n    }\n    var_4 = (int)var_4 >> 0x1f;\n    if (!var_not_equal_zero_2) {\n      var_4 = ~var_4;\n    }\n    return var_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a64": "check_parameters_08008a64",
                "param_1": "var_1",
                "param_2": "var_2",
                "param_3": "var_3",
                "param_4": "var_4",
                "uVar1": "result",
                "bVar2": "var_not_equal_zero_1",
                "bVar3": "var_not_equal_zero_2"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "check_equality_08008a6c",
            "code": "\nuint checkEquality_08008a6c(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint temp1;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    temp1 = value2 ^ value4;\n    isZero = temp1 == 0;\n    if (-1 < (int)temp1) {\n      isZero = value2 == value4;\n    }\n    isNegative = -1 < (int)temp1 && value4 <= value2;\n    if (isZero) {\n      isNegative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isNegative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "check_equality_08008a6c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "temp1",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "compare_parameters_08008a74",
            "code": "\nuint compare_parameters_08008a74(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegativeOrEqual;\n  \n  if (((int)(param_2 << 1) >> 0x15 == -1 || (int)(param_4 << 1) >> 0x15 == -1) &&\n     ((((int)(param_2 << 1) >> 0x15 == -1 && ((param_1 | param_2 << 0xc) != 0)) ||\n      (((int)(param_4 << 1) >> 0x15 == -1 && ((param_3 | param_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (param_1 | param_2 << 1) == 0;\n  if (isZero) {\n    isZero = (param_3 | param_4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = param_2 == param_4;\n  }\n  if (isZero) {\n    isZero = param_1 == param_3;\n  }\n  if (!isZero) {\n    result = param_2 ^ param_4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = param_2 == param_4;\n    }\n    isNegativeOrEqual = -1 < (int)result && param_4 <= param_2;\n    if (isZero) {\n      isNegativeOrEqual = param_3 <= param_1;\n    }\n    param_4 = (int)param_4 >> 0x1f;\n    if (!isNegativeOrEqual) {\n      param_4 = ~param_4;\n    }\n    return param_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "compare_parameters_08008a74",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegativeOrEqual"
            },
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "compare_floats_08008af0",
            "code": "\nvoid compareFloats_08008af0(undefined4 result,undefined4 status,undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cdcmpeq(float1,float2,result,status);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "compare_floats_08008af0",
                "param_1": "result",
                "param_2": "status",
                "param_3": "float1",
                "param_4": "float2"
            },
            "calling": [
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "convert_to_undefined4_08008b00",
            "code": "\nundefined4 convertToUndefined4_08008b00(undefined4 inputParam)\n\n{\n  performConversion();\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "convert_to_undefined4_08008b00",
                "param_1": "inputParam",
                "__nedf2": "performConversion"
            },
            "calling": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpeq",
                "__aeabi_dcmple",
                "__aeabi_cdrcmple"
            ],
            "called": [
                "__nedf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "check_if_not_zero_08008b10",
            "code": "\nbool check_if_not_zero_08008b10(void)\n\n{\n  char result;\n  \n  __aeabi_cdcmpeq();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "check_if_not_zero_08008b10",
                "in_ZR": "result"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "check_if_null_char_08008b24",
            "code": "\nbool check_if_null_char_08008b24(void)\n\n{\n  char input_character;\n  \n  __aeabi_cdcmpeq();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "check_if_null_char_08008b24",
                "in_CY": "input_character"
            },
            "calling": [
                "sqrt",
                "__ieee754_hypot",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b38": {
            "entrypoint": "0x08008b38",
            "current_name": "compare_floating_point_equality_08008b38",
            "code": "\nbool compareFloatingPointEquality_08008b38(void)\n\n{\n  undefined isZero;\n  undefined isCarry;\n  \n  __aeabi_cdcmpeq();\n  return !(bool)isCarry || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_08008b38": "compare_floating_point_equality_08008b38",
                "in_ZR": "isZero",
                "in_CY": "isCarry"
            },
            "calling": [],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "check_zr_and_carry_conditions_08008b4c",
            "code": "\nbool check_zr_and_carry_conditions_08008b4c(void)\n\n{\n  undefined is_zero_flag_set;\n  undefined is_carry_flag_set;\n  \n  __aeabi_cdrcmple();\n  return !(bool)is_carry_flag_set || (bool)is_zero_flag_set;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "check_zr_and_carry_conditions_08008b4c",
                "in_ZR": "is_zero_flag_set",
                "in_CY": "is_carry_flag_set"
            },
            "calling": [
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "is_character_null_08008b60",
            "code": "\nbool is_character_null_08008b60(void)\n\n{\n  char character;\n  \n  __aeabi_cdrcmple();\n  return character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "is_character_null_08008b60",
                "in_CY": "character"
            },
            "calling": [
                "ceil",
                "atan",
                "plan_buffer_line",
                "floor"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "is_valid_parameters_08008b74",
            "code": "\nundefined4 is_valid_parameters_08008b74(uint param1,int param2,uint param3,int param4)\n\n{\n  if ((((param2 << 1) >> 0x15 != -1) || ((param1 | param2 << 0xc) == 0)) &&\n     (((param4 << 1) >> 0x15 != -1 || ((param3 | param4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "is_valid_parameters_08008b74",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "sqrt"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "calculate_signed_division_08008ba0",
            "code": "\nuint calculateSignedDivision_08008ba0(uint dividend,uint divisor)\n\n{\n  uint result;\n  int shiftedDivisor;\n  uint difference;\n  \n  shiftedDivisor = divisor * 2 + 0x200000;\n  if (divisor * 2 < 0xffe00000) {\n    if (-1 < shiftedDivisor) {\n      return 0;\n    }\n    result = shiftedDivisor >> 0x15;\n    difference = -result - 0x3e1;\n    if (result < 0xfffffc20 && difference != 0) {\n      result = (divisor << 0xb | 0x80000000 | dividend >> 0x15) >> (difference & 0xff);\n      if ((divisor & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((dividend | divisor << 0xc) != 0) {\n    return 0;\n  }\n  divisor = divisor & 0x80000000;\n  if (divisor == 0) {\n    divisor = 0x7fffffff;\n  }\n  return divisor;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "calculate_signed_division_08008ba0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "result",
                "iVar2": "shiftedDivisor",
                "uVar3": "difference"
            },
            "calling": [
                "gc_execute_line",
                "__ieee754_rem_pio2",
                "calculate_trapezoid_for_block",
                "lround",
                "__kernel_rem_pio2",
                "__kernel_sin",
                "__kernel_cos",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "validate_and_shift_08008bf0",
            "code": "\nuint validate_and_shift_08008bf0(uint num1,uint num2)\n\n{\n  int shifted_value;\n  uint shift_count;\n  \n  if ((num2 & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = num2 * 2 + 0x200000;\n  if (num2 * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shift_count = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_count) {\n      return (num2 << 0xb | 0x80000000 | num1 >> 0x15) >> (shift_count & 0xff);\n    }\n  }\n  else if ((num1 | num2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "validate_and_shift_08008bf0",
                "param_1": "num1",
                "param_2": "num2",
                "iVar1": "shifted_value",
                "uVar2": "shift_count"
            },
            "calling": [
                "gc_execute_line",
                "protocol_execute_line",
                "calculate_trapezoid_for_block",
                "mc_dwell",
                "mc_arc",
                "homing_cycle",
                "settings_store_global_setting",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "calculate_float_08008c30",
            "code": "\nuint calculateFloat_08008c30(uint input,uint multiplier)\n\n{\n  uint result;\n  uint multiplierTimesTwo;\n  uint modifiedMultiplier;\n  uint temp;\n  bool isZero;\n  bool isInRange;\n  \n  multiplierTimesTwo = multiplier * 2;\n  isInRange = multiplierTimesTwo < 0x70000000;\n  modifiedMultiplier = multiplierTimesTwo + 0x90000000;\n  result = modifiedMultiplier;\n  if (!isInRange) {\n    temp = multiplierTimesTwo + 0x8fe00000;\n    result = temp;\n  }\n  isZero = result == 0;\n  if (!isInRange && modifiedMultiplier >= 0x200000) {\n    isZero = temp == 0x1fc00000;\n  }\n  if (((isInRange || modifiedMultiplier < 0x200000) || 0x1fc00000 < temp) || isZero) {\n    if ((multiplier & 0x40000000) != 0) {\n      if (((int)multiplierTimesTwo >> 0x15 == -1) && ((input | multiplier << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return multiplier & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(multiplierTimesTwo + 0x92e00000) < 0 != SCARRY4(modifiedMultiplier,0x2e00000)) {\n      return multiplier & 0x80000000;\n    }\n    multiplierTimesTwo = 0x18 - (multiplierTimesTwo + 0x92e00000 >> 0x15);\n    result = input >> (multiplierTimesTwo & 0xff);\n    if (input << (0x20 - multiplierTimesTwo & 0xff) != 0) {\n      result = result | 1;\n    }\n    modifiedMultiplier = multiplier & 0x1fffff | 0x100000;\n    input = result | modifiedMultiplier << (0x20 - multiplierTimesTwo & 0xff);\n    modifiedMultiplier = (modifiedMultiplier >> (multiplierTimesTwo & 0xff)) << 1;\n  }\n  result = (multiplier & 0x80000000 | input >> 0x1d) + modifiedMultiplier * 4 + (uint)(0x7fffffff < input * 8);\n  if (input * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "calculate_float_08008c30",
                "param_1": "input",
                "param_2": "multiplier",
                "uVar1": "result",
                "uVar2": "multiplierTimesTwo",
                "uVar3": "modifiedMultiplier",
                "in_r12": "temp",
                "bVar4": "isZero",
                "bVar5": "isInRange"
            },
            "calling": [
                "gc_execute_line",
                "to_millimeters",
                "read_float",
                "mc_arc",
                "report_realtime_status",
                "homing_cycle",
                "report_gcode_modes",
                "max_allowable_speed",
                "plan_buffer_line",
                "report_gcode_parameters"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd0": {
            "entrypoint": "0x08008cd0",
            "current_name": "adjust_neg_float_08008cd0",
            "code": "\nvoid adjustNegFloat_08008cd0(uint input)\n\n{\n  __addsf3(input ^ 0x80000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008cd0": "adjust_neg_float_08008cd0",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "__addsf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "perform_calculation_08008cd8",
            "code": "\nuint performCalculation_08008cd8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftedInput1MSB;\n  int shiftedInput2MSB;\n  uint flippedInput2;\n  uint flippedInput2Adjusted;\n  uint shiftedInput1;\n  uint shiftedInput1Adjusted;\n  uint inputDifference;\n  bool isEqual;\n  \n  flippedInput2 = input2 ^ 0x80000000;\n  shiftedInput1 = input1 << 1;\n  isEqual = shiftedInput1 == 0;\n  if (!isEqual) {\n    input4 = input2 << 1;\n    isEqual = input4 == 0;\n  }\n  if (!isEqual) {\n    isEqual = shiftedInput1 == input4;\n  }\n  shiftedInput1MSB = (int)shiftedInput1 >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftedInput1MSB == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)input4 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedInput2MSB = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1MSB == -1 || shiftedInput2MSB == -1) {\n      shiftedInput1 = flippedInput2;\n      if (shiftedInput1MSB == -1) {\n        shiftedInput1 = input1;\n      }\n      if (shiftedInput1MSB != -1 || shiftedInput2MSB != -1) {\n        flippedInput2 = shiftedInput1;\n      }\n      isEqual = (shiftedInput1 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (flippedInput2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = shiftedInput1 == flippedInput2;\n      }\n      if (!isEqual) {\n        shiftedInput1 = shiftedInput1 | 0x400000;\n      }\n      return shiftedInput1;\n    }\n    if (((input1 ^ flippedInput2) & 0x7fffffff) != 0) {\n      if (shiftedInput1 == 0) {\n        input1 = flippedInput2;\n      }\n      return input1;\n    }\n    if (input1 != flippedInput2) {\n      return 0;\n    }\n    if ((shiftedInput1 & 0xff000000) == 0) {\n      flippedInput2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        flippedInput2 = flippedInput2 | 0x80000000;\n      }\n      return flippedInput2;\n    }\n    if (shiftedInput1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  shiftedInput1 = shiftedInput1 >> 0x18;\n  input4 = input4 >> 0x18;\n  inputDifference = input4 - shiftedInput1;\n  isEqual = inputDifference != 0;\n  shiftedInput1Adjusted = shiftedInput1;\n  if (isEqual && shiftedInput1 <= input4) {\n    shiftedInput1Adjusted = shiftedInput1 + inputDifference;\n  }\n  if (isEqual && shiftedInput1 <= input4) {\n    flippedInput2 = flippedInput2 ^ input1;\n  }\n  if (isEqual && shiftedInput1 <= input4) {\n    input1 = input1 ^ flippedInput2;\n  }\n  if (isEqual && shiftedInput1 <= input4) {\n    flippedInput2 = flippedInput2 ^ input1;\n  }\n  if (input4 < shiftedInput1) {\n    inputDifference = -inputDifference;\n  }\n  if (0x19 < inputDifference) {\n    return input1;\n  }\n  shiftedInput1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shiftedInput1 = -shiftedInput1;\n  }\n  flippedInput2Adjusted = flippedInput2 & 0xffffff | 0x800000;\n  if ((flippedInput2 & 0x80000000) != 0) {\n    flippedInput2Adjusted = -flippedInput2Adjusted;\n  }\n  if (shiftedInput1Adjusted == inputDifference) {\n    flippedInput2Adjusted = flippedInput2Adjusted ^ 0x800000;\n    if (shiftedInput1Adjusted == 0) {\n      shiftedInput1 = shiftedInput1 ^ 0x800000;\n      shiftedInput1Adjusted = 1;\n    }\n    else {\n      inputDifference = inputDifference - 1;\n    }\n  }\n  shiftedInput1 = shiftedInput1 + ((int)flippedInput2Adjusted >> (inputDifference & 0xff));\n  flippedInput2Adjusted = flippedInput2Adjusted << (0x20 - inputDifference & 0xff);\n  input1 = shiftedInput1 & 0x80000000;\n  if ((int)shiftedInput1 < 0) {\n    isEqual = flippedInput2Adjusted != 0;\n    flippedInput2Adjusted = -flippedInput2Adjusted;\n    shiftedInput1 = -shiftedInput1 - (uint)isEqual;\n  }\n  if (shiftedInput1 < 0x800000) {\n    flippedInput2 = flippedInput2Adjusted & 0x80000000;\n    flippedInput2Adjusted = flippedInput2Adjusted << 1;\n    shiftedInput1 = shiftedInput1 * 2 + (uint)(flippedInput2 != 0);\n    flippedInput2 = shiftedInput1Adjusted - 2;\n    if (shiftedInput1Adjusted - 1 == 0 || shiftedInput1 < 0x800000) {\n      inputDifference = LZCOUNT(shiftedInput1) - 8;\n      shiftedInput1 = shiftedInput1 << (inputDifference & 0xff);\n      if ((int)flippedInput2 < (int)inputDifference) {\n        shiftedInput1 = shiftedInput1 >> (-(flippedInput2 - inputDifference) & 0xff);\n      }\n      else {\n        shiftedInput1 = shiftedInput1 + (flippedInput2 - inputDifference) * 0x800000;\n      }\n      return shiftedInput1 | input1;\n    }\n  }\n  else {\n    flippedInput2 = shiftedInput1Adjusted - 1;\n    if (0xffffff < shiftedInput1) {\n      flippedInput2 = shiftedInput1 & 1;\n      shiftedInput1 = shiftedInput1 >> 1;\n      flippedInput2Adjusted = (uint)(flippedInput2 != 0) << 0x1f | flippedInput2Adjusted >> 1;\n      flippedInput2 = shiftedInput1Adjusted;\n      if (0xfd < shiftedInput1Adjusted) goto LAB_08008e12;\n    }\n  }\n  shiftedInput1 = shiftedInput1 + flippedInput2 * 0x800000 + (uint)(0x7fffffff < flippedInput2Adjusted);\n  if (flippedInput2Adjusted == 0x80000000) {\n    shiftedInput1 = shiftedInput1 & 0xfffffffe;\n  }\n  return shiftedInput1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "perform_calculation_08008cd8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "flippedInput2",
                "uVar5": "shiftedInput1",
                "uVar6": "shiftedInput1Adjusted",
                "uVar7": "inputDifference",
                "bVar8": "isEqual",
                "iVar1": "shiftedInput1MSB",
                "iVar2": "shiftedInput2MSB",
                "uVar4": "flippedInput2Adjusted"
            },
            "calling": [
                "gc_execute_line",
                "intersection_distance",
                "mc_dwell",
                "mc_arc",
                "report_realtime_status",
                "estimate_acceleration_distance",
                "max_allowable_speed",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "perform_arithmetic_08008cdc",
            "code": "\nuint performArithmetic_08008cdc(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftAmount1;\n  int shiftAmount2;\n  uint result1;\n  uint result2;\n  uint temp1;\n  uint temp2;\n  bool flag;\n  \n  result2 = input1 << 1;\n  flag = result2 == 0;\n  if (!flag) {\n    input4 = input2 << 1;\n    flag = input4 == 0;\n  }\n  if (!flag) {\n    flag = result2 == input4;\n  }\n  shiftAmount1 = (int)result2 >> 0x18;\n  if (!flag) {\n    flag = shiftAmount1 == -1;\n  }\n  if (!flag) {\n    flag = (int)input4 >> 0x18 == -1;\n  }\n  if (flag) {\n    shiftAmount2 = (int)(input2 << 1) >> 0x18;\n    if (shiftAmount1 == -1 || shiftAmount2 == -1) {\n      result2 = input2;\n      if (shiftAmount1 == -1) {\n        result2 = input1;\n      }\n      if (shiftAmount1 != -1 || shiftAmount2 != -1) {\n        input2 = result2;\n      }\n      flag = (result2 & 0x7fffff) == 0;\n      if (flag) {\n        flag = (input2 & 0x7fffff) == 0;\n      }\n      if (flag) {\n        flag = result2 == input2;\n      }\n      if (!flag) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  input4 = input4 >> 0x18;\n  temp2 = input4 - result2;\n  flag = temp2 != 0;\n  temp1 = result2;\n  if (flag && result2 <= input4) {\n    temp1 = result2 + temp2;\n  }\n  if (flag && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (flag && result2 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (flag && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < result2) {\n    temp2 = -temp2;\n  }\n  if (0x19 < temp2) {\n    return input1;\n  }\n  result2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp1 == temp2) {\n    result1 = result1 ^ 0x800000;\n    if (temp1 == 0) {\n      result2 = result2 ^ 0x800000;\n      temp1 = 1;\n    }\n    else {\n      temp2 = temp2 - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (temp2 & 0xff));\n  result1 = result1 << (0x20 - temp2 & 0xff);\n  input1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    flag = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)flag;\n  }\n  if (result2 < 0x800000) {\n    temp2 = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(temp2 != 0);\n    temp2 = temp1 - 2;\n    if (temp1 - 1 == 0 || result2 < 0x800000) {\n      temp1 = LZCOUNT(result2) - 8;\n      result2 = result2 << (temp1 & 0xff);\n      if ((int)temp2 < (int)temp1) {\n        result2 = result2 >> (-(temp2 - temp1) & 0xff);\n      }\n      else {\n        result2 = result2 + (temp2 - temp1) * 0x800000;\n      }\n      return result2 | input1;\n    }\n  }\n  else {\n    temp2 = temp1 - 1;\n    if (0xffffff < result2) {\n      temp2 = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(temp2 != 0) << 0x1f | result1 >> 1;\n      temp2 = temp1;\n      if (0xfd < temp1) goto LAB_08008e12;\n    }\n  }\n  result2 = result2 + temp2 * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | input1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "perform_arithmetic_08008cdc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftAmount1",
                "iVar2": "shiftAmount2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "bVar7": "flag"
            },
            "calling": [
                "gc_execute_line",
                "printFloat",
                "intersection_distance",
                "mc_arc",
                "__aeabi_frsub",
                "report_realtime_status",
                "estimate_acceleration_distance",
                "max_allowable_speed",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "reverse_bitwise_operation_08008e3c",
            "code": "\nuint reverseBitwiseOperation_08008e3c(uint inputValue)\n\n{\n  uint bitCount;\n  uint shiftCount;\n  int constant1;\n  uint shiftedValue;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  bitCount = LZCOUNT(inputValue);\n  shiftCount = bitCount - 8;\n  constant1 = shiftCount * -0x800000 + 0x4a800000;\n  if (7 < bitCount) {\n    shiftedValue = 0 << (shiftCount & 0xff);\n    bitCount = constant1 + (inputValue << (shiftCount & 0xff)) +\n            (0U >> (0x20 - shiftCount & 0xff)) + (uint)(0x7fffffff < shiftedValue);\n    if (shiftedValue == 0x80000000) {\n      bitCount = bitCount & 0xfffffffe;\n    }\n    return bitCount;\n  }\n  shiftCount = inputValue << bitCount + 0x18;\n  bitCount = constant1 + ((inputValue >> (0x20 - (bitCount + 0x18) & 0xff)) - ((int)shiftCount >> 0x1f));\n  if ((shiftCount & 0x7fffffff) == 0) {\n    bitCount = bitCount & ~(shiftCount >> 0x1f);\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "reverse_bitwise_operation_08008e3c",
                "param_1": "inputValue",
                "uVar1": "bitCount",
                "uVar2": "shiftCount",
                "iVar3": "constant1",
                "uVar4": "shiftedValue"
            },
            "calling": [
                "calculate_trapezoid_for_block",
                "read_float"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "optimized_function_08008e44",
            "code": "\nuint optimized_function_08008e44(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_distance;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input_value & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input_value);\n  shift_distance = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_distance * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_distance & 0xff);\n    sign_bit = result + (input_value << (shift_distance & 0xff)) +\n            (0U >> (0x20 - shift_distance & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_distance = input_value << leading_zeros + 0x18;\n  sign_bit = result + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_distance >> 0x1f));\n  if ((shift_distance & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_distance >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "optimized_function_08008e44",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_distance",
                "uVar3": "sign_bit",
                "iVar4": "result",
                "LZCOUNT": "count_leading_zeros"
            },
            "calling": [
                "gc_set_current_position",
                "mc_go_home",
                "calculate_trapezoid_for_block",
                "mc_dwell",
                "mc_arc",
                "report_realtime_status",
                "plan_cycle_reinitialize",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e60": {
            "entrypoint": "0x08008e60",
            "current_name": "reverse_calculation_08008e60",
            "code": "\nuint reverse_calculation_08008e60(uint input1,uint input2)\n\n{\n  uint result1;\n  uint result2;\n  uint shifted_count;\n  uint shift_value;\n  int constant_value;\n  \n  if ((input1 | input2) == 0) {\n    return input1;\n  }\n  result1 = input1;\n  result2 = input2;\n  if (input2 == 0) {\n    result1 = 0;\n    result2 = input1;\n  }\n  constant_value = 0x5b000000;\n  if (input2 == 0) {\n    constant_value = 0x4b000000;\n  }\n  shifted_count = LZCOUNT(result2);\n  shift_value = shifted_count - 8;\n  constant_value = constant_value + -0x800000 + shift_value * -0x800000;\n  if (shifted_count < 8) {\n    shift_value = result2 << shifted_count + 0x18;\n    result2 = constant_value + ((result2 >> (0x20 - (shifted_count + 0x18) & 0xff)) - ((int)shift_value >> 0x1f));\n    if ((result1 | shift_value << 1) == 0) {\n      result2 = result2 & ~(shift_value >> 0x1f);\n    }\n    return result2;\n  }\n  shifted_count = result1 << (shift_value & 0xff);\n  result2 = constant_value + (result2 << (shift_value & 0xff)) +\n          (result1 >> (0x20 - shift_value & 0xff)) + (uint)(0x7fffffff < shifted_count);\n  if (shifted_count == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2;\n}\n\n",
            "renaming": {
                "FUN_08008e60": "reverse_calculation_08008e60",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "shifted_count",
                "uVar4": "shift_value",
                "iVar5": "constant_value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e70": {
            "entrypoint": "0x08008e70",
            "current_name": "calculate_with_shift_08008e70",
            "code": "\nuint calculateWithShift_08008e70(uint dividend,uint divisor)\n\n{\n  uint absDivisor;\n  uint absDividend;\n  uint shiftCount;\n  uint shiftCountMinus8;\n  uint signBit;\n  int initialValue;\n  bool isDividendNonZero;\n  \n  if ((dividend | divisor) == 0) {\n    return dividend;\n  }\n  signBit = divisor & 0x80000000;\n  if ((int)signBit < 0) {\n    isDividendNonZero = dividend != 0;\n    dividend = -dividend;\n    divisor = -divisor - (uint)isDividendNonZero;\n  }\n  absDividend = dividend;\n  absDivisor = divisor;\n  if (divisor == 0) {\n    absDividend = 0;\n    absDivisor = dividend;\n  }\n  signBit = signBit | 0x5b000000;\n  if (divisor == 0) {\n    signBit = signBit + 0xf0000000;\n  }\n  shiftCount = LZCOUNT(absDivisor);\n  shiftCountMinus8 = shiftCount - 8;\n  initialValue = (signBit - 0x800000) + shiftCountMinus8 * -0x800000;\n  if (shiftCount < 8) {\n    shiftCountMinus8 = absDivisor << shiftCount + 0x18;\n    signBit = initialValue + ((absDivisor >> (0x20 - (shiftCount + 0x18) & 0xff)) - ((int)shiftCountMinus8 >> 0x1f));\n    if ((absDividend | shiftCountMinus8 << 1) == 0) {\n      signBit = signBit & ~(shiftCountMinus8 >> 0x1f);\n    }\n    return signBit;\n  }\n  shiftCount = absDividend << (shiftCountMinus8 & 0xff);\n  signBit = initialValue + (absDivisor << (shiftCountMinus8 & 0xff)) +\n          (absDividend >> (0x20 - shiftCountMinus8 & 0xff)) + (uint)(0x7fffffff < shiftCount);\n  if (shiftCount == 0x80000000) {\n    signBit = signBit & 0xfffffffe;\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08008e70": "calculate_with_shift_08008e70",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "absDivisor",
                "uVar2": "absDividend",
                "uVar3": "shiftCount",
                "uVar4": "shiftCountMinus8",
                "uVar5": "signBit",
                "iVar6": "initialValue",
                "bVar7": "isDividendNonZero"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_floating_point_08008eec",
            "code": "\nuint calculateFloatingPoint_08008eec(uint input1,uint input2,undefined4 temp1,uint temp2)\n\n{\n  longlong product;\n  uint result;\n  uint shift1;\n  int shiftedSum;\n  int shiftedDiff;\n  uint shiftedProduct;\n  int shift;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  shift1 = input1 >> 0x17 & 0xff;\n  bVar9 = shift1 == 0;\n  if (!bVar9) {\n    temp2 = input2 >> 0x17 & 0xff;\n    bVar9 = temp2 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = shift1 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = temp2 == 0xff;\n  }\n  if (bVar9) {\n    temp2 = input2 >> 0x17 & 0xff;\n    if (shift1 == 0xff || temp2 == 0xff) {\n      bVar9 = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        bVar9 = input2 == 0;\n        result = input1;\n      }\n      if (!bVar9) {\n        bVar9 = input2 == 0x80000000;\n      }\n      uVar8 = result;\n      if (((bVar9) || ((shift1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((temp2 == 0xff && (uVar8 = input2, (input2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_0800903c;\n    }\n    bVar9 = (input1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (input2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    bVar9 = shift1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        input1 = input1 << 1;\n        bVar9 = (input1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      shift1 = shift1 - 1;\n    }\n    input1 = input1 | result;\n    bVar9 = temp2 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        input2 = input2 << 1;\n        bVar9 = (input2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      temp2 = temp2 - 1;\n    }\n    input2 = input2 | result;\n  }\n  shiftedSum = shift1 + temp2;\n  uVar8 = input1 ^ input2;\n  shift1 = input1 << 9;\n  bVar9 = shift1 == 0;\n  if (!bVar9) {\n    input2 = input2 << 9;\n    bVar9 = input2 == 0;\n  }\n  if (bVar9) {\n    if (shift1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = uVar8 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    bVar10 = SBORROW4(shiftedSum,0x7f);\n    shiftedDiff = shiftedSum + -0x7f;\n    bVar9 = shiftedDiff == 0;\n    shift = shiftedDiff;\n    if (!bVar9 && 0x7e < shiftedSum) {\n      bVar10 = SBORROW4(0xff,shiftedDiff);\n      shift = 0xff - shiftedDiff;\n      bVar9 = shiftedDiff == 0xff;\n    }\n    if (!bVar9 && shift < 0 == bVar10) {\n      result = result | shiftedDiff * 0x800000;\n    }\n    if (!bVar9 && shift < 0 == bVar10) {\n      return result;\n    }\n    result = result | 0x800000;\n    shiftedProduct = 0;\n    bVar10 = SBORROW4(shiftedDiff,1);\n    uVar8 = shiftedSum - 0x80;\n    bVar9 = uVar8 == 0;\n    shift1 = uVar8;\n  }\n  else {\n    product = (ulonglong)(shift1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    shiftedProduct = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    bVar9 = result < 0x800000;\n    if (bVar9) {\n      result = result << 1;\n    }\n    if (bVar9) {\n      result = result | shiftedProduct >> 0x1f;\n      shiftedProduct = shiftedProduct << 1;\n    }\n    result = uVar8 & 0x80000000 | result;\n    uVar8 = (shiftedSum + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    shift1 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      result = result + uVar8 * 0x800000 + (uint)(0x7fffffff < shiftedProduct);\n      if (shiftedProduct == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (bVar9 || (int)shift1 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      shift1 = (result << 1) >> (-uVar8 & 0xff);\n      uVar8 = result << (uVar8 + 0x20 & 0xff);\n      shift1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shift1 >> 1) + (uint)((byte)shift1 & 1);\n      if ((shiftedProduct | uVar8 << 1) == 0) {\n        shift1 = shift1 & ~(uVar8 >> 0x1f);\n      }\n      return shift1;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_floating_point_08008eec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "temp1",
                "param_4": "temp2",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "shift1",
                "iVar4": "shiftedSum",
                "iVar5": "shiftedDiff",
                "uVar6": "shiftedProduct",
                "iVar7": "shift"
            },
            "calling": [
                "printFloat",
                "calculate_trapezoid_for_block",
                "estimate_acceleration_distance",
                "plan_cycle_reinitialize",
                "homing_cycle",
                "max_allowable_speed",
                "plan_buffer_line",
                "gc_execute_line",
                "mc_go_home",
                "intersection_distance",
                "read_float",
                "mc_dwell",
                "mc_arc",
                "settings_store_global_setting"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "calculate_floating_point_08009054",
            "code": "\nuint calculateFloatingPoint_08009054(uint number1,uint number2,undefined4 parameter3,uint parameter4)\n\n{\n  uint dividend;\n  uint exponent1;\n  int exponentDiff;\n  uint exponent2;\n  int additionalExponentDiff;\n  uint result;\n  bool isZero;\n  bool overflow;\n  bool carry;\n  \n  exponent1 = number1 >> 0x17 & 0xff;\n  isZero = exponent1 == 0;\n  if (!isZero) {\n    parameter4 = number2 >> 0x17 & 0xff;\n    isZero = parameter4 == 0;\n  }\n  if (!isZero) {\n    isZero = exponent1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = parameter4 == 0xff;\n  }\n  if (isZero) {\n    parameter4 = number2 >> 0x17 & 0xff;\n    result = number1;\n    if (exponent1 == 0xff) {\n      if (((number1 & 0x7fffff) != 0) || (result = number2, parameter4 == 0xff)) {\nLAB_0800904a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (parameter4 == 0xff) {\n        result = number2;\n        if ((number2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (number1 ^ number2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      isZero = (number1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (number2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = exponent1 == 0;\n        result = number1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            number1 = number1 << 1;\n            isZero = (number1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          exponent1 = exponent1 - 1;\n        }\n        number1 = number1 | result;\n        isZero = parameter4 == 0;\n        result = number2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            number2 = number2 << 1;\n            isZero = (number2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          parameter4 = parameter4 - 1;\n        }\n        number2 = number2 | result;\n        goto LAB_0800906c;\n      }\n      if ((number1 & 0x7fffffff) == 0) {\n        if ((number2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    number1 = number1 ^ number2;\n  }\n  else {\nLAB_0800906c:\n    exponentDiff = exponent1 - parameter4;\n    if (number2 << 9 == 0) {\n      number1 = (number1 ^ number2) & 0x80000000 | number1 & 0x7fffff;\n      carry = SCARRY4(exponentDiff,0x7f);\n      additionalExponentDiff = exponentDiff + 0x7f;\n      isZero = additionalExponentDiff < 0;\n      overflow = additionalExponentDiff == 0;\n      if (!overflow && isZero == carry) {\n        carry = SBORROW4(0xff,additionalExponentDiff);\n        isZero = 0xff - additionalExponentDiff < 0;\n        overflow = additionalExponentDiff == 0xff;\n      }\n      if (!overflow && isZero == carry) {\n        number1 = number1 | additionalExponentDiff * 0x800000;\n      }\n      if (!overflow && isZero == carry) {\n        return number1;\n      }\n      number1 = number1 | 0x800000;\n      exponent1 = 0;\n      overflow = SBORROW4(additionalExponentDiff,1);\n      exponent2 = exponentDiff + 0x7e;\n      isZero = exponent2 == 0;\n      result = exponent2;\n    }\n    else {\n      dividend = (number2 << 9) >> 4 | 0x10000000;\n      exponent1 = (number1 << 9) >> 4 | 0x10000000;\n      number1 = (number1 ^ number2) & 0x80000000;\n      isZero = dividend <= exponent1;\n      if (!isZero) {\n        exponent1 = exponent1 << 1;\n      }\n      exponent2 = exponentDiff + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (dividend <= exponent1) {\n          exponent1 = exponent1 - dividend;\n          number1 = number1 | result;\n        }\n        isZero = dividend >> 1 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (dividend >> 1);\n        }\n        if (isZero) {\n          number1 = number1 | result >> 1;\n        }\n        isZero = dividend >> 2 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (dividend >> 2);\n        }\n        if (isZero) {\n          number1 = number1 | result >> 2;\n        }\n        isZero = dividend >> 3 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (dividend >> 3);\n        }\n        if (isZero) {\n          number1 = number1 | result >> 3;\n        }\n        exponent1 = exponent1 * 0x10;\n        isZero = exponent1 == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      overflow = SBORROW4(exponent2,0xfd);\n      isZero = exponent2 == 0xfd;\n      result = exponent2 - 0xfd;\n      if (exponent2 < 0xfe) {\n        number1 = number1 + exponent2 * 0x800000 + (uint)(dividend <= exponent1);\n        if (exponent1 - dividend == 0) {\n          number1 = number1 & 0xfffffffe;\n        }\n        return number1;\n      }\n    }\n    if (isZero || (int)result < 0 != overflow) {\n      isZero = (int)(exponent2 + 0x19) < 0;\n      if (exponent2 == 0xffffffe7 || isZero != SCARRY4(exponent2,0x19)) {\n        number1 = number1 & 0x80000000;\n      }\n      if (exponent2 == 0xffffffe7 || isZero != SCARRY4(exponent2,0x19)) {\n        return number1;\n      }\n      result = (number1 << 1) >> (-exponent2 & 0xff);\n      exponent2 = number1 << (exponent2 + 0x20 & 0xff);\n      result = ((uint)((number1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((exponent1 | exponent2 << 1) == 0) {\n        result = result & ~(exponent2 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return number1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "calculate_floating_point_08009054",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "uVar1": "dividend",
                "uVar2": "exponent1",
                "iVar3": "exponentDiff",
                "uVar4": "exponent2",
                "iVar5": "additionalExponentDiff",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "overflow",
                "bVar9": "carry"
            },
            "calling": [
                "gc_set_current_position",
                "intersection_distance",
                "report_grbl_settings",
                "planner_recalculate_trapezoids",
                "mc_arc",
                "report_realtime_status",
                "estimate_acceleration_distance",
                "plan_cycle_reinitialize",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800918c": {
            "entrypoint": "0x0800918c",
            "current_name": "calculate_xor_0800918c",
            "code": "\nuint calculate_xor_0800918c(uint output,uint input_2)\n\n{\n  bool is_combined_negative;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint combined_inputs;\n  bool is_combined_zero;\n  \n  input_1_times_2 = output * 2;\n  input_2_times_2 = input_2 * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((output & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  combined_inputs = input_1_times_2 | input_2 & 0x7fffffff;\n  is_combined_zero = combined_inputs == 0;\n  if (!is_combined_zero) {\n    combined_inputs = output ^ input_2;\n    is_combined_zero = combined_inputs == 0;\n  }\n  is_combined_negative = -1 < (int)combined_inputs;\n  if (is_combined_negative) {\n    output = input_1_times_2 + input_2 * -2;\n    is_combined_zero = output == 0;\n  }\n  if ((is_combined_negative && input_2_times_2 <= input_1_times_2) && !is_combined_zero) {\n    output = (int)input_2 >> 0x1f;\n  }\n  if (!is_combined_negative || input_2_times_2 > input_1_times_2) {\n    output = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_combined_zero) {\n    output = output | 1;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_0800918c": "calculate_xor_0800918c",
                "param_1": "output",
                "param_2": "input_2",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_combined_negative",
                "bVar5": "is_combined_zero"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009194": {
            "entrypoint": "0x08009194",
            "current_name": "check_overflow_08009194",
            "code": "\nuint check_overflow_08009194(uint num1,uint num2)\n\n{\n  bool is_negative;\n  uint num1_doubled;\n  uint num2_doubled;\n  uint combined;\n  bool is_zero;\n  \n  num1_doubled = num1 * 2;\n  num2_doubled = num2 * 2;\n  if (((int)num1_doubled >> 0x18 == -1 || (int)num2_doubled >> 0x18 == -1) &&\n     ((((int)num1_doubled >> 0x18 == -1 && ((num1 & 0x7fffff) != 0)) ||\n      (((int)num2_doubled >> 0x18 == -1 && ((num2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined = num1_doubled | num2 & 0x7fffffff;\n  is_zero = combined == 0;\n  if (!is_zero) {\n    combined = num1 ^ num2;\n    is_zero = combined == 0;\n  }\n  is_negative = -1 < (int)combined;\n  if (is_negative) {\n    num1 = num1_doubled + num2 * -2;\n    is_zero = num1 == 0;\n  }\n  if ((is_negative && num2_doubled <= num1_doubled) && !is_zero) {\n    num1 = (int)num2 >> 0x1f;\n  }\n  if (!is_negative || num2_doubled > num1_doubled) {\n    num1 = ~((int)num2 >> 0x1f);\n  }\n  if (!is_zero) {\n    num1 = num1 | 1;\n  }\n  return num1;\n}\n\n",
            "renaming": {
                "FUN_08009194": "check_overflow_08009194",
                "param_1": "num1",
                "param_2": "num2",
                "uVar2": "num1_doubled",
                "uVar3": "num2_doubled",
                "uVar4": "combined",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "check_overflow_and_sign_0800919c",
            "code": "\nuint check_overflow_and_sign_0800919c(uint output,uint output)\n\n{\n  bool is_overflow;\n  uint input_1_double;\n  uint input_2_double;\n  uint combined_value;\n  bool is_combined_zero;\n  \n  input_1_double = output * 2;\n  input_2_double = output * 2;\n  if (((int)input_1_double >> 0x18 == -1 || (int)input_2_double >> 0x18 == -1) &&\n     ((((int)input_1_double >> 0x18 == -1 && ((output & 0x7fffff) != 0)) ||\n      (((int)input_2_double >> 0x18 == -1 && ((output & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_value = input_1_double | output & 0x7fffffff;\n  is_combined_zero = combined_value == 0;\n  if (!is_combined_zero) {\n    combined_value = output ^ output;\n    is_combined_zero = combined_value == 0;\n  }\n  is_overflow = -1 < (int)combined_value;\n  if (is_overflow) {\n    output = input_1_double + output * -2;\n    is_combined_zero = output == 0;\n  }\n  if ((is_overflow && input_2_double <= input_1_double) && !is_combined_zero) {\n    output = (int)output >> 0x1f;\n  }\n  if (!is_overflow || input_2_double > input_1_double) {\n    output = ~((int)output >> 0x1f);\n  }\n  if (!is_combined_zero) {\n    output = output | 1;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "check_overflow_and_sign_0800919c",
                "param_1": "output",
                "param_2": "output",
                "bVar1": "is_overflow",
                "uVar2": "input_1_double",
                "uVar3": "input_2_double",
                "uVar4": "combined_value",
                "bVar5": "is_combined_zero"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "compare_floats_080091fc",
            "code": "\nvoid compareFloats_080091fc(undefined4 firstFloat,undefined4 secondFloat)\n\n{\n  __aeabi_cfcmpeq(secondFloat,firstFloat);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "compare_floats_080091fc",
                "param_1": "firstFloat",
                "param_2": "secondFloat"
            },
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "concatenate_params_08009204",
            "code": "\nundefined8 concatenateParams_08009204(undefined4 firstParam,undefined4 secondParam)\n\n{\n  __cmpsf2();\n  return CONCAT44(secondParam,firstParam);\n}\n\n",
            "renaming": {
                "FUN_08009204": "concatenate_params_08009204",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "calling": [
                "__aeabi_fcmple",
                "__aeabi_fcmplt",
                "__aeabi_cfrcmple",
                "__aeabi_fcmpeq"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "check_non_zero_value_08009214",
            "code": "\nbool check_non_zero_value_08009214(void)\n\n{\n  char input_value;\n  \n  __aeabi_cfcmpeq();\n  return input_value != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "check_non_zero_value_08009214",
                "in_ZR": "input_value"
            },
            "calling": [
                "gc_execute_line",
                "read_float",
                "planner_forward_pass_kernel",
                "mc_arc",
                "settings_store_global_setting",
                "planner_reverse_pass_kernel"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "is_cy_null_08009228",
            "code": "\nbool is_CY_null_08009228(void)\n\n{\n  char CY;\n  \n  compare_floats();\n  return CY == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "is_cy_null_08009228",
                "in_CY": "CY",
                "__aeabi_cfcmpeq": "compare_floats"
            },
            "calling": [
                "gc_execute_line",
                "printFloat",
                "planner_forward_pass_kernel",
                "settings_store_global_setting",
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "check_float_comparison_0800923c",
            "code": "\nbool checkFloatComparison_0800923c(void)\n\n{\n  undefined isZeroResult;\n  undefined carryFlag;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)carryFlag || (bool)isZeroResult;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "check_float_comparison_0800923c",
                "in_ZR": "isZeroResult",
                "in_CY": "carryFlag"
            },
            "calling": [
                "gc_execute_line",
                "mc_arc",
                "settings_store_global_setting"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "check_float_comparison_08009250",
            "code": "\nbool checkFloatComparison_08009250(void)\n\n{\n  undefined isZeroFlag;\n  undefined isCarryFlag;\n  \n  __aeabi_cfrcmple();\n  return !(bool)isCarryFlag || (bool)isZeroFlag;\n}\n\n",
            "renaming": {
                "FUN_08009250": "check_float_comparison_08009250",
                "in_ZR": "isZeroFlag",
                "in_CY": "isCarryFlag"
            },
            "calling": [
                "mc_arc",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "check_if_null_character_08009264",
            "code": "\nbool check_if_null_character_08009264(void)\n\n{\n  char input_character;\n  \n  __aeabi_cfrcmple();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "check_if_null_character_08009264",
                "in_CY": "input_character"
            },
            "calling": [
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "convert_to_signed_integer_08009278",
            "code": "\nuint convertToSignedInteger_08009278(uint inputNumber)\n\n{\n  uint shiftedNumber;\n  uint offset;\n  \n  if (inputNumber << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedNumber = (inputNumber << 1) >> 0x18;\n  offset = 0x9e - shiftedNumber;\n  if (shiftedNumber < 0x9f && offset != 0) {\n    shiftedNumber = (inputNumber << 8 | 0x80000000) >> (offset & 0xff);\n    if ((inputNumber & 0x80000000) != 0) {\n      shiftedNumber = -shiftedNumber;\n    }\n    return shiftedNumber;\n  }\n  if ((offset == 0xffffff9f) && ((inputNumber & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputNumber = inputNumber & 0x80000000;\n  if (inputNumber == 0) {\n    inputNumber = 0x7fffffff;\n  }\n  return inputNumber;\n}\n\n",
            "renaming": {
                "FUN_08009278": "convert_to_signed_integer_08009278",
                "param_1": "inputNumber",
                "uVar1": "shiftedNumber",
                "uVar2": "offset"
            },
            "calling": [
                "printFloat",
                "protocol_execute_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080092c4": {
            "entrypoint": "0x080092c4",
            "current_name": "initialize_system_080092c4",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid initializeSystem_080092c4(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jumpTable;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &completed_8911; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(&__fini_array_end + index);\n  }\n  for (ptr = &completed_8911; ptr < &_ebss; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTable = (code *)0x80092fa;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080092c4": "initialize_system_080092c4",
                "iVar1": "index",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [],
            "called": [
                "SystemInit",
                "__libc_init_array",
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009314": {
            "entrypoint": "0x08009314",
            "current_name": "loop_forever_08009314",
            "code": "\nvoid loopForever_08009314(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009314": "loop_forever_08009314"
            },
            "calling": [
                "DMA1_Stream3_IRQHandler"
            ],
            "called": [
                "DMA1_Stream3_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "calculate_exponential_08009318",
            "code": "\ndouble calculateExponential_08009318(double input)\n\n{\n  uint lowerBits;\n  uint upperBits;\n  uint exponent;\n  uint shiftedExponent;\n  double result;\n  double result1;\n  double result2;\n  double result3;\n  undefined8 sum;\n  \n  shiftedExponent = (upperBits << 1) >> 0x15;\n  exponent = shiftedExponent - 0x3ff;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      sum = __aeabi_dadd(lowerBits,upperBits,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)sum,(int)((ulonglong)sum >> 0x20),0,0);\n      result = result2;\n    }\n    else if ((upperBits & 0xfffff >> (exponent & 0xff) | lowerBits) != 0) {\n      sum = __aeabi_dadd(lowerBits,upperBits,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)sum,(int)((ulonglong)sum >> 0x20),0,0);\n      result = result1;\n    }\n  }\n  else if ((int)exponent < 0x34) {\n    if ((0xffffffffU >> (shiftedExponent - 0x413 & 0xff) & lowerBits) != 0) {\n      sum = __aeabi_dadd(lowerBits,upperBits,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)sum,(int)((ulonglong)sum >> 0x20),0,0);\n      result = result3;\n    }\n  }\n  else if (exponent == 0x400) {\n    result = (double)__aeabi_dadd();\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009318": "calculate_exponential_08009318",
                "__x": "input",
                "in_r0": "lowerBits",
                "in_r1": "upperBits",
                "uVar1": "exponent",
                "uVar2": "shiftedExponent",
                "uVar3": "sum",
                "in_d0": "result",
                "extraout_d0": "result1",
                "extraout_d0_00": "result2",
                "extraout_d0_01": "result3"
            },
            "calling": [
                "calculate_trapezoid_for_block",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "calculate_trigonometric_value_08009410",
            "code": "\ndouble calculate_trigonometric_value_08009410(double input_angle)\n\n{\n  undefined4 part1_of_angle;\n  uint remainder;\n  uint part2_of_angle;\n  double result;\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  \n  if (0x3fe921fb < (part2_of_angle & 0x7fffffff)) {\n    if ((part2_of_angle & 0x7fffffff) < 0x7ff00000) {\n      remainder = __ieee754_rem_pio2(part1_of_angle,part2_of_angle,&temp_var1);\n      remainder = remainder & 3;\n      if (remainder == 1) {\n        result = (double)__kernel_sin(temp_var1,temp_var2,temp_var3,temp_var4,1);\n      }\n      else if (remainder == 2) {\n        result = (double)__kernel_cos(temp_var1,temp_var2,temp_var3,temp_var4);\n      }\n      else if (remainder == 0) {\n        result = (double)__kernel_cos(temp_var1,temp_var2,temp_var3,temp_var4);\n      }\n      else {\n        result = (double)__kernel_sin(temp_var1,temp_var2,temp_var3,temp_var4,1);\n      }\n    }\n    else {\n      result = (double)__subdf3();\n    }\n    return result;\n  }\n  result = (double)__kernel_cos(part1_of_angle,part2_of_angle,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "calculate_trigonometric_value_08009410",
                "__x": "input_angle",
                "in_r0": "part1_of_angle",
                "in_r1": "part2_of_angle",
                "uVar1": "remainder",
                "dVar2": "result",
                "local_28": "temp_var1",
                "uStack_24": "temp_var2",
                "local_20": "temp_var3",
                "uStack_1c": "temp_var4"
            },
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_rem_pio2",
                "__kernel_sin",
                "__kernel_cos",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "calculate_value_080094c0",
            "code": "\ndouble calculateValue_080094c0(double input_value)\n\n{\n  uint temp_1;\n  uint temp_2;\n  uint difference;\n  uint shifted_value;\n  double output_value;\n  double temp_output1;\n  double temp_output2;\n  double temp_output3;\n  undefined8 result;\n  \n  shifted_value = (temp_2 << 1) >> 0x15;\n  difference = shifted_value - 0x3ff;\n  if ((int)difference < 0x14) {\n    if ((int)difference < 0) {\n      result = __aeabi_dadd(temp_1,temp_2,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output_value = temp_output3;\n    }\n    else if ((temp_2 & 0xfffff >> (difference & 0xff) | temp_1) != 0) {\n      result = __aeabi_dadd(temp_1,temp_2,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output_value = temp_output1;\n    }\n  }\n  else if ((int)difference < 0x34) {\n    if ((0xffffffffU >> (shifted_value - 0x413 & 0xff) & temp_1) != 0) {\n      result = __aeabi_dadd(temp_1,temp_2,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output_value = temp_output2;\n    }\n  }\n  else if (difference == 0x400) {\n    output_value = (double)__aeabi_dadd();\n  }\n  return output_value;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "calculate_value_080094c0",
                "__x": "input_value",
                "in_r0": "temp_1",
                "in_r1": "temp_2",
                "uVar1": "difference",
                "uVar2": "shifted_value",
                "uVar3": "result",
                "in_d0": "output_value",
                "extraout_d0": "temp_output1",
                "extraout_d0_00": "temp_output2",
                "extraout_d0_01": "temp_output3"
            },
            "calling": [
                "calculate_trapezoid_for_block",
                "mc_dwell",
                "mc_arc",
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_inverse_080095b8",
            "code": "\nlong calculate_inverse_080095b8(double input_value)\n\n{\n  uint integer_part;\n  uint fractional_part;\n  uint carry;\n  uint shift_amount;\n  uint result;\n  long sign;\n  uint exponent;\n  \n  shift_amount = (fractional_part << 1) >> 0x15;\n  exponent = shift_amount - 0x3ff;\n  if ((int)fractional_part < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = fractional_part & 0xfffff | 0x100000;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      if (exponent != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (exponent & 0xff)) >> (0x14 - exponent & 0xff);\n  }\n  else {\n    if (0x1e < exponent) {\n      sign = __aeabi_d2iz();\n      return sign;\n    }\n    if ((int)exponent < 0x34) {\n      carry = 0x80000000 >> (shift_amount - 0x413 & 0xff);\n      if (CARRY4(carry,integer_part) != false) {\n        result = result + 1;\n      }\n      result = result << (shift_amount - 0x413 & 0xff);\n      if (exponent != 0x14) {\n        result = result | carry + integer_part >> (0x34 - exponent & 0xff);\n      }\n    }\n    else {\n      result = result << (shift_amount - 0x413 & 0xff) | integer_part << (shift_amount - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_inverse_080095b8",
                "__x": "input_value",
                "in_r0": "integer_part",
                "in_r1": "fractional_part",
                "uVar1": "carry",
                "uVar2": "shift_amount",
                "uVar3": "result",
                "lVar4": "sign",
                "uVar5": "exponent"
            },
            "calling": [
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_d2iz"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "calculate_adjusted_value_08009654",
            "code": "\ndouble calculateAdjustedValue_08009654(double inputValue)\n\n{\n  int shiftedValue;\n  int exponent;\n  double result;\n  \n  exponent = ((uint)(shiftedValue << 1) >> 0x15) - 0x3ff;\n  if (((0x13 < exponent) && (0x33 < exponent)) && (exponent == 0x400)) {\n    result = (double)__aeabi_dadd();\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009654": "calculate_adjusted_value_08009654",
                "__x": "inputValue",
                "in_r1": "shiftedValue",
                "iVar1": "exponent",
                "in_d0": "result"
            },
            "calling": [
                "settings_store_global_setting"
            ],
            "called": [
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "calculate_trigonometric_value_080096e8",
            "code": "\ndouble calculate_trigonometric_value_080096e8(double angle)\n\n{\n  undefined4 integer_part;\n  uint quadrant;\n  uint fractional_part;\n  double result;\n  undefined4 sin_cos_input_1;\n  undefined4 sin_cos_input_2;\n  undefined4 sin_cos_input_3;\n  undefined4 sin_cos_input_4;\n  \n  if (0x3fe921fb < (fractional_part & 0x7fffffff)) {\n    if ((fractional_part & 0x7fffffff) < 0x7ff00000) {\n      quadrant = __ieee754_rem_pio2(integer_part,fractional_part,&sin_cos_input_1);\n      quadrant = quadrant & 3;\n      if (quadrant == 1) {\n        result = (double)__kernel_cos(sin_cos_input_1,sin_cos_input_2,sin_cos_input_3,sin_cos_input_4);\n      }\n      else if (quadrant == 2) {\n        result = (double)__kernel_sin(sin_cos_input_1,sin_cos_input_2,sin_cos_input_3,sin_cos_input_4,1);\n      }\n      else if (quadrant == 0) {\n        result = (double)__kernel_sin(sin_cos_input_1,sin_cos_input_2,sin_cos_input_3,sin_cos_input_4,1);\n      }\n      else {\n        result = (double)__kernel_cos(sin_cos_input_1,sin_cos_input_2,sin_cos_input_3,sin_cos_input_4);\n      }\n    }\n    else {\n      result = (double)__subdf3();\n    }\n    return result;\n  }\n  result = (double)__kernel_sin(integer_part,fractional_part,0,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "calculate_trigonometric_value_080096e8",
                "__x": "angle",
                "in_r0": "integer_part",
                "in_r1": "fractional_part",
                "uVar1": "quadrant",
                "dVar2": "result",
                "local_28": "sin_cos_input_1",
                "uStack_24": "sin_cos_input_2",
                "local_20": "sin_cos_input_3",
                "uStack_1c": "sin_cos_input_4"
            },
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_rem_pio2",
                "__kernel_sin",
                "__kernel_cos",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "calculate_result_08009798",
            "code": "\ndouble calculateResult_08009798(double input)\n\n{\n  int shiftedInput;\n  int shiftedDifference;\n  double result;\n  \n  shiftedDifference = ((uint)(shiftedInput << 1) >> 0x15) - 0x3ff;\n  if (shiftedDifference < 0x14) {\n    if (shiftedDifference < 0) {\n      return result;\n    }\n  }\n  else {\n    if (shiftedDifference < 0x34) {\n      return result;\n    }\n    if (shiftedDifference != 0x400) {\n      return result;\n    }\n    result = (double)__aeabi_dadd();\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "calculate_result_08009798",
                "__x": "input",
                "in_r1": "shiftedInput",
                "iVar1": "shiftedDifference",
                "in_d0": "result"
            },
            "calling": [
                "gc_execute_line",
                "protocol_execute_line",
                "settings_store_global_setting"
            ],
            "called": [
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009818": {
            "entrypoint": "0x08009818",
            "current_name": "FUN_08009818",
            "code": "\nvoid __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4,double param_5)\n\n{\n  int iVar1;\n  undefined4 unaff_r4;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  undefined8 uVar5;\n  \n  uVar3 = param_4 & 0x7fffffff;\n  if (((uVar3 | (-param_3 | param_3) >> 0x1f) < 0x7ff00001) &&\n     (uVar4 = param_2 & 0x7fffffff, (uVar4 | (-param_1 | param_1) >> 0x1f) < 0x7ff00001)) {\n    if ((param_4 + 0xc0100000 | param_3) == 0) {\n      atan(param_5);\n      return;\n    }\n    uVar2 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n    if (((((uVar4 | param_1) != 0) && ((uVar3 | param_3) != 0)) && (uVar3 != 0x7ff00000)) &&\n       (uVar4 != 0x7ff00000)) {\n      iVar1 = (int)(uVar4 - uVar3) >> 0x14;\n      if (((int)(uVar4 - uVar3) < 0x3d00000) &&\n         ((-1 < (int)param_4 || (iVar1 + 0x3c < 0 == SCARRY4(iVar1,0x3c))))) {\n        __divdf3(param_1,param_2,param_3,param_4);\n        fabs((double)CONCAT44(unaff_r4,param_4));\n        atan((double)CONCAT44(unaff_r4,param_4));\n      }\n      if (uVar2 != 1) {\n        if (uVar2 == 2) {\n          uVar5 = __subdf3();\n          __subdf3(0x54442d18,0x400921fb,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        }\n        else if (uVar2 != 0) {\n          uVar5 = __subdf3();\n          __subdf3((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),0x54442d18,0x400921fb);\n        }\n      }\n    }\n  }\n  else {\n    __aeabi_dadd(param_3,param_4,param_1,param_2);\n  }\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_atan2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "calculate_hypotenuse_0800981c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080098b6) */\n\ndouble calculateHypotenuse_0800981c(double x,double y)\n\n{\n  int isFinite;\n  undefined4 *errnoPointer;\n  double hypotenuse;\n  double temp0;\n  double temp1;\n  double temp2;\n  double temp3;\n  double temp4;\n  int stackValue0;\n  char *stackValue1;\n  \n  hypotenuse = (double)__ieee754_hypot();\n  if ((((__fdlib_version != -1) &&\n       (isFinite = finite((double)CONCAT44(stackValue1,stackValue0)), hypotenuse = temp0,\n       isFinite == 0)) &&\n      (isFinite = finite((double)CONCAT44(stackValue1,stackValue0)), hypotenuse = temp1\n      , isFinite != 0)) &&\n     ((isFinite = finite((double)CONCAT44(stackValue1,stackValue0)), hypotenuse = temp2\n      , isFinite != 0 &&\n      (((__fdlib_version != '\\0' && (__fdlib_version == '\\x02')) ||\n       (isFinite = matherr((exception *)&stack0xffffffb0), hypotenuse = temp4, isFinite == 0)))))) {\n    errnoPointer = (undefined4 *)__errno();\n    *errnoPointer = 0x22;\n    hypotenuse = temp3;\n  }\n  return hypotenuse;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "__x": "x",
                "__y": "y",
                "iVar1": "isFinite",
                "puVar2": "errnoPointer",
                "dVar3": "hypotenuse",
                "extraout_d0": "temp0",
                "extraout_d0_00": "temp1",
                "extraout_d0_01": "temp2",
                "extraout_d0_02": "temp3",
                "extraout_d0_03": "temp4",
                "in_stack_ffffffb0": "stackValue0",
                "in_stack_ffffffb4": "stackValue1"
            },
            "calling": [
                "gc_execute_line",
                "mc_arc"
            ],
            "called": [
                "__errno",
                "finite",
                "__ieee754_hypot",
                "matherr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "calculate_square_root_080098d0",
            "code": "\ndouble calculateSquareRoot_080098d0(double inputValue)\n\n{\n  char fdlibVersion;\n  int comparisonResult;\n  undefined4 *errnoPointer;\n  int *errnoValuePointer;\n  double result;\n  double result_unorddf2;\n  double result_aeabi_dcmplt;\n  double result_divdf3;\n  double result_matherr;\n  double result_errno;\n  undefined exceptionStruct [24];\n  undefined8 zeroValue;\n  int errnoValue;\n  \n  result = (double)__ieee754_sqrt();\n  fdlibVersion = __fdlib_version;\n  if (((__fdlib_version == -1) || (errnoValue = __unorddf2(), result = result_unorddf2, errnoValue != 0)) ||\n     (comparisonResult = __aeabi_dcmplt(), result = result_aeabi_dcmplt, comparisonResult == 0)) {\n    return result;\n  }\n  exceptionStruct._0_4_ = 1;\n  exceptionStruct._4_4_ = \"sqrt\";\n  if (fdlibVersion == '\\0') {\n    zeroValue = 0.0;\nLAB_0800996c:\n    comparisonResult = matherr((exception *)exceptionStruct);\n    result = result_matherr;\n    if (comparisonResult != 0) goto joined_r0x0800997a;\n  }\n  else {\n    zeroValue = (double)__divdf3(0,0,0,0);\n    if (fdlibVersion != '\\x02') goto LAB_0800996c;\n  }\n  errnoPointer = (undefined4 *)__errno();\n  *errnoPointer = 0x21;\n  result = result_divdf3;\njoined_r0x0800997a:\n  if (errnoValue != 0) {\n    errnoValuePointer = (int *)__errno();\n    *errnoValuePointer = errnoValue;\n    result = result_errno;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "calculate_square_root_080098d0",
                "__x": "inputValue",
                "cVar1": "fdlibVersion",
                "iVar2": "comparisonResult",
                "puVar3": "errnoPointer",
                "piVar4": "errnoValuePointer",
                "dVar5": "result",
                "extraout_d0": "result_unorddf2",
                "extraout_d0_00": "result_aeabi_dcmplt",
                "extraout_d0_01": "result_divdf3",
                "extraout_d0_02": "result_matherr",
                "extraout_d0_03": "result_errno",
                "local_50": "exceptionStruct",
                "local_38": "zeroValue",
                "local_30": "errnoValue"
            },
            "calling": [
                "gc_execute_line",
                "homing_cycle",
                "max_allowable_speed",
                "plan_buffer_line"
            ],
            "called": [
                "__errno",
                "__ieee754_sqrt",
                "__aeabi_dcmplt",
                "__unorddf2",
                "__divdf3",
                "matherr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "calculate_inverse_tangent_08009990",
            "code": "\nvoid calculate_inverse_tangent_08009990(uint input_1,uint input_2,uint input_3,uint input_4,double input_5)\n\n{\n  int temp_var_1;\n  undefined4 temp_var_2;\n  uint temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  undefined8 temp_var_6;\n  \n  temp_var_4 = input_4 & 0x7fffffff;\n  if (((temp_var_4 | (-input_3 | input_3) >> 0x1f) < 0x7ff00001) &&\n     (temp_var_5 = input_2 & 0x7fffffff, (temp_var_5 | (-input_1 | input_1) >> 0x1f) < 0x7ff00001)) {\n    if ((input_4 + 0xc0100000 | input_3) == 0) {\n      atan(input_5);\n      return;\n    }\n    temp_var_3 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n    if (((((temp_var_5 | input_1) != 0) && ((temp_var_4 | input_3) != 0)) && (temp_var_4 != 0x7ff00000)) &&\n       (temp_var_5 != 0x7ff00000)) {\n      temp_var_1 = (int)(temp_var_5 - temp_var_4) >> 0x14;\n      if (((int)(temp_var_5 - temp_var_4) < 0x3d00000) &&\n         ((-1 < (int)input_4 || (temp_var_1 + 0x3c < 0 == SCARRY4(temp_var_1,0x3c))))) {\n        __divdf3(input_1,input_2,input_3,input_4);\n        fabs((double)CONCAT44(temp_var_2,input_4));\n        atan((double)CONCAT44(temp_var_2,input_4));\n      }\n      if (temp_var_3 != 1) {\n        if (temp_var_3 == 2) {\n          temp_var_6 = __subdf3();\n          __subdf3(0x54442d18,0x400921fb,(int)temp_var_6,(int)((ulonglong)temp_var_6 >> 0x20));\n        }\n        else if (temp_var_3 != 0) {\n          temp_var_6 = __subdf3();\n          __subdf3((int)temp_var_6,(int)((ulonglong)temp_var_6 >> 0x20),0x54442d18,0x400921fb);\n        }\n      }\n    }\n  }\n  else {\n    __aeabi_dadd(input_3,input_4,input_1,input_2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009990": "calculate_inverse_tangent_08009990",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "iVar1": "temp_var_1",
                "unaff_r4": "temp_var_2",
                "uVar2": "temp_var_3",
                "uVar3": "temp_var_4",
                "uVar4": "temp_var_5",
                "uVar5": "temp_var_6"
            },
            "calling": [
                "atan2"
            ],
            "called": [
                "fabs",
                "atan",
                "__aeabi_dadd",
                "__divdf3",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_root_08009b24",
            "code": "\nuint calculateRoot_08009b24(uint x,uint y,uint param_3,uint param_4)\n\n{\n  undefined4 result;\n  int comparison;\n  uint temp1;\n  int temp2;\n  undefined4 temp3;\n  int temp4;\n  uint temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  undefined8 temp8;\n  undefined8 temp9;\n  undefined8 temp10;\n  undefined8 temp11;\n  int localVariable;\n  \n  y = y & 0x7fffffff;\n  param_4 = param_4 & 0x7fffffff;\n  temp1 = x;\n  temp5 = y;\n  if (y < param_4) {\n    temp1 = param_3;\n    param_3 = x;\n    temp5 = param_4;\n    param_4 = y;\n  }\n  if (0x3c00000 < (int)(temp5 - param_4)) {\n    temp1 = __aeabi_dadd(temp1,temp5,param_3,param_4);\n    return temp1;\n  }\n  if (temp5 < 0x5f300001) {\n    localVariable = 0;\n  }\n  else {\n    if (0x7fefffff < temp5) {\n      if ((temp5 & 0xfffff | temp1) != 0) {\n        temp1 = __aeabi_dadd(temp1,temp5,param_3,param_4);\n      }\n      if ((param_4 ^ 0x7ff00000 | param_3) != 0) {\n        return temp1;\n      }\n      return param_3;\n    }\n    temp5 = temp5 + 0xda800000;\n    param_4 = param_4 + 0xda800000;\n    localVariable = 600;\n  }\n  temp9 = CONCAT44(temp5,temp1);\n  temp8 = CONCAT44(param_4,param_3);\n  if ((int)param_4 < 0x20b00000) {\n    if ((int)param_4 < 0x100000) {\n      if ((param_4 | param_3) == 0) {\n        return temp1;\n      }\n      temp8 = __muldf3(param_3,param_4,0,0x7fd00000);\n      temp9 = __muldf3(temp1,temp5,0,0x7fd00000);\n      localVariable = localVariable + -0x3fe;\n    }\n    else {\n      temp5 = temp5 + 0x25800000;\n      temp9 = CONCAT44(temp5,temp1);\n      param_4 = param_4 + 0x25800000;\n      temp8 = CONCAT44(param_4,param_3);\n      localVariable = localVariable + -600;\n    }\n  }\n  temp7 = (undefined4)((ulonglong)temp9 >> 0x20);\n  temp6 = (undefined4)temp9;\n  temp4 = (int)((ulonglong)temp8 >> 0x20);\n  temp3 = (undefined4)temp8;\n  temp8 = __subdf3(temp6,temp7,temp3,temp4);\n  temp2 = (int)((ulonglong)temp8 >> 0x20);\n  result = (undefined4)temp8;\n  comparison = __aeabi_dcmplt(temp3,temp4,result,temp2);\n  if (comparison == 0) {\n    temp8 = __muldf3(0,param_4,0);\n    temp9 = __muldf3(result,temp2 + -0x80000000,result,temp2);\n    temp10 = __aeabi_dadd(temp6,temp7,temp6,temp7);\n    temp10 = __subdf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),0,temp5 + 0x100000);\n    temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp3,temp4);\n    temp11 = __subdf3(temp3,temp4,0,param_4);\n    temp11 = __muldf3((int)temp11,(int)((ulonglong)temp11 >> 0x20),0,temp5 + 0x100000);\n    temp10 = __aeabi_dadd((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                          (int)((ulonglong)temp11 >> 0x20));\n    temp9 = __subdf3((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp10,\n                      (int)((ulonglong)temp10 >> 0x20));\n    __subdf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n             (int)((ulonglong)temp9 >> 0x20));\n    temp8 = __ieee754_sqrt();\n  }\n  else {\n    temp8 = __muldf3(0,temp5,0,temp5);\n    temp9 = __muldf3(temp3,temp4 + -0x80000000,temp3,temp4);\n    temp10 = __aeabi_dadd(temp6,temp7,0,temp5);\n    temp11 = __subdf3(temp6,temp7,0,temp5);\n    temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                      (int)((ulonglong)temp11 >> 0x20));\n    temp9 = __subdf3((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp10,\n                      (int)((ulonglong)temp10 >> 0x20));\n    __subdf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n             (int)((ulonglong)temp9 >> 0x20));\n    temp8 = __ieee754_sqrt();\n  }\n  temp1 = (uint)temp8;\n  if (localVariable != 0) {\n    temp1 = __muldf3(temp1,(int)((ulonglong)temp8 >> 0x20),0,localVariable * 0x100000 + 0x3ff00000);\n  }\n  return temp1;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_root_08009b24",
                "param_1": "x",
                "param_2": "y",
                "uVar1": "result",
                "iVar2": "comparison",
                "uVar3": "temp1",
                "iVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "uVar9": "temp7",
                "uVar10": "temp8",
                "uVar11": "temp9",
                "uVar12": "temp10",
                "uVar13": "temp11",
                "local_3c": "localVariable"
            },
            "calling": [
                "hypot"
            ],
            "called": [
                "__muldf3",
                "__ieee754_sqrt",
                "__aeabi_dcmplt",
                "__aeabi_dadd",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "calculate_value_08009d78",
            "code": "\nint calculateValue_08009d78(undefined4 inputValue,uint valueType,undefined8 *resultArray)\n\n{\n  undefined4 temp_1;\n  undefined4 temp_2;\n  undefined4 temp_3;\n  undefined4 temp_4;\n  undefined4 temp_5;\n  undefined4 temp_6;\n  undefined4 temp_7;\n  undefined4 temp_8;\n  uint absValueType;\n  int returnValue;\n  undefined8 temp_9;\n  undefined8 temp_10;\n  undefined8 temp_11;\n  undefined4 stack_temp_1;\n  undefined4 stack_temp_2;\n  undefined4 local_temp_1;\n  undefined4 stack_temp_3;\n  undefined8 local_temp_2;\n  undefined8 local_temp_3;\n  undefined8 local_temp_4;\n  \n  absValueType = valueType & 0x7fffffff;\n  if (absValueType < 0x3fe921fc) {\n    *(undefined4 *)resultArray = inputValue;\n    *(uint *)((int)resultArray + 4) = valueType;\n    *(undefined4 *)(resultArray + 1) = 0;\n    *(undefined4 *)((int)resultArray + 0xc) = 0;\n    return 0;\n  }\n  if (absValueType < 0x4002d97c) {\n    if ((int)valueType < 1) {\n      temp_9 = __aeabi_dadd(inputValue,valueType,0x54400000,0x3ff921fb);\n      temp_2 = (undefined4)((ulonglong)temp_9 >> 0x20);\n      temp_1 = (undefined4)temp_9;\n      if (absValueType != 0x3ff921fb) {\n        temp_9 = __aeabi_dadd(temp_1,temp_2,0x1a626331,0x3dd0b461);\n        *resultArray = temp_9;\n        temp_9 = __subdf3(temp_1,temp_2);\n        temp_9 = __aeabi_dadd((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),0x1a626331,0x3dd0b461);\n        resultArray[1] = temp_9;\n        return -1;\n      }\n      temp_9 = __aeabi_dadd(temp_1,temp_2,0x1a600000,0x3dd0b461);\n      temp_1 = (undefined4)((ulonglong)temp_9 >> 0x20);\n      temp_10 = __aeabi_dadd((int)temp_9,temp_1,0x2e037073,0x3ba3198a);\n      *resultArray = temp_10;\n      temp_9 = __subdf3((int)temp_9,temp_1);\n      temp_9 = __aeabi_dadd((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),0x2e037073,0x3ba3198a);\n      resultArray[1] = temp_9;\n      return -1;\n    }\n    temp_9 = __subdf3();\n    temp_2 = (undefined4)((ulonglong)temp_9 >> 0x20);\n    temp_1 = (undefined4)temp_9;\n    if (absValueType != 0x3ff921fb) {\n      temp_9 = __subdf3(temp_1,temp_2,0x1a626331,0x3dd0b461);\n      *resultArray = temp_9;\n      temp_9 = __subdf3(temp_1,temp_2);\n      temp_9 = __subdf3((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),0x1a626331,0x3dd0b461);\n      resultArray[1] = temp_9;\n      return 1;\n    }\n    temp_9 = __subdf3(temp_1,temp_2,0x1a600000,0x3dd0b461);\n    temp_1 = (undefined4)((ulonglong)temp_9 >> 0x20);\n    temp_10 = __subdf3((int)temp_9,temp_1,0x2e037073,0x3ba3198a);\n    *resultArray = temp_10;\n    temp_9 = __subdf3((int)temp_9,temp_1);\n    temp_9 = __subdf3((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),0x2e037073,0x3ba3198a);\n    resultArray[1] = temp_9;\n    return 1;\n  }\n  if (0x413921fb < absValueType) {\n    if (0x7fefffff < absValueType) {\n      temp_9 = __subdf3(inputValue,valueType,inputValue,valueType);\n      resultArray[1] = temp_9;\n      *resultArray = temp_9;\n      return 0;\n    }\n    returnValue = ((int)absValueType >> 0x14) + -0x416;\n    __aeabi_d2iz();\n    local_temp_2 = __aeabi_i2d();\n    temp_9 = __subdf3(inputValue,absValueType + returnValue * -0x100000,(int)local_temp_2,\n                      (int)((ulonglong)local_temp_2 >> 0x20));\n    temp_9 = __muldf3((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),0,0x41700000);\n    __aeabi_d2iz();\n    local_temp_3 = __aeabi_i2d();\n    temp_9 = __subdf3((int)temp_9,(int)((ulonglong)temp_9 >> 0x20));\n    local_temp_4 = __muldf3((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),0,0x41700000);\n    __aeabi_dcmpeq((int)local_temp_4,(int)((ulonglong)local_temp_4 >> 0x20),0,0);\n    returnValue = __kernel_rem_pio2(&local_temp_2,resultArray,returnValue);\n    if (-1 < (int)valueType) {\n      return returnValue;\n    }\n    *(int *)((int)resultArray + 4) = *(int *)((int)resultArray + 4) + -0x80000000;\n    *(int *)((int)resultArray + 0xc) = *(int *)((int)resultArray + 0xc) + -0x80000000;\n    return -returnValue;\n  }\n  fabs((double)CONCAT44(stack_temp_2,stack_temp_1));\n  temp_9 = __muldf3();\n  __aeabi_dadd((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),0,0x3fe00000);\n  returnValue = __aeabi_d2iz();\n  temp_9 = __aeabi_i2d();\n  temp_5 = (undefined4)((ulonglong)temp_9 >> 0x20);\n  temp_1 = (undefined4)temp_9;\n  temp_9 = __muldf3(temp_1,temp_5,0x54400000,0x3ff921fb);\n  temp_9 = __subdf3(inputValue,temp_4,(int)temp_9,(int)((ulonglong)temp_9 >> 0x20));\n  temp_6 = (undefined4)((ulonglong)temp_9 >> 0x20);\n  temp_2 = (undefined4)temp_9;\n  temp_10 = __muldf3(temp_1,temp_5,0x1a626331,0x3dd0b461);\n  if ((0x1f < returnValue) || (*(uint *)(&npio2_hw + (returnValue + -1) * 4) == absValueType)) {\n    temp_11 = __subdf3(temp_2,temp_6,(int)temp_10,(int)((ulonglong)temp_10 >> 0x20));\n    if ((int)((absValueType >> 0x14) - ((uint)((int)((ulonglong)temp_11 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    temp_10 = __muldf3(temp_1,temp_5,0x1a600000,0x3dd0b461);\n    temp_7 = (undefined4)((ulonglong)temp_10 >> 0x20);\n    temp_9 = __subdf3(temp_2,temp_6,(int)temp_10,temp_7);\n    temp_8 = (undefined4)((ulonglong)temp_9 >> 0x20);\n    temp_3 = (undefined4)temp_9;\n    temp_11 = __subdf3(temp_2,temp_6,temp_3,temp_8);\n    temp_10 = __subdf3((int)temp_11,(int)((ulonglong)temp_11 >> 0x20),(int)temp_10,temp_7);\n    temp_11 = __muldf3(temp_1,temp_5,0x2e037073,0x3ba3198a);\n    temp_10 = __subdf3((int)temp_11,(int)((ulonglong)temp_11 >> 0x20),(int)temp_10,\n                      (int)((ulonglong)temp_10 >> 0x20));\n    temp_11 = __subdf3(temp_3,temp_8,(int)temp_10,(int)((ulonglong)temp_10 >> 0x20));\n    if ((int)(((int)absValueType >> 0x14) - ((uint)((int)((ulonglong)temp_11 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    temp_10 = __muldf3(temp_1,temp_5,0x2e000000,0x3ba3198a);\n    temp_2 = (undefined4)((ulonglong)temp_10 >> 0x20);\n    temp_9 = __subdf3(temp_3,temp_8,(int)temp_10,temp_2);\n    temp_11 = __subdf3(temp_3,temp_8);\n    temp_10 = __subdf3((int)temp_11,(int)((ulonglong)temp_11 >> 0x20),(int)temp_10,temp_2);\n    temp_11 = __muldf3(temp_1,temp_5,0x252049c1,0x397b839a);\n    temp_10 = __subdf3((int)temp_11,(int)((ulonglong)temp_11 >> 0x20),(int)temp_10,\n                      (int)((ulonglong)temp_10 >> 0x20));\n  }\n  temp_11 = __subdf3((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),(int)temp_10,\n                    (int)((ulonglong)temp_10 >> 0x20));\nLAB_0800a0ce:\n  stack_temp_3 = (undefined4)((ulonglong)temp_9 >> 0x20);\n  local_temp_1 = (undefined4)temp_9;\n  *resultArray = temp_11;\n  temp_9 = __subdf3(local_temp_1,stack_temp_3);\n  temp_9 = __subdf3((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),(int)temp_10,\n                    (int)((ulonglong)temp_10 >> 0x20));\n  resultArray[1] = temp_9;\n  if ((int)valueType < 0) {\n    *(int *)resultArray = (int)temp_11;\n    *(int *)((int)resultArray + 4) = (int)((ulonglong)temp_11 >> 0x20) + -0x80000000;\n    *(int *)(resultArray + 1) = (int)temp_9;\n    *(int *)((int)resultArray + 0xc) = (int)((ulonglong)temp_9 >> 0x20) + -0x80000000;\n    returnValue = -returnValue;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "calculate_value_08009d78",
                "param_1": "inputValue",
                "param_2": "valueType",
                "param_3": "resultArray",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "extraout_r1": "temp_4",
                "uVar4": "temp_5",
                "uVar5": "temp_6",
                "uVar6": "temp_7",
                "uVar7": "temp_8",
                "uVar8": "absValueType",
                "iVar9": "returnValue",
                "uVar10": "temp_9",
                "uVar11": "temp_10",
                "uVar12": "temp_11",
                "in_stack_ffffffa8": "stack_temp_1",
                "in_stack_ffffffac": "stack_temp_2",
                "local_50": "local_temp_1",
                "uStack_4c": "stack_temp_3",
                "local_40": "local_temp_2",
                "local_38": "local_temp_3",
                "local_30": "local_temp_4"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__muldf3",
                "fabs",
                "__aeabi_dadd",
                "__aeabi_dcmpeq",
                "__kernel_rem_pio2",
                "__aeabi_i2d",
                "__aeabi_d2iz",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_sum_0800a1bc",
            "code": "\nuint calculateSum_0800a1bc(uint input1,uint input2)\n\n{\n  uint result;\n  int counter;\n  uint temp;\n  undefined4 temp2;\n  uint value;\n  uint mask;\n  uint sum;\n  uint diff;\n  uint shiftedValue;\n  int loopCounter;\n  uint loopValue;\n  uint shiftCount;\n  undefined8 multiplyResult;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    multiplyResult = __muldf3(input1,input2,input1,input2);\n    sum = __aeabi_dadd((int)multiplyResult,(int)((ulonglong)multiplyResult >> 0x20),input1,input2);\n    return sum;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return input1;\n    }\n    if (input2 != 0) {\n      multiplyResult = __subdf3(input1,input2,input1);\n      temp2 = (undefined4)((ulonglong)multiplyResult >> 0x20);\n      sum = __divdf3((int)multiplyResult,temp2,(int)multiplyResult,temp2);\n      return sum;\n    }\n    do {\n      shiftedValue = input1;\n      sum = shiftedValue >> 0xb;\n      input2 = input2 - 0x15;\n      input1 = shiftedValue << 0x15;\n    } while (sum == 0);\n    result = input2;\n    if (-1 < (int)shiftedValue) goto LAB_0800a290;\n    shiftCount = 0x20;\n    value = 0xffffffff;\n    shiftedValue = input1;\n  }\n  else {\n    result = (int)input2 >> 0x14;\n    sum = input2;\n    shiftedValue = input1;\n    if (result != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    shiftedValue = 0;\n    shiftCount = sum;\n    do {\n      value = shiftedValue;\n      sum = shiftCount << 1;\n      loopCounter = shiftCount << 0xc;\n      shiftedValue = value + 1;\n      shiftCount = sum;\n    } while (-1 < loopCounter);\n    shiftCount = 0x20 - shiftedValue;\n    input2 = result;\n    shiftedValue = input1 << (shiftedValue & 0xff);\n  }\n  sum = input1 >> (shiftCount & 0xff) | sum;\n  result = input2 - value;\nLAB_0800a1da:\n  sum = sum & 0xfffff | 0x100000;\n  if (-1 < (int)(result << 0x1f)) {\n    sum = sum * 2 - ((int)shiftedValue >> 0x1f);\n    shiftedValue = shiftedValue << 1;\n  }\n  shiftCount = 0;\n  sum = sum * 2 - ((int)shiftedValue >> 0x1f);\n  shiftedValue = shiftedValue << 1;\n  result = 0;\n  loopCounter = 0x16;\n  value = 0x200000;\n  do {\n    counter = result + value;\n    if (counter <= (int)sum) {\n      sum = sum - counter;\n      result = counter + value;\n      shiftCount = shiftCount + value;\n    }\n    loopCounter = loopCounter + -1;\n    sum = sum * 2 - ((int)shiftedValue >> 0x1f);\n    value = value >> 1;\n    shiftedValue = shiftedValue << 1;\n  } while (loopCounter != 0);\n  counter = 0x20;\n  mask = 0x80000000;\n  loopCounter = 0;\n  value = 0;\n  do {\n    temp = mask + loopCounter;\n    loopValue = result;\n    if ((int)result < (int)sum) {\n      if ((int)temp < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(temp + mask)) {\n          loopValue = result + 1;\n        }\n      }\n      diff = sum - result;\n      result = loopValue;\n      if (shiftedValue < temp) {\n        diff = diff - 1;\n      }\nLAB_0800a262:\n      loopCounter = temp + mask;\n      shiftedValue = shiftedValue - temp;\n      value = value + mask;\n      sum = diff;\n    }\n    else if ((sum == result) && (temp <= shiftedValue)) {\n      if ((int)temp < 0) goto LAB_0800a26a;\n      diff = 0;\n      result = sum;\n      goto LAB_0800a262;\n    }\n    counter = counter + -1;\n    mask = mask >> 1;\n    sum = sum * 2 - ((int)shiftedValue >> 0x1f);\n    shiftedValue = shiftedValue << 1;\n    if (counter == 0) {\n      if ((sum | shiftedValue) == 0) {\n        value = value >> 1;\n      }\n      else if (value == 0xffffffff) {\n        shiftCount = shiftCount + 1;\n        value = 0;\n      }\n      else {\n        value = value + 1 >> 1;\n      }\n      if ((shiftCount & 1) != 0) {\n        value = value | 0x80000000;\n      }\n      return value;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_sum_0800a1bc",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "iVar2": "counter",
                "uVar3": "temp",
                "uVar4": "temp2",
                "uVar5": "value",
                "uVar6": "mask",
                "uVar7": "sum",
                "uVar8": "diff",
                "uVar9": "shiftedValue",
                "iVar10": "loopCounter",
                "uVar11": "loopValue",
                "uVar12": "shiftCount",
                "uVar13": "multiplyResult"
            },
            "calling": [
                "sqrt",
                "__ieee754_hypot"
            ],
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "__divdf3",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_result_0800a348",
            "code": "\nundefined4 calculateResult_0800a348(undefined4 inputValue,uint flagValue,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  undefined4 resultLow;\n  undefined4 resultHigh;\n  uint absFlag;\n  undefined8 tempValue1;\n  undefined8 tempValue2;\n  undefined8 tempValue3;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  \n  absFlag = flagValue & 0x7fffffff;\n  if (absFlag < 0x3e400000) {\n    result = __aeabi_d2iz();\n    if (result == 0) {\n      return 0;\n    }\n    tempValue1 = __muldf3(inputValue,flagValue,inputValue,flagValue);\n    resultHigh = (undefined4)((ulonglong)tempValue1 >> 0x20);\n    resultLow = (undefined4)tempValue1;\n    tempValue2 = __muldf3(resultLow,resultHigh,0xbe8838d4,0xbda8fae9);\n    tempValue2 = __aeabi_dadd((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    tempValue2 = __muldf3((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),resultLow,resultHigh);\n    tempValue2 = __subdf3((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0x809c52ad,0x3e927e4f);\n    tempValue2 = __muldf3((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),resultLow,resultHigh);\n    tempValue2 = __aeabi_dadd((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0x19cb1590,0x3efa01a0);\n    tempValue2 = __muldf3((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),resultLow,resultHigh);\n    tempValue2 = __subdf3((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0x16c15177,0x3f56c16c);\n    tempValue2 = __muldf3((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),resultLow,resultHigh);\n    tempValue2 = __aeabi_dadd((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0x5555554c,0x3fa55555);\n    tempValue2 = __muldf3((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),resultLow,resultHigh);\n  }\n  else {\n    tempValue1 = __muldf3(inputValue,flagValue,inputValue,flagValue);\n    resultHigh = (undefined4)((ulonglong)tempValue1 >> 0x20);\n    resultLow = (undefined4)tempValue1;\n    tempValue2 = __muldf3(resultLow,resultHigh,0xbe8838d4,0xbda8fae9);\n    tempValue2 = __aeabi_dadd((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    tempValue2 = __muldf3((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),resultLow,resultHigh);\n    tempValue2 = __subdf3((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0x809c52ad,0x3e927e4f);\n    tempValue2 = __muldf3((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),resultLow,resultHigh);\n    tempValue2 = __aeabi_dadd((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0x19cb1590,0x3efa01a0);\n    tempValue2 = __muldf3((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),resultLow,resultHigh);\n    tempValue2 = __subdf3((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0x16c15177,0x3f56c16c);\n    tempValue2 = __muldf3((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),resultLow,resultHigh);\n    tempValue2 = __aeabi_dadd((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0x5555554c,0x3fa55555);\n    tempValue2 = __muldf3((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),resultLow,resultHigh);\n    if (0x3fd33332 < absFlag) {\n      if (absFlag < 0x3fe90001) {\n        result = absFlag - 0x200000;\n        tempValue1 = __subdf3(0,0x3ff00000,0,result);\n      }\n      else {\n        result = 0x3fd20000;\n        tempValue1 = 0x3fe7000000000000;\n      }\n      localVar4 = (undefined4)((ulonglong)tempValue1 >> 0x20);\n      localVar3 = (undefined4)tempValue1;\n      tempValue1 = __muldf3(resultLow,resultHigh,0,0x3fe00000);\n      tempValue1 = __subdf3((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),0,result);\n      tempValue2 = __muldf3(resultLow,resultHigh,(int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20));\n      tempValue3 = __muldf3(inputValue,flagValue,param3,param4);\n      tempValue2 = __subdf3((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),(int)tempValue3,\n                       (int)((ulonglong)tempValue3 >> 0x20));\n      tempValue1 = __subdf3((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),(int)tempValue2,\n                       (int)((ulonglong)tempValue2 >> 0x20));\n      resultLow = __subdf3(localVar3,localVar4,(int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n      return resultLow;\n    }\n  }\n  localVar2 = (undefined4)((ulonglong)tempValue2 >> 0x20);\n  localVar1 = (undefined4)tempValue2;\n  resultLow = (undefined4)((ulonglong)tempValue1 >> 0x20);\n  tempValue2 = __muldf3((int)tempValue1,resultLow,0,0x3fe00000);\n  tempValue1 = __muldf3((int)tempValue1,resultLow,localVar1,localVar2);\n  tempValue3 = __muldf3(inputValue,flagValue,param3,param4);\n  tempValue1 = __subdf3((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),(int)tempValue3,\n                   (int)((ulonglong)tempValue3 >> 0x20));\n  tempValue1 = __subdf3((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),(int)tempValue1,\n                   (int)((ulonglong)tempValue1 >> 0x20));\n  resultLow = __subdf3(0,0x3ff00000,(int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n  return resultLow;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_result_0800a348",
                "param_1": "inputValue",
                "param_2": "flagValue",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "resultLow",
                "uVar3": "resultHigh",
                "uVar4": "absFlag",
                "uVar5": "tempValue1",
                "uVar6": "tempValue2",
                "uVar7": "tempValue3",
                "local_30": "localVar1",
                "uStack_2c": "localVar2",
                "local_28": "localVar3",
                "uStack_24": "localVar4"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "reverse_and_improve_0800a5a0",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nuint reverse_and_improve_0800a5a0(int input_parameter,undefined8 *output_parameter,int input_size,int param4,int param5,int param6)\n\n{\n  undefined4 *pointer1;\n  uint result;\n  undefined4 variable1;\n  uint variable2;\n  undefined4 extra_result1;\n  int counter1;\n  uint *pointer2;\n  undefined4 extra_result2;\n  undefined4 extra_result3;\n  undefined4 extra_result4;\n  undefined4 variable3;\n  uint **pointer3;\n  int counter2;\n  int counter3;\n  undefined4 *pointer4;\n  undefined4 variable4;\n  uint variable5;\n  uint *pointer5;\n  int counter4;\n  int init_jk_value;\n  undefined8 *pointer6;\n  undefined8 *pointer7;\n  undefined8 *pointer8;\n  undefined4 *pointer9;\n  undefined8 *pointer10;\n  undefined4 variable6;\n  int counter5;\n  undefined4 *presult4;\n  bool bVar25;\n  undefined8 result6;\n  undefined8 result7;\n  undefined8 result8;\n  undefined4 stack_variable;\n  int local_counter1;\n  int local_counter2;\n  uint *local_array1 [2];\n  uint local_array2 [20];\n  undefined8 stack_variable2;\n  undefined4 local_variable1;\n  undefined4 local_variable2;\n  undefined8 local_variable3;\n  undefined8 stack_variable3;\n  \n  init_jk_value = *(int *)(&init_jk + param5 * 4);\n  counter2 = param4 + -1;\n  local_array1[1] = (uint *)output_parameter;\n  if (input_size + 0x14 < 0 == SCARRY4(input_size,0x14)) {\n    local_counter2 = (input_size + -3) / 0x18;\n    counter3 = (local_counter2 + 1) * -0x18;\n  }\n  else {\n    counter3 = -0x18;\n    local_counter2 = 0;\n  }\n  input_size = input_size + counter3;\n  counter3 = local_counter2 - counter2;\n  if (-1 < init_jk_value + counter2) {\n    counter5 = init_jk_value + counter2 + 1 + counter3;\n    pointer8 = &stack_variable2;\n    do {\n      while (counter3 < 0) {\n        counter3 = counter3 + 1;\n        *(undefined4 *)pointer8 = 0;\n        *(undefined4 *)((int)pointer8 + 4) = 0;\n        pointer8 = pointer8 + 1;\n        if (counter3 == counter5) goto LAB_0800a626;\n      }\n      result7 = __aeabi_i2d(*(undefined4 *)(param6 + counter3 * 4));\n      counter3 = counter3 + 1;\n      *pointer8 = result7;\n      pointer8 = pointer8 + 1;\n    } while (counter3 != counter5);\n  }\nLAB_0800a626:\n  pointer4 = (undefined4 *)(input_parameter + -8);\n  if (-1 < init_jk_value) {\n    pointer6 = &stack_variable2 + param4;\n    counter5 = init_jk_value + param4;\n    counter3 = counter2;\n    pointer8 = &stack_variable3;\n    do {\n      if (counter2 < 0) {\n        result7 = 0;\n      }\n      else {\n        result7 = 0;\n        presult4 = pointer4;\n        pointer10 = pointer6;\n        do {\n          pointer9 = presult4 + 2;\n          result6 = __muldf3(*pointer9,presult4[3],*(undefined4 *)(pointer10 + -1),\n                            *(undefined4 *)((int)pointer10 + -4));\n          result7 = __aeabi_dadd((int)result7,(int)((ulonglong)result7 >> 0x20),(int)result6,\n                                (int)((ulonglong)result6 >> 0x20));\n          presult4 = pointer9;\n          pointer10 = pointer10 + -1;\n        } while (pointer9 != pointer4 + param4 * 2);\n      }\n      counter3 = counter3 + 1;\n      *pointer8 = result7;\n      pointer6 = pointer6 + 1;\n      pointer8 = pointer8 + 1;\n    } while (counter3 != counter5);\n  }\n  local_array1[0] = local_array2 + init_jk_value + -1;\n  local_counter1 = init_jk_value;\n  do {\n    counter5 = *(int *)(&stack_variable3 + local_counter1);\n    result7 = CONCAT44(*(undefined4 *)((int)&stack_variable3 + local_counter1 * 8 + 4),counter5);\n    counter3 = local_counter1;\n    if (0 < local_counter1) {\n      pointer8 = &stack_variable3 + local_counter1;\n      pointer2 = local_array2;\n      do {\n        variable3 = (undefined4)((ulonglong)result7 >> 0x20);\n        __muldf3((int)result7,variable3,0,0x3e700000);\n        __aeabi_d2iz();\n        result6 = __aeabi_i2d();\n        variable1 = (undefined4)((ulonglong)result6 >> 0x20);\n        result8 = __muldf3((int)result6,variable1,0,0x41700000);\n        __subdf3((int)result7,variable3,(int)result8,(int)((ulonglong)result8 >> 0x20));\n        result = __aeabi_d2iz();\n        pointer6 = pointer8 + -1;\n        variable3 = *(undefined4 *)pointer6;\n        variable4 = *(undefined4 *)((int)pointer8 + -4);\n        *pointer2 = result;\n        result7 = __aeabi_dadd((int)result6,variable1,variable3,variable4);\n        counter5 = (int)result7;\n        pointer8 = pointer6;\n        pointer2 = pointer2 + 1;\n      } while (pointer6 != &stack_variable3);\n    }\n    scalbn((double)CONCAT44(counter3,stack_variable),counter5);\n    __muldf3();\n    floor((double)CONCAT44(counter3,stack_variable));\n    result7 = __muldf3();\n    result7 = __subdf3(counter5,extra_result1,(int)result7,(int)((ulonglong)result7 >> 0x20));\n    result = __aeabi_d2iz();\n    result6 = __aeabi_i2d();\n    result7 = __subdf3((int)result7,(int)((ulonglong)result7 >> 0x20),(int)result6,\n                      (int)((ulonglong)result6 >> 0x20));\n    variable3 = (undefined4)((ulonglong)result7 >> 0x20);\n    variable1 = (undefined4)result7;\n    if (input_size < 1) {\n      if (input_size == 0) {\n        counter5 = (int)local_array2[counter3 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      counter5 = __aeabi_dcmpge(variable1,variable3,0,0x3fe00000);\n      if (counter5 != 0) {\n        result = result + 1;\n        if (counter3 < 1) {\n          result7 = __subdf3(0,0x3ff00000,variable1,variable3);\n          counter5 = 2;\n          goto LAB_0800a7a4;\n        }\n        counter5 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      counter1 = (int)local_array2[counter3 + -1] >> (0x18U - input_size & 0xff);\n      variable5 = local_array2[counter3 + -1] - (counter1 << (0x18U - input_size & 0xff));\n      counter5 = (int)variable5 >> (0x17U - input_size & 0xff);\n      local_array2[counter3 + -1] = variable5;\n      result = result + counter1;\njoined_r0x0800a8b8:\n      if (0 < counter5) {\n        result = result + 1;\n        if (counter3 < 1) {\n          bVar25 = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (local_array2[0] == 0) {\n            bVar25 = false;\n            if (counter3 != 1) {\n              pointer2 = local_array2;\n              counter1 = 1;\n              do {\n                pointer2 = pointer2 + 1;\n                if (*pointer2 != 0) {\n                  counter4 = counter1 + 1;\n                  variable5 = *pointer2;\n                  goto LAB_0800a8e2;\n                }\n                counter1 = counter1 + 1;\n              } while (counter1 != counter3);\n              bVar25 = false;\n            }\n          }\n          else {\n            counter4 = 1;\n            counter1 = 0;\n            variable5 = local_array2[0];\nLAB_0800a8e2:\n            local_array2[counter1] = 0x1000000 - variable5;\n            if (counter4 < counter3) {\n              variable5 = local_array2[counter4];\n              pointer2 = local_array2 + counter4;\n              while( true ) {\n                pointer5 = pointer2 + 1;\n                *pointer2 = 0xffffff - variable5;\n                if (pointer5 == local_array2 + counter3) break;\n                variable5 = *pointer5;\n                pointer2 = pointer5;\n              }\n            }\n            bVar25 = true;\n          }\n        }\n        if (0 < input_size) {\n          if (input_size == 1) {\n            local_array2[counter3 + -1] = local_array2[counter3 + -1] & 0x7fffff;\n          }\n          else if (input_size == 2) {\n            local_array2[counter3 + -1] = local_array2[counter3 + -1] & 0x3fffff;\n          }\n        }\n        if (counter5 == 2) {\n          result7 = __subdf3(0,0x3ff00000,variable1,variable3);\n          if (bVar25) {\n            variable1 = 0;\n            scalbn((double)CONCAT44(counter3,stack_variable),0);\n            result7 = __subdf3((int)result7,(int)((ulonglong)result7 >> 0x20),variable1,extra_result2);\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    counter4 = (int)result7;\n    counter1 = __aeabi_dcmpeq(counter4,(int)((ulonglong)result7 >> 0x20),0,0);\n    if (counter1 == 0) {\n      scalbn((double)CONCAT44(counter3,stack_variable),counter4);\n      counter2 = __aeabi_dcmpge();\n      if (counter2 == 0) {\n        counter1 = counter3;\n        variable5 = __aeabi_d2iz(counter4,extra_result4);\n        local_array2[counter1] = variable5;\n        counter3 = counter1;\n      }\n      else {\n        __muldf3(counter4,extra_result4,0,0x3e700000);\n        variable5 = __aeabi_d2iz();\n        result7 = __aeabi_i2d();\n        result7 = __muldf3((int)result7,(int)((ulonglong)result7 >> 0x20),0,0x41700000);\n        __subdf3(counter4,extra_result4,(int)result7,(int)((ulonglong)result7 >> 0x20));\n        counter2 = counter3;\n        variable2 = __aeabi_d2iz();\n        counter1 = counter3 + 1;\n        local_array2[counter3] = variable2;\n        local_array2[counter1] = variable5;\n        counter3 = counter2;\n      }\n      goto LAB_0800a9f6;\n    }\n    counter1 = counter3 + -1;\n    if (init_jk_value <= counter1) {\n      variable5 = 0;\n      pointer2 = local_array2 + counter3 + 0x3fffffff;\n      do {\n        pointer5 = pointer2 + -1;\n        variable5 = variable5 | *pointer2;\n        pointer2 = pointer5;\n      } while (pointer5 != local_array1[0]);\n      if (variable5 != 0) break;\n    }\n    if (local_array2[init_jk_value + -1] == 0) {\n      local_counter1 = 1;\n      pointer3 = local_array1 + init_jk_value;\n      do {\n        pointer2 = *pointer3;\n        local_counter1 = local_counter1 + 1;\n        pointer3 = pointer3 + -1;\n      } while (pointer2 == (uint *)0x0);\n      local_counter1 = counter3 + local_counter1;\n    }\n    else {\n      local_counter1 = counter3 + 1;\n    }\n    counter5 = counter3 + 1;\n    presult4 = (undefined4 *)(param6 + (counter5 + local_counter2 + 0x3fffffff) * 4);\n    pointer8 = &stack_variable2 + counter3 + param4;\n    pointer6 = &stack_variable3 + counter5;\n    do {\n      presult4 = presult4 + 1;\n      result7 = __aeabi_i2d(*presult4);\n      *pointer8 = result7;\n      pointer10 = pointer8 + 1;\n      if (counter2 < 0) {\n        result6 = 0;\n      }\n      else {\n        result6 = 0;\n        pointer9 = pointer4;\n        while( true ) {\n          pointer8 = pointer8 + -1;\n          pointer1 = pointer9 + 2;\n          result7 = __muldf3((int)result7,(int)((ulonglong)result7 >> 0x20),*pointer1,pointer9[3]);\n          result6 = __aeabi_dadd((int)result6,(int)((ulonglong)result6 >> 0x20),(int)result7,\n                                (int)((ulonglong)result7 >> 0x20));\n          if (pointer1 == pointer4 + param4 * 2) break;\n          result7 = *pointer8;\n          pointer9 = pointer1;\n        }\n      }\n      *pointer6 = result6;\n      counter5 = counter5 + 1;\n      pointer8 = pointer10;\n      pointer6 = pointer6 + 1;\n    } while (counter5 <= local_counter1);\n  } while( true );\n  if (local_array2[counter1] == 0) {\n    pointer2 = local_array2 + counter3 + 0x3ffffffe;\n    do {\n      variable5 = *pointer2;\n      counter1 = counter1 + -1;\n      pointer2 = pointer2 + -1;\n    } while (variable5 == 0);\n  }\nLAB_0800a9f6:\n  variable1 = 0;\n  scalbn((double)CONCAT44(counter3,stack_variable),0);\n  result7 = CONCAT44(extra_result3,variable1);\n  if (counter1 < 0) {\n    if (2 < param5) {\n      if (param5 == 3) {\n        pointer8 = (undefined8 *)&local_variable1;\n        result7 = 0;\nLAB_0800abe4:\n        if (counter5 == 0) {\n          variable1 = *(undefined4 *)(pointer8 + 1);\n          variable3 = *(undefined4 *)((int)pointer8 + 0xc);\n          *local_array1[1] = local_variable1;\n          *(undefined4 *)((int)local_array1[1] + 4) = local_variable2;\n          *(undefined8 *)((int)local_array1[1] + 0x10) = result7;\n          *(undefined4 *)((int)local_array1[1] + 8) = variable1;\n          *(undefined4 *)((int)local_array1[1] + 0xc) = variable3;\n          return result & 7;\n        }\n        counter2 = *(int *)((int)pointer8 + 4);\n        *(int *)((int)local_array1[1] + 0x10) = (int)result7;\n        init_jk_value = *(int *)((int)pointer8 + 0xc);\n        *(undefined4 *)((int)local_array1[1] + 8) = *(undefined4 *)(pointer8 + 1);\n        *(int *)((int)local_array1[1] + 0x14) = (int)((ulonglong)result7 >> 0x20) + -0x80000000;\n        variable1 = *(undefined4 *)pointer8;\n        *(int *)((int)local_array1[1] + 4) = counter2 + -0x80000000;\n        *(int *)((int)local_array1[1] + 0xc) = init_jk_value + -0x80000000;\n        *local_array1[1] = variable1;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param5 < 1) {\n      if (param5 != 0) goto LAB_0800ab0e;\n      result7 = 0;\nLAB_0800aafc:\n      counter2 = (int)((ulonglong)result7 >> 0x20);\n      if (counter5 != 0) {\n        counter2 = counter2 + -0x80000000;\n      }\n      *local_array1[1] = (int)result7;\n      *(int *)((int)local_array1[1] + 4) = counter2;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    result7 = 0;\n  }\n  else {\n    pointer6 = &stack_variable3 + counter1;\n    pointer2 = local_array2 + counter1 + 1;\n    pointer8 = &stack_variable3 + counter1 + 1;\n    do {\n      variable1 = (undefined4)((ulonglong)result7 >> 0x20);\n      pointer2 = pointer2 + -1;\n      result6 = __aeabi_i2d(*pointer2);\n      result6 = __muldf3((int)result6,(int)((ulonglong)result6 >> 0x20),(int)result7,variable1);\n      pointer8 = pointer8 + -1;\n      *pointer8 = result6;\n      result7 = __muldf3((int)result7,variable1,0,0x3e700000);\n    } while (pointer2 != local_array2);\n    pointer8 = (undefined8 *)&local_variable1;\n    counter2 = 0;\n    do {\n      if (init_jk_value < 0) {\n        result7 = 0;\n      }\n      else {\n        variable1 = 0x40000000;\n        variable3 = 0x3ff921fb;\n        result7 = 0;\n        counter3 = 0;\n        pointer10 = pointer6;\n        pointer4 = &DAT_0800c028;\n        while( true ) {\n          result6 = __muldf3(*(undefined4 *)pointer10,*(undefined4 *)((int)pointer10 + 4),variable1,variable3);\n          result7 = __aeabi_dadd((int)result7,(int)((ulonglong)result7 >> 0x20),(int)result6,\n                                (int)((ulonglong)result6 >> 0x20));\n          counter3 = counter3 + 1;\n          if ((init_jk_value < counter3) || (counter2 < counter3)) break;\n          variable1 = *pointer4;\n          variable3 = pointer4[1];\n          pointer10 = pointer10 + 1;\n          pointer4 = pointer4 + 2;\n        }\n      }\n      bVar25 = counter2 != counter1;\n      pointer8[counter2] = result7;\n      pointer6 = pointer6 + -1;\n      counter2 = counter2 + 1;\n    } while (bVar25);\n    if (2 < param5) {\n      if (param5 == 3) {\n        if (counter1 != 0) {\n          pointer6 = pointer8 + counter1;\n          result7 = *pointer6;\n          do {\n            variable3 = (undefined4)((ulonglong)result7 >> 0x20);\n            variable1 = (undefined4)result7;\n            variable4 = *(undefined4 *)(pointer6 + -1);\n            variable6 = *(undefined4 *)((int)pointer6 + -4);\n            result7 = __aeabi_dadd(variable1,variable3,variable4,variable6);\n            result6 = __subdf3(variable4,variable6,(int)result7,(int)((ulonglong)result7 >> 0x20));\n            result6 = __aeabi_dadd((int)result6,(int)((ulonglong)result6 >> 0x20),variable1,variable3);\n            *pointer6 = result6;\n            pointer6 = pointer6 + -1;\n            *pointer6 = result7;\n          } while (pointer8 != pointer6);\n          if (1 < counter1) {\n            pointer10 = pointer8 + counter1;\n            result7 = *pointer10;\n            pointer6 = pointer10;\n            do {\n              variable3 = (undefined4)((ulonglong)result7 >> 0x20);\n              variable1 = (undefined4)result7;\n              variable4 = *(undefined4 *)(pointer6 + -1);\n              variable6 = *(undefined4 *)((int)pointer6 + -4);\n              result7 = __aeabi_dadd(variable1,variable3,variable4,variable6);\n              result6 = __subdf3(variable4,variable6,(int)result7,(int)((ulonglong)result7 >> 0x20));\n              result6 = __aeabi_dadd((int)result6,(int)((ulonglong)result6 >> 0x20),variable1,variable3);\n              *pointer6 = result6;\n              pointer6 = pointer6 + -1;\n              *pointer6 = result7;\n            } while (&local_variable3 != pointer6);\n            result7 = 0;\n            pointer7 = pointer8 + 2;\n            pointer6 = pointer10 + 1;\n            do {\n              pointer10 = pointer6 + -1;\n              result7 = __aeabi_dadd((int)result7,(int)((ulonglong)result7 >> 0x20),\n                                    *(undefined4 *)pointer10,*(undefined4 *)((int)pointer6 + -4));\n              pointer6 = pointer10;\n            } while (pointer7 != pointer10);\n            goto LAB_0800abe4;\n          }\n        }\n        result7 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param5 < 1) {\n      if (param5 != 0) goto LAB_0800ab0e;\n      result7 = 0;\n      pointer6 = pointer8 + counter1 + 1;\n      do {\n        pointer10 = pointer6 + -1;\n        result7 = __aeabi_dadd((int)result7,(int)((ulonglong)result7 >> 0x20),*(undefined4 *)pointer10,\n                              *(undefined4 *)((int)pointer6 + -4));\n        pointer6 = pointer10;\n      } while (pointer8 != pointer10);\n      goto LAB_0800aafc;\n    }\n    result7 = 0;\n    pointer6 = pointer8 + counter1 + 1;\n    do {\n      pointer10 = pointer6 + -1;\n      result7 = __aeabi_dadd((int)result7,(int)((ulonglong)result7 >> 0x20),*(undefined4 *)pointer10,\n                            *(undefined4 *)((int)pointer6 + -4));\n      pointer6 = pointer10;\n    } while (pointer8 != pointer10);\n  }\n  counter2 = (int)((ulonglong)result7 >> 0x20);\n  variable1 = (undefined4)result7;\n  if (counter5 == 0) {\n    *(undefined8 *)local_array1[1] = result7;\n    result7 = __subdf3(local_variable1,local_variable2,variable1,counter2);\n    if (counter1 < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    counter2 = 1;\n    pointer8 = (undefined8 *)&local_variable1;\n    do {\n      result7 = __aeabi_dadd((int)result7,(int)((ulonglong)result7 >> 0x20),\n                            *(undefined4 *)(pointer8 + 1),*(undefined4 *)((int)pointer8 + 0xc));\n      counter2 = counter2 + 1;\n      pointer8 = pointer8 + 1;\n    } while (counter2 <= counter1);\n    if (counter5 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_array1[1] = variable1;\n    *(int *)((int)local_array1[1] + 4) = counter2 + -0x80000000;\n    result7 = __subdf3(local_variable1,local_variable2,variable1,counter2);\n    if (0 < counter1) goto LAB_0800ad04;\n  }\n  result7 = CONCAT44((int)((ulonglong)result7 >> 0x20) + -0x80000000,(int)result7);\nLAB_0800ad26:\n  *(undefined8 *)((int)local_array1[1] + 8) = result7;\n  return result & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "reverse_and_improve_0800a5a0",
                "param_1": "input_parameter",
                "param_2": "output_parameter",
                "param_3": "input_size",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "pointer1",
                "uVar2": "result",
                "uVar3": "variable1",
                "uVar4": "variable2",
                "extraout_r1": "extra_result1",
                "iVar5": "counter1",
                "puVar6": "pointer2",
                "extraout_r1_00": "extra_result2",
                "extraout_r1_01": "extra_result3",
                "extraout_r1_02": "extra_result4",
                "uVar7": "variable3",
                "ppuVar8": "pointer3",
                "iVar9": "counter2",
                "iVar10": "counter3",
                "puVar11": "pointer4",
                "uVar12": "variable4",
                "uVar13": "variable5",
                "puVar14": "pointer5",
                "iVar15": "counter4",
                "iVar16": "init_jk_value",
                "iVar23": "counter5",
                "puVar17": "pointer6",
                "puVar18": "pointer7",
                "puVar19": "pointer8",
                "puVar20": "pointer9",
                "puVar21": "pointer10",
                "uVar22": "variable6",
                "in_stack_fffffd78": "stack_variable",
                "local_280": "local_counter1",
                "local_26c": "local_counter2",
                "local_260": "local_array1",
                "local_258": "local_array2",
                "uStack_208": "stack_variable2",
                "local_168": "local_variable1",
                "local_164": "local_variable2",
                "local_160": "local_variable3",
                "uStack_c8": "stack_variable3"
            },
            "calling": [
                "__ieee754_rem_pio2"
            ],
            "called": [
                "__muldf3",
                "scalbn",
                "__aeabi_dcmpge",
                "__aeabi_dadd",
                "__aeabi_dcmpeq",
                "__aeabi_i2d",
                "__aeabi_d2iz",
                "__subdf3",
                "floor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_square_root_0800adf0",
            "code": "\nundefined4\ncalculate_square_root_0800adf0(undefined4 input,uint precision,undefined4 approximation1,undefined4 approximation2,int use_approximation)\n\n{\n  int conversion_result;\n  undefined4 result1_low;\n  undefined4 result1_high;\n  undefined4 result2_low;\n  undefined4 result2_high;\n  undefined4 temp_result_high;\n  undefined8 temp_result_low;\n  undefined8 mul_result;\n  \n  if (((precision & 0x7fffffff) < 0x3e400000) && (conversion_result = __aeabi_d2iz(), conversion_result == 0)) {\n    return input;\n  }\n  temp_result_low = __muldf3(input,precision,input);\n  result2_low = (undefined4)((ulonglong)temp_result_low >> 0x20);\n  result1_high = (undefined4)temp_result_low;\n  temp_result_low = __muldf3(input,precision,result1_high,result2_low);\n  result2_high = (undefined4)((ulonglong)temp_result_low >> 0x20);\n  result1_low = (undefined4)temp_result_low;\n  temp_result_low = __muldf3(result1_high,result2_low,0x5acfd57c,0x3de5d93a);\n  temp_result_low = __subdf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  temp_result_low = __muldf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),result1_high,result2_low);\n  temp_result_low = __aeabi_dadd((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0x57b1fe7d,0x3ec71de3);\n  temp_result_low = __muldf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),result1_high,result2_low);\n  temp_result_low = __subdf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0x19c161d5,0x3f2a01a0);\n  temp_result_low = __muldf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),result1_high,result2_low);\n  temp_result_low = __aeabi_dadd((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0x1110f8a6,0x3f811111);\n  temp_result_high = (undefined4)((ulonglong)temp_result_low >> 0x20);\n  if (use_approximation != 0) {\n    mul_result = __muldf3(approximation1,approximation2,0,0x3fe00000);\n    temp_result_low = __muldf3(result1_low,result2_high,(int)temp_result_low,temp_result_high);\n    temp_result_low = __subdf3((int)mul_result,(int)((ulonglong)mul_result >> 0x20),(int)temp_result_low,\n                     (int)((ulonglong)temp_result_low >> 0x20));\n    temp_result_low = __muldf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),result1_high,result2_low);\n    temp_result_low = __subdf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),approximation1,approximation2);\n    mul_result = __muldf3(result1_low,result2_high,0x55555549,0x3fc55555);\n    temp_result_low = __aeabi_dadd((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),(int)mul_result,\n                         (int)((ulonglong)mul_result >> 0x20));\n    result1_high = __subdf3(input,precision,(int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20));\n    return result1_high;\n  }\n  temp_result_low = __muldf3(result1_high,result2_low,(int)temp_result_low,temp_result_high);\n  temp_result_low = __subdf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0x55555549,0x3fc55555);\n  temp_result_low = __muldf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),result1_low,result2_high);\n  result1_high = __aeabi_dadd((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),input,precision);\n  return result1_high;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_square_root_0800adf0",
                "param_1": "input",
                "param_2": "precision",
                "param_3": "approximation1",
                "param_4": "approximation2",
                "param_5": "use_approximation",
                "iVar1": "conversion_result",
                "uVar2": "result1_low",
                "uVar3": "result1_high",
                "uVar4": "result2_low",
                "uVar5": "result2_high",
                "uVar6": "temp_result_high",
                "uVar7": "temp_result_low",
                "uVar8": "mul_result"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_arctan_0800af78",
            "code": "\ndouble calculateArctan_0800af78(double input)\n\n{\n  int integerPart;\n  undefined4 mulResult1_low;\n  undefined4 mulResult1_high;\n  uint fractionalPart;\n  undefined4 mulResult2_low;\n  undefined4 mulResult2_high;\n  undefined4 extraout_result;\n  uint unsignedFractionalPart;\n  int caseValue;\n  double result;\n  double tempResult;\n  double defaultResult;\n  undefined8 tempVar1_low;\n  undefined8 tempVar2_low;\n  undefined4 stackParameter;\n  uint tempVar2_high;\n  \n  unsignedFractionalPart = fractionalPart & 0x7fffffff;\n  if (unsignedFractionalPart < 0x44100000) {\n    if (unsignedFractionalPart < 0x3fdc0000) {\n      tempVar2_high = fractionalPart;\n      if (unsignedFractionalPart < 0x3e200000) {\n        tempVar1_low = __aeabi_dadd(integerPart,fractionalPart,0x8800759c,0x7e37e43c);\n        caseValue = __aeabi_dcmpgt((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),0,0x3ff00000);\n        if (caseValue != 0) {\n          return defaultResult;\n        }\n      }\n      caseValue = -1;\n    }\n    else {\n      fabs((double)CONCAT44(fractionalPart,stackParameter));\n      if (unsignedFractionalPart < 0x3ff30000) {\n        if (unsignedFractionalPart < 0x3fe60000) {\n          tempVar1_low = __aeabi_dadd();\n          tempVar1_low = __subdf3((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),0,0x3ff00000);\n          tempVar2_low = __aeabi_dadd(integerPart,extraout_result,0,0x40000000);\n          tempVar1_low = __divdf3((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),(int)tempVar2_low,\n                           (int)((ulonglong)tempVar2_low >> 0x20));\n          tempVar2_high = (uint)((ulonglong)tempVar1_low >> 0x20);\n          integerPart = (int)tempVar1_low;\n          caseValue = 0;\n        }\n        else {\n          tempVar1_low = __subdf3();\n          tempVar2_low = __aeabi_dadd(integerPart,extraout_result,0,0x3ff00000);\n          tempVar1_low = __divdf3((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),(int)tempVar2_low,\n                           (int)((ulonglong)tempVar2_low >> 0x20));\n          tempVar2_high = (uint)((ulonglong)tempVar1_low >> 0x20);\n          integerPart = (int)tempVar1_low;\n          caseValue = 1;\n        }\n      }\n      else if (unsignedFractionalPart < 0x40038000) {\n        tempVar1_low = __subdf3();\n        tempVar2_low = __muldf3(integerPart,extraout_result,0,0x3ff80000);\n        tempVar2_low = __aeabi_dadd((int)tempVar2_low,(int)((ulonglong)tempVar2_low >> 0x20),0,0x3ff00000);\n        tempVar1_low = __divdf3((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),(int)tempVar2_low,\n                         (int)((ulonglong)tempVar2_low >> 0x20));\n        tempVar2_high = (uint)((ulonglong)tempVar1_low >> 0x20);\n        integerPart = (int)tempVar1_low;\n        caseValue = 2;\n      }\n      else {\n        tempVar1_low = __divdf3(0,0xbff00000,integerPart,extraout_result);\n        tempVar2_high = (uint)((ulonglong)tempVar1_low >> 0x20);\n        integerPart = (int)tempVar1_low;\n        caseValue = 3;\n      }\n    }\n    tempVar1_low = __muldf3(integerPart,tempVar2_high,integerPart);\n    mulResult2_low = (undefined4)((ulonglong)tempVar1_low >> 0x20);\n    mulResult1_low = (undefined4)tempVar1_low;\n    tempVar1_low = __muldf3(mulResult1_low,mulResult2_low,mulResult1_low,mulResult2_low);\n    mulResult2_high = (undefined4)((ulonglong)tempVar1_low >> 0x20);\n    mulResult1_high = (undefined4)tempVar1_low;\n    tempVar1_low = __muldf3(mulResult1_high,mulResult2_high,0xe322da11,0x3f90ad3a);\n    tempVar1_low = __aeabi_dadd((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),0x24760deb,0x3fa97b4b);\n    tempVar1_low = __muldf3((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),mulResult1_high,mulResult2_high);\n    tempVar1_low = __aeabi_dadd((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),0xa0d03d51,0x3fb10d66);\n    tempVar1_low = __muldf3((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),mulResult1_high,mulResult2_high);\n    tempVar1_low = __aeabi_dadd((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),0xc54c206e,0x3fb745cd);\n    tempVar1_low = __muldf3((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),mulResult1_high,mulResult2_high);\n    tempVar1_low = __aeabi_dadd((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),0x920083ff,0x3fc24924);\n    tempVar1_low = __muldf3((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),mulResult1_high,mulResult2_high);\n    tempVar1_low = __aeabi_dadd((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),0x5555550d,0x3fd55555);\n    tempVar1_low = __muldf3((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),mulResult1_low,mulResult2_low);\n    mulResult1_low = (undefined4)((ulonglong)tempVar1_low >> 0x20);\n    tempVar2_low = __muldf3(mulResult1_high,mulResult2_high,0x2c6a6c2f,0xbfa2b444);\n    tempVar2_low = __subdf3((int)tempVar2_low,(int)((ulonglong)tempVar2_low >> 0x20),0x52defd9a,0x3fadde2d);\n    tempVar2_low = __muldf3((int)tempVar2_low,(int)((ulonglong)tempVar2_low >> 0x20),mulResult1_high,mulResult2_high);\n    tempVar2_low = __subdf3((int)tempVar2_low,(int)((ulonglong)tempVar2_low >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    tempVar2_low = __muldf3((int)tempVar2_low,(int)((ulonglong)tempVar2_low >> 0x20),mulResult1_high,mulResult2_high);\n    tempVar2_low = __subdf3((int)tempVar2_low,(int)((ulonglong)tempVar2_low >> 0x20),0xfe231671,0x3fbc71c6);\n    tempVar2_low = __muldf3((int)tempVar2_low,(int)((ulonglong)tempVar2_low >> 0x20),mulResult1_high,mulResult2_high);\n    tempVar2_low = __subdf3((int)tempVar2_low,(int)((ulonglong)tempVar2_low >> 0x20),0x9998ebc4,0x3fc99999);\n    tempVar2_low = __muldf3((int)tempVar2_low,(int)((ulonglong)tempVar2_low >> 0x20),mulResult1_high,mulResult2_high);\n    mulResult1_high = (undefined4)((ulonglong)tempVar2_low >> 0x20);\n    if (caseValue == -1) {\n      tempVar1_low = __aeabi_dadd((int)tempVar1_low,mulResult1_low,(int)tempVar2_low,mulResult1_high);\n      tempVar1_low = __muldf3((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),integerPart,tempVar2_high);\n      tempResult = (double)__subdf3(integerPart,tempVar2_high,(int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20));\n      return tempResult;\n    }\n    tempVar1_low = __aeabi_dadd((int)tempVar1_low,mulResult1_low,(int)tempVar2_low,mulResult1_high);\n    tempVar1_low = __muldf3((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),integerPart,tempVar2_high);\n    tempVar1_low = __subdf3((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),*(undefined4 *)(&atanlo + caseValue * 8)\n                     ,*(undefined4 *)(&UNK_0800c094 + caseValue * 8));\n    tempVar1_low = __subdf3((int)tempVar1_low,(int)((ulonglong)tempVar1_low >> 0x20),integerPart,tempVar2_high);\n    result = (double)__subdf3(*(undefined4 *)(&atanhi + caseValue * 8),\n                             *(undefined4 *)(&UNK_0800c074 + caseValue * 8),(int)tempVar1_low,\n                             (int)((ulonglong)tempVar1_low >> 0x20));\n    if ((int)fractionalPart < 0) {\n      return result;\n    }\n  }\n  else if ((0x7ff00000 < unsignedFractionalPart) || ((unsignedFractionalPart == 0x7ff00000 && (integerPart != 0)))) {\n    tempResult = (double)__aeabi_dadd();\n    return tempResult;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_arctan_0800af78",
                "__x": "input",
                "in_r0": "integerPart",
                "in_r1": "fractionalPart",
                "uVar1": "mulResult1_low",
                "uVar2": "mulResult1_high",
                "uVar3": "mulResult2_low",
                "uVar4": "mulResult2_high",
                "extraout_r1": "extraout_result",
                "uVar5": "unsignedFractionalPart",
                "iVar6": "caseValue",
                "in_d0": "result",
                "dVar7": "tempResult",
                "extraout_d0": "defaultResult",
                "uVar8": "tempVar1_low",
                "uVar9": "tempVar2_low",
                "uVar10": "tempVar2_high",
                "in_stack_ffffffd0": "stackParameter"
            },
            "calling": [
                "__ieee754_atan2"
            ],
            "called": [
                "__muldf3",
                "fabs",
                "__aeabi_dadd",
                "__divdf3",
                "__subdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "calculate_double_value_0800b2cc",
            "code": "\ndouble calculate_double_value_0800b2cc(double input_value)\n\n{\n  double result;\n  \n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "calculate_double_value_0800b2cc",
                "__x": "input_value",
                "in_d0": "result"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "__ieee754_atan2",
                "atan"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "calculate_positive_offset_0800b2d4",
            "code": "\nint calculate_positive_offset_0800b2d4(double input_value)\n\n{\n  uint result_mask;\n  \n  return (result_mask | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "calculate_positive_offset_0800b2d4",
                "__value": "input_value",
                "in_r1": "result_mask"
            },
            "calling": [
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "handle_exception_0800b2e0",
            "code": "\nint handle_exception_0800b2e0(exception *exception_obj)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "handle_exception_0800b2e0",
                "__exc": "exception_obj"
            },
            "calling": [
                "sqrt",
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_exponential_0800b2e8",
            "code": "\ndouble calculateExponential_0800b2e8(double base,int exponent)\n\n{\n  uint base_shifted;\n  int exponent_shifted;\n  uint base_shifted_check;\n  int exponent_sum;\n  uint base_shifted_upper;\n  double result;\n  double temp_result;\n  double final_result;\n  undefined8 combined_parameters;\n  \n  combined_parameters = CONCAT44(base_shifted,exponent);\n  base_shifted_check = (base_shifted << 1) >> 0x15;\n  if (base_shifted_check == 0) {\n    if ((exponent | base_shifted & 0x7fffffff) == 0) {\n      return result;\n    }\n    combined_parameters = __muldf3(exponent,base_shifted,0,0x43500000);\n    if (exponent_shifted < -50000) goto LAB_0800b34a;\n    base_shifted_check = ((uint)((int)((ulonglong)combined_parameters >> 0x20) << 1) >> 0x15) - 0x36;\n    result = temp_result;\n  }\n  else if (base_shifted_check == 0x7ff) {\n    final_result = (double)__aeabi_dadd(exponent,base_shifted,exponent);\n    return final_result;\n  }\n  base_shifted_upper = (uint)((ulonglong)combined_parameters >> 0x20);\n  exponent_sum = base_shifted_check + exponent_shifted;\n  if (exponent_sum < 0x7ff) {\n    if (0 < exponent_sum) {\n      return result;\n    }\n    if (exponent_sum + 0x35 < 0 == SCARRY4(exponent_sum,0x35)) {\n      final_result = (double)__muldf3((int)combined_parameters,base_shifted_upper & 0x800fffff | (exponent_sum + 0x36) * 0x100000,0,\n                               0x3c900000);\n      return final_result;\n    }\n    if (exponent_shifted < 0xc351) {\n      combined_parameters = CONCAT44(base_shifted_upper & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      final_result = (double)__muldf3((int)combined_parameters,(int)((ulonglong)combined_parameters >> 0x20),0xc2f8f359,0x1a56e1f);\n      return final_result;\n    }\n  }\n  final_result = (double)__muldf3(0x8800759c,base_shifted_upper & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_exponential_0800b2e8",
                "__x": "base",
                "__n": "exponent",
                "in_r1": "base_shifted",
                "in_r2": "exponent_shifted",
                "uVar1": "base_shifted_check",
                "iVar2": "exponent_sum",
                "uVar3": "base_shifted_upper",
                "in_d0": "result",
                "extraout_d0": "temp_result",
                "dVar4": "final_result",
                "uVar5": "combined_parameters"
            },
            "calling": [
                "__kernel_rem_pio2"
            ],
            "called": [
                "__muldf3",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_impure_ptr_0800b3dc",
            "code": "\nundefined4 getImpurePtr_0800b3dc(void)\n\n{\n  return _impure_ptr;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_impure_ptr_0800b3dc"
            },
            "calling": [
                "sqrt",
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "initialize_function_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid initializeFunction_0800b3e8(EVP_PKEY_CTX *context)\n\n{\n  int iterationCount;\n  code **functionArray;\n  \n  _init(context);\n  iterationCount = 0;\n  functionArray = (code **)&__preinit_array_end;\n  do {\n    iterationCount = iterationCount + 1;\n    (**functionArray)();\n    functionArray = functionArray + 1;\n  } while (iterationCount != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "initialize_function_0800b3e8",
                "param_1": "context",
                "iVar1": "iterationCount",
                "ppcVar2": "functionArray"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_init",
                "frame_dummy",
                "register_fini"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "memset_with_value_0800b430",
            "code": "\nvoid * memset_with_value_0800b430(void *buffer,int value,size_t length)\n\n{\n  uint wordValue;\n  uint *ptrBuffer;\n  uint *ptrCurrent;\n  uint *ptrNext;\n  uint dwordValue;\n  bool isEnd;\n  \n  ptrBuffer = (uint *)buffer;\n  if (((uint)buffer & 3) != 0) {\n    dwordValue = length - 1;\n    ptrCurrent = (uint *)buffer;\n    if (length == 0) {\n      return buffer;\n    }\n    while( true ) {\n      ptrBuffer = (uint *)((int)ptrCurrent + 1);\n      *(char *)ptrCurrent = (char)value;\n      length = dwordValue;\n      if (((uint)ptrBuffer & 3) == 0) break;\n      isEnd = dwordValue == 0;\n      dwordValue = dwordValue - 1;\n      ptrCurrent = ptrBuffer;\n      if (isEnd) {\n        return buffer;\n      }\n    }\n  }\n  if (3 < length) {\n    dwordValue = value & 0xffU | (value & 0xffU) << 8;\n    dwordValue = dwordValue | dwordValue << 0x10;\n    if (0xf < length) {\n      ptrCurrent = ptrBuffer + 4;\n      do {\n        ptrCurrent[-4] = dwordValue;\n        ptrCurrent[-3] = dwordValue;\n        ptrCurrent[-2] = dwordValue;\n        ptrCurrent[-1] = dwordValue;\n        ptrCurrent = ptrCurrent + 4;\n      } while (ptrCurrent != (uint *)((int)ptrBuffer + (length - 0x10 & 0xfffffff0) + 0x20));\n      wordValue = length & 0xc;\n      ptrBuffer = ptrBuffer + ((length - 0x10 >> 4) + 1) * 4;\n      length = length & 0xf;\n      if (wordValue == 0) goto joined_r0x0800b4a8;\n    }\n    ptrCurrent = (uint *)((length - 4 & 0xfffffffc) + 4 + (int)ptrBuffer);\n    do {\n      ptrNext = ptrBuffer + 1;\n      *ptrBuffer = dwordValue;\n      ptrBuffer = ptrNext;\n    } while (ptrCurrent != ptrNext);\n    length = length & 3;\n    ptrBuffer = ptrCurrent;\n  }\njoined_r0x0800b4a8:\n  if (length != 0) {\n    ptrCurrent = ptrBuffer;\n    do {\n      ptrNext = (uint *)((int)ptrCurrent + 1);\n      *(char *)ptrCurrent = (char)value;\n      ptrCurrent = ptrNext;\n    } while ((uint *)(length + (int)ptrBuffer) != ptrNext);\n  }\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "memset_with_value_0800b430",
                "__s": "buffer",
                "__c": "value",
                "__n": "length",
                "uVar1": "wordValue",
                "puVar2": "ptrBuffer",
                "puVar3": "ptrCurrent",
                "puVar4": "ptrNext",
                "uVar5": "dwordValue",
                "bVar6": "isEnd"
            },
            "calling": [
                "gc_execute_line",
                "mc_go_home",
                "eeprom_init",
                "grbl_main",
                "plan_init",
                "debounce_init",
                "gc_init",
                "settings_read_coord_data",
                "homing_cycle",
                "st_reset"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "atexit"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4e4": {
            "entrypoint": "0x0800b4e4",
            "current_name": "register_exit_proc_0800b4e4",
            "code": "\nint register_exit_proc_0800b4e4(function *function)\n\n{\n  int iVar1;\n  \n  iVar1 = __register_exitproc(0,function,0);\n  return iVar1;\n}\n\n",
            "renaming": {
                "FUN_0800b4e4": "register_exit_proc_0800b4e4",
                "__func": "function"
            },
            "calling": [
                "register_fini"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4f0": {
            "entrypoint": "0x0800b4f0",
            "current_name": "execute_global_destructors_0800b4f0",
            "code": "\nvoid executeGlobalDestructors_0800b4f0(void)\n\n{\n  int count;\n  code **destructorArray;\n  \n  count = 1;\n  destructorArray = (code **)&__do_global_dtors_aux_fini_array_entry;\n  do {\n    count = count + -1;\n    (**destructorArray)();\n    destructorArray = destructorArray + -1;\n  } while (count != 0);\n  _fini();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4f0": "execute_global_destructors_0800b4f0",
                "iVar1": "count",
                "ppcVar2": "destructorArray"
            },
            "calling": [],
            "called": [
                "_fini",
                "frame_dummy",
                "__do_global_dtors_aux"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "update_at_exit_handlers_0800b524",
            "code": "\nundefined4 updateAtExitHandlers_0800b524(int flag,undefined4 handler,undefined4 globalVar1,undefined4 globalVar2)\n\n{\n  undefined *currentEntry;\n  undefined4 returnValue;\n  uint bitMask;\n  uint entryIndex;\n  \n  __retarget_lock_acquire_recursive(__atexit_recursive_mutex);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  currentEntry = DAT_20000168;\n  entryIndex = *(uint *)(DAT_20000168 + 4);\n  if ((int)entryIndex < 0x20) {\n    if (flag != 0) {\n      *(undefined4 *)(DAT_20000168 + entryIndex * 4 + 0x88) = globalVar1;\n      bitMask = 1 << (entryIndex & 0xff);\n      *(uint *)(currentEntry + 0x188) = *(uint *)(currentEntry + 0x188) | bitMask;\n      *(undefined4 *)(currentEntry + entryIndex * 4 + 0x108) = globalVar2;\n      if (flag == 2) {\n        *(uint *)(currentEntry + 0x18c) = bitMask | *(uint *)(currentEntry + 0x18c);\n      }\n    }\n    returnValue = __atexit_recursive_mutex;\n    *(uint *)(currentEntry + 4) = entryIndex + 1;\n    *(undefined4 *)(currentEntry + (entryIndex + 2) * 4) = handler;\n    __retarget_lock_release_recursive(returnValue);\n    returnValue = 0;\n  }\n  else {\n    __retarget_lock_release_recursive(__atexit_recursive_mutex);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "update_at_exit_handlers_0800b524",
                "param_1": "flag",
                "param_2": "handler",
                "param_3": "globalVar1",
                "param_4": "globalVar2",
                "puVar1": "currentEntry",
                "uVar2": "returnValue",
                "uVar3": "bitMask",
                "uVar4": "entryIndex"
            },
            "calling": [
                "atexit"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "get_context_pointer_0800b5b0",
            "code": "\nint get_context_pointer_0800b5b0(EVP_PKEY_CTX *context)\n\n{\n  return (int)context;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "get_context_pointer_0800b5b0",
                "ctx": "context"
            },
            "calling": [
                "frame_dummy",
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 215316,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_080001f8",
            "FUN_08000210",
            "FUN_08000220",
            "FUN_08000268",
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_080002f0",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_08000478",
            "FUN_080004ac",
            "FUN_080004fc",
            "FUN_0800056c",
            "FUN_080005b4",
            "FUN_0800184c",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_0800195c",
            "FUN_08001994",
            "FUN_08001d4c",
            "FUN_08001ddc",
            "FUN_08001e98",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_080025e8",
            "FUN_08002638",
            "FUN_08002814",
            "FUN_08002828",
            "FUN_0800283a",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002978",
            "FUN_080029d8",
            "FUN_08002a94",
            "FUN_08002afc",
            "FUN_08002ba8",
            "FUN_08002c18",
            "FUN_08002e08",
            "FUN_08002edc",
            "FUN_08002ef0",
            "FUN_08002f24",
            "FUN_08002f40",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_08002fd4",
            "FUN_08003004",
            "FUN_080035ec",
            "FUN_08003618",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_08003778",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003980",
            "FUN_080039a0",
            "FUN_080039bc",
            "FUN_08003a18",
            "FUN_08003a74",
            "FUN_08003b98",
            "FUN_08003f34",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08004250",
            "FUN_080044e8",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004dd2",
            "FUN_08004e30",
            "FUN_080051b4",
            "FUN_08005238",
            "FUN_08005250",
            "FUN_0800525c",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005324",
            "FUN_08005360",
            "FUN_080053a0",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800587c",
            "FUN_080058a0",
            "FUN_08005900",
            "FUN_0800597c",
            "FUN_08005984",
            "FUN_080059b4",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005a98",
            "FUN_08005ac4",
            "FUN_08005ad4",
            "FUN_08005aec",
            "FUN_08005b04",
            "FUN_08005b20",
            "FUN_08005b3c",
            "FUN_08005b58",
            "FUN_08005b74",
            "FUN_08005b90",
            "FUN_08005bac",
            "FUN_08005bc4",
            "FUN_08005bdc",
            "FUN_08005c30",
            "FUN_08005c74",
            "FUN_08005cec",
            "FUN_0800618c",
            "FUN_0800640c",
            "FUN_080064bc",
            "FUN_080064d4",
            "FUN_080064ec",
            "FUN_08006628",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006718",
            "FUN_080068bc",
            "FUN_0800691c",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d72",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08006e38",
            "FUN_08006e70",
            "FUN_08006e88",
            "FUN_080071d0",
            "FUN_08007310",
            "FUN_0800733e",
            "FUN_0800736c",
            "FUN_0800738e",
            "FUN_080073c0",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_08007436",
            "FUN_080074c8",
            "FUN_08007520",
            "FUN_08007540",
            "FUN_0800756c",
            "FUN_080075c8",
            "FUN_080076c8",
            "FUN_0800771a",
            "FUN_08007720",
            "FUN_08007726",
            "FUN_0800772c",
            "FUN_08007756",
            "FUN_0800778c",
            "FUN_08007854",
            "FUN_08007884",
            "FUN_080078d0",
            "FUN_080078e2",
            "FUN_080078f4",
            "FUN_08007930",
            "FUN_080079c0",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007a70",
            "FUN_08007ad0",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007c7c",
            "FUN_08007d08",
            "FUN_08007da8",
            "FUN_08007dd8",
            "FUN_08007e08",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_08007f54",
            "FUN_08008190",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008286",
            "FUN_080082c8",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_080085d4",
            "FUN_080085e4",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a64",
            "FUN_08008a6c",
            "FUN_08008a74",
            "FUN_08008af0",
            "FUN_08008b00",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_08008b38",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd0",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008e60",
            "FUN_08008e70",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800918c",
            "FUN_08009194",
            "FUN_0800919c",
            "FUN_080091fc",
            "FUN_08009204",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_08009278",
            "FUN_080092c4",
            "FUN_08009314",
            "FUN_08009318",
            "FUN_08009410",
            "FUN_080094c0",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_080096e8",
            "FUN_08009798",
            "FUN_0800981c",
            "FUN_080098d0",
            "FUN_08009990",
            "FUN_08009b24",
            "FUN_08009d78",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800a5a0",
            "FUN_0800adf0",
            "FUN_0800af78",
            "FUN_0800b2cc",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b2e8",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b4e4",
            "FUN_0800b4f0",
            "FUN_0800b524",
            "FUN_0800b5b0"
        ],
        [
            "FUN_08008640",
            "FUN_08008894"
        ]
    ],
    "locked_functions": []
}