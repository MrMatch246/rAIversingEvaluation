{
    "functions": {
        "FUN_0800192c": {
            "renaming": {
                "FUN_0800192c": "check_flag_status_0800192c",
                "PTR_DAT_08001958": "flag_status",
                "PTR_DAT_08001954": "flag_array"
            },
            "code": "void check_flag_status_0800192c(void)\n{\n  if ((PTR_DAT_08001954[0x28] & 8) == 0) {\n    *(int *)PTR_DAT_08001958 = 0;\n  }\n  else {\n    *(int *)PTR_DAT_08001958 = 1;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800192c",
            "calling": [
                "FUN_08004e30",
                "FUN_08001ddc"
            ],
            "imported": true,
            "current_name": "check_flag_status_0800192c"
        },
        "FUN_08006950": {
            "renaming": {
                "FUN_08006950": "set_display_mode_08006950",
                "PTR_DAT_08006994": "display_mode_ptr",
                "param_1": "display_mode",
                "DAT_08006994": "display_mode_ptr_value"
            },
            "code": "void set_display_mode_08006950(uint display_mode) {\n    uint* PTR_DAT_08006994 = (uint*)(DAT_08006994 + 0xc);\n    uint mask = 0xf8ff;\n    uint display_mode_masked = display_mode & 0x7;\n    uint display_mode_shifted = display_mode_masked << 8;\n    uint display_mode_final = display_mode_shifted | 0x5fa0000;\n    *PTR_DAT_08006994 = (*PTR_DAT_08006994 & mask) | display_mode_final;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006950",
            "calling": [
                "FUN_08006ce0"
            ],
            "imported": true,
            "current_name": "set_display_mode_08006950"
        },
        "FUN_08008ba0": {
            "renaming": {
                "FUN_08008ba0": "convert_fixed_point_to_int_08008ba0",
                "iVar2": "shifted_value_signed",
                "uVar1": "shift_amount",
                "param_1": "fixed_point_value",
                "shifted_value_signed": "shifted_value_signed",
                "result": "result",
                "param_2": "fractional_bits",
                "uVar3": "unused",
                "shifted_value": "shifted_value"
            },
            "code": "uint convert_fixed_point_to_int_08008ba0(uint fixed_point_value, uint fractional_bits) {\n  uint shifted_value;\n  int shifted_value_signed;\n  uint shift_amount;\n  uint result;\n  \n  shifted_value = fixed_point_value << fractional_bits;\n  shifted_value_signed = (int)(shifted_value * 2 + 0x200000);\n  \n  if (shifted_value < 0xffe00000) {\n    if (shifted_value_signed >= 0) {\n      return 0;\n    }\n    shift_amount = (-shifted_value_signed - 0x3e1) & 0xff;\n    if (shifted_value_signed >= -1040 && shift_amount != 0) {\n      result = (shifted_value | 0x80000000) >> shift_amount;\n      if ((fixed_point_value & 0x80000000) != 0) {\n        result = (uint)(-(int)result);\n      }\n      return result;\n    }\n  }\n  else if ((fixed_point_value | shifted_value_signed << 12) != 0) {\n    return 0;\n  }\n  if ((fixed_point_value & 0x80000000) != 0) {\n    return 0x80000000;\n  }\n  return 0x7fffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ba0",
            "calling": [
                "FUN_0800adf0",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_08003004",
                "FUN_080095b8",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_0800a5a0"
            ],
            "imported": true,
            "current_name": "convert_fixed_point_to_int_08008ba0"
        },
        "FUN_08005a5c": {
            "renaming": {
                "FUN_08005a5c": "do_nothing_08005a5c"
            },
            "code": "\nvoid do_nothing_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a5c",
            "calling": [
                "FUN_080059f8"
            ],
            "imported": true,
            "current_name": "do_nothing_08005a5c"
        },
        "FUN_08005984": {
            "renaming": {
                "uVar1": "is_interrupt_handled",
                "FUN_08005984": "handle_interrupt_if_not_handled_08005984",
                "param_1": "interrupt_type"
            },
            "code": "int handle_interrupt_if_not_handled_08005984(int interrupt_type) {\n  int is_interrupt_handled = *(int *)PTR_DAT_080059b0;\n  if (is_interrupt_handled == 0) {\n    is_interrupt_handled = trigger_software_interrupt_0800597c(1, interrupt_type, 0);\n  }\n  else {\n    is_interrupt_handled = 0;\n  }\n  return is_interrupt_handled;\n}",
            "called": [
                "FUN_0800597c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005984",
            "calling": [
                "FUN_08007540"
            ],
            "imported": true,
            "current_name": "handle_interrupt_if_not_handled_08005984"
        },
        "FUN_08007a10": {
            "renaming": {
                "DAT_08007a64": "flags_ptr",
                "param_1": "flag_value",
                "FUN_08007a10": "update_flags_08007a10"
            },
            "code": "void update_flags_08007a10(int flag_value) {\n  uint* DAT_08007a64 = (uint*)(DAT_08007a64 + 0x40);\n  if (flag_value == 0x40000000) {\n    *DAT_08007a64 |= 1;\n  }\n  else if (flag_value == DAT_08007a68) {\n    *DAT_08007a64 |= 2;\n  }\n  else if (flag_value == DAT_08007a6c) {\n    *DAT_08007a64 |= 4;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007a10",
            "calling": [
                "FUN_08007ad0",
                "FUN_08007d08"
            ],
            "imported": true,
            "current_name": "update_flags_08007a10"
        },
        "FUN_0800856c": {
            "renaming": {
                "uVar1": "mask",
                "iVar4": "count",
                "param_1": "input",
                "PTR_": "PTR_",
                "FUN_0800856c": "calculate_shifted_value_0800856c",
                "DAT_": "DAT_",
                "uVar3": "shift_amount",
                "uVar2": "abs_input",
                "bVar9": "shift_amount_overflow",
                "uVar5": "shift_amount_inv",
                "uVar6": "sign_mask",
                "bVar8": "shift_amount_is_zero",
                "in_r12": "unused_variable",
                "bVar7": "is_negative"
            },
            "code": "ulonglong calculate_shifted_value_0800856c(uint number)\n{\n  uint mask = 0x80000000;\n  int count = 0;\n  while ((number & mask) == 0 && mask != 0) {\n    mask >>= 1;\n    count++;\n  }\n  return count;\n}\n\n\nulonglong calculate_shifted_value_0800856c(uint input)\n{\n  uint sign_mask, abs_input, shift_amount, shift_amount_inv, shift_amount_inv_masked, shift_amount_masked, output = 0;\n  bool is_negative;\n\n  if (input == 0) {\n    return 0;\n  }\n\n  sign_mask = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_mask < 0) {\n    abs_input = -input;\n    is_negative = true;\n  } else {\n    is_negative = false;\n  }\n\n  shift_amount = calculate_shifted_value_0800856c(abs_input) + 0x15;\n  shift_amount_inv = 0x20 - shift_amount;\n  shift_amount_masked = shift_amount & 0xff;\n  shift_amount_inv_masked = shift_amount_inv & 0xff;\n\n  if (shift_amount < 0x20) {\n    output = abs_input << shift_amount_masked;\n    output |= abs_input >> ((0xcU - shift_amount_masked) & 0xff);\n  } else if (shift_amount == 0x20) {\n    output = abs_input;\n  } else {\n    output = abs_input << shift_amount_inv_masked;\n    output |= 0U >> (shift_amount_masked & 0xff);\n    output |= 0 << shift_amount_inv_masked;\n  }\n\n  if (shift_amount < 0x433) {\n    return ((ulonglong)(output | sign_mask) << 0x20) | 0;\n  }\n\n  shift_amount_inv = ~(0x432 - shift_amount);\n  if (shift_amount_inv > 0x1e) {\n    return ((ulonglong)input << 0x20) | (output >> ((shift_amount_inv - 0x1f) & 0xff)) & 0x80000000ffffffff;\n  }\n\n  shift_amount_inv = shift_amount_inv - 0x13;\n  if (shift_amount_inv == 0 || (shift_amount_inv < 0) != ((shift_amount_inv - 0x1f) < 0xc)) {\n    shift_amount_inv_masked = shift_amount_inv & 0xff;\n    output = (output >> shift_amount_inv_masked) | ((ulonglong)(input | sign_mask) << (0x20 - shift_amount_inv_masked));\n  } else {\n    shift_amount_inv_masked = (0xcU - shift_amount_inv) & 0xff;\n    output = ((ulonglong)input << shift_amount_inv_masked) | (output >> (0xcU - shift_amount_inv_masked));\n  }\n\n  return output & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800856c",
            "calling": [
                "FUN_08002c18",
                "FUN_08009d78",
                "FUN_0800a5a0"
            ],
            "imported": true,
            "current_name": "calculate_shifted_value_0800856c"
        },
        "FUN_08008b00": {
            "renaming": {
                "param_1": "input_value",
                "FUN_08008b00": "check_input_and_return_08008b00_08008b00"
            },
            "code": "undefined4 check_input_and_return_08008b00_08008b00(undefined4 input_value)\n{\n  check_input_08008a74();\n  return input_value;\n}",
            "called": [
                "FUN_08008a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b00",
            "calling": [
                "FUN_08008b10",
                "FUN_08008b24",
                "FUN_08008af0"
            ],
            "imported": true,
            "current_name": "check_input_and_return_08008b00_08008b00"
        },
        "FUN_0800585c": {
            "renaming": {
                "process_data_08005790": "process_data",
                "FUN_0800585c": "check_and_process_data_0800585c",
                "PTR_DAT_08005878": "status_flag"
            },
            "code": "void check_and_process_data_0800585c(void)\n{\n  if (PTR_DAT_08005878[1] == 2) {\n    PTR_DAT_08005878[1] = 3;\n    process_data();\n  }\n  return;\n}",
            "called": [
                "FUN_08005790"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800585c",
            "calling": [
                "FUN_08003a74",
                "FUN_080024c4",
                "FUN_08001e98"
            ],
            "imported": true,
            "current_name": "check_and_process_data_0800585c"
        },
        "FUN_0800597c": {
            "renaming": {
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)",
                "FUN_0800597c": "trigger_software_interrupt_0800597c"
            },
            "code": "void trigger_software_interrupt_0800597c(void)\n{\n  software_interrupt(SYSTEM_CALL);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800597c",
            "calling": [
                "FUN_08005984"
            ],
            "imported": true,
            "current_name": "trigger_software_interrupt_0800597c"
        },
        "FUN_08009798": {
            "renaming": {
                "FUN_08009798": "calculate_value_08009798",
                "lVar3": "result",
                "uVar1": "exponent",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar2": "shift_amount"
            },
            "code": "long long calculate_value_08009798(uint value1, uint value2, undefined4 param_3, undefined4 param_4)\n{\n  uint shift_amount = (value2 << 1) >> 0x15;\n  uint exponent = shift_amount - 0x3ff;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      return ((unsigned long long)value2 & 0x80000000) << 0x20;\n    }\n    long long result = (unsigned long long)(value2 & ~(DAT_08009814 >> (exponent & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)exponent < 0x34) {\n      return CONCAT44(value2, value1 & ~(0xffffffffU >> (shift_amount - 0x413 & 0xff)));\n    }\n    if (exponent != 0x400) {\n      return CONCAT44(value2, value1);\n    }\n    long long result = FUNC_080082d4(value1, value2, value1, value2, param_4);\n  }\n  return result;\n}",
            "called": [
                "FUN_080082d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009798",
            "calling": [
                "FUN_08004e30",
                "FUN_080005b4",
                "FUN_08003b98"
            ],
            "imported": true,
            "current_name": "calculate_value_08009798"
        },
        "FUN_08008cd8": {
            "renaming": {
                "FUN_08008cd8": "FUNC_08008cd8"
            },
            "code": "\nuint FUNC_08008cd8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08008e12:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if (uVar5 - 1 == 0 || uVar4 < 0x800000) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08008e12;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008cd8",
            "calling": [
                "FUN_080028bc",
                "FUN_08002978",
                "FUN_08001f00",
                "FUN_08003004",
                "FUN_080005b4",
                "FUN_08002408",
                "FUN_08004940",
                "FUN_08002908"
            ],
            "imported": false,
            "current_name": "FUNC_08008cd8"
        },
        "FUN_08007930": {
            "renaming": {
                "FUN_08007930": "update_device_status_08007930",
                "PTR_DAT_080079b8": "data_ptr",
                "iVar5": "index",
                "puVar1": "data_ptr",
                "uVar3": "sum_of_four_values",
                "uVar2": "bitfield_value",
                "uVar4": "previous_data_value",
                "PTR_DAT_080079bc": "condition_ptr"
            },
            "code": "void update_device_status_08007930(void)\n{\n  uint32_t *PTR_DAT_080079b8;\n  uint32_t bitfield_value;\n  uint32_t sum_of_four_values;\n  uint32_t previous_data_value;\n  uint32_t changed_bits;\n  uint32_t unchanged_bits;\n  int index;\n  \n  PTR_DAT_080079b8 = PTR_DAT_080079b8;\n  if (*(int *)PTR_DAT_080079bc != 0) {\n    index = *(int *)(PTR_DAT_080079b8 + 0x14);\n    bitfield_value = get_bitfield_value();\n    *(uint32_t *)(PTR_DAT_080079b8 + index * 4) = bitfield_value;\n    if (*(int *)(PTR_DAT_080079b8 + 0x14) == 3) {\n      index = 0;\n    }\n    else {\n      index = *(int *)(PTR_DAT_080079b8 + 0x14) + 1;\n    }\n    *(int *)(PTR_DAT_080079b8 + 0x14) = index;\n    sum_of_four_values = calculate_sum_of_four_values();\n    previous_data_value = *(uint32_t *)(PTR_DAT_080079b8 + 0x10);\n    changed_bits = ~previous_data_value & sum_of_four_values;\n    unchanged_bits = ~sum_of_four_values & previous_data_value;\n    if (changed_bits != 0) {\n      update_device_status_08007930_if_needed(changed_bits);\n    }\n    if (unchanged_bits != 0) {\n      set_odd_bits_in_short_array(unchanged_bits);\n    }\n    *(uint32_t *)(PTR_DAT_080079b8 + 0x10) = sum_of_four_values;\n  }\n  return;\n}",
            "called": [
                "FUN_080074c8",
                "FUN_080078f4",
                "FUN_08007520",
                "FUN_08007884"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007930",
            "calling": [
                "FUN_08007756"
            ],
            "imported": true,
            "current_name": "update_device_status_08007930"
        },
        "FUN_080082ba": {
            "renaming": {
                "FUN_080082ba": "do_nothing_080082ba"
            },
            "code": "\nvoid do_nothing_080082ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080082ba",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": true,
            "current_name": "do_nothing_080082ba"
        },
        "FUN_08000188": {
            "renaming": {
                "PTR_DAT_080001a0": "hasRunBefore",
                "FUN_08000188": "isFirstRun_08000188",
                "param_1": "hasRunBefore",
                "PTR_FUN_080001a8": "functionToRun",
                "DAT_080001a4": "hasFunctionToRun"
            },
            "code": "bool isFirstRun_08000188(bool *PTR_DAT_080001a0) {\n  if (*PTR_DAT_080001a0 == false) {\n    if (DAT_080001a4()) {\n      return true;\n    }\n    *PTR_DAT_080001a0 = true;\n  }\n  return false;\n}",
            "called": [
                "FUN_0800b5b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [],
            "imported": true,
            "current_name": "isFirstRun_08000188"
        },
        "FUN_080082d0": {
            "renaming": {
                "FUN_080082d0": "FUNC_080082d0"
            },
            "code": "\nulonglong FUNC_080082d0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if (uVar9 - 1 != 0 && 0xfffff < uVar11) goto LAB_080083e0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08008458:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080082d0",
            "calling": [
                "FUN_0800adf0",
                "FUN_08001f00",
                "FUN_08009990",
                "FUN_08009d78",
                "FUN_08009b24",
                "FUN_0800a5a0",
                "FUN_08004940",
                "FUN_080096e8",
                "FUN_08003004",
                "FUN_0800a348",
                "FUN_08009410",
                "FUN_0800af78",
                "FUN_0800a1bc"
            ],
            "imported": false,
            "current_name": "FUNC_080082d0"
        },
        "FUN_08009318": {
            "renaming": {
                "lVar6": "output",
                "bVar4": "carry_flag",
                "iVar1": "difference",
                "param_1": "input_1",
                "FUN_08009318": "calculate_result_08009318",
                "param_2": "input_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar3": "mask",
                "uVar2": "shifted_input_2",
                "uVar5": "result"
            },
            "code": "longlong calculate_result_08009318(uint input_1, uint input_2, undefined4 param_3, undefined4 param_4)\n{\n  int difference;\n  uint shifted_input_2;\n  uint mask;\n  bool carry_flag;\n  undefined8 result;\n  longlong output;\n  shifted_input_2 = (input_2 << 1) >> 0x15;\n  difference = shifted_input_2 - 0x3ff;\n  if (difference < 0x14) {\n    if (difference < 0) {\n      result = FUNC_080082d4(input_1, input_2, DAT_08009400, DAT_08009404, param_4);\n      if (is_input_valid_08008b60((int)result, (int)((ulonglong)result >> 0x20), 0, 0) != 0) {\n        if ((int)input_2 < 0) {\n          output = -0x8000000000000000;\n        }\n        else {\n          input_1 = input_1 | input_2;\n          output = CONCAT44(input_1, input_1);\n          if (input_1 != 0) {\n            output = (ulonglong)DAT_0800940c << 0x20;\n          }\n        }\n      }\n    }\n    else {\n      mask = DAT_08009408 >> (difference & 0xff);\n      if ((input_2 & mask | input_1) != 0) {\n        result = FUNC_080082d4(input_1, input_2, DAT_08009400, DAT_08009404, param_4);\n        if (is_input_valid_08008b60((int)result, (int)((ulonglong)result >> 0x20), 0, 0) != 0) {\n          if (0 < (int)input_2) {\n            input_2 = input_2 + (0x100000 >> (difference & 0xff));\n          }\n          output = (ulonglong)(input_2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if (difference < 0x34) {\n    mask = 0xffffffff >> (shifted_input_2 - 0x413 & 0xff);\n    if ((mask & input_1) != 0) {\n      result = FUNC_080082d4(input_1, input_2, DAT_08009400, DAT_08009404, param_4);\n      if (is_input_valid_08008b60((int)result, (int)((ulonglong)result >> 0x20), 0, 0) != 0) {\n        if (0 < (int)input_2) {\n          if (difference == 0x14) {\n            input_2 = input_2 + 1;\n          }\n          else {\n            mask = 1 << (0x34 - difference & 0xff);\n            carry_flag = CARRY4(mask, input_1);\n            input_1 = mask + input_1;\n            if (carry_flag != false) {\n              input_2 = input_2 + 1;\n            }\n          }\n        }\n        output = CONCAT44(input_2, input_1 & ~mask);\n      }\n    }\n  }\n  else {\n    if (difference == 0x400) {\n      output = FUNC_080082d4();\n    }\n    else {\n      output = CONCAT44(input_2, input_1);\n    }\n  }\n  return output;\n}",
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009318",
            "calling": [
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_08003004"
            ],
            "imported": true,
            "current_name": "calculate_result_08009318"
        },
        "FUN_080018cc": {
            "renaming": {
                "param_1": "new_param",
                "FUN_080018cc": "update_param_080018cc",
                "DAT_080018f8": "dat_ptr",
                "PTR_": "ptr_"
            },
            "code": "void update_param_080018cc(uint new_param)\n{\n  uint* PTR_dat_080018f8 = (uint*)DAT_080018f8;\n  uint* PTR_param = &PTR_dat_080018f8[0x14];\n  uint mask = 0xfffffaaf;\n  *PTR_param = new_param | (*PTR_param & mask);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018cc",
            "calling": [
                "FUN_08001994"
            ],
            "imported": true,
            "current_name": "update_param_080018cc"
        },
        "FUN_080079e0": {
            "renaming": {
                "param_1": "bit_index",
                "FUN_080079e0": "set_bit_in_array_080079e0",
                "DAT_08007a0c": "array_start_ptr"
            },
            "code": "void set_bit_in_array_080079e0(uint8_t bit_index){\n    uint32_t* array_ptr = (uint32_t*)(DAT_08007a0c + (bit_index >> 5) * 4);\n    uint8_t bit_offset = bit_index & 0x1f;\n    *array_ptr = 1 << bit_offset;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080079e0",
            "calling": [
                "FUN_08007a70"
            ],
            "imported": true,
            "current_name": "set_bit_in_array_080079e0"
        },
        "FUN_08006a58": {
            "renaming": {
                "param_1": "index",
                "FUN_08006a58": "set_bit_at_index_08006a58",
                "PTR_DAT_08006a88": "ptr",
                "mask": "mask"
            },
            "code": "void set_bit_at_index_08006a58(uint8_t index){\n    uint32_t* PTR_DAT_08006a88 = (uint32_t*)(DAT_08006a88 + (((uint32_t)index >> 5) + 0x40) * 4);\n    uint32_t mask = 1 << (index & 0x1f);\n    *PTR_DAT_08006a88 = mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a58",
            "calling": [
                "FUN_08006dc4"
            ],
            "imported": true,
            "current_name": "set_bit_at_index_08006a58"
        },
        "FUN_08005a84": {
            "renaming": {
                "PTR_DAT_08005a94": "pointer_to_value",
                "FUN_08005a84": "get_value_from_pointer_08005a84"
            },
            "code": "get_value_from_pointer_08005a84() {\n  return *(undefined4 *)PTR_DAT_08005a94;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a84",
            "calling": [
                "FUN_0800618c",
                "FUN_08000268",
                "FUN_08005a98",
                "FUN_08005cec",
                "FUN_08007756"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_08005a84"
        },
        "FUN_08008b10": {
            "renaming": {
                "in_ZR": "input_char",
                "FUN_08008b10": "check_input_and_return_08008b10"
            },
            "code": "bool check_input_and_return_08008b10() {\\n  char input_char;\\n  check_input_and_return_08008b10_08008b00_08008b00();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b10",
            "calling": [
                "FUN_08009d78",
                "FUN_0800a5a0"
            ],
            "imported": true,
            "current_name": "check_input_and_return_08008b10"
        },
        "FUN_08004e30": {
            "renaming": {
                "FUN_08004e30": "FUNC_08004e30"
            },
            "code": "\nundefined4 FUNC_08004e30(int param_1,uint param_2)\n\n{\n  undefined uVar1;\n  undefined2 uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  undefined8 uVar5;\n  \n  switch(param_1) {\n  case 0:\n  case 1:\n  case 2:\n    iVar4 = check_results_are_valid_0800923c(param_2,0);\n    if (iVar4 != 0) {\n      return 8;\n    }\n    *(uint *)(PTR_DAT_080051a8 + param_1 * 4) = param_2;\n    break;\n  case 3:\n    iVar4 = is_input_empty_08009228(param_2,DAT_080051ac);\n    if (iVar4 != 0) {\n      return 9;\n    }\n    uVar5 = reverse_and_improve_08008590(param_2);\n    uVar5 = calculate_double_precision_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar1 = calculate_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    PTR_DAT_080051a8[0xd] = uVar1;\n    break;\n  case 4:\n    *(uint *)(PTR_DAT_080051a8 + 0x10) = param_2;\n    break;\n  case 5:\n    *(uint *)(PTR_DAT_080051a8 + 0x14) = param_2;\n    break;\n  case 6:\n    uVar5 = reverse_and_improve_08008590(param_2);\n    uVar5 = calculate_value_08009798((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar2 = calculate_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x18) = uVar2;\n    break;\n  case 7:\n    uVar5 = reverse_and_improve_08008590(param_2);\n    uVar5 = calculate_double_precision_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar1 = calculate_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    PTR_DAT_080051a8[0x3c] = uVar1;\n    break;\n  case 8:\n    uVar3 = FUNC_08008eec(param_2,DAT_080051b0);\n    uVar3 = FUNC_08008eec(uVar3,DAT_080051b0);\n    *(undefined4 *)(PTR_DAT_080051a8 + 0x20) = uVar3;\n    break;\n  case 9:\n    *(uint *)(PTR_DAT_080051a8 + 0x24) = param_2 & 0x7fffffff;\n    break;\n  case 10:\n    *(uint *)(PTR_DAT_080051a8 + 0x1c) = param_2;\n    break;\n  case 0xb:\n    uVar5 = reverse_and_improve_08008590(param_2);\n    uVar5 = calculate_double_precision_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar1 = calculate_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    PTR_DAT_080051a8[0x3e] = uVar1;\n    break;\n  case 0xc:\n    uVar5 = reverse_and_improve_08008590(param_2);\n    uVar5 = calculate_double_precision_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar1 = calculate_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    PTR_DAT_080051a8[0x3d] = uVar1;\n    break;\n  case 0xd:\n    iVar4 = check_if_results_calculated_and_concatenated_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 1;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfe;\n    }\n    break;\n  case 0xe:\n    iVar4 = check_if_results_calculated_and_concatenated_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 2;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfd;\n    }\n    break;\n  case 0xf:\n    iVar4 = check_if_results_calculated_and_concatenated_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 4;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfb;\n    }\n    break;\n  case 0x10:\n    iVar4 = check_if_results_calculated_and_concatenated_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 8;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xf7;\n    }\n    check_flag_status_0800192c();\n    break;\n  case 0x11:\n    iVar4 = check_if_results_calculated_and_concatenated_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 0x10;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xef;\n    }\n    break;\n  case 0x12:\n    uVar5 = reverse_and_improve_08008590(param_2);\n    uVar5 = calculate_value_08009798((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar2 = calculate_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x2a) = uVar2;\n    break;\n  case 0x13:\n    *(uint *)(PTR_DAT_080051a8 + 0x2c) = param_2;\n    break;\n  case 0x14:\n    *(uint *)(PTR_DAT_080051a8 + 0x30) = param_2;\n    break;\n  case 0x15:\n    uVar5 = reverse_and_improve_08008590(param_2);\n    uVar5 = calculate_double_precision_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar2 = calculate_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x34) = uVar2;\n    break;\n  case 0x16:\n    *(uint *)(PTR_DAT_080051a8 + 0x38) = param_2;\n    break;\n  case 0x17:\n    uVar5 = reverse_and_improve_08008590(param_2);\n    uVar5 = calculate_value_08009798((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar2 = calculate_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x1a) = uVar2;\n    break;\n  default:\n    return 6;\n  }\n  initialize_data_storage_08004c2a();\n  return 0;\n}\n\n",
            "called": [
                "FUN_08009214",
                "FUN_08008590",
                "FUN_08009228",
                "FUN_08004c2a",
                "FUN_0800192c",
                "FUN_08009654",
                "FUN_0800923c",
                "FUN_08008bf0",
                "FUN_08009798",
                "FUN_08008eec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004e30",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "FUNC_08004e30"
        },
        "FUN_08008c30": {
            "renaming": {
                "bVar4": "is_shifted_bits_zero",
                "uVar1": "result",
                "param_1": "float_bits",
                "param_2": "shift_amount",
                "FUN_08008c30": "calculate_float_bits_08008c30",
                "uVar3": "shifted_bits_plus",
                "uVar2": "shifted_bits",
                "bVar5": "is_shifted_bits_less",
                "in_r12": "shifted_bits_minus"
            },
            "code": "uint calculate_float_bits_08008c30(uint float_bits, uint shift_amount)\n{\n  uint shifted_bits, shifted_bits_plus, shifted_bits_minus;\n  bool is_shifted_bits_less;\n  bool is_shifted_bits_zero;\n  \n  shifted_bits = shift_amount * 2;\n  is_shifted_bits_less = shifted_bits < 0x70000000;\n  shifted_bits_plus = shifted_bits + 0x90000000;\n  shifted_bits_minus = shifted_bits_plus;\n  if (!is_shifted_bits_less) {\n    shifted_bits_minus = shifted_bits + 0x8fe00000;\n  }\n  is_shifted_bits_zero = shifted_bits_minus == 0;\n  if (!is_shifted_bits_less && shifted_bits_plus >= 0x200000) {\n    is_shifted_bits_zero = shifted_bits_minus == 0x1fc00000;\n  }\n  if (((is_shifted_bits_less || shifted_bits_plus < 0x200000) || 0x1fc00000 < shifted_bits_minus) || is_shifted_bits_zero) {\n    if ((shift_amount & 0x40000000) != 0) {\n      if (((int)shifted_bits >> 0x15 == -1) && ((float_bits | shift_amount << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return shift_amount & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(shifted_bits_plus + 0x92e00000) < 0 != SCARRY4(shifted_bits_minus,0x2e00000)) {\n      return shift_amount & 0x80000000;\n    }\n    shifted_bits = 0x18 - (shifted_bits_plus + 0x92e00000 >> 0x15);\n    float_bits = float_bits >> (shifted_bits & 0xff);\n    if (float_bits << (0x20 - shifted_bits & 0xff) != 0) {\n      float_bits = float_bits | 1;\n    }\n    shifted_bits_minus = shift_amount & 0x1fffff | 0x100000;\n    float_bits = float_bits | shifted_bits_minus << (0x20 - shifted_bits & 0xff);\n    shifted_bits_minus = (shifted_bits_minus >> (shifted_bits & 0xff)) << 1;\n  }\n  shifted_bits_plus = (shift_amount & 0x80000000 | float_bits >> 0x1d) + shifted_bits_minus * 4 + (uint)(0x7fffffff < float_bits * 8);\n  if (float_bits * 8 == 0x80000000) {\n    shifted_bits_plus = shifted_bits_plus & 0xfffffffe;\n  }\n  return shifted_bits_plus;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c30",
            "calling": [
                "FUN_080046d0",
                "FUN_08001994",
                "FUN_08002978",
                "FUN_08001f00",
                "FUN_08003004",
                "FUN_080005b4",
                "FUN_08002638",
                "FUN_08004940",
                "FUN_080044e8",
                "FUN_0800056c"
            ],
            "imported": true,
            "current_name": "calculate_float_bits_08008c30"
        },
        "FUN_080082d4": {
            "renaming": {
                "FUN_080082d4": "FUNC_080082d4"
            },
            "code": "\nulonglong FUNC_080082d4(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if (uVar7 - 1 != 0 && 0xfffff < uVar10) goto LAB_080083e0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08008458:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080082d4",
            "calling": [
                "FUN_0800adf0",
                "FUN_080094c0",
                "FUN_08001f00",
                "FUN_08009990",
                "FUN_08009654",
                "FUN_08009d78",
                "FUN_08009b24",
                "FUN_0800a5a0",
                "FUN_0800b2e8",
                "FUN_08009798",
                "FUN_08009318",
                "FUN_0800a348",
                "FUN_0800af78",
                "FUN_0800a1bc"
            ],
            "imported": false,
            "current_name": "FUNC_080082d4"
        },
        "FUN_08007bf0": {
            "renaming": {
                "param_1": "new_data",
                "_DAT_40000024": "smallest_data",
                "FUN_08007bf0": "update_data_08007bf0",
                "_DAT_4000002c": "latest_data"
            },
            "code": "void update_data_08007bf0(uint32_t new_data) {\n  if (new_data <= _DAT_40000024) {\n    _DAT_40000024 = new_data;\n  }\n  _DAT_4000002c = new_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007bf0",
            "calling": [
                "FUN_08005324"
            ],
            "imported": true,
            "current_name": "update_data_08007bf0"
        },
        "FUN_08008590": {
            "renaming": {
                "bVar10": "check_3",
                "uVar1": "temp_1",
                "iVar6": "temp_6",
                "param_1": "input_number",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_08008590": "reverse_and_improve_08008590",
                "uVar3": "temp_3",
                "uVar2": "temp_2",
                "bVar9": "check_2",
                "uVar5": "temp_5",
                "uVar4": "temp_4",
                "uVar7": "temp_7",
                "in_r12": "temp_8",
                "bVar8": "check_1"
            },
            "code": "ulonglong reverse_and_improve_08008590(uint input_number, undefined4 param_2, undefined4 param_3, uint param_4) {\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  int temp_6;\n  uint temp_7;\n  uint temp_8;\n  uint temp_9;\n  bool check_1;\n  bool check_2;\n  bool check_3;\n  \n  temp_5 = input_number << 1;\n  check_1 = temp_5 == 0;\n  temp_1 = (uint)((input_number & 0x80000000) != 0) << 0x1f;\n  temp_4 = (uint)((int)temp_5 >> 3) >> 1;\n  temp_3 = temp_1 | temp_4;\n  input_number = input_number << 0x1d;\n  if (!check_1) {\n    param_4 = temp_5 & 0xff000000;\n    check_1 = param_4 == 0;\n  }\n  if (!check_1) {\n    check_1 = param_4 == 0xff000000;\n  }\n  if (!check_1) {\n    return CONCAT44(temp_3, input_number) ^ 0x3800000000000000;\n  }\n  if ((temp_5 & 0xffffff) == 0) {\n    return CONCAT44(temp_3, input_number);\n  }\n  if (param_4 == 0xff000000) {\n    return CONCAT44(temp_3, input_number) | 0x8000000000000;\n  }\n  temp_2 = input_number;\n  temp_5 = temp_4;\n  if (temp_4 == 0) {\n    temp_2 = 0;\n    temp_5 = input_number;\n  }\n  temp_6 = count_leading_zeroes(temp_5);\n  if (temp_4 == 0) {\n    temp_6 = temp_6 + 0x20;\n  }\n  temp_7 = temp_6 - 0xb;\n  check_3 = SBORROW4(temp_7, 0x20);\n  temp_4 = temp_6 - 0x2b;\n  check_2 = (int)temp_4 < 0;\n  check_1 = temp_4 == 0;\n  if ((int)temp_7 < 0x20) {\n    check_3 = SCARRY4(temp_4, 0xc);\n    temp_6 = temp_6 + -0x1f;\n    check_2 = temp_6 < 0;\n    check_1 = temp_6 == 0;\n    temp_4 = temp_7;\n    if (!check_1 && check_2 == check_3) {\n      temp_2 = temp_5 << (temp_7 & 0xff);\n      temp_5 = temp_5 >> (0xcU - temp_6 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (check_1 || check_2 != check_3) {\n    temp_8 = 0x20 - temp_4;\n  }\n  temp_5 = temp_5 << (temp_4 & 0xff);\n  if (check_1 || check_2 != check_3) {\n    temp_5 = temp_5 | temp_2 >> (temp_8 & 0xff);\n  }\n  if (check_1 || check_2 != check_3) {\n    temp_2 = temp_2 << (temp_4 & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp_7 < 0x381) {\n    return CONCAT44(temp_5 + (0x380 - temp_7) * 0x100000 | temp_1, temp_2);\n  }\n  temp_4 = ~(0x380 - temp_7);\n  if (0x1e < (int)temp_4) {\n    return CONCAT44(temp_3, temp_5 >> (temp_4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  temp_6 = temp_4 - 0x13;\n  if (temp_6 == 0 || temp_6 < 0 != SCARRY4(temp_4 - 0x1f, 0xc)) {\n    temp_4 = temp_4 + 1;\n    return CONCAT44(temp_1 | temp_5 >> (temp_4 & 0xff),\n                    temp_2 >> (temp_4 & 0xff) | temp_5 << (0x20 - temp_4 & 0xff));\n  }\n  return CONCAT44(temp_3, temp_2 >> (0x20 - (0xcU - temp_6) & 0xff) | temp_5 << (0xcU - temp_6 & 0xff)) &\n         0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008590",
            "calling": [
                "FUN_08002978",
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08001994",
                "FUN_08004e30",
                "FUN_08002c18",
                "FUN_08003004",
                "FUN_08002638",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_0800056c"
            ],
            "imported": true,
            "current_name": "reverse_and_improve_08008590"
        },
        "FUN_08007ad0": {
            "renaming": {
                "_DAT_40000028": "array_value",
                "_DAT_40000000": "memory_address",
                "DAT_08007b6c": "array_size",
                "PTR_DAT_08007b68": "array_pointer",
                "set_byte_in_memory_and_set_bit_in_array_08007a70": "set_byte_and_bit_in_memory",
                "FUN_08007ad0": "reset_memory_and_flags_08007ad0"
            },
            "code": "void reset_memory_and_flags_08007ad0(void)\n{\n  update_flags(0x40000000);\n  uint32_t* _DAT_40000000 = (uint32_t*)0x40000000;\n  for (int i = 0; i < 10; i++) {\n    *(_DAT_40000000 + i) = 0;\n  }\n  uint32_t _DAT_40000028 = (uint32_t)((uint64_t)DAT_08007b6c * (uint64_t)*PTR_DAT_08007b68 >> 0x38) - 1;\n  *(_DAT_40000000 + 10) = _DAT_40000028;\n  for (int i = 12; i < 18; i++) {\n    *(_DAT_40000000 + i) = 0;\n  }\n  set_byte_and_bit_in_memory(0x40000000, 0, 0);\n  return;\n}",
            "called": [
                "FUN_08007a10",
                "FUN_08007a70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ad0",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": true,
            "current_name": "reset_memory_and_flags_08007ad0"
        },
        "FUN_080005b4": {
            "renaming": {
                "FUN_080005b4": "FUNC_080005b4"
            },
            "code": "\nuint FUNC_080005b4(undefined4 param_1)\n\n{\n  undefined *puVar1;\n  undefined uVar2;\n  int iVar3;\n  undefined4 uVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  undefined8 uVar7;\n  undefined4 local_94 [4];\n  undefined4 local_84;\n  undefined4 local_80;\n  undefined4 local_7c;\n  undefined4 uStack_78;\n  undefined4 uStack_74;\n  undefined4 auStack_70 [6];\n  undefined4 local_58;\n  byte local_52;\n  undefined local_51 [20];\n  byte local_3d;\n  byte local_3c;\n  byte local_3b;\n  byte local_3a;\n  char local_39;\n  undefined4 local_38;\n  undefined4 local_34;\n  sbyte local_2f;\n  char local_2e;\n  char local_2d;\n  undefined4 local_2c;\n  byte local_27;\n  ushort local_26;\n  uint local_24;\n  \n  if (PTR_DAT_08000808[1] == '\\x06') {\n    uVar5 = 0xc;\n  }\n  else {\n    local_51[0] = 0;\n    local_26 = 0;\n    local_27 = 0;\n    local_2c = DAT_0800080c;\n    local_2d = '\\0';\n    local_2e = '\\0';\n    fill_buffer_with_value_0800b430(auStack_70 + 3,0,0xc);\n    fill_buffer_with_value_0800b430(auStack_70,0,0xc);\n    *PTR_DAT_08000810 = 0;\n    local_2f = 0;\n    while (iVar3 = check_string_and_parse_integer_0800184c(&local_52,auStack_70 + 6,param_1,local_51), iVar3 != 0) {\n      uVar7 = reverse_and_improve_08008590(local_58);\n      uVar7 = calculate_value_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n      local_24 = convert_fixed_point_to_int_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n      if (local_52 == 0x47) {\n        switch(local_24) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          local_2f = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          local_2f = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          local_2f = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          local_2f = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          local_2f = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          local_2f = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          local_2f = 6;\n        }\n        switch(local_24) {\n        case 0:\n          PTR_DAT_08000ca0[1] = 0;\n          break;\n        case 1:\n          PTR_DAT_08000ca0[1] = 1;\n          break;\n        case 2:\n          PTR_DAT_08000ca0[1] = 2;\n          break;\n        case 3:\n          PTR_DAT_08000ca0[1] = 3;\n          break;\n        case 4:\n          local_2e = '\\x01';\n          break;\n        default:\n          *PTR_DAT_08000ca0 = 3;\n          break;\n        case 10:\n          local_2e = '\\x02';\n          break;\n        case 0x11:\n          set_params_to_array_08000478(0,1,2);\n          break;\n        case 0x12:\n          set_params_to_array_08000478(2,0,1);\n          break;\n        case 0x13:\n          set_params_to_array_08000478(1,2,0);\n          break;\n        case 0x14:\n          PTR_DAT_08000ca0[3] = 1;\n          break;\n        case 0x15:\n          PTR_DAT_08000ca0[3] = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          uVar4 = FUNC_08008eec(local_58,DAT_08000ca4);\n          uVar7 = reverse_and_improve_08008590(uVar4);\n          uVar7 = calculate_value_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_24 = convert_fixed_point_to_int_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          switch(local_24) {\n          case 0x118:\n            local_2e = '\\x03';\n            break;\n          case 0x119:\n            local_2e = '\\x04';\n            break;\n          default:\n            *PTR_DAT_08000ca0 = 3;\n            break;\n          case 300:\n            local_2e = '\\x05';\n            break;\n          case 0x12d:\n            local_2e = '\\x06';\n          }\n          break;\n        case 0x35:\n          local_2d = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          PTR_DAT_08000ca0[0x1c] = (char)local_24 + -0x36;\n          break;\n        case 0x50:\n          PTR_DAT_08000ca0[1] = 4;\n          break;\n        case 0x5a:\n          PTR_DAT_08000ca0[4] = 1;\n          break;\n        case 0x5b:\n          PTR_DAT_08000ca0[4] = 0;\n          break;\n        case 0x5c:\n          uVar4 = FUNC_08008eec(local_58,DAT_08000ca4);\n          uVar7 = reverse_and_improve_08008590(uVar4);\n          uVar7 = calculate_value_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_24 = convert_fixed_point_to_int_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          if (local_24 == 0x398) {\n            local_2e = '\\a';\n          }\n          else if (local_24 == 0x399) {\n            local_2e = '\\b';\n          }\n          else {\n            *PTR_DAT_08000ca0 = 3;\n          }\n          break;\n        case 0x5d:\n          PTR_DAT_08000ca0[2] = 1;\n          break;\n        case 0x5e:\n          PTR_DAT_08000ca0[2] = 0;\n        }\n      }\n      else if (local_52 == 0x4d) {\n        if (local_24 == 0x1e) {\nLAB_08000b96:\n          local_2f = 5;\n        }\n        else if ((int)local_24 < 0x1f) {\n          if ((int)local_24 < 3) {\n            if (-1 < (int)local_24) goto LAB_08000b96;\n          }\n          else if (local_24 - 3 < 3) {\n            local_2f = 8;\n          }\n        }\n        switch(local_24) {\n        case 0:\n          PTR_DAT_08000ca0[5] = 1;\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          PTR_DAT_08000ca0[5] = 2;\n          break;\n        case 3:\n          PTR_DAT_08000ca0[6] = 1;\n          break;\n        case 4:\n          PTR_DAT_08000ca0[6] = 0xff;\n          break;\n        case 5:\n          PTR_DAT_08000ca0[6] = 0;\n          break;\n        default:\n          *PTR_DAT_08000ca0 = 3;\n          break;\n        case 7:\n          PTR_DAT_08000ca0[7] = 2;\n          break;\n        case 8:\n          PTR_DAT_08000ca0[7] = 1;\n          break;\n        case 9:\n          PTR_DAT_08000ca0[7] = 0;\n        }\n      }\n      if (local_2f != 0) {\n        if (((int)(uint)local_26 >> local_2f & 1U) == 0) {\n          local_26 = local_26 | (ushort)(1 << local_2f);\n        }\n        else {\n          *PTR_DAT_08000ca0 = 5;\n        }\n        local_2f = 0;\n      }\n    }\n    if (*PTR_DAT_08000ff0 == '\\0') {\n      local_34 = 0;\n      local_38 = 0;\n      local_39 = '\\0';\n      local_51[0] = 0;\nswitchD_08000d18_caseD_47:\n      iVar3 = check_string_and_parse_integer_0800184c(&local_52,auStack_70 + 6,param_1,local_51);\n      if (iVar3 != 0) {\n        switch(local_52) {\n        case 0x46:\n          iVar3 = check_results_are_valid_0800923c(local_58,0);\n          if (iVar3 != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          if (PTR_DAT_08000ff0[2] == '\\0') {\n            uVar4 = calculate_updated_float_value_0800056c(local_58);\n            *(undefined4 *)(PTR_DAT_08000ff0 + 8) = uVar4;\n          }\n          else {\n            local_2c = calculate_updated_float_value_0800056c(local_58);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          *PTR_DAT_08000ff0 = 3;\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          uVar5 = (uint)local_52;\n          uVar4 = calculate_updated_float_value_0800056c(local_58);\n          auStack_70[uVar5 - 0x49] = uVar4;\n          break;\n        case 0x4c:\n          uVar7 = reverse_and_improve_08008590(local_58);\n          uVar7 = calculate_value_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_39 = calculate_08008bf0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          break;\n        case 0x50:\n          local_34 = local_58;\n          break;\n        case 0x52:\n          local_38 = calculate_updated_float_value_0800056c(local_58);\n          break;\n        case 0x53:\n          iVar3 = is_input_empty_08009228(local_58,0);\n          if (iVar3 != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          break;\n        case 0x54:\n          iVar3 = is_input_empty_08009228(local_58,0);\n          if (iVar3 != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          uVar7 = reverse_and_improve_08008590(local_58);\n          uVar7 = calculate_value_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          uVar2 = calculate_08008bf0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          PTR_DAT_08000ff0[0x18] = uVar2;\n          break;\n        case 0x58:\n          auStack_70[3] = calculate_updated_float_value_0800056c(local_58);\n          local_27 = local_27 | 1;\n          break;\n        case 0x59:\n          auStack_70[4] = calculate_updated_float_value_0800056c(local_58);\n          local_27 = local_27 | 2;\n          break;\n        case 0x5a:\n          auStack_70[5] = calculate_updated_float_value_0800056c(local_58);\n          local_27 = local_27 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      if (*PTR_DAT_08000ff0 == '\\0') {\n        if (PTR_DAT_08000ff4[1] != '\\a') {\n          updateData_0800525c((int)(char)PTR_DAT_08000ff0[6]);\n          updateStatusAndPerformAction_08000220(PTR_DAT_08000ff0[7]);\n        }\n        if ((local_26 & 0x200) != 0) {\n          iVar3 = verify_and_fill_buffer_08004d7c(PTR_DAT_08000ff0[0x1c],&local_7c);\n          puVar1 = PTR_DAT_08000ff0;\n          if (iVar3 == 0) {\n            return 10;\n          }\n          *(undefined4 *)(PTR_DAT_08000ff0 + 0x20) = local_7c;\n          *(undefined4 *)(puVar1 + 0x24) = uStack_78;\n          *(undefined4 *)(puVar1 + 0x28) = uStack_74;\n        }\n        switch(local_2e) {\n        case '\\x01':\n          iVar3 = is_input_empty_08009228(local_34,0);\n          if (iVar3 == 0) {\n            if (PTR_DAT_08000ff4[1] != '\\a') {\n              calculate_result_and_update_status_08002408(local_34);\n            }\n          }\n          else {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          break;\n        case '\\x02':\n          uVar7 = reverse_and_improve_08008590(local_34);\n          uVar7 = calculate_value_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_24 = convert_fixed_point_to_int_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          if ((((local_39 == '\\x02') || (local_39 == '\\x14')) && (-1 < (int)local_24)) &&\n             ((int)local_24 < 7)) {\n            if ((local_27 == 0) && (local_39 == '\\x02')) {\n              *PTR_DAT_08000ff0 = 6;\n            }\n            else {\n              if ((int)local_24 < 1) {\n                local_24 = (uint)(byte)PTR_DAT_08001304[0x1c];\n              }\n              else {\n                local_24 = local_24 - 1;\n              }\n              iVar3 = verify_and_fill_buffer_08004d7c(local_24 & 0xff,local_94);\n              if (iVar3 == 0) {\n                return 10;\n              }\n              for (local_3a = 0; local_3a < 3; local_3a = local_3a + 1) {\n                if (((int)(uint)local_27 >> local_3a & 1U) != 0) {\n                  if (local_39 == '\\x14') {\n                    uVar5 = (uint)local_3a;\n                    uVar4 = FUNC_08008cd8(*(undefined4 *)(PTR_DAT_08001304 + (local_3a + 2) * 4 + 4),\n                                         auStack_70[local_3a + 3]);\n                    local_94[uVar5] = uVar4;\n                  }\n                  else {\n                    local_94[local_3a] = auStack_70[local_3a + 3];\n                  }\n                }\n              }\n              writeDataToBufferAtOffset_08004bf4(local_24 & 0xff,local_94);\n              puVar1 = PTR_DAT_08001304;\n              if (local_24 == (byte)PTR_DAT_08001304[0x1c]) {\n                *(undefined4 *)(PTR_DAT_08001304 + 0x20) = local_94[0];\n                *(undefined4 *)(puVar1 + 0x24) = local_94[1];\n                *(undefined4 *)(puVar1 + 0x28) = local_94[2];\n              }\n            }\n          }\n          else {\n            *PTR_DAT_08000ff0 = 3;\n          }\n          local_27 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (local_27 != 0) {\n            for (local_3b = 0; local_3b < 3; local_3b = local_3b + 1) {\n              if (((int)(uint)local_27 >> local_3b & 1U) == 0) {\n                auStack_70[local_3b + 3] =\n                     *(undefined4 *)(PTR_DAT_08001304 + (local_3b + 2) * 4 + 4);\n              }\n              else if (PTR_DAT_08001304[4] == '\\0') {\n                uVar5 = (uint)local_3b;\n                uVar4 = FUNC_08008cdc(auStack_70[local_3b + 3],\n                                     *(undefined4 *)(PTR_DAT_08001304 + (local_3b + 2) * 4 + 4));\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n              else {\n                uVar6 = auStack_70[local_3b + 3];\n                uVar4 = FUNC_08008cdc(*(undefined4 *)(PTR_DAT_08001304 + (local_3b + 8) * 4),\n                                     *(undefined4 *)(PTR_DAT_08001304 + (local_3b + 10) * 4 + 4));\n                uVar5 = (uint)local_3b;\n                uVar4 = FUNC_08008cdc(uVar6,uVar4);\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n            }\n            process_data_if_not_already_processed_08001e98(auStack_70[3],auStack_70[4],auStack_70[5],\n                         *(undefined4 *)(PTR_DAT_08001308 + 0x14),0);\n          }\n          if (local_2e == '\\x05') {\n            iVar3 = verify_and_fill_buffer_08004d7c(7,local_94 + 3);\n            if (iVar3 == 0) {\n              return 10;\n            }\n          }\n          else {\n            iVar3 = verify_and_fill_buffer_08004d7c(6,local_94 + 3);\n            if (iVar3 == 0) {\n              return 10;\n            }\n          }\n          process_data_if_not_already_processed_08001e98(local_94[3],local_84,local_80,*(undefined4 *)(PTR_DAT_08001308 + 0x14),0);\n          puVar1 = PTR_DAT_08001304;\n          *(undefined4 *)(PTR_DAT_08001304 + 0xc) = local_94[3];\n          *(undefined4 *)(puVar1 + 0x10) = local_84;\n          *(undefined4 *)(puVar1 + 0x14) = local_80;\n          local_27 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (local_2e == '\\x06') {\n            writeDataToBufferAtOffset_08004bf4(7,PTR_DAT_0800130c);\n          }\n          else {\n            writeDataToBufferAtOffset_08004bf4(6,PTR_DAT_0800130c);\n          }\n          break;\n        case '\\a':\n          if (local_27 == 0) {\n            *PTR_DAT_08001304 = 6;\n          }\n          else {\n            for (local_3c = 0; local_3c < 3; local_3c = local_3c + 1) {\n              if (((int)(uint)local_27 >> local_3c & 1U) != 0) {\n                uVar4 = FUNC_08008cd8(*(undefined4 *)(PTR_DAT_08001304 + (local_3c + 2) * 4 + 4),\n                                     *(undefined4 *)(PTR_DAT_08001304 + (local_3c + 8) * 4));\n                uVar5 = (uint)local_3c;\n                uVar4 = FUNC_08008cd8(uVar4,auStack_70[local_3c + 3]);\n                *(undefined4 *)(PTR_DAT_08001304 + (uVar5 + 10) * 4 + 4) = uVar4;\n              }\n            }\n          }\n          local_27 = 0;\n          break;\n        case '\\b':\n          fill_buffer_with_value_0800b430(PTR_DAT_08001310,0,0xc);\n        }\n        if (((local_26 & 4) != 0) || (local_27 != 0)) {\n          if ((PTR_DAT_08001574[2] != '\\0') &&\n             ((iVar3 = is_input_empty_08009228(local_2c,0), iVar3 != 0 && (PTR_DAT_08001574[1] != '\\x04')))) {\n            *PTR_DAT_08001574 = 6;\n          }\n          if (((local_2d != '\\0') && (PTR_DAT_08001574[1] != '\\0')) &&\n             (PTR_DAT_08001574[1] != '\\x01')) {\n            *PTR_DAT_08001574 = 6;\n          }\n          if (*PTR_DAT_08001574 != '\\0') {\n            return (uint)(byte)*PTR_DAT_08001574;\n          }\n          for (local_3d = 0; puVar1 = PTR_DAT_08001840, local_3d < 3; local_3d = local_3d + 1) {\n            if (((int)(uint)local_27 >> local_3d & 1U) == 0) {\n              auStack_70[local_3d + 3] = *(undefined4 *)(PTR_DAT_08001574 + (local_3d + 2) * 4 + 4);\n            }\n            else if (local_2d == '\\0') {\n              if (PTR_DAT_08001574[4] == '\\0') {\n                uVar5 = (uint)local_3d;\n                uVar4 = FUNC_08008cdc(auStack_70[local_3d + 3],\n                                     *(undefined4 *)(PTR_DAT_08001574 + (local_3d + 2) * 4 + 4));\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n              else {\n                uVar6 = auStack_70[local_3d + 3];\n                uVar4 = FUNC_08008cdc(*(undefined4 *)(PTR_DAT_08001574 + (local_3d + 8) * 4),\n                                     *(undefined4 *)(PTR_DAT_08001574 + (local_3d + 10) * 4 + 4));\n                uVar5 = (uint)local_3d;\n                uVar4 = FUNC_08008cdc(uVar6,uVar4);\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n            }\n          }\n          if ((byte)PTR_DAT_08001574[1] < 5) {\n                    /* WARNING: Could not recover jumptable at 0x08001474. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n            uVar5 = (*(code *)(&switchD_08001474::switchdataD_08001478)[(byte)PTR_DAT_08001574[1]])\n                              ();\n            return uVar5;\n          }\n          if (*PTR_DAT_08001840 != '\\0') {\n            return (uint)(byte)*PTR_DAT_08001840;\n          }\n          *(undefined4 *)(PTR_DAT_08001840 + 0xc) = auStack_70[3];\n          *(undefined4 *)(puVar1 + 0x10) = auStack_70[4];\n          *(undefined4 *)(puVar1 + 0x14) = auStack_70[5];\n        }\n        if (PTR_DAT_08001840[5] != '\\0') {\n          checkDataPointerAndUpdateStatusIfNotZeroOrThree_08002fd4();\n          PTR_DAT_08001848[0x10] = 0;\n          if (PTR_DAT_08001840[5] == '\\x02') {\n            initialize_device_if_not_connected_080025e8();\n          }\n          else {\n            PTR_DAT_08001840[5] = 0;\n          }\n        }\n        uVar5 = (uint)(byte)*PTR_DAT_08001840;\n      }\n      else {\n        uVar5 = (uint)(byte)*PTR_DAT_08000ff0;\n      }\n    }\n    else {\n      uVar5 = (uint)(byte)*PTR_DAT_08000ff0;\n    }\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_08009228",
                "FUN_08008ba0",
                "FUN_0800b430",
                "FUN_0800525c",
                "FUN_08001f00",
                "FUN_0800184c",
                "FUN_08008894",
                "FUN_08009798",
                "FUN_08002fd4",
                "FUN_08002408",
                "FUN_08008bf0",
                "FUN_0800981c",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_08000220",
                "FUN_08009214",
                "FUN_08000478",
                "FUN_08004bf4",
                "FUN_080025e8",
                "FUN_08008590",
                "FUN_08008cdc",
                "FUN_08001e98",
                "FUN_08004d7c",
                "FUN_0800923c",
                "FUN_080098d0",
                "FUN_08008eec",
                "FUN_0800056c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080005b4",
            "calling": [
                "FUN_080039bc",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "FUNC_080005b4"
        },
        "FUN_080039a0": {
            "renaming": {
                "PTR_DAT_080039b8": "ptr_data",
                "printGrblHelpMessage_08004228": "print_help_message",
                "resetData_08003980": "reset_data",
                "FUN_080039a0": "reset_and_print_help_message_080039a0"
            },
            "code": "void reset_and_print_help_message_080039a0(void)\n{\n  reset_data();\n  print_help_message();\n  *(undefined4 *)PTR_DAT_080039b8 = 1;\n  return;\n}",
            "called": [
                "FUN_08004228",
                "FUN_08003980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080039a0",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": true,
            "current_name": "reset_and_print_help_message_080039a0"
        },
        "FUN_08009204": {
            "renaming": {
                "FUN_08009204": "calculate_and_concatenate_results_08009204",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "calculate_result_0800919c": "calculate_result"
            },
            "code": "undefined8 calculate_and_concatenate_results_08009204(undefined4 first_parameter, undefined4 second_parameter)\n{\n  calculate_result();\n  return CONCAT44(second_parameter, first_parameter);\n}",
            "called": [
                "FUN_0800919c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009204",
            "calling": [
                "FUN_08009214",
                "FUN_08009228",
                "FUN_080091fc",
                "FUN_0800923c"
            ],
            "imported": true,
            "current_name": "calculate_and_concatenate_results_08009204"
        },
        "FUN_080029d8": {
            "renaming": {
                "FUN_080029d8": "calculate_result_if_not_calculated_and_concatenated_080029d8",
                "iVar1": "isResultCalculatedAndConcatenated",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "uVar3": "input1Result",
                "uVar2": "calculatedResult"
            },
            "code": "void calculate_result_if_not_calculated_and_concatenated_080029d8(float result, int input1, int input2) {\\n  int isResultCalculatedAndConcatenated = check_if_results_calculated_and_concatenated_08009214(*(float *)(input1 + 0x18),*(float *)(input1 + 0x1c));\\n  if (((input1 != 0) && (input2 != 0)) && (isResultCalculatedAndConcatenated == 0)) {\\n    if ((*(char *)(input1 + 0x25) == \"\\0\") && (is_input_null_08009264_08009264(*(float *)(input1 + 0x1c),*(float *)(input2 + 0x18)) != 0)) {\\n      float calculatedResult = calculate_float_value_from_params_08002978(*(uint *)(PTR_DAT_08002a90 + 0x20) ^ 0x80000000,*(float *)(input2 + 0x18),*(float *)(input1 + 0x20));\\n      if (is_input_empty_08009228(*(float *)(input1 + 0x1c), calculatedResult) == 0) {\\n        *(float *)(input1 + 0x18) = calculatedResult;\\n      }\\n      else {\\n        *(float *)(input1 + 0x18) = *(float *)(input1 + 0x1c);\\n      }\\n    }\\n    else {\\n      *(float *)(input1 + 0x18) = *(float *)(input1 + 0x1c);\\n    }\\n    *(int *)(input1 + 0x24) = 1;\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08009264",
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08002978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080029d8",
            "calling": [
                "FUN_08002a94"
            ],
            "imported": true,
            "current_name": "calculate_result_if_not_calculated_and_concatenated_080029d8"
        },
        "FUN_08007c5e": {
            "renaming": {
                "FUN_08007c5e": "set_global_variable_08007c5e",
                "_DAT_40000038": "global_variable",
                "param_1": "value"
            },
            "code": "void set_global_variable_08007c5e(int value) {\n  _DAT_40000038 = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c5e",
            "calling": [
                "FUN_08005790"
            ],
            "imported": true,
            "current_name": "set_global_variable_08007c5e"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "update_parameter_value_08005760",
                "PTR_DAT_08005774": "PTR_PARAMETER_DATA",
                "update_param_080052ac": "update_param"
            },
            "code": "void update_parameter_value_08005760(void)\n{\n  int parameter_value = *(int *)(PTR_DAT_08005774 + 0x18);\n  update_param(parameter_value);\n  return;\n}",
            "called": [
                "FUN_080052ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": true,
            "current_name": "update_parameter_value_08005760"
        },
        "FUN_08008b24": {
            "renaming": {
                "in_CY": "user_input",
                "FUN_08008b24": "check_input_is_null_08008b24_08008b24"
            },
            "code": "bool check_input_is_null_08008b24_08008b24(void)\n{\n  char user_input;\n  check_input_and_return_08008b00_08008b00();\n  return user_input == '\\0';\n}",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b24",
            "calling": [
                "FUN_08003004",
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "imported": true,
            "current_name": "check_input_is_null_08008b24_08008b24"
        },
        "FUN_08002814": {
            "renaming": {
                "FUN_08002814": "do_nothing_08002814"
            },
            "code": "\nvoid do_nothing_08002814(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002814",
            "calling": [
                "FUN_08004148",
                "FUN_08002408",
                "FUN_08001d4c"
            ],
            "imported": true,
            "current_name": "do_nothing_08002814"
        },
        "FUN_0800587c": {
            "renaming": {
                "FUN_0800587c": "update_data_if_flag_is_set_0800587c",
                "PTR_DAT_0800589c": "data_flag_array"
            },
            "code": "void update_data_if_flag_is_set_0800587c(void)\n{\n  if (PTR_DAT_0800589c[1] == FLAG_SET) {\n    PTR_DAT_0800589c[1] = FLAG_UPDATED;\n    PTR_DAT_0800589c[DATA_INDEX] = DATA_RESET;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800587c",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": true,
            "current_name": "update_data_if_flag_is_set_0800587c"
        },
        "FUN_08008a02": {
            "renaming": {
                "bVar4": "is_input1_zero",
                "uVar1": "temp1",
                "param_1": "input1",
                "unaff_r4": "mask",
                "param_2": "input2",
                "param_3": "input3",
                "FUN_08008a02": "calculate_result_08008a02",
                "param_4": "input4",
                "uVar3": "temp1",
                "uVar2": "mask",
                "in_r12": "mask"
            },
            "code": "ulonglong calculate_result_08008a02(uint input1, uint input2, uint input3, uint input4)\n{\n  uint mask = 0xfffc0000 & input4;\n  uint temp1 = input2;\n  if (input1 != input3 || mask != input4)\n  {\n    if (input1 == input3)\n    {\n      if ((input1 | (input2 << 0xc)) == 0 && mask != input4)\n      {\n        return (ulonglong)(((input2 ^ input4) & 0x80000000) | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (mask == input4)\n    {\n      input1 = input3;\n      temp1 = input4;\n      if ((input3 | (input4 << 0xc)) == 0)\n      {\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else\n    {\n      bool is_input1_zero = (input1 | (input2 << 1)) == 0;\n      bool is_input3_zero = (input3 | (input4 << 1)) == 0;\n      if (!is_input1_zero && !is_input3_zero)\n      {\n        if (input1 == 0)\n        {\n          uint temp2 = input2 & 0x80000000;\n          do\n          {\n            uint temp3 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(temp3 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp2;\n          if (mask != 0)\n          {\n            return CONCAT44(input2, input1);\n          }\n        }\n        do\n        {\n          uint temp3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2, input1);\n      }\n      if (is_input1_zero && is_input3_zero)\n        return CONCAT44(temp1, input1) | 0x7ff8000000000000;\n      if ((input1 | (input2 << 1)) == 0)\n        return (ulonglong)(((input2 ^ input4) & 0x80000000) | 0x7ff00000) << 0x20;\n      if ((input3 | (input4 << 1)) == 0)\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n  }\n  return CONCAT44(temp1, input1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a02",
            "calling": [
                "FUN_08008894"
            ],
            "imported": true,
            "current_name": "calculate_result_08008a02"
        },
        "FUN_0800369c": {
            "renaming": {
                "local_c": "currentCharacter",
                "waitUntilMemoryWriteIsReadyThenWriteToMemory_08008250": "waitUntilMemoryWriteIsReadyThenWriteToMemory",
                "param_1": "stringToWrite",
                "FUN_0800369c": "writeStringToMemory_0800369c",
                "*local_c": "*currentCharacter"
            },
            "code": "void writeStringToMemory_0800369c(char *stringToWrite)\\n{\\n  char *currentCharacter;\\n  currentCharacter = stringToWrite;\\n  while (*currentCharacter != \"\\0\") {\\n    waitUntilMemoryWriteIsReadyThenWriteToMemory(*currentCharacter);\\n    currentCharacter++;\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800369c",
            "calling": [
                "FUN_080039bc",
                "FUN_08004900"
            ],
            "imported": true,
            "current_name": "writeStringToMemory_0800369c"
        },
        "FUN_08005a98": {
            "renaming": {
                "iVar1": "initial_pointer_value",
                "param_1": "target_sum",
                "FUN_08005a98": "find_value_greater_than_sum_of_two_pointers_08005a98",
                "uVar2": "current_pointer_value"
            },
            "code": "void find_value_greater_than_sum_of_two_pointers_08005a98(int target_sum) \n{\n  int initial_pointer_value = get_value_from_pointer_08005a84();\n  do {\n    uint current_pointer_value = get_value_from_pointer_08005a84();\n  } while (current_pointer_value < (uint)(target_sum + initial_pointer_value));\n  return;\n}",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a98",
            "calling": [
                "FUN_080002a0"
            ],
            "imported": true,
            "current_name": "find_value_greater_than_sum_of_two_pointers_08005a98"
        },
        "FUN_08008cdc": {
            "renaming": {
                "FUN_08008cdc": "FUNC_08008cdc"
            },
            "code": "\nuint FUNC_08008cdc(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08008e12:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if (uVar4 - 1 == 0 || uVar3 < 0x800000) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08008e12;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008cdc",
            "calling": [
                "FUN_080028bc",
                "FUN_08002978",
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_08003004",
                "FUN_08003826",
                "FUN_08004940",
                "FUN_08002908"
            ],
            "imported": false,
            "current_name": "FUNC_08008cdc"
        },
        "FUN_080044e8": {
            "renaming": {
                "FUN_080044e8": "printFloatingPointNumbers_080044e8"
            },
            "code": "void printFloatingPointNumbers_080044e8() {\n  int index = 0;\n  byte buffer[3];\n  byte isReverseNeeded = PTR_DAT_080046bc[0x28] & 1;\n  while (index < 8) {\n    if (index > 7) {\n      writeStringToMemory_080036c6(PTR_s__G92__080046c8);\n      for (int i = 0; i < 3; i++) {\n        float value = *(float*)(PTR_DAT_080046cc + (i + 10) * 4 + 4);\n        if (isReverseNeeded == 0) {\n          printFloat_08003826(value);\n        }\n        else {\n          float reversedValue = reverse_and_improve_08008590(value);\n          reversedValue = FUNC_08008640((int)reversedValue, (int)((ulonglong)reversedValue >> 0x20), DAT_08004690, DAT_08004694);\n          int bits = calculate_float_bits_08008c30((int)reversedValue, (int)((ulonglong)reversedValue >> 0x20));\n          printFloat_08003826(bits);\n        }\n        if (i < 2) {\n          writeStringToMemory_080036c6(PTR_DAT_080046c0);\n        }\n        else {\n          writeStringToMemory_080036c6(PTR_DAT_080046c4);\n        }\n      }\n      return;\n    }\n    int result = verify_and_fill_buffer_08004d7c(index, buffer);\n    if (result == 0) {\n      break;\n    }\n    writeStringToMemory_080036c6(PTR_DAT_08004698);\n    switch (index) {\n      case 0:\n        writeStringToMemory_080036c6(PTR_DAT_0800469c);\n        break;\n      case 1:\n        writeStringToMemory_080036c6(PTR_DAT_080046a0);\n        break;\n      case 2:\n        writeStringToMemory_080036c6(PTR_DAT_080046a4);\n        break;\n      case 3:\n        writeStringToMemory_080036c6(PTR_DAT_080046a8);\n        break;\n      case 4:\n        writeStringToMemory_080036c6(PTR_DAT_080046ac);\n        break;\n      case 5:\n        writeStringToMemory_080036c6(PTR_DAT_080046b0);\n        break;\n      case 6:\n        writeStringToMemory_080036c6(PTR_DAT_080046b4);\n        break;\n      case 7:\n        writeStringToMemory_080036c6(PTR_DAT_080046b8);\n        break;\n    }\n    for (int i = 0; i < 3; i++) {\n      float value = buffer[i];\n      if (isReverseNeeded == 0) {\n        printFloat_08003826(value);\n      }\n      else {\n        float reversedValue = reverse_and_improve_08008590(value);\n        reversedValue = FUNC_08008640((int)reversedValue, (int)((ulonglong)reversedValue >> 0x20), DAT_08004690, DAT_08004694);\n        int bits = calculate_float_bits_08008c30((int)reversedValue, (int)((ulonglong)reversedValue >> 0x20));\n        printFloat_08003826(bits);\n      }\n      if (i < 2) {\n        writeStringToMemory_080036c6(PTR_DAT_080046c0);\n      }\n      else {\n        writeStringToMemory_080036c6(PTR_DAT_080046c4);\n      }\n    }\n    index++;\n  }\n  printErrorMessage_08004030(10);\n  return;\n}",
            "called": [
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08004030",
                "FUN_08003826",
                "FUN_08004d7c",
                "FUN_08008c30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044e8",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": true,
            "current_name": "printFloatingPointNumbers_080044e8"
        },
        "FUN_08006c9c": {
            "renaming": {
                "DAT_08006cdc": "ptr",
                "bVar1": "is_valid",
                "set_byte_in_memory_08006b00": "set_byte_in_memory_08006b00",
                "param_1": "address",
                "FUN_08006c9c": "is_valid_address_08006c9c"
            },
            "code": "bool is_valid_address_08006c9c(unsigned int address)\n{\n  bool is_valid = address < 0x1000000;\n  if (is_valid) {\n    unsigned int* DAT_08006cdc = (unsigned int*)DAT_08006cdc;\n    *(DAT_08006cdc + 1) = address - 1;\n    set_byte_in_memory_08006b00(0xffffffff, 0xf);\n    *(DAT_08006cdc + 2) = 0;\n    *DAT_08006cdc = 7;\n  }\n  return !is_valid;\n}",
            "called": [
                "FUN_08006b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c9c",
            "calling": [
                "FUN_08006d72"
            ],
            "imported": true,
            "current_name": "is_valid_address_08006c9c"
        },
        "FUN_0800a5a0": {
            "renaming": {
                "FUN_0800a5a0": "FUNC_0800a5a0"
            },
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint FUNC_0800a5a0(int param_1,undefined8 *param_2,int param_3,int param_4,int param_5,int param_6)\n\n{\n  undefined4 *puVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  uint *puVar5;\n  undefined4 uVar6;\n  uint **ppuVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 *puVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  uint *puVar13;\n  int iVar14;\n  int iVar15;\n  undefined8 *puVar16;\n  int iVar17;\n  undefined4 *puVar18;\n  undefined8 *puVar19;\n  undefined4 uVar20;\n  int iVar21;\n  undefined8 *puVar22;\n  undefined4 *puVar23;\n  bool bVar24;\n  undefined8 uVar25;\n  undefined8 uVar26;\n  undefined8 uVar27;\n  undefined8 uVar28;\n  ulonglong uVar29;\n  undefined8 *local_284;\n  int local_280;\n  int local_270;\n  int local_26c;\n  uint *local_260 [2];\n  uint local_258 [20];\n  undefined8 uStack_208;\n  undefined8 local_168;\n  int local_160 [38];\n  undefined8 uStack_c8;\n  \n  uVar28 = CONCAT44(param_5,param_5);\n  iVar15 = *(int *)(PTR_DAT_0800a894 + param_5 * 4);\n  iVar9 = param_4 + -1;\n  local_260[1] = (uint *)param_2;\n  if (param_3 + 0x14 < 0 == SCARRY4(param_3,0x14)) {\n    local_26c = (int)((longlong)DAT_0800a898 * (longlong)(param_3 + -3) >> 0x22) -\n                (param_3 + -3 >> 0x1f);\n    local_270 = (local_26c + 1) * -0x18;\n  }\n  else {\n    local_270 = -0x18;\n    local_26c = 0;\n  }\n  local_270 = param_3 + local_270;\n  iVar17 = local_26c - iVar9;\n  if (-1 < iVar15 + iVar9) {\n    iVar21 = iVar15 + iVar9 + 1 + iVar17;\n    puVar16 = &uStack_208;\n    do {\n      while (iVar17 < 0) {\n        iVar17 = iVar17 + 1;\n        *(undefined4 *)puVar16 = 0;\n        *(undefined4 *)((int)puVar16 + 4) = 0;\n        puVar16 = puVar16 + 1;\n        if (iVar17 == iVar21) goto LAB_0800a626;\n      }\n      uVar26 = calculate_shifted_value_0800856c(*(undefined4 *)(param_6 + iVar17 * 4));\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar21);\n  }\nLAB_0800a626:\n  puVar10 = (undefined4 *)(param_1 + -8);\n  if (-1 < iVar15) {\n    puVar22 = &uStack_208 + param_4;\n    iVar17 = iVar9;\n    puVar16 = &uStack_c8;\n    do {\n      if (iVar9 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        puVar23 = puVar10;\n        puVar19 = puVar22;\n        do {\n          puVar18 = puVar23 + 2;\n          uVar25 = FUNC_08008640(*puVar18,puVar23[3],*(undefined4 *)(puVar19 + -1),\n                                *(undefined4 *)((int)puVar19 + -4));\n          uVar26 = FUNC_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          puVar23 = puVar18;\n          puVar19 = puVar19 + -1;\n        } while (puVar18 != puVar10 + param_4 * 2);\n      }\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar22 = puVar22 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar15 + param_4);\n  }\n  local_260[0] = local_258 + iVar15 + -1;\n  iVar17 = iVar15;\n  do {\n    uVar26 = CONCAT44(*(undefined4 *)((int)&uStack_c8 + iVar17 * 8 + 4),\n                      *(undefined4 *)(&uStack_c8 + iVar17));\n    if (0 < iVar17) {\n      puVar16 = &uStack_c8 + iVar17;\n      puVar5 = local_258;\n      do {\n        uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        FUNC_08008640((int)uVar26,uVar6,0,DAT_0800a89c);\n        convert_fixed_point_to_int_08008ba0();\n        uVar25 = calculate_shifted_value_0800856c();\n        uVar8 = (undefined4)((ulonglong)uVar25 >> 0x20);\n        uVar27 = FUNC_08008640((int)uVar25,uVar8,0,DAT_0800a8a0);\n        FUNC_080082d0((int)uVar26,uVar6,(int)uVar27,(int)((ulonglong)uVar27 >> 0x20));\n        uVar2 = convert_fixed_point_to_int_08008ba0();\n        puVar22 = puVar16 + -1;\n        uVar6 = *(undefined4 *)puVar22;\n        uVar11 = *(undefined4 *)((int)puVar16 + -4);\n        *puVar5 = uVar2;\n        uVar26 = FUNC_080082d4((int)uVar25,uVar8,uVar6,uVar11);\n        puVar16 = puVar22;\n        puVar5 = puVar5 + 1;\n      } while (puVar22 != &uStack_c8);\n    }\n    uVar26 = calculate_hash_0800b2e8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),local_270);\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    FUNC_08008640((int)uVar26,uVar8,0,0x3fc00000);\n    uVar25 = calculate_result_080094c0();\n    uVar25 = FUNC_08008640((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),0,DAT_0800a8a4);\n    uVar26 = FUNC_080082d0((int)uVar26,uVar8,(int)uVar25,(int)((ulonglong)uVar25 >> 0x20));\n    uVar2 = convert_fixed_point_to_int_08008ba0();\n    uVar25 = calculate_shifted_value_0800856c();\n    uVar26 = FUNC_080082d0((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                          (int)((ulonglong)uVar25 >> 0x20));\n    uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    uVar8 = (undefined4)uVar26;\n    if (local_270 < 1) {\n      if (local_270 == 0) {\n        iVar21 = (int)local_258[iVar17 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      iVar21 = is_input_valid_08008b4c(uVar8,uVar6,0,DAT_0800ac3c);\n      if (iVar21 != 0) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          uVar26 = FUNC_080082d0(0,DAT_0800ac38,uVar8,uVar6);\n          iVar21 = 2;\n          goto LAB_0800a7a4;\n        }\n        iVar21 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      iVar4 = (int)local_258[iVar17 + -1] >> (0x18U - local_270 & 0xff);\n      uVar12 = local_258[iVar17 + -1] - (iVar4 << (0x18U - local_270 & 0xff));\n      iVar21 = (int)uVar12 >> (0x17U - local_270 & 0xff);\n      local_258[iVar17 + -1] = uVar12;\n      uVar2 = uVar2 + iVar4;\njoined_r0x0800a8b8:\n      if (0 < iVar21) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          uVar12 = 0;\n        }\n        else {\nLAB_0800a8c8:\n          uVar12 = local_258[0];\n          if (local_258[0] == 0) {\n            if (iVar17 != 1) {\n              puVar5 = local_258;\n              iVar4 = 1;\n              do {\n                puVar5 = puVar5 + 1;\n                uVar12 = *puVar5;\n                if (uVar12 != 0) {\n                  iVar14 = iVar4 + 1;\n                  goto LAB_0800a8e2;\n                }\n                iVar4 = iVar4 + 1;\n              } while (iVar4 != iVar17);\n            }\n          }\n          else {\n            iVar14 = 1;\n            iVar4 = 0;\nLAB_0800a8e2:\n            local_258[iVar4] = 0x1000000 - uVar12;\n            if (iVar14 < iVar17) {\n              uVar12 = local_258[iVar14];\n              puVar5 = local_258 + iVar14;\n              while( true ) {\n                puVar13 = puVar5 + 1;\n                *puVar5 = 0xffffff - uVar12;\n                if (puVar13 == local_258 + iVar17) break;\n                uVar12 = *puVar13;\n                puVar5 = puVar13;\n              }\n            }\n            uVar12 = 1;\n          }\n        }\n        if (0 < local_270) {\n          if (local_270 == 1) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x7fffff;\n          }\n          else if (local_270 == 2) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x3fffff;\n          }\n        }\n        if (iVar21 == 2) {\n          uVar26 = FUNC_080082d0(0,DAT_0800ac38,uVar8,uVar6);\n          if (uVar12 != 0) {\n            uVar25 = calculate_hash_0800b2e8(0,DAT_0800ac38,local_270);\n            uVar26 = FUNC_080082d0((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                  (int)((ulonglong)uVar25 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    iVar4 = check_input_and_return_08008b10((int)uVar26,uVar8,0,0);\n    if (iVar4 == 0) {\n      uVar26 = calculate_hash_0800b2e8((int)uVar26,uVar8,-local_270);\n      uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      uVar8 = (undefined4)uVar26;\n      iVar9 = is_input_valid_08008b4c(uVar8,uVar6,0,DAT_0800ade4);\n      if (iVar9 == 0) {\n        uVar12 = convert_fixed_point_to_int_08008ba0(uVar8,uVar6);\n        local_258[iVar17] = uVar12;\n        iVar4 = iVar17;\n      }\n      else {\n        FUNC_08008640(uVar8,uVar6,0,DAT_0800ade8);\n        uVar12 = convert_fixed_point_to_int_08008ba0();\n        uVar26 = calculate_shifted_value_0800856c();\n        uVar26 = FUNC_08008640((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,DAT_0800ade4);\n        FUNC_080082d0(uVar8,uVar6,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        uVar3 = convert_fixed_point_to_int_08008ba0();\n        local_270 = local_270 + 0x18;\n        local_258[iVar17] = uVar3;\n        local_258[iVar17 + 1] = uVar12;\n        iVar4 = iVar17 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    iVar4 = iVar17 + -1;\n    if (iVar15 <= iVar4) {\n      uVar12 = 0;\n      puVar5 = local_258 + iVar17 + 0x3fffffff;\n      do {\n        puVar13 = puVar5 + -1;\n        uVar12 = uVar12 | *puVar5;\n        puVar5 = puVar13;\n      } while (puVar13 != local_260[0]);\n      if (uVar12 != 0) break;\n    }\n    if (local_258[iVar15 + -1] == 0) {\n      local_280 = 1;\n      ppuVar7 = local_260 + iVar15;\n      do {\n        puVar5 = *ppuVar7;\n        local_280 = local_280 + 1;\n        ppuVar7 = ppuVar7 + -1;\n      } while (puVar5 == (uint *)0x0);\n      local_280 = iVar17 + local_280;\n    }\n    else {\n      local_280 = iVar17 + 1;\n    }\n    iVar21 = iVar17 + 1;\n    puVar23 = (undefined4 *)(param_6 + (iVar21 + local_26c + 0x3fffffff) * 4);\n    puVar16 = &uStack_208 + iVar17 + param_4;\n    local_284 = &uStack_c8 + iVar21;\n    do {\n      puVar23 = puVar23 + 1;\n      uVar26 = calculate_shifted_value_0800856c(*puVar23);\n      *puVar16 = uVar26;\n      puVar22 = puVar16 + 1;\n      if (iVar9 < 0) {\n        uVar25 = 0;\n      }\n      else {\n        uVar25 = 0;\n        puVar18 = puVar10;\n        while( true ) {\n          puVar16 = puVar16 + -1;\n          puVar1 = puVar18 + 2;\n          uVar26 = FUNC_08008640((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar1,puVar18[3]);\n          uVar25 = FUNC_080082d4((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,\n                                (int)((ulonglong)uVar26 >> 0x20));\n          if (puVar1 == puVar10 + param_4 * 2) break;\n          uVar26 = *puVar16;\n          puVar18 = puVar1;\n        }\n      }\n      *local_284 = uVar25;\n      iVar21 = iVar21 + 1;\n      iVar17 = local_280;\n      puVar16 = puVar22;\n      local_284 = local_284 + 1;\n    } while (iVar21 <= local_280);\n  } while( true );\n  local_270 = local_270 + -0x18;\n  if (local_258[iVar4] == 0) {\n    puVar5 = local_258 + iVar17 + 0x3ffffffe;\n    do {\n      uVar12 = *puVar5;\n      iVar4 = iVar4 + -1;\n      local_270 = local_270 + -0x18;\n      puVar5 = puVar5 + -1;\n    } while (uVar12 == 0);\n  }\nLAB_0800a9f6:\n  uVar26 = calculate_hash_0800b2e8(0,DAT_0800ac38,local_270);\n  if (iVar4 < 0) {\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        uVar28 = 0;\nLAB_0800abe4:\n        if (iVar21 == 0) {\n          *local_260[1] = (undefined4)local_168;\n          *(int *)((int)local_260[1] + 4) = local_168._4_4_;\n          *(undefined8 *)((int)local_260[1] + 0x10) = uVar28;\n          *(int *)((int)local_260[1] + 8) = local_160[0];\n          *(int *)((int)local_260[1] + 0xc) = local_160[1];\n          return uVar2 & 7;\n        }\n        *(int *)((int)local_260[1] + 0x10) = (int)uVar28;\n        *(int *)((int)local_260[1] + 8) = local_160[0];\n        *(int *)((int)local_260[1] + 0x14) = (int)((ulonglong)uVar28 >> 0x20) + -0x80000000;\n        *(int *)((int)local_260[1] + 4) = local_168._4_4_ + -0x80000000;\n        *(int *)((int)local_260[1] + 0xc) = local_160[1] + -0x80000000;\n        *local_260[1] = (undefined4)local_168;\n        return uVar2 & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\nLAB_0800aafc:\n      iVar9 = (int)((ulonglong)uVar28 >> 0x20);\n      if (iVar21 != 0) {\n        iVar9 = iVar9 + -0x80000000;\n      }\n      *local_260[1] = (int)uVar28;\n      *(int *)((int)local_260[1] + 4) = iVar9;\nLAB_0800ab0e:\n      return uVar2 & 7;\n    }\n    uVar28 = 0;\n  }\n  else {\n    puVar22 = &uStack_c8 + iVar4;\n    puVar5 = local_258 + iVar4 + 1;\n    puVar16 = &uStack_c8 + iVar4 + 1;\n    do {\n      uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      puVar5 = puVar5 + -1;\n      uVar25 = calculate_shifted_value_0800856c(*puVar5);\n      uVar25 = FUNC_08008640((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,uVar8);\n      puVar16 = puVar16 + -1;\n      *puVar16 = uVar25;\n      uVar26 = FUNC_08008640((int)uVar26,uVar8,0,DAT_0800ac40);\n    } while (puVar5 != local_258);\n    iVar9 = 0;\n    uVar8 = DAT_0800ac30;\n    uVar6 = DAT_0800ac34;\n    do {\n      DAT_0800ac30 = uVar8;\n      DAT_0800ac34 = uVar6;\n      if (iVar15 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        iVar17 = 0;\n        puVar16 = puVar22;\n        puVar10 = (undefined4 *)PTR_DAT_0800ac44;\n        while( true ) {\n          uVar25 = FUNC_08008640(*(undefined4 *)puVar16,*(undefined4 *)((int)puVar16 + 4),uVar8,uVar6\n                               );\n          uVar26 = FUNC_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          iVar17 = iVar17 + 1;\n          if ((iVar15 < iVar17) || (iVar9 < iVar17)) break;\n          uVar8 = *puVar10;\n          uVar6 = puVar10[1];\n          puVar16 = puVar16 + 1;\n          puVar10 = puVar10 + 2;\n        }\n      }\n      bVar24 = iVar9 != iVar4;\n      *(int *)(&local_168 + iVar9) = (int)uVar26;\n      *(int *)((int)&local_168 + (iVar9 * 2 + 1) * 4) = (int)((ulonglong)uVar26 >> 0x20);\n      puVar22 = puVar22 + -1;\n      iVar9 = iVar9 + 1;\n      uVar8 = DAT_0800ac30;\n      uVar6 = DAT_0800ac34;\n    } while (bVar24);\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        if (iVar4 != 0) {\n          puVar16 = &local_168 + iVar4;\n          uVar28 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                            *(undefined4 *)puVar16);\n          do {\n            uVar6 = (undefined4)((ulonglong)uVar28 >> 0x20);\n            uVar8 = (undefined4)uVar28;\n            uVar11 = *(undefined4 *)(puVar16 + -1);\n            uVar20 = *(undefined4 *)((int)puVar16 + -4);\n            uVar28 = FUNC_080082d4(uVar8,uVar6,uVar11,uVar20);\n            uVar26 = FUNC_080082d0(uVar11,uVar20,(int)uVar28,(int)((ulonglong)uVar28 >> 0x20));\n            uVar26 = FUNC_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),uVar8,uVar6);\n            *puVar16 = uVar26;\n            puVar16 = puVar16 + -1;\n            *puVar16 = uVar28;\n          } while (&local_168 != puVar16);\n          if (1 < iVar4) {\n            puVar16 = &local_168 + iVar4;\n            uVar28 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                              *(undefined4 *)puVar16);\n            do {\n              uVar6 = (undefined4)((ulonglong)uVar28 >> 0x20);\n              uVar8 = (undefined4)uVar28;\n              uVar11 = *(undefined4 *)(puVar16 + -1);\n              uVar20 = *(undefined4 *)((int)puVar16 + -4);\n              uVar28 = FUNC_080082d4(uVar8,uVar6,uVar11,uVar20);\n              uVar26 = FUNC_080082d0(uVar11,uVar20,(int)uVar28,(int)((ulonglong)uVar28 >> 0x20));\n              uVar26 = FUNC_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),uVar8,uVar6);\n              *puVar16 = uVar26;\n              puVar16 = puVar16 + -1;\n              *puVar16 = uVar28;\n            } while (&local_168 + 1 != puVar16);\n            uVar28 = 0;\n            puVar16 = &local_168 + iVar4 + 1;\n            do {\n              puVar22 = puVar16 + -1;\n              uVar28 = FUNC_080082d4((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),\n                                    *(undefined4 *)puVar22,*(undefined4 *)((int)puVar16 + -4));\n              puVar16 = puVar22;\n            } while (&local_168 + 2 != puVar22);\n            goto LAB_0800abe4;\n          }\n        }\n        uVar28 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      puVar16 = &local_168 + iVar4 + 1;\n      do {\n        puVar22 = puVar16 + -1;\n        uVar28 = FUNC_080082d4((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),*(undefined4 *)puVar22,\n                              *(undefined4 *)((int)puVar16 + -4));\n        puVar16 = puVar22;\n      } while (&local_168 != puVar22);\n      goto LAB_0800aafc;\n    }\n    uVar28 = 0;\n    puVar16 = &local_168 + iVar4 + 1;\n    do {\n      puVar22 = puVar16 + -1;\n      uVar28 = FUNC_080082d4((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),*(undefined4 *)puVar22,\n                            *(undefined4 *)((int)puVar16 + -4));\n      puVar16 = puVar22;\n    } while (&local_168 != puVar22);\n  }\n  iVar9 = (int)((ulonglong)uVar28 >> 0x20);\n  uVar8 = (undefined4)uVar28;\n  if (iVar21 == 0) {\n    *(undefined8 *)local_260[1] = uVar28;\n    uVar29 = FUNC_080082d0((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (iVar4 < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    iVar9 = 1;\n    puVar16 = &local_168;\n    do {\n      uVar29 = FUNC_080082d4((int)uVar29,(int)(uVar29 >> 0x20),*(undefined4 *)(puVar16 + 1),\n                            *(undefined4 *)((int)puVar16 + 0xc));\n      iVar9 = iVar9 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar9 <= iVar4);\n    if (iVar21 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_260[1] = uVar8;\n    *(int *)((int)local_260[1] + 4) = iVar9 + -0x80000000;\n    uVar29 = FUNC_080082d0((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (0 < iVar4) goto LAB_0800ad04;\n  }\n  uVar29 = uVar29 & 0xffffffff | (ulonglong)((int)(uVar29 >> 0x20) + 0x80000000) << 0x20;\nLAB_0800ad26:\n  *(ulonglong *)((int)local_260[1] + 8) = uVar29;\n  return uVar2 & 7;\n}\n\n",
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080094c0",
                "FUN_08008b10",
                "FUN_08008b4c",
                "FUN_0800856c",
                "FUN_0800b2e8",
                "FUN_080082d0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800a5a0",
            "calling": [
                "FUN_08009d78"
            ],
            "imported": false,
            "current_name": "FUNC_0800a5a0"
        },
        "FUN_0800195c": {
            "renaming": {
                "PTR_DAT_08001990": "device_status",
                "initialize_device_if_not_connected_080025e8": "initialize_device_if_not_connected",
                "FUN_0800195c": "check_device_connection_and_initialize_if_not_connected_0800195c"
            },
            "code": "void check_device_connection_and_initialize_if_not_connected_0800195c(void)\n{\n  if ((PTR_DAT_08001990[1] != '\\x06') && ((PTR_DAT_08001990[2] & 0x20) == 0)) {\n    initialize_device_if_not_connected();\n    PTR_DAT_08001990[2] = PTR_DAT_08001990[2] | 0x40;\n  }\n  return;\n}",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800195c",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": true,
            "current_name": "check_device_connection_and_initialize_if_not_connected_0800195c"
        },
        "FUN_08009214": {
            "renaming": {
                "FUN_08009214": "check_if_results_calculated_and_concatenated_08009214",
                "calculate_and_concatenate_results_08009204": "calculate_and_concatenate_results",
                "in_ZR": "input_char"
            },
            "code": "bool check_if_results_calculated_and_concatenated_08009214(void)\\n{\\n  char input_char;\\n  calculate_and_concatenate_results();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009214",
            "calling": [
                "FUN_080029d8",
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_08002afc",
                "FUN_080005b4",
                "FUN_08002638"
            ],
            "imported": true,
            "current_name": "check_if_results_calculated_and_concatenated_08009214"
        },
        "FUN_08004dd2": {
            "renaming": {
                "bVar1": "buffer_value",
                "iVar2": "verification_result",
                "FUN_08004dd2": "verify_data_storage_08004dd2",
                "initialize_data_storage_08004c2a_08004c48": "initialize_data_storage",
                "PTR_DAT_08004e2c": "PTR_DAT_08004e2c"
            },
            "code": "int verify_data_storage_08004dd2()\n{\n  byte buffer_value = get_buffer_value(0);\n  if (buffer_value == 5) {\n    int verification_result = verify_buffer(PTR_DAT_08004e2c, 1, 0x40);\n    if (verification_result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (buffer_value > 4) {\n      return 0;\n    }\n    int verification_result = verify_buffer(PTR_DAT_08004e2c, 1, 0x28);\n    if (verification_result == 0) {\n      return 0;\n    }\n    initialize_data_storage(0);\n  }\n  return 1;\n}",
            "called": [
                "FUN_08004c48",
                "FUN_08000310",
                "FUN_080003ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004dd2",
            "calling": [
                "FUN_080051b4"
            ],
            "imported": true,
            "current_name": "verify_data_storage_08004dd2"
        },
        "FUN_08008244": {
            "renaming": {
                "FUN_08008244": "do_nothing_08008244"
            },
            "code": "\nvoid do_nothing_08008244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008244",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": true,
            "current_name": "do_nothing_08008244"
        },
        "FUN_08005778": {
            "renaming": {
                "FUN_08005778": "update_parameter_08005778",
                "parameter_value": "parameter_value",
                "PTR_DAT_0800578c": "parameter_pointer",
                "update_param_080052ac": "update_param"
            },
            "code": "void update_parameter_08005778(void)\n{\n  int* PTR_DAT_0800578c = (int*) PTR_DAT_0800578c;\n  int parameter_value = *PTR_DAT_0800578c;\n  update_param_080052ac((short) parameter_value);\n  return;\n}",
            "called": [
                "FUN_080052ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005778",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": true,
            "current_name": "update_parameter_08005778"
        },
        "FUN_080028bc": {
            "renaming": {
                "FUNC_08009054": "calculate_9054",
                "uVar1": "result_1",
                "param_1": "input_1",
                "FUN_080028bc": "calculate_result_080028bc",
                "param_2": "input_2",
                "FUNC_08008cdc": "calculate_cdc",
                "param_3": "input_3",
                "FUNC_08008eec": "calculate_eec",
                "uVar2": "result_2",
                "FUNC_08008cd8": "calculate_cd8"
            },
            "code": "undefined4 calculate_result_080028bc(undefined4 input_1, undefined4 input_2, undefined4 input_3)\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  result_1 = FUNC_08008eec(input_2, input_2);\n  result_2 = FUNC_08008eec(input_1, input_1);\n  result_1 = FUNC_08008cd8(result_1, result_2);\n  result_2 = FUNC_08008cdc(input_3, input_3);\n  result_1 = FUNC_08009054(result_1, result_2);\n  return result_1;\n}",
            "called": [
                "FUN_08008cdc",
                "FUN_08009054",
                "FUN_08008eec",
                "FUN_08008cd8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028bc",
            "calling": [
                "FUN_08002c18"
            ],
            "imported": true,
            "current_name": "calculate_result_080028bc"
        },
        "FUN_08006628": {
            "renaming": {
                "uVar1": "value",
                "FUN_08006628": "calculate_result_08006628",
                "PTR_DAT_0800667c": "result_ptr",
                "DAT_08006674": "shift_data",
                "uVar2": "leading_zeroes",
                "PTR_DAT_08006678": "shift_amount_ptr"
            },
            "code": "uint32_t calculate_result_08006628() {\n  uint32_t value = calculate_value();\n  uint32_t leading_zeroes = count_leading_zeroes(0xf000000);\n  uint32_t *PTR_DAT_0800667c = (uint32_t *)PTR_DAT_0800667c;\n  uint32_t shift_amount = (*(uint32_t *)(DAT_08006674 + 8) & 0xf0) >> (leading_zeroes & 0xff);\n  *PTR_DAT_0800667c = value >> shift_amount;\n  return *(uint32_t *)PTR_DAT_0800667c;\n}",
            "called": [
                "FUN_080064ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006628",
            "calling": [
                "FUN_0800618c",
                "FUN_080066cc",
                "FUN_08006680"
            ],
            "imported": true,
            "current_name": "calculate_result_08006628"
        },
        "FUN_0800738e": {
            "renaming": {
                "do_nothing_080073c0": "do_nothing",
                "param_1": "new_param",
                "FUN_0800738e": "update_param_if_flag_set_0800738e",
                "DAT_080073bc": "ptr_dat"
            },
            "code": "void update_param_if_flag_set_0800738e(ushort new_param)\n{\n  uint* flag_ptr = (uint*)(DAT_080073bc + 0x14);\n  if (((uint)new_param & *flag_ptr) != 0) {\n    *flag_ptr = (uint)new_param;\n    do_nothing_080073c0(new_param);\n  }\n  return;\n}",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738e",
            "calling": [],
            "imported": true,
            "current_name": "update_param_if_flag_set_0800738e"
        },
        "FUN_08002828": {
            "renaming": {
                "FUN_08002828": "do_nothing_08002828"
            },
            "code": "\nvoid do_nothing_08002828(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002828",
            "calling": [
                "FUN_08001994"
            ],
            "imported": true,
            "current_name": "do_nothing_08002828"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "FUNC_080053a0"
            },
            "code": "\nvoid FUNC_080053a0(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  \n  update_param_080052dc(*(undefined2 *)PTR_DAT_080055f0);\n  *(undefined2 *)PTR_DAT_080055f8 = *(undefined2 *)PTR_DAT_080055f4;\n  if (*(int *)PTR_DAT_080055fc == 0) {\n    uVar1 = get_data_pointer_08002f74();\n    *(undefined4 *)PTR_DAT_080055fc = uVar1;\n    if (*(int *)PTR_DAT_080055fc == 0) {\n      checkIfDeviceIsConnected_080057e4();\n      PTR_DAT_08005600[2] = PTR_DAT_08005600[2] | 4;\n    }\n    else {\n      if (PTR_DAT_08005600[1] == '\\x03') {\n        *(undefined4 *)(PTR_DAT_08005604 + 0x1c) = *(undefined4 *)(*(int *)PTR_DAT_080055fc + 0x28);\n        calculate_local_value_08005324(*(undefined4 *)(PTR_DAT_08005604 + 0x1c));\n        *(undefined4 *)(PTR_DAT_08005604 + 0x18) = DAT_08005608;\n      }\n      *(int *)(PTR_DAT_08005604 + 0x20) =\n           (*(int *)(*(int *)PTR_DAT_080055fc + 0x30) >> 1) +\n           *(int *)(*(int *)PTR_DAT_080055fc + 0x30);\n      *(int *)PTR_DAT_08005604 = -(*(int *)(*(int *)PTR_DAT_080055fc + 0x10) >> 1);\n      *(undefined4 *)(PTR_DAT_08005604 + 4) = *(undefined4 *)PTR_DAT_08005604;\n      *(undefined4 *)(PTR_DAT_08005604 + 8) = *(undefined4 *)PTR_DAT_08005604;\n      *(undefined4 *)(PTR_DAT_08005604 + 0xc) = *(undefined4 *)(*(int *)PTR_DAT_080055fc + 0x10);\n      *(undefined4 *)(PTR_DAT_08005604 + 0x10) = 0;\n    }\n  }\n  if (*(int *)PTR_DAT_080055fc != 0) {\n    *(undefined2 *)PTR_DAT_080055f0 = **(undefined2 **)PTR_DAT_080055fc;\n    *(undefined2 *)PTR_DAT_080055f4 = 0;\n    *(int *)PTR_DAT_08005604 = *(int *)(*(int *)PTR_DAT_080055fc + 4) + *(int *)PTR_DAT_08005604;\n    if (0 < *(int *)PTR_DAT_08005604) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x10;\n      *(int *)PTR_DAT_08005604 = *(int *)PTR_DAT_08005604 - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x20) == 0) {\n        *(int *)(PTR_DAT_08005600 + 4) = *(int *)(PTR_DAT_08005600 + 4) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 4) = *(int *)(PTR_DAT_08005600 + 4) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 4) =\n         *(int *)(*(int *)PTR_DAT_080055fc + 8) + *(int *)(PTR_DAT_08005604 + 4);\n    if (0 < *(int *)(PTR_DAT_08005604 + 4)) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x440;\n      *(int *)(PTR_DAT_08005604 + 4) =\n           *(int *)(PTR_DAT_08005604 + 4) - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x80) == 0) {\n        *(int *)(PTR_DAT_08005600 + 8) = *(int *)(PTR_DAT_08005600 + 8) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 8) = *(int *)(PTR_DAT_08005600 + 8) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 8) =\n         *(int *)(*(int *)PTR_DAT_080055fc + 0xc) + *(int *)(PTR_DAT_08005604 + 8);\n    if (0 < *(int *)(PTR_DAT_08005604 + 8)) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x100;\n      *(int *)(PTR_DAT_08005604 + 8) =\n           *(int *)(PTR_DAT_08005604 + 8) - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x200) == 0) {\n        *(int *)(PTR_DAT_08005600 + 0xc) = *(int *)(PTR_DAT_08005600 + 0xc) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 0xc) = *(int *)(PTR_DAT_08005600 + 0xc) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 0x10) = *(int *)(PTR_DAT_08005604 + 0x10) + 1;\n    if (*(uint *)(PTR_DAT_08005604 + 0x10) < *(uint *)(*(int *)PTR_DAT_080055fc + 0x10)) {\n      if (PTR_DAT_08005600[1] == '\\x04') {\n        iVar2 = check_if_limit_exceeded_08005360();\n        if (iVar2 != 0) {\n          if (*(uint *)(*(int *)PTR_DAT_080055fc + 0x30) < *(uint *)(PTR_DAT_08005604 + 0x1c)) {\n            *(int *)(PTR_DAT_08005604 + 0x1c) =\n                 *(int *)(PTR_DAT_08005604 + 0x1c) - *(int *)(*(int *)PTR_DAT_080055fc + 0x30);\n            calculate_local_value_08005324(*(undefined4 *)(PTR_DAT_08005604 + 0x1c));\n          }\n          else {\n            checkIfDeviceIsConnected_080057e4();\n            PTR_DAT_08005600[2] = PTR_DAT_08005600[2] | 4;\n          }\n        }\n      }\n      else if (*(uint *)(PTR_DAT_08005748 + 0x10) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x34)) {\n        iVar2 = check_if_limit_exceeded_08005360();\n        if (iVar2 != 0) {\n          *(int *)(PTR_DAT_08005748 + 0x1c) =\n               *(int *)(PTR_DAT_08005748 + 0x1c) + *(int *)(*(int *)PTR_DAT_0800574c + 0x30);\n          if (*(uint *)(*(int *)PTR_DAT_0800574c + 0x3c) <= *(uint *)(PTR_DAT_08005748 + 0x1c)) {\n            *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n                 *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x3c);\n          }\n          calculate_local_value_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n      else if (*(uint *)(PTR_DAT_08005748 + 0x10) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x38)) {\n        if (*(int *)(PTR_DAT_08005748 + 0x1c) != *(int *)(*(int *)PTR_DAT_0800574c + 0x3c)) {\n          *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n               *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x3c);\n          calculate_local_value_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n      else if (*(int *)(PTR_DAT_08005748 + 0x10) == *(int *)(*(int *)PTR_DAT_0800574c + 0x38)) {\n        if (*(int *)(PTR_DAT_08005748 + 0x1c) == *(int *)(*(int *)PTR_DAT_0800574c + 0x3c)) {\n          *(undefined4 *)(PTR_DAT_08005748 + 0x18) = DAT_08005750;\n        }\n        else {\n          *(int *)(PTR_DAT_08005748 + 0x18) = 420000 - *(int *)(PTR_DAT_08005748 + 0x18);\n        }\n      }\n      else {\n        iVar2 = check_if_limit_exceeded_08005360();\n        if (iVar2 != 0) {\n          if (*(uint *)(PTR_DAT_08005748 + 0x20) < *(uint *)(PTR_DAT_08005748 + 0x1c)) {\n            *(int *)(PTR_DAT_08005748 + 0x1c) =\n                 *(int *)(PTR_DAT_08005748 + 0x1c) - *(int *)(*(int *)PTR_DAT_0800574c + 0x30);\n          }\n          else {\n            *(uint *)(PTR_DAT_08005748 + 0x1c) = *(uint *)(PTR_DAT_08005748 + 0x1c) >> 1;\n          }\n          if (*(uint *)(PTR_DAT_08005748 + 0x1c) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x2c)) {\n            *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n                 *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x2c);\n          }\n          calculate_local_value_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n    }\n    else {\n      *(undefined2 *)PTR_DAT_08005754 = 0;\n      *(undefined4 *)PTR_DAT_0800574c = 0;\n      increment_second_char_if_not_equal_08002f40();\n    }\n  }\n  *(ushort *)PTR_DAT_08005754 = *(ushort *)PTR_DAT_08005754 ^ *(ushort *)(PTR_DAT_08005758 + 0x18);\n  *(ushort *)PTR_DAT_0800575c = *(ushort *)PTR_DAT_0800575c ^ *(ushort *)(PTR_DAT_08005758 + 0x1a);\n  return;\n}\n\n",
            "called": [
                "FUN_08005360",
                "FUN_080057e4",
                "FUN_080052dc",
                "FUN_08005324",
                "FUN_08002f74",
                "FUN_08002f40"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": false,
            "current_name": "FUNC_080053a0"
        },
        "FUN_080092c4": {
            "renaming": {
                "iVar1": "index",
                "puVar2": "data_pointer",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "FUN_080092c4": "initialize_and_run_program_080092c4"
            },
            "code": "void initialize_and_run_program_080092c4(void)\n{\n  int index;\n  undefined4 *data_pointer;\n  code *jump_table;\n  for (index = 0; PTR_DATA_START + index < PTR_DATA_END; index += 4) {\n    *(undefined4 *)(PTR_DATA_START + index) = *(undefined4 *)(DATA_START + index);\n  }\n  for (data_pointer = (undefined4 *)PTR_ZERO_START; data_pointer < PTR_ZERO_END; data_pointer++) {\n    *data_pointer = 0;\n  }\n  set_bit_and_clear_mask();\n  execute_functions();\n  jump_table = (code *)0x80092fa;\n  run_program();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_0800b3e8",
                "FUN_0800756c",
                "FUN_08007540"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080092c4",
            "calling": [],
            "imported": true,
            "current_name": "initialize_and_run_program_080092c4"
        },
        "FUN_08008250": {
            "renaming": {
                "param_1": "memoryAddress",
                "FUN_08008250": "waitUntilMemoryWriteIsReadyThenWriteToMemory_08008250"
            },
            "code": "void waitUntilMemoryWriteIsReadyThenWriteToMemory_08008250(void* memoryAddress)\n{\n  waitForFlagToBeSetThenWriteToMemory_08007e1c(memoryAddress);\n  return;\n}",
            "called": [
                "FUN_08007e1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008250",
            "calling": [
                "FUN_0800369c",
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_08003826",
                "FUN_080036f0"
            ],
            "imported": true,
            "current_name": "waitUntilMemoryWriteIsReadyThenWriteToMemory_08008250"
        },
        "FUN_0800184c": {
            "renaming": {
                "iVar1": "parse_result",
                "param_1": "output_string",
                "param_2": "output_string_size",
                "param_3": "string_index",
                "param_4": "input_string",
                "uVar2": "parse_success",
                "current_char": "current_input_char",
                "FUN_0800184c": "check_string_and_parse_integer_0800184c"
            },
            "code": "int check_string_and_parse_integer_0800184c(byte *output_string, int output_string_size, int string_index, byte *input_string) {\n  int parse_result;\n  byte current_char = input_string[0];\n  if (current_char == '\\0') {\n    return 0;\n  }\n  else {\n    output_string[0] = *(byte *)(string_index + (uint)current_char);\n    if ((output_string[0] < 0x41) || (0x5a < output_string[0])) {\n      *PTR_DAT_080018c8 = 2;\n      return 0;\n    }\n    else {\n      input_string[0] = input_string[0] + 1;\n      parse_result = parse_integer_from_string_08002638(string_index, input_string, output_string_size);\n      if (parse_result == 0) {\n        *PTR_DAT_080018c8 = 1;\n        return 0;\n      }\n      else {\n        return 1;\n      }\n    }\n  }\n}",
            "called": [
                "FUN_08002638"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800184c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": true,
            "current_name": "check_string_and_parse_integer_0800184c"
        },
        "FUN_08001f00": {
            "renaming": {
                "FUN_08001f00": "FUNC_08001f00"
            },
            "code": "\nvoid FUNC_08001f00(int param_1,undefined4 *param_2,int param_3,byte param_4,byte param_5,byte param_6\n                 ,undefined4 param_7,char param_8,undefined4 param_9,char param_10)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  int iVar3;\n  uint uVar4;\n  undefined8 uVar5;\n  undefined8 uVar6;\n  uint local_6c [4];\n  undefined4 local_5c;\n  undefined4 local_58;\n  undefined4 local_54;\n  undefined4 local_50;\n  undefined4 local_4c;\n  undefined4 local_48;\n  ushort local_42;\n  undefined4 local_40;\n  undefined4 local_3c;\n  undefined4 local_38;\n  uint local_34;\n  undefined4 local_30;\n  undefined4 local_2c;\n  char local_27;\n  ushort local_26;\n  undefined4 local_24;\n  uint local_20;\n  uint local_1c;\n  \n  local_2c = FUNC_08008cdc(*(undefined4 *)((uint)param_4 * 4 + param_1),\n                          *(undefined4 *)((uint)param_4 * 4 + param_3));\n  local_30 = FUNC_08008cdc(*(undefined4 *)((uint)param_5 * 4 + param_1),\n                          *(undefined4 *)((uint)param_5 * 4 + param_3));\n  local_34 = FUNC_08008cd8(param_2[param_6],*(undefined4 *)((uint)param_6 * 4 + param_1));\n  local_1c = *(uint *)((uint)param_4 * 4 + param_3) ^ 0x80000000;\n  local_20 = *(uint *)((uint)param_5 * 4 + param_3) ^ 0x80000000;\n  local_38 = FUNC_08008cd8(param_2[param_4],local_2c);\n  local_3c = FUNC_08008cd8(param_2[param_5],local_30);\n  uVar1 = FUNC_08008eec(local_1c,local_3c);\n  uVar2 = FUNC_08008eec(local_20,local_38);\n  uVar1 = FUNC_08008cd8(uVar1,uVar2);\n  uVar5 = reverse_and_improve_08008590(uVar1);\n  uVar1 = FUNC_08008eec(local_1c,local_38);\n  uVar2 = FUNC_08008eec(local_20,local_3c);\n  uVar1 = FUNC_08008cdc(uVar1,uVar2);\n  uVar6 = reverse_and_improve_08008590(uVar1);\n  uVar5 = thunk_calculate_08009990((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                             (int)((ulonglong)uVar6 >> 0x20));\n  local_24 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n  if (param_10 == '\\0') {\n    iVar3 = check_results_are_valid_0800923c(local_24,0);\n    if (iVar3 != 0) {\n      uVar5 = reverse_and_improve_08008590(local_24);\n      uVar5 = FUNC_080082d4((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),DAT_08002240,DAT_08002244);\n      local_24 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    }\n  }\n  else {\n    iVar3 = check_results_are_calculated_and_concatenated_08009250(local_24,0);\n    if (iVar3 != 0) {\n      uVar5 = reverse_and_improve_08008590(local_24);\n      uVar5 = FUNC_080082d0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),DAT_08002240,DAT_08002244);\n      local_24 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    }\n  }\n  uVar1 = FUNC_08008eec(local_24,param_9);\n  uVar5 = reverse_and_improve_08008590(uVar1);\n  uVar6 = reverse_and_improve_08008590(local_34 & 0x7fffffff);\n  uVar5 = calculate_hypotenuse_0800981c((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                       (int)((ulonglong)uVar6 >> 0x20));\n  local_40 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n  iVar3 = check_if_results_calculated_and_concatenated_08009214(local_40,0);\n  if (iVar3 == 0) {\n    uVar1 = FUNC_08009054(local_40,*(undefined4 *)(PTR_DAT_08002248 + 0x1c));\n    uVar5 = reverse_and_improve_08008590(uVar1);\n    uVar5 = calculate_result_080094c0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    local_42 = calculate_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    if (param_8 != '\\0') {\n      uVar1 = calculate_hash_08008e44(local_42);\n      param_7 = FUNC_08008eec(param_7,uVar1);\n    }\n    uVar1 = calculate_hash_08008e44(local_42);\n    local_48 = FUNC_08009054(local_24,uVar1);\n    uVar1 = calculate_hash_08008e44(local_42);\n    local_4c = FUNC_08009054(local_34,uVar1);\n    uVar5 = reverse_and_improve_08008590(local_48);\n    uVar5 = FUNC_08008640((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),0,DAT_0800224c);\n    uVar6 = reverse_and_improve_08008590(local_48);\n    uVar5 = FUNC_08008640((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                         (int)((ulonglong)uVar6 >> 0x20));\n    uVar5 = FUNC_080082d0(0,DAT_08002250,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    local_50 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    local_54 = local_48;\n    local_27 = '\\0';\n    local_6c[param_6] = *(uint *)(param_1 + (uint)param_6 * 4);\n    for (local_26 = 1; local_26 < local_42; local_26 = local_26 + 1) {\n      if ((int)local_27 < (int)(uint)(byte)PTR_DAT_08002248[0x3e]) {\n        uVar1 = FUNC_08008eec(local_1c,local_54);\n        uVar2 = FUNC_08008eec(local_20,local_50);\n        local_6c[3] = FUNC_08008cdc(uVar1,uVar2);\n        uVar1 = FUNC_08008eec(local_1c,local_50);\n        uVar2 = FUNC_08008eec(local_20,local_54);\n        local_1c = FUNC_08008cd8(uVar1,uVar2);\n        local_20 = local_6c[3];\n        local_27 = local_27 + '\\x01';\n      }\n      else {\n        uVar1 = calculate_hash_08008e44(local_26);\n        uVar1 = FUNC_08008eec(uVar1,local_48);\n        uVar5 = reverse_and_improve_08008590(uVar1);\n        uVar5 = calculate_result_08009410((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        local_58 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        uVar1 = calculate_hash_08008e44(local_26);\n        uVar1 = FUNC_08008eec(uVar1,local_48);\n        uVar5 = reverse_and_improve_08008590(uVar1);\n        uVar5 = calculate_result_080096e8((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        local_5c = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        uVar1 = FUNC_08008eec(*(uint *)((uint)param_4 * 4 + param_3) ^ 0x80000000,local_58);\n        uVar2 = FUNC_08008eec(*(undefined4 *)((uint)param_5 * 4 + param_3),local_5c);\n        local_1c = FUNC_08008cdc(uVar1,uVar2);\n        uVar1 = FUNC_08008eec(*(uint *)((uint)param_4 * 4 + param_3) ^ 0x80000000,local_5c);\n        uVar2 = FUNC_08008eec(*(undefined4 *)((uint)param_5 * 4 + param_3),local_58);\n        local_20 = FUNC_08008cd8(uVar1,uVar2);\n        local_27 = '\\0';\n      }\n      uVar4 = FUNC_08008cdc(local_2c,local_1c);\n      local_6c[param_4] = uVar4;\n      uVar4 = FUNC_08008cdc(local_30,local_20);\n      local_6c[param_5] = uVar4;\n      uVar4 = FUNC_08008cdc(local_6c[param_6],local_4c);\n      local_6c[param_6] = uVar4;\n      process_data_if_not_already_processed_08001e98(local_6c[0],local_6c[1],local_6c[2],param_7,param_8);\n      if (*PTR_DAT_08002404 != '\\0') {\n        return;\n      }\n    }\n    process_data_if_not_already_processed_08001e98(*param_2,param_2[1],param_2[2],param_7,param_8);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080082d4",
                "FUN_08009214",
                "FUN_080094c0",
                "thunk_FUN_08009990",
                "FUN_080082d0",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_080096e8",
                "FUN_08008cdc",
                "FUN_08009250",
                "FUN_08009054",
                "FUN_08001e98",
                "FUN_0800923c",
                "FUN_08008eec",
                "FUN_08009410",
                "FUN_0800981c",
                "FUN_08008bf0",
                "FUN_08008c30",
                "FUN_08008cd8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f00",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "FUNC_08001f00"
        },
        "FUN_08006ce0": {
            "renaming": {
                "FUN_08006ce0": "set_display_mode_and_return_08006ce0",
                "param_1": "display_mode_param"
            },
            "code": "void set_display_mode_and_return_08006ce0(undefined4 display_mode_param){\n  set_display_mode_08006950(display_mode_param);\n  return;\n}",
            "called": [
                "FUN_08006950"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ce0",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": true,
            "current_name": "set_display_mode_and_return_08006ce0"
        },
        "FUN_08006d4a": {
            "renaming": {
                "FUN_08006d4a": "setBitInArray_08006d4a",
                "param_1": "character",
                "set_bit_in_array_080069e4": "setBitInArrayAtIndex"
            },
            "code": "void setBitInArray_08006d4a(char character) {\n  setBitInArray_08006d4aAtIndex((int) character);\n  return;\n}",
            "called": [
                "FUN_080069e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d4a",
            "calling": [],
            "imported": true,
            "current_name": "setBitInArray_08006d4a"
        },
        "FUN_08008894": {
            "renaming": {
                "FUN_08008894": "FUNC_08008894"
            },
            "code": "\nulonglong FUNC_08008894(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_result_08008a02();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_080089b2;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_080089b2:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_08008a02"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008894",
            "calling": [
                "FUN_08001994",
                "FUN_08003004",
                "FUN_080005b4",
                "FUN_08009990",
                "FUN_080098d0",
                "FUN_0800af78",
                "FUN_0800a1bc"
            ],
            "imported": false,
            "current_name": "FUNC_08008894"
        },
        "FUN_08000374": {
            "renaming": {
                "FUN_08000374": "writeDataToBuffer_08000374",
                "param_1": "dataStartIndex",
                "local_1c": "remainingDataSize",
                "local_9": "checksum",
                "local_18": "currentData",
                "param_2": "data",
                "param_3": "dataSize",
                "local_14": "currentIndex"
            },
            "code": "void writeDataToBuffer_08000374(int dataStartIndex, char *data, int dataSize) {\n  int remainingDataSize = dataSize;\n  char *currentData = data;\n  int currentIndex = dataStartIndex;\n  \n  char checksum = 0;\n  \n  if (*(int *)PTR_DAT_080003e8 == 0) {\n    initialize_buffer_080002f0();\n    currentData = data;\n    currentIndex = dataStartIndex;\n  }\n  \n  while (remainingDataSize != 0) {\n    checksum = (checksum != \"\\0\") + *currentData;\n    store_data_08000340(currentIndex, *currentData);\n    currentData++;\n    currentIndex++;\n    remainingDataSize--;\n  }\n  \n  store_data_08000340(currentIndex, checksum);\n  return;\n}",
            "called": [
                "FUN_08000340",
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000374",
            "calling": [
                "FUN_08004c2a",
                "FUN_08004bc0",
                "FUN_08004bf4"
            ],
            "imported": true,
            "current_name": "writeDataToBuffer_08000374"
        },
        "FUN_080037fc": {
            "renaming": {
                "local_c": "absoluteValue",
                "FUN_080037fc": "printAbsoluteValue_080037fc",
                "param_1": "value",
                "calculate_and_send_digits_08003778": "calculateAndSendDigits"
            },
            "code": "void printAbsoluteValue_080037fc(int value)\n{\n  int absoluteValue;\n  absoluteValue = value;\n  if (value < 0) {\n    waitUntilMemoryWriteIsReadyThenWriteToMemory_08008250(0x2d);\n    absoluteValue = -value;\n  }\n  calculateAndSendDigits(absoluteValue);\n  return;\n}",
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037fc",
            "calling": [
                "FUN_080046d0",
                "FUN_08004900",
                "FUN_08004250"
            ],
            "imported": true,
            "current_name": "printAbsoluteValue_080037fc"
        },
        "FUN_0800a1bc": {
            "renaming": {
                "uVar10": "mask",
                "uVar11": "bit_count",
                "uVar12": "temp_remainder",
                "uVar13": "divisor_mask",
                "iVar3": "shift",
                "uVar14": "temp",
                "uVar1": "quotient",
                "temp_dividend": "temp_dividend",
                "param_1": "dividend",
                "FUN_0800a1bc": "calculate_0800a1bc",
                "param_2": "divisor",
                "uVar2": "bit",
                "uVar5": "temp_high",
                "uVar4": "temp_mask",
                "uVar7": "quotient_sign_bit",
                "uVar6": "mask",
                "uVar9": "temp_quotient",
                "uVar8": "remainder"
            },
            "code": "uint calculate_0800a1bc(uint dividend, uint divisor)\n{\n  uint quotient = 0;\n  uint bit = 0x80000000;\n  uint remainder = dividend;\n  if ((DAT_0800a340 & ~divisor) == 0) {\n    uint64_t temp = FUNC_08008640(dividend, divisor, dividend, divisor);\n    quotient = FUNC_080082d4((int)temp, (int)(temp >> 0x20), dividend, divisor);\n    return quotient;\n  }\n  if ((int)divisor < 1) {\n    if ((divisor & 0x7fffffff | dividend) == 0) {\n      return dividend;\n    }\n    if (divisor != 0) {\n      uint64_t temp = FUNC_080082d0(dividend, divisor, dividend);\n      uint32_t temp_high = (uint32_t)(temp >> 0x20);\n      quotient = FUNC_08008894((int)temp, temp_high, (int)temp, temp_high);\n      return quotient;\n    }\n    do {\n      uint temp_dividend = dividend;\n      quotient = temp_dividend >> 0xb;\n      divisor = divisor - 0x15;\n      dividend = temp_dividend << 0x15;\n    } while (quotient == 0);\n    bit = divisor;\n    if (-1 < (int)dividend) goto LAB_0800a290;\n    uint bit_count = 0x20;\n    uint mask = 0xffffffff;\n    divisor = dividend;\n  }\n  else {\n    bit = (int)divisor >> 0x14;\n    quotient = divisor;\n    divisor = dividend;\n    if (bit != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    divisor = 0;\n    bit_count = quotient;\n    do {\n      mask = divisor;\n      quotient = bit_count << 1;\n      int shift = bit_count << 0xc;\n      divisor = mask + 1;\n      bit_count = quotient;\n    } while (-1 < shift);\n    bit_count = 0x20 - bit_count;\n    divisor = bit;\n    mask = dividend << (bit_count & 0xff);\n  }\n  quotient = dividend >> (bit_count & 0xff) | quotient;\n  divisor = divisor - mask;\n  if (-1 < (int)(divisor << 0x1f)) {\n    quotient = quotient * 2 - ((int)mask >> 0x1f);\n    mask = mask << 1;\n  }\n  uint divisor_bit = 0x16;\n  uint divisor_mask = 0x200000;\n  do {\n    int temp_divisor = divisor_bit + divisor_mask;\n    if (temp_divisor <= (int)quotient) {\n      quotient = quotient - temp_divisor;\n      divisor_bit = temp_divisor + divisor_mask;\n      remainder = remainder + divisor_mask;\n    }\n    divisor_bit = divisor_bit - 1;\n    quotient = quotient * 2 - ((int)mask >> 0x1f);\n    divisor_mask = divisor_mask >> 1;\n    mask = mask << 1;\n  } while (divisor_bit != 0);\n  uint quotient_high_bit = 0x20;\n  uint quotient_sign_bit = 0x80000000;\n  divisor_mask = divisor_bit;\n  do {\n    uint temp_mask = quotient_sign_bit + divisor_bit;\n    uint temp_remainder = remainder;\n    if ((int)remainder < (int)quotient) {\n      if ((int)temp_mask < 0) {\n        if (-1 < (int)(temp_mask + quotient_sign_bit)) {\n          temp_remainder = remainder + 1;\n        }\n      }\n      uint temp_quotient = quotient - remainder;\n      quotient = temp_quotient;\n      if (mask < temp_mask) {\n        temp_quotient = temp_quotient - 1;\n      }\n      remainder = temp_remainder;\n      divisor_bit = temp_mask;\n    }\n    else if ((quotient == remainder) && (temp_mask <= mask)) {\n      if ((int)temp_mask < 0) goto LAB_0800a26a;\n      uint temp_quotient = 0;\n      divisor_bit = quotient;\n      goto LAB_0800a262;\n    }\n    quotient_high_bit = quotient_high_bit - 1;\n    quotient_sign_bit = quotient_sign_bit >> 1;\n    quotient = quotient * 2 - ((int)mask >> 0x1f);\n    mask = mask << 1;\n    if (quotient_high_bit == 0) {\n      if ((quotient | mask) == 0) {\n        divisor_mask = divisor_bit >> 1;\n      }\n      else if (divisor_bit == 0xffffffff) {\n        quotient_bit_count = quotient_bit_count + 1;\n      }\n      else {\n        divisor_mask = quotient_bit_count + 1 >> 1;\n      }\n      if ((quotient_bit_count & 1) != 0) {\n        divisor_mask = divisor_mask | 0x80000000;\n      }\n      return divisor_mask;\n    }\n  } while(true);\n}\n",
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a1bc",
            "calling": [
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "imported": true,
            "current_name": "calculate_0800a1bc"
        },
        "FUN_0800525c": {
            "renaming": {
                "do_nothing_08005208": "doSomethingElse",
                "checkDataPointerAndUpdateStatusIfNotZeroOrThree_08002fd4": "checkAndUpdateStatus",
                "*PTR_DAT_080052a8": "dataPointer",
                "do_nothing_and_return_08005250": "doNothingAndReturn",
                "param_1": "newData",
                "do_nothing_0800522c": "doNothing",
                "FUN_0800525c": "updateData_0800525c",
                "do_nothing_08005220": "doSomething"
            },
            "code": "void updateData_0800525c(char newData){\n  int currentData = (int)newData;\n  int* *PTR_DAT_080052a8 = (int*)0x080052a8;\n  if (currentData != (uint)(byte)**PTR_DAT_080052a8) {\n    checkAndUpdateStatus();\n    if (newData == '\\0') {\n      do_nothing_and_return_08005250();\n    }\n    else {\n      if (newData < '\\x01') {\n        do_nothing_0800522c();\n      }\n      else {\n        do_nothing_08005220();\n      }\n      do_nothing_08005208();\n    }\n    **PTR_DAT_080052a8 = currentData;\n  }\n  return;\n}",
            "called": [
                "FUN_08002fd4",
                "FUN_0800522c",
                "FUN_08005250",
                "FUN_08005208",
                "FUN_08005220"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800525c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": true,
            "current_name": "updateData_0800525c"
        },
        "FUN_080073d4": {
            "renaming": {
                "param_1": "bit_index",
                "FUN_080073d4": "set_bit_in_short_array_080073d4"
            },
            "code": "void set_bit_in_short_array_080073d4(uint bit_index) {\n    uint array_index = bit_index >> 4;\n    uint array_offset = (array_index * 0x400) + 0x4002001a;\n    uint bit_shift = bit_index & 0xf;\n    short* array_ptr = (short*)array_offset;\n    *array_ptr = (short)(1 << bit_shift);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073d4",
            "calling": [
                "FUN_08007520"
            ],
            "imported": true,
            "current_name": "set_bit_in_short_array_080073d4"
        },
        "FUN_08006dfe": {
            "renaming": {
                "param_1": "bit_position",
                "FUN_08006dfe": "set_bit_08006dfe",
                "set_bit_at_position_08006a8c": "set_bit_at_position"
            },
            "code": "void set_bit_08006dfe(char bit_position)\n{\n  set_bit_08006dfe_at_position(bit_position);\n  return;\n}",
            "called": [
                "FUN_08006a8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dfe",
            "calling": [],
            "imported": true,
            "current_name": "set_bit_08006dfe"
        },
        "FUN_08006d66": {
            "renaming": {
                "FUN_08006d66": "synchronize_data_08006d66"
            },
            "code": "void synchronize_data_08006d66() {\n  synchronize_data_08006d66_08006c70();\n  return;\n}",
            "called": [
                "FUN_08006c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d66",
            "calling": [],
            "imported": true,
            "current_name": "synchronize_data_08006d66"
        },
        "FUN_08006e88": {
            "renaming": {
                "local_c": "index",
                "iVar3": "index",
                "uVar1": "bit_mask",
                "param_1": "data_out",
                "FUN_08006e88": "update_data_08006e88",
                "param_2": "data_in",
                "uVar2": "bit_value",
                "temp_data": "temp_data"
            },
            "code": "void update_data_08006e88(uint *data_out, uint *data_in)\n{\n  uint bit_mask;\n  uint bit_value;\n  int index;\n  uint temp_data;\n  \n  for (index = 0; index < 16; index++) {\n    bit_mask = 1 << (index & 0xff);\n    bit_value = *data_in & bit_mask;\n    if (bit_value == bit_mask) {\n      if ((data_in[1] == 2) || (data_in[1] == 0x12)) {\n        temp_data = data_in[4];\n        data_out[(index >> 3) + 8] &= ~(0xf << ((index & 7) << 2));\n        data_out[(index >> 3) + 8] |= temp_data << ((index & 7) << 2);\n      }\n      *data_out &= ~(3 << ((index & 0x7f) << 1));\n      *data_out |= (data_in[1] & 3) << ((index & 0x7f) << 1);\n      if ((((data_in[1] == 1) || (data_in[1] == 2)) || (data_in[1] == 0x11)) || (data_in[1] == 0x12)) {\n        data_out[2] &= ~(3 << ((index & 0x7f) << 1));\n        data_out[2] |= data_in[3] << ((index & 0x7f) << 1);\n        data_out[1] &= ~(1 << (index & 0xff));\n        data_out[1] |= (data_in[1] >> 4 & 1) << (index & 0xff);\n      }\n      data_out[3] &= ~(3 << ((index & 0x7f) << 1));\n      data_out[3] |= data_in[2] << ((index & 0x7f) << 1);\n      if ((data_in[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_0800719c + 0x44) |= 0x4000;\n        *(uint *)(PTR_DAT_080071a0 + ((index >> 2) + 2) * 4) = ~(0xf << ((index & 3) << 2)) & *(uint *)(PTR_DAT_080071a0 + ((index >> 2) + 2) * 4);\n        if (data_out == PTR_DAT_080071a4) {\n          index = 0;\n        }\n        else if (data_out == PTR_DAT_080071a8) {\n          index = 1;\n        }\n        else if (data_out == PTR_DAT_080071ac) {\n          index = 2;\n        }\n        else if (data_out == PTR_DAT_080071b0) {\n          index = 3;\n        }\n        else if (data_out == PTR_DAT_080071b4) {\n          index = 4;\n        }\n        else if (data_out == PTR_DAT_080071b8) {\n          index = 5;\n        }\n        else if (data_out == PTR_DAT_080071bc) {\n          index = 6;\n        }\n        else if (data_out == PTR_DAT_080071c0) {\n          index = 7;\n        }\n        else if (data_out == PTR_DAT_080071c4) {\n          index = 8;\n        }\n        else {\n          index = 10;\n        }\n        *(uint *)(PTR_DAT_080071a0 + ((index >> 2) + 2) * 4) = index << ((index & 3) << 2) | *(uint *)(PTR_DAT_080071a0 + ((index >> 2) + 2) * 4);\n        *PTR_DAT_080071cc &= ~bit_value;\n        PTR_DAT_080071cc[1] &= ~bit_value;\n        if ((data_in[1] & 0x10000) != 0) {\n          *PTR_DAT_080071cc |= bit_value;\n        }\n        if ((data_in[1] & 0x20000) != 0) {\n          PTR_DAT_080071cc[1] |= bit_value;\n        }\n        PTR_DAT_080071cc[2] &= ~bit_value;\n        PTR_DAT_080071cc[3] &= ~bit_value;\n        if ((data_in[1] & 0x100000) != 0) {\n          PTR_DAT_080071cc[2] |= bit_value;\n        }\n        if ((data_in[1] & 0x200000) != 0) {\n          PTR_DAT_080071cc[3] |= bit_value;\n        }\n      }\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e88",
            "calling": [
                "FUN_0800778c",
                "FUN_0800640c"
            ],
            "imported": true,
            "current_name": "update_data_08006e88"
        },
        "FUN_080001e0": {
            "renaming": {
                "FUN_080001e0": "do_nothing_080001e0"
            },
            "code": "\nvoid do_nothing_080001e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001e0",
            "calling": [
                "FUN_08000220"
            ],
            "imported": true,
            "current_name": "do_nothing_080001e0"
        },
        "FUN_080036f0": {
            "renaming": {
                "local_c": "mask",
                "uVar1": "bit",
                "param_1": "number",
                "param_2": "num_bits",
                "FUN_080036f0": "print_binary_representation_080036f0",
                "local_10": "i"
            },
            "code": "void print_binary_representation_080036f0(uint number, int num_bits) {\n  uint mask = 1 << (num_bits - 1);\n  for (int i = 0; i < num_bits; i++) {\n    if ((mask & number) == 0) {\n      char bit = '0';\n    }\n    else {\n      char bit = '1';\n    }\n    waitUntilMemoryWriteIsReadyThenWriteToMemory_08008250(bit);\n    mask = mask >> 1;\n  }\n  return;\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f0",
            "calling": [
                "FUN_08003740",
                "FUN_0800375c"
            ],
            "imported": true,
            "current_name": "print_binary_representation_080036f0"
        },
        "FUN_08002edc": {
            "renaming": {
                "calculate_shift_and_sum_between_strings_08002e08": "calculate_shift_and_sum",
                "calculate_and_concatenate_float_values_08002ba8": "calculate_float_values",
                "process_data_08002a94": "process_data",
                "FUN_08002edc": "process_data_and_calculate_values_08002edc"
            },
            "code": "void process_data_and_calculate_values_08002edc(void)\n{\n  process_data_08002a94();\n  calculate_and_concatenate_float_values_08002ba8();\n  calculate_shift_and_sum_between_strings_08002e08();\n  return;\n}",
            "called": [
                "FUN_08002a94",
                "FUN_08002e08",
                "FUN_08002ba8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002edc",
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "imported": true,
            "current_name": "process_data_and_calculate_values_08002edc"
        },
        "FUN_0800375c": {
            "renaming": {
                "param_1": "number",
                "FUN_0800375c": "print_binary_representation_0800375c"
            },
            "code": "void print_binary_representation_0800375c(unsigned short number, int num_bits){\n    print_binary_representation_0800375c_080036f0(number, num_bits);\n    return;\n}",
            "called": [
                "FUN_080036f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800375c",
            "calling": [
                "FUN_08004250"
            ],
            "imported": true,
            "current_name": "print_binary_representation_0800375c"
        },
        "FUN_08009990": {
            "renaming": {
                "iVar1": "diff",
                "constant4": "2",
                "constant5": "3",
                "constant6": "0xffffffff",
                "param_1": "a",
                "param_2": "b",
                "param_3": "c",
                "param_4": "d",
                "uVar3": "flags",
                "uVar2": "temp",
                "constant1": "0x7fffffff",
                "FUN_08009990": "calculate_08009990",
                "uVar5": "temp",
                "constant2": "0xc0100000",
                "uVar4": "result",
                "constant3": "0x3d00000",
                "uVar6": "concat"
            },
            "code": "uint calculate_08009990(uint a, uint b, uint c, uint d)\n{\n  int diff;\n  uint result;\n  uint flags;\n  uint temp;\n  uint constant1 = 0x7fffffff;\n  uint constant2 = 0xc0100000;\n  uint constant3 = 0x3d00000;\n  uint constant4 = 2;\n  uint constant5 = 3;\n  uint constant6 = 0xffffffff;\n  unsigned long long concat = ((unsigned long long)DAT_08009b04 << 32) | DAT_08009b00;\n  if (DAT_08009b18 < ((d & constant1) | (-c | c) >> 0x1f) || DAT_08009b18 < ((b & constant1) | (-a | a) >> 0x1f))\n  {\n    result = FUNC_080082d4(c, d, a, b);\n  }\n  else\n  {\n    if ((d + constant2 | c) == 0)\n    {\n      result = FUNC_0800af78();\n      return result;\n    }\n    flags = ((int)d >> 0x1e & constant4) | b >> 0x1f;\n    if ((a | b) == 0)\n    {\n      temp = DAT_08009af0;\n      if (flags != constant4 && flags == constant5)\n      {\n        temp = DAT_08009af8;\n      }\n      result = temp;\n    }\n    else\n    {\n      if ((d | c) != 0)\n      {\n        if (d == DAT_08009b18)\n        {\n          flags--;\n          if (b == d)\n          {\n            if (constant4 < flags)\n            {\n              return DAT_08009b10;\n            }\n            return *(uint *)(PTR_DAT_08009b20 + flags * 8);\n          }\n          if (flags < constant4)\n          {\n            return *(uint *)(PTR_DAT_08009b1c + flags * 8);\n          }\n          return 0;\n        }\n        if (b != DAT_08009b18)\n        {\n          diff = (int)(b - d) >> 0x14;\n          if ((int)(b - d) < constant3)\n          {\n            if ((int)d < 0 && diff + constant4 < 0 != SCARRY4(diff, constant4))\n            {\n              concat = 0;\n            }\n            else\n            {\n              FUNC_08008894(a, b, c, d, d);\n              do_nothing_0800b2cc();\n              concat = FUNC_0800af78();\n            }\n          }\n          temp = (uint)(concat >> 0x20);\n          result = (uint)concat;\n          if (flags == 1)\n          {\n            return result;\n          }\n          if (flags == constant4)\n          {\n            concat = FUNC_080082d0(result, temp, DAT_08009ae8, DAT_08009aec);\n            result = FUNC_080082d0(DAT_08009af0, DAT_08009af4, (int)concat, (int)(concat >> 0x20));\n            return result;\n          }\n          if (flags == 0)\n          {\n            return result;\n          }\n          concat = FUNC_080082d0(result, temp, DAT_08009ae8, DAT_08009aec);\n          result = FUNC_080082d0((int)concat, (int)(concat >> 0x20), DAT_08009af0, DAT_08009af4);\n          return result;\n        }\n      }\n      result = DAT_08009b08;\n      if ((int)b >= 0)\n      {\n        result = DAT_08009b00;\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_080082d4",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_0800af78",
                "FUN_080082d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009990",
            "calling": [
                "thunk_FUN_08009990"
            ],
            "imported": true,
            "current_name": "calculate_08009990"
        },
        "FUN_08007e58": {
            "renaming": {
                "DAT_08007e80": "DAT_BIT_ARRAY",
                "FUN_08007e58": "is_bit_set_08007e58"
            },
            "code": "bool is_bit_set_08007e58(void)\n{\n  const int BIT_MASK = 0x20;\n  bool is_set = (*DAT_08007e80 & BIT_MASK) != 0;\n  return is_set;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e58",
            "calling": [
                "FUN_08008286"
            ],
            "imported": true,
            "current_name": "is_bit_set_08007e58"
        },
        "FUN_080059f8": {
            "renaming": {
                "DAT_08005a4c": "data_array",
                "do_nothing_08005a5c": "do_nothing",
                "FUN_080059f8": "reset_values_080059f8"
            },
            "code": "void reset_values_080059f8(void)\n{\n    int* ptr = (int*) DAT_08005a4c;\n    ptr[4] = -1;\n    ptr[5] = 0;\n    ptr[6] = -1;\n    ptr[7] = 0;\n    ptr[2] = -1;\n    ptr[3] = 0;\n    ptr[8] = -1;\n    ptr[9] = 0;\n    ptr[10] = -1;\n    ptr[11] = 0;\n    do_nothing_08005a5c();\n}",
            "called": [
                "FUN_08005a5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [],
            "imported": true,
            "current_name": "reset_values_080059f8"
        },
        "FUN_08003f34": {
            "renaming": {
                "bVar2": "current_char",
                "bVar1": "buffer_index",
                "PTR_DAT_08004020": "buffer_index_ptr",
                "PTR_DAT_08004024": "command_buffer",
                "resetData_08003980": "reset_data_08003980",
                "*PTR_DAT_08004020": "*buffer_index_ptr",
                "uVar3": "error_code",
                "processGrblCommand_08003b98": "process_grbl_command_08003b98",
                "*PTR_DAT_08004028": "*is_in_parentheses_ptr",
                "PTR_DAT_08004028": "is_in_parentheses_ptr",
                "printErrorMessage_08004030": "print_error_message_08004030",
                "checkAndUpdateStatus_08003a74": "check_and_update_status_08003a74",
                "is_in_parentheses": "is_in_parentheses",
                "*PTR_DAT_08004024": "*command_buffer",
                "FUN_08003f34": "handle_user_input_and_process_command_08003f34"
            },
            "code": "void handle_user_input_and_process_command_08003f34(void)\n{\n  char current_char;\n  char is_in_parentheses = 0;\n  char PTR_DAT_08004024[32];\n  int PTR_DAT_08004024_index = 0;\n  while(1) {\n    current_char = handle_user_input_08008286();\n    if (current_char == 0xff) {\n      return;\n    }\n    if ((current_char == 10) || (current_char == 0xd)) {\n      continue;\n    }\n    if (PTR_DAT_08004024[0] == '\\0') {\n      if ((current_char > 0x20) && (current_char != 0x2f)) {\n        if (current_char == 0x28) {\n          is_in_parentheses = 1;\n        }\n        else if (PTR_DAT_08004024_index == -1) {\n          printErrorMessage_08004030(13);\n          resetData_08003980();\n        }\n        else if ((current_char < 0x61) || (current_char > 0x7a)) {\n          PTR_DAT_08004024[PTR_DAT_08004024_index] = current_char;\n          PTR_DAT_08004024_index++;\n        }\n        else {\n          PTR_DAT_08004024[PTR_DAT_08004024_index] = current_char - 0x20;\n          PTR_DAT_08004024_index++;\n        }\n      }\n    }\n    else if (current_char == 0x29) {\n      is_in_parentheses = 0;\n    }\n    if (is_in_parentheses) {\n      continue;\n    }\n    check_and_update_status_08003a74();\n    if (PTR_DAT_08004024[0] != '\\0') {\n      if (PTR_DAT_08004024_index == 0) {\n        printErrorMessage_08004030(0);\n      }\n      else {\n        PTR_DAT_08004024[PTR_DAT_08004024_index] = '\\0';\n        int error_code = process_grbl_command_08003b98(PTR_DAT_08004024);\n        printErrorMessage_08004030(error_code);\n      }\n      resetData_08003980();\n    }\n  }\n}\n",
            "called": [
                "FUN_08003a74",
                "FUN_08004030",
                "FUN_08003980",
                "FUN_08003b98",
                "FUN_08008286"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f34",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": true,
            "current_name": "handle_user_input_and_process_command_08003f34"
        },
        "FUN_080095b8": {
            "renaming": {
                "uVar1": "shifting_variable",
                "iVar4": "sign",
                "param_1": "fixed_point_number",
                "param_2": "shift_amount",
                "uVar3": "abs_fixed_point_number",
                "uVar2": "shift_amount_1",
                "uVar5": "diff_from_0x3ff",
                "FUN_080095b8": "convert_fixed_point_to_integer_080095b8"
            },
            "code": "int convert_fixed_point_to_integer_080095b8(uint fixed_point_number, uint shift_amount) {\n  uint shift_amount_1 = (shift_amount << 1) >> 0x15;\n  uint diff_from_0x3ff = shift_amount_1 - 0x3ff;\n  int sign = (int)shift_amount < 0 ? -1 : 1;\n  uint abs_fixed_point_number = shift_amount & 0xfffff | 0x100000;\n  if ((int)diff_from_0x3ff < 0x14) {\n    if ((int)diff_from_0x3ff < 0) {\n      if (diff_from_0x3ff != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    abs_fixed_point_number = abs_fixed_point_number + (0x80000 >> (diff_from_0x3ff & 0xff)) >> (0x14 - diff_from_0x3ff & 0xff);\n  }\n  else {\n    if (0x1e < diff_from_0x3ff) {\n      sign = convert_fixed_point_to_int_08008ba0();\n      return sign;\n    }\n    if ((int)diff_from_0x3ff < 0x34) {\n      uint shifting_variable = 0x80000000 >> (shift_amount_1 - 0x413 & 0xff);\n      if (CARRY4(shifting_variable, fixed_point_number) != false) {\n        abs_fixed_point_number = abs_fixed_point_number + 1;\n      }\n      abs_fixed_point_number = abs_fixed_point_number << (shift_amount_1 - 0x413 & 0xff);\n      if (diff_from_0x3ff != 0x14) {\n        abs_fixed_point_number = abs_fixed_point_number | shifting_variable + fixed_point_number >> (0x34 - diff_from_0x3ff & 0xff);\n      }\n    }\n    else {\n      abs_fixed_point_number = abs_fixed_point_number << (shift_amount_1 - 0x413 & 0xff) | fixed_point_number << (shift_amount_1 - 0x433 & 0xff);\n    }\n  }\n  return abs_fixed_point_number * sign;\n}",
            "called": [
                "FUN_08008ba0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095b8",
            "calling": [
                "FUN_08001994",
                "FUN_08003004"
            ],
            "imported": true,
            "current_name": "convert_fixed_point_to_integer_080095b8"
        },
        "FUN_08006cf6": {
            "renaming": {
                "FUN_08006cf6": "setByteInMemory_08006cf6",
                "uVar1": "shiftedBits",
                "set_byte_in_memory_08006b00": "setByte",
                "param_1": "memoryAddress",
                "get_bits_to_shift_08006998": "getBitsToShift",
                "generate_mask_08006ba0": "generateMask",
                "param_2": "bitsToShift",
                "param_3": "mask"
            },
            "code": "void setByteInMemory_08006cf6(char memoryAddress, int bitsToShift, int mask){\n  int shiftedBits = getBitsToShift();\n  int generatedMask = generateMask(shiftedBits, bitsToShift, mask);\n  setByte(memoryAddress, generatedMask);\n  return;\n}",
            "called": [
                "FUN_08006998",
                "FUN_08006b00",
                "FUN_08006ba0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cf6",
            "calling": [
                "FUN_08007a70"
            ],
            "imported": true,
            "current_name": "setByteInMemory_08006cf6"
        },
        "FUN_08002ef0": {
            "renaming": {
                "uVar1": "incremented_char",
                "FUN_08002ef0": "copy_and_increment_first_char_08002ef0",
                "*PTR_DAT_08002f1c": "*destination",
                "*PTR_DAT_08002f20": "*PTR_DAT_08002f20",
                "*PTR_DAT_08002f18": "*source",
                "increment_char_08002870": "increment_char_08002870"
            },
            "code": "void copy_and_increment_first_char_08002ef0(void)\n{\n  char* source = PTR_DAT_08002f18;\n  char* destination = PTR_DAT_08002f1c;\n  *PTR_DAT_08002f1c = *PTR_DAT_08002f18;\n  char incremented_char = increment_char_08002870(*PTR_DAT_08002f18);\n  *PTR_DAT_08002f20 = incremented_char;\n  return;\n}",
            "called": [
                "FUN_08002870"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef0",
            "calling": [
                "FUN_08002f24"
            ],
            "imported": true,
            "current_name": "copy_and_increment_first_char_08002ef0"
        },
        "FUN_08001d4c": {
            "renaming": {
                "process_data_08005790": "process_data",
                "do_nothing_08002814": "do_nothing",
                "FUN_08001d4c": "process_device_data_08001d4c",
                "local_9": "count",
                "PTR_DAT_08001dd8": "PTR_DAT",
                "FUNC_08001994": "send_message",
                "cVar1": "current_char",
                "checkIfDeviceIsConnected_080057e4": "check_device_connection"
            },
            "code": "void process_device_data_08001d4c(void)\n{\n  char current_char;\n  char count;\n  \n  process_data();\n  send_message(4,1,0,*(undefined4 *)(PTR_DAT_08001dd8_08001dd8 + 0x30));\n  send_message(3,1,0,*(undefined4 *)(PTR_DAT_08001dd8_08001dd8 + 0x30));\n  do_nothing(*(undefined2 *)(PTR_DAT_08001dd8_08001dd8 + 0x34));\n  count = 2;\n  while( count != 0) {\n    current_char = count - 1;\n    send_message(7,0,1,*(undefined4 *)(PTR_DAT_08001dd8_08001dd8 + 0x2c));\n    do_nothing(*(undefined2 *)(PTR_DAT_08001dd8_08001dd8 + 0x34));\n    count = current_char;\n    if (current_char > 0) {\n      send_message(7,1,0,*(undefined4 *)(PTR_DAT_08001dd8_08001dd8 + 0x2c));\n      do_nothing(*(undefined2 *)(PTR_DAT_08001dd8_08001dd8 + 0x34));\n    }\n  }\n  check_device_connection();\n  return;\n}",
            "called": [
                "FUN_08005790",
                "FUN_08001994",
                "FUN_080057e4",
                "FUN_08002814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d4c",
            "calling": [
                "FUN_080024c4"
            ],
            "imported": true,
            "current_name": "process_device_data_08001d4c"
        },
        "FUN_08000268": {
            "renaming": {
                "iVar1": "value",
                "DAT_0800029c": "some_data",
                "DAT_08000298": "some_other_data",
                "FUN_08000268": "calculate_value_and_subtract_08000268",
                "get_value_from_pointer_08005a84": "get_current_value"
            },
            "code": "int calculate_value_and_subtract_08000268(void)\n{\n  int value = get_current_value();\n  int result = (value + 1) * 1000 - ((unsigned long long)DAT_0800029c * (unsigned long long)(*(unsigned int *)(DAT_08000298 + 8) >> 3) >> 0x21);\n  return result;\n}",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000268",
            "calling": [
                "FUN_080002b6"
            ],
            "imported": true,
            "current_name": "calculate_value_and_subtract_08000268"
        },
        "FUN_08003778": {
            "renaming": {
                "uVar1": "temp",
                "param_1": "number",
                "local_1c": "quotient",
                "local_9": "digit_index",
                "FUN_08003778": "calculate_and_send_digits_08003778",
                "acStack_15": "digits"
            },
            "code": "void calculate_and_send_digits_08003778(uint number) {\n  uint quotient;\n  uint remainder = 0;\n  char digits[12];\n  byte digit_index = 0;\n  if (number == 0) {\n    waitUntilMemoryWriteIsReadyThenWriteToMemory_08008250('0');\n  }\n  else {\n    quotient = number;\n    while (quotient != 0) {\n      remainder = quotient % 10;\n      quotient = quotient / 10;\n      digits[digit_index] = (char)remainder + '0';\n      digit_index++;\n    }\n    while (digit_index != 0) {\n      digit_index--;\n      waitUntilMemoryWriteIsReadyThenWriteToMemory_08008250(digits[digit_index]);\n    }\n  }\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003778",
            "calling": [
                "FUN_080037fc"
            ],
            "imported": true,
            "current_name": "calculate_and_send_digits_08003778"
        },
        "FUN_0800b3dc": {
            "renaming": {
                "FUN_0800b3dc": "get_value_from_pointer_0800b3dc",
                "*PTR_PTR_DAT_0800b3e4": "PTR_TO_PTR_TO_VALUE"
            },
            "code": "int get_value_from_pointer_0800b3dc(void)\n{\n  int* ptr_to_value = *(int**)PTR_PTR_DAT_0800b3e4;\n  return *ptr_to_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b3dc",
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_0800b3dc"
        },
        "FUN_080046d0": {
            "renaming": {
                "bVar1": "value",
                "FUN_080046d0": "print_data_080046d0",
                "cVar2": "character",
                "uVar3": "float_bits",
                "uVar4": "improved_value"
            },
            "code": "void print_data_080046d0(){\\n  byte value;\\n  char character;\\n  undefined4 uVar3;\\n  undefined8 uVar4;\\n  if (4 < (byte)PTR_DAT_08004890[1]) {\\n    writeStringToMemory_080036c6(PTR_DAT_080048a8);\\n    printAbsoluteValue_080037fc((byte)PTR_DAT_08004890[0x1c] + 0x36);\\n    if (PTR_DAT_08004890[0x19] == \"\\0\") {\\n      if (PTR_DAT_08004890[0x1a] == \"\\x01\") {\\n        writeStringToMemory_080036c6(PTR_DAT_080048ac);\\n      }\\n      else {\\n        writeStringToMemory_080036c6(PTR_DAT_080048b0);\\n      }\\n    }\\n    else {\\n      writeStringToMemory_080036c6(PTR_DAT_080048b4);\\n    }\\n    if (PTR_DAT_08004890[3] == \"\\0\") {\\n      writeStringToMemory_080036c6(PTR_DAT_080048bc);\\n    }\\n    else {\\n      writeStringToMemory_080036c6(PTR_DAT_080048b8);\\n    }\\n    if (PTR_DAT_08004890[4] == \"\\0\") {\\n      writeStringToMemory_080036c6(PTR_DAT_080048c4);\\n    }\\n    else {\\n      writeStringToMemory_080036c6(PTR_DAT_080048c0);\\n    }\\n    if (PTR_DAT_08004890[2] == \"\\0\") {\\n      writeStringToMemory_080036c6(PTR_DAT_080048cc);\\n    }\\n    else {\\n      writeStringToMemory_080036c6(PTR_DAT_080048c8);\\n    }\\n    value = PTR_DAT_08004890[5];\\n    if (value == 2) {\\n      writeStringToMemory_080036c6(PTR_DAT_080048d8);\\n    }\\n    else if (value < 3) {\\n      if (value == 0) {\\n        writeStringToMemory_080036c6(PTR_DAT_080048d0);\\n      }\\n      else if (value == 1) {\\n        writeStringToMemory_080036c6(PTR_DAT_080048d4);\\n      }\\n    }\\n    character = PTR_DAT_08004890[6];\\n    if (character == \"\\x01\") {\\n      writeStringToMemory_080036c6(PTR_DAT_080048dc);\\n    }\\n    else if (character < \"\\x02\") {\\n      if (character == -1) {\\n        writeStringToMemory_080036c6(PTR_DAT_080048e0);\\n      }\\n      else if (character == \"\\0\") {\\n        writeStringToMemory_080036c6(PTR_DAT_080048e4);\\n      }\\n    }\\n    value = PTR_DAT_08004890[7];\\n    if (value == 2) {\\n      writeStringToMemory_080036c6(PTR_DAT_080048f0);\\n    }\\n    else if (value < 3) {\\n      if (value == 0) {\\n        writeStringToMemory_080036c6(PTR_DAT_080048e8);\\n      }\\n      else if (value == 1) {\\n        writeStringToMemory_080036c6(PTR_DAT_080048ec);\\n      }\\n    }\\n    writeStringToMemory_080036c6(PTR_DAT_080048f4);\\n    printAbsoluteValue_080037fc(PTR_DAT_08004890[0x18]);\\n    writeStringToMemory_080036c6(PTR_DAT_080048f8);\\n    if (PTR_DAT_08004890[3] == \"\\0\") {\\n      printFloat_08003826(*(undefined4 *)(PTR_DAT_08004890 + 8));\\n    }\\n    else {\\n      uVar4 = reverse_and_improve_08008590(*(undefined4 *)(PTR_DAT_08004890 + 8));\\n      uVar4 = FUNC_08008640((int)uVar4,(int)((ulonglong)uVar4 >> 0x20),DAT_08004888,DAT_0800488c);\\n      uVar3 = calculate_float_bits_08008c30((int)uVar4,(int)((ulonglong)uVar4 >> 0x20));\\n      printFloat_08003826(uVar3);\\n    }\\n    writeStringToMemory_080036c6(PTR_DAT_080048fc);\\n    return;\\n  }\\n}",
            "called": [
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_080037fc",
                "FUN_08003826",
                "FUN_08008c30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046d0",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": true,
            "current_name": "print_data_080046d0"
        },
        "FUN_08006d72": {
            "renaming": {
                "uVar1": "is_valid",
                "param_1": "address",
                "FUN_08006d72": "is_valid_address_08006d72"
            },
            "code": "bool is_valid_address_08006d72(uint32_t address) {\n  bool is_valid = check_address_08006c9c(address);\n  return is_valid;\n}",
            "called": [
                "FUN_08006c9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d72",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": true,
            "current_name": "is_valid_address_08006d72"
        },
        "FUN_0800756c": {
            "renaming": {
                "DAT_080075c0": "value2",
                "DAT_080075c4": "data4",
                "DAT_080075bc": "data",
                "FUN_0800756c": "set_bit_and_clear_mask_0800756c"
            },
            "code": "void set_bit_and_clear_mask_0800756c(unsigned int *DAT_080075bc, unsigned int mask, unsigned int bit_value, unsigned int DAT_080075c0) {\n  *DAT_080075bc |= bit_value;\n  DAT_080075bc[2] = 0;\n  *DAT_080075bc &= mask;\n  DAT_080075bc[1] = DAT_080075c0;\n  *DAT_080075bc &= 0xfffbffff;\n  DAT_080075bc[3] = 0;\n  *(unsigned int *)(DAT_080075bc[4] + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800756c",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": true,
            "current_name": "set_bit_and_clear_mask_0800756c"
        },
        "FUN_080001f8": {
            "renaming": {
                "PTR_DAT_0800020c": "data_pointer",
                "do_nothing_twice_08000210": "do_nothing_twice",
                "FUN_080001f8": "initialize_data_080001f8"
            },
            "code": "void initialize_data_080001f8(void)\n{\n  *PTR_DAT_0800020c = 0;\n  do_nothing_twice();\n  return;\n}",
            "called": [
                "FUN_08000210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001f8",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": true,
            "current_name": "initialize_data_080001f8"
        },
        "FUN_08002f74": {
            "renaming": {
                "PTR_DAT_08002fa4": "data_end",
                "PTR_DAT_08002fa8": "data_table",
                "puVar1": "data_ptr",
                "FUN_08002f74": "get_data_pointer_08002f74",
                "PTR_DAT_08002fa0": "data_start"
            },
            "code": "uint8_t* get_data_pointer_08002f74() {\n  uint8_t* data_ptr;\n  if (*PTR_DAT_08002fa0 == *PTR_DAT_08002fa4) {\n    data_ptr = NULL;\n  }\n  else {\n    data_ptr = PTR_DAT_08002fa8 + (*PTR_DAT_08002fa4 * 0x40);\n  }\n  return data_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f74",
            "calling": [
                "FUN_08002fd4",
                "FUN_080053a0"
            ],
            "imported": true,
            "current_name": "get_data_pointer_08002f74"
        },
        "FUN_0800b3e8": {
            "renaming": {
                "iVar1": "i",
                "iVar3": "num_functions",
                "do_nothing_0800b5b0": "do_nothing",
                "PTR_DAT_0800b42c": "PTR_POST_FUNCTIONS_START",
                "PTR_DAT_0800b428": "PTR_POST_FUNCTIONS_END",
                "PTR_DAT_0800b424": "PTR_FUNCTIONS_START",
                "ppcVar2": "function_ptr",
                "FUN_0800b3e8": "execute_functions_0800b3e8",
                "PTR_DAT_0800b420": "PTR_FUNCTIONS_END"
            },
            "code": "void execute_functions_0800b3e8(void)\n{\n  int num_functions = (int)PTR_DAT_0800b420 - (int)PTR_DAT_0800b424 >> 2;\n  if (num_functions != 0) {\n    int i = 0;\n    code **function_ptr = (code **)PTR_DAT_0800b424;\n    do {\n      i++;\n      (**function_ptr)();\n      function_ptr++;\n    } while (num_functions != i);\n  }\n  function_ptr = (code **)PTR_DAT_0800b42c;\n  int num_post_functions = (int)PTR_DAT_0800b428 - (int)PTR_DAT_0800b42c >> 2;\n  do_nothing();\n  num_post_functions = num_post_functions >> 2;\n  if (num_post_functions != 0) {\n    int i = 0;\n    do {\n      i++;\n      (**function_ptr)();\n      function_ptr++;\n    } while (num_post_functions != i);\n  }\n  return;\n}",
            "called": [
                "FUN_0800b5b0",
                "FUN_080001ac",
                "FUN_0800b4d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b3e8",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": true,
            "current_name": "execute_functions_0800b3e8"
        },
        "FUN_080096e8": {
            "renaming": {
                "uVar1": "result",
                "uStack_24": "temp_result_2",
                "param_1": "input_1",
                "local_28": "temp_result_1",
                "FUNC_080082d0": "function_1",
                "FUNC_0800a348": "function_3",
                "param_2": "input_2",
                "DAT_08009794": "MAX_VAL_2",
                "FUNC_08009d78": "function_2",
                "uStack_1c": "temp_result_4",
                "uVar2": "flag",
                "local_20": "temp_result_3",
                "DAT_08009790": "MAX_VAL_1",
                "FUN_080096e8": "calculate_result_080096e8",
                "calculate_result_0800adf0": "calculate_result_3"
            },
            "code": "int calculate_result_080096e8(int input_1, unsigned int input_2) {\n  int result;\n  unsigned int flag;\n  int temp_result_1;\n  int temp_result_2;\n  int temp_result_3;\n  int temp_result_4;\n  \n  if (DAT_08009790 < (int)(input_2 & 0x7fffffff)) {\n    result = calculate_result_080096e8_2(input_1,input_2,0,0,0);\n  }\n  else if (DAT_08009794 < (int)(input_2 & 0x7fffffff)) {\n    result = function_1(input_1,input_2,input_1,input_2);\n  }\n  else {\n    flag = function_2(input_1,input_2,&temp_result_1);\n    flag = flag & 3;\n    if (flag == 1) {\n      result = function_3(temp_result_1,temp_result_2,temp_result_3,temp_result_4);\n    }\n    else if (flag == 2 || flag == 0) {\n      result = calculate_result_080096e8_3(temp_result_1,temp_result_2,temp_result_3,temp_result_4,1);\n    }\n    else {\n      result = function_3(temp_result_1,temp_result_2,temp_result_3,temp_result_4);\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e8",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": true,
            "current_name": "calculate_result_080096e8"
        },
        "FUN_08006a18": {
            "renaming": {
                "DAT_08006a54": "data",
                "param_1": "bit",
                "FUN_08006a18": "is_bit_set_08006a18"
            },
            "code": "bool is_bit_set_08006a18(uint8_t bit, uint32_t* DAT_08006a54){\n    uint32_t index = (((uint32_t)bit >> 5) + 0x40) * 4;\n    uint32_t mask = 1 << (bit & 0x1f);\n    return (*(DAT_08006a54 + index) & mask) != 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a18",
            "calling": [
                "FUN_08006de0"
            ],
            "imported": true,
            "current_name": "is_bit_set_08006a18"
        },
        "FUN_08002c18": {
            "renaming": {
                "FUN_08002c18": "calculate_shift_and_sum_08002c18",
                "iVar2": "int_result_1",
                "uVar1": "hash_1",
                "param_1": "input_data",
                "local_1c": "int_result_2",
                "param_2": "shift",
                "param_3": "hash",
                "uVar3": "hash_2",
                "local_20": "int_result_3",
                "uVar5": "value_2",
                "uVar4": "value_1",
                "uVar7": "result_1",
                "uVar6": "value_3"
            },
            "code": "void calculate_shift_and_sum_08002c18(int input_data, int shift, int hash) {\n  int hash_1 = calculate_hash(input_data);\n  int hash_2 = calculate_hash(-input_data);\n  int value_1 = calculate_value(input_data, shift);\n  int value_2 = calculate_value(hash_1, hash);\n  int value_3 = calculate_value(hash_2, PTR_DAT_08002e04);\n  int result_1 = reverse_and_improve(value_1);\n  int result_2 = reverse_and_improve(value_2);\n  int result_3 = reverse_and_improve(value_3);\n  int int_result_1 = convert_fixed_point_to_int(result_1);\n  int int_result_2 = convert_fixed_point_to_int(result_2);\n  int int_result_3 = convert_fixed_point_to_int(result_3);\n  int sum = *(int *)(input_data + 0x10) - int_result_2 - int_result_3;\n  if (sum < 0) {\n    sum = 0;\n  }\n  *(int *)(input_data + 0x34) = hash_1;\n  *(int *)(input_data + 0x38) = sum + hash_1;\n}",
            "called": [
                "FUN_08008e44",
                "FUN_08008590",
                "FUN_08008e3c",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080028bc",
                "FUN_080094c0",
                "FUN_08009318",
                "FUN_0800856c",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08002908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c18",
            "calling": [
                "FUN_08002e08"
            ],
            "imported": true,
            "current_name": "calculate_shift_and_sum_08002c18"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "isBitSet_08006ac0",
                "DAT_08006afc": "dataStart",
                "param_1": "bitIndex"
            },
            "code": "bool isBitSet_08006ac0(uint8_t bitIndex) {\n    uint32_t* data = (uint32_t*)(DAT_08006afc + (((uint32_t)bitIndex >> 5) + 0x80) * 4);\n    uint32_t mask = 1 << (bitIndex & 0x1f);\n    return (*data & mask) != 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_08006e1a"
            ],
            "imported": true,
            "current_name": "isBitSet_08006ac0"
        },
        "FUN_080001ec": {
            "renaming": {
                "FUN_080001ec": "do_nothing_080001ec"
            },
            "code": "\nvoid do_nothing_080001ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ec",
            "calling": [
                "FUN_08000210"
            ],
            "imported": true,
            "current_name": "do_nothing_080001ec"
        },
        "FUN_08005a50": {
            "renaming": {
                "FUN_08005a50": "do_nothing_08005a50"
            },
            "code": "\nvoid do_nothing_08005a50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a50",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": true,
            "current_name": "do_nothing_08005a50"
        },
        "FUN_08002ba8": {
            "renaming": {
                "puVar2": "previous_result_pointer",
                "puVar3": "temp_result_pointer",
                "FUN_08002ba8": "calculate_and_concatenate_float_values_08002ba8",
                "local_9": "current_index",
                "puVar1": "data_pointer",
                "local_10": "current_result_pointer",
                "local_14": "previous_result_pointer"
            },
            "code": "void calculate_and_concatenate_float_values_08002ba8(void)\n{\n  undefined *previous_result_pointer;\n  undefined *current_result_pointer;\n  undefined *data_pointer;\n  undefined *temp_result_pointer;\n  undefined *temp_data_pointer;\n  byte current_index;\n  \n  current_index = *data_pointer;\n  previous_result_pointer = (undefined *)0x0;\n  current_result_pointer = (undefined *)0x0;\n  temp_result_pointer = (undefined *)0x0;\n  while (current_index != *data_pointer + 1) {\n    previous_result_pointer = current_result_pointer;\n    temp_data_pointer = PTR_DAT_08002c10 + (uint)current_index * 0x40;\n    calculate_and_concatenate_float_values_08002ba8_08002afc(previous_result_pointer,current_result_pointer,temp_data_pointer);\n    current_index = increment_char_08002870(current_index);\n    temp_result_pointer = previous_result_pointer;\n    current_result_pointer = temp_data_pointer;\n  }\n  calculate_and_concatenate_float_values_08002ba8_08002afc(previous_result_pointer,current_result_pointer,0,previous_result_pointer,temp_result_pointer);\n  return;\n}",
            "called": [
                "FUN_08002870",
                "FUN_08002afc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ba8",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": true,
            "current_name": "calculate_and_concatenate_float_values_08002ba8"
        },
        "FUN_0800919c": {
            "renaming": {
                "bVar1": "is_negative",
                "param_1": "first_operand",
                "FUN_0800919c": "calculate_result_0800919c",
                "param_2": "second_operand",
                "uVar3": "doubled_second_operand",
                "uVar2": "doubled_first_operand",
                "uVar4": "or_result",
                "bVar5": "is_or_result_zero"
            },
            "code": "uint calculate_result_0800919c(uint first_operand, uint second_operand)\n{\n  bool is_negative;\n  uint doubled_first_operand = first_operand * 2;\n  uint doubled_second_operand = second_operand * 2;\n  if (((int)doubled_first_operand >> 0x18 == -1 || (int)doubled_second_operand >> 0x18 == -1) && ((((int)doubled_first_operand >> 0x18 == -1 && ((first_operand & 0x7fffff) != 0)) || (((int)doubled_second_operand >> 0x18 == -1 && ((second_operand & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  uint or_result = doubled_first_operand | second_operand & 0x7fffffff;\n  bool is_or_result_zero = or_result == 0;\n  if (!is_or_result_zero) {\n    or_result = first_operand ^ second_operand;\n    is_or_result_zero = or_result == 0;\n  }\n  is_negative = -1 < (int)or_result;\n  if (is_negative) {\n    first_operand = doubled_first_operand + second_operand * -2;\n    is_or_result_zero = first_operand == 0;\n  }\n  if ((is_negative && doubled_second_operand <= doubled_first_operand) && !is_or_result_zero) {\n    first_operand = (int)second_operand >> 0x1f;\n  }\n  if (!is_negative || doubled_second_operand > doubled_first_operand) {\n    first_operand = ~((int)second_operand >> 0x1f);\n  }\n  if (!is_or_result_zero) {\n    first_operand = first_operand | 1;\n  }\n  return first_operand;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800919c",
            "calling": [
                "FUN_08009204"
            ],
            "imported": true,
            "current_name": "calculate_result_0800919c"
        },
        "FUN_0800b2cc": {
            "renaming": {
                "FUN_0800b2cc": "do_nothing_0800b2cc"
            },
            "code": "\nvoid do_nothing_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2cc",
            "calling": [
                "FUN_08009990",
                "FUN_08009d78",
                "FUN_0800af78"
            ],
            "imported": true,
            "current_name": "do_nothing_0800b2cc"
        },
        "FUN_0800854c": {
            "renaming": {
                "shift_amount_2": "shift_amount_2",
                "iVar3": "leading_zeroes",
                "shift_amount_3": "shift_amount_3",
                "uVar1": "leading_zeroes",
                "LAB_08008458": "",
                "shift_amount_4": "shift_amount_4",
                "shift_amount_5": "shift_amount_5",
                "param_1": "input",
                "FUN_0800854c": "calculate_shifted_value_0800854c",
                "CONCAT44": "",
                "SCARRY4": "",
                "uVar2": "shift_amount_2",
                "SBORROW4": "",
                "shift_amount": "shift_amount",
                "uVar4": "shift_amount",
                "shifted_input": "shifted_input",
                "shifted_value": "shifted_value",
                "bVar6": "is_zero_shift_2",
                "bVar5": "is_negative_shift_2",
                "in_r12": "shift_amount_3",
                "bVar7": "is_negative_shift"
            },
            "code": "ulonglong calculate_shifted_value_0800854c(uint input)\n{\n  uint leading_zeroes = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes + 21;\n  bool is_negative_shift = SBORROW4(shift_amount,0x20);\n  uint shift_amount_2 = leading_zeroes - 11;\n  bool is_negative_shift_2 = (int)shift_amount_2 < 0;\n  bool is_zero_shift_2 = shift_amount_2 == 0;\n  if ((int)shift_amount < 0x20) {\n    is_negative_shift = SCARRY4(shift_amount_2,0xc);\n    leading_zeroes++;\n    is_negative_shift_2 = leading_zeroes < 0;\n    is_zero_shift_2 = leading_zeroes == 0;\n    shift_amount_2 = shift_amount;\n    if (!is_zero_shift_2 && is_negative_shift_2 == is_negative_shift) {\n      return input << (shift_amount & 0xff) | input >> (0xcU - leading_zeroes & 0xff);\n    }\n  }\n  uint shift_amount_3 = is_zero_shift_2 || is_negative_shift_2 != is_negative_shift ? 0x20 - shift_amount_2 : 0;\n  uint shifted_input = input << (shift_amount_2 & 0xff);\n  if (is_zero_shift_2 || is_negative_shift_2 != is_negative_shift) {\n    shifted_input |= 0U >> (shift_amount_3 & 0xff);\n  }\n  ulonglong shifted_value = is_zero_shift_2 || is_negative_shift_2 != is_negative_shift ? 0 << (shift_amount_2 & 0xff) : 0;\n  if ((int)shift_amount < 0x433) {\n    return CONCAT44(shifted_input + (0x432 - shift_amount) * 0x100000,shifted_value);\n  }\n  uint shift_amount_4 = ~(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount_4) {\n    return (ulonglong)(shifted_input >> (shift_amount_4 - 0x1f & 0xff));\n  }\n  int shift_amount_5 = shift_amount_4 - 0x13;\n  if (shift_amount_5 == 0 || shift_amount_5 < 0 != SCARRY4(shift_amount_4 - 0x1f,0xc)) {\n    shift_amount_4++;\n    return CONCAT44(shifted_input >> (shift_amount_4 & 0xff),shifted_value >> (shift_amount_4 & 0xff) | shifted_input << (0x20 - shift_amount_4 & 0xff));\n  }\n  return (ulonglong)(shifted_value >> (0x20 - (0xcU - shift_amount_5) & 0xff) | shifted_input << (0xcU - shift_amount_5 & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800854c",
            "calling": [
                "FUN_08001994"
            ],
            "imported": true,
            "current_name": "calculate_shifted_value_0800854c"
        },
        "FUN_08008e44": {
            "renaming": {
                "iVar1": "leading_zeroes_count",
                "iVar4": "shifted_hash_value",
                "param_1": "input",
                "FUN_08008e44": "calculate_hash_08008e44",
                "uVar3": "hash_value",
                "uVar2": "shifted_bits",
                "uVar5": "carry"
            },
            "code": "uint calculate_hash_08008e44(uint input)\n{\n  int leading_zeroes_count;\n  uint hash_value;\n  uint sign_bit;\n  uint shifted_input;\n  uint shifted_hash_value;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input);\n  shifted_input = input << (leading_zeroes_count - 8);\n  shifted_hash_value = ((sign_bit | 0x4b000000) - 0x800000) + (shifted_input & 0xff000000);\n  if (leading_zeroes_count > 7) {\n    uint carry = (shifted_input & 0x80000000) ? 1 : 0;\n    hash_value = shifted_hash_value + shifted_input + (0U >> (0x20 - (leading_zeroes_count - 8))) + carry;\n    if (shifted_input == 0x80000000) {\n      hash_value = hash_value & 0xfffffffe;\n    }\n    return hash_value;\n  }\n  shifted_hash_value += ((input >> (24 - leading_zeroes_count)) - ((int)shifted_input >> 31));\n  if ((shifted_input & 0x7fffffff) == 0) {\n    shifted_hash_value = shifted_hash_value & ~(shifted_input >> 31);\n  }\n  return shifted_hash_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e44",
            "calling": [
                "FUN_08001f00",
                "FUN_08002c18",
                "FUN_080024c4",
                "FUN_08003004",
                "FUN_08003618",
                "FUN_080004fc",
                "FUN_08002408",
                "FUN_08004940"
            ],
            "imported": true,
            "current_name": "calculate_hash_08008e44"
        },
        "FUN_0800733e": {
            "renaming": {
                "param_1": "ptr_param",
                "FUN_0800733e": "assign_value_to_param_0800733e",
                "param_2": "value",
                "param_3": "flag"
            },
            "code": "void assign_value_to_param_0800733e(int ptr_param, undefined2 value, char flag) {\n  if (flag == '\\0') {\n    *(undefined2 *)(ptr_param + 0x1a) = value;\n  }\n  else {\n    *(undefined2 *)(ptr_param + 0x18) = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800733e",
            "calling": [
                "FUN_0800778c"
            ],
            "imported": true,
            "current_name": "assign_value_to_param_0800733e"
        },
        "FUN_0800583c": {
            "renaming": {
                "process_data_08005790": "process_device_data",
                "device_param": "device_parameter",
                "FUN_0800583c": "update_and_process_device_data_0800583c",
                "update_param_080052ac": "update_device_parameters",
                "checkIfDeviceIsConnected_080057e4": "check_device_connection"
            },
            "code": "void update_and_process_device_data_0800583c(void)\n{\n  int device_param = *(undefined2 *)(PTR_DAT_08005858 + 0x18);\n  update_device_parameters(device_param);\n  process_device_data();\n  check_device_connection();\n  return;\n}",
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_080052ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": true,
            "current_name": "update_and_process_device_data_0800583c"
        },
        "FUN_08001e98": {
            "renaming": {
                "iVar1": "are_pointers_equal_result",
                "PTR_DAT_08001efc": "data_pointer",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "param_5": "data_5",
                "FUN_08001e98": "process_data_if_not_already_processed_08001e98"
            },
            "code": "void process_data_if_not_already_processed_08001e98(undefined4 param_1, undefined4 param_2, undefined4 param_3, undefined4 param_4, undefined param_5)\n{\n  int are_pointers_equal_result;\n  if (PTR_DAT_08001efc[1] != '\\a') {\n    do {\n      check_and_update_status();\n      if (*PTR_DAT_08001efc != '\\0') {\n        return;\n      }\n      are_pointers_equal_result = are_pointers_equal();\n    } while (are_pointers_equal_result != 0);\n    FUNC_08003004(param_1, param_2, param_3, param_4, param_5);\n    if (PTR_DAT_08001efc[1] == '\\0') {\n      PTR_DAT_08001efc[1] = 2;\n    }\n    if (PTR_DAT_08001efc[0x10] != '\\0') {\n      check_and_process_data();\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08003a74",
                "FUN_08002fac",
                "FUN_08003004",
                "FUN_0800585c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e98",
            "calling": [
                "FUN_08001f00",
                "FUN_080024c4",
                "FUN_080005b4"
            ],
            "imported": true,
            "current_name": "process_data_if_not_already_processed_08001e98"
        },
        "FUN_080069e4": {
            "renaming": {
                "DAT_08006a14": "array_start",
                "param_1": "bit_index",
                "PTR_DAT_08006a14": "array_ptr",
                "FUN_080069e4": "set_bit_in_array_080069e4"
            },
            "code": "void set_bit_in_array_080069e4(int bit_index){\n    int array_index = ((uint)(int)(char)bit_index >> 5) + 0x20;\n    int* PTR_DAT_08006a14 = (int*)(DAT_08006a14 + array_index * 4);\n    int bit_mask = 1 << (bit_index & 0x1f);\n    *PTR_DAT_08006a14 = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006d4a"
            ],
            "imported": true,
            "current_name": "set_bit_in_array_080069e4"
        },
        "FUN_0800b2d4": {
            "renaming": {
                "param_1": "value",
                "param_2": "sign_bit_mask",
                "PTR_": "ptr_",
                "DAT_": "dat_",
                "FUN_0800b2d4": "set_sign_bit_and_shift_right_0800b2d4"
            },
            "code": "uint set_sign_bit_and_shift_right_0800b2d4(uint value, uint sign_bit_mask) {\n    uint signed_value = value | sign_bit_mask;\n    uint shifted_value = signed_value + 0x100000 >> 31;\n    return shifted_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2d4",
            "calling": [
                "FUN_0800981c"
            ],
            "imported": true,
            "current_name": "set_sign_bit_and_shift_right_0800b2d4"
        },
        "FUN_08008e3c": {
            "renaming": {
                "FUN_08008e3c": "calculate_08008e3c",
                "iVar1": "leading_zeros",
                "iVar3": "multiplier",
                "shift": "shift_amount",
                "param_1": "input",
                "count_leading_zeroes": "count_leading_zeroes",
                "result": "result",
                "uVar2": "shift_amount",
                "shifted_multiplier": "shifted_multiplier",
                "uVar4": "shifted_zero",
                "shifted_input": "shifted_input"
            },
            "code": "uint calculate_08008e3c(uint input)\n{\n  int leading_zeros = count_leading_zeroes(input);\n  uint shift_amount = leading_zeros - 8;\n  int multiplier = shift_amount * -0x800000 + 0x4a800000;\n  if (leading_zeros > 7) {\n    uint shift = shift_amount & 0xff;\n    uint shifted_input = input << shift;\n    uint shifted_zero = 0U >> (0x20 - shift);\n    uint carry = (uint)(0x7fffffff < shifted_zero);\n    uint result = multiplier + shifted_input + shifted_zero + carry;\n    if ((shifted_zero & 0x80000000) != 0) {\n      result &= 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input << ((leading_zeros + 0x18U) & 0xff);\n  uint shifted_multiplier = multiplier + ((input >> (0x20 - ((leading_zeros + 0x18U) & 0xff))) - ((int)shifted_input >> 0x1f));\n  uint shifted_zero = (shifted_input & 0x7fffffff);\n  uint result = shifted_multiplier;\n  if (shifted_zero == 0) {\n    result &= ~(shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e3c",
            "calling": [
                "FUN_08002c18",
                "FUN_08002638"
            ],
            "imported": true,
            "current_name": "calculate_08008e3c"
        },
        "FUN_08009654": {
            "renaming": {
                "DAT_080096e4": "mask",
                "FUN_08009654": "calculate_double_precision_08009654",
                "lVar3": "result",
                "uVar1": "exponent",
                "param_1": "low_bits",
                "param_2": "high_bits",
                "uVar2": "shift_amount"
            },
            "code": "long long calculate_double_precision_08009654(uint low_bits, uint high_bits)\n{\n  uint exponent;\n  uint shift_amount;\n  uint DAT_080096e4;\n  long long result;\n  \n  result = CONCAT44(high_bits, low_bits);\n  shift_amount = (high_bits << 1) >> 0x15;\n  exponent = shift_amount - 0x3ff;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      high_bits = high_bits & 0x80000000;\n      if (exponent == 0xffffffff) {\n        high_bits = high_bits | 0x3ff00000;\n      }\n      result = (long long)high_bits << 0x20;\n    }\n    else {\n      DAT_080096e4 = DAT_080096e4 >> (exponent & 0xff);\n      result = CONCAT44(high_bits, low_bits);\n      if ((high_bits & DAT_080096e4 | low_bits) != 0) {\n        result = (long long)(high_bits + (0x80000 >> (exponent & 0xff)) & ~DAT_080096e4) << 0x20;\n      }\n    }\n  }\n  else if ((int)exponent < 0x34) {\n    DAT_080096e4 = 0xffffffff >> (shift_amount - 0x413 & 0xff);\n    if ((low_bits & DAT_080096e4) != 0) {\n      shift_amount = 1 << (0x33 - exponent & 0xff);\n      if (CARRY4(low_bits, shift_amount) != false) {\n        high_bits = high_bits + 1;\n      }\n      result = CONCAT44(high_bits, low_bits + shift_amount & ~DAT_080096e4);\n    }\n  }\n  else {\n    result = CONCAT44(high_bits, low_bits);\n    if (exponent == 0x400) {\n      result = FUNC_080082d4();\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_080082d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009654",
            "calling": [
                "FUN_08004e30"
            ],
            "imported": true,
            "current_name": "calculate_double_precision_08009654"
        },
        "FUN_08007bc2": {
            "renaming": {
                "FUN_08007bc2": "clearBitsInRegisters_08007bc2",
                "_DAT_40000000": "PTR_DAT_40000000",
                "_DAT_4000000c": "PTR_DAT_4000000c"
            },
            "code": "void clearBitsInRegisters_08007bc2(void)\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007bc2",
            "calling": [
                "FUN_080057e4"
            ],
            "imported": true,
            "current_name": "clearBitsInRegisters_08007bc2"
        },
        "FUN_08009410": {
            "renaming": {
                "uVar1": "result",
                "FUN_08009410": "calculate_result_08009410",
                "uStack_24": "local_variable_2",
                "param_1": "base_value",
                "local_28": "local_variable_1",
                "param_2": "input_value",
                "uStack_1c": "local_variable_4",
                "uVar2": "function_result",
                "local_20": "local_variable_3"
            },
            "code": "undefined4 calculate_result_08009410(undefined4 base_value, uint input_value)\n{\n  undefined4 result;\n  uint input_value_unsigned;\n  undefined4 local_variable_1;\n  undefined4 local_variable_2;\n  undefined4 local_variable_3;\n  undefined4 local_variable_4;\n  \n  input_value_unsigned = input_value & 0x7fffffff;\n  \n  if (PTR_DAT_080094b4 < (int)input_value_unsigned) {\n    if (PTR_DAT_080094b8 < (int)input_value_unsigned) {\n      result = calculate_result_08009410(PTR_PARAM_1, input_value, PTR_PARAM_1, input_value);\n    }\n    else {\n      uint function_result = function_08009d78(PTR_PARAM_1, input_value, &local_variable_1);\n      function_result &= 3;\n      if (function_result == 1) {\n        result = calculate_result_08009410_0800adf0(local_variable_1, local_variable_2, local_variable_3, local_variable_4, 1);\n      }\n      else if (function_result == 2 || function_result == 0) {\n        result = function_0800a348(local_variable_1, local_variable_2, local_variable_3, local_variable_4);\n      }\n      else {\n        result = calculate_result_08009410_0800adf0(local_variable_1, local_variable_2, local_variable_3, local_variable_4, 1);\n      }\n    }\n    return result;\n  }\n  result = function_0800a348(PTR_PARAM_1, input_value, 0, 0);\n  return result;\n}",
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009410",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": true,
            "current_name": "calculate_result_08009410"
        },
        "FUN_080035ec": {
            "renaming": {
                "FUN_080035ec": "set_params_in_memory_080035ec",
                "param_1": "param_address",
                "param_2": "param_1",
                "param_3": "param_2",
                "PTR_DAT_08003614": "param_address"
            },
            "code": "void set_params_in_memory_080035ec(void* PTR_DAT_08003614, int param_1, int param_2, int param_3)\n{\n  *(int *)(PTR_DAT_08003614) = param_1;\n  *(int *)(PTR_DAT_08003614 + 4) = param_2;\n  *(int *)(PTR_DAT_08003614 + 8) = param_3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035ec",
            "calling": [
                "FUN_0800283a"
            ],
            "imported": true,
            "current_name": "set_params_in_memory_080035ec"
        },
        "FUN_08006c70": {
            "renaming": {
                "DAT_08006c98": "data_val",
                "DAT_08006c94": "data_ptr",
                "FUN_08006c70": "synchronize_data_08006c70",
                "PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "void synchronize_data_08006c70(void)\n{\n  DataSynchronizationBarrier(0xf);\n  uint* ptr = (uint *)(DAT_08006c94 + 0xc);\n  uint val = DAT_08006c98 | (*ptr & 0x700);\n  *ptr = val;\n  DataSynchronizationBarrier(0xf);\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c70",
            "calling": [
                "FUN_08006d66"
            ],
            "imported": true,
            "current_name": "synchronize_data_08006c70"
        },
        "FUN_08006d98": {
            "renaming": {
                "uVar1": "extracted_nibble",
                "param_1": "nibble",
                "FUN_08006d98": "extract_nibble_and_extract_bits_08006d98",
                "param_2": "bit1",
                "param_3": "bit2",
                "param_4": "bit3"
            },
            "code": "void extract_nibble_and_extract_bits_08006d98(char nibble, undefined4 bit1, undefined4 bit2, undefined4 bit3)\n{\n  undefined4 extracted_nibble = extract_nibble_08006b54((int)nibble);\n  extract_bits_08006c04(extracted_nibble, bit1, bit2, bit3);\n  return;\n}",
            "called": [
                "FUN_08006b54",
                "FUN_08006c04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d98",
            "calling": [],
            "imported": true,
            "current_name": "extract_nibble_and_extract_bits_08006d98"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "increment_pointer_08005a68",
                "PTR_DAT_08005a80": "pointer"
            },
            "code": "void increment_pointer_08005a68(void)\n{\n  int* PTR_DAT_08005a80 = (int*)PTR_DAT_08005a80;\n  *PTR_DAT_08005a80 = *PTR_DAT_08005a80 + 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08007756"
            ],
            "imported": true,
            "current_name": "increment_pointer_08005a68"
        },
        "FUN_080079c0": {
            "renaming": {
                "PTR_DAT_080079d8": "buffer_pointer",
                "FUN_080079c0": "initialize_buffer_and_set_value_080079c0",
                "PTR_DAT_080079dc": "flag_pointer"
            },
            "code": "void initialize_buffer_and_set_value_080079c0(void)\n{\n  int buffer_size = 0x18;\n  int initial_value = 0;\n  fill_buffer_with_value_0800b430(PTR_DAT_080079d8, initial_value, buffer_size);\n  *(int *)PTR_DAT_080079dc = 1;\n  return;\n}",
            "called": [
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080079c0",
            "calling": [
                "FUN_08007540"
            ],
            "imported": true,
            "current_name": "initialize_buffer_and_set_value_080079c0"
        },
        "FUN_0800b2e0": {
            "renaming": {
                "FUN_0800b2e0": "returnZero_0800b2e0"
            },
            "code": "int32_t returnZero_0800b2e0(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2e0",
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "imported": true,
            "current_name": "returnZero_0800b2e0"
        },
        "FUN_08002908": {
            "renaming": {
                "uVar1": "result_1",
                "param_1": "first_num",
                "param_2": "second_num",
                "FUN_08002908": "calculate_result_08002908",
                "param_3": "third_num",
                "param_4": "fourth_num",
                "uVar2": "result_2"
            },
            "code": "undefined4 calculate_result_08002908(undefined4 first_num, undefined4 second_num, undefined4 third_num, undefined4 fourth_num)\n{\n  undefined4 result_1 = FUNC_08008cdc(third_num, third_num);\n  result_1 = FUNC_08008eec(result_1, fourth_num);\n  undefined4 result_2 = FUNC_08008eec(first_num, first_num);\n  result_1 = FUNC_08008cd8(result_1, result_2);\n  result_2 = FUNC_08008eec(second_num, second_num);\n  result_1 = FUNC_08008cdc(result_1, result_2);\n  result_2 = FUNC_08008eec(third_num, 0x40800000);\n  result_1 = FUNC_08009054(result_1, result_2);\n  return result_1;\n}",
            "called": [
                "FUN_08008cdc",
                "FUN_08009054",
                "FUN_08008eec",
                "FUN_08008cd8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002908",
            "calling": [
                "FUN_08002c18"
            ],
            "imported": true,
            "current_name": "calculate_result_08002908"
        },
        "FUN_08007c40": {
            "renaming": {
                "param_1": "new_value",
                "_DAT_40000034": "global_variable",
                "FUN_08007c40": "set_global_variable_08007c40"
            },
            "code": "void set_global_variable_08007c40(int new_value)\n{\n  _DAT_40000034 = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c40",
            "calling": [
                "FUN_08005790"
            ],
            "imported": true,
            "current_name": "set_global_variable_08007c40"
        },
        "FUN_080094c0": {
            "renaming": {
                "lVar6": "final_result",
                "bVar4": "carry_flag",
                "iVar1": "is_input_valid",
                "param_1": "input_1",
                "param_2": "input_2",
                "FUN_080094c0": "calculate_result_080094c0",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar3": "bit_shifted_input_3",
                "uVar2": "bit_shifted_input_2",
                "uVar5": "result"
            },
            "code": "long long calculate_result_080094c0(uint input_1, uint input_2, undefined4 param_3, undefined4 param_4)\n{\n  int is_input_valid;\n  uint bit_shifted_input_2;\n  uint bit_shifted_input_3;\n  bool carry_flag;\n  undefined8 result;\n  long long final_result;\n  bit_shifted_input_3 = (input_2 << 1) >> 0x15;\n  bit_shifted_input_2 = bit_shifted_input_3 - 0x3ff;\n  if ((int)bit_shifted_input_2 < 0x14) {\n    if ((int)bit_shifted_input_2 < 0) {\n      result = FUNC_080082d4(input_1, input_2, DAT_080095a8, DAT_080095ac, param_4);\n      is_input_valid = is_input_valid_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      final_result = CONCAT44(input_2,input_1);\n      if (is_input_valid != 0) {\n        if ((int)input_2 < 0) {\n          if ((input_1 | input_2 & 0x7fffffff) != 0) {\n            input_2 = DAT_080095b4;\n          }\n          final_result = (ulonglong)input_2 << 0x20;\n        }\n        else {\n          final_result = 0;\n        }\n      }\n    }\n    else {\n      bit_shifted_input_3 = DAT_080095b0 >> (bit_shifted_input_2 & 0xff);\n      final_result = CONCAT44(input_2,input_1);\n      if ((input_2 & bit_shifted_input_3 | input_1) != 0) {\n        result = FUNC_080082d4(input_1, input_2, DAT_080095a8, DAT_080095ac, param_4);\n        is_input_valid = is_input_valid_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        final_result = CONCAT44(input_2,input_1);\n        if (is_input_valid != 0) {\n          if ((int)input_2 < 0) {\n            input_2 = input_2 + (0x100000 >> (bit_shifted_input_2 & 0xff));\n          }\n          final_result = (ulonglong)(input_2 & ~bit_shifted_input_3) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)bit_shifted_input_2 < 0x34) {\n    bit_shifted_input_3 = 0xffffffff >> (bit_shifted_input_3 - 0x413 & 0xff);\n    final_result = CONCAT44(input_2,input_1);\n    if ((bit_shifted_input_3 & input_1) != 0) {\n      result = FUNC_080082d4(input_1, input_2, DAT_080095a8, DAT_080095ac, param_4);\n      is_input_valid = is_input_valid_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      final_result = CONCAT44(input_2,input_1);\n      if (is_input_valid != 0) {\n        if ((int)input_2 < 0) {\n          if (bit_shifted_input_2 == 0x14) {\n            input_2 = input_2 + 1;\n          }\n          else {\n            bit_shifted_input_2 = 1 << (0x34 - bit_shifted_input_2 & 0xff);\n            carry_flag = CARRY4(bit_shifted_input_2, input_1);\n            input_1 = bit_shifted_input_2 + input_1;\n            if (carry_flag != false) {\n              input_2 = input_2 + 1;\n            }\n          }\n        }\n        final_result = CONCAT44(input_2,input_1 & ~bit_shifted_input_3);\n      }\n    }\n  }\n  else {\n    final_result = CONCAT44(input_2,input_1);\n    if (bit_shifted_input_2 == 0x400) {\n      final_result = FUNC_080082d4();\n    }\n  }\n  return final_result;\n}",
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094c0",
            "calling": [
                "FUN_08001f00",
                "FUN_08002c18",
                "FUN_08002408",
                "FUN_0800a5a0"
            ],
            "imported": true,
            "current_name": "calculate_result_080094c0"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "FUNC_08008eec"
            },
            "code": "\nuint FUNC_08008eec(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_0800903c;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_0800903c:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008eec",
            "calling": [
                "FUN_08002978",
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_08003618",
                "FUN_08003826",
                "FUN_08002908",
                "FUN_08001994",
                "FUN_080028bc",
                "FUN_08004e30",
                "FUN_08002c18",
                "FUN_080024c4",
                "FUN_08003004",
                "FUN_08002638",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "FUNC_08008eec"
        },
        "FUN_08006b54": {
            "renaming": {
                "bVar1": "output_byte",
                "param_1": "input_byte",
                "FUN_08006b54": "extract_nibble_08006b54"
            },
            "code": "byte extract_nibble_08006b54(byte input_byte) {\\n  byte output_byte;\\n  if ((char)input_byte < \"\\0\") {\\n    output_byte = *(byte *)((input_byte & 0xf) + PTR_DAT_08006b98 + 0x14);\\n  }\\n  else {\\n    output_byte = *(byte *)((char)input_byte + PTR_DAT_08006b9c + 0x300);\\n  }\\n  return output_byte >> 4;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b54",
            "calling": [
                "FUN_08006d98"
            ],
            "imported": true,
            "current_name": "extract_nibble_08006b54"
        },
        "FUN_08007e84": {
            "renaming": {
                "PTR_DAT_08007ea0": "address",
                "FUN_08007e84": "get_first_byte_from_address_08007e84"
            },
            "code": "uint get_first_byte_from_address_08007e84(void)\n{\n  uint *PTR_DAT_08007ea0 = (uint *)(DAT_08007ea0 + 4);\n  return *PTR_DAT_08007ea0 & 0xff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e84",
            "calling": [
                "FUN_08008286"
            ],
            "imported": true,
            "current_name": "get_first_byte_from_address_08007e84"
        },
        "FUN_080057e4": {
            "renaming": {
                "PTR_DAT_0800580c": "deviceStatus",
                "do_nothing_0800530c": "doNothing",
                "clearBitsInRegisters_08007bc2": "clearBitsInRegisters",
                "FUN_080057e4": "checkIfDeviceIsConnected_080057e4",
                "PTR_DAT_08005810": "deviceFlags"
            },
            "code": "void checkIfDeviceIsConnected_080057e4(void)\n{\n  clearBitsInRegisters();\n  if ((PTR_DAT_0800580c[0x3c] != -1) || ((PTR_DAT_08005810[2] & 0x20) != 0)) {\n    doNothing();\n  }\n  return;\n}",
            "called": [
                "FUN_0800530c",
                "FUN_08007bc2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e4",
            "calling": [
                "FUN_080025e8",
                "FUN_080053a0",
                "FUN_0800583c",
                "FUN_08001d4c"
            ],
            "imported": true,
            "current_name": "checkIfDeviceIsConnected_080057e4"
        },
        "FUN_08006d8a": {
            "renaming": {
                "uVar1": "bits_to_shift",
                "get_bits_to_shift_08006998": "retrieve_bits_to_shift",
                "FUN_08006d8a": "get_bits_to_shift_08006d8a"
            },
            "code": "int get_bits_to_shift_08006d8a(void)\n{\n  int bits_to_shift = 0;\n  bits_to_shift = retrieve_bits_to_shift();\n  return bits_to_shift;\n}",
            "called": [
                "FUN_08006998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d8a",
            "calling": [],
            "imported": true,
            "current_name": "get_bits_to_shift_08006d8a"
        },
        "FUN_0800b2e8": {
            "renaming": {
                "iVar2": "result",
                "FUNC_08008640": "perform_operation",
                "uVar1": "shiftVal",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar3": "upperNum",
                "uVar4": "combinedNums",
                "FUN_0800b2e8": "calculate_hash_0800b2e8"
            },
            "code": "uint calculate_hash_0800b2e8(uint num1, uint num2, int num3, undefined4 num4)\n{\n  uint shiftVal = (num2 << 1) >> 0x15;\n  ulonglong combinedNums = CONCAT44(num2,num1);\n  if (shiftVal == 0)\n  {\n    if ((num1 | num2 & 0x7fffffff) == 0)\n    {\n      return num1;\n    }\n    combinedNums = perform_operation(num1,num2,0,DAT_0800b3c8);\n    if (num3 < DAT_0800b3cc) goto LAB_0800b34a;\n    shiftVal = ((uint)((int)(combinedNums >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shiftVal == 0x7ff)\n  {\n    return perform_operation(num1,num2,num1,num2,num4);\n  }\n  uint upperNum = (uint)(combinedNums >> 0x20);\n  int result = shiftVal + num3;\n  if (result < 0x7ff)\n  {\n    if (0 < result)\n    {\n      return (uint)combinedNums;\n    }\n    if (result + 0x35 < 0 == SCARRY4(result,0x35))\n    {\n      uint newNum = upperNum & 0x800fffff | (result + 0x36) * 0x100000;\n      return perform_operation((uint)combinedNums,newNum,0,DAT_0800b3d8);\n    }\n    if (num3 < 0xc351)\n    {\n      combinedNums = combinedNums & 0x8000000000000000 | (ulonglong)DAT_0800b3d0 | 0x1a56e1f00000000;\n      goto LAB_0800b34a;\n    }\n  }\n  return perform_operation(DAT_0800b3d4,upperNum & 0x80000000 | 0x7e37e43c,DAT_0800b3c0,DAT_0800b3c4);\n}",
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2e8",
            "calling": [
                "FUN_0800a5a0"
            ],
            "imported": true,
            "current_name": "calculate_hash_0800b2e8"
        },
        "FUN_08005220": {
            "renaming": {
                "FUN_08005220": "do_nothing_08005220"
            },
            "code": "\nvoid do_nothing_08005220(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005220",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": true,
            "current_name": "do_nothing_08005220"
        },
        "FUN_08007520": {
            "renaming": {
                "FUN_08007520": "set_bit_in_short_array_if_odd_08007520",
                "param_1": "number",
                "set_bit_in_short_array_080073d4": "set_bit_in_short_array"
            },
            "code": "void set_bit_in_short_array_if_odd_08007520(uint number) {\n  if ((number & 1) != 0) {\n    set_bit_in_short_array(0x3e);\n  }\n  return;\n}",
            "called": [
                "FUN_080073d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007520",
            "calling": [
                "FUN_08007930"
            ],
            "imported": true,
            "current_name": "set_bit_in_short_array_if_odd_08007520"
        },
        "FUN_08007884": {
            "renaming": {
                "FUN_08007884": "get_bitfield_08007884",
                "iVar1": "bit_1",
                "iVar2": "bit_2",
                "iVar3": "bit_3",
                "iVar4": "bit_4",
                "iVar5": "bit_5",
                "uVar6": "bit_0"
            },
            "code": "uint get_bitfield_08007884(void)\n{\n  int bit_0 = get_bit_from_uint_at_index_08007854(0);\n  int bit_1 = get_bit_from_uint_at_index_08007854(0x36);\n  int bit_2 = get_bit_from_uint_at_index_08007854(0x37);\n  int bit_3 = get_bit_from_uint_at_index_08007854(0x38);\n  int bit_4 = get_bit_from_uint_at_index_08007854(0x39);\n  int bit_5 = get_bit_from_uint_at_index_08007854(0xf);\n  uint bitfield = bit_0 | (bit_1 << 4) | (bit_2 << 3) | (bit_3 << 2) | (bit_4 << 1) | (bit_5 << 7);\n  return bitfield;\n}",
            "called": [
                "FUN_08007854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007884",
            "calling": [
                "FUN_08007930"
            ],
            "imported": true,
            "current_name": "get_bitfield_08007884"
        },
        "FUN_08004250": {
            "renaming": {
                "PTR_s___default_seek__mm_min___6__0800448c": "configSeekRate",
                "PTR_s___n_decimals__int___13__080044b0": "configDecimals",
                "FUN_08004250": "printConfigurationDetails_08004250",
                "PTR_DAT_08004470": "configStepX",
                "PTR_s___default_feed__mm_min___5__08004488": "configFeedRate",
                "printAbsoluteValue_080037fc": "printAbsoluteValue",
                "PTR_s___hard_limits__bool___17__080044c0": "configHardLimits",
                "writeStringToMemory_080036c6": "writeStringToMemory",
                "PTR_s____19__080044cc": "configHomingFeedRate",
                "PTR_DAT_08004474": "configValues",
                "PTR_s___acceleration__mm_sec_2___9__080044a0": "configAccel",
                "PTR_s___n_arc_correction__int___12__080044ac": "configArcCorrection",
                "printFloat_08003826": "printFloat",
                "PTR_s___auto_start__bool___15__080044b8": "configAutoStart",
                "PTR_s___junction_deviation__mm___10__080044a4": "configJunctionDeviation",
                "PTR_s___x__step_mm___1__08004478": "configStepX",
                "PTR_s___homing_pull_off__mm___23__080044dc": "configHomingPullOff",
                "PTR_s___homing_dir_invert_mask__int__080044c8": "configHomingInvertMask",
                "PTR_s___homing_cycle__bool___18__080044c4": "configHomingCycle",
                "PTR_s___invert_step_enable__bool___16__080044bc": "configStepEnableInvert",
                "uVar1": "floatValue",
                "PTR_s___arc__mm_segment___11__080044a8": "configArcSegment",
                "PTR_DAT_080044e4": "configEndMessage",
                "PTR_s___step_pulse__usec___4__08004484": "configStepPulse",
                "PTR_s___homing_debounce__msec___22__080044d8": "configHomingDebounce",
                "PTR_s___report_inches__bool___14__080044b4": "configReportInches",
                "PTR_s___y__step_mm___2__0800447c": "configStepY",
                "PTR_s___homing_feed__mm_min___20__080044d0": "configHomingFeedRate",
                "PTR_s____7__08004494": "configMisc",
                "PTR_s___step_port_invert_mask__int__08004490": "configStepInvertMask",
                "PTR_s___homing_seek__mm_min___21__080044d4": "configHomingSeekRate",
                "PTR_s___z__step_mm___3__08004480": "configStepZ"
            },
            "code": "void printConfigurationDetails_08004250(void)\n{\n  writeStringToMemory(PTR_DAT_08004470);\n  printFloat(getConfigValue(PTR_DAT_08004470Value));\n  writeStringToMemory(PTR_s___y__step_mm___2__0800447c);\n  printFloat(getConfigValue(PTR_s___y__step_mm___2__0800447cValue));\n  writeStringToMemory(PTR_s___z__step_mm___3__08004480);\n  printAbsoluteValue(getConfigValue(PTR_s___z__step_mm___3__08004480Value));\n  writeStringToMemory(PTR_s___step_pulse__usec___4__08004484);\n  printFloat(getConfigValue(PTR_s___step_pulse__usec___4__08004484Value));\n  writeStringToMemory(PTR_s___default_feed__mm_min___5__08004488);\n  printFloat(getConfigValue(PTR_s___default_feed__mm_min___5__08004488Value));\n  writeStringToMemory(PTR_s___default_seek__mm_min___6__0800448c);\n  printAbsoluteValue(getConfigValue(PTR_s___default_seek__mm_min___6__0800448cValue));\n  writeStringToMemory(PTR_s___step_port_invert_mask__int__08004490);\n  print_binary_representation(getConfigValue(PTR_s___step_port_invert_mask__int__08004490Value));\n  writeStringToMemory(PTR_s___arc__mm_segment___11__080044a8);\n  printAbsoluteValue(getConfigValue(PTR_s___arc__mm_segment___11__080044a8Value));\n  writeStringToMemory(PTR_s___n_arc_correction__int___12__080044ac);\n  printAbsoluteValue(getConfigValue(PTR_s___n_arc_correction__int___12__080044acValue));\n  writeStringToMemory(PTR_s___n_decimals__int___13__080044b0);\n  printAbsoluteValue((getConfigValue(PTR_s____7__08004494Value) & 1) != 0);\n  writeStringToMemory(PTR_s___report_inches__bool___14__080044b4);\n  printAbsoluteValue((getConfigValue(PTR_s____7__08004494Value) & 2) != 0);\n  writeStringToMemory(PTR_s___auto_start__bool___15__080044b8);\n  printAbsoluteValue((getConfigValue(PTR_s____7__08004494Value) & 4) != 0);\n  writeStringToMemory(PTR_s___invert_step_enable__bool___16__080044bc);\n  printAbsoluteValue((getConfigValue(PTR_s____7__08004494Value) & 8) != 0);\n  writeStringToMemory(PTR_s___hard_limits__bool___17__080044c0);\n  printAbsoluteValue((getConfigValue(PTR_s____7__08004494Value) & 0x10) != 0);\n  writeStringToMemory(PTR_s___homing_cycle__bool___18__080044c4);\n  printAbsoluteValue(getConfigValue(PTR_s___homing_cycle__bool___18__080044c4Value));\n  writeStringToMemory(PTR_s___homing_dir_invert_mask__int__080044c8);\n  print_binary_representation(getConfigValue(PTR_s___homing_dir_invert_mask__int__080044c8Value));\n  writeStringToMemory(PTR_s____19__080044cc);\n  printFloat(getConfigValue(PTR_s____19__080044ccValue));\n  writeStringToMemory(PTR_s___homing_seek__mm_min___21__080044d4);\n  printAbsoluteValue(getConfigValue(PTR_s___homing_seek__mm_min___21__080044d4Value));\n  writeStringToMemory(PTR_s___homing_debounce__msec___22__080044d8);\n  printFloat(getConfigValue(PTR_s___homing_debounce__msec___22__080044d8Value));\n  writeStringToMemory(PTR_s___homing_pull_off__mm___23__080044dc);\n  printAbsoluteValue(getConfigValue(PTR_s___homing_pull_off__mm___23__080044dcValue));\n  writeStringToMemory(configDirInvertMask);\n  print_binary_representation(getConfigValue(configDirInvertMaskValue));\n  writeStringToMemory(PTR_DAT_080044e4);\n}\n",
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08003826",
                "FUN_08009054",
                "FUN_0800375c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004250",
            "calling": [
                "FUN_08003b98",
                "FUN_080051b4"
            ],
            "imported": true,
            "current_name": "printConfigurationDetails_08004250"
        },
        "FUN_08006dc4": {
            "renaming": {
                "FUN_08006dc4": "set_bit_08006dc4",
                "set_bit_at_index_08006a58": "set_bit_at_index",
                "param_1": "bit_index"
            },
            "code": "void set_bit_08006dc4(char bit_index)\n{\n  set_bit_08006dc4_at_index(bit_index);\n  return;\n}",
            "called": [
                "FUN_08006a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc4",
            "calling": [],
            "imported": true,
            "current_name": "set_bit_08006dc4"
        },
        "FUN_08007402": {
            "renaming": {
                "FUN_08007402": "set_short_at_address_based_on_param_08007402",
                "param_1": "parameter"
            },
            "code": "void set_short_at_address_based_on_param_08007402(uint parameter) {\n    uint shifted_param = parameter & 0xf;\n    uint address = ((int)parameter >> 4) * 0x400 + 0x40020018;\n    short value = (short)(1 << shifted_param);\n    *(short *)address = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007402",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": true,
            "current_name": "set_short_at_address_based_on_param_08007402"
        },
        "FUN_08002870": {
            "renaming": {
                "FUN_08002870": "increment_char_08002870",
                "param_1": "input_char",
                "local_9": "incremented_char"
            },
            "code": "char increment_char_08002870(char input_char) {\n  char incremented_char = input_char + 1;\n  if (incremented_char == 0x12) {\n    incremented_char = 0;\n  }\n  return incremented_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002870",
            "calling": [
                "FUN_08002ef0",
                "FUN_08003004",
                "FUN_08002e08",
                "FUN_08002ba8",
                "FUN_08002f40"
            ],
            "imported": true,
            "current_name": "increment_char_08002870"
        },
        "FUN_08000210": {
            "renaming": {
                "do_nothing_080001ec": "do_nothing",
                "FUN_08000210": "do_nothing_twice_08000210",
                "do_nothing_080001d4": "do_nothing"
            },
            "code": "void do_nothing_twice_08000210(){\n  do_nothing();\n  do_nothing();\n}",
            "called": [
                "FUN_080001ec",
                "FUN_080001d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000210",
            "calling": [
                "FUN_080025e8",
                "FUN_080001f8",
                "FUN_08000220"
            ],
            "imported": true,
            "current_name": "do_nothing_twice_08000210"
        },
        "FUN_08005900": {
            "renaming": {
                "param_1": "input",
                "FUN_08005900": "handle_input_08005900",
                "PTR_DAT_08005978": "device_status"
            },
            "code": "int handle_input_08005900(byte input) {\n  if (input == 0x7e) {\n    PTR_DAT_08005978[2] |= 2;\n    return 1;\n  }\n  if (input < 0x7f) {\n    if (input == 0x3f) {\n      PTR_DAT_08005978[2] |= 1;\n      return 1;\n    }\n    if (input < 0x40) {\n      if (input == 0x18) {\n        initialize_device_if_not_connected();\n        return 1;\n      }\n      if (input == 0x21) {\n        PTR_DAT_08005978[2] |= 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005900",
            "calling": [
                "FUN_08008286"
            ],
            "imported": true,
            "current_name": "handle_input_08005900"
        },
        "FUN_08002638": {
            "renaming": {
                "bVar2": "is_negative",
                "bVar1": "digit",
                "bVar3": "is_float",
                "local_c": "current_ptr",
                "iVar4": "is_calculated",
                "param_1": "str_offset",
                "local_1c": "float_bits",
                "local_16": "decimal_places_count",
                "FUN_08002638": "parse_integer_from_string_08002638",
                "local_15": "decimal_places",
                "param_2": "str_ptr",
                "param_3": "result_ptr",
                "pcVar6": "i",
                "pcVar5": "current_ptr",
                "local_d": "current_char",
                "uVar7": "return_value",
                "local_14": "integer_part",
                "uVar8": "reversed_float_bits"
            },
            "code": "uint32_t parse_integer_from_string_08002638(int32_t str_offset, uint8_t *str_ptr, uint32_t *result_ptr)\n{\n  uint8_t current_char;\n  bool is_negative = false;\n  bool is_float = false;\n  int32_t integer_part = 0;\n  int32_t decimal_part = 0;\n  int32_t decimal_places = 0;\n  int32_t i = str_offset + (uint32_t)*str_ptr;\n  uint8_t *current_ptr = (uint8_t *)(i + 1);\n  current_char = *i;\n  if (current_char == '-') {\n    is_negative = true;\n    current_char = *current_ptr;\n    current_ptr += 1;\n  }\n  else {\n    if (current_char == '+') {\n      current_ptr += 1;\n      current_char = *current_ptr;\n    }\n  }\n  while (true) {\n    uint8_t digit = current_char - '0';\n    if (digit < 10) {\n      decimal_places += 1;\n      if (decimal_places < 9) {\n        if (is_float) {\n          decimal_places -= 1;\n        }\n        integer_part = digit + integer_part * 10;\n      }\n      else if (!is_float) {\n        decimal_places += 1;\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (is_float)) {\n        if (decimal_places == 0) {\n          *result_ptr = 0;\n        }\n        else {\n          uint32_t float_bits = calculate_float_bits(integer_part);\n          int32_t is_calculated = check_if_results_calculated_and_concatenated(float_bits, 0);\n          if (is_calculated == 0) {\n            while (decimal_places < -1) {\n              uint64_t reversed_float_bits = reverse_and_improve(float_bits);\n              reversed_float_bits = calculate_double_bits(reversed_float_bits, 0x08002800, 0x08002804);\n              float_bits = calculate_float_bits(reversed_float_bits);\n              decimal_places += 2;\n            }\n            if (decimal_places < 0) {\n              uint64_t reversed_float_bits = reverse_and_improve(float_bits);\n              reversed_float_bits = calculate_double_bits(reversed_float_bits, 0x08002808, 0x0800280c);\n              float_bits = calculate_float_bits(reversed_float_bits);\n            }\n            else {\n              while (0 < decimal_places) {\n                float_bits = calculate_float_bits(float_bits, 0x08002810);\n                decimal_places -= 1;\n              }\n            }\n          }\n          if (is_negative) {\n            *result_ptr = float_bits ^ 0x80000000;\n          }\n          else {\n            *result_ptr = float_bits;\n          }\n          *str_ptr = (uint8_t)current_ptr - (uint8_t)str_offset - 1;\n          return 1;\n        }\n      }\n      is_float = true;\n    }\n    current_char = *current_ptr;\n    current_ptr += 1;\n  }\n}",
            "called": [
                "FUN_08008590",
                "FUN_08009214",
                "FUN_08008e3c",
                "FUN_08008640",
                "FUN_08008eec",
                "FUN_08008c30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002638",
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "imported": true,
            "current_name": "parse_integer_from_string_08002638"
        },
        "FUN_080051b4": {
            "renaming": {
                "iVar1": "verificationResult",
                "verify_and_fill_buffer_08004d7c": "verifyAndFillBuffer",
                "auStack_18": "buffer",
                "local_9": "bufferIndex",
                "verify_data_storage_08004dd2": "verifyDataStorage",
                "FUN_080051b4": "checkDataStorageAndFillBuffer_080051b4",
                "initialize_data_storage_08004c2a_08004c48": "initializeDataStorage",
                "printErrorMessage_08004030": "printErrorMessage",
                "printConfigurationDetails_08004250": "printConfigurationDetails"
            },
            "code": "void checkDataStorageAndFillBuffer_080051b4(void)\n{\n  int verificationResult;\n  undefined buffer[15];\n  byte bufferIndex;\n  \n  verificationResult = verify_data_storage_08004dd2();\n  if (verificationResult == 0) {\n    printErrorMessage_08004030(10);\n    initialize_data_storage_08004c2a_08004c48(1);\n    printConfigurationDetails_08004250();\n  }\n  for (bufferIndex = 0; bufferIndex < 8; bufferIndex++) {\n    verificationResult = verify_and_fill_buffer_08004d7c(bufferIndex, buffer);\n    if (verificationResult == 0) {\n      printErrorMessage_08004030(10);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004c48",
                "FUN_08004030",
                "FUN_08004dd2",
                "FUN_08004d7c",
                "FUN_08004250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051b4",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": true,
            "current_name": "checkDataStorageAndFillBuffer_080051b4"
        },
        "FUN_080098d0": {
            "renaming": {
                "local_50": "value",
                "iVar3": "input_null_check_result",
                "local_4c": "pointer",
                "piVar5": "pointer_to_input_validity",
                "puVar4": "pointer_to_value",
                "uStack_44": "input_2_copy",
                "param_1": "input_1",
                "local_38": "func_result",
                "local_48": "input_1_copy",
                "param_2": "input_2",
                "FUN_080098d0": "calculate_result_and_set_value_if_valid_input_080098d0_080098d0",
                "cVar1": "input_type",
                "uVar2": "result",
                "uStack_3c": "input_2_copy",
                "local_30": "input_validity",
                "local_40": "input_1_copy"
            },
            "code": "undefined4 calculate_result_and_set_value_if_valid_input_080098d0_080098d0(undefined4 input_1,undefined4 input_2)\\n{\\n  char input_type = *PTR_DAT_08009988;\\n  undefined4 result = calculate_0800a1bc();\\n  int input_validity = is_valid_input_08008b74(input_1,input_2,input_1,input_2);\\n  if ((input_type == -1) || (input_validity != 0) || (check_input_is_null_08008b24_08008b24(input_1,input_2,0,0) == 0)) {\\n    return result;\\n  }\\n  undefined4 value = 1;\\n  undefined *pointer = PTR_DAT_0800998c;\\n  undefined4 input_1_copy = input_1;\\n  undefined4 input_2_copy = input_2;\\n  if (input_type == \"\\0\") {\\n    undefined8 zero = 0;\\n    int zero_calculated = returnZero_0800b2e0(&value);\\n    if (zero_calculated != 0) {\\n      goto joined_r0x0800997a;\\n    }\\n  }\\n  else {\\n    undefined8 func_result = FUNC_08008894(0,0,0,0);\\n    if (input_type != \"\\x02\") {\\n      goto joined_r0x0800996c;\\n    }\\n  }\\n  undefined4 *pointer_to_value = (undefined4 *)get_value_from_pointer_0800b3dc();\\n  *pointer_to_value = 0x21;\\njoined_r0x0800997a:\\n  if (input_validity != 0) {\\n    int *pointer_to_input_validity = (int *)get_value_from_pointer_0800b3dc();\\n    *pointer_to_input_validity = input_validity;\\n  }\\n  return (undefined4)value;\\n}",
            "called": [
                "FUN_0800b3dc",
                "FUN_0800b2e0",
                "FUN_08008b24",
                "FUN_08008894",
                "FUN_08008b74",
                "FUN_0800a1bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d0",
            "calling": [
                "FUN_08001994",
                "FUN_08002978",
                "FUN_08003004",
                "FUN_080005b4"
            ],
            "imported": true,
            "current_name": "calculate_result_and_set_value_if_valid_input_080098d0_080098d0"
        },
        "FUN_08005c30": {
            "renaming": {
                "bVar1": "is_valid",
                "param_1": "color_value",
                "DAT_08005c70": "pixel_data",
                "set_pixel_color_08005bdc": "set_pixel_color",
                "FUN_08005c30": "is_valid_color_08005c30"
            },
            "code": "bool is_valid_color_08005c30(int color_value)\n{\n  bool is_valid = color_value - 1U < 0x1000000;\n  if (is_valid) {\n    DAT_08005c70[1] = color_value + -1;\n    set_pixel_color(0xffffffff,0xf);\n    DAT_08005c70[2] = 0;\n    *DAT_08005c70 = 7;\n  }\n  return !is_valid;\n}",
            "called": [
                "FUN_08005bdc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c30",
            "calling": [
                "FUN_0800618c"
            ],
            "imported": true,
            "current_name": "is_valid_color_08005c30"
        },
        "FUN_0800b51c": {
            "renaming": {
                "FUN_0800b51c": "do_nothing_0800b51c"
            },
            "code": "\nvoid do_nothing_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b51c",
            "calling": [
                "FUN_0800b524"
            ],
            "imported": true,
            "current_name": "do_nothing_0800b51c"
        },
        "FUN_0800056c": {
            "renaming": {
                "uVar1": "reversed_value",
                "param_1": "original_float_value",
                "FUN_0800056c": "calculate_updated_float_value_0800056c"
            },
            "code": "float calculate_updated_float_value_0800056c(float original_float_value){\\n  undefined8 reversed_value;\\n\\n  if (PTR_DAT_080005b0[3] != \"\\0\") {\\n    reversed_value = reverse_and_improve_08008590(original_float_value);\\n    reversed_value = FUNC_08008640((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20),DAT_080005a8,DAT_080005ac);\\n    original_float_value = calculate_float_bits_08008c30((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\\n  }\\n  return original_float_value;\\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800056c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": true,
            "current_name": "calculate_updated_float_value_0800056c"
        },
        "FUN_08002f24": {
            "renaming": {
                "copy_and_increment_first_char_08002ef0": "copy_and_increment_first_char_08002ef0",
                "fill_buffer_with_value_0800b430": "fill_buffer_with_value_0800b430",
                "FUN_08002f24": "copy_and_increment_first_char_08002ef0_and_fill_buffer_with_value_0800b430_08002f24",
                "PTR_DAT_08002f3c": "PTR_DAT_08002f3c"
            },
            "code": "void copy_and_increment_first_char_08002ef0_and_fill_buffer_with_value_0800b430_08002f24(void)\n{\n  copy_and_increment_first_char_08002ef0();\n  fill_buffer_with_value_0800b430(PTR_DAT_08002f3c,0,0x1c);\n  return;\n}",
            "called": [
                "FUN_0800b430",
                "FUN_08002ef0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f24",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": true,
            "current_name": "copy_and_increment_first_char_08002ef0_and_fill_buffer_with_value_0800b430_08002f24"
        },
        "FUN_0800981c": {
            "renaming": {
                "local_50": "constant1",
                "iVar3": "shift_result",
                "puVar2": "hypotenuse_ptr",
                "piVar5": "value_ptr",
                "puVar4": "value_ptr",
                "uStack_44": "x2",
                "param_1": "x1",
                "uStack_34": "constant4",
                "puStack_4c": "constant2_ptr",
                "local_38": "constant3",
                "local_48": "x1",
                "param_2": "x2",
                "param_3": "y1",
                "param_4": "y2",
                "cVar1": "hypotenuse_type",
                "uStack_3c": "y2",
                "local_30": "shift_result",
                "local_40": "y1",
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "uVar6": "result"
            },
            "code": "uint64_t calculate_hypotenuse_0800981c(uint32_t x1, uint32_t x2, uint32_t y1, uint32_t y2)\n{\n  char hypotenuse_type;\n  uint32_t *hypotenuse_ptr;\n  int shift_result;\n  uint64_t result;\n  uint32_t constant1 = 3;\n  uint32_t *constant2_ptr = PTR_s_hypot_080098c0;\n  uint32_t constant3 = 0;\n  uint32_t constant4;\n  uint32_t constant5;\n  uint32_t constant6 = DAT_080098c4;\n  uint32_t constant7 = 0xe0000000;\n  uint32_t *value_ptr;\n\n  hypotenuse_ptr = PTR_DAT_080098cc;\n  result = FUNC_08009b24();\n  if (*hypotenuse_ptr == -1) {\n    return result;\n  }\n  shift_result = set_sign_bit_and_shift_right_0800b2d4();\n  if (shift_result != 0) {\n    return result;\n  }\n  shift_result = set_sign_bit_and_shift_right_0800b2d4(x1, x2);\n  if (shift_result == 0) {\n    return result;\n  }\n  shift_result = set_sign_bit_and_shift_right_0800b2d4(y1, y2);\n  if (shift_result == 0) {\n    return result;\n  }\n  hypotenuse_type = *hypotenuse_ptr;\n  if (hypotenuse_type == '\\0') {\n    constant4 = constant7;\n    constant5 = DAT_080098c8;\n  } else if (hypotenuse_type == '\\x02') {\n    constant4 = constant3;\n    constant5 = constant6;\n  }\n  value_ptr = (uint32_t *)get_value_from_pointer_0800b3dc();\n  *value_ptr = 0x22;\n  result = ((uint64_t)constant5 << 32) | constant4;\n  if (shift_result != 0) {\n    value_ptr = (uint32_t *)get_value_from_pointer_0800b3dc();\n    *value_ptr = shift_result;\n    result = ((uint64_t)constant5 << 32) | constant4;\n  }\n  return result;\n}",
            "called": [
                "FUN_0800b2d4",
                "FUN_0800b3dc",
                "FUN_0800b2e0",
                "FUN_08009b24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800981c",
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "imported": true,
            "current_name": "calculate_hypotenuse_0800981c"
        },
        "FUN_080059b4": {
            "renaming": {
                "do_nothing_08005a50": "do_nothing",
                "is_valid_address_08006d72": "is_valid_address",
                "DAT_080059f4": "display_mode",
                "FUN_080059b4": "initialize_display_and_return_080059b4",
                "set_display_mode_and_return_08006ce0": "set_display_mode_and_return"
            },
            "code": "void initialize_display_and_return_080059b4(void)\n{\n  int* DAT_080059f4 = DAT_080059f4;\n  *DAT_080059f4 |= 0x200;\n  *DAT_080059f4 |= 0x400;\n  *DAT_080059f4 |= 0x100;\n  is_valid_address(16000);\n  set_DAT_080059f4_and_return(3);\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08005a50",
                "FUN_08006d72",
                "FUN_08006ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059b4",
            "calling": [
                "FUN_08007540"
            ],
            "imported": true,
            "current_name": "initialize_display_and_return_080059b4"
        },
        "FUN_08006c04": {
            "renaming": {
                "uVar1": "num_bits",
                "param_1": "input",
                "param_2": "bit_offset",
                "PTR_": "ptr_",
                "param_3": "output1",
                "param_4": "output2",
                "DAT_": "dat_",
                "FUN_08006c04": "extract_bits_08006c04"
            },
            "code": "void extract_bits_08006c04(uint input, uint bit_offset, uint *output1, uint *output2)\n{\n  uint num_bits;\n  uint mask;\n  bit_offset = bit_offset & 7;\n  num_bits = 7 - bit_offset;\n  if (num_bits > 3) {\n    num_bits = 4;\n  }\n  if (bit_offset + 4 < 7) {\n    bit_offset = 0;\n  }\n  else {\n    bit_offset = bit_offset - 3;\n  }\n  mask = (1 << (num_bits & 0xff)) - 1U;\n  *output1 = mask & (input >> (bit_offset & 0xff));\n  *output2 = mask & input;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c04",
            "calling": [
                "FUN_08006d98"
            ],
            "imported": true,
            "current_name": "extract_bits_08006c04"
        },
        "FUN_08002e08": {
            "renaming": {
                "FUN_08002e08": "calculate_shift_and_sum_between_strings_08002e08",
                "uVar1": "first_string_value",
                "puVar3": "current_string",
                "local_18": "previous_string",
                "uVar2": "second_string_value",
                "local_11": "current_char_index"
            },
            "code": "void calculate_shift_and_sum_between_strings_08002e08(void)\\n{\\n  undefined4 first_string_value;\\n  undefined4 second_string_value;\\n  undefined *current_string;\\n  undefined *previous_string;\\n  byte current_char_index;\\n  current_char_index = *PTR_DAT_08002ed0;\\n  previous_string = (undefined *)0x0;\\n  while (current_char_index != *PTR_DAT_08002ed8) {\\n    current_string = PTR_DAT_08002ed4 + (uint)current_char_index * 0x40;\\n    if ((previous_string != (undefined *)0x0) && ((previous_string[0x24] != \"\\0\" || (current_string[0x24] != \"\\0\")))) {\\n      first_string_value = FUNC_08009054(*(undefined4 *)(previous_string + 0x18),*(undefined4 *)(previous_string + 0x14));\\n      second_string_value = FUNC_08009054(*(undefined4 *)(current_string + 0x18),*(undefined4 *)(previous_string + 0x14));\\n      calculate_shift_and_sum_08002c18(previous_string,first_string_value,second_string_value);\\n      previous_string[0x24] = 0;\\n    }\\n    current_char_index = increment_char_08002870(current_char_index);\\n    previous_string = current_string;\\n  }\\n  first_string_value = FUNC_08009054(*(undefined4 *)(previous_string + 0x18),*(undefined4 *)(previous_string + 0x14));\\n  second_string_value = FUNC_08009054(0,*(undefined4 *)(previous_string + 0x14));\\n  calculate_shift_and_sum_08002c18(previous_string,first_string_value,second_string_value);\\n  previous_string[0x24] = 0;\\n  return;\\n}",
            "called": [
                "FUN_08002870",
                "FUN_08002c18",
                "FUN_08009054"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e08",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": true,
            "current_name": "calculate_shift_and_sum_between_strings_08002e08"
        },
        "FUN_08006680": {
            "renaming": {
                "FUN_08006680": "calculate_shifted_result_08006680",
                "uVar1": "result",
                "count_leading_zeroes": "count_leading_zeroes",
                "PTR_DAT_080066c8": "data_pointer",
                "uVar2": "leading_zeroes",
                "DAT_080066c4": "data_array",
                "calculate_result_08006628": "calculate_result"
            },
            "code": "uint calculate_shifted_result_08006680() {\n  uint result = calculate_result();\n  uint leading_zeroes = count_leading_zeroes(0x380000);\n  uint shift_amount = (*(uint *)(PTR_DAT_080066c8 + 8) & 0x1c00) >> (leading_zeroes & 0xff);\n  return result >> shift_amount;\n}",
            "called": [
                "FUN_08006628"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006680",
            "calling": [
                "FUN_08007f54"
            ],
            "imported": true,
            "current_name": "calculate_shifted_result_08006680"
        },
        "FUN_08000340": {
            "renaming": {
                "FUN_08000340": "store_data_08000340",
                "PTR_DAT_0800036c": "buffer_initialized",
                "param_1": "index",
                "PTR_DAT_08000370": "data_buffer",
                "initialize_buffer_080002f0": "initialize_buffer",
                "param_2": "data"
            },
            "code": "void store_data_08000340(uint index, undefined data) {\n  if (*PTR_DAT_0800036c == 0) {\n    initialize_buffer();\n  }\n  PTR_DAT_08000370[index & 0x3ff] = data;\n  return;\n}",
            "called": [
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000340",
            "calling": [
                "FUN_08004c2a",
                "FUN_08000374"
            ],
            "imported": true,
            "current_name": "store_data_08000340"
        },
        "thunk_FUN_08009990": {
            "renaming": {
                "iVar1": "temp_int_1",
                "thunk_FUN_08009990": "calculate_thunk_thunk_08009990",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "uVar3": "temp_uint_2",
                "uVar2": "temp_uint_1",
                "uVar5": "temp_uint_4",
                "uVar4": "temp_uint_3",
                "uVar6": "temp_uint64_1"
            },
            "code": "uint calculate_thunk_thunk_08009990(uint parameter_1, uint parameter_2, uint parameter_3, uint parameter_4)\n{\n  int temp_int_1;\n  undefined4 temp_uint_1;\n  uint temp_uint_2;\n  uint temp_uint_3;\n  uint temp_uint_4;\n  undefined8 temp_uint64_1;\n  \n  temp_uint64_1 = CONCAT44(DAT_08009b04, DAT_08009b00);\n  temp_uint_3 = parameter_4 & 0x7fffffff;\n  if ((DAT_08009b18 < (temp_uint_3 | (-parameter_3 | parameter_3) >> 0x1f)) || (temp_uint_4 = parameter_2 & 0x7fffffff, DAT_08009b18 < (temp_uint_4 | (-parameter_1 | parameter_1) >> 0x1f))) {\n    temp_uint_3 = calculate_function_1(parameter_3, parameter_4, parameter_1, parameter_2);\n  }\n  else {\n    if ((parameter_4 + 0xc0100000 | parameter_3) == 0) {\n      temp_uint_3 = get_value_1();\n      return temp_uint_3;\n    }\n    temp_uint_2 = (int)parameter_4 >> 0x1e & 2U | parameter_2 >> 0x1f;\n    if ((temp_uint_4 | parameter_1) == 0) {\n      temp_uint_3 = DAT_08009af0;\n      if ((temp_uint_2 != 2) && (temp_uint_3 = parameter_1, temp_uint_2 == 3)) {\n        temp_uint_3 = DAT_08009af8;\n      }\n    }\n    else {\n      if ((temp_uint_3 | parameter_3) != 0) {\n        if (temp_uint_3 == DAT_08009b18) {\n          temp_uint_2 = temp_uint_2 - 1;\n          if (temp_uint_4 == temp_uint_3) {\n            if (2 < temp_uint_2) {\n              return DAT_08009b10;\n            }\n            return *(uint *)(PTR_DAT_08009b20 + temp_uint_2 * 8);\n          }\n          if (temp_uint_2 < 3) {\n            return *(uint *)(PTR_DAT_08009b1c + temp_uint_2 * 8);\n          }\n          return 0;\n        }\n        if (temp_uint_4 != DAT_08009b18) {\n          temp_int_1 = (int)(temp_uint_4 - temp_uint_3) >> 0x14;\n          if ((int)(temp_uint_4 - temp_uint_3) < 0x3d00000) {\n            if (((int)parameter_4 < 0) && (temp_int_1 + 0x3c < 0 != SCARRY4(temp_int_1,0x3c))) {\n              temp_uint64_1 = 0;\n            }\n            else {\n              calculate_function_2(parameter_1, parameter_2, parameter_3, parameter_4, parameter_4);\n              do_nothing();\n              temp_uint64_1 = get_value_1();\n            }\n          }\n          temp_uint_1 = (undefined4)((ulonglong)temp_uint64_1 >> 0x20);\n          temp_uint_3 = (uint)temp_uint64_1;\n          if (temp_uint_2 == 1) {\n            return temp_uint_3;\n          }\n          if (temp_uint_2 == 2) {\n            temp_uint64_1 = calculate_function_3(temp_uint_3, temp_uint_1, DAT_08009ae8, DAT_08009aec);\n            temp_uint_3 = calculate_function_3(DAT_08009af0, DAT_08009af4, (int)temp_uint64_1, (int)((ulonglong)temp_uint64_1 >> 0x20));\n            return temp_uint_3;\n          }\n          if (temp_uint_2 == 0) {\n            return temp_uint_3;\n          }\n          temp_uint64_1 = calculate_function_3(temp_uint_3, temp_uint_1, DAT_08009ae8, DAT_08009aec);\n          temp_uint_3 = calculate_function_3((int)temp_uint64_1, (int)((ulonglong)temp_uint64_1 >> 0x20), DAT_08009af0, DAT_08009af4);\n          return temp_uint_3;\n        }\n      }\n      temp_uint_3 = DAT_08009b08;\n      if (-1 < (int)parameter_2) {\n        temp_uint_3 = DAT_08009b00;\n      }\n    }\n  }\n  return temp_uint_3;\n}",
            "called": [
                "FUN_08009990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009818",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": true,
            "current_name": "calculate_thunk_thunk_08009990"
        },
        "FUN_08004bf4": {
            "renaming": {
                "FUN_08004bf4": "writeDataToBufferAtOffset_08004bf4",
                "writeDataToBuffer_08000374": "writeDataToBuffer",
                "param_1": "bufferIndex",
                "param_2": "data"
            },
            "code": "void writeDataToBufferAtOffset_08004bf4(byte bufferIndex, uint data, uint offset) {\n    ushort bufferOffset = (ushort)(bufferIndex * 0xD + 0x200);\n    writeDataToBuffer(bufferOffset + offset, data, 0xC);\n}",
            "called": [
                "FUN_08000374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bf4",
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "imported": true,
            "current_name": "writeDataToBufferAtOffset_08004bf4"
        },
        "FUN_08004d7c": {
            "renaming": {
                "writeDataToBufferAtOffset_08004bf4": "write_data_to_buffer_at_offset",
                "iVar1": "verification_result",
                "verify_buffer_080003ec": "verify_buffer",
                "FUN_08004d7c": "verify_and_fill_buffer_08004d7c",
                "param_1": "buffer_size",
                "fill_buffer_with_value_0800b430": "fill_buffer_with_value",
                "param_2": "buffer_ptr"
            },
            "code": "bool verify_and_fill_buffer_08004d7c(byte buffer_size, undefined4 buffer_ptr)\n{\n  int verification_result;\n  ushort buffer_size_in_bytes = (ushort)buffer_size * 0xd + 0x200;\n  verification_result = verify_buffer(buffer_ptr, buffer_size_in_bytes, 0xc);\n  if (verification_result == 0) {\n    fill_buffer_with_value(buffer_ptr, 0, 0xc);\n    write_data_to_buffer_at_offset(buffer_size, buffer_ptr);\n  }\n  return verification_result != 0;\n}",
            "called": [
                "FUN_0800b430",
                "FUN_080003ec",
                "FUN_08004bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d7c",
            "calling": [
                "FUN_080005b4",
                "FUN_080004ac",
                "FUN_080044e8",
                "FUN_080051b4"
            ],
            "imported": true,
            "current_name": "verify_and_fill_buffer_08004d7c"
        },
        "FUN_08009278": {
            "renaming": {
                "uVar1": "shift_amount",
                "FUN_08009278": "convert_param_to_int32_08009278",
                "param_1": "param",
                "sign_bit": "sign_bit",
                "uVar2": "shifted_amount",
                "shift_amount": "shift_amount",
                "shifted_param": "shifted_param"
            },
            "code": "uint convert_param_to_int32_08009278(uint param)\n{\n  uint shift_amount;\n  uint shifted_param;\n  uint sign_bit;\n  \n  if (param << 1 < 0x7f000000) {\n    return 0;\n  }\n  \n  shift_amount = (param << 1) >> 0x18;\n  shifted_param = param << 8 | 0x80000000;\n  sign_bit = param & 0x80000000;\n  \n  if (shift_amount < 0x9f && (0x9e - shift_amount) != 0) {\n    shifted_param = shifted_param >> ((0x9e - shift_amount) & 0xff);\n    if (sign_bit != 0) {\n      shifted_param = -shifted_param;\n    }\n    return shifted_param;\n  }\n  \n  if ((0x9e - shift_amount) == 0xffffff9f && (param & 0x7fffff) != 0) {\n    return 0;\n  }\n  \n  if (sign_bit == 0) {\n    return 0x7fffffff;\n  }\n  \n  return 0x80000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009278",
            "calling": [
                "FUN_08003826",
                "FUN_08003b98"
            ],
            "imported": true,
            "current_name": "convert_param_to_int32_08009278"
        },
        "FUN_080004fc": {
            "renaming": {
                "FUNC_08009054": "combine_hashes",
                "uVar1": "hash",
                "FUN_080004fc": "hash_parameters_and_store_in_memory_080004fc",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "calculate_hash_08008e44": "calculate_hash"
            },
            "code": "void hash_parameters_and_store_in_memory_080004fc(unsigned int param_1, unsigned int param_2, unsigned int param_3)\n{\n  unsigned int hash1 = calculate_hash(param_1);\n  unsigned int hash2 = calculate_hash(param_2);\n  unsigned int hash3 = calculate_hash(param_3);\n  hash1 = combine_hashes(hash1,*(unsigned int *)PTR_DAT_08000564);\n  hash2 = combine_hashes(hash2,*(unsigned int *)(PTR_DAT_08000564 + 4));\n  hash3 = combine_hashes(hash3,*(unsigned int *)(PTR_DAT_08000564 + 8));\n  *(unsigned int *)(PTR_DAT_08000568 + 0xc) = hash1;\n  *(unsigned int *)(PTR_DAT_08000568 + 0x10) = hash2;\n  *(unsigned int *)(PTR_DAT_08000568 + 0x14) = hash3;\n  return;\n}",
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004fc",
            "calling": [
                "FUN_0800283a"
            ],
            "imported": true,
            "current_name": "hash_parameters_and_store_in_memory_080004fc"
        },
        "FUN_08000220": {
            "renaming": {
                "do_nothing_twice_08000210": "doNothingTwice",
                "checkDataPointerAndUpdateStatusIfNotZeroOrThree_08002fd4": "checkAndUpdateStatus",
                "FUN_08000220": "updateStatusAndPerformAction_08000220",
                "param_1": "action",
                "do_nothing_080001c8": "doNothing1",
                "do_nothing_080001e0": "doNothing2"
            },
            "code": "void updateStatusAndPerformAction_08000220(char action) {\n  if (action != *PTR_DAT_08000264) {\n    checkAndUpdateStatus();\n    if (action == '\\x01') {\n      do_nothing_080001c8();\n    }\n    else if (action == '\\x02') {\n      do_nothing_080001e0();\n    }\n    else {\n      do_nothing_twice_08000210();\n    }\n    *PTR_DAT_08000264 = action;\n  }\n  return;\n}",
            "called": [
                "FUN_080001c8",
                "FUN_08002fd4",
                "FUN_08000210",
                "FUN_080001e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000220",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": true,
            "current_name": "updateStatusAndPerformAction_08000220"
        },
        "FUN_08005238": {
            "renaming": {
                "FUN_08005238": "reset_pointer_to_zero_08005238",
                "do_nothing_and_return_08005250": "do_nothing_and_return",
                "PTR_DAT_0800524c": "pointer_to_data"
            },
            "code": "void reset_pointer_to_zero_08005238(void)\n{\n  *PTR_DAT_0800524c = 0;\n  do_nothing_and_return();\n  return;\n}",
            "called": [
                "FUN_08005250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005238",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": true,
            "current_name": "reset_pointer_to_zero_08005238"
        },
        "FUN_08007da8": {
            "renaming": {
                "FUN_08007da8": "set_flag_and_bit_08007da8",
                "DAT_08007dd4": "data_ptr",
                "puVar1": "data"
            },
            "code": "void set_flag_and_bit_08007da8(uint *DAT_08007dd4){\n  uint *data = DAT_08007dd4;\n  data[8] |= 0x10;\n  *data |= 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007da8",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": true,
            "current_name": "set_flag_and_bit_08007da8"
        },
        "FUN_08004148": {
            "renaming": {
                "PTR_s_ALARM__08004190": "ALARM:",
                "PTR_s___MPos__0800419c": "MPos:",
                "writeStringToMemory_080036c6": "printToMemory",
                "do_nothing_08002814": "wait",
                "FUN_08004148": "printAlarmMessage_08004148",
                "param_1": "alarmCode",
                "PTR_s_Abort_during_cycle_08004198": "Abort during cycle",
                "PTR_s_Hard_limit_08004194": "Hard limit"
            },
            "code": "void printAlarmMessage_08004148(char alarmCode)\n{\n  printToMemory(\"PTR_s_ALARM__08004190\");\n  if (alarmCode == -2) {\n    printToMemory(\"PTR_s_Abort_during_cycle_08004198\");\n  }\n  else if (alarmCode == -1) {\n    printToMemory(\"PTR_s_Hard_limit_08004194\");\n  }\n  printToMemory(\"PTR_s___MPos__0800419c\");\n  wait(500);\n  return;\n}",
            "called": [
                "FUN_080036c6",
                "FUN_08002814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004148",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": true,
            "current_name": "printAlarmMessage_08004148"
        },
        "FUN_08004940": {
            "renaming": {
                "FUNC_08009054": "combineHash",
                "switchD_0800495e::switchdataD_08004964": "switchTable",
                "hashTable[local_11 + 3]": "hashTable[hashIndex + 3]",
                "FUNC_08008640": "combineFloatHash",
                "PTR_DAT_08004bac + (uint)local_11 * 4": "ptrToData2 + hashIndex * 4",
                "PTR_DAT_08004bac": "ptrToData2",
                "undefined4 auStack_2c [6]": "uint32_t hashTable[3]",
                "printFloat_08003826": "printFloat",
                "uint uVar2": "uint8_t hashIndex",
                "undefined4 uVar3": "uint32_t tempHash",
                "undefined4 uVar1": "uint32_t hash",
                "(byte)PTR_DAT_08004b88[1]": "(uint8_t)ptrToData1[1]",
                "calculate_float_bits_08008c30": "calculateFloatBits",
                "calculate_hash_08008e44": "calculateHash",
                "uVar5": "combinedHash",
                "uVar4": "reverseHash",
                "byte local_11": "uint8_t local_11",
                "PTR_DAT_08004bb8 + (local_11 + 8) * 4": "ptrToData4 + (hashIndex + 8) * 4",
                "PTR_DAT_08004bb8 + (local_11 + 10) * 4 + 4": "ptrToData4 + (hashIndex + 10) * 4 + 4",
                "PTR_DAT_08004bb0": "ptrToData3",
                "(PTR_DAT_08004bac[0x28] & 1) != 0": "(ptrToData2[0x28] & 1) != 0",
                "auStack_2c[uVar2]": "hashTable[hashIndex]",
                "FUN_08004940": "printAndCalculateHashes_08004940",
                "PTR_s_WPos__08004bb4": "string2",
                "reverse_and_improve_08008590": "reverseAndImprove",
                "PTR_DAT_08004b88 + 8": "ptrToData1 + 8",
                "PTR_s__MPos__08004ba8": "string1",
                "PTR_DAT_08004b88 + 4": "ptrToData1 + 4",
                "PTR_DAT_08004b88": "ptrToData1",
                "undefined8 uVar4": "uint64_t reverseHash",
                "undefined8 uVar5": "uint64_t combinedHash",
                "hashTable[local_11]": "hash",
                "PTR_DAT_08004b88 + 0xc": "ptrToData1 + 0xc"
            },
            "code": "void printAndCalculateHashes_08004940(void)\n{\n  uint8_t hashIndex;\n  uint32_t hash;\n  uint32_t hashTable[3];\n  uint8_t local_11;\n  hashTable[0] = *(uint32_t *)(PTR_DAT_08004b88 + 4);\n  hashTable[1] = *(uint32_t *)(PTR_DAT_08004b88 + 8);\n  hashTable[2] = *(uint32_t *)(PTR_DAT_08004b88 + 0xc);\n  if ((uint8_t)PTR_DAT_08004b88[1] < 8) {\n    (*(void (*)())(&switchD_0800495e::switchdataD_08004964)[(uint8_t)PTR_DAT_08004b88[1]])();\n    return;\n  }\n  writeStringToMemory_080036c6(PTR_s__MPos__08004ba8);\n  for (local_11 = 0; local_11 < 3; local_11++) {\n    hash = calculateHash(hashTable[local_11 + 3]);\n    hashIndex = local_11;\n    hash = combineHash(hash, *(uint32_t *)(PTR_DAT_08004bac + hashIndex * 4));\n    hashTable[hashIndex] = hash;\n    if ((PTR_DAT_08004bac[0x28] & 1) != 0) {\n      hash = reverseAndImprove(hashTable[local_11]);\n      hash = combineFloatHash(hash, DAT_08004b80, DAT_08004b84);\n      hashIndex = local_11;\n      hash = calculateFloatBits(hash);\n      hashTable[hashIndex] = hash;\n    }\n    printFloat_08003826(hashTable[local_11]);\n    writeStringToMemory_080036c6(PTR_DAT_08004bb0);\n  }\n  writeStringToMemory_080036c6(PTR_s_WPos__08004bb4);\n  for (local_11 = 0; local_11 < 3; local_11++) {\n    if ((PTR_DAT_08004bac[0x28] & 1) == 0) {\n      hash = hashTable[local_11];\n      hashIndex = local_11;\n      hash = combineHash(hash, *(uint32_t *)(PTR_DAT_08004bb8 + (hashIndex + 8) * 4));\n      hash = combineHash(hash, *(uint32_t *)(PTR_DAT_08004bb8 + (hashIndex + 10) * 4 + 4));\n      hash = calculateHash(hash);\n      hashTable[hashIndex] = hash;\n    }\n    else {\n      hash = reverseAndImprove(hashTable[local_11]);\n      hash = combineHash(hash, *(uint32_t *)(PTR_DAT_08004bb8 + (local_11 + 8) * 4));\n      hash = combineHash(hash, *(uint32_t *)(PTR_DAT_08004bb8 + (local_11 + 10) * 4 + 4));\n      hash = reverseAndImprove(hash);\n      hash = combineFloatHash(hash, DAT_08004b80, DAT_08004b84);\n      hashIndex = local_11;\n      hash = calculateFloatBits(hash);\n      hashTable[hashIndex] = hash;\n    }\n    printFloat_08003826(hashTable[local_11]);\n    if (local_11 < 2) {\n      writeStringToMemory_080036c6(PTR_DAT_08004bb0);\n    }\n  }\n  writeStringToMemory_080036c6(PTR_DAT_08004bbc);\n  return;\n}\n",
            "called": [
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08008cdc",
                "FUN_08003826",
                "FUN_08009054",
                "FUN_08008c30",
                "FUN_08008cd8",
                "FUN_080082d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004940",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": true,
            "current_name": "printAndCalculateHashes_08004940"
        },
        "FUN_08008a74": {
            "renaming": {
                "bVar2": "is_zero1",
                "bVar3": "is_greater_or_equal",
                "uVar1": "xor_result",
                "FUN_08008a74": "check_input_08008a74",
                "param_1": "input1",
                "is_positive": "is_xor_result_positive",
                "result": "output",
                "is_negative1": "is_negative_inputs",
                "param_2": "input2",
                "are_equal1": "are_inputs2_and_4_equal",
                "param_3": "input3",
                "are_equal2": "are_inputs1_and_3_equal",
                "param_4": "input4",
                "is_negative2": "is_negative_input2",
                "is_negative3": "is_negative_input4",
                "is_zero2": "is_zero_input4"
            },
            "code": "uint check_input_08008a74(uint input1, uint input2, uint input3, uint input4)\n{\n  uint result;\n  bool is_negative1 = ((int)(input2 << 1) >> 0x15 == -1 || (int)(input4 << 1) >> 0x15 == -1);\n  bool is_negative2 = ((int)(input2 << 1) >> 0x15 == -1 && ((input1 | input2 << 0xc) != 0));\n  bool is_negative3 = ((int)(input4 << 1) >> 0x15 == -1 && ((input3 | input4 << 0xc) != 0));\n  if (is_negative1 && (is_negative2 || is_negative3)) {\n    return 1;\n  }\n  bool is_zero1 = (input1 | input2 << 1) == 0;\n  bool is_zero2 = (input3 | input4 << 1) == 0;\n  if (!is_zero1 && !is_zero2) {\n    bool are_equal1 = input2 == input4;\n    bool are_equal2 = input1 == input3;\n    if (!are_equal1 && !are_equal2) {\n      uint xor_result = input2 ^ input4;\n      bool is_positive = -1 < (int)xor_result;\n      bool is_greater_or_equal = is_positive && input4 <= input2;\n      if (xor_result == 0) {\n        is_greater_or_equal = input3 <= input1;\n      }\n      result = (int)input4 >> 0x1f;\n      if (!is_greater_or_equal) {\n        result = ~result;\n      }\n      return result | 1;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a74",
            "calling": [
                "FUN_08008b00"
            ],
            "imported": true,
            "current_name": "check_input_08008a74"
        },
        "FUN_08002fd4": {
            "renaming": {
                "iVar1": "dataPointerValue",
                "get_data_pointer_08002f74": "getDataPointerValue",
                "FUN_08002fd4": "checkDataPointerAndUpdateStatusIfNotZeroOrThree_08002fd4",
                "checkAndUpdateStatus_08003a74": "updateStatus",
                "*PTR_DAT_08003000": "PTR_DAT_08003000"
            },
            "code": "void checkDataPointerAndUpdateStatusIfNotZeroOrThree_08002fd4(void)\\n{\\n  int dataPointerValue;\\n  while ((dataPointerValue = get_data_pointer_08002f74(), dataPointerValue != 0 || (*PTR_DAT_08003000[1] == \"\\x03\")))\\n  {\\n    updateStatus();\\n    if (**PTR_DAT_08003000 != \"\\0\")\\n    {\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08003a74",
                "FUN_08002f74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fd4",
            "calling": [
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08002408",
                "FUN_08000220"
            ],
            "imported": true,
            "current_name": "checkDataPointerAndUpdateStatusIfNotZeroOrThree_08002fd4"
        },
        "FUN_08002408": {
            "renaming": {
                "uVar1": "calculated_value",
                "param_1": "data",
                "FUN_08002408": "calculate_result_and_update_status_08002408",
                "uVar3": "hash",
                "uVar2": "data2",
                "uVar4": "result",
                "local_12": "calculated_value2"
            },
            "code": "void calculate_result_and_update_status_08002408(uint32_t data) {\n  uint32_t hash = 0;\n  uint64_t reversed_data = reverse_and_improve(data);\n  uint64_t result = calculate_result(reversed_data);\n  uint16_t calculated_value = calculate_value(result);\n  check_data_pointer_and_update_status_if_not_zero_or_three();\n  uint32_t hash_input = calculated_value * 0x32;\n  uint32_t data2 = FUNC_08008eec(PTR_DAT_080024bc, hash_input);\n  hash = calculate_hash(data2);\n  data2 = FUNC_08008cd8(PTR_DAT_080024b8, hash);\n  reversed_data = reverse_and_improve(data2);\n  result = calculate_result(reversed_data);\n  calculated_value = calculate_value(result);\n  do_nothing(calculated_value);\n  while (calculated_value != 0 && check_and_update_status() && *PTR_DAT_080024c0 == '\\0') {\n    find_value_greater_than_sum_of_two_pointers_wrapper(0x32);\n    calculated_value--;\n  }\n}",
            "called": [
                "FUN_08003a74",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08002814",
                "FUN_08002fd4",
                "FUN_080094c0",
                "FUN_08008eec",
                "FUN_08008bf0",
                "FUN_080002a0",
                "FUN_08008cd8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002408",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": true,
            "current_name": "calculate_result_and_update_status_08002408"
        },
        "FUN_08002a94": {
            "renaming": {
                "PTR_DAT_08002af0": "DATA_START_PTR",
                "calculate_result_if_not_calculated_and_concatenated_080029d8": "calculate_result_if_not_calculated_and_concatenated",
                "PTR_DAT_08002af4": "DATA_TABLE_PTR",
                "replace_null_character_with_constant_08002896": "replace_null_character",
                "local_9": "current_char",
                "FUN_08002a94": "process_data_08002a94",
                "local_18": "previous_ptr",
                "PTR_DAT_08002af8": "DATA_END_PTR",
                "local_14": "current_ptr"
            },
            "code": "void process_data_08002a94(void)\n{\n  byte current_char;\n  undefined *previous_ptr = NULL;\n  undefined *current_ptr = NULL;\n\n  current_char = *PTR_DAT_08002af0;\n  while (current_char != *PTR_DAT_08002af8) {\n    current_char = replace_null_character(current_char);\n    previous_ptr = current_ptr;\n    current_ptr = PTR_DAT_08002af4 + (uint)current_char * 0x40;\n    calculate_result_if_not_calculated_and_concatenated(current_ptr, previous_ptr);\n  }\n  return;\n}",
            "called": [
                "FUN_080029d8",
                "FUN_08002896"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a94",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": true,
            "current_name": "process_data_08002a94"
        },
        "FUN_08003618": {
            "renaming": {
                "bVar1": "index",
                "FUNC_08009054": "combine_hashes_again",
                "PTR_DAT_08003694": "index_ptr",
                "puVar2": "hash_table_ptr",
                "param_1": "data",
                "calculate_hash_08008e44_1": "calculate_previous_data_hash",
                "FUN_08003618": "update_hash_table_08003618",
                "FUNC_08008eec": "combine_hashes",
                "uVar3": "current_hash_value",
                "calculate_hash_08008e44": "calculate_data_hash",
                "uVar4": "previous_hash_value",
                "PTR_DAT_08003698": "hash_table_ptr"
            },
            "code": "void update_hash_table_08003618(undefined4 data)\n{\n  byte index;\n  undefined *PTR_DAT_08003698;\n  undefined4 previous_hash_value;\n  undefined4 current_hash_value;\n  undefined4 data_hash_value;\n  \n  PTR_DAT_08003698 = PTR_DAT_08003698;\n  index = *PTR_DAT_08003694;\n  previous_hash_value = *(undefined4 *)(PTR_DAT_08003698 + (uint)index * 0x40 + 0x20);\n  data_hash_value = calculate_hash_08008e44(data);\n  current_hash_value = FUNC_08008eec(previous_hash_value, data_hash_value);\n  data_hash_value = calculate_hash_08008e44(*(undefined4 *)(PTR_DAT_08003698 + (uint)index * 0x40 + 0x10));\n  current_hash_value = FUNC_08009054(current_hash_value, data_hash_value);\n  *(undefined4 *)(PTR_DAT_08003698 + (uint)index * 0x40 + 0x20) = current_hash_value;\n  *(undefined4 *)(PTR_DAT_08003698 + (uint)index * 0x40 + 0x10) = data;\n  *(undefined4 *)(PTR_DAT_08003698 + (uint)index * 0x40 + 0x18) = 0;\n  *(undefined4 *)(PTR_DAT_08003698 + (uint)index * 0x40 + 0x1c) = 0;\n  PTR_DAT_08003698[(uint)index * 0x40 + 0x25] = 0;\n  PTR_DAT_08003698[(uint)index * 0x40 + 0x24] = 1;\n  process_data_and_calculate_values_08002edc();\n  return;\n}",
            "called": [
                "FUN_08008e44",
                "FUN_08009054",
                "FUN_08002edc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003618",
            "calling": [
                "FUN_080058a0"
            ],
            "imported": true,
            "current_name": "update_hash_table_08003618"
        },
        "FUN_0800522c": {
            "renaming": {
                "FUN_0800522c": "do_nothing_0800522c"
            },
            "code": "\nvoid do_nothing_0800522c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800522c",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": true,
            "current_name": "do_nothing_0800522c"
        },
        "FUN_0800af78": {
            "renaming": {
                "FUN_0800af78": "FUNC_0800af78"
            },
            "code": "\nint FUNC_0800af78(int param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  undefined8 uVar9;\n  undefined8 uVar10;\n  undefined4 local_2c;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar8 = param_2 & 0x7fffffff;\n  if (DAT_0800b298 < (int)uVar8) {\n    if ((uVar8 != DAT_0800b29c && (int)DAT_0800b29c <= (int)uVar8) ||\n       ((iVar2 = DAT_0800b2a8, uVar8 == DAT_0800b29c && (param_1 != 0)))) {\n      iVar2 = FUNC_080082d4(param_1,param_2,param_1);\n      return iVar2;\n    }\n  }\n  else {\n    if (DAT_0800b2ac < (int)uVar8) {\n      uVar9 = do_nothing_0800b2cc();\n      uVar6 = (undefined4)((ulonglong)uVar9 >> 0x20);\n      uVar3 = (undefined4)uVar9;\n      if (DAT_0800b2bc < (int)uVar8) {\n        if ((int)uVar8 < DAT_0800b2c0) {\n          uVar9 = FUNC_080082d0(uVar3,uVar6,0,DAT_0800b2c4);\n          uVar10 = FUNC_08008640(uVar3,uVar6,0,DAT_0800b2c4);\n          uVar10 = FUNC_080082d4((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800b2b8);\n          uVar9 = FUNC_08008894((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                               (int)((ulonglong)uVar10 >> 0x20));\n          iVar2 = 2;\n        }\n        else {\n          uVar9 = FUNC_08008894(0,DAT_0800b2c8,uVar3,uVar6);\n          iVar2 = 3;\n        }\n      }\n      else if (DAT_0800b2bc + -0xd0000 < (int)uVar8) {\n        uVar9 = FUNC_080082d0(uVar3,uVar6,0,DAT_0800b2b8);\n        uVar10 = FUNC_080082d4(uVar3,uVar6,0,DAT_0800b2b8);\n        uVar9 = FUNC_08008894((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar2 = 1;\n      }\n      else {\n        uVar9 = FUNC_080082d4(uVar3,uVar6,uVar3,uVar6);\n        uVar9 = FUNC_080082d0((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0,DAT_0800b2b8);\n        uVar10 = FUNC_080082d4(uVar3,uVar6,0,0x40000000);\n        uVar9 = FUNC_08008894((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar2 = 0;\n      }\n    }\n    else {\n      if ((int)uVar8 <= DAT_0800b2ac + -0x1bc0000) {\n        uVar10 = FUNC_080082d4(param_1,param_2,DAT_0800b290,DAT_0800b294);\n        iVar2 = is_input_valid_08008b60((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800b2b8);\n        if (iVar2 != 0) {\n          return param_1;\n        }\n      }\n      iVar2 = -1;\n    }\n    local_2c = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar7 = (undefined4)uVar9;\n    uVar9 = FUNC_08008640(uVar7,local_2c,uVar7);\n    uVar4 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar3 = (undefined4)uVar9;\n    uVar9 = FUNC_08008640(uVar3,uVar4,uVar3,uVar4);\n    uVar5 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar6 = (undefined4)uVar9;\n    uVar9 = FUNC_08008640(uVar6,uVar5,DAT_0800b238,DAT_0800b23c);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b240,DAT_0800b244);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b248,DAT_0800b24c);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b250,DAT_0800b254);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b258,DAT_0800b25c);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b260,DAT_0800b264);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar3,uVar4);\n    uVar3 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar10 = FUNC_08008640(uVar6,uVar5,DAT_0800b268,DAT_0800b26c);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b270,DAT_0800b274);\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b278,DAT_0800b27c);\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b280,DAT_0800b284);\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b288,DAT_0800b28c);\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar6 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    if (iVar2 == -1) {\n      uVar9 = FUNC_080082d4((int)uVar9,uVar3,(int)uVar10,uVar6);\n      uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,local_2c);\n      iVar2 = FUNC_080082d0(uVar7,local_2c,(int)uVar9,(int)((ulonglong)uVar9 >> 0x20));\n      return iVar2;\n    }\n    uVar9 = FUNC_080082d4((int)uVar9,uVar3,(int)uVar10,uVar6);\n    puVar1 = PTR_DAT_0800b2b0;\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,local_2c);\n    uVar9 = FUNC_080082d0((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),\n                         *(undefined4 *)(PTR_DAT_0800b2b4 + iVar2 * 8),\n                         *(undefined4 *)((int)(PTR_DAT_0800b2b4 + iVar2 * 8) + 4));\n    uVar9 = FUNC_080082d0((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,local_2c);\n    iVar2 = FUNC_080082d0(*(undefined4 *)(puVar1 + iVar2 * 8),\n                         *(undefined4 *)((int)(puVar1 + iVar2 * 8) + 4),(int)uVar9,\n                         (int)((ulonglong)uVar9 >> 0x20));\n    if ((int)param_2 < 0) {\n      return iVar2;\n    }\n  }\n  return iVar2;\n}\n\n",
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_08008b60",
                "FUN_080082d0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800af78",
            "calling": [
                "FUN_08009990"
            ],
            "imported": false,
            "current_name": "FUNC_0800af78"
        },
        "FUN_08007d08": {
            "renaming": {
                "PTR_DAT_08007da0": "memory_ptr_2",
                "update_flags_08007a10": "update_flags",
                "DAT_08007da4": "memory_data_2",
                "puVar1": "memory_ptr",
                "FUN_08007d08": "initialize_memory_08007d08",
                "DAT_08007d9c": "memory_data"
            },
            "code": "void initialize_memory_08007d08(void)\n{\n  undefined4 *memory_ptr;\n  memory_ptr = DAT_08007d9c;\n  update_flags(DAT_08007d9c);\n  *memory_ptr = 0x80;\n  memory_ptr[1] = 0;\n  memory_ptr[2] = 0;\n  memory_ptr[3] = 0;\n  memory_ptr[4] = 0;\n  memory_ptr[6] = 0x6800;\n  memory_ptr[7] = 0;\n  memory_ptr[8] = 0;\n  memory_ptr[9] = 0;\n  memory_ptr[10] = (uint)((ulonglong)DAT_08007da4 * (ulonglong)*(uint *)PTR_DAT_08007da0 >> 0x35) - 1;\n  memory_ptr[0xb] = 199;\n  memory_ptr[0xd] = 0;\n  memory_ptr[0xe] = 100;\n  memory_ptr[0xf] = 0;\n  memory_ptr[0x10] = 0;\n  memory_ptr[0x12] = 0;\n  memory_ptr[0x13] = 0;\n  memory_ptr[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08007a10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007d08",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": true,
            "current_name": "initialize_memory_08007d08"
        },
        "FUN_080091fc": {
            "renaming": {
                "param_1": "destination",
                "param_2": "source",
                "FUN_080091fc": "calculate_and_concatenate_results_080091fc"
            },
            "code": "void calculate_and_concatenate_results_080091fc(void* destination, void* source) {\n  calculate_and_concatenate_results_080091fc_08009204(source, destination);\n  return;\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091fc",
            "calling": [
                "FUN_08009264",
                "FUN_08009250"
            ],
            "imported": true,
            "current_name": "calculate_and_concatenate_results_080091fc"
        },
        "FUN_080058a0": {
            "renaming": {
                "PTR_DAT_080058f4": "HASH_TABLE_INDEX",
                "PTR_DAT_080058f0": "HASH_POINTER",
                "PTR_DAT_080058fc": "RESULT_POINTER",
                "FUN_080058a0": "update_or_reset_value_of_hash_080058a0",
                "DAT_080058f8": "HASH_VALUE"
            },
            "code": "void update_or_reset_value_of_hash_080058a0() {\n  int* hash_pointer = *(int*)PTR_DAT_080058f0;\n  if (hash_pointer == 0) {\n    PTR_DAT_080058fc[1] = 0;\n  }\n  else {\n    int hash_table_index = *(int*)(hash_pointer + 0x10) - *(int*)(PTR_DAT_080058f4 + 0x10);\n    update_hash_table(hash_table_index);\n    *(int*)(PTR_DAT_080058f4 + 0x1c) = 0;\n    calculate_local_value(*(int*)(PTR_DAT_080058f4 + 0x1c));\n    *(int*)(PTR_DAT_080058f4 + 0x18) = DAT_080058f8;\n    *(int*)(PTR_DAT_080058f4 + 0x10) = 0;\n    PTR_DAT_080058fc[1] = 2;\n  }\n  return;\n}",
            "called": [
                "FUN_08005324",
                "FUN_08003618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058a0",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": true,
            "current_name": "update_or_reset_value_of_hash_080058a0"
        },
        "FUN_080036c6": {
            "renaming": {
                "local_c": "currentCharacter",
                "param_1": "stringToWrite",
                "FUN_080036c6": "writeStringToMemory_080036c6"
            },
            "code": "void writeStringToMemory_080036c6(char *stringToWrite)\n{\n  char *currentCharacter = stringToWrite;\n  while (*currentCharacter != '\\0') {\n    waitUntilMemoryWriteIsReadyThenWriteToMemory_08008250(*currentCharacter);\n    currentCharacter++;\n  }\n  return;\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036c6",
            "calling": [
                "FUN_0800423c",
                "FUN_080046d0",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_08004900",
                "FUN_08004148",
                "FUN_08004940",
                "FUN_080044e8",
                "FUN_08004250"
            ],
            "imported": true,
            "current_name": "writeStringToMemory_080036c6"
        },
        "FUN_08008190": {
            "renaming": {
                "puVar1": "memory_configuration",
                "FUN_08008190": "configure_memory_08008190"
            },
            "code": "void configure_memory_08008190(void)\n{\n  uint *memory_configuration = DAT_08008240;\n  set_flags_08007ea4(memory_configuration);\n  memory_configuration[3] &= 0xffffdfff;\n  memory_configuration[3] &= 0xffff400c;\n  memory_configuration[3] |= 0xc;\n  memory_configuration[4] &= 0xffff8090;\n  memory_configuration[5] &= 0xfffff000;\n  *memory_configuration &= 0xfffffc00;\n  calculate_shifted_result_08007f54(memory_configuration, 0x1c200);\n  memory_configuration[6] = memory_configuration[6];\n  memory_configuration[3] |= 0x2000;\n  return;\n}",
            "called": [
                "FUN_08007ea4",
                "FUN_08007f54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008190",
            "calling": [
                "FUN_08007540"
            ],
            "imported": true,
            "current_name": "configure_memory_08008190"
        },
        "FUN_080074c8": {
            "renaming": {
                "set_short_at_address_based_on_param_08007402": "set_device_status_to_online",
                "param_1": "device_status_flags",
                "PTR_DAT_0800751c": "device_status_update_flag",
                "update_device_status_08003a18": "update_device_status",
                "check_device_connection_and_initialize_if_not_connected_0800195c": "check_device_connection_and_initialize_if_not_connected",
                "PTR_DAT_08007518": "device_connection_status",
                "FUN_080074c8": "update_device_status_if_needed_080074c8"
            },
            "code": "void update_device_status_if_needed_080074c8(uint device_status_flags)\n{\n  if ((device_status_flags & 0x01) != 0) {\n    set_device_status_to_online(0x3e);\n  }\n  if ((*(int *)PTR_DAT_08007518 != 0) && ((device_status_flags & 0x1e) != 0)) {\n    check_device_connection_and_initialize_if_not_connected();\n  }\n  if ((*(int *)PTR_DAT_0800751c != 0) && ((device_status_flags & 0x80) != 0)) {\n    update_device_status(device_status_flags);\n  }\n  return;\n}",
            "called": [
                "FUN_0800195c",
                "FUN_08007402",
                "FUN_08003a18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074c8",
            "calling": [
                "FUN_08007930"
            ],
            "imported": true,
            "current_name": "update_device_status_if_needed_080074c8"
        },
        "FUN_0800b430": {
            "renaming": {
                "FUN_0800b430": "fill_buffer_with_value_0800b430",
                "puVar2": "last_word",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "current_word",
                "uVar3": "remaining_bytes",
                "uVar4": "value_32",
                "bVar5": "is_remaining_bytes_zero"
            },
            "code": "void fill_buffer_with_value_0800b430(uint32_t *buffer, uint8_t value, uint32_t size) {\n  uint32_t *current_word;\n  uint32_t *last_word;\n  uint32_t remaining_bytes;\n  uint32_t value_32 = value | (value << 8) | (value << 16) | (value << 24);\n\n  if (((uint32_t)buffer & 3) != 0) {\n    remaining_bytes = size - 1;\n    current_word = buffer;\n    if (size == 0) {\n      return;\n    }\n    while(true) {\n      buffer = (uint32_t *)((int)current_word + 1);\n      *(uint8_t *)current_word = value;\n      size = remaining_bytes;\n      if (((uint32_t)buffer & 3) == 0) {\n        break;\n      }\n      remaining_bytes = remaining_bytes - 1;\n      current_word = buffer;\n      if (remaining_bytes == 0) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    last_word = (uint32_t *)((int)buffer + (size - 0x10 & 0xfffffff0) + 0x20);\n    if (0xf < size) {\n      current_word = buffer + 4;\n      do {\n        current_word[-4] = value_32;\n        current_word[-3] = value_32;\n        current_word[-2] = value_32;\n        current_word[-1] = value_32;\n        current_word = current_word + 4;\n      } while (current_word != last_word);\n      remaining_bytes = size & 0xc;\n      buffer = buffer + ((size - 0x10 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (remaining_bytes == 0) {\n        goto end_of_function;\n      }\n    }\n    current_word = (uint32_t *)((size - 4 & 0xfffffffc) + 4 + (int)buffer);\n    do {\n      last_word = buffer + 1;\n      *buffer = value_32;\n      buffer = last_word;\n    } while (current_word != last_word);\n    size = size & 3;\n    buffer = current_word;\n  }\n  if (size != 0) {\n    current_word = buffer;\n    do {\n      last_word = (uint32_t *)((int)current_word + 1);\n      *(uint8_t *)current_word = value;\n      current_word = last_word;\n    } while ((uint32_t *)(size + (int)buffer) != last_word);\n  }\n  end_of_function:\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b430",
            "calling": [
                "FUN_080079c0",
                "FUN_08001994",
                "FUN_08002f24",
                "FUN_08001ddc",
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08005814",
                "FUN_080004ac",
                "FUN_08004d7c",
                "FUN_080002f0"
            ],
            "imported": true,
            "current_name": "fill_buffer_with_value_0800b430"
        },
        "FUN_08004030": {
            "renaming": {
                "PTR_s_Unsupported_statement_08004118": "errorMessage_unsupported_statement",
                "PTR_s_Line_overflow_08004140": "errorMessage_line_overflow",
                "PTR_s_Expected_command_letter_08004114": "errorMessage_expected_command_letter",
                "FUN_08004030": "printErrorMessage_08004030",
                "PTR_DAT_08004144": "errorMessage_suffix",
                "PTR_s_Invalid_statement_08004124": "errorMessage_invalid_statement",
                "param_1": "errorCode",
                "PTR_s_Value___0_0_0800412c": "errorMessage_value_0_0",
                "PTR_s_Value___3_usec_08004130": "errorMessage_value_3_usec",
                "PTR_s_Busy_or_queued_08004138": "errorMessage_busy_or_queued",
                "PTR_s_Alarm_lock_0800413c": "errorMessage_alarm_lock",
                "PTR_s_EEPROM_read_fail__Using_defaults_08004134": "errorMessage_eeprom_read_fail",
                "PTR_s_error__0800410c": "errorMessage_prefix",
                "PTR_s_Bad_number_format_08004110": "errorMessage_bad_number_format",
                "PTR_DAT_08004108": "errorMessage_empty",
                "PTR_s_Invalid_radius_0800411c": "errorMessage_invalid_radius",
                "PTR_s_Modal_group_violation_08004120": "errorMessage_modal_group_violation",
                "PTR_s_Setting_disabled_08004128": "errorMessage_setting_disabled"
            },
            "code": "void printErrorMessage_08004030(char errorCode) {\n  if (errorCode == '\\0') {\n    printStringToMemory(PTR_DAT_08004108);\n  }\n  else {\n    printStringToMemory(PTR_s_error__0800410c);\n    switch(errorCode) {\n      case '\\x01':\n        printStringToMemory(PTR_s_Bad_number_format_08004110);\n        break;\n      case '\\x02':\n        printStringToMemory(PTR_s_Expected_command_letter_08004114);\n        break;\n      case '\\x03':\n        printStringToMemory(PTR_s_Unsupported_statement_08004118);\n        break;\n      case '\\x04':\n        printStringToMemory(PTR_s_Invalid_radius_0800411c);\n        break;\n      case '\\x05':\n        printStringToMemory(PTR_s_Modal_group_violation_08004120);\n        break;\n      case '\\x06':\n        printStringToMemory(PTR_s_Invalid_statement_08004124);\n        break;\n      case '\\a':\n        printStringToMemory(PTR_s_Setting_disabled_08004128);\n        break;\n      case '\\b':\n        printStringToMemory(PTR_s_Value___0_0_0800412c);\n        break;\n      case '\\t':\n        printStringToMemory(PTR_s_Value___3_usec_08004130);\n        break;\n      case '\\n':\n        printStringToMemory(PTR_s_EEPROM_read_fail__Using_defaults_08004134);\n        break;\n      case '\\v':\n        printStringToMemory(PTR_s_Busy_or_queued_08004138);\n        break;\n      case '\\f':\n        printStringToMemory(PTR_s_Alarm_lock_0800413c);\n        break;\n      case '\\r':\n        printStringToMemory(PTR_s_Line_overflow_08004140);\n    }\n    printStringToMemory(PTR_DAT_08004144);\n  }\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004030",
            "calling": [
                "FUN_08003f34",
                "FUN_080039bc",
                "FUN_08003b98",
                "FUN_080004ac",
                "FUN_080044e8",
                "FUN_080051b4"
            ],
            "imported": true,
            "current_name": "printErrorMessage_08004030"
        },
        "FUN_08005360": {
            "renaming": {
                "DAT_0800539c": "limit",
                "FUN_08005360": "check_if_limit_exceeded_08005360",
                "*(uint *)(PTR_DAT_08005398 + 0x18)": "total",
                "PTR_DAT_08005398 + 0x18": "current_total",
                "PTR_DAT_08005398 + 0x14": "current_amount"
            },
            "code": "bool check_if_limit_exceeded_08005360(void)\n{\n  int* PTR_DAT_08005398 + 0x18 = PTR_DAT_08005398 + 0x18;\n  int* PTR_DAT_08005398 + 0x14 = PTR_DAT_08005398 + 0x14;\n  *PTR_DAT_08005398 + 0x18 = *PTR_DAT_08005398 + 0x18 + *PTR_DAT_08005398 + 0x14;\n  uint DAT_0800539c = DAT_0800539c;\n  uint *(uint *)(PTR_DAT_08005398 + 0x18) = *(uint *)(PTR_DAT_08005398 + 0x18);\n  if (DAT_0800539c < *(uint *)(PTR_DAT_08005398 + 0x18)) {\n    *PTR_DAT_08005398 + 0x18 = *PTR_DAT_08005398 + 0x18 - 420000;\n  }\n  return DAT_0800539c < *(uint *)(PTR_DAT_08005398 + 0x18);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005360",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": true,
            "current_name": "check_if_limit_exceeded_08005360"
        },
        "FUN_08003980": {
            "renaming": {
                "FUN_08003980": "resetData_08003980",
                "PTR_DAT_0800399c": "ptr_data2",
                "PTR_DAT_08003998": "ptr_data1"
            },
            "code": "void resetData_08003980(void)\n{\n  int* PTR_DAT_08003998 = PTR_DAT_08003998;\n  int* PTR_DAT_0800399c = PTR_DAT_0800399c;\n  *PTR_DAT_08003998 = 0;\n  *PTR_DAT_0800399c = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003980",
            "calling": [
                "FUN_08003f34",
                "FUN_080039a0"
            ],
            "imported": true,
            "current_name": "resetData_08003980"
        },
        "FUN_08006de0": {
            "renaming": {
                "FUN_08006de0": "is_bit_set_08006de0",
                "uVar1": "is_set",
                "is_bit_set_08006a18": "is_bit_set_at_position",
                "param_1": "bit_position"
            },
            "code": "int is_bit_set_08006de0(int bit_position){\n  int is_set = is_bit_set_08006de0_at_position(bit_position);\n  return is_set;\n}",
            "called": [
                "FUN_08006a18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006de0",
            "calling": [],
            "imported": true,
            "current_name": "is_bit_set_08006de0"
        },
        "FUN_08007540": {
            "renaming": {
                "initialize_and_set_flags_08007e08": "initialize_and_set_flags",
                "FUN_08007540": "run_program_08007540",
                "configure_memory_08008190": "configure_memory",
                "initialize_system_08007436": "initialize_system",
                "update_data_0800778c": "update_data",
                "main_loop_08001ddc": "run_main_loop",
                "handle_interrupt_if_not_handled_08005984": "handle_interrupt",
                "initialize_buffer_and_set_value_080079c0": "initialize_buffer_and_set_value",
                "initialize_display_and_return_080059b4": "initialize_display_and_return"
            },
            "code": "int run_program_08007540(void)\n{\n  initialize_display_and_return_080059b4();\n  initialize_system_08007436();\n  update_data_0800778c();\n  initialize_and_set_flags_08007e08();\n  initialize_buffer_and_set_value_080079c0();\n  configure_memory_08008190();\n  handle_interrupt_if_not_handled_08005984(0);\n  run_main_loop();\n  return 0;\n}",
            "called": [
                "FUN_08005984",
                "FUN_080079c0",
                "FUN_08007e08",
                "FUN_08001ddc",
                "FUN_0800778c",
                "FUN_080059b4",
                "FUN_08007436",
                "FUN_08008190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007540",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": true,
            "current_name": "run_program_08007540"
        },
        "FUN_080052dc": {
            "renaming": {
                "*PTR_DAT_08005308": "current_param_value",
                "FUN_080052dc": "update_param_080052dc",
                "param_1": "new_param_value",
                "DAT_08005308": "param_ptr_offset",
                "PTR_DAT_08005308": "param_ptr",
                "new_value": "new_value",
                "mask": "mask"
            },
            "code": "void update_param_080052dc(uint new_param_value)\n{\n  uint* PTR_DAT_08005308 = (uint*)(DAT_08005308 + 0x14);\n  uint *PTR_DAT_08005308 = *PTR_DAT_08005308;\n  uint mask = 0xfffff55f;\n  uint new_value = (new_param_value | (*PTR_DAT_08005308 & mask));\n  *PTR_DAT_08005308 = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052dc",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": true,
            "current_name": "update_param_080052dc"
        },
        "FUN_080064ec": {
            "renaming": {
                "local_c": "value2",
                "uVar1": "flag",
                "FUN_080064ec": "calculate_value_080064ec",
                "uVar2": "value1"
            },
            "code": "uint calculate_value_080064ec(void)\n{\n  uint flag = *(uint *)(DAT_0800661c + 8) & 0xc;\n  if (flag == 8) {\n    uint value1 = *(uint *)(DAT_0800661c + 4) & 0x3f;\n    uint leading_zeros1 = count_leading_zeroes(0x200);\n    if ((*(uint *)(DAT_0800661c + 4) & 0x400000) >> (leading_zeros1 & 0xff) == 0) {\n      uint leading_zeros2 = count_leading_zeroes(0x3fe0000);\n      uint value2 = ((*(uint *)(DAT_0800661c + 4) & 0x7fc0) >> (leading_zeros2 & 0xff)) * (DAT_08006620 / value1);\n    }\n    else {\n      uint leading_zeros2 = count_leading_zeroes(0x3fe0000);\n      uint value2 = ((*(uint *)(DAT_0800661c + 4) & 0x7fc0) >> (leading_zeros2 & 0xff)) * (DAT_08006624 / value1);\n    }\n    uint leading_zeros3 = count_leading_zeroes(0xc000);\n    return value2 / ((((*(uint *)(DAT_0800661c + 4) & 0x30000) >> (leading_zeros3 & 0xff)) + 1) * 2);\n  }\n  if (flag < 9) {\n    if (flag == 0) {\n      return DAT_08006620;\n    }\n    if (flag == 4) {\n      return DAT_08006624;\n    }\n  }\n  return DAT_08006620;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ec",
            "calling": [
                "FUN_08006628"
            ],
            "imported": true,
            "current_name": "calculate_value_080064ec"
        },
        "FUN_08006ba0": {
            "renaming": {
                "uVar1": "num_bits_left",
                "FUN_08006ba0": "generate_mask_08006ba0",
                "param_1": "num_bits",
                "param_2": "mask",
                "param_3": "value"
            },
            "code": "uint generate_mask_08006ba0(uint num_bits, uint mask, uint value)\n{\n  uint num_bits_mod = num_bits & 7;\n  uint num_bits_left = 7 - num_bits_mod;\n  if (num_bits_left > 3) {\n    num_bits_left = 4;\n  }\n  if (num_bits_mod + 4 < 7) {\n    num_bits_mod = 0;\n  }\n  else {\n    num_bits_mod = num_bits_mod - 3;\n  }\n  return value & (1 << (num_bits_mod & 0xff)) - 1U |\n         ((1 << (num_bits_left & 0xff)) - 1U & mask) << (num_bits_mod & 0xff);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ba0",
            "calling": [
                "FUN_08006cf6"
            ],
            "imported": true,
            "current_name": "generate_mask_08006ba0"
        },
        "FUN_080003ec": {
            "renaming": {
                "FUN_080003ec": "verify_buffer_080003ec",
                "param_1": "buffer",
                "local_1c": "current_index",
                "local_9": "is_sum_calculated",
                "local_18": "buffer_size",
                "param_2": "buffer_size",
                "param_3": "expected_sum",
                "cVar1": "current_char",
                "uVar2": "actual_sum",
                "local_14": "current_buffer"
            },
            "code": "bool verify_buffer_080003ec(char *buffer, int buffer_size, int expected_sum){\n  char current_char;\n  uint sum = 0;\n  int current_index = buffer_size;\n  char *current_buffer = buffer;\n  \n  byte is_sum_calculated = 0;\n  \n  if (*(int *)PTR_DAT_08000470 == 0) {\n    initialize_buffer_080002f0();\n    current_index = buffer_size;\n    current_buffer = buffer;\n  }\n  \n  for (; current_index != 0; current_index = current_index - 1) {\n    current_char = get_buffer_value_08000310(current_index);\n    is_sum_calculated = current_char + (is_sum_calculated != 0);\n    *current_buffer = current_char;\n    current_index = current_index + 1;\n    current_buffer = current_buffer + 1;\n  }\n  \n  uint actual_sum = get_buffer_value_08000310(current_index);\n  return is_sum_calculated == actual_sum;\n}",
            "called": [
                "FUN_08000310",
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003ec",
            "calling": [
                "FUN_08004d2c",
                "FUN_08004dd2",
                "FUN_08004d7c"
            ],
            "imported": true,
            "current_name": "verify_buffer_080003ec"
        },
        "FUN_08002896": {
            "renaming": {
                "FUN_08002896": "replace_null_character_with_constant_08002896",
                "param_1": "input_char",
                "local_9": "output_char"
            },
            "code": "char replace_null_character_with_constant_08002896(char input_char){\n  char output_char = input_char;\n  if (input_char == '\\0'){\n    output_char = '\\x12';\n  }\n  return output_char - 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002896",
            "calling": [
                "FUN_08002a94"
            ],
            "imported": true,
            "current_name": "replace_null_character_with_constant_08002896"
        },
        "FUN_0800a348": {
            "renaming": {
                "FUN_0800a348": "FUNC_0800a348"
            },
            "code": "\nundefined4 FUNC_0800a348(undefined4 param_1,uint param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  undefined8 uVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  longlong lVar8;\n  undefined4 local_30;\n  undefined4 uStack_2c;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  \n  uVar4 = param_2 & 0x7fffffff;\n  if (uVar4 < 0x3e400000) {\n    iVar1 = convert_fixed_point_to_int_08008ba0();\n    if (iVar1 == 0) {\n      return 0;\n    }\n    uVar5 = FUNC_08008640(param_1,param_2,param_1,param_2);\n    uVar3 = (undefined4)((ulonglong)uVar5 >> 0x20);\n    uVar2 = (undefined4)uVar5;\n    uVar6 = FUNC_08008640(uVar2,uVar3,DAT_0800a558,DAT_0800a55c);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a560,DAT_0800a564);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a568,DAT_0800a56c);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a570,DAT_0800a574);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a578,DAT_0800a57c);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a580,DAT_0800a584);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n  }\n  else {\n    uVar5 = FUNC_08008640(param_1,param_2,param_1,param_2);\n    uVar3 = (undefined4)((ulonglong)uVar5 >> 0x20);\n    uVar2 = (undefined4)uVar5;\n    uVar6 = FUNC_08008640(uVar2,uVar3,DAT_0800a558,DAT_0800a55c);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a560,DAT_0800a564);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a568,DAT_0800a56c);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a570,DAT_0800a574);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a578,DAT_0800a57c);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a580,DAT_0800a584);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    if (DAT_0800a590 < (int)uVar4) {\n      if (DAT_0800a594 < (int)uVar4) {\n        lVar8 = (ulonglong)DAT_0800a598 << 0x20;\n        iVar1 = DAT_0800a59c;\n      }\n      else {\n        lVar8 = FUNC_080082d0(0,DAT_0800a58c,0,uVar4 - 0x200000);\n        iVar1 = uVar4 - 0x200000;\n      }\n      uStack_24 = (undefined4)((ulonglong)lVar8 >> 0x20);\n      local_28 = (undefined4)lVar8;\n      uVar5 = FUNC_08008640(uVar2,uVar3,0,DAT_0800a588);\n      uVar5 = FUNC_080082d0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),0,iVar1);\n      uVar6 = FUNC_08008640(uVar2,uVar3,(int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n      uVar7 = FUNC_08008640(param_1,param_2,param_3,param_4);\n      uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar7,\n                           (int)((ulonglong)uVar7 >> 0x20));\n      uVar5 = FUNC_080082d0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                           (int)((ulonglong)uVar6 >> 0x20));\n      uVar2 = FUNC_080082d0(local_28,uStack_24,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n      return uVar2;\n    }\n  }\n  uStack_2c = (undefined4)((ulonglong)uVar6 >> 0x20);\n  local_30 = (undefined4)uVar6;\n  uVar2 = (undefined4)((ulonglong)uVar5 >> 0x20);\n  uVar6 = FUNC_08008640((int)uVar5,uVar2,0,DAT_0800a588);\n  uVar5 = FUNC_08008640((int)uVar5,uVar2,local_30,uStack_2c);\n  uVar7 = FUNC_08008640(param_1,param_2,param_3,param_4);\n  uVar5 = FUNC_080082d0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar7,\n                       (int)((ulonglong)uVar7 >> 0x20));\n  uVar5 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar5,\n                       (int)((ulonglong)uVar5 >> 0x20));\n  uVar2 = FUNC_080082d0(0,DAT_0800a58c,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n  return uVar2;\n}\n\n",
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800a348",
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "imported": false,
            "current_name": "FUNC_0800a348"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "concatenate_values_080001ac",
                "DAT_080001bc": "global_variable",
                "param_1": "value1",
                "param_2": "value2",
                "PTR_FUN_080001c4": "pointer_to_function",
                "PTR_DAT_080001c0": "pointer_to_data"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t concatenate_values_080001ac(uint64_t value1, uint64_t value2)\n{\n  if (DAT_080001bc != 0) {\n    value1 = PTR_FUN_080001c4;\n    value2 = PTR_DAT_080001c0;\n  }\n  return ((uint64_t)value2 << 32) | value1;\n}",
            "called": [
                "FUN_0800b5b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [
                "FUN_0800b3e8"
            ],
            "imported": true,
            "current_name": "concatenate_values_080001ac"
        },
        "FUN_08003740": {
            "renaming": {
                "FUN_08003740": "print_binary_representation_08003740",
                "param_1": "data",
                "print_binary_representation_080036f0": "print_binary_representation_helper"
            },
            "code": "void print_binary_representation_08003740(void* data, int num_bits)\n{\n  print_binary_representation_08003740_helper(data, num_bits);\n  return;\n}",
            "called": [
                "FUN_080036f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003740",
            "calling": [],
            "imported": true,
            "current_name": "print_binary_representation_08003740"
        },
        "FUN_08000478": {
            "renaming": {
                "PTR_DAT_080004a8[0x1b]": "PTR_DAT_080004a8[27]",
                "PTR_DAT_080004a8[0x1a]": "PTR_DAT_080004a8[26]",
                "param_1": "param_1",
                "PTR_DAT_080004a8[0x19]": "PTR_DAT_080004a8[25]",
                "FUN_08000478": "set_params_to_array_08000478",
                "param_2": "param_2",
                "param_3": "param_3"
            },
            "code": "void set_params_to_array_08000478(void* param_1, void* param_2, void* param_3) {\n  PTR_DAT_080004a8[0x19] = param_1;\n  PTR_DAT_080004a8[0x1a] = param_2;\n  PTR_DAT_080004a8[0x1b] = param_3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000478",
            "calling": [
                "FUN_080005b4",
                "FUN_080004ac"
            ],
            "imported": true,
            "current_name": "set_params_to_array_08000478"
        },
        "FUN_08006d2e": {
            "renaming": {
                "param_1": "character",
                "FUN_08006d2e": "setBitInArray_08006d2e"
            },
            "code": "void setBitInArray_08006d2e(char character) {\n    set_bit_in_array_080069b4((int)character);\n    return;\n}",
            "called": [
                "FUN_080069b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d2e",
            "calling": [],
            "imported": true,
            "current_name": "setBitInArray_08006d2e"
        },
        "FUN_08007e1c": {
            "renaming": {
                "param_1": "data",
                "FUN_08007e1c": "waitForFlagToBeSetThenWriteToMemory_08007e1c",
                "DAT_08007e48": "memoryAddress",
                "statusFlag": "statusFlag"
            },
            "code": "void waitForFlagToBeSetThenWriteToMemory_08007e1c(byte data) {\n  while((*statusFlag & 0x80) == 0);\n  DAT_08007e48[1] = (uint)data;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e1c",
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "imported": true,
            "current_name": "waitForFlagToBeSetThenWriteToMemory_08007e1c"
        },
        "FUN_0800adf0": {
            "renaming": {
                "iVar1": "temp_int",
                "param_1": "input_val",
                "FUN_0800adf0": "calculate_result_0800adf0",
                "param_2": "input_val2",
                "param_3": "input_val3",
                "param_4": "input_val4",
                "param_5": "input_val5",
                "uVar3": "result2",
                "uVar2": "result1",
                "uVar5": "result4",
                "uVar4": "result3",
                "uVar7": "temp_long1",
                "uVar6": "result5",
                "uVar8": "temp_long2"
            },
            "code": "undefined4 calculate_result_0800adf0(undefined4 input_val,uint input_val2,undefined4 input_val3,undefined4 input_val4,int input_val5)\n{\n  int temp_int;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined8 temp_long1;\n  undefined8 temp_long2;\n  \n  if (((input_val2 & 0x7fffffff) < 0x3e400000) && (temp_int = convert_fixed_point_to_int_08008ba0(), temp_int == 0)) {\n    return input_val;\n  }\n  temp_long1 = FUNC_08008640(input_val,input_val2,input_val,0);\n  result1 = (undefined4)((ulonglong)temp_long1 >> 0x20);\n  result2 = (undefined4)temp_long1;\n  temp_long1 = FUNC_08008640(input_val,input_val2,result2,result1);\n  result3 = (undefined4)((ulonglong)temp_long1 >> 0x20);\n  result4 = (undefined4)temp_long1;\n  temp_long1 = FUNC_08008640(result2,result1,DAT_0800af40,DAT_0800af44);\n  temp_long1 = FUNC_080082d0((int)temp_long1,(int)((ulonglong)temp_long1 >> 0x20),DAT_0800af48,DAT_0800af4c);\n  temp_long1 = FUNC_08008640((int)temp_long1,(int)((ulonglong)temp_long1 >> 0x20),result2,result1);\n  temp_long1 = FUNC_080082d4((int)temp_long1,(int)((ulonglong)temp_long1 >> 0x20),DAT_0800af50,DAT_0800af54);\n  temp_long1 = FUNC_08008640((int)temp_long1,(int)((ulonglong)temp_long1 >> 0x20),result2,result1);\n  temp_long1 = FUNC_080082d0((int)temp_long1,(int)((ulonglong)temp_long1 >> 0x20),DAT_0800af58,DAT_0800af5c);\n  temp_long1 = FUNC_08008640((int)temp_long1,(int)((ulonglong)temp_long1 >> 0x20),result2,result1);\n  temp_long1 = FUNC_080082d4((int)temp_long1,(int)((ulonglong)temp_long1 >> 0x20),DAT_0800af60,DAT_0800af64);\n  result5 = (undefined4)((ulonglong)temp_long1 >> 0x20);\n  if (input_val5 != 0) {\n    temp_long2 = FUNC_08008640(input_val3,input_val4,0,DAT_0800af70);\n    temp_long1 = FUNC_08008640(result2,result4,(int)temp_long1,result5);\n    temp_long1 = FUNC_080082d0((int)temp_long2,(int)((ulonglong)temp_long2 >> 0x20),(int)temp_long1,(int)((ulonglong)temp_long1 >> 0x20));\n    temp_long1 = FUNC_08008640((int)temp_long1,(int)((ulonglong)temp_long1 >> 0x20),input_val,result2);\n    temp_long1 = FUNC_080082d0((int)temp_long1,(int)((ulonglong)temp_long1 >> 0x20),input_val3,input_val4);\n    temp_long2 = FUNC_08008640(result2,result4,DAT_0800af68,DAT_0800af6c);\n    result6 = FUNC_080082d4((int)temp_long1,(int)((ulonglong)temp_long1 >> 0x20),(int)temp_long2,(int)((ulonglong)temp_long2 >> 0x20));\n    result1 = FUNC_080082d0(input_val,input_val2,(int)result6,(int)((ulonglong)result6 >> 0x20));\n    return result1;\n  }\n  temp_long1 = FUNC_08008640(result2,result1,(int)temp_long1,result5);\n  temp_long1 = FUNC_080082d0((int)temp_long1,(int)((ulonglong)temp_long1 >> 0x20),DAT_0800af68,DAT_0800af6c);\n  temp_long1 = FUNC_08008640((int)temp_long1,(int)((ulonglong)temp_long1 >> 0x20),input_val,result2);\n  result1 = FUNC_080082d4((int)temp_long1,(int)((ulonglong)temp_long1 >> 0x20),input_val,input_val2);\n  return result1;\n}",
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800adf0",
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "imported": true,
            "current_name": "calculate_result_0800adf0"
        },
        "FUN_08003a74": {
            "renaming": {
                "FUN_08003a74": "checkAndUpdateStatus_08003a74",
                "PTR_DAT_08003b94": "dataBuffer",
                "PTR_DAT_08003b90": "statusFlags"
            },
            "code": "void checkAndUpdateStatus_08003a74(void)\\n{\\n  byte statusByte;\\n  \\n  if (PTR_DAT_08003b90[2] != \"\\0\") {\\n    statusByte = PTR_DAT_08003b90[2];\\n    if ((statusByte & 0x60) != 0) {\\n      PTR_DAT_08003b90[1] = 6;\\n      if ((statusByte & 0x40) == 0) {\\n        printAlarmMessage(0xfffffffe);\\n      }\\n      else {\\n        printAlarmMessage(0xffffffff);\\n        displayStatusMessage(1);\\n        PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0xef;\\n        do {\\n        } while ((PTR_DAT_08003b90[2] & 0x10) == 0);\\n      }\\n      PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0x9f;\\n    }\\n    if ((statusByte & 0x10) == 0) {\\n      if ((statusByte & 1) != 0) {\\n        printAndCalculateHashes();\\n        PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0xfe;\\n      }\\n      if ((statusByte & 8) != 0) {\\n        updateDataIfFlagIsSet();\\n        PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0xf7;\\n      }\\n      if ((statusByte & 4) != 0) {\\n        updateOrResetValueOfHash();\\n        PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0xfb;\\n      }\\n      if ((statusByte & 2) != 0) {\\n        checkAndProcessData();\\n        if ((PTR_DAT_08003b90[4][0x28] & 2) != 0) {\\n          PTR_DAT_08003b90[16] = 1;\\n        }\\n        PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0xfd;\\n      }\\n    }\\n    else {\\n      *PTR_DAT_08003b90 = 1;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_0800587c",
                "FUN_080041a0",
                "FUN_0800585c",
                "FUN_08004148",
                "FUN_08004940",
                "FUN_080058a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a74",
            "calling": [
                "FUN_08002fd4",
                "FUN_08001ddc",
                "FUN_08003f34",
                "FUN_080024c4",
                "FUN_08001e98",
                "FUN_08002408"
            ],
            "imported": true,
            "current_name": "checkAndUpdateStatus_08003a74"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "FUNC_08005cec"
            },
            "code": "\nundefined4 FUNC_08005cec(uint *param_1)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  \n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08005fac[2] & 0xc) == 4) ||\n       (((DAT_08005fac[2] & 0xc) == 8 && ((DAT_08005fac[1] & 0x400000) == 0x400000)))) {\n      if (((*DAT_08005fac & 0x20000) != 0) && (param_1[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      *DAT_08005fb0 = 0;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08005fac & 0x20000) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n      *DAT_08005fb0 = (char)param_1[1];\n      if (param_1[1] == 1) {\n        iVar1 = get_value_from_pointer_08005a84();\n        while ((*DAT_08005fac & 0x20000) == 0) {\n          uVar2 = get_value_from_pointer_08005a84();\n          if (iVar1 + 5000U <= uVar2) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar1 = get_value_from_pointer_08005a84();\n        while ((*DAT_08005fac & 0x20000) != 0) {\n          uVar2 = get_value_from_pointer_08005a84();\n          if (iVar1 + 5000U <= uVar2) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08005fac[2] & 0xc) == 0) ||\n       (((DAT_08005fac[2] & 0xc) == 8 && ((DAT_08005fac[1] & 0x400000) == 0)))) {\n      if (((*DAT_08005fac & 2) != 0) && (param_1[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (param_1[3] == 0) {\n      *DAT_08005fb4 = 0;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08005fac & 2) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005fb4 = 1;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08005fac & 2) == 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n      uVar2 = count_leading_zeroes(0x1f000000);\n      *DAT_08005fac = param_1[4] << (uVar2 & 0xff) | *DAT_08005fac & 0xffffff07;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[5] == 0) {\n      *DAT_08005fb8 = 0;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((DAT_08005fac[0x1d] & 2) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005fb8 = 1;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((DAT_08005fac[0x1d] & 2) == 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    DAT_08005fac[0x10] = DAT_08005fac[0x10] | 0x10000000;\n    *DAT_08005fbc = *DAT_08005fbc | 0x100;\n    iVar1 = get_value_from_pointer_08005a84();\n    while ((*DAT_08005fbc & 0x100) == 0) {\n      uVar2 = get_value_from_pointer_08005a84();\n      if (iVar1 + 100U <= uVar2) {\n        return 3;\n      }\n    }\n    *DAT_08005fc0 = 0;\n    iVar1 = get_value_from_pointer_08005a84();\n    while ((DAT_08006180[0x1c] & 2) != 0) {\n      uVar2 = get_value_from_pointer_08005a84();\n      if (iVar1 + 5000U <= uVar2) {\n        return 3;\n      }\n    }\n    *DAT_08006184 = (char)param_1[2];\n    if (param_1[2] == 1) {\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((DAT_08006180[0x1c] & 2) == 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((DAT_08006180[0x1c] & 2) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (param_1[6] != 0) {\n    if ((DAT_08006180[2] & 0xc) == 8) {\n      return 1;\n    }\n    if (param_1[6] == 2) {\n      *DAT_08006188 = 0;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08006180 & 0x2000000) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n      uVar2 = count_leading_zeroes(0x3fe0000);\n      uVar3 = count_leading_zeroes(0xc000);\n      uVar4 = count_leading_zeroes(0xf0);\n      DAT_08006180[1] =\n           param_1[0xb] << (uVar4 & 0xff) |\n           param_1[8] | param_1[9] << (uVar2 & 0xff) | (param_1[10] >> 1) - 1 << (uVar3 & 0xff) |\n           param_1[7] | 0x20000000;\n      *DAT_08006188 = 1;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08006180 & 0x2000000) == 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08006188 = 0;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08006180 & 0x2000000) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08007436"
            ],
            "imported": false,
            "current_name": "FUNC_08005cec"
        },
        "FUN_08006b00": {
            "renaming": {
                "param_1": "address",
                "DAT_08006b50": "data_section_ptr",
                "FUN_08006b00": "set_byte_in_memory_08006b00",
                "param_2": "value",
                "DAT_08006b4c": "data_section_ptr"
            },
            "code": "void set_byte_in_memory_08006b00(byte address, uint8_t value) {\n  if (address < 0) {\n    *(char *)((address & 0xf) + DAT_08006b4c + 0x14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + DAT_08006b4c + 0x300) = (char)((value & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b00",
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "imported": true,
            "current_name": "set_byte_in_memory_08006b00"
        },
        "FUN_0800b4d0": {
            "renaming": {
                "DAT_0800b4dc": "is_list_empty",
                "FUN_0800b4d0": "check_and_add_to_list_if_not_empty_0800b4d0",
                "add_to_list_0800b524": "add_to_list",
                "PTR_LAB_0800b4f0_1_0800b4e0": "first_label_ptr"
            },
            "code": "void check_and_add_to_list_if_not_empty_0800b4d0(void)\n{\n  if (DAT_0800b4dc == 0) {\n    add_to_list(0, PTR_LAB_0800b4f0_1_0800b4e0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0800b524"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b4d0",
            "calling": [
                "FUN_0800b3e8"
            ],
            "imported": true,
            "current_name": "check_and_add_to_list_if_not_empty_0800b4d0"
        },
        "FUN_08007f54": {
            "renaming": {
                "iVar2": "result2",
                "iVar3": "result3",
                "param_1": "input1",
                "lVar1": "result1",
                "FUN_08007f54": "calculate_shifted_result_08007f54",
                "param_2": "input2",
                "DAT_08008188": "PTR_DAT_08008188",
                "DAT_08008184": "PTR_DAT_08008184",
                "uVar4": "shifted_result"
            },
            "code": "void calculate_shifted_result_08007f54(int input1, int input2)\n{\n  longlong result1;\n  int result2;\n  int result3;\n  undefined8 shifted_result;\n  bool is_large_shift = (*(uint *)(input1 + 0xc) & 0x8000) == 0;\n  bool is_special_case = (input1 == DAT_08008184) || (input1 == DAT_08008188);\n\n  if (is_large_shift) {\n    shifted_result = calculate_shifted_result_08007f54_08006680();\n    result1 = (ulonglong)PTR_DAT_0800818c * ((ulonglong)(uint)((int)shifted_result * 0x19) / (ulonglong)(uint)(input2 << 1));\n    result2 = calculate_shifted_result_08007f54_08006680((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20),(int)result1);\n    result3 = calculate_shifted_result_08007f54_08006680();\n  }\n  else {\n    shifted_result = calculate_shifted_result_08007f54_080066cc();\n    result1 = (ulonglong)PTR_DAT_0800818c * ((ulonglong)(uint)((int)shifted_result * 0x19) / (ulonglong)(uint)(input2 << 2));\n    result2 = calculate_shifted_result_08007f54_080066cc((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20),(int)result1);\n    result3 = calculate_shifted_result_08007f54_080066cc();\n  }\n\n  *(uint *)(input1 + 8) = (uint)((ulonglong)result1 >> 0x25) << 4 |\n                          (uint)((ulonglong)PTR_DAT_0800818c * (ulonglong)(((uint)(result2 * 0x19) / (uint)(input2 << (is_large_shift ? 1 : 2))) +\n                                 (uint)((ulonglong)PTR_DAT_0800818c * ((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(input2 << (is_large_shift ? 1 : 2))) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf;\n}",
            "called": [
                "FUN_080066cc",
                "FUN_08006680"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f54",
            "calling": [
                "FUN_08008190"
            ],
            "imported": true,
            "current_name": "calculate_shifted_result_08007f54"
        },
        "FUN_08003b98": {
            "renaming": {
                "bVar1": "bufferValue1",
                "iVar2": "returnCode",
                "local_a": "bufferIndex",
                "PTR_DAT_08003f30": "deviceBuffer",
                "param_1": "command",
                "local_9": "bufferOffset",
                "FUN_08003b98": "processGrblCommand_08003b98",
                "uVar3": "convertedParam",
                "local_10": "secondCharIndex",
                "uVar5": "calculatedValue",
                "uVar4": "returnCode",
                "local_14": "integerValue",
                "PTR_DAT_08003f2c": "statusBuffer"
            },
            "code": "uint processGrblCommand_08003b98(char *command){\\n  byte firstChar = command[0];\\n  int secondCharIndex;\\n  int integerValue;\\n  uint returnCode;\\n  byte bufferIndex;\\n  byte bufferOffset;\\n  byte bufferValue1;\\n  byte bufferValue2;\\n  if (firstChar != \"$\") {\\n    returnCode = parseCommand_080005b4(command);\\n    return returnCode;\\n  }\\n  bufferIndex = 1;\\n  bufferOffset = 0;\\n  bufferValue1 = command[1];\\n  if (bufferValue1 == 0) {\\n    printGrblSettingsView_0800423c();\\n    return 0;\\n  }\\n  if ((bufferValue1 > 0x58) || (bufferValue1 < 0x23)) goto switchD_08003bdc_caseD_25;\\n  switch(bufferValue1) {\\n  case 0x23:\\n    bufferIndex = 2;\\n    if (command[2] != \"\\0\") {\\n      return 3;\\n    }\\n    printFloatingPointNumbers_080044e8();\\n    break;\\n  case 0x24:\\n    bufferIndex = 2;\\n    if (command[2] != \"\\0\") {\\n      return 3;\\n    }\\n    printConfigurationDetails_08004250();\\n    break;\\n  case 0x43:\\n    bufferIndex = 2;\\n    if (command[2] != \"\\0\") {\\n      return 3;\\n    }\\n    if (PTR_DAT_08003f2c[1] == \"\\a\") {\\n      initializeDeviceIfNotConnected_080025e8();\\n      displayStatusMessage_080041a0(5);\\n    }\\n    else {\\n      if (PTR_DAT_08003f2c[1] != \"\\0\") {\\n        return 0xb;\\n      }\\n      PTR_DAT_08003f2c[1] = 7;\\n      displayStatusMessage_080041a0(4);\\n    }\\n    break;\\n  case 0x47:\\n    bufferIndex = 2;\\n    if (command[2] != \"\\0\") {\\n      return 3;\\n    }\\n    printData_080046d0();\\n    break;\\n  case 0x48:\\n    if ((PTR_DAT_08003f30[0x28] & 0x10) == 0) {\\n      return 7;\\n    }\\n    if ((PTR_DAT_08003f2c[1] != \"\\0\") && (PTR_DAT_08003f2c[1] != \"\\x06\")) {\\n      return 0xb;\\n    }\\n    processDeviceAndUpdateStatus_080024c4();\\n    if (*PTR_DAT_08003f2c == \"\\0\") {\\n      processBuffers_080039bc();\\n    }\\n    break;\\n  case 0x4e:\\n    bufferIndex = 2;\\n    if (command[2] == \"\\0\") {\\n      for (bufferOffset = 0; bufferOffset < 2; bufferOffset++) {\\n        returnCode = verifyAndWriteBuffer_08004d2c(bufferOffset, command);\\n        if (returnCode == 0) {\\n          printErrorMessage_08004030(10);\\n        }\\n        else {\\n          printAbsoluteValueAndWriteToMemory_08004900(bufferOffset, command);\\n        }\\n      }\\n      return 0;\\n    }\\n    bufferOffset = 1;\\n  default:\\nswitchD_08003bdc_caseD_25:\\n    returnCode = parseIntegerFromString_08002638(command, &bufferIndex, &secondCharIndex);\\n    if (returnCode == 0) {\\n      return 1;\\n    }\\n    bufferValue1 = bufferIndex + 1;\\n    if (command[bufferIndex] != \"=\") {\\n      return 3;\\n    }\\n    bufferIndex = bufferValue1;\\n    if (bufferOffset == 0) {\\n      returnCode = parseIntegerFromString_08002638(command, &bufferIndex, &integerValue);\\n      if (returnCode == 0) {\\n        return 1;\\n      }\\n      if (command[bufferIndex] == \"\\0\") {\\n        uVar3 = convertParamToInt32_08009278(secondCharIndex);\\n        returnCode = FUNC_08004e30(uVar3, integerValue);\\n        return returnCode;\\n      }\\n      return 3;\\n    }\\n    do {\\n      command[(uint)bufferIndex - (uint)bufferValue1] = command[bufferIndex];\\n      returnCode = (uint)bufferIndex;\\n      bufferIndex++;\\n    } while (command[returnCode] != \"\\0\");\\n    bufferOffset = bufferValue1;\\n    returnCode = parseCommand_080005b4(command);\\n    if (returnCode != 0) {\\n      return (uint)returnCode;\\n    }\\n    uVar5 = reverseAndImprove_08008590(secondCharIndex);\\n    uVar5 = calculateValue_08009798((int)uVar5, (int)((ulonglong)uVar5 >> 0x20));\\n    bufferOffset = calculate_08008bf0((int)uVar5, (int)((ulonglong)uVar5 >> 0x20));\\n    writeDataToBufferAtOffset_08004bc0(bufferOffset, command);\\n    break;\\n  case 0x58:\\n    bufferIndex = 2;\\n    if (command[2] != \"\\0\") {\\n      return 3;\\n    }\\n    if (PTR_DAT_08003f2c[1] == \"\\x06\") {\\n      displayStatusMessage_080041a0(3);\\n      PTR_DAT_08003f2c[1] = 0;\\n    }\\n  }\\n  return 0;\\n}",
            "called": [
                "FUN_08004030",
                "FUN_08004d2c",
                "FUN_080005b4",
                "FUN_08009278",
                "FUN_080039bc",
                "FUN_08009798",
                "FUN_080044e8",
                "FUN_080025e8",
                "FUN_08008590",
                "FUN_080046d0",
                "FUN_0800423c",
                "FUN_08004e30",
                "FUN_080041a0",
                "FUN_080024c4",
                "FUN_08004900",
                "FUN_08004bc0",
                "FUN_08002638",
                "FUN_08008bf0",
                "FUN_08004250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b98",
            "calling": [
                "FUN_08003f34"
            ],
            "imported": true,
            "current_name": "processGrblCommand_08003b98"
        },
        "FUN_080024c4": {
            "renaming": {
                "set_and_hash_memory_params_0800283a": "set_and_hash_memory_params",
                "process_device_data_08001d4c": "process_device_data",
                "PTR_DAT_080025e4": "device_data",
                "checkDataPointerAndUpdateStatusIfNotZeroOrThree_08002fd4": "check_data_pointer_and_update_status_if_not_zero_or_three",
                "fill_buffer_with_value_0800b430": "fill_buffer_with_value",
                "process_data_if_not_already_processed_08001e98": "process_data_if_not_already_processed",
                "PTR_DAT_080025d8": "device_status",
                "PTR_DAT_080025dc": "device_data_pointer",
                "check_and_process_data_0800585c": "check_and_process_data",
                "FUNC_08008eec": "hash_and_function",
                "PTR_DAT_080025e0": "buffer",
                "calculate_hash_08008e44": "hash",
                "FUN_080024c4": "process_device_and_update_status_080024c4",
                "local_13": "is_device_ready",
                "local_12": "is_device_connected",
                "local_11": "is_device_active",
                "check_and_update_device_status_08003a74": "check_and_update_device_status"
            },
            "code": "void process_device_and_update_status_080024c4(void)\\n{\\n  int is_device_active;\\n  int is_device_connected;\\n  int is_device_ready;\\n  is_device_active = PTR_DAT_080025d8[1] = 5;\\n  *(undefined4 *)PTR_DAT_080025dc = 0;\\n  process_PTR_DAT_080025e4_08001d4c();\\n  check_and_update_PTR_DAT_080025d8_08003a74();\\n  if (*PTR_DAT_080025d8 == \"\\0\") {\\n    fill_PTR_DAT_080025e0_with_value_0800b430(PTR_DAT_080025e0,0,0xc);\\n    set_and_hash_memory_params_0800283a();\\n    PTR_DAT_080025d8[1] = 0;\\n    is_device_active = (*(ushort *)(PTR_DAT_080025e4 + 0x2a) & 0x20) ? 1 : -1;\\n    is_device_connected = (*(ushort *)(PTR_DAT_080025e4 + 0x2a) & 0x80) ? 1 : -1;\\n    is_device_ready = (*(ushort *)(PTR_DAT_080025e4 + 0x2a) & 0x200) ? 1 : -1;\\n    int hash_device_active = calculate_hash_08008e44(is_device_active);\\n    int hash_device_connected = calculate_hash_08008e44(is_device_connected);\\n    int hash_device_ready = calculate_hash_08008e44(is_device_ready);\\n    hash_device_active = FUNC_08008eec(hash_device_active,*(undefined4 *)(PTR_DAT_080025e4 + 0x38));\\n    hash_device_connected = FUNC_08008eec(hash_device_connected,*(undefined4 *)(PTR_DAT_080025e4 + 0x38));\\n    hash_device_ready = FUNC_08008eec(hash_device_ready,*(undefined4 *)(PTR_DAT_080025e4 + 0x38));\\n    process_data_if_not_already_processed_08001e98(hash_device_active, hash_device_connected, hash_device_ready,*(undefined4 *)(PTR_DAT_080025e4 + 0x30),0);\\n    check_and_process_data_0800585c();\\n    checkDataPointerAndUpdateStatusIfNotZeroOrThree_08002fd4();\\n    set_and_hash_memory_params_0800283a();\\n    if ((PTR_DAT_080025e4[0x28] & 8) != 0) {\\n      *(undefined4 *)PTR_DAT_080025dc = 1;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08003a74",
                "FUN_08008e44",
                "FUN_0800b430",
                "FUN_08002fd4",
                "FUN_0800585c",
                "FUN_0800283a",
                "FUN_08001e98",
                "FUN_08001d4c",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024c4",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": true,
            "current_name": "process_device_and_update_status_080024c4"
        },
        "FUN_08002f40": {
            "renaming": {
                "uVar1": "incremented_char",
                "*PTR_DAT_08002f70": "current_char",
                "FUN_08002f40": "increment_second_char_if_not_equal_08002f40",
                "*PTR_DAT_08002f6c": "next_char"
            },
            "code": "void increment_second_char_if_not_equal_08002f40(void)\n{\n  char *PTR_DAT_08002f70 = *PTR_DAT_08002f70;\n  char *PTR_DAT_08002f6c = *PTR_DAT_08002f6c;\n  if (*PTR_DAT_08002f6c != *PTR_DAT_08002f70) {\n    char incremented_char = increment_char_08002870(*PTR_DAT_08002f70);\n    *PTR_DAT_08002f70 = incremented_char;\n  }\n  return;\n}",
            "called": [
                "FUN_08002870"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f40",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": true,
            "current_name": "increment_second_char_if_not_equal_08002f40"
        },
        "FUN_08009054": {
            "renaming": {
                "FUN_08009054": "FUNC_08009054"
            },
            "code": "\nuint FUNC_08009054(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_0800904a:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_0800906c;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_0800906c:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009054",
            "calling": [
                "FUN_08001994",
                "FUN_080028bc",
                "FUN_08001f00",
                "FUN_08003004",
                "FUN_08003618",
                "FUN_08002e08",
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08002908",
                "FUN_08004250"
            ],
            "imported": false,
            "current_name": "FUNC_08009054"
        },
        "FUN_080025e8": {
            "renaming": {
                "do_nothing_twice_08000210": "do_nothing_twice",
                "byte": "unsigned char",
                "do_nothing_and_return_08005250": "do_nothing_and_return",
                "0x10": "DEVICE_INITIALIZED",
                "PTR_DAT_08002634": "device_status",
                "1": "DEVICE_STATUS_BYTE_1",
                "0x20": "DEVICE_CONNECTED",
                "2": "DEVICE_STATUS_BYTE_2",
                "FUN_080025e8": "initialize_device_if_not_connected_080025e8",
                "checkIfDeviceIsConnected_080057e4": "checkIfDeviceIsConnected"
            },
            "code": "void initialize_device_if_not_connected_080025e8(void)\n{\n  if ((PTR_DAT_08002634[2] & DEVICE_INITIALIZED) == 0) {\n    PTR_DAT_08002634[2] |= DEVICE_INITIALIZED;\n    do_nothing_and_return();\n    do_nothing_twice();\n    if ((byte)PTR_DAT_08002634[1] - 3 < 3) {\n      PTR_DAT_08002634[2] |= DEVICE_CONNECTED;\n      checkIfDeviceIsConnected();\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080057e4",
                "FUN_08005250",
                "FUN_08000210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "FUN_0800195c",
                "FUN_080005b4",
                "FUN_08003a18",
                "FUN_08005900",
                "FUN_08003b98"
            ],
            "imported": true,
            "current_name": "initialize_device_if_not_connected_080025e8"
        },
        "FUN_080001c8": {
            "renaming": {
                "FUN_080001c8": "do_nothing_080001c8"
            },
            "code": "\nvoid do_nothing_080001c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001c8",
            "calling": [
                "FUN_08000220"
            ],
            "imported": true,
            "current_name": "do_nothing_080001c8"
        },
        "FUN_08005250": {
            "renaming": {
                "FUN_08005250": "do_nothing_and_return_08005250",
                "do_nothing_08005214": "do_nothing"
            },
            "code": "void do_nothing_and_return_08005250(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08005214"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005250",
            "calling": [
                "FUN_080025e8",
                "FUN_0800525c",
                "FUN_08005238"
            ],
            "imported": true,
            "current_name": "do_nothing_and_return_08005250"
        },
        "FUN_08007430": {
            "renaming": {
                "FUN_08007430": "wait_indefinitely_08007430"
            },
            "code": "void wait_indefinitely_08007430(void) \n{\n  while(true) {\n     // Do nothing block with infinite loop\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007430",
            "calling": [
                "FUN_08007436"
            ],
            "imported": true,
            "current_name": "wait_indefinitely_08007430"
        },
        "FUN_08008640": {
            "renaming": {
                "FUN_08008640": "FUNC_08008640"
            },
            "code": "\nulonglong FUNC_08008640(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_result_0800881c();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_0800881c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008640",
            "calling": [
                "FUN_0800adf0",
                "FUN_08001f00",
                "FUN_08009d78",
                "FUN_08009b24",
                "FUN_0800a5a0",
                "FUN_0800b2e8",
                "FUN_08004940",
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_08003004",
                "FUN_08002638",
                "FUN_0800a348",
                "FUN_0800af78",
                "FUN_0800a1bc",
                "FUN_0800056c"
            ],
            "imported": false,
            "current_name": "FUNC_08008640"
        },
        "FUN_08007436": {
            "renaming": {
                "local_c": "status",
                "local_4c": "validation_data",
                "FUN_08007436": "initialize_system_08007436",
                "local_1c": "validation_mask",
                "local_2c": "status",
                "local_18": "validation_data",
                "local_28": "control_register",
                "local_48": "validation_mask",
                "local_10": "validation_retries",
                "local_20": "validation_register",
                "local_30": "validation_retries",
                "local_14": "validation_timeout",
                "local_24": "config_register",
                "local_34": "validation_timeout"
            },
            "code": "void initialize_system_08007436(void)\n{\n  int status;\n  uint32_t control_register;\n  uint32_t config_register;\n  uint32_t validation_register;\n  uint32_t validation_data;\n  uint32_t validation_mask;\n  uint32_t validation_timeout;\n  uint32_t validation_retries;\n  \n  control_register = *(uint32_t *)(DAT_080074c0 + 0x40) | 0x10000000;\n  *(uint32_t *)(DAT_080074c0 + 0x40) = control_register;\n  \n  config_register = *DAT_080074c4 | 0xc000;\n  *DAT_080074c4 = config_register;\n  \n  validation_data = 1;\n  validation_mask = 1;\n  validation_timeout = 2;\n  validation_retries = 0x400000;\n  status = validate_system(&validation_data, &validation_mask, &validation_timeout, &validation_retries);\n  if (status != 0) {\n    wait_indefinitely();\n  }\n  \n  validation_register = 0xf;\n  validation_mask = 2;\n  validation_data = 0;\n  validation_timeout = 0x1400;\n  validation_retries = 0x1000;\n  status = validate_configuration(&validation_register, &validation_mask, &validation_data, &validation_timeout, &validation_retries);\n  if (status != 0) {\n    wait_indefinitely();\n  }\n  return;\n}",
            "called": [
                "FUN_0800618c",
                "FUN_08005cec",
                "FUN_08007430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007436",
            "calling": [
                "FUN_08007540"
            ],
            "imported": true,
            "current_name": "initialize_system_08007436"
        },
        "FUN_08005814": {
            "renaming": {
                "FUN_08005814": "initialize_data_08005814",
                "PTR_DAT_08005838": "PTR_POINTER_TO_ZERO",
                "calculate_local_value_08005324": "calculate_local_value",
                "800": "LOCAL_VALUE",
                "PTR_DAT_08005834": "PTR_DATA_BUFFER"
            },
            "code": "void initialize_data_08005814(void)\n{\n  // Fill buffer with zeros\n  fill_buffer_with_value(PTR_DAT_08005834, 0, BUFFER_SIZE);\n  // Calculate local value\n  calculate_local_value(LOCAL_VALUE);\n  // Set pointer to zero\n  *(int *)PTR_DAT_08005838 = 0;\n  return;\n}",
            "called": [
                "FUN_0800b430",
                "FUN_08005324"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005814",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": true,
            "current_name": "initialize_data_08005814"
        },
        "FUN_08005bdc": {
            "renaming": {
                "param_1": "pixel_index",
                "FUN_08005bdc": "set_pixel_color_08005bdc",
                "param_2": "color_value",
                "DAT_08005c2c": "pixel_color_offset_2",
                "DAT_08005c28": "pixel_color_offset_1"
            },
            "code": "void set_pixel_color_08005bdc(byte pixel_index, uint color_value) {\\n  if ((char)pixel_index < \"\\0\") {\\n    *(char *)((pixel_index & 0xf) + DAT_08005c28 + 0x14) = (char)((color_value & 0xff) << 4);\\n  }\\n  else {\\n    *(char *)((char)pixel_index + DAT_08005c2c + 0x300) = (char)((color_value & 0xff) << 4);\\n  }\\n  return;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bdc",
            "calling": [
                "FUN_08005c30"
            ],
            "imported": true,
            "current_name": "set_pixel_color_08005bdc"
        },
        "FUN_080002f0": {
            "renaming": {
                "PTR_DAT_0800030c": "buffer_end",
                "FUN_080002f0": "initialize_buffer_080002f0",
                "PTR_DAT_08000308": "buffer_start"
            },
            "code": "void initialize_buffer_080002f0(void)\n{\n  int buffer_size = 4;\n  int fill_value = 0xff;\n  int *PTR_DAT_08000308 = (int *)PTR_DAT_08000308;\n  int *PTR_DAT_0800030c = PTR_DAT_08000308 + buffer_size;\n  fill_buffer_with_value_0800b430(PTR_DAT_08000308, fill_value, buffer_size);\n  *PTR_DAT_0800030c = 1;\n  return;\n}",
            "called": [
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002f0",
            "calling": [
                "FUN_08000310",
                "FUN_08000374",
                "FUN_08000340",
                "FUN_080003ec"
            ],
            "imported": true,
            "current_name": "initialize_buffer_080002f0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "do_nothing_080073c0"
            },
            "code": "\nvoid do_nothing_080073c0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_0800738e"
            ],
            "imported": true,
            "current_name": "do_nothing_080073c0"
        },
        "FUN_0800778c": {
            "renaming": {
                "local_c": "value1",
                "local_1c": "value2",
                "local_18": "value3",
                "FUN_0800778c": "update_data_0800778c",
                "local_10": "ptr",
                "local_20": "mask",
                "local_14": "value4",
                "local_24": "index"
            },
            "code": "void update_data_0800778c(uint32_t* data) {\n  int index;\n  uint32_t mask;\n  uint32_t value1;\n  uint32_t value2;\n  uint32_t value3;\n  uint32_t value4;\n  uint32_t* ptr;\n\n  for (index = 0; index < 0x11; index++) {\n    ptr = (uint32_t *)(PTR_DAT_0800784c + index * 0x18);\n    mask = 1 << (*ptr >> 4 & 0xff);\n    *(uint32_t *)(DAT_08007850 + 0x30) |= mask;\n    value1 = 1 << (*ptr & 0xf);\n    value2 = ptr[1];\n    value3 = ptr[2];\n    value4 = ptr[3];\n    update_data_0800778c_08006e88(((*ptr >> 4) + 0x100080) * 0x400, &value1);\n    if ((int)ptr[5] >= 0) {\n      assign_value_to_param_0800733e(((*ptr >> 4) + 0x100080) * 0x400, 1 << (*ptr & 0xf) & 0xffff, ptr[5] & 0xff);\n    }\n  }\n}\n",
            "called": [
                "FUN_08006e88",
                "FUN_0800733e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800778c",
            "calling": [
                "FUN_08007540"
            ],
            "imported": true,
            "current_name": "update_data_0800778c"
        },
        "FUN_080001d4": {
            "renaming": {
                "FUN_080001d4": "do_nothing_080001d4"
            },
            "code": "\nvoid do_nothing_080001d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001d4",
            "calling": [
                "FUN_08000210"
            ],
            "imported": true,
            "current_name": "do_nothing_080001d4"
        },
        "FUN_08001ddc": {
            "renaming": {
                "displayStatusMessage_080041a0": "display_status_message",
                "set_and_hash_memory_params_0800283a": "set_and_hash_memory_params",
                "initialize_and_verify_data_080004ac": "initialize_and_verify_data",
                "check_flag_status_0800192c": "check_flag_status",
                "update_and_process_device_data_0800583c": "update_and_process_device_data",
                "reset_and_print_help_message_080039a0": "reset_and_print_help_message",
                "PTR_DAT_08001e94": "flag_array",
                "fill_buffer_with_value_0800b430": "fill_buffer_with_value",
                "reset_pointer_to_zero_08005238": "reset_pointer_to_zero",
                "copy_and_increment_first_char_08002ef0_and_fill_buffer_with_value_0800b430_08002f24": "copy_and_increment_first_char_and_fill_buffer_with_value",
                "initialize_data_08005814": "initialize_data",
                "handle_user_input_and_process_command_08003f34": "handle_user_input_and_process_command",
                "PTR_DAT_08001e90": "buffer",
                "do_nothing_080082ba": "do_nothing",
                "initialize_data_080001f8": "initialize_data",
                "checkDataStorageAndFillBuffer_080051b4": "check_data_storage_and_fill_buffer",
                "FUN_08001ddc": "main_loop_08001ddc",
                "do_nothing_08008244": "do_nothing",
                "checkAndUpdateStatus_08003a74": "check_and_update_status"
            },
            "code": "void main_loop_08001ddc(void)\\n{\\n  do_nothing_08008244();\\n  check_data_storage_and_fill_PTR_DAT_08001e90();\\n  update_and_process_device_data_0800583c();\\n  fill_buffer_with_value_0800b430(PTR_DAT_08001e90, 0, 0x14);\\n  *PTR_DAT_08001e90 = 1;\\n  PTR_DAT_08001e90[1] = 1;\\n  do {\\n    if (*PTR_DAT_08001e90 != \"\\0\") {\\n      do_nothing_080082ba();\\n      copy_and_increment_first_char_08002ef0_and_fill_buffer_with_value_0800b430_08002f24();\\n      initialize_and_verify_data_080004ac();\\n      reset_and_print_help_message_080039a0();\\n      reset_pointer_to_zero_08005238();\\n      initialize_data_080001f8();\\n      check_flag_status_0800192c();\\n      initialize_data_08005814();\\n      set_and_hash_memory_params_0800283a();\\n      *PTR_DAT_08001e90 = 0;\\n      PTR_DAT_08001e90[2] = 0;\\n      if ((PTR_DAT_08001e94[0x28] & 2) != 0) {\\n        PTR_DAT_08001e90[0x10] = 1;\\n      }\\n      if ((PTR_DAT_08001e90[1] == \"\\x01\") && ((PTR_DAT_08001e94[0x28] & 0x10) != 0)) {\\n        PTR_DAT_08001e90[1] = 6;\\n      }\\n      if (PTR_DAT_08001e90[1] == \"\\x06\") {\\n        displayStatusMessage_080041a0(2);\\n      }\\n      else {\\n        PTR_DAT_08001e90[1] = 0;\\n        process_PTR_DAT_08001e90s();\\n      }\\n    }\\n    check_and_update_status();\\n    handle_user_input_and_process_command();\\n  } while( true );\\n}",
            "called": [
                "FUN_08002f24",
                "FUN_0800192c",
                "FUN_0800b430",
                "FUN_08003f34",
                "FUN_08005238",
                "FUN_080039bc",
                "FUN_0800283a",
                "FUN_080051b4",
                "FUN_08003a74",
                "FUN_080041a0",
                "FUN_080001f8",
                "FUN_080082ba",
                "FUN_080039a0",
                "FUN_08008244",
                "FUN_08005814",
                "FUN_080004ac",
                "FUN_0800583c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ddc",
            "calling": [
                "FUN_08007540"
            ],
            "imported": true,
            "current_name": "main_loop_08001ddc"
        },
        "FUN_080069b4": {
            "renaming": {
                "DAT_080069e0": "array",
                "param_1": "bit",
                "FUN_080069b4": "set_bit_in_array_080069b4"
            },
            "code": "void set_bit_in_array_080069b4(uint8_t bit, uint32_t* DAT_080069e0) {\n    uint8_t index = bit >> 5;\n    uint8_t mask = 1 << (bit & 0x1f);\n    DAT_080069e0[index] |= mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069b4",
            "calling": [
                "FUN_08006d2e"
            ],
            "imported": true,
            "current_name": "set_bit_in_array_080069b4"
        },
        "FUN_08009228": {
            "renaming": {
                "FUN_08009228": "is_input_empty_08009228",
                "in_CY": "current_char"
            },
            "code": "bool is_input_empty_08009228(void)\n{\n  char current_char;\n  calculate_and_concatenate_results();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009228",
            "calling": [
                "FUN_080029d8",
                "FUN_08004e30",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08003004",
                "FUN_08003826"
            ],
            "imported": true,
            "current_name": "is_input_empty_08009228"
        },
        "FUN_08007c7c": {
            "renaming": {
                "FUN_08007c7c": "update_parameters_if_set_08007c7c",
                "FUNC_080053a0": "function_1",
                "_DAT_40000010": "register_1",
                "update_parameter_08005778": "update_parameter_1",
                "update_parameter_value_08005760": "update_parameter_2",
                "_DAT_4000000c": "register_2"
            },
            "code": "void update_parameters_if_set_08007c7c(void)\n{\n  bool is_bit_set_1 = (_DAT_40000010 & 0x1);\n  bool is_bit_set_2 = (_DAT_40000010 & 0x2);\n  bool is_bit_set_3 = (_DAT_40000010 & 0x4);\n  bool is_bit_set_4 = (_DAT_4000000c & 0x1);\n  bool is_bit_set_5 = (_DAT_4000000c & 0x2);\n  bool is_bit_set_6 = (_DAT_4000000c & 0x4);\n\n  if (is_bit_set_2 && is_bit_set_5) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    update_parameter_08005778();\n  }\n  if (is_bit_set_3 && is_bit_set_6) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    update_parameter_value_08005760();\n  }\n  if (is_bit_set_1 && is_bit_set_4) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    FUNC_080053a0();\n  }\n  return;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_08005778",
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c7c",
            "calling": [],
            "imported": true,
            "current_name": "update_parameters_if_set_08007c7c"
        },
        "FUN_08007b70": {
            "renaming": {
                "_DAT_40000038": "data_flag_2",
                "local_c": "flags",
                "FUN_08007b70": "set_flags_based_on_data_08007b70",
                "_DAT_40000000": "control_register_1",
                "_DAT_40000034": "data_flag_1",
                "_DAT_4000000c": "control_register_2"
            },
            "code": "void set_flags_based_on_data_08007b70(void)\n{\n  uint8_t flags = 0;\n  if (_DAT_40000034 != 0) {\n    flags |= 0x03;\n  }\n  if (_DAT_40000038 != 0) {\n    flags |= 0x04;\n  }\n  _DAT_4000000c |= flags;\n  _DAT_40000000 |= 0x01;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007b70",
            "calling": [
                "FUN_08005790"
            ],
            "imported": true,
            "current_name": "set_flags_based_on_data_08007b70"
        },
        "FUN_08004d2c": {
            "renaming": {
                "writeDataToBufferAtOffset_08004bc0": "write_data_to_buffer_at_offset",
                "iVar1": "verification_result",
                "verify_buffer_080003ec": "verify_buffer",
                "FUN_08004d2c": "verify_and_write_buffer_08004d2c",
                "param_1": "length",
                "param_2": "buffer"
            },
            "code": "bool verify_and_write_buffer_08004d2c(byte length, undefined *buffer)\n{\n  int verification_result = verify_buffer(buffer, (ushort)length * 0x101 + 0x300, 0x100);\n  if (verification_result == 0) {\n    *buffer = 0;\n    write_data_to_buffer_at_offset(length, buffer);\n  }\n  return verification_result != 0;\n}",
            "called": [
                "FUN_08004bc0",
                "FUN_080003ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d2c",
            "calling": [
                "FUN_080039bc",
                "FUN_08003b98"
            ],
            "imported": true,
            "current_name": "verify_and_write_buffer_08004d2c"
        },
        "FUN_08003004": {
            "renaming": {
                "FUN_08003004": "FUNC_08003004"
            },
            "code": "\nvoid FUNC_08003004(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 char param_5)\n\n{\n  undefined *puVar1;\n  undefined uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  undefined4 uVar9;\n  undefined4 uVar10;\n  uint uVar11;\n  ushort *puVar12;\n  int iVar13;\n  uint uVar14;\n  undefined8 uVar15;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  undefined4 local_20;\n  undefined4 local_1c;\n  \n  puVar12 = (ushort *)(PTR_DAT_08003234 + (uint)(byte)*PTR_DAT_08003230 * 0x40);\n  uVar3 = FUNC_08008eec(*(undefined4 *)PTR_DAT_08003238,param_1);\n  uVar15 = reverse_and_improve_08008590(uVar3);\n  iVar4 = convert_fixed_point_to_integer_080095b8((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n  uVar3 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003238 + 4),param_2);\n  uVar15 = reverse_and_improve_08008590(uVar3);\n  iVar5 = convert_fixed_point_to_integer_080095b8((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n  uVar3 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003238 + 8),param_3);\n  uVar15 = reverse_and_improve_08008590(uVar3);\n  iVar6 = convert_fixed_point_to_integer_080095b8((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n  *puVar12 = 0;\n  if (iVar4 < *(int *)PTR_DAT_0800323c) {\n    *puVar12 = *puVar12 | 0x20;\n  }\n  if (iVar5 < *(int *)(PTR_DAT_0800323c + 4)) {\n    *puVar12 = *puVar12 | 0x880;\n  }\n  if (iVar6 < *(int *)(PTR_DAT_0800323c + 8)) {\n    *puVar12 = *puVar12 | 0x200;\n  }\n  iVar13 = iVar4 - *(int *)PTR_DAT_0800323c;\n  if (iVar13 < 0) {\n    iVar13 = -iVar13;\n  }\n  *(int *)(puVar12 + 2) = iVar13;\n  iVar13 = iVar5 - *(int *)(PTR_DAT_0800323c + 4);\n  if (iVar13 < 0) {\n    iVar13 = -iVar13;\n  }\n  *(int *)(puVar12 + 4) = iVar13;\n  iVar13 = iVar6 - *(int *)(PTR_DAT_0800323c + 8);\n  if (iVar13 < 0) {\n    iVar13 = -iVar13;\n  }\n  *(int *)(puVar12 + 6) = iVar13;\n  uVar11 = *(uint *)(puVar12 + 6);\n  if (*(uint *)(puVar12 + 6) < *(uint *)(puVar12 + 4)) {\n    uVar11 = *(uint *)(puVar12 + 4);\n  }\n  uVar14 = *(uint *)(puVar12 + 2);\n  if (*(uint *)(puVar12 + 2) < uVar11) {\n    uVar14 = uVar11;\n  }\n  *(uint *)(puVar12 + 8) = uVar14;\n  if (*(int *)(puVar12 + 8) != 0) {\n    uVar3 = calculate_hash_08008e44(iVar4 - *(int *)PTR_DAT_0800323c);\n    uVar3 = FUNC_08009054(uVar3,*(undefined4 *)PTR_DAT_08003238);\n    uVar7 = calculate_hash_08008e44(iVar5 - *(int *)(PTR_DAT_0800323c + 4));\n    uVar7 = FUNC_08009054(uVar7,*(undefined4 *)(PTR_DAT_08003238 + 4));\n    uVar8 = calculate_hash_08008e44(iVar6 - *(int *)(PTR_DAT_0800323c + 8));\n    uVar8 = FUNC_08009054(uVar8,*(undefined4 *)(PTR_DAT_08003238 + 8));\n    uVar9 = FUNC_08008eec(uVar3,uVar3);\n    uVar10 = FUNC_08008eec(uVar7,uVar7);\n    uVar9 = FUNC_08008cdc(uVar9,uVar10);\n    uVar10 = FUNC_08008eec(uVar8,uVar8);\n    uVar9 = FUNC_08008cdc(uVar9,uVar10);\n    uVar15 = reverse_and_improve_08008590(uVar9);\n    uVar15 = calculate_result_and_set_value_if_valid_input_080098d0_080098d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    uVar9 = calculate_float_bits_08008c30((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    *(undefined4 *)(puVar12 + 0x10) = uVar9;\n    uVar9 = FUNC_08009054(0x3f800000,*(undefined4 *)(puVar12 + 0x10));\n    if (param_5 == '\\0') {\n      local_1c = FUNC_08008eec(param_4,uVar9);\n    }\n    else {\n      local_1c = FUNC_08009054(0x3f800000,param_4);\n    }\n    uVar10 = FUNC_08008eec(*(undefined4 *)(puVar12 + 0x10),local_1c);\n    *(undefined4 *)(puVar12 + 10) = uVar10;\n    uVar10 = calculate_hash_08008e44(*(undefined4 *)(puVar12 + 8));\n    uVar10 = FUNC_08008eec(uVar10,local_1c);\n    uVar15 = reverse_and_improve_08008590(uVar10);\n    uVar15 = calculate_result_08009318((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    uVar10 = calculate_08008bf0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    *(undefined4 *)(puVar12 + 0x1e) = uVar10;\n    uVar10 = calculate_hash_08008e44(*(undefined4 *)(puVar12 + 8));\n    uVar10 = FUNC_08008eec(uVar10,uVar9);\n    uVar10 = FUNC_08008eec(uVar10,*(undefined4 *)(PTR_DAT_08003560 + 0x20));\n    uVar10 = FUNC_08009054(uVar10,DAT_08003564);\n    uVar15 = reverse_and_improve_08008590(uVar10);\n    uVar15 = calculate_result_08009318((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    uVar10 = convert_fixed_point_to_int_08008ba0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    *(undefined4 *)(puVar12 + 0x18) = uVar10;\n    uVar3 = FUNC_08008eec(uVar3,uVar9);\n    uVar7 = FUNC_08008eec(uVar7,uVar9);\n    uVar8 = FUNC_08008eec(uVar8,uVar9);\n    local_20 = 0;\n    if ((*PTR_DAT_08003568 != *PTR_DAT_0800356c) &&\n       (iVar13 = is_input_null_08009264_08009264(*(undefined4 *)(PTR_DAT_08003570 + 0x18),0), iVar13 != 0)) {\n      uVar9 = FUNC_08008eec(*(uint *)(PTR_DAT_08003570 + 0xc) ^ 0x80000000,uVar3);\n      uVar10 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003570 + 0x10),uVar7);\n      uVar9 = FUNC_08008cd8(uVar9,uVar10);\n      uVar10 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003570 + 0x14),uVar8);\n      uVar9 = FUNC_08008cd8(uVar9,uVar10);\n      uVar15 = reverse_and_improve_08008590(uVar9);\n      iVar13 = check_input_is_null_08008b24_08008b24((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08003550,DAT_08003554);\n      if (iVar13 != 0) {\n        iVar13 = is_input_empty_08009228(*(undefined4 *)(PTR_DAT_08003570 + 0x18),*(undefined4 *)(puVar12 + 10)\n                             );\n        if (iVar13 == 0) {\n          local_20 = *(undefined4 *)(puVar12 + 10);\n        }\n        else {\n          local_20 = *(undefined4 *)(PTR_DAT_08003570 + 0x18);\n        }\n        uVar15 = reverse_and_improve_08008590(uVar9);\n        iVar13 = is_input_valid_08008b60((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08003558,DAT_0800355c\n                             );\n        if (iVar13 != 0) {\n          uVar15 = reverse_and_improve_08008590(uVar9);\n          uVar15 = FUNC_080082d0(0,DAT_08003574,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n          uVar15 = FUNC_08008640((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),0,DAT_08003578);\n          uVar15 = calculate_result_and_set_value_if_valid_input_080098d0_080098d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n          uVar9 = calculate_float_bits_08008c30((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n          uVar15 = reverse_and_improve_08008590(local_20);\n          uVar10 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003560 + 0x20),\n                                *(undefined4 *)(PTR_DAT_08003560 + 0x24));\n          uVar10 = FUNC_08008eec(uVar10,uVar9);\n          uVar16 = reverse_and_improve_08008590(uVar10);\n          uVar17 = reverse_and_improve_08008590(uVar9);\n          uVar17 = FUNC_080082d0(0,DAT_08003574,(int)uVar17,(int)((ulonglong)uVar17 >> 0x20));\n          uVar16 = FUNC_08008894((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar17,\n                                (int)((ulonglong)uVar17 >> 0x20));\n          uVar16 = calculate_result_and_set_value_if_valid_input_080098d0_080098d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n          iVar13 = check_input_is_null_08008b24_08008b24((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                (int)((ulonglong)uVar16 >> 0x20));\n          if (iVar13 == 0) {\n            uVar10 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003560 + 0x20),\n                                  *(undefined4 *)(PTR_DAT_08003560 + 0x24));\n            uVar10 = FUNC_08008eec(uVar10,uVar9);\n            uVar15 = reverse_and_improve_08008590(uVar10);\n            uVar16 = reverse_and_improve_08008590(uVar9);\n            uVar16 = FUNC_080082d0(0,DAT_08003574,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n            uVar15 = FUNC_08008894((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                  (int)((ulonglong)uVar16 >> 0x20));\n            uVar15 = calculate_result_and_set_value_if_valid_input_080098d0_080098d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n            local_20 = calculate_float_bits_08008c30((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(puVar12 + 0xe) = local_20;\n    uVar10 = calculate_float_value_from_params_08002978(*(uint *)(PTR_DAT_08003560 + 0x20) ^ 0x80000000,0,\n                          *(undefined4 *)(puVar12 + 0x10));\n    iVar13 = is_input_empty_08009228(local_20,uVar10);\n    uVar9 = uVar10;\n    if (iVar13 != 0) {\n      uVar9 = local_20;\n    }\n    *(undefined4 *)(puVar12 + 0xc) = uVar9;\n    iVar13 = check_results_are_calculated_and_concatenated_08009250(uVar10,*(undefined4 *)(puVar12 + 10));\n    if (iVar13 == 0) {\n      *(undefined *)((int)puVar12 + 0x25) = 0;\n    }\n    else {\n      *(undefined *)((int)puVar12 + 0x25) = 1;\n    }\n    *(undefined *)(puVar12 + 0x12) = 1;\n    puVar1 = PTR_DAT_080035e0;\n    *(undefined4 *)(PTR_DAT_080035e0 + 0xc) = uVar3;\n    *(undefined4 *)(puVar1 + 0x10) = uVar7;\n    *(undefined4 *)(puVar1 + 0x14) = uVar8;\n    *(undefined4 *)(PTR_DAT_080035e0 + 0x18) = *(undefined4 *)(puVar12 + 10);\n    *PTR_DAT_080035e8 = *PTR_DAT_080035e4;\n    uVar2 = increment_char_08002870(*PTR_DAT_080035e8);\n    *PTR_DAT_080035e4 = uVar2;\n    puVar1 = PTR_DAT_080035e0;\n    *(int *)PTR_DAT_080035e0 = iVar4;\n    *(int *)(puVar1 + 4) = iVar5;\n    *(int *)(puVar1 + 8) = iVar6;\n    process_data_and_calculate_values_08002edc();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002870",
                "FUN_08009264",
                "FUN_08009228",
                "FUN_08008ba0",
                "FUN_08002978",
                "FUN_08008894",
                "FUN_08008b60",
                "FUN_080082d0",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08008cdc",
                "FUN_08009318",
                "FUN_080095b8",
                "FUN_08008b24",
                "FUN_08009250",
                "FUN_08009054",
                "FUN_080098d0",
                "FUN_08002edc",
                "FUN_08008eec",
                "FUN_08008bf0",
                "FUN_08008c30",
                "FUN_08008cd8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003004",
            "calling": [
                "FUN_08001e98"
            ],
            "imported": false,
            "current_name": "FUNC_08003004"
        },
        "FUN_080066cc": {
            "renaming": {
                "uVar1": "result",
                "DAT_08006710": "other_data",
                "FUN_080066cc": "calculate_shifted_result_080066cc",
                "count_leading_zeroes": "count_leading_zeroes",
                "uVar2": "leading_zeroes",
                "calculate_result_08006628": "calculate_result",
                "PTR_DAT_08006714": "data_pointer"
            },
            "code": "uint calculate_shifted_result_080066cc() {\n  uint result = calculate_result();\n  uint leading_zeroes = count_leading_zeroes(0x70000);\n  uint shift_amount = (*(uint *)(PTR_DAT_08006714 + 8) & 0xe000) >> (leading_zeroes & 0xff);\n  return result >> shift_amount;\n}",
            "called": [
                "FUN_08006628"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066cc",
            "calling": [
                "FUN_08007f54"
            ],
            "imported": true,
            "current_name": "calculate_shifted_result_080066cc"
        },
        "FUN_080018fc": {
            "renaming": {
                "param_1 | *(uint *)(DAT_08001928 + 0x14) & 0xfffff55f": "new_value",
                "*(uint *)(DAT_08001928 + 0x14)": "ptr",
                "DAT_08001928": "data_address",
                "param_1": "new_param",
                "FUN_080018fc": "set_param_080018fc",
                "*(uint *)(DAT_08001928 + 0x14) & 0xfffff55f": "mask"
            },
            "code": "void set_param_080018fc(uint new_param)\n{\n  uint* *(uint *)(DAT_08001928 + 0x14) = (uint*)(DAT_08001928 + 0x14);\n  uint current_value = **(uint *)(DAT_08001928 + 0x14);\n  uint *(uint *)(DAT_08001928 + 0x14) & 0xfffff55f = 0xfffff55f;\n  uint *(uint *)(DAT_08001928 + 0x14) & 0xfffff55fed_current_value = current_value & *(uint *)(DAT_08001928 + 0x14) & 0xfffff55f;\n  uint param_1 | *(uint *)(DAT_08001928 + 0x14) & 0xfffff55f = new_param | *(uint *)(DAT_08001928 + 0x14) & 0xfffff55fed_current_value;\n  **(uint *)(DAT_08001928 + 0x14) = param_1 | *(uint *)(DAT_08001928 + 0x14) & 0xfffff55f;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018fc",
            "calling": [
                "FUN_08001994"
            ],
            "imported": true,
            "current_name": "set_param_080018fc"
        },
        "FUN_080039bc": {
            "renaming": {
                "iVar1": "verificationResult",
                "PTR_DAT_08003a14": "buffers",
                "FUN_080039bc": "process_buffers_080039bc",
                "local_9": "bufferIndex",
                "FUNC_080005b4": "get_error_code",
                "verify_and_write_buffer_08004d2c": "verify_and_write_buffer",
                "uVar2": "errorCode",
                "printErrorMessage_08004030": "print_error_message",
                "writeStringToMemory_0800369c": "write_string_to_memory"
            },
            "code": "void process_buffers_080039bc(int bufferIndex, char* buffer);\nvoid process_PTR_DAT_08003a14(void)\n{\n  int verificationResult;\n  char* currentBuffer;\n  for (int bufferIndex = 0; bufferIndex < 2; bufferIndex++) {\n    currentBuffer = PTR_DAT_08003a14[bufferIndex];\n    verificationResult = process_buffers_080039bc(bufferIndex, currentBuffer);\n    if (verificationResult == 0) {\n      print_error_message(10);\n    }\n    else if (*currentBuffer != '\\0') {\n      write_string_to_memory(currentBuffer);\n      int errorCode = get_error_code(currentBuffer);\n      print_error_message(errorCode);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_0800369c",
                "FUN_08004030",
                "FUN_08004d2c",
                "FUN_080005b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080039bc",
            "calling": [
                "FUN_08001ddc",
                "FUN_08003b98"
            ],
            "imported": true,
            "current_name": "process_buffers_080039bc"
        },
        "FUN_0800618c": {
            "renaming": {
                "iVar2": "value2",
                "param_1": "params",
                "lVar1": "value1",
                "FUN_0800618c": "validate_0800618c",
                "param_2": "param_count",
                "uVar3": "temp_value",
                "uVar5": "calculated_value",
                "uVar4": "temp_value2"
            },
            "code": "int validate_0800618c(uint *params, uint param_count)\n{\n  longlong value1;\n  int value2;\n  uint temp_value;\n  uint temp_value2;\n  ulonglong calculated_value;\n  \n  if ((*PTR_08006400 & 0xf) < param_count) {\n    *(char *)PTR_08006400 = (char)param_count;\n    if (param_count != (*PTR_08006400 & 0xf)) {\n      return 1;\n    }\n    if ((*params & 1) != 0) {\n      if (params[1] == 1) {\n        if ((*PTR_08006404 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((params[1] != 2) && ((*PTR_08006404 & 2) == 0)) {\n        return 1;\n      }\n      PTR_08006404[2] = params[1] | PTR_08006404[2] & 0xfffffffc;\n      value2 = get_value_from_pointer_08005a84();\n      temp_value2 = value2 + 5000;\n      if (params[1] == 1) {\n        while ((PTR_08006404[2] & 0xc) != 4) {\n          temp_value = get_value_from_pointer_08005a84();\n          if (temp_value2 <= temp_value) {\n            return 3;\n          }\n        }\n      }\n      else if (params[1] == 2) {\n        while ((PTR_08006404[2] & 0xc) != 8) {\n          temp_value = get_value_from_pointer_08005a84();\n          if (temp_value2 <= temp_value) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((PTR_08006404[2] & 0xc) != 0) {\n          temp_value = get_value_from_pointer_08005a84();\n          if (temp_value2 <= temp_value) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*params & 1) != 0) {\n      if (params[1] == 1) {\n        if ((*PTR_08006404 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (params[1] == 2) {\n        if ((*PTR_08006404 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((*PTR_08006404 & 2) == 0) {\n        return 1;\n      }\n      PTR_08006404[2] = params[1] | PTR_08006404[2] & 0xfffffffc;\n      value2 = get_value_from_pointer_08005a84();\n      temp_value2 = value2 + 5000;\n      if (params[1] == 1) {\n        while ((PTR_08006404[2] & 0xc) != 4) {\n          temp_value = get_value_from_pointer_08005a84();\n          if (temp_value2 <= temp_value) {\n            return 3;\n          }\n        }\n      }\n      else if (params[1] == 2) {\n        while ((PTR_08006404[2] & 0xc) != 8) {\n          temp_value = get_value_from_pointer_08005a84();\n          if (temp_value2 <= temp_value) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((PTR_08006404[2] & 0xc) != 0) {\n          temp_value = get_value_from_pointer_08005a84();\n          if (temp_value2 <= temp_value) {\n            return 3;\n          }\n        }\n      }\n    }\n    *(char *)PTR_08006400 = (char)param_count;\n    if (param_count != (*PTR_08006400 & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*params & 2) != 0) {\n    PTR_08006404[2] = params[2] | PTR_08006404[2] & 0xffffff0f;\n  }\n  if ((*params & 4) != 0) {\n    PTR_08006404[2] = params[3] | PTR_08006404[2] & 0xffffe3ff;\n  }\n  if ((*params & 8) != 0) {\n    PTR_08006404[2] = params[4] << 3 | PTR_08006404[2] & 0xffff1fff;\n  }\n  calculated_value = calculate_result_08006628();\n  value1 = (ulonglong)PTR_08006408 * (calculated_value & 0xffffffff);\n  is_valid_color_08005c30((uint)((ulonglong)value1 >> 0x26),(int)(calculated_value >> 0x20),(int)value1);\n  return 0;\n}",
            "called": [
                "FUN_08006628",
                "FUN_08005a84",
                "FUN_08005c30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800618c",
            "calling": [
                "FUN_08007436"
            ],
            "imported": true,
            "current_name": "validate_0800618c"
        },
        "FUN_08006998": {
            "renaming": {
                "FUN_08006998": "get_bits_to_shift_08006998",
                "DAT_080069b0": "data_start_address"
            },
            "code": "uint get_bits_to_shift_08006998(void)\n{\n    uint* data_pointer = (uint*)(DAT_080069b0 + 0xc);\n    uint shifted_value = *data_pointer >> 8;\n    uint bits_to_shift = shifted_value & 7;\n    return bits_to_shift;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006998",
            "calling": [
                "FUN_08006cf6",
                "FUN_08006d8a"
            ],
            "imported": true,
            "current_name": "get_bits_to_shift_08006998"
        },
        "FUN_080004ac": {
            "renaming": {
                "PTR_DAT_080004f8": "PTR_VERIFICATION_DATA",
                "PTR_DAT_080004f4": "PTR_SECONDARY_DATA",
                "verify_and_fill_buffer_08004d7c": "verify_and_fill_buffer",
                "FUN_080004ac": "initialize_and_verify_data_080004ac",
                "PTR_DAT_080004f0": "PTR_DATA_BUFFER",
                "printErrorMessage_08004030": "print_error_message"
            },
            "code": "void initialize_and_verify_data_080004ac(void)\n{\n  int verificationResult;\n  fill_buffer_with_value(PTR_DAT_080004f0, 0, 0x38);\n  *(undefined4 *)(PTR_DAT_080004f0 + 8) = *(undefined4 *)(PTR_DAT_080004f4 + 0x10);\n  set_params_to_array(0, 1, 2);\n  PTR_DAT_080004f0[4] = 1;\n  verificationResult = verify_and_fill_buffer(PTR_DAT_080004f0[0x1c], PTR_DAT_080004f8);\n  if (verificationResult == 0) {\n    print_error_message(10);\n  }\n  return;\n}",
            "called": [
                "FUN_0800b430",
                "FUN_08000478",
                "FUN_08004030",
                "FUN_08004d7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004ac",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": true,
            "current_name": "initialize_and_verify_data_080004ac"
        },
        "FUN_080078f4": {
            "renaming": {
                "local_c": "sum",
                "FUN_080078f4": "calculate_sum_of_four_values_080078f4",
                "local_10": "index"
            },
            "code": "uint calculate_sum_of_four_values_080078f4(void)\n{\n  int index;\n  uint sum = 0;\n  for (index = 0; index < 4; index++) {\n    sum = *(uint *)(PTR_DAT_0800792c + index * 4) | sum;\n  }\n  return sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078f4",
            "calling": [
                "FUN_08007930",
                "FUN_08001994"
            ],
            "imported": true,
            "current_name": "calculate_sum_of_four_values_080078f4"
        },
        "FUN_080041a0": {
            "renaming": {
                "PTR_s_Caution__Unlocked_08004218": "caution_message",
                "PTR_s_Disabled_08004220": "disabled_message",
                "PTR_DAT_0800420c": "status_message_prefix",
                "param_1": "status",
                "PTR_s_Reset_to_continue_08004210": "reset_message",
                "PTR_s___H____X__to_unlock_08004214": "unlock_message",
                "FUN_080041a0": "displayStatusMessage_080041a0",
                "PTR_s_Enabled_0800421c": "enabled_message",
                "PTR_DAT_08004224": "status_message_suffix"
            },
            "code": "void displayStatusMessage_080041a0(int status)\n{\n    writeStringToMemory(\"System status: \");\n    switch(status) {\n        case 1:\n            writeStringToMemory(\"Reset to continue\");\n            break;\n        case 2:\n            writeStringToMemory(\"Press 'X' to unlock\");\n            break;\n        case 3:\n            writeStringToMemory(\"Caution: Unlocked\");\n            break;\n        case 4:\n            writeStringToMemory(\"Enabled\");\n            break;\n        case 5:\n            writeStringToMemory(\"Disabled\");\n            break;\n    }\n    writeStringToMemory(\"\\n\");\n    return;\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a0",
            "calling": [
                "FUN_08003a74",
                "FUN_08001ddc",
                "FUN_08003b98"
            ],
            "imported": true,
            "current_name": "displayStatusMessage_080041a0"
        },
        "FUN_08008bf0": {
            "renaming": {
                "iVar1": "temp1",
                "param_1": "dividend",
                "param_2": "divisor",
                "FUN_08008bf0": "calculate_08008bf0",
                "uVar2": "temp2"
            },
            "code": "uint calculate_08008bf0(uint dividend, uint divisor)\n{\n  int temp1;\n  uint temp2;\n  \n  if ((divisor & 0x80000000) != 0) {\n    return 0;\n  }\n  temp1 = divisor * 2 + 0x200000;\n  if (divisor * 2 < 0xffe00000) {\n    if (-1 < temp1) {\n      return 0;\n    }\n    temp2 = -(temp1 >> 0x15) - 0x3e1;\n    if (-1 < (int)temp2) {\n      return (divisor << 0xb | 0x80000000 | dividend >> 0x15) >> (temp2 & 0xff);\n    }\n  }\n  else if ((dividend | divisor << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf0",
            "calling": [
                "FUN_08001994",
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_08002c18",
                "FUN_08003004",
                "FUN_080005b4",
                "FUN_08003b98",
                "FUN_08002408"
            ],
            "imported": true,
            "current_name": "calculate_08008bf0"
        },
        "FUN_08003a18": {
            "renaming": {
                "&": "BITWISE_AND",
                "param_1": "device_status",
                "PTR_DAT_08003a70": "device_status_array",
                "0x20": "DEVICE_BUSY",
                "2": "status_byte_index",
                "0x40": "DEVICE_ON",
                "0x80": "DEVICE_CONNECTED",
                "initialize_device_if_not_connected_080025e8": "initialize_device_if_not_connected",
                "|": "BITWISE_OR",
                "!=": "NOT_EQUAL_TO",
                "FUN_08003a18": "update_device_status_08003a18"
            },
            "code": "void update_device_status_08003a18(uint device_status) {\n  if ((device_status & DEVICE_CONNECTED) == 0) {\n    if ((device_status & DEVICE_ON) == 0) {\n      if ((device_status & DEVICE_BUSY) != 0) {\n        PTR_DAT_08003a70[2] |= DEVICE_BUSY_BIT;\n      }\n    }\n    else {\n      PTR_DAT_08003a70[2] |= DEVICE_ON_BIT;\n    }\n  }\n  else {\n    initialize_device_if_not_connected_080025e8();\n  }\n  return;\n}",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a18",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": true,
            "current_name": "update_device_status_08003a18"
        },
        "FUN_08005790": {
            "renaming": {
                "FUN_08005790": "process_data_08005790",
                "set_global_variable_08007c40": "set_global_variable",
                "set_flags_based_on_data_08007b70": "set_flags_based_on_data",
                "PTR_DAT_080057d4": "data_array",
                "PTR_DAT_080057e0": "data_ptr2",
                "set_global_variable_08007c5e": "set_global_variable2",
                "PTR_DAT_080057dc": "data_ptr1"
            },
            "code": "void process_data_08005790() {\n  do_nothing();\n  if (PTR_DAT_080057d4[1] == 0x03) {\n    *(ushort *)PTR_DAT_080057d4[2] = *(ushort *)(PTR_DAT_080057d4[0] + 0x18);\n    *(ushort *)PTR_DAT_080057d4[3] = *(ushort *)(PTR_DAT_080057d4[0] + 0x1a);\n    set_global_variable(0x69);\n    set_global_variable2(((byte)PTR_DAT_080057d4[0xd] + 5) * 0x15);\n    set_flags_based_on_data();\n  }\n  return;\n}",
            "called": [
                "FUN_08007c5e",
                "FUN_08007b70",
                "FUN_08005318",
                "FUN_08007c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005790",
            "calling": [
                "FUN_0800585c",
                "FUN_0800583c",
                "FUN_08001d4c"
            ],
            "imported": true,
            "current_name": "process_data_08005790"
        },
        "FUN_08001994": {
            "renaming": {
                "FUN_08001994": "FUNC_08001994"
            },
            "code": "\nvoid FUNC_08001994(byte param_1,char param_2,char param_3,undefined4 param_4)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  byte local_61;\n  uint local_5c;\n  uint local_58;\n  uint local_54;\n  ushort local_4e;\n  uint local_4c;\n  int local_48;\n  undefined4 local_44;\n  uint local_40;\n  uint local_3c;\n  ushort local_36;\n  uint local_34;\n  uint local_30;\n  int local_2c;\n  int local_28;\n  int local_24;\n  int local_20;\n  ushort local_1a;\n  uint local_18;\n  char local_11;\n  \n  local_11 = '\\0';\n  fill_buffer_with_value_0800b430(&local_5c,0,0xc);\n  if ((param_1 & 1) != 0) {\n    local_11 = local_11 + '\\x01';\n    uVar3 = reverse_and_improve_08008590(*(undefined4 *)PTR_DAT_08001c90);\n    local_5c = convert_fixed_point_to_integer_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  }\n  if ((param_1 & 2) != 0) {\n    local_11 = local_11 + '\\x01';\n    uVar3 = reverse_and_improve_08008590(*(undefined4 *)(PTR_DAT_08001c90 + 4));\n    local_58 = convert_fixed_point_to_integer_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  }\n  if ((param_1 & 4) != 0) {\n    local_11 = local_11 + '\\x01';\n    uVar3 = reverse_and_improve_08008590(*(undefined4 *)(PTR_DAT_08001c90 + 8));\n    local_54 = convert_fixed_point_to_integer_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  }\n  uVar2 = local_54;\n  if (local_54 < local_58) {\n    uVar2 = local_58;\n  }\n  local_40 = local_5c;\n  if (local_5c < uVar2) {\n    local_40 = uVar2;\n  }\n  uVar3 = calculate_shifted_value_0800854c(local_40);\n  uVar4 = calculate_shifted_value_0800854c(local_11);\n  uVar4 = calculate_result_and_set_value_if_valid_input_080098d0_080098d0((int)uVar4,(int)((ulonglong)uVar4 >> 0x20));\n  uVar3 = FUNC_08008894((int)uVar3,(int)((ulonglong)uVar3 >> 0x20),(int)uVar4,\n                       (int)((ulonglong)uVar4 >> 0x20));\n  local_44 = calculate_float_bits_08008c30((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar1 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08001c90 + 0x20),local_44);\n  uVar1 = FUNC_08009054(uVar1,DAT_08001c94);\n  uVar3 = reverse_and_improve_08008590(uVar1);\n  uVar3 = calculate_result_08009318((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  local_48 = calculate_08008bf0((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar3 = calculate_shifted_value_0800854c(local_11);\n  uVar3 = calculate_result_and_set_value_if_valid_input_080098d0_080098d0((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar4 = reverse_and_improve_08008590(param_4);\n  uVar3 = FUNC_08008640((int)uVar3,(int)((ulonglong)uVar3 >> 0x20),(int)uVar4,\n                       (int)((ulonglong)uVar4 >> 0x20));\n  uVar1 = calculate_float_bits_08008c30((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar1 = FUNC_08008eec(local_44,uVar1);\n  uVar1 = FUNC_08009054(DAT_08001c98,uVar1);\n  uVar3 = reverse_and_improve_08008590(uVar1);\n  local_4c = convert_fixed_point_to_integer_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  local_18 = DAT_08001c9c;\n  if (local_4c < DAT_08001c9c) {\n    local_18 = local_4c;\n  }\n  local_4e = *(ushort *)(PTR_DAT_08001c90 + 0x18);\n  local_1a = *(ushort *)(PTR_DAT_08001c90 + 0x1a) ^ *(ushort *)(PTR_DAT_08001c90 + 0x2a) & 0xaa0;\n  if (param_2 == '\\0') {\n    local_1a = local_1a ^ 0xaa0;\n  }\n  set_param_080018fc(local_1a);\n  update_param_080018cc(local_4e);\n  local_28 = -(local_40 >> 1);\n  local_2c = local_18 - (byte)PTR_DAT_08001c90[0xd];\n  local_30 = 0;\n  local_34 = 10000;\n  local_61 = param_1;\n  local_24 = local_28;\n  local_20 = local_28;\n  while( true ) {\n    local_36 = local_4e;\n    local_3c = calculate_sum_of_four_values_080078f4();\n    if (param_3 == '\\0') {\n      local_3c = local_3c ^ 0x1e;\n    }\n    if (((local_61 & 1) != 0) && (local_20 = local_20 + local_5c, 0 < local_20)) {\n      if ((local_3c & 0x10) == 0) {\n        local_61 = local_61 & 0xfe;\n      }\n      else {\n        local_36 = local_36 ^ 0x10;\n      }\n      local_20 = local_20 - local_40;\n    }\n    if (((local_61 & 2) != 0) && (local_24 = local_24 + local_58, 0 < local_24)) {\n      if ((local_3c & 8) == 0) {\n        local_61 = local_61 & 0xfd;\n      }\n      else {\n        local_36 = local_36 ^ 0x440;\n      }\n      local_24 = local_24 - local_40;\n    }\n    if (((local_61 & 4) != 0) && (local_28 = local_28 + local_54, 0 < local_28)) {\n      if ((local_3c & 4) == 0) {\n        local_61 = local_61 & 0xfb;\n      }\n      else {\n        local_36 = local_36 ^ 0x100;\n      }\n      local_28 = local_28 - local_40;\n    }\n    if ((local_61 == 0) || ((PTR_DAT_08001d40[2] & 0x10) != 0)) break;\n    update_param_080018cc(local_36);\n    do_nothing_08002828(PTR_DAT_08001d44[0xd]);\n    update_param_080018cc(local_4e);\n    do_nothing_08002828(local_2c);\n    if ((local_4c < local_18) && (local_34 = local_18 + local_34, 20000 < local_34)) {\n      local_34 = local_34 - 20000;\n      local_30 = local_48 + local_30;\n      local_18 = DAT_08001d48 / local_30;\n      if (local_18 < local_4c) {\n        local_18 = local_4c;\n      }\n      local_2c = local_18 - (byte)PTR_DAT_08001d44[0xd];\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800b430",
                "FUN_0800854c",
                "FUN_08008894",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08009318",
                "FUN_080078f4",
                "FUN_080095b8",
                "FUN_080018fc",
                "FUN_080018cc",
                "FUN_08009054",
                "FUN_080098d0",
                "FUN_08008eec",
                "FUN_08008bf0",
                "FUN_08008c30",
                "FUN_08002828"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001994",
            "calling": [
                "FUN_08001d4c"
            ],
            "imported": false,
            "current_name": "FUNC_08001994"
        },
        "FUN_08007854": {
            "renaming": {
                "param_1": "input_uint",
                "FUN_08007854": "get_bit_from_uint_at_index_08007854"
            },
            "code": "uint get_bit_from_uint_at_index_08007854(uint input_uint, uint bit_index) {\n    uint base_address = ((int)input_uint >> 4) * 0x400 + 0x40020010;\n    uint uint_at_address = *(uint *)base_address;\n    uint shifted_uint = uint_at_address >> (bit_index & 0xf);\n    uint bit_value = shifted_uint & 1;\n    return bit_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007854",
            "calling": [
                "FUN_08007884"
            ],
            "imported": true,
            "current_name": "get_bit_from_uint_at_index_08007854"
        },
        "FUN_08004900": {
            "renaming": {
                "printAbsoluteValue_080037fc": "printAbsoluteValue",
                "writeStringToMemory_080036c6": "writeStringToMemory",
                "param_1": "value",
                "FUN_08004900": "printAbsoluteValueAndWriteToMemory_08004900",
                "PTR_DAT_0800493c": "\"\\n\"",
                "PTR_DAT_08004938": "\"\\nMemory address: \"",
                "param_2": "memoryAddress",
                "writeStringToMemory_0800369c": "writeIntToStringMemory",
                "PTR_DAT_08004934": "\"Absolute value: \""
            },
            "code": "void printAbsoluteValueAndWriteToMemory_08004900(int value, int memoryAddress)\n{\n  writeStringToMemory(PTR_DAT_08004934);\n  printAbsoluteValue(value);\n  writeStringToMemory(PTR_DAT_08004938);\n  writeStringToMemory(memoryAddress);\n  writeStringToMemory(PTR_DAT_0800493c);\n  return;\n}",
            "called": [
                "FUN_080036c6",
                "FUN_0800369c",
                "FUN_080037fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004900",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": true,
            "current_name": "printAbsoluteValueAndWriteToMemory_08004900"
        },
        "FUN_08005318": {
            "renaming": {
                "FUN_08005318": "do_nothing_08005318"
            },
            "code": "\nvoid do_nothing_08005318(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005318",
            "calling": [
                "FUN_08005790"
            ],
            "imported": true,
            "current_name": "do_nothing_08005318"
        },
        "FUN_08004228": {
            "renaming": {
                "writeStringToMemory_080036c6": "writeStringToMemory",
                "FUN_08004228": "printGrblHelpMessage_08004228",
                "PTR_s__Grbl_0_8c______for_help__08004238": "s_Grbl_help_message"
            },
            "code": "void printGrblHelpMessage_08004228(void)\n{\n  writeStringToMemory(PTR_s__Grbl_0_8c______for_help__08004238);\n  return;\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004228",
            "calling": [
                "FUN_080039a0"
            ],
            "imported": true,
            "current_name": "printGrblHelpMessage_08004228"
        },
        "FUN_08009b24": {
            "renaming": {
                "FUN_08009b24": "FUNC_08009b24"
            },
            "code": "\nuint FUNC_08009b24(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  uint uVar3;\n  int iVar4;\n  undefined4 uVar5;\n  int iVar6;\n  uint uVar7;\n  undefined4 uVar8;\n  undefined4 uVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined8 uVar13;\n  int local_3c;\n  \n  uVar1 = DAT_08009d70;\n  param_2 = param_2 & 0x7fffffff;\n  param_4 = param_4 & 0x7fffffff;\n  uVar3 = param_1;\n  uVar7 = param_2;\n  if (param_2 < param_4) {\n    uVar3 = param_3;\n    param_3 = param_1;\n    uVar7 = param_4;\n    param_4 = param_2;\n  }\n  if (0x3c00000 < (int)(uVar7 - param_4)) {\n    uVar3 = FUNC_080082d4(uVar3,uVar7,param_3,param_4);\n    return uVar3;\n  }\n  if (DAT_08009d68 < (int)uVar7) {\n    if (DAT_08009d74 < (int)uVar7) {\n      if ((uVar7 & 0xfffff | uVar3) != 0) {\n        uVar3 = FUNC_080082d4(uVar3,uVar7,param_3,param_4);\n      }\n      if ((param_4 ^ 0x7ff00000 | param_3) != 0) {\n        return uVar3;\n      }\n      return param_3;\n    }\n    uVar7 = uVar7 + 0xda800000;\n    param_4 = param_4 + 0xda800000;\n    local_3c = 600;\n  }\n  else {\n    local_3c = 0;\n  }\n  uVar11 = CONCAT44(uVar7,uVar3);\n  uVar10 = CONCAT44(param_4,param_3);\n  if ((int)param_4 <= DAT_08009d6c) {\n    if ((int)param_4 < 0x100000) {\n      if ((param_4 | param_3) == 0) {\n        return uVar3;\n      }\n      uVar10 = FUNC_08008640(param_3,param_4,0,DAT_08009d70);\n      uVar11 = FUNC_08008640(uVar3,uVar7,0,uVar1);\n      local_3c = local_3c + -0x3fe;\n    }\n    else {\n      uVar7 = uVar7 + 0x25800000;\n      uVar11 = CONCAT44(uVar7,uVar3);\n      param_4 = param_4 + 0x25800000;\n      uVar10 = CONCAT44(param_4,param_3);\n      local_3c = local_3c + -600;\n    }\n  }\n  uVar9 = (undefined4)((ulonglong)uVar11 >> 0x20);\n  uVar8 = (undefined4)uVar11;\n  iVar6 = (int)((ulonglong)uVar10 >> 0x20);\n  uVar5 = (undefined4)uVar10;\n  uVar10 = FUNC_080082d0(uVar8,uVar9,uVar5,iVar6);\n  iVar4 = (int)((ulonglong)uVar10 >> 0x20);\n  uVar1 = (undefined4)uVar10;\n  iVar2 = check_input_is_null_08008b24_08008b24(uVar5,iVar6,uVar1,iVar4);\n  if (iVar2 == 0) {\n    uVar10 = FUNC_08008640(0,param_4,0);\n    uVar11 = FUNC_08008640(uVar1,iVar4 + -0x80000000,uVar1,iVar4);\n    uVar12 = FUNC_080082d4(uVar8,uVar9,uVar8,uVar9);\n    uVar12 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),0,uVar7 + 0x100000);\n    uVar12 = FUNC_08008640((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),uVar5,iVar6);\n    uVar13 = FUNC_080082d0(uVar5,iVar6,0,param_4);\n    uVar13 = FUNC_08008640((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),0,uVar7 + 0x100000);\n    uVar12 = FUNC_080082d4((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                          (int)((ulonglong)uVar13 >> 0x20));\n    uVar11 = FUNC_080082d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                          (int)((ulonglong)uVar12 >> 0x20));\n    FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                 (int)((ulonglong)uVar11 >> 0x20));\n    uVar10 = calculate_0800a1bc();\n  }\n  else {\n    uVar10 = FUNC_08008640(0,uVar7,0,uVar7);\n    uVar11 = FUNC_08008640(uVar5,iVar6 + -0x80000000,uVar5,iVar6);\n    uVar12 = FUNC_080082d4(uVar8,uVar9,0,uVar7);\n    uVar13 = FUNC_080082d0(uVar8,uVar9,0,uVar7);\n    uVar12 = FUNC_08008640((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                          (int)((ulonglong)uVar13 >> 0x20));\n    uVar11 = FUNC_080082d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                          (int)((ulonglong)uVar12 >> 0x20));\n    FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                 (int)((ulonglong)uVar11 >> 0x20));\n    uVar10 = calculate_0800a1bc();\n  }\n  uVar3 = (uint)uVar10;\n  if (local_3c != 0) {\n    uVar3 = FUNC_08008640(uVar3,(int)((ulonglong)uVar10 >> 0x20),0,local_3c * 0x100000 + 0x3ff00000);\n  }\n  return uVar3;\n}\n\n",
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008b24",
                "FUN_0800a1bc",
                "FUN_080082d0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009b24",
            "calling": [
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "FUNC_08009b24"
        },
        "FUN_080076c8": {
            "renaming": {
                "param_1": "index",
                "PTR_": "data_",
                "DAT_": "bit_",
                "FUN_080076c8": "set_bit_at_index_080076c8"
            },
            "code": "void set_bit_at_index_080076c8(uint index)\n{\n    uint* PTR_ptr = (uint*)((int)index >> 4) * 0x400 + 0x40020014;\n    uint DAT_mask = 1 << (index & 0xf);\n    *PTR_ptr = (*PTR_ptr) ^ DAT_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076c8",
            "calling": [
                "FUN_08007756"
            ],
            "imported": true,
            "current_name": "set_bit_at_index_080076c8"
        },
        "FUN_0800530c": {
            "renaming": {
                "FUN_0800530c": "do_nothing_0800530c"
            },
            "code": "\nvoid do_nothing_0800530c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800530c",
            "calling": [
                "FUN_080057e4"
            ],
            "imported": true,
            "current_name": "do_nothing_0800530c"
        },
        "FUN_08006a8c": {
            "renaming": {
                "param_1": "position",
                "uint": "uint32_t",
                "PTR_DAT_08006abc": "ptr",
                "FUN_08006a8c": "set_bit_at_position_08006a8c",
                "bit_mask": "bit_mask"
            },
            "code": "void set_bit_at_position_08006a8c(uint8_t position) {\n    uint32_t* PTR_DAT_08006abc = (uint32_t*)(DAT_08006abc + (((uint32_t)position >> 5) + 0x60) * 4);\n    uint32_t bit_mask = 1 << (position & 0x1f);\n    *PTR_DAT_08006abc = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a8c",
            "calling": [
                "FUN_08006dfe"
            ],
            "imported": true,
            "current_name": "set_bit_at_position_08006a8c"
        },
        "FUN_0800283a": {
            "renaming": {
                "hash_parameters_and_store_in_memory_080004fc": "hash_and_store_params_in_memory",
                "set_params_in_memory_080035ec": "set_params_in_memory",
                "FUN_0800283a": "set_and_hash_memory_params_0800283a",
                "PTR_DAT_08002868": "PTR_DAT_memory_params"
            },
            "code": "void set_and_hash_memory_params_0800283a(void)\n{\n  int param1 = *(int *)(PTR_DAT_08002868 + 4);\n  int param2 = *(int *)(PTR_DAT_08002868 + 8);\n  int param3 = *(int *)(PTR_DAT_08002868 + 0xc);\n  set_params_in_memory_080035ec(param1, param2, param3);\n  hash_parameters_and_store_in_memory_080004fc(param1, param2, param3);\n  return;\n}",
            "called": [
                "FUN_080035ec",
                "FUN_080004fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800283a",
            "calling": [
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "imported": true,
            "current_name": "set_and_hash_memory_params_0800283a"
        },
        "FUN_0800881c": {
            "renaming": {
                "second_bit": "second_bit",
                "param_1": "first_param",
                "first_bit": "first_bit",
                "result": "result",
                "unaff_r4": "unaff_r4",
                "temp_second_param": "temp_second_param",
                "uVar3": "temp_second_param",
                "is_uVar2_not_in_r12": "is_mask_not_in_in_r12",
                "uVar2": "mask",
                "in_r12": "in_r12",
                "mask": "mask",
                "is_unaff_r4_not_in_r12": "is_unaff_r4_not_in_in_r12",
                "bVar4": "is_bVar4",
                "uVar1": "first_bit",
                "is_param_one_and_two_zero": "is_param_one_and_two_zero",
                "temp_first_param": "temp_first_param",
                "is_first_param_zero": "is_param_one_zero",
                "is_third_param_zero": "is_param_three_zero",
                "is_second_param_zero": "is_param_two_zero",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "is_param_three_and_four_zero": "is_param_three_and_four_zero",
                "FUN_0800881c": "calculate_result_0800881c",
                "is_fourth_param_zero": "is_param_four_zero"
            },
            "code": "ulonglong calculate_result_0800881c(uint first_param,uint second_param,uint third_param,uint fourth_param)\n{\n  uint mask = 0x100000;\n  uint temp_first_param;\n  uint temp_second_param;\n  uint temp_third_param;\n  uint temp_fourth_param;\n  uint first_bit;\n  uint second_bit;\n  bool is_first_param_zero;\n  bool is_second_param_zero;\n  bool is_third_param_zero;\n  bool is_fourth_param_zero;\n  bool is_param_one_and_two_zero;\n  bool is_param_three_and_four_zero;\n  bool is_unaff_r4_not_in_r12;\n  bool is_uVar2_not_in_r12;\n  bool is_bVar4;\n  uint result;\n  if (fourth_param >> 0x14 != in_r12 && unaff_r4 != in_r12)\n  {\n    is_param_one_and_two_zero = (first_param | second_param << 1) == 0;\n    is_param_three_and_four_zero = (third_param | fourth_param << 1) == 0;\n    is_bVar4 = is_param_one_and_two_zero || is_param_three_and_four_zero;\n    if (is_bVar4)\n    {\n      result = ((second_param ^ fourth_param) & 0x80000000) << 0x20;\n    }\n    else\n    {\n      if (unaff_r4 == 0)\n      {\n        temp_second_param = second_param & 0x80000000;\n        do\n        {\n          first_bit = first_param & 0x80000000;\n          first_param = first_param << 1;\n          second_param = second_param * 2 + (uint)(first_bit != 0);\n        }\n        while ((second_param & mask) == 0);\n        second_param = second_param | temp_second_param;\n        if (fourth_param >> 0x14 != 0)\n        {\n          result = CONCAT44(second_param, first_param);\n        }\n        else\n        {\n          result = CONCAT44(temp_second_param, first_param);\n        }\n      }\n      else\n      {\n        do\n        {\n          is_uVar2_not_in_r12 = (third_param & 0x80000000) != 0;\n          third_param = third_param << 1;\n          fourth_param = fourth_param * 2 + (uint)(is_uVar2_not_in_r12 != 0);\n        }\n        while ((fourth_param & mask) == 0);\n        result = CONCAT44(second_param, first_param);\n      }\n    }\n  }\n  else\n  {\n    is_param_one_and_two_zero = (first_param | second_param << 1) == 0;\n    is_bVar4 = is_param_one_and_two_zero;\n    if (!is_bVar4)\n    {\n      is_param_three_and_four_zero = (third_param | fourth_param << 1) == 0;\n      is_bVar4 = is_param_three_and_four_zero;\n    }\n    is_unaff_r4_not_in_r12 = unaff_r4 != in_r12;\n    if (!is_bVar4 && (!is_unaff_r4_not_in_r12 || is_param_one_and_two_zero) && (in_r12 & fourth_param >> 0xc) == 0 && (in_r12 | fourth_param << 0xc) != 0)\n    {\n      temp_second_param = fourth_param;\n      temp_first_param = third_param;\n    }\n    else\n    {\n      temp_second_param = second_param;\n      temp_first_param = first_param;\n    }\n    result = CONCAT44(temp_second_param, temp_first_param) | 0x7ff8000000000000;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800881c",
            "calling": [
                "FUN_08008640"
            ],
            "imported": true,
            "current_name": "calculate_result_0800881c"
        },
        "FUN_08004bc0": {
            "renaming": {
                "FUN_08004bc0": "writeDataToBufferAtOffset_08004bc0",
                "writeDataToBuffer_08000374": "writeDataToBuffer",
                "param_1": "data",
                "param_2": "offset"
            },
            "code": "void writeDataToBufferAtOffset_08004bc0(byte data, uint offset) {\n    ushort bufferOffset = (ushort)data * 0x101 + 0x300;\n    writeDataToBuffer_08000374(bufferOffset, offset, 0x100);\n    return;\n}",
            "called": [
                "FUN_08000374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bc0",
            "calling": [
                "FUN_08004d2c",
                "FUN_08003b98"
            ],
            "imported": true,
            "current_name": "writeDataToBufferAtOffset_08004bc0"
        },
        "FUN_08008b4c": {
            "renaming": {
                "FUN_08008b4c": "is_input_valid_08008b4c",
                "in_ZR": "is_zero",
                "in_CY": "carry"
            },
            "code": "bool is_input_valid_08008b4c(void)\n{\n  undefined is_zero = 0;\n  undefined carry = 0;\n  validate_input_and_return();\n  return (bool)(!carry) || (bool)is_zero;\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b4c",
            "calling": [
                "FUN_0800a5a0"
            ],
            "imported": true,
            "current_name": "is_input_valid_08008b4c"
        },
        "FUN_08004c2a": {
            "renaming": {
                "FUN_08004c2a": "initialize_data_storage_08004c2a",
                "writeDataToBuffer_08000374": "write_data_to_buffer",
                "PTR_DAT_08004c44": "data_buffer_pointer",
                "store_data_08000340": "store_data"
            },
            "code": "void initialize_data_storage_08004c2a(void)\n{\n  store_data(0, 5);\n  write_data_to_buffer(1, PTR_DAT_08004c44, 0x40);\n  return;\n}",
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c2a",
            "calling": [
                "FUN_08004c48",
                "FUN_08004e30"
            ],
            "imported": true,
            "current_name": "initialize_data_storage_08004c2a"
        },
        "FUN_0800826a": {
            "renaming": {
                "FUN_0800826a": "waitForFlagAndWriteToMemory_0800826a",
                "param_1": "memoryAddress"
            },
            "code": "int waitForFlagAndWriteToMemory_0800826a(void* memoryAddress)\n{\n  waitForFlagToBeSetThenWriteToMemory(memoryAddress);\n  return 0;\n}",
            "called": [
                "FUN_08007e1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800826a",
            "calling": [],
            "imported": true,
            "current_name": "waitForFlagAndWriteToMemory_0800826a"
        },
        "FUN_08008b60": {
            "renaming": {
                "FUN_08008b60": "is_input_valid_08008b60",
                "in_CY": "input_char"
            },
            "code": "bool is_input_valid_08008b60(void)\n{\n  char input_char;\n  validate_input_and_return();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b60",
            "calling": [
                "FUN_080094c0",
                "FUN_08009318",
                "FUN_08003004",
                "FUN_0800af78"
            ],
            "imported": true,
            "current_name": "is_input_valid_08008b60"
        },
        "FUN_08005324": {
            "renaming": {
                "FUN_08005324": "calculate_local_value_08005324",
                "param_1": "input_value",
                "DAT_08005358": "data_value",
                "PTR_DAT_0800535c": "PTR_DAT_0800535c",
                "local_14": "local_value"
            },
            "code": "void calculate_local_value_08005324(uint input_value) {\n  uint local_value = input_value;\n  const uint minimum_value = 800;\n  if (input_value < minimum_value) {\n    local_value = minimum_value;\n  }\n  const uint DAT_08005358 = DAT_08005358;\n  uint final_value = DAT_08005358 / local_value;\n  *(uint *)(PTR_DAT_0800535c + 0x14) = final_value;\n  update_data_08007bf0(final_value);\n  return;\n}",
            "called": [
                "FUN_08007bf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005324",
            "calling": [
                "FUN_080053a0",
                "FUN_08005814",
                "FUN_080058a0"
            ],
            "imported": true,
            "current_name": "calculate_local_value_08005324"
        },
        "FUN_08000310": {
            "renaming": {
                "PTR_DAT_0800033c": "buffer",
                "FUN_08000310": "get_buffer_value_08000310",
                "param_1": "index",
                "initialize_buffer_080002f0": "initialize_buffer",
                "PTR_DAT_08000338": "buffer_initialized"
            },
            "code": "uint32_t get_buffer_value_08000310(uint32_t index)\n{\n  if (*PTR_DAT_08000338 == 0) {\n    initialize_PTR_DAT_0800033c();\n  }\n  return PTR_DAT_0800033c[index & 0x3ff];\n}",
            "called": [
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000310",
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "imported": true,
            "current_name": "get_buffer_value_08000310"
        },
        "FUN_08005208": {
            "renaming": {
                "FUN_08005208": "do_nothing_08005208"
            },
            "code": "\nvoid do_nothing_08005208(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005208",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": true,
            "current_name": "do_nothing_08005208"
        },
        "FUN_08007a70": {
            "renaming": {
                "local_c": "memory_byte_offset",
                "param_1": "memory_address",
                "FUN_08007a70": "set_byte_in_memory_and_set_bit_in_array_08007a70",
                "param_2": "bit_array_address",
                "param_3": "memory_byte_value"
            },
            "code": "void set_byte_in_memory_and_set_bit_in_array_08007a70(int memory_byte_value, int memory_address, int bit_array_address) {\n  int memory_byte_offset;\n  if (memory_address == 0x40000000) {\n    memory_byte_offset = 0x1c;\n  }\n  else if (memory_address == DAT_08007ac8) {\n    memory_byte_offset = 0x1d;\n  }\n  else {\n    if (memory_address != DAT_08007acc) {\n      return;\n    }\n    memory_byte_offset = 0x1e;\n  }\n  setByteInMemory_08006cf6(memory_byte_value, memory_byte_offset, bit_array_address);\n  set_bit_in_array_080079e0(memory_byte_offset);\n  return;\n}",
            "called": [
                "FUN_080079e0",
                "FUN_08006cf6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007a70",
            "calling": [
                "FUN_08007ad0"
            ],
            "imported": true,
            "current_name": "set_byte_in_memory_and_set_bit_in_array_08007a70"
        },
        "FUN_0800b5b0": {
            "renaming": {
                "FUN_0800b5b0": "do_nothing_0800b5b0"
            },
            "code": "\nvoid do_nothing_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b5b0",
            "calling": [
                "FUN_0800b3e8",
                "FUN_080001ac",
                "FUN_08000188"
            ],
            "imported": true,
            "current_name": "do_nothing_0800b5b0"
        },
        "FUN_08002978": {
            "renaming": {
                "uVar1": "result_var_1",
                "param_1": "param_1",
                "FUN_08002978": "calculate_float_value_from_params_08002978",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar3": "result_var_3",
                "uVar2": "result_var_2"
            },
            "code": "float calculate_float_value_from_params_08002978(float param_1, float param_2, float param_3) {\n  float result_var_1;\n  float result_var_2;\n  double result_var_3;\n  result_var_1 = FUNC_08008eec(param_2,param_2);\n  result_var_2 = FUNC_08008cdc(param_1,param_1);\n  result_var_2 = FUNC_08008eec(result_var_2,param_3);\n  result_var_1 = FUNC_08008cd8(result_var_1,result_var_2);\n  result_var_3 = reverse_and_improve_08008590(result_var_1);\n  result_var_3 = calculate_result_and_set_value_if_valid_input_080098d0_080098d0((int)result_var_3,(int)((ulonglong)result_var_3 >> 0x20));\n  result_var_1 = calculate_float_bits_08008c30((int)result_var_3,(int)((ulonglong)result_var_3 >> 0x20));\n  return result_var_1;\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008cdc",
                "FUN_080098d0",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08008c30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002978",
            "calling": [
                "FUN_080029d8",
                "FUN_08002afc",
                "FUN_08003004"
            ],
            "imported": true,
            "current_name": "calculate_float_value_from_params_08002978"
        },
        "FUN_08009d78": {
            "renaming": {
                "FUN_08009d78": "FUNC_08009d78"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nint FUNC_08009d78(undefined4 param_1,uint param_2,undefined8 *param_3)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  int iVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined4 local_50;\n  undefined4 uStack_4c;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  \n  uVar8 = param_2 & 0x7fffffff;\n  if ((int)uVar8 <= DAT_08009fb0) {\n    *(undefined4 *)param_3 = param_1;\n    *(uint *)((int)param_3 + 4) = param_2;\n    *(undefined4 *)(param_3 + 1) = 0;\n    *(undefined4 *)((int)param_3 + 0xc) = 0;\n    return 0;\n  }\n  if ((int)uVar8 <= DAT_08009fb4) {\n    if ((int)param_2 < 1) {\n      uVar10 = FUNC_080082d4(param_1,param_2,DAT_08009f88,DAT_08009f8c);\n      uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar1 = (undefined4)uVar10;\n      if (uVar8 != DAT_0800a1b8) {\n        uVar10 = FUNC_080082d4(uVar1,uVar3,DAT_0800a1b0,DAT_0800a1b4);\n        *param_3 = uVar10;\n        uVar10 = FUNC_080082d0(uVar1,uVar3);\n        uVar10 = FUNC_080082d4((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800a1b0,DAT_0800a1b4\n                             );\n        param_3[1] = uVar10;\n        return -1;\n      }\n      uVar10 = FUNC_080082d4(uVar1,uVar3,DAT_0800a190,DAT_0800a194);\n      uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar11 = FUNC_080082d4((int)uVar10,uVar1,DAT_0800a198,DAT_0800a19c);\n      *param_3 = uVar11;\n      uVar10 = FUNC_080082d0((int)uVar10,uVar1);\n      uVar10 = FUNC_080082d4((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800a198,DAT_0800a19c);\n      param_3[1] = uVar10;\n      return -1;\n    }\n    uVar10 = FUNC_080082d0();\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar1 = (undefined4)uVar10;\n    if (uVar8 != DAT_08009fb8) {\n      uVar10 = FUNC_080082d0(uVar1,uVar3,DAT_08009f90,DAT_08009f94);\n      *param_3 = uVar10;\n      uVar10 = FUNC_080082d0(uVar1,uVar3);\n      uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08009f90,DAT_08009f94);\n      param_3[1] = uVar10;\n      return 1;\n    }\n    uVar10 = FUNC_080082d0(uVar1,uVar3,DAT_08009f98,DAT_08009f9c);\n    uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar11 = FUNC_080082d0((int)uVar10,uVar1,DAT_08009fa0,DAT_08009fa4);\n    *param_3 = uVar11;\n    uVar10 = FUNC_080082d0((int)uVar10,uVar1);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08009fa0,DAT_08009fa4);\n    param_3[1] = uVar10;\n    return 1;\n  }\n  if (DAT_08009fbc < (int)uVar8) {\n    if (DAT_08009fc0 < (int)uVar8) {\n      uVar10 = FUNC_080082d0(param_1,param_2,param_1,param_2);\n      param_3[1] = uVar10;\n      *param_3 = uVar10;\n      return 0;\n    }\n    iVar9 = ((int)uVar8 >> 0x14) + -0x416;\n    convert_fixed_point_to_int_08008ba0();\n    local_40 = calculate_shifted_value_0800856c();\n    uVar10 = FUNC_080082d0(param_1,uVar8 + iVar9 * -0x100000,(int)local_40,\n                          (int)((ulonglong)local_40 >> 0x20));\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08009fc4);\n    convert_fixed_point_to_int_08008ba0();\n    local_38 = calculate_shifted_value_0800856c();\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20));\n    local_30 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08009fc4);\n    check_input_and_return_08008b10((int)local_30,(int)((ulonglong)local_30 >> 0x20),0,0);\n    iVar9 = FUNC_0800a5a0(&local_40,param_3,iVar9);\n    if (-1 < (int)param_2) {\n      return iVar9;\n    }\n    *(int *)((int)param_3 + 4) = *(int *)((int)param_3 + 4) + -0x80000000;\n    *(int *)((int)param_3 + 0xc) = *(int *)((int)param_3 + 0xc) + -0x80000000;\n    return -iVar9;\n  }\n  uVar10 = do_nothing_0800b2cc();\n  uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n  uVar11 = FUNC_08008640((int)uVar10,uVar3,DAT_08009fa8,DAT_08009fac);\n  FUNC_080082d4((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08009fcc);\n  iVar9 = convert_fixed_point_to_int_08008ba0();\n  uVar11 = calculate_shifted_value_0800856c();\n  uVar4 = (undefined4)((ulonglong)uVar11 >> 0x20);\n  uVar1 = (undefined4)uVar11;\n  uVar11 = FUNC_08008640(uVar1,uVar4,DAT_08009f88,DAT_08009f8c);\n  uVar10 = FUNC_080082d0((int)uVar10,uVar3,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n  uVar5 = (undefined4)((ulonglong)uVar10 >> 0x20);\n  uVar3 = (undefined4)uVar10;\n  uVar11 = FUNC_08008640(uVar1,uVar4,DAT_08009f90,DAT_08009f94);\n  if ((0x1f < iVar9) || (*(uint *)(PTR_DAT_08009fd0 + (iVar9 + -1) * 4) == uVar8)) {\n    uVar12 = FUNC_080082d0(uVar3,uVar5,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    if ((int)((uVar8 >> 0x14) - ((uint)((int)((ulonglong)uVar12 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    uVar11 = FUNC_08008640(uVar1,uVar4,DAT_0800a190,DAT_0800a194);\n    uVar6 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar10 = FUNC_080082d0(uVar3,uVar5,(int)uVar11,uVar6);\n    uVar7 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar12 = FUNC_080082d0(uVar3,uVar5,uVar2,uVar7);\n    uVar11 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,uVar6);\n    uVar12 = FUNC_08008640(uVar1,uVar4,DAT_0800a198,DAT_0800a19c);\n    uVar11 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n    uVar12 = FUNC_080082d0(uVar2,uVar7,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    if ((int)(((int)uVar8 >> 0x14) - ((uint)((int)((ulonglong)uVar12 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    uVar11 = FUNC_08008640(uVar1,uVar4,DAT_0800a1a0,DAT_0800a1a4);\n    uVar3 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar10 = FUNC_080082d0(uVar2,uVar7,(int)uVar11,uVar3);\n    uVar12 = FUNC_080082d0(uVar2,uVar7);\n    uVar11 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,uVar3);\n    uVar12 = FUNC_08008640(uVar1,uVar4,DAT_0800a1a8,DAT_0800a1ac);\n    uVar11 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n  }\n  uVar12 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\nLAB_0800a0ce:\n  uStack_4c = (undefined4)((ulonglong)uVar10 >> 0x20);\n  local_50 = (undefined4)uVar10;\n  *param_3 = uVar12;\n  uVar10 = FUNC_080082d0(local_50,uStack_4c);\n  uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n  param_3[1] = uVar10;\n  if ((int)param_2 < 0) {\n    *(int *)param_3 = (int)uVar12;\n    *(int *)((int)param_3 + 4) = (int)((ulonglong)uVar12 >> 0x20) + -0x80000000;\n    *(int *)(param_3 + 1) = (int)uVar10;\n    *(int *)((int)param_3 + 0xc) = (int)((ulonglong)uVar10 >> 0x20) + -0x80000000;\n    iVar9 = -iVar9;\n  }\n  return iVar9;\n}\n\n",
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_08008b10",
                "FUN_0800b2cc",
                "FUN_0800856c",
                "FUN_0800a5a0",
                "FUN_080082d0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009d78",
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "imported": false,
            "current_name": "FUNC_08009d78"
        },
        "FUN_08003826": {
            "renaming": {
                "bVar3": "lastDigitIndex",
                "waitUntilMemoryWriteIsReadyThenWriteToMemory_08008250": "waitUntilMemoryWriteIsReadyThenWriteToMemory",
                "local_a": "currentDigit",
                "acStack_1d": "digitsToPrint",
                "DAT_08003974": "dataDecimalDivisor",
                "param_1": "floatToPrint",
                "DAT_08003978": "dataDecimalDivisorLastDigit",
                "local_9": "digits",
                "FUN_08003826": "printFloat_08003826",
                "FUNC_08008cdc": "convertParamToInt32",
                "FUNC_08008eec": "floatToDecimal",
                "is_input_empty_08009228": "isInputEmpty",
                "PTR_DAT_08003970": "ptrToDigits",
                "local_10": "convertedParam",
                "uVar2": "integerPart",
                "local_24": "modifiedFloat"
            },
            "code": "void printFloat_08003826(uint floatToPrint) {\n  int isEmpty = isInputEmpty(floatToPrint, 0);\n  uint modifiedFloat = floatToPrint;\n  if (isEmpty != 0) {\n    waitUntilMemoryWriteIsReadyThenWriteToMemory(0x2d);\n    modifiedFloat = floatToPrint ^ 0x80000000;\n  }\n  for (byte digits = PTR_DAT_08003970[0x3d]; digits > 1; digits -= 2) {\n    modifiedFloat = floatToDecimal(modifiedFloat, DAT_08003974);\n  }\n  if (digits != 0) {\n    modifiedFloat = floatToDecimal(modifiedFloat, DAT_08003978);\n  }\n  uint integerPart = convertParamToInt32(modifiedFloat);\n  char decimalSeparator = '.';\n  char digitsToPrint[13];\n  digitsToPrint[(byte)PTR_DAT_08003970[0x3d] + 1] = decimalSeparator;\n  for (; integerPart != 0; integerPart = (uint)((ulonglong)DAT_08003978 * (ulonglong)integerPart >> 0x23)) {\n    if (digitsToPrint[0] == PTR_DAT_08003970[0x3d]) {\n      digitsToPrint[0]++;\n    }\n    uint currentDigitIndex = (uint)digitsToPrint[0];\n    digitsToPrint[currentDigitIndex + 1] = (char)integerPart + (char)(uint)((ulonglong)DAT_08003978 * (ulonglong)integerPart >> 0x23) * -10 + '0';\n    digitsToPrint[0]++;\n  }\n  while (digitsToPrint[0] < (byte)PTR_DAT_08003970[0x3d]) {\n    uint currentDigitIndex = (uint)digitsToPrint[0];\n    digitsToPrint[currentDigitIndex + 1] = '0';\n    digitsToPrint[0]++;\n  }\n  if (digitsToPrint[0] == PTR_DAT_08003970[0x3d]) {\n    byte lastDigitIndex = digitsToPrint[0] + 1;\n    digitsToPrint[lastDigitIndex + 1] = '0';\n    digitsToPrint[0] += 2;\n  }\n  for (; digitsToPrint[0] != 0; digitsToPrint[0]--) {\n    waitUntilMemoryWriteIsReadyThenWriteToMemory(digitsToPrint[digitsToPrint[0]]);\n  }\n}",
            "called": [
                "FUN_08009228",
                "FUN_08008cdc",
                "FUN_08009278",
                "FUN_08008250",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003826",
            "calling": [
                "FUN_080046d0",
                "FUN_08004940",
                "FUN_080044e8",
                "FUN_08004250"
            ],
            "imported": true,
            "current_name": "printFloat_08003826"
        },
        "FUN_0800923c": {
            "renaming": {
                "in_ZR": "input_ZR",
                "in_CY": "input_CY",
                "FUN_0800923c": "check_results_are_valid_0800923c"
            },
            "code": "bool check_results_are_valid_0800923c(void)\n{\n  bool is_CY_zero = false;\n  bool is_ZR_nonzero = false;\n  calculate_and_concatenate_results();\n  if (!(bool)in_CY)\n  {\n    is_CY_zero = true;\n  }\n  if ((bool)in_ZR)\n  {\n    is_ZR_nonzero = true;\n  }\n  return is_CY_zero || is_ZR_nonzero;\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800923c",
            "calling": [
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "imported": true,
            "current_name": "check_results_are_valid_0800923c"
        },
        "FUN_08002afc": {
            "renaming": {
                "iVar1": "is_input_empty",
                "param_1": "input_params_addr",
                "param_2": "result_addr",
                "FUN_08002afc": "calculate_and_concatenate_float_values_08002afc",
                "uVar3": "result_val",
                "uVar2": "calculated_val"
            },
            "code": "void calculate_and_concatenate_float_values_08002afc(int input_params_addr, int result_addr)\\n{\\n  int is_input_empty;\\n  int is_result_empty;\\n  int is_concatenated;\\n  int input_val_1 = *(int *)(input_params_addr + 0x18);\\n  int input_val_2 = *(int *)(input_params_addr + 0x20);\\n  int result_val = *(int *)(result_addr + 0x18);\\n  \\n  if ((input_params_addr != 0) && (*(char *)(input_params_addr + 0x25) == \"\\0\")) {\\n    is_input_empty = is_input_empty_08009228(input_val_1, result_val);\\n    if (is_input_empty != 0) {\\n      float calculated_val = calculate_float_value_from_params_08002978(*(unsigned int *)(PTR_DAT_08002ba4 + 0x20) ^ 0x80000000, input_val_1, input_val_2);\\n      is_result_empty = is_input_empty_08009228(result_val, calculated_val);\\n      if (is_result_empty == 0) {\\n        is_concatenated = check_if_results_calculated_and_concatenated_08009214(calculated_val, result_val);\\n        if (is_concatenated == 0) {\\n          *(float *)(result_addr + 0x18) = calculated_val;\\n          *(char *)(result_addr + 0x24) = 1;\\n        }\\n      }\\n      else {\\n        *(float *)(result_addr + 0x18) = result_val;\\n      }\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08002978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002afc",
            "calling": [
                "FUN_08002ba8"
            ],
            "imported": true,
            "current_name": "calculate_and_concatenate_float_values_08002afc"
        },
        "FUN_08004c48": {
            "renaming": {
                "DAT_08004d10": "default_value",
                "DAT_08004d20": "value_4",
                "DAT_08004d1c": "value_3",
                "param_1": "input_char",
                "FUN_08004c48": "initialize_data_storage_08004c2a_08004c48",
                "DAT_08004d14": "value_1",
                "DAT_08004d24": "value_5",
                "DAT_08004d18": "value_2",
                "PTR_DAT_08004d0c": "data_storage"
            },
            "code": "void initialize_data_storage_08004c2a_08004c48(char input_char){\n  if (input_char != '\\0') {\n    int DAT_08004d10 = DAT_08004d10;\n    *(int *)PTR_DAT_08004d0c = DAT_08004d10;\n    *(int *)(PTR_DAT_08004d0c + 4) = DAT_08004d10;\n    *(int *)(PTR_DAT_08004d0c + 8) = DAT_08004d10;\n    PTR_DAT_08004d0c[0xd] = 10;\n    *(int *)(PTR_DAT_08004d0c + 0x10) = DAT_08004d14;\n    *(int *)(PTR_DAT_08004d0c + 0x14) = DAT_08004d18;\n    *(int *)(PTR_DAT_08004d0c + 0x20) = DAT_08004d1c;\n    *(int *)(PTR_DAT_08004d0c + 0x1c) = DAT_08004d20;\n    *(short *)(PTR_DAT_08004d0c + 0x18) = 0;\n    *(short *)(PTR_DAT_08004d0c + 0x1a) = 0xa80;\n    *(int *)(PTR_DAT_08004d0c + 0x24) = DAT_08004d24;\n  }\n  PTR_DAT_08004d0c[0x28] = 0;\n  PTR_DAT_08004d0c[0x28] |= 2;\n  PTR_DAT_08004d0c[0x28] |= 0x10;\n  *(short *)(PTR_DAT_08004d0c + 0x2a) = 0;\n  *(int *)(PTR_DAT_08004d0c + 0x2c) = DAT_08004d28;\n  *(int *)(PTR_DAT_08004d0c + 0x30) = DAT_08004d14;\n  *(short *)(PTR_DAT_08004d0c + 0x34) = 100;\n  *(int *)(PTR_DAT_08004d0c + 0x38) = 0x3f800000;\n  PTR_DAT_08004d0c[0x3c] = 0x19;\n  PTR_DAT_08004d0c[0x3d] = 3;\n  PTR_DAT_08004d0c[0x3e] = 0x19;\n}",
            "called": [
                "FUN_08004c2a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_08004dd2",
                "FUN_080051b4"
            ],
            "imported": true,
            "current_name": "initialize_data_storage_08004c2a_08004c48"
        },
        "FUN_080002a0": {
            "renaming": {
                "param_1": "data",
                "FUN_080002a0": "find_value_greater_than_sum_of_two_pointers_wrapper_080002a0"
            },
            "code": "void find_value_greater_than_sum_of_two_pointers_wrapper_080002a0(void* data)\n{\n  find_value_greater_than_sum_of_two_pointers(data);\n  return;\n}",
            "called": [
                "FUN_08005a98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002a0",
            "calling": [
                "FUN_08002408"
            ],
            "imported": true,
            "current_name": "find_value_greater_than_sum_of_two_pointers_wrapper_080002a0"
        },
        "FUN_08009250": {
            "renaming": {
                "in_ZR": "zero_register",
                "in_CY": "carry_register",
                "calculate_and_concatenate_results_080091fc": "calculate_and_concatenate_results",
                "FUN_08009250": "check_results_are_calculated_and_concatenated_08009250"
            },
            "code": "bool check_results_are_calculated_and_concatenated_08009250(void)\n{\n  undefined zero_register;\n  undefined carry_register;\n  calculate_and_concatenate_results();\n  return !(bool)carry_register || (bool)zero_register;\n}",
            "called": [
                "FUN_080091fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009250",
            "calling": [
                "FUN_08001f00",
                "FUN_08003004"
            ],
            "imported": true,
            "current_name": "check_results_are_calculated_and_concatenated_08009250"
        },
        "FUN_0800640c": {
            "renaming": {
                "local_c": "constant_0",
                "DAT_080064b0": "control_ptr",
                "param_1": "data_type",
                "local_1c": "data_size",
                "local_18": "constant_2",
                "param_2": "param_2",
                "param_3": "param_3",
                "local_10": "constant_0",
                "FUN_0800640c": "update_data_0800640c",
                "DAT_080064b4": "data_ptr_0",
                "local_14": "constant_3",
                "DAT_080064b8": "data_ptr_1"
            },
            "code": "void update_data_0800640c(uint8_t data_type, uint32_t param_2, uint32_t param_3)\n{\n  uint32_t* data_ptr = (data_type == 0) ? (uint32_t*)DAT_080064b4 : (uint32_t*)DAT_080064b8;\n  uint32_t* DAT_080064b0 = (uint32_t*)DAT_080064b0;\n  uint32_t control_val = *DAT_080064b0;\n  if (data_type == 0) {\n    control_val |= 1;\n  }\n  else {\n    control_val |= 4;\n  }\n  *DAT_080064b0 = control_val;\n  uint32_t data_val = param_2 | (param_3 << ((data_type == 0) ? 0 : 3));\n  *data_ptr = data_val;\n}\n",
            "called": [
                "FUN_08006e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800640c",
            "calling": [],
            "imported": true,
            "current_name": "update_data_0800640c"
        },
        "FUN_08008af0": {
            "renaming": {
                "param_1": "data1",
                "check_input_and_return_08008b00_08008b00": "check_input",
                "param_2": "data2",
                "param_3": "input1",
                "param_4": "input2",
                "FUN_08008af0": "validate_input_and_return_08008af0"
            },
            "code": "void validate_input_and_return_08008af0(void* input1, void* input2, void* data1, void* data2)\n{\n  check_input(input1, input2, data1, data2);\n  return;\n}",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "FUN_08008b4c",
                "FUN_08008b60"
            ],
            "imported": true,
            "current_name": "validate_input_and_return_08008af0"
        },
        "FUN_08006e1a": {
            "renaming": {
                "FUN_08006e1a": "is_bit_set_08006e1a",
                "uVar1": "is_set",
                "param_1": "bit_position",
                "isBitSet_08006ac0": "check_bit"
            },
            "code": "bool is_bit_set_08006e1a(int bit_position){\n  bool is_set = false;\n  is_set = check_bit(bit_position);\n  return is_set;\n}",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e1a",
            "calling": [],
            "imported": true,
            "current_name": "is_bit_set_08006e1a"
        },
        "FUN_080052ac": {
            "renaming": {
                "FUN_080052ac": "update_param_080052ac",
                "param_ptr": "current_param_ptr",
                "updated_param": "updated_param_value",
                "param_1": "new_param",
                "uint": "unsigned int",
                "masked_current_param": "masked_current_param_value",
                "current_param": "current_param_value",
                "DAT_080052d8": "PTR_DAT_080052d8",
                "mask": "PARAM_MASK"
            },
            "code": "void update_param_080052ac(uint new_param) {\n  uint* param_ptr = (uint*)(DAT_080052d8 + 0x14);\n  uint current_param = *param_ptr;\n  uint mask = 0xfffffaaf;\n  uint masked_current_param = current_param & mask;\n  uint updated_param = new_param | masked_current_param;\n  *param_ptr = updated_param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052ac",
            "calling": [
                "FUN_08005778",
                "FUN_0800583c",
                "FUN_08005760"
            ],
            "imported": true,
            "current_name": "update_param_080052ac"
        },
        "FUN_08008286": {
            "renaming": {
                "FUN_08008286": "handle_user_input_08008286",
                "iVar2": "is_bit_set_result",
                "is_bit_set_08007e58": "check_bit_set",
                "uVar1": "user_input",
                "handle_input_08005900": "process_user_input",
                "get_first_byte_from_address_08007e84": "get_first_byte"
            },
            "code": "undefined handle_user_input_08008286(void)\n{\n  undefined user_input;\n  int is_bit_set_result = check_bit_set();\n  if (is_bit_set_result != 0) {\n    user_input = get_first_byte();\n    int handle_input_result = process_user_input(user_input);\n    if (handle_input_result == 0) {\n      return user_input;\n    }\n  }\n  return 0xff;\n}",
            "called": [
                "FUN_08007e84",
                "FUN_08007e58",
                "FUN_08005900"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008286",
            "calling": [
                "FUN_08003f34"
            ],
            "imported": true,
            "current_name": "handle_user_input_08008286"
        },
        "FUN_0800b5bc": {
            "renaming": {
                "FUN_0800b5bc": "do_nothing_0800b5bc"
            },
            "code": "\nvoid do_nothing_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b5bc",
            "calling": [],
            "imported": true,
            "current_name": "do_nothing_0800b5bc"
        },
        "FUN_08008b74": {
            "renaming": {
                "FUN_08008b74": "is_valid_input_08008b74",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08008b74(uint32_t input1, int32_t input2, uint32_t input3, int32_t input4) {\n    int is_input1_input2_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n    int is_input3_input4_valid = ((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0));\n    return is_input1_input2_valid && is_input3_input4_valid;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b74",
            "calling": [
                "FUN_080098d0"
            ],
            "imported": true,
            "current_name": "is_valid_input_08008b74"
        },
        "FUN_0800b524": {
            "renaming": {
                "iVar4": "list_start",
                "iVar5": "list_end",
                "FUN_0800b524": "add_to_list_0800b524",
                "param_1": "type",
                "param_2": "value",
                "param_3": "list_ptr",
                "param_4": "flag_ptr",
                "puVar1": "ptr1",
                "uVar3": "list_size",
                "uVar2": "new_item_index",
                "uVar6": "flag_bit"
            },
            "code": "int add_to_list_0800b524(int type, int value, int* list_ptr, int* flag_ptr) {\n  undefined* ptr1;\n  int list_start;\n  int list_end;\n  uint list_size;\n  int new_item_index;\n  uint flag_bit;\n  \n  ptr1 = PTR_PTR_DAT_0800b5ac;\n  do_nothing_0800b51c(*(int*)PTR_PTR_DAT_0800b5ac);\n  list_start = *(int*)PTR_PTR_DAT_0800b5a8;\n  list_end = *(int*)(list_start + 0x148);\n  if (list_end == 0) {\n    list_end = list_start + 0x14c;\n    *(int*)(list_start + 0x148) = list_end;\n  }\n  list_size = *(uint*)(list_end + 4);\n  if ((int)list_size < 0x20) {\n    if (type != 0) {\n      new_item_index = list_end + list_size * 4;\n      *(int*)(new_item_index + 0x88) = value;\n      flag_bit = 1 << (list_size & 0xff);\n      *(uint*)(list_end + 0x188) = *(uint*)(list_end + 0x188) | flag_bit;\n      *(int*)(new_item_index + 0x108) = *flag_ptr;\n      if (type == 2) {\n        *(uint*)(list_end + 0x18c) = flag_bit | *(uint*)(list_end + 0x18c);\n      }\n    }\n    int ptr2 = *(int*)ptr1;\n    *(uint*)(list_end + 4) = list_size + 1;\n    *(int*)(list_end + (list_size + 2) * 4) = value;\n    do_nothing_0800b520(ptr2);\n    ptr2 = 0;\n  }\n  else {\n    do_nothing_0800b520(*(int*)ptr1);\n    new_item_index = -1;\n  }\n  return new_item_index;\n}",
            "called": [
                "FUN_0800b520",
                "FUN_0800b51c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b524",
            "calling": [
                "FUN_0800b4d0"
            ],
            "imported": true,
            "current_name": "add_to_list_0800b524"
        },
        "FUN_08005214": {
            "renaming": {
                "FUN_08005214": "do_nothing_08005214"
            },
            "code": "\nvoid do_nothing_08005214(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005214",
            "calling": [
                "FUN_08005250"
            ],
            "imported": true,
            "current_name": "do_nothing_08005214"
        },
        "FUN_08007ea4": {
            "renaming": {
                "DAT_08007f44": "FLAG_C",
                "DAT_08007f50": "FLAG_F",
                "DAT_08007f40": "FLAG_B",
                "*(uint *)(DAT_08007f3c + 0x44)": "*other_flags_ptr",
                "param_1": "flag",
                "FUN_08007ea4": "set_flags_08007ea4",
                "DAT_08007f4c": "FLAG_E",
                "*(uint *)(DAT_08007f3c + 0x40)": "*flags_ptr",
                "DAT_08007f38": "FLAG_A",
                "DAT_08007f48": "FLAG_D"
            },
            "code": "void set_flags_08007ea4(int flag)\n{\n  uint* flags_ptr = (uint*)(DAT_08007f3c + 0x40);\n  uint* other_flags_ptr = (uint*)(DAT_08007f3c + 0x44);\n  if (flag == DAT_08007f38) {\n    *(uint *)(DAT_08007f3c + 0x44) |= 0x10;\n  }\n  else if (flag == DAT_08007f40) {\n    *(uint *)(DAT_08007f3c + 0x40) |= 0x20000;\n  }\n  else if (flag == DAT_08007f44) {\n    *(uint *)(DAT_08007f3c + 0x40) |= 0x40000;\n  }\n  else if (flag == DAT_08007f48) {\n    *(uint *)(DAT_08007f3c + 0x40) |= 0x80000;\n  }\n  else if (flag == DAT_08007f4c) {\n    *(uint *)(DAT_08007f3c + 0x40) |= 0x100000;\n  }\n  else if (flag == DAT_08007f50) {\n    *(uint *)(DAT_08007f3c + 0x44) |= 0x20;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ea4",
            "calling": [
                "FUN_08008190"
            ],
            "imported": true,
            "current_name": "set_flags_08007ea4"
        },
        "FUN_08007756": {
            "renaming": {
                "set_bit_at_index_080076c8": "setBitAtIndex",
                "uVar1": "value",
                "FUN_08007756": "checkAndUpdateDeviceStatus_08007756",
                "get_value_from_pointer_08005a84": "getValueFromPointer",
                "increment_pointer_08005a68": "incrementPointer",
                "update_device_status_08007930": "updateDeviceStatus"
            },
            "code": "void checkAndUpdateDeviceStatus_08007756(void)\n{\n  uint value = getValueFromPointer();\n  if ((value & 0x1ff) == 0) {\n    setBitAtIndex(0x3c);\n  }\n  if ((value & 0xf) == 0) {\n    updateDeviceStatus();\n  }\n  incrementPointer();\n  return;\n}",
            "called": [
                "FUN_080076c8",
                "FUN_08007930",
                "FUN_08005a84",
                "FUN_08005a68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007756",
            "calling": [],
            "imported": true,
            "current_name": "checkAndUpdateDeviceStatus_08007756"
        },
        "FUN_0800b520": {
            "renaming": {
                "FUN_0800b520": "do_nothing_0800b520"
            },
            "code": "\nvoid do_nothing_0800b520(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b520",
            "calling": [
                "FUN_0800b524"
            ],
            "imported": true,
            "current_name": "do_nothing_0800b520"
        },
        "FUN_0800423c": {
            "renaming": {
                "PTR_s_____view_Grbl_settings______view_0800424c": "sGrblSettingsView",
                "FUN_0800423c": "printGrblSettingsView_0800423c"
            },
            "code": "void printGrblSettingsView_0800423c(void)\n{\n    writeStringToMemory(PTR_s_____view_Grbl_settings______view_0800424c);\n    return;\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800423c",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": true,
            "current_name": "printGrblSettingsView_0800423c"
        },
        "FUN_08009264": {
            "renaming": {
                "in_CY": "input_char",
                "FUN_08009264": "is_input_null_08009264_08009264"
            },
            "code": "bool is_input_null_08009264_08009264(void)\n{\n  char input_char;\n  calculate_and_concatenate_results_080091fc();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_080091fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009264",
            "calling": [
                "FUN_080029d8",
                "FUN_08003004"
            ],
            "imported": true,
            "current_name": "is_input_null_08009264_08009264"
        },
        "FUN_08007e08": {
            "renaming": {
                "reset_memory_and_flags_08007ad0": "reset_memory_and_flags",
                "set_flag_and_bit_08007da8": "set_flags",
                "FUN_08007e08": "initialize_and_set_flags_08007e08",
                "initialize_memory_08007d08": "initialize_memory"
            },
            "code": "void initialize_and_set_flags_08007e08(void)\n{\n  reset_memory_and_flags();\n  initialize_memory();\n  set_flags();\n  return;\n}",
            "called": [
                "FUN_08007ad0",
                "FUN_08007d08",
                "FUN_08007da8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e08",
            "calling": [
                "FUN_08007540"
            ],
            "imported": true,
            "current_name": "initialize_and_set_flags_08007e08"
        },
        "FUN_08002fac": {
            "renaming": {
                "*PTR_DAT_08002fcc": "*first_pointer",
                "FUN_08002fac": "are_pointers_equal_08002fac",
                "*PTR_DAT_08002fd0": "*second_pointer"
            },
            "code": "bool are_pointers_equal_08002fac(void)\n{\n  bool are_equal = (*PTR_DAT_08002fcc == *PTR_DAT_08002fd0);\n  return are_equal;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fac",
            "calling": [
                "FUN_08001e98"
            ],
            "imported": true,
            "current_name": "are_pointers_equal_08002fac"
        },
        "FUN_080002b6": {
            "renaming": {
                "bVar3": "isCurrentValueLessThanInitial",
                "lVar4": "calculatedValue",
                "uVar1": "currentValue",
                "param_1": "initialValue",
                "uVar2": "previousValue",
                "uVar5": "unusedVariable",
                "FUN_080002b6": "waitForValueToDecrease_080002b6"
            },
            "code": "void waitForValueToDecrease_080002b6(uint initialValue)\n{\n  uint previousValue;\n  uint currentValue;\n  bool isCurrentValueLessThanInitial;\n  longlong calculatedValue;\n  undefined8 unusedVariable;\n\n  calculatedValue = calculateValueAndSubtractFromPrevious();\n  previousValue = (uint)(calculatedValue + (ulonglong)initialValue >> 0x20);\n  do {\n    unusedVariable = calculateValueAndSubtractFromPrevious();\n    currentValue = (uint)((ulonglong)unusedVariable >> 0x20);\n    isCurrentValueLessThanInitial = previousValue <= currentValue;\n    if (currentValue == previousValue) {\n      isCurrentValueLessThanInitial = (uint)(calculatedValue + (ulonglong)initialValue) <= (uint)unusedVariable;\n    }\n  } while (!isCurrentValueLessThanInitial);\n  return;\n}",
            "called": [
                "FUN_08000268"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002b6",
            "calling": [],
            "imported": true,
            "current_name": "waitForValueToDecrease_080002b6"
        }
    },
    "used_tokens": 174754,
    "layers": [
        [
            "FUN_0800192c",
            "FUN_08006950",
            "FUN_08008ba0",
            "FUN_08007a10",
            "FUN_0800856c",
            "FUN_0800597c",
            "FUN_08009798",
            "FUN_08000188",
            "FUN_080018cc",
            "FUN_080079e0",
            "FUN_08006a58",
            "FUN_08005a84",
            "FUN_08008c30",
            "FUN_08007bf0",
            "FUN_08008590",
            "FUN_08007c5e",
            "FUN_0800587c",
            "FUN_08008a02",
            "FUN_080028bc",
            "FUN_0800738e",
            "FUN_0800a1bc",
            "FUN_080073d4",
            "FUN_08006e88",
            "FUN_08009990",
            "FUN_08007e58",
            "FUN_080059f8",
            "FUN_0800b3dc",
            "FUN_0800756c",
            "FUN_08002f74",
            "FUN_0800b3e8",
            "FUN_08006a18",
            "FUN_08006ac0",
            "FUN_0800919c",
            "FUN_0800854c",
            "FUN_08008e44",
            "FUN_0800733e",
            "FUN_080069e4",
            "FUN_0800b2d4",
            "FUN_08008e3c",
            "FUN_08009654",
            "FUN_08007bc2",
            "FUN_080035ec",
            "FUN_08006c70",
            "FUN_08005a68",
            "FUN_0800b2e0",
            "FUN_08002908",
            "FUN_08007c40",
            "FUN_08006b54",
            "FUN_08007e84",
            "FUN_0800b2e8",
            "FUN_08007402",
            "FUN_08002870",
            "FUN_08000210",
            "FUN_08006c04",
            "thunk_FUN_08009990",
            "FUN_08009278",
            "FUN_08007da8",
            "FUN_08008a74",
            "FUN_0800b430",
            "FUN_08005360",
            "FUN_08003980",
            "FUN_080052dc",
            "FUN_080064ec",
            "FUN_08006ba0",
            "FUN_08002896",
            "FUN_080001ac",
            "FUN_08000478",
            "FUN_08007e1c",
            "FUN_08006b00",
            "FUN_08005250",
            "FUN_08007430",
            "FUN_08005bdc",
            "FUN_080069b4",
            "FUN_08007b70",
            "FUN_080018fc",
            "FUN_08006998",
            "FUN_080078f4",
            "FUN_08008bf0",
            "FUN_08007854",
            "FUN_080076c8",
            "FUN_08006a8c",
            "FUN_0800881c",
            "FUN_080052ac",
            "FUN_08008b74",
            "FUN_0800b524",
            "FUN_08007ea4",
            "FUN_08002fac"
        ],
        [
            "FUN_08005984",
            "FUN_08008b00",
            "FUN_08009204",
            "FUN_08005760",
            "FUN_08005a98",
            "FUN_08006c9c",
            "FUN_08005778",
            "FUN_08006628",
            "FUN_08008250",
            "FUN_08006ce0",
            "FUN_08006d4a",
            "FUN_08006dfe",
            "FUN_08006d66",
            "FUN_080095b8",
            "FUN_08006cf6",
            "FUN_08002ef0",
            "FUN_08000268",
            "FUN_080001f8",
            "FUN_08006d98",
            "FUN_080079c0",
            "FUN_080057e4",
            "FUN_08006d8a",
            "FUN_08007520",
            "FUN_08007884",
            "FUN_08006dc4",
            "FUN_08005c30",
            "FUN_0800056c",
            "FUN_0800981c",
            "FUN_080004fc",
            "FUN_08005238",
            "FUN_08007d08",
            "FUN_08006de0",
            "FUN_08006d2e",
            "FUN_0800adf0",
            "FUN_0800b4d0",
            "FUN_08002f40",
            "FUN_080002f0",
            "FUN_0800778c",
            "FUN_08005790",
            "FUN_0800826a",
            "FUN_08005324",
            "FUN_0800640c",
            "FUN_08006e1a"
        ],
        [
            "FUN_0800585c",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_0800369c",
            "FUN_08009214",
            "FUN_080036f0",
            "FUN_08001d4c",
            "FUN_08003778",
            "FUN_08006d72",
            "FUN_080096e8",
            "FUN_0800583c",
            "FUN_08009410",
            "FUN_08002f24",
            "FUN_08006680",
            "FUN_08000340",
            "FUN_080091fc",
            "FUN_080036c6",
            "FUN_080025e8",
            "FUN_08005814",
            "FUN_08009228",
            "FUN_08007c7c",
            "FUN_080066cc",
            "FUN_0800618c",
            "FUN_0800283a",
            "FUN_08000310",
            "FUN_08007a70",
            "FUN_0800923c",
            "FUN_080002a0",
            "FUN_08008af0",
            "FUN_080002b6"
        ],
        [
            "FUN_08007ad0",
            "FUN_0800195c",
            "FUN_08000374",
            "FUN_080037fc",
            "FUN_0800375c",
            "FUN_08005900",
            "FUN_08002638",
            "FUN_080098d0",
            "FUN_080059b4",
            "FUN_08004148",
            "FUN_08004030",
            "FUN_080003ec",
            "FUN_08003740",
            "FUN_08007f54",
            "FUN_08007436",
            "FUN_080041a0",
            "FUN_08003a18",
            "FUN_08004228",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08003826",
            "FUN_08009250",
            "FUN_0800423c",
            "FUN_08009264"
        ],
        [
            "FUN_08009318",
            "FUN_080039a0",
            "FUN_0800184c",
            "FUN_080046d0",
            "FUN_080094c0",
            "FUN_08004250",
            "FUN_08004bf4",
            "FUN_08004940",
            "FUN_08008190",
            "FUN_080074c8",
            "FUN_08004900",
            "FUN_08004bc0",
            "FUN_08004c2a",
            "FUN_08002978",
            "FUN_08008286",
            "FUN_08007e08"
        ],
        [
            "FUN_08007930",
            "FUN_080029d8",
            "FUN_08002c18",
            "FUN_08004d7c",
            "FUN_08004d2c",
            "FUN_08002afc",
            "FUN_08004c48"
        ],
        [
            "FUN_080044e8",
            "FUN_08002edc",
            "FUN_080051b4"
        ],
        [
            "FUN_08003618"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_0800525c",
            "FUN_08000220",
            "FUN_08002408",
            "FUN_080024c4"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ],
        [
            "FUN_080092c4"
        ]
    ],
    "locked_functions": []
}