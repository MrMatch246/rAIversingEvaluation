{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "initialize_flag_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initializeFlag_08000188(undefined4 inputValue)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000188": "initialize_flag_08000188",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "combine_values_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 combineValues_080001ac(undefined4 value1,undefined4 value2)\n\n{\n  return CONCAT44(value2,value1);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "combine_values_080001ac",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "initialize_data_080001f8",
            "code": "\nvoid initialize_data_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  initialize_data_080001f8_structure();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "initialize_data_080001f8",
                "initialize_08000210": "initialize_data_structure"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "initialize_08000210",
            "code": "\nvoid initialize_08000210(void)\n\n{\n  FUNC_080001ec();\n  FUNC_080001d4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "initialize_08000210"
            },
            "calling": [
                "FUN_080001f8",
                "FUN_080025e8",
                "FUN_08000220"
            ],
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "update_data_08000220",
            "code": "\nvoid updateData_08000220(char newData)\n\n{\n  if (newData != DAT_20000468) {\n    handleAlarmInterrupts();\n    if (newData == '\\x01') {\n      FUNC_080001c8();\n      DAT_20000468 = newData;\n    }\n    else if (newData == '\\x02') {\n      FUNC_080001e0();\n      DAT_20000468 = newData;\n    }\n    else {\n      initializeData();\n      DAT_20000468 = newData;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "update_data_08000220",
                "param_1": "newData",
                "process_alarm_interrupts_08002fd4": "handleAlarmInterrupts",
                "initialize_08000210": "initializeData"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080001e0",
                "FUN_08002fd4",
                "FUN_08000210",
                "FUN_080001c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "calculate_adjusted_value_08000268",
            "code": "\n\n\nint calculateAdjustedValue_08000268(void)\n\n{\n  int globalValue;\n  \n  globalValue = getGlobalValue();\n  return (globalValue + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "renaming": {
                "FUN_08000268": "calculate_adjusted_value_08000268",
                "iVar1": "globalValue",
                "get_global_value_08005a84": "getGlobalValue"
            },
            "calling": [
                "FUN_080002b6"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "validate_parameter_080002a0",
            "code": "\nvoid validate_parameter_080002a0(undefined4 param)\n\n{\n  validate_param_and_offset(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "validate_parameter_080002a0",
                "param_1": "param",
                "check_param_and_offset_08005a98": "validate_param_and_offset"
            },
            "calling": [
                "FUN_08002408"
            ],
            "called": [
                "FUN_08005a98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "calculate_value_adjustment_080002b6",
            "code": "\nvoid calculateValueAdjustment_080002b6(uint inputValue)\n\n{\n  uint adjustedValue1;\n  uint adjustedValue2;\n  bool isAdjustedValueLess;\n  longlong adjustedValueSum;\n  undefined8 nextAdjustedValue;\n  \n  adjustedValueSum = calculate_adjusted_value_08000268();\n  adjustedValue2 = (uint)(adjustedValueSum + (ulonglong)inputValue >> 0x20);\n  do {\n    nextAdjustedValue = calculate_adjusted_value_08000268();\n    adjustedValue1 = (uint)((ulonglong)nextAdjustedValue >> 0x20);\n    isAdjustedValueLess = adjustedValue2 <= adjustedValue1;\n    if (adjustedValue1 == adjustedValue2) {\n      isAdjustedValueLess = (uint)(adjustedValueSum + (ulonglong)inputValue) <= (uint)nextAdjustedValue;\n    }\n  } while (!isAdjustedValueLess);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "calculate_value_adjustment_080002b6",
                "param_1": "inputValue",
                "uVar1": "adjustedValue1",
                "uVar2": "adjustedValue2",
                "bVar3": "isAdjustedValueLess",
                "lVar4": "adjustedValueSum",
                "uVar5": "nextAdjustedValue"
            },
            "calling": [],
            "called": [
                "FUN_08000268"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_memory_080002f0",
            "code": "\nvoid initializeMemory_080002f0(void)\n\n{\n  fill_memory_0800b430(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_memory_080002f0"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_memory_value_08000310",
            "code": "\nundefined getMemoryValue_08000310(uint inputValue)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeMemory();\n  }\n  return (&DAT_20000470)[inputValue & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_memory_value_08000310",
                "param_1": "inputValue",
                "initialize_memory_080002f0": "initializeMemory"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "store_data_in_memory_08000340",
            "code": "\nvoid storeDataInMemory_08000340(uint dataIndex,undefined data)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeMemory();\n  }\n  (&DAT_20000470)[dataIndex & 0x3ff] = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "store_data_in_memory_08000340",
                "param_1": "dataIndex",
                "param_2": "data",
                "initialize_memory_080002f0": "initializeMemory"
            },
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "process_data_08000374",
            "code": "\nvoid process_data_08000374(int data_offset,char *data,int data_length)\n\n{\n  int remaining_length;\n  char *current_data;\n  int current_offset;\n  char checksum;\n  \n  checksum = '\\0';\n  remaining_length = data_length;\n  current_data = data;\n  current_offset = data_offset;\n  if (DAT_2000046c == 0) {\n    initialize_memory_080002f0();\n    current_data = data;\n    current_offset = data_offset;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    checksum = (checksum != '\\0') + *current_data;\n    store_data_in_memory_08000340(current_offset,*current_data);\n    current_data = current_data + 1;\n    current_offset = current_offset + 1;\n  }\n  store_data_in_memory_08000340(current_offset,checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "process_data_08000374",
                "param_1": "data_offset",
                "param_2": "data",
                "param_3": "data_length",
                "local_1c": "remaining_length",
                "local_18": "current_data",
                "local_14": "current_offset",
                "local_9": "checksum"
            },
            "calling": [
                "FUN_08004c2a",
                "FUN_08004bc0",
                "FUN_08004bf4"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "is_memory_correct_080003ec",
            "code": "\nbool is_memory_correct_080003ec(char *input_buffer,int start_index,int length)\n\n{\n  char cVar1;\n  uint uVar2;\n  int remaining_length;\n  int current_index;\n  char *output_buffer;\n  byte memory_value_sum;\n  \n  memory_value_sum = 0;\n  remaining_length = length;\n  current_index = start_index;\n  output_buffer = input_buffer;\n  if (DAT_2000046c == 0) {\n    initialize_memory_080002f0();\n    current_index = start_index;\n    output_buffer = input_buffer;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    cVar1 = get_memory_value_08000310(current_index);\n    memory_value_sum = cVar1 + (memory_value_sum != 0);\n    *output_buffer = cVar1;\n    current_index = current_index + 1;\n    output_buffer = output_buffer + 1;\n  }\n  uVar2 = get_memory_value_08000310(current_index);\n  return memory_value_sum == uVar2;\n}\n\n",
            "renaming": {
                "FUN_080003ec": "is_memory_correct_080003ec",
                "param_1": "input_buffer",
                "param_2": "start_index",
                "param_3": "length",
                "local_1c": "remaining_length",
                "local_18": "current_index",
                "local_14": "output_buffer",
                "local_9": "memory_value_sum"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_08004d2c",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "initialize_data_08000478",
            "code": "\nvoid initializeData_08000478(undefined data1,undefined data2,undefined data3)\n\n{\n  DAT_20000e89 = data1;\n  DAT_20000e8a = data2;\n  DAT_20000e8b = data3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "initialize_data_08000478",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_and_process_data_080004ac",
            "code": "\nvoid initialize_and_process_data_080004ac(void)\n\n{\n  int result;\n  \n  fill_memory(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  initialize_data(0,1,2);\n  DAT_20000e74 = 1;\n  result = check_and_process_memory(DAT_20000e8c,&DAT_20000e90);\n  if (result == 0) {\n    display_error_message_08004030(10);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_and_process_data_080004ac",
                "iVar1": "result",
                "fill_memory_0800b430": "fill_memory",
                "initialize_data_08000478": "initialize_data",
                "check_and_process_memory_08004d7c": "check_and_process_memory"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_0800b430",
                "FUN_08000478",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "calculate_and_store_floating_point_values_080004fc",
            "code": "\nvoid calculate_and_store_floating_point_values_080004fc(undefined4 input_value_1,undefined4 input_value_2,undefined4 input_value_3)\n\n{\n  undefined4 reversed_value;\n  \n  reversed_value = calculate_reverse_value_08008e44(input_value_1);\n  DAT_20000e7c = calculate_floating_point_08009054(reversed_value,DAT_20000ebc);\n  reversed_value = calculate_reverse_value_08008e44(input_value_2);\n  DAT_20000e80 = calculate_floating_point_08009054(reversed_value,DAT_20000ec0);\n  reversed_value = calculate_reverse_value_08008e44(input_value_3);\n  DAT_20000e84 = calculate_floating_point_08009054(reversed_value,DAT_20000ec4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "calculate_and_store_floating_point_values_080004fc",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "input_value_3",
                "uVar1": "reversed_value"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "process_data_0800056c",
            "code": "\nundefined4 processData_0800056c(undefined4 data)\n\n{\n  undefined8 reversedData;\n  \n  if (DAT_20000e73 != '\\0') {\n    reversedData = reverseBits(data);\n    reversedData = calculateXOR((int)reversedData,(int)((ulonglong)reversedData >> 0x20),0x66666666,0x40396666);\n    data = calculateFloat((int)reversedData,(int)((ulonglong)reversedData >> 0x20));\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "process_data_0800056c",
                "param_1": "data",
                "uVar1": "reversedData",
                "reverse_bits_08008590": "reverseBits",
                "calculate_xored_bits_08008640": "calculateXOR",
                "calculate_float_08008c30": "calculateFloat"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "process_data_080005b4",
            "code": "\nchar processData_080005b4(undefined4 inputData)\n\n{\n  int result;\n  undefined4 tempValue;\n  char errorCode;\n  uint tempIndex;\n  undefined4 tempValue2;\n  undefined8 tempValue3;\n  undefined8 tempValue4;\n  undefined8 tempValue5;\n  undefined4 local_94 [4];\n  undefined4 tempVariable1;\n  undefined4 tempVariable2;\n  undefined4 tempVariable3;\n  undefined4 tempStackVariable1;\n  undefined4 tempStackVariable2;\n  undefined4 auStack_70 [6];\n  undefined4 tempValue6;\n  byte tempChar1;\n  undefined tempChar2;\n  undefined4 tempVariable4;\n  undefined4 tempVariable5;\n  undefined tempChar3;\n  uint tempValue7;\n  byte tempChar4;\n  byte tempChar5;\n  byte tempChar6;\n  byte tempChar7;\n  char tempChar8;\n  uint tempValue8;\n  undefined4 tempValue9;\n  sbyte tempChar9;\n  char tempChar10;\n  char tempChar11;\n  undefined4 tempValue10;\n  byte tempChar12;\n  ushort tempShort;\n  uint tempValue11;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    errorCode = '\\f';\n  }\n  else {\n    tempChar2 = 0;\n    tempShort = 0;\n    tempChar12 = 0;\n    tempValue10 = 0xbf800000;\n    tempChar11 = '\\0';\n    tempChar10 = '\\0';\n    fill_memory_0800b430(auStack_70 + 3,0,0xc);\n    fill_memory_0800b430(auStack_70,0,0xc);\n    DAT_20000e70 = '\\0';\n    tempChar9 = 0;\n    while (result = check_and_update_value_0800184c(&tempChar1,auStack_70 + 6,inputData,&tempChar2), result != 0) {\n      tempValue3 = reverse_bits_08008590(tempValue6);\n      tempValue3 = calculate_precision_08009798((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20));\n      tempValue11 = calculate_value_08008ba0((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20));\n      if (tempChar1 == 0x47) {\n        switch(tempValue11) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          tempChar9 = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          tempChar9 = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          tempChar9 = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          tempChar9 = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          tempChar9 = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          tempChar9 = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          tempChar9 = 6;\n        }\n        switch(tempValue11) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          tempChar10 = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          tempChar10 = '\\x02';\n          break;\n        case 0x11:\n          initialize_data_08000478(0,1,2);\n          break;\n        case 0x12:\n          initialize_data_08000478(2,0,1);\n          break;\n        case 0x13:\n          initialize_data_08000478(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          tempValue = calculate_floating_point_08008eec(tempValue6,0x41200000);\n          tempValue3 = reverse_bits_08008590(tempValue);\n          tempValue3 = calculate_precision_08009798((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20));\n          tempValue11 = calculate_value_08008ba0((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20));\n          switch(tempValue11) {\n          case 0x118:\n            tempChar10 = '\\x03';\n            break;\n          case 0x119:\n            tempChar10 = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            tempChar10 = '\\x05';\n            break;\n          case 0x12d:\n            tempChar10 = '\\x06';\n          }\n          break;\n        case 0x35:\n          tempChar11 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)tempValue11 - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          tempValue = calculate_floating_point_08008eec(tempValue6,0x41200000);\n          tempValue3 = reverse_bits_08008590(tempValue);\n          tempValue3 = calculate_precision_08009798((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20));\n          tempValue11 = calculate_value_08008ba0((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20));\n          if (tempValue11 == 0x398) {\n            tempChar10 = '\\a';\n          }\n          else if (tempValue11 == 0x399) {\n            tempChar10 = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (tempChar1 == 0x4d) {\n        if (tempValue11 == 0x1e) {\nLAB_08000b96:\n          tempChar9 = 5;\n        }\n        else if ((int)tempValue11 < 0x1f) {\n          if ((int)tempValue11 < 3) {\n            if (-1 < (int)tempValue11) goto LAB_08000b96;\n          }\n          else if (tempValue11 - 3 < 3) {\n            tempChar9 = 8;\n          }\n        }\n        switch(tempValue11) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (tempChar9 != 0) {\n        if (((int)(uint)tempShort >> tempChar9 & 1U) == 0) {\n          tempShort = tempShort | (ushort)(1 << tempChar9);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        tempChar9 = 0;\n      }\n    }\n    errorCode = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      tempValue9 = 0;\n      tempValue8 = 0;\n      tempChar8 = '\\0';\n      tempChar2 = 0;\nswitchD_08000d18_caseD_47:\n      result = check_and_update_value_0800184c(&tempChar1,auStack_70 + 6,inputData,&tempChar2);\n      if (result != 0) {\n        switch(tempChar1) {\n        case 0x46:\n          result = is_either_parameter_zero_0800923c(tempValue6,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = process_data_0800056c(tempValue6);\n          }\n          else {\n            tempValue10 = process_data_0800056c(tempValue6);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          tempIndex = (uint)tempChar1;\n          tempValue = process_data_0800056c(tempValue6);\n          auStack_70[tempIndex - 0x49] = tempValue;\n          break;\n        case 0x4c:\n          tempValue3 = reverse_bits_08008590(tempValue6);\n          tempValue3 = calculate_precision_08009798((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20));\n          tempChar8 = convert_to_unsigned_08008bf0((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20));\n          break;\n        case 0x50:\n          tempValue9 = tempValue6;\n          break;\n        case 0x52:\n          tempValue8 = process_data_0800056c(tempValue6);\n          break;\n        case 0x53:\n          result = check_if_string_is_empty_08009228(tempValue6,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          result = check_if_string_is_empty_08009228(tempValue6,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          tempValue3 = reverse_bits_08008590(tempValue6);\n          tempValue3 = calculate_precision_08009798((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20));\n          DAT_20000e88 = convert_to_unsigned_08008bf0((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20));\n          break;\n        case 0x58:\n          auStack_70[3] = process_data_0800056c(tempValue6);\n          tempChar12 = tempChar12 | 1;\n          break;\n        case 0x59:\n          auStack_70[4] = process_data_0800056c(tempValue6);\n          tempChar12 = tempChar12 | 2;\n          break;\n        case 0x5a:\n          auStack_70[5] = process_data_0800056c(tempValue6);\n          tempChar12 = tempChar12 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      errorCode = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          process_param_changed_0800525c((int)DAT_20000e76);\n          update_data_08000220(DAT_20000e77);\n        }\n        if ((tempShort & 0x200) != 0) {\n          result = check_and_process_memory_08004d7c(DAT_20000e8c,&tempVariable3);\n          if (result == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = tempVariable3;\n          DAT_20000e94 = tempStackVariable1;\n          DAT_20000e98 = tempStackVariable2;\n        }\n        switch(tempChar10) {\n        case '\\x01':\n          result = check_if_string_is_empty_08009228(tempValue9,0);\n          if (result == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              process_data_08002408(tempValue9);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          tempValue3 = reverse_bits_08008590(tempValue9);\n          tempValue3 = calculate_precision_08009798((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20));\n          tempValue11 = calculate_value_08008ba0((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20));\n          if ((((tempChar8 == '\\x02') || (tempChar8 == '\\x14')) && (-1 < (int)tempValue11)) &&\n             ((int)tempValue11 < 7)) {\n            if ((tempChar12 == 0) && (tempChar8 == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)tempValue11 < 1) {\n                tempValue11 = (uint)DAT_20000e8c;\n              }\n              else {\n                tempValue11 = tempValue11 - 1;\n              }\n              result = check_and_process_memory_08004d7c(tempValue11 & 0xff,local_94);\n              if (result == 0) {\n                return '\\n';\n              }\n              for (tempChar7 = 0; tempChar7 < 3; tempChar7 = tempChar7 + 1) {\n                if (((int)(uint)tempChar12 >> tempChar7 & 1U) != 0) {\n                  if (tempChar8 == '\\x14') {\n                    tempIndex = (uint)tempChar7;\n                    tempValue = perform_arithmetic_operation_08008cd8(*(undefined4 *)(&DAT_20000e74 + (tempChar7 + 2) * 4),\n                                         auStack_70[tempChar7 + 3]);\n                    local_94[tempIndex] = tempValue;\n                  }\n                  else {\n                    local_94[tempChar7] = auStack_70[tempChar7 + 3];\n                  }\n                }\n              }\n              process_data_08004bf4(tempValue11 & 0xff,local_94);\n              if (tempValue11 == DAT_20000e8c) {\n                DAT_20000e90 = local_94[0];\n                DAT_20000e94 = local_94[1];\n                DAT_20000e98 = local_94[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          tempChar12 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (tempChar12 != 0) {\n            for (tempChar6 = 0; tempChar6 < 3; tempChar6 = tempChar6 + 1) {\n              if (((int)(uint)tempChar12 >> tempChar6 & 1U) == 0) {\n                auStack_70[tempChar6 + 3] = *(undefined4 *)(&DAT_20000e74 + (tempChar6 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                tempIndex = (uint)tempChar6;\n                tempValue = calculate_float_08008cdc(auStack_70[tempChar6 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (tempChar6 + 2) * 4));\n                auStack_70[tempIndex + 3] = tempValue;\n              }\n              else {\n                tempValue2 = auStack_70[tempChar6 + 3];\n                tempValue = calculate_float_08008cdc(*(undefined4 *)(&DAT_20000e70 + (tempChar6 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (tempChar6 + 10) * 4));\n                tempIndex = (uint)tempChar6;\n                tempValue = calculate_float_08008cdc(tempValue2,tempValue);\n                auStack_70[tempIndex + 3] = tempValue;\n              }\n            }\n            process_alarm_interrupts_08001e98(auStack_70[3],auStack_70[4],auStack_70[5],DAT_20000ed0,0);\n          }\n          if (tempChar10 == '\\x05') {\n            result = check_and_process_memory_08004d7c(7,local_94 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            result = check_and_process_memory_08004d7c(6,local_94 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          process_alarm_interrupts_08001e98(local_94[3],tempVariable1,tempVariable2,DAT_20000ed0,0);\n          DAT_20000e7c = local_94[3];\n          DAT_20000e80 = tempVariable1;\n          DAT_20000e84 = tempVariable2;\n          tempChar12 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (tempChar10 == '\\x06') {\n            process_data_08004bf4(7,&DAT_20000e7c);\n          }\n          else {\n            process_data_08004bf4(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (tempChar12 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (tempChar5 = 0; tempChar5 < 3; tempChar5 = tempChar5 + 1) {\n              if (((int)(uint)tempChar12 >> tempChar5 & 1U) != 0) {\n                tempValue = perform_arithmetic_operation_08008cd8(*(undefined4 *)(&DAT_20000e74 + (tempChar5 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (tempChar5 + 8) * 4));\n                tempIndex = (uint)tempChar5;\n                tempValue = perform_arithmetic_operation_08008cd8(tempValue,auStack_70[tempChar5 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (tempIndex + 10) * 4) = tempValue;\n              }\n            }\n          }\n          tempChar12 = 0;\n          break;\n        case '\\b':\n          fill_memory_0800b430(&DAT_20000e9c,0,0xc);\n        }\n        if (((tempShort & 4) != 0) || (tempChar12 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((result = check_if_string_is_empty_08009228(tempValue10,0), result != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((tempChar11 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (tempChar4 = 0; tempChar4 < 3; tempChar4 = tempChar4 + 1) {\n            if (((int)(uint)tempChar12 >> tempChar4 & 1U) == 0) {\n              auStack_70[tempChar4 + 3] = *(undefined4 *)(&DAT_20000e74 + (tempChar4 + 2) * 4);\n            }\n            else if (tempChar11 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                tempIndex = (uint)tempChar4;\n                tempValue = calculate_float_08008cdc(auStack_70[tempChar4 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (tempChar4 + 2) * 4));\n                auStack_70[tempIndex + 3] = tempValue;\n              }\n              else {\n                tempValue2 = auStack_70[tempChar4 + 3];\n                tempValue = calculate_float_08008cdc(*(undefined4 *)(&DAT_20000e70 + (tempChar4 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (tempChar4 + 10) * 4));\n                tempIndex = (uint)tempChar4;\n                tempValue = calculate_float_08008cdc(tempValue2,tempValue);\n                auStack_70[tempIndex + 3] = tempValue;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (tempChar12 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              process_alarm_interrupts_08001e98(auStack_70[3],auStack_70[4],auStack_70[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (tempChar12 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              tempValue = tempValue10;\n              if (DAT_20000e72 == '\\0') {\n                tempValue = DAT_20000e78;\n              }\n              process_alarm_interrupts_08001e98(auStack_70[3],auStack_70[4],auStack_70[5],tempValue,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            tempChar12 = tempChar12 & ~(byte)(1 << DAT_20000e8b);\n            if ((tempChar12 == 0) ||\n               (((result = check_concatenated_parameters_08009214(tempValue8,0), result != 0 &&\n                 (result = check_concatenated_parameters_08009214(auStack_70[DAT_20000e89],0), result != 0)) &&\n                (result = check_concatenated_parameters_08009214(auStack_70[DAT_20000e8a],0), result != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              result = check_concatenated_parameters_08009214(tempValue8,0);\n              if (result == 0) {\n                tempVariable5 = perform_arithmetic_operation_08008cd8(auStack_70[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                tempVariable4 = perform_arithmetic_operation_08008cd8(auStack_70[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                fill_memory_0800b430(auStack_70,0,0xc);\n                tempValue = calculate_floating_point_08008eec(tempValue8,0x40800000);\n                tempValue = calculate_floating_point_08008eec(tempValue,tempValue8);\n                tempValue2 = calculate_floating_point_08008eec(tempVariable5,tempVariable5);\n                tempValue = perform_arithmetic_operation_08008cd8(tempValue,tempValue2);\n                tempValue2 = calculate_floating_point_08008eec(tempVariable4,tempVariable4);\n                tempValue7 = perform_arithmetic_operation_08008cd8(tempValue,tempValue2);\n                result = check_if_string_is_empty_08009228(tempValue7,0);\n                if (result != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                tempValue3 = reverse_bits_08008590(tempValue7);\n                tempValue3 = initialize_and_calculate_result_080098d0((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20));\n                tempValue4 = reverse_bits_08008590(tempVariable5);\n                tempValue5 = reverse_bits_08008590(tempVariable4);\n                tempValue4 = initialize_system_0800981c((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20),(int)tempValue5,\n                                     (int)((ulonglong)tempValue5 >> 0x20));\n                tempValue3 = calculate_floating_point_08008894((int)tempValue3,(uint)((ulonglong)tempValue3 >> 0x20) ^ 0x80000000,\n                                     (int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20));\n                tempValue7 = calculate_float_08008c30((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  tempValue7 = tempValue7 ^ 0x80000000;\n                }\n                result = check_if_string_is_empty_08009228(tempValue8,0);\n                if (result != 0) {\n                  tempValue7 = tempValue7 ^ 0x80000000;\n                  tempValue8 = tempValue8 ^ 0x80000000;\n                }\n                tempValue = calculate_floating_point_08008eec(tempVariable4,tempValue7);\n                tempValue = perform_arithmetic_operation_08008cd8(tempVariable5,tempValue);\n                tempIndex = (uint)DAT_20000e89;\n                tempValue = calculate_floating_point_08008eec(tempValue,0x3f000000);\n                auStack_70[tempIndex] = tempValue;\n                tempValue = calculate_floating_point_08008eec(tempVariable5,tempValue7);\n                tempValue = calculate_float_08008cdc(tempValue,tempVariable4);\n                tempIndex = (uint)DAT_20000e8a;\n                tempValue = calculate_floating_point_08008eec(tempValue,0x3f000000);\n                auStack_70[tempIndex] = tempValue;\n              }\n              else {\n                tempValue3 = reverse_bits_08008590(auStack_70[DAT_20000e89]);\n                tempValue4 = reverse_bits_08008590(auStack_70[DAT_20000e8a]);\n                tempValue3 = initialize_system_0800981c((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20),(int)tempValue4,\n                                     (int)((ulonglong)tempValue4 >> 0x20));\n                tempValue8 = calculate_float_08008c30((int)tempValue3,(int)((ulonglong)tempValue3 >> 0x20));\n              }\n              tempChar3 = DAT_20000e71 == '\\x02';\n              tempValue = tempValue10;\n              if (DAT_20000e72 == '\\0') {\n                tempValue = DAT_20000e78;\n              }\n              process_alarm_interrupts_08001f00(&DAT_20000e7c,auStack_70 + 3,auStack_70,DAT_20000e89,DAT_20000e8a,\n                           DAT_20000e8b,tempValue,DAT_20000e72,tempValue8,tempChar3);\n            }\n            break;\n          case '\\x04':\n            if (tempChar12 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = auStack_70[3];\n          DAT_20000e80 = auStack_70[4];\n          DAT_20000e84 = auStack_70[5];\n        }\n        errorCode = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          process_alarm_interrupts_08002fd4();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            initialize_system_080025e8();\n            errorCode = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            errorCode = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return errorCode;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "process_data_080005b4",
                "param_1": "inputData",
                "iVar1": "result",
                "uVar2": "tempValue",
                "cVar3": "errorCode",
                "uVar4": "tempIndex",
                "uVar5": "tempValue2",
                "uVar6": "tempValue3",
                "uVar7": "tempValue4",
                "uVar8": "tempValue5",
                "local_84": "tempVariable1",
                "local_80": "tempVariable2",
                "local_7c": "tempVariable3",
                "uStack_78": "tempStackVariable1",
                "uStack_74": "tempStackVariable2",
                "local_58": "tempValue6",
                "local_52": "tempChar1",
                "local_51": "tempChar2",
                "local_50": "tempVariable4",
                "local_4c": "tempVariable5",
                "local_45": "tempChar3",
                "local_44": "tempValue7",
                "local_3d": "tempChar4",
                "local_3c": "tempChar5",
                "local_3b": "tempChar6",
                "local_3a": "tempChar7",
                "local_39": "tempChar8",
                "local_38": "tempValue8",
                "local_34": "tempValue9",
                "local_2f": "tempChar9",
                "local_2e": "tempChar10",
                "local_2d": "tempChar11",
                "local_2c": "tempValue10",
                "local_27": "tempChar12",
                "local_26": "tempShort",
                "local_24": "tempValue11"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08009798",
                "FUN_08000478",
                "FUN_0800184c",
                "FUN_08008eec",
                "FUN_08009228",
                "FUN_08008c30",
                "FUN_0800b430",
                "FUN_0800923c",
                "FUN_0800056c",
                "FUN_08004d7c",
                "FUN_08001f00",
                "FUN_08008cd8",
                "FUN_080025e8",
                "FUN_08004bf4",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08008590",
                "FUN_0800525c",
                "FUN_08002fd4",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08008ba0",
                "FUN_08000220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "check_and_update_value_0800184c",
            "code": "\nundefined4 checkAndUpdateValue_0800184c(byte *output,undefined4 inputSize,int baseAddress,byte *index)\n\n{\n  int returnValue;\n  undefined4 successFlag;\n  \n  if (*(char *)(baseAddress + (uint)*index) == '\\0') {\n    successFlag = 0;\n  }\n  else {\n    *output = *(byte *)(baseAddress + (uint)*index);\n    if ((*output < 0x41) || (0x5a < *output)) {\n      DAT_20000e70 = 2;\n      successFlag = 0;\n    }\n    else {\n      *index = *index + 1;\n      returnValue = parse_integer_08002638(baseAddress,index,inputSize);\n      if (returnValue == 0) {\n        DAT_20000e70 = 1;\n        successFlag = 0;\n      }\n      else {\n        successFlag = 1;\n      }\n    }\n  }\n  return successFlag;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "check_and_update_value_0800184c",
                "param_1": "output",
                "param_2": "inputSize",
                "param_3": "baseAddress",
                "param_4": "index",
                "iVar1": "returnValue",
                "uVar2": "successFlag"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08002638"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "update_flag_value_080018cc",
            "code": "\n\n\nvoid updateFlagValue_080018cc(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "update_flag_value_080018cc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "update_memory_value_080018fc",
            "code": "\n\n\nvoid updateMemoryValue_080018fc(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "update_memory_value_080018fc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "update_flag_based_on_condition_0800192c",
            "code": "\nvoid updateFlagBasedOnCondition_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "update_flag_based_on_condition_0800192c"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_08004e30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "initialize_system_if_needed_0800195c",
            "code": "\nvoid initialize_system_if_needed_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    initialize_system_080025e8();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "initialize_system_if_needed_0800195c"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "process_data_08001994",
            "code": "\nvoid processData_08001994(byte flag,char isTrue,char isEnabled,undefined4 value)\n\n{\n  undefined4 result1;\n  uint maxValue;\n  undefined8 result2;\n  undefined8 result3;\n  byte counter;\n  uint value1;\n  uint value2;\n  uint value3;\n  ushort flag1;\n  uint flagValue;\n  int convertedValue;\n  undefined4 floatValue;\n  uint tempValue1;\n  uint sumValue;\n  ushort flag2;\n  uint tempValue2;\n  uint totalValue;\n  int differenceValue;\n  int value1Sum;\n  int value2Sum;\n  int value3Sum;\n  ushort updatedFlag;\n  uint limit;\n  char condition;\n  \n  condition = '\\0';\n  fill_memory_0800b430(&value1,0,0xc);\n  if ((flag & 1) != 0) {\n    condition = condition + '\\x01';\n    result2 = reverse_bits_08008590(DAT_20000ebc);\n    value1 = calculate_modified_value_080095b8((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  if ((flag & 2) != 0) {\n    condition = condition + '\\x01';\n    result2 = reverse_bits_08008590(DAT_20000ec0);\n    value2 = calculate_modified_value_080095b8((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  if ((flag & 4) != 0) {\n    condition = condition + '\\x01';\n    result2 = reverse_bits_08008590(DAT_20000ec4);\n    value3 = calculate_modified_value_080095b8((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  maxValue = value3;\n  if (value3 < value2) {\n    maxValue = value2;\n  }\n  tempValue1 = value1;\n  if (value1 < maxValue) {\n    tempValue1 = maxValue;\n  }\n  result2 = extracted_function_0800854c(tempValue1);\n  result3 = extracted_function_0800854c(condition);\n  result3 = initialize_and_calculate_result_080098d0((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result2 = calculate_floating_point_08008894((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  floatValue = calculate_float_08008c30((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result1 = calculate_floating_point_08008eec(DAT_20000edc,floatValue);\n  result1 = calculate_floating_point_08009054(result1,0x453b8000);\n  result2 = reverse_bits_08008590(result1);\n  result2 = calculate_modified_value_08009318((int)result2,(int)((ulonglong)result2 >> 0x20));\n  convertedValue = convert_to_unsigned_08008bf0((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result2 = extracted_function_0800854c(condition);\n  result2 = initialize_and_calculate_result_080098d0((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result3 = reverse_bits_08008590(value);\n  result2 = calculate_xored_bits_08008640((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  result1 = calculate_float_08008c30((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result1 = calculate_floating_point_08008eec(floatValue,result1);\n  result1 = calculate_floating_point_08009054(0x4c64e1c0,result1);\n  result2 = reverse_bits_08008590(result1);\n  flagValue = calculate_modified_value_080095b8((int)result2,(int)((ulonglong)result2 >> 0x20));\n  limit = 75000;\n  if (flagValue < 75000) {\n    limit = flagValue;\n  }\n  flag1 = DAT_20000ed4;\n  updatedFlag = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (isTrue == '\\0') {\n    updatedFlag = updatedFlag ^ 0xaa0;\n  }\n  update_memory_value_080018fc(updatedFlag);\n  update_flag_value_080018cc(flag1);\n  value1Sum = -(tempValue1 >> 1);\n  differenceValue = limit - DAT_20000ec9;\n  totalValue = 0;\n  tempValue2 = 10000;\n  counter = flag;\n  value2Sum = value1Sum;\n  value3Sum = value1Sum;\n  while( true ) {\n    flag2 = flag1;\n    sumValue = calculate_sum_080078f4();\n    if (isEnabled == '\\0') {\n      sumValue = sumValue ^ 0x1e;\n    }\n    if (((counter & 1) != 0) && (value3Sum = value3Sum + value1, 0 < value3Sum)) {\n      if ((sumValue & 0x10) == 0) {\n        counter = counter & 0xfe;\n      }\n      else {\n        flag2 = flag2 ^ 0x10;\n      }\n      value3Sum = value3Sum - tempValue1;\n    }\n    if (((counter & 2) != 0) && (value2Sum = value2Sum + value2, 0 < value2Sum)) {\n      if ((sumValue & 8) == 0) {\n        counter = counter & 0xfd;\n      }\n      else {\n        flag2 = flag2 ^ 0x440;\n      }\n      value2Sum = value2Sum - tempValue1;\n    }\n    if (((counter & 4) != 0) && (value1Sum = value1Sum + value3, 0 < value1Sum)) {\n      if ((sumValue & 4) == 0) {\n        counter = counter & 0xfb;\n      }\n      else {\n        flag2 = flag2 ^ 0x100;\n      }\n      value1Sum = value1Sum - tempValue1;\n    }\n    if ((counter == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    update_flag_value_080018cc(flag2);\n    FUNC_08002828(DAT_20000ec9);\n    update_flag_value_080018cc(flag1);\n    FUNC_08002828(differenceValue);\n    if ((flagValue < limit) && (tempValue2 = limit + tempValue2, 20000 < tempValue2)) {\n      tempValue2 = tempValue2 - 20000;\n      totalValue = convertedValue + totalValue;\n      limit = 60000000 / totalValue;\n      if (limit < flagValue) {\n        limit = flagValue;\n      }\n      differenceValue = limit - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "process_data_08001994",
                "param_1": "flag",
                "param_2": "isTrue",
                "param_3": "isEnabled",
                "param_4": "value",
                "uVar1": "result1",
                "uVar2": "maxValue",
                "uVar3": "result2",
                "uVar4": "result3",
                "local_61": "counter",
                "local_5c": "value1",
                "local_58": "value2",
                "local_54": "value3",
                "local_4e": "flag1",
                "local_4c": "flagValue",
                "local_48": "convertedValue",
                "local_44": "floatValue",
                "local_40": "tempValue1",
                "local_3c": "sumValue",
                "local_36": "flag2",
                "local_34": "tempValue2",
                "local_30": "totalValue",
                "local_2c": "differenceValue",
                "local_28": "value1Sum",
                "local_24": "value2Sum",
                "local_20": "value3Sum",
                "local_1a": "updatedFlag",
                "local_18": "limit",
                "local_11": "condition"
            },
            "calling": [
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008bf0",
                "FUN_0800854c",
                "FUN_08009054",
                "FUN_08009318",
                "FUN_080078f4",
                "FUN_08008eec",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_080098d0",
                "FUN_080018fc",
                "FUN_0800b430",
                "FUN_08008894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "initialize_and_process_data_08001d4c",
            "code": "\nvoid initialize_and_process_data_08001d4c(void)\n\n{\n  char updated_loop_counter;\n  char loop_counter;\n  \n  initialize_data_and_update_flags_08005790();\n  process_data_08001994(4,1,0,DAT_20000eec);\n  process_data_08001994(3,1,0,DAT_20000eec);\n  FUNC_08002814(DAT_20000ef0);\n  loop_counter = '\\x02';\n  while( true ) {\n    updated_loop_counter = loop_counter + -1;\n    if (loop_counter == '\\0') break;\n    process_data_08001994(7,0,1,DAT_20000ee8);\n    FUNC_08002814(DAT_20000ef0);\n    loop_counter = updated_loop_counter;\n    if ('\\0' < updated_loop_counter) {\n      process_data_08001994(7,1,0,DAT_20000ee8);\n      FUNC_08002814(DAT_20000ef0);\n    }\n  }\n  initialize_flags_080057e4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "initialize_and_process_data_08001d4c",
                "local_9": "loop_counter",
                "cVar1": "updated_loop_counter"
            },
            "calling": [
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08001994",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "initialize_and_process_data_08001ddc",
            "code": "\nvoid initialize_and_process_data_08001ddc(void)\n\n{\n  FUNC_08008244();\n  check_and_process_memory();\n  initialize_and_update_flags();\n  fill_memory(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      FUNC_080082ba();\n      initialize_memory();\n      initialize_and_process_data_08001ddc();\n      initialize_and_setup();\n      initialize();\n      initialize_data();\n      update_flag_based_on_condition();\n      initialize_data();\n      initialize_and_calculate_floating_point_values();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        wait_for_flag_and_switch(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        process_data_and_display_errors();\n      }\n    }\n    process_alarm_interrupt();\n    process_input();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "initialize_and_process_data_08001ddc",
                "check_and_process_memory_080051b4": "check_and_process_memory",
                "initialize_and_update_flags_0800583c": "initialize_and_update_flags",
                "fill_memory_0800b430": "fill_memory",
                "initialize_memory_08002f24": "initialize_memory",
                "initialize_and_process_data_080004ac": "initialize_and_process_data",
                "initialize_and_setup_080039a0": "initialize_and_setup",
                "initialize_08005238": "initialize",
                "initialize_data_080001f8": "initialize_data",
                "update_flag_based_on_condition_0800192c": "update_flag_based_on_condition",
                "initialize_data_08005814": "initialize_data",
                "initialize_and_calculate_floating_point_values_0800283a": "initialize_and_calculate_floating_point_values",
                "wait_for_flag_and_switch_080041a0": "wait_for_flag_and_switch",
                "process_data_and_display_errors_080039bc": "process_data_and_display_errors",
                "process_alarm_interrupt_08003a74": "process_alarm_interrupt",
                "process_input_08003f34": "process_input"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_08005814",
                "FUN_080001f8",
                "FUN_080082ba",
                "FUN_08003a74",
                "FUN_08008244",
                "FUN_08002f24",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_0800283a",
                "FUN_080039a0",
                "FUN_08005238",
                "FUN_080041a0",
                "FUN_0800b430",
                "FUN_080039bc",
                "FUN_0800192c",
                "FUN_080051b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "process_alarm_interrupts_08001e98",
            "code": "\nvoid process_alarm_interrupts_08001e98(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4,\n                 undefined arg5)\n\n{\n  int result;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      process_alarm_interrupt_08003a74();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      result = are_data_equal_08002fac();\n    } while (result != 0);\n    calculate_result_08003004(arg1,arg2,arg3,arg4,arg5);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      initialize_data_and_update_flags_0800585c();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "process_alarm_interrupts_08001e98",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08003004",
                "FUN_0800585c",
                "FUN_08003a74",
                "FUN_08002fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "process_alarm_interrupts_08001f00",
            "code": "\nvoid process_alarm_interrupts_08001f00(int data_ptr_1,undefined4 *data_ptr_2,int data_ptr_3,byte index_1,byte index_2,byte index_3\n                 ,undefined4 value_1,char flag_1,undefined4 value_2,char flag_2)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  int status;\n  uint result_3;\n  undefined8 result_4;\n  undefined8 result_5;\n  uint temp_array [4];\n  undefined4 local_var_1;\n  undefined4 local_var_2;\n  undefined4 local_var_3;\n  undefined4 local_var_4;\n  undefined4 local_var_5;\n  undefined4 local_var_6;\n  ushort count;\n  undefined4 local_var_7;\n  undefined4 local_var_8;\n  undefined4 local_var_9;\n  uint local_var_10;\n  undefined4 local_var_11;\n  undefined4 local_var_12;\n  char local_var_13;\n  ushort local_var_14;\n  undefined4 local_var_15;\n  uint local_var_16;\n  uint local_var_17;\n  \n  local_var_12 = calculate_float_08008cdc(*(undefined4 *)((uint)index_1 * 4 + data_ptr_1),\n                          *(undefined4 *)((uint)index_1 * 4 + data_ptr_3));\n  local_var_11 = calculate_float_08008cdc(*(undefined4 *)((uint)index_2 * 4 + data_ptr_1),\n                          *(undefined4 *)((uint)index_2 * 4 + data_ptr_3));\n  local_var_10 = perform_arithmetic_operation_08008cd8(data_ptr_2[index_3],*(undefined4 *)((uint)index_3 * 4 + data_ptr_1));\n  local_var_17 = *(uint *)((uint)index_1 * 4 + data_ptr_3) ^ 0x80000000;\n  local_var_16 = *(uint *)((uint)index_2 * 4 + data_ptr_3) ^ 0x80000000;\n  local_var_9 = perform_arithmetic_operation_08008cd8(data_ptr_2[index_1],local_var_12);\n  local_var_8 = perform_arithmetic_operation_08008cd8(data_ptr_2[index_2],local_var_11);\n  result_1 = calculate_floating_point_08008eec(local_var_17,local_var_8);\n  result_2 = calculate_floating_point_08008eec(local_var_16,local_var_9);\n  result_1 = perform_arithmetic_operation_08008cd8(result_1,result_2);\n  result_4 = reverse_bits_08008590(result_1);\n  result_1 = calculate_floating_point_08008eec(local_var_17,local_var_9);\n  result_2 = calculate_floating_point_08008eec(local_var_16,local_var_8);\n  result_1 = calculate_float_08008cdc(result_1,result_2);\n  result_5 = reverse_bits_08008590(result_1);\n  result_4 = calculate_value_thunk_08009990((int)result_4,(int)((ulonglong)result_4 >> 0x20),(int)result_5,\n                             (int)((ulonglong)result_5 >> 0x20));\n  local_var_15 = calculate_float_08008c30((int)result_4,(int)((ulonglong)result_4 >> 0x20));\n  if (flag_2 == '\\0') {\n    status = is_either_parameter_zero_0800923c(local_var_15,0);\n    if (status != 0) {\n      result_4 = reverse_bits_08008590(local_var_15);\n      result_4 = calculate_double_precision_080082d4((int)result_4,(int)((ulonglong)result_4 >> 0x20),0x54442d18,0x401921fb);\n      local_var_15 = calculate_float_08008c30((int)result_4,(int)((ulonglong)result_4 >> 0x20));\n    }\n  }\n  else {\n    status = check_concatenation_result_08009250(local_var_15,0);\n    if (status != 0) {\n      result_4 = reverse_bits_08008590(local_var_15);\n      result_4 = reverse_bits_080082d0((int)result_4,(int)((ulonglong)result_4 >> 0x20),0x54442d18,0x401921fb);\n      local_var_15 = calculate_float_08008c30((int)result_4,(int)((ulonglong)result_4 >> 0x20));\n    }\n  }\n  result_1 = calculate_floating_point_08008eec(local_var_15,value_2);\n  result_4 = reverse_bits_08008590(result_1);\n  result_5 = reverse_bits_08008590(local_var_10 & 0x7fffffff);\n  result_4 = initialize_system_0800981c((int)result_4,(int)((ulonglong)result_4 >> 0x20),(int)result_5,\n                       (int)((ulonglong)result_5 >> 0x20));\n  local_var_7 = calculate_float_08008c30((int)result_4,(int)((ulonglong)result_4 >> 0x20));\n  status = check_concatenated_parameters_08009214(local_var_7,0);\n  if (status == 0) {\n    result_1 = calculate_floating_point_08009054(local_var_7,DAT_20000ed8);\n    result_4 = reverse_bits_08008590(result_1);\n    result_4 = calculate_result_080094c0((int)result_4,(int)((ulonglong)result_4 >> 0x20));\n    count = convert_to_unsigned_08008bf0((int)result_4,(int)((ulonglong)result_4 >> 0x20));\n    if (flag_1 != '\\0') {\n      result_1 = calculate_reverse_value_08008e44(count);\n      value_1 = calculate_floating_point_08008eec(value_1,result_1);\n    }\n    result_1 = calculate_reverse_value_08008e44(count);\n    local_var_6 = calculate_floating_point_08009054(local_var_15,result_1);\n    result_1 = calculate_reverse_value_08008e44(count);\n    local_var_5 = calculate_floating_point_08009054(local_var_10,result_1);\n    result_4 = reverse_bits_08008590(local_var_6);\n    result_4 = calculate_xored_bits_08008640((int)result_4,(int)((ulonglong)result_4 >> 0x20),0,0x3fe00000);\n    result_5 = reverse_bits_08008590(local_var_6);\n    result_4 = calculate_xored_bits_08008640((int)result_4,(int)((ulonglong)result_4 >> 0x20),(int)result_5,\n                         (int)((ulonglong)result_5 >> 0x20));\n    result_4 = reverse_bits_080082d0(0,0x3ff00000,(int)result_4,(int)((ulonglong)result_4 >> 0x20));\n    local_var_4 = calculate_float_08008c30((int)result_4,(int)((ulonglong)result_4 >> 0x20));\n    local_var_3 = local_var_6;\n    local_var_13 = '\\0';\n    temp_array[index_3] = *(uint *)(data_ptr_1 + (uint)index_3 * 4);\n    for (local_var_14 = 1; local_var_14 < count; local_var_14 = local_var_14 + 1) {\n      if ((int)local_var_13 < (int)(uint)DAT_20000efa) {\n        result_1 = calculate_floating_point_08008eec(local_var_17,local_var_3);\n        result_2 = calculate_floating_point_08008eec(local_var_16,local_var_4);\n        temp_array[3] = calculate_float_08008cdc(result_1,result_2);\n        result_1 = calculate_floating_point_08008eec(local_var_17,local_var_4);\n        result_2 = calculate_floating_point_08008eec(local_var_16,local_var_3);\n        local_var_17 = perform_arithmetic_operation_08008cd8(result_1,result_2);\n        local_var_16 = temp_array[3];\n        local_var_13 = local_var_13 + '\\x01';\n      }\n      else {\n        result_1 = calculate_reverse_value_08008e44(local_var_14);\n        result_1 = calculate_floating_point_08008eec(result_1,local_var_6);\n        result_4 = reverse_bits_08008590(result_1);\n        result_4 = calculate_result_08009410((int)result_4,(int)((ulonglong)result_4 >> 0x20));\n        local_var_2 = calculate_float_08008c30((int)result_4,(int)((ulonglong)result_4 >> 0x20));\n        result_1 = calculate_reverse_value_08008e44(local_var_14);\n        result_1 = calculate_floating_point_08008eec(result_1,local_var_6);\n        result_4 = reverse_bits_08008590(result_1);\n        result_4 = calculate_result_080096e8((int)result_4,(int)((ulonglong)result_4 >> 0x20));\n        local_var_1 = calculate_float_08008c30((int)result_4,(int)((ulonglong)result_4 >> 0x20));\n        result_1 = calculate_floating_point_08008eec(*(uint *)((uint)index_1 * 4 + data_ptr_3) ^ 0x80000000,local_var_2);\n        result_2 = calculate_floating_point_08008eec(*(undefined4 *)((uint)index_2 * 4 + data_ptr_3),local_var_1);\n        local_var_17 = calculate_float_08008cdc(result_1,result_2);\n        result_1 = calculate_floating_point_08008eec(*(uint *)((uint)index_1 * 4 + data_ptr_3) ^ 0x80000000,local_var_1);\n        result_2 = calculate_floating_point_08008eec(*(undefined4 *)((uint)index_2 * 4 + data_ptr_3),local_var_2);\n        local_var_16 = perform_arithmetic_operation_08008cd8(result_1,result_2);\n        local_var_13 = '\\0';\n      }\n      result_3 = calculate_float_08008cdc(local_var_12,local_var_17);\n      temp_array[index_1] = result_3;\n      result_3 = calculate_float_08008cdc(local_var_11,local_var_16);\n      temp_array[index_2] = result_3;\n      result_3 = calculate_float_08008cdc(temp_array[index_3],local_var_5);\n      temp_array[index_3] = result_3;\n      process_alarm_interrupts_08001f00_08001e98(temp_array[0],temp_array[1],temp_array[2],value_1,flag_1);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    process_alarm_interrupts_08001f00_08001e98(*data_ptr_2,data_ptr_2[1],data_ptr_2[2],value_1,flag_1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "process_alarm_interrupts_08001f00",
                "param_1": "data_ptr_1",
                "param_2": "data_ptr_2",
                "param_3": "data_ptr_3",
                "param_4": "index_1",
                "param_5": "index_2",
                "param_6": "index_3",
                "param_7": "value_1",
                "param_8": "flag_1",
                "param_9": "value_2",
                "param_10": "flag_2",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "iVar3": "status",
                "uVar4": "result_3",
                "uVar5": "result_4",
                "uVar6": "result_5",
                "local_6c": "temp_array",
                "local_5c": "local_var_1",
                "local_58": "local_var_2",
                "local_54": "local_var_3",
                "local_50": "local_var_4",
                "local_4c": "local_var_5",
                "local_48": "local_var_6",
                "local_42": "count",
                "local_40": "local_var_7",
                "local_3c": "local_var_8",
                "local_38": "local_var_9",
                "local_34": "local_var_10",
                "local_30": "local_var_11",
                "local_2c": "local_var_12",
                "local_27": "local_var_13",
                "local_26": "local_var_14",
                "local_24": "local_var_15",
                "local_20": "local_var_16",
                "local_1c": "local_var_17"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_080096e8",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08001e98",
                "FUN_08008eec",
                "thunk_FUN_08009990",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08009410",
                "FUN_08008c30",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_0800923c",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "process_data_08002408",
            "code": "\nvoid process_data_08002408(undefined4 input_value)\n\n{\n  undefined2 converted_result;\n  undefined4 floating_point_value1;\n  undefined4 reverse_value;\n  undefined8 floating_point_value2;\n  ushort iteration_count;\n  \n  floating_point_value1 = calculate_floating_point_08008eec(input_value,0x41a00000);\n  floating_point_value2 = reverse_bits_08008590(floating_point_value1);\n  floating_point_value2 = calculate_result_080094c0((int)floating_point_value2,(int)((ulonglong)floating_point_value2 >> 0x20));\n  iteration_count = convert_to_unsigned_08008bf0((int)floating_point_value2,(int)((ulonglong)floating_point_value2 >> 0x20));\n  process_alarm_interrupts_08002fd4();\n  floating_point_value1 = calculate_floating_point_08008eec(input_value,0x447a0000);\n  reverse_value = calculate_reverse_value_08008e44((uint)iteration_count * 0x32);\n  floating_point_value1 = perform_arithmetic_operation_08008cd8(floating_point_value1,reverse_value);\n  floating_point_value2 = reverse_bits_08008590(floating_point_value1);\n  floating_point_value2 = calculate_result_080094c0((int)floating_point_value2,(int)((ulonglong)floating_point_value2 >> 0x20));\n  converted_result = convert_to_unsigned_08008bf0((int)floating_point_value2,(int)((ulonglong)floating_point_value2 >> 0x20));\n  FUNC_08002814(converted_result);\n  while ((iteration_count != 0 && (process_alarm_interrupt_08003a74(), DAT_20000ea8 == '\\0'))) {\n    validate_parameter_080002a0(0x32);\n    iteration_count = iteration_count - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "process_data_08002408",
                "param_1": "input_value",
                "uVar1": "converted_result",
                "uVar2": "floating_point_value1",
                "uVar3": "reverse_value",
                "uVar4": "floating_point_value2",
                "local_12": "iteration_count"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_080002a0",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_system_080024c4",
            "code": "\nvoid initializeSystem_080024c4(void)\n\n{\n  undefined4 reverseValue1;\n  undefined4 reverseValue2;\n  undefined4 reverseValue3;\n  char floatingPointValue1;\n  char floatingPointValue2;\n  char floatingPointValue3;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  initialize_and_process_data_08001d4c();\n  process_alarm_interrupt_08003a74();\n  if (DAT_20000ea8 == '\\0') {\n    fill_memory_0800b430(&DAT_20000eac,0,0xc);\n    initialize_and_calculate_floating_point_values_0800283a();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      floatingPointValue3 = -1;\n    }\n    else {\n      floatingPointValue3 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      floatingPointValue2 = -1;\n    }\n    else {\n      floatingPointValue2 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      floatingPointValue1 = -1;\n    }\n    else {\n      floatingPointValue1 = '\\x01';\n    }\n    reverseValue1 = calculate_reverse_value_08008e44((int)floatingPointValue3);\n    reverseValue1 = calculate_floating_point_08008eec(reverseValue1,DAT_20000ef4);\n    reverseValue2 = calculate_reverse_value_08008e44((int)floatingPointValue2);\n    reverseValue2 = calculate_floating_point_08008eec(reverseValue2,DAT_20000ef4);\n    reverseValue3 = calculate_reverse_value_08008e44((int)floatingPointValue1);\n    reverseValue3 = calculate_floating_point_08008eec(reverseValue3,DAT_20000ef4);\n    process_alarm_interrupts_08001e98(reverseValue1,reverseValue2,reverseValue3,DAT_20000eec,0);\n    initialize_data_and_update_flags_0800585c();\n    process_alarm_interrupts_08002fd4();\n    initialize_and_calculate_floating_point_values_0800283a();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_system_080024c4",
                "local_13": "floatingPointValue1",
                "local_12": "floatingPointValue2",
                "local_11": "floatingPointValue3",
                "uVar1": "reverseValue1",
                "uVar2": "reverseValue2",
                "uVar3": "reverseValue3"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08001e98",
                "FUN_08008eec",
                "FUN_0800585c",
                "FUN_08008e44",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "initialize_system_080025e8",
            "code": "\nvoid initializeSystem_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    executeInitialization();\n    initializeData();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      initializeFlags();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "initialize_system_080025e8",
                "execute_initialization_08005250": "executeInitialization",
                "initialize_08000210": "initializeData",
                "initialize_flags_080057e4": "initializeFlags"
            },
            "calling": [
                "FUN_08003a18",
                "FUN_08003b98",
                "FUN_08005900",
                "FUN_080005b4",
                "FUN_0800195c"
            ],
            "called": [
                "FUN_080057e4",
                "FUN_08005250",
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_integer_08002638",
            "code": "\nundefined4 parseInteger_08002638(int base_address,byte *input_string,uint *result)\n\n{\n  byte digit;\n  bool is_negative;\n  bool is_hex;\n  int concatenation_result;\n  char *current_char;\n  char *next_char;\n  undefined4 return_value;\n  undefined8 calculation_result;\n  uint shifted_value;\n  byte digit_count;\n  char exponent;\n  int parsed_integer;\n  char current_digit;\n  char *remaining_chars;\n  \n  next_char = (char *)(base_address + (uint)*input_string);\n  current_char = next_char + 1;\n  current_digit = *next_char;\n  is_negative = false;\n  if (current_digit == '-') {\n    is_negative = true;\n    current_digit = *current_char;\n    remaining_chars = next_char + 2;\n  }\n  else {\n    remaining_chars = current_char;\n    if (current_digit == '+') {\n      remaining_chars = next_char + 2;\n      current_digit = *current_char;\n    }\n  }\n  parsed_integer = 0;\n  exponent = '\\0';\n  digit_count = 0;\n  is_hex = false;\n  do {\n    digit = current_digit - 0x30;\n    if (digit < 10) {\n      digit_count = digit_count + 1;\n      if (digit_count < 9) {\n        if (is_hex) {\n          exponent = exponent + -1;\n        }\n        parsed_integer = (uint)digit + parsed_integer * 10;\n      }\n      else if (!is_hex) {\n        exponent = exponent + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (is_hex)) {\n        if (digit_count == 0) {\n          return_value = 0;\n        }\n        else {\n          shifted_value = calculate_shifted_value_08008e3c(parsed_integer);\n          concatenation_result = check_concatenated_parameters_08009214(shifted_value,0);\n          if (concatenation_result == 0) {\n            for (; exponent < -1; exponent = exponent + '\\x02') {\n              calculation_result = reverse_bits_08008590(shifted_value);\n              calculation_result = calculate_xored_bits_08008640((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0x47ae147b,0x3f847ae1)\n              ;\n              shifted_value = calculate_float_08008c30((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20));\n            }\n            if (exponent < '\\0') {\n              calculation_result = reverse_bits_08008590(shifted_value);\n              calculation_result = calculate_xored_bits_08008640((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0x9999999a,0x3fb99999)\n              ;\n              shifted_value = calculate_float_08008c30((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20));\n            }\n            else {\n              for (; '\\0' < exponent; exponent = exponent + -1) {\n                shifted_value = calculate_floating_point_08008eec(shifted_value,0x41200000);\n              }\n            }\n          }\n          if (is_negative) {\n            *result = shifted_value ^ 0x80000000;\n          }\n          else {\n            *result = shifted_value;\n          }\n          *input_string = ((char)remaining_chars - (char)base_address) - 1;\n          return_value = 1;\n        }\n        return return_value;\n      }\n      is_hex = true;\n    }\n    current_digit = *remaining_chars;\n    remaining_chars = remaining_chars + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_integer_08002638",
                "param_1": "base_address",
                "param_2": "input_string",
                "param_3": "result",
                "bVar1": "digit",
                "bVar2": "is_negative",
                "bVar3": "is_hex",
                "iVar4": "concatenation_result",
                "pcVar5": "current_char",
                "pcVar6": "next_char",
                "uVar7": "return_value",
                "uVar8": "calculation_result",
                "local_1c": "shifted_value",
                "local_16": "digit_count",
                "local_15": "exponent",
                "local_14": "parsed_integer",
                "local_d": "current_digit",
                "local_c": "remaining_chars"
            },
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_08009214",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "FUNC_08002814",
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "calling": [
                "FUN_08002408",
                "FUN_08001d4c",
                "FUN_08004148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "FUNC_08002828",
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "initialize_and_calculate_floating_point_values_0800283a",
            "code": "\nvoid initialize_and_calculate_floating_point_values_0800283a(void)\n\n{\n  initialize_parameters_080035ec(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  calculate_and_store_floating_point_values_080004fc(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "initialize_and_calculate_floating_point_values_0800283a"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_080035ec",
                "FUN_080004fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_and_limit_08002870",
            "code": "\nchar incrementAndLimit_08002870(char input)\n\n{\n  char result;\n  \n  result = input + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_and_limit_08002870",
                "param_1": "input",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002ba8",
                "FUN_08003004",
                "FUN_08002f40",
                "FUN_08002e08",
                "FUN_08002ef0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "increment_and_default_to18_08002896",
            "code": "\nchar incrementAndDefaultTo18_08002896(char input)\n\n{\n  char result;\n  \n  result = input;\n  if (input == '\\0') {\n    result = '\\x12';\n  }\n  return result + -1;\n}\n\n",
            "renaming": {
                "FUN_08002896": "increment_and_default_to18_08002896",
                "param_1": "input",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "perform_calculation_080028bc",
            "code": "\nundefined4 perform_calculation_080028bc(undefined4 input_value_1,undefined4 input_value_2,undefined4 input_value_3)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = calculate_floating_point_08008eec(input_value_2,input_value_2);\n  result_2 = calculate_floating_point_08008eec(input_value_1,input_value_1);\n  result_1 = perform_arithmetic_operation_08008cd8(result_1,result_2);\n  result_2 = calculate_float_08008cdc(input_value_3,input_value_3);\n  result_1 = calculate_floating_point_08009054(result_1,result_2);\n  return result_1;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "perform_calculation_080028bc",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "input_value_3",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_result_08002908",
            "code": "\nundefined4 calculateResult_08002908(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  \n  result1 = calculate_float_08008cdc(input3,input3);\n  result1 = calculate_floating_point_08008eec(result1,input4);\n  result2 = calculate_floating_point_08008eec(input1,input1);\n  result1 = perform_arithmetic_operation_08008cd8(result1,result2);\n  result2 = calculate_floating_point_08008eec(input2,input2);\n  result1 = calculate_float_08008cdc(result1,result2);\n  result2 = calculate_floating_point_08008eec(input3,0x40800000);\n  result1 = calculate_floating_point_08009054(result1,result2);\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "calculate_result_08002978",
            "code": "\nundefined4 calculate_result_08002978(undefined4 input_value1,undefined4 input_value2,undefined4 input_value3)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined8 reversed_result;\n  \n  result1 = calculate_floating_point_08008eec(input_value2,input_value2);\n  result2 = calculate_float_08008cdc(input_value1,input_value1);\n  result2 = calculate_floating_point_08008eec(result2,input_value3);\n  result1 = perform_arithmetic_operation_08008cd8(result1,result2);\n  reversed_result = reverse_bits_08008590(result1);\n  reversed_result = initialize_and_calculate_result_08002978_080098d0((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20));\n  result1 = calculate_float_08008c30((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20));\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_08002978": "calculate_result_08002978",
                "param_1": "input_value1",
                "param_2": "input_value2",
                "param_3": "input_value3",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "reversed_result"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_08002afc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_080098d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "update_concatenated_parameters_080029d8",
            "code": "\nvoid updateConcatenatedParameters_080029d8(undefined4 param1,int concatParam1,int concatParam2)\n\n{\n  int result;\n  undefined4 calculatedResult1;\n  undefined4 calculatedResult2;\n  \n  if (((concatParam1 != 0) && (concatParam2 != 0)) &&\n     (result = check_concatenated_parameters_08009214(*(undefined4 *)(concatParam1 + 0x18),*(undefined4 *)(concatParam1 + 0x1c)),\n     result == 0)) {\n    if ((*(char *)(concatParam1 + 0x25) == '\\0') &&\n       (result = check_if_concatenated_parameters_are_empty_08009264(*(undefined4 *)(concatParam1 + 0x1c),*(undefined4 *)(concatParam2 + 0x18)),\n       result != 0)) {\n      calculatedResult2 = *(undefined4 *)(concatParam1 + 0x1c);\n      calculatedResult1 = calculate_result_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(concatParam2 + 0x18),\n                           *(undefined4 *)(concatParam1 + 0x20));\n      result = check_if_string_is_empty_08009228(calculatedResult2,calculatedResult1);\n      if (result == 0) {\n        calculatedResult1 = calculate_result_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(concatParam2 + 0x18),\n                             *(undefined4 *)(concatParam1 + 0x20));\n      }\n      else {\n        calculatedResult1 = *(undefined4 *)(concatParam1 + 0x1c);\n      }\n      *(undefined4 *)(concatParam1 + 0x18) = calculatedResult1;\n    }\n    else {\n      *(undefined4 *)(concatParam1 + 0x18) = *(undefined4 *)(concatParam1 + 0x1c);\n    }\n    *(undefined *)(concatParam1 + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "update_concatenated_parameters_080029d8",
                "param_1": "param1",
                "param_2": "concatParam1",
                "param_3": "concatParam2",
                "iVar1": "result",
                "uVar2": "calculatedResult1",
                "uVar3": "calculatedResult2"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08009264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "concatenate_and_update_08002a94",
            "code": "\nvoid concatenateAndUpdate_08002a94(void)\n\n{\n  undefined *tempPtr;\n  undefined *previousData;\n  undefined *tempData;\n  byte currentValue;\n  \n  currentValue = DAT_20000cf0;\n  previousData = (undefined *)0x0;\n  tempData = (undefined *)0x0;\n  while (tempPtr = tempData, currentValue != DAT_20000cf1) {\n    currentValue = increment_and_default_to18_08002896(currentValue);\n    tempData = previousData;\n    update_concatenated_parameters_080029d8(&DAT_20000870 + (uint)currentValue * 0x40,previousData,tempPtr);\n    previousData = &DAT_20000870 + (uint)currentValue * 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "concatenate_and_update_08002a94",
                "local_9": "currentValue",
                "local_18": "previousData",
                "local_14": "tempData",
                "puVar1": "tempPtr"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_080029d8",
                "FUN_08002896"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "check_and_update_parameters_08002afc",
            "code": "\nvoid check_and_update_parameters_08002afc(int param_source,int param_destination)\n\n{\n  int is_empty;\n  undefined4 calculated_result;\n  undefined4 original_result;\n  \n  if (((param_source != 0) && (*(char *)(param_source + 0x25) == '\\0')) &&\n     (is_empty = check_if_string_is_empty_08009228(*(undefined4 *)(param_source + 0x18),*(undefined4 *)(param_destination + 0x18)),\n     is_empty != 0)) {\n    original_result = *(undefined4 *)(param_destination + 0x18);\n    calculated_result = calculate_result_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(param_source + 0x18),\n                         *(undefined4 *)(param_source + 0x20));\n    is_empty = check_if_string_is_empty_08009228(original_result,calculated_result);\n    if (is_empty == 0) {\n      calculated_result = calculate_result_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(param_source + 0x18),\n                           *(undefined4 *)(param_source + 0x20));\n    }\n    else {\n      calculated_result = *(undefined4 *)(param_destination + 0x18);\n    }\n    is_empty = check_concatenated_parameters_08009214(calculated_result,*(undefined4 *)(param_destination + 0x18));\n    if (is_empty == 0) {\n      *(undefined4 *)(param_destination + 0x18) = calculated_result;\n      *(undefined *)(param_destination + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "check_and_update_parameters_08002afc",
                "param_1": "param_source",
                "param_2": "param_destination",
                "iVar1": "is_empty",
                "uVar2": "calculated_result",
                "uVar3": "original_result"
            },
            "calling": [
                "FUN_08002ba8"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "update_parameters_08002ba8",
            "code": "\nvoid updateParameters_08002ba8(void)\n\n{\n  uint intValue;\n  undefined *previousPtr;\n  undefined *tempPtr;\n  undefined *previousParams;\n  undefined *currentParams;\n  byte byteValue;\n  \n  previousParams = (undefined *)0x0;\n  currentParams = (undefined *)0x0;\n  byteValue = DAT_20000cf1;\n  tempPtr = (undefined *)0x0;\n  while (previousPtr = previousParams, byteValue != DAT_20000cf0) {\n    previousParams = currentParams;\n    intValue = (uint)byteValue;\n    check_and_update_parameters_08002afc(previousPtr,currentParams,&DAT_20000870 + intValue * 0x40);\n    byteValue = increment_and_limit_08002870(byteValue);\n    tempPtr = previousPtr;\n    currentParams = &DAT_20000870 + intValue * 0x40;\n  }\n  check_and_update_parameters_08002afc(previousParams,currentParams,0,previousParams,tempPtr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "update_parameters_08002ba8",
                "local_14": "previousParams",
                "local_10": "currentParams",
                "local_9": "byteValue",
                "puVar2": "previousPtr",
                "puVar3": "tempPtr",
                "uVar1": "intValue"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002afc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "calculate_shifted_values_and_result_08002c18",
            "code": "\nvoid calculateShiftedValuesAndResult_08002c18(int data,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 shiftedValue1;\n  int modifiedValue;\n  undefined4 shiftedValue2;\n  undefined4 reverseValue;\n  undefined4 reverseValue2;\n  uint filteredValue;\n  undefined8 result;\n  int difference;\n  uint minimumValue;\n  \n  shiftedValue1 = calculate_shifted_value_08008e3c(*(undefined4 *)(data + 0x3c));\n  shiftedValue1 = calculate_floating_point_08008eec(shiftedValue1,value1);\n  result = reverse_bits_08008590(shiftedValue1);\n  result = calculate_modified_value_08009318((int)result,(int)((ulonglong)result >> 0x20));\n  shiftedValue1 = convert_to_unsigned_08008bf0((int)result,(int)((ulonglong)result >> 0x20));\n  *(undefined4 *)(data + 0x28) = shiftedValue1;\n  shiftedValue1 = calculate_shifted_value_08008e3c(*(undefined4 *)(data + 0x3c));\n  shiftedValue1 = calculate_floating_point_08008eec(shiftedValue1,value2);\n  result = reverse_bits_08008590(shiftedValue1);\n  result = calculate_modified_value_08009318((int)result,(int)((ulonglong)result >> 0x20));\n  shiftedValue1 = convert_to_unsigned_08008bf0((int)result,(int)((ulonglong)result >> 0x20));\n  *(undefined4 *)(data + 0x2c) = shiftedValue1;\n  result = bitwise_rotate_left_0800856c(*(int *)(data + 0x30) * 0x32);\n  result = calculate_xored_bits_08008640((int)result,(int)((ulonglong)result >> 0x20),0,0x404e0000);\n  modifiedValue = calculate_value_08008ba0((int)result,(int)((ulonglong)result >> 0x20));\n  shiftedValue1 = calculate_shifted_value_08008e3c(*(undefined4 *)(data + 0x28));\n  shiftedValue2 = calculate_shifted_value_08008e3c(*(undefined4 *)(data + 0x3c));\n  reverseValue = calculate_reverse_value_08008e44(modifiedValue);\n  shiftedValue1 = perform_calculation_080028bc(shiftedValue1,shiftedValue2,reverseValue);\n  result = reverse_bits_08008590(shiftedValue1);\n  result = calculate_modified_value_08009318((int)result,(int)((ulonglong)result >> 0x20));\n  minimumValue = calculate_value_08008ba0((int)result,(int)((ulonglong)result >> 0x20));\n  shiftedValue1 = calculate_shifted_value_08008e3c(*(undefined4 *)(data + 0x3c));\n  shiftedValue2 = calculate_shifted_value_08008e3c(*(undefined4 *)(data + 0x2c));\n  reverseValue = calculate_reverse_value_08008e44(-modifiedValue);\n  shiftedValue1 = perform_calculation_080028bc(shiftedValue1,shiftedValue2,reverseValue);\n  result = reverse_bits_08008590(shiftedValue1);\n  result = calculate_result_080094c0((int)result,(int)((ulonglong)result >> 0x20));\n  difference = calculate_value_08008ba0((int)result,(int)((ulonglong)result >> 0x20));\n  difference = (*(int *)(data + 0x10) - minimumValue) - difference;\n  if (difference < 0) {\n    shiftedValue1 = calculate_shifted_value_08008e3c(*(undefined4 *)(data + 0x28));\n    shiftedValue2 = calculate_shifted_value_08008e3c(*(undefined4 *)(data + 0x2c));\n    reverseValue = calculate_reverse_value_08008e44(modifiedValue);\n    reverseValue2 = calculate_reverse_value_08008e44(*(undefined4 *)(data + 0x10));\n    shiftedValue1 = calculate_result_08002908(shiftedValue1,shiftedValue2,reverseValue,reverseValue2);\n    result = reverse_bits_08008590(shiftedValue1);\n    result = calculate_modified_value_08009318((int)result,(int)((ulonglong)result >> 0x20));\n    filteredValue = calculate_value_08008ba0((int)result,(int)((ulonglong)result >> 0x20));\n    filteredValue = filteredValue & ~((int)filteredValue >> 0x1f);\n    minimumValue = *(uint *)(data + 0x10);\n    if ((int)filteredValue <= (int)*(uint *)(data + 0x10)) {\n      minimumValue = filteredValue;\n    }\n    difference = 0;\n  }\n  *(uint *)(data + 0x34) = minimumValue;\n  *(uint *)(data + 0x38) = difference + minimumValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "calculate_shifted_values_and_result_08002c18",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "shiftedValue1",
                "iVar2": "modifiedValue",
                "uVar3": "shiftedValue2",
                "uVar4": "reverseValue",
                "uVar5": "reverseValue2",
                "uVar6": "filteredValue",
                "uVar7": "result",
                "local_20": "difference",
                "local_1c": "minimumValue"
            },
            "calling": [
                "FUN_08002e08"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_0800856c",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_080028bc",
                "FUN_08008ba0",
                "FUN_08002908",
                "FUN_08009318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "calculate_shifted_values_08002e08",
            "code": "\nvoid calculate_shifted_values_08002e08(void)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int index;\n  undefined *ptr_data;\n  byte byte_value;\n  \n  ptr_data = (undefined *)0x0;\n  byte_value = DAT_20000cf1;\n  while (byte_value != DAT_20000cf0) {\n    index = (uint)byte_value * 0x40;\n    if ((ptr_data != (undefined *)0x0) &&\n       ((ptr_data[0x24] != '\\0' || ((&DAT_20000894)[index] != '\\0')))) {\n      result1 = calculate_floating_point_08009054(*(undefined4 *)(ptr_data + 0x18),*(undefined4 *)(ptr_data + 0x14));\n      result2 = calculate_floating_point_08009054(*(undefined4 *)(&DAT_20000888 + index),*(undefined4 *)(ptr_data + 0x14));\n      calculate_shifted_values_08002e08_and_result_08002c18(ptr_data,result1,result2);\n      ptr_data[0x24] = 0;\n    }\n    byte_value = increment_and_limit_08002870(byte_value);\n    ptr_data = &DAT_20000870 + index;\n  }\n  result1 = calculate_floating_point_08009054(*(undefined4 *)(ptr_data + 0x18),*(undefined4 *)(ptr_data + 0x14));\n  result2 = calculate_floating_point_08009054(0,*(undefined4 *)(ptr_data + 0x14));\n  calculate_shifted_values_08002e08_and_result_08002c18(ptr_data,result1,result2);\n  ptr_data[0x24] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "calculate_shifted_values_08002e08",
                "local_18": "ptr_data",
                "local_11": "byte_value",
                "iVar3": "index",
                "uVar1": "result1",
                "uVar2": "result2"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002c18",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "update_and_calculate_values_08002edc",
            "code": "\nvoid update_and_calculate_values_08002edc(void)\n\n{\n  concatenate_and_update();\n  update_parameters();\n  calculate_shifted_values();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "update_and_calculate_values_08002edc",
                "concatenate_and_update_08002a94": "concatenate_and_update",
                "update_parameters_08002ba8": "update_parameters",
                "calculate_shifted_values_08002e08": "calculate_shifted_values"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "called": [
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08002a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "update_data_and_limit_08002ef0",
            "code": "\nvoid update_data_and_limit_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = increment_and_limit_08002870(DAT_20000cf0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "update_data_and_limit_08002ef0"
            },
            "calling": [
                "FUN_08002f24"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_memory_08002f24",
            "code": "\nvoid initializeMemory_08002f24(void)\n\n{\n  updateDataAndLimit();\n  fillMemory(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_memory_08002f24",
                "update_data_and_limit_08002ef0": "updateDataAndLimit",
                "fill_memory_0800b430": "fillMemory"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "update_data_if_not_equal_08002f40",
            "code": "\nvoid update_data_if_not_equal_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = increment_and_limit_08002870(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "update_data_if_not_equal_08002f40"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_memory_location_08002f74",
            "code": "\nundefined * getMemoryLocation_08002f74(void)\n\n{\n  undefined *memoryLocation;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    memoryLocation = (undefined *)0x0;\n  }\n  else {\n    memoryLocation = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return memoryLocation;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_memory_location_08002f74",
                "puVar1": "memoryLocation"
            },
            "calling": [
                "FUN_08002fd4",
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "are_data_equal_08002fac",
            "code": "\nbool areDataEqual_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "are_data_equal_08002fac"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "process_alarm_interrupts_08002fd4",
            "code": "\nvoid process_alarm_interrupts_08002fd4(void)\n\n{\n  int memory_location;\n  \n  while ((memory_location = get_memory_location(), memory_location != 0 || (DAT_20000ea9 == '\\x03'))) {\n    process_alarm_interrupt();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "process_alarm_interrupts_08002fd4",
                "iVar1": "memory_location",
                "get_memory_location_08002f74": "get_memory_location",
                "process_alarm_interrupt_08003a74": "process_alarm_interrupt"
            },
            "calling": [
                "FUN_08002408",
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08000220"
            ],
            "called": [
                "FUN_08002f74",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "calculate_result_08003004",
            "code": "\nvoid calculateResult_08003004(undefined4 value1,undefined4 value2,undefined4 value3,undefined4 value4,\n                 char flag)\n\n{\n  undefined4 result1;\n  int modifiedValue1;\n  int modifiedValue2;\n  int modifiedValue3;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  uint maxValue;\n  int offset;\n  ushort *pointer;\n  int absoluteDifference;\n  uint maxDifference;\n  undefined8 reversedValue;\n  undefined8 calculation1;\n  undefined8 calculation2;\n  undefined4 valueA;\n  undefined4 valueB;\n  \n  offset = (uint)DAT_20000cf0 * 0x40;\n  pointer = (ushort *)(&DAT_20000870 + offset);\n  result1 = calculate_floating_point_08008eec(DAT_20000ebc,value1);\n  reversedValue = reverse_bits_08008590(result1);\n  modifiedValue1 = calculate_modified_value_080095b8((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n  result1 = calculate_floating_point_08008eec(DAT_20000ec0,value2);\n  reversedValue = reverse_bits_08008590(result1);\n  modifiedValue2 = calculate_modified_value_080095b8((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n  result1 = calculate_floating_point_08008eec(DAT_20000ec4,value3);\n  reversedValue = reverse_bits_08008590(result1);\n  modifiedValue3 = calculate_modified_value_080095b8((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n  *pointer = 0;\n  if (modifiedValue1 < DAT_20000cf4) {\n    *pointer = *pointer | 0x20;\n  }\n  if (modifiedValue2 < DAT_20000cf8) {\n    *pointer = *pointer | 0x880;\n  }\n  if (modifiedValue3 < DAT_20000cfc) {\n    *pointer = *pointer | 0x200;\n  }\n  absoluteDifference = modifiedValue1 - DAT_20000cf4;\n  if (absoluteDifference < 0) {\n    absoluteDifference = -absoluteDifference;\n  }\n  *(int *)(&DAT_20000874 + offset) = absoluteDifference;\n  absoluteDifference = modifiedValue2 - DAT_20000cf8;\n  if (absoluteDifference < 0) {\n    absoluteDifference = -absoluteDifference;\n  }\n  *(int *)(&DAT_20000878 + offset) = absoluteDifference;\n  absoluteDifference = modifiedValue3 - DAT_20000cfc;\n  if (absoluteDifference < 0) {\n    absoluteDifference = -absoluteDifference;\n  }\n  *(int *)(&DAT_2000087c + offset) = absoluteDifference;\n  maxValue = *(uint *)(&DAT_2000087c + offset);\n  if (*(uint *)(&DAT_2000087c + offset) < *(uint *)(&DAT_20000878 + offset)) {\n    maxValue = *(uint *)(&DAT_20000878 + offset);\n  }\n  maxDifference = *(uint *)(&DAT_20000874 + offset);\n  if (*(uint *)(&DAT_20000874 + offset) < maxValue) {\n    maxDifference = maxValue;\n  }\n  *(uint *)(&DAT_20000880 + offset) = maxDifference;\n  if (*(int *)(&DAT_20000880 + offset) != 0) {\n    result1 = calculate_reverse_value_08008e44(modifiedValue1 - DAT_20000cf4);\n    result1 = calculate_floating_point_08009054(result1,DAT_20000ebc);\n    result2 = calculate_reverse_value_08008e44(modifiedValue2 - DAT_20000cf8);\n    result2 = calculate_floating_point_08009054(result2,DAT_20000ec0);\n    result3 = calculate_reverse_value_08008e44(modifiedValue3 - DAT_20000cfc);\n    result3 = calculate_floating_point_08009054(result3,DAT_20000ec4);\n    result4 = calculate_floating_point_08008eec(result1,result1);\n    result5 = calculate_floating_point_08008eec(result2,result2);\n    result4 = calculate_float_08008cdc(result4,result5);\n    result5 = calculate_floating_point_08008eec(result3,result3);\n    result4 = calculate_float_08008cdc(result4,result5);\n    reversedValue = reverse_bits_08008590(result4);\n    reversedValue = initialize_and_calculate_result_080098d0((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n    result4 = calculate_float_08008c30((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + offset) = result4;\n    result4 = calculate_floating_point_08009054(0x3f800000,*(undefined4 *)(&DAT_20000890 + offset));\n    if (flag == '\\0') {\n      valueB = calculate_floating_point_08008eec(value4,result4);\n    }\n    else {\n      valueB = calculate_floating_point_08009054(0x3f800000,value4);\n    }\n    result5 = calculate_floating_point_08008eec(*(undefined4 *)(&DAT_20000890 + offset),valueB);\n    *(undefined4 *)(&DAT_20000884 + offset) = result5;\n    result5 = calculate_reverse_value_08008e44(*(undefined4 *)(&DAT_20000880 + offset));\n    result5 = calculate_floating_point_08008eec(result5,valueB);\n    reversedValue = reverse_bits_08008590(result5);\n    reversedValue = calculate_modified_value_08009318((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n    result5 = convert_to_unsigned_08008bf0((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + offset) = result5;\n    result5 = calculate_reverse_value_08008e44(*(undefined4 *)(&DAT_20000880 + offset));\n    result5 = calculate_floating_point_08008eec(result5,result4);\n    result5 = calculate_floating_point_08008eec(result5,DAT_20000edc);\n    result5 = calculate_floating_point_08009054(result5,0x453b8000);\n    reversedValue = reverse_bits_08008590(result5);\n    reversedValue = calculate_modified_value_08009318((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n    result5 = calculate_value_08008ba0((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + offset) = result5;\n    maxValue = calculate_floating_point_08008eec(result1,result4);\n    result1 = calculate_floating_point_08008eec(result2,result4);\n    result2 = calculate_floating_point_08008eec(result3,result4);\n    valueA = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (absoluteDifference = check_if_concatenated_parameters_are_empty_08009264(DAT_20000d0c,0), absoluteDifference != 0)) {\n      result3 = calculate_floating_point_08008eec(DAT_20000d00 ^ 0x80000000,maxValue);\n      result4 = calculate_floating_point_08008eec(DAT_20000d04,result1);\n      result3 = perform_arithmetic_operation_08008cd8(result3,result4);\n      result4 = calculate_floating_point_08008eec(DAT_20000d08,result2);\n      result3 = perform_arithmetic_operation_08008cd8(result3,result4);\n      reversedValue = reverse_bits_08008590(result3);\n      absoluteDifference = is_input_null_08008b24((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20),0x66666666,0x3fee6666);\n      if (absoluteDifference != 0) {\n        absoluteDifference = check_if_string_is_empty_08009228(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + offset));\n        valueA = DAT_20000d0c;\n        if (absoluteDifference == 0) {\n          valueA = *(undefined4 *)(&DAT_20000884 + offset);\n        }\n        reversedValue = reverse_bits_08008590(result3);\n        absoluteDifference = is_input_valid_08008b60((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20),0x66666666,0xbfee6666);\n        if (absoluteDifference != 0) {\n          reversedValue = reverse_bits_08008590(result3);\n          reversedValue = reverse_bits_080082d0(0,0x3ff00000,(int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n          reversedValue = calculate_xored_bits_08008640((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20),0,0x3fe00000);\n          reversedValue = initialize_and_calculate_result_080098d0((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n          result3 = calculate_float_08008c30((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n          reversedValue = reverse_bits_08008590(valueA);\n          result4 = calculate_floating_point_08008eec(DAT_20000edc,DAT_20000ee0);\n          result4 = calculate_floating_point_08008eec(result4,result3);\n          calculation1 = reverse_bits_08008590(result4);\n          calculation2 = reverse_bits_08008590(result3);\n          calculation2 = reverse_bits_080082d0(0,0x3ff00000,(int)calculation2,(int)((ulonglong)calculation2 >> 0x20));\n          calculation1 = calculate_floating_point_08008894((int)calculation1,(int)((ulonglong)calculation1 >> 0x20),(int)calculation2,\n                                (int)((ulonglong)calculation2 >> 0x20));\n          calculation1 = initialize_and_calculate_result_080098d0((int)calculation1,(int)((ulonglong)calculation1 >> 0x20));\n          absoluteDifference = is_input_null_08008b24((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20),(int)calculation1,\n                                (int)((ulonglong)calculation1 >> 0x20));\n          if (absoluteDifference == 0) {\n            result4 = calculate_floating_point_08008eec(DAT_20000edc,DAT_20000ee0);\n            result4 = calculate_floating_point_08008eec(result4,result3);\n            reversedValue = reverse_bits_08008590(result4);\n            calculation1 = reverse_bits_08008590(result3);\n            calculation1 = reverse_bits_080082d0(0,0x3ff00000,(int)calculation1,(int)((ulonglong)calculation1 >> 0x20));\n            reversedValue = calculate_floating_point_08008894((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20),(int)calculation1,\n                                  (int)((ulonglong)calculation1 >> 0x20));\n            reversedValue = initialize_and_calculate_result_080098d0((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n            valueA = calculate_float_08008c30((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + offset) = valueA;\n    result4 = calculate_result_08002978(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + offset));\n    absoluteDifference = check_if_string_is_empty_08009228(valueA,result4);\n    result3 = result4;\n    if (absoluteDifference != 0) {\n      result3 = valueA;\n    }\n    *(undefined4 *)(&DAT_20000888 + offset) = result3;\n    absoluteDifference = check_concatenation_result_08009250(result4,*(undefined4 *)(&DAT_20000884 + offset));\n    if (absoluteDifference == 0) {\n      (&DAT_20000895)[offset] = 0;\n    }\n    else {\n      (&DAT_20000895)[offset] = 1;\n    }\n    (&DAT_20000894)[offset] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + offset);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = maxValue;\n    DAT_20000d04 = result1;\n    DAT_20000d08 = result2;\n    DAT_20000cf2 = increment_and_limit_08002870(DAT_20000cf2);\n    DAT_20000cf4 = modifiedValue1;\n    DAT_20000cf8 = modifiedValue2;\n    DAT_20000cfc = modifiedValue3;\n    update_and_calculate_values_08002edc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "calculate_result_08003004",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "param_5": "flag",
                "uVar1": "result1",
                "iVar2": "modifiedValue1",
                "iVar3": "modifiedValue2",
                "iVar4": "modifiedValue3",
                "uVar5": "result2",
                "uVar6": "result3",
                "uVar7": "result4",
                "uVar8": "result5",
                "uVar9": "maxValue",
                "iVar10": "offset",
                "puVar11": "pointer",
                "iVar12": "absoluteDifference",
                "uVar13": "maxDifference",
                "uVar14": "reversedValue",
                "uVar15": "calculation1",
                "uVar16": "calculation2",
                "local_20": "valueA",
                "local_1c": "valueB"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08008b24",
                "FUN_08002edc",
                "FUN_08002978",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08009318",
                "FUN_08008b60",
                "FUN_08002870",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008c30",
                "FUN_08009228",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08009264",
                "FUN_08008ba0",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "initialize_parameters_080035ec",
            "code": "\nvoid initializeParameters_080035ec(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  DAT_20000cf4 = input1;\n  DAT_20000cf8 = input2;\n  DAT_20000cfc = input3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "initialize_parameters_080035ec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "update_and_calculate_values_08003618",
            "code": "\nvoid updateAndCalculateValues_08003618(undefined4 inputValue)\n\n{\n  undefined4 reverseCalculatedValue;\n  int index;\n  undefined4 tempValue;\n  \n  index = (uint)DAT_20000cf1 * 0x40;\n  tempValue = *(undefined4 *)(&DAT_20000890 + index);\n  reverseCalculatedValue = calculate_reverse_value_08008e44(inputValue);\n  reverseCalculatedValue = calculate_floating_point_08008eec(tempValue,reverseCalculatedValue);\n  tempValue = calculate_reverse_value_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n  reverseCalculatedValue = calculate_floating_point_08009054(reverseCalculatedValue,tempValue);\n  *(undefined4 *)(&DAT_20000890 + index) = reverseCalculatedValue;\n  *(undefined4 *)(&DAT_20000880 + index) = inputValue;\n  *(undefined4 *)(&DAT_20000888 + index) = 0;\n  *(undefined4 *)(&DAT_2000088c + index) = 0;\n  (&DAT_20000895)[index] = 0;\n  (&DAT_20000894)[index] = 1;\n  update_and_calculate_values_08002edc();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "update_and_calculate_values_08003618",
                "param_1": "inputValue",
                "uVar1": "reverseCalculatedValue",
                "iVar2": "index",
                "uVar3": "tempValue"
            },
            "calling": [
                "FUN_080058a0"
            ],
            "called": [
                "FUN_08002edc",
                "FUN_08008eec",
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "wait_for_flag_to_be_set_0800369c",
            "code": "\nvoid waitForFlagToBeSet_0800369c(char *inputString)\n\n{\n  char *currentCharacter;\n  \n  currentCharacter = inputString;\n  while (*currentCharacter != '\\0') {\n    wait_until_flag_is_set_08008250(*currentCharacter);\n    currentCharacter = currentCharacter + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "wait_for_flag_to_be_set_0800369c",
                "param_1": "inputString",
                "local_c": "currentCharacter"
            },
            "calling": [
                "FUN_08004900",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "wait_for_flag_to_be_set_080036c6",
            "code": "\nvoid waitForFlagToBeSet_080036c6(char *inputString)\n\n{\n  char *currentCharacter;\n  \n  currentCharacter = inputString;\n  while (*currentCharacter != '\\0') {\n    wait_until_flag_is_set_08008250(*currentCharacter);\n    currentCharacter = currentCharacter + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "wait_for_flag_to_be_set_080036c6",
                "param_1": "inputString",
                "local_c": "currentCharacter"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004900",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_08004940",
                "FUN_08004148"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "run_bit_sequence_080036f0",
            "code": "\nvoid runBitSequence_080036f0(uint input,int bitCount)\n\n{\n  undefined4 outputBit;\n  int bitIndex;\n  uint mask;\n  \n  mask = 1 << (bitCount - 1U & 0xff);\n  for (bitIndex = 0; bitIndex < bitCount; bitIndex = bitIndex + 1) {\n    if ((mask & input) == 0) {\n      outputBit = 0x30;\n    }\n    else {\n      outputBit = 0x31;\n    }\n    wait_until_flag_is_set_08008250(outputBit);\n    mask = mask >> 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "run_bit_sequence_080036f0",
                "param_1": "input",
                "param_2": "bitCount",
                "uVar1": "outputBit",
                "local_10": "bitIndex",
                "local_c": "mask"
            },
            "calling": [
                "FUN_0800375c",
                "FUN_08003740"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "run_bit_sequence_08003740",
            "code": "\nvoid run_bit_sequence_08003740(undefined bit_sequence)\n\n{\n  run_bit_sequence_08003740_internal(bit_sequence,8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003740": "run_bit_sequence_08003740",
                "param_1": "bit_sequence",
                "run_bit_sequence_080036f0": "run_bit_sequence_internal"
            },
            "calling": [],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "run_bit_sequence_0800375c",
            "code": "\nvoid run_bit_sequence_0800375c(undefined2 input_data)\n\n{\n  execute_bit_sequence(input_data,0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "run_bit_sequence_0800375c",
                "param_1": "input_data",
                "run_bit_sequence_080036f0": "execute_bit_sequence"
            },
            "calling": [
                "FUN_08004250"
            ],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "print_number_or_wait_08003778",
            "code": "\nvoid print_number_or_wait_08003778(uint number)\n\n{\n  uint temp;\n  uint remaining_digits;\n  char digit_stack [12];\n  byte num_digits;\n  \n  num_digits = 0;\n  remaining_digits = number;\n  if (number == 0) {\n    wait_until_flag_is_set_08008250(0x30);\n  }\n  else {\n    for (; remaining_digits != 0; remaining_digits = remaining_digits / 10) {\n      temp = (uint)num_digits;\n      num_digits = num_digits + 1;\n      digit_stack[temp + 1] = (char)(remaining_digits % 10) + '0';\n    }\n    for (; num_digits != 0; num_digits = num_digits - 1) {\n      wait_until_flag_is_set_08008250(digit_stack[num_digits]);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003778": "print_number_or_wait_08003778",
                "param_1": "number",
                "uVar1": "temp",
                "local_1c": "remaining_digits",
                "acStack_15": "digit_stack",
                "local_9": "num_digits"
            },
            "calling": [
                "FUN_080037fc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "print_absolute_value_080037fc",
            "code": "\nvoid printAbsoluteValue_080037fc(int inputNumber)\n\n{\n  int absoluteValue;\n  \n  absoluteValue = inputNumber;\n  if (inputNumber < 0) {\n    wait_until_flag_is_set_08008250(0x2d);\n    absoluteValue = -inputNumber;\n  }\n  print_number_or_wait_08003778(absoluteValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "print_absolute_value_080037fc",
                "param_1": "inputNumber",
                "local_c": "absoluteValue"
            },
            "calling": [
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004900"
            ],
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "format_number_and_print_08003826",
            "code": "\nvoid formatNumberAndPrint_08003826(uint inputNumber)\n\n{\n  int isEmpty;\n  undefined4 convertedFloat;\n  byte tempByte;\n  uint tempUInt;\n  uint modifiedNumber;\n  char formattedNumber [13];\n  uint decimalNumber;\n  byte index;\n  byte tempByte2;\n  \n  isEmpty = check_if_string_is_empty_08009228(inputNumber,0);\n  modifiedNumber = inputNumber;\n  if (isEmpty != 0) {\n    wait_until_flag_is_set_08008250(0x2d);\n    modifiedNumber = inputNumber ^ 0x80000000;\n  }\n  for (tempByte2 = DAT_20000ef9; 1 < tempByte2; tempByte2 = tempByte2 - 2) {\n    modifiedNumber = calculate_floating_point_08008eec(modifiedNumber,0x42c80000);\n  }\n  if (tempByte2 != 0) {\n    modifiedNumber = calculate_floating_point_08008eec(modifiedNumber,0x41200000);\n  }\n  convertedFloat = calculate_float_08008cdc(modifiedNumber,0x3f000000);\n  index = 0;\n  decimalNumber = convert_to_twos_complement_08009278(convertedFloat);\n  formattedNumber[DAT_20000ef9 + 1] = '.';\n  for (; decimalNumber != 0; decimalNumber = decimalNumber / 10) {\n    if (index == DAT_20000ef9) {\n      index = index + 1;\n    }\n    tempUInt = (uint)index;\n    index = index + 1;\n    formattedNumber[tempUInt + 1] = (char)(decimalNumber % 10) + '0';\n  }\n  while (index < DAT_20000ef9) {\n    tempUInt = (uint)index;\n    index = index + 1;\n    formattedNumber[tempUInt + 1] = '0';\n  }\n  if (index == DAT_20000ef9) {\n    tempByte = index + 1;\n    index = index + 2;\n    formattedNumber[tempByte + 1] = '0';\n  }\n  for (; index != 0; index = index - 1) {\n    wait_until_flag_is_set_08008250(formattedNumber[index]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "format_number_and_print_08003826",
                "param_1": "inputNumber",
                "iVar1": "isEmpty",
                "uVar2": "convertedFloat",
                "bVar3": "tempByte",
                "uVar4": "tempUInt",
                "local_24": "modifiedNumber",
                "acStack_1d": "formattedNumber",
                "local_10": "decimalNumber",
                "local_a": "index",
                "local_9": "tempByte2"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004940"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08009278",
                "FUN_08009228",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_variables_08003980",
            "code": "\nvoid initializeVariables_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_variables_08003980"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_080039a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_and_setup_080039a0",
            "code": "\nvoid initialize_and_setup_080039a0(void)\n\n{\n  initialize_variables();\n  initialize_grbl();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_and_setup_080039a0",
                "initialize_variables_08003980": "initialize_variables",
                "initialize_grbl_08004228": "initialize_grbl"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "process_data_and_display_errors_080039bc",
            "code": "\nvoid processDataAndDisplayErrors_080039bc(void)\n\n{\n  int memoryCheckResult;\n  undefined4 errorDisplayCode;\n  byte loopCounter;\n  \n  for (loopCounter = 0; loopCounter < 2; loopCounter = loopCounter + 1) {\n    memoryCheckResult = check_memory_and_process_data_08004d2c(loopCounter,&DAT_20000d10);\n    if (memoryCheckResult == 0) {\n      display_error_message_08004030(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      wait_for_flag_to_be_set_0800369c(&DAT_20000d10);\n      errorDisplayCode = process_data_080005b4(&DAT_20000d10);\n      display_error_message_08004030(errorDisplayCode);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "process_data_and_display_errors_080039bc",
                "iVar1": "memoryCheckResult",
                "uVar2": "errorDisplayCode",
                "local_9": "loopCounter"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_080005b4",
                "FUN_08004d2c",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "process_parameter_08003a18",
            "code": "\nvoid processParameter_08003a18(uint inputParam)\n\n{\n  if ((inputParam & 0x80) == 0) {\n    if ((inputParam & 0x40) == 0) {\n      if ((inputParam & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    initializeSystem();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "process_parameter_08003a18",
                "param_1": "inputParam",
                "initialize_system_080025e8": "initializeSystem"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "process_alarm_interrupt_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid process_alarm_interrupt_08003a74(void)\n\n{\n  byte bVar1;\n  \n  bVar1 = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        display_alarm_message(0xffffffff);\n        wait_for_flag_and_switch(1);\n        do {\n        } while( true );\n      }\n      display_alarm_message(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((bVar1 & 0x10) == 0) {\n      if ((bVar1 & 1) != 0) {\n        print_position_information();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((bVar1 & 8) != 0) {\n        update_status();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((bVar1 & 4) != 0) {\n        initialize_data();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((bVar1 & 2) != 0) {\n        initialize_data_and_update_flags();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "process_alarm_interrupt_08003a74",
                "display_alarm_message_08004148": "display_alarm_message",
                "wait_for_flag_and_switch_080041a0": "wait_for_flag_and_switch",
                "print_position_information_08004940": "print_position_information",
                "update_status_0800587c": "update_status",
                "initialize_data_080058a0": "initialize_data",
                "initialize_data_and_update_flags_0800585c": "initialize_data_and_update_flags"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08002fd4",
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_0800585c",
                "FUN_0800587c",
                "FUN_080041a0",
                "FUN_08004940",
                "FUN_080058a0",
                "FUN_08004148"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "process_requested_command_08003b98",
            "code": "\nuint process_requested_command_08003b98(char *command)\n\n{\n  byte command_identifier;\n  int result;\n  undefined4 converted_value;\n  uint return_value;\n  undefined8 precision;\n  undefined4 value_1;\n  undefined4 value_2;\n  byte loop_variable_1;\n  byte loop_variable_2;\n  \n  if (*command != '$') {\n    return_value = process_data_080005b4(command);\n    return return_value;\n  }\n  loop_variable_1 = 1;\n  loop_variable_2 = '\\0';\n  command_identifier = command[1];\n  if (command_identifier == 0) {\n    view_grbl_settings_0800423c();\n    return 0;\n  }\n  if ((0x58 < command_identifier) || (command_identifier < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(command_identifier) {\n  case 0x23:\n    loop_variable_1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    process_and_print_data_080044e8();\n    break;\n  case 0x24:\n    loop_variable_1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    print_configurations_08004250();\n    break;\n  case 0x43:\n    loop_variable_1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      initialize_system_080025e8();\n      wait_for_flag_and_switch_080041a0(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      wait_for_flag_and_switch_080041a0(4);\n    }\n    break;\n  case 0x47:\n    loop_variable_1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    print_data_080046d0();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    initialize_system_080024c4();\n    if (DAT_20000ea8 == '\\0') {\n      process_data_and_display_errors_080039bc();\n    }\n    break;\n  case 0x4e:\n    loop_variable_1 = 2;\n    if (command[2] == '\\0') {\n      for (loop_variable_2 = 0; loop_variable_2 < 2; loop_variable_2 = loop_variable_2 + 1) {\n        result = check_memory_and_process_data_08004d2c(loop_variable_2,command);\n        if (result == 0) {\n          display_error_message_08004030(10);\n        }\n        else {\n          perform_operations_08004900(loop_variable_2,command);\n        }\n      }\n      return 0;\n    }\n    loop_variable_2 = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    result = parse_integer_08002638(command,&loop_variable_1,&value_2);\n    if (result == 0) {\n      return 1;\n    }\n    command_identifier = loop_variable_1 + 1;\n    if (command[loop_variable_1] != '=') {\n      return 3;\n    }\n    loop_variable_1 = command_identifier;\n    if (loop_variable_2 == '\\0') {\n      result = parse_integer_08002638(command,&loop_variable_1,&value_1);\n      if (result == 0) {\n        return 1;\n      }\n      if (command[loop_variable_1] == '\\0') {\n        converted_value = convert_to_twos_complement_08009278(value_2);\n        return_value = initialize_and_store_data_08004e30(converted_value,value_1);\n        return return_value;\n      }\n      return 3;\n    }\n    do {\n      command[(uint)loop_variable_1 - (uint)command_identifier] = command[loop_variable_1];\n      return_value = (uint)loop_variable_1;\n      loop_variable_1 = loop_variable_1 + 1;\n    } while (command[return_value] != '\\0');\n    loop_variable_2 = command_identifier;\n    loop_variable_2 = process_data_080005b4(command);\n    if (loop_variable_2 != 0) {\n      return (uint)loop_variable_2;\n    }\n    precision = reverse_bits_08008590(value_2);\n    precision = calculate_precision_08009798((int)precision,(int)((ulonglong)precision >> 0x20));\n    loop_variable_2 = convert_to_unsigned_08008bf0((int)precision,(int)((ulonglong)precision >> 0x20));\n    process_and_store_data_08004bc0(loop_variable_2,command);\n    break;\n  case 0x58:\n    loop_variable_1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      wait_for_flag_and_switch_080041a0(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003b98": "process_requested_command_08003b98",
                "param_1": "command",
                "bVar1": "command_identifier",
                "iVar2": "result",
                "uVar3": "converted_value",
                "uVar4": "return_value",
                "uVar5": "precision",
                "local_14": "value_1",
                "local_10": "value_2",
                "local_a": "loop_variable_1",
                "local_9": "loop_variable_2"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08008bf0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08009798",
                "FUN_08004e30",
                "FUN_080025e8",
                "FUN_080024c4",
                "FUN_08004bc0",
                "FUN_080044e8",
                "FUN_08008590",
                "FUN_08004900",
                "FUN_08009278",
                "FUN_080005b4",
                "FUN_080041a0",
                "FUN_08004d2c",
                "FUN_080039bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "process_input_08003f34",
            "code": "\nvoid process_input_08003f34(void)\n\n{\n  byte byteValue;\n  undefined4 returnValue;\n  uint index;\n  \n  while( true ) {\n    while( true ) {\n      byteValue = checkAndProcessByte();\n      if (byteValue == 0xff) {\n        return;\n      }\n      if ((byteValue == 10) || (byteValue == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < byteValue) && (byteValue != 0x2f)) {\n          if (byteValue == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            displayErrorMessage(0xd);\n            initializeVariables();\n          }\n          else if ((byteValue < 0x61) || (0x7a < byteValue)) {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = byteValue;\n          }\n          else {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = byteValue - 0x20;\n          }\n        }\n      }\n      else if (byteValue == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    processAlarmInterrupt();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      displayErrorMessage(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      returnValue = processRequestedCommand(&DAT_20000d10);\n      displayErrorMessage(returnValue);\n    }\n    initializeVariables();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "process_input_08003f34",
                "bVar1": "byteValue",
                "uVar2": "returnValue",
                "uVar3": "index",
                "check_and_process_byte_08008286": "checkAndProcessByte",
                "display_error_message_08004030": "displayErrorMessage",
                "initialize_variables_08003980": "initializeVariables",
                "process_alarm_interrupt_08003a74": "processAlarmInterrupt",
                "process_requested_command_08003b98": "processRequestedCommand"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08008286",
                "FUN_08003b98",
                "FUN_08004030",
                "FUN_08003980",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "display_error_message_08004030",
            "code": "\nvoid displayErrorMessage_08004030(char errorCode)\n\n{\n  if (errorCode == '\\0') {\n    printMessage(&DAT_0800b5c8);\n  }\n  else {\n    printMessage(\"error: \");\n    switch(errorCode) {\n    case '\\x01':\n      printMessage(\"Bad number format\");\n      break;\n    case '\\x02':\n      printMessage(\"Expected command letter\");\n      break;\n    case '\\x03':\n      printMessage(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      printMessage(\"Invalid radius\");\n      break;\n    case '\\x05':\n      printMessage(\"Modal group violation\");\n      break;\n    case '\\x06':\n      printMessage(\"Invalid statement\");\n      break;\n    case '\\a':\n      printMessage(\"Setting disabled\");\n      break;\n    case '\\b':\n      printMessage(\"Value < 0.0\");\n      break;\n    case '\\t':\n      printMessage(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      printMessage(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      printMessage(\"Busy or queued\");\n      break;\n    case '\\f':\n      printMessage(\"Alarm lock\");\n      break;\n    case '\\r':\n      printMessage(\"Line overflow\");\n    }\n    printMessage(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "display_error_message_08004030",
                "param_1": "errorCode",
                "wait_for_flag_to_be_set_080036c6": "printMessage"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_08003b98",
                "FUN_080039bc",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "display_alarm_message_08004148",
            "code": "\nvoid displayAlarmMessage_08004148(char errorCode)\n\n{\n  waitForFlagToBeSetAndPrint(\"ALARM: \");\n  if (errorCode == -2) {\n    waitForFlagToBeSetAndPrint(\"Abort during cycle\");\n  }\n  else if (errorCode == -1) {\n    waitForFlagToBeSetAndPrint(\"Hard limit\");\n  }\n  waitForFlagToBeSetAndPrint(\". MPos?\\r\\n\");\n  FUNC_08002814(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "display_alarm_message_08004148",
                "param_1": "errorCode",
                "wait_for_flag_to_be_set_080036c6": "waitForFlagToBeSetAndPrint"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "wait_for_flag_and_switch_080041a0",
            "code": "\nvoid waitForFlagAndSwitch_080041a0(undefined inputValue)\n\n{\n  waitForFlagToBeSet(&DAT_0800b710);\n  switch(inputValue) {\n  case 1:\n    waitForFlagToBeSet(\"Reset to continue\");\n    break;\n  case 2:\n    waitForFlagToBeSet(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    waitForFlagToBeSet(\"Caution: Unlocked\");\n    break;\n  case 4:\n    waitForFlagToBeSet(\"Enabled\");\n    break;\n  case 5:\n    waitForFlagToBeSet(\"Disabled\");\n  }\n  waitForFlagToBeSet(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "wait_for_flag_and_switch_080041a0",
                "param_1": "inputValue",
                "wait_for_flag_to_be_set_080036c6": "waitForFlagToBeSet"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc",
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "initialize_grbl_08004228",
            "code": "\nvoid initializeGrbl_08004228(void)\n\n{\n  waitForFlagToBeSet(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "initialize_grbl_08004228",
                "wait_for_flag_to_be_set_080036c6": "waitForFlagToBeSet"
            },
            "calling": [
                "FUN_080039a0"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "view_grbl_settings_0800423c",
            "code": "\nvoid viewGrblSettings_0800423c(void)\n\n{\n  waitForFlagToBeSet(\n              \"$$ (view Grbl settings)\\r\\n$# (view # parameters)\\r\\n$G (view parser state)\\r\\n$N (view startup blocks)\\r\\n$x=value (save Grbl setting)\\r\\n$Nx=line (save startup block)\\r\\n$C (check gcode mode)\\r\\n$X (kill alarm lock)\\r\\n$H (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-x (reset Grbl)\\r\\n\"\n              );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "view_grbl_settings_0800423c",
                "wait_for_flag_to_be_set_080036c6": "waitForFlagToBeSet"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "print_configurations_08004250",
            "code": "\nvoid printConfigurations_08004250(void)\n\n{\n  undefined4 formattedNumber;\n  \n  waitForFlagToBeSet(&DAT_0800b8b8);\n  formatAndPrintNumber(DAT_20000ebc);\n  waitForFlagToBeSet(\" (x, step/mm)\\r\\n$1=\");\n  formatAndPrintNumber(DAT_20000ec0);\n  waitForFlagToBeSet(\" (y, step/mm)\\r\\n$2=\");\n  formatAndPrintNumber(DAT_20000ec4);\n  waitForFlagToBeSet(\" (z, step/mm)\\r\\n$3=\");\n  printAbsoluteValue(DAT_20000ec9);\n  waitForFlagToBeSet(\" (step pulse, usec)\\r\\n$4=\");\n  formatAndPrintNumber(DAT_20000ecc);\n  waitForFlagToBeSet(\" (default feed, mm/min)\\r\\n$5=\");\n  formatAndPrintNumber(DAT_20000ed0);\n  waitForFlagToBeSet(\" (default seek, mm/min)\\r\\n$6=\");\n  printAbsoluteValue(DAT_20000ed4);\n  waitForFlagToBeSet(\" (step port invert mask, int:\");\n  runBitSequence(DAT_20000ed4);\n  waitForFlagToBeSet(\")\\r\\n$7=\");\n  printAbsoluteValue(DAT_20000ef8);\n  waitForFlagToBeSet(\" (step idle delay, msec)\\r\\n$8=\");\n  formattedNumber = calculateFloatingPoint(DAT_20000edc,0x45610000);\n  formatAndPrintNumber(formattedNumber);\n  waitForFlagToBeSet(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  formatAndPrintNumber(DAT_20000ee0);\n  waitForFlagToBeSet(\" (junction deviation, mm)\\r\\n$10=\");\n  formatAndPrintNumber(DAT_20000ed8);\n  waitForFlagToBeSet(\" (arc, mm/segment)\\r\\n$11=\");\n  printAbsoluteValue(DAT_20000efa);\n  waitForFlagToBeSet(\" (n-arc correction, int)\\r\\n$12=\");\n  printAbsoluteValue(DAT_20000ef9);\n  waitForFlagToBeSet(\" (n-decimals, int)\\r\\n$13=\");\n  printAbsoluteValue((DAT_20000ee4 & 1) != 0);\n  waitForFlagToBeSet(\" (report inches, bool)\\r\\n$14=\");\n  printAbsoluteValue((DAT_20000ee4 & 2) != 0);\n  waitForFlagToBeSet(\" (auto start, bool)\\r\\n$15=\");\n  printAbsoluteValue((DAT_20000ee4 & 4) != 0);\n  waitForFlagToBeSet(\" (invert step enable, bool)\\r\\n$16=\");\n  printAbsoluteValue((DAT_20000ee4 & 8) != 0);\n  waitForFlagToBeSet(\" (hard limits, bool)\\r\\n$17=\");\n  printAbsoluteValue((DAT_20000ee4 & 0x10) != 0);\n  waitForFlagToBeSet(\" (homing cycle, bool)\\r\\n$18=\");\n  printAbsoluteValue(DAT_20000ee6);\n  waitForFlagToBeSet(\" (homing dir invert mask, int:\");\n  runBitSequence(DAT_20000ee6);\n  waitForFlagToBeSet(\")\\r\\n$19=\");\n  formatAndPrintNumber(DAT_20000ee8);\n  waitForFlagToBeSet(\" (homing feed, mm/min)\\r\\n$20=\");\n  formatAndPrintNumber(DAT_20000eec);\n  waitForFlagToBeSet(\" (homing seek, mm/min)\\r\\n$21=\");\n  printAbsoluteValue(DAT_20000ef0);\n  waitForFlagToBeSet(\" (homing debounce, msec)\\r\\n$22=\");\n  formatAndPrintNumber(DAT_20000ef4);\n  waitForFlagToBeSet(\" (homing pull-off, mm)\\r\\n$23=\");\n  printAbsoluteValue(DAT_20000ed6);\n  waitForFlagToBeSet(\" (dir port invert mask, int:\");\n  runBitSequence(DAT_20000ed6);\n  waitForFlagToBeSet(&DAT_0800bb94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004250": "print_configurations_08004250",
                "uVar1": "formattedNumber",
                "wait_for_flag_to_be_set_080036c6": "waitForFlagToBeSet",
                "format_number_and_print_08003826": "formatAndPrintNumber",
                "print_absolute_value_080037fc": "printAbsoluteValue",
                "run_bit_sequence_0800375c": "runBitSequence",
                "calculate_floating_point_08009054": "calculateFloatingPoint"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800375c",
                "FUN_08009054",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "process_and_print_data_080044e8",
            "code": "\nvoid process_and_print_data_080044e8(void)\n\n{\n  int result;\n  undefined4 float_result;\n  undefined8 reversed_bits;\n  undefined4 stack_values [3];\n  byte index;\n  byte counter;\n  \n  counter = 0;\n  while( true ) {\n    if (7 < counter) {\n      wait_for_flag_to_be_set_080036c6(\"[G92:\");\n      for (index = 0; index < 3; index = index + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          format_and_print_number(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n        }\n        else {\n          reversed_bits = reverse_bits(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n          reversed_bits = calculate_xor_bits((int)reversed_bits,(int)((ulonglong)reversed_bits >> 0x20),0x57e16865,0x3fa42851);\n          float_result = calculate_float((int)reversed_bits,(int)((ulonglong)reversed_bits >> 0x20));\n          format_and_print_number(float_result);\n        }\n        if (index < 2) {\n          wait_for_flag_to_be_set_080036c6(&DAT_0800bbbc);\n        }\n        else {\n          wait_for_flag_to_be_set_080036c6(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    result = check_and_process_memory_08004d7c(counter,stack_values);\n    if (result == 0) break;\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bb98);\n    switch(counter) {\n    case 0:\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bb9c);\n      break;\n    case 1:\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bba0);\n      break;\n    case 2:\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bba4);\n      break;\n    case 3:\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bba8);\n      break;\n    case 4:\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bbac);\n      break;\n    case 5:\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bbb0);\n      break;\n    case 6:\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bbb4);\n      break;\n    case 7:\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bbb8);\n    }\n    for (index = 0; index < 3; index = index + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        format_and_print_number(stack_values[index]);\n      }\n      else {\n        reversed_bits = reverse_bits(stack_values[index]);\n        reversed_bits = calculate_xor_bits((int)reversed_bits,(int)((ulonglong)reversed_bits >> 0x20),0x57e16865,0x3fa42851);\n        float_result = calculate_float((int)reversed_bits,(int)((ulonglong)reversed_bits >> 0x20));\n        format_and_print_number(float_result);\n      }\n      if (index < 2) {\n        wait_for_flag_to_be_set_080036c6(&DAT_0800bbbc);\n      }\n      else {\n        wait_for_flag_to_be_set_080036c6(&DAT_0800b764);\n      }\n    }\n    counter = counter + 1;\n  }\n  display_error_message(10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "process_and_print_data_080044e8",
                "iVar1": "result",
                "uVar2": "float_result",
                "uVar3": "reversed_bits",
                "auStack_18": "stack_values",
                "local_a": "index",
                "local_9": "counter",
                "calculate_float_08008c30": "calculate_float",
                "calculate_xored_bits_08008640": "calculate_xor_bits",
                "reverse_bits_08008590": "reverse_bits",
                "format_number_and_print_08003826": "format_and_print_number",
                "display_error_message_08004030": "display_error_message"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08004030",
                "FUN_08008c30",
                "FUN_08003826",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "print_data_080046d0",
            "code": "\nvoid printData_080046d0(void)\n\n{\n  undefined4 uVar1;\n  undefined8 uVar2;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bbc8);\n    break;\n  case 1:\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bbcc);\n    break;\n  case 2:\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bbd0);\n    break;\n  case 3:\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bbd4);\n    break;\n  case 4:\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bbd8);\n  }\n  wait_for_flag_to_be_set_080036c6(&DAT_0800bbe0);\n  print_absolute_value_080037fc(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bbe4);\n    }\n    else {\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bbec);\n    }\n  }\n  else {\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bc04);\n  }\n  else {\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bc14);\n  }\n  else {\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bc24);\n  }\n  else {\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bc48);\n    }\n  }\n  wait_for_flag_to_be_set_080036c6(&DAT_0800bc50);\n  print_absolute_value_080037fc(DAT_20000e88);\n  wait_for_flag_to_be_set_080036c6(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    format_number_and_print_08003826(DAT_20000e78);\n  }\n  else {\n    uVar2 = reverse_bits_08008590(DAT_20000e78);\n    uVar2 = calculate_xored_bits_08008640((int)uVar2,(int)((ulonglong)uVar2 >> 0x20),0x57e16865,0x3fa42851);\n    uVar1 = calculate_float_08008c30((int)uVar2,(int)((ulonglong)uVar2 >> 0x20));\n    format_number_and_print_08003826(uVar1);\n  }\n  wait_for_flag_to_be_set_080036c6(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "print_data_080046d0"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "perform_operations_08004900",
            "code": "\nvoid perform_operations_08004900(undefined value1,undefined4 value2)\n\n{\n  wait_for_flag1(&DAT_0800bc58);\n  print_abs_value(value1);\n  wait_for_flag1(&DAT_0800bc5c);\n  wait_for_flag2(value2);\n  wait_for_flag1(&DAT_0800b6d8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004900": "perform_operations_08004900",
                "param_1": "value1",
                "param_2": "value2",
                "wait_for_flag_to_be_set_080036c6": "wait_for_flag1",
                "print_absolute_value_080037fc": "print_abs_value",
                "wait_for_flag_to_be_set_0800369c": "wait_for_flag2"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "print_position_information_08004940",
            "code": "\nvoid printPositionInformation_08004940(void)\n\n{\n  undefined4 reverseValue;\n  uint loopIndex;\n  undefined4 floatValue;\n  undefined8 reversedValue;\n  undefined8 xoredValue;\n  undefined4 positionValues [6];\n  byte index;\n  \n  positionValues[3] = DAT_20000eac;\n  positionValues[4] = DAT_20000eb0;\n  positionValues[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    wait_for_flag_to_be_set_080036c6(\"<Idle\");\n    break;\n  case 2:\n    wait_for_flag_to_be_set_080036c6(\"<Queue\");\n    break;\n  case 3:\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bc70);\n    break;\n  case 4:\n    wait_for_flag_to_be_set_080036c6(\"<Hold\");\n    break;\n  case 5:\n    wait_for_flag_to_be_set_080036c6(\"<Home\");\n    break;\n  case 6:\n    wait_for_flag_to_be_set_080036c6(\"<Alarm\");\n    break;\n  case 7:\n    wait_for_flag_to_be_set_080036c6(\"<Check\");\n  }\n  wait_for_flag_to_be_set_080036c6(\",MPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    reverseValue = calculate_reverse_value_08008e44(positionValues[index + 3]);\n    loopIndex = (uint)index;\n    reverseValue = calculate_floating_point_08009054(reverseValue,(&DAT_20000ebc)[index]);\n    positionValues[loopIndex] = reverseValue;\n    if ((DAT_20000ee4 & 1) != 0) {\n      reversedValue = reverse_bits_08008590(positionValues[index]);\n      reversedValue = calculate_xored_bits_08008640((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20),0x57e16865,0x3fa42851);\n      loopIndex = (uint)index;\n      reverseValue = calculate_float_08008c30((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n      positionValues[loopIndex] = reverseValue;\n    }\n    format_number_and_print_08003826(positionValues[index]);\n    wait_for_flag_to_be_set_080036c6(&DAT_0800bbbc);\n  }\n  wait_for_flag_to_be_set_080036c6(\"WPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      floatValue = positionValues[index];\n      reverseValue = calculate_float_08008cdc(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      loopIndex = (uint)index;\n      reverseValue = perform_arithmetic_operation_08008cd8(floatValue,reverseValue);\n      positionValues[loopIndex] = reverseValue;\n    }\n    else {\n      reversedValue = reverse_bits_08008590(positionValues[index]);\n      reverseValue = calculate_float_08008cdc(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      xoredValue = reverse_bits_08008590(reverseValue);\n      xoredValue = calculate_xored_bits_08008640((int)xoredValue,(int)((ulonglong)xoredValue >> 0x20),0x57e16865,0x3fa42851);\n      reversedValue = reverse_bits_080082d0((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20),(int)xoredValue,\n                           (int)((ulonglong)xoredValue >> 0x20));\n      loopIndex = (uint)index;\n      reverseValue = calculate_float_08008c30((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n      positionValues[loopIndex] = reverseValue;\n    }\n    format_number_and_print_08003826(positionValues[index]);\n    if (index < 2) {\n      wait_for_flag_to_be_set_080036c6(&DAT_0800bbbc);\n    }\n  }\n  wait_for_flag_to_be_set_080036c6(&DAT_0800bca8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "print_position_information_08004940",
                "auStack_2c": "positionValues",
                "local_11": "index",
                "uVar1": "reverseValue",
                "uVar2": "loopIndex",
                "uVar3": "floatValue",
                "uVar4": "reversedValue",
                "uVar5": "xoredValue"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_08009054",
                "FUN_08003826",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "process_and_store_data_08004bc0",
            "code": "\nvoid process_and_store_data_08004bc0(byte input_byte,undefined4 input_param)\n\n{\n  process_data((unsigned_short)input_byte * 0x101 + 0x300,input_param,0x100);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "process_and_store_data_08004bc0",
                "param_1": "input_byte",
                "param_2": "input_param",
                "ushort": "unsigned_short",
                "process_data_08000374": "process_data"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08004d2c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "process_data_08004bf4",
            "code": "\nvoid process_data_08004bf4(byte input_byte,undefined4 input_value)\n\n{\n  process_data_08004bf4_08000374((unsigned_short)input_byte * 0xd + 0x200,input_value,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "process_data_08004bf4",
                "param_1": "input_byte",
                "param_2": "input_value",
                "ushort": "unsigned_short"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "initialize_data_08004c2a",
            "code": "\nvoid initializeData_08004c2a(void)\n\n{\n  storeDataInMemory(0,5);\n  processData(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "initialize_data_08004c2a",
                "store_data_in_memory_08000340": "storeDataInMemory",
                "process_data_08000374": "processData"
            },
            "calling": [
                "FUN_08004e30",
                "FUN_08004c48"
            ],
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_configuration_08004c48",
            "code": "\nvoid initialize_configuration_08004c48(char config_flag)\n\n{\n  if (config_flag != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  initialize_data();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_configuration_08004c48",
                "param_1": "config_flag",
                "initialize_data_08004c2a": "initialize_data"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_08004c2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "check_memory_and_process_data_08004d2c",
            "code": "\nbool checkMemoryAndProcessData_08004d2c(byte byteValue,undefined *memoryPointer)\n\n{\n  int isMemoryCorrect;\n  \n  isMemoryCorrect = is_memory_correct_080003ec(memoryPointer,(ushort)byteValue * 0x101 + 0x300,0x100);\n  if (isMemoryCorrect == 0) {\n    *memoryPointer = 0;\n    process_and_store_data_08004bc0(byteValue,memoryPointer);\n  }\n  return isMemoryCorrect != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "check_memory_and_process_data_08004d2c",
                "param_1": "byteValue",
                "param_2": "memoryPointer",
                "iVar1": "isMemoryCorrect"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004bc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "check_and_process_memory_08004d7c",
            "code": "\nbool checkAndProcessMemory_08004d7c(byte byteValue,undefined4 memoryAddress)\n\n{\n  int isMemoryCorrect;\n  \n  isMemoryCorrect = is_memory_correct_080003ec(memoryAddress,(ushort)byteValue * 0xd + 0x200,0xc);\n  if (isMemoryCorrect == 0) {\n    fill_memory_0800b430(memoryAddress,0,0xc);\n    process_data_08004bf4(byteValue,memoryAddress);\n  }\n  return isMemoryCorrect != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "check_and_process_memory_08004d7c",
                "param_1": "byteValue",
                "param_2": "memoryAddress",
                "iVar1": "isMemoryCorrect"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_080005b4",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_0800b430",
                "FUN_08004bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "check_memory_validity_08004dd2",
            "code": "\nundefined4 checkMemoryValidity_08004dd2(void)\n\n{\n  byte memoryValue;\n  int isMemoryCorrect;\n  \n  memoryValue = getMemoryValue(0);\n  if (memoryValue == 5) {\n    isMemoryCorrect = isMemoryCorrect(&DAT_20000ebc,1,0x40);\n    if (isMemoryCorrect == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < memoryValue) {\n      return 0;\n    }\n    isMemoryCorrect = isMemoryCorrect(&DAT_20000ebc,1,0x28);\n    if (isMemoryCorrect == 0) {\n      return 0;\n    }\n    initializeConfiguration(0);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "check_memory_validity_08004dd2",
                "bVar1": "memoryValue",
                "iVar2": "isMemoryCorrect",
                "get_memory_value_08000310": "getMemoryValue",
                "is_memory_correct_080003ec": "isMemoryCorrect",
                "initialize_configuration_08004c48": "initializeConfiguration"
            },
            "calling": [
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004c48",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "initialize_and_store_data_08004e30",
            "code": "\nundefined4 initialize_and_store_data_08004e30(int operation_type,uint input_value)\n\n{\n  undefined4 result;\n  int is_zero;\n  undefined8 converted_value;\n  \n  switch(operation_type) {\n  case 0:\n  case 1:\n  case 2:\n    is_zero = is_either_parameter_zero_0800923c(input_value,0);\n    if (is_zero != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[operation_type] = input_value;\n    break;\n  case 3:\n    is_zero = check_if_string_is_empty_08009228(input_value,0x40400000);\n    if (is_zero != 0) {\n      return 9;\n    }\n    converted_value = reverse_bits_08008590(input_value);\n    converted_value = convert_to_double_precision_08009654((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ec9 = convert_to_unsigned_08008bf0((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = input_value;\n    break;\n  case 5:\n    DAT_20000ed0 = input_value;\n    break;\n  case 6:\n    converted_value = reverse_bits_08008590(input_value);\n    converted_value = calculate_precision_08009798((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ed4 = convert_to_unsigned_08008bf0((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 7:\n    converted_value = reverse_bits_08008590(input_value);\n    converted_value = convert_to_double_precision_08009654((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ef8 = convert_to_unsigned_08008bf0((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 8:\n    result = calculate_floating_point_08008eec(input_value,0x42700000);\n    DAT_20000edc = calculate_floating_point_08008eec(result,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = input_value & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = input_value;\n    break;\n  case 0xb:\n    converted_value = reverse_bits_08008590(input_value);\n    converted_value = convert_to_double_precision_08009654((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000efa = convert_to_unsigned_08008bf0((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 0xc:\n    converted_value = reverse_bits_08008590(input_value);\n    converted_value = convert_to_double_precision_08009654((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ef9 = convert_to_unsigned_08008bf0((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 0xd:\n    is_zero = check_concatenated_parameters_08009214(input_value,0);\n    if (is_zero == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    is_zero = check_concatenated_parameters_08009214(input_value,0);\n    if (is_zero == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    is_zero = check_concatenated_parameters_08009214(input_value,0);\n    if (is_zero == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    is_zero = check_concatenated_parameters_08009214(input_value,0);\n    if (is_zero == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    update_flag_based_on_condition_0800192c();\n    break;\n  case 0x11:\n    is_zero = check_concatenated_parameters_08009214(input_value,0);\n    if (is_zero == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    converted_value = reverse_bits_08008590(input_value);\n    converted_value = calculate_precision_08009798((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ee6 = convert_to_unsigned_08008bf0((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = input_value;\n    break;\n  case 0x14:\n    DAT_20000eec = input_value;\n    break;\n  case 0x15:\n    converted_value = reverse_bits_08008590(input_value);\n    converted_value = convert_to_double_precision_08009654((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ef0 = convert_to_unsigned_08008bf0((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = input_value;\n    break;\n  case 0x17:\n    converted_value = reverse_bits_08008590(input_value);\n    converted_value = calculate_precision_08009798((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ed6 = convert_to_unsigned_08008bf0((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  initialize_data_08004c2a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e30": "initialize_and_store_data_08004e30",
                "param_1": "operation_type",
                "param_2": "input_value",
                "uVar1": "result",
                "iVar2": "is_zero",
                "uVar3": "converted_value"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08009654",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08009798",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_0800192c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "check_and_process_memory_080051b4",
            "code": "\nvoid check_and_process_memory_080051b4(void)\n\n{\n  int validity_check_result;\n  undefined stack_data [15];\n  byte iteration_index;\n  \n  validity_check_result = check_memory_validity_08004dd2();\n  if (validity_check_result == 0) {\n    display_error_message_08004030(10);\n    initialize_configuration_08004c48(1);\n    print_configurations_08004250();\n  }\n  for (iteration_index = 0; iteration_index < 8; iteration_index = iteration_index + 1) {\n    validity_check_result = check_and_process_memory_080051b4_08004d7c(iteration_index,stack_data);\n    if (validity_check_result == 0) {\n      display_error_message_08004030(10);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "check_and_process_memory_080051b4",
                "auStack_18": "stack_data",
                "local_9": "iteration_index",
                "iVar1": "validity_check_result"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004dd2",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08004c48",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "FUN_08005250"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "initialize_08005238",
            "code": "\nvoid initialize_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  executeInitialization();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "initialize_08005238",
                "execute_initialization_08005250": "executeInitialization"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "execute_initialization_08005250",
            "code": "\nvoid execute_initialization_08005250(void)\n\n{\n  FUNC_08005214();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "execute_initialization_08005250"
            },
            "calling": [
                "FUN_0800525c",
                "FUN_08005238",
                "FUN_080025e8"
            ],
            "called": [
                "FUN_08005214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "process_param_changed_0800525c",
            "code": "\nvoid processParamChanged_0800525c(byte newParam)\n\n{\n  if ((int)(char)newParam != (uint)DAT_20000e12) {\n    processAlarmInterrupts();\n    if (newParam == 0) {\n      executeInitialization();\n      DAT_20000e12 = newParam;\n    }\n    else {\n      if ((char)newParam < '\\x01') {\n        FUNC_0800522c();\n      }\n      else {\n        FUNC_08005220();\n      }\n      FUNC_08005208();\n      DAT_20000e12 = newParam;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "process_param_changed_0800525c",
                "param_1": "newParam",
                "process_alarm_interrupts_08002fd4": "processAlarmInterrupts",
                "execute_initialization_08005250": "executeInitialization"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_0800522c",
                "FUN_08005250",
                "FUN_08002fd4",
                "FUN_08005220",
                "FUN_08005208"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "update_flags_080052ac",
            "code": "\n\n\nvoid updateFlags_080052ac(uint inputValue)\n\n{\n  _DAT_40021014 = inputValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "update_flags_080052ac",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08005760",
                "FUN_0800583c",
                "FUN_08005778"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "update_register_080052dc",
            "code": "\n\n\nvoid updateRegister_080052dc(uint value)\n\n{\n  _DAT_40021014 = value | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "update_register_080052dc",
                "param_1": "value"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "calculate_and_update_data_rate_08005324",
            "code": "\nvoid calculateAndUpdateDataRate_08005324(uint inputDataRate)\n\n{\n  uint updatedDataRate;\n  \n  updatedDataRate = inputDataRate;\n  if (inputDataRate < 800) {\n    updatedDataRate = 800;\n  }\n  DAT_20000e28 = 1260000000 / updatedDataRate;\n  update_parameter_and_min_value_08007bf0(DAT_20000e28);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "calculate_and_update_data_rate_08005324",
                "param_1": "inputDataRate",
                "local_14": "updatedDataRate"
            },
            "calling": [
                "FUN_08005814",
                "FUN_080058a0",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "update_counter_and_check_threshold_08005360",
            "code": "\nbool updateCounterAndCheckThreshold_08005360(void)\n\n{\n  bool isThresholdExceeded;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  isThresholdExceeded = 420000 < DAT_20000e2c;\n  if (isThresholdExceeded) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return isThresholdExceeded;\n}\n\n",
            "renaming": {
                "FUN_08005360": "update_counter_and_check_threshold_08005360",
                "bVar1": "isThresholdExceeded"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "update_data_and_rate_080053a0",
            "code": "\nvoid updateDataAndRate_080053a0(void)\n\n{\n  int iVar1;\n  \n  update_register_080052dc(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)getMemoryLocation();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      initializeFlags();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        calculateAndUpdateRate(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        iVar1 = updateCounterCheckThreshold();\n        if (iVar1 != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            calculateAndUpdateRate(DAT_20000e30);\n          }\n          else {\n            initializeFlags();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        iVar1 = updateCounterCheckThreshold();\n        if (iVar1 != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          calculateAndUpdateRate(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          calculateAndUpdateRate(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        iVar1 = updateCounterCheckThreshold();\n        if (iVar1 != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          calculateAndUpdateRate(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      updateDataIfNotEqual();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "update_data_and_rate_080053a0",
                "get_memory_location_08002f74": "getMemoryLocation",
                "calculate_and_update_data_rate_08005324": "calculateAndUpdateRate",
                "update_counter_and_check_threshold_08005360": "updateCounterCheckThreshold",
                "initialize_flags_080057e4": "initializeFlags",
                "update_data_if_not_equal_08002f40": "updateDataIfNotEqual"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_08002f40",
                "FUN_080057e4",
                "FUN_08002f74",
                "FUN_08005360",
                "FUN_080052dc",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "update_flags_08005760",
            "code": "\nvoid update_flags_08005760(void)\n\n{\n  update_flags_08005760_080052ac(DAT_20000ed4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "update_flags_08005760"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "initialize_flags_08005778",
            "code": "\nvoid initializeFlags_08005778(void)\n\n{\n  update_flags_080052ac(DAT_20000e40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "initialize_flags_08005778"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_data_and_update_flags_08005790",
            "code": "\nvoid initialize_data_and_update_flags_08005790(void)\n\n{\n  FUNC_08005318();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    set_config_parameter(0x69);\n    initialize_data((DAT_20000ec9 + 5) * 0x15);\n    update_flags();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_data_and_update_flags_08005790",
                "set_config_parameter_08007c40": "set_config_parameter",
                "initialize_data_08007c5e": "initialize_data",
                "update_flags_08007b70": "update_flags"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_0800585c",
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_08007c40",
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007b70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "initialize_flags_080057e4",
            "code": "\nvoid initializeFlags_080057e4(void)\n\n{\n  clear_flags_08007bc2();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    FUNC_0800530c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "initialize_flags_080057e4"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_08001d4c",
                "FUN_080025e8",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_data_08005814",
            "code": "\nvoid initializeData_08005814(void)\n\n{\n  fill_memory_0800b430(&DAT_20000e14,0,0x24);\n  calculateAndSetDataRate(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_data_08005814",
                "calculate_and_update_data_rate_08005324": "calculateAndSetDataRate"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_0800b430",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_and_update_flags_0800583c",
            "code": "\nvoid initialize_and_update_flags_0800583c(void)\n\n{\n  update_flags(DAT_20000ed4);\n  initialize_data_and_update_flags();\n  initialize_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_and_update_flags_0800583c",
                "update_flags_080052ac": "update_flags",
                "initialize_data_and_update_flags_08005790": "initialize_data_and_update_flags",
                "initialize_flags_080057e4": "initialize_flags"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "initialize_data_and_update_flags_0800585c",
            "code": "\nvoid initialize_data_and_update_flags_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    initialize_data_and_update_flags_0800585c_08005790();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "initialize_data_and_update_flags_0800585c"
            },
            "calling": [
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_status_0800587c",
            "code": "\nvoid updateStatus_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_status_0800587c"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "initialize_data_080058a0",
            "code": "\nvoid initializeData_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    updateAndCalculateValues(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    calculateAndUpdateDataRate(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "initialize_data_080058a0",
                "update_and_calculate_values_08003618": "updateAndCalculateValues",
                "calculate_and_update_data_rate_08005324": "calculateAndUpdateDataRate"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08003618",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "process_byte_08005900",
            "code": "\nundefined4 processByte_08005900(byte byte)\n\n{\n  if (byte == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (byte < 0x7f) {\n    if (byte == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (byte < 0x40) {\n      if (byte == 0x18) {\n        initializeSystem();\n        return 1;\n      }\n      if (byte == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "process_byte_08005900",
                "param_1": "byte",
                "initialize_system_080025e8": "initializeSystem"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "perform_system_call_0800597c",
            "code": "\nvoid perform_system_call_0800597c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "perform_system_call_0800597c"
            },
            "calling": [
                "FUN_08005984"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "handle_system_call_08005984",
            "code": "\nundefined4 handleSystemCall_08005984(undefined4 inputData)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_20000e44 == 0) {\n    returnValue = perform_system_call_0800597c(1,inputData,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005984": "handle_system_call_08005984",
                "param_1": "inputData",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800597c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_program_080059b4",
            "code": "\n\n\nundefined4 initialize_program_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  update_memory(16000);\n  set_flags(3);\n  FUNC_08005a50();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_program_080059b4",
                "update_memory_08006d72": "update_memory",
                "set_special_flags_08006ce0": "set_flags"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08006ce0",
                "FUN_08005a50",
                "FUN_08006d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "initialize_data_080059f8",
            "code": "\n\n\nundefined4 initializeData_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  FUNC_08005a5c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "initialize_data_080059f8"
            },
            "calling": [],
            "called": [
                "FUN_08005a5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "FUN_080059f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_counter_08005a68",
            "code": "\nvoid incrementCounter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_counter_08005a68"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_global_value_08005a84",
            "code": "\nundefined4 getGlobalValue_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_global_value_08005a84"
            },
            "calling": [
                "FUN_08000268",
                "FUN_0800618c",
                "FUN_08007756",
                "FUN_08005cec",
                "FUN_08005a98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "check_param_and_offset_08005a98",
            "code": "\nvoid checkParamAndOffset_08005a98(int inputParameter)\n\n{\n  int globalValue;\n  uint localValue;\n  \n  globalValue = get_global_value_08005a84();\n  do {\n    localValue = get_global_value_08005a84();\n  } while (localValue < (uint)(inputParameter + globalValue));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "check_param_and_offset_08005a98",
                "param_1": "inputParameter",
                "iVar1": "globalValue",
                "uVar2": "localValue"
            },
            "calling": [
                "FUN_080002a0"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "update_data_08005bdc",
            "code": "\nvoid updateData_08005bdc(byte byteValue,uint bitValue)\n\n{\n  if ((char)byteValue < '\\0') {\n    *(char *)((byteValue & 0xf) + 0xe000ed14) = (char)((bitValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteValue + -0x1fff1c00) = (char)((bitValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "update_data_08005bdc",
                "param_1": "byteValue",
                "param_2": "bitValue"
            },
            "calling": [
                "FUN_08005c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_and_update_data_08005c30",
            "code": "\n\n\nbool checkAndUpdateData_08005c30(int inputValue)\n\n{\n  bool isValueValid;\n  \n  isValueValid = inputValue - 1U < 0x1000000;\n  if (isValueValid) {\n    _DAT_e000e014 = inputValue + -1;\n    update_data_08005bdc(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isValueValid;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_and_update_data_08005c30",
                "param_1": "inputValue",
                "bVar1": "isValueValid"
            },
            "calling": [
                "FUN_0800618c"
            ],
            "called": [
                "FUN_08005bdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "check_conditions_08005cec",
            "code": "\n\n\nundefined4 check_conditions_08005cec(uint *flags)\n\n{\n  int iVar1;\n  uint uVar2;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (flags_1 != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      iVar1 = get_global_value();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        uVar2 = get_global_value();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = CONCAT13(DAT_40023800_3,CONCAT12((char)flags_1,_DAT_40023800));\n      if (flags_1 == 1) {\n        iVar1 = get_global_value();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          uVar2 = get_global_value();\n          if (iVar1 + 5000U <= uVar2) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar1 = get_global_value();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          uVar2 = get_global_value();\n          if (iVar1 + 5000U <= uVar2) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (flags_3 != 1)) {\n        return 1;\n      }\n    }\n    else if (flags_3 == 0) {\n      _DAT_42470000 = 0;\n      iVar1 = get_global_value();\n      while ((_DAT_40023800 & 2) != 0) {\n        uVar2 = get_global_value();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      iVar1 = get_global_value();\n      while ((_DAT_40023800 & 2) == 0) {\n        uVar2 = get_global_value();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = flags_4 << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[5] == 0) {\n      _DAT_42470e80 = 0;\n      iVar1 = get_global_value();\n      while ((_DAT_40023874 & 2) != 0) {\n        uVar2 = get_global_value();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      iVar1 = get_global_value();\n      while ((_DAT_40023874 & 2) == 0) {\n        uVar2 = get_global_value();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    iVar1 = get_global_value();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      uVar2 = get_global_value();\n      if (iVar1 + 100U <= uVar2) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    iVar1 = get_global_value();\n    while ((_DAT_40023870 & 2) != 0) {\n      uVar2 = get_global_value();\n      if (iVar1 + 5000U <= uVar2) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)flags_2);\n    if (flags_2 == 1) {\n      iVar1 = get_global_value();\n      while ((_DAT_40023870 & 2) == 0) {\n        uVar2 = get_global_value();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar1 = get_global_value();\n      while ((_DAT_40023870 & 2) != 0) {\n        uVar2 = get_global_value();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (flags_6 != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (flags_6 == 2) {\n      _DAT_42470060 = 0;\n      iVar1 = get_global_value();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        uVar2 = get_global_value();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           flags_11 << 0x18 |\n           flags_8 | flags_9 << 6 | ((flags_10 >> 1) - 1) * 0x10000 | flags_7 |\n           0x20000000;\n      _DAT_42470060 = 1;\n      iVar1 = get_global_value();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        uVar2 = get_global_value();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      iVar1 = get_global_value();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        uVar2 = get_global_value();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "check_conditions_08005cec",
                "param_1": "flags",
                "get_global_value_08005a84": "get_global_value",
                "param_1[1]": "flags_1",
                "param_1[3]": "flags_3",
                "param_1[4]": "flags_4",
                "param_1[2]": "flags_2",
                "param_1[6]": "flags_6",
                "param_1[0xb]": "flags_11",
                "param_1[8]": "flags_8",
                "param_1[9]": "flags_9",
                "param_1[10]": "flags_10",
                "param_1[7]": "flags_7"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "process_data_0800618c",
            "code": "\n\n\nundefined4 processData_0800618c(uint *dataPointer,uint dataSize)\n\n{\n  int globalValue;\n  uint currentValue;\n  uint limitValue;\n  undefined8 clockFrequency;\n  \n  if ((_DAT_40023c00 & 0xf) < dataSize) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)dataSize);\n    if (dataSize != (dataSize & 0xf)) {\n      return 1;\n    }\n    if ((*dataPointer & 1) != 0) {\n      if (dataPointer[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((dataPointer[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = dataPointer[1] | _DAT_40023808 & 0xfffffffc;\n      globalValue = get_global_value_08005a84();\n      limitValue = globalValue + 5000;\n      if (dataPointer[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          currentValue = get_global_value_08005a84();\n          if (limitValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n      else if (dataPointer[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          currentValue = get_global_value_08005a84();\n          if (limitValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          currentValue = get_global_value_08005a84();\n          if (limitValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*dataPointer & 1) != 0) {\n      if (dataPointer[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (dataPointer[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = dataPointer[1] | _DAT_40023808 & 0xfffffffc;\n      globalValue = get_global_value_08005a84();\n      limitValue = globalValue + 5000;\n      if (dataPointer[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          currentValue = get_global_value_08005a84();\n          if (limitValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n      else if (dataPointer[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          currentValue = get_global_value_08005a84();\n          if (limitValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          currentValue = get_global_value_08005a84();\n          if (limitValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)dataSize);\n    if (dataSize != (dataSize & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*dataPointer & 2) != 0) {\n    _DAT_40023808 = dataPointer[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*dataPointer & 4) != 0) {\n    _DAT_40023808 = dataPointer[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*dataPointer & 8) != 0) {\n    _DAT_40023808 = dataPointer[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  clockFrequency = calculate_clock_frequency_and_set_data_08006628();\n  check_and_update_data_08005c30((uint)clockFrequency / 1000,(int)((ulonglong)clockFrequency >> 0x20),(uint)clockFrequency * 0x10624dd3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "process_data_0800618c",
                "param_1": "dataPointer",
                "param_2": "dataSize",
                "iVar1": "globalValue",
                "uVar2": "currentValue",
                "uVar3": "limitValue",
                "uVar4": "clockFrequency"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84",
                "FUN_08006628",
                "FUN_08005c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "update_registers_0800640c",
            "code": "\n\n\nvoid update_registers_0800640c(int condition,uint value1,uint value2)\n\n{\n  undefined4 register1;\n  undefined4 register2;\n  undefined4 register3;\n  undefined4 register4;\n  undefined4 register5;\n  \n  if (condition == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    register1 = 0x100;\n    register2 = 2;\n    register4 = 3;\n    register3 = 0;\n    register5 = 0;\n    update_registers_0800640c_08006e88(0x40020000,&register1);\n    _DAT_40023808 = value2 | value1 | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    register1 = 0x200;\n    register2 = 2;\n    register4 = 3;\n    register3 = 0;\n    register5 = 0;\n    update_registers_0800640c_08006e88(0x40020800,&register1);\n    _DAT_40023808 = value1 | value2 << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "update_registers_0800640c",
                "param_1": "condition",
                "param_2": "value1",
                "param_3": "value2",
                "local_1c": "register1",
                "local_18": "register2",
                "local_14": "register3",
                "local_10": "register4",
                "local_c": "register5"
            },
            "calling": [],
            "called": [
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_clock_frequency_080064ec",
            "code": "\n\n\nuint calculateClockFrequency_080064ec(void)\n\n{\n  uint clockConfig;\n  uint frequency;\n  \n  clockConfig = _DAT_40023808 & 0xc;\n  if (clockConfig == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      frequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      frequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return frequency / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (clockConfig < 9) {\n    if (clockConfig == 0) {\n      return 16000000;\n    }\n    if (clockConfig == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_clock_frequency_080064ec",
                "uVar1": "clockConfig",
                "local_c": "frequency"
            },
            "calling": [
                "FUN_08006628"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "calculate_clock_frequency_and_set_data_08006628",
            "code": "\n\n\nuint calculate_clock_frequency_and_set_data_08006628(void)\n\n{\n  uint clock_frequency;\n  \n  clock_frequency = calculate_clock_frequency_080064ec();\n  DAT_20000000 = clock_frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return clock_frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "calculate_clock_frequency_and_set_data_08006628",
                "uVar1": "clock_frequency"
            },
            "calling": [
                "FUN_0800618c",
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "called": [
                "FUN_080064ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "calculate_clock_frequency_08006680",
            "code": "\n\n\nuint calculateClockFrequency_08006680(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = getClockFrequencyAndSetData();\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "calculate_clock_frequency_08006680",
                "uVar1": "clockFrequency",
                "calculate_clock_frequency_and_set_data_08006628": "getClockFrequencyAndSetData"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "calculate_clock_frequency_and_set_data_080066cc",
            "code": "\n\n\nuint calculateClockFrequencyAndSetData_080066cc(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = calculate_clock_frequency_and_set_data_08006628();\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "calculate_clock_frequency_and_set_data_080066cc",
                "uVar1": "clockFrequency"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "set_special_flags_08006950",
            "code": "\n\n\nvoid setSpecialFlags_08006950(uint inputValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (inputValue & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "set_special_flags_08006950",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08006ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "get_bit_value_08006998",
            "code": "\n\n\nuint get_bit_value_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "get_bit_value_08006998"
            },
            "calling": [
                "FUN_08006d8a",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_bit_080069b4",
            "code": "\nvoid setBit_080069b4(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_bit_080069b4",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006d2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_bit_at_offset_080069e4",
            "code": "\nvoid setBitAtOffset_080069e4(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_bit_at_offset_080069e4",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006d4a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "check_bit_08006a18",
            "code": "\nbool checkBit_08006a18(byte byteValue)\n\n{\n  return (*(uint *)((((uint)(int)(char)byteValue >> 5) + 0x40) * 4 + -0x1fff1f00) &\n         1 << (byteValue & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006a18": "check_bit_08006a18",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006de0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_bit_value_08006a58",
            "code": "\nvoid setBitValue_08006a58(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_bit_value_08006a58",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006dc4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_bit_in_pointer_array_08006a8c",
            "code": "\nvoid setBitInPointerArray_08006a8c(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_bit_in_pointer_array_08006a8c",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006dfe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_bit_set_08006ac0",
            "code": "\nbool checkBitSet_08006ac0(byte input)\n\n{\n  return (*(uint *)((((uint)(int)(char)input >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (input & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_bit_set_08006ac0",
                "param_1": "input"
            },
            "calling": [
                "FUN_08006e1a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "update_memory_08006b00",
            "code": "\nvoid updateMemory_08006b00(byte address,uint value)\n\n{\n  if ((char)address < '\\0') {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "update_memory_08006b00",
                "param_1": "address",
                "param_2": "value"
            },
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "extract_nibble_08006b54",
            "code": "\nbyte extractNibble_08006b54(byte inputByte)\n\n{\n  byte result;\n  \n  if ((char)inputByte < '\\0') {\n    result = *(byte *)((inputByte & 0xf) + 0xe000ed14);\n  }\n  else {\n    result = *(byte *)((char)inputByte + -0x1fff1c00);\n  }\n  return result >> 4;\n}\n\n",
            "renaming": {
                "FUN_08006b54": "extract_nibble_08006b54",
                "param_1": "inputByte",
                "bVar1": "result"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "bitwise_operation_08006ba0",
            "code": "\nuint bitwiseOperation_08006ba0(uint inputMask,uint inputValue,uint outputMask)\n\n{\n  uint shiftAmount;\n  \n  inputMask = inputMask & 7;\n  shiftAmount = 7 - inputMask;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (inputMask + 4 < 7) {\n    inputMask = 0;\n  }\n  else {\n    inputMask = inputMask - 3;\n  }\n  return outputMask & (1 << (inputMask & 0xff)) - 1U |\n         ((1 << (shiftAmount & 0xff)) - 1U & inputValue) << (inputMask & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "bitwise_operation_08006ba0",
                "param_1": "inputMask",
                "param_2": "inputValue",
                "param_3": "outputMask",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "extract_bits_08006c04",
            "code": "\nvoid extract_bits_08006c04(uint input_value,uint bit_offset,uint *output_ptr1,uint *output_ptr2)\n\n{\n  uint shift_amount;\n  \n  bit_offset = bit_offset & 7;\n  shift_amount = 7 - bit_offset;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (bit_offset + 4 < 7) {\n    bit_offset = 0;\n  }\n  else {\n    bit_offset = bit_offset - 3;\n  }\n  *output_ptr1 = (1 << (shift_amount & 0xff)) - 1U & input_value >> (bit_offset & 0xff);\n  *output_ptr2 = (1 << (bit_offset & 0xff)) - 1U & input_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "input_value",
                "param_2": "bit_offset",
                "param_3": "output_ptr1",
                "param_4": "output_ptr2",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "wait_forever_08006c70",
            "code": "\nvoid waitForever_08006c70(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "wait_forever_08006c70",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_08006d66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_and_update_memory_08006c9c",
            "code": "\n\n\nbool checkAndUpdateMemory_08006c9c(int inputValue)\n\n{\n  bool isValueValid;\n  \n  isValueValid = inputValue - 1U < 0x1000000;\n  if (isValueValid) {\n    _DAT_e000e014 = inputValue + -1;\n    update_memory_08006b00(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isValueValid;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_and_update_memory_08006c9c",
                "param_1": "inputValue",
                "bVar1": "isValueValid"
            },
            "calling": [
                "FUN_08006d72"
            ],
            "called": [
                "FUN_08006b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "set_special_flags_08006ce0",
            "code": "\nvoid set_special_flags_08006ce0(undefined4 param)\n\n{\n  set_special_flags_08006ce0(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "set_special_flags_08006ce0",
                "param_1": "param",
                "set_special_flags_08006950": "set_special_flags"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006950"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "update_memory_with_value_08006cf6",
            "code": "\nvoid updateMemoryWithValue_08006cf6(char memoryAddress,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 bitValue;\n  \n  bitValue = getBitValue();\n  bitValue = performBitwiseOperation(bitValue,value1,value2);\n  updateMemory((int)memoryAddress,bitValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "update_memory_with_value_08006cf6",
                "param_1": "memoryAddress",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "bitValue",
                "get_bit_value_08006998": "getBitValue",
                "bitwise_operation_08006ba0": "performBitwiseOperation",
                "update_memory_08006b00": "updateMemory"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [
                "FUN_08006998",
                "FUN_08006b00",
                "FUN_08006ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "set_bit_for_param_08006d2e",
            "code": "\nvoid set_bit_for_param_08006d2e(char input_value)\n\n{\n  set_bit_080069b4((int)input_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "set_bit_for_param_08006d2e",
                "param_1": "input_value"
            },
            "calling": [],
            "called": [
                "FUN_080069b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "set_bit_at_offset_08006d4a",
            "code": "\nvoid setBitAtOffset_08006d4a(char inputParam)\n\n{\n  setBitAtOffset_08006d4aHelper((int)inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "set_bit_at_offset_08006d4a",
                "param_1": "inputParam",
                "set_bit_at_offset_080069e4": "setBitAtOffsetHelper"
            },
            "calling": [],
            "called": [
                "FUN_080069e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "wait_forever_08006d66",
            "code": "\nvoid wait_forever_08006d66(void)\n\n{\n  wait_forever_08006d66_implementation();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "wait_forever_08006d66",
                "wait_forever_08006c70": "wait_forever_implementation"
            },
            "calling": [],
            "called": [
                "FUN_08006c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "update_memory_08006d72",
            "code": "\nundefined4 updateMemory_08006d72(undefined4 inputData)\n\n{\n  undefined4 result;\n  \n  result = check_and_update_memory_08006c9c(inputData);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "update_memory_08006d72",
                "param_1": "inputData",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006c9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "get_bit_value_08006d8a",
            "code": "\nundefined4 getBitValue_08006d8a(void)\n\n{\n  undefined4 bitValue;\n  \n  bitValue = get_bit_value_08006998();\n  return bitValue;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "get_bit_value_08006d8a",
                "uVar1": "bitValue"
            },
            "calling": [],
            "called": [
                "FUN_08006998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "extract_and_process_bits_08006d98",
            "code": "\nvoid extractAndProcessBits_08006d98(char inputCharacter,undefined4 outputValue1,undefined4 outputValue2,undefined4 outputValue3)\n\n{\n  undefined4 nibbleValue;\n  \n  nibbleValue = extract_nibble_08006b54((int)inputCharacter);\n  extract_bits_08006c04(nibbleValue,outputValue1,outputValue2,outputValue3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "extract_and_process_bits_08006d98",
                "param_1": "inputCharacter",
                "param_2": "outputValue1",
                "param_3": "outputValue2",
                "param_4": "outputValue3",
                "uVar1": "nibbleValue"
            },
            "calling": [],
            "called": [
                "FUN_08006c04",
                "FUN_08006b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_bit_value_08006dc4",
            "code": "\nvoid set_bit_value_08006dc4(char bit_value)\n\n{\n  set_bit_value_08006dc4_08006a58((int)bit_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_bit_value_08006dc4",
                "param_1": "bit_value"
            },
            "calling": [],
            "called": [
                "FUN_08006a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "check_bit_08006de0",
            "code": "\nundefined4 checkBit_08006de0(char input)\n\n{\n  undefined4 bitResult;\n  \n  bitResult = check_bit_08006a18((int)input);\n  return bitResult;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "check_bit_08006de0",
                "param_1": "input",
                "uVar1": "bitResult"
            },
            "calling": [],
            "called": [
                "FUN_08006a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "set_bit_in_pointer_array_08006dfe",
            "code": "\nvoid setBitInPointerArray_08006dfe(char input)\n\n{\n  setBit((int)input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "set_bit_in_pointer_array_08006dfe",
                "param_1": "input",
                "set_bit_in_pointer_array_08006a8c": "setBit"
            },
            "calling": [],
            "called": [
                "FUN_08006a8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "check_bit_set_08006e1a",
            "code": "\nundefined4 checkBitSet_08006e1a(char input)\n\n{\n  undefined4 result;\n  \n  result = check_bit_set_08006ac0((int)input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "check_bit_set_08006e1a",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "update_registers_08006e88",
            "code": "\n\n\nvoid updateRegisters_08006e88(uint *register_values,uint *flags)\n\n{\n  uint bit_mask;\n  uint bit_check;\n  int register_index;\n  uint loop_counter;\n  \n  for (loop_counter = 0; loop_counter < 0x10; loop_counter = loop_counter + 1) {\n    bit_mask = 1 << (loop_counter & 0xff);\n    bit_check = *flags & bit_mask;\n    if (bit_check == bit_mask) {\n      if ((flags[1] == 2) || (flags[1] == 0x12)) {\n        bit_mask = flags[4];\n        register_values[(loop_counter >> 3) + 8] = register_values[(loop_counter >> 3) + 8] & ~(0xf << ((loop_counter & 7) << 2));\n        register_values[(loop_counter >> 3) + 8] = register_values[(loop_counter >> 3) + 8] | bit_mask << ((loop_counter & 7) << 2);\n      }\n      *register_values = *register_values & ~(3 << ((loop_counter & 0x7f) << 1));\n      *register_values = *register_values | (flags[1] & 3) << ((loop_counter & 0x7f) << 1);\n      if ((((flags[1] == 1) || (flags[1] == 2)) || (flags[1] == 0x11)) || (flags[1] == 0x12)\n         ) {\n        register_values[2] = register_values[2] & ~(3 << ((loop_counter & 0x7f) << 1));\n        register_values[2] = register_values[2] | flags[3] << ((loop_counter & 0x7f) << 1);\n        register_values[1] = register_values[1] & ~(1 << (loop_counter & 0xff));\n        register_values[1] = register_values[1] | (flags[1] >> 4 & 1) << (loop_counter & 0xff);\n      }\n      register_values[3] = register_values[3] & ~(3 << ((loop_counter & 0x7f) << 1));\n      register_values[3] = register_values[3] | flags[2] << ((loop_counter & 0x7f) << 1);\n      if ((flags[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((loop_counter >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((loop_counter & 3) << 2)) & *(uint *)(((loop_counter >> 2) + 2) * 4 + 0x40013800);\n        if (register_values == (uint *)0x40020000) {\n          register_index = 0;\n        }\n        else if (register_values == (uint *)0x40020400) {\n          register_index = 1;\n        }\n        else if (register_values == (uint *)0x40020800) {\n          register_index = 2;\n        }\n        else if (register_values == (uint *)0x40020c00) {\n          register_index = 3;\n        }\n        else if (register_values == (uint *)0x40021000) {\n          register_index = 4;\n        }\n        else if (register_values == (uint *)0x40021400) {\n          register_index = 5;\n        }\n        else if (register_values == (uint *)0x40021800) {\n          register_index = 6;\n        }\n        else if (register_values == (uint *)0x40021c00) {\n          register_index = 7;\n        }\n        else if (register_values == (uint *)0x40022000) {\n          register_index = 8;\n        }\n        else if (register_values == (uint *)0x40022400) {\n          register_index = 9;\n        }\n        else {\n          register_index = 10;\n        }\n        *(uint *)(((loop_counter >> 2) + 2) * 4 + 0x40013800) =\n             register_index << ((loop_counter & 3) << 2) | *(uint *)(((loop_counter >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bit_check & _DAT_40013c00;\n        _DAT_40013c04 = ~bit_check & _DAT_40013c04;\n        if ((flags[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bit_check | _DAT_40013c00;\n        }\n        if ((flags[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bit_check | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bit_check & _DAT_40013c08;\n        _DAT_40013c0c = ~bit_check & _DAT_40013c0c;\n        if ((flags[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bit_check | _DAT_40013c08;\n        }\n        if ((flags[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bit_check | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "update_registers_08006e88",
                "param_1": "register_values",
                "param_2": "flags",
                "uVar1": "bit_mask",
                "uVar2": "bit_check",
                "iVar3": "register_index",
                "local_c": "loop_counter"
            },
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "update_param_0800733e",
            "code": "\nvoid updateParam_0800733e(int baseAddress,undefined2 newValue,char isSecondParameter)\n\n{\n  if (isSecondParameter == '\\0') {\n    *(undefined2 *)(baseAddress + 0x1a) = newValue;\n  }\n  else {\n    *(undefined2 *)(baseAddress + 0x18) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "update_param_0800733e",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "param_3": "isSecondParameter"
            },
            "calling": [
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "update_data_and_call_function_0800738e",
            "code": "\n\n\nvoid updateDataAndCallFunction_0800738e(ushort data)\n\n{\n  if ((data & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)data;\n    FUNC_080073c0(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "update_data_and_call_function_0800738e",
                "param_1": "data"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "FUNC_080073c0",
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "calling": [
                "FUN_0800738e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "set_bit_in_memory_080073d4",
            "code": "\nvoid setBitInMemory_080073d4(uint input)\n\n{\n  *(short *)(((int)input >> 4) * 0x400 + 0x4002001a) = (short)(1 << (input & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "set_bit_in_memory_080073d4",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007520"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "set_bit_in_memory_08007402",
            "code": "\nvoid setBitInMemory_08007402(uint input)\n\n{\n  *(short *)(((int)input >> 4) * 0x400 + 0x40020018) = (short)(1 << (input & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007402": "set_bit_in_memory_08007402",
                "param_1": "input"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "infinite_loop_08007430",
            "code": "\nvoid infiniteLoop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "initialize_system_08007436",
            "code": "\n\n\nvoid initializeSystem_08007436(void)\n\n{\n  int iVar1;\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 value1;\n  undefined4 address1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 threshold;\n  undefined4 value6;\n  undefined4 counter;\n  undefined4 address2;\n  undefined4 address3;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag1 = 1;\n  flag2 = 1;\n  value1 = 2;\n  address1 = 0x400000;\n  value2 = 8;\n  value3 = 0x150;\n  value4 = 2;\n  value5 = 7;\n  iVar1 = check_conditions_08005cec(&flag1);\n  if (iVar1 != 0) {\n    infinite_loop_08007430();\n  }\n  threshold = 0xf;\n  value6 = 2;\n  counter = 0;\n  address2 = 0x1400;\n  address3 = 0x1000;\n  iVar1 = process_data_0800618c(&threshold,5);\n  if (iVar1 != 0) {\n    infinite_loop_08007430();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "initialize_system_08007436",
                "local_4c": "flag1",
                "local_48": "flag2",
                "local_34": "value1",
                "local_30": "address1",
                "local_2c": "value2",
                "local_28": "value3",
                "local_24": "value4",
                "local_20": "value5",
                "local_1c": "threshold",
                "local_18": "value6",
                "local_14": "counter",
                "local_10": "address2",
                "local_c": "address3"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800618c",
                "FUN_08007430",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "process_flags_080074c8",
            "code": "\nvoid process_flags_080074c8(uint flags)\n\n{\n  if ((flags & 1) != 0) {\n    setMemoryBit(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((flags & 0x1e) != 0)) {\n    initializeSystemIfNeeded();\n  }\n  if ((DAT_20000e50 != 0) && ((flags & 0x80) != 0)) {\n    processParameter(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "process_flags_080074c8",
                "param_1": "flags",
                "set_bit_in_memory_08007402": "setMemoryBit",
                "initialize_system_if_needed_0800195c": "initializeSystemIfNeeded",
                "process_parameter_08003a18": "processParameter"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08003a18",
                "FUN_08007402",
                "FUN_0800195c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "set_bit_if_odd_08007520",
            "code": "\nvoid setBitIfOdd_08007520(uint input)\n\n{\n  if ((input & 1) != 0) {\n    setMemoryBit(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "set_bit_if_odd_08007520",
                "param_1": "input",
                "set_bit_in_memory_080073d4": "setMemoryBit"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_080073d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_program_08007540",
            "code": "\nUNITIALIZED initialize_program_08007540(void)\n\n{\n  initialize_program_08007540();\n  initialize_system();\n  initialize_registers();\n  setup_system();\n  initialize_memory();\n  initialize_memory_protection();\n  handle_system_call(0);\n  process_data();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_program_08007540",
                "initialize_program_080059b4": "initialize_program",
                "initialize_system_08007436": "initialize_system",
                "initialize_registers_0800778c": "initialize_registers",
                "initialize_system_08007e08": "setup_system",
                "initialize_memory_080079c0": "initialize_memory",
                "initialize_memory_protection_08008190": "initialize_memory_protection",
                "handle_system_call_08005984": "handle_system_call",
                "initialize_and_process_data_08001ddc": "process_data",
                "undefined4": "UNITIALIZED"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005984",
                "FUN_08007436",
                "FUN_08007e08",
                "FUN_080079c0",
                "FUN_080059b4",
                "FUN_08001ddc",
                "FUN_0800778c",
                "FUN_08008190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_device_0800756c",
            "code": "\n\n\nvoid initializeDevice_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_device_0800756c"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "update_bit_in_memory_080076c8",
            "code": "\nvoid updateBitInMemory_080076c8(unsignedInteger input)\n\n{\n  *(unsignedInteger *)(((int)input >> 4) * 0x400 + 0x40020014) =\n       *(unsignedInteger *)(((int)input >> 4) * 0x400 + 0x40020014) ^ 1 << (input & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "update_bit_in_memory_080076c8",
                "param_1": "input",
                "uint": "unsignedInteger"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "update_global_values_08007756",
            "code": "\nvoid updateGlobalValues_08007756(void)\n\n{\n  uint globalValue;\n  \n  globalValue = getGlobalValue();\n  if ((globalValue & 0x1ff) == 0) {\n    updateMemoryBit(0x3c);\n  }\n  if ((globalValue & 0xf) == 0) {\n    updateData();\n  }\n  incrementCounter();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "update_global_values_08007756",
                "uVar1": "globalValue",
                "get_global_value_08005a84": "getGlobalValue",
                "update_bit_in_memory_080076c8": "updateMemoryBit",
                "update_data_08007930": "updateData",
                "increment_counter_08005a68": "incrementCounter"
            },
            "calling": [],
            "called": [
                "FUN_08005a84",
                "FUN_08005a68",
                "FUN_08007930",
                "FUN_080076c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "initialize_registers_0800778c",
            "code": "\n\n\nvoid initialize_registers_0800778c(void)\n\n{\n  int iVar1;\n  int bit_shifted_value;\n  undefined4 register_1;\n  undefined4 register_2;\n  undefined4 register_3;\n  undefined4 register_4;\n  uint *pointer;\n  uint counter;\n  \n  for (counter = 0; counter < 0x11; counter = counter + 1) {\n    iVar1 = counter * 0x18;\n    pointer = (uint *)(&DAT_0800bcbc + iVar1);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*pointer >> 4 & 0xff);\n    bit_shifted_value = 1 << (*pointer & 0xf);\n    register_1 = *(undefined4 *)(&DAT_0800bcc0 + iVar1);\n    register_2 = *(undefined4 *)(&DAT_0800bcc4 + iVar1);\n    register_3 = *(undefined4 *)(&DAT_0800bcc8 + iVar1);\n    register_4 = *(undefined4 *)(&DAT_0800bccc + iVar1);\n    update_registers_08006e88(((*pointer >> 4) + 0x100080) * 0x400,&bit_shifted_value);\n    if (-1 < (int)pointer[5]) {\n      update_param_0800733e(((*pointer >> 4) + 0x100080) * 0x400,1 << (*pointer & 0xf) & 0xffff,\n                   pointer[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "initialize_registers_0800778c",
                "local_24": "bit_shifted_value",
                "local_20": "register_1",
                "local_1c": "register_2",
                "local_18": "register_3",
                "local_14": "register_4",
                "local_10": "pointer",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "get_bit_from_memory_08007854",
            "code": "\nuint get_bit_from_memory_08007854(uint input)\n\n{\n  return *(uint *)(((int)input >> 4) * 0x400 + 0x40020010) >> (input bitwise_and 0xf) bitwise_and 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "get_bit_from_memory_08007854",
                "param_1": "input",
                "&": "bitwise_and"
            },
            "calling": [
                "FUN_08007884"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "get_combined_bits_08007884",
            "code": "\nuint get_combined_bits_08007884(void)\n\n{\n  int bit_0x36;\n  int bit_0x37;\n  int bit_0x38;\n  int bit_0x39;\n  int bit_0xf;\n  uint bit_0x0;\n  \n  bit_0x36 = get_bit_from_memory_08007854(0x36);\n  bit_0x37 = get_bit_from_memory_08007854(0x37);\n  bit_0x38 = get_bit_from_memory_08007854(0x38);\n  bit_0x39 = get_bit_from_memory_08007854(0x39);\n  bit_0xf = get_bit_from_memory_08007854(0xf);\n  bit_0x0 = get_bit_from_memory_08007854(0);\n  return bit_0x0 | bit_0x36 << 4 | bit_0x37 << 3 | bit_0x38 << 2 | bit_0x39 << 1 | bit_0xf << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "get_combined_bits_08007884",
                "iVar1": "bit_0x36",
                "iVar2": "bit_0x37",
                "iVar3": "bit_0x38",
                "iVar4": "bit_0x39",
                "iVar5": "bit_0xf",
                "uVar6": "bit_0x0"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08007854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "calculate_sum_080078f4",
            "code": "\nuint calculateSum_080078f4(void)\n\n{\n  int index;\n  uint result;\n  \n  result = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    result = *(uint *)(&DAT_20000e54 + index * 4) | result;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "calculate_sum_080078f4",
                "local_10": "index",
                "local_c": "result"
            },
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "update_data_08007930",
            "code": "\nvoid updateData_08007930(void)\n\n{\n  int dataIndex;\n  uint previousValue;\n  undefined4 combinedBits;\n  uint sum;\n  uint bitwiseDifference;\n  \n  dataIndex = DAT_20000e68;\n  previousValue = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    combinedBits = get_combined_bits_08007884();\n    *(undefined4 *)(&DAT_20000e54 + dataIndex * 4) = combinedBits;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    sum = calculate_sum_080078f4();\n    previousValue = DAT_20000e64;\n    if (sum != DAT_20000e64) {\n      bitwiseDifference = ~sum & DAT_20000e64;\n      if ((~DAT_20000e64 & sum) != 0) {\n        process_flags_080074c8(~DAT_20000e64 & sum);\n      }\n      previousValue = sum;\n      if (bitwiseDifference != 0) {\n        set_bit_if_odd_08007520(bitwiseDifference);\n      }\n    }\n  }\n  DAT_20000e64 = previousValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "update_data_08007930",
                "iVar1": "dataIndex",
                "uVar2": "previousValue",
                "uVar3": "combinedBits",
                "uVar4": "sum",
                "uVar5": "bitwiseDifference"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [
                "FUN_080078f4",
                "FUN_08007520",
                "FUN_080074c8",
                "FUN_08007884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_memory_080079c0",
            "code": "\nvoid initializeMemory_080079c0(void)\n\n{\n  fill_memory_0800b430(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_memory_080079c0"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_bit_in_memory_080079e0",
            "code": "\nvoid setBitInMemory_080079e0(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_bit_in_memory_080079e0",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "update_flags_08007a10",
            "code": "\n\n\nvoid updateFlags_08007a10(undefined *memoryAddress)\n\n{\n  if (memoryAddress == (undefined *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (memoryAddress == (undefined *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (memoryAddress == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "update_flags_08007a10",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08007d08",
                "FUN_08007ad0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "update_memory_and_set_bit_08007a70",
            "code": "\nvoid update_memory_and_set_bit_08007a70(undefined *data_pointer,undefined4 value_1,undefined4 value_2)\n\n{\n  undefined memory_category;\n  \n  if (data_pointer == (undefined *)0x40000000) {\n    memory_category = 0x1c;\n  }\n  else if (data_pointer == (undefined *)0x40000400) {\n    memory_category = 0x1d;\n  }\n  else {\n    if (data_pointer != &DAT_40000800) {\n      return;\n    }\n    memory_category = 0x1e;\n  }\n  update_memory_with_value_08006cf6(memory_category,value_1,value_2);\n  set_bit_in_memory_080079e0(memory_category);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "update_memory_and_set_bit_08007a70",
                "param_1": "data_pointer",
                "param_2": "value_1",
                "param_3": "value_2",
                "local_c": "memory_category"
            },
            "calling": [
                "FUN_08007ad0"
            ],
            "called": [
                "FUN_08006cf6",
                "FUN_080079e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_memory_08007ad0",
            "code": "\n\n\nvoid initializeMemory_08007ad0(void)\n\n{\n  updateFlags(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  updateMemoryAndSetBit(0x40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_memory_08007ad0",
                "update_flags_08007a10": "updateFlags",
                "update_memory_and_set_bit_08007a70": "updateMemoryAndSetBit"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10",
                "FUN_08007a70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "update_flags_08007b70",
            "code": "\n\n\nvoid updateFlags_08007b70(void)\n\n{\n  uint local_c;\n  \n  local_c = 1;\n  if (_DAT_40000034 != 0) {\n    local_c = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    local_c = local_c | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | local_c;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "update_flags_08007b70"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "clear_flags_08007bc2",
            "code": "\n\n\nvoid clearFlags_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "clear_flags_08007bc2"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "update_parameter_and_min_value_08007bf0",
            "code": "\n\n\nvoid updateParameterAndMinValue_08007bf0(uint newValue)\n\n{\n  _DAT_4000002c = newValue;\n  if (newValue <= _DAT_40000024) {\n    _DAT_40000024 = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "update_parameter_and_min_value_08007bf0",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08005324"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "set_config_parameter_08007c40",
            "code": "\n\n\nvoid setConfigParameter_08007c40(undefined4 configValue)\n\n{\n  _DAT_40000034 = configValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "set_config_parameter_08007c40",
                "param_1": "configValue"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "initialize_data_08007c5e",
            "code": "\n\n\nvoid initializeData_08007c5e(undefined4 data)\n\n{\n  _DAT_40000038 = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "initialize_data_08007c5e",
                "param_1": "data"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "initialize_and_update_flags_08007c7c",
            "code": "\n\n\nvoid initialize_and_update_flags_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    initialize_flags();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    update_flags();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    update_data_and_rate();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "initialize_and_update_flags_08007c7c",
                "initialize_flags_08005778": "initialize_flags",
                "update_flags_08005760": "update_flags",
                "update_data_and_rate_080053a0": "update_data_and_rate"
            },
            "calling": [],
            "called": [
                "FUN_08005760",
                "FUN_08005778",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_hardware_08007d08",
            "code": "\n\n\nvoid initializeHardware_08007d08(void)\n\n{\n  updateFlags(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_hardware_08007d08",
                "update_flags_08007a10": "updateFlags"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "set_bits_in_registers_08007da8",
            "code": "\n\n\nvoid setBitsInRegisters_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "set_bits_in_registers_08007da8"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_system_08007e08",
            "code": "\nvoid initialize_system_08007e08(void)\n\n{\n  initialize_memory();\n  initialize_hardware();\n  configure_registers();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_system_08007e08",
                "initialize_memory_08007ad0": "initialize_memory",
                "initialize_hardware_08007d08": "initialize_hardware",
                "set_bits_in_registers_08007da8": "configure_registers"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007d08",
                "FUN_08007ad0",
                "FUN_08007da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "wait_until_flag_is_set_08007e1c",
            "code": "\n\n\nvoid wait_until_flag_is_set_08007e1c(byte data)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "wait_until_flag_is_set_08007e1c",
                "param_1": "data"
            },
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "check_flag_set_08007e58",
            "code": "\n\n\nbool checkFlagSet_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007e58": "check_flag_set_08007e58"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_lowest_byte_08007e84",
            "code": "\n\n\nuint get_lowest_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_lowest_byte_08007e84"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "update_memory_protection_08007ea4",
            "code": "\n\n\nvoid updateMemoryProtection_08007ea4(undefined *address)\n\n{\n  if (address == (undefined *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (address == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (address == (undefined *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (address == (undefined *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (address == (undefined *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (address == (undefined *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "update_memory_protection_08007ea4",
                "param_1": "address"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "calculate_clock_frequency_and_set_data_08007f54",
            "code": "\nvoid calculateClockFrequencyAndSetData_08007f54(int memoryAddress,int multiplier)\n\n{\n  ulonglong frequency;\n  int result1;\n  int result2;\n  undefined8 clockFrequency;\n  \n  if ((*(uint *)(memoryAddress + 0xc) & 0x8000) == 0) {\n    if ((memoryAddress != 0x40011000) && (memoryAddress != 0x40011400)) {\n      clockFrequency = calculate_clock_frequency_08006680();\n      frequency = (ulonglong)(uint)((int)clockFrequency * 0x19) / (ulonglong)(uint)(multiplier << 2);\n      result1 = calculate_clock_frequency_08006680((int)clockFrequency,(int)((ulonglong)clockFrequency >> 0x20),(int)(frequency * 0x51eb851f));\n      result2 = calculate_clock_frequency_08006680();\n      *(uint *)(memoryAddress + 8) =\n           (int)(frequency / 100) << 4 |\n           (((uint)(result1 * 0x19) / (uint)(multiplier << 2) +\n            (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(multiplier << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clockFrequency = calculate_clock_frequency_and_set_data_080066cc();\n    frequency = (ulonglong)(uint)((int)clockFrequency * 0x19) / (ulonglong)(uint)(multiplier << 2);\n    result1 = calculate_clock_frequency_and_set_data_080066cc((int)clockFrequency,(int)((ulonglong)clockFrequency >> 0x20),(int)(frequency * 0x51eb851f));\n    result2 = calculate_clock_frequency_and_set_data_080066cc();\n    *(uint *)(memoryAddress + 8) =\n         (int)(frequency / 100) << 4 |\n         (((uint)(result1 * 0x19) / (uint)(multiplier << 2) +\n          (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(multiplier << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((memoryAddress != 0x40011000) && (memoryAddress != 0x40011400)) {\n      clockFrequency = calculate_clock_frequency_08006680();\n      frequency = (ulonglong)(uint)((int)clockFrequency * 0x19) / (ulonglong)(uint)(multiplier << 1);\n      result1 = calculate_clock_frequency_08006680((int)clockFrequency,(int)((ulonglong)clockFrequency >> 0x20),(int)(frequency * 0x51eb851f));\n      result2 = calculate_clock_frequency_08006680();\n      *(uint *)(memoryAddress + 8) =\n           (int)(frequency / 100) << 4 |\n           (((uint)(result1 * 0x19) / (uint)(multiplier << 1) +\n            (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(multiplier << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clockFrequency = calculate_clock_frequency_and_set_data_080066cc();\n    frequency = (ulonglong)(uint)((int)clockFrequency * 0x19) / (ulonglong)(uint)(multiplier << 1);\n    result1 = calculate_clock_frequency_and_set_data_080066cc((int)clockFrequency,(int)((ulonglong)clockFrequency >> 0x20),(int)(frequency * 0x51eb851f));\n    result2 = calculate_clock_frequency_and_set_data_080066cc();\n    *(uint *)(memoryAddress + 8) =\n         (int)(frequency / 100) << 4 |\n         (((uint)(result1 * 0x19) / (uint)(multiplier << 1) +\n          (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(multiplier << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "calculate_clock_frequency_and_set_data_08007f54",
                "param_1": "memoryAddress",
                "param_2": "multiplier",
                "uVar1": "frequency",
                "iVar2": "result1",
                "iVar3": "result2",
                "uVar4": "clockFrequency"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "initialize_memory_protection_08008190",
            "code": "\n\n\nvoid initializeMemoryProtection_08008190(void)\n\n{\n  update_memory_protection_08007ea4(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  calculate_clock_frequency_and_set_data_08007f54(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "initialize_memory_protection_08008190"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007ea4",
                "FUN_08007f54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "wait_until_flag_is_set_08008250",
            "code": "\nvoid wait_until_flag_is_set_08008250(undefined param)\n\n{\n  wait_until_flag_set(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "wait_until_flag_is_set_08008250",
                "param_1": "param",
                "wait_until_flag_is_set_08007e1c": "wait_until_flag_set"
            },
            "calling": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080036f0"
            ],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "wait_until_flag_is_set_0800826a",
            "code": "\nundefined4 wait_until_flag_is_set_0800826a(undefined param)\n\n{\n  wait_until_flag_is_set_0800826a_08007e1c(param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "wait_until_flag_is_set_0800826a",
                "param_1": "param"
            },
            "calling": [],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "check_and_process_byte_08008286",
            "code": "\nundefined checkAndProcessByte_08008286(void)\n\n{\n  undefined lowestByte;\n  int flag;\n  \n  flag = check_flag_set_08007e58();\n  if (flag != 0) {\n    lowestByte = get_lowest_byte_08007e84();\n    flag = process_byte_08005900(lowestByte);\n    if (flag == 0) {\n      return lowestByte;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "check_and_process_byte_08008286",
                "iVar2": "flag",
                "uVar1": "lowestByte"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08005900",
                "FUN_08007e58",
                "FUN_08007e84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "reverse_bits_080082d0",
            "code": "\nulonglong reverseBits_080082d0(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int bitShift1;\n  byte carryBit;\n  uint sum1;\n  uint sum2;\n  uint sum3;\n  uint carry;\n  uint result1;\n  int bitShift2;\n  uint result2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool isTrue;\n  bool isCarry;\n  \n  carry = input4 ^ 0x80000000;\n  result2 = input2 << 1;\n  input4 = input4 << 1;\n  isZero = ((input2 ^ carry) & 0x7fffffff) == 0;\n  isTrue = isZero && input1 == input3;\n  if (!isZero || input1 != input3) {\n    isTrue = (result2 | input1) == 0;\n  }\n  if (!isTrue) {\n    isTrue = (input4 | input3) == 0;\n  }\n  bitShift2 = (int)result2 >> 0x15;\n  if (!isTrue) {\n    isTrue = bitShift2 == -1;\n  }\n  bitShift1 = (int)input4 >> 0x15;\n  if (!isTrue) {\n    isTrue = bitShift1 == -1;\n  }\n  if (isTrue) {\n    if (bitShift2 == -1 || bitShift1 == -1) {\n      result2 = carry;\n      temp2 = input3;\n      if (bitShift2 == -1) {\n        result2 = input2;\n        temp2 = input1;\n      }\n      if (bitShift2 != -1 || bitShift1 != -1) {\n        input3 = temp2;\n        carry = result2;\n      }\n      isTrue = (temp2 | result2 << 0xc) == 0;\n      if (isTrue) {\n        isTrue = (input3 | carry << 0xc) == 0;\n      }\n      if (isTrue) {\n        isTrue = result2 == carry;\n      }\n      if (!isTrue) {\n        result2 = result2 | 0x80000;\n      }\n      return CONCAT44(result2,temp2);\n    }\n    if (((input2 ^ carry) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((result2 | input1) == 0) {\n        input1 = input3;\n        input2 = carry;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != carry) {\n      return 0;\n    }\n    if (result2 >> 0x15 == 0) {\n      isTrue = (input1 & 0x80000000) != 0;\n      carry = input2 * 2 + (uint)isTrue;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)isTrue)) {\n        carry = carry | 0x80000000;\n      }\n      return CONCAT44(carry,input1 << 1);\n    }\n    if (result2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  result2 = result2 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp2 = input4 - result2;\n  isTrue = temp2 != 0;\n  if (input4 < result2) {\n    temp2 = -temp2;\n  }\n  temp1 = input1;\n  result1 = input2;\n  if (isTrue && result2 <= input4) {\n    result2 = result2 + temp2;\n    temp1 = input3;\n    result1 = carry;\n    input3 = input1;\n    carry = input2;\n  }\n  if (0x36 < temp2) {\n    return CONCAT44(result1,temp1);\n  }\n  sum2 = result1 & 0xfffff | 0x100000;\n  if ((result1 & 0x80000000) != 0) {\n    isTrue = temp1 != 0;\n    temp1 = -temp1;\n    sum2 = -sum2 - (uint)isTrue;\n  }\n  result1 = carry & 0xfffff | 0x100000;\n  if ((carry & 0x80000000) != 0) {\n    isTrue = input3 != 0;\n    input3 = -input3;\n    result1 = -result1 - (uint)isTrue;\n  }\n  if (result2 == temp2) {\n    result1 = result1 ^ 0x100000;\n    if (result2 == 0) {\n      sum2 = sum2 ^ 0x100000;\n      result2 = 1;\n    }\n    else {\n      temp2 = temp2 - 1;\n    }\n  }\n  carry = -temp2 + 0x20;\n  if ((int)temp2 < 0x21) {\n    temp3 = input3 << (carry & 0xff);\n    input3 = input3 >> (temp2 & 0xff);\n    sum1 = temp1 + input3;\n    sum3 = result1 << (carry & 0xff);\n    carry = sum1 + sum3;\n    sum2 = sum2 + CARRY4(temp1,input3) + ((int)result1 >> (temp2 & 0xff)) +\n            (uint)CARRY4(sum1,sum3);\n  }\n  else {\n    temp3 = result1 << (-temp2 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp3 = temp3 | 2;\n    }\n    result1 = (int)result1 >> (temp2 - 0x20 & 0xff);\n    carry = temp1 + result1;\n    sum2 = sum2 + ((int)result1 >> 0x1f) + (uint)CARRY4(temp1,result1);\n  }\n  input2 = sum2 & 0x80000000;\n  temp2 = sum2;\n  if ((int)sum2 < 0) {\n    isTrue = temp3 == 0;\n    temp3 = -temp3;\n    temp2 = -carry;\n    carry = -(uint)!isTrue - carry;\n    temp2 = -(uint)(isTrue <= temp2) - sum2;\n  }\n  if (0xfffff < temp2) {\n    temp1 = result2 - 1;\n    if (0x1fffff < temp2) {\n      temp1 = temp2 & 1;\n      temp2 = temp2 >> 1;\n      carryBit = (byte)carry;\n      carry = (uint)(temp1 != 0) << 0x1f | carry >> 1;\n      temp3 = (uint)(carryBit & 1) << 0x1f | temp3 >> 1;\n      temp1 = result2;\n      if (0xffbfffff < result2 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    isTrue = 0x7fffffff < temp3;\n    if (temp3 == 0x80000000) {\n      isTrue = (carry & 1) != 0;\n    }\n    return CONCAT44(temp2 + temp1 * 0x100000 + (uint)CARRY4(carry,(uint)isTrue) | input2,\n                    carry + isTrue);\n  }\n  isZero = (temp3 & 0x80000000) != 0;\n  temp3 = temp3 << 1;\n  temp1 = carry * 2;\n  isTrue = CARRY4(carry,carry);\n  carry = carry * 2 + (uint)isZero;\n  temp2 = temp2 * 2 + (uint)(isTrue || CARRY4(temp1,(uint)isZero));\n  temp1 = result2 - 2;\n  if (result2 - 1 != 0 && 0xfffff < temp2) goto LAB_080083e0;\n  result1 = carry;\n  result2 = temp2;\n  if (temp2 == 0) {\n    result1 = 0;\n    result2 = carry;\n  }\n  bitShift2 = LZCOUNT(result2);\n  if (temp2 == 0) {\n    bitShift2 = bitShift2 + 0x20;\n  }\n  temp2 = bitShift2 - 0xb;\n  isCarry = SBORROW4(temp2,0x20);\n  carry = bitShift2 - 0x2b;\n  isTrue = (int)carry < 0;\n  isZero = carry == 0;\n  if ((int)temp2 < 0x20) {\n    isCarry = SCARRY4(carry,0xc);\n    bitShift2 = bitShift2 + -0x1f;\n    isTrue = bitShift2 < 0;\n    isZero = bitShift2 == 0;\n    carry = temp2;\n    if (!isZero && isTrue == isCarry) {\n      result1 = result2 << (temp2 & 0xff);\n      result2 = result2 >> (0xcU - bitShift2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isZero || isTrue != isCarry) {\n    temp3 = 0x20 - carry;\n  }\n  result2 = result2 << (carry & 0xff);\n  if (isZero || isTrue != isCarry) {\n    result2 = result2 | result1 >> (temp3 & 0xff);\n  }\n  if (isZero || isTrue != isCarry) {\n    result1 = result1 << (carry & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp2 <= (int)temp1) {\n    return CONCAT44(result2 + (temp1 - temp2) * 0x100000 | input2,result1);\n  }\n  carry = ~(temp1 - temp2);\n  if ((int)carry < 0x1f) {\n    bitShift2 = carry - 0x13;\n    if (bitShift2 != 0 && bitShift2 < 0 == SCARRY4(carry - 0x1f,0xc)) {\n      return CONCAT44(sum2,result1 >> (0x20 - (0xcU - bitShift2) & 0xff) | result2 << (0xcU - bitShift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    carry = carry + 1;\n    return CONCAT44(input2 | result2 >> (carry & 0xff),\n                    result1 >> (carry & 0xff) | result2 << (0x20 - carry & 0xff));\n  }\n  return CONCAT44(sum2,result2 >> (carry - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "reverse_bits_080082d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "bitShift1",
                "bVar2": "carryBit",
                "uVar3": "sum1",
                "uVar4": "sum2",
                "uVar5": "sum3",
                "uVar6": "carry",
                "uVar7": "result1",
                "iVar8": "bitShift2",
                "uVar9": "result2",
                "uVar10": "temp1",
                "uVar11": "temp2",
                "uVar12": "temp3",
                "bVar13": "isZero",
                "bVar14": "isTrue",
                "bVar15": "isCarry"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_080096e8",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009990",
                "FUN_08009410",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "calculate_double_precision_080082d4",
            "code": "\nulonglong calculate_double_precision_080082d4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int shift_amount_1;\n  byte bit;\n  uint add_temp_1;\n  uint shifted_value_1;\n  uint add_temp_2;\n  int shift_amount_2;\n  uint shifted_value_2;\n  uint result_1;\n  uint result_2;\n  uint carry;\n  uint sign_extension;\n  uint shifted_value_3;\n  bool is_equal;\n  bool check_condition;\n  bool is_less_than;\n  \n  shifted_value_2 = input_2 << 1;\n  result_2 = input_4 << 1;\n  is_equal = ((input_2 ^ input_4) & 0x7fffffff) == 0;\n  check_condition = is_equal && input_1 == input_3;\n  if (!is_equal || input_1 != input_3) {\n    check_condition = (shifted_value_2 | input_1) == 0;\n  }\n  if (!check_condition) {\n    check_condition = (result_2 | input_3) == 0;\n  }\n  shift_amount_2 = (int)shifted_value_2 >> 0x15;\n  if (!check_condition) {\n    check_condition = shift_amount_2 == -1;\n  }\n  shift_amount_1 = (int)result_2 >> 0x15;\n  if (!check_condition) {\n    check_condition = shift_amount_1 == -1;\n  }\n  if (check_condition) {\n    if (shift_amount_2 == -1 || shift_amount_1 == -1) {\n      result_2 = input_4;\n      shifted_value_2 = input_3;\n      if (shift_amount_2 == -1) {\n        result_2 = input_2;\n        shifted_value_2 = input_1;\n      }\n      if (shift_amount_2 != -1 || shift_amount_1 != -1) {\n        input_3 = shifted_value_2;\n        input_4 = result_2;\n      }\n      check_condition = (shifted_value_2 | result_2 << 0xc) == 0;\n      if (check_condition) {\n        check_condition = (input_3 | input_4 << 0xc) == 0;\n      }\n      if (check_condition) {\n        check_condition = result_2 == input_4;\n      }\n      if (!check_condition) {\n        result_2 = result_2 | 0x80000;\n      }\n      return CONCAT44(result_2,shifted_value_2);\n    }\n    if (((input_2 ^ input_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((shifted_value_2 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = input_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != input_4) {\n      return 0;\n    }\n    if (shifted_value_2 >> 0x15 == 0) {\n      check_condition = (input_1 & 0x80000000) != 0;\n      result_2 = input_2 * 2 + (uint)check_condition;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)check_condition)) {\n        result_2 = result_2 | 0x80000000;\n      }\n      return CONCAT44(result_2,input_1 << 1);\n    }\n    if (shifted_value_2 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  shifted_value_2 = shifted_value_2 >> 0x15;\n  result_2 = result_2 >> 0x15;\n  carry = result_2 - shifted_value_2;\n  check_condition = carry != 0;\n  if (result_2 < shifted_value_2) {\n    carry = -carry;\n  }\n  result_1 = input_1;\n  add_temp_2 = input_2;\n  if (check_condition && shifted_value_2 <= result_2) {\n    shifted_value_2 = shifted_value_2 + carry;\n    result_1 = input_3;\n    add_temp_2 = input_4;\n    input_3 = input_1;\n    input_4 = input_2;\n  }\n  if (0x36 < carry) {\n    return CONCAT44(add_temp_2,result_1);\n  }\n  result_2 = add_temp_2 & 0xfffff | 0x100000;\n  if ((add_temp_2 & 0x80000000) != 0) {\n    check_condition = result_1 != 0;\n    result_1 = -result_1;\n    result_2 = -result_2 - (uint)check_condition;\n  }\n  add_temp_2 = input_4 & 0xfffff | 0x100000;\n  if ((input_4 & 0x80000000) != 0) {\n    check_condition = input_3 != 0;\n    input_3 = -input_3;\n    add_temp_2 = -add_temp_2 - (uint)check_condition;\n  }\n  if (shifted_value_2 == carry) {\n    add_temp_2 = add_temp_2 ^ 0x100000;\n    if (shifted_value_2 == 0) {\n      result_2 = result_2 ^ 0x100000;\n      shifted_value_2 = 1;\n    }\n    else {\n      carry = carry - 1;\n    }\n  }\n  shifted_value_3 = -carry + 0x20;\n  if ((int)carry < 0x21) {\n    sign_extension = input_3 << (shifted_value_3 & 0xff);\n    input_3 = input_3 >> (carry & 0xff);\n    add_temp_1 = result_1 + input_3;\n    shifted_value_1 = add_temp_2 << (shifted_value_3 & 0xff);\n    shifted_value_3 = add_temp_1 + shifted_value_1;\n    result_2 = result_2 + CARRY4(result_1,input_3) + ((int)add_temp_2 >> (carry & 0xff)) +\n            (uint)CARRY4(add_temp_1,shifted_value_1);\n  }\n  else {\n    sign_extension = add_temp_2 << (-carry + 0x40 & 0xff);\n    if (input_3 != 0) {\n      sign_extension = sign_extension | 2;\n    }\n    add_temp_2 = (int)add_temp_2 >> (carry - 0x20 & 0xff);\n    shifted_value_3 = result_1 + add_temp_2;\n    result_2 = result_2 + ((int)add_temp_2 >> 0x1f) + (uint)CARRY4(result_1,add_temp_2);\n  }\n  input_2 = result_2 & 0x80000000;\n  carry = result_2;\n  if ((int)result_2 < 0) {\n    check_condition = sign_extension == 0;\n    sign_extension = -sign_extension;\n    carry = -shifted_value_3;\n    shifted_value_3 = -(uint)!check_condition - shifted_value_3;\n    carry = -(uint)(check_condition <= carry) - result_2;\n  }\n  if (0xfffff < carry) {\n    result_1 = shifted_value_2 - 1;\n    if (0x1fffff < carry) {\n      result_2 = carry & 1;\n      carry = carry >> 1;\n      bit = (byte)shifted_value_3;\n      shifted_value_3 = (uint)(result_2 != 0) << 0x1f | shifted_value_3 >> 1;\n      sign_extension = (uint)(bit & 1) << 0x1f | sign_extension >> 1;\n      result_1 = shifted_value_2;\n      if (0xffbfffff < shifted_value_2 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    check_condition = 0x7fffffff < sign_extension;\n    if (sign_extension == 0x80000000) {\n      check_condition = (shifted_value_3 & 1) != 0;\n    }\n    return CONCAT44(carry + result_1 * 0x100000 + (uint)CARRY4(shifted_value_3,(uint)check_condition) | input_2,\n                    shifted_value_3 + check_condition);\n  }\n  is_equal = (sign_extension & 0x80000000) != 0;\n  sign_extension = sign_extension << 1;\n  result_1 = shifted_value_3 * 2;\n  check_condition = CARRY4(shifted_value_3,shifted_value_3);\n  shifted_value_3 = shifted_value_3 * 2 + (uint)is_equal;\n  carry = carry * 2 + (uint)(check_condition || CARRY4(result_1,(uint)is_equal));\n  result_1 = shifted_value_2 - 2;\n  if (shifted_value_2 - 1 != 0 && 0xfffff < carry) goto LAB_080083e0;\n  add_temp_2 = shifted_value_3;\n  shifted_value_2 = carry;\n  if (carry == 0) {\n    add_temp_2 = 0;\n    shifted_value_2 = shifted_value_3;\n  }\n  shift_amount_2 = LZCOUNT(shifted_value_2);\n  if (carry == 0) {\n    shift_amount_2 = shift_amount_2 + 0x20;\n  }\n  shifted_value_3 = shift_amount_2 - 0xb;\n  is_less_than = SBORROW4(shifted_value_3,0x20);\n  carry = shift_amount_2 - 0x2b;\n  check_condition = (int)carry < 0;\n  is_equal = carry == 0;\n  if ((int)shifted_value_3 < 0x20) {\n    is_less_than = SCARRY4(carry,0xc);\n    shift_amount_2 = shift_amount_2 + -0x1f;\n    check_condition = shift_amount_2 < 0;\n    is_equal = shift_amount_2 == 0;\n    carry = shifted_value_3;\n    if (!is_equal && check_condition == is_less_than) {\n      add_temp_2 = shifted_value_2 << (shifted_value_3 & 0xff);\n      shifted_value_2 = shifted_value_2 >> (0xcU - shift_amount_2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_equal || check_condition != is_less_than) {\n    sign_extension = 0x20 - carry;\n  }\n  shifted_value_2 = shifted_value_2 << (carry & 0xff);\n  if (is_equal || check_condition != is_less_than) {\n    shifted_value_2 = shifted_value_2 | add_temp_2 >> (sign_extension & 0xff);\n  }\n  if (is_equal || check_condition != is_less_than) {\n    add_temp_2 = add_temp_2 << (carry & 0xff);\n  }\nLAB_08008458:\n  if ((int)shifted_value_3 <= (int)result_1) {\n    return CONCAT44(shifted_value_2 + (result_1 - shifted_value_3) * 0x100000 | input_2,add_temp_2);\n  }\n  carry = ~(result_1 - shifted_value_3);\n  if ((int)carry < 0x1f) {\n    shift_amount_2 = carry - 0x13;\n    if (shift_amount_2 != 0 && shift_amount_2 < 0 == SCARRY4(carry - 0x1f,0xc)) {\n      return CONCAT44(result_2,add_temp_2 >> (0x20 - (0xcU - shift_amount_2) & 0xff) | shifted_value_2 << (0xcU - shift_amount_2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    carry = carry + 1;\n    return CONCAT44(input_2 | shifted_value_2 >> (carry & 0xff),\n                    add_temp_2 >> (carry & 0xff) | shifted_value_2 << (0x20 - carry & 0xff));\n  }\n  return CONCAT44(result_2,shifted_value_2 >> (carry - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "calculate_double_precision_080082d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shift_amount_1",
                "bVar2": "bit",
                "uVar3": "add_temp_1",
                "uVar4": "shifted_value_1",
                "uVar5": "add_temp_2",
                "iVar6": "shift_amount_2",
                "uVar7": "shifted_value_2",
                "uVar8": "result_1",
                "uVar9": "result_2",
                "uVar10": "carry",
                "uVar11": "sign_extension",
                "uVar12": "shifted_value_3",
                "bVar13": "is_equal",
                "bVar14": "check_condition",
                "bVar15": "is_less_than"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08009798",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009318",
                "FUN_08009990",
                "FUN_08009654",
                "FUN_0800b2e8",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "extracted_function_0800854c",
            "code": "\nulonglong extractedFunction_0800854c(uint input)\n\n{\n  uint result;\n  uint shiftAmount;\n  int bitCount;\n  uint adjustment;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool hasBorrow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = 0;\n  bitCount = LZCOUNT(input);\n  adjustment = bitCount + 0x15;\n  hasBorrow = SBORROW4(adjustment,0x20);\n  shiftAmount = bitCount - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (adjustment < 0x20) {\n    hasBorrow = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = bitCount + 1 == 0;\n    shiftAmount = adjustment;\n    if (!isZero && hasBorrow == false) {\n      result = input << adjustment;\n      input = input >> (0xcU - (bitCount + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isZero || isNegative != hasBorrow) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  input = input << (shiftAmount & 0xff);\n  if (isZero || isNegative != hasBorrow) {\n    input = input | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != hasBorrow) {\n    result = 0 << (shiftAmount & 0xff);\n  }\nLAB_08008458:\n  if (adjustment < 0x433) {\n    return CONCAT44(input + (0x432 - adjustment) * 0x100000,result);\n  }\n  shiftAmount = ~(0x432 - adjustment);\n  if (0x1e < (int)shiftAmount) {\n    return (ulonglong)(input >> (shiftAmount - 0x1f & 0xff));\n  }\n  bitCount = shiftAmount - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(input >> (shiftAmount & 0xff),\n                    result >> (shiftAmount & 0xff) | input << (0x20 - shiftAmount & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (0xcU - bitCount) & 0xff) | input << (0xcU - bitCount & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "extracted_function_0800854c",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "shiftAmount",
                "iVar3": "bitCount",
                "uVar4": "adjustment",
                "in_r12": "remainingBits",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "hasBorrow"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "bitwise_rotate_left_0800856c",
            "code": "\nulonglong bitwise_rotate_left_0800856c(uint input_value)\n\n{\n  uint count;\n  uint abs_value;\n  uint shift_amount;\n  int leading_zeros;\n  uint temp;\n  uint sign_bit;\n  uint temp2;\n  bool is_negative;\n  bool is_zero;\n  bool carry_flag;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  abs_value = input_value;\n  if ((int)sign_bit < 0) {\n    abs_value = -input_value;\n  }\n  count = 0;\n  leading_zeros = LZCOUNT(abs_value);\n  temp = leading_zeros + 0x15;\n  carry_flag = SBORROW4(temp,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (temp < 0x20) {\n    carry_flag = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = temp;\n    if (!is_zero && carry_flag == false) {\n      count = abs_value << temp;\n      abs_value = abs_value >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero || is_negative != carry_flag) {\n    temp2 = 0x20 - shift_amount;\n  }\n  abs_value = abs_value << (shift_amount & 0xff);\n  if (is_zero || is_negative != carry_flag) {\n    abs_value = abs_value | 0U >> (temp2 & 0xff);\n  }\n  if (is_zero || is_negative != carry_flag) {\n    count = 0 << (shift_amount & 0xff);\n  }\nLAB_08008458:\n  if (temp < 0x433) {\n    return CONCAT44(abs_value + (0x432 - temp) * 0x100000 | sign_bit,count);\n  }\n  shift_amount = ~(0x432 - temp);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input_value,abs_value >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | abs_value >> (shift_amount & 0xff),\n                    count >> (shift_amount & 0xff) | abs_value << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input_value,count >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_value << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "bitwise_rotate_left_0800856c",
                "param_1": "input_value",
                "uVar1": "count",
                "uVar2": "abs_value",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "temp",
                "uVar6": "sign_bit",
                "in_r12": "temp2",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "carry_flag"
            },
            "calling": [
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "reverse_bits_08008590",
            "code": "\nulonglong reverseBits_08008590(uint input,undefined4 param_2,undefined4 param_3,uint param_4)\n\n{\n  uint signBit;\n  uint temp1;\n  uint result;\n  uint shiftedInput;\n  uint doubledInput;\n  int count;\n  uint shiftAmount;\n  uint temp2;\n  bool lowerBoundFlag;\n  bool equalBoundFlag;\n  bool upperBoundFlag;\n  \n  doubledInput = input << 1;\n  equalBoundFlag = doubledInput == 0;\n  signBit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftedInput = (uint)((int)doubledInput >> 3) >> 1;\n  result = signBit | shiftedInput;\n  input = input << 0x1d;\n  if (!equalBoundFlag) {\n    param_4 = doubledInput & 0xff000000;\n    equalBoundFlag = param_4 == 0;\n  }\n  if (!equalBoundFlag) {\n    equalBoundFlag = param_4 == 0xff000000;\n  }\n  if (!equalBoundFlag) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if ((doubledInput & 0xffffff) == 0) {\n    return CONCAT44(result,input);\n  }\n  if (param_4 == 0xff000000) {\n    return CONCAT44(result,input) | 0x8000000000000;\n  }\n  temp1 = input;\n  doubledInput = shiftedInput;\n  if (shiftedInput == 0) {\n    temp1 = 0;\n    doubledInput = input;\n  }\n  count = LZCOUNT(doubledInput);\n  if (shiftedInput == 0) {\n    count = count + 0x20;\n  }\n  shiftAmount = count - 0xb;\n  upperBoundFlag = SBORROW4(shiftAmount,0x20);\n  shiftedInput = count - 0x2b;\n  equalBoundFlag = (int)shiftedInput < 0;\n  lowerBoundFlag = shiftedInput == 0;\n  if ((int)shiftAmount < 0x20) {\n    upperBoundFlag = SCARRY4(shiftedInput,0xc);\n    count = count + -0x1f;\n    equalBoundFlag = count < 0;\n    lowerBoundFlag = count == 0;\n    shiftedInput = shiftAmount;\n    if (!lowerBoundFlag && equalBoundFlag == upperBoundFlag) {\n      temp1 = doubledInput << (shiftAmount & 0xff);\n      doubledInput = doubledInput >> (0xcU - count & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (lowerBoundFlag || equalBoundFlag != upperBoundFlag) {\n    temp2 = 0x20 - shiftedInput;\n  }\n  doubledInput = doubledInput << (shiftedInput & 0xff);\n  if (lowerBoundFlag || equalBoundFlag != upperBoundFlag) {\n    doubledInput = doubledInput | temp1 >> (temp2 & 0xff);\n  }\n  if (lowerBoundFlag || equalBoundFlag != upperBoundFlag) {\n    temp1 = temp1 << (shiftedInput & 0xff);\n  }\nLAB_08008458:\n  if ((int)shiftAmount < 0x381) {\n    return CONCAT44(doubledInput + (0x380 - shiftAmount) * 0x100000 | signBit,temp1);\n  }\n  shiftedInput = ~(0x380 - shiftAmount);\n  if (0x1e < (int)shiftedInput) {\n    return CONCAT44(result,doubledInput >> (shiftedInput - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  count = shiftedInput - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shiftedInput - 0x1f,0xc)) {\n    shiftedInput = shiftedInput + 1;\n    return CONCAT44(signBit | doubledInput >> (shiftedInput & 0xff),\n                    temp1 >> (shiftedInput & 0xff) | doubledInput << (0x20 - shiftedInput & 0xff));\n  }\n  return CONCAT44(result,temp1 >> (0x20 - (0xcU - count) & 0xff) | doubledInput << (0xcU - count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "reverse_bits_08008590",
                "param_1": "input",
                "uVar1": "signBit",
                "uVar2": "temp1",
                "uVar3": "result",
                "uVar4": "shiftedInput",
                "uVar5": "doubledInput",
                "iVar6": "count",
                "uVar7": "shiftAmount",
                "in_r12": "temp2",
                "bVar8": "lowerBoundFlag",
                "bVar9": "equalBoundFlag",
                "bVar10": "upperBoundFlag"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004940",
                "FUN_08004e30",
                "FUN_080044e8",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_xored_bits_08008640",
            "code": "\nulonglong calculate_xored_bits_08008640(undefined4 var1,uint var2,uint var3,uint var4)\n\n{\n  ulonglong result;\n  longlong temp;\n  uint var2_upper;\n  uint var2_msb;\n  int sum;\n  uint sub_result;\n  uint var4_msb;\n  uint var7;\n  uint var7_temp;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong concat_var;\n  \n  concat_var = CONCAT44(var2,var1);\n  var7 = 0x7ff;\n  var2_msb = var2 >> 0x14 & 0x7ff;\n  flag1 = var2_msb == 0;\n  if (!flag1) {\n    var4_msb = var4 >> 0x14 & 0x7ff;\n    flag1 = var4_msb == 0;\n  }\n  if (!flag1) {\n    flag1 = var2_msb == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = var4_msb == 0x7ff;\n  }\n  if (flag1) {\n    concat_var = calculate_xored_bits_08008640_0800881c();\n  }\n  var2_upper = (uint)(concat_var >> 0x20);\n  sum = var2_msb + var4_msb;\n  var2_msb = var2_upper ^ var4;\n  var2_upper = var2_upper & ~(var7 << 0x15);\n  var4 = var4 & ~(var7 << 0x15);\n  flag1 = ((uint)concat_var | var2_upper << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (var3 | var4 << 0xc) == 0;\n  }\n  var2_upper = var2_upper | 0x100000;\n  var4 = var4 | 0x100000;\n  if (flag1) {\n    var3 = (uint)concat_var | var3;\n    var4 = (var2_msb & 0x80000000 | var2_upper) ^ var4;\n    var2_msb = var7 >> 1;\n    flag3 = SBORROW4(sum,var2_msb);\n    sub_result = sum - var2_msb;\n    flag1 = sub_result == 0;\n    var2_upper = sub_result;\n    if (!flag1 && (int)var2_msb <= sum) {\n      flag3 = SBORROW4(var7,sub_result);\n      var2_upper = var7 - sub_result;\n      flag1 = var7 == sub_result;\n    }\n    if (!flag1 && (int)var2_upper < 0 == flag3) {\n      var4 = var4 | sub_result * 0x100000;\n    }\n    if (!flag1 && (int)var2_upper < 0 == flag3) {\n      return CONCAT44(var4,var3);\n    }\n    var4 = var4 | 0x100000;\n    var7 = 0;\n    flag3 = SBORROW4(sub_result,1);\n    sub_result = sub_result - 1;\n    flag1 = sub_result == 0;\n    var2_msb = sub_result;\n  }\n  else {\n    result = (concat_var & 0xffffffff) * (ulonglong)var3;\n    concat_var = (concat_var & 0xffffffff) * (ulonglong)var4 +\n             (ulonglong)var2_upper * (ulonglong)var3 + (result >> 0x20);\n    var7_temp = (uint)concat_var;\n    temp = (ulonglong)var2_upper * (ulonglong)var4 + (concat_var >> 0x20);\n    var7 = (uint)temp;\n    var2_upper = (uint)((ulonglong)temp >> 0x20);\n    if ((int)result != 0) {\n      var7_temp = var7_temp | 1;\n    }\n    sub_result = (sum + -0x3ff) - (uint)(var2_upper < 0x200);\n    if (var2_upper < 0x200) {\n      flag1 = (var7_temp & 0x80000000) != 0;\n      var7_temp = var7_temp << 1;\n      temp = CONCAT44(var2_upper * 2 + (uint)(CARRY4(var7,var7) || CARRY4(var7 * 2,(uint)flag1)),\n                       var7 * 2 + (uint)flag1);\n    }\n    var4 = var2_msb & 0x80000000 | (int)((ulonglong)temp >> 0x20) << 0xb | (uint)temp >> 0x15;\n    var3 = (uint)temp << 0xb | var7_temp >> 0x15;\n    var7 = var7_temp * 0x800;\n    flag2 = 0xfc < sub_result;\n    flag3 = SBORROW4(sub_result,0xfd);\n    var2_upper = sub_result - 0xfd;\n    flag1 = var2_upper == 0;\n    var2_msb = var2_upper;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < var2_upper;\n      flag3 = SBORROW4(var2_upper,0x700);\n      var2_msb = sub_result - 0x7fd;\n      flag1 = var2_upper == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < var7;\n      if (var7 == 0x80000000) {\n        flag1 = (var7_temp >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(var4 + sub_result * 0x100000 + (uint)CARRY4(var3,(uint)flag1),var3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)var2_msb < 0 == flag3) {\n    return (ulonglong)(var4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(sub_result,0x36);\n  flag1 = (int)(sub_result + 0x36) < 0;\n  flag3 = sub_result == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    var3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    var4 = var4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(var4,var3);\n  }\n  var2_msb = -sub_result;\n  var2_upper = var2_msb - 0x20;\n  if (0x1f < (int)var2_msb) {\n    sub_result = var3 >> (var2_upper & 0xff) | var4 << (0x20 - var2_upper & 0xff);\n    var2_msb = (var4 >> (var2_upper & 0xff) & ~((var4 & 0x80000000) >> (var2_upper & 0xff))) -\n            ((int)sub_result >> 0x1f);\n    if ((var7 | var3 << (0x20 - var2_upper & 0xff) | sub_result << 1) == 0) {\n      var2_msb = var2_msb & ~(sub_result >> 0x1f);\n    }\n    return CONCAT44(var4,var2_msb) & 0x80000000ffffffff;\n  }\n  sum = var2_msb - 0x14;\n  if (sum == 0 || sum < 0 != SCARRY4(var2_upper,0xc)) {\n    var7_temp = var3 << (sub_result + 0x20 & 0xff);\n    var2_upper = var3 >> (var2_msb & 0xff) | var4 << (sub_result + 0x20 & 0xff);\n    sub_result = var2_upper + -((int)var7_temp >> 0x1f);\n    if ((var7 | var7_temp << 1) == 0) {\n      sub_result = sub_result & ~(var7_temp >> 0x1f);\n    }\n    return CONCAT44((var4 & 0x80000000) +\n                    ((var4 & 0x7fffffff) >> (var2_msb & 0xff)) +\n                    (uint)CARRY4(var2_upper,-((int)var7_temp >> 0x1f)),sub_result);\n  }\n  var2_msb = 0xc - sum;\n  sub_result = var3 << (var2_msb & 0xff);\n  var2_msb = var3 >> (0x20 - var2_msb & 0xff) | var4 << (var2_msb & 0xff);\n  var2_upper = var2_msb + -((int)sub_result >> 0x1f);\n  if ((var7 | sub_result << 1) == 0) {\n    var2_upper = var2_upper & ~(sub_result >> 0x1f);\n  }\n  return CONCAT44((var4 & 0x80000000) + (uint)CARRY4(var2_msb,-((int)sub_result >> 0x1f)),var2_upper);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_xored_bits_08008640",
                "param_1": "var1",
                "param_2": "var2",
                "param_3": "var3",
                "param_4": "var4",
                "uVar1": "result",
                "lVar2": "temp",
                "uVar3": "var2_upper",
                "uVar4": "var2_msb",
                "iVar5": "sum",
                "uVar6": "sub_result",
                "unaff_r5": "var4_msb",
                "uVar7": "var7",
                "uVar8": "var7_temp",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "concat_var"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_080044e8",
                "FUN_0800b2e8",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "calculate_xored_bits_0800881c",
            "code": "\nulonglong calculate_xored_bits_0800881c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  \n  temp1 = temp3 & input4 >> 0x14;\n  if (bit2 != temp3 && temp1 != temp3) {\n    isZero = (input1 | input2 << 1) == 0;\n    if (!isZero) {\n      isZero = (input3 | input4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      temp2 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp2;\n      if (temp1 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      temp1 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp1 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  isZero = (input1 | input2 << 1) == 0;\n  if (isZero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!isZero) {\n    isZero = (input3 | input4 << 1) == 0;\n  }\n  temp2 = input2;\n  if (((!isZero) && ((bit2 != temp3 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((temp1 != temp3 || (input1 = input3, temp2 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp2,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "calculate_xored_bits_0800881c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_08008640"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "calculate_floating_point_08008894",
            "code": "\nulonglong calculateFloatingPoint_08008894(undefined4 param1,uint param2,uint param3,uint param4)\n\n{\n  uint var1;\n  uint var2;\n  uint var3;\n  uint var4;\n  uint var5;\n  uint var6;\n  uint var7;\n  int var8;\n  uint var9;\n  uint var10;\n  uint var11;\n  uint var12;\n  uint var13;\n  uint var14;\n  bool bool1;\n  bool bool2;\n  bool bool3;\n  undefined8 var17;\n  \n  var17 = CONCAT44(param2,param1);\n  var14 = 0x7ff;\n  var7 = param2 >> 0x14 & 0x7ff;\n  bool1 = var7 == 0;\n  if (!bool1) {\n    var10 = param4 >> 0x14 & 0x7ff;\n    bool1 = var10 == 0;\n  }\n  if (!bool1) {\n    bool1 = var7 == 0x7ff;\n  }\n  if (!bool1) {\n    bool1 = var10 == 0x7ff;\n  }\n  if (bool1) {\n    var17 = calculate_floating_point_08008a02();\n  }\n  var9 = (uint)((ulonglong)var17 >> 0x20);\n  var12 = (uint)var17;\n  var8 = var7 - var10;\n  if ((param3 | param4 << 0xc) == 0) {\n    var7 = (var9 ^ param4) & 0x80000000 | var9 & 0xfffff;\n    bool3 = SCARRY4(var8,var14 >> 1);\n    var9 = var8 + (var14 >> 1);\n    bool1 = (int)var9 < 0;\n    bool2 = var9 == 0;\n    if (!bool2 && bool1 == bool3) {\n      bool3 = SBORROW4(var14,var9);\n      bool1 = (int)(var14 - var9) < 0;\n      bool2 = var14 == var9;\n    }\n    if (!bool2 && bool1 == bool3) {\n      var7 = var7 | var9 * 0x100000;\n    }\n    if (!bool2 && bool1 == bool3) {\n      return CONCAT44(var7,var12);\n    }\n    var7 = var7 | 0x100000;\n    var14 = 0;\n    bool2 = SBORROW4(var9,1);\n    var9 = var9 - 1;\n    bool1 = var9 == 0;\n    var3 = var9;\n  }\n  else {\n    var3 = (param4 << 0xc) >> 4 | 0x10000000 | param3 >> 0x18;\n    var14 = param3 << 8;\n    var11 = (var9 << 0xc) >> 4 | 0x10000000 | var12 >> 0x18;\n    var12 = var12 * 0x100;\n    var7 = (var9 ^ param4) & 0x80000000;\n    bool1 = var3 <= var11;\n    if (var11 == var3) {\n      bool1 = var14 <= var12;\n    }\n    var8 = var8 + (uint)bool1;\n    var9 = var8 + 0x3fd;\n    if (bool1 == false) {\n      var3 = var3 >> 1;\n      var14 = (uint)((param3 >> 0x18 & 1) != 0) << 0x1f | var14 >> 1;\n    }\n    var13 = var12 - var14;\n    var11 = (var11 - var3) - (uint)(var12 < var14);\n    var4 = var3 >> 1;\n    var1 = (uint)((var3 & 1) != 0) << 0x1f | var14 >> 1;\n    var12 = 0x100000;\n    var3 = 0x80000;\n    while( true ) {\n      bool1 = var1 <= var13;\n      if (var4 < var11 || var11 - var4 < (uint)bool1) {\n        var13 = var13 - var1;\n        var12 = var12 | var3;\n        var11 = (var11 - var4) - (uint)!bool1;\n      }\n      var5 = var4 >> 1;\n      var1 = (uint)((var4 & 1) != 0) << 0x1f | var1 >> 1;\n      bool2 = var1 <= var13;\n      bool1 = var11 - var5 < (uint)bool2;\n      var14 = var11;\n      if (var5 < var11 || bool1) {\n        var13 = var13 - var1;\n        var14 = (var11 - var5) - (uint)!bool2;\n      }\n      if (var5 < var11 || bool1) {\n        var12 = var12 | var3 >> 1;\n      }\n      var11 = var4 >> 2;\n      var2 = (uint)((var5 & 1) != 0) << 0x1f | var1 >> 1;\n      bool2 = var2 <= var13;\n      bool1 = var14 - var11 < (uint)bool2;\n      var5 = var14;\n      if (var11 < var14 || bool1) {\n        var13 = var13 - var2;\n        var5 = (var14 - var11) - (uint)!bool2;\n      }\n      if (var11 < var14 || bool1) {\n        var12 = var12 | var3 >> 2;\n      }\n      var6 = var4 >> 3;\n      var1 = (uint)((var11 & 1) != 0) << 0x1f | var2 >> 1;\n      bool2 = var1 <= var13;\n      bool1 = var5 - var6 < (uint)bool2;\n      var11 = var5;\n      if (var6 < var5 || bool1) {\n        var13 = var13 - var1;\n        var11 = (var5 - var6) - (uint)!bool2;\n      }\n      if (var6 < var5 || bool1) {\n        var12 = var12 | var3 >> 3;\n      }\n      var14 = var11 | var13;\n      if (var14 == 0) break;\n      var11 = var11 << 4 | var13 >> 0x1c;\n      var13 = var13 << 4;\n      var4 = var4 & 0xfffffff8 | var1 >> 0x1d;\n      var1 = (var2 >> 1) << 3;\n      var3 = var3 >> 4;\n      if (var3 == 0) {\n        var6 = var4;\n        if ((var7 & 0x100000) != 0) goto LAB_080089b2;\n        var7 = var7 | var12;\n        var12 = 0;\n        var3 = 0x80000000;\n      }\n    }\n    if ((var7 & 0x100000) == 0) {\n      var7 = var7 | var12;\n      var12 = 0;\n    }\nLAB_080089b2:\n    bool3 = 0xfc < var9;\n    bool2 = SBORROW4(var9,0xfd);\n    var4 = var8 + 0x300;\n    bool1 = var4 == 0;\n    var3 = var4;\n    if (bool3 && !bool1) {\n      bool3 = 0x6ff < var4;\n      bool2 = SBORROW4(var4,0x700);\n      var3 = var8 - 0x400;\n      bool1 = var4 == 0x700;\n    }\n    if (!bool3 || bool1) {\n      bool1 = var6 <= var11;\n      if (var11 == var6) {\n        bool1 = var1 <= var13;\n      }\n      if (var11 == var6 && var13 == var1) {\n        bool1 = (var12 & 1) != 0;\n      }\n      return CONCAT44(var7 + var9 * 0x100000 + (uint)CARRY4(var12,(uint)bool1),var12 + bool1);\n    }\n  }\n  if (!bool1 && (int)var3 < 0 == bool2) {\n    return (ulonglong)(var7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bool3 = SCARRY4(var9,0x36);\n  bool1 = (int)(var9 + 0x36) < 0;\n  bool2 = var9 == 0xffffffca;\n  if (bool2 || bool1 != bool3) {\n    var12 = 0;\n  }\n  if (bool2 || bool1 != bool3) {\n    var7 = var7 & 0x80000000;\n  }\n  if (bool2 || bool1 != bool3) {\n    return CONCAT44(var7,var12);\n  }\n  var3 = -var9;\n  var11 = var3 - 0x20;\n  if (0x1f < (int)var3) {\n    var3 = var12 >> (var11 & 0xff) | var7 << (0x20 - var11 & 0xff);\n    var9 = (var7 >> (var11 & 0xff) & ~((var7 & 0x80000000) >> (var11 & 0xff))) -\n            ((int)var3 >> 0x1f);\n    if ((var14 | var12 << (0x20 - var11 & 0xff) | var3 << 1) == 0) {\n      var9 = var9 & ~(var3 >> 0x1f);\n    }\n    return CONCAT44(var7,var9) & 0x80000000ffffffff;\n  }\n  var8 = var3 - 0x14;\n  if (var8 != 0 && var8 < 0 == SCARRY4(var11,0xc)) {\n    var9 = 0xc - var8;\n    var3 = var12 << (var9 & 0xff);\n    var12 = var12 >> (0x20 - var9 & 0xff) | var7 << (var9 & 0xff);\n    var9 = var12 + -((int)var3 >> 0x1f);\n    if ((var14 | var3 << 1) == 0) {\n      var9 = var9 & ~(var3 >> 0x1f);\n    }\n    return CONCAT44((var7 & 0x80000000) + (uint)CARRY4(var12,-((int)var3 >> 0x1f)),var9);\n  }\n  var11 = var12 << (var9 + 0x20 & 0xff);\n  var12 = var12 >> (var3 & 0xff) | var7 << (var9 + 0x20 & 0xff);\n  var9 = var12 + -((int)var11 >> 0x1f);\n  if ((var14 | var11 << 1) == 0) {\n    var9 = var9 & ~(var11 >> 0x1f);\n  }\n  return CONCAT44((var7 & 0x80000000) +\n                  ((var7 & 0x7fffffff) >> (var3 & 0xff)) +\n                  (uint)CARRY4(var12,-((int)var11 >> 0x1f)),var9);\n}\n\n",
            "renaming": {
                "FUN_08008894": "calculate_floating_point_08008894",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5",
                "uVar6": "var6",
                "uVar7": "var7",
                "iVar8": "var8",
                "uVar9": "var9",
                "unaff_r5": "var10",
                "uVar10": "var11",
                "uVar11": "var12",
                "uVar12": "var13",
                "uVar13": "var14",
                "bVar14": "bool1",
                "bVar15": "bool2",
                "bVar16": "bool3"
            },
            "calling": [
                "FUN_08009990",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080098d0",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "calculate_floating_point_08008a02",
            "code": "\nulonglong calculateFloatingPoint_08008a02(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp2;\n  uint temp1;\n  uint temp3;\n  uint temp4;\n  uint constant1;\n  bool flag;\n  \n  temp3 = constant1 & input4 >> 0x14;\n  temp4 = input2;\n  if (temp1 != constant1 || temp3 != constant1) {\n    if (temp1 == constant1) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp4 = input4, temp3 != constant1)\n         ) {\nLAB_08008874:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp3 == constant1) {\n      input1 = input3;\n      temp4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      flag = (input1 | input2 << 1) == 0;\n      if (!flag) {\n        flag = (input3 | input4 << 1) == 0;\n      }\n      if (!flag) {\n        if (temp1 == 0) {\n          temp4 = input2 & 0x80000000;\n          do {\n            temp2 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(temp2 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp4;\n          if (temp3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08008874;\n      if ((input3 | input4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(temp4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "calculate_floating_point_08008a02",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "unaff_r4": "temp1",
                "uVar1": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "constant1",
                "bVar4": "flag"
            },
            "calling": [
                "FUN_08008894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_params_equality_08008a74",
            "code": "\nuint check_params_equality_08008a74(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegativeOrEqual;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    result = value2 ^ value4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = value2 == value4;\n    }\n    isNegativeOrEqual = -1 < (int)result && value4 <= value2;\n    if (isZero) {\n      isNegativeOrEqual = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isNegativeOrEqual) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_params_equality_08008a74",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegativeOrEqual"
            },
            "calling": [
                "FUN_08008b00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "validate_and_return_param_08008af0",
            "code": "\nvoid validate_and_return_param_08008af0(undefined4 input_1,undefined4 input_2,undefined4 parameter_1,undefined4 parameter_2)\n\n{\n  check_and_return_param_08008b00(parameter_1,parameter_2,input_1,input_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "validate_and_return_param_08008af0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "parameter_1",
                "param_4": "parameter_2"
            },
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "check_and_return_param_08008b00",
            "code": "\nundefined4 check_and_return_param_08008b00(undefined4 input_param)\n\n{\n  check_params_equality();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "check_and_return_param_08008b00",
                "param_1": "input_param",
                "check_params_equality_08008a74": "check_params_equality"
            },
            "calling": [
                "FUN_08008b24",
                "FUN_08008b10",
                "FUN_08008af0"
            ],
            "called": [
                "FUN_08008a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "check_parameter_and_return_result_08008b10",
            "code": "\nbool check_parameter_and_return_result_08008b10(void)\n\n{\n  char is_not_null;\n  \n  check_and_return_param_08008b00();\n  return is_not_null != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "check_parameter_and_return_result_08008b10",
                "in_ZR": "is_not_null"
            },
            "calling": [
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "is_input_null_08008b24",
            "code": "\nbool is_input_null_08008b24(void)\n\n{\n  char input_character;\n  \n  check_and_return_param_08008b00();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "is_input_null_08008b24",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "check_and_return_result_08008b4c",
            "code": "\nbool check_and_return_result_08008b4c(void)\n\n{\n  undefined zero_status;\n  undefined carry_status;\n  \n  validate_and_return_param_08008af0();\n  return !(bool)carry_status || (bool)zero_status;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "check_and_return_result_08008b4c",
                "in_ZR": "zero_status",
                "in_CY": "carry_status"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "is_input_valid_08008b60",
            "code": "\nbool isInputValid_08008b60(void)\n\n{\n  char inputChar;\n  \n  validate_and_return_param_08008af0();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "is_input_valid_08008b60",
                "in_CY": "inputChar"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08009318"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "check_valid_params_08008b74",
            "code": "\nundefined4 check_valid_params_08008b74(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "check_valid_params_08008b74",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "calculate_value_08008ba0",
            "code": "\nuint calculate_value_08008ba0(uint input_value_1,uint input_value_2)\n\n{\n  uint final_result;\n  int multiplied_value;\n  uint modified_shift;\n  \n  multiplied_value = input_value_2 * 2 + 0x200000;\n  if (input_value_2 * 2 < 0xffe00000) {\n    if (-1 < multiplied_value) {\n      return 0;\n    }\n    final_result = multiplied_value >> 0x15;\n    modified_shift = -final_result - 0x3e1;\n    if (final_result < 0xfffffc20 && modified_shift != 0) {\n      final_result = (input_value_2 << 0xb | 0x80000000 | input_value_1 >> 0x15) >> (modified_shift & 0xff);\n      if ((input_value_2 & 0x80000000) != 0) {\n        final_result = -final_result;\n      }\n      return final_result;\n    }\n  }\n  else if ((input_value_1 | input_value_2 << 0xc) != 0) {\n    return 0;\n  }\n  input_value_2 = input_value_2 & 0x80000000;\n  if (input_value_2 == 0) {\n    input_value_2 = 0x7fffffff;\n  }\n  return input_value_2;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "calculate_value_08008ba0",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "uVar1": "final_result",
                "iVar2": "multiplied_value",
                "uVar3": "modified_shift"
            },
            "calling": [
                "FUN_080095b8",
                "FUN_08003004",
                "FUN_0800adf0",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "convert_to_unsigned_08008bf0",
            "code": "\nuint convertToUnsigned_08008bf0(uint value1,uint value2)\n\n{\n  int temp1;\n  uint temp2;\n  \n  if ((value2 & 0x80000000) != 0) {\n    return 0;\n  }\n  temp1 = value2 * 2 + 0x200000;\n  if (value2 * 2 < 0xffe00000) {\n    if (-1 < temp1) {\n      return 0;\n    }\n    temp2 = -(temp1 >> 0x15) - 0x3e1;\n    if (-1 < (int)temp2) {\n      return (value2 << 0xb | 0x80000000 | value1 >> 0x15) >> (temp2 & 0xff);\n    }\n  }\n  else if ((value1 | value2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "convert_to_unsigned_08008bf0",
                "param_1": "value1",
                "param_2": "value2",
                "iVar1": "temp1",
                "uVar2": "temp2"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "calculate_float_08008c30",
            "code": "\nuint calculateFloat_08008c30(uint inputValue,uint multiplier)\n\n{\n  uint result;\n  uint multiplierDouble;\n  uint resultTemp;\n  uint resultTemp2;\n  bool isZero;\n  bool isInRange;\n  \n  multiplierDouble = multiplier * 2;\n  isInRange = multiplierDouble < 0x70000000;\n  resultTemp = multiplierDouble + 0x90000000;\n  result = resultTemp;\n  if (!isInRange) {\n    resultTemp2 = multiplierDouble + 0x8fe00000;\n    result = resultTemp2;\n  }\n  isZero = result == 0;\n  if (!isInRange && resultTemp >= 0x200000) {\n    isZero = resultTemp2 == 0x1fc00000;\n  }\n  if (((isInRange || resultTemp < 0x200000) || 0x1fc00000 < resultTemp2) || isZero) {\n    if ((multiplier & 0x40000000) != 0) {\n      if (((int)multiplierDouble >> 0x15 == -1) && ((inputValue | multiplier << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return multiplier & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(multiplierDouble + 0x92e00000) < 0 != SCARRY4(resultTemp,0x2e00000)) {\n      return multiplier & 0x80000000;\n    }\n    multiplierDouble = 0x18 - (multiplierDouble + 0x92e00000 >> 0x15);\n    result = inputValue >> (multiplierDouble & 0xff);\n    if (inputValue << (0x20 - multiplierDouble & 0xff) != 0) {\n      result = result | 1;\n    }\n    resultTemp = multiplier & 0x1fffff | 0x100000;\n    inputValue = result | resultTemp << (0x20 - multiplierDouble & 0xff);\n    resultTemp = (resultTemp >> (multiplierDouble & 0xff)) << 1;\n  }\n  result = (multiplier & 0x80000000 | inputValue >> 0x1d) + resultTemp * 4 + (uint)(0x7fffffff < inputValue * 8);\n  if (inputValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "calculate_float_08008c30",
                "param_1": "inputValue",
                "param_2": "multiplier",
                "uVar1": "result",
                "uVar2": "multiplierDouble",
                "uVar3": "resultTemp",
                "in_r12": "resultTemp2",
                "bVar4": "isZero",
                "bVar5": "isInRange"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "perform_arithmetic_operation_08008cd8",
            "code": "\nuint performArithmeticOperation_08008cd8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftValue1;\n  int shiftValue2;\n  uint result1;\n  uint result2;\n  uint var1;\n  uint var2;\n  uint var3;\n  bool isTrue;\n  \n  result1 = input2 ^ 0x80000000;\n  var1 = input1 << 1;\n  isTrue = var1 == 0;\n  if (!isTrue) {\n    input4 = input2 << 1;\n    isTrue = input4 == 0;\n  }\n  if (!isTrue) {\n    isTrue = var1 == input4;\n  }\n  shiftValue1 = (int)var1 >> 0x18;\n  if (!isTrue) {\n    isTrue = shiftValue1 == -1;\n  }\n  if (!isTrue) {\n    isTrue = (int)input4 >> 0x18 == -1;\n  }\n  if (isTrue) {\n    shiftValue2 = (int)(input2 << 1) >> 0x18;\n    if (shiftValue1 == -1 || shiftValue2 == -1) {\n      var1 = result1;\n      if (shiftValue1 == -1) {\n        var1 = input1;\n      }\n      if (shiftValue1 != -1 || shiftValue2 != -1) {\n        result1 = var1;\n      }\n      isTrue = (var1 & 0x7fffff) == 0;\n      if (isTrue) {\n        isTrue = (result1 & 0x7fffff) == 0;\n      }\n      if (isTrue) {\n        isTrue = var1 == result1;\n      }\n      if (!isTrue) {\n        var1 = var1 | 0x400000;\n      }\n      return var1;\n    }\n    if (((input1 ^ result1) & 0x7fffffff) != 0) {\n      if (var1 == 0) {\n        input1 = result1;\n      }\n      return input1;\n    }\n    if (input1 != result1) {\n      return 0;\n    }\n    if ((var1 & 0xff000000) == 0) {\n      result1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result1 = result1 | 0x80000000;\n      }\n      return result1;\n    }\n    if (var1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  var1 = var1 >> 0x18;\n  input4 = input4 >> 0x18;\n  var3 = input4 - var1;\n  isTrue = var3 != 0;\n  var2 = var1;\n  if (isTrue && var1 <= input4) {\n    var2 = var1 + var3;\n  }\n  if (isTrue && var1 <= input4) {\n    result1 = result1 ^ input1;\n  }\n  if (isTrue && var1 <= input4) {\n    input1 = input1 ^ result1;\n  }\n  if (isTrue && var1 <= input4) {\n    result1 = result1 ^ input1;\n  }\n  if (input4 < var1) {\n    var3 = -var3;\n  }\n  if (0x19 < var3) {\n    return input1;\n  }\n  var1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    var1 = -var1;\n  }\n  result2 = result1 & 0xffffff | 0x800000;\n  if ((result1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  if (var2 == var3) {\n    result2 = result2 ^ 0x800000;\n    if (var2 == 0) {\n      var1 = var1 ^ 0x800000;\n      var2 = 1;\n    }\n    else {\n      var3 = var3 - 1;\n    }\n  }\n  var1 = var1 + ((int)result2 >> (var3 & 0xff));\n  result2 = result2 << (0x20 - var3 & 0xff);\n  input1 = var1 & 0x80000000;\n  if ((int)var1 < 0) {\n    isTrue = result2 != 0;\n    result2 = -result2;\n    var1 = -var1 - (uint)isTrue;\n  }\n  if (var1 < 0x800000) {\n    result1 = result2 & 0x80000000;\n    result2 = result2 << 1;\n    var1 = var1 * 2 + (uint)(result1 != 0);\n    result1 = var2 - 2;\n    if (var2 - 1 == 0 || var1 < 0x800000) {\n      var3 = LZCOUNT(var1) - 8;\n      var1 = var1 << (var3 & 0xff);\n      if ((int)result1 < (int)var3) {\n        var1 = var1 >> (-(result1 - var3) & 0xff);\n      }\n      else {\n        var1 = var1 + (result1 - var3) * 0x800000;\n      }\n      return var1 | input1;\n    }\n  }\n  else {\n    result1 = var2 - 1;\n    if (0xffffff < var1) {\n      result1 = var1 & 1;\n      var1 = var1 >> 1;\n      result2 = (uint)(result1 != 0) << 0x1f | result2 >> 1;\n      result1 = var2;\n      if (0xfd < var2) goto LAB_08008e12;\n    }\n  }\n  var1 = var1 + result1 * 0x800000 + (uint)(0x7fffffff < result2);\n  if (result2 == 0x80000000) {\n    var1 = var1 & 0xfffffffe;\n  }\n  return var1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "perform_arithmetic_operation_08008cd8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftValue1",
                "iVar2": "shiftValue2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "var1",
                "uVar6": "var2",
                "uVar7": "var3",
                "bVar8": "isTrue"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "calculate_float_08008cdc",
            "code": "\nuint calculateFloat_08008cdc(uint num1,uint num2,undefined4 flags,uint result)\n\n{\n  int shift1;\n  int shift2;\n  uint value1;\n  uint value2;\n  uint uVar5;\n  uint uVar6;\n  bool isZero;\n  \n  value2 = num1 << 1;\n  isZero = value2 == 0;\n  if (!isZero) {\n    result = num2 << 1;\n    isZero = result == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == result;\n  }\n  shift1 = (int)value2 >> 0x18;\n  if (!isZero) {\n    isZero = shift1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)result >> 0x18 == -1;\n  }\n  if (isZero) {\n    shift2 = (int)(num2 << 1) >> 0x18;\n    if (shift1 == -1 || shift2 == -1) {\n      value2 = num2;\n      if (shift1 == -1) {\n        value2 = num1;\n      }\n      if (shift1 != -1 || shift2 != -1) {\n        num2 = value2;\n      }\n      isZero = (value2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (num2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = value2 == num2;\n      }\n      if (!isZero) {\n        value2 = value2 | 0x400000;\n      }\n      return value2;\n    }\n    if (((num1 ^ num2) & 0x7fffffff) != 0) {\n      if (value2 == 0) {\n        num1 = num2;\n      }\n      return num1;\n    }\n    if (num1 != num2) {\n      return 0;\n    }\n    if ((value2 & 0xff000000) == 0) {\n      value2 = num1 << 1;\n      if ((num1 & 0x80000000) != 0) {\n        value2 = value2 | 0x80000000;\n      }\n      return value2;\n    }\n    if (value2 < 0xfe000000) {\n      return num1 + 0x800000;\n    }\n    num1 = num1 & 0x80000000;\nLAB_08008e12:\n    return num1 | 0x7f800000;\n  }\n  value2 = value2 >> 0x18;\n  result = result >> 0x18;\n  uVar6 = result - value2;\n  isZero = uVar6 != 0;\n  uVar5 = value2;\n  if (isZero && value2 <= result) {\n    uVar5 = value2 + uVar6;\n  }\n  if (isZero && value2 <= result) {\n    num2 = num2 ^ num1;\n  }\n  if (isZero && value2 <= result) {\n    num1 = num1 ^ num2;\n  }\n  if (isZero && value2 <= result) {\n    num2 = num2 ^ num1;\n  }\n  if (result < value2) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return num1;\n  }\n  value2 = num1 & 0xffffff | 0x800000;\n  if ((num1 & 0x80000000) != 0) {\n    value2 = -value2;\n  }\n  value1 = num2 & 0xffffff | 0x800000;\n  if ((num2 & 0x80000000) != 0) {\n    value1 = -value1;\n  }\n  if (uVar5 == uVar6) {\n    value1 = value1 ^ 0x800000;\n    if (uVar5 == 0) {\n      value2 = value2 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  value2 = value2 + ((int)value1 >> (uVar6 & 0xff));\n  value1 = value1 << (0x20 - uVar6 & 0xff);\n  num1 = value2 & 0x80000000;\n  if ((int)value2 < 0) {\n    isZero = value1 != 0;\n    value1 = -value1;\n    value2 = -value2 - (uint)isZero;\n  }\n  if (value2 < 0x800000) {\n    uVar6 = value1 & 0x80000000;\n    value1 = value1 << 1;\n    value2 = value2 * 2 + (uint)(uVar6 != 0);\n    uVar6 = uVar5 - 2;\n    if (uVar5 - 1 == 0 || value2 < 0x800000) {\n      uVar5 = LZCOUNT(value2) - 8;\n      value2 = value2 << (uVar5 & 0xff);\n      if ((int)uVar6 < (int)uVar5) {\n        value2 = value2 >> (-(uVar6 - uVar5) & 0xff);\n      }\n      else {\n        value2 = value2 + (uVar6 - uVar5) * 0x800000;\n      }\n      return value2 | num1;\n    }\n  }\n  else {\n    uVar6 = uVar5 - 1;\n    if (0xffffff < value2) {\n      uVar6 = value2 & 1;\n      value2 = value2 >> 1;\n      value1 = (uint)(uVar6 != 0) << 0x1f | value1 >> 1;\n      uVar6 = uVar5;\n      if (0xfd < uVar5) goto LAB_08008e12;\n    }\n  }\n  value2 = value2 + uVar6 * 0x800000 + (uint)(0x7fffffff < value1);\n  if (value1 == 0x80000000) {\n    value2 = value2 & 0xfffffffe;\n  }\n  return value2 | num1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "calculate_float_08008cdc",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "flags",
                "param_4": "result",
                "iVar1": "shift1",
                "iVar2": "shift2",
                "uVar3": "value1",
                "uVar4": "value2",
                "bVar7": "isZero"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003826",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "calculate_shifted_value_08008e3c",
            "code": "\nuint calculateShiftedValue_08008e3c(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int baseValue;\n  uint overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftAmount = leadingZeros - 8;\n  baseValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    overflow = 0 << (shiftAmount & 0xff);\n    leadingZeros = baseValue + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < overflow);\n    if (overflow == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  leadingZeros = baseValue + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "calculate_shifted_value_08008e3c",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "baseValue",
                "uVar4": "overflow"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "calculate_reverse_value_08008e44",
            "code": "\nuint calculateReverseValue_08008e44(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signBit;\n  int bitwiseResult;\n  \n  signBit = inputValue & 0x80000000;\n  if ((int)signBit < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  bitwiseResult = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    signBit = bitwiseResult + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  signBit = bitwiseResult + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "calculate_reverse_value_08008e44",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "bitwiseResult"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08002c18",
                "FUN_080024c4",
                "FUN_08003618"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_floating_point_08008eec",
            "code": "\nuint calculateFloatingPoint_08008eec(uint input1,uint input2,undefined4 constant,uint mask)\n\n{\n  longlong result64;\n  uint result;\n  uint mask1;\n  int sum;\n  int sumMinus127;\n  uint productLow;\n  int sumMinus255;\n  uint finalResult;\n  bool condition;\n  bool borrow;\n  \n  mask1 = input1 >> 0x17 & 0xff;\n  condition = mask1 == 0;\n  if (!condition) {\n    mask = input2 >> 0x17 & 0xff;\n    condition = mask == 0;\n  }\n  if (!condition) {\n    condition = mask1 == 0xff;\n  }\n  if (!condition) {\n    condition = mask == 0xff;\n  }\n  if (condition) {\n    mask = input2 >> 0x17 & 0xff;\n    if (mask1 == 0xff || mask == 0xff) {\n      condition = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        condition = input2 == 0;\n        result = input1;\n      }\n      if (!condition) {\n        condition = input2 == 0x80000000;\n      }\n      finalResult = result;\n      if (((condition) || ((mask1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((mask == 0xff && (finalResult = input2, (input2 & 0x7fffff) != 0)))) {\n        return finalResult | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_0800903c;\n    }\n    condition = (input1 & 0x7fffffff) == 0;\n    if (!condition) {\n      condition = (input2 & 0x7fffffff) == 0;\n    }\n    if (condition) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    condition = mask1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (condition) {\n        input1 = input1 << 1;\n        condition = (input1 & 0x800000) == 0;\n      }\n      if (!condition) break;\n      mask1 = mask1 - 1;\n    }\n    input1 = input1 | result;\n    condition = mask == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (condition) {\n        input2 = input2 << 1;\n        condition = (input2 & 0x800000) == 0;\n      }\n      if (!condition) break;\n      mask = mask - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = mask1 + mask;\n  finalResult = input1 ^ input2;\n  mask1 = input1 << 9;\n  condition = mask1 == 0;\n  if (!condition) {\n    input2 = input2 << 9;\n    condition = input2 == 0;\n  }\n  if (condition) {\n    if (mask1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = finalResult & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    borrow = SBORROW4(sum,0x7f);\n    sumMinus127 = sum + -0x7f;\n    condition = sumMinus127 == 0;\n    sumMinus255 = sumMinus127;\n    if (!condition && 0x7e < sum) {\n      borrow = SBORROW4(0xff,sumMinus127);\n      sumMinus255 = 0xff - sumMinus127;\n      condition = sumMinus127 == 0xff;\n    }\n    if (!condition && sumMinus255 < 0 == borrow) {\n      result = result | sumMinus127 * 0x800000;\n    }\n    if (!condition && sumMinus255 < 0 == borrow) {\n      return result;\n    }\n    result = result | 0x800000;\n    productLow = 0;\n    borrow = SBORROW4(sumMinus127,1);\n    finalResult = sum - 0x80;\n    condition = finalResult == 0;\n    mask1 = finalResult;\n  }\n  else {\n    result64 = (ulonglong)(mask1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    productLow = (uint)result64;\n    result = (uint)((ulonglong)result64 >> 0x20);\n    condition = result < 0x800000;\n    if (condition) {\n      result = result << 1;\n    }\n    if (condition) {\n      result = result | productLow >> 0x1f;\n      productLow = productLow << 1;\n    }\n    result = finalResult & 0x80000000 | result;\n    finalResult = (sum + -0x7f) - (uint)condition;\n    borrow = SBORROW4(finalResult,0xfd);\n    condition = finalResult == 0xfd;\n    mask1 = finalResult - 0xfd;\n    if (finalResult < 0xfe) {\n      result = result + finalResult * 0x800000 + (uint)(0x7fffffff < productLow);\n      if (productLow == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (condition || (int)mask1 < 0 != borrow) {\n    condition = (int)(finalResult + 0x19) < 0;\n    if (finalResult == 0xffffffe7 || condition != SCARRY4(finalResult,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (finalResult != 0xffffffe7 && condition == SCARRY4(finalResult,0x19)) {\n      mask1 = (result << 1) >> (-finalResult & 0xff);\n      finalResult = result << (finalResult + 0x20 & 0xff);\n      mask1 = ((uint)((result & 0x80000000) != 0) << 0x1f | mask1 >> 1) + (uint)((byte)mask1 & 1);\n      if ((productLow | finalResult << 1) == 0) {\n        mask1 = mask1 & ~(finalResult >> 0x1f);\n      }\n      return mask1;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_floating_point_08008eec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "constant",
                "param_4": "mask",
                "lVar1": "result64",
                "uVar2": "result",
                "uVar3": "mask1",
                "iVar4": "sum",
                "iVar5": "sumMinus127",
                "uVar6": "productLow",
                "iVar7": "sumMinus255",
                "uVar8": "finalResult",
                "bVar9": "condition",
                "bVar10": "borrow"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_080024c4",
                "FUN_08003826",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "calculate_floating_point_08009054",
            "code": "\nuint calculateFloatingPoint_08009054(uint input1,uint input2,undefined4 constant1,uint constant2)\n\n{\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  bool isZero;\n  bool isNegative;\n  bool isOverflow;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  isZero = temp2 == 0;\n  if (!isZero) {\n    constant2 = input2 >> 0x17 & 0xff;\n    isZero = constant2 == 0;\n  }\n  if (!isZero) {\n    isZero = temp2 == 0xff;\n  }\n  if (!isZero) {\n    isZero = constant2 == 0xff;\n  }\n  if (isZero) {\n    constant2 = input2 >> 0x17 & 0xff;\n    temp6 = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (temp6 = input2, constant2 == 0xff)) {\nLAB_0800904a:\n        return temp6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (constant2 == 0xff) {\n        temp6 = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      isZero = (input1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (input2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = temp2 == 0;\n        temp6 = input1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input1 = input1 << 1;\n            isZero = (input1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | temp6;\n        isZero = constant2 == 0;\n        temp6 = input2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input2 = input2 << 1;\n            isZero = (input2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          constant2 = constant2 - 1;\n        }\n        input2 = input2 | temp6;\n        goto LAB_0800906c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_0800906c:\n    temp3 = temp2 - constant2;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      isOverflow = SCARRY4(temp3,0x7f);\n      temp5 = temp3 + 0x7f;\n      isZero = temp5 < 0;\n      isNegative = temp5 == 0;\n      if (!isNegative && isZero == isOverflow) {\n        isOverflow = SBORROW4(0xff,temp5);\n        isZero = 0xff - temp5 < 0;\n        isNegative = temp5 == 0xff;\n      }\n      if (!isNegative && isZero == isOverflow) {\n        input1 = input1 | temp5 * 0x800000;\n      }\n      if (!isNegative && isZero == isOverflow) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      isNegative = SBORROW4(temp5,1);\n      temp4 = temp3 + 0x7e;\n      isZero = temp4 == 0;\n      temp6 = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      isZero = temp1 <= temp2;\n      if (!isZero) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = temp3 + 0x7d + (uint)isZero;\n      temp6 = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | temp6;\n        }\n        isZero = temp1 >> 1 <= temp2;\n        if (isZero) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (isZero) {\n          input1 = input1 | temp6 >> 1;\n        }\n        isZero = temp1 >> 2 <= temp2;\n        if (isZero) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (isZero) {\n          input1 = input1 | temp6 >> 2;\n        }\n        isZero = temp1 >> 3 <= temp2;\n        if (isZero) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (isZero) {\n          input1 = input1 | temp6 >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        isZero = temp2 == 0;\n        if (!isZero) {\n          temp6 = temp6 >> 4;\n          isZero = temp6 == 0;\n        }\n      } while (!isZero);\n      isNegative = SBORROW4(temp4,0xfd);\n      isZero = temp4 == 0xfd;\n      temp6 = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (isZero || (int)temp6 < 0 != isNegative) {\n      isZero = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || isZero != SCARRY4(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || isZero != SCARRY4(temp4,0x19)) {\n        return input1;\n      }\n      temp6 = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      temp6 = ((uint)((input1 & 0x80000000) != 0) << 0x1f | temp6 >> 1) + (uint)((byte)temp6 & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        temp6 = temp6 & ~(temp4 >> 0x1f);\n      }\n      return temp6;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "calculate_floating_point_08009054",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "constant1",
                "param_4": "constant2",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "bVar7": "isZero",
                "bVar8": "isNegative",
                "bVar9": "isOverflow"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_080004fc",
                "FUN_08004250",
                "FUN_08002e08",
                "FUN_08001994",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "check_overflow_and_sign_0800919c",
            "code": "\nuint check_overflow_and_sign_0800919c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint combined_input;\n  bool is_zero;\n  \n  input_1_times_2 = input_1 * 2;\n  input_2_times_2 = input_2 * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_input = input_1_times_2 | input_2 & 0x7fffffff;\n  is_zero = combined_input == 0;\n  if (!is_zero) {\n    combined_input = input_1 ^ input_2;\n    is_zero = combined_input == 0;\n  }\n  is_negative = -1 < (int)combined_input;\n  if (is_negative) {\n    input_1 = input_1_times_2 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_times_2 <= input_1_times_2) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_times_2 > input_1_times_2) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "check_overflow_and_sign_0800919c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "combined_input",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08009204"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "concatenate_parameters_080091fc",
            "code": "\nvoid concatenateParameters_080091fc(undefined4 destinationParameter,undefined4 sourceParameter)\n\n{\n  concatenate_parameters_08009204(sourceParameter,destinationParameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "concatenate_parameters_080091fc",
                "param_1": "destinationParameter",
                "param_2": "sourceParameter"
            },
            "calling": [
                "FUN_08009264",
                "FUN_08009250"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "concatenate_parameters_08009204",
            "code": "\nundefined8 concatenateParameters_08009204(undefined4 parameter1,undefined4 parameter2)\n\n{\n  check_overflow_and_sign_0800919c();\n  return CONCAT44(parameter2,parameter1);\n}\n\n",
            "renaming": {
                "FUN_08009204": "concatenate_parameters_08009204",
                "param_1": "parameter1",
                "param_2": "parameter2"
            },
            "calling": [
                "FUN_080091fc",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_0800923c"
            ],
            "called": [
                "FUN_0800919c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "check_concatenated_parameters_08009214",
            "code": "\nbool check_concatenated_parameters_08009214(void)\n\n{\n  char is_zero_result;\n  \n  concatenate_parameters_08009204();\n  return is_zero_result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "check_concatenated_parameters_08009214",
                "in_ZR": "is_zero_result"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08001f00",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "check_if_string_is_empty_08009228",
            "code": "\nbool checkIfStringIsEmpty_08009228(void)\n\n{\n  char inputChar;\n  \n  concatenate_parameters_08009204();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "check_if_string_is_empty_08009228",
                "in_CY": "inputChar"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30",
                "FUN_08003826"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "is_either_parameter_zero_0800923c",
            "code": "\nbool isEitherParameterZero_0800923c(void)\n\n{\n  undefined isZero;\n  undefined isCarry;\n  \n  concatenate_parameters_08009204();\n  return !(bool)isCarry || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "is_either_parameter_zero_0800923c",
                "in_ZR": "isZero",
                "in_CY": "isCarry"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "check_concatenation_result_08009250",
            "code": "\nbool check_concatenation_result_08009250(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry;\n  \n  concatenate_parameters_080091fc();\n  return !(bool)is_carry || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08009250": "check_concatenation_result_08009250",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "check_if_concatenated_parameters_are_empty_08009264",
            "code": "\nbool checkIfConcatenatedParametersAreEmpty_08009264(void)\n\n{\n  char inputChar;\n  \n  concatenate_parameters_080091fc();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "check_if_concatenated_parameters_are_empty_08009264",
                "in_CY": "inputChar"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "convert_to_twos_complement_08009278",
            "code": "\nuint convertToTwosComplement_08009278(uint output)\n\n{\n  uint complement;\n  uint difference;\n  \n  if (output << 1 < 0x7f000000) {\n    return 0;\n  }\n  complement = (output << 1) >> 0x18;\n  difference = 0x9e - complement;\n  if (complement < 0x9f && difference != 0) {\n    complement = (output << 8 | 0x80000000) >> (difference & 0xff);\n    if ((output & 0x80000000) != 0) {\n      complement = -complement;\n    }\n    return complement;\n  }\n  if ((difference == 0xffffff9f) && ((output & 0x7fffff) != 0)) {\n    return 0;\n  }\n  output = output & 0x80000000;\n  if (output == 0) {\n    output = 0x7fffffff;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08009278": "convert_to_twos_complement_08009278",
                "param_1": "output",
                "uVar1": "complement",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08003826"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080092c4",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_2000044c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800c0c0);\n  }\n  for (puVar2 = &DAT_2000044c; puVar2 < &DAT_20000f20; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_device_0800756c();\n  execute_functions_0800b3e8();\n  UNRECOVERED_JUMPTABLE = (code *)0x80092fa;\n  initialize_program_08007540();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_0800756c",
                "FUN_08007540",
                "FUN_0800b3e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "calculate_modified_value_08009318",
            "code": "\nlonglong calculateModifiedValue_08009318(uint inputValue1,uint inputValue2,undefined4 unusedParam1,undefined4 unusedParam2)\n\n{\n  int isValidInput;\n  uint shiftAmount;\n  uint bitMask;\n  bool carryFlag;\n  undefined8 calculatedValue;\n  longlong result;\n  \n  bitMask = (inputValue2 << 1) >> 0x15;\n  shiftAmount = bitMask - 0x3ff;\n  if ((int)shiftAmount < 0x14) {\n    if ((int)shiftAmount < 0) {\n      calculatedValue = calculate_double_precision_080082d4(inputValue1,inputValue2,0x8800759c,0x7e37e43c,unusedParam2);\n      isValidInput = is_input_valid_08008b60((int)calculatedValue,(int)((ulonglong)calculatedValue >> 0x20),0,0);\n      result = CONCAT44(inputValue2,inputValue1);\n      if (isValidInput != 0) {\n        if ((int)inputValue2 < 0) {\n          result = -0x8000000000000000;\n        }\n        else if ((inputValue1 | inputValue2) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      bitMask = 0xfffff >> (shiftAmount & 0xff);\n      result = CONCAT44(inputValue2,inputValue1);\n      if ((inputValue2 & bitMask | inputValue1) != 0) {\n        calculatedValue = calculate_double_precision_080082d4(inputValue1,inputValue2,0x8800759c,0x7e37e43c,unusedParam2);\n        isValidInput = is_input_valid_08008b60((int)calculatedValue,(int)((ulonglong)calculatedValue >> 0x20),0,0);\n        result = CONCAT44(inputValue2,inputValue1);\n        if (isValidInput != 0) {\n          if (0 < (int)inputValue2) {\n            inputValue2 = inputValue2 + (0x100000 >> (shiftAmount & 0xff));\n          }\n          result = (ulonglong)(inputValue2 & ~bitMask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shiftAmount < 0x34) {\n    bitMask = 0xffffffff >> (bitMask - 0x413 & 0xff);\n    result = CONCAT44(inputValue2,inputValue1);\n    if ((bitMask & inputValue1) != 0) {\n      calculatedValue = calculate_double_precision_080082d4(inputValue1,inputValue2,0x8800759c,0x7e37e43c,unusedParam2);\n      isValidInput = is_input_valid_08008b60((int)calculatedValue,(int)((ulonglong)calculatedValue >> 0x20),0,0);\n      result = CONCAT44(inputValue2,inputValue1);\n      if (isValidInput != 0) {\n        if (0 < (int)inputValue2) {\n          if (shiftAmount == 0x14) {\n            inputValue2 = inputValue2 + 1;\n          }\n          else {\n            shiftAmount = 1 << (0x34 - shiftAmount & 0xff);\n            carryFlag = CARRY4(shiftAmount,inputValue1);\n            inputValue1 = shiftAmount + inputValue1;\n            if (carryFlag != false) {\n              inputValue2 = inputValue2 + 1;\n            }\n          }\n        }\n        result = CONCAT44(inputValue2,inputValue1 & ~bitMask);\n      }\n    }\n  }\n  else {\n    result = CONCAT44(inputValue2,inputValue1);\n    if (shiftAmount == 0x400) {\n      result = calculate_double_precision_080082d4();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009318": "calculate_modified_value_08009318",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "iVar1": "isValidInput",
                "uVar2": "shiftAmount",
                "uVar3": "bitMask",
                "bVar4": "carryFlag",
                "uVar5": "calculatedValue",
                "lVar6": "result"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994",
                "FUN_08002c18"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "calculate_result_08009410",
            "code": "\nundefined4 calculate_result_08009410(undefined4 input_param1,uint input_param2)\n\n{\n  undefined4 result;\n  uint resultFlag;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  \n  if (0x3fe921fb < (input_param2 & 0x7fffffff)) {\n    if ((input_param2 & 0x7fffffff) < 0x7ff00000) {\n      resultFlag = calculate_result_08009410_08009d78(input_param1,input_param2,&local_var1);\n      resultFlag = resultFlag & 3;\n      if (resultFlag == 1) {\n        result = calculate_value_0800adf0(local_var1,local_var2,local_var3,local_var4,1);\n      }\n      else if (resultFlag == 2) {\n        result = calculate_improved_value_0800a348(local_var1,local_var2,local_var3,local_var4);\n      }\n      else if (resultFlag == 0) {\n        result = calculate_improved_value_0800a348(local_var1,local_var2,local_var3,local_var4);\n      }\n      else {\n        result = calculate_value_0800adf0(local_var1,local_var2,local_var3,local_var4,1);\n      }\n    }\n    else {\n      result = reverse_bits_080082d0(input_param1,input_param2,input_param1,input_param2);\n    }\n    return result;\n  }\n  result = calculate_improved_value_0800a348(input_param1,input_param2,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "calculate_result_08009410",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "uVar1": "result",
                "uVar2": "resultFlag",
                "local_28": "local_var1",
                "uStack_24": "local_var2",
                "local_20": "local_var3",
                "uStack_1c": "local_var4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "calculate_result_080094c0",
            "code": "\nlonglong calculate_result_080094c0(uint input_1,uint input_2,undefined4 param_A,undefined4 param_B)\n\n{\n  int is_valid;\n  uint shift_count;\n  uint mask;\n  bool carry_flag;\n  undefined8 precision_value;\n  longlong result;\n  \n  mask = (input_2 << 1) >> 0x15;\n  shift_count = mask - 0x3ff;\n  if ((int)shift_count < 0x14) {\n    if ((int)shift_count < 0) {\n      precision_value = calculate_double_precision_080082d4(input_1,input_2,0x8800759c,0x7e37e43c,param_B);\n      is_valid = is_input_valid_08008b60((int)precision_value,(int)((ulonglong)precision_value >> 0x20),0,0);\n      result = CONCAT44(input_2,input_1);\n      if (is_valid != 0) {\n        if ((int)input_2 < 0) {\n          if ((input_1 | input_2 & 0x7fffffff) != 0) {\n            input_2 = 0xbff00000;\n          }\n          result = (ulonglong)input_2 << 0x20;\n        }\n        else {\n          result = 0;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shift_count & 0xff);\n      result = CONCAT44(input_2,input_1);\n      if ((input_2 & mask | input_1) != 0) {\n        precision_value = calculate_double_precision_080082d4(input_1,input_2,0x8800759c,0x7e37e43c,param_B);\n        is_valid = is_input_valid_08008b60((int)precision_value,(int)((ulonglong)precision_value >> 0x20),0,0);\n        result = CONCAT44(input_2,input_1);\n        if (is_valid != 0) {\n          if ((int)input_2 < 0) {\n            input_2 = input_2 + (0x100000 >> (shift_count & 0xff));\n          }\n          result = (ulonglong)(input_2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shift_count < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    result = CONCAT44(input_2,input_1);\n    if ((mask & input_1) != 0) {\n      precision_value = calculate_double_precision_080082d4(input_1,input_2,0x8800759c,0x7e37e43c,param_B);\n      is_valid = is_input_valid_08008b60((int)precision_value,(int)((ulonglong)precision_value >> 0x20),0,0);\n      result = CONCAT44(input_2,input_1);\n      if (is_valid != 0) {\n        if ((int)input_2 < 0) {\n          if (shift_count == 0x14) {\n            input_2 = input_2 + 1;\n          }\n          else {\n            shift_count = 1 << (0x34 - shift_count & 0xff);\n            carry_flag = CARRY4(shift_count,input_1);\n            input_1 = shift_count + input_1;\n            if (carry_flag != false) {\n              input_2 = input_2 + 1;\n            }\n          }\n        }\n        result = CONCAT44(input_2,input_1 & ~mask);\n      }\n    }\n  }\n  else {\n    result = CONCAT44(input_2,input_1);\n    if (shift_count == 0x400) {\n      result = calculate_double_precision_080082d4();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "calculate_result_080094c0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "param_A",
                "param_4": "param_B",
                "iVar1": "is_valid",
                "uVar2": "shift_count",
                "uVar3": "mask",
                "bVar4": "carry_flag",
                "uVar5": "precision_value",
                "lVar6": "result"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_08002c18",
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_modified_value_080095b8",
            "code": "\nint calculate_modified_value_080095b8(uint input_value_1,uint input_value_2)\n\n{\n  uint shifted_input_value;\n  uint shifted_input_value_divided_by_32;\n  uint modified_input_value;\n  int sign_value;\n  uint difference;\n  \n  shifted_input_value_divided_by_32 = (input_value_2 << 1) >> 0x15;\n  difference = shifted_input_value_divided_by_32 - 0x3ff;\n  if ((int)input_value_2 < 0) {\n    sign_value = -1;\n  }\n  else {\n    sign_value = 1;\n  }\n  modified_input_value = input_value_2 & 0xfffff | 0x100000;\n  if ((int)difference < 0x14) {\n    if ((int)difference < 0) {\n      if (difference != 0xffffffff) {\n        sign_value = 0;\n      }\n      return sign_value;\n    }\n    modified_input_value = modified_input_value + (0x80000 >> (difference & 0xff)) >> (0x14 - difference & 0xff);\n  }\n  else {\n    if (0x1e < difference) {\n      sign_value = calculate_value_08008ba0();\n      return sign_value;\n    }\n    if ((int)difference < 0x34) {\n      shifted_input_value = 0x80000000 >> (shifted_input_value_divided_by_32 - 0x413 & 0xff);\n      if (CARRY4(shifted_input_value,input_value_1) != false) {\n        modified_input_value = modified_input_value + 1;\n      }\n      modified_input_value = modified_input_value << (shifted_input_value_divided_by_32 - 0x413 & 0xff);\n      if (difference != 0x14) {\n        modified_input_value = modified_input_value | shifted_input_value + input_value_1 >> (0x34 - difference & 0xff);\n      }\n    }\n    else {\n      modified_input_value = modified_input_value << (shifted_input_value_divided_by_32 - 0x413 & 0xff) | input_value_1 << (shifted_input_value_divided_by_32 - 0x433 & 0xff);\n    }\n  }\n  return modified_input_value * sign_value;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_modified_value_080095b8",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "uVar1": "shifted_input_value",
                "uVar2": "shifted_input_value_divided_by_32",
                "uVar3": "modified_input_value",
                "iVar4": "sign_value",
                "uVar5": "difference"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994"
            ],
            "called": [
                "FUN_08008ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "convert_to_double_precision_08009654",
            "code": "\nlonglong convertToDoublePrecision_08009654(uint num1,uint num2)\n\n{\n  uint exponentDiff;\n  uint shiftedExponent;\n  longlong result;\n  \n  result = CONCAT44(num2,num1);\n  shiftedExponent = (num2 << 1) >> 0x15;\n  exponentDiff = shiftedExponent - 0x3ff;\n  if ((int)exponentDiff < 0x14) {\n    if ((int)exponentDiff < 0) {\n      num2 = num2 & 0x80000000;\n      if (exponentDiff == 0xffffffff) {\n        num2 = num2 | 0x3ff00000;\n      }\n      result = (ulonglong)num2 << 0x20;\n    }\n    else {\n      shiftedExponent = 0xfffff >> (exponentDiff & 0xff);\n      result = CONCAT44(num2,num1);\n      if ((num2 & shiftedExponent | num1) != 0) {\n        result = (ulonglong)(num2 + (0x80000 >> (exponentDiff & 0xff)) & ~shiftedExponent) << 0x20;\n      }\n    }\n  }\n  else if ((int)exponentDiff < 0x34) {\n    shiftedExponent = 0xffffffff >> (shiftedExponent - 0x413 & 0xff);\n    if ((num1 & shiftedExponent) != 0) {\n      exponentDiff = 1 << (0x33 - exponentDiff & 0xff);\n      if (CARRY4(num1,exponentDiff) != false) {\n        num2 = num2 + 1;\n      }\n      result = CONCAT44(num2,num1 + exponentDiff & ~shiftedExponent);\n    }\n  }\n  else {\n    result = CONCAT44(num2,num1);\n    if (exponentDiff == 0x400) {\n      result = calculate_double_precision_080082d4();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009654": "convert_to_double_precision_08009654",
                "param_1": "num1",
                "param_2": "num2",
                "uVar1": "exponentDiff",
                "uVar2": "shiftedExponent",
                "lVar3": "result"
            },
            "calling": [
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "calculate_result_080096e8",
            "code": "\nundefined4 calculate_result_080096e8(undefined4 input_value,uint input_mask)\n\n{\n  undefined4 result;\n  uint result_type;\n  undefined4 calculated_value1;\n  undefined4 calculated_value2;\n  undefined4 calculated_value3;\n  undefined4 calculated_value4;\n  \n  if (0x3fe921fb < (input_mask & 0x7fffffff)) {\n    if ((input_mask & 0x7fffffff) < 0x7ff00000) {\n      result_type = calculate_result_080096e8_08009d78(input_value,input_mask,&calculated_value1);\n      result_type = result_type & 3;\n      if (result_type == 1) {\n        result = calculate_improved_value_0800a348(calculated_value1,calculated_value2,calculated_value3,calculated_value4);\n      }\n      else if (result_type == 2) {\n        result = calculate_value_0800adf0(calculated_value1,calculated_value2,calculated_value3,calculated_value4,1);\n      }\n      else if (result_type == 0) {\n        result = calculate_value_0800adf0(calculated_value1,calculated_value2,calculated_value3,calculated_value4,1);\n      }\n      else {\n        result = calculate_improved_value_0800a348(calculated_value1,calculated_value2,calculated_value3,calculated_value4);\n      }\n    }\n    else {\n      result = reverse_bits_080082d0(input_value,input_mask,input_value,input_mask);\n    }\n    return result;\n  }\n  result = calculate_value_0800adf0(input_value,input_mask,0,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "calculate_result_080096e8",
                "param_1": "input_value",
                "param_2": "input_mask",
                "uVar1": "result",
                "uVar2": "result_type",
                "local_28": "calculated_value1",
                "uStack_24": "calculated_value2",
                "local_20": "calculated_value3",
                "uStack_1c": "calculated_value4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "calculate_precision_08009798",
            "code": "\nlonglong calculate_precision_08009798(uint input1,uint input2,undefined4 extra_param1,undefined4 extra_param2)\n\n{\n  uint offset1;\n  uint offset2;\n  longlong result;\n  \n  offset2 = (input2 << 1) >> 0x15;\n  offset1 = offset2 - 0x3ff;\n  if ((int)offset1 < 0x14) {\n    if ((int)offset1 < 0) {\n      return ((ulonglong)input2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input2 & ~(0xfffff >> (offset1 & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)offset1 < 0x34) {\n      return CONCAT44(input2,input1 & ~(0xffffffffU >> (offset2 - 0x413 & 0xff)));\n    }\n    if (offset1 != 0x400) {\n      return CONCAT44(input2,input1);\n    }\n    result = calculate_double_precision_080082d4(input1,input2,input1,input2,extra_param2);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "calculate_precision_08009798",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "extra_param1",
                "param_4": "extra_param2",
                "uVar1": "offset1",
                "uVar2": "offset2",
                "lVar3": "result"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08009990": {
            "entrypoint": "0x08009818",
            "current_name": "calculate_value_thunk_08009990",
            "code": "\nuint calculateValue_thunk_08009990(uint value1,uint value2,uint value3,uint value4)\n\n{\n  int difference;\n  undefined4 result;\n  uint shiftedValue;\n  uint clampedValue4;\n  uint clampedValue2;\n  undefined8 floatingResult;\n  \n  clampedValue4 = value4 & 0x7fffffff;\n  if (((clampedValue4 | (-value3 | value3) >> 0x1f) < 0x7ff00001) &&\n     (clampedValue2 = value2 & 0x7fffffff, (clampedValue2 | (-value1 | value1) >> 0x1f) < 0x7ff00001)) {\n    if ((value4 + 0xc0100000 | value3) == 0) {\n      clampedValue4 = calculate_value_0800af78();\n      return clampedValue4;\n    }\n    shiftedValue = (int)value4 >> 0x1e & 2U | value2 >> 0x1f;\n    if ((clampedValue2 | value1) == 0) {\n      if (shiftedValue == 2) {\n        value1 = 0x54442d18;\n      }\n      else if (shiftedValue == 3) {\n        value1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((clampedValue4 | value3) != 0) {\n        if (clampedValue4 == 0x7ff00000) {\n          shiftedValue = shiftedValue - 1;\n          if (clampedValue2 == 0x7ff00000) {\n            if (shiftedValue < 3) {\n              return *(uint *)(&DAT_0800be68 + shiftedValue * 8);\n            }\n            return 0x54442d18;\n          }\n          if (shiftedValue < 3) {\n            return *(uint *)(&DAT_0800be80 + shiftedValue * 8);\n          }\n          return 0;\n        }\n        if (clampedValue2 != 0x7ff00000) {\n          difference = (int)(clampedValue2 - clampedValue4) >> 0x14;\n          if ((int)(clampedValue2 - clampedValue4) < 0x3d00000) {\n            if (((int)value4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n              floatingResult = 0;\n            }\n            else {\n              calculate_floating_point_08008894(value1,value2,value3,value4,value4);\n              FUNC_0800b2cc();\n              floatingResult = calculate_value_0800af78();\n            }\n          }\n          else {\n            floatingResult = 0x3ff921fb54442d18;\n          }\n          result = (undefined4)((ulonglong)floatingResult >> 0x20);\n          clampedValue4 = (uint)floatingResult;\n          if (shiftedValue == 1) {\n            return clampedValue4;\n          }\n          if (shiftedValue == 2) {\n            floatingResult = reverse_bits_080082d0(clampedValue4,result,0x33145c07,0x3ca1a626);\n            clampedValue4 = reverse_bits_080082d0(0x54442d18,0x400921fb,(int)floatingResult,(int)((ulonglong)floatingResult >> 0x20));\n            return clampedValue4;\n          }\n          if (shiftedValue == 0) {\n            return clampedValue4;\n          }\n          floatingResult = reverse_bits_080082d0(clampedValue4,result,0x33145c07,0x3ca1a626);\n          clampedValue4 = reverse_bits_080082d0((int)floatingResult,(int)((ulonglong)floatingResult >> 0x20),0x54442d18,0x400921fb);\n          return clampedValue4;\n        }\n      }\n      if ((int)value2 < 0) {\n        value1 = 0x54442d18;\n      }\n      else {\n        value1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    value1 = calculate_double_precision_080082d4(value3,value4,value1,value2);\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08009990": "calculate_value_thunk_08009990",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "difference",
                "uVar2": "result",
                "uVar3": "shiftedValue",
                "uVar4": "clampedValue4",
                "uVar5": "clampedValue2",
                "uVar6": "floatingResult"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08009990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "initialize_system_0800981c",
            "code": "\nundefined8 initialize_system_0800981c(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  int result;\n  undefined4 *dataPointer;\n  int *globalDataPointer;\n  undefined8 returnValue;\n  undefined4 constant1;\n  char *constant2;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 input3Copy;\n  undefined4 input4Copy;\n  undefined4 condition1;\n  undefined4 condition2;\n  int bitwiseShiftResult;\n  \n  returnValue = calculate_result_08009b24();\n  if (DAT_20000014 == -1) {\n    return returnValue;\n  }\n  bitwiseShiftResult = get_bitwise_shift_0800b2d4();\n  if (bitwiseShiftResult != 0) {\n    return returnValue;\n  }\n  result = get_bitwise_shift_0800b2d4(input1,input2);\n  if (result == 0) {\n    return returnValue;\n  }\n  result = get_bitwise_shift_0800b2d4(input3,input4);\n  if (result == 0) {\n    return returnValue;\n  }\n  constant1 = 3;\n  constant2 = \"hypot\";\n  input1Copy = input1;\n  input2Copy = input2;\n  input3Copy = input3;\n  input4Copy = input4;\n  if (DAT_20000014 == '\\0') {\n    condition1 = 0xe0000000;\n    condition2 = 0x47efffff;\nLAB_080098aa:\n    result = initialize_system_0800981c_0800b2e0(&constant1);\n    if (result != 0) goto LAB_08009896;\n  }\n  else {\n    condition1 = 0;\n    condition2 = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  dataPointer = (undefined4 *)get_global_data_0800b3dc();\n  *dataPointer = 0x22;\nLAB_08009896:\n  returnValue = CONCAT44(condition2,condition1);\n  if (bitwiseShiftResult != 0) {\n    globalDataPointer = (int *)get_global_data_0800b3dc();\n    returnValue = CONCAT44(condition2,condition1);\n    *globalDataPointer = bitwiseShiftResult;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "initialize_system_0800981c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "puVar2": "dataPointer",
                "piVar3": "globalDataPointer",
                "uVar4": "returnValue",
                "local_50": "constant1",
                "pcStack_4c": "constant2",
                "local_48": "input1Copy",
                "uStack_44": "input2Copy",
                "local_40": "input3Copy",
                "uStack_3c": "input4Copy",
                "local_38": "condition1",
                "uStack_34": "condition2",
                "local_30": "bitwiseShiftResult"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08009b24",
                "FUN_0800b3dc",
                "FUN_0800b2d4",
                "FUN_0800b2e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "initialize_and_calculate_result_080098d0",
            "code": "\nundefined4 initialize_and_calculate_result_080098d0(undefined4 input_1,undefined4 input_2)\n\n{\n  char flag;\n  undefined4 result;\n  int validation_result;\n  undefined4 *global_data_ptr;\n  int *global_data_int_ptr;\n  undefined4 initialize_flag;\n  undefined *data_ptr;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_1_copy_2;\n  undefined4 input_2_copy_2;\n  undefined8 floating_point_result;\n  int params_result;\n  \n  result = calculate_result_0800a1bc();\n  flag = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (params_result = check_valid_params_08008b74(input_1,input_2,input_1,input_2), params_result != 0)) ||\n     (validation_result = is_input_null_08008b24(input_1,input_2,0,0), validation_result == 0)) {\n    return result;\n  }\n  initialize_flag = 1;\n  data_ptr = &DAT_0800be5c;\n  input_1_copy = input_1;\n  input_2_copy = input_2;\n  input_1_copy_2 = input_1;\n  input_2_copy_2 = input_2;\n  if (flag == '\\0') {\n    floating_point_result = 0;\nLAB_0800996c:\n    validation_result = initialize_system_0800b2e0(&initialize_flag);\n    if (validation_result != 0) goto joined_r0x0800997a;\n  }\n  else {\n    floating_point_result = calculate_floating_point_08008894(0,0,0,0);\n    if (flag != '\\x02') goto LAB_0800996c;\n  }\n  global_data_ptr = (undefined4 *)get_global_data_0800b3dc();\n  *global_data_ptr = 0x21;\njoined_r0x0800997a:\n  if (params_result != 0) {\n    global_data_int_ptr = (int *)get_global_data_0800b3dc();\n    *global_data_int_ptr = params_result;\n  }\n  return (undefined4)floating_point_result;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "initialize_and_calculate_result_080098d0",
                "param_1": "input_1",
                "param_2": "input_2",
                "cVar1": "flag",
                "uVar2": "result",
                "iVar3": "validation_result",
                "puVar4": "global_data_ptr",
                "piVar5": "global_data_int_ptr",
                "local_50": "initialize_flag",
                "local_4c": "data_ptr",
                "local_48": "input_1_copy",
                "uStack_44": "input_2_copy",
                "local_40": "input_1_copy_2",
                "uStack_3c": "input_2_copy_2",
                "local_38": "floating_point_result",
                "local_30": "params_result"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008b24",
                "FUN_0800b3dc",
                "FUN_08008b74",
                "FUN_08008894",
                "FUN_0800b2e0",
                "FUN_0800a1bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "calculate_updated_value_08009990",
            "code": "\nuint calculate_updated_value_08009990(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int temp_var_1;\n  undefined4 intermediate_result_2;\n  uint intermediate_result_3;\n  uint updated_param_4;\n  uint updated_param_2;\n  undefined8 result_1;\n  \n  updated_param_4 = input_4 & 0x7fffffff;\n  if (((updated_param_4 | (-input_3 | input_3) >> 0x1f) < 0x7ff00001) &&\n     (updated_param_2 = input_2 & 0x7fffffff, (updated_param_2 | (-input_1 | input_1) >> 0x1f) < 0x7ff00001)) {\n    if ((input_4 + 0xc0100000 | input_3) == 0) {\n      updated_param_4 = calculate_value_0800af78();\n      return updated_param_4;\n    }\n    intermediate_result_3 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n    if ((updated_param_2 | input_1) == 0) {\n      if (intermediate_result_3 == 2) {\n        input_1 = 0x54442d18;\n      }\n      else if (intermediate_result_3 == 3) {\n        input_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((updated_param_4 | input_3) != 0) {\n        if (updated_param_4 == 0x7ff00000) {\n          intermediate_result_3 = intermediate_result_3 - 1;\n          if (updated_param_2 == 0x7ff00000) {\n            if (intermediate_result_3 < 3) {\n              return *(uint *)(&DAT_0800be68 + intermediate_result_3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (intermediate_result_3 < 3) {\n            return *(uint *)(&DAT_0800be80 + intermediate_result_3 * 8);\n          }\n          return 0;\n        }\n        if (updated_param_2 != 0x7ff00000) {\n          temp_var_1 = (int)(updated_param_2 - updated_param_4) >> 0x14;\n          if ((int)(updated_param_2 - updated_param_4) < 0x3d00000) {\n            if (((int)input_4 < 0) && (temp_var_1 + 0x3c < 0 != SCARRY4(temp_var_1,0x3c))) {\n              result_1 = 0;\n            }\n            else {\n              calculate_floating_point_08008894(input_1,input_2,input_3,input_4,input_4);\n              FUNC_0800b2cc();\n              result_1 = calculate_value_0800af78();\n            }\n          }\n          else {\n            result_1 = 0x3ff921fb54442d18;\n          }\n          intermediate_result_2 = (undefined4)((ulonglong)result_1 >> 0x20);\n          updated_param_4 = (uint)result_1;\n          if (intermediate_result_3 == 1) {\n            return updated_param_4;\n          }\n          if (intermediate_result_3 == 2) {\n            result_1 = reverse_bits_080082d0(updated_param_4,intermediate_result_2,0x33145c07,0x3ca1a626);\n            updated_param_4 = reverse_bits_080082d0(0x54442d18,0x400921fb,(int)result_1,(int)((ulonglong)result_1 >> 0x20));\n            return updated_param_4;\n          }\n          if (intermediate_result_3 == 0) {\n            return updated_param_4;\n          }\n          result_1 = reverse_bits_080082d0(updated_param_4,intermediate_result_2,0x33145c07,0x3ca1a626);\n          updated_param_4 = reverse_bits_080082d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x54442d18,0x400921fb);\n          return updated_param_4;\n        }\n      }\n      if ((int)input_2 < 0) {\n        input_1 = 0x54442d18;\n      }\n      else {\n        input_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input_1 = calculate_double_precision_080082d4(input_3,input_4,input_1,input_2);\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08009990": "calculate_updated_value_08009990",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar2": "intermediate_result_2",
                "uVar3": "intermediate_result_3",
                "uVar4": "updated_param_4",
                "uVar5": "updated_param_2",
                "uVar6": "result_1",
                "iVar1": "temp_var_1"
            },
            "calling": [
                "thunk_FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800af78",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_result_08009b24",
            "code": "\nuint calculate_result_08009b24(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result_1;\n  int is_null;\n  uint result_2;\n  int result_3;\n  undefined4 result_4;\n  int result_5;\n  uint result_6;\n  undefined4 result_7;\n  undefined4 result_8;\n  undefined8 result_9;\n  undefined8 result_10;\n  undefined8 result_11;\n  undefined8 result_12;\n  int shift_value;\n  \n  input_2 = input_2 & 0x7fffffff;\n  input_4 = input_4 & 0x7fffffff;\n  result_2 = input_1;\n  result_6 = input_2;\n  if (input_2 < input_4) {\n    result_2 = input_3;\n    input_3 = input_1;\n    result_6 = input_4;\n    input_4 = input_2;\n  }\n  if (0x3c00000 < (int)(result_6 - input_4)) {\n    result_2 = calculate_double_precision_080082d4(result_2,result_6,input_3,input_4);\n    return result_2;\n  }\n  if (result_6 < 0x5f300001) {\n    shift_value = 0;\n  }\n  else {\n    if (0x7fefffff < result_6) {\n      if ((result_6 & 0xfffff | result_2) != 0) {\n        result_2 = calculate_double_precision_080082d4(result_2,result_6,input_3,input_4);\n      }\n      if ((input_4 ^ 0x7ff00000 | input_3) != 0) {\n        return result_2;\n      }\n      return input_3;\n    }\n    result_6 = result_6 + 0xda800000;\n    input_4 = input_4 + 0xda800000;\n    shift_value = 600;\n  }\n  result_10 = CONCAT44(result_6,result_2);\n  result_9 = CONCAT44(input_4,input_3);\n  if ((int)input_4 < 0x20b00000) {\n    if ((int)input_4 < 0x100000) {\n      if ((input_4 | input_3) == 0) {\n        return result_2;\n      }\n      result_9 = calculate_xored_bits_08008640(input_3,input_4,0,0x7fd00000);\n      result_10 = calculate_xored_bits_08008640(result_2,result_6,0,0x7fd00000);\n      shift_value = shift_value + -0x3fe;\n    }\n    else {\n      result_6 = result_6 + 0x25800000;\n      result_10 = CONCAT44(result_6,result_2);\n      input_4 = input_4 + 0x25800000;\n      result_9 = CONCAT44(input_4,input_3);\n      shift_value = shift_value + -600;\n    }\n  }\n  result_8 = (undefined4)((ulonglong)result_10 >> 0x20);\n  result_7 = (undefined4)result_10;\n  result_5 = (int)((ulonglong)result_9 >> 0x20);\n  result_4 = (undefined4)result_9;\n  result_9 = reverse_bits_080082d0(result_7,result_8,result_4,result_5);\n  result_3 = (int)((ulonglong)result_9 >> 0x20);\n  result_1 = (undefined4)result_9;\n  is_null = is_input_null_08008b24(result_4,result_5,result_1,result_3);\n  if (is_null == 0) {\n    result_9 = calculate_xored_bits_08008640(0,input_4,0);\n    result_10 = calculate_xored_bits_08008640(result_1,result_3 + -0x80000000,result_1,result_3);\n    result_11 = calculate_double_precision_080082d4(result_7,result_8,result_7,result_8);\n    result_11 = reverse_bits_080082d0((int)result_11,(int)((ulonglong)result_11 >> 0x20),0,result_6 + 0x100000);\n    result_11 = calculate_xored_bits_08008640((int)result_11,(int)((ulonglong)result_11 >> 0x20),result_4,result_5);\n    result_12 = reverse_bits_080082d0(result_4,result_5,0,input_4);\n    result_12 = calculate_xored_bits_08008640((int)result_12,(int)((ulonglong)result_12 >> 0x20),0,result_6 + 0x100000);\n    result_11 = calculate_double_precision_080082d4((int)result_11,(int)((ulonglong)result_11 >> 0x20),(int)result_12,\n                          (int)((ulonglong)result_12 >> 0x20));\n    result_10 = reverse_bits_080082d0((int)result_10,(int)((ulonglong)result_10 >> 0x20),(int)result_11,\n                          (int)((ulonglong)result_11 >> 0x20));\n    reverse_bits_080082d0((int)result_9,(int)((ulonglong)result_9 >> 0x20),(int)result_10,\n                 (int)((ulonglong)result_10 >> 0x20));\n    result_9 = calculate_result_08009b24_0800a1bc();\n  }\n  else {\n    result_9 = calculate_xored_bits_08008640(0,result_6,0,result_6);\n    result_10 = calculate_xored_bits_08008640(result_4,result_5 + -0x80000000,result_4,result_5);\n    result_11 = calculate_double_precision_080082d4(result_7,result_8,0,result_6);\n    result_12 = reverse_bits_080082d0(result_7,result_8,0,result_6);\n    result_11 = calculate_xored_bits_08008640((int)result_11,(int)((ulonglong)result_11 >> 0x20),(int)result_12,\n                          (int)((ulonglong)result_12 >> 0x20));\n    result_10 = reverse_bits_080082d0((int)result_10,(int)((ulonglong)result_10 >> 0x20),(int)result_11,\n                          (int)((ulonglong)result_11 >> 0x20));\n    reverse_bits_080082d0((int)result_9,(int)((ulonglong)result_9 >> 0x20),(int)result_10,\n                 (int)((ulonglong)result_10 >> 0x20));\n    result_9 = calculate_result_08009b24_0800a1bc();\n  }\n  result_2 = (uint)result_9;\n  if (shift_value != 0) {\n    result_2 = calculate_xored_bits_08008640(result_2,(int)((ulonglong)result_9 >> 0x20),0,shift_value * 0x100000 + 0x3ff00000);\n  }\n  return result_2;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_result_08009b24",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "iVar2": "is_null",
                "uVar3": "result_2",
                "iVar4": "result_3",
                "uVar5": "result_4",
                "iVar6": "result_5",
                "uVar7": "result_6",
                "uVar8": "result_7",
                "uVar9": "result_8",
                "uVar10": "result_9",
                "uVar11": "result_10",
                "uVar12": "result_11",
                "uVar13": "result_12",
                "local_3c": "shift_value"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b24",
                "FUN_08008640",
                "FUN_0800a1bc",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "calculate_result_08009d78",
            "code": "\nint calculateResult_08009d78(undefined4 input1,uint input2,undefined8 *result)\n\n{\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  undefined4 var7;\n  uint var8;\n  int var9;\n  undefined8 temp1;\n  undefined8 temp2;\n  undefined8 temp3;\n  undefined4 localVar1;\n  undefined4 uStackVar;\n  undefined8 localVar2;\n  undefined8 localVar3;\n  undefined8 localVar4;\n  \n  var8 = input2 & 0x7fffffff;\n  if (var8 < 0x3fe921fc) {\n    *(undefined4 *)result = input1;\n    *(uint *)((int)result + 4) = input2;\n    *(undefined4 *)(result + 1) = 0;\n    *(undefined4 *)((int)result + 0xc) = 0;\n    return 0;\n  }\n  if (var8 < 0x4002d97c) {\n    if ((int)input2 < 1) {\n      temp1 = calculate_double_precision_080082d4(input1,input2,0x54400000,0x3ff921fb);\n      var3 = (undefined4)((ulonglong)temp1 >> 0x20);\n      var1 = (undefined4)temp1;\n      if (var8 != 0x3ff921fb) {\n        temp1 = calculate_double_precision_080082d4(var1,var3,0x1a626331,0x3dd0b461);\n        *result = temp1;\n        temp1 = reverse_bits_080082d0(var1,var3);\n        temp1 = calculate_double_precision_080082d4((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x1a626331,0x3dd0b461);\n        result[1] = temp1;\n        return -1;\n      }\n      temp1 = calculate_double_precision_080082d4(var1,var3,0x1a600000,0x3dd0b461);\n      var1 = (undefined4)((ulonglong)temp1 >> 0x20);\n      temp2 = calculate_double_precision_080082d4((int)temp1,var1,0x2e037073,0x3ba3198a);\n      *result = temp2;\n      temp1 = reverse_bits_080082d0((int)temp1,var1);\n      temp1 = calculate_double_precision_080082d4((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x2e037073,0x3ba3198a);\n      result[1] = temp1;\n      return -1;\n    }\n    temp1 = reverse_bits_080082d0();\n    var3 = (undefined4)((ulonglong)temp1 >> 0x20);\n    var1 = (undefined4)temp1;\n    if (var8 != 0x3ff921fb) {\n      temp1 = reverse_bits_080082d0(var1,var3,0x1a626331,0x3dd0b461);\n      *result = temp1;\n      temp1 = reverse_bits_080082d0(var1,var3);\n      temp1 = reverse_bits_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x1a626331,0x3dd0b461);\n      result[1] = temp1;\n      return 1;\n    }\n    temp1 = reverse_bits_080082d0(var1,var3,0x1a600000,0x3dd0b461);\n    var1 = (undefined4)((ulonglong)temp1 >> 0x20);\n    temp2 = reverse_bits_080082d0((int)temp1,var1,0x2e037073,0x3ba3198a);\n    *result = temp2;\n    temp1 = reverse_bits_080082d0((int)temp1,var1);\n    temp1 = reverse_bits_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x2e037073,0x3ba3198a);\n    result[1] = temp1;\n    return 1;\n  }\n  if (0x413921fb < var8) {\n    if (0x7fefffff < var8) {\n      temp1 = reverse_bits_080082d0(input1,input2,input1,input2);\n      result[1] = temp1;\n      *result = temp1;\n      return 0;\n    }\n    var9 = ((int)var8 >> 0x14) + -0x416;\n    calculate_value_08008ba0();\n    localVar2 = bitwise_rotate_left_0800856c();\n    temp1 = reverse_bits_080082d0(input1,var8 + var9 * -0x100000,(int)localVar2,\n                          (int)((ulonglong)localVar2 >> 0x20));\n    temp1 = calculate_xored_bits_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x41700000);\n    calculate_value_08008ba0();\n    localVar3 = bitwise_rotate_left_0800856c();\n    temp1 = reverse_bits_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n    localVar4 = calculate_xored_bits_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x41700000);\n    check_parameter_and_return_result_08008b10((int)localVar4,(int)((ulonglong)localVar4 >> 0x20),0,0);\n    var9 = calculate_xored_bits_0800a5a0(&localVar2,result,var9);\n    if (-1 < (int)input2) {\n      return var9;\n    }\n    *(int *)((int)result + 4) = *(int *)((int)result + 4) + -0x80000000;\n    *(int *)((int)result + 0xc) = *(int *)((int)result + 0xc) + -0x80000000;\n    return -var9;\n  }\n  temp1 = FUNC_0800b2cc();\n  var3 = (undefined4)((ulonglong)temp1 >> 0x20);\n  temp2 = calculate_xored_bits_08008640((int)temp1,var3,0x6dc9c883,0x3fe45f30);\n  calculate_double_precision_080082d4((int)temp2,(int)((ulonglong)temp2 >> 0x20),0,0x3fe00000);\n  var9 = calculate_value_08008ba0();\n  temp2 = bitwise_rotate_left_0800856c();\n  var4 = (undefined4)((ulonglong)temp2 >> 0x20);\n  var1 = (undefined4)temp2;\n  temp2 = calculate_xored_bits_08008640(var1,var4,0x54400000,0x3ff921fb);\n  temp1 = reverse_bits_080082d0((int)temp1,var3,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  var5 = (undefined4)((ulonglong)temp1 >> 0x20);\n  var3 = (undefined4)temp1;\n  temp2 = calculate_xored_bits_08008640(var1,var4,0x1a626331,0x3dd0b461);\n  if ((0x1f < var9) || (*(uint *)(&DAT_0800be98 + (var9 + -1) * 4) == var8)) {\n    temp3 = reverse_bits_080082d0(var3,var5,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    if ((int)((var8 >> 0x14) - ((uint)((int)((ulonglong)temp3 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    temp2 = calculate_xored_bits_08008640(var1,var4,0x1a600000,0x3dd0b461);\n    var6 = (undefined4)((ulonglong)temp2 >> 0x20);\n    temp1 = reverse_bits_080082d0(var3,var5,(int)temp2,var6);\n    var7 = (undefined4)((ulonglong)temp1 >> 0x20);\n    var2 = (undefined4)temp1;\n    temp3 = reverse_bits_080082d0(var3,var5,var2,var7);\n    temp2 = reverse_bits_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,var6);\n    temp3 = calculate_xored_bits_08008640(var1,var4,0x2e037073,0x3ba3198a);\n    temp2 = reverse_bits_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,\n                          (int)((ulonglong)temp2 >> 0x20));\n    temp3 = reverse_bits_080082d0(var2,var7,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    if ((int)(((int)var8 >> 0x14) - ((uint)((int)((ulonglong)temp3 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    temp2 = calculate_xored_bits_08008640(var1,var4,0x2e000000,0x3ba3198a);\n    var3 = (undefined4)((ulonglong)temp2 >> 0x20);\n    temp1 = reverse_bits_080082d0(var2,var7,(int)temp2,var3);\n    temp3 = reverse_bits_080082d0(var2,var7);\n    temp2 = reverse_bits_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,var3);\n    temp3 = calculate_xored_bits_08008640(var1,var4,0x252049c1,0x397b839a);\n    temp2 = reverse_bits_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,\n                          (int)((ulonglong)temp2 >> 0x20));\n  }\n  temp3 = reverse_bits_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                        (int)((ulonglong)temp2 >> 0x20));\nLAB_0800a0ce:\n  uStackVar = (undefined4)((ulonglong)temp1 >> 0x20);\n  localVar1 = (undefined4)temp1;\n  *result = temp3;\n  temp1 = reverse_bits_080082d0(localVar1,uStackVar);\n  temp1 = reverse_bits_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                        (int)((ulonglong)temp2 >> 0x20));\n  result[1] = temp1;\n  if ((int)input2 < 0) {\n    *(int *)result = (int)temp3;\n    *(int *)((int)result + 4) = (int)((ulonglong)temp3 >> 0x20) + -0x80000000;\n    *(int *)(result + 1) = (int)temp1;\n    *(int *)((int)result + 0xc) = (int)((ulonglong)temp1 >> 0x20) + -0x80000000;\n    var9 = -var9;\n  }\n  return var9;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "calculate_result_08009d78",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "result",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5",
                "uVar6": "var6",
                "uVar7": "var7",
                "uVar8": "var8",
                "iVar9": "var9",
                "uVar10": "temp1",
                "uVar11": "temp2",
                "uVar12": "temp3",
                "local_50": "localVar1",
                "uStack_4c": "uStackVar",
                "local_40": "localVar2",
                "local_38": "localVar3",
                "local_30": "localVar4"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_08008b10",
                "FUN_0800b2cc",
                "FUN_0800a5a0",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_result_0800a1bc",
            "code": "\nuint calculate_result_0800a1bc(uint input_1,uint input_2)\n\n{\n  uint loop_counter_1;\n  int loop_counter_2;\n  uint temp_variable_1;\n  undefined4 temp_variable_2;\n  uint bit_counter;\n  uint shift_mask;\n  uint result;\n  uint remainder;\n  uint temp_variable_4;\n  int temp_variable_3;\n  uint temp_result_1;\n  uint temp_result_2;\n  undefined8 temp_register;\n  \n  if ((~input_2 & 0x7ff00000) == 0) {\n    temp_register = calculate_xored_bits_08008640(input_1,input_2,input_1,input_2);\n    result = calculate_double_precision_080082d4((int)temp_register,(int)((ulonglong)temp_register >> 0x20),input_1,input_2);\n    return result;\n  }\n  if ((int)input_2 < 1) {\n    if ((input_2 & 0x7fffffff | input_1) == 0) {\n      return input_1;\n    }\n    if (input_2 != 0) {\n      temp_register = reverse_bits_080082d0(input_1,input_2,input_1);\n      temp_variable_2 = (undefined4)((ulonglong)temp_register >> 0x20);\n      result = calculate_floating_point_08008894((int)temp_register,temp_variable_2,(int)temp_register,temp_variable_2);\n      return result;\n    }\n    do {\n      temp_variable_4 = input_1;\n      result = temp_variable_4 >> 0xb;\n      input_2 = input_2 - 0x15;\n      input_1 = temp_variable_4 << 0x15;\n    } while (result == 0);\n    loop_counter_1 = input_2;\n    if (-1 < (int)temp_variable_4) goto LAB_0800a290;\n    temp_result_2 = 0x20;\n    bit_counter = 0xffffffff;\n    temp_variable_4 = input_1;\n  }\n  else {\n    loop_counter_1 = (int)input_2 >> 0x14;\n    result = input_2;\n    temp_variable_4 = input_1;\n    if (loop_counter_1 != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    temp_variable_4 = 0;\n    temp_result_2 = result;\n    do {\n      bit_counter = temp_variable_4;\n      result = temp_result_2 << 1;\n      temp_variable_3 = temp_result_2 << 0xc;\n      temp_variable_4 = bit_counter + 1;\n      temp_result_2 = result;\n    } while (-1 < temp_variable_3);\n    temp_result_2 = 0x20 - temp_variable_4;\n    input_2 = loop_counter_1;\n    temp_variable_4 = input_1 << (temp_variable_4 & 0xff);\n  }\n  result = input_1 >> (temp_result_2 & 0xff) | result;\n  loop_counter_1 = input_2 - bit_counter;\nLAB_0800a1da:\n  result = result & 0xfffff | 0x100000;\n  if (-1 < (int)(loop_counter_1 << 0x1f)) {\n    result = result * 2 - ((int)temp_variable_4 >> 0x1f);\n    temp_variable_4 = temp_variable_4 << 1;\n  }\n  temp_result_2 = 0;\n  result = result * 2 - ((int)temp_variable_4 >> 0x1f);\n  temp_variable_4 = temp_variable_4 << 1;\n  loop_counter_1 = 0;\n  temp_variable_3 = 0x16;\n  bit_counter = 0x200000;\n  do {\n    loop_counter_2 = loop_counter_1 + bit_counter;\n    if (loop_counter_2 <= (int)result) {\n      result = result - loop_counter_2;\n      loop_counter_1 = loop_counter_2 + bit_counter;\n      temp_result_2 = temp_result_2 + bit_counter;\n    }\n    temp_variable_3 = temp_variable_3 + -1;\n    result = result * 2 - ((int)temp_variable_4 >> 0x1f);\n    bit_counter = bit_counter >> 1;\n    temp_variable_4 = temp_variable_4 << 1;\n  } while (temp_variable_3 != 0);\n  loop_counter_2 = 0x20;\n  shift_mask = 0x80000000;\n  temp_variable_3 = 0;\n  bit_counter = 0;\n  do {\n    temp_variable_1 = shift_mask + temp_variable_3;\n    temp_result_1 = loop_counter_1;\n    if ((int)loop_counter_1 < (int)result) {\n      if ((int)temp_variable_1 < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(temp_variable_1 + shift_mask)) {\n          temp_result_1 = loop_counter_1 + 1;\n        }\n      }\n      remainder = result - loop_counter_1;\n      loop_counter_1 = temp_result_1;\n      if (temp_variable_4 < temp_variable_1) {\n        remainder = remainder - 1;\n      }\nLAB_0800a262:\n      temp_variable_3 = temp_variable_1 + shift_mask;\n      temp_variable_4 = temp_variable_4 - temp_variable_1;\n      bit_counter = bit_counter + shift_mask;\n      result = remainder;\n    }\n    else if ((result == loop_counter_1) && (temp_variable_1 <= temp_variable_4)) {\n      if ((int)temp_variable_1 < 0) goto LAB_0800a26a;\n      remainder = 0;\n      loop_counter_1 = result;\n      goto LAB_0800a262;\n    }\n    loop_counter_2 = loop_counter_2 + -1;\n    shift_mask = shift_mask >> 1;\n    result = result * 2 - ((int)temp_variable_4 >> 0x1f);\n    temp_variable_4 = temp_variable_4 << 1;\n    if (loop_counter_2 == 0) {\n      if ((result | temp_variable_4) == 0) {\n        bit_counter = bit_counter >> 1;\n      }\n      else if (bit_counter == 0xffffffff) {\n        temp_result_2 = temp_result_2 + 1;\n        bit_counter = 0;\n      }\n      else {\n        bit_counter = bit_counter + 1 >> 1;\n      }\n      if ((temp_result_2 & 1) != 0) {\n        bit_counter = bit_counter | 0x80000000;\n      }\n      return bit_counter;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_result_0800a1bc",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "loop_counter_1",
                "iVar2": "loop_counter_2",
                "uVar3": "temp_variable_1",
                "uVar4": "temp_variable_2",
                "uVar5": "bit_counter",
                "uVar6": "shift_mask",
                "uVar7": "result",
                "uVar8": "remainder",
                "uVar9": "temp_variable_4",
                "uVar11": "temp_result_1",
                "uVar12": "temp_result_2",
                "uVar13": "temp_register",
                "iVar10": "temp_variable_3"
            },
            "calling": [
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_improved_value_0800a348",
            "code": "\nundefined4 calculateImprovedValue_0800a348(undefined4 input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int calculatedValue;\n  undefined4 result1;\n  undefined4 result2;\n  uint absInput2;\n  undefined8 xoredBitsResult;\n  undefined8 doublePrecisionResult;\n  undefined8 xoredBitsResult2;\n  undefined4 tempResult1;\n  undefined4 tempResult2;\n  undefined4 tempResult3;\n  undefined4 tempResult4;\n  \n  absInput2 = input2 & 0x7fffffff;\n  if (absInput2 < 0x3e400000) {\n    calculatedValue = calculate_value_08008ba0();\n    if (calculatedValue == 0) {\n      return 0;\n    }\n    xoredBitsResult = calculate_xored_bits_08008640(input1,input2,input1,input2);\n    result2 = (undefined4)((ulonglong)xoredBitsResult >> 0x20);\n    result1 = (undefined4)xoredBitsResult;\n    doublePrecisionResult = calculate_xored_bits_08008640(result1,result2,0xbe8838d4,0xbda8fae9);\n    doublePrecisionResult = calculate_double_precision_080082d4((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    doublePrecisionResult = calculate_xored_bits_08008640((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),result1,result2);\n    doublePrecisionResult = reverse_bits_080082d0((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),0x809c52ad,0x3e927e4f);\n    doublePrecisionResult = calculate_xored_bits_08008640((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),result1,result2);\n    doublePrecisionResult = calculate_double_precision_080082d4((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),0x19cb1590,0x3efa01a0);\n    doublePrecisionResult = calculate_xored_bits_08008640((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),result1,result2);\n    doublePrecisionResult = reverse_bits_080082d0((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),0x16c15177,0x3f56c16c);\n    doublePrecisionResult = calculate_xored_bits_08008640((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),result1,result2);\n    doublePrecisionResult = calculate_double_precision_080082d4((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),0x5555554c,0x3fa55555);\n    doublePrecisionResult = calculate_xored_bits_08008640((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),result1,result2);\n  }\n  else {\n    xoredBitsResult = calculate_xored_bits_08008640(input1,input2,input1,input2);\n    result2 = (undefined4)((ulonglong)xoredBitsResult >> 0x20);\n    result1 = (undefined4)xoredBitsResult;\n    doublePrecisionResult = calculate_xored_bits_08008640(result1,result2,0xbe8838d4,0xbda8fae9);\n    doublePrecisionResult = calculate_double_precision_080082d4((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    doublePrecisionResult = calculate_xored_bits_08008640((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),result1,result2);\n    doublePrecisionResult = reverse_bits_080082d0((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),0x809c52ad,0x3e927e4f);\n    doublePrecisionResult = calculate_xored_bits_08008640((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),result1,result2);\n    doublePrecisionResult = calculate_double_precision_080082d4((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),0x19cb1590,0x3efa01a0);\n    doublePrecisionResult = calculate_xored_bits_08008640((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),result1,result2);\n    doublePrecisionResult = reverse_bits_080082d0((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),0x16c15177,0x3f56c16c);\n    doublePrecisionResult = calculate_xored_bits_08008640((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),result1,result2);\n    doublePrecisionResult = calculate_double_precision_080082d4((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),0x5555554c,0x3fa55555);\n    doublePrecisionResult = calculate_xored_bits_08008640((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),result1,result2);\n    if (0x3fd33332 < absInput2) {\n      if (absInput2 < 0x3fe90001) {\n        calculatedValue = absInput2 - 0x200000;\n        xoredBitsResult = reverse_bits_080082d0(0,0x3ff00000,0,calculatedValue);\n      }\n      else {\n        calculatedValue = 0x3fd20000;\n        xoredBitsResult = 0x3fe7000000000000;\n      }\n      tempResult4 = (undefined4)((ulonglong)xoredBitsResult >> 0x20);\n      tempResult3 = (undefined4)xoredBitsResult;\n      xoredBitsResult = calculate_xored_bits_08008640(result1,result2,0,0x3fe00000);\n      xoredBitsResult = reverse_bits_080082d0((int)xoredBitsResult,(int)((ulonglong)xoredBitsResult >> 0x20),0,calculatedValue);\n      doublePrecisionResult = calculate_xored_bits_08008640(result1,result2,(int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20));\n      xoredBitsResult2 = calculate_xored_bits_08008640(input1,input2,input3,input4);\n      doublePrecisionResult = reverse_bits_080082d0((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),(int)xoredBitsResult2,\n                           (int)((ulonglong)xoredBitsResult2 >> 0x20));\n      xoredBitsResult = reverse_bits_080082d0((int)xoredBitsResult,(int)((ulonglong)xoredBitsResult >> 0x20),(int)doublePrecisionResult,\n                           (int)((ulonglong)doublePrecisionResult >> 0x20));\n      result1 = reverse_bits_080082d0(tempResult3,tempResult4,(int)xoredBitsResult,(int)((ulonglong)xoredBitsResult >> 0x20));\n      return result1;\n    }\n  }\n  tempResult2 = (undefined4)((ulonglong)doublePrecisionResult >> 0x20);\n  tempResult1 = (undefined4)doublePrecisionResult;\n  result1 = (undefined4)((ulonglong)xoredBitsResult >> 0x20);\n  doublePrecisionResult = calculate_xored_bits_08008640((int)xoredBitsResult,result1,0,0x3fe00000);\n  xoredBitsResult = calculate_xored_bits_08008640((int)xoredBitsResult,result1,tempResult1,tempResult2);\n  xoredBitsResult2 = calculate_xored_bits_08008640(input1,input2,input3,input4);\n  xoredBitsResult = reverse_bits_080082d0((int)xoredBitsResult,(int)((ulonglong)xoredBitsResult >> 0x20),(int)xoredBitsResult2,\n                       (int)((ulonglong)xoredBitsResult2 >> 0x20));\n  xoredBitsResult = reverse_bits_080082d0((int)doublePrecisionResult,(int)((ulonglong)doublePrecisionResult >> 0x20),(int)xoredBitsResult,\n                       (int)((ulonglong)xoredBitsResult >> 0x20));\n  result1 = reverse_bits_080082d0(0,0x3ff00000,(int)xoredBitsResult,(int)((ulonglong)xoredBitsResult >> 0x20));\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_improved_value_0800a348",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "calculatedValue",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "absInput2",
                "uVar5": "xoredBitsResult",
                "uVar6": "doublePrecisionResult",
                "uVar7": "xoredBitsResult2",
                "local_30": "tempResult1",
                "uStack_2c": "tempResult2",
                "local_28": "tempResult3",
                "uStack_24": "tempResult4"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "calculate_xored_bits_0800a5a0",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint calculateXoredBits_0800a5a0(int input_param,undefined8 *output_param,int input_length,int input_size,int process_option,int buffer)\n\n{\n  undefined4 *pointer1;\n  uint result;\n  uint temp1;\n  int index;\n  uint *pointer2;\n  undefined4 temp2;\n  uint **ppuVar7;\n  undefined4 temp3;\n  int temp12;\n  undefined4 *pointer3;\n  undefined4 temp5;\n  uint temp6;\n  uint *pointer4;\n  int temp7;\n  int temp8;\n  undefined8 *pointer5;\n  int temp9;\n  undefined4 *pointer6;\n  undefined8 *pointer7;\n  undefined4 temp11;\n  int temp13;\n  undefined8 *presult2;\n  undefined4 *pointer8;\n  bool flag;\n  undefined8 temp14;\n  undefined8 temp15;\n  undefined8 temp16;\n  undefined8 *local_buffer2;\n  int local_size;\n  int local_length;\n  int local_temp1;\n  uint *local_buffer1 [2];\n  uint local_result [20];\n  undefined8 local_var1;\n  undefined8 local_var2;\n  int local_var3 [38];\n  undefined8 local_var4;\n  \n  temp8 = *(int *)(&DAT_0800c060 + process_option * 4);\n  temp12 = input_size + -1;\n  local_buffer1[1] = (uint *)output_param;\n  if (input_length + 0x14 < 0 == SCARRY4(input_length,0x14)) {\n    local_temp1 = (input_length + -3) / 0x18;\n    local_length = (local_temp1 + 1) * -0x18;\n  }\n  else {\n    local_length = -0x18;\n    local_temp1 = 0;\n  }\n  local_length = input_length + local_length;\n  temp9 = local_temp1 - temp12;\n  if (-1 < temp8 + temp12) {\n    temp13 = temp8 + temp12 + 1 + temp9;\n    pointer5 = &local_var1;\n    do {\n      while (temp9 < 0) {\n        temp9 = temp9 + 1;\n        *(undefined4 *)pointer5 = 0;\n        *(undefined4 *)((int)pointer5 + 4) = 0;\n        pointer5 = pointer5 + 1;\n        if (temp9 == temp13) goto LAB_0800a626;\n      }\n      temp15 = bitwise_rotate_left_0800856c(*(undefined4 *)(buffer + temp9 * 4));\n      temp9 = temp9 + 1;\n      *pointer5 = temp15;\n      pointer5 = pointer5 + 1;\n    } while (temp9 != temp13);\n  }\nLAB_0800a626:\n  pointer3 = (undefined4 *)(input_param + -8);\n  if (-1 < temp8) {\n    presult2 = &local_var1 + input_size;\n    temp9 = temp12;\n    pointer5 = &local_var4;\n    do {\n      if (temp12 < 0) {\n        temp15 = 0;\n      }\n      else {\n        temp15 = 0;\n        pointer8 = pointer3;\n        pointer7 = presult2;\n        do {\n          pointer6 = pointer8 + 2;\n          temp14 = calculate_xored_bits_08008640(*pointer6,pointer8[3],*(undefined4 *)(pointer7 + -1),\n                                *(undefined4 *)((int)pointer7 + -4));\n          temp15 = calculate_double_precision_080082d4((int)temp15,(int)((ulonglong)temp15 >> 0x20),(int)temp14,\n                                (int)((ulonglong)temp14 >> 0x20));\n          pointer8 = pointer6;\n          pointer7 = pointer7 + -1;\n        } while (pointer6 != pointer3 + input_size * 2);\n      }\n      temp9 = temp9 + 1;\n      *pointer5 = temp15;\n      presult2 = presult2 + 1;\n      pointer5 = pointer5 + 1;\n    } while (temp9 != temp8 + input_size);\n  }\n  local_buffer1[0] = local_result + temp8 + -1;\n  temp9 = temp8;\n  do {\n    temp15 = CONCAT44(*(undefined4 *)((int)&local_var4 + temp9 * 8 + 4),\n                      *(undefined4 *)(&local_var4 + temp9));\n    if (0 < temp9) {\n      pointer5 = &local_var4 + temp9;\n      pointer2 = local_result;\n      do {\n        temp2 = (undefined4)((ulonglong)temp15 >> 0x20);\n        calculate_xored_bits_08008640((int)temp15,temp2,0,0x3e700000);\n        calculate_value_08008ba0();\n        temp14 = bitwise_rotate_left_0800856c();\n        temp3 = (undefined4)((ulonglong)temp14 >> 0x20);\n        temp16 = calculate_xored_bits_08008640((int)temp14,temp3,0,0x41700000);\n        reverse_bits_080082d0((int)temp15,temp2,(int)temp16,(int)((ulonglong)temp16 >> 0x20));\n        result = calculate_value_08008ba0();\n        presult2 = pointer5 + -1;\n        temp2 = *(undefined4 *)presult2;\n        temp5 = *(undefined4 *)((int)pointer5 + -4);\n        *pointer2 = result;\n        temp15 = calculate_double_precision_080082d4((int)temp14,temp3,temp2,temp5);\n        pointer5 = presult2;\n        pointer2 = pointer2 + 1;\n      } while (presult2 != &local_var4);\n    }\n    temp15 = calculate_result_0800b2e8((int)temp15,(int)((ulonglong)temp15 >> 0x20),local_length);\n    temp3 = (undefined4)((ulonglong)temp15 >> 0x20);\n    calculate_xored_bits_08008640((int)temp15,temp3,0,0x3fc00000);\n    temp14 = calculate_result_080094c0();\n    temp14 = calculate_xored_bits_08008640((int)temp14,(int)((ulonglong)temp14 >> 0x20),0,0x40200000);\n    temp15 = reverse_bits_080082d0((int)temp15,temp3,(int)temp14,(int)((ulonglong)temp14 >> 0x20));\n    result = calculate_value_08008ba0();\n    temp14 = bitwise_rotate_left_0800856c();\n    temp15 = reverse_bits_080082d0((int)temp15,(int)((ulonglong)temp15 >> 0x20),(int)temp14,\n                          (int)((ulonglong)temp14 >> 0x20));\n    temp2 = (undefined4)((ulonglong)temp15 >> 0x20);\n    temp3 = (undefined4)temp15;\n    if (local_length < 1) {\n      if (local_length == 0) {\n        temp13 = (int)local_result[temp9 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      temp13 = check_and_return_result_08008b4c(temp3,temp2,0,0x3fe00000);\n      if (temp13 != 0) {\n        result = result + 1;\n        if (temp9 < 1) {\n          temp15 = reverse_bits_080082d0(0,0x3ff00000,temp3,temp2);\n          temp13 = 2;\n          goto LAB_0800a7a4;\n        }\n        temp13 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      index = (int)local_result[temp9 + -1] >> (0x18U - local_length & 0xff);\n      temp6 = local_result[temp9 + -1] - (index << (0x18U - local_length & 0xff));\n      temp13 = (int)temp6 >> (0x17U - local_length & 0xff);\n      local_result[temp9 + -1] = temp6;\n      result = result + index;\njoined_r0x0800a8b8:\n      if (0 < temp13) {\n        result = result + 1;\n        if (temp9 < 1) {\n          flag = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (local_result[0] == 0) {\n            flag = false;\n            if (temp9 != 1) {\n              pointer2 = local_result;\n              index = 1;\n              do {\n                pointer2 = pointer2 + 1;\n                if (*pointer2 != 0) {\n                  temp7 = index + 1;\n                  temp6 = *pointer2;\n                  goto LAB_0800a8e2;\n                }\n                index = index + 1;\n              } while (index != temp9);\n              flag = false;\n            }\n          }\n          else {\n            temp7 = 1;\n            index = 0;\n            temp6 = local_result[0];\nLAB_0800a8e2:\n            local_result[index] = 0x1000000 - temp6;\n            if (temp7 < temp9) {\n              temp6 = local_result[temp7];\n              pointer2 = local_result + temp7;\n              while( true ) {\n                pointer4 = pointer2 + 1;\n                *pointer2 = 0xffffff - temp6;\n                if (pointer4 == local_result + temp9) break;\n                temp6 = *pointer4;\n                pointer2 = pointer4;\n              }\n            }\n            flag = true;\n          }\n        }\n        if (0 < local_length) {\n          if (local_length == 1) {\n            local_result[temp9 + -1] = local_result[temp9 + -1] & 0x7fffff;\n          }\n          else if (local_length == 2) {\n            local_result[temp9 + -1] = local_result[temp9 + -1] & 0x3fffff;\n          }\n        }\n        if (temp13 == 2) {\n          temp15 = reverse_bits_080082d0(0,0x3ff00000,temp3,temp2);\n          if (flag) {\n            temp14 = calculate_result_0800b2e8(0,0x3ff00000,local_length);\n            temp15 = reverse_bits_080082d0((int)temp15,(int)((ulonglong)temp15 >> 0x20),(int)temp14,\n                                  (int)((ulonglong)temp14 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    temp3 = (undefined4)((ulonglong)temp15 >> 0x20);\n    index = check_parameter_and_return_result_08008b10((int)temp15,temp3,0,0);\n    if (index == 0) {\n      temp15 = calculate_result_0800b2e8((int)temp15,temp3,-local_length);\n      temp2 = (undefined4)((ulonglong)temp15 >> 0x20);\n      temp3 = (undefined4)temp15;\n      temp12 = check_and_return_result_08008b4c(temp3,temp2,0,0x41700000);\n      if (temp12 == 0) {\n        temp6 = calculate_value_08008ba0(temp3,temp2);\n        local_result[temp9] = temp6;\n        index = temp9;\n      }\n      else {\n        calculate_xored_bits_08008640(temp3,temp2,0,0x3e700000);\n        temp6 = calculate_value_08008ba0();\n        temp15 = bitwise_rotate_left_0800856c();\n        temp15 = calculate_xored_bits_08008640((int)temp15,(int)((ulonglong)temp15 >> 0x20),0,0x41700000);\n        reverse_bits_080082d0(temp3,temp2,(int)temp15,(int)((ulonglong)temp15 >> 0x20));\n        temp1 = calculate_value_08008ba0();\n        local_length = local_length + 0x18;\n        local_result[temp9] = temp1;\n        local_result[temp9 + 1] = temp6;\n        index = temp9 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    index = temp9 + -1;\n    if (temp8 <= index) {\n      temp6 = 0;\n      pointer2 = local_result + temp9 + 0x3fffffff;\n      do {\n        pointer4 = pointer2 + -1;\n        temp6 = temp6 | *pointer2;\n        pointer2 = pointer4;\n      } while (pointer4 != local_buffer1[0]);\n      if (temp6 != 0) break;\n    }\n    if (local_result[temp8 + -1] == 0) {\n      local_size = 1;\n      ppuVar7 = local_buffer1 + temp8;\n      do {\n        pointer2 = *ppuVar7;\n        local_size = local_size + 1;\n        ppuVar7 = ppuVar7 + -1;\n      } while (pointer2 == (uint *)0x0);\n      local_size = temp9 + local_size;\n    }\n    else {\n      local_size = temp9 + 1;\n    }\n    temp13 = temp9 + 1;\n    pointer8 = (undefined4 *)(buffer + (temp13 + local_temp1 + 0x3fffffff) * 4);\n    pointer5 = &local_var1 + temp9 + input_size;\n    local_buffer2 = &local_var4 + temp13;\n    do {\n      pointer8 = pointer8 + 1;\n      temp15 = bitwise_rotate_left_0800856c(*pointer8);\n      *pointer5 = temp15;\n      presult2 = pointer5 + 1;\n      if (temp12 < 0) {\n        temp14 = 0;\n      }\n      else {\n        temp14 = 0;\n        pointer6 = pointer3;\n        while( true ) {\n          pointer5 = pointer5 + -1;\n          pointer1 = pointer6 + 2;\n          temp15 = calculate_xored_bits_08008640((int)temp15,(int)((ulonglong)temp15 >> 0x20),*pointer1,pointer6[3]);\n          temp14 = calculate_double_precision_080082d4((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp15,\n                                (int)((ulonglong)temp15 >> 0x20));\n          if (pointer1 == pointer3 + input_size * 2) break;\n          temp15 = *pointer5;\n          pointer6 = pointer1;\n        }\n      }\n      *local_buffer2 = temp14;\n      temp13 = temp13 + 1;\n      temp9 = local_size;\n      pointer5 = presult2;\n      local_buffer2 = local_buffer2 + 1;\n    } while (temp13 <= local_size);\n  } while( true );\n  local_length = local_length + -0x18;\n  if (local_result[index] == 0) {\n    pointer2 = local_result + temp9 + 0x3ffffffe;\n    do {\n      temp6 = *pointer2;\n      index = index + -1;\n      local_length = local_length + -0x18;\n      pointer2 = pointer2 + -1;\n    } while (temp6 == 0);\n  }\nLAB_0800a9f6:\n  temp15 = calculate_result_0800b2e8(0,0x3ff00000,local_length);\n  if (index < 0) {\n    if (2 < process_option) {\n      if (process_option == 3) {\n        temp15 = 0;\nLAB_0800abe4:\n        if (temp13 == 0) {\n          *local_buffer1[1] = (undefined4)local_var2;\n          *(int *)((int)local_buffer1[1] + 4) = local_var2._4_4_;\n          *(undefined8 *)((int)local_buffer1[1] + 0x10) = temp15;\n          *(int *)((int)local_buffer1[1] + 8) = local_var3[0];\n          *(int *)((int)local_buffer1[1] + 0xc) = local_var3[1];\n          return result & 7;\n        }\n        *(int *)((int)local_buffer1[1] + 0x10) = (int)temp15;\n        *(int *)((int)local_buffer1[1] + 8) = local_var3[0];\n        *(int *)((int)local_buffer1[1] + 0x14) = (int)((ulonglong)temp15 >> 0x20) + -0x80000000;\n        *(int *)((int)local_buffer1[1] + 4) = local_var2._4_4_ + -0x80000000;\n        *(int *)((int)local_buffer1[1] + 0xc) = local_var3[1] + -0x80000000;\n        *local_buffer1[1] = (undefined4)local_var2;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (process_option < 1) {\n      if (process_option != 0) goto LAB_0800ab0e;\n      temp15 = 0;\nLAB_0800aafc:\n      temp12 = (int)((ulonglong)temp15 >> 0x20);\n      if (temp13 != 0) {\n        temp12 = temp12 + -0x80000000;\n      }\n      *local_buffer1[1] = (int)temp15;\n      *(int *)((int)local_buffer1[1] + 4) = temp12;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    temp15 = 0;\n  }\n  else {\n    presult2 = &local_var4 + index;\n    pointer2 = local_result + index + 1;\n    pointer5 = &local_var4 + index + 1;\n    do {\n      temp3 = (undefined4)((ulonglong)temp15 >> 0x20);\n      pointer2 = pointer2 + -1;\n      temp14 = bitwise_rotate_left_0800856c(*pointer2);\n      temp14 = calculate_xored_bits_08008640((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp15,temp3);\n      pointer5 = pointer5 + -1;\n      *pointer5 = temp14;\n      temp15 = calculate_xored_bits_08008640((int)temp15,temp3,0,0x3e700000);\n    } while (pointer2 != local_result);\n    temp12 = 0;\n    do {\n      if (temp8 < 0) {\n        temp15 = 0;\n      }\n      else {\n        temp3 = 0x40000000;\n        temp2 = 0x3ff921fb;\n        temp15 = 0;\n        temp9 = 0;\n        pointer5 = presult2;\n        pointer3 = &DAT_0800c028;\n        while( true ) {\n          temp14 = calculate_xored_bits_08008640(*(undefined4 *)pointer5,*(undefined4 *)((int)pointer5 + 4),temp3,temp2\n                               );\n          temp15 = calculate_double_precision_080082d4((int)temp15,(int)((ulonglong)temp15 >> 0x20),(int)temp14,\n                                (int)((ulonglong)temp14 >> 0x20));\n          temp9 = temp9 + 1;\n          if ((temp8 < temp9) || (temp12 < temp9)) break;\n          temp3 = *pointer3;\n          temp2 = pointer3[1];\n          pointer5 = pointer5 + 1;\n          pointer3 = pointer3 + 2;\n        }\n      }\n      flag = temp12 != index;\n      *(int *)(&local_var2 + temp12) = (int)temp15;\n      *(int *)((int)&local_var2 + (temp12 * 2 + 1) * 4) = (int)((ulonglong)temp15 >> 0x20);\n      presult2 = presult2 + -1;\n      temp12 = temp12 + 1;\n    } while (flag);\n    if (2 < process_option) {\n      if (process_option == 3) {\n        if (index != 0) {\n          pointer5 = &local_var2 + index;\n          temp15 = CONCAT44(*(undefined4 *)((int)&local_var2 + (index * 2 + 1) * 4),\n                            *(undefined4 *)pointer5);\n          do {\n            temp2 = (undefined4)((ulonglong)temp15 >> 0x20);\n            temp3 = (undefined4)temp15;\n            temp5 = *(undefined4 *)(pointer5 + -1);\n            temp11 = *(undefined4 *)((int)pointer5 + -4);\n            temp15 = calculate_double_precision_080082d4(temp3,temp2,temp5,temp11);\n            temp14 = reverse_bits_080082d0(temp5,temp11,(int)temp15,(int)((ulonglong)temp15 >> 0x20));\n            temp14 = calculate_double_precision_080082d4((int)temp14,(int)((ulonglong)temp14 >> 0x20),temp3,temp2);\n            *pointer5 = temp14;\n            pointer5 = pointer5 + -1;\n            *pointer5 = temp15;\n          } while (&local_var2 != pointer5);\n          if (1 < index) {\n            pointer5 = &local_var2 + index;\n            temp15 = CONCAT44(*(undefined4 *)((int)&local_var2 + (index * 2 + 1) * 4),\n                              *(undefined4 *)pointer5);\n            do {\n              temp2 = (undefined4)((ulonglong)temp15 >> 0x20);\n              temp3 = (undefined4)temp15;\n              temp5 = *(undefined4 *)(pointer5 + -1);\n              temp11 = *(undefined4 *)((int)pointer5 + -4);\n              temp15 = calculate_double_precision_080082d4(temp3,temp2,temp5,temp11);\n              temp14 = reverse_bits_080082d0(temp5,temp11,(int)temp15,(int)((ulonglong)temp15 >> 0x20));\n              temp14 = calculate_double_precision_080082d4((int)temp14,(int)((ulonglong)temp14 >> 0x20),temp3,temp2);\n              *pointer5 = temp14;\n              pointer5 = pointer5 + -1;\n              *pointer5 = temp15;\n            } while (&local_var2 + 1 != pointer5);\n            temp15 = 0;\n            pointer5 = &local_var2 + index + 1;\n            do {\n              presult2 = pointer5 + -1;\n              temp15 = calculate_double_precision_080082d4((int)temp15,(int)((ulonglong)temp15 >> 0x20),\n                                    *(undefined4 *)presult2,*(undefined4 *)((int)pointer5 + -4));\n              pointer5 = presult2;\n            } while (&local_var2 + 2 != presult2);\n            goto LAB_0800abe4;\n          }\n        }\n        temp15 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (process_option < 1) {\n      if (process_option != 0) goto LAB_0800ab0e;\n      temp15 = 0;\n      pointer5 = &local_var2 + index + 1;\n      do {\n        presult2 = pointer5 + -1;\n        temp15 = calculate_double_precision_080082d4((int)temp15,(int)((ulonglong)temp15 >> 0x20),*(undefined4 *)presult2,\n                              *(undefined4 *)((int)pointer5 + -4));\n        pointer5 = presult2;\n      } while (&local_var2 != presult2);\n      goto LAB_0800aafc;\n    }\n    temp15 = 0;\n    pointer5 = &local_var2 + index + 1;\n    do {\n      presult2 = pointer5 + -1;\n      temp15 = calculate_double_precision_080082d4((int)temp15,(int)((ulonglong)temp15 >> 0x20),*(undefined4 *)presult2,\n                            *(undefined4 *)((int)pointer5 + -4));\n      pointer5 = presult2;\n    } while (&local_var2 != presult2);\n  }\n  temp12 = (int)((ulonglong)temp15 >> 0x20);\n  temp3 = (undefined4)temp15;\n  if (temp13 == 0) {\n    *(undefined8 *)local_buffer1[1] = temp15;\n    temp15 = reverse_bits_080082d0((undefined4)local_var2,local_var2._4_4_,temp3,temp12);\n    if (index < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    temp12 = 1;\n    pointer5 = &local_var2;\n    do {\n      temp15 = calculate_double_precision_080082d4((int)temp15,(int)((ulonglong)temp15 >> 0x20),\n                            *(undefined4 *)(pointer5 + 1),*(undefined4 *)((int)pointer5 + 0xc));\n      temp12 = temp12 + 1;\n      pointer5 = pointer5 + 1;\n    } while (temp12 <= index);\n    if (temp13 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_buffer1[1] = temp3;\n    *(int *)((int)local_buffer1[1] + 4) = temp12 + -0x80000000;\n    temp15 = reverse_bits_080082d0((undefined4)local_var2,local_var2._4_4_,temp3,temp12);\n    if (0 < index) goto LAB_0800ad04;\n  }\n  temp15 = CONCAT44((int)((ulonglong)temp15 >> 0x20) + -0x80000000,(int)temp15);\nLAB_0800ad26:\n  *(undefined8 *)((int)local_buffer1[1] + 8) = temp15;\n  return result & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "calculate_xored_bits_0800a5a0",
                "param_1": "input_param",
                "param_2": "output_param",
                "param_3": "input_length",
                "param_4": "input_size",
                "param_5": "process_option",
                "param_6": "buffer",
                "puVar1": "pointer1",
                "uVar2": "result",
                "uVar3": "temp1",
                "iVar4": "index",
                "puVar5": "pointer2",
                "uVar6": "temp2",
                "uVar8": "temp3",
                "iVar9": "temp12",
                "puVar10": "pointer3",
                "uVar11": "temp5",
                "uVar12": "temp6",
                "puVar13": "pointer4",
                "iVar14": "temp7",
                "iVar15": "temp8",
                "puVar16": "pointer5",
                "iVar17": "temp9",
                "iVar21": "temp13",
                "puVar18": "pointer6",
                "uVar20": "temp11",
                "puVar19": "pointer7",
                "puVar23": "pointer8",
                "bVar24": "flag",
                "uVar25": "temp14",
                "uVar26": "temp15",
                "uVar27": "temp16",
                "local_284": "local_buffer2",
                "local_280": "local_size",
                "local_270": "local_length",
                "local_26c": "local_temp1",
                "local_260": "local_buffer1",
                "local_258": "local_result",
                "uStack_208": "local_var1",
                "local_168": "local_var2",
                "local_160": "local_var3",
                "uStack_c8": "local_var4"
            },
            "calling": [
                "FUN_08009d78"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_0800b2e8",
                "FUN_08008b10",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_value_0800adf0",
            "code": "\nundefined4\ncalculate_value_0800adf0(undefined4 result,uint value,undefined4 param_3,undefined4 param_4,int flag)\n\n{\n  int calc_result;\n  undefined4 bit_1;\n  undefined4 bit_2;\n  undefined4 bit_3;\n  undefined4 bit_4;\n  undefined4 bit_5;\n  undefined8 calculation_result;\n  undefined8 calculation_result_2;\n  \n  if (((value & 0x7fffffff) < 0x3e400000) && (calc_result = calculate_value_0800adf0_08008ba0(), calc_result == 0)) {\n    return result;\n  }\n  calculation_result = calculate_xored_bits_08008640(result,value,result);\n  bit_3 = (undefined4)((ulonglong)calculation_result >> 0x20);\n  bit_2 = (undefined4)calculation_result;\n  calculation_result = calculate_xored_bits_08008640(result,value,bit_2,bit_3);\n  bit_4 = (undefined4)((ulonglong)calculation_result >> 0x20);\n  bit_1 = (undefined4)calculation_result;\n  calculation_result = calculate_xored_bits_08008640(bit_2,bit_3,0x5acfd57c,0x3de5d93a);\n  calculation_result = reverse_bits_080082d0((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  calculation_result = calculate_xored_bits_08008640((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),bit_2,bit_3);\n  calculation_result = calculate_double_precision_080082d4((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0x57b1fe7d,0x3ec71de3);\n  calculation_result = calculate_xored_bits_08008640((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),bit_2,bit_3);\n  calculation_result = reverse_bits_080082d0((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0x19c161d5,0x3f2a01a0);\n  calculation_result = calculate_xored_bits_08008640((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),bit_2,bit_3);\n  calculation_result = calculate_double_precision_080082d4((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0x1110f8a6,0x3f811111);\n  bit_5 = (undefined4)((ulonglong)calculation_result >> 0x20);\n  if (flag != 0) {\n    calculation_result_2 = calculate_xored_bits_08008640(param_3,param_4,0,0x3fe00000);\n    calculation_result = calculate_xored_bits_08008640(bit_1,bit_4,(int)calculation_result,bit_5);\n    calculation_result = reverse_bits_080082d0((int)calculation_result_2,(int)((ulonglong)calculation_result_2 >> 0x20),(int)calculation_result,\n                         (int)((ulonglong)calculation_result >> 0x20));\n    calculation_result = calculate_xored_bits_08008640((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),bit_2,bit_3);\n    calculation_result = reverse_bits_080082d0((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),param_3,param_4);\n    calculation_result_2 = calculate_xored_bits_08008640(bit_1,bit_4,0x55555549,0x3fc55555);\n    calculation_result = calculate_double_precision_080082d4((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),(int)calculation_result_2,\n                         (int)((ulonglong)calculation_result_2 >> 0x20));\n    bit_2 = reverse_bits_080082d0(result,value,(int)calculation_result,(int)((ulonglong)calculation_result >> 0x20));\n    return bit_2;\n  }\n  calculation_result = calculate_xored_bits_08008640(bit_2,bit_3,(int)calculation_result,bit_5);\n  calculation_result = reverse_bits_080082d0((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0x55555549,0x3fc55555);\n  calculation_result = calculate_xored_bits_08008640((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),bit_1,bit_4);\n  bit_2 = calculate_double_precision_080082d4((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),result,value);\n  return bit_2;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_value_0800adf0",
                "param_1": "result",
                "param_2": "value",
                "param_5": "flag",
                "iVar1": "calc_result",
                "uVar2": "bit_1",
                "uVar3": "bit_2",
                "uVar4": "bit_3",
                "uVar5": "bit_4",
                "uVar6": "bit_5",
                "uVar7": "calculation_result",
                "uVar8": "calculation_result_2"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_value_0800af78",
            "code": "\nint calculateValue_0800af78(int value1,uint value2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int category;\n  undefined4 result5;\n  uint value2Masked;\n  undefined8 calcResult;\n  undefined8 calcResult2;\n  undefined4 localVar;\n  \n  calcResult = CONCAT44(value2,value1);\n  value2Masked = value2 & 0x7fffffff;\n  if (value2Masked < 0x44100000) {\n    if (value2Masked < 0x3fdc0000) {\n      if (value2Masked < 0x3e200000) {\n        calcResult2 = calculate_double_precision_080082d4(value1,value2,0x8800759c,0x7e37e43c);\n        category = is_input_valid_08008b60((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),0,0x3ff00000);\n        if (category != 0) {\n          return value1;\n        }\n      }\n      category = -1;\n    }\n    else {\n      calcResult = FUNC_0800b2cc();\n      result4 = (undefined4)((ulonglong)calcResult >> 0x20);\n      result1 = (undefined4)calcResult;\n      if (value2Masked < 0x3ff30000) {\n        if (value2Masked < 0x3fe60000) {\n          calcResult = calculate_double_precision_080082d4(result1,result4,result1,result4);\n          calcResult = reverse_bits_080082d0((int)calcResult,(int)((ulonglong)calcResult >> 0x20),0,0x3ff00000);\n          calcResult2 = calculate_double_precision_080082d4(result1,result4,0,0x40000000);\n          calcResult = calculate_floating_point_08008894((int)calcResult,(int)((ulonglong)calcResult >> 0x20),(int)calcResult2,\n                               (int)((ulonglong)calcResult2 >> 0x20));\n          category = 0;\n        }\n        else {\n          calcResult = reverse_bits_080082d0(result1,result4,0,0x3ff00000);\n          calcResult2 = calculate_double_precision_080082d4(result1,result4,0,0x3ff00000);\n          calcResult = calculate_floating_point_08008894((int)calcResult,(int)((ulonglong)calcResult >> 0x20),(int)calcResult2,\n                               (int)((ulonglong)calcResult2 >> 0x20));\n          category = 1;\n        }\n      }\n      else if (value2Masked < 0x40038000) {\n        calcResult = reverse_bits_080082d0(result1,result4,0,0x3ff80000);\n        calcResult2 = calculate_xored_bits_08008640(result1,result4,0,0x3ff80000);\n        calcResult2 = calculate_double_precision_080082d4((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),0,0x3ff00000);\n        calcResult = calculate_floating_point_08008894((int)calcResult,(int)((ulonglong)calcResult >> 0x20),(int)calcResult2,\n                             (int)((ulonglong)calcResult2 >> 0x20));\n        category = 2;\n      }\n      else {\n        calcResult = calculate_floating_point_08008894(0,0xbff00000,result1,result4);\n        category = 3;\n      }\n    }\n    localVar = (undefined4)((ulonglong)calcResult >> 0x20);\n    result5 = (undefined4)calcResult;\n    calcResult = calculate_xored_bits_08008640(result5,localVar,result5);\n    result2 = (undefined4)((ulonglong)calcResult >> 0x20);\n    result1 = (undefined4)calcResult;\n    calcResult = calculate_xored_bits_08008640(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)calcResult >> 0x20);\n    result4 = (undefined4)calcResult;\n    calcResult = calculate_xored_bits_08008640(result4,result3,0xe322da11,0x3f90ad3a);\n    calcResult = calculate_double_precision_080082d4((int)calcResult,(int)((ulonglong)calcResult >> 0x20),0x24760deb,0x3fa97b4b);\n    calcResult = calculate_xored_bits_08008640((int)calcResult,(int)((ulonglong)calcResult >> 0x20),result4,result3);\n    calcResult = calculate_double_precision_080082d4((int)calcResult,(int)((ulonglong)calcResult >> 0x20),0xa0d03d51,0x3fb10d66);\n    calcResult = calculate_xored_bits_08008640((int)calcResult,(int)((ulonglong)calcResult >> 0x20),result4,result3);\n    calcResult = calculate_double_precision_080082d4((int)calcResult,(int)((ulonglong)calcResult >> 0x20),0xc54c206e,0x3fb745cd);\n    calcResult = calculate_xored_bits_08008640((int)calcResult,(int)((ulonglong)calcResult >> 0x20),result4,result3);\n    calcResult = calculate_double_precision_080082d4((int)calcResult,(int)((ulonglong)calcResult >> 0x20),0x920083ff,0x3fc24924);\n    calcResult = calculate_xored_bits_08008640((int)calcResult,(int)((ulonglong)calcResult >> 0x20),result4,result3);\n    calcResult = calculate_double_precision_080082d4((int)calcResult,(int)((ulonglong)calcResult >> 0x20),0x5555550d,0x3fd55555);\n    calcResult = calculate_xored_bits_08008640((int)calcResult,(int)((ulonglong)calcResult >> 0x20),result1,result2);\n    result1 = (undefined4)((ulonglong)calcResult >> 0x20);\n    calcResult2 = calculate_xored_bits_08008640(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    calcResult2 = reverse_bits_080082d0((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),0x52defd9a,0x3fadde2d);\n    calcResult2 = calculate_xored_bits_08008640((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),result4,result3);\n    calcResult2 = reverse_bits_080082d0((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    calcResult2 = calculate_xored_bits_08008640((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),result4,result3);\n    calcResult2 = reverse_bits_080082d0((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),0xfe231671,0x3fbc71c6);\n    calcResult2 = calculate_xored_bits_08008640((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),result4,result3);\n    calcResult2 = reverse_bits_080082d0((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),0x9998ebc4,0x3fc99999);\n    calcResult2 = calculate_xored_bits_08008640((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),result4,result3);\n    result4 = (undefined4)((ulonglong)calcResult2 >> 0x20);\n    if (category == -1) {\n      calcResult = calculate_double_precision_080082d4((int)calcResult,result1,(int)calcResult2,result4);\n      calcResult = calculate_xored_bits_08008640((int)calcResult,(int)((ulonglong)calcResult >> 0x20),result5,localVar);\n      category = reverse_bits_080082d0(result5,localVar,(int)calcResult,(int)((ulonglong)calcResult >> 0x20));\n      return category;\n    }\n    calcResult = calculate_double_precision_080082d4((int)calcResult,result1,(int)calcResult2,result4);\n    calcResult = calculate_xored_bits_08008640((int)calcResult,(int)((ulonglong)calcResult >> 0x20),result5,localVar);\n    calcResult = reverse_bits_080082d0((int)calcResult,(int)((ulonglong)calcResult >> 0x20),\n                         *(undefined4 *)(&UNK_0800c090 + category * 8),\n                         *(undefined4 *)(&UNK_0800c094 + category * 8));\n    calcResult = reverse_bits_080082d0((int)calcResult,(int)((ulonglong)calcResult >> 0x20),result5,localVar);\n    category = reverse_bits_080082d0(*(undefined4 *)(&UNK_0800c070 + category * 8),\n                         *(undefined4 *)(&UNK_0800c074 + category * 8),(int)calcResult,\n                         (int)((ulonglong)calcResult >> 0x20));\n    if ((int)value2 < 0) {\n      return category;\n    }\n  }\n  else {\n    if ((0x7ff00000 < value2Masked) || ((value2Masked == 0x7ff00000 && (value1 != 0)))) {\n      category = calculate_double_precision_080082d4(value1,value2,value1);\n      return category;\n    }\n    category = 0x54442d18;\n  }\n  return category;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_value_0800af78",
                "param_1": "value1",
                "param_2": "value2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "iVar5": "category",
                "uVar6": "result5",
                "uVar7": "value2Masked",
                "uVar8": "calcResult",
                "uVar9": "calcResult2",
                "local_2c": "localVar"
            },
            "calling": [
                "FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60",
                "FUN_08008640",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "FUNC_0800b2cc",
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "calling": [
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "get_bitwise_shift_0800b2d4",
            "code": "\nuint get_bitwise_shift_0800b2d4(undefined4 arg_1,uint arg_2)\n\n{\n  return (arg_2 | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "get_bitwise_shift_0800b2d4",
                "param_1": "arg_1",
                "param_2": "arg_2"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "initialize_system_0800b2e0",
            "code": "\nundefined4 initialize_system_0800b2e0(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "initialize_system_0800b2e0"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_result_0800b2e8",
            "code": "\nuint calculate_result_0800b2e8(uint input_param1,uint input_param2,int input_param3,undefined4 input_param4)\n\n{\n  uint shifted_param2;\n  int sum_param3;\n  uint high_bits;\n  undefined8 combined_params;\n  \n  combined_params = CONCAT44(input_param2,input_param1);\n  shifted_param2 = (input_param2 << 1) >> 0x15;\n  if (shifted_param2 == 0) {\n    if ((input_param1 | input_param2 & 0x7fffffff) == 0) {\n      return input_param1;\n    }\n    combined_params = calculate_xored_bits_08008640(input_param1,input_param2,0,0x43500000);\n    if (input_param3 < -50000) goto LAB_0800b34a;\n    shifted_param2 = ((uint)((int)((ulonglong)combined_params >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_param2 == 0x7ff) {\n    shifted_param2 = calculate_double_precision_080082d4(input_param1,input_param2,input_param1,input_param2,input_param4);\n    return shifted_param2;\n  }\n  high_bits = (uint)((ulonglong)combined_params >> 0x20);\n  sum_param3 = shifted_param2 + input_param3;\n  if (sum_param3 < 0x7ff) {\n    if (0 < sum_param3) {\n      return (uint)combined_params;\n    }\n    if (sum_param3 + 0x35 < 0 == SCARRY4(sum_param3,0x35)) {\n      shifted_param2 = calculate_xored_bits_08008640((uint)combined_params,high_bits & 0x800fffff | (sum_param3 + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_param2;\n    }\n    if (input_param3 < 0xc351) {\n      combined_params = CONCAT44(high_bits & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_param2 = calculate_xored_bits_08008640((int)combined_params,(int)((ulonglong)combined_params >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_param2;\n    }\n  }\n  shifted_param2 = calculate_xored_bits_08008640(0x8800759c,high_bits & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_param2;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_result_0800b2e8",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "shifted_param2",
                "iVar2": "sum_param3",
                "uVar3": "high_bits",
                "uVar4": "combined_params"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_global_data_0800b3dc",
            "code": "\nundefined4 getGlobalData_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_global_data_0800b3dc"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "execute_functions_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid executeFunctions_0800b3e8(void)\n\n{\n  int iterationCount;\n  code **functionPointerArray;\n  \n  FUNC_0800b5b0();\n  iterationCount = 0;\n  functionPointerArray = (code **)&DAT_0800c0b4;\n  do {\n    iterationCount = iterationCount + 1;\n    (**functionPointerArray)();\n    functionPointerArray = functionPointerArray + 1;\n  } while (iterationCount != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "execute_functions_0800b3e8",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointerArray"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800b4d0",
                "FUN_0800b5b0",
                "FUN_080001ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "fill_memory_0800b430",
            "code": "\nvoid fillMemory_0800b430(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *temp_ptr;\n  uint temp_size;\n  undefined4 fill_value;\n  bool is_size_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    temp_size = size - 1;\n    dest_ptr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      size = temp_size;\n      if (((uint)dest & 3) == 0) break;\n      is_size_zero = temp_size == 0;\n      temp_size = temp_size - 1;\n      dest_ptr = dest;\n      if (is_size_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    fill_value = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    if (0xf < size) {\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = fill_value;\n        dest_ptr[-3] = fill_value;\n        dest_ptr[-2] = fill_value;\n        dest_ptr[-1] = fill_value;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x20));\n      temp_size = size & 0xc;\n      dest = dest + ((size - 0x10 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (temp_size == 0) goto joined_r0x0800b4a8;\n    }\n    dest_ptr = (undefined4 *)((size - 4 & 0xfffffffc) + 4 + (int)dest);\n    do {\n      temp_ptr = dest + 1;\n      *dest = fill_value;\n      dest = temp_ptr;\n    } while (dest_ptr != temp_ptr);\n    size = size & 3;\n    dest = dest_ptr;\n  }\njoined_r0x0800b4a8:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      temp_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = temp_ptr;\n    } while ((undefined4 *)(size + (int)dest) != temp_ptr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "fill_memory_0800b430",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "temp_ptr",
                "uVar3": "temp_size",
                "uVar4": "fill_value",
                "bVar5": "is_size_zero"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_08005814",
                "FUN_080079c0",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08001ddc",
                "FUN_080002f0",
                "FUN_080024c4",
                "FUN_08002f24",
                "FUN_08004d7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b524"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "update_data_0800b524",
            "code": "\nundefined4 updateData_0800b524(int type,undefined4 data,undefined4 paramA,undefined4 paramB)\n\n{\n  undefined *ptr;\n  undefined4 result;\n  uint bitmask;\n  uint count;\n  \n  FUNC_0800b51c(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  ptr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (type != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = paramA;\n      bitmask = 1 << (count & 0xff);\n      *(uint *)(ptr + 0x188) = *(uint *)(ptr + 0x188) | bitmask;\n      *(undefined4 *)(ptr + count * 4 + 0x108) = paramB;\n      if (type == 2) {\n        *(uint *)(ptr + 0x18c) = bitmask | *(uint *)(ptr + 0x18c);\n      }\n    }\n    result = DAT_20000448;\n    *(uint *)(ptr + 4) = count + 1;\n    *(undefined4 *)(ptr + (count + 2) * 4) = data;\n    FUNC_0800b520(result);\n    result = 0;\n  }\n  else {\n    FUNC_0800b520(DAT_20000448);\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "update_data_0800b524",
                "param_1": "type",
                "param_2": "data",
                "param_3": "paramA",
                "param_4": "paramB",
                "puVar1": "ptr",
                "uVar2": "result",
                "uVar3": "bitmask",
                "uVar4": "count"
            },
            "calling": [
                "FUN_0800b4d0"
            ],
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "FUNC_0800b5b0",
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "calling": [
                "FUN_0800b3e8",
                "FUN_080001ac",
                "FUN_08000188"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 209893,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_08000210",
            "FUN_08000478",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_080035ec",
            "FUN_08003980",
            "FUN_08005250",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005360",
            "FUN_0800587c",
            "FUN_0800597c",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005bdc",
            "FUN_080064ec",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007854",
            "FUN_080078f4",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007da8",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_08009278",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_080001f8",
            "FUN_08000268",
            "FUN_080002f0",
            "FUN_080004fc",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002ef0",
            "FUN_08002f40",
            "FUN_08005238",
            "FUN_08005324",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005984",
            "FUN_08005a98",
            "FUN_08005c30",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_08006628",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08007520",
            "FUN_0800778c",
            "FUN_08007884",
            "FUN_080079c0",
            "FUN_08007d08",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008640",
            "FUN_08008894",
            "FUN_08008b00",
            "FUN_08009204",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_08009798"
        ],
        [
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_0800056c",
            "FUN_080025e8",
            "FUN_0800283a",
            "FUN_08002f24",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003778",
            "FUN_080053a0",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800618c",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006d72",
            "FUN_08007a70",
            "FUN_08008af0",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_080091fc",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800adf0",
            "FUN_0800b2e8"
        ],
        [
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_0800195c",
            "FUN_08002638",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003a18",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08005900",
            "FUN_080059b4",
            "FUN_08007436",
            "FUN_08007ad0",
            "FUN_08007c7c",
            "FUN_08007f54",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_080098d0",
            "FUN_08009b24"
        ],
        [
            "FUN_0800184c",
            "FUN_08002978",
            "FUN_080039a0",
            "FUN_08004250",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_080074c8",
            "FUN_08007e08",
            "FUN_08008190",
            "FUN_08008286",
            "FUN_08009318",
            "FUN_080094c0",
            "FUN_0800981c",
            "FUN_0800af78"
        ],
        [
            "FUN_08001994",
            "FUN_080029d8",
            "FUN_08002afc",
            "FUN_08002c18",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004e30",
            "FUN_08007930",
            "thunk_FUN_08009990",
            "FUN_08009990",
            "FUN_0800a5a0"
        ],
        [
            "FUN_080004ac",
            "FUN_08001d4c",
            "FUN_08002a94",
            "FUN_08002ba8",
            "FUN_08002e08",
            "FUN_080044e8",
            "FUN_08004dd2",
            "FUN_08007756",
            "FUN_08009d78"
        ],
        [
            "FUN_08002edc",
            "FUN_080051b4",
            "FUN_08009410",
            "FUN_080096e8"
        ],
        [
            "FUN_08003004",
            "FUN_08003618"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_08000220",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_0800525c"
        ],
        [
            "FUN_080005b4"
        ],
        [
            "FUN_080039bc"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ]
    ],
    "locked_functions": []
}