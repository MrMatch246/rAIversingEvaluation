{
    "functions": {
        "FUN_0800071c": {
            "renaming": {
                "FUN_0800071c": "FUNC_0800071c"
            },
            "code": "\nulonglong FUNC_0800071c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = convert_to_double_0800088a();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800083a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800083a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_0800088a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800071c",
            "calling": [
                "_dtoa_r",
                "atan",
                "mpu6050_calc_pitch",
                "__ieee754_atan2",
                "mpu6050_calc_acc_pitch_roll"
            ],
            "imported": false,
            "current_name": "FUNC_0800071c"
        },
        "FUN_08003440": {
            "renaming": {
                "FUN_08003440": "getSystemClockFrequency_08003440",
                "aPredivFactorTable": "predivFactorTable",
                "aPLLMULFactorTable": "pllMultiplierTable",
                "pllmul": "pllMultiplier",
                "prediv": "prediv",
                "tmpreg": "tmpReg",
                "sysclockfreq": "sysClockFreq",
                "pllclk": "pllMultiplier",
                "PTR__etext_080034f0": "PTR__etext_080034f0",
                "PTR_DAT_080034f4": "PTR_DAT_080034f4",
                "DAT_080034f8": "DAT_080034f8",
                "DAT_080034fc": "DAT_080034fc",
                "DAT_08003500": "DAT_08003500"
            },
            "code": "uint32_t getSystemClockFrequency_08003440(void)\n{\n  uint32_t sysClockFreq;\n  uint32_t pllMultiplierTable [16];\n  uint8_t predivFactorTable [2];\n  uint32_t pllMultiplier;\n  uint32_t prediv;\n  uint32_t tmpReg;\n  uint32_t sysClockSource;\n  \n  pllMultiplierTable[0] = *(undefined4 *)PTR__etext_080034f0;\n  pllMultiplierTable[1] = *(undefined4 *)(PTR__etext_080034f0 + 4);\n  pllMultiplierTable[2] = *(undefined4 *)(PTR__etext_080034f0 + 8);\n  pllMultiplierTable[3] = *(undefined4 *)(PTR__etext_080034f0 + 0xc);\n  predivFactorTable = *(uint8_t (*) [2])PTR_DAT_080034f4;\n  sysClockSource = *(uint *)(DAT_080034f8 + 4);\n  if ((sysClockSource & 0xc) == 4) {\n    sysClockFreq = DAT_080034fc;\n  }\n  else if ((sysClockSource & 0xc) == 8) {\n    if ((sysClockSource & 0x10000) == 0) {\n      pllMultiplier = DAT_08003500 * (uint)pllMultiplierTable[sysClockSource >> 0x12 & 0xf];\n    }\n    else {\n      pllMultiplier = (DAT_080034fc * pllMultiplierTable[sysClockSource >> 0x12 & 0xf]) /\n               (uint)predivFactorTable[*(uint *)(DAT_080034f8 + 4) >> 0x11 & 1];\n    }\n    sysClockFreq = pllMultiplier;\n  }\n  else {\n    sysClockFreq = DAT_080034fc;\n  }\n  return sysClockFreq;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003440",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "getSystemClockFrequency_08003440"
        },
        "FUN_080035fa": {
            "renaming": {
                "FUN_080035fa": "do_nothing_080035fa"
            },
            "code": "\nvoid do_nothing_080035fa(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fa",
            "calling": [
                "HAL_TIM_Base_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_080035fa"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "get_current_tick_08004f2c",
                "uVar1": "current_tick"
            },
            "code": "uint32_t get_current_tick_08004f2c(void)\n{\n  uint32_t current_tick = HAL_GetTick();\n  return current_tick;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "get_current_tick_08004f2c"
        },
        "FUN_080056bc": {
            "renaming": {
                "FUN_080056bc": "do_nothing_080056bc"
            },
            "code": "\nvoid do_nothing_080056bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056bc",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056bc"
        },
        "FUN_080046ec": {
            "renaming": {
                "FUN_080046ec": "set_UART_config_080046ec",
                "huart": "uart_handle",
                "uVar1": "mantissa_part",
                "uVar2": "fraction_part",
                "uVar3": "brr_value",
                "uVar4": "pclk_freq",
                "uVar5": "pclk_freq",
                "uVar6": "pclk_freq",
                "uVar7": "pclk_freq",
                "uVar8": "pclk_freq",
                "uVar9": "baud_rate",
                "uVar10": "baud_rate",
                "uVar11": "baud_rate",
                "uVar12": "baud_rate",
                "tmpreg": "tmpreg",
                "DAT_08004914": "USART1",
                "DAT_08004918": "16"
            },
            "code": "void set_UART_config_080046ec(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t pclk_freq;\n  uint32_t baud_rate = uart_handle->Init.BaudRate;\n  uint32_t brr_value;\n  uint32_t mantissa_part;\n  uint32_t fraction_part;\n  uint32_t stop_bits = uart_handle->Init.StopBits;\n  uint32_t word_length = uart_handle->Init.WordLength;\n  uint32_t parity = uart_handle->Init.Parity;\n  uint32_t hw_flow_control = uart_handle->Init.HwFlowCtl;\n  if (uart_handle->Instance == DAT_08004914) {\n    pclk_freq = HAL_RCC_GetPCLK2Freq();\n  }\n  else {\n    pclk_freq = HAL_RCC_GetPCLK1Freq();\n  }\n  mantissa_part = (pclk_freq / (baud_rate << 4));\n  fraction_part = ((pclk_freq % (baud_rate << 4)) << 4) / (baud_rate);\n  if (fraction_part >= 8) {\n    mantissa_part += 1;\n  }\n  brr_value = (mantissa_part << 4) | (fraction_part & 0xF);\n  uart_handle->Instance->BRR = brr_value;\n  uart_handle->Instance->CR2 = stop_bits | (uart_handle->Instance->CR2 & 0xFFFFCFFF);\n  uart_handle->Instance->CR1 = (uart_handle->Instance->CR1 & 0xFFFFE9F3) | word_length | parity | uart_handle->Init.Mode;\n  uart_handle->Instance->CR3 = hw_flow_control | (uart_handle->Instance->CR3 & 0xFFFFFCFF);\n}\n",
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046ec",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "set_UART_config_080046ec"
        },
        "FUN_08005500": {
            "renaming": {
                "FUN_08005500": "initialize_timer_08005500",
                "HVar1": "status",
                "sMasterConfig": "master_config",
                "sClockSourceConfig": "clock_config",
                "PTR_htim2_08005590": "htim2",
                "PTR_s____src_main_c_08005594": "__FILE__",
                "TIM_MasterConfigTypeDef": "TIM_MasterConfigTypeDef",
                "TIM_ClockConfigTypeDef": "TIM_ClockConfigTypeDef",
                "HAL_TIM_Base_Init": "HAL_TIM_Base_Init",
                "HAL_TIM_ConfigClockSource": "HAL_TIM_ConfigClockSource",
                "HAL_TIMEx_MasterConfigSynchronization": "HAL_TIMEx_MasterConfigSynchronization"
            },
            "code": "void initialize_timer_08005500(void)\n{\n  HAL_StatusTypeDef status;\n  TIM_MasterConfigTypeDef master_config;\n  TIM_ClockConfigTypeDef clock_config;\n  \n  PTR_htim2_08005590.Instance = TIM2;\n  PTR_htim2_08005590.Init.Prescaler = 36000;\n  PTR_htim2_08005590.Init.CounterMode = TIM_COUNTERMODE_UP;\n  PTR_htim2_08005590.Init.Period = 20;\n  PTR_htim2_08005590.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;\n  PTR_htim2_08005590.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;\n  status = HAL_TIM_Base_Init(&PTR_htim2_08005590);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005594, __LINE__);\n  }\n  clock_config.ClockSource = TIM_CLOCKSOURCE_INTERNAL;\n  status = HAL_TIM_ConfigClockSource(&PTR_htim2_08005590, &clock_config);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005594, __LINE__);\n  }\n  master_config.MasterOutputTrigger = TIM_TRGO_RESET;\n  master_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;\n  status = HAL_TIMEx_MasterConfigSynchronization(&PTR_htim2_08005590, &master_config);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005594, __LINE__);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_Base_Init",
                "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_TIM_ConfigClockSource",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005500",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_timer_08005500"
        },
        "FUN_08003568": {
            "renaming": {
                "FUN_08003568": "delay_08003568",
                "mdelay": "milliseconds",
                "Delay": "delay_cycles",
                "bVar1": "is_delaying",
                "DAT_080035a0": "system_core_clock_multiplier",
                "PTR_SystemCoreClock_0800359c": "system_core_clock_frequency_pointer"
            },
            "code": "void delay_08003568(uint32_t milliseconds)\n{\n  bool is_delay_08003568ing;\n  uint32_t delay_08003568_cycles = milliseconds * (uint)((ulonglong)DAT_080035a0 * (ulonglong)*PTR_SystemCoreClock_0800359c >> 0x29);\n  do {\n    is_delay_08003568ing = delay_08003568_cycles != 0;\n    delay_08003568_cycles--;\n  } while (is_delay_08003568ing);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003568",
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "imported": false,
            "current_name": "delay_08003568"
        },
        "FUN_08002c2e": {
            "renaming": {
                "FUN_08002c2e": "check_i2c_ack_08002c2e",
                "hi2c": "i2c_handler",
                "Timeout": "timeout_ms",
                "Tickstart": "start_time_ms",
                "HVar1": "status",
                "uVar2": "current_time_ms"
            },
            "code": "HAL_StatusTypeDef check_i2c_ack_08002c2e(I2C_HandleTypeDef *i2c_handler, uint32_t timeout_ms, uint32_t start_time_ms)\n{\n  HAL_StatusTypeDef status;\n  uint32_t current_time_ms;\n  while(1) {\n    if ((i2c_handler->Instance->SR1 & I2C_SR1_AF) == I2C_SR1_AF) {\n      return HAL_OK;\n    }\n    status = I2C_IsAcknowledgeFailed(i2c_handler);\n    if (status != HAL_OK) {\n      break;\n    }\n    if ((timeout_ms != HAL_MAX_DELAY) && ((timeout_ms == 0) || ((current_time_ms = HAL_GetTick()) > (start_time_ms + timeout_ms)))) {\n      i2c_handler->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;\n      i2c_handler->PreviousState = I2C_STATE_NONE;\n      i2c_handler->State = HAL_I2C_STATE_READY;\n      i2c_handler->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_GetTick",
                "I2C_IsAcknowledgeFailed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2e",
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "imported": false,
            "current_name": "check_i2c_ack_08002c2e"
        },
        "FUN_080008ec": {
            "renaming": {
                "FUN_080008ec": "compare_parameters_080008ec",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "xor_of_param2_and_param4",
                "bVar2": "is_param2_and_param4_equal",
                "bVar3": "is_param4_less_than_or_equal_to_param2"
            },
            "code": "uint compare_parameters_080008ec(uint param1, uint param2, uint param3, uint param4)\n{\n  bool is_param2_negative = ((int)(param2 << 1) >> 0x15 == -1);\n  bool is_param4_negative = ((int)(param4 << 1) >> 0x15 == -1);\n  if (is_param2_negative || is_param4_negative)\n  {\n    bool is_param1_param2_not_zero = ((param1 | param2 << 0xc) != 0);\n    bool is_param3_param4_not_zero = ((param3 | param4 << 0xc) != 0);\n    if ((is_param2_negative && is_param1_param2_not_zero) || (is_param4_negative && is_param3_param4_not_zero))\n    {\n      return 0xffffffff;\n    }\n  }\n  bool is_param1_param2_zero = ((param1 | param2 << 1) == 0);\n  bool is_param3_param4_zero = ((param3 | param4 << 1) == 0);\n  if (!is_param1_param2_zero && !is_param3_param4_zero)\n  {\n    bool are_param2_and_param4_equal = (param_2 == param_4);\n    bool are_param1_and_param3_equal = (param_1 == param_3);\n    if (!are_param2_and_param4_equal && !are_param1_and_param3_equal)\n    {\n      uint xor_of_param2_and_param4 = (param_2 ^ param_4);\n      bool is_xor_of_param2_and_param4_zero = (xor_of_param2_and_param4 == 0);\n      if (is_xor_of_param2_and_param4_zero)\n      {\n        bool are_param2_and_param4_equal = (param_2 == param_4);\n        bool is_param4_less_than_or_equal_to_param2 = (param_4 <= param_2);\n        if (are_param2_and_param4_equal || is_param4_less_than_or_equal_to_param2)\n        {\n          bool is_param3_less_than_or_equal_to_param1 = (param_3 <= param_1);\n          if (is_param3_less_than_or_equal_to_param1)\n          {\n            return 1;\n          }\n        }\n      }\n      else\n      {\n        bool is_xor_of_param2_and_param4_negative = (-1 < (int)xor_of_param2_and_param4);\n        bool are_param2_and_param4_equal = (param_2 == param_4);\n        bool is_param4_less_than_or_equal_to_param2 = (param_4 <= param_2);\n        bool is_param3_less_than_or_equal_to_param1 = (param_3 <= param_1);\n        bool is_condition_true = (is_xor_of_param2_and_param4_negative && are_param2_and_param4_equal && is_param4_less_than_or_equal_to_param2 && is_param3_less_than_or_equal_to_param1);\n        if (is_condition_true)\n        {\n          return 1;\n        }\n        else\n        {\n          uint param4_shifted_right_31_bits = (int)param_4 >> 0x1f;\n          if (!is_param4_less_than_or_equal_to_param2)\n          {\n            param4_shifted_right_31_bits = ~param4_shifted_right_31_bits;\n          }\n          return (param4_shifted_right_31_bits | 1);\n        }\n      }\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ec",
            "calling": [],
            "imported": false,
            "current_name": "compare_parameters_080008ec"
        },
        "FUN_08000978": {
            "renaming": {
                "FUN_08000978": "compare_double_values_and_return_result_08000978",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value1",
                "param_4": "value2"
            },
            "code": "void compare_double_values_and_return_result_08000978(float value1, float value2){\n  __aeabi_cdcmpeq(value1, value2);\n  return;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000978",
            "calling": [
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "imported": false,
            "current_name": "compare_double_values_and_return_result_08000978"
        },
        "FUN_0800101c": {
            "renaming": {
                "FUN_0800101c": "is_greater_than_or_equal_to_zero_0800101c",
                "in_CY": "is_less_than_zero",
                "in_ZR": "zero_flag"
            },
            "code": "bool is_greater_than_or_equal_to_zero_0800101c(void)\n{\n  bool is_less_than_zero = __aeabi_cfrcmple();\n  return !is_less_than_zero || !in_ZR;\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800101c",
            "calling": [],
            "imported": false,
            "current_name": "is_greater_than_or_equal_to_zero_0800101c"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "wait_forever_080056d4"
            },
            "code": "void wait_forever_080056d4(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_080056d4"
        },
        "FUN_080078b4": {
            "renaming": {
                "FUN_080078b4": "register_exit_process_080078b4",
                "__func": "__function_pointer",
                "iVar1": "exit_status"
            },
            "code": "int register_exit_process_080078b4(__func *__function_pointer)\n{\n  int exit_status;\n  exit_status = __register_exitproc(0, __function_pointer, 0);\n  return exit_status;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078b4",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_process_080078b4"
        },
        "FUN_080017b4": {
            "renaming": {
                "FUN_080017b4": "timer_period_elapsed_handler_080017b4",
                "TIM_HandleTypeDef": "timer_handle",
                "0x0": "NULL"
            },
            "code": "void timer_period_elapsed_handler_080017b4(void)\n{\n  TIM_HandleTypeDef* timer_handle = (TIM_HandleTypeDef*)0x0;\n  HAL_TIM_PeriodElapsedCallback(timer_handle);\n  return;\n}",
            "called": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017b4",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "timer_period_elapsed_handler_080017b4"
        },
        "FUN_08001030": {
            "renaming": {
                "FUN_08001030": "is_end_of_string_08001030",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08001030(char current_char)\n{\n  __aeabi_cfrcmple();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001030",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08001030"
        },
        "FUN_080011ec": {
            "renaming": {
                "FUN_080011ec": "divide_or_error_080011ec",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder"
            },
            "code": "void divide_or_error_080011ec(int dividend, int divisor, int quotient, int remainder) {\n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      divisor = -1;\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend, divisor);\n    return;\n  }\n  __udivmoddi4();\n  return;\n}",
            "called": [
                "__aeabi_idiv0",
                "__udivmoddi4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011ec",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "divide_or_error_080011ec"
        },
        "FUN_080056ce": {
            "renaming": {
                "FUN_080056ce": "wait_forever_080056ce"
            },
            "code": "void wait_forever_080056ce(void)\n{\n  while(true) {\n    // Do nothing, just wait\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056ce",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_080056ce"
        },
        "FUN_08004424": {
            "renaming": {
                "FUN_08004424": "do_nothing_08004424"
            },
            "code": "\nvoid do_nothing_08004424(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004424",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08004424"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "transmit_uart_data_08004f3c",
                "str": "data",
                "len": "length",
                "PTR_huart1_08004f5c": "&huart1"
            },
            "code": "void transmit_uart_data_08004f3c(char *data, uint32_t length)\n{\n  HAL_UART_Transmit(PTR_huart1_08004f5c, (uint8_t *)data, (uint16_t)length, 50);\n  return;\n}",
            "called": [
                "HAL_UART_Transmit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "transmit_uart_data_08004f3c"
        },
        "FUN_08003696": {
            "renaming": {
                "FUN_08003696": "do_nothing_08003696"
            },
            "code": "\nvoid do_nothing_08003696(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003696",
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08003696"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "check_params_080008fc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "xor_result",
                "bVar2": "are_params1_2_zero",
                "bVar3": "is_param4_less_than_param2",
                "result": "result",
                "is_param2_negative": "is_param2_negative",
                "is_param4_negative": "is_param4_negative"
            },
            "code": "uint check_params_080008fc(uint param1,uint param2,uint param3,uint param4)\n{\n  uint result;\n  bool is_param2_negative = ((int)(param2 << 1) >> 0x15 == -1);\n  bool is_param4_negative = ((int)(param4 << 1) >> 0x15 == -1);\n  if (is_param2_negative || is_param4_negative)\n  {\n    if (is_param2_negative && ((param1 | param2 << 0xc) != 0))\n    {\n      return 1;\n    }\n    if (is_param4_negative && ((param3 | param4 << 0xc) != 0))\n    {\n      return 1;\n    }\n  }\n  else\n  {\n    bool are_params1_2_zero = ((param1 | param2 << 1) == 0);\n    bool are_params3_4_zero = ((param3 | param4 << 1) == 0);\n    bool are_params2_4_equal = (param2 == param4);\n    bool are_params1_3_equal = (param1 == param3);\n    if (!are_params1_2_zero && !are_params3_4_zero && !are_params2_4_equal && !are_params1_3_equal)\n    {\n      uint xor_result = param2 ^ param4;\n      bool is_xor_result_zero = (xor_result == 0);\n      if (-1 < (int)xor_result)\n      {\n        is_xor_result_zero = (param2 == param4);\n      }\n      bool is_param4_less_than_param2 = (-1 < (int)xor_result) && (param4 <= param2);\n      if (is_xor_result_zero)\n      {\n        is_param4_less_than_param2 = (param3 <= param1);\n      }\n      result = (int)param4 >> 0x1f;\n      if (!is_param4_less_than_param2)\n      {\n        result = ~result;\n      }\n      return result | 1;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "imported": false,
            "current_name": "check_params_080008fc"
        },
        "FUN_08001714": {
            "renaming": {
                "FUN_08001714": "set_NVIC_priority_group_08001714",
                "PriorityGroup": "priority_group"
            },
            "code": "void set_NVIC_priority_group_08001714(uint32_t priority_group) {\n  NVIC_SetPriorityGrouping(priority_group);\n  return;\n}",
            "called": [
                "NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001714",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "set_NVIC_priority_group_08001714"
        },
        "FUN_08000988": {
            "renaming": {
                "FUN_08000988": "convert_float_to_double_08000988",
                "param_1": "float_val"
            },
            "code": "undefined4 convert_float_to_double_08000988(undefined4 float_val)\n{\n  __nedf2();\n  return float_val;\n}",
            "called": [
                "__nedf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000988",
            "calling": [
                "__aeabi_dcmple",
                "__aeabi_cdrcmple",
                "__aeabi_dcmpeq",
                "__aeabi_dcmplt"
            ],
            "imported": false,
            "current_name": "convert_float_to_double_08000988"
        },
        "FUN_080078c0": {
            "renaming": {
                "FUN_080078c0": "divide_and_conquer_080078c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "puVar2": "quotient_arr",
                "iVar3": "carry",
                "iVar4": "divisor_length",
                "iVar5": "dividend_length",
                "uVar6": "quotient",
                "puVar7": "remainder_arr",
                "puVar8": "dividend_arr",
                "puVar9": "divisor_arr",
                "uVar10": "carry",
                "puVar11": "temp_divisor_arr",
                "puVar12": "temp_divisor_arr"
            },
            "code": "uint divide_and_conquer_080078c0(uint dividend, uint divisor)\n{\n  uint quotient = 0;\n  uint *dividend_arr = (uint *)(dividend + 0x14);\n  uint *divisor_arr = (uint *)(divisor + 0x14);\n  int dividend_length = *(int *)(dividend + 0x10);\n  int divisor_length = *(int *)(divisor + 0x10);\n  if (dividend_length >= divisor_length)\n  {\n    int offset = dividend_length - divisor_length;\n    uint *remainder_arr = dividend_arr + offset;\n    uint divisor_most_sig_digit = divisor_arr[divisor_length - 1];\n    uint quotient_digit;\n    if (divisor_most_sig_digit == 0)\n      return 0;\n    if (divisor_most_sig_digit == 1)\n    {\n      for (int i = offset; i >= 0; i--)\n        quotient_arr[i] = remainder_arr[i];\n    }\n    else\n    {\n      for (int i = offset; i >= 0; i--)\n      {\n        quotient_digit = remainder_arr[i + divisor_length - 1] / (divisor_most_sig_digit + 1);\n        quotient += quotient_digit << (i * 32);\n        for (int j = i + divisor_length - 1; j >= i; j--)\n          remainder_arr[j] -= quotient_digit * divisor_arr[j - i];\n        if (remainder_arr[i + divisor_length - 1] < divisor_most_sig_digit)\n        {\n          quotient -= 1 << (i * 32);\n          for (int j = i + divisor_length - 1; j >= i; j--)\n            remainder_arr[j] += divisor_arr[j - i];\n        }\n      }\n    }\n  }\n  return quotient;\n}",
            "called": [
                "__mcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078c0",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "divide_and_conquer_080078c0"
        },
        "FUN_080056e0": {
            "renaming": {
                "FUN_080056e0": "do_nothing_080056e0"
            },
            "code": "\nvoid do_nothing_080056e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056e0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056e0"
        },
        "FUN_080079e8": {
            "renaming": {
                "FUN_080079e8": "FUNC_080079e8"
            },
            "code": "\nchar * FUNC_080079e8(int param_1,undefined4 param_2,uint param_3,uint param_4,uint param_5,uint param_6,\n              int *param_7,uint *param_8,char **param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  int iVar13;\n  char *pcVar14;\n  char *pcVar15;\n  undefined4 *puVar16;\n  undefined4 uVar17;\n  char *pcVar18;\n  int iVar19;\n  bool bVar20;\n  undefined8 uVar21;\n  undefined8 uVar22;\n  undefined8 uVar23;\n  uint local_80;\n  uint local_7c;\n  uint local_74;\n  int local_70;\n  uint local_68;\n  uint local_64;\n  int local_60;\n  int local_5c;\n  uint local_58;\n  int local_54;\n  uint local_48;\n  uint uStack_44;\n  uint local_38;\n  uint local_34;\n  int local_30;\n  int local_2c [2];\n  \n  iVar9 = *(int *)(param_1 + 0x40);\n  if (iVar9 != 0) {\n    uVar12 = *(uint *)(param_1 + 0x44);\n    *(uint *)(iVar9 + 4) = uVar12;\n    *(int *)(iVar9 + 8) = 1 << (uVar12 & 0xff);\n    _Bfree(param_1,iVar9);\n    *(undefined4 *)(param_1 + 0x40) = 0;\n  }\n  bVar20 = (int)param_4 < 0;\n  uVar12 = param_4;\n  if (bVar20) {\n    uVar12 = param_4 & 0x7fffffff;\n  }\n  *param_8 = (uint)bVar20;\n  local_7c = param_4;\n  if (bVar20) {\n    local_7c = uVar12;\n  }\n  uVar4 = local_7c;\n  if ((DAT_08007bf8 & ~uVar12) == 0) {\n    *param_7 = 9999;\n    if ((param_3 == 0) && ((uVar12 & 0xfffff) == 0)) {\n      if (param_9 == (char **)0x0) {\n        return PTR_s_Infinity_08007c08;\n      }\n      pcVar15 = PTR_s_Infinity_08007c08 + 8;\n      pcVar18 = PTR_s_Infinity_08007c08;\n    }\n    else {\n      if (param_9 == (char **)0x0) {\n        return PTR_DAT_08007c0c;\n      }\n      pcVar15 = PTR_DAT_08007c0c + 3;\n      pcVar18 = PTR_DAT_08007c0c;\n    }\n    *param_9 = pcVar15;\n    return pcVar18;\n  }\n  uVar21 = __aeabi_dcmpeq(param_3,local_7c,0,0);\n  local_60 = (int)uVar21;\n  if (local_60 != 0) {\n    *param_7 = 1;\n    if (param_9 != (char **)0x0) {\n      pcVar18 = PTR_DAT_08007bfc + -1;\n      *param_9 = PTR_DAT_08007bfc;\n      return pcVar18;\n    }\n    return PTR_DAT_08007c10;\n  }\n  uVar3 = __d2b(param_1,(int)((ulonglong)uVar21 >> 0x20),param_3,local_7c,local_2c,&local_30);\n  iVar9 = local_30;\n  if (uVar12 >> 0x14 == 0) {\n    iVar13 = local_2c[0] + local_30;\n    iVar10 = iVar13 + 0x432;\n    if (iVar10 < 0x21) {\n      uVar12 = param_3 << (0x20U - iVar10 & 0xff);\n    }\n    else {\n      uVar12 = param_3 >> (iVar13 + 0x412U & 0xff) | uVar12 << (0x40U - iVar10 & 0xff);\n    }\n    uVar21 = __floatunsidf(uVar12);\n    iVar13 = iVar13 + -1;\n    local_60 = 1;\n    uVar5 = (int)((ulonglong)uVar21 >> 0x20) + 0xfe100000;\n    uVar12 = (uint)uVar21;\n  }\n  else {\n    iVar13 = (uVar12 >> 0x14) - 0x3ff;\n    uVar5 = local_7c & 0xfffff | 0x3ff00000;\n    uVar12 = param_3;\n  }\n  uVar21 = __subdf3(uVar12,uVar5,0,DAT_08007c00);\n  uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be0,DAT_08007be4);\n  uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be8,DAT_08007bec);\n  uVar22 = __aeabi_i2d(iVar13);\n  uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08007bf0,DAT_08007bf4);\n  uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar22,\n                        (int)((ulonglong)uVar22 >> 0x20));\n  uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n  local_74 = __aeabi_d2iz();\n  iVar10 = __aeabi_dcmplt((int)uVar21,uVar8,0,0);\n  if (iVar10 != 0) {\n    uVar22 = __aeabi_i2d(local_74);\n    iVar10 = __aeabi_dcmpeq((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar8);\n    if (iVar10 == 0) {\n      local_74 = local_74 - 1;\n    }\n  }\n  if (local_74 < 0x17) {\n    local_54 = __aeabi_dcmpgt(*(undefined4 *)(PTR___mprec_tens_08007c04 + local_74 * 8),\n                              *(undefined4 *)((int)(PTR___mprec_tens_08007c04 + local_74 * 8) + 4),\n                              param_3,local_7c);\n    if (local_54 != 0) {\n      local_74 = local_74 - 1;\n      local_54 = 0;\n    }\n  }\n  else {\n    local_54 = 1;\n  }\n  iVar10 = (iVar9 - iVar13) + -1;\n  if (iVar10 < 0) {\n    local_70 = 1 - (iVar9 - iVar13);\n    iVar10 = 0;\n  }\n  else {\n    local_70 = 0;\n  }\n  if ((int)local_74 < 0) {\n    local_58 = 0;\n    local_70 = local_70 - local_74;\n    local_5c = -local_74;\n  }\n  else {\n    iVar10 = iVar10 + local_74;\n    local_58 = local_74;\n    local_5c = 0;\n  }\n  if (9 < param_5) {\n    local_38 = 0xffffffff;\n    bVar20 = true;\n    local_68 = 0xffffffff;\n    local_64 = 1;\n    param_5 = 0;\n    param_6 = 0;\n    goto LAB_08007c24;\n  }\n  bVar20 = (int)param_5 < 6;\n  if (!bVar20) {\n    param_5 = param_5 - 4;\n  }\n  switch(param_5) {\n  case 2:\n    local_64 = 0;\n    break;\n  case 3:\n    local_64 = 0;\n    goto LAB_08008300;\n  case 4:\n    local_64 = 1;\n    break;\n  case 5:\n    local_64 = 1;\nLAB_08008300:\n    local_38 = local_74 + param_6;\n    local_68 = local_38 + 1;\n    uVar12 = local_68;\n    if ((int)local_68 < 1) {\n      uVar12 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    pcVar18 = (char *)_Balloc(param_1,0);\n    local_38 = 0xffffffff;\n    local_68 = 0xffffffff;\n    param_6 = 0;\n    *(char **)(param_1 + 0x40) = pcVar18;\n    local_64 = 1;\n    goto LAB_08007e36;\n  }\n  if ((int)param_6 < 1) {\n    local_38 = 1;\n    param_6 = 1;\n    local_68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_38;\n  }\n  else {\n    local_38 = param_6;\n    local_68 = param_6;\n    uVar12 = param_6;\nLAB_08008314:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_68;\n    if (0x17 < (int)uVar12) {\n      iVar13 = 4;\n      iVar9 = 1;\n      do {\n        iVar19 = iVar9;\n        iVar13 = iVar13 * 2;\n        iVar9 = iVar19 + 1;\n      } while (iVar13 + 0x14U <= uVar12);\n      *(int *)(param_1 + 0x44) = iVar19;\n    }\n  }\n  pcVar18 = (char *)_Balloc(param_1);\n  *(char **)(param_1 + 0x40) = pcVar18;\n  if ((uVar5 < 0xf) && (bVar20)) {\n    if ((int)local_74 < 1) {\n      if (local_74 == 0) {\n        iVar9 = 2;\n        local_80 = param_3;\n      }\n      else {\n        uVar21 = __muldf3(param_3,local_7c,\n                          *(undefined4 *)(PTR___mprec_tens_080086cc + (-local_74 & 0xf) * 8),\n                          *(undefined4 *)\n                           ((int)(PTR___mprec_tens_080086cc + (-local_74 & 0xf) * 8) + 4));\n        local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n        local_80 = (uint)uVar21;\n        iVar13 = (int)-local_74 >> 4;\n        if (iVar13 == 0) {\n          iVar9 = 2;\n        }\n        else {\n          bVar20 = false;\n          iVar9 = 2;\n          puVar16 = (undefined4 *)PTR___mprec_bigtens_080086d0;\n          do {\n            if (iVar13 << 0x1f < 0) {\n              uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),*puVar16,puVar16[1]);\n              bVar20 = true;\n              iVar9 = iVar9 + 1;\n            }\n            iVar13 = iVar13 >> 1;\n            puVar16 = puVar16 + 2;\n          } while (iVar13 != 0);\n          if (bVar20) {\n            local_80 = (uint)uVar21;\n            local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar12 = (int)local_74 >> 4;\n      uVar21 = *(undefined8 *)(PTR___mprec_tens_08007ec4 + (local_74 & 0xf) * 8);\n      if ((int)(uVar12 << 0x1b) < 0) {\n        uVar22 = __divdf3(param_3,local_7c,*(undefined4 *)(PTR___mprec_bigtens_08007ec8 + 0x20),\n                          *(undefined4 *)(PTR___mprec_bigtens_08007ec8 + 0x24));\n        uStack_44 = (uint)((ulonglong)uVar22 >> 0x20);\n        local_48 = (uint)uVar22;\n        iVar9 = 3;\n        uVar12 = uVar12 & 0xf;\n        puVar16 = (undefined4 *)PTR___mprec_bigtens_08007ec8;\n      }\n      else {\n        iVar9 = 2;\n        uStack_44 = local_7c;\n        puVar16 = (undefined4 *)PTR___mprec_bigtens_08007ec8;\n        local_48 = param_3;\n      }\n      while( true ) {\n        uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        if (uVar12 == 0) break;\n        if ((int)(uVar12 << 0x1f) < 0) {\n          uVar21 = __muldf3((int)uVar21,uVar8,*puVar16,puVar16[1]);\n          iVar9 = iVar9 + 1;\n        }\n        uVar12 = (int)uVar12 >> 1;\n        puVar16 = puVar16 + 2;\n      }\n      uVar21 = __divdf3(local_48,uStack_44,(int)uVar21,uVar8);\n      local_80 = (uint)uVar21;\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n    }\n    uVar21 = CONCAT44(local_7c,local_80);\n    if ((local_54 != 0) && (iVar13 = __aeabi_dcmplt(local_80,local_7c,0,DAT_08007ecc), iVar13 != 0))\n    {\n      if (local_68 == 0) {\n        uVar21 = __aeabi_i2d(iVar9);\n        uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),local_80,local_7c);\n        uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d4);\n        uVar8 = (undefined4)uVar21;\n        iVar9 = (int)((ulonglong)uVar21 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_38) {\n        uVar21 = __muldf3(local_80,local_7c,0,DAT_0800880c);\n        uVar22 = __aeabi_i2d(iVar9 + 1);\n        uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,\n                          (int)((ulonglong)uVar21 >> 0x20));\n        uVar22 = __aeabi_dadd((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08008810);\n        uVar8 = (undefined4)uVar22;\n        local_48 = local_38;\n        local_34 = local_74 - 1;\n        iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar22 = __aeabi_i2d(iVar9);\n    uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),local_80,local_7c);\n    uVar22 = __aeabi_dadd((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed0);\n    uVar8 = (undefined4)uVar22;\n    iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n    if (local_68 != 0) {\n      local_34 = local_74;\n      local_48 = local_68;\nLAB_08007cfa:\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n      local_80 = (uint)uVar21;\n      cVar1 = __aeabi_d2iz(local_80,local_7c);\n      cVar1 = cVar1 + '0';\n      uVar11 = *(undefined4 *)(PTR___mprec_tens_08007ec4 + local_48 * 8 + -8);\n      uVar7 = *(undefined4 *)(PTR___mprec_tens_08007ec4 + local_48 * 8 + -4);\n      uVar21 = __aeabi_i2d();\n      uVar21 = __subdf3(local_80,local_7c,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n      uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n      pcVar15 = pcVar18 + 1;\n      if (local_64 == 0) {\n        uVar22 = __muldf3(uVar8,iVar9,uVar11,uVar7);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        if (local_48 != 1) {\n          pcVar14 = pcVar15;\n          do {\n            uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d8);\n            cVar1 = __aeabi_d2iz();\n            uVar23 = __aeabi_i2d();\n            uVar21 = __subdf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                              (int)((ulonglong)uVar23 >> 0x20));\n            pcVar15 = pcVar14 + 1;\n            *pcVar14 = cVar1 + '0';\n            pcVar14 = pcVar15;\n          } while (pcVar15 != pcVar18 + local_48);\n        }\n        uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        uVar23 = __aeabi_dadd((int)uVar22,uVar8,0,DAT_080086dc);\n        iVar9 = __aeabi_dcmplt((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar21,uVar11);\n        if (iVar9 == 0) {\n          uVar22 = __subdf3(0,DAT_08008814,(int)uVar22,uVar8);\n          iVar9 = __aeabi_dcmpgt((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar11);\n          pcVar14 = pcVar15;\n          if (iVar9 == 0) goto LAB_08007e36;\n          do {\n            pcVar15 = pcVar14;\n            pcVar14 = pcVar15 + -1;\n          } while (pcVar15[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_74 = local_34;\n        cVar1 = pcVar15[-1];\n      }\n      else {\n        uVar22 = __divdf3(0,DAT_08007ed4,uVar11,uVar7);\n        uVar22 = __subdf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,iVar9);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        iVar9 = __aeabi_dcmpgt((int)uVar22,uVar8,(int)uVar21,uVar17);\n        if (iVar9 != 0) {\nLAB_08008784:\n          local_74 = local_34;\n          goto LAB_08008294;\n        }\n        uVar23 = __subdf3(0,DAT_08007ecc,(int)uVar21,uVar17);\n        iVar9 = __aeabi_dcmpgt((int)uVar22,uVar8,(int)uVar23,(int)((ulonglong)uVar23 >> 0x20));\n        if (iVar9 == 0) {\n          if (local_48 != 1) {\n            pcVar14 = pcVar15;\n            do {\n              uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed8);\n              uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n              uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n              cVar1 = __aeabi_d2iz();\n              uVar23 = __aeabi_i2d();\n              uVar21 = __subdf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                (int)((ulonglong)uVar23 >> 0x20));\n              uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n              cVar1 = cVar1 + '0';\n              pcVar15 = pcVar14 + 1;\n              *pcVar14 = cVar1;\n              iVar9 = __aeabi_dcmplt((int)uVar21,uVar11,(int)uVar22,uVar8);\n              if (iVar9 != 0) {\n                local_74 = local_34;\n                goto LAB_08008294;\n              }\n              uVar23 = __subdf3(0,DAT_08007ecc,(int)uVar21,uVar11);\n              iVar9 = __aeabi_dcmplt((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar22,uVar8)\n              ;\n              if (iVar9 != 0) goto LAB_08008798;\n              pcVar14 = pcVar15;\n            } while (pcVar15 != pcVar18 + local_48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_74 = local_34;\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar21 = __subdf3(local_80,local_7c,0,DAT_080086c8);\n    uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n    uVar12 = __aeabi_dcmpgt((int)uVar21,uVar11,uVar8,iVar9);\n    if (uVar12 == 0) {\n      iVar9 = __aeabi_dcmplt((int)uVar21,uVar11,uVar8,iVar9 + -0x80000000);\n      uVar5 = uVar12;\n      pcVar15 = pcVar18;\n      if (iVar9 == 0) goto LAB_08007e36;\n      goto LAB_080084f0;\n    }\n    local_68 = 0;\n    uVar12 = 0;\nLAB_08008406:\n    *pcVar18 = '1';\n    local_74 = local_74 + 1;\n    pcVar15 = pcVar18 + 1;\n    uVar5 = local_68;\nLAB_08008416:\n    _Bfree(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar15 = pcVar18;\n    if ((-1 < local_2c[0]) && ((int)local_74 < 0xf)) {\n      uVar8 = *(undefined4 *)(PTR___mprec_tens_08007ec4 + local_74 * 8);\n      uVar11 = *(undefined4 *)((int)(PTR___mprec_tens_08007ec4 + local_74 * 8) + 4);\n      if ((-1 < (int)param_6) || (0 < (int)local_68)) {\n        __divdf3(param_3,uVar4,uVar8,uVar11);\n        bVar2 = __aeabi_d2iz();\n        uVar21 = __aeabi_i2d();\n        uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),uVar8,uVar11);\n        uVar21 = __subdf3(param_3,uVar4,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        *pcVar18 = bVar2 + 0x30;\n        pcVar15 = pcVar18 + 1;\n        if (local_68 != 1) {\n          uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n          iVar9 = __aeabi_dcmpeq((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          while (iVar9 == 0) {\n            uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n            __divdf3((int)uVar21,uVar17,uVar8,uVar11);\n            bVar2 = __aeabi_d2iz();\n            uVar22 = __aeabi_i2d();\n            uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,uVar11);\n            uVar21 = __subdf3((int)uVar21,uVar17,(int)uVar22,(int)((ulonglong)uVar22 >> 0x20));\n            pcVar14 = pcVar15 + 1;\n            *pcVar15 = bVar2 + 0x30;\n            pcVar15 = pcVar14;\n            if (local_68 == (int)pcVar14 - (int)pcVar18) goto LAB_08007f3a;\n            uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080081f8);\n            iVar9 = __aeabi_dcmpeq((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        iVar9 = __aeabi_dcmpgt((int)uVar21,uVar17,uVar8,uVar11);\n        if ((iVar9 == 0) &&\n           ((iVar9 = __aeabi_dcmpeq((int)uVar21,uVar17,uVar8,uVar11), iVar9 == 0 ||\n            ((bVar2 & 1) == 0)))) goto LAB_08008294;\n        cVar1 = pcVar15[-1];\nLAB_08007f7c:\n        while (pcVar14 = pcVar15 + -1, cVar1 == '9') {\n          if (pcVar18 == pcVar14) {\n            *pcVar18 = '0';\n            cVar1 = pcVar15[-1];\n            local_74 = local_74 + 1;\n            pcVar14 = pcVar18;\n            break;\n          }\n          cVar1 = pcVar15[-2];\n          pcVar15 = pcVar14;\n        }\n        *pcVar14 = cVar1 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_68 == 0) {\n        uVar21 = __muldf3(uVar8,uVar11,0,DAT_080086c8);\n        iVar9 = __aeabi_dcmpge((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),param_3,uVar4);\n        uVar12 = local_68;\n        uVar5 = local_68;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        uVar12 = 0;\n        uVar5 = 0;\n      }\nLAB_080084f0:\n      local_74 = ~param_6;\n      pcVar18 = pcVar15;\n      goto LAB_08008416;\n    }\n    iVar9 = local_5c;\n    if (local_64 == 0) {\n      local_60 = local_70;\n      uVar12 = local_64;\n    }\n    else {\n      if ((int)param_5 < 2) {\n        if (local_60 == 0) {\n          local_60 = local_70;\n          local_70 = local_70 + (0x36 - local_30);\n          iVar10 = iVar10 + (0x36 - local_30);\n        }\n        else {\n          local_60 = local_70;\n          local_70 = local_70 + local_2c[0] + 0x433;\n          iVar10 = iVar10 + local_2c[0] + 0x433;\n        }\n      }\n      else {\n        iVar13 = local_68 - 1;\n        if (local_5c < iVar13) {\n          local_58 = local_58 + (iVar13 - local_5c);\n          iVar9 = 0;\n          local_5c = iVar13;\n        }\n        else {\n          iVar9 = local_5c - iVar13;\n        }\n        if ((int)local_68 < 0) {\n          local_60 = local_70 - local_68;\n        }\n        else {\n          iVar10 = iVar10 + local_68;\n          local_60 = local_70;\n          local_70 = local_70 + local_68;\n        }\n      }\n      uVar12 = __i2b(param_1,1);\n    }\n    if ((0 < local_60) && (0 < iVar10)) {\n      iVar13 = local_60;\n      if (iVar10 <= local_60) {\n        iVar13 = iVar10;\n      }\n      iVar10 = iVar10 - iVar13;\n      local_70 = local_70 - iVar13;\n      local_60 = local_60 - iVar13;\n    }\n    if (local_5c != 0) {\n      if (local_64 == 0) {\n        uVar3 = __pow5mult(param_1,uVar3,local_5c);\n      }\n      else {\n        uVar8 = uVar3;\n        if (iVar9 != 0) {\n          uVar12 = __pow5mult(param_1,uVar12,iVar9);\n          uVar8 = __multiply(param_1,uVar12,uVar3);\n          _Bfree(param_1,uVar3);\n          uVar3 = uVar8;\n          if (local_5c - iVar9 == 0) goto LAB_08008062;\n        }\n        uVar3 = __pow5mult(param_1,uVar8,local_5c - iVar9);\n      }\n    }\nLAB_08008062:\n    uVar5 = __i2b(param_1,1);\n    if (local_58 == 0) {\n      if (((int)param_5 < 2) && (param_3 == 0)) {\nLAB_0800835a:\n        if ((uVar4 & 0xfffff) == 0) {\n          uVar4 = uVar4 & 0x7ff00000;\n          if (uVar4 != 0) {\n            iVar10 = iVar10 + 1;\n            local_70 = local_70 + 1;\n            uVar4 = 1;\n          }\n        }\n        else {\n          uVar4 = 0;\n        }\n        bVar20 = local_58 != 0;\n        uVar6 = param_3;\n        local_58 = uVar4;\n        if (bVar20) goto LAB_080082d4;\n      }\n      iVar9 = 1;\n    }\n    else {\n      uVar21 = __pow5mult(param_1,uVar5);\n      uVar5 = (uint)uVar21;\n      if (((int)param_5 < 2) && (param_3 == 0)) goto LAB_0800835a;\n      local_58 = 0;\n      uVar6 = (uint)((ulonglong)uVar21 >> 0x20);\nLAB_080082d4:\n      iVar9 = __hi0bits(*(undefined4 *)(uVar5 + *(int *)(uVar5 + 0x10) * 4 + 0x10),uVar6);\n      iVar9 = 0x20 - iVar9;\n    }\n    uVar4 = iVar9 + iVar10 & 0x1f;\n    if (uVar4 == 0) {\n      iVar9 = 0x1c;\nLAB_08008096:\n      iVar10 = iVar10 + iVar9;\n      local_70 = local_70 + iVar9;\n      local_60 = local_60 + iVar9;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar4)) {\n        iVar9 = 0x1c - uVar4;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar4 != 4) {\n        iVar9 = 0x3c - uVar4;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_70) {\n      uVar3 = __lshift(param_1,uVar3,local_70);\n    }\n    if (0 < iVar10) {\n      uVar5 = __lshift(param_1,uVar5,iVar10);\n    }\n    pcVar14 = pcVar18;\n    if ((local_54 != 0) && (iVar9 = __mcmp(uVar3,uVar5), iVar9 < 0)) {\n      local_74 = local_74 - 1;\n      uVar3 = __multadd(param_1,uVar3,10,0);\n      if (local_64 == 0) {\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_0800820a;\n        }\n      }\n      else {\n        uVar12 = __multadd(param_1,uVar12,10,0);\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_080080de;\n        }\n      }\n      local_68 = local_38;\nLAB_080084e8:\n      if (local_68 == 0) {\n        local_68 = __multadd(param_1,uVar5,5);\n        iVar9 = __mcmp(uVar3,local_68);\n        uVar5 = local_68;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_68 < 1) && (2 < (int)param_5)) goto LAB_080084e8;\n    if (local_64 == 0) {\nLAB_0800820a:\n      while( true ) {\n        iVar19 = quorem(uVar3,uVar5);\n        iVar19 = iVar19 + 0x30;\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        if ((int)local_68 <= (int)pcVar15 - (int)pcVar18) break;\n        uVar3 = __multadd(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n      }\n      local_80 = 0;\n    }\n    else {\nLAB_080080de:\n      local_80 = uVar12;\n      if (0 < local_60) {\n        local_80 = __lshift(param_1,uVar12,local_60);\n      }\n      uVar12 = local_80;\n      if (local_58 != 0) {\n        iVar9 = _Balloc(param_1,*(undefined4 *)(local_80 + 4));\n        memcpy((void *)(iVar9 + 0xc),(void *)(local_80 + 0xc),(*(int *)(local_80 + 0x10) + 2) * 4);\n        uVar12 = __lshift(param_1,iVar9,1);\n      }\nLAB_08008108:\n      iVar9 = quorem(uVar3,uVar5);\n      iVar13 = __mcmp(uVar3,local_80);\n      iVar10 = __mdiff(param_1,uVar5,uVar12);\n      iVar19 = iVar9 + 0x30;\n      if (*(int *)(iVar10 + 0xc) == 0) {\n        uVar4 = __mcmp(uVar3);\n        _Bfree(param_1,iVar10);\n        if (((uVar4 != 0) || (param_5 != 0)) || (uVar4 = param_5, (param_3 & 1) != 0))\n        goto LAB_0800815a;\n        if (iVar19 != 0x39) {\n          if (0 < iVar13) {\nLAB_0800874c:\n            iVar19 = iVar9 + 0x31;\n          }\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar15 = pcVar14 + 1;\n        cVar1 = '9';\n        *pcVar14 = '9';\n        goto LAB_08008268;\n      }\n      _Bfree(param_1,iVar10);\n      uVar4 = 1;\nLAB_0800815a:\n      if ((iVar13 < 0) || (((iVar13 == 0 && (param_5 == 0)) && ((param_3 & 1) == 0)))) {\n        if (0 < (int)uVar4) {\n          uVar3 = __lshift(param_1,uVar3,1);\n          iVar13 = __mcmp(uVar3,uVar5);\n          if ((0 < iVar13) || ((iVar13 == 0 && (iVar9 << 0x1f < 0)))) {\n            if (iVar19 != 0x39) goto LAB_0800874c;\n            goto LAB_08008752;\n          }\n        }\nLAB_080085a4:\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        goto LAB_08008274;\n      }\n      pcVar15 = pcVar14 + 1;\n      if (0 < (int)uVar4) {\n        if (iVar19 == 0x39) goto LAB_08008752;\n        *pcVar14 = (char)iVar9 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar14 = (char)iVar19;\n      if (pcVar18 + (local_68 - 1) != pcVar14) {\n        uVar3 = __multadd(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n        if (local_80 == uVar12) {\n          local_80 = __multadd(param_1,local_80,10,0);\n          uVar12 = local_80;\n        }\n        else {\n          local_80 = __multadd(param_1,local_80,10,0);\n          uVar12 = __multadd(param_1,uVar12,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    uVar3 = __lshift(param_1,uVar3,1);\n    iVar9 = __mcmp(uVar3,uVar5);\n    cVar1 = pcVar15[-1];\n    if ((0 < iVar9) || ((iVar9 == 0 && (iVar19 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar14 = pcVar15 + -1;\n        if (cVar1 != '9') goto code_r0x08008270;\n        if (pcVar18 == pcVar14) {\n          *pcVar18 = '1';\n          local_74 = local_74 + 1;\n          goto LAB_08008274;\n        }\n        cVar1 = pcVar15[-2];\n        pcVar15 = pcVar14;\n      } while( true );\n    }\n    while (cVar1 == '0') {\n      cVar1 = pcVar15[-2];\n      pcVar15 = pcVar15 + -1;\n    }\nLAB_08008274:\n    _Bfree(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != uVar12)) {\n      _Bfree(param_1);\n    }\n  }\n  _Bfree(param_1,uVar12);\nLAB_08008294:\n  _Bfree(param_1,uVar3);\n  *pcVar15 = '\\0';\n  *param_7 = local_74 + 1;\n  if (param_9 == (char **)0x0) {\n    return pcVar18;\n  }\n  *param_9 = pcVar15;\n  return pcVar18;\ncode_r0x08008270:\n  *pcVar14 = cVar1 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "called": [
                "__muldf3",
                "memcpy",
                "__pow5mult",
                "__aeabi_i2d",
                "_Balloc",
                "__i2b",
                "_Bfree",
                "quorem",
                "__divdf3",
                "__aeabi_dcmpeq",
                "__aeabi_dcmplt",
                "__mcmp",
                "__floatunsidf",
                "__subdf3",
                "__mdiff",
                "__lshift",
                "__aeabi_dcmpge",
                "__aeabi_d2iz",
                "__hi0bits",
                "__multadd",
                "__multiply",
                "__aeabi_dadd",
                "__aeabi_dcmpgt",
                "__d2b"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080079e8",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080079e8"
        },
        "FUN_080017c4": {
            "renaming": {
                "FUN_080017c4": "configure_GPIO_pins_080017c4",
                "GPIOx": "gpio_port",
                "GPIO_Init": "gpio_init",
                "uVar1": "unused_var1",
                "uVar2": "unused_var2",
                "uVar3": "pin_mask",
                "uVar4": "pin_value",
                "uVar5": "mode",
                "pGVar6": "unused_var3",
                "iVar7": "unused_var4",
                "tmpreg": "unused_var5",
                "configregister": "unused_var6",
                "registeroffset": "unused_var7",
                "temp": "unused_var8",
                "iocurrent": "unused_var9",
                "ioposition": "unused_var10",
                "config": "config_value",
                "position": "position"
            },
            "code": "void configure_GPIO_pins_080017c4(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {\n  uint32_t pin_mask;\n  uint32_t config_value;\n  uint32_t position = 0;\n  while (position < 16) {\n    pin_mask = 1 << position;\n    if (GPIO_Init->Pin & pin_mask) {\n      uint32_t mode = GPIO_Init->Mode;\n      if (mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_OUTPUT_OD) {\n        config_value = GPIO_Init->Speed;\n      }\n      else if (mode == GPIO_MODE_INPUT) {\n        if (GPIO_Init->Pull == GPIO_PULLUP) {\n          config_value = GPIO_PULLUP;\n        }\n        else if (GPIO_Init->Pull == GPIO_PULLDOWN) {\n          config_value = GPIO_PULLDOWN;\n        }\n        else {\n          config_value = GPIO_NOPULL;\n        }\n      }\n      else {\n        config_value = GPIO_NOPULL;\n      }\n      if (position < 8) {\n        uint32_t shift = position << 2;\n        GPIOx->CRL = (GPIOx->CRL & ~(0xf << shift)) | (config_value << shift);\n      }\n      else {\n        uint32_t shift = (position - 8) << 2;\n        GPIOx->CRH = (GPIOx->CRH & ~(0xf << shift)) | (config_value << shift);\n      }\n    }\n    position++;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017c4",
            "calling": [
                "HAL_TIM_MspPostInit",
                "MX_GPIO_Init"
            ],
            "imported": false,
            "current_name": "configure_GPIO_pins_080017c4"
        },
        "FUN_080056da": {
            "renaming": {
                "FUN_080056da": "wait_forever_080056da"
            },
            "code": "void wait_forever_080056da(void)\n{\n  while(true)\n  {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056da",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_080056da"
        },
        "FUN_08001044": {
            "renaming": {
                "FUN_08001044": "reverse_bits_08001044",
                "param_1": "num",
                "uVar1": "reversed_num",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint reverse_bits_08001044(uint num) {\n  uint reversed_num = 0;\n  uint bit_pos = 31;\n  while (num != 0) {\n    uint bit = num & 1;\n    reversed_num |= bit << bit_pos;\n    num >>= 1;\n    bit_pos -= 1;\n  }\n  return reversed_num;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001044",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "reverse_bits_08001044"
        },
        "FUN_08009444": {
            "renaming": {
                "FUN_08009444": "encode_bits_08009444",
                "param_1": "num_bits",
                "param_2": "bit_array",
                "param_3": "num_array_elements",
                "iVar1": "index1",
                "iVar2": "index2",
                "iVar3": "index3",
                "uVar4": "temp_var",
                "iVar5": "num_array_elements_orig",
                "iVar6": "temp_var2",
                "puVar7": "new_bit_array",
                "puVar8": "bit_array_ptr",
                "puVar9": "new_bit_array_ptr",
                "puVar10": "bit_array_ptr2",
                "puVar11": "bit_array_ptr3",
                "iVar12": "num_bits_in_last_element",
                "iVar13": "num_elements_needed",
                "uVar14": "carry_bits"
            },
            "code": "void encode_bits_08009444(int num_bits, uint32_t *bit_array, uint32_t num_array_elements) {\n  int num_bits_in_last_element;\n  int num_elements_needed;\n  uint32_t *new_bit_array;\n  int i;\n  int j;\n  uint32_t carry_bits = 0;\n\n  num_elements_needed = (num_bits + 31) / 32;\n  num_bits_in_last_element = num_bits % 32;\n  if (num_bits_in_last_element != 0) {\n    num_elements_needed++;\n  }\n  new_bit_array = _Balloc(num_array_elements, num_elements_needed);\n  for (i = 0; i < num_elements_needed; i++) {\n    new_bit_array[i] = 0;\n  }\n  for (i = 0; i < num_array_elements; i++) {\n    if (i == num_array_elements - 1 && num_bits_in_last_element != 0) {\n      for (j = 0; j < num_bits_in_last_element; j++) {\n        new_bit_array[i + j] = (bit_array[i] >> j) | carry_bits;\n        carry_bits = bit_array[i] << (32 - j);\n      }\n      new_bit_array[i + j] = carry_bits;\n    }\n    else {\n      new_bit_array[i] = bit_array[i];\n    }\n  }\n  *(uint32_t **)DAT_0804a4b4[num_array_elements] = new_bit_array;\n  return;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009444",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "encode_bits_08009444"
        },
        "FUN_08004436": {
            "renaming": {
                "FUN_08004436": "transmitData_08004436",
                "huart": "uart",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "HVar3": "status",
                "iVar4": "error_status",
                "local_58": "data_16"
            },
            "code": "HAL_StatusTypeDef transmitData_08004436(UART_HandleTypeDef *uart, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n  uint32_t start_time;\n  HAL_StatusTypeDef status;\n  ushort *data_16 = (ushort *)data;\n\n  if (uart->gState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n\n  if ((data == NULL) || (size == 0)) {\n    return HAL_ERROR;\n  }\n\n  if (uart->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n\n  uart->Lock = HAL_LOCKED;\n  uart->ErrorCode = 0;\n  uart->gState = HAL_UART_STATE_BUSY_TX;\n  start_time = HAL_GetTick();\n\n  uart->TxXferSize = size;\n  uart->TxXferCount = size;\n\n  while (uart->TxXferCount > 0) {\n    uart->TxXferCount--;\n    if ((uart->Init).WordLength == UART_WORDLENGTH_9B) {\n      status = waitForFlag(uart, UART_FLAG_TXE, timeout, start_time);\n      if (status != HAL_OK) {\n        goto error;\n      }\n      uart->Instance->DR = *data_16 & 0x1ff;\n      data_16++;\n    }\n    else {\n      status = waitForFlag(uart, UART_FLAG_TXE, timeout, start_time);\n      if (status != HAL_OK) {\n        goto error;\n      }\n      uart->Instance->DR = (uint)*(byte *)data_16;\n      data_16 = (ushort *)((int)data_16 + 1);\n    }\n  }\n\n  status = waitForFlag(uart, UART_FLAG_TC, timeout, start_time);\n\nerror:\n  uart->Instance->CR1 &= ~USART_CR1_UE;\n  uart->Instance->CR1 &= ~USART_CR1_TE;\n  uart->gState = HAL_UART_STATE_READY;\n  uart->RxState = HAL_UART_STATE_READY;\n  uart->Lock = HAL_UNLOCKED;\n  return status;\n}\n\nHAL_StatusTypeDef waitForFlag(UART_HandleTypeDef *uart, uint32_t flag, uint32_t timeout, uint32_t start_time)\n{\n  uint32_t current_time;\n\n  while (!((uart->Instance->SR) & flag))) {\n    if (timeout != HAL_MAX_DELAY) {\n      current_time = HAL_GetTick();\n      if ((current_time - start_time) >= timeout) {\n        return HAL_TIMEOUT;\n      }\n    }\n  }\n\n  return HAL_OK;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004436",
            "calling": [
                "uart_print"
            ],
            "imported": false,
            "current_name": "transmitData_08004436"
        },
        "FUN_08009e50": {
            "renaming": {
                "FUN_08009e50": "set_data_if_valid_08009e50",
                "param_1": "data",
                "param_2": "output",
                "param_3": "length",
                "*param_2": "*output",
                "undefined": "void",
                "(undefined *)0x0": "NULL",
                "(undefined *)0xffffffff": "NULL",
                "*param_1": "*data",
                "char": "uint8_t"
            },
            "code": "undefined* set_data_if_valid_08009e50(uint8_t* data, undefined* output, uint length) {\n  if (output != NULL) {\n    if (length < 256) {\n      *output = (char)length;\n      output = output + 1;\n    }\n    else {\n      output = NULL;\n      *data = 138;\n    }\n  }\n  return output;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e50",
            "calling": [],
            "imported": false,
            "current_name": "set_data_if_valid_08009e50"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "read_data_from_I2C_device_08004ee8",
                "addr": "device_address",
                "reg": "register_address",
                "data": "data_buffer",
                "len": "data_length"
            },
            "code": "void read_data_from_I2C_device_08004ee8(uint8_t device_address, uint8_t register_address, uint8_t *data_buffer, uint16_t data_length)\n{\n  HAL_I2C_Mem_Read((I2C_HandleTypeDef *)PTR_hi2c1_08004f28, (uint16_t)device_address, (uint16_t)register_address, 1, data_buffer, data_length, *(uint32_t *)PTR_I2C_TIMEOUT_08004f24);\n  return;\n}",
            "called": [
                "HAL_I2C_Mem_Read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [],
            "imported": false,
            "current_name": "read_data_from_I2C_device_08004ee8"
        },
        "FUN_080094f8": {
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "difference",
                "puVar2": "array2_ptr",
                "iVar3": "array2_size",
                "puVar4": "array1_ptr"
            },
            "code": "int compare_arrays_080094f8(int* array1, int* array2, int size)\n{\n  int index;\n  int difference = 0;\n  \n  for (index = 0; index < size; index++) {\n    difference = array1[index] - array2[index];\n    if (difference != 0) {\n      if (difference < 0) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }\n  }\n  return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094f8",
            "calling": [
                "_dtoa_r",
                "quorem"
            ],
            "imported": false,
            "current_name": "compare_arrays_080094f8"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "compare_double_08000998",
                "in_ZR": "is_equal"
            },
            "code": "bool compare_double_08000998(void)\\n{\\n  char is_equal;\\n  __aeabi_cdcmpeq();\\n  return is_equal != \"\\0\";\\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "compare_double_08000998"
        },
        "FUN_08000fc8": {
            "renaming": {
                "FUN_08000fc8": "compare_values_08000fc8",
                "param_1": "value1",
                "param_2": "value2",
                "__aeabi_cfcmpeq": "N/A"
            },
            "code": "void compare_values_08000fc8(int value1, int value2)\n{\n  if(value1 == value2)\n  {\n    // values are equal\n  }\n  return;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fc8",
            "calling": [
                "__aeabi_fcmpge",
                "__aeabi_fcmpgt"
            ],
            "imported": false,
            "current_name": "compare_values_08000fc8"
        },
        "FUN_08003908": {
            "renaming": {
                "FUN_08003908": "configureTimerOutputCompare_08003908",
                "htim": "timerHandle",
                "sConfig": "outputCompareConfig",
                "Channel": "channel",
                "HVar1": "status"
            },
            "code": "HAL_StatusTypeDef configureTimerOutputCompare_08003908(TIM_HandleTypeDef *timerHandle, TIM_OC_InitTypeDef *outputCompareConfig, uint32_t channel)\n{\n  HAL_StatusTypeDef status;\n  if (timerHandle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timerHandle->Lock = HAL_LOCKED;\n    timerHandle->State = HAL_TIM_STATE_BUSY;\n    switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(timerHandle->Instance, outputCompareConfig);\n      timerHandle->Instance->CCMR1 |= 8;\n      timerHandle->Instance->CCMR1 &= 0xfffffffb;\n      timerHandle->Instance->CCMR1 = outputCompareConfig->OCFastMode | timerHandle->Instance->CCMR1;\n      break;\n    case 4:\n      TIM_OC2_SetConfig(timerHandle->Instance, outputCompareConfig);\n      timerHandle->Instance->CCMR1 |= 0x800;\n      timerHandle->Instance->CCMR1 &= 0xfffffbff;\n      timerHandle->Instance->CCMR1 = outputCompareConfig->OCFastMode << 8 | timerHandle->Instance->CCMR1;\n      break;\n    case 8:\n      TIM_OC3_SetConfig(timerHandle->Instance, outputCompareConfig);\n      timerHandle->Instance->CCMR2 |= 8;\n      timerHandle->Instance->CCMR2 &= 0xfffffffb;\n      timerHandle->Instance->CCMR2 = outputCompareConfig->OCFastMode | timerHandle->Instance->CCMR2;\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(timerHandle->Instance, outputCompareConfig);\n      timerHandle->Instance->CCMR2 |= 0x800;\n      timerHandle->Instance->CCMR2 &= 0xfffffbff;\n      timerHandle->Instance->CCMR2 = outputCompareConfig->OCFastMode << 8 | timerHandle->Instance->CCMR2;\n    }\n    timerHandle->State = HAL_TIM_STATE_READY;\n    timerHandle->Lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "TIM_OC2_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC4_SetConfig",
                "TIM_OC3_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003908",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "configureTimerOutputCompare_08003908"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "clearStringBuffer_08004f60",
                "PTR_strbuf_08004f74": "stringBuffer",
                "0x40": "BUFFER_SIZE"
            },
            "code": "void clearStringBuffer_08004f60(void)\n{\n  memset(PTR_strbuf_08004f74, 0, BUFFER_SIZE);\n  return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "clearStringBuffer_08004f60"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "do_nothing_080056f8"
            },
            "code": "\nvoid do_nothing_080056f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056f8"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "is_valid_input_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08001170(uint input1, int input2, uint input3, int input4)\n{\n  bool is_input2_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n  bool is_input4_valid = ((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0));\n  if (is_input2_valid && is_input4_valid) {\n    return 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "is_valid_input_08001170"
        },
        "FUN_080056ec": {
            "renaming": {
                "FUN_080056ec": "do_nothing_080056ec"
            },
            "code": "\nvoid do_nothing_080056ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056ec",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056ec"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "checkI2CStatus_08002ad8",
                "*hi2c": "*i2c_handler",
                "Flag": "flag",
                "Timeout": "timeout",
                "Tickstart": "tickstart",
                "uVar1": "status",
                "cVar2": "flag_set",
                "uVar3": "status"
            },
            "code": "HAL_StatusTypeDef checkI2CStatus_08002ad8(I2C_HandleTypeDef *i2c_handler, uint32_t flag, uint32_t timeout, uint32_t tickstart) {\n  uint32_t status;\n  bool flag_set;\n  do {\n    if ((flag >> 16 & 0xff) == 1) {\n      status = flag & ~i2c_handler->Instance->SR1 & 0xffff;\n      flag_set = status != 0;\n      if (flag_set) {\n        status = 1;\n      }\n    }\n    else {\n      status = flag & ~i2c_handler->Instance->SR2 & 0xffff;\n      flag_set = status != 0;\n      if (flag_set) {\n        status = 1;\n      }\n    }\n    if (!flag_set) {\n      return HAL_OK;\n    }\n    if ((i2c_handler->Instance->SR1 & 0x400) == 0x400) {\n      i2c_handler->Instance->CR1 |= 0x200;\n      i2c_handler->Instance->SR1 = 0xfffffbff;\n      i2c_handler->ErrorCode = 4;\n      i2c_handler->PreviousState = 0;\n      i2c_handler->State = HAL_I2C_STATE_READY;\n      i2c_handler->Lock = HAL_UNLOCKED;\n      return HAL_ERROR;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (HAL_GetTick() - tickstart <= timeout))));\n  i2c_handler->PreviousState = 0;\n  i2c_handler->State = HAL_I2C_STATE_READY;\n  i2c_handler->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "I2C_RequestMemoryRead",
                "I2C_RequestMemoryWrite"
            ],
            "imported": false,
            "current_name": "checkI2CStatus_08002ad8"
        },
        "FUN_08000fd0": {
            "renaming": {
                "FUN_08000fd0": "compare_and_concatenate_floats_08000fd0",
                "param_1": "float1",
                "param_2": "float2"
            },
            "code": "undefined8 compare_and_concatenate_floats_08000fd0(float param_1, float param_2)\n{\n  __cmpsf2();\n  return CONCAT44(param_2,param_1);\n}",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fd0",
            "calling": [
                "__aeabi_fcmpeq",
                "__aeabi_fcmple",
                "__aeabi_cfrcmple",
                "__aeabi_fcmplt"
            ],
            "imported": false,
            "current_name": "compare_and_concatenate_floats_08000fd0"
        },
        "FUN_08003d60": {
            "renaming": {
                "FUN_08003d60": "configure_timer_08003d60",
                "TIMx": "timer",
                "OC_Config": "output_config",
                "uVar1": "output_mode",
                "uVar2": "output_polarity",
                "tmpccmrx": "ccmr1",
                "tmpcr2": "timer_cr2",
                "tmpccer": "timer_ccer",
                "DAT_08003e34": "TIM1"
            },
            "code": "void configure_timer_08003d60(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_config)\n{\n  uint8_t output_mode = output_config->OCMode;\n  uint32_t output_polarity = output_config->OCPolarity;\n  uint32_t timer_ccer = timer->CCER & 0xfffffffd;\n  uint32_t timer_cr2 = timer->CR2;\n  uint32_t ccmr1 = timer->CCMR1 & 0xffffff8c;\n  uint32_t ccr1 = output_config->Pulse;\n  if (timer == DAT_08003e34) {\n    output_polarity |= output_config->OCNPolarity;\n    output_polarity &= 0xfffffffb;\n    timer_ccer |= output_config->OCNPolarity;\n    timer_cr2 |= output_config->OCNIdleState | output_config->OCIdleState;\n  }\n  timer->CCER = timer_ccer;\n  timer->CR2 = timer_cr2;\n  timer->CCMR1 = output_mode | ccmr1;\n  timer->CCR1 = ccr1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d60",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08003d60"
        },
        "FUN_08009e68": {
            "renaming": {
                "FUN_08009e68": "get_evp_pkey_ctx_address_08009e68",
                "ctx": "evp_pkey_ctx"
            },
            "code": "int get_evp_pkey_ctx_address_08009e68(EVP_PKEY_CTX *evp_pkey_ctx) {\n  return (int)evp_pkey_ctx;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e68",
            "calling": [
                "frame_dummy",
                "__do_global_dtors_aux",
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "get_evp_pkey_ctx_address_08009e68"
        },
        "FUN_08001618": {
            "renaming": {
                "FUN_08001618": "set_interrupt_priority_08001618",
                "IRQn": "irq",
                "priority": "priority",
                "*(char *)(((byte)IRQn & 0xf) + DAT_08001664 + 0x14)": "uint32_t* nvic_ipr = (uint32_t*)((uint32_t)&NVIC->IPR[0] + ((uint32_t)irq >> 2));\n    *nvic_ipr &= ~(0xff << ((irq & 3) * 8));\n    *nvic_ipr |= (priority & 0xff) << ((irq & 3) * 8));",
                "*(char *)(IRQn + DAT_08001668 + 0x300)": "NVIC->IPR[(uint32_t)irq - 16]",
                "WWDG_IRQn": "WWDG_IRQn"
            },
            "code": "void set_interrupt_priority_08001618(IRQn_Type irq, uint32_t priority) {\n  if (irq < WWDG_IRQn) {\n    uint32_t* nvic_ipr = (uint32_t*)((uint32_t)&NVIC->IPR[0] + ((uint32_t)irq >> 2));\n    *nvic_ipr &= ~(0xff << ((irq & 3) * 8));\n    *nvic_ipr |= (priority & 0xff) << ((irq & 3) * 8);\n  }\n  else {\n    *(char *)(IRQn + DAT_08001668 + 0x300) = (priority & 0xff) << 4;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001618",
            "calling": [
                "HAL_NVIC_SetPriority",
                "SysTick_Config"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08001618"
        },
        "FUN_080091a4": {
            "renaming": {
                "FUN_080091a4": "countLeadingZeroBits_080091a4",
                "param_1": "num",
                "iVar1": "count"
            },
            "code": "int countLeadingZeroBits_080091a4(uint32_t num) {\n  int count = 0;\n  if ((num & 0xffff0000) == 0) {\n    num <<= 16;\n    count = 16;\n  }\n  if ((num & 0xff000000) == 0) {\n    num <<= 8;\n    count += 8;\n  }\n  if ((num & 0xf0000000) == 0) {\n    num <<= 4;\n    count += 4;\n  }\n  if ((num & 0xc0000000) == 0) {\n    num <<= 2;\n    count += 2;\n  }\n  if (num < 0) {\n    return count + 1;\n  }\n  count = 32;\n  return count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a4",
            "calling": [
                "_dtoa_r",
                "__d2b"
            ],
            "imported": false,
            "current_name": "countLeadingZeroBits_080091a4"
        },
        "FUN_08004f78": {
            "renaming": {
                "FUN_08004f78": "calculatePIDOutput_08004f78",
                "*htim": "*timer_handler",
                "len": "str_len",
                "uVar1": "error",
                "iVar2": "comparison_result",
                "uVar3": "p_term",
                "uVar4": "max_pwm",
                "uVar5": "pitch",
                "pid_pwm": "pid_output",
                "out_pwm": "output_pwm",
                "PTR_mpu6050_080051e0": "mpu6050",
                "PTR_pitch_080051e4": "pitch",
                "PTR_strbuf_080051ec": "string_buffer",
                "PTR_setpoint_080051f0": "setpoint",
                "PTR_error_080051f4": "integral_error",
                "PTR_Kp_080051f8": "Kp",
                "PTR_Ki_08005200": "Ki",
                "PTR_I_08005204": "integral_term",
                "PTR_maxPwm_08005208": "max_pwm_value",
                "PTR_minPwm_0800520c": "min_pwm_value",
                "PTR_Kd_08005210": "Kd",
                "PTR_lastError_08005214": "last_error",
                "PTR_D_08005218": "d_term",
                "HAL_GPIO_WritePin(DAT_0800521c,2,iVar2 != 0)": "HAL_GPIO_WritePin(DAT_0800521c,2,error > 0)",
                "HAL_GPIO_WritePin(DAT_0800521c,4,iVar2 == 0)": "HAL_GPIO_WritePin(DAT_0800521c,4,error <= 0)",
                "HAL_GPIO_WritePin(DAT_0800521c,8,iVar2 != 0)": "HAL_GPIO_WritePin(DAT_0800521c,8,error > 0)",
                "HAL_GPIO_WritePin(DAT_0800521c,0x10,iVar2 == 0)": "HAL_GPIO_WritePin(DAT_0800521c,0x10,error <= 0)",
                "*(uint *)(*(int *)PTR_htim1_08005220 + 0x34)": "*((uint32_t *)(timer_handler->Instance + 0x34))",
                "*(uint *)(*(int *)PTR_htim1_08005220 + 0x40)": "*((uint32_t *)(timer_handler->Instance + 0x40))"
            },
            "code": "void calculatePIDOutput_08004f78(TIM_HandleTypeDef *timer_handler) {\n  size_t str_len;\n  float PTR_pitch_080051e4, error, p_term, i_term, PTR_D_08005218, pid_output, max_pwm, min_pwm;\n  uint8_t output_pwm;\n  PTR_mpu6050_080051e0_update((Mpu6050 *)PTR_mpu6050_080051e0);\n  PTR_mpu6050_080051e0_calc_PTR_pitch_080051e4((Mpu6050 *)PTR_mpu6050_080051e0, &PTR_pitch_080051e4);\n  flush_PTR_strbuf_080051ec();\n  str_len = strlen(PTR_strbuf_080051ec);\n  uart_print(PTR_strbuf_080051ec, str_len);\n  error = PTR_setpoint_080051f0 - PTR_pitch_080051e4;\n  p_term = PTR_Kp_080051f8 * error;\n  i_term = PTR_Ki_08005200 * error + PTR_I_08005204;\n  max_pwm = (float)PTR_maxPwm_08005208;\n  min_pwm = (float)PTR_minPwm_0800520c;\n  if (i_term > max_pwm) {\n    i_term = max_pwm;\n  } else if (i_term < min_pwm) {\n    i_term = min_pwm;\n  }\n  PTR_D_08005218 = PTR_Kd_08005210 * (error - PTR_lastError_08005214);\n  pid_output = p_term + i_term + PTR_D_08005218;\n  if (pid_output > max_pwm) {\n    output_pwm = PTR_maxPwm_08005208;\n  } else if (pid_output < min_pwm) {\n    output_pwm = PTR_minPwm_0800520c;\n  } else {\n    output_pwm = (uint8_t)pid_output;\n  }\n  PTR_lastError_08005214 = error;\n  HAL_GPIO_WritePin(DAT_0800521c, 2, error > 0);\n  HAL_GPIO_WritePin(DAT_0800521c, 4, error <= 0);\n  HAL_GPIO_WritePin(DAT_0800521c, 8, error > 0);\n  HAL_GPIO_WritePin(DAT_0800521c, 0x10, error <= 0);\n  *(uint *)(*(int *)PTR_htim1_08005220 + 0x34) = (uint32_t)output_pwm;\n  *(uint *)(*(int *)PTR_htim1_08005220 + 0x40) = (uint32_t)output_pwm;\n}\n",
            "called": [
                "HAL_GPIO_WritePin",
                "sprintf",
                "__aeabi_fsub",
                "flush_strbuf",
                "mpu6050_calc_pitch",
                "__addsf3",
                "__aeabi_fcmpgt",
                "__aeabi_fmul",
                "strlen",
                "__floatunsisf",
                "__aeabi_f2d",
                "__aeabi_fcmplt",
                "mpu6050_update",
                "uart_print",
                "__floatsisf",
                "__fixunssfsi"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f78",
            "calling": [
                "HAL_SYSTICK_IRQHandler",
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "calculatePIDOutput_08004f78"
        },
        "FUN_080015a0": {
            "renaming": {
                "FUN_080015a0": "get_uwTick_value_080015a0"
            },
            "code": "uint32_t get_uwTick_value_080015a0(void)\n{\n  return *(uint32_t *)PTR_uwTick_080015b0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015a0",
            "calling": [
                "I2C_RequestMemoryRead",
                "I2C_WaitOnBTFFlagUntilTimeout",
                "HAL_I2C_Mem_Read",
                "HAL_I2C_Mem_Write",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_OscConfig",
                "_get_ms_tick",
                "HAL_UART_Transmit",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "I2C_RequestMemoryWrite",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_080015a0"
        },
        "FUN_08002d98": {
            "renaming": {
                "FUN_08002d98": "FUNC_08002d98"
            },
            "code": "\nHAL_StatusTypeDef FUNC_08002d98(RCC_OscInitTypeDef *RCC_OscInitStruct)\n\n{\n  uint32_t uVar1;\n  uint32_t uVar2;\n  HAL_StatusTypeDef HVar3;\n  bool bVar4;\n  uint32_t tmpreg;\n  uint32_t tickstart;\n  FlagStatus pwrclkchanged;\n  \n  if ((RCC_OscInitStruct->OscillatorType & 1) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 4) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0x10000)))) {\n      if (((*DAT_08002ffc & 0x20000) != 0) && (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      if (RCC_OscInitStruct->HSEState == 0x10000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else if (RCC_OscInitStruct->HSEState == 0) {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      else if (RCC_OscInitStruct->HSEState == 0x50000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x40000;\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      if (RCC_OscInitStruct->HSEState == 0) {\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08002ffc & 0x20000) != 0) {\n          uVar2 = HAL_GetTick();\n          if (100 < uVar2 - uVar1) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08002ffc & 0x20000) == 0) {\n          uVar2 = HAL_GetTick();\n          if (100 < uVar2 - uVar1) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 2) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 0) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0)))) {\n      if (((*DAT_08002ffc & 2) != 0) && (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      *DAT_08002ffc = RCC_OscInitStruct->HSICalibrationValue << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n    else if (RCC_OscInitStruct->HSIState == 0) {\n      *DAT_08003000 = 0;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08002ffc & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08003000 = 1;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08002ffc & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n      *DAT_08002ffc = RCC_OscInitStruct->HSICalibrationValue << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 8) != 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      *DAT_08003004 = 0;\n      uVar1 = HAL_GetTick();\n      while ((DAT_08003254[9] & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08003004 = 1;\n      uVar1 = HAL_GetTick();\n      while ((DAT_08002ffc[9] & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 4) != 0) {\n    bVar4 = (DAT_08003254[7] & 0x10000000) == 0;\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] | 0x10000000;\n    }\n    if ((*DAT_08003258 & 0x100) == 0) {\n      *DAT_08003258 = *DAT_08003258 | 0x100;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08003258 & 0x100) == 0) {\n        uVar2 = HAL_GetTick();\n        if (100 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (RCC_OscInitStruct->LSEState == 1) {\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else if (RCC_OscInitStruct->LSEState == 0) {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    else if (RCC_OscInitStruct->LSEState == 5) {\n      DAT_08003254[8] = DAT_08003254[8] | 4;\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    if (RCC_OscInitStruct->LSEState == 0) {\n      uVar1 = HAL_GetTick();\n      while ((DAT_08003254[8] & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      uVar1 = HAL_GetTick();\n      while ((DAT_08003254[8] & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] & 0xefffffff;\n    }\n  }\n  if ((RCC_OscInitStruct->PLL).PLLState == 0) {\nLAB_0800324a:\n    HVar3 = HAL_OK;\n  }\n  else if ((DAT_08003254[1] & 0xc) == 8) {\n    HVar3 = HAL_ERROR;\n  }\n  else if ((RCC_OscInitStruct->PLL).PLLState == 2) {\n    *DAT_0800325c = 0;\n    uVar1 = HAL_GetTick();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) {\n        if ((RCC_OscInitStruct->PLL).PLLSource == 0x10000) {\n          DAT_08003254[1] = RCC_OscInitStruct->HSEPredivValue | DAT_08003254[1] & 0xfffdffff;\n        }\n        DAT_08003254[1] =\n             (RCC_OscInitStruct->PLL).PLLMUL | (RCC_OscInitStruct->PLL).PLLSource |\n             DAT_08003254[1] & 0xffc2ffff;\n        *DAT_0800325c = 1;\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08003254 & 0x2000000) == 0) {\n          uVar2 = HAL_GetTick();\n          if (2 < uVar2 - uVar1) {\n            return HAL_TIMEOUT;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      uVar2 = HAL_GetTick();\n    } while (uVar2 - uVar1 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  else {\n    *DAT_0800325c = 0;\n    uVar1 = HAL_GetTick();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) goto LAB_0800324a;\n      uVar2 = HAL_GetTick();\n    } while (uVar2 - uVar1 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  return HVar3;\n}\n\n",
            "called": [
                "HAL_GetTick",
                "RCC_Delay"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08002d98",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_08002d98"
        },
        "FUN_0800172a": {
            "renaming": {
                "FUN_0800172a": "set_interrupt_priority_0800172a",
                "IRQn": "irq",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "priority_grouping",
                "prioritygroup": "N/A",
                "NVIC_GetPriorityGrouping": "NVIC_GetPriorityGrouping",
                "NVIC_EncodePriority": "NVIC_EncodePriority",
                "NVIC_SetPriority": "NVIC_SetPriority"
            },
            "code": "void set_interrupt_priority_0800172a(IRQn_Type irq, uint32_t preempt_priority, uint32_t sub_priority)\n{\n  uint32_t priority_grouping = NVIC_GetPriorityGrouping();\n  uint32_t priority = NVIC_EncodePriority(priority_grouping, preempt_priority, sub_priority);\n  NVIC_SetPriority(irq, priority);\n  return;\n}",
            "called": [
                "NVIC_EncodePriority",
                "NVIC_GetPriorityGrouping",
                "NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800172a",
            "calling": [
                "SystemClock_Config",
                "HAL_InitTick"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_0800172a"
        },
        "FUN_080009d4": {
            "renaming": {
                "FUN_080009d4": "isNotCYOrZR_080009d4",
                "in_CY": "is_CY",
                "in_ZR": "is_ZR"
            },
            "code": "bool isNotCYOrZR_080009d4(void)\n{\n  bool is_CY = __aeabi_cdrcmple();\n  bool is_ZR = false;\n  return !is_CY || is_ZR;\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009d4",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "isNotCYOrZR_080009d4"
        },
        "FUN_08009744": {
            "renaming": {
                "FUN_08009744": "allocate_memory_08009744",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "errno_ptr",
                "pcVar2": "sbrk_result"
            },
            "code": "void allocate_memory_08009744(int *error_code, int size) {\n  undefined *errno_ptr;\n  caddr_t sbrk_result;\n  errno_ptr = PTR_errno_08009764;\n  *(undefined4 *)PTR_errno_08009764 = 0;\n  sbrk_result = _sbrk(size);\n  if ((sbrk_result == (caddr_t)0xffffffff) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009744",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08009744"
        },
        "FUN_08003640": {
            "renaming": {
                "FUN_08003640": "initializeTimer_08003640",
                "htim": "timer",
                "HVar1": "status",
                "HAL_StatusTypeDef": "HAL_StatusTypeDef",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_TIM_STATE_RESET": "HAL_TIM_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIM_PWM_MspInit": "HAL_TIM_PWM_MspInit",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "TIM_Base_SetConfig": "TIM_Base_SetConfig",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef initializeTimer_08003640(TIM_HandleTypeDef *timer)\n{\n  HAL_StatusTypeDef status;\n  \n  if (timer == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (timer->State == HAL_TIM_STATE_RESET) {\n      timer->Lock = HAL_UNLOCKED;\n      HAL_TIM_PWM_MspInit(timer);\n    }\n    timer->State = HAL_TIM_STATE_BUSY;\n    TIM_Base_SetConfig(timer->Instance,&timer->Init);\n    timer->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "HAL_TIM_PWM_MspInit",
                "TIM_Base_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003640",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "initializeTimer_08003640"
        },
        "FUN_08009980": {
            "renaming": {
                "FUN_08009980": "allocate_matrix_08009980",
                "param_1": "num_rows",
                "param_2": "num_cols",
                "param_3": "element_size",
                "__s": "matrix",
                "__n": "size",
                "puVar1": "header_end"
            },
            "code": "undefined4 * allocate_matrix_08009980(int num_rows, int num_cols, int element_size) {\n  undefined4 *matrix;\n  size_t size = num_rows * num_cols * element_size;\n  matrix = (undefined4 *)_malloc_r(size, 4);\n  if (matrix == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  size_t header_size = (size_t)(matrix[-1] & 0xfffffffc) - 4;\n  if (header_size < 0x25) {\n    memset(matrix, 0, header_size);\n  }\n  else {\n    memset(matrix, 0, size);\n  }\n  return matrix;\n}",
            "called": [
                "memset",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009980",
            "calling": [
                "_Balloc"
            ],
            "imported": false,
            "current_name": "allocate_matrix_08009980"
        },
        "FUN_08005e9c": {
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n/* WARNING: Could not reconcile some variable overlaps */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  undefined *puVar2;\n  int **ppiVar3;\n  int *piVar4;\n  int iVar5;\n  int iVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  byte *pbVar9;\n  char cVar10;\n  byte bVar11;\n  int *piVar12;\n  int **ppiVar13;\n  undefined uVar14;\n  ushort uVar15;\n  int *__s;\n  int **ppiVar16;\n  byte **ppbVar17;\n  int *piVar18;\n  int *piVar19;\n  int **ppiVar20;\n  char *pcVar21;\n  uint uVar22;\n  byte *pbVar23;\n  int *piVar24;\n  uint uVar25;\n  uint uVar26;\n  int *piVar27;\n  int *piVar28;\n  byte *pbVar29;\n  bool bVar30;\n  longlong lVar31;\n  undefined8 uVar32;\n  undefined8 uVar33;\n  undefined4 in_stack_fffffe78;\n  int *in_stack_fffffe7c;\n  int *local_168;\n  byte *local_164;\n  int *local_15c;\n  int *local_158;\n  int **local_154;\n  int *local_150;\n  int *local_148;\n  int *local_144;\n  uint local_140;\n  int *local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  int *local_12c;\n  int *local_128;\n  undefined *local_11c;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0 [2];\n  undefined4 local_e8;\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int local_d4;\n  byte *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  ppiVar3 = (int **)_localeconv_r();\n  __s = *ppiVar3;\n  piVar4 = (int *)strlen((char *)__s);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar5 = _malloc_r(param_1,0x40);\n    *param_2 = iVar5;\n    param_2[4] = iVar5;\n    if (iVar5 == 0) {\n      *param_1 = 0xc;\n      return (byte *)0xffffffff;\n    }\n    param_2[5] = 0x40;\n  }\n  local_128 = (int *)0x0;\n  local_138 = (int *)0x0;\n  local_12c = (int *)0x0;\n  local_d4 = 0;\n  local_d0 = (byte *)0x0;\n  local_11c = (undefined *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  ppiVar3 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar3;\n  local_154 = param_4;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = local_d4 + 1;\n        local_d0 = (byte *)((int)local_d0 + (int)piVar27);\n        *ppiVar3 = param_3;\n        *(int **)((int)ppiVar3 + 4) = piVar27;\n        if (local_d4 < 8) {\n          ppiVar3 = (int **)((int)ppiVar3 + 8);\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800604a;\n          ppiVar3 = local_cc;\n        }\n        local_164 = (byte *)((int)local_164 + (int)piVar27);\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    uVar26 = 0;\n    uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    local_158 = piVar27;\n    local_168 = piVar27;\n    switch(uVar25) {\n    case 0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (uVar25 == 0) goto LAB_08006216;\n      piVar18 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int *)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (int *)0x1;\n      param_3 = (int *)&local_8c;\n      local_144 = piVar18;\n      local_8c = (char)uVar25;\n      goto LAB_08006298;\n    case 0x23:\n      uVar26 = uVar26 | 1;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x27:\n      iVar5 = _localeconv_r(param_1);\n      local_110 = *(int **)(iVar5 + 4);\n      local_104 = (int *)strlen((char *)local_110);\n      iVar5 = _localeconv_r(param_1);\n      local_108 = *(byte **)(iVar5 + 8);\n      if (local_104 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      uVar25 = (uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        uVar26 = uVar26 | 0x400;\n      }\n      goto LAB_08005f4a;\n    case 0x2a:\n      uVar25 = (uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case 0x2b:\n      local_f5 = 0x2b;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x2d:\n      uVar25 = (uint)*(byte *)piVar28;\nLAB_08006602:\n      uVar26 = uVar26 | 4;\n      goto LAB_08005f4a;\n    case 0x2e:\n      uVar25 = (uint)*(byte *)piVar28;\n      if (uVar25 == 0x2a) {\n        uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (uVar25 - 0x30 < 10) {\n        piVar27 = (int *)((uVar25 - 0x30) + (int)piVar27 * 10);\n        uVar25 = (uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case 0x30:\n      uVar26 = uVar26 | 0x80;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_08005f58_caseD_31;\n    case 0x41:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x61:\n    case 0x65:\n    case 0x66:\n    case 0x67:\n      local_154 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      local_128 = *local_154;\n      local_12c = local_154[1];\n      local_154 = local_154 + 2;\n      iVar5 = __unorddf2(local_128,(uint)local_12c & 0x7fffffff,0xffffffff,DAT_08006724);\n      if ((iVar5 == 0) &&\n         (iVar5 = __aeabi_dcmple(local_128,(uint)local_12c & 0x7fffffff,0xffffffff,DAT_08006724),\n         iVar5 == 0)) {\n        iVar5 = __aeabi_dcmplt(local_128,local_12c,0,0);\n        param_3 = (int *)PTR_DAT_08006728;\n        piVar27 = (int *)PTR_DAT_0800672c;\n        if (iVar5 == 0) {\n          piVar18 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar18 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (uVar25 < 0x48) {\n          param_3 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        local_158 = (int *)0x3;\n        local_13c = (int *)0x0;\n        local_140 = uVar26 & 0xffffff7f;\n        local_144 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      local_148 = (int *)__unorddf2(local_128,local_12c,local_128,local_12c);\n      if (local_148 != (int *)0x0) {\n        param_3 = (int *)PTR_DAT_08007898;\n        piVar27 = (int *)PTR_DAT_0800789c;\n        if ((int)local_12c < 0) {\n          piVar18 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar18 = (int *)(uint)local_f5;\n        }\n        goto LAB_08006524;\n      }\n      piVar18 = local_12c;\n      piVar24 = piVar27;\n      if (uVar25 == 0x61) {\n        uVar14 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar14,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = uVar26 | 0x102;\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          uVar26 = uVar26 | 2;\n        }\n        else {\n          param_3 = (int *)_malloc_r(param_1,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar15 = *(ushort *)(param_2 + 3) | 0x40;\n            *(ushort *)(param_2 + 3) = uVar15;\n            goto LAB_0800604e;\n          }\n          local_140 = uVar26 | 0x102;\n          uVar26 = uVar26 | 2;\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        piVar27 = piVar24;\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          piVar18 = local_12c + -0x20000000;\n          piVar24 = piVar27;\n        }\n        else {\n          local_144 = (int *)0x0;\n        }\n        if (uVar25 == 0x61) {\n          frexp((double)CONCAT44(in_stack_fffffe7c,in_stack_fffffe78),local_128);\n          uVar32 = __muldf3();\n          iVar5 = __aeabi_dcmpeq((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,0);\n          if (iVar5 != 0) {\n            local_f0[0] = (int *)0x1;\n          }\n          local_158 = (int *)PTR_s_0123456789abcdef_08007888;\n          local_138 = param_3;\n          piVar27 = piVar24;\n          goto LAB_080072ba;\n        }\n        if (uVar25 == 0x41) {\n          frexp((double)CONCAT44(in_stack_fffffe7c,in_stack_fffffe78),local_128);\n          uVar32 = __muldf3();\n          iVar5 = __aeabi_dcmpeq((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,0);\n          if (iVar5 == 0) {\n            local_158 = (int *)PTR_s_0123456789ABCDEF_0800739c;\n            local_138 = param_3;\n            piVar27 = piVar24;\n          }\n          else {\n            local_f0[0] = (int *)0x1;\n            local_158 = (int *)PTR_s_0123456789ABCDEF_08007894;\n            local_138 = param_3;\n            piVar27 = piVar24;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (uVar25 == 0x41) {\n          uVar14 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = uVar26 | 0x100;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar24 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if ((uVar25 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar24 = (int *)0x1;\n            local_148 = piVar27;\n          }\n          goto LAB_0800724a;\n        }\n        local_144 = local_148;\n        if ((int)local_12c < 0) goto LAB_08007414;\n      }\n      local_168 = (int *)(uVar25 & 0xffffffdf);\n      in_stack_fffffe7c = piVar24;\n      local_150 = piVar24;\n      if (uVar25 == 0x66) {\n        in_stack_fffffe78 = 3;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar18);\n        piVar27 = (int *)((int)param_3 + (int)piVar24);\nLAB_0800764c:\n        if ((*(byte *)param_3 == 0x30) &&\n           (iVar5 = __aeabi_dcmpeq(local_128,piVar18,0,0), iVar5 == 0)) {\n          local_f0[0] = (int *)(1 - (int)local_150);\n        }\n        piVar27 = (int *)((int)piVar27 + (int)local_f0[0]);\n      }\n      else if (uVar25 == 0x46) {\n        in_stack_fffffe78 = 3;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar18);\nLAB_08007760:\n        piVar27 = (int *)((int)param_3 + (int)local_150);\n        if (uVar25 == 0x46) goto LAB_0800764c;\n      }\n      else {\n        if (local_168 == (int *)0x45) {\n          local_150 = (int *)((int)piVar24 + 1);\n        }\n        in_stack_fffffe78 = 2;\n        in_stack_fffffe7c = local_150;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar18);\n        local_138 = local_e0;\n        if (uVar25 == 0x67) {\n          if ((uVar26 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (uVar25 == 0x47) {\n          if ((uVar26 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar27 = (int *)((int)local_150 + (int)param_3);\n      }\n      iVar5 = __aeabi_dcmpeq(local_128,piVar18,0,0);\n      local_138 = piVar27;\n      if (iVar5 == 0) {\n        for (; local_138 = local_e0, local_e0 < piVar27; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)local_138 - (int)param_3);\n      goto LAB_08006cb0;\n    case 0x43:\n    case 99:\n      piVar18 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_144 = (int *)0x0;\n      local_13c = (int *)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (int *)0x1;\n      local_8c = SUB41(piVar27,0);\n      param_3 = (int *)&local_8c;\n      goto LAB_08006298;\n    case 0x44:\n      uVar26 = uVar26 | 0x10;\n      if ((int)(uVar26 << 0x1a) < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar16 = local_154 + 1;\n      if ((int)(uVar26 << 0x1b) < 0) {\nLAB_08006bcc:\n        piVar18 = *local_154;\n        piVar24 = (int *)((int)piVar18 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      else if ((int)(uVar26 << 0x19) < 0) {\n        piVar18 = (int *)(int)*(short *)local_154;\n        piVar24 = (int *)((int)piVar18 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      else {\n        if (-1 < (int)(uVar26 << 0x16)) goto LAB_08006bcc;\n        piVar18 = (int *)(int)*(char *)local_154;\n        piVar24 = (int *)((int)piVar18 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      goto LAB_08006102;\n    case 0x4c:\n      uVar26 = uVar26 | 8;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x4f:\n      uVar26 = uVar26 | 0x10;\n    case 0x6f:\n      if ((uVar26 & 0x20) == 0) {\n        ppiVar16 = local_154 + 1;\n        if ((uVar26 & 0x10) == 0) {\n          if ((uVar26 & 0x40) == 0) {\n            if ((uVar26 & 0x200) == 0) goto LAB_08006be2;\n            piVar18 = (int *)(uint)*(byte *)local_154;\n            piVar24 = (int *)0x0;\n            local_154 = ppiVar16;\n          }\n          else {\n            piVar18 = (int *)(uint)*(ushort *)local_154;\n            piVar24 = (int *)0x0;\n            local_154 = ppiVar16;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar18 = *local_154;\n          piVar24 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n      }\n      else {\n        ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar18 = *ppiVar16;\n        piVar24 = ppiVar16[1];\n        local_154 = ppiVar16 + 2;\n      }\n      iVar5 = 0;\n      uVar26 = uVar26 & 0xfffffbff;\n      break;\n    case 0x53:\n    case 0x73:\n      local_f5 = 0;\n      local_144 = *local_154;\n      local_154 = local_154 + 1;\n      local_140 = uVar26;\n      if (local_144 == (int *)0x0) {\n        piVar18 = local_144;\n        param_3 = (int *)PTR_s__null__08007084;\n        local_148 = local_144;\n        local_13c = local_144;\n        local_134 = local_144;\n        local_130 = local_144;\n        if ((int *)0x5 < piVar27) {\n          local_158 = (int *)0x6;\n          local_168 = local_158;\n        }\n        goto LAB_08006538;\n      }\n      param_3 = local_144;\n      if (piVar27 == (int *)0xffffffff) {\n        local_158 = (int *)strlen((char *)local_144);\n      }\n      else {\n        local_148 = (int *)memchr(local_144,0,(size_t)piVar27);\n        if (local_148 == (int *)0x0) {\n          piVar18 = (int *)(uint)local_f5;\n          local_144 = local_148;\n          local_13c = local_148;\n          local_134 = local_148;\n          local_130 = local_148;\n          goto LAB_08006538;\n        }\n        local_158 = (int *)((int)local_148 - (int)local_144);\n      }\n      local_148 = (int *)0x0;\n      local_13c = (int *)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      piVar18 = (int *)(uint)local_f5;\n      local_144 = (int *)0x0;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      goto LAB_08006538;\n    case 0x55:\n      uVar26 = uVar26 | 0x10;\n      if ((int)(uVar26 << 0x1a) < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar16 = local_154 + 1;\n      if ((int)(uVar26 << 0x1b) < 0) {\nLAB_08006bf2:\n        piVar18 = *local_154;\n        piVar24 = (int *)0x0;\n        iVar5 = 1;\n        local_154 = ppiVar16;\n      }\n      else if ((int)(uVar26 << 0x19) < 0) {\n        piVar18 = (int *)(uint)*(ushort *)local_154;\n        piVar24 = (int *)0x0;\n        iVar5 = 1;\n        local_154 = ppiVar16;\n      }\n      else {\n        if (-1 < (int)(uVar26 << 0x16)) goto LAB_08006bf2;\n        piVar18 = (int *)(uint)*(byte *)local_154;\n        piVar24 = (int *)0x0;\n        iVar5 = 1;\n        local_154 = ppiVar16;\n      }\n      break;\n    case 0x58:\n      local_11c = PTR_s_0123456789ABCDEF_08006730;\n      if ((uVar26 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar16 = local_154 + 1;\n      if ((uVar26 & 0x10) == 0) {\n        if ((uVar26 & 0x40) == 0) {\n          if ((uVar26 & 0x200) == 0) goto LAB_08006bbc;\n          piVar18 = (int *)(uint)*(byte *)local_154;\n          piVar24 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n        else {\n          piVar18 = (int *)(uint)*(ushort *)local_154;\n          piVar24 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar18 = *local_154;\n        piVar24 = (int *)0x0;\n        local_154 = ppiVar16;\n      }\n      goto LAB_080061be;\n    case 100:\n    case 0x69:\n      if (-1 < (int)(uVar26 << 0x1a)) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar18 = *ppiVar16;\n      piVar24 = ppiVar16[1];\n      local_154 = ppiVar16 + 2;\nLAB_08006102:\n      if ((int)piVar24 < 0) {\n        bVar30 = piVar18 != (int *)0x0;\n        piVar18 = (int *)-(int)piVar18;\n        piVar24 = (int *)(-(int)piVar24 - (uint)bVar30);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar5 = 1;\n        iVar6 = 1;\n        local_140 = uVar26 & 0xffffff7f;\n        if (((uint)piVar18 | (uint)piVar24) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      local_140 = uVar26;\n      if (piVar24 != (int *)0x0 || (int *)0x9 < piVar18) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case 0x68:\n      uVar25 = (uint)*(byte *)piVar28;\n      if (uVar25 == 0x68) {\n        uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n        uVar26 = uVar26 | 0x200;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        uVar26 = uVar26 | 0x40;\n      }\n      goto LAB_08005f4a;\n    case 0x6a:\n    case 0x71:\n      uVar26 = uVar26 | 0x20;\n    case 0x74:\n    case 0x7a:\nswitchD_08005f58_caseD_74:\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case 0x6e:\n      ppiVar16 = local_154 + 1;\n      ppbVar17 = (byte **)*local_154;\n      local_154 = ppiVar16;\n      if ((uVar26 & 0x20) != 0) {\n        *ppbVar17 = local_164;\n        ppbVar17[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if ((uVar26 & 0x10) == 0) {\n        if ((uVar26 & 0x40) != 0) {\n          *(short *)ppbVar17 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if ((uVar26 & 0x200) != 0) {\n          *(char *)ppbVar17 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar17 = local_164;\n      goto LAB_0800620e;\n    case 0x70:\n      local_f4 = 0x7830;\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      piVar18 = *local_154;\n      uVar26 = uVar26 | 2;\n      piVar24 = (int *)0x0;\n      iVar5 = 2;\n      uVar25 = 0x78;\n      local_154 = local_154 + 1;\n      break;\n    case 0x75:\n      if (-1 < (int)(uVar26 << 0x1a)) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar18 = *ppiVar16;\n      piVar24 = ppiVar16[1];\n      iVar5 = 1;\n      local_154 = ppiVar16 + 2;\n      break;\n    case 0x78:\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      if ((uVar26 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar18 = *ppiVar16;\n      piVar24 = ppiVar16[1];\n      local_154 = ppiVar16 + 2;\nLAB_080061be:\n      if (((uVar26 & 1) != 0) && (((uint)piVar18 | (uint)piVar24) != 0)) {\n        uVar26 = uVar26 | 2;\n        local_f4 = CONCAT11((char)uVar25,0x30);\n      }\n      iVar5 = 2;\n      uVar26 = uVar26 & 0xfffffbff;\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      local_140 = uVar26;\n      if (iVar5 != 1) goto LAB_08006136;\nLAB_08006980:\n      local_140 = uVar26;\n      if (piVar24 == (int *)0x0 && piVar18 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar31 = CONCAT44(piVar24,piVar18);\n      local_138 = (int *)0x0;\n      param_3 = (int *)(&bStack_2a + 2);\n      do {\n        iVar5 = (int)((ulonglong)lVar31 >> 0x20);\n        uVar26 = (uint)lVar31;\n        cVar10 = '\\n';\n        __aeabi_uldivmod(uVar26,iVar5,10,0);\n        *(byte *)((int)param_3 + -1) = cVar10 + 0x30;\n        local_138 = (int *)((int)local_138 + 1);\n        param_3 = (int *)((int)param_3 + -1);\n        if (((((local_140 & 0x400) != 0) && (local_138 == (int *)(uint)*local_108)) &&\n            (local_138 != (int *)0xff)) && (iVar5 != 0 || 9 < uVar26)) {\n          param_3 = (int *)((int)param_3 - (int)local_104);\n          strncpy((char *)param_3,(char *)local_110,(size_t)local_104);\n          local_138 = (int *)(uint)local_108[1];\n          if (local_138 != (int *)0x0) {\n            local_108 = local_108 + 1;\n            local_138 = (int *)0x0;\n          }\n        }\n        lVar31 = __aeabi_uldivmod(uVar26,iVar5,10,0);\n      } while (lVar31 != 0);\n      local_158 = (int *)((int)(&bStack_2a + 2) - (int)param_3);\n    }\n    else {\n      local_140 = uVar26 & 0xffffff7f;\n      iVar6 = iVar5;\n      if (((uint)piVar18 | (uint)piVar24) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar5 == 0) {\n            local_158 = (int *)(uVar26 & 1);\n            if (local_158 == (int *)0x0) {\n              param_3 = (int *)(&bStack_2a + 2);\n            }\n            else {\n              param_3 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n            }\n          }\n          else {\n            param_3 = (int *)(&bStack_2a + 2);\n          }\n        }\n        else {\n          if (iVar5 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar18 + '0';\n          param_3 = (int *)(&bStack_2a + 1);\n          local_158 = (int *)0x1;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar5 = iVar6;\n        uVar26 = local_140;\n        if (iVar6 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar5 == 2) {\n          param_3 = (int *)(&bStack_2a + 2);\n          do {\n            piVar19 = (int *)((uint)piVar18 >> 4 | (int)piVar24 << 0x1c);\n            piVar24 = (int *)((uint)piVar24 >> 4);\n            param_3 = (int *)((int)param_3 + -1);\n            *(undefined *)param_3 = local_11c[(uint)piVar18 & 0xf];\n            piVar18 = piVar19;\n          } while (((uint)piVar19 | (uint)piVar24) != 0);\n        }\n        else {\n          param_3 = (int *)(&bStack_2a + 2);\n          do {\n            piVar19 = param_3;\n            piVar12 = (int *)((uint)piVar18 >> 3 | (int)piVar24 << 0x1d);\n            piVar24 = (int *)((uint)piVar24 >> 3);\n            iVar5 = ((uint)piVar18 & 7) + 0x30;\n            *(byte *)((int)piVar19 + -1) = (byte)iVar5;\n            param_3 = (int *)((int)piVar19 + -1);\n            piVar18 = piVar12;\n          } while (((uint)piVar12 | (uint)piVar24) != 0);\n          if (((local_140 & 1) != 0) && (iVar5 != 0x30)) {\n            param_3 = (int *)((int)piVar19 + -2);\n            local_158 = (int *)(&bStack_2a + (2 - (int)param_3));\n            *(byte *)((int)piVar19 + -2) = 0x30;\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (int *)(&bStack_2a + (2 - (int)param_3));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int *)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar18 = (int *)(uint)local_f5;\n    local_144 = piVar27;\n    local_168 = local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  if (local_d0 == (byte *)0x0) {\nLAB_0800604a:\n    uVar15 = *(ushort *)(param_2 + 3);\n  }\n  else {\n    __ssprint_r(param_1,param_2,&local_d8);\n    uVar15 = *(ushort *)(param_2 + 3);\n  }\nLAB_0800604e:\n  if ((uVar15 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  uVar25 = (uint)*(byte *)piVar28;\n  if (uVar25 == 0x6c) {\n    uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n    uVar26 = uVar26 | 0x20;\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    uVar26 = uVar26 | 0x10;\n  }\n  goto LAB_08005f4a;\n  while (iVar6 = __aeabi_dcmpeq(uVar7,uVar8,0,0), iVar6 == 0) {\nLAB_080072ba:\n    piVar18 = piVar27;\n    piVar19 = local_138;\n    piVar27 = (int *)((int)piVar18 + -1);\n    uVar32 = __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_080073a0);\n    iVar5 = __aeabi_d2iz();\n    uVar33 = __aeabi_i2d();\n    uVar32 = __subdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),(int)uVar33,\n                      (int)((ulonglong)uVar33 >> 0x20));\n    uVar8 = (undefined4)((ulonglong)uVar32 >> 0x20);\n    uVar7 = (undefined4)uVar32;\n    local_138 = (int *)((int)piVar19 + 1);\n    *(byte *)piVar19 = *(byte *)((int)local_158 + iVar5);\n    if (piVar27 == (int *)0xffffffff) break;\n  }\n  iVar6 = __aeabi_dcmpgt(uVar7,uVar8,0,DAT_080073a4);\n  if ((iVar6 == 0) &&\n     ((iVar6 = __aeabi_dcmpeq(uVar7,uVar8,0,DAT_080073a4), iVar6 == 0 || (-1 < iVar5 << 0x1f)))) {\n    if (-1 < (int)piVar27) {\n      piVar18 = (int *)((int)piVar18 + (int)local_138);\n      piVar27 = local_138;\n      do {\n        local_138 = (int *)((int)piVar27 + 1);\n        *(byte *)piVar27 = 0x30;\n        piVar27 = local_138;\n      } while (piVar18 != local_138);\n    }\n  }\n  else {\n    bVar1 = *(byte *)((int)local_158 + 0xf);\n    bVar11 = *(byte *)piVar19;\n    piVar27 = local_138;\n    local_e0 = piVar19;\n    while (bVar1 == bVar11) {\n      *(byte *)((int)piVar27 + -1) = 0x30;\n      bVar11 = *(byte *)((int)local_e0 + -1);\n      piVar27 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar11 == 0x39) {\n      bVar11 = *(byte *)((int)local_158 + 10);\n    }\n    else {\n      bVar11 = bVar11 + 1;\n    }\n    *(byte *)((int)piVar27 + -1) = bVar11;\n  }\n  local_138 = (int *)((int)local_138 - (int)param_3);\nLAB_08006cb0:\n  local_168 = (int *)(uVar25 & 0xffffffdf);\n  local_134 = local_f0[0];\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0[0] + 3) < 0 == SCARRY4((int)local_f0[0],3)) &&\n       ((int)local_f0[0] <= (int)piVar24)) {\n      if ((int)local_f0[0] < (int)local_138) {\n        local_158 = (int *)((int)local_138 + (int)piVar4);\n        if (0 < (int)local_f0[0]) {\n          uVar25 = 0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (int *)((int)local_158 + (1 - (int)local_f0[0]));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        uVar25 = 0x67;\n      }\n      else {\n        if ((int)(uVar26 << 0x1f) < 0) {\n          local_158 = (int *)((int)local_f0[0] + (int)piVar4);\n        }\n        else {\n          local_158 = local_f0[0];\n        }\n        if (-1 < (int)(uVar26 << 0x15)) {\n          uVar25 = 0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0[0]) {\n          uVar25 = 0x67;\n          goto LAB_080074fc;\n        }\n        uVar25 = 0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    uVar25 = uVar25 - 2;\n    local_168 = (int *)(uVar25 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8._0_1_ = (char)uVar25;\n    if (local_168 == (int *)0x41) {\n      local_e8._0_1_ = (char)local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0[0] + -1);\n    if ((int)piVar27 < 0) {\n      local_e8._1_1_ = 0x2d;\n      local_f0[0] = (int *)(1 - (int)local_f0[0]);\n    }\n    else {\n      local_e8._1_1_ = 0x2b;\n      local_f0[0] = piVar27;\n    }\n    if ((int)local_f0[0] < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar21 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e8._2_1_ = 0x30;\n        pcVar21 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar21 = (char)local_f0[0] + '0';\n      pcVar21 = pcVar21 + 1;\n    }\n    else {\n      pbVar29 = abStack_dc + 3;\n      pbVar23 = pbVar29;\n      do {\n        pbVar9 = pbVar23;\n        piVar18 = (int *)((ulonglong)DAT_08007890 * ZEXT48(local_f0[0]) >> 0x23);\n        pbVar9[-1] = (char)local_f0[0] + (char)piVar18 * -10 + 0x30;\n        pbVar23 = pbVar9 + -1;\n        local_f0[0] = piVar18;\n      } while ((int *)0x9 < piVar18);\n      uVar22 = (uint)(piVar18 + 0xc) & 0xff;\n      pbVar9[-2] = (byte)uVar22;\n      if (pbVar9 + -2 < pbVar29) {\n        pbVar9 = pbVar23;\n        pcVar21 = (char *)((int)&local_e8 + 2);\n        while( true ) {\n          *pcVar21 = (char)uVar22;\n          if (pbVar29 == pbVar9) break;\n          uVar22 = (uint)*pbVar9;\n          pbVar9 = pbVar9 + 1;\n          pcVar21 = pcVar21 + 1;\n        }\n        pcVar21 = (char *)(((int)&stack0xfffffe78 * 2 - (int)pbVar23) + 0x152);\n      }\n      else {\n        pcVar21 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar21 + -(int)&local_e8);\n    local_158 = (int *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)(uVar26 << 0x1f) < 0)) {\n      local_158 = (int *)((int)local_158 + (int)piVar4);\n    }\n    local_13c = (int *)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    local_140 = uVar26 & 0xfffffbff | 0x100;\n    local_f0[0] = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0[0] < 1) {\n      if ((piVar24 == (int *)0x0) && (-1 < (int)(uVar26 << 0x1f))) {\n        uVar25 = 0x66;\n        local_168 = (int *)0x1;\n        local_158 = (int *)0x1;\n      }\n      else {\n        uVar25 = 0x66;\n        local_158 = (int *)((byte *)((int)piVar4 + 1) + (int)piVar24);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int *)0x0;\n      local_130 = (int *)0x0;\n    }\n    else {\n      if ((piVar24 == (int *)0x0) && (-1 < (int)(uVar26 << 0x1f))) {\n        uVar25 = 0x66;\n        local_158 = local_f0[0];\n      }\n      else {\n        uVar25 = 0x66;\n        local_158 = (int *)((byte *)((int)local_f0[0] + (int)piVar4) + (int)piVar24);\n      }\nLAB_080074f8:\n      if (-1 < (int)(uVar26 << 0x15)) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int *)0x0;\n      local_130 = (int *)0x0;\n      uVar26 = (uint)*local_108;\n      while (uVar26 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar26) goto LAB_08007524;\n          uVar22 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar26);\n          if (uVar22 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar26 = uVar22;\n          if (uVar22 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int *)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (int *)((int)local_104 * (int)((int)local_130 + (int)local_13c) + (int)local_158);\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar18 = (int *)(uint)local_f5;\nLAB_08006538:\n    uVar26 = local_140;\n    if (piVar18 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar18 = (int *)0x2d;\n    local_144 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n    uVar26 = local_140;\n  }\nLAB_08006298:\n  if ((uVar26 & 2) != 0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  if (((uVar26 & 0x84) == 0) &&\n     (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27)) {\n    if (0x10 < (int)piVar27) {\n      do {\n        piVar18 = piVar27;\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + 0x10;\n        *ppiVar3 = (int *)PTR_blanks_7315_08006438;\n        ppiVar3[1] = (int *)0x10;\n        if (local_d4 < 8) {\n          ppiVar3 = ppiVar3 + 2;\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n        }\n        piVar27 = piVar18 + -4;\n      } while (0x10 < (int)piVar27);\n      piVar27 = piVar18 + -4;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar3 = (int *)PTR_blanks_7315_08006438;\n    ppiVar3[1] = piVar27;\n    if (local_d4 < 8) {\n      piVar18 = (int *)(uint)local_f5;\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n      piVar18 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar18 != (int *)0x0) {\n    local_d0 = local_d0 + 1;\n    local_d4 = local_d4 + 1;\n    *ppiVar3 = (int *)&local_f5;\n    ppiVar3[1] = (int *)0x1;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  if ((uVar26 & 2) != 0) {\n    local_d0 = local_d0 + 2;\n    local_d4 = local_d4 + 1;\n    *ppiVar3 = (int *)&local_f4;\n    ppiVar3[1] = (int *)0x2;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  puVar2 = PTR_zeroes_7316_08006a54;\n  if (((uVar26 & 0x84) == 0x80) &&\n     (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27)) {\n    if (0x10 < (int)piVar27) {\n      do {\n        while( true ) {\n          piVar18 = piVar27;\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + 0x10;\n          *ppiVar3 = (int *)puVar2;\n          ppiVar3[1] = (int *)0x10;\n          if (local_d4 < 8) break;\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n          piVar27 = piVar18 + -4;\n          if ((int)(piVar18 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar3 = ppiVar3 + 2;\n        piVar27 = piVar18 + -4;\n      } while (0x10 < (int)(piVar18 + -4));\nLAB_08006882:\n      piVar27 = piVar18 + -4;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar3 = (int *)puVar2;\n    ppiVar3[1] = piVar27;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  puVar2 = PTR_zeroes_7316_0800643c;\n  local_144 = (int *)((int)local_144 - (int)local_158);\n  if (0 < (int)local_144) {\n    piVar27 = (int *)PTR_zeroes_7316_08007088;\n    if (0x10 < (int)local_144) {\n      do {\n        while( true ) {\n          piVar27 = local_144;\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + 0x10;\n          *ppiVar3 = (int *)puVar2;\n          ppiVar3[1] = (int *)0x10;\n          if (local_d4 < 8) break;\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n          local_144 = piVar27 + -4;\n          if ((int)(piVar27 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar3 = ppiVar3 + 2;\n        local_144 = piVar27 + -4;\n      } while (0x10 < (int)(piVar27 + -4));\nLAB_080063d2:\n      local_144 = piVar27 + -4;\n      piVar27 = (int *)puVar2;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)local_144;\n    *ppiVar3 = piVar27;\n    ppiVar3[1] = local_144;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  pbVar23 = local_d0;\n  if ((uVar26 & 0x100) == 0) {\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)local_158;\n    *ppiVar3 = param_3;\n    ppiVar3[1] = local_158;\n    if (local_d4 < 8) {\nLAB_0800640e:\n      ppiVar3 = ppiVar3 + 2;\n      pbVar23 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n      pbVar23 = local_d0;\n    }\n  }\n  else if ((int)uVar25 < 0x66) {\n    local_158 = (int *)(local_d0 + 1);\n    iVar5 = local_d4 + 1;\n    ppiVar16 = ppiVar3 + 2;\n    local_d0 = (byte *)local_158;\n    if (((int)local_138 < 2) && ((uVar26 & 1) == 0)) {\n      *ppiVar3 = param_3;\n      ppiVar3[1] = (int *)0x1;\n      if (iVar5 < 8) {\n        local_150 = (int *)(local_d4 + 2);\n        ppiVar3 = ppiVar3 + 4;\n      }\n      else {\n        local_d4 = iVar5;\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        local_150 = (int *)(local_d4 + 1);\n        ppiVar16 = local_cc;\n        local_158 = (int *)local_d0;\n        ppiVar3 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar3 = param_3;\n      ppiVar3[1] = (int *)0x1;\n      local_d4 = iVar5;\n      if (7 < iVar5) {\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        ppiVar16 = local_cc;\n        local_158 = (int *)local_d0;\n      }\n      local_d4 = local_d4 + 1;\n      local_d0 = (byte *)((int)local_158 + (int)piVar4);\n      *ppiVar16 = __s;\n      ppiVar16[1] = piVar4;\n      if (local_d4 < 8) {\n        ppiVar20 = ppiVar16 + 2;\n      }\n      else {\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        ppiVar20 = local_cc;\n      }\n      local_158 = (int *)local_d0;\n      iVar5 = local_d4;\n      local_150 = (int *)(local_d4 + 1);\n      piVar27 = (int *)((int)local_138 + -1);\n      ppiVar13 = ppiVar20 + 2;\n      iVar6 = __aeabi_dcmpeq(local_128,local_12c,0,0);\n      puVar2 = PTR_zeroes_7316_08006d94;\n      local_d4 = (int)local_150;\n      if (iVar6 == 0) {\n        local_158 = (int *)((int)local_158 + (int)piVar27);\n        *ppiVar20 = (int *)((int)param_3 + 1);\n        ppiVar20[1] = piVar27;\n        local_d0 = (byte *)local_158;\n        if ((int)local_150 < 8) {\n          local_150 = (int *)(iVar5 + 2);\n          ppiVar16 = ppiVar13;\n          ppiVar3 = ppiVar20 + 4;\n        }\n        else {\nLAB_08006d9c:\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          local_150 = (int *)(local_d4 + 1);\n          local_158 = (int *)local_d0;\n          ppiVar16 = local_cc;\n          ppiVar3 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar16 = ppiVar20;\n        ppiVar3 = ppiVar13;\n        if (0 < (int)piVar27) {\n          piVar18 = (int *)PTR_zeroes_7316_0800788c;\n          if (0x10 < (int)piVar27) {\n            while( true ) {\n              local_d0 = (byte *)((int)local_158 + 0x10);\n              *ppiVar20 = (int *)puVar2;\n              ppiVar20[1] = (int *)0x10;\n              if (local_d4 < 8) {\n                ppiVar20 = ppiVar20 + 2;\n              }\n              else {\n                iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar5 != 0) goto LAB_0800603e;\n                ppiVar20 = local_cc;\n              }\n              piVar27 = piVar27 + -4;\n              local_158 = (int *)local_d0;\n              if ((int)piVar27 < 0x11) break;\n              local_d4 = local_d4 + 1;\n            }\n            local_150 = (int *)(local_d4 + 1);\n            ppiVar13 = ppiVar20 + 2;\n            piVar18 = (int *)puVar2;\n          }\n          *ppiVar20 = piVar18;\n          ppiVar20[1] = piVar27;\n          local_158 = (int *)((int)local_158 + (int)piVar27);\n          local_d4 = (int)local_150;\n          local_d0 = (byte *)local_158;\n          if (7 < (int)local_150) goto LAB_08006d9c;\n          local_150 = (int *)((int)local_150 + 1);\n          ppiVar3 = ppiVar13 + 2;\n          ppiVar16 = ppiVar13;\n        }\n      }\n    }\n    ppiVar16[1] = local_10c;\n    local_d0 = (byte *)((int)local_158 + (int)local_10c);\n    local_d4 = (int)local_150;\n    *ppiVar16 = &local_e8;\n    pbVar23 = local_d0;\n    if (7 < (int)local_150) {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n      pbVar23 = local_d0;\n    }\n  }\n  else {\n    iVar5 = __aeabi_dcmpeq(local_128,local_12c,0,0);\n    if (iVar5 == 0) {\n      if ((int)local_f0[0] < 1) {\n        local_d4 = local_d4 + 1;\n        local_d0 = pbVar23 + 1;\n        *ppiVar3 = (int *)PTR_DAT_08006d98;\n        ppiVar3[1] = (int *)0x1;\n        if (local_d4 < 8) {\n          ppiVar3 = ppiVar3 + 2;\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n        }\n        if (((local_f0[0] != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (pbVar23 = local_d0, (uVar26 & 1) != 0)) {\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + (int)piVar4;\n          *ppiVar3 = __s;\n          ppiVar3[1] = piVar4;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n          }\n          puVar2 = PTR_zeroes_7316_0800788c;\n          if ((int)local_f0[0] < 0) {\n            piVar27 = (int *)-(int)local_f0[0];\n            if ((int)(local_f0[0] + 4) < 0 != SCARRY4((int)local_f0[0],0x10)) {\n              do {\n                local_d4 = local_d4 + 1;\n                local_d0 = local_d0 + 0x10;\n                *ppiVar3 = (int *)puVar2;\n                ppiVar3[1] = (int *)0x10;\n                if (local_d4 < 8) {\n                  ppiVar3 = ppiVar3 + 2;\n                }\n                else {\n                  iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                  if (iVar5 != 0) goto LAB_0800603e;\n                  ppiVar3 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = local_d4 + 1;\n            local_d0 = local_d0 + (int)piVar27;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = piVar27;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n          }\n          local_d0 = local_d0 + (int)local_138;\n          *ppiVar3 = param_3;\n          ppiVar3[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar27 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar27 = local_138;\n        }\n        if (0 < (int)piVar27) {\n          local_d0 = pbVar23 + (int)piVar27;\n          local_d4 = local_d4 + 1;\n          *ppiVar3 = param_3;\n          ppiVar3[1] = piVar27;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        puVar2 = PTR_zeroes_7316_08006d94;\n        piVar18 = local_134;\n        if (-1 < (int)piVar27) {\n          piVar18 = (int *)((int)local_134 - (int)piVar27);\n        }\n        piVar27 = (int *)PTR_zeroes_7316_0800788c;\n        if (0 < (int)piVar18) {\n          for (; 0x10 < (int)piVar18; piVar18 = piVar18 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            pbVar23 = local_d0;\n            piVar27 = (int *)puVar2;\n          }\n          local_d4 = local_d4 + 1;\n          pbVar23 = pbVar23 + (int)piVar18;\n          *ppiVar3 = piVar27;\n          ppiVar3[1] = piVar18;\n          local_d0 = pbVar23;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        puVar2 = PTR_zeroes_7316_08007398;\n        local_134 = (int *)((int)local_134 + (int)param_3);\n        if ((uVar26 & 0x400) != 0) {\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int *)0x0) goto LAB_0800717e;\n          local_108 = local_108 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + (int)local_104;\n            *ppiVar3 = local_110;\n            ppiVar3[1] = local_104;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            piVar18 = (int *)(uint)*local_108;\n            piVar27 = (int *)((byte *)((int)param_3 + (int)local_138) + -(int)local_134);\n            if ((int)piVar18 <= (int)((byte *)((int)param_3 + (int)local_138) + -(int)local_134)) {\n              piVar27 = piVar18;\n            }\n            if (0 < (int)piVar27) {\n              local_d0 = local_d0 + (int)piVar27;\n              local_d4 = local_d4 + 1;\n              *ppiVar3 = local_134;\n              ppiVar3[1] = piVar27;\n              if (local_d4 < 8) {\n                piVar18 = (int *)(uint)*local_108;\n                ppiVar3 = ppiVar3 + 2;\n              }\n              else {\n                iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar5 != 0) goto LAB_0800603e;\n                ppiVar3 = local_cc;\n                piVar18 = (int *)(uint)*local_108;\n              }\n            }\n            piVar24 = piVar18;\n            if (-1 < (int)piVar27) {\n              piVar24 = (int *)((int)piVar18 - (int)piVar27);\n            }\n            if (0 < (int)piVar24) {\n              for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n                while( true ) {\n                  local_d4 = local_d4 + 1;\n                  local_d0 = local_d0 + 0x10;\n                  *ppiVar3 = (int *)puVar2;\n                  ppiVar3[1] = (int *)0x10;\n                  if (local_d4 < 8) break;\n                  iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                  if (iVar5 != 0) goto LAB_0800603e;\n                  piVar24 = piVar24 + -4;\n                  ppiVar3 = local_cc;\n                  if ((int)piVar24 < 0x11) goto LAB_08007156;\n                }\n                ppiVar3 = ppiVar3 + 2;\n              }\nLAB_08007156:\n              local_d4 = local_d4 + 1;\n              local_d0 = local_d0 + (int)piVar24;\n              *ppiVar3 = (int *)puVar2;\n              ppiVar3[1] = piVar24;\n              if (local_d4 < 8) {\n                piVar18 = (int *)(uint)*local_108;\n                ppiVar3 = ppiVar3 + 2;\n              }\n              else {\n                iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar5 != 0) goto LAB_0800603e;\n                piVar18 = (int *)(uint)*local_108;\n                ppiVar3 = local_cc;\n              }\n            }\n            local_134 = (int *)((int)local_134 + (int)piVar18);\n            pbVar23 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int *)0x0) {\n              if ((int *)((int)param_3 + (int)local_138) <= local_134) {\n                local_134 = (int *)((int)param_3 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int *)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0[0] < (int)local_138) || ((uVar26 & 1) != 0)) {\n          local_d4 = local_d4 + 1;\n          local_d0 = pbVar23 + (int)piVar4;\n          *ppiVar3 = __s;\n          ppiVar3[1] = piVar4;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        piVar27 = (int *)((int)local_138 - (int)local_f0[0]);\n        piVar18 = (int *)((byte *)((int)param_3 + (int)local_138) + -(int)local_134);\n        if ((int)piVar27 <= (int)((byte *)((int)param_3 + (int)local_138) + -(int)local_134)) {\n          piVar18 = piVar27;\n        }\n        if (0 < (int)piVar18) {\n          local_d0 = pbVar23 + (int)piVar18;\n          local_d4 = local_d4 + 1;\n          *ppiVar3 = local_134;\n          ppiVar3[1] = piVar18;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            piVar27 = (int *)((int)local_138 - (int)local_f0[0]);\n            pbVar23 = local_d0;\n          }\n        }\n        puVar2 = PTR_zeroes_7316_08007088;\n        if (-1 < (int)piVar18) {\n          piVar27 = (int *)((int)piVar27 - (int)piVar18);\n        }\n        piVar18 = (int *)PTR_zeroes_7316_0800788c;\n        if (0 < (int)piVar27) {\n          for (; 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            pbVar23 = local_d0;\n            piVar18 = (int *)puVar2;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = local_d4 + 1;\n      local_d0 = pbVar23 + 1;\n      *ppiVar3 = (int *)PTR_DAT_08006a50;\n      ppiVar3[1] = (int *)0x1;\n      if (local_d4 < 8) {\n        ppiVar3 = ppiVar3 + 2;\n      }\n      else {\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        ppiVar3 = local_cc;\n      }\n      if (((int)local_f0[0] < (int)local_138) || (pbVar23 = local_d0, (uVar26 & 1) != 0)) {\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + (int)piVar4;\n        *ppiVar3 = __s;\n        ppiVar3[1] = piVar4;\n        if (local_d4 < 8) {\n          ppiVar3 = ppiVar3 + 2;\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n        }\n        puVar2 = PTR_zeroes_7316_08006a54;\n        piVar27 = (int *)((int)local_138 + -1);\n        pbVar23 = local_d0;\n        piVar18 = (int *)PTR_zeroes_7316_0800788c;\n        if (0 < (int)piVar27) {\n          for (; 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            piVar18 = (int *)puVar2;\n            pbVar23 = local_d0;\n          }\nLAB_08007014:\n          local_d0 = pbVar23 + (int)piVar27;\n          *ppiVar3 = piVar18;\n          ppiVar3[1] = piVar27;\njoined_r0x08006a1c:\n          local_d4 = local_d4 + 1;\n          if (7 < local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  if (((uVar26 & 4) != 0) && (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27))\n  {\n    for (; local_d0 = pbVar23, 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n      while( true ) {\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + 0x10;\n        *ppiVar3 = (int *)PTR_blanks_7315_08006720;\n        ppiVar3[1] = (int *)0x10;\n        if (local_d4 < 8) break;\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        piVar27 = piVar27 + -4;\n        ppiVar3 = local_cc;\n        if ((int)piVar27 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar3 = ppiVar3 + 2;\n      pbVar23 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar3 = (int *)PTR_blanks_7315_08006720;\n    ppiVar3[1] = piVar27;\n    pbVar23 = local_d0;\n    if ((7 < local_d4) &&\n       (iVar5 = __ssprint_r(param_1,param_2,&local_d8), pbVar23 = local_d0, iVar5 != 0))\n    goto LAB_0800603e;\n  }\n  if ((int)local_15c < (int)local_168) {\n    local_15c = local_168;\n  }\n  local_164 = local_164 + (int)local_15c;\n  if ((pbVar23 == (byte *)0x0) || (iVar5 = __ssprint_r(param_1,param_2,&local_d8), iVar5 == 0)) {\n    local_d4 = 0;\n    if (local_148 != (int *)0x0) {\n      _free_r(param_1,local_148);\n    }\n    ppiVar3 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    _free_r(param_1,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  uVar22 = uVar25 - 0x30;\n  piVar18 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar18 + 1);\n    uVar25 = (uint)*(byte *)piVar18;\n    local_15c = (int *)(uVar22 + (int)local_15c * 10);\n    uVar22 = uVar25 - 0x30;\n    piVar18 = piVar28;\n  } while (uVar22 < 10);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  uVar25 = (uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "called": [
                "__muldf3",
                "_localeconv_r",
                "frexp",
                "__aeabi_i2d",
                "__aeabi_dcmpeq",
                "__aeabi_dcmplt",
                "__ssprint_r",
                "_malloc_r",
                "__subdf3",
                "__unorddf2",
                "__aeabi_uldivmod",
                "_dtoa_r",
                "__aeabi_dcmple",
                "_free_r",
                "strlen",
                "__aeabi_d2iz",
                "memchr",
                "strncpy",
                "__aeabi_dcmpgt"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005e9c",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUNC_08005e9c"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concatenate_08000134",
                "param_1": "first_value",
                "param_2": "second_value",
                "DAT_08000144": "global_variable",
                "PTR__init_0800014c": "init_pointer",
                "PTR_object_8660_08000148": "object_pointer"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t concatenate_08000134(uint64_t *first_value, uint64_t *second_value)\n{\n  if (DAT_08000144 != 0) {\n    first_value = PTR__init_0800014c;\n    second_value = PTR_object_8660_08000148;\n  }\n  return ((uint64_t)*second_value << 32) | (uint64_t)*first_value;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "__libc_fini_array",
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "concatenate_08000134"
        },
        "FUN_08005704": {
            "renaming": {
                "FUN_08005704": "update_systick_08005704",
                "HAL_IncTick": "HAL_IncrementTick",
                "HAL_SYSTICK_IRQHandler": "HAL_HandleSysTickInterrupt"
            },
            "code": "void update_systick_08005704(void)\n{\n  HAL_IncrementTick();\n  HAL_HandleSysTickInterrupt();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_IRQHandler",
                "HAL_IncTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005704",
            "calling": [],
            "imported": false,
            "current_name": "update_systick_08005704"
        },
        "FUN_08002ca8": {
            "renaming": {
                "FUN_08002ca8": "wait_for_i2c_to_be_ready_08002ca8",
                "hi2c": "i2c_handler",
                "Timeout": "timeout",
                "Tickstart": "start_tick",
                "uVar1": "current_tick"
            },
            "code": "HAL_StatusTypeDef wait_for_i2c_to_be_ready_08002ca8(I2C_HandleTypeDef *i2c_handler, uint32_t timeout, uint32_t start_tick)\n{\n  uint32_t current_tick;\n  while (true) {\n    if ((i2c_handler->Instance->SR1 & I2C_SR1_BTF) == I2C_SR1_BTF) {\n      return HAL_OK;\n    }\n    if ((i2c_handler->Instance->SR1 & I2C_SR1_AF) == I2C_SR1_AF) {\n      break;\n    }\n    if ((timeout == 0) || (current_tick = HAL_GetTick(), timeout < current_tick - start_tick)) {\n      i2c_handler->ErrorCode |= I2C_ERROR_TIMEOUT;\n      i2c_handler->State = HAL_I2C_STATE_READY;\n      i2c_handler->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  i2c_handler->Instance->SR1 = I2C_SR1_AF;\n  i2c_handler->ErrorCode = I2C_ERROR_NONE;\n  i2c_handler->PreviousState = I2C_STATE_READY;\n  i2c_handler->State = HAL_I2C_STATE_READY;\n  i2c_handler->Lock = HAL_UNLOCKED;\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca8",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "wait_for_i2c_to_be_ready_08002ca8"
        },
        "FUN_08003a94": {
            "renaming": {
                "FUN_08003a94": "configureTimer_08003a94",
                "htim": "timerHandle",
                "sClockSourceConfig": "clockConfig",
                "HVar1": "status",
                "uVar2": "clockSource",
                "tmpsmcr": "tmpsmcr"
            },
            "code": "HAL_StatusTypeDef configureTimer_08003a94(TIM_HandleTypeDef *timerHandle, TIM_ClockConfigTypeDef *clockConfig)\n{\n  HAL_StatusTypeDef status;\n  uint clockSource = clockConfig->ClockSource;\n  uint32_t tmpsmcr;\n  if (timerHandle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timerHandle->Lock = HAL_LOCKED;\n    timerHandle->State = HAL_TIM_STATE_BUSY;\n    timerHandle->Instance->SMCR &= 0xffff0088;\n    switch (clockSource) {\n      case 0x40:\n        TIM_TI1_ConfigInputStage(timerHandle->Instance,clockConfig->ClockPolarity,clockConfig->ClockFilter);\n        TIM_ITRx_SetConfig(timerHandle->Instance,0x40);\n        break;\n      case 0x10:\n        TIM_ITRx_SetConfig(timerHandle->Instance,0x10);\n        break;\n      case 0:\n        TIM_ITRx_SetConfig(timerHandle->Instance,0);\n        break;\n      case 0x20:\n        TIM_ITRx_SetConfig(timerHandle->Instance,0x20);\n        break;\n      case 0x30:\n        TIM_ITRx_SetConfig(timerHandle->Instance,0x30);\n        break;\n      case 0x70:\n        TIM_ETR_SetConfig(timerHandle->Instance,clockConfig->ClockPrescaler,clockConfig->ClockPolarity,clockConfig->ClockFilter);\n        timerHandle->Instance->SMCR &= 0xffffff88 | 0x77;\n        break;\n      case 0x50:\n        TIM_TI1_ConfigInputStage(timerHandle->Instance,clockConfig->ClockPolarity,clockConfig->ClockFilter);\n        TIM_ITRx_SetConfig(timerHandle->Instance,0x50);\n        break;\n      case 0x60:\n        TIM_TI2_ConfigInputStage(timerHandle->Instance,clockConfig->ClockPolarity,clockConfig->ClockFilter);\n        TIM_ITRx_SetConfig(timerHandle->Instance,0x60);\n        break;\n      case 0x1000:\n        timerHandle->Instance->SMCR &= 0xfffffff8;\n        break;\n      case 0x2000:\n        TIM_ETR_SetConfig(timerHandle->Instance,clockConfig->ClockPrescaler,clockConfig->ClockPolarity,clockConfig->ClockFilter);\n        timerHandle->Instance->SMCR |= 0x4000;\n        break;\n      default:\n        break;\n    }\n    timerHandle->State = HAL_TIM_STATE_READY;\n    timerHandle->Lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "TIM_TI1_ConfigInputStage",
                "TIM_ETR_SetConfig",
                "TIM_ITRx_SetConfig",
                "TIM_TI2_ConfigInputStage"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a94",
            "calling": [
                "MX_TIM1_Init",
                "MX_TIM2_Init"
            ],
            "imported": false,
            "current_name": "configureTimer_08003a94"
        },
        "FUN_0800416a": {
            "renaming": {
                "FUN_0800416a": "set_input_trigger_0800416a",
                "TIMx": "timer",
                "InputTriggerSource": "trigger_source",
                "tmpsmcr": "smcr_value"
            },
            "code": "void set_input_trigger_0800416a(TIM_TypeDef *timer, uint16_t trigger_source)\n{\n  uint32_t smcr_value = timer->SMCR;\n  smcr_value &= 0xffffff8f;\n  smcr_value |= (uint32_t)(trigger_source | 7);\n  timer->SMCR = smcr_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800416a",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "set_input_trigger_0800416a"
        },
        "FUN_080059f0": {
            "renaming": {
                "FUN_080059f0": "FUNC_080059f0"
            },
            "code": "\ndouble FUNC_080059f0(double __x)\n\n{\n  int in_r0;\n  undefined4 uVar1;\n  undefined4 uVar2;\n  uint in_r1;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 extraout_r1;\n  undefined4 in_r3;\n  undefined4 unaff_r4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  int iVar8;\n  double in_d0;\n  double dVar9;\n  double extraout_d0;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  \n  uVar10 = CONCAT44(in_r1,in_r0);\n  uVar7 = in_r1 & 0x7fffffff;\n  if (DAT_08005cd8 < (int)uVar7) {\n    if ((uVar7 == DAT_08005cdc || (int)uVar7 < (int)DAT_08005cdc) &&\n       ((uVar7 != DAT_08005cdc || (in_r0 == 0)))) {\n      return in_d0;\n    }\n    dVar9 = (double)__aeabi_dadd();\n  }\n  else {\n    if (DAT_08005cec < (int)uVar7) {\n      fabs((double)CONCAT44(unaff_r4,in_r3));\n      if (DAT_08005cfc < (int)uVar7) {\n        if (DAT_08005d00 < (int)uVar7) {\n          uVar10 = __divdf3(0,DAT_08005d08,in_r0,extraout_r1);\n          iVar8 = 3;\n        }\n        else {\n          uVar10 = __subdf3();\n          uVar11 = __muldf3(in_r0,extraout_r1,0,DAT_08005d04);\n          uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005cf8);\n          uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                            (int)((ulonglong)uVar11 >> 0x20));\n          iVar8 = 2;\n        }\n      }\n      else if (DAT_08005cfc + -0xd0000 < (int)uVar7) {\n        uVar10 = __subdf3();\n        uVar11 = __aeabi_dadd(in_r0,extraout_r1,0,DAT_08005cf8);\n        uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n        iVar8 = 1;\n      }\n      else {\n        uVar10 = __aeabi_dadd();\n        uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n        uVar11 = __aeabi_dadd(in_r0,extraout_r1,0,0x40000000);\n        uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n        iVar8 = 0;\n      }\n    }\n    else {\n      if ((int)uVar7 <= DAT_08005cec + -0x1bc0000) {\n        uVar11 = __aeabi_dadd(in_r0,in_r1,DAT_08005cd0,DAT_08005cd4);\n        iVar8 = __aeabi_dcmpgt((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005cf8);\n        if (iVar8 != 0) {\n          return extraout_d0;\n        }\n      }\n      iVar8 = -1;\n    }\n    uVar6 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar5 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar5,uVar6,uVar5,uVar6);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar1 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar1,uVar3,uVar1,uVar3);\n    uVar4 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar2,uVar4,DAT_08005c78,DAT_08005c7c);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c80,DAT_08005c84);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c88,DAT_08005c8c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c90,DAT_08005c94);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c98,DAT_08005c9c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005ca0,DAT_08005ca4);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar1,uVar3);\n    uVar11 = __muldf3(uVar2,uVar4,DAT_08005ca8,DAT_08005cac);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cb0,DAT_08005cb4);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cb8,DAT_08005cbc);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cc0,DAT_08005cc4);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cc8,DAT_08005ccc);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar5,uVar6);\n    uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    if (iVar8 == -1) {\n      dVar9 = (double)__subdf3(uVar5,uVar6,(int)uVar10,uVar1);\n      return dVar9;\n    }\n    uVar10 = __subdf3((int)uVar10,uVar1,*(undefined4 *)(PTR_FUNC_080059f0lo_08005cf0 + iVar8 * 8),\n                      *(undefined4 *)((int)(PTR_FUNC_080059f0lo_08005cf0 + iVar8 * 8) + 4));\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar5,uVar6);\n    dVar9 = (double)__subdf3(*(undefined4 *)(PTR_FUNC_080059f0hi_08005cf4 + iVar8 * 8),\n                             *(undefined4 *)((int)(PTR_FUNC_080059f0hi_08005cf4 + iVar8 * 8) + 4),(int)uVar10\n                             ,(int)((ulonglong)uVar10 >> 0x20));\n    if ((int)in_r1 < 0) {\n      return dVar9;\n    }\n  }\n  return dVar9;\n}\n\n",
            "called": [
                "__muldf3",
                "__subdf3",
                "__divdf3",
                "__aeabi_dadd",
                "fabs",
                "__aeabi_dcmpgt"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080059f0",
            "calling": [
                "__ieee754_atan2"
            ],
            "imported": false,
            "current_name": "FUNC_080059f0"
        },
        "FUN_08001ccc": {
            "renaming": {
                "FUN_08001ccc": "write_data_to_memory_08001ccc",
                "hi2c": "i2c_handler",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "Tickstart": "tick_start",
                "DAT_08001f64": "status",
                "uVar1": "sr_register_value",
                "uVar3": "timeout_duration",
                "cVar4": "is_data_transfer_complete",
                "iVar6": "status",
                "pbVar7": "data_pointer",
                "bVar8": "is_data_transfer_complete",
                "tickstart": "tick_start",
                "HVar2": "hal_status"
            },
            "code": "HAL_StatusTypeDef write_data_to_memory_08001ccc(I2C_HandleTypeDef *i2c_handler, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n  uint32_t tick_start = HAL_GetTick();\n  uint32_t timeout_duration;\n  uint32_t sr_register_value;\n  uint8_t *data_pointer;\n  bool is_data_transfer_complete;\n  int DAT_08001f64 = 0;\n  HAL_StatusTypeDef hal_DAT_08001f64;\n  if (i2c_handler->State == HAL_I2C_STATE_READY) {\n    do {\n      timeout_duration = HAL_GetTick() - tick_start;\n      sr_register_value = i2c_handler->Instance->SR1;\n      if ((sr_register_value >> 0x10 & 0xff) == 1) {\n        is_data_transfer_complete = ((sr_register_value & ~i2c_handler->Instance->SR1 & 0xffff) == 0);\n      }\n      else {\n        is_data_transfer_complete = ((sr_register_value & ~i2c_handler->Instance->SR2 & 0xffff) == 0);\n      }\n      if (is_data_transfer_complete) {\n        DAT_08001f64 = 1;\n      }\n    } while (!DAT_08001f64 && timeout_duration < timeout);\n    if (DAT_08001f64 == 0) {\n      i2c_handler->PreviousState = 0;\n      i2c_handler->State = HAL_I2C_STATE_READY;\n      i2c_handler->Mode = HAL_I2C_MODE_NONE;\n      i2c_handler->Lock = HAL_UNLOCKED;\n      hal_DAT_08001f64 = HAL_TIMEOUT;\n    }\n    else {\n      i2c_handler->Lock = HAL_LOCKED;\n      if ((i2c_handler->Instance->CR1 & 1) != 1) {\n        i2c_handler->Instance->CR1 |= 1;\n      }\n      i2c_handler->Instance->CR1 &= 0xfffff7ff;\n      i2c_handler->State = HAL_I2C_STATE_BUSY_TX;\n      i2c_handler->Mode = HAL_I2C_MODE_MEM;\n      i2c_handler->ErrorCode = 0;\n      i2c_handler->pBuffPtr = data;\n      i2c_handler->XferCount = size;\n      i2c_handler->XferOptions = 0x40030000;\n      i2c_handler->XferSize = i2c_handler->XferCount;\n      hal_DAT_08001f64 = I2C_RequestMemoryWrite(i2c_handler, device_address, memory_address, memory_address_size, timeout, tick_start);\n      if (hal_DAT_08001f64 == HAL_OK) {\n        while (i2c_handler->XferSize != 0) {\n          hal_DAT_08001f64 = I2C_WaitOnTXEFlagUntilTimeout(i2c_handler, timeout, tick_start);\n          if (hal_DAT_08001f64 != HAL_OK) {\n            if (i2c_handler->ErrorCode == 4) {\n              i2c_handler->Instance->CR1 |= 0x200;\n              return HAL_ERROR;\n            }\n            return HAL_TIMEOUT;\n          }\n          data_pointer = i2c_handler->pBuffPtr;\n          i2c_handler->pBuffPtr = data_pointer + 1;\n          i2c_handler->Instance->DR = (uint)*data_pointer;\n          i2c_handler->XferSize--;\n          i2c_handler->XferCount--;\n          if (((i2c_handler->Instance->SR1 & 4) == 4) && (i2c_handler->XferSize != 0)) {\n            data_pointer = i2c_handler->pBuffPtr;\n            i2c_handler->pBuffPtr = data_pointer + 1;\n            i2c_handler->Instance->DR = (uint)*data_pointer;\n            i2c_handler->XferSize--;\n            i2c_handler->XferCount--;\n          }\n        }\n        hal_DAT_08001f64 = I2C_WaitOnBTFFlagUntilTimeout(i2c_handler, timeout, tick_start);\n        if (hal_DAT_08001f64 == HAL_OK) {\n          i2c_handler->Instance->CR1 |= 0x200;\n          i2c_handler->State = HAL_I2C_STATE_READY;\n          i2c_handler->Mode = HAL_I2C_MODE_NONE;\n          i2c_handler->Lock = HAL_UNLOCKED;\n          hal_DAT_08001f64 = HAL_OK;\n        }\n        else if (i2c_handler->ErrorCode == 4) {\n          i2c_handler->Instance->CR1 |= 0x200;\n          hal_DAT_08001f64 = HAL_ERROR;\n        }\n        else {\n          hal_DAT_08001f64 = HAL_TIMEOUT;\n        }\n      }\n      else if (i2c_handler->ErrorCode == 4) {\n        i2c_handler->Lock = HAL_UNLOCKED;\n        hal_DAT_08001f64 = HAL_ERROR;\n      }\n      else {\n        i2c_handler->Lock = HAL_UNLOCKED;\n        hal_DAT_08001f64 = HAL_TIMEOUT;\n      }\n    }\n  }\n  else {\n    hal_DAT_08001f64 = HAL_BUSY;\n  }\n  return hal_DAT_08001f64;\n}",
            "called": [
                "HAL_GetTick",
                "I2C_WaitOnBTFFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_RequestMemoryWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ccc",
            "calling": [
                "_i2c_write_reg"
            ],
            "imported": false,
            "current_name": "write_data_to_memory_08001ccc"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "update_uw_tick_0800157c",
                "PTR_uwTick_0800159c": "tick_ptr",
                "PTR_uwTickFreq_08001598": "tick_freq_ptr"
            },
            "code": "void update_uw_tick_0800157c(void)\n{\n  uint* PTR_uwTick_0800159c = (uint*)PTR_uwTick_0800159c;\n  int* PTR_uwTickFreq_08001598 = (int*)PTR_uwTickFreq_08001598;\n  uint tick_value = *PTR_uwTick_0800159c + (uint)(byte)*PTR_uwTickFreq_08001598;\n  *PTR_uwTick_0800159c = tick_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "update_uw_tick_0800157c"
        },
        "FUN_0800121c": {
            "renaming": {
                "FUN_0800121c": "FUNC_0800121c"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 FUNC_0800121c(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong uVar1;\n  uint uVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint *puVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  undefined8 uVar15;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 != 0) {\n        param_3 = param_3 << (uVar6 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        param_1 = param_1 << (uVar6 & 0xff);\n      }\n      uVar12 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar12;\n      uVar11 = uVar8 * (param_3 & 0xffff);\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar12 * uVar8) * 0x10000;\n      uVar4 = uVar8;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar14 = CARRY4(param_3,uVar7);\n        uVar7 = param_3 + uVar7;\n        uVar4 = uVar8 - 1;\n        if ((bVar14 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar4 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar2 = (uVar7 - uVar11) / uVar12;\n      uVar5 = uVar2 * (param_3 & 0xffff);\n      uVar8 = param_1 & 0xffff | ((uVar7 - uVar11) - uVar12 * uVar2) * 0x10000;\n      uVar7 = uVar2;\n      if (uVar8 <= uVar5 && uVar5 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar2 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar5 && uVar5 - uVar8 != 0)) {\n          uVar7 = uVar2 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n      puVar9 = (uint *)0x0;\n      uVar8 = uVar8 - uVar5;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x08001302. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        uVar15 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar15;\n      }\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 == 0) {\n        puVar9 = (uint *)0x1;\n        param_2 = param_2 - param_3;\n        uVar12 = param_3 >> 0x10;\n        uVar2 = param_3 & 0xffff;\n      }\n      else {\n        param_3 = param_3 << (uVar6 & 0xff);\n        uVar4 = param_2 >> (0x20 - uVar6 & 0xff);\n        uVar12 = param_3 >> 0x10;\n        uVar11 = uVar4 / uVar12;\n        uVar2 = param_3 & 0xffff;\n        uVar5 = uVar11 * uVar2;\n        uVar8 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        uVar7 = uVar8 >> 0x10 | (uVar4 - uVar12 * uVar11) * 0x10000;\n        param_1 = param_1 << (uVar6 & 0xff);\n        uVar4 = uVar11;\n        if (uVar7 <= uVar5 && uVar5 - uVar7 != 0) {\n          bVar14 = CARRY4(param_3,uVar7);\n          uVar7 = param_3 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar5 && uVar5 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + param_3;\n          }\n        }\n        uVar11 = (uVar7 - uVar5) / uVar12;\n        uVar13 = uVar11 * uVar2;\n        param_2 = uVar8 & 0xffff | ((uVar7 - uVar5) - uVar12 * uVar11) * 0x10000;\n        uVar7 = uVar11;\n        if (param_2 <= uVar13 && uVar13 - param_2 != 0) {\n          bVar14 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar7 = uVar11 - 1;\n          if ((bVar14 == false) && (param_2 <= uVar13 && uVar13 - param_2 != 0)) {\n            uVar7 = uVar11 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar13;\n        puVar9 = (uint *)(uVar7 | uVar4 << 0x10);\n      }\n      uVar11 = param_2 / uVar12;\n      uVar7 = uVar2 * uVar11;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar12 * uVar11) * 0x10000;\n      uVar4 = uVar11;\n      if (uVar8 <= uVar7 && uVar7 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar4 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar7 && uVar7 - uVar8 != 0)) {\n          uVar4 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar11 = (uVar8 - uVar7) / uVar12;\n      uVar2 = uVar2 * uVar11;\n      uVar8 = param_1 & 0xffff | ((uVar8 - uVar7) - uVar12 * uVar11) * 0x10000;\n      uVar7 = uVar11;\n      if (uVar8 <= uVar2 && uVar2 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar2 && uVar2 - uVar8 != 0)) {\n          uVar7 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar8 = uVar8 - uVar2;\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar8 >> (uVar6 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else {\n    puVar9 = param_5;\n    if (param_2 < param_4) {\n      puVar3 = param_5;\n      if (param_5 != (uint *)0x0) {\n        *param_5 = param_1;\n        param_5[1] = param_2;\n        return 0;\n      }\n    }\n    else {\n      puVar10 = (uint *)count_leading_zeroes(param_4);\n      if (puVar10 == (uint *)0x0) {\n        if ((param_4 < param_2) || (puVar3 = puVar10, param_3 <= param_1)) {\n          bVar14 = param_1 < param_3;\n          param_1 = param_1 - param_3;\n          param_2 = (param_2 - param_4) - (uint)bVar14;\n          puVar3 = (uint *)0x1;\n        }\n        puVar9 = puVar10;\n        if (param_5 != (uint *)0x0) {\n          *param_5 = param_1;\n          param_5[1] = param_2;\n        }\n      }\n      else {\n        uVar8 = 0x20 - (int)puVar10;\n        uVar2 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar10 & 0xff);\n        uVar6 = param_2 >> (uVar8 & 0xff);\n        uVar5 = uVar2 >> 0x10;\n        uVar11 = uVar6 / uVar5;\n        uVar12 = uVar11 * (uVar2 & 0xffff);\n        uVar4 = param_2 << ((uint)puVar10 & 0xff) | param_1 >> (uVar8 & 0xff);\n        uVar7 = uVar4 >> 0x10 | (uVar6 - uVar5 * uVar11) * 0x10000;\n        param_3 = param_3 << ((uint)puVar10 & 0xff);\n        param_1 = param_1 << ((uint)puVar10 & 0xff);\n        uVar6 = uVar11;\n        if (uVar7 <= uVar12 && uVar12 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar6 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar12 && uVar12 - uVar7 != 0)) {\n            uVar6 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        uVar11 = (uVar7 - uVar12) / uVar5;\n        uVar13 = uVar11 * (uVar2 & 0xffff);\n        uVar7 = uVar4 & 0xffff | ((uVar7 - uVar12) - uVar5 * uVar11) * 0x10000;\n        uVar4 = uVar11;\n        if (uVar7 <= uVar13 && uVar13 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar13 && uVar13 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        puVar3 = (uint *)(uVar4 | uVar6 << 0x10);\n        uVar1 = ZEXT48(puVar3) * (ulonglong)param_3;\n        if (CONCAT44(uVar7 - uVar13,param_1) < uVar1) {\n          puVar3 = (uint *)((int)puVar3 + -1);\n          uVar1 = uVar1 - CONCAT44(uVar2,param_3);\n        }\n        if (param_5 != (uint *)0x0) {\n          uVar6 = ((uVar7 - uVar13) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n          *param_5 = uVar6 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar10 & 0xff);\n          param_5[1] = uVar6 >> ((uint)puVar10 & 0xff);\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,puVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800121c",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "FUNC_0800121c"
        },
        "FUN_080036f8": {
            "renaming": {
                "FUN_080036f8": "processTimerInterrupt_080036f8",
                "htim": "timerHandle",
                "Instance": "timerHandle->Instance",
                "SR": "timerHandle->Instance->SR",
                "DIER": "timerHandle->Instance->DIER",
                "Channel": "timerHandle->Channel",
                "HAL_TIM_ACTIVE_CHANNEL_1": "HAL_TIM_ACTIVE_CHANNEL_1",
                "CCMR1": "timerHandle->Instance->CCMR1",
                "CCMR2": "timerHandle->Instance->CCMR2",
                "TIM_CCMR1_CC1S": "TIM_CCMR1_CC1S",
                "TIM_CCMR1_CC2S": "TIM_CCMR1_CC2S",
                "TIM_CCMR2_CC3S": "TIM_CCMR2_CC3S",
                "TIM_CCMR2_CC4S": "TIM_CCMR2_CC4S",
                "HAL_TIM_ACTIVE_CHANNEL_CLEARED": "HAL_TIM_ACTIVE_CHANNEL_CLEARED",
                "TIM_FLAG_UPDATE": "TIM_FLAG_UPDATE",
                "TIM_FLAG_CC2": "TIM_FLAG_CC2",
                "TIM_FLAG_CC3": "TIM_FLAG_CC3",
                "TIM_FLAG_CC4": "TIM_FLAG_CC4",
                "TIM_FLAG_UIF": "TIM_FLAG_UIF",
                "TIM_FLAG_Break": "TIM_FLAG_Break",
                "TIM_FLAG_Trigger": "TIM_FLAG_Trigger",
                "TIM_FLAG_COM": "TIM_FLAG_COM",
                "TIM_IT_UPDATE": "TIM_IT_UPDATE",
                "TIM_IT_CC2": "TIM_IT_CC2",
                "TIM_IT_CC3": "TIM_IT_CC3",
                "TIM_IT_CC4": "TIM_IT_CC4",
                "TIM_IT_BREAK": "TIM_IT_BREAK",
                "TIM_IT_TRIGGER": "TIM_IT_TRIGGER",
                "TIM_IT_COM": "TIM_IT_COM",
                "HAL_TIM_OC_DelayElapsedCallback": "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PWM_PulseFinishedCallback": "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback": "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PeriodElapsedCallback": "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback": "HAL_TIMEx_BreakCallback",
                "HAL_TIM_TriggerCallback": "HAL_TIM_TriggerCallback",
                "HAL_TIMEx_CommutationCallback": "HAL_TIMEx_CommutationCallback"
            },
            "code": "void processTimerInterrupt_080036f8(TIM_HandleTypeDef *timerHandle)\n{\n  if (((timerHandle->Instance->SR & TIM_FLAG_UPDATE) == TIM_FLAG_UPDATE) && ((timerHandle->Instance->DIER & TIM_IT_UPDATE) == TIM_IT_UPDATE)) {\n    timerHandle->Instance->SR = ~(TIM_FLAG_UPDATE);\n    timerHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n    if ((timerHandle->Instance->CCMR1 & TIM_CCMR1_CC1S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timerHandle);\n      HAL_TIM_PWM_PulseFinishedCallback(timerHandle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timerHandle);\n    }\n    timerHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((timerHandle->Instance->SR & TIM_FLAG_CC2) == TIM_FLAG_CC2) && ((timerHandle->Instance->DIER & TIM_IT_CC2) == TIM_IT_CC2)) {\n    timerHandle->Instance->SR = ~(TIM_FLAG_CC2);\n    timerHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_2;\n    if ((timerHandle->Instance->CCMR1 & TIM_CCMR1_CC2S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timerHandle);\n      HAL_TIM_PWM_PulseFinishedCallback(timerHandle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timerHandle);\n    }\n    timerHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((timerHandle->Instance->SR & TIM_FLAG_CC3) == TIM_FLAG_CC3) && ((timerHandle->Instance->DIER & TIM_IT_CC3) == TIM_IT_CC3)) {\n    timerHandle->Instance->SR = ~(TIM_FLAG_CC3);\n    timerHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_3;\n    if ((timerHandle->Instance->CCMR2 & TIM_CCMR2_CC3S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timerHandle);\n      HAL_TIM_PWM_PulseFinishedCallback(timerHandle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timerHandle);\n    }\n    timerHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((timerHandle->Instance->SR & TIM_FLAG_CC4) == TIM_FLAG_CC4) && ((timerHandle->Instance->DIER & TIM_IT_CC4) == TIM_IT_CC4)) {\n    timerHandle->Instance->SR = ~(TIM_FLAG_CC4);\n    timerHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_4;\n    if ((timerHandle->Instance->CCMR2 & TIM_CCMR2_CC4S) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timerHandle);\n      HAL_TIM_PWM_PulseFinishedCallback(timerHandle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timerHandle);\n    }\n    timerHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((timerHandle->Instance->SR & TIM_FLAG_UIF) == TIM_FLAG_UIF) && ((timerHandle->Instance->DIER & TIM_IT_UPDATE) == TIM_IT_UPDATE)) {\n    timerHandle->Instance->SR = ~(TIM_FLAG_UIF);\n    HAL_TIM_PeriodElapsedCallback(timerHandle);\n  }\n  if (((timerHandle->Instance->SR & TIM_FLAG_Break) == TIM_FLAG_Break) && ((timerHandle->Instance->DIER & TIM_IT_BREAK) == TIM_IT_BREAK)) {\n    timerHandle->Instance->SR = ~(TIM_FLAG_Break);\n    HAL_TIMEx_BreakCallback(timerHandle);\n  }\n  if (((timerHandle->Instance->SR & TIM_FLAG_Trigger) == TIM_FLAG_Trigger) && ((timerHandle->Instance->DIER & TIM_IT_TRIGGER) == TIM_IT_TRIGGER)) {\n    timerHandle->Instance->SR = ~(TIM_FLAG_Trigger);\n    HAL_TIM_TriggerCallback(timerHandle);\n  }\n  if (((timerHandle->Instance->SR & TIM_FLAG_COM) == TIM_FLAG_COM) && ((timerHandle->Instance->DIER & TIM_IT_COM) == TIM_IT_COM)) {\n    timerHandle->Instance->SR = ~(TIM_FLAG_COM);\n    HAL_TIMEx_CommutationCallback(timerHandle);\n  }\n  return;\n}\n",
            "called": [
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIMEx_BreakCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_IC_CaptureCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f8",
            "calling": [
                "TIM2_IRQHandler"
            ],
            "imported": false,
            "current_name": "processTimerInterrupt_080036f8"
        },
        "FUN_080009e8": {
            "renaming": {
                "FUN_080009e8": "is_CY_null_080009e8",
                "in_CY": "CY_value"
            },
            "code": "bool is_CY_null_080009e8(void)\\n{\\n  char CY_value;\\n  __aeabi_cdrcmple();\\n  return CY_value == \"\\0\";\\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009e8",
            "calling": [
                "_dtoa_r",
                "atan",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "is_CY_null_080009e8"
        },
        "FUN_08009630": {
            "renaming": {
                "FUN_08009630": "allocate_memory_and_set_params_08009630",
                "param_1": "size",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "out_param_5",
                "param_6": "out_param_6",
                "iVar1": "allocated_memory",
                "uVar2": "lsb_index",
                "iVar3": "param_10",
                "iVar4": "param_10",
                "uVar5": "param_14",
                "uVar6": "mask",
                "uVar7": "msb_index",
                "local_20": "param_20",
                "local_1c": "param_4_bits"
            },
            "code": "int allocate_memory_and_set_params_08009630(undefined4 size, undefined4 param_2, uint32_t param_3, uint32_t param_4, int *out_param_5, int *out_param_6) {\n  int allocated_memory = _Balloc(size, 1);\n  uint32_t mask = (param_4 << 1) >> 0x15;\n  uint32_t param_4_bits = param_4 & 0xfffff;\n  if (mask != 0) {\n    param_4_bits |= 0x100000;\n  }\n  if (param_3 == 0) {\n    int lsb_index = __lo0bits(&param_4_bits);\n    int param_10 = 1;\n    uint32_t param_14 = param_4_bits;\n    *(undefined4 *)(allocated_memory + 0x10) = 1;\n    *(uint32_t *)(allocated_memory + 0x14) = param_14;\n  }\n  else {\n    uint32_t param_20 = param_3;\n    int lsb_index = __lo0bits(&param_20);\n    if (lsb_index == 0) {\n      *(uint32_t *)(allocated_memory + 0x14) = param_20;\n    }\n    else {\n      uint32_t param_14 = param_4_bits << (0x20 - lsb_index & 0xff);\n      param_4_bits = param_4_bits >> (lsb_index & 0xff);\n      *(uint32_t *)(allocated_memory + 0x14) = param_14 | param_20;\n    }\n    int param_10 = param_4_bits == 0 ? 1 : 2;\n    *(uint32_t *)(allocated_memory + 0x18) = param_4_bits;\n    *(int *)(allocated_memory + 0x10) = param_10;\n  }\n  if (mask == 0) {\n    *out_param_5 = lsb_index - 0x432;\n    uint32_t param_10 = *(uint32_t *)(allocated_memory + param_10 * 4 + 0x10);\n    uint32_t msb_index = __hi0bits(param_10);\n    *out_param_6 = (int)((uint64_t)msb_index >> 0x20) * 0x20 - (int)msb_index;\n    return allocated_memory;\n  }\n  *out_param_5 = (mask - 0x433) + lsb_index;\n  *out_param_6 = 0x35 - lsb_index;\n  return allocated_memory;\n}",
            "called": [
                "_Balloc",
                "__hi0bits",
                "__lo0bits"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009630",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_set_params_08009630"
        },
        "FUN_08005830": {
            "renaming": {
                "FUN_08005830": "wait_forever_08005830"
            },
            "code": "void wait_forever_08005830(void)\n{\n  while( true )\n  {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "USBWakeUp_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005830",
            "calling": [
                "USBWakeUp_IRQHandler"
            ],
            "imported": false,
            "current_name": "wait_forever_08005830"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "handle_TIM2_interrupt_08005714",
                "PTR_htim2_08005724": "TIM2_handle"
            },
            "code": "void handle_TIM2_interrupt_08005714(void)\n{\n  TIM_HandleTypeDef* PTR_htim2_08005724 = (TIM_HandleTypeDef*)PTR_htim2_08005724;\n  HAL_TIM_IRQHandler(PTR_htim2_08005724);\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "handle_TIM2_interrupt_08005714"
        },
        "FUN_08005834": {
            "renaming": {
                "FUN_08005834": "calculate_atan_or_subtraction_08005834",
                "param_1": "first_num",
                "param_2": "second_num",
                "param_3": "third_num",
                "param_4": "fourth_num",
                "param_5": "num",
                "unaff_r4": "unused_variable",
                "uVar2": "u_var_2",
                "uVar3": "abs_fourth_num",
                "uVar4": "abs_second_num",
                "uVar5": "u_var_5",
                "DAT_080059e8": "max_abs_value",
                "DAT_080059b0": "max_value",
                "DAT_080059b4": "max_value2",
                "difference": "difference"
            },
            "code": "void calculate_atan_or_subtraction_08005834(uint first_num, uint second_num, uint third_num, uint fourth_num, double num){\n  int difference;\n  uint abs_fourth_num = fourth_num & 0x7fffffff;\n  uint abs_second_num = second_num & 0x7fffffff;\n  if ((DAT_080059e8 < (abs_fourth_num | (-third_num | third_num) >> 0x1f)) || (DAT_080059e8 < (abs_second_num | (-first_num | first_num) >> 0x1f))){\n    __aeabi_dadd(third_num, fourth_num, first_num, second_num);\n  }\n  else{\n    if ((fourth_num + 0xc0100000 | third_num) == 0){\n      atan(num);\n      return;\n    }\n    uint uVar2 = (int)fourth_num >> 0x1e & 2U | second_num >> 0x1f;\n    if (((((abs_second_num | first_num) != 0) && ((abs_fourth_num | third_num) != 0)) && (abs_fourth_num != DAT_080059e8)) && (abs_second_num != DAT_080059e8)){\n      difference = (int)(abs_second_num - abs_fourth_num) >> 0x14;\n      if ((difference < 0x3d) && ((-1 < (int)fourth_num || (difference + 0x3c < 0 == SCARRY4(difference,0x3c))))){\n        __divdf3(first_num, second_num);\n        fabs((double)CONCAT44(unaff_r4, fourth_num));\n        atan((double)CONCAT44(unaff_r4, fourth_num));\n      }\n      if (uVar2 != 1){\n        if (uVar2 == 2){\n          uint uVar5 = __subdf3();\n          __subdf3(DAT_080059b0, DAT_080059b4, (int)uVar5, (int)((ulonglong)uVar5 >> 0x20));\n        }\n        else if (uVar2 != 0){\n          uint uVar5 = __subdf3();\n          __subdf3((int)uVar5, (int)((ulonglong)uVar5 >> 0x20), DAT_080059b0, DAT_080059b4);\n        }\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "__ieee754_atan2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005834",
            "calling": [
                "mpu6050_calc_pitch",
                "mpu6050_calc_acc_pitch_roll"
            ],
            "imported": false,
            "current_name": "calculate_atan_or_subtraction_08005834"
        },
        "FUN_08005838": {
            "renaming": {
                "FUN_08005838": "calculate_arctan_division_08005838",
                "param_1": "dividend_1",
                "param_2": "dividend_2",
                "param_3": "divisor_1",
                "param_4": "divisor_2",
                "param_5": "divisor_double",
                "unaff_r4": "difference_double",
                "uVar2": "divisor_sign",
                "uVar3": "dividend_1_abs",
                "uVar4": "divisor_1_abs",
                "uVar5": "difference_double"
            },
            "code": "void calculate_arctan_division_08005838(uint dividend_1, uint dividend_2, uint divisor_1, uint divisor_2, double divisor_double){\n  int difference;\n  uint dividend_1_abs = dividend_1 & 0x7fffffff;\n  uint divisor_1_abs = divisor_1 & 0x7fffffff;\n  if ((DAT_080059e8 < (dividend_2 & 0x7fffffff | (-divisor_1 | divisor_1) >> 0x1f)) || (DAT_080059e8 < (divisor_2 & 0x7fffffff | (-dividend_1 | dividend_1) >> 0x1f))) {\n    __aeabi_dadd(divisor_1, divisor_2, dividend_1, dividend_2);\n  }\n  else {\n    if ((dividend_2 + 0xc0100000 | divisor_2) == 0) {\n      atan(divisor_double);\n      return;\n    }\n    uint divisor_sign = ((int)dividend_2 >> 0x1e & 2U) | divisor_2 >> 0x1f;\n    if (((divisor_1_abs | dividend_1) != 0) && ((dividend_1_abs | divisor_1) != 0) && (dividend_1_abs != DAT_080059e8) && (divisor_1_abs != DAT_080059e8)) {\n      difference = (int)(divisor_1_abs - dividend_1_abs) >> 0x14;\n      if ((difference < 0x3d) && ((-1 < (int)dividend_2) || (difference + 0x3c < 0 == SCARRY4(difference,0x3c)))) {\n        __divdf3(dividend_1, dividend_2);\n        fabs((double)CONCAT44(unaff_r4, divisor_2));\n        atan((double)CONCAT44(unaff_r4, divisor_2));\n      }\n      if (divisor_sign != 1) {\n        if (divisor_sign == 2) {\n          undefined8 difference_double = __subdf3();\n          __subdf3(DAT_080059b0, DAT_080059b4, (int)difference_double, (int)((ulonglong)difference_double >> 0x20));\n        }\n        else if (divisor_sign != 0) {\n          undefined8 difference_double = __subdf3();\n          __subdf3((int)difference_double, (int)((ulonglong)difference_double >> 0x20), DAT_080059b0, DAT_080059b4);\n        }\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "__subdf3",
                "__divdf3",
                "atan",
                "__aeabi_dadd",
                "fabs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005838",
            "calling": [
                "atan2"
            ],
            "imported": false,
            "current_name": "calculate_arctan_division_08005838"
        },
        "FUN_080096e0": {
            "renaming": {
                "FUN_080096e0": "calculate_exponential_080096e0",
                "__x": "base",
                "__exponent": "exponent",
                "iVar1": "exponent_limit",
                "extraout_r1": "absolute_base_in_bits",
                "in_r2": "exponent",
                "iVar2": "exponent_offset",
                "uVar3": "base_in_bits",
                "in_d0": "multiplied",
                "DAT_08009740": "1023",
                "DAT_0800973c": "0"
            },
            "code": "double calculate_exponential_080096e0(double base, int* exponent) {\n  int exponent_limit = DAT_DAT_0800973c8DAT_0800973cDAT_0800973c974DAT_0800973c;\n  int exponent_offset = DAT_0800973c;\n  uint base_in_bits = *(uint*)&base;\n  uint absolute_base_in_bits = base_in_bits & DAT_0800973cx7fffffff;\n\n  *exponent = DAT_0800973c;\n\n  if (absolute_base_in_bits <= exponent_limit && (absolute_base_in_bits | (uint)exponent) != DAT_0800973c) {\n    if (absolute_base_in_bits < DAT_0800973cx1DAT_0800973cDAT_0800973cDAT_0800973cDAT_0800973cDAT_0800973c) {\n      double multiplied = (double)(__muldf3(exponent, base_in_bits, DAT_0800973c, DAT_0800973c));\n      exponent_offset = -54;\n      absolute_base_in_bits = *(uint*)&multiplied & DAT_0800973cx7fffffff;\n    }\n    *exponent = ((int)absolute_base_in_bits >> DAT_0800973cx14) + exponent_offset;\n  }\n  return base;\n}",
            "called": [
                "__muldf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e0",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "calculate_exponential_080096e0"
        },
        "FUN_08003540": {
            "renaming": {
                "FUN_08003540": "get_HCLK_frequency_divided_by_APB_prescaler_08003540",
                "uVar1": "HCLK_frequency",
                "DAT_08003560": "data_08003560",
                "PTR_APBPrescTable_08003564": "APB_prescaler_table",
                "APB_prescaler_index": "APB_prescaler_index",
                "APB_prescaler_value": "APB_prescaler_value"
            },
            "code": "uint32_t get_HCLK_frequency_divided_by_APB_prescaler_08003540(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler_index = (*(uint *)(DAT_08003560 + 4) >> 0xb) & 7;\n  uint32_t APB_prescaler_value = PTR_APBPrescTable_08003564[APB_prescaler_index];\n  return HCLK_frequency >> APB_prescaler_value;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003540",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divided_by_APB_prescaler_08003540"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "initialize_I2C_08001ab0",
                "hi2c": "i2c",
                "HVar3": "status",
                "uVar1": "pclk1_freq",
                "cVar2": "valid_ccr_value",
                "uVar4": "freq_range",
                "uVar5": "ccr_value",
                "bVar6": "is_valid_clock_speed",
                "pclk1": "N/A",
                "freqrange": "N/A"
            },
            "code": "HAL_StatusTypeDef initialize_I2C_08001ab0(I2C_HandleTypeDef *i2c)\n{\n  uint32_t pclk1_freq, freq_range;\n  uint32_t ccr_value;\n  uint32_t rise_time;\n  uint32_t timeout;\n  bool is_valid_clock_speed;\n  char valid_ccr_value;\n  HAL_StatusTypeDef status;\n\n  if (i2c == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (i2c->State == HAL_I2C_STATE_RESET) {\n      i2c->Lock = HAL_UNLOCKED;\n      HAL_I2C_MspInit(i2c);\n    }\n    i2c->State = HAL_I2C_STATE_BUSY;\n    i2c->Instance->CR1 &= ~(1U);\n    pclk1_freq = HAL_RCC_GetPCLK1Freq();\n    is_valid_clock_speed = (i2c->Init.ClockSpeed <= 100000U) && (i2c->Init.ClockSpeed > 0U);\n    if (is_valid_clock_speed) {\n      freq_range = pclk1_freq / 1000000U;\n      valid_ccr_value = (freq_range >= 2U) && (freq_range <= 50U);\n    } else {\n      freq_range = pclk1_freq / 100000U;\n      valid_ccr_value = (freq_range >= 4U) && (freq_range <= 256U);\n    }\n    if (valid_ccr_value) {\n      ccr_value = pclk1_freq / (i2c->Init.ClockSpeed * (freq_range << 1U));\n      if (ccr_value < 0x1U) {\n        ccr_value = 0x1U;\n      }\n      i2c->Instance->CCR = ccr_value;\n      rise_time = (freq_range + 1U);\n      if (is_valid_clock_speed) {\n        rise_time = (uint32_t)(((uint64_t)300U * (uint64_t)DAT_08001cb4 * (uint64_t)freq_range) / 1000000U) + 1U;\n      }\n      i2c->Instance->TRISE = rise_time;\n      timeout = (uint32_t)((uint64_t)1000U * (uint64_t)freq_range / (uint64_t)i2c->Init.ClockSpeed) + 1U;\n      i2c->Instance->CR2 = (i2c->Init).I2C_AnalogFilter | (timeout << 16U);\n      i2c->Instance->CR1 = (i2c->Init).NoStretchMode | (i2c->Init).GeneralCallMode | 1U;\n      i2c->Instance->OAR1 = (i2c->Init).OwnAddress1 | (i2c->Init).AddressingMode;\n      i2c->Instance->OAR2 = (i2c->Init).OwnAddress2 | (i2c->Init).DualAddressMode;\n      i2c->ErrorCode = 0U;\n      i2c->State = HAL_I2C_STATE_READY;\n      i2c->PreviousState = 0U;\n      i2c->Mode = HAL_I2C_MODE_NONE;\n      status = HAL_OK;\n    }\n    else {\n      status = HAL_ERROR;\n    }\n  }\n  return status;\n}",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "MX_I2C1_Init"
            ],
            "imported": false,
            "current_name": "initialize_I2C_08001ab0"
        },
        "FUN_08000150": {
            "renaming": {
                "FUN_08000150": "FUNC_08000150"
            },
            "code": "\nulonglong FUNC_08000150(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar4 = param_2 ^ 0x80000000;\n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((uVar4 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = uVar4;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((uVar4 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        uVar4 = param_4;\n      }\n      return CONCAT44(uVar4,param_1);\n    }\n    if (uVar4 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(uVar4,uVar4) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(uVar4 + 0x100000,param_1);\n    }\n    uVar4 = uVar4 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(uVar4 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar12 = uVar4;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar12 = param_4;\n    param_3 = param_1;\n    param_4 = uVar4;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar12,uVar8);\n  }\n  uVar9 = uVar12 & 0xfffff | 0x100000;\n  if ((uVar12 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar4 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar4 = uVar4 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar5 = uVar4 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar5;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar4 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar11 = uVar4 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar4 = (int)uVar4 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar4;\n    uVar9 = uVar9 + ((int)uVar4 >> 0x1f) + (uint)CARRY4(uVar8,uVar4);\n  }\n  uVar4 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | uVar4,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar3 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar3 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar3 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar3 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar3 = uVar3 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | uVar4,uVar3);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar3 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(uVar4 | uVar7 >> (uVar10 & 0xff),\n                    uVar3 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000150",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000150"
        },
        "FUN_08000158": {
            "renaming": {
                "FUN_08000158": "FUNC_08000158"
            },
            "code": "\nulonglong FUNC_08000158(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000268;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000158",
            "calling": [
                "_dtoa_r",
                "atan",
                "_svfprintf_r",
                "mpu6050_calc_pitch",
                "__ieee754_atan2"
            ],
            "imported": false,
            "current_name": "FUNC_08000158"
        },
        "FUN_08009768": {
            "renaming": {
                "FUN_08009768": "copy_string_08009768",
                "__dest": "destination",
                "__src": "source",
                "__n": "num",
                "puVar2": "source_ptr",
                "puVar3": "destination_ptr",
                "puVar4": "padding_ptr",
                "cVar1": "current_char",
                "uVar5": "value"
            },
            "code": "char* copy_string_08009768(char* destination, const char* source, size_t num)\n{\n    char current_char;\n    uint32_t* source_ptr = (uint32_t*)source;\n    uint32_t* destination_ptr = (uint32_t*)destination;\n    size_t remaining_bytes = num;\n    // Check if source and destination pointers are aligned to 4 bytes\n    if(((uint32_t)source | (uint32_t)destination) & 3) {\n        // If not, copy byte by byte until they are aligned\n        while(remaining_bytes--) {\n            *destination_ptr++ = *source_ptr++;\n        }\n    } else {\n        // Copy 4 bytes at a time until less than 4 bytes remain\n        while(remaining_bytes >= 4) {\n            uint32_t value = *source_ptr++;\n            if((value + 0xfefefeff & ~value & 0x80808080) != 0) {\n                // If the value is not ASCII, copy byte by byte\n                remaining_bytes -= 3;\n                *destination_ptr++ = value;\n                current_char = *(char*)source_ptr;\n                while(current_char != '\\0') {\n                    remaining_bytes--;\n                    *destination_ptr++ = *source_ptr++;\n                    current_char = *(char*)source_ptr;\n                }\n                break;\n            }\n            remaining_bytes -= 4;\n            *destination_ptr++ = value;\n        }\n        // Copy remaining bytes byte by byte\n        while(remaining_bytes--) {\n            current_char = *(char*)source_ptr++;\n            *destination_ptr++ = current_char;\n            if(current_char == '\\0') {\n                break;\n            }\n        }\n    }\n    // Pad remaining bytes with null characters\n    while(remaining_bytes--) {\n        *destination_ptr++ = '\\0';\n    }\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009768",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "copy_string_08009768"
        },
        "FUN_08001008": {
            "renaming": {
                "FUN_08001008": "check_float_equal_08001008",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_nonzero"
            },
            "code": "bool check_float_equal_08001008(void)\n{\n  bool is_CY_zero;\n  bool is_ZR_nonzero;\n  __aeabi_cfcmpeq();\n  return is_CY_zero || is_ZR_nonzero;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001008",
            "calling": [],
            "imported": false,
            "current_name": "check_float_equal_08001008"
        },
        "FUN_08003ff8": {
            "renaming": {
                "FUN_08003ff8": "configure_timer_08003ff8",
                "TIMx": "timer",
                "OC_Config": "output_config",
                "tmpccer": "ccer_bits",
                "tmpccmrx": "ccmrx_bits",
                "tmpcr2": "cr2_bits",
                "uVar1": "mode_bits",
                "uVar2": "polarity_bits"
            },
            "code": "void configure_timer_08003ff8(TIM_TypeDef *timer,TIM_OC_InitTypeDef *output_config)\n{\n  uint32_t mode_bits;\n  uint32_t polarity_bits;\n  uint32_t ccer_bits;\n  uint32_t ccmrx_bits;\n  uint32_t cr2_bits;\n  \n  ccer_bits = timer->CCER & 0xffffefff;\n  cr2_bits = timer->CR2;\n  mode_bits = output_config->OCMode;\n  polarity_bits = output_config->OCPolarity;\n  if (timer == PTR_0800409c) {\n    cr2_bits = output_config->OCIdleState << 6 | cr2_bits & 0xffffbfff;\n  }\n  timer->CR2 = cr2_bits;\n  timer->CCMR2 = mode_bits << 8 | timer->CCMR2 & 0xffff8cff;\n  timer->CCR4 = output_config->Pulse;\n  ccer_bits = polarity_bits << 0xc | ccer_bits & 0xffffdfff;\n  timer->CCER = ccer_bits;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff8",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08003ff8"
        },
        "FUN_08004ea4": {
            "renaming": {
                "FUN_08004ea4": "write_i2c_register_08004ea4",
                "addr": "device_address",
                "reg": "register_address",
                "data": "data_buffer",
                "len": "data_length",
                "PTR_hi2c1_08004ee4": "i2c_handle_1",
                "PTR_I2C_TIMEOUT_08004ee0": "I2C_TIMEOUT"
            },
            "code": "void write_i2c_register_08004ea4(uint8_t device_address, uint8_t register_address, uint8_t *data_buffer, uint16_t data_length) {\n  HAL_I2C_Mem_Write((I2C_HandleTypeDef *)PTR_hi2c1_08004ee4,(uint16_t)device_address,(uint16_t)register_address,1,data_buffer,data_length,(uint32_t)PTR_I2C_TIMEOUT_08004ee0);\n  return;\n}",
            "called": [
                "HAL_I2C_Mem_Write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ea4",
            "calling": [],
            "imported": false,
            "current_name": "write_i2c_register_08004ea4"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "incr": "increment",
                "puVar1": "errno_ptr",
                "auStack_18": "allocation_check",
                "local_14": "local_increment",
                "prev_heap_end": "previous_heap_end",
                "PTR_heap_end_08005778": "heap_end_pointer",
                "PTR_end_0800577c": "end_pointer"
            },
            "code": "caddr_t allocate_memory_08005728(int increment)\n{\n  undefined4 *errno_ptr;\n  undefined allocation_check[4];\n  int local_increment;\n  char *previous_heap_end;\n  \n  if (*(int *)PTR_heap_end_08005778 == 0) {\n    *(undefined **)PTR_heap_end_08005778 = PTR_end_0800577c;\n  }\n  previous_heap_end = *(char **)PTR_heap_end_08005778;\n  if (allocation_check < (undefined *)(increment + *(int *)PTR_heap_end_08005778)) {\n    local_increment = increment;\n    errno_ptr = (undefined4 *)__errno();\n    *errno_ptr = 0xc;\n    previous_heap_end = (caddr_t)0xffffffff;\n  }\n  else {\n    *(int *)PTR_heap_end_08005778 = increment + *(int *)PTR_heap_end_08005778;\n  }\n  return previous_heap_end;\n}",
            "called": [
                "__errno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08005728"
        },
        "FUN_08003e38": {
            "renaming": {
                "FUN_08003e38": "configure_output_compare_08003e38",
                "TIMx": "timer",
                "OC_Config": "config",
                "uVar1": "oc_mode",
                "uVar2": "oc_polarity",
                "tmpccmrx": "ccmr1",
                "tmpcr2": "cr2",
                "tmpccer": "ccer",
                "DAT_08003f14": "TIM3"
            },
            "code": "void configure_output_compare_08003e38(TIM_TypeDef *timer, TIM_OC_InitTypeDef *config) {\n  uint32_t oc_mode = config->OCMode;\n  uint32_t oc_polarity = config->OCPolarity;\n  uint32_t oc_n_polarity = config->OCNPolarity;\n  uint32_t oc_idle_state = config->OCIdleState;\n  uint32_t oc_n_idle_state = config->OCNIdleState;\n  uint32_t pulse = config->Pulse;\n\n  uint32_t ccmr1 = timer->CCMR1;\n  ccmr1 &= 0xffff8cff;\n  ccmr1 |= oc_mode << 8;\n  timer->CCMR1 = ccmr1;\n\n  timer->CCR2 = pulse;\n\n  uint32_t ccer = timer->CCER;\n  ccer &= 0xffffffef;\n  ccer |= oc_polarity << 4;\n\n  if (timer == DAT_08003f14) {\n    ccer &= 0xffffff7f;\n    ccer |= oc_n_polarity << 4;\n    uint32_t cr2 = timer->CR2;\n    cr2 &= 0xfffff3ff;\n    cr2 |= oc_idle_state << 2;\n    cr2 |= oc_n_idle_state << 2;\n    timer->CR2 = cr2;\n  }\n\n  timer->CCER = ccer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e38",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_output_compare_08003e38"
        },
        "FUN_080006a4": {
            "renaming": {
                "FUN_080006a4": "calculate_result_080006a4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp3",
                "unaff_r4": "temp4",
                "uVar2": "temp1",
                "uVar3": "temp5",
                "in_r12": "temp6",
                "bVar4": "bool1"
            },
            "code": "ulonglong calculate_result_080006a4(uint input1, uint input2, uint input3, uint input4) {\n  uint temp1 = input4 >> 0x14;\n  bool bool1 = (input1 | (input2 << 1)) == 0;\n  if (input3 | (input4 << 1)) == 0) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n  }\n  if (input3 == 0) {\n    uint temp2 = input2 & 0x80000000;\n    do {\n      uint temp3 = input1 & 0x80000000;\n      input1 = input1 << 1;\n      input2 = input2 * 2 + (uint)(temp3 != 0);\n    } while ((input2 & 0x100000) == 0);\n    input2 = input2 | temp2;\n    if (temp1 != 0) {\n      return CONCAT44(input2,input1);\n    }\n  }\n  do {\n    uint temp4 = input3 & 0x80000000;\n    input3 = input3 << 1;\n    input4 = input4 * 2 + (uint)(temp4 != 0);\n  } while ((input4 & 0x100000) == 0);\n  if (temp1 != 0) {\n    return CONCAT44(input2,input1);\n  }\n  bool bool2 = (input1 | (input2 << 0xc)) == 0;\n  uint temp5 = input2;\n  if (bool2) {\n    temp5 = input4;\n    input1 = input3;\n  }\n  bool bool3 = (input3 | (input4 << 1)) == 0;\n  if (!bool1 && !bool3 && ((input3 | (input4 << 0xc)) != 0 || temp1 == 0)) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp5,input1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006a4",
            "calling": [
                "__muldf3"
            ],
            "imported": false,
            "current_name": "calculate_result_080006a4"
        },
        "FUN_08009530": {
            "renaming": {
                "FUN_08009530": "compare_and_allocate_08009530",
                "param_1": "param_1",
                "param_2": "source",
                "param_3": "target",
                "param_4": "param_4",
                "iVar1": "allocation_flag",
                "iVar12": "carry",
                "iVar5": "source_diff",
                "puVar10": "target_curr_p",
                "puVar11": "source_end_p",
                "puVar13": "target_end_p",
                "puVar2": "result_p",
                "puVar6": "source_curr_p",
                "puVar7": "target_p",
                "puVar8": "source_curr_p",
                "puVar9": "source_p",
                "uVar14": "result_length",
                "uVar3": "source_length",
                "uVar4": "sum"
            },
            "code": "void compare_and_allocate_08009530(uint32_t param_1, uint32_t *source, uint32_t *target, uint32_t param_4)\n{\n  int source_diff = source[4] - (int)target[4];\n  uint32_t *source_p = source + 5;\n  uint32_t *target_p = target + 5;\n  uint32_t *source_end_p, *target_end_p;\n  uint32_t carry = 0;\n  uint32_t *result_p, *result_start_p;\n  int allocation_flag;\n  uint32_t source_length, target_length, result_length;\n  if (source_diff == 0) {\n    source_end_p = source_p + (int)target[4];\n    target_end_p = target_p + (int)target[4];\n    while( true ) {\n      source_end_p = source_end_p - 1;\n      target_end_p = target_end_p - 1;\n      if (*source_end_p != *target_end_p) break;\n      if (source_end_p <= source_p) {\n        allocation_flag = _Balloc(param_1,0,source_end_p,target_end_p,param_4);\n        *(uint32_t *)(allocation_flag + 0x10) = 1;\n        *(uint32_t *)(allocation_flag + 0x14) = 0;\n        return;\n      }\n    }\n    if (*target_end_p <= *source_end_p) goto LAB_08009578;\n  }\n  else if (-1 < source_diff) {\n    source_diff = 0;\n    source_end_p = target;\n    goto LAB_08009578;\n  }\n  source_diff = 1;\n  source_end_p = source_p;\n  target_end_p = target;\n  target_p = source;\n  source_p = source_end_p;\nLAB_08009578:\n  result_length = target[1];\n  source_length = source[4];\n  target_length = target[4];\n  allocation_flag = _Balloc(param_1,target[1],source_end_p,target_p,param_4);\n  result_p = (uint32_t *)(allocation_flag + 0x14);\n  *(int *)(allocation_flag + 0xc) = source_diff;\n  result_start_p = result_p;\n  while (target_p < target_end_p) {\n    uint32_t *source_curr_p = source_p + 1;\n    uint32_t *target_curr_p = target_p + 1;\n    uint32_t sum = ((*source_p & 0xffff) + carry) - (*target_p & 0xffff);\n    carry = ((*source_p >> 0x10) - (*target_p >> 0x10)) + ((int)sum >> 0x10);\n    sum = sum & 0xffff | carry * 0x10000;\n    result_p = result_p + 1;\n    *result_p = sum;\n    carry = carry >> 0x10;\n    source_p = source_curr_p;\n    target_p = target_curr_p;\n  }\n  result_p = result_p + 1;\n  while (result_p < result_start_p + result_length) {\n    uint32_t *source_curr_p = source_p + 1;\n    uint32_t sum = (*source_p & 0xffff) + carry;\n    carry = ((int)sum >> 0x10) + (*source_p >> 0x10);\n    sum = sum & 0xffff | carry * 0x10000;\n    *result_p = sum;\n    carry = carry >> 0x10;\n    source_p = source_curr_p;\n    result_p = result_p + 1;\n  }\n  result_p = result_p - 1;\n  while (sum == 0) {\n    result_p = result_p - 1;\n    result_length = result_length - 1;\n    sum = *result_p;\n  }\n  *(uint32_t *)(allocation_flag + 0x10) = result_length;\n  return;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009530",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "compare_and_allocate_08009530"
        },
        "FUN_08002bb4": {
            "renaming": {
                "FUN_08002bb4": "check_i2c_status_08002bb4",
                "hi2c": "i2c_handler",
                "Timeout": "timeout",
                "Tickstart": "start_tick",
                "HVar1": "status",
                "uVar2": "current_tick"
            },
            "code": "HAL_StatusTypeDef check_i2c_status_08002bb4(I2C_HandleTypeDef *i2c_handler, uint32_t timeout, uint32_t start_tick)\n{\n  HAL_StatusTypeDef status;\n  uint32_t current_tick;\n  \n  while(true) {\n    if ((i2c_handler->Instance->SR1 & 0x80) == 0x80) {\n      return HAL_OK;\n    }\n    status = I2C_IsAcknowledgeFailed(i2c_handler);\n    if (status != HAL_OK) break;\n    if ((timeout != 0xffffffff) && ((timeout == 0 || (current_tick = HAL_GetTick(), timeout < current_tick - start_tick)))) {\n      i2c_handler->ErrorCode = i2c_handler->ErrorCode | 0x20;\n      i2c_handler->PreviousState = 0;\n      i2c_handler->State = HAL_I2C_STATE_READY;\n      i2c_handler->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_GetTick",
                "I2C_IsAcknowledgeFailed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bb4",
            "calling": [
                "I2C_RequestMemoryRead",
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryWrite"
            ],
            "imported": false,
            "current_name": "check_i2c_status_08002bb4"
        },
        "FUN_08002d3c": {
            "renaming": {
                "FUN_08002d3c": "check_i2c_bus_error_08002d3c",
                "hi2c": "i2c_handle",
                "bVar1": "bus_error",
                "SR1": "I2C_SR1_BERR",
                "ErrorCode": "HAL_I2C_ERROR_BERR",
                "PreviousState": "previous_state",
                "State": "current_state",
                "Lock": "i2c_lock"
            },
            "code": "HAL_StatusTypeDef check_i2c_bus_error_08002d3c(I2C_HandleTypeDef *i2c_handle)\\\n{\\n\\\n  bool bus_error = (i2c_handle->Instance->SR1 & I2C_SR1_BERR) == I2C_SR1_BERR;\\n\\\n  if (bus_error) {\\n\\\n    i2c_handle->Instance->SR1 &= ~I2C_SR1_BERR;\\n\\\n    i2c_handle->ErrorCode = HAL_I2C_ERROR_BERR;\\n\\\n    i2c_handle->PreviousState = i2c_handle->State;\\n\\\n    i2c_handle->State = HAL_I2C_STATE_READY;\\n\\\n    i2c_handle->Lock = HAL_UNLOCKED;\\n\\\n  }\\n\\\n  return bus_error;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d3c",
            "calling": [
                "I2C_WaitOnBTFFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "check_i2c_bus_error_08002d3c"
        },
        "FUN_080009fc": {
            "renaming": {
                "FUN_080009fc": "calculate_float_bits_080009fc",
                "param_1": "float_bits",
                "param_2": "shift_amount",
                "uVar1": "normalized_bits",
                "uVar2": "shifted_bits",
                "uVar3": "temp_bits",
                "in_r12": "temp_bits_2",
                "bVar4": "is_normalized_bits_zero",
                "bVar5": "is_shifted_bits_valid"
            },
            "code": "uint calculate_float_bits_080009fc(uint float_bits, uint shift_amount)\n{\n  uint shifted_bits;\n  uint normalized_bits;\n  bool is_shifted_bits_valid;\n  bool is_normalized_bits_zero;\n  \n  shifted_bits = shift_amount * 2;\n  is_shifted_bits_valid = shifted_bits < 0x70000000;\n  normalized_bits = shifted_bits + 0x90000000;\n  if (!is_shifted_bits_valid) {\n    normalized_bits = shifted_bits + 0x8fe00000;\n  }\n  is_normalized_bits_zero = normalized_bits == 0;\n  if (!is_shifted_bits_valid && shifted_bits + 0x90000000 >= 0x200000) {\n    is_normalized_bits_zero = normalized_bits == 0x1fc00000;\n  }\n  if (((is_shifted_bits_valid || shifted_bits < 0x200000) || 0x1fc00000 < normalized_bits) || is_normalized_bits_zero) {\n    if ((shift_amount & 0x40000000) != 0) {\n      if (((int)shifted_bits >> 0x15 == -1) && ((float_bits | shift_amount << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return shift_amount & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(shifted_bits + 0x92e00000) < 0 != SCARRY4(normalized_bits,0x2e00000)) {\n      return shift_amount & 0x80000000;\n    }\n    shifted_bits = 0x18 - (shifted_bits + 0x92e00000 >> 0x15);\n    normalized_bits = float_bits >> (shifted_bits & 0xff);\n    if (float_bits << (0x20 - shifted_bits & 0xff) != 0) {\n      normalized_bits = normalized_bits | 1;\n    }\n    shifted_bits = shift_amount & 0x1fffff | 0x100000;\n    float_bits = normalized_bits | shifted_bits << (0x20 - shifted_bits & 0xff);\n    shifted_bits = (shifted_bits >> (shifted_bits & 0xff)) << 1;\n  }\n  normalized_bits = (shift_amount & 0x80000000 | float_bits >> 0x1d) + shifted_bits * 4 + (uint)(0x7fffffff < float_bits * 8);\n  if (float_bits * 8 == 0x80000000) {\n    normalized_bits = normalized_bits & 0xfffffffe;\n  }\n  return normalized_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009fc",
            "calling": [
                "mpu6050_calc_pitch",
                "mpu6050_calc_acc_pitch_roll"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_080009fc"
        },
        "FUN_080093a4": {
            "renaming": {
                "FUN_080093a4": "calculate_hash_080093a4",
                "param_1": "hash_func_id",
                "param_2": "data",
                "param_3": "data_len",
                "iVar1": "i",
                "iVar2": "num_chunks",
                "puVar3": "result",
                "puVar4": "current_chunk"
            },
            "code": "uint32_t * calculate_hash_080093a4(int hash_func_id, uint32_t *data, uint32_t data_len)\n{\n  int i;\n  int num_chunks;\n  uint32_t *result;\n  uint32_t *current_chunk;\n\n  if ((data_len & 3) != 0) {\n    data = (uint32_t *)\n              __multadd(hash_func_id, data,\n                        *(uint32_t *)(PTR_p05_6092_08009440 + ((data_len & 3) - 1) * 4),0);\n  }\n\n  num_chunks = (int)data_len >> 2;\n  if (num_chunks != 0) {\n    current_chunk = *(uint32_t **)(hash_func_id + 0x48);\n    if (current_chunk == (uint32_t *)0x0) {\n      current_chunk = (uint32_t *)_Balloc(hash_func_id,1);\n      current_chunk[4] = 1;\n      current_chunk[5] = 0x271;\n      *(uint32_t **)(hash_func_id + 0x48) = current_chunk;\n      *current_chunk = 0;\n    }\n    result = data;\n    if (num_chunks << 0x1f >= 0) {\n      goto LAB_080093c4;\n    }\nLAB_080093d2:\n    data = (uint32_t *)__multiply(hash_func_id,result,current_chunk);\n    if (result == (uint32_t *)0x0) {\n      break;\n    }\n    i = *(int *)(hash_func_id + 0x4c);\n    num_chunks = num_chunks >> 1;\n    *result = *(uint32_t *)(i + result[1] * 4);\n    *(uint32_t **)(i + result[1] * 4) = result;\n    result = current_chunk;\n    if (num_chunks == 0) {\n      return data;\n    }\n  LAB_080093c4:\n    num_chunks = num_chunks >> 1;\n    current_chunk = (uint32_t *)*current_chunk;\n    if (current_chunk == (uint32_t *)0x0) {\n      current_chunk = (uint32_t *)__multiply(hash_func_id,result,result);\n      *result = current_chunk;\n      *current_chunk = 0;\n    }\n    goto LAB_080093d2;\n  }\n  return data;\n}",
            "called": [
                "_Balloc",
                "__multiply",
                "__multadd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080093a4",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "calculate_hash_080093a4"
        },
        "FUN_0800015c": {
            "renaming": {
                "FUN_0800015c": "FUNC_0800015c"
            },
            "code": "\nulonglong FUNC_0800015c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800015c",
            "calling": [
                "__aeabi_drsub",
                "_dtoa_r",
                "atan",
                "mpu6050_calc_pitch",
                "__ieee754_atan2"
            ],
            "imported": false,
            "current_name": "FUNC_0800015c"
        },
        "FUN_080078a0": {
            "renaming": {
                "FUN_080078a0": "register_exit_function_if_not_registered_080078a0",
                "DAT_080078ac": "exit_function_registered",
                "DAT_080078b0": "exit_function"
            },
            "code": "void register_exit_function_if_not_registered_080078a0(void)\n{\n  if (DAT_080078ac == 0) {\n    atexit(DAT_080078b0);\n    return;\n  }\n  return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078a0",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "register_exit_function_if_not_registered_080078a0"
        },
        "FUN_080056c8": {
            "renaming": {
                "FUN_080056c8": "wait_forever_080056c8"
            },
            "code": "void wait_forever_080056c8(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056c8",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_080056c8"
        },
        "FUN_080057e8": {
            "renaming": {
                "FUN_080057e8": "initializeSystem_080057e8",
                "iVar1": "index",
                "puVar2": "completedPtr",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "code": "void initializeSystem_080057e8(void)\n{\n  int index;\n  undefined4 *completedPtr = (undefined4 *)PTR_completed_8655_08005828;\n  code *jumpTable;\n\n  for (index = 0; PTR_uwTickPrio_08005820 + index < PTR_completed_8655_08005824; index += 4)\n  {\n    *(undefined4 *)(PTR_uwTickPrio_08005820 + index) = *(undefined4 *)(PTR___fini_array_end_0800581c + index);\n  }\n  for (; completedPtr < PTR__ebss_0800582c; completedPtr++)\n  {\n    *completedPtr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTable = (code *)0x800581a;\n  main();\n  (*jumpTable)();\n  return;\n}",
            "called": [
                "SystemInit",
                "main",
                "__libc_init_array"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e8",
            "calling": [],
            "imported": false,
            "current_name": "initializeSystem_080057e8"
        },
        "FUN_080008f4": {
            "renaming": {
                "FUN_080008f4": "check_parameters_080008f4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "xor_result",
                "bVar2": "is_param1_2_zero",
                "bVar3": "is_param4_less_than_param2"
            },
            "code": "uint check_parameters_080008f4(uint param1, uint param2, uint param3, uint param4)\n{\n    bool is_param2_neg = ((int)(param2 << 1) >> 0x15 == -1);\n    bool is_param4_neg = ((int)(param4 << 1) >> 0x15 == -1);\n    if ((is_param2_neg || is_param4_neg) && ((is_param2_neg && ((param1 | param2 << 0xc) != 0)) || ((is_param4_neg && ((param3 | param4 << 0xc) != 0)))) {\n        return 1;\n    }\n    bool is_param1_2_zero = (param1 | param2 << 1) == 0;\n    bool is_param3_4_zero = (param3 | param4 << 1) == 0;\n    if (!is_param1_2_zero && !is_param3_4_zero) {\n        if (param2 != param4 || param1 != param3) {\n            uint xor_result = param2 ^ param4;\n            bool is_xor_result_zero = (xor_result == 0);\n            bool is_param4_less_than_param2 = (-1 < (int)xor_result) && (param4 <= param2);\n            if (is_xor_result_zero) {\n                is_param4_less_than_param2 = (param3 <= param1);\n            }\n            param4 = (int)param4 >> 0x1f;\n            if (!is_param4_less_than_param2) {\n                param4 = ~param4;\n            }\n            return param4 | 1;\n        }\n    }\n    else {\n        if (param2 == param4 && param1 == param3) {\n            return 0;\n        }\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008f4",
            "calling": [],
            "imported": false,
            "current_name": "check_parameters_080008f4"
        },
        "FUN_080036a8": {
            "renaming": {
                "FUN_080036a8": "enable_tim_channel_080036a8",
                "htim": "tim_handle",
                "Channel": "channel",
                "DAT_080036f4": "TIM1",
                "BDTR": "TIM_BDTR_MOE",
                "CR1": "TIM_CR1_CEN"
            },
            "code": "HAL_StatusTypeDef enable_tim_channel_080036a8(TIM_HandleTypeDef *tim_handle, uint32_t channel) {\n  TIM_CCxChannelCmd(tim_handle->Instance, channel, ENABLE);\n  if (tim_handle->Instance == DAT_080036f4) {\n    tim_handle->Instance->BDTR |= TIM_BDTR_MOE;\n  }\n  tim_handle->Instance->CR1 |= TIM_CR1_CEN;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "enable_tim_channel_080036a8"
        },
        "FUN_080088ec": {
            "renaming": {
                "FUN_080088ec": "FUNC_080088ec"
            },
            "code": "\nvoid FUNC_080088ec(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  uint uVar10;\n  int iVar11;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  puVar8 = PTR___malloc_av__08008ac4;\n  uVar10 = *(uint *)(param_2 + -4);\n  iVar2 = param_2 + -8;\n  uVar5 = uVar10 & 0xfffffffe;\n  puVar3 = (uint *)(iVar2 + uVar5);\n  uVar6 = puVar3[1] & 0xfffffffc;\n  if (*(uint **)(PTR___malloc_av__08008ac4 + 8) == puVar3) {\n    uVar5 = uVar5 + uVar6;\n    if ((uVar10 & 1) == 0) {\n      iVar2 = iVar2 - *(int *)(param_2 + -8);\n      iVar11 = *(int *)(iVar2 + 8);\n      iVar1 = *(int *)(iVar2 + 0xc);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      *(int *)(iVar11 + 0xc) = iVar1;\n      *(int *)(iVar1 + 8) = iVar11;\n    }\n    uVar6 = *(uint *)PTR___malloc_trim_threshold_08008acc;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(int *)(puVar8 + 8) = iVar2;\n    if (uVar6 <= uVar5) {\n      _malloc_trim_r(param_1,*(undefined4 *)PTR___malloc_top_pad_08008ad0);\n    }\nLAB_080089f0:\n    __malloc_unlock(param_1);\n    return;\n  }\n  puVar3[1] = uVar6;\n  if ((uVar10 & 1) == 0) {\n    iVar2 = iVar2 - *(int *)(param_2 + -8);\n    puVar9 = *(undefined **)(iVar2 + 8);\n    uVar5 = uVar5 + *(int *)(param_2 + -8);\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n    if (puVar9 == puVar8 + 8) {\n      if (uVar10 == 0) {\n        uVar10 = puVar3[2];\n        uVar4 = puVar3[3];\n        uVar5 = uVar5 + uVar6;\n        *(uint *)(uVar10 + 0xc) = uVar4;\n        *(uint *)(uVar4 + 8) = uVar10;\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *(uint *)(iVar2 + uVar5) = uVar5;\n      }\n      else {\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *puVar3 = uVar5;\n      }\n      goto LAB_080089f0;\n    }\n    iVar11 = *(int *)(iVar2 + 0xc);\n    *(int *)(puVar9 + 0xc) = iVar11;\n    *(undefined **)(iVar11 + 8) = puVar9;\n  }\n  else {\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n  }\n  if (uVar10 == 0) {\n    puVar9 = (undefined *)puVar3[2];\n    uVar5 = uVar5 + uVar6;\n    if (puVar9 == PTR_PTR___malloc_av__08008ac8) {\n      *(int *)(puVar8 + 0x10) = iVar2;\n      *(int *)(puVar8 + 0x14) = iVar2;\n      *(undefined **)(iVar2 + 8) = puVar9;\n      *(undefined **)(iVar2 + 0xc) = puVar9;\n      *(uint *)(iVar2 + 4) = uVar5 | 1;\n      *(uint *)(iVar2 + uVar5) = uVar5;\n      goto LAB_080089f0;\n    }\n    uVar6 = puVar3[3];\n    *(uint *)(puVar9 + 0xc) = uVar6;\n    *(undefined **)(uVar6 + 8) = puVar9;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  else {\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  if (uVar5 < 0x200) {\n    iVar11 = (uVar5 >> 3) + 1;\n    uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(puVar8 + 4);\n    iVar1 = *(int *)(puVar8 + iVar11 * 8);\n    *(int *)(iVar2 + 8) = iVar1;\n    *(undefined **)(iVar2 + 0xc) = puVar8 + iVar11 * 8 + -8;\n    *(uint *)(puVar8 + 4) = uVar5;\n    *(int *)(puVar8 + iVar11 * 8) = iVar2;\n    *(int *)(iVar1 + 0xc) = iVar2;\n    __malloc_unlock(param_1,iVar2,uVar5,param_4);\n    return;\n  }\n  uVar6 = uVar5 >> 9;\n  if (uVar6 < 5) {\n    iVar11 = ((uVar5 >> 6) + 0x39) * 8;\n    iVar1 = (uVar5 >> 6) + 0x38;\n  }\n  else if (uVar6 < 0x15) {\n    iVar11 = (uVar6 + 0x5c) * 8;\n    iVar1 = uVar6 + 0x5b;\n  }\n  else if (uVar6 < 0x55) {\n    iVar11 = ((uVar5 >> 0xc) + 0x6f) * 8;\n    iVar1 = (uVar5 >> 0xc) + 0x6e;\n  }\n  else if (uVar6 < 0x155) {\n    iVar11 = ((uVar5 >> 0xf) + 0x78) * 8;\n    iVar1 = (uVar5 >> 0xf) + 0x77;\n  }\n  else if (uVar6 < 0x555) {\n    iVar11 = ((uVar5 >> 0x12) + 0x7d) * 8;\n    iVar1 = (uVar5 >> 0x12) + 0x7c;\n  }\n  else {\n    iVar11 = 0x3f8;\n    iVar1 = 0x7e;\n  }\n  puVar9 = *(undefined **)(puVar8 + iVar11);\n  puVar7 = puVar8 + iVar11 + -8;\n  if (puVar7 == puVar9) {\n    puVar9 = (undefined *)(1 << (iVar1 >> 2 & 0xffU) | *(uint *)(puVar8 + 4));\n    *(undefined **)(puVar8 + 4) = puVar9;\n    puVar8 = puVar7;\n  }\n  else {\n    do {\n      puVar8 = puVar9;\n      if ((*(uint *)(puVar9 + 4) & 0xfffffffc) <= uVar5) break;\n      puVar9 = *(undefined **)(puVar9 + 8);\n      puVar8 = puVar7;\n    } while (puVar7 != puVar9);\n    puVar7 = *(undefined **)(puVar8 + 0xc);\n  }\n  *(undefined **)(iVar2 + 8) = puVar8;\n  *(undefined **)(iVar2 + 0xc) = puVar7;\n  *(int *)(puVar7 + 8) = iVar2;\n  *(int *)(puVar8 + 0xc) = iVar2;\n  __malloc_unlock(param_1,iVar2,puVar9,param_4);\n  return;\n}\n\n",
            "called": [
                "_malloc_trim_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080088ec",
            "calling": [
                "_realloc_r",
                "_svfprintf_r",
                "_malloc_r",
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "FUNC_080088ec"
        },
        "FUN_08005224": {
            "renaming": {
                "FUN_08005224": "initialize_system_08005224",
                "MX_GPIO_Init": "initialize_gpio",
                "MX_I2C1_Init": "initialize_i2c",
                "MX_USART1_UART_Init": "initialize_uart",
                "MX_TIM2_Init": "initialize_timers",
                "MX_TIM1_Init": "initialize_timers",
                "PTR_I2C_Write_Reg_0800527c": "i2c_write_register",
                "DAT_08005280": "i2c_write_register_value",
                "PTR_I2C_Read_Reg_08005284": "i2c_read_register",
                "DAT_08005288": "i2c_read_register_value",
                "PTR_Get_ms_tick_0800528c": "ms_tick",
                "DAT_08005290": "ms_tick_value",
                "HAL_TIM_PWM_Start": "start_pwm",
                "PTR_htim1_08005294": "pwm_timer",
                "mpu6050_init": "initialize_mpu6050",
                "PTR_mpu6050_08005298": "mpu6050",
                "HAL_TIM_Base_Start_IT": "start_timer_interrupt",
                "PTR_htim2_0800529c": "timer_interrupt",
                "startForkserver": "start_forkserver"
            },
            "code": "int initialize_system_08005224(void)\n{\n  HAL_Init();\n  SystemClock_Config();\n  initialize_gpio();\n  initialize_i2c();\n  initialize_uart();\n  initialize_timers();\n  set_PTR_I2C_Write_Reg_0800527c(PTR_I2C_Write_Reg_0800527c, DAT_08005280);\n  set_PTR_I2C_Read_Reg_08005284(PTR_I2C_Read_Reg_08005284, DAT_08005288);\n  set_PTR_Get_ms_tick_0800528c(PTR_Get_PTR_Get_ms_tick_0800528c_0800528c, DAT_08005290);\n  start_pwm((TIM_HandleTypeDef *)PTR_htim1_08005294);\n  start_pwm((TIM_HandleTypeDef *)PTR_htim1_08005294, 0xc);\n  initialize_PTR_mpu6050_08005298((Mpu6050 *)PTR_PTR_mpu6050_08005298_08005298);\n  start_PTR_htim2_0800529c((TIM_HandleTypeDef *)PTR_htim2_0800529c);\n  start_forkserver(0);\n  while(1);\n}",
            "called": [
                "MX_I2C1_Init",
                "mpu6050_init",
                "MX_TIM1_Init",
                "SystemClock_Config",
                "HAL_TIM_Base_Start_IT",
                "MX_GPIO_Init",
                "MX_TIM2_Init",
                "startForkserver",
                "HAL_TIM_PWM_Start",
                "MX_USART1_UART_Init",
                "HAL_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005224",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "initialize_system_08005224"
        },
        "FUN_08005348": {
            "renaming": {
                "FUN_08005348": "initialize_i2c_08005348",
                "HVar1": "init_status",
                "PTR_hi2c1_080053a0": "i2c_config",
                "DAT_080053a4": "i2c_config[0]",
                "DAT_080053a8": "i2c_config[1]"
            },
            "code": "void initialize_i2c_08005348(void)\n{\n  HAL_StatusTypeDef init_status;\n  uint32_t PTR_hi2c1_080053a0[5] = {0};\n  DAT_080053a4 = DAT_080053a8 = *(uint32_t *)PTR_hi2c1_080053a0;\n  PTR_hi2c1_080053a0[2] = PTR_hi2c1_080053a0[3] = PTR_hi2c1_080053a0[4] = 0;\n  PTR_hi2c1_080053a0[3] = 0x4000;\n  init_status = HAL_I2C_Init((I2C_HandleTypeDef *)PTR_hi2c1_080053a0);\n  if (init_status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_080053ac,0x17a);\n  }\n  return;\n}",
            "called": [
                "HAL_I2C_Init",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005348",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_i2c_08005348"
        },
        "FUN_08004378": {
            "renaming": {
                "FUN_08004378": "do_nothing_08004378"
            },
            "code": "\nvoid do_nothing_08004378(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004378",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004378"
        },
        "FUN_080049cc": {
            "renaming": {
                "FUN_080049cc": "calibrate_mpu6050_080049cc",
                "mpu6050": "sensor",
                "acc_roll": "acc_roll_total",
                "acc_pitch": "acc_pitch_total",
                "now": "current_time",
                "num_samples": "num_samples",
                "i": "i",
                "offset_accRoll": "sensor->offset_acc_roll",
                "offset_accPitch": "sensor->offset_acc_pitch",
                "offset_gyroY": "gyro_y_total",
                "offset_gyroX": "gyro_x_total",
                "PTR_Get_ms_tick_08004adc": "PTR_Get_ms_tick_08004adc"
            },
            "code": "void calibrate_mpu6050_080049cc(Mpu6050 *sensor) {\n  uint32_t current_time;\n  float acc_roll_total = 0.0;\n  float acc_pitch_total = 0.0;\n  float gyro_x_total = 0.0;\n  float gyro_y_total = 0.0;\n  int num_samples = 100;\n\n  for (int i = 0; i < num_samples; i++) {\n    mpu6050_update(sensor);\n    float acc_pitch;\n    float acc_roll;\n    mpu6050_calc_acc_pitch_roll(sensor, &acc_pitch, &acc_roll);\n    acc_pitch_total += acc_pitch;\n    acc_roll_total += acc_roll;\n    gyro_x_total += sensor->gyroX;\n    gyro_y_total += sensor->gyroY;\n    current_time = (**(code **)PTR_Get_ms_tick_08004adc)();\n  }\n\n  sensor->offset_gyroX = gyro_x_total / num_samples;\n  sensor->offset_gyroY = gyro_y_total / num_samples;\n  sensor->offset_acc_pitch = acc_pitch_total / num_samples;\n  sensor->offset_acc_roll = acc_roll_total / num_samples;\n}\n",
            "called": [
                "__addsf3",
                "__aeabi_fdiv",
                "mpu6050_update",
                "__floatsisf",
                "mpu6050_calc_acc_pitch_roll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049cc",
            "calling": [
                "mpu6050_init"
            ],
            "imported": false,
            "current_name": "calibrate_mpu6050_080049cc"
        },
        "FUN_08003c94": {
            "renaming": {
                "FUN_08003c94": "initialize_timer_08003c94",
                "TIMx": "timer",
                "Structure": "init",
                "tmpcr1": "cr1",
                "DAT_08003d54": "PTR_valid_timer_1",
                "DAT_08003d58": "PTR_valid_timer_2",
                "DAT_08003d5c": "PTR_valid_timer_3"
            },
            "code": "void initialize_timer_08003c94(TIM_TypeDef *timer, TIM_Base_InitTypeDef *init){\n  uint32_t cr1 = timer->CR1;\n  bool is_valid_timer = (timer == DAT_08003d54 || timer == DAT_08003d58 || timer == DAT_08003d5c || timer == PTR_valid_timer_4);\n  if (is_valid_timer){\n    cr1 = (cr1 & 0xffffff8f) | init->CounterMode;\n  }\n  bool is_valid_clock_division = (timer == DAT_08003d54 || timer == DAT_08003d58 || timer == DAT_08003d5c);\n  if (is_valid_clock_division){\n    cr1 = (cr1 & 0xfffffcff) | init->ClockDivision;\n  }\n  timer->CR1 = (cr1 & 0xffffff7f) | init->AutoReloadPreload;\n  timer->ARR = init->Period;\n  timer->PSC = init->Prescaler;\n  if (timer == DAT_08003d54){\n    timer->RCR = init->RepetitionCounter;\n  }\n  timer->EGR = 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c94",
            "calling": [
                "HAL_TIM_PWM_Init",
                "HAL_TIM_Base_Init"
            ],
            "imported": false,
            "current_name": "initialize_timer_08003c94"
        },
        "FUN_0800884c": {
            "renaming": {
                "FUN_0800884c": "allocate_memory_0800884c",
                "param_1": "heap_start",
                "param_2": "allocation_size",
                "puVar1": "malloc_av",
                "puVar2": "current_mallinfo",
                "iVar3": "new_heap_end",
                "iVar4": "allocation_offset",
                "uVar5": "heap_end"
            },
            "code": "int allocate_memory_0800884c(void* heap_start, int allocation_size) {\n  void* malloc_av = PTR___malloc_av__080088e0;\n  __malloc_lock();\n  uintptr_t heap_end = *(uintptr_t*)(*(uintptr_t*)(malloc_av + 8) + 4) & 0xfffffffc;\n  int allocation_offset = ((0xfef - allocation_size) + heap_end & 0xfffff000) - 0x1000;\n  if (0xfff < allocation_offset) {\n    int new_heap_end = _sbrk_r(heap_start, 0);\n    if (new_heap_end == *(int*)(malloc_av + 8) + heap_end) {\n      new_heap_end = _sbrk_r(heap_start, -allocation_offset);\n      void* current_mallinfo = PTR___malloc_current_mallinfo_080088e4;\n      if (new_heap_end != -1) {\n        int current_heap_end = *(int*)current_mallinfo;\n        *(uintptr_t*)(*(uintptr_t*)(malloc_av + 8) + 4) = heap_end - allocation_offset | 1;\n        *(int*)current_mallinfo = current_heap_end - allocation_offset;\n        __malloc_unlock(heap_start);\n        return 1;\n      }\n      int new_heap_end = _sbrk_r(heap_start, 0);\n      void* sbrk_base = PTR___malloc_sbrk_base_080088e8;\n      uintptr_t new_heap_size = new_heap_end - *(uintptr_t*)(malloc_av + 8);\n      if (0xf < (int)new_heap_size) {\n        int sbrk_base_value = *(int*)sbrk_base;\n        *(uintptr_t*)(*(uintptr_t*)(malloc_av + 8) + 4) = new_heap_size | 1;\n        *(int*)current_mallinfo = new_heap_end - sbrk_base_value;\n      }\n    }\n  }\n  __malloc_unlock(heap_start);\n  return 0;\n}",
            "called": [
                "_sbrk_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800884c",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800884c"
        },
        "FUN_0800901c": {
            "renaming": {
                "FUN_0800901c": "decode_string_0800901c",
                "__s": "str",
                "__c": "c",
                "__n": "n",
                "uVar1": "current_word_1",
                "uVar2": "current_word_2",
                "puVar3": "current_word_ptr",
                "puVar4": "end_word_ptr",
                "uVar5": "current_byte",
                "bVar6": "byte_match"
            },
            "code": "void * decode_string_0800901c(void *str, int c, size_t n) {\n    uint current_byte;\n    uint *current_word_ptr;\n    uint *end_word_ptr;\n    uint current_word;\n    bool byte_match;\n    \n    current_byte = c & 0xff;\n    current_word_ptr = (uint *)str;\n    if (((uint)str & 3) == 0) {\n        while (n > 3) {\n            current_word = *current_word_ptr ^ ((c & 0xffU) << 8 | current_byte);\n            end_word_ptr = current_word_ptr + 1;\n            if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) {\n                goto end_decode_string_0800901c;\n            }\n            n -= 4;\n            current_word_ptr = end_word_ptr;\n        }\n    }\n    end_word_ptr = current_word_ptr;\n    n = (size_t)str + n;\n    if ((uint *)str != (uint *)0x0) {\n        while (true) {\n            if (*end_word_ptr == current_byte) {\n                break;\n            }\n            end_word_ptr = (uint *)((int)end_word_ptr + 1);\n            if (end_word_ptr == (uint *)n) {\n                end_word_ptr = (uint *)0x0;\n                break;\n            }\n        }\n    }\n    end_decode_string_0800901c:\n    return end_word_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800901c",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "decode_string_0800901c"
        },
        "FUN_0800177c": {
            "renaming": {
                "FUN_0800177c": "updateClockSource_0800177c",
                "CLKSource": "clockSource",
                "DAT_080017b0": "clockSourceReg"
            },
            "code": "void updateClockSource_0800177c(uint32_t clockSource)\n{\n  if (clockSource == INTERNAL)\n  {\n    *DAT_080017b0 = *DAT_080017b0 | INTERNAL_CLOCK;\n  }\n  else\n  {\n    *DAT_080017b0 = *DAT_080017b0 & EXTERNAL_CLOCK;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800177c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "updateClockSource_0800177c"
        },
        "FUN_080099ec": {
            "renaming": {
                "FUN_080099ec": "read_first_byte_080099ec",
                "param_1": "error_code",
                "param_2": "output",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "uVar1": "first_byte",
                "uStack_4": "default_output"
            },
            "code": "uint read_first_byte_080099ec(uint error_code, uint *output, byte *buffer, int buffer_size)\n{\n  uint first_byte;\n  uint default_output = 0;\n  if (output == (uint *)0x0) {\n    output = &default_output;\n  }\n  if (buffer == (byte *)0x0) {\n    return 0;\n  }\n  if (buffer_size == 0) {\n    error_code = 0xfffffffe;\n  }\n  else {\n    first_byte = (uint)*buffer;\n    *output = first_byte;\n    if (first_byte != 0) {\n      error_code = 1;\n    }\n  }\n  return error_code;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099ec",
            "calling": [],
            "imported": false,
            "current_name": "read_first_byte_080099ec"
        },
        "FUN_08005598": {
            "renaming": {
                "FUN_08005598": "initialize_UART_08005598",
                "HVar1": "status",
                "PTR_huart1_080055e8": "uart_handle.Instance",
                "DAT_080055ec": "baudrate",
                "PTR_s____src_main_c_080055f0": "error_handler"
            },
            "code": "void initialize_UART_08005598(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t DAT_080055ec = 115200;\n  uint32_t word_length = UART_WORDLENGTH_8B;\n  uint32_t stop_bits = UART_STOPBITS_1;\n  uint32_t parity = UART_PARITY_NONE;\n  uint32_t mode = UART_MODE_TX_RX;\n  uint32_t flow_control = UART_HWCONTROL_NONE;\n  UART_HandleTypeDef uart_handle;\n  PTR_huart1_080055e8 = USART1;\n  uart_handle.Init.BaudRate = DAT_080055ec;\n  uart_handle.Init.WordLength = word_length;\n  uart_handle.Init.StopBits = stop_bits;\n  uart_handle.Init.Parity = parity;\n  uart_handle.Init.Mode = mode;\n  uart_handle.Init.HwFlowCtl = flow_control;\n  status = HAL_UART_Init(&uart_handle);\n  if (status != HAL_OK) {\n    PTR_s____src_main_c_080055f0();\n  }\n}\n",
            "called": [
                "HAL_UART_Init",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005598",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_UART_08005598"
        },
        "FUN_08009adc": {
            "renaming": {
                "FUN_08009adc": "FUNC_08009adc"
            },
            "code": "\nint * FUNC_08009adc(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int *piVar2;\n  int iVar3;\n  int *piVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  size_t sVar8;\n  int *piVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  int iVar13;\n  \n  if (param_2 == (int *)0x0) {\n    piVar4 = (int *)_malloc_r(param_1,param_3);\n    return piVar4;\n  }\n  __malloc_lock();\n  puVar1 = PTR___malloc_av__08009e38;\n  uVar7 = param_2[-1];\n  uVar11 = uVar7 & 0xfffffffc;\n  piVar4 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar10 = 0x10;\n  }\n  else {\n    uVar10 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar10 < 0) goto LAB_08009b8e;\n  }\n  if (uVar10 < param_3) {\nLAB_08009b8e:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  iVar13 = (int)piVar4 + uVar11;\n  uVar12 = uVar11;\n  if ((int)uVar11 < (int)uVar10) {\n    if (*(int *)(PTR___malloc_av__08009e38 + 8) == iVar13) {\n      iVar13 = (*(uint *)(*(int *)(PTR___malloc_av__08009e38 + 8) + 4) & 0xfffffffc) + uVar11;\n      if ((int)(uVar10 + 0x10) <= iVar13) {\n        *(uint *)(PTR___malloc_av__08009e38 + 8) = (int)piVar4 + uVar10;\n        *(uint *)((int)piVar4 + uVar10 + 4) = iVar13 - uVar10 | 1;\n        param_2[-1] = uVar10 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        if ((int)(uVar10 + 0x10) <= (int)(iVar13 + uVar7)) {\n          iVar6 = piVar2[3];\n          piVar4 = piVar2 + 2;\n          iVar3 = *piVar4;\n          sVar8 = uVar11 - 4;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          *(int *)(iVar6 + 8) = iVar3;\n          if (sVar8 < 0x25) {\n            iVar3 = *param_2;\n            piVar9 = piVar4;\n            if (0x13 < sVar8) {\n              piVar2[2] = iVar3;\n              piVar2[3] = param_2[1];\n              iVar3 = param_2[2];\n              if (sVar8 < 0x1c) {\n                param_2 = param_2 + 2;\n                piVar9 = piVar2 + 4;\n              }\n              else {\n                piVar2[4] = iVar3;\n                piVar2[5] = param_2[3];\n                iVar3 = param_2[4];\n                if (sVar8 == 0x24) {\n                  piVar2[6] = iVar3;\n                  piVar2[7] = param_2[5];\n                  iVar3 = param_2[6];\n                  param_2 = param_2 + 6;\n                  piVar9 = piVar2 + 8;\n                }\n                else {\n                  param_2 = param_2 + 4;\n                  piVar9 = piVar2 + 6;\n                }\n              }\n            }\n            *piVar9 = iVar3;\n            piVar9[1] = param_2[1];\n            piVar9[2] = param_2[2];\n          }\n          else {\n            memmove(piVar4,param_2,sVar8);\n          }\n          *(uint *)(puVar1 + 8) = (int)piVar2 + uVar10;\n          *(uint *)((int)piVar2 + uVar10 + 4) = (iVar13 + uVar7) - uVar10 | 1;\n          piVar2[1] = uVar10 | piVar2[1] & 1U;\n          __malloc_unlock(param_1);\n          return piVar4;\n        }\nLAB_08009bb0:\n        uVar12 = uVar11 + uVar7;\n        if ((int)uVar10 <= (int)uVar12) {\n          iVar6 = piVar2[3];\n          piVar9 = piVar2 + 2;\n          iVar3 = *piVar9;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar13 = (int)piVar2 + uVar12;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (uVar11 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          memmove(piVar9,param_2,uVar11 - 4);\n          param_2 = piVar9;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(iVar13 + 4) & 0xfffffffe) + iVar13 + 4) << 0x1f) {\n        uVar5 = *(uint *)(iVar13 + 4) & 0xfffffffc;\n        uVar12 = uVar11 + uVar5;\n        if ((int)uVar12 < (int)uVar10) {\n          if ((int)(uVar7 << 0x1f) < 0) goto LAB_08009b36;\n          piVar2 = (int *)((int)piVar4 - param_2[-2]);\n          uVar7 = piVar2[1] & 0xfffffffc;\n          uVar12 = uVar5 + uVar7 + uVar11;\n          if ((int)uVar12 < (int)uVar10) goto LAB_08009bb0;\n          iVar3 = *(int *)(iVar13 + 8);\n          iVar13 = *(int *)(iVar13 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar13;\n          *(int *)(iVar13 + 8) = iVar3;\n          piVar9 = piVar2 + 2;\n          iVar3 = *piVar9;\n          iVar6 = piVar2[3];\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar13 = (int)piVar2 + uVar12;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (0x24 < uVar11 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          uVar11 = uVar11 - 4;\n          iVar3 = *param_2;\n          piVar2 = piVar9;\n          if (0x13 < uVar11) {\n            piVar4[2] = iVar3;\n            piVar4[3] = param_2[1];\n            iVar3 = param_2[2];\n            if (uVar11 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar4 + 4;\n            }\n            else {\n              piVar4[4] = iVar3;\n              piVar4[5] = param_2[3];\n              iVar3 = param_2[4];\n              if (uVar11 == 0x24) {\n                piVar4[6] = iVar3;\n                piVar4[7] = param_2[5];\n                iVar3 = param_2[6];\n                param_2 = param_2 + 6;\n                piVar2 = piVar4 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar4 + 6;\n              }\n            }\n          }\n          *piVar2 = iVar3;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          param_2 = piVar9;\n        }\n        else {\n          iVar3 = *(int *)(iVar13 + 8);\n          iVar6 = *(int *)(iVar13 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar13 = (int)piVar4 + uVar12;\n          *(int *)(iVar6 + 8) = iVar3;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    piVar2 = (int *)_malloc_r(param_1,param_3);\n    if (piVar2 != (int *)0x0) {\n      if ((int *)((param_2[-1] & 0xfffffffeU) + (int)piVar4) == piVar2 + -2) {\n        uVar12 = uVar11 + (piVar2[-1] & 0xfffffffcU);\n        iVar13 = (int)piVar4 + uVar12;\n        goto LAB_08009c00;\n      }\n      sVar8 = uVar11 - 4;\n      if (sVar8 < 0x25) {\n        iVar13 = *param_2;\n        piVar4 = param_2;\n        piVar9 = piVar2;\n        if (0x13 < sVar8) {\n          *piVar2 = iVar13;\n          piVar2[1] = param_2[1];\n          if (sVar8 < 0x1c) {\n            iVar13 = param_2[2];\n            piVar4 = param_2 + 2;\n            piVar9 = piVar2 + 2;\n          }\n          else {\n            piVar2[2] = param_2[2];\n            piVar2[3] = param_2[3];\n            if (sVar8 == 0x24) {\n              piVar2[4] = param_2[4];\n              piVar2[5] = param_2[5];\n              iVar13 = param_2[6];\n              piVar4 = param_2 + 6;\n              piVar9 = piVar2 + 6;\n            }\n            else {\n              iVar13 = param_2[4];\n              piVar4 = param_2 + 4;\n              piVar9 = piVar2 + 4;\n            }\n          }\n        }\n        *piVar9 = iVar13;\n        piVar9[1] = piVar4[1];\n        piVar9[2] = piVar4[2];\n      }\n      else {\n        memmove(piVar2,param_2,sVar8);\n      }\n      _free_r(param_1,param_2);\n    }\n    __malloc_unlock(param_1);\n    param_2 = piVar2;\n  }\n  else {\nLAB_08009c00:\n    if (uVar12 - uVar10 < 0x10) {\n      piVar4[1] = piVar4[1] & 1U | uVar12;\n      *(uint *)(iVar13 + 4) = *(uint *)(iVar13 + 4) | 1;\n    }\n    else {\n      piVar4[1] = piVar4[1] & 1U | uVar10;\n      *(uint *)((int)piVar4 + uVar10 + 4) = uVar12 - uVar10 | 1;\n      *(uint *)(iVar13 + 4) = *(uint *)(iVar13 + 4) | 1;\n      _free_r(param_1,(int)piVar4 + uVar10 + 8);\n    }\n    __malloc_unlock(param_1);\n  }\n  return param_2;\n}\n\n",
            "called": [
                "memmove",
                "_free_r",
                "__malloc_unlock",
                "_malloc_r",
                "__malloc_lock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009adc",
            "calling": [
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "FUNC_08009adc"
        },
        "FUN_08002640": {
            "renaming": {
                "FUN_08002640": "i2c_write_08002640",
                "hi2c": "i2c_handle",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "Timeout": "timeout",
                "Tickstart": "tickstart",
                "HVar1": "status",
                "uVar2": "tick",
                "iVar3": "loop_count",
                "tmpreg": "temp_register"
            },
            "code": "HAL_StatusTypeDef i2c_write_08002640(I2C_HandleTypeDef *i2c_handle, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint32_t timeout, uint32_t tickstart)\n{\n  HAL_StatusTypeDef status = HAL_OK;\n  uint32_t tickstart_copy = tickstart;\n  i2c_handle->Instance->CR1 |= 0x100;\n  while ((~i2c_handle->Instance->SR1 & 1) != 0)\n  {\n    if ((timeout != 0xffffffff) && ((timeout != 0) && ((HAL_GetTick() - tickstart_copy) > timeout)))\n    {\n      i2c_handle->PreviousState = 0;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  i2c_handle->PreviousState = 0;\n  i2c_handle->State = HAL_I2C_STATE_BUSY_TX;\n  i2c_handle->Mode = HAL_I2C_MODE_MEM;\n  i2c_handle->ErrorCode = HAL_I2C_ERROR_NONE;\n  i2c_handle->pBuffPtr = (uint8_t *)memory_address;\n  i2c_handle->XferSize = memory_address_size;\n  i2c_handle->XferCount = memory_address_size;\n  i2c_handle->pBuffPtr[0] = (uint8_t)device_address & 0xfe;\n  if (memory_address_size == 1)\n  {\n    i2c_handle->XferCount--;\n    i2c_handle->pBuffPtr++;\n  }\n  else\n  {\n    i2c_handle->pBuffPtr[1] = (uint8_t)(memory_address >> 8);\n    i2c_handle->XferCount--;\n    i2c_handle->pBuffPtr++;\n  }\n  status = I2C_MasterTransmit_IT(i2c_handle, device_address, i2c_handle->pBuffPtr, i2c_handle->XferSize);\n  return status;\n}",
            "called": [
                "HAL_GetTick",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002640",
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "imported": false,
            "current_name": "i2c_write_08002640"
        },
        "FUN_08005dfc": {
            "renaming": {
                "FUN_08005dfc": "print_formatted_string_08005dfc",
                "__s": "output_string",
                "__format": "format",
                "local_80": "output_string_pointer",
                "local_78": "max_output_string_length",
                "uStack_74": "max_args_length",
                "local_70": "args_list_pointer",
                "local_6c": "num_chars_written",
                "uStack_8": "in_r2",
                "uStack_4": "in_r3"
            },
            "code": "int print_formatted_string_08005dfc(char* output_string, char* format, ...)\n{\n  int num_chars_written;\n  char* args_list_pointer;\n  char* output_string_pointer [2];\n  int max_output_string_length = 0x7fffffff;\n  int max_args_length = 0x7fffffff;\n  args_list_pointer = (char*)&format + sizeof(format);\n  output_string_pointer[0] = output_string;\n  output_string_pointer[1] = NULL;\n  num_chars_written = _svfprintf_r(*(undefined4*)PTR__impure_ptr_08005e38, output_string_pointer, format, args_list_pointer);\n  *output_string_pointer[0] = '\\0';\n  return num_chars_written;\n}",
            "called": [
                "_svfprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dfc",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "print_formatted_string_08005dfc"
        },
        "FUN_080003f4": {
            "renaming": {
                "FUN_080003f4": "calculate_shifted_value_080003f4",
                "param_1": "num",
                "uVar1": "shifted_value",
                "uVar2": "abs_value",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "shift_amount2",
                "uVar6": "sign_bit",
                "in_r12": "remaining_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_overflow",
                "SBORROW4": "subtraction_overflow",
                "SCARRY4": "addition_overflow"
            },
            "code": "ulonglong calculate_shifted_value_080003f4(uint num) {\n  uint leading_zeroes = 0;\n  while (num >>= 1) {\n    leading_zeroes++;\n  }\n  return 31 - leading_zeroes;\n}\n\n\nulonglong calculate_shifted_value_080003f4(uint num) {\n  if (num == 0) {\n    return 0;\n  }\n  uint sign_bit = num & 0x80000000;\n  uint abs_value = num;\n  if ((int)sign_bit < 0) {\n    abs_value = -num;\n  }\n  uint shifted_value = 0;\n  int leading_zeroes = calculate_shifted_value_080003f4(abs_value);\n  uint shift_amount = leading_zeroes + 0x15;\n  if (shift_amount < 0x20) {\n    shifted_value = abs_value << (shift_amount & 0xff);\n    shifted_value |= abs_value >> ((0x20 - leading_zeroes - 0xc) & 0xff);\n  } else {\n    uint remaining_bits = 0x20 - leading_zeroes;\n    shifted_value = abs_value << (leading_zeroes & 0xff);\n    shifted_value |= 0U >> ((0x20 - leading_zeroes) & 0xff);\n    if (remaining_bits < 0x433) {\n      return ((shifted_value + (0x432 - shift_amount) * 0x100000) | sign_bit) << 32;\n    }\n    uint trailing_bits = ~(0x432 - shift_amount);\n    if (trailing_bits > 0x1e) {\n      return ((num & 0x80000000ffffffff) << 32) | (shifted_value >> (trailing_bits - 0x1f));\n    }\n    int shift_amount2 = trailing_bits - 0x13;\n    if (shift_amount2 == 0 || (shift_amount2 < 0) != ((trailing_bits - 0x1f) < 0xc)) {\n      trailing_bits++;\n      return ((sign_bit | (shifted_value >> (trailing_bits & 0xff))) << 32) | (shifted_value << (0x20 - trailing_bits & 0xff));\n    }\n    return ((num & 0x80000000ffffffff) << 32) | (shifted_value >> (0x20 - (0xc - shift_amount2) & 0xff));\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003f4",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080003f4"
        },
        "FUN_0800045c": {
            "renaming": {
                "FUN_0800045c": "shift_and_add_0800045c",
                "param_1": "x",
                "param_2": "y",
                "bVar1": "lsb",
                "uVar2": "low",
                "uVar3": "shift",
                "uVar4": "w",
                "iVar5": "carry",
                "uVar6": "bit",
                "iVar7": "total_shift",
                "uVar8": "high",
                "bVar9": "sign",
                "bVar10": "bit2",
                "bVar11": "negative_shift"
            },
            "code": "ulonglong shift_and_add_0800045c(uint x, uint y)\n{\n  uint carry = 0;\n  uint u = y >> 22;\n  uint v = y << 10;\n  uint w = x >> 22;\n  uint z = x << 10;\n  if (u != 0)\n  {\n    if (u >= 2)\n    {\n      if (u >= 4)\n      {\n        w += 3;\n        if (u >= 8)\n        {\n          w += 3;\n        }\n      }\n      else\n      {\n        w += 2;\n      }\n    }\n    else\n    {\n      ++w;\n    }\n    z = (x << (32 - w)) | (y >> w);\n    y = (y << (32 - w)) >> (32 - w);\n    carry = w + 34;\n  }\n  if (y >= 0x200000)\n  {\n    bool bit = y & 1;\n    y >>= 1;\n    uint lsb = x & 1;\n    x >>= 1;\n    if ((carry + 1) * 0x200000 > 0xffc00000)\n    {\n      return 0x7ff0000000000000;\n    }\n    if (y == 0x80000000)\n    {\n      bit = lsb;\n    }\n    x += lsb + bit;\n    carry += bit;\n  }\n  bool sign = y & 0x80000000;\n  y <<= 1;\n  x = (x << 1) | sign;\n  carry -= y == 0;\n  while (y & 0x100000 == 0)\n  {\n    y <<= 1;\n    x = (x << 1) | (carry >> 31);\n    carry = (carry << 1) | (x >> 32 & 1);\n    x &= 0xffffffff;\n  }\n  int shift = __builtin_clz(y) - 11;\n  uint high = shift < 0 ? 0 : x >> (32 - shift);\n  uint low = shift < 0 ? x : (x << shift) | (y >> (11 + shift));\n  if (shift <= carry)\n  {\n    return ((ulonglong)low + ((ulonglong)(carry - shift) << 32));\n  }\n  uint over = ~(carry - shift) + 1;\n  if (over > 30)\n  {\n    return (ulonglong)(low >> (over - 31));\n  }\n  int shift2 = over - 19;\n  if (shift2 == 0 || (shift2 < 0) != (over - 31 < 0))\n  {\n    over++;\n    return ((ulonglong)low >> over) | ((ulonglong)high << (32 - over));\n  }\n  return (ulonglong)(high >> (32 - (over - 19))) | ((ulonglong)low << (over - 13));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800045c",
            "calling": [],
            "imported": false,
            "current_name": "shift_and_add_0800045c"
        },
        "FUN_0800166c": {
            "renaming": {
                "FUN_0800166c": "calculate_priority_bits_0800166c",
                "PriorityGroup": "priority_group",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "SubPriorityBits": "sub_priority_bits",
                "PreemptPriorityBits": "preempt_priority_bits",
                "PriorityGroupTmp": "priority_group_tmp",
                "uVar1": "priority_group_bits",
                "uVar2": "num_sub_priority_bits"
            },
            "code": "uint32_t calculate_priority_bits_0800166c(uint32_t priority_group, uint32_t preempt_priority, uint32_t sub_priority) {\n  uint32_t sub_priority_bits;\n  uint32_t preempt_priority_bits;\n  uint32_t priority_group_tmp;\n  uint32_t priority_group_bits = priority_group & 0b111;\n  uint32_t num_sub_priority_bits = 7 - priority_group_bits;\n  if (num_sub_priority_bits > 3) {\n    num_sub_priority_bits = 4;\n  }\n  if (priority_group_bits < 4) {\n    priority_group_bits = 0;\n  }\n  else {\n    priority_group_bits -= 3;\n  }\n  sub_priority_bits = sub_priority & ~(~0 << (priority_group_bits & 0xff));\n  preempt_priority_bits = (~(~0 << (num_sub_priority_bits & 0xff)) & preempt_priority) << (priority_group_bits & 0xff);\n  return sub_priority_bits | preempt_priority_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800166c",
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "imported": false,
            "current_name": "calculate_priority_bits_0800166c"
        },
        "FUN_0800360c": {
            "renaming": {
                "FUN_0800360c": "enable_timer_interrupt_0800360c",
                "*htim": "*timer",
                "Instance": "TIMx",
                "DIER": "TIM_DIER_UIE",
                "CR1": "TIM_CR1_CEN",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef enable_timer_interrupt_0800360c(TIM_HandleTypeDef *timer)\n{\n  timer->Instance->DIER |= TIM_DIER_UIE;\n  timer->Instance->CR1 |= TIM_CR1_CEN;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800360c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "enable_timer_interrupt_0800360c"
        },
        "FUN_08005d68": {
            "renaming": {
                "FUN_08005d68": "memset_custom_08005d68",
                "__s": "destination",
                "__c": "value",
                "__n": "num_bytes",
                "puVar1": "destination_byte",
                "puVar2": "destination_word",
                "puVar3": "destination_temp_word",
                "uVar4": "num_bytes_minus_one",
                "uVar5": "value_word",
                "bVar6": "done_with_byte_loop"
            },
            "code": "void * memset_custom_08005d68(void *destination, int value, size_t num_bytes) {\n  uint32_t *destination_word = (uint32_t *)destination;\n  uint32_t value_word = (value & 0xFF) | ((value & 0xFF) << 8) | ((value & 0xFF) << 16) | ((value & 0xFF) << 24);\n  \n  if (((uint32_t)destination_word & 3) != 0) {\n    uint8_t *destination_byte = (uint8_t *)destination_word;\n    if (num_bytes == 0) {\n      return destination;\n    }\n    uint32_t num_bytes_minus_one = num_bytes - 1;\n    while (true) {\n      destination_byte++;\n      *destination_byte = (uint8_t)value;\n      num_bytes = num_bytes_minus_one;\n      if (((uint32_t)destination_byte & 3) == 0) {\n        break;\n      }\n      if (num_bytes_minus_one == 0) {\n        return destination;\n      }\n      num_bytes_minus_one--;\n    }\n    destination_word = (uint32_t *)(destination_byte + 1);\n  }\n  \n  if (num_bytes >> 4) {\n    uint32_t num_words = num_bytes >> 4;\n    for (uint32_t i = 0; i < num_words; i++) {\n      destination_word[0] = value_word;\n      destination_word[1] = value_word;\n      destination_word[2] = value_word;\n      destination_word[3] = value_word;\n      destination_word += 4;\n    }\n    num_bytes &= 0xF;\n  }\n  \n  if (num_bytes) {\n    uint8_t *destination_byte = (uint8_t *)destination_word;\n    uint8_t *destination_end = destination_byte + num_bytes;\n    while (destination_byte != destination_end) {\n      *destination_byte++ = (uint8_t)value;\n    }\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d68",
            "calling": [
                "_calloc_r",
                "flush_strbuf"
            ],
            "imported": false,
            "current_name": "memset_custom_08005d68"
        },
        "FUN_080035a4": {
            "renaming": {
                "FUN_080035a4": "initializeTimer_080035a4",
                "htim": "timer",
                "HVar1": "status"
            },
            "code": "HAL_StatusTypeDef initializeTimer_080035a4(TIM_HandleTypeDef *timer)\n{\n  HAL_StatusTypeDef status;\n  \n  if (timer == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (timer->State == HAL_TIM_STATE_RESET) {\n      timer->Lock = HAL_UNLOCKED;\n      HAL_TIM_Base_MspInit(timer);\n    }\n    timer->State = HAL_TIM_STATE_BUSY;\n    TIM_Base_SetConfig(timer->Instance,&timer->Init);\n    timer->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "HAL_TIM_Base_MspInit",
                "TIM_Base_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035a4",
            "calling": [
                "MX_TIM1_Init",
                "MX_TIM2_Init"
            ],
            "imported": false,
            "current_name": "initializeTimer_080035a4"
        },
        "FUN_080041ea": {
            "renaming": {
                "FUN_080041ea": "updateChannelState_080041ea",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "channelState",
                "tmp": "channelMask"
            },
            "code": "void updateChannelState_080041ea(TIM_TypeDef *timer, uint32_t channel, uint32_t channelState)\n{\n  uint32_t channelMask = 1 << (channel & 0xff);\n  timer->CCER = (timer->CCER & ~channelMask) | (channelState << (channel & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ea",
            "calling": [
                "HAL_TIM_PWM_Start"
            ],
            "imported": false,
            "current_name": "updateChannelState_080041ea"
        },
        "FUN_08004ae0": {
            "renaming": {
                "FUN_08004ae0": "read_MPU6050_data_08004ae0",
                "mpu6050": "mpu6050_data",
                "raw": "raw_data",
                "gz": "gz_value",
                "gy": "gy_value",
                "gx": "gx_value",
                "t": "t_value",
                "az": "az_value",
                "ay": "ay_value",
                "ax": "ax_value",
                "fVar1": "data_float"
            },
            "code": "void read_MPU6050_data_08004ae0(Mpu6050 *mpu6050)\n{\n  float acceleration_X;\n  float acceleration_Y;\n  float acceleration_Z;\n  float temperature;\n  float gyro_X;\n  float gyro_Y;\n  float gyro_Z;\n  uint8_t raw_data[14];\n  int16_t gz;\n  int16_t gy;\n  int16_t gx;\n  int16_t t;\n  int16_t az;\n  int16_t ay;\n  int16_t ax;\n  (**(code **)PTR_I2C_Read_Reg_08004bd4)(0xd0,0x3b,raw_data,0xe);\n  acceleration_X = (float)__floatsisf((int)CONCAT11(raw_data[0],raw_data[1]));\n  mpu6050->accX = acceleration_X;\n  acceleration_Y = (float)__floatsisf((int)CONCAT11(raw_data[2],raw_data[3]));\n  mpu6050->accY = acceleration_Y;\n  acceleration_Z = (float)__floatsisf((int)CONCAT11(raw_data[4],raw_data[5]));\n  mpu6050->accZ = acceleration_Z;\n  temperature = (float)__floatsisf((int)CONCAT11(raw_data[6],raw_data[7]));\n  mpu6050->temp = temperature;\n  gyro_X = (float)__floatsisf((int)CONCAT11(raw_data[8],raw_data[9]));\n  mpu6050->gyroX = gyro_X;\n  gyro_Y = (float)__floatsisf((int)CONCAT11(raw_data[10],raw_data[11]));\n  mpu6050->gyroY = gyro_Y;\n  gyro_Z = (float)__floatsisf((int)CONCAT11(raw_data[12],raw_data[13]));\n  mpu6050->gyroZ = gyro_Z;\n  return;\n}",
            "called": [
                "__floatsisf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ae0",
            "calling": [
                "mpu6050_calibrate",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "read_MPU6050_data_08004ae0"
        },
        "FUN_080015fc": {
            "renaming": {
                "FUN_080015fc": "getBitsFromData_080015fc",
                "DAT_08001614": "data",
                "PTR_": "",
                "uint32_t": "unsigned int",
                "bits": "result",
                "shiftedData": "shiftedData",
                "data": "data"
            },
            "code": "PTR_uPTR_iPTR_nPTR_tPTR_3PTR_2PTR__PTR_tPTR_ getBitsFromData_080015fc(PTR_vPTR_oPTR_iPTR_dPTR_)PTR_\nPTR_{PTR_\nPTR_ PTR_ PTR_ PTR_ PTR_uPTR_iPTR_nPTR_tPTR_3PTR_2PTR__PTR_tPTR_ PTR_DPTR_APTR_TPTR__PTR_0PTR_8PTR_0PTR_0PTR_1PTR_6PTR_1PTR_4PTR_ PTR_=PTR_ PTR_*PTR_(PTR_uPTR_iPTR_nPTR_tPTR_ PTR_*PTR_)PTR_(PTR_DPTR_APTR_TPTR__PTR_0PTR_8PTR_0PTR_0PTR_1PTR_6PTR_1PTR_4PTR_ PTR_+PTR_ PTR_0PTR_xPTR_cPTR_)PTR_;PTR_\nPTR_ PTR_ PTR_ PTR_ PTR_uPTR_iPTR_nPTR_tPTR_3PTR_2PTR__PTR_tPTR_ PTR_sPTR_hPTR_iPTR_fPTR_tPTR_ePTR_dPTR_DPTR_aPTR_tPTR_aPTR_ PTR_=PTR_ PTR_DPTR_APTR_TPTR__PTR_0PTR_8PTR_0PTR_0PTR_1PTR_6PTR_1PTR_4PTR_ PTR_>PTR_>PTR_ PTR_8PTR_;PTR_\nPTR_ PTR_ PTR_ PTR_ PTR_uPTR_iPTR_nPTR_tPTR_3PTR_2PTR__PTR_tPTR_ PTR_bPTR_iPTR_tPTR_sPTR_ PTR_=PTR_ PTR_sPTR_hPTR_iPTR_fPTR_tPTR_ePTR_dPTR_DPTR_aPTR_tPTR_aPTR_ PTR_&PTR_ PTR_7PTR_;PTR_\nPTR_ PTR_ PTR_ PTR_ PTR_rPTR_ePTR_tPTR_uPTR_rPTR_nPTR_ PTR_bPTR_iPTR_tPTR_sPTR_;PTR_\nPTR_}PTR_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015fc",
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "imported": false,
            "current_name": "getBitsFromData_080015fc"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "is_init_complete_08000110",
                "param_1": "init_ptr",
                "PTR_completed_8655_08000128": "has_completed",
                "DAT_0800012c": "init_value",
                "PTR__init_08000130": "init"
            },
            "code": "bool is_init_complete_08000110(bool* PTR_completed_8655_08000128, int* DAT_0800012c, bool* PTR__init_08000130_ptr) {\n  if (*PTR_completed_8655_08000128 == false) {\n    if (*DAT_0800012c != 0) {\n      PTR__init_08000130_ptr = &PTR__init_08000130;\n    }\n    *PTR_completed_8655_08000128 = true;\n  }\n  return *PTR__init_08000130_ptr;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "is_init_complete_08000110"
        },
        "FUN_08003504": {
            "renaming": {
                "FUN_08003504": "getSystemCoreClockFrequency_08003504",
                "PTR_SystemCoreClock_08003514": "systemCoreClockPtr"
            },
            "code": "uint32_t getSystemCoreClockFrequency_08003504(void)\n{\n  uint32_t* PTR_SystemCoreClock_08003514 = (uint32_t*)PTR_SystemCoreClock_08003514;\n  return *PTR_SystemCoreClock_08003514;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003504",
            "calling": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "getSystemCoreClockFrequency_08003504"
        },
        "FUN_08000aa4": {
            "renaming": {
                "FUN_08000aa4": "FUNC_08000aa4"
            },
            "code": "\nuint FUNC_08000aa4(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa4",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "mpu6050_calc_pitch"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa4"
        },
        "FUN_08000c2c": {
            "renaming": {
                "FUN_08000c2c": "calculate_hash_08000c2c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "hash_input_1",
                "uVar2": "hash_input_2",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount",
                "iVar5": "constant_1",
                "uVar6": "shifted_input_1"
            },
            "code": "uint calculate_hash_08000c2c(uint input_1, uint input_2)\n{\n  if ((input_1 | input_2) == 0) {\n    return input_1;\n  }\n  uint hash_input_1 = input_1;\n  uint hash_input_2 = input_2;\n  if (input_2 == 0) {\n    hash_input_1 = 0;\n    hash_input_2 = input_1;\n  }\n  int constant_1 = 0x5b000000;\n  if (input_2 == 0) {\n    constant_1 = 0x4b000000;\n  }\n  int leading_zeroes = count_leading_zeroes(hash_input_2);\n  uint shift_amount = leading_zeroes - 8;\n  constant_1 = constant_1 + -0x800000 + shift_amount * -0x800000;\n  if (leading_zeroes < 8) {\n    uint shifted_input_2 = hash_input_2 << (leading_zeroes + 0x18U & 0xff);\n    hash_input_2 = constant_1 + ((hash_input_2 >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_input_2 >> 0x1f));\n    if ((hash_input_1 | shifted_input_2 << 1) == 0) {\n      hash_input_2 = hash_input_2 & ~(shifted_input_2 >> 0x1f);\n    }\n    return hash_input_2;\n  }\n  uint shifted_input_1 = hash_input_1 << (shift_amount & 0xff);\n  hash_input_2 = constant_1 + (hash_input_2 << (shift_amount & 0xff)) + (hash_input_1 >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < shifted_input_1);\n  if (shifted_input_1 == 0x80000000) {\n    hash_input_2 = hash_input_2 & 0xfffffffe;\n  }\n  return hash_input_2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c2c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_hash_08000c2c"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "FUNC_08000aa8"
            },
            "code": "\nuint FUNC_08000aa8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000bde;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa8",
            "calling": [
                "mpu6050_calibrate",
                "__aeabi_frsub",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa8"
        },
        "FUN_080009ac": {
            "renaming": {
                "FUN_080009ac": "isEndOfInput_080009ac",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfInput_080009ac(void)\n{\n  char currentChar;\n  __aeabi_cdcmpeq();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009ac",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "isEndOfInput_080009ac"
        },
        "FUN_08001cb8": {
            "renaming": {
                "FUN_08001cb8": "do_nothing_08001cb8"
            },
            "code": "\nvoid do_nothing_08001cb8(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cb8",
            "calling": [
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08001cb8"
        },
        "FUN_0800438a": {
            "renaming": {
                "FUN_0800438a": "initialize_uart_0800438a",
                "huart": "uart",
                "HVar1": "status"
            },
            "code": "HAL_StatusTypeDef initialize_uart_0800438a(UART_HandleTypeDef *uart)\n{\n  HAL_StatusTypeDef status;\n  \n  if (uart == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (uart->gState == HAL_UART_STATE_RESET) {\n      uart->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(uart);\n    }\n    uart->gState = HAL_UART_STATE_BUSY;\n    uart->Instance->CR1 &= ~(1 << 13);\n    UART_SetConfig(uart);\n    uart->Instance->CR2 &= ~(1 << 11);\n    uart->Instance->CR3 &= ~(1 << 2);\n    uart->Instance->CR1 |= (1 << 13);\n    uart->ErrorCode = 0;\n    uart->gState = HAL_UART_STATE_READY;\n    uart->RxState = HAL_UART_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "HAL_UART_MspInit",
                "UART_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800438a",
            "calling": [
                "MX_USART1_UART_Init"
            ],
            "imported": false,
            "current_name": "initialize_uart_0800438a"
        },
        "FUN_080014f0": {
            "renaming": {
                "FUN_080014f0": "initializeSystem_080014f0",
                "FUN_080014f0Tick": "initializeSystemTick",
                "HAL_NVIC_SetPriorityGrouping": "NVIC_SetPriorityGrouping",
                "HAL_MspInit": "MspInit",
                "*DAT_08001518": "ptr_dat_08001518"
            },
            "code": "HAL_StatusTypeDef initializeSystem_080014f0(void)\n{\n  uint32_t* *DAT_08001518 = DAT_08001518;\n  **DAT_08001518 |= 0x10;\n  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n  initializeSystem_080014f0Tick(0xf);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_MspInit",
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeSystem_080014f0"
        },
        "FUN_0800046c": {
            "renaming": {
                "FUN_0800046c": "calculate_double_precision_0800046c",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "bVar1": "byte_value",
                "uVar2": "first_value",
                "uVar3": "second_value",
                "iVar5": "bit_count",
                "uVar6": "shift_value",
                "count_leading_zeroes_result": "count_leading_zeroes_result",
                "iVar7": "shift_amount",
                "uVar8": "sign_bit",
                "uVar9": "high_bits",
                "bVar10": "carry_flag",
                "sign_bit_set": "sign_bit_set",
                "bVar11": "overflow_flag",
                "bVar12": "shift_amount_sign"
            },
            "code": "ulonglong calculate_double_precision_0800046c(uint first_parameter, uint second_parameter) {\n  byte byte_value;\n  uint first_value;\n  uint second_value;\n  int bit_count;\n  uint shift_value;\n  int count_leading_zeroes_result;\n  bool carry_flag;\n  bool sign_bit_set;\n  bool overflow_flag;\n  if ((first_parameter | second_parameter) == 0) {\n    return CONCAT44(second_parameter, first_parameter);\n  }\n  uint sign_bit = second_parameter & 0x80000000;\n  second_value = second_parameter;\n  if ((int)sign_bit < 0) {\n    sign_bit_set = first_parameter != 0;\n    first_parameter = -first_parameter;\n    second_value = -second_parameter - (uint)sign_bit_set;\n  }\n  int shift_amount = 0x432;\n  uint high_bits = second_value >> 0x16;\n  if (high_bits != 0) {\n    shift_amount = 3;\n    if (second_value >> 0x19 != 0) {\n      shift_amount = 6;\n    }\n    if (second_value >> 0x1c != 0) {\n      shift_amount = shift_amount + 3;\n    }\n    uint shift_value = shift_amount - ((int)second_value >> 0x1f);\n    first_value = first_parameter << (0x20 - shift_value & 0xff);\n    first_parameter = first_parameter >> (shift_value & 0xff) | second_value << (0x20 - shift_value & 0xff);\n    second_value = second_value >> (shift_value & 0xff);\n    shift_amount = shift_value + 0x432;\n  }\n  if (0xfffff < second_value) {\n    if (0x1fffff < second_value) {\n      uint low_bit = second_value & 1;\n      second_value = second_value >> 1;\n      byte_value = (byte)first_parameter;\n      first_parameter = (uint)(low_bit != 0) << 0x1f | first_parameter >> 1;\n      first_value = (uint)(byte_value & 1) << 0x1f | first_value >> 1;\n      shift_amount = shift_amount + 1;\n      if (0xffbfffff < (uint)(shift_amount * 0x200000)) {\n        return (ulonglong)(sign_bit | 0x7ff00000) << 0x20;\n      }\n    }\n    while (true) {\n      overflow_flag = 0x7fffffff < first_value;\n      if (first_value == 0x80000000) {\n        overflow_flag = (first_parameter & 1) != 0;\n      }\n      return CONCAT44(second_value + shift_amount * 0x100000 + (uint)CARRY4(first_parameter, (uint)overflow_flag) | sign_bit,\n                      first_parameter + overflow_flag);\n      if ((second_value & 0x100000) == 0) {\n        break;\n      }\n      uint low_bit = first_parameter & 1;\n      first_parameter = first_parameter >> 1 | (uint)(second_value & 1) << 0x1f;\n      second_value = second_value >> 1 | (uint)(low_bit != 0) << 0x14;\n      shift_amount = shift_amount + 1;\n    }\n  }\n  bool high_bit_set = (high_bits & 0x80000000) != 0;\n  high_bits = high_bits << 1;\n  uint double_first_parameter = first_parameter * 2;\n  carry_flag = CARRY4(first_parameter, first_parameter);\n  first_parameter = double_first_parameter + (uint)high_bit_set;\n  second_value = second_value * 2 + (uint)(carry_flag || CARRY4(double_first_parameter, (uint)high_bit_set));\n  shift_amount = shift_amount - 1;\n  if ((second_value & 0x100000) != 0) {\n    while (true) {\n      overflow_flag = 0x7fffffff < first_value;\n      if (first_value == 0x80000000) {\n        overflow_flag = (first_parameter & 1) != 0;\n      }\n      return CONCAT44(second_value + shift_amount * 0x100000 + (uint)CARRY4(first_parameter, (uint)overflow_flag) | sign_bit,\n                      first_parameter + overflow_flag);\n      if ((second_value & 0x100000) == 0) {\n        break;\n      }\n      uint low_bit = first_parameter & 1;\n      first_parameter = first_parameter >> 1 | (uint)(second_value & 1) << 0x1f;\n      second_value = second_value >> 1 | (uint)(low_bit != 0) << 0x14;\n      shift_amount = shift_amount + 1;\n    }\n  }\n  if (second_value == 0) {\n    first_value = 0;\n    second_value = first_parameter;\n  }\n  count_leading_zeroes_result = count_leading_zeroes(second_value);\n  if (second_value == 0) {\n    count_leading_zeroes_result = count_leading_zeroes_result + 0x20;\n  }\n  shift_value = count_leading_zeroes_result - 0xb;\n  bool shift_amount_sign = SBORROW4(shift_value, 0x20);\n  int shift_amount_check = count_leading_zeroes_result - 0x2b;\n  bool shift_amount_negative = (int)shift_amount_check < 0;\n  bool shift_amount_zero = shift_amount_check == 0;\n  if ((int)shift_value < 0x20) {\n    shift_amount_sign = SCARRY4(shift_amount_check, 0xc);\n    count_leading_zeroes_result = count_leading_zeroes_result + -0x1f;\n    shift_amount_negative = count_leading_zeroes_result < 0;\n    shift_amount_zero = count_leading_zeroes_result == 0;\n    shift_value = shift_value;\n    if (!(shift_amount_zero || shift_amount_negative == shift_amount_sign)) {\n      first_value = first_value << (shift_value & 0xff);\n      second_value = second_value >> (0xcU - count_leading_zeroes_result & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (shift_amount_zero || shift_amount_negative == shift_amount_sign) {\n    shift_value = 0x20 - shift_value;\n  }\n  second_value = second_value << (shift_value & 0xff);\n  if (shift_amount_zero || shift_amount_negative == shift_amount_sign) {\n    second_value = second_value | first_parameter >> (shift_value & 0xff);\n  }\n  if (shift_amount_zero || shift_amount_negative == shift_amount_sign) {\n    first_parameter = first_parameter << (shift_value & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shift_value <= shift_amount) {\n    return CONCAT44(second_value + (shift_amount - shift_value) * 0x100000 | sign_bit, first_parameter);\n  }\n  uint shift_difference = ~(shift_amount - shift_value);\n  if (0x1e < (int)shift_difference) {\n    return CONCAT44(second_parameter, second_value >> (shift_difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  int shift_amount_check2 = shift_difference - 0x13;\n  if (shift_amount_check2 == 0 || shift_amount_check2 < 0 != SCARRY4(shift_difference - 0x1f, 0xc)) {\n    shift_difference = shift_difference + 1;\n    return CONCAT44(sign_bit | second_value >> (shift_difference & 0xff), first_parameter >> (shift_difference & 0xff) | second_value << (0x20 - shift_difference & 0xff));\n  }\n  return CONCAT44(second_parameter, first_parameter >> (0x20 - (0xcU - shift_amount_check2) & 0xff) | second_value << (0xcU - shift_amount_check2 & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800046c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_double_precision_0800046c"
        },
        "FUN_080009c0": {
            "renaming": {
                "FUN_080009c0": "is_cd_equal_080009c0",
                "in_CY": "is_carry_set",
                "in_ZR": "is_zero_set"
            },
            "code": "bool is_cd_equal_080009c0(void)\n{\n  bool is_carry_set;\n  bool is_zero_set;\n  __aeabi_cdcmpeq();\n  return !is_carry_set || is_zero_set;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c0",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "is_cd_equal_080009c0"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "set_OC_config_08003f18",
                "TIMx": "timer",
                "OC_Config": "config",
                "uVar1": "oc_mode",
                "uVar2": "oc_polarity_shifted",
                "tmpccmrx": "tmp_ccmrx",
                "tmpcr2": "tmp_cr2",
                "tmpccer": "tmp_ccer",
                "DAT_08003ff4": "PTR_08003ff4"
            },
            "code": "void set_OC_config_08003f18(TIM_TypeDef *timer, TIM_OC_InitTypeDef *config)\n{\n  uint32_t tmp_ccmrx;\n  uint32_t tmp_cr2;\n  uint32_t tmp_ccer;\n  uint32_t oc_polarity_shifted;\n  uint32_t oc_npolarity_shifted;\n  uint32_t oc_idle_state_shifted;\n  uint32_t oc_nidle_state_shifted;\n\n  // Disable complementary output\n  timer->CCER &= ~(1 << 8);\n\n  tmp_cr2 = timer->CR2;\n  uint32_t oc_mode = config->OCMode;\n  uint32_t oc_polarity = config->OCPolarity;\n  oc_polarity_shifted = oc_polarity << 8 | timer->CCER & ~(1 << 9);\n\n  if (timer == DAT_08003ff4) {\n    uint32_t oc_npolarity = config->OCNPolarity;\n    oc_npolarity_shifted = oc_npolarity << 8 | oc_polarity_shifted & ~(1 << 11);\n    uint32_t oc_idle_state = config->OCIdleState;\n    uint32_t oc_nidle_state = config->OCNIdleState;\n    oc_idle_state_shifted = oc_idle_state << 4 | tmp_cr2 & ~(3 << 12);\n    oc_nidle_state_shifted = oc_nidle_state << 4 | oc_idle_state_shifted & ~(3 << 14);\n    tmp_cr2 = oc_nidle_state_shifted;\n  }\n\n  tmp_ccmrx = oc_mode | timer->CCMR2 & ~(3 << 8);\n  timer->CCR3 = config->Pulse;\n  timer->CCER = oc_npolarity_shifted;\n  timer->CR2 = tmp_cr2;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "set_OC_config_08003f18"
        },
        "FUN_080097cc": {
            "renaming": {
                "FUN_080097cc": "copy_data_080097cc",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "src_length",
                "pvVar1": "src_ptr_1",
                "pvVar2": "src_ptr_2",
                "iVar3": "src_length_2",
                "pvVar4": "dest_ptr_1",
                "pvVar5": "dest_ptr_2",
                "ppvVar6": "src_ptr_3",
                "ppvVar7": "src_ptr_4",
                "__src": "src_data",
                "__n": "src_data_length"
            },
            "code": "unsigned int copy_data_080097cc(void* dest, void** src, int* src_length) {\n  void *src_ptr_1;\n  void *src_ptr_2;\n  int src_length_2;\n  void *dest_ptr_1;\n  void *dest_ptr_2;\n  void **src_ptr_3;\n  void **src_ptr_4;\n  void *src_data;\n  size_t src_data_length;\n  \n  if (src_length[2] != 0) {\n    src_ptr_1 = *src;\n    dest_ptr_1 = src[2];\n    src_ptr_4 = (void **)*src_length;\n    do {\n      do {\n        src_ptr_3 = src_ptr_4 + 2;\n        src_data = *src_ptr_4;\n        src_ptr_2 = src_ptr_4[1];\n        src_ptr_4 = src_ptr_3;\n      } while (src_ptr_2 == NULL);\n      dest_ptr_2 = src_ptr_2;\n      if ((dest_ptr_1 <= src_ptr_2) && ((dest_ptr_2 = dest_ptr_1, (*(ushort *)(src + 3) & 0x480) != 0))) {\n        src_data_length = (int)src_ptr_1 - (int)src[4];\n        dest_ptr_1 = (void *)(((int)src[5] * 3) / 2);\n        src_ptr_1 = (void *)((int)src_ptr_2 + src_data_length + 1);\n        if (dest_ptr_1 < src_ptr_1) {\n          dest_ptr_1 = src_ptr_1;\n        }\n        if ((int)((uint)*(ushort *)(src + 3) << 0x15) < 0) {\n          dest_ptr_2 = (void *)malloc_r(dest_ptr_2,dest_ptr_1);\n          if (dest_ptr_2 == NULL) {\n            return 0xffffffff;\n          }\n          memcpy(dest_ptr_2,src[4],src_data_length);\n          *(ushort *)(src + 3) = *(ushort *)(src + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          dest_ptr_2 = (void *)realloc_r(dest_ptr_2,src_data_length);\n          if (dest_ptr_2 == NULL) {\n            free_r(dest_ptr_1,src[4]);\n            return 0xffffffff;\n          }\n        }\n        src_ptr_1 = (void *)((int)dest_ptr_2 + src_data_length);\n        src[5] = dest_ptr_1;\n        src[4] = dest_ptr_2;\n        *src = src_ptr_1;\n        src[2] = (void *)((int)dest_ptr_1 - src_data_length);\n        dest_ptr_2 = src_ptr_2;\n      }\n      memmove(dest_ptr_1,src_data,(size_t)dest_ptr_2);\n      src_length_2 = src_length[2];\n      dest_ptr_1 = (void *)((int)src[2] - (int)dest_ptr_2);\n      src_ptr_1 = (void *)((int)*src + (int)dest_ptr_2);\n      src[2] = dest_ptr_1;\n      *src = src_ptr_1;\n      src_length[2] = src_length_2 - (int)src_ptr_2;\n    } while (src_length_2 - (int)src_ptr_2 != 0);\n  }\n  src_length[1] = 0;\n  return 0;\n}",
            "called": [
                "memcpy",
                "_realloc_r",
                "memmove",
                "_free_r",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080097cc",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "copy_data_080097cc"
        },
        "FUN_08001f6c": {
            "renaming": {
                "FUN_08001f6c": "FUNC_08001f6c"
            },
            "code": "\nHAL_StatusTypeDef\nFUNC_08001f6c(I2C_HandleTypeDef *hi2c,uint16_t DevAddress,uint16_t MemAddress,uint16_t MemAddSize\n                ,uint8_t *pData,uint16_t Size,uint32_t Timeout)\n\n{\n  uint uVar1;\n  HAL_StatusTypeDef HVar2;\n  uint32_t Tickstart;\n  uint32_t uVar3;\n  char cVar4;\n  uint uVar5;\n  int iVar6;\n  uint8_t *puVar7;\n  bool bVar8;\n  uint32_t tmpreg_3;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg;\n  uint32_t tickstart;\n  \n  Tickstart = HAL_GetTick();\n  uVar1 = DAT_080021e0;\n  if (hi2c->State == HAL_I2C_STATE_READY) {\n    do {\n      if ((uVar1 >> 0x10 & 0xff) == 1) {\n        uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n        bVar8 = uVar5 == 0;\n        if (bVar8) {\n          uVar5 = 1;\n        }\n        cVar4 = (char)uVar5;\n        if (!bVar8) {\n          cVar4 = '\\0';\n        }\n      }\n      else {\n        uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n        bVar8 = uVar5 == 0;\n        if (bVar8) {\n          uVar5 = 1;\n        }\n        cVar4 = (char)uVar5;\n        if (!bVar8) {\n          cVar4 = '\\0';\n        }\n      }\n      if (cVar4 != '\\x01') {\n        iVar6 = 0;\n        goto LAB_08002040;\n      }\n      uVar3 = HAL_GetTick();\n    } while (uVar3 - Tickstart < 0x1a);\n    hi2c->PreviousState = 0;\n    hi2c->State = HAL_I2C_STATE_READY;\n    hi2c->Mode = HAL_I2C_MODE_NONE;\n    hi2c->Lock = HAL_UNLOCKED;\n    iVar6 = 3;\nLAB_08002040:\n    if (iVar6 == 0) {\n      if (hi2c->Lock == HAL_LOCKED) {\n        HVar2 = HAL_BUSY;\n      }\n      else {\n        hi2c->Lock = HAL_LOCKED;\n        if ((hi2c->Instance->CR1 & 1) != 1) {\n          hi2c->Instance->CR1 = hi2c->Instance->CR1 | 1;\n        }\n        hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffff7ff;\n        hi2c->State = HAL_I2C_STATE_BUSY_RX;\n        hi2c->Mode = HAL_I2C_MODE_MEM;\n        hi2c->ErrorCode = 0;\n        hi2c->pBuffPtr = pData;\n        hi2c->XferCount = Size;\n        hi2c->XferOptions = DAT_080021e4;\n        hi2c->XferSize = hi2c->XferCount;\n        HVar2 = I2C_RequestMemoryRead(hi2c,DevAddress,MemAddress,MemAddSize,Timeout,Tickstart);\n        if (HVar2 == HAL_OK) {\n          if (hi2c->XferSize == 0) {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n          }\n          else if (hi2c->XferSize == 1) {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n            disableIRQinterrupts();\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (hi2c->XferSize == 2) {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x800;\n            disableIRQinterrupts();\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x400;\n          }\n          while (uVar1 = DAT_080024bc, hi2c->XferSize != 0) {\n            if (hi2c->XferSize < 4) {\n              if (hi2c->XferSize == 1) {\n                HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout,Tickstart);\n                if (HVar2 != HAL_OK) {\n                  if (hi2c->ErrorCode == 0x20) {\n                    return HAL_TIMEOUT;\n                  }\n                  return HAL_ERROR;\n                }\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n              else if (hi2c->XferSize == 2) {\n                do {\n                  if ((uVar1 >> 0x10 & 0xff) == 1) {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  if (cVar4 != '\\0') {\n                    iVar6 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((Timeout == 0xffffffff) ||\n                        ((Timeout != 0 && (uVar3 = HAL_GetTick(), uVar3 - Tickstart <= Timeout))));\n                hi2c->PreviousState = 0;\n                hi2c->State = HAL_I2C_STATE_READY;\n                hi2c->Mode = HAL_I2C_MODE_NONE;\n                hi2c->Lock = HAL_UNLOCKED;\n                iVar6 = 3;\nLAB_080022fa:\n                if (iVar6 != 0) {\n                  return HAL_TIMEOUT;\n                }\n                disableIRQinterrupts();\n                hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n                enableIRQinterrupts();\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n              else {\n                do {\n                  if ((uVar1 >> 0x10 & 0xff) == 1) {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  if (cVar4 != '\\0') {\n                    iVar6 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((Timeout == 0xffffffff) ||\n                        ((Timeout != 0 && (uVar3 = HAL_GetTick(), uVar3 - Tickstart <= Timeout))));\n                hi2c->PreviousState = 0;\n                hi2c->State = HAL_I2C_STATE_READY;\n                hi2c->Mode = HAL_I2C_MODE_NONE;\n                hi2c->Lock = HAL_UNLOCKED;\n                iVar6 = 3;\nLAB_08002418:\n                if (iVar6 != 0) {\n                  return HAL_TIMEOUT;\n                }\n                hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n                disableIRQinterrupts();\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n                uVar1 = DAT_080024bc;\n                do {\n                  if ((uVar1 >> 0x10 & 0xff) == 1) {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  if (cVar4 != '\\0') {\n                    iVar6 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((Timeout == 0xffffffff) ||\n                        ((Timeout != 0 && (uVar3 = HAL_GetTick(), uVar3 - Tickstart <= Timeout))));\n                hi2c->PreviousState = 0;\n                hi2c->State = HAL_I2C_STATE_READY;\n                hi2c->Mode = HAL_I2C_MODE_NONE;\n                hi2c->Lock = HAL_UNLOCKED;\n                iVar6 = 3;\nLAB_0800250a:\n                if (iVar6 != 0) {\n                  return HAL_TIMEOUT;\n                }\n                hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n                enableIRQinterrupts();\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n            }\n            else {\n              HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout,Tickstart);\n              if (HVar2 != HAL_OK) {\n                if (hi2c->ErrorCode == 0x20) {\n                  return HAL_TIMEOUT;\n                }\n                return HAL_ERROR;\n              }\n              uVar3 = hi2c->Instance->DR;\n              puVar7 = hi2c->pBuffPtr;\n              hi2c->pBuffPtr = puVar7 + 1;\n              *puVar7 = (uint8_t)uVar3;\n              hi2c->XferSize = hi2c->XferSize - 1;\n              hi2c->XferCount = hi2c->XferCount - 1;\n              if ((hi2c->Instance->SR1 & 4) == 4) {\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n            }\n          }\n          hi2c->State = HAL_I2C_STATE_READY;\n          hi2c->Mode = HAL_I2C_MODE_NONE;\n          hi2c->Lock = HAL_UNLOCKED;\n          HVar2 = HAL_OK;\n        }\n        else if (hi2c->ErrorCode == 4) {\n          hi2c->Lock = HAL_UNLOCKED;\n          HVar2 = HAL_ERROR;\n        }\n        else {\n          hi2c->Lock = HAL_UNLOCKED;\n          HVar2 = HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      HVar2 = HAL_BUSY;\n    }\n  }\n  else {\n    HVar2 = HAL_BUSY;\n  }\n  return HVar2;\n}\n\n",
            "called": [
                "I2C_RequestMemoryRead",
                "HAL_GetTick",
                "I2C_WaitOnRXNEFlagUntilTimeout"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f6c",
            "calling": [
                "_i2c_read_reg"
            ],
            "imported": false,
            "current_name": "FUNC_08001f6c"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "do_nothing_080014ec"
            },
            "code": "\nvoid do_nothing_080014ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_080014ec"
        },
        "FUN_08000c3c": {
            "renaming": {
                "FUN_08000c3c": "calculate_product_08000c3c",
                "param_1": "multiplicand",
                "param_2": "multiplier",
                "uVar1": "multiplier_abs",
                "uVar2": "multiplicand_abs",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount",
                "uVar5": "sign_bit_mask",
                "uVar7": "product",
                "iVar6": "unused_variable",
                "bVar8": "multiplicand_is_zero",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_product_08000c3c(uint multiplicand, uint multiplier)\n{\n  uint sign_bit_mask;\n  uint multiplicand_abs;\n  uint multiplier_abs;\n  uint leading_zeroes;\n  uint shift_amount;\n  uint product;\n  bool multiplicand_is_zero;\n  bool multiplier_is_zero;\n  \n  multiplicand_is_zero = multiplicand == 0;\n  multiplier_is_zero = multiplier == 0;\n  if (multiplicand_is_zero || multiplier_is_zero) {\n    return multiplicand;\n  }\n  sign_bit_mask = multiplier & 0x80000000;\n  if ((int)sign_bit_mask < 0) {\n    multiplicand_abs = -multiplicand;\n    multiplier_abs = -multiplier - (uint)(multiplicand != 0);\n  } else {\n    multiplicand_abs = multiplicand;\n    multiplier_abs = multiplier;\n  }\n  if (multiplier_abs == 0) {\n    product = 0;\n  } else {\n    sign_bit_mask |= 0x5b000000;\n    if (multiplier_abs == 0) {\n      sign_bit_mask += 0xf0000000;\n    }\n    leading_zeroes = count_leading_zeroes(multiplier_abs);\n    shift_amount = leading_zeroes - 8;\n    if (leading_zeroes < 8) {\n      product = sign_bit_mask + ((multiplier_abs >> (0x20 - (leading_zeroes + 0x18) & 0xff)) - ((int)(multiplier_abs << (leading_zeroes + 0x18 & 0xff)) >> 0x1f));\n      product = (multiplicand_abs | (multiplier_abs << 1)) == 0 ? product & ~(multiplier_abs >> 0x1f) : product;\n    } else {\n      product = multiplicand_abs << (shift_amount & 0xff);\n      product += multiplier_abs << (shift_amount & 0xff);\n      product += multiplicand_abs >> (0x20 - shift_amount & 0xff);\n      product += (uint)(0x7fffffff < (multiplicand_abs << shift_amount));\n      product = (multiplicand_abs << shift_amount) == 0x80000000 ? product & 0xfffffffe : product;\n    }\n  }\n  return product;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c3c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_product_08000c3c"
        },
        "FUN_08003518": {
            "renaming": {
                "FUN_08003518": "get_HCLK_frequency_divided_by_APB_prescaler_08003518",
                "uVar1": "HCLK_frequency",
                "DAT_08003538": "DAT",
                "PTR_APBPrescTable_0800353c": "APBPrescTable",
                "prescaler_index": "index",
                "APB_prescaler": "prescaler"
            },
            "code": "uint32_t get_HCLK_frequency_divided_by_APB_prescaler_08003518(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t prescaler_index = (*(uint *)(DAT_08003538_08003538 + 4) >> 8) & 7;\n  uint32_t APB_prescaler = PTR_PTR_APBPrescTable_0800353c_0800353c[prescaler_index];\n  return HCLK_frequency >> APB_prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003518",
            "calling": [
                "UART_SetConfig",
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divided_by_APB_prescaler_08003518"
        },
        "FUN_08002d8a": {
            "renaming": {
                "FUN_08002d8a": "do_nothing_08002d8a"
            },
            "code": "\nvoid do_nothing_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d8a",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d8a"
        },
        "FUN_08005780": {
            "renaming": {
                "FUN_08005780": "enable_interrupts_08005780",
                "DAT_080057dc": "interrupt_flag_register",
                "DAT_080057e0": "interrupt_priority_register_2",
                "interrupt_priority_register_1": "interrupt_priority_register_1",
                "interrupt_priority_register_2": "interrupt_priority_register_2",
                "DAT_080057e4": "interrupt_priority_register_3"
            },
            "code": "void enable_interrupts_08005780(void)\n{\n  *DAT_080057dc = *DAT_080057dc | 1;\n  interrupt_priority_register_1 = interrupt_priority_register_1 & DAT_080057e0;\n  *DAT_080057dc = *DAT_080057dc & 0xfef6ffff;\n  *DAT_080057dc = *DAT_080057dc & 0xfffbffff;\n  interrupt_priority_register_1 = interrupt_priority_register_1 & 0xff80ffff;\n  DAT_080057e0 = 0x9f0000;\n  *(unsigned int *)(DAT_080057e4 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005780",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "enable_interrupts_08005780"
        },
        "FUN_08000fe0": {
            "renaming": {
                "FUN_08000fe0": "is_not_zero_08000fe0",
                "in_ZR": "input_char"
            },
            "code": "bool is_not_zero_08000fe0(char input_char){\\n  __aeabi_cfcmpeq();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fe0",
            "calling": [],
            "imported": false,
            "current_name": "is_not_zero_08000fe0"
        },
        "FUN_08008818": {
            "renaming": {
                "FUN_08008818": "execute_global_destructors_08008818",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor"
            },
            "code": "void execute_global_destructors_08008818(void)\n{\n  int num_destructors = (int)PTR___fini_array_end_08008844 - (int)PTR___do_global_dtors_aux_fini_array_entry_08008848 >> 2;\n  if (num_destructors != 0) {\n    code **destructor = (code **)(PTR___do_global_dtors_aux_fini_array_entry_08008848 + (num_destructors + 0x3fffffff) * 4);\n    do {\n      num_destructors--;\n      (**destructor)();\n      destructor--;\n    } while (num_destructors != 0);\n  }\n  _fini();\n  return;\n}",
            "called": [
                "frame_dummy",
                "_fini",
                "__do_global_dtors_aux"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008818",
            "calling": [],
            "imported": false,
            "current_name": "execute_global_destructors_08008818"
        },
        "FUN_08000418": {
            "renaming": {
                "FUN_08000418": "calculate_hash_08000418",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5",
                "iVar6": "var6",
                "uVar7": "var7",
                "in_r12": "var8",
                "bVar8": "var9",
                "bVar9": "var10",
                "bVar10": "var11"
            },
            "code": "ulonglong calculate_hash_08000418(uint input, undefined4 param_2, undefined4 param_3, uint param_4)\n{\n  uint var1;\n  uint var2;\n  uint var3;\n  uint var4;\n  uint var5;\n  int var6;\n  uint var7;\n  uint var8;\n  bool var9;\n  bool var10;\n  bool var11;\n  \n  var5 = input << 1;\n  var9 = var5 == 0;\n  var1 = (uint)((input & 0x80000000) != 0) << 0x1f;\n  var4 = (uint)((int)var5 >> 3) >> 1;\n  var3 = var1 | var4;\n  input = input << 0x1d;\n  if (!var9) {\n    param_4 = var5 & 0xff000000;\n    var9 = param_4 == 0;\n  }\n  if (!var9) {\n    var9 = param_4 == 0xff000000;\n  }\n  if (!var9) {\n    return CONCAT44(var3,input) ^ 0x3800000000000000;\n  }\n  if ((var5 & 0xffffff) == 0) {\n    return CONCAT44(var3,input);\n  }\n  if (param_4 == 0xff000000) {\n    return CONCAT44(var3,input) | 0x8000000000000;\n  }\n  var2 = input;\n  var5 = var4;\n  if (var4 == 0) {\n    var2 = 0;\n    var5 = input;\n  }\n  var6 = count_leading_zeroes(var5);\n  if (var4 == 0) {\n    var6 = var6 + 0x20;\n  }\n  var7 = var6 - 0xb;\n  var11 = SBORROW4(var7,0x20);\n  var4 = var6 - 0x2b;\n  var10 = (int)var4 < 0;\n  var9 = var4 == 0;\n  if ((int)var7 < 0x20) {\n    var11 = SCARRY4(var4,0xc);\n    var6 = var6 + -0x1f;\n    var10 = var6 < 0;\n    var9 = var6 == 0;\n    var4 = var7;\n    if (!var9 && var10 == var11) {\n      var2 = var5 << (var7 & 0xff);\n      var5 = var5 >> (0xcU - var6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (var9 || var10 != var11) {\n    var8 = 0x20 - var4;\n  }\n  var5 = var5 << (var4 & 0xff);\n  if (var9 || var10 != var11) {\n    var5 = var5 | var2 >> (var8 & 0xff);\n  }\n  if (var9 || var10 != var11) {\n    var2 = var2 << (var4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)var7 < 0x381) {\n    return CONCAT44(var5 + (0x380 - var7) * 0x100000 | var1,var2);\n  }\n  var4 = ~(0x380 - var7);\n  if (0x1e < (int)var4) {\n    return CONCAT44(var3,var5 >> (var4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  var6 = var4 - 0x13;\n  if (var6 == 0 || var6 < 0 != SCARRY4(var4 - 0x1f,0xc)) {\n    var4 = var4 + 1;\n    return CONCAT44(var1 | var5 >> (var4 & 0xff),\n                    var2 >> (var4 & 0xff) | var5 << (0x20 - var4 & 0xff));\n  }\n  return CONCAT44(var3,var2 >> (0x20 - (0xcU - var6) & 0xff) | var5 << (0xcU - var6 & 0xff)) &\n         0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000418",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "mpu6050_calc_pitch",
                "mpu6050_calc_acc_pitch_roll"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000418"
        },
        "FUN_080055f4": {
            "renaming": {
                "FUN_080055f4": "initialize_gpio_pins_080055f4",
                "GPIO_InitStruct": "gpio_init_struct",
                "tmpreg_2": "tmp_reg_2",
                "tmpreg_1": "tmp_reg_1",
                "tmpreg": "tmp_reg",
                "DAT_0800566c": "DAT_0800566c",
                "DAT_08005670": "DAT_08005670"
            },
            "code": "void initialize_gpio_pins_080055f4(void)\n{\n  uint32_t tmp_reg_2;\n  uint32_t tmp_reg_1;\n  uint32_t tmp_reg;\n  GPIO_InitTypeDef gpio_init_struct;\n  *(uint *)(DAT_0800566c + 0x18) |= 0x20;\n  *(uint *)(DAT_0800566c + 0x18) |= 4;\n  *(uint *)(DAT_0800566c + 0x18) |= 8;\n  HAL_GPIO_WritePin(DAT_08005670,0x1e,GPIO_PIN_RESET);\n  gpio_init_struct.Pin = 0x1e;\n  gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;\n  gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;\n  HAL_GPIO_Init(DAT_08005670,&gpio_init_struct);\n  return;\n}",
            "called": [
                "HAL_GPIO_WritePin",
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055f4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_gpio_pins_080055f4"
        },
        "FUN_080053b0": {
            "renaming": {
                "FUN_080053b0": "configure_PWM_timer_080053b0",
                "HVar1": "status",
                "sBreakDeadTimeConfig": "break_dead_time_config",
                "sConfigOC": "PWM_config",
                "sMasterConfig": "master_config",
                "sClockSourceConfig": "clock_source_config"
            },
            "code": "void configure_PWM_timer_080053b0(void)\n{\n  HAL_StatusTypeDef status;\n  TIM_BreakDeadTimeConfigTypeDef break_dead_time_config;\n  TIM_OC_InitTypeDef PWM_config;\n  TIM_MasterConfigTypeDef master_config;\n  TIM_ClockConfigTypeDef clock_source_config;\n\n  htim1.Instance = TIM1;\n  htim1.Init.Prescaler = 0x708;\n  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;\n  htim1.Init.Period = 100;\n  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;\n  htim1.Init.RepetitionCounter = 0;\n  status = HAL_TIM_Base_Init(&htim1);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  clock_source_config.ClockSource = TIM_CLOCKSOURCE_INTERNAL;\n  status = HAL_TIM_ConfigClockSource(&htim1, &clock_source_config);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  status = HAL_TIM_PWM_Init(&htim1);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  master_config.MasterOutputTrigger = TIM_TRGO_RESET;\n  master_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;\n  status = HAL_TIMEx_MasterConfigSynchronization(&htim1, &master_config);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  PWM_config.OCMode = TIM_OCMODE_PWM1;\n  PWM_config.Pulse = 0;\n  PWM_config.OCPolarity = TIM_OCPOLARITY_HIGH;\n  PWM_config.OCNPolarity = TIM_OCNPOLARITY_HIGH;\n  PWM_config.OCFastMode = TIM_OCFAST_DISABLE;\n  PWM_config.OCIdleState = TIM_OCIDLESTATE_RESET;\n  PWM_config.OCNIdleState = TIM_OCNIDLESTATE_RESET;\n  status = HAL_TIM_PWM_ConfigChannel(&htim1, &PWM_config, TIM_CHANNEL_1);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  status = HAL_TIM_PWM_ConfigChannel(&htim1, &PWM_config, TIM_CHANNEL_4);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  break_dead_time_config.OffStateRunMode = TIM_OSSR_DISABLE;\n  break_dead_time_config.OffStateIDLEMode = TIM_OSSI_DISABLE;\n  break_dead_time_config.LockLevel = TIM_LOCKLEVEL_OFF;\n  break_dead_time_config.DeadTime = 0;\n  break_dead_time_config.BreakState = TIM_BREAK_DISABLE;\n  break_dead_time_config.BreakPolarity = TIM_BREAKPOLARITY_HIGH;\n  break_dead_time_config.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;\n  status = HAL_TIMEx_ConfigBreakDeadTime(&htim1, &break_dead_time_config);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  HAL_TIM_MspPostInit(&htim1);\n  return;\n}",
            "called": [
                "HAL_TIM_PWM_Init",
                "HAL_TIM_MspPostInit",
                "HAL_TIM_Base_Init",
                "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_TIM_PWM_ConfigChannel",
                "_Error_Handler",
                "HAL_TIM_ConfigClockSource",
                "HAL_TIMEx_ConfigBreakDeadTime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "configure_PWM_timer_080053b0"
        },
        "FUN_08009e74": {
            "renaming": {
                "FUN_08009e74": "do_nothing_08009e74"
            },
            "code": "\nvoid do_nothing_08009e74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e74",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_08009e74"
        },
        "FUN_080016d0": {
            "renaming": {
                "FUN_080016d0": "check_ticks_within_range_080016d0",
                "ticks": "ticks",
                "bVar1": "is_within_range",
                "DAT_08001710": "PTR_DAT_08001710"
            },
            "code": "uint32_t check_ticks_within_range_080016d0(uint32_t ticks)\n{\n  bool is_within_range;\n  is_within_range = ticks - 1 < 0x1000000;\n  if (is_within_range) {\n    DAT_08001710[1] = ticks - 1;\n    NVIC_SetPriority(SysTick_IRQn,0xf);\n    DAT_08001710[2] = 0;\n    *DAT_08001710 = 7;\n  }\n  return (uint)!is_within_range;\n}",
            "called": [
                "NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016d0",
            "calling": [
                "HAL_SYSTICK_Config"
            ],
            "imported": false,
            "current_name": "check_ticks_within_range_080016d0"
        },
        "FUN_0800088a": {
            "renaming": {
                "FUN_0800088a": "convert_to_double_0800088a",
                "param_1": "sign",
                "param_2": "exponent",
                "param_3": "mantissa_high",
                "param_4": "mantissa_low",
                "uVar1": "msb",
                "unaff_r4": "mantissa_bits_high",
                "uVar2": "exponent_bits",
                "uVar3": "mantissa_bits_low",
                "bVar4": "zero_mantissa",
                "in_r12": "register_12"
            },
            "code": "ulonglong convert_to_double_0800088a(uint sign, uint exponent, uint mantissa_high, uint mantissa_low) {\n  uint sign_bit = sign & 0x80000000;\n  uint exponent_bits = exponent >> 0x14;\n  uint mantissa_bits_high = mantissa_high;\n  uint mantissa_bits_low = mantissa_low;\n  if (mantissa_bits_high != exponent_bits || sign_bit != exponent_bits) {\n    if (mantissa_bits_high == exponent_bits) {\n      if ((sign | exponent << 0xc) == 0 && mantissa_bits_low == 0 && sign_bit != exponent_bits) {\n        return (ulonglong)((exponent_bits ^ mantissa_bits_low) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (sign_bit == exponent_bits) {\n      if ((exponent_bits | mantissa_bits_low << 0xc) == 0 && mantissa_bits_low == 0) {\n        return (ulonglong)((sign_bit ^ mantissa_bits_low) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      bool zero_mantissa = (sign | exponent << 1) == 0;\n      if (!zero_mantissa) {\n        zero_mantissa = (mantissa_bits_low | mantissa_bits_high << 1) == 0;\n      }\n      if (!zero_mantissa) {\n        if (mantissa_bits_high == 0) {\n          uint carry_bit = sign & 0x80000000;\n          do {\n            uint msb = exponent & 0x80000000;\n            exponent = exponent << 1;\n            mantissa_bits_high = mantissa_bits_high * 2 + (uint)(msb != 0);\n            mantissa_bits_low = mantissa_bits_low * 2 + (uint)(mantissa_bits_high & 0x100000);\n          } while ((mantissa_bits_high & 0x100000) == 0);\n          mantissa_bits_high |= carry_bit;\n          if (exponent_bits != 0) {\n            return ((ulonglong)mantissa_bits_high << 0x20) | mantissa_bits_low;\n          }\n        }\n        do {\n          uint msb = exponent & 0x80000000;\n          exponent = exponent << 1;\n          mantissa_bits_low = mantissa_bits_low * 2 + (uint)(msb != 0);\n          mantissa_bits_high = mantissa_bits_high * 2 + (uint)(mantissa_bits_low & 0x100000);\n        } while ((mantissa_bits_low & 0x100000) == 0);\n        return ((ulonglong)mantissa_bits_high << 0x20) | mantissa_bits_low;\n      }\n      if ((sign | exponent << 1) != 0) {\n        if (mantissa_bits_low != 0) {\n          return (ulonglong)0xffe0000000000000;\n        }\n        return (ulonglong)((exponent_bits ^ mantissa_bits_low) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n      if ((exponent_bits | mantissa_bits_low << 0xc) != 0) {\n        return (ulonglong)0x7ff8000000000000;\n      }\n      return (ulonglong)0x0;\n    }\n  }\n  return ((ulonglong)mantissa_bits_high << 0x20) | mantissa_bits_low | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800088a",
            "calling": [
                "__divdf3"
            ],
            "imported": false,
            "current_name": "convert_to_double_0800088a"
        },
        "FUN_08000e20": {
            "renaming": {
                "FUN_08000e20": "FUNC_08000e20"
            },
            "code": "\nuint FUNC_08000e20(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e16:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e38;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e38:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e20",
            "calling": [
                "mpu6050_calibrate",
                "mpu6050_calc_acc_pitch_roll"
            ],
            "imported": false,
            "current_name": "FUNC_08000e20"
        },
        "FUN_08005d14": {
            "renaming": {
                "FUN_08005d14": "getImpurePtrValue_08005d14",
                "PTR__impure_ptr_08005d1c": "PTR__impure_ptr_08005d1c"
            },
            "code": "int getImpurePtrValue_08005d14() {\n    int* impure_ptr = (int*) PTR__impure_ptr_08005d1c;\n    int value = *impure_ptr;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d14",
            "calling": [
                "_sbrk"
            ],
            "imported": false,
            "current_name": "getImpurePtrValue_08005d14"
        },
        "FUN_080015b4": {
            "renaming": {
                "FUN_080015b4": "set_priority_group_080015b4",
                "PriorityGroup": "priority_group",
                "reg_value": "reg_value",
                "PriorityGroupTmp": "priority_group_tmp",
                "DAT_080015f8": "ptr_data",
                "*(uint *)(DAT_080015f8 + 0xc)": "ptr_data_c",
                "mask": "mask",
                "shifted_priority": "shifted_priority",
                "constant_value": "constant_value"
            },
            "code": "void set_priority_group_080015b4(uint32_t priority_group) {\n  uint32_t reg_value;\n  uint32_t priority_group_tmp;\n  uint32_t* DAT_080015f8 = (uint32_t*)DAT_080015f8;\n  uint32_t* *(uint *)(DAT_080015f8 + 0xc) = DAT_080015f8 + 0xc;\n  uint32_t mask = 0xf8ff;\n  uint32_t shifted_priority = (priority_group & 7) << 8;\n  uint32_t constant_value = 0x5fa0000;\n  **(uint *)(DAT_080015f8 + 0xc) = (**(uint *)(DAT_080015f8 + 0xc) & mask) | shifted_priority | constant_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b4",
            "calling": [
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "imported": false,
            "current_name": "set_priority_group_080015b4"
        },
        "FUN_080041a8": {
            "renaming": {
                "FUN_080041a8": "setExternalTrigger_080041a8",
                "TIMx": "timer",
                "TIM_ExtTRGPrescaler": "prescaler",
                "TIM_ExtTRGPolarity": "polarity",
                "ExtTRGFilter": "filter",
                "tmpsmcr": "smcrValue"
            },
            "code": "void setExternalTrigger_080041a8(TIM_TypeDef *timer, uint32_t prescaler, uint32_t polarity, uint32_t filter) {\n  uint32_t smcrValue = timer->SMCR;\n  smcrValue &= 0xffff00ff;\n  smcrValue |= (prescaler | (filter << 8) | polarity);\n  timer->SMCR = smcrValue;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a8",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "setExternalTrigger_080041a8"
        },
        "FUN_080004c8": {
            "renaming": {
                "FUN_080004c8": "FUNC_080004c8"
            },
            "code": "\nulonglong FUNC_080004c8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_result_080006a4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004c8",
            "calling": [
                "_dtoa_r",
                "frexp",
                "atan",
                "_svfprintf_r",
                "mpu6050_calc_pitch",
                "mpu6050_calc_acc_pitch_roll"
            ],
            "imported": false,
            "current_name": "FUNC_080004c8"
        },
        "FUN_08000a9c": {
            "renaming": {
                "FUN_08000a9c": "FUNC_08000a9c"
            },
            "code": "\nuint FUNC_08000a9c(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_1 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = param_2;\n      if (iVar7 == -1) {\n        uVar4 = uVar2;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        param_2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == param_2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        uVar2 = param_2;\n      }\n      return uVar2;\n    }\n    if (uVar2 != param_2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      param_1 = param_1 << 1;\n      if ((uVar2 & 0x80000000) != 0) {\n        param_1 = param_1 | 0x80000000;\n      }\n      return param_1;\n    }\n    if (uVar4 < 0xfe000000) {\n      return uVar2 + 0x800000;\n    }\n    uVar2 = uVar2 & 0x80000000;\nLAB_08000bde:\n    return uVar2 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return uVar2;\n  }\n  uVar4 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  uVar2 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar6 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar6 != 0);\n    uVar6 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar5 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar5 & 0xff);\n      if ((int)uVar6 < (int)uVar5) {\n        uVar4 = uVar4 >> (-(uVar6 - uVar5) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar6 - uVar5) * 0x800000;\n      }\n      return uVar4 | uVar2;\n    }\n  }\n  else {\n    uVar6 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar6 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar6 != 0) << 0x1f | uVar3 >> 1;\n      uVar6 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar6 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | uVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000a9c",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000a9c"
        },
        "FUN_08008ad4": {
            "renaming": {
                "FUN_08008ad4": "get_current_locale_08008ad4",
                "puVar1": "current_locale"
            },
            "code": "undefined* get_current_locale_08008ad4() {\n  undefined* current_locale = *(undefined**)(*(int*)PTR__impure_ptr_08008ae8 + 0x34);\n  if (current_locale == (undefined*)0x0) {\n    current_locale = PTR___global_locale_08008aec;\n  }\n  return current_locale + 0xf0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ad4",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "get_current_locale_08008ad4"
        },
        "FUN_08005674": {
            "renaming": {
                "FUN_08005674": "wait_forever_08005674",
                "file": "file_path",
                "line": "line_number"
            },
            "code": "void wait_forever_08005674(char *file_path, int line_number)\n{\n  while(true)\n  {\n      // Do nothing, wait forever\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005674",
            "calling": [
                "MX_I2C1_Init",
                "SystemClock_Config",
                "MX_TIM1_Init",
                "MX_TIM2_Init",
                "MX_USART1_UART_Init"
            ],
            "imported": false,
            "current_name": "wait_forever_08005674"
        },
        "FUN_08003c4a": {
            "renaming": {
                "FUN_08003c4a": "do_nothing_08003c4a"
            },
            "code": "\nvoid do_nothing_08003c4a(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c4a",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c4a"
        },
        "FUN_08004104": {
            "renaming": {
                "FUN_08004104": "set_input_capture_parameters_08004104",
                "TIMx": "timer",
                "TIM_ICPolarity": "input_capture_polarity",
                "TIM_ICFilter": "input_capture_filter",
                "tmpccer": "ccer_register_value",
                "tmpccmr1": "ccmr1_register_value"
            },
            "code": "void set_input_capture_parameters_08004104(TIM_TypeDef *timer, uint32_t input_capture_polarity, uint32_t input_capture_filter)\n{\n  uint32_t ccer_register_value = timer->CCER & 0xffffffef;\n  uint32_t ccmr1_register_value = (input_capture_filter << 0xc) | (timer->CCMR1 & 0xffff0fff);\n  timer->CCER = (input_capture_polarity << 4) | (ccer_register_value & 0xffffff5f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004104",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "set_input_capture_parameters_08004104"
        },
        "FUN_08000ff4": {
            "renaming": {
                "FUN_08000ff4": "isStringEmpty_08000ff4",
                "in_CY": "inputChar"
            },
            "code": "bool isStringEmpty_08000ff4(void)\n{\n  char inputChar;\n  __aeabi_cfcmpeq();\n  return inputChar == '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ff4",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "isStringEmpty_08000ff4"
        },
        "FUN_08005d0c": {
            "renaming": {
                "FUN_08005d0c": "calculate_08005d0c",
                "__x": "x",
                "in_d0": "result"
            },
            "code": "double calculate_08005d0c(double x)\n{\n  double result;\n  //code for calculating result\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d0c",
            "calling": [
                "atan",
                "__ieee754_atan2"
            ],
            "imported": false,
            "current_name": "calculate_08005d0c"
        },
        "FUN_08005e40": {
            "renaming": {
                "FUN_08005e40": "count_bytes_until_null_08005e40",
                "__s": "str",
                "iVar1": "byte_offset",
                "puVar2": "ptr",
                "uVar4": "word",
                "count_leading_zeroes": "count_leading_zeroes",
                "size_t": "size_t"
            },
            "code": "size_t count_bytes_until_null_08005e40(uint x) {\n    size_t count = 0;\n    while (x != 0) {\n        x >>= 1;\n        count++;\n    }\n    return count;\n}\n\nsize_t count_bytes_until_null_08005e40(char *str) {\n    uint *ptr = (uint *)((uint)str & 0xfffffffc);\n    int byte_offset = -((uint)str & 3);\n    uint word = *ptr;\n    if (((uint)str & 3) != 0) {\n        word |= 0xffffffffU >> ((byte_offset + 4U & 0x1f) << 3);\n    }\n    while (true) {\n        ptr++;\n        word = word + 0xfefefeff & ~word & 0x80808080;\n        if (word != 0) {\n            break;\n        }\n        word = *ptr;\n        byte_offset += 4;\n    }\n    size_t leading_zeroes = count_bytes_until_null_08005e40(word & -word);\n    return byte_offset + (0x1fU - leading_zeroes >> 3);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e40",
            "calling": [
                "_svfprintf_r",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "count_bytes_until_null_08005e40"
        },
        "FUN_08005d20": {
            "renaming": {
                "FUN_08005d20": "execute_preinit_array_08005d20",
                "param_1": "ctx",
                "puVar1": "dtors_aux_fini_array_entry",
                "iVar2": "i",
                "ppcVar3": "preinit_array_ptr",
                "iVar4": "preinit_array_length",
                "PTR___preinit_array_end_08005d58": "preinit_array_end",
                "PTR___preinit_array_end_08005d5c": "preinit_array_start",
                "PTR___preinit_array_end_08005d64": "dtors_array_start",
                "PTR___do_global_dtors_aux_fini_array_entry_08005d60": "dtors_aux_fini_array_start"
            },
            "code": "void execute_preinit_array_08005d20(EVP_PKEY_CTX *ctx){\n  int preinit_array_length = (int)PTR___preinit_array_end_08005d58 - (int)PTR___PTR___preinit_array_end_08005d58_08005d5c >> 2;\n  if(preinit_array_length != 0){\n    int i = 0;\n    code **preinit_array_ptr = (code **)PTR___PTR___preinit_array_end_08005d58_08005d5c;\n    do{\n      ctx = (EVP_PKEY_CTX *)(*preinit_array_ptr)();\n      preinit_array_ptr++;\n      i++;\n    } while(i != preinit_array_length);\n  }\n  code **dtors_array_ptr = (code **)PTR___PTR___preinit_array_end_08005d58_08005d64;\n  undefined *dtors_aux_fini_array_entry = PTR___do_global_dtors_aux_fini_array_entry_08005d60;\n  _init(ctx);\n  int dtors_array_length = (int)dtors_aux_fini_array_entry - (int)dtors_array_ptr >> 2;\n  if(dtors_array_length != 0){\n    int i = 0;\n    do{\n      (*dtors_array_ptr)();\n      dtors_array_ptr++;\n      i++;\n    } while(i != dtors_array_length);\n  }\n  return;\n}",
            "called": [
                "register_fini",
                "_init",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d20",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "execute_preinit_array_08005d20"
        },
        "FUN_08001a80": {
            "renaming": {
                "FUN_08001a80": "set_gpio_pin_state_08001a80",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin",
                "PinState": "state",
                "BSRR": "bit_set_reset_register"
            },
            "code": "void set_gpio_pin_state_08001a80(GPIO_TypeDef *gpio, uint16_t pin, GPIO_PinState state)\n{\n  if (state == GPIO_PIN_RESET) {\n    gpio->BSRR = (uint)pin << 0x10;\n  }\n  else {\n    gpio->BSRR = (uint)pin;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a80",
            "calling": [
                "MX_GPIO_Init",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "set_gpio_pin_state_08001a80"
        },
        "FUN_080090a8": {
            "renaming": {
                "FUN_080090a8": "acquire_recursive_lock_for_malloc_080090a8"
            },
            "code": "void acquire_recursive_lock_for_malloc_080090a8(void)\n{\n  __retarget_lock_acquire_recursive(PTR___lock___malloc_recursive_mutex_080090b0);\n  return;\n}",
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090a8",
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "acquire_recursive_lock_for_malloc_080090a8"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "execute_afl_call_08004e74",
                "ticks": "ticks",
                "uVar1": "result",
                "PTR_noHyperCall_08004ea0": "PTR_noHyperCall_08004ea0"
            },
            "code": "uint32_t execute_afl_call_08004e74(int ticks)\n{\n  uint32_t result;\n  if (*(int *)PTR_noHyperCall_08004ea0 == 0) {\n    result = aflCall(1, ticks, 0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_afl_call_08004e74"
        },
        "FUN_0800910c": {
            "renaming": {
                "FUN_0800910c": "read_and_write_0800910c",
                "param_1": "file_descriptor",
                "param_2": "buffer",
                "iVar1": "file_offset"
            },
            "code": "void read_and_write_0800910c(int file_descriptor, int *buffer){\n  if (buffer != NULL) {\n    int file_offset = *(int *)(file_descriptor + 0x4c);\n    *buffer = *(int *)(file_offset + buffer[1] * 4);\n    *(int **)(file_offset + buffer[1] * 4) = buffer;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800910c",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "read_and_write_0800910c"
        },
        "FUN_080052a0": {
            "renaming": {
                "FUN_080052a0": "configure_RCC_clocks_080052a0",
                "RCC_ClkInitStruct": "clk_init",
                "RCC_OscInitStruct": "osc_init",
                "HVar1": "status",
                "uVar2": "hclk_freq"
            },
            "code": "void configure_RCC_clocks_080052a0(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t hclk_freq;\n  RCC_OscInitTypeDef osc_init;\n  RCC_ClkInitTypeDef clk_init;\n  \n  osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;\n  osc_init.HSEState = RCC_HSE_ON;\n  osc_init.HSEPredivValue = RCC_HSE_PREDIV_DIV1;\n  osc_init.HSIState = RCC_HSI_ON;\n  osc_init.PLL.PLLState = RCC_PLL_ON;\n  osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;\n  osc_init.PLL.PLLMUL = RCC_PLL_MUL16;\n  status = HAL_RCC_OscConfig(&osc_init);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005340,0x151);\n  }\n  \n  clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;\n  clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  clk_init.APB1CLKDivider = RCC_HCLK_DIV2;\n  clk_init.APB2CLKDivider = RCC_HCLK_DIV1;\n  status = HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_2);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005340,0x15e);\n  }\n  \n  hclk_freq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config((uint32_t)(SYSTICK_FREQ * hclk_freq));\n  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);\n  HAL_NVIC_SetPriority(SysTick_IRQn,0,0);\n  return;\n}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_SYSTICK_Config",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_OscConfig",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "configure_RCC_clocks_080052a0"
        },
        "FUN_08009120": {
            "renaming": {
                "FUN_08009120": "calculate_hash_08009120",
                "param_1": "hash_size",
                "param_2": "hash_values",
                "param_3": "num_values",
                "param_4": "initial_hash_value",
                "puVar1": "new_hash_values",
                "uVar2": "upper_bits",
                "iVar3": "num_values_to_process",
                "puVar4": "current_value",
                "iVar5": "mem_pool"
            },
            "code": "undefined4 * calculate_hash_08009120(int hash_size, undefined4 *hash_values, int num_values, uint32_t initial_hash_value)\n{\n  undefined4 *new_hash_values;\n  uint32_t carryover = 0;\n  int i;\n  uint32_t *current_value;\n  int num_values_to_process = hash_values[4];\n  current_value = hash_values + 5;\n  for (i = 0; i < num_values_to_process; i++) {\n    carryover = num_values * (*current_value & 0xffff) + carryover;\n    uint32_t upper_bits = num_values * (*current_value >> 0x10) + (carryover >> 0x10);\n    *current_value = (carryover & 0xffff) + upper_bits * 0x10000;\n    carryover = upper_bits >> 0x10;\n    current_value++;\n  }\n  if (carryover != 0) {\n    if (hash_values[2] <= num_values_to_process) {\n      new_hash_values = (undefined4 *)_Balloc(hash_size, hash_values[1] + 1);\n      memcpy(new_hash_values + 3, hash_values + 3, (hash_values[4] + 2) * sizeof(undefined4));\n      int mem_pool = *(int *)(hash_size + 0x4c);\n      *hash_values = *(undefined4 *)(mem_pool + hash_values[1] * sizeof(undefined4));\n      *(undefined4 **)(mem_pool + hash_values[1] * sizeof(undefined4)) = hash_values;\n    }\n    hash_values[num_values_to_process + 5] = carryover;\n    hash_values[4] = num_values_to_process + 1;\n  }\n  return hash_values;\n}",
            "called": [
                "memcpy",
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009120",
            "calling": [
                "__pow5mult",
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "calculate_hash_08009120"
        },
        "FUN_08000f58": {
            "renaming": {
                "FUN_08000f58": "calculate_result_08000f58",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "doubled_input1",
                "uVar3": "doubled_input2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_combined_zero"
            },
            "code": "uint calculate_result_08000f58(uint input1, uint input2)\n{\n  bool is_negative;\n  uint doubled_input1 = input1 * 2;\n  uint doubled_input2 = input2 * 2;\n  \n  if (((int)doubled_input1 >> 0x18 == -1 || (int)doubled_input2 >> 0x18 == -1) &&\n     ((((int)doubled_input1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  uint combined_inputs = doubled_input1 | input2 & 0x7fffffff;\n  bool is_combined_zero = combined_inputs == 0;\n  if (!is_combined_zero) {\n    combined_inputs = input1 ^ input2;\n    is_combined_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input1 = doubled_input1 + input2 * -2;\n    is_combined_zero = input1 == 0;\n  }\n  if ((is_negative && doubled_input2 <= doubled_input1) && !is_combined_zero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input2 > doubled_input1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!is_combined_zero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f58",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000f58"
        },
        "FUN_08001084": {
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "dst_byte",
                "puVar2": "dst_word",
                "puVar3": "dst_dword",
                "puVar4": "src_byte",
                "puVar5": "src_word",
                "puVar6": "src_byte",
                "uVar7": "remaining_size",
                "uVar8": "unaligned_size",
                "bVar9": "loop_condition"
            },
            "code": "void * copy_memory_08001084(void *destination, const void *source, size_t size) {\n  unsigned char *dst = (unsigned char *)destination;\n  const unsigned char *src = (const unsigned char *)source;\n  size_t i;\n  for (i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001084",
            "calling": [
                "_dtoa_r",
                "__multadd",
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "copy_memory_08001084"
        },
        "FUN_08005680": {
            "renaming": {
                "FUN_08005680": "initialize_timer_08005680",
                "htim": "timer_handler",
                "Instance": "timer_instance",
                "GPIO_InitStruct": "gpio_init",
                "Pin": "gpio_init.Pin",
                "Mode": "gpio_init.Mode",
                "Speed": "gpio_init.Speed",
                "HAL_GPIO_Init": "HAL_GPIO_Init",
                "DAT_080056b4": "timer_instance",
                "DAT_080056b8": "gpio_port"
            },
            "code": "void initialize_timer_08005680(TIM_HandleTypeDef *timer_handler)\n{\n  GPIO_InitTypeDef gpio_init;\n  if (timer_handler->Instance == DAT_080056b4) {\n    gpio_init.Pin = GPIO_PIN_9 | GPIO_PIN_8;\n    gpio_init.Mode = GPIO_MODE_AF_PP;\n    gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;\n    HAL_GPIO_Init(DAT_080056b8, &gpio_init);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005680",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "initialize_timer_08005680"
        },
        "FUN_08003260": {
            "renaming": {
                "FUN_08003260": "configureClocks_08003260",
                "RCC_ClkInitStruct": "clockInit",
                "FLatency": "latency",
                "uVar1": "sysClockFreq",
                "uVar2": "currentTick",
                "HVar3": "status",
                "tickstart": "startTick",
                "DAT_08003430": "FLASH_ACR",
                "PTR_SystemCoreClock_0800343c": "SystemCoreClock",
                "PTR_AHBPrescTable_08003438": "AHBPrescTable",
                "RCC_CLOCKTYPE_HCLK": "RCC_CLOCKTYPE_AHB",
                "RCC_CLOCKTYPE_SYSCLK": "RCC_CLOCKTYPE_SYS",
                "RCC_SYSCLKSOURCE_HSI": "RCC_SYSCLKSOURCE_HSI",
                "RCC_SYSCLKSOURCE_HSE": "RCC_SYSCLKSOURCE_HSE",
                "RCC_SYSCLKSOURCE_PLLCLK": "RCC_SYSCLKSOURCE_PLL",
                "RCC_CR_HSION": "RCC_CR_HSI_ON",
                "RCC_CR_HSEON": "RCC_CR_HSE_ON",
                "RCC_CLOCKTYPE_PCLK1": "RCC_CLOCKTYPE_APB1",
                "RCC_CLOCKTYPE_PCLK2": "RCC_CLOCKTYPE_APB2",
                "APB1CLKDivider": "APB1Prescaler",
                "APB2CLKDivider": "APB2Prescaler",
                "ahbPrescaler": "AHBPrescaler",
                "currentLatency": "currentFlashLatency"
            },
            "code": "HAL_StatusTypeDef configureClocks_08003260(RCC_ClkInitTypeDef *clockInit, uint32_t latency) {\n  uint32_t currentLatency;\n  uint32_t startTick;\n  uint32_t currentTick;\n  uint32_t sysClockFreq;\n  uint32_t ahbPrescaler;\n  HAL_StatusTypeDef status;\n  \n  currentLatency = *DAT_08003430 & 7;\n  if (currentLatency < latency) {\n    *DAT_08003430 = (*DAT_08003430 & 0xfffffff8) | latency;\n    if (currentLatency != latency) {\n      status = HAL_ERROR;\n      goto end;\n    }\n  }\n  \n  if ((clockInit->ClockType & RCC_CLOCKTYPE_HCLK) != 0) {\n    ahbPrescaler = DAT_08003434[1] & 0xfffffff0;\n    DAT_08003434[1] = ahbPrescaler | clockInit->AHBCLKDivider;\n  }\n  \n  if ((clockInit->ClockType & RCC_CLOCKTYPE_SYSCLK) == 0) {\n    goto apbClocks;\n  }\n  \n  switch (clockInit->SYSCLKSource) {\n    case RCC_SYSCLKSOURCE_HSI:\n      if ((*RCC_CR & RCC_CR_HSION) == 0) {\n        status = HAL_ERROR;\n        goto end;\n      }\n      DAT_08003434[1] = (DAT_08003434[1] & 0xfffffffc) | RCC_SYSCLKSOURCE_HSI;\n      startTick = HAL_GetTick();\n      while (((DAT_08003434[1] & 0xc) != 0) && ((HAL_GetTick() - startTick) < 5000));\n      if ((DAT_08003434[1] & 0xc) != 0) {\n        status = HAL_TIMEOUT;\n        goto end;\n      }\n      break;\n    case RCC_SYSCLKSOURCE_HSE:\n      if ((*RCC_CR & RCC_CR_HSEON) == 0) {\n        status = HAL_ERROR;\n        goto end;\n      }\n      DAT_08003434[1] = (DAT_08003434[1] & 0xfffffffc) | RCC_SYSCLKSOURCE_HSE;\n      startTick = HAL_GetTick();\n      while (((DAT_08003434[1] & 0xc) != 0) && ((HAL_GetTick() - startTick) < 5000));\n      if ((DAT_08003434[1] & 0xc) != 0) {\n        status = HAL_TIMEOUT;\n        goto end;\n      }\n      break;\n    case RCC_SYSCLKSOURCE_PLLCLK:\n      sysClockFreq = HAL_RCC_GetSysClockFreq();\n      ahbPrescaler = DAT_08003434[1] & 0xfffffff0;\n      ahbPrescaler |= clockInit->AHBCLKDivider;\n      DAT_08003434[1] = ahbPrescaler;\n      break;\n  }\n  \n  apbClocks:\n  \n  if ((clockInit->ClockType & RCC_CLOCKTYPE_PCLK1) != 0) {\n    DAT_08003434[1] = (DAT_08003434[1] & 0xfffff8ff) | (clockInit->APB1CLKDivider << 8);\n  }\n  \n  if ((clockInit->ClockType & RCC_CLOCKTYPE_PCLK2) != 0) {\n    DAT_08003434[1] = (DAT_08003434[1] & 0xffffc7ff) | (clockInit->APB2CLKDivider << 11);\n  }\n  \n  sysClockFreq = HAL_RCC_GetSysClockFreq();\n  ahbPrescaler = DAT_08003434[1] >> 4;\n  ahbPrescaler &= 0xf;\n  ahbPrescaler = PTR_PTR_AHBPrescTable_08003438_08003438[ahbPrescaler];\n  *(uint32_t *)PTR_PTR_SystemCoreClock_0800343c_0800343c = sysClockFreq >> ahbPrescaler;\n  HAL_InitTick(0xf);\n  status = HAL_OK;\n  end:\n  return status;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_RCC_GetSysClockFreq",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003260",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configureClocks_08003260"
        },
        "FUN_08009244": {
            "renaming": {
                "FUN_08009244": "allocate_and_initialize_block_08009244",
                "param_1": "size",
                "param_2": "value",
                "iVar1": "block_start"
            },
            "code": "void allocate_and_initialize_block_08009244(int size, int value)\n{\n  int block_start = _Balloc(size, 1);\n  *(int *)(block_start + 0x10) = 1;\n  *(int *)(block_start + 0x14) = value;\n  return;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009244",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_block_08009244"
        },
        "FUN_08003c5c": {
            "renaming": {
                "FUN_08003c5c": "do_nothing_08003c5c"
            },
            "code": "\nvoid do_nothing_08003c5c(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c5c",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c5c"
        },
        "FUN_08004e6c": {
            "renaming": {
                "FUN_08004e6c": "send_software_interrupt_and_return_08004e6c",
                "a0": "data",
                "a1": "interrupt_type",
                "a2": "status"
            },
            "code": "uint32_t send_software_interrupt_and_return_08004e6c(uint32_t data, uint32_t interrupt_type, int32_t status)\n{\n  software_interrupt(interrupt_type);\n  return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e6c",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "send_software_interrupt_and_return_08004e6c"
        },
        "FUN_08001762": {
            "renaming": {
                "FUN_08001762": "configureSysTick_08001762",
                "TicksNumb": "ticksNumber",
                "uVar1": "configStatus"
            },
            "code": "uint32_t configureSysTick_08001762(uint32_t ticksNumber)\n{\n  uint32_t configStatus;\n  configStatus = SysTick_Config(ticksNumber);\n  return configStatus;\n}",
            "called": [
                "SysTick_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001762",
            "calling": [
                "SystemClock_Config",
                "HAL_InitTick"
            ],
            "imported": false,
            "current_name": "configureSysTick_08001762"
        },
        "FUN_080040a0": {
            "renaming": {
                "FUN_080040a0": "setTimerInputCapturePolarityAndFilter_080040a0",
                "TIMx": "timer",
                "TIM_ICPolarity": "inputCapturePolarity",
                "TIM_ICFilter": "inputCaptureFilter",
                "uVar1": "currentCcer",
                "tmpccer": "not_renamed",
                "tmpccmr1": "not_renamed"
            },
            "code": "void setTimerInputCapturePolarityAndFilter_080040a0(TIM_TypeDef *timer, uint32_t inputCapturePolarity, uint32_t inputCaptureFilter)\n{\n  uint32_t currentCcer = timer->CCER;\n  timer->CCER = currentCcer & 0xfffffffe;\n  timer->CCMR1 = (inputCaptureFilter << 4) | (timer->CCMR1 & 0xffffff0f);\n  timer->CCER = inputCapturePolarity | (currentCcer & 0xfffffff5);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040a0",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "setTimerInputCapturePolarityAndFilter_080040a0"
        },
        "FUN_08009a18": {
            "renaming": {
                "FUN_08009a18": "reverse_copy_08009a18",
                "__dest": "dest",
                "__src": "src",
                "__n": "n",
                "puVar1": "ptr_dest",
                "puVar2": "ptr_src",
                "iVar3": "src_offset",
                "pvVar4": "dest_offset",
                "puVar5": "ptr_dest_end",
                "iVar6": "next_src_offset",
                "uVar7": "remaining_copy_size",
                "iVar8": "next_dest_offset",
                "uVar9": "remaining_bytes",
                "puVar10": "ptr_src_aligned",
                "copy_size": "copy_size"
            },
            "code": "void * reverse_copy_08009a18(void *dest, const void *src, size_t n)\n{\n  uint remaining_bytes = n;\n  uint bytes_copied = 0;\n  uint copy_size;\n  uint src_offset, dest_offset;\n\n  if (src < dest && src + n > dest) {\n    // overlapping memory regions, copy backwards\n    src_offset = n;\n    dest_offset = n;\n    while (remaining_bytes--) {\n      ((uint8_t*)dest)[--dest_offset] = ((uint8_t*)src)[--src_offset];\n    }\n  } else {\n    // non-overlapping memory regions, copy forwards\n    while (remaining_bytes > 0) {\n      if (remaining_bytes > 16 && ((uintptr_t)src & 3) == ((uintptr_t)dest & 3)) {\n        // fast copy: copy 16 bytes at a time using 32-bit loads and stores\n        copy_size = 16 - ((uintptr_t)dest & 15);\n        copy_size = copy_size > remaining_bytes ? remaining_bytes : copy_size;\n        remaining_bytes -= copy_size;\n        bytes_copied += copy_size;\n        src_offset = bytes_copied - copy_size;\n        dest_offset = bytes_copied - copy_size;\n        while (copy_size >= 16) {\n          *(uint32_t*)((uint8_t*)dest + dest_offset) = *(uint32_t*)((uint8_t*)src + src_offset);\n          *(uint32_t*)((uint8_t*)dest + dest_offset + 4) = *(uint32_t*)((uint8_t*)src + src_offset + 4);\n          *(uint32_t*)((uint8_t*)dest + dest_offset + 8) = *(uint32_t*)((uint8_t*)src + src_offset + 8);\n          *(uint32_t*)((uint8_t*)dest + dest_offset + 12) = *(uint32_t*)((uint8_t*)src + src_offset + 12);\n          copy_size -= 16;\n          src_offset += 16;\n          dest_offset += 16;\n        }\n      } else {\n        // slow copy: copy one byte at a time\n        copy_size = remaining_bytes;\n        remaining_bytes = 0;\n        bytes_copied += copy_size;\n        src_offset = bytes_copied - copy_size;\n        dest_offset = bytes_copied - copy_size;\n        while (copy_size--) {\n          ((uint8_t*)dest)[dest_offset++] = ((uint8_t*)src)[src_offset++];\n        }\n      }\n    }\n  }\n  return dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a18",
            "calling": [
                "_realloc_r",
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_08009a18"
        },
        "FUN_0800119c": {
            "renaming": {
                "FUN_0800119c": "convert_fixed_point_to_integer_0800119c",
                "param_1": "fixed_point_num",
                "param_2": "fixed_point_num",
                "uVar1": "shifted_num_2",
                "iVar2": "shifted_num",
                "uVar3": "shifted_amount"
            },
            "code": "uint convert_fixed_point_to_integer_0800119c(uint fixed_point_num, uint num_of_bits_to_shift) {\n  uint shifted_num = fixed_point_num * 2 + 0x200000;\n  if (fixed_point_num * 2 < 0xffe00000) {\n    if (shifted_num >= 0) {\n      return 0;\n    }\n    uint abs_shifted_num = (-shifted_num) >> 0x15;\n    uint shifted_amount = -abs_shifted_num - 0x3e1;\n    if (abs_shifted_num < 0xfffffc20 && shifted_amount != 0) {\n      uint shifted_num_2 = (fixed_point_num << 0xb | 0x80000000 | DAT_08001204 >> 0x15) >> (shifted_amount & 0xff);\n      if ((fixed_point_num & 0x80000000) != 0) {\n        shifted_num_2 = -shifted_num_2;\n      }\n      return shifted_num_2;\n    }\n  }\n  else if ((fixed_point_num | fixed_point_num << 0xc) != 0) {\n    return 0;\n  }\n  fixed_point_num = fixed_point_num & 0x80000000;\n  if (fixed_point_num == 0) {\n    fixed_point_num = 0x7fffffff;\n  }\n  return fixed_point_num;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800119c",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "convert_fixed_point_to_integer_0800119c"
        },
        "FUN_080090b4": {
            "renaming": {
                "FUN_080090b4": "unlockMallocRecursiveMutex_080090b4",
                "PTR___lock___malloc_recursive_mutex_080090bc": "PTR_malloc_recursive_mutex"
            },
            "code": "void unlockMallocRecursiveMutex_080090b4() {\n  __retarget_lock_release_recursive(PTR___lock___malloc_recursive_mutex_080090bc);\n  return;\n}",
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090b4",
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "unlockMallocRecursiveMutex_080090b4"
        },
        "FUN_08000f60": {
            "renaming": {
                "FUN_08000f60": "calculate_result_08000f60",
                "param_1": "num1",
                "param_2": "num2",
                "uVar2": "shifted_num1",
                "uVar3": "shifted_num2",
                "uVar4": "merged_nums",
                "bVar1": "is_negative",
                "bVar5": "merged_nums_are_zero"
            },
            "code": "uint calculate_result_08000f60(uint num1, uint num2)\n{\n  bool has_overflow = false;\n  uint shifted_num1 = num1 * 2;\n  uint shifted_num2 = num2 * 2;\n  if (((int)shifted_num1 >> 0x18 == -1 || (int)shifted_num2 >> 0x18 == -1) && ((((int)shifted_num1 >> 0x18 == -1 && ((num1 & 0x7fffff) != 0)) || (((int)shifted_num2 >> 0x18 == -1 && ((num2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  uint merged_nums = shifted_num1 | num2 & 0x7fffffff;\n  bool merged_nums_are_zero = merged_nums == 0;\n  if (!merged_nums_are_zero) {\n    merged_nums = num1 ^ num2;\n    merged_nums_are_zero = merged_nums == 0;\n  }\n  bool is_negative = -1 < (int)merged_nums;\n  if (is_negative) {\n    num1 = shifted_num1 + num2 * -2;\n    merged_nums_are_zero = num1 == 0;\n  }\n  if (is_negative && shifted_num2 <= shifted_num1 && !merged_nums_are_zero) {\n    num1 = (int)num2 >> 0x1f;\n  }\n  if (!is_negative || shifted_num2 > shifted_num1) {\n    num1 = ~((int)num2 >> 0x1f);\n  }\n  if (!merged_nums_are_zero) {\n    num1 = num1 | 1;\n  }\n  return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f60",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000f60"
        },
        "FUN_0800422e": {
            "renaming": {
                "FUN_0800422e": "set_TIM_BreakDeadTimeConfig_0800422e",
                "htim": "htim_ptr",
                "sBreakDeadTimeConfig": "break_dead_time_config",
                "HVar1": "status",
                "tmpbdtr": "bdtr_tmp"
            },
            "code": "HAL_StatusTypeDef set_TIM_BreakDeadTimeConfig_0800422e(TIM_HandleTypeDef *htim, TIM_BreakDeadTimeConfigTypeDef *break_dead_time_config)\n{\n  HAL_StatusTypeDef status;\n  uint32_t bdtr_tmp;\n  if (htim->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    htim->Lock = HAL_LOCKED;\n    bdtr_tmp = htim->Instance->BDTR;\n    bdtr_tmp &= 0xfffffcff;\n    bdtr_tmp &= 0xfffffbff;\n    bdtr_tmp &= 0xfffff7ff;\n    bdtr_tmp &= 0xffffefff;\n    bdtr_tmp &= 0xffffdfff;\n    bdtr_tmp &= 0xffffbfff;\n    bdtr_tmp &= 0xffff7fff;\n    bdtr_tmp |= break_dead_time_config->AutomaticOutput;\n    bdtr_tmp |= break_dead_time_config->BreakPolarity;\n    bdtr_tmp |= break_dead_time_config->BreakState;\n    bdtr_tmp |= break_dead_time_config->OffStateRunMode;\n    bdtr_tmp |= break_dead_time_config->OffStateIDLEMode;\n    bdtr_tmp |= break_dead_time_config->LockLevel;\n    bdtr_tmp |= break_dead_time_config->DeadTime;\n    htim->Instance->BDTR = bdtr_tmp;\n    htim->Lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800422e",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "set_TIM_BreakDeadTimeConfig_0800422e"
        },
        "FUN_08008af4": {
            "renaming": {
                "FUN_08008af4": "do_nothing_08008af4"
            },
            "code": "\nvoid do_nothing_08008af4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af4",
            "calling": [
                "__register_exitproc",
                "__malloc_unlock"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af4"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "do_nothing_08008af0"
            },
            "code": "\nvoid do_nothing_08008af0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "__register_exitproc",
                "__malloc_lock"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af0"
        },
        "FUN_0800151c": {
            "renaming": {
                "FUN_0800151c": "configureSysTick_0800151c",
                "TickPriority": "tickPriority",
                "uVar1": "configResult",
                "HVar2": "status",
                "PTR_SystemCoreClock_08001570": "systemCoreClock",
                "PTR_uwTickFreq_08001574": "tickFreq",
                "SysTick_IRQn": "SysTick_IRQn",
                "PTR_uwTickPrio_08001578": "tickPriorityPointer"
            },
            "code": "HAL_StatusTypeDef configureSysTick_0800151c(uint32_t tickPriority)\n{\n  uint32_t PTR_SystemCoreClock_08001570 = *(uint *)PTR_SystemCoreClock_08001570;\n  uint32_t PTR_uwTickFreq_08001574 = (uint32_t)(PTR_SystemCoreClock_08001570 / (1000 / (uint32_t)*(byte *)PTR_uwTickFreq_08001574));\n  uint32_t configResult = HAL_SYSTICK_Config(PTR_uwTickFreq_08001574);\n  HAL_StatusTypeDef status;\n  if (configResult == 0) {\n    if (tickPriority < 0x10) {\n      HAL_NVIC_SetPriority(SysTick_IRQn, tickPriority, 0);\n      *(uint32_t *)PTR_uwTickPrio_08001578 = tickPriority;\n      status = HAL_OK;\n    }\n    else {\n      status = HAL_ERROR;\n    }\n  }\n  else {\n    status = HAL_ERROR;\n  }\n  return status;\n}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800151c",
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "configureSysTick_0800151c"
        },
        "FUN_08000f68": {
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "temp_result",
                "bVar1": "is_negative",
                "bVar5": "is_temp_result_zero"
            },
            "code": "uint calculate_result_08000f68(uint input_1, uint input_2)\n{\n  bool is_negative;\n  uint double_input_1 = input_1 * 2;\n  uint double_input_2 = input_2 * 2;\n  if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) && ((((int)double_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) || (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  uint temp_result = double_input_1 | input_2 & 0x7fffffff;\n  bool is_temp_result_zero = temp_result == 0;\n  if (!is_temp_result_zero) {\n    temp_result = input_1 ^ input_2;\n    is_temp_result_zero = temp_result == 0;\n  }\n  is_negative = -1 < (int)temp_result;\n  if (is_negative) {\n    input_1 = double_input_1 + input_2 * -2;\n    is_temp_result_zero = input_1 == 0;\n  }\n  if ((is_negative && double_input_2 <= double_input_1) && !is_temp_result_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || double_input_2 > double_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_temp_result_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f68",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f68"
        },
        "FUN_08009258": {
            "renaming": {
                "FUN_08009258": "calculate_hash_08009258",
                "param_1": "output",
                "param_2": "output_size",
                "param_3": "input",
                "puVar1": "input_ptr_1",
                "puVar2": "input_ptr_2",
                "iVar3": "output_ptr",
                "uVar4": "carry",
                "puVar5": "output_ptr_inner",
                "uVar6": "input_ptr",
                "puVar7": "input_end",
                "puVar14": "input_ptr_inner",
                "puVar15": "output_ptr_inner",
                "puVar16": "input_ptr_inner",
                "puVar17": "output_ptr_inner",
                "puVar18": "output_ptr_inner",
                "iVar9": "output_size",
                "iVar10": "min_size",
                "uVar11": "product",
                "iVar12": "input_size",
                "iVar13": "input"
            },
            "code": "void calculate_hash_08009258(uint8_t* output, int output_size, uint8_t* input, int input_size)\n{\n  uint32_t* input_ptr_1 = (uint32_t *)(input + 0x10);\n  uint32_t* input_ptr_2 = (uint32_t *)(output + 0x14);\n  uint32_t* output_ptr = input_ptr_2 + (input_size > *(int *)(input + 8) ? *(int *)(input + 0x10) : *(int *)(output + 0x10));\n  for (uint32_t* i = input_ptr_2; i < output_ptr; i++) {\n    *i = 0;\n  }\n  uint32_t* input_end = (uint32_t *)(input + 0x14 + (*(int *)(input + 0x10) * 4));\n  for (uint32_t* input_ptr = (uint32_t *)(input + 0x14); input_ptr < input_end; input_ptr++) {\n    if (*input_ptr == 0) {\n      continue;\n    }\n    uint32_t carry = 0;\n    uint32_t* output_ptr_inner = input_ptr_2;\n    uint32_t* input_ptr_inner = input_ptr_1;\n    for (; input_ptr_inner < input_ptr_1 + *(int *)(input + 0x10); input_ptr_inner++, output_ptr_inner++) {\n      uint64_t product = (uint64_t)(*input_ptr_inner) * (*input_ptr);\n      uint64_t sum = carry + *output_ptr_inner + (uint32_t)product;\n      carry = (uint32_t)(product >> 32) + (sum >> 32);\n      *output_ptr_inner = (uint32_t)sum;\n    }\n    while (carry != 0) {\n      uint64_t sum = carry + *output_ptr_inner;\n      carry = sum >> 32;\n      *output_ptr_inner = (uint32_t)sum;\n      output_ptr_inner++;\n    }\n  }\n  while (output_ptr > input_ptr_2 && *(output_ptr - 1) == 0) {\n    output_ptr--;\n  }\n  *(int *)(output + 0x10) = output_ptr - input_ptr_2;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009258",
            "calling": [
                "__pow5mult",
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "calculate_hash_08009258"
        },
        "FUN_08000c08": {
            "renaming": {
                "FUN_08000c08": "calculate_08000c08",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift",
                "iVar3": "multiplier",
                "uVar4": "mask",
                "shifted_input": "shifted_input",
                "mask": "mask",
                "sign_extension": "sign_extension",
                "result": "result"
            },
            "code": "uint calculate_08000c08(uint input)\n{\n  int leading_zeroes = count_leading_zeroes(input);\n  int shift = leading_zeroes - 8;\n  int multiplier = shift * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint mask = 0 << (shift & 0xff);\n    uint shifted_input = input << (shift & 0xff);\n    uint shifted_mask = 0U >> (0x20 - shift & 0xff);\n    uint result = multiplier + shifted_input + shifted_mask + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint mask = input << (leading_zeroes + 0x18U & 0xff);\n  uint shifted_input = param >> (0x20 - (leading_zeroes + 0x18U) & 0xff);\n  int sign_extension = ((int)mask >> 0x1f);\n  uint result = multiplier + (shifted_input - sign_extension);\n  if ((mask & 0x7fffffff) == 0) {\n    result = result & ~(mask >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c08",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_08000c08"
        },
        "FUN_08004366": {
            "renaming": {
                "FUN_08004366": "do_nothing_08004366"
            },
            "code": "\nvoid do_nothing_08004366(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004366",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004366"
        },
        "FUN_080042de": {
            "renaming": {
                "FUN_080042de": "configureMasterTimer_080042de",
                "htim": "timerHandle",
                "sMasterConfig": "masterConfig",
                "HVar1": "status",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "HAL_UNLOCKED": "HAL_UNLOCKED"
            },
            "code": "HAL_StatusTypeDef configureMasterTimer_080042de(TIM_HandleTypeDef *timerHandle, TIM_MasterConfigTypeDef *masterConfig)\n{\n  HAL_StatusTypeDef status;\n  \n  if (timerHandle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timerHandle->Lock = HAL_LOCKED;\n    timerHandle->State = HAL_TIM_STATE_BUSY;\n    timerHandle->Instance->CR2 &= 0xffffff8f;\n    timerHandle->Instance->CR2 |= masterConfig->MasterOutputTrigger;\n    timerHandle->Instance->SMCR &= 0xffffff7f;\n    timerHandle->Instance->SMCR |= masterConfig->MasterSlaveMode;\n    timerHandle->State = HAL_TIM_STATE_READY;\n    timerHandle->Lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042de",
            "calling": [
                "MX_TIM1_Init",
                "MX_TIM2_Init"
            ],
            "imported": false,
            "current_name": "configureMasterTimer_080042de"
        },
        "FUN_08003c6e": {
            "renaming": {
                "FUN_08003c6e": "do_nothing_08003c6e"
            },
            "code": "\nvoid do_nothing_08003c6e(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c6e",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c6e"
        },
        "FUN_08008af8": {
            "renaming": {
                "FUN_08008af8": "FUNC_08008af8"
            },
            "code": "\nint * FUNC_08008af8(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint *puVar6;\n  int iVar7;\n  undefined *puVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined4 *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  uint uVar14;\n  uint uVar15;\n  int iVar16;\n  undefined4 *puVar17;\n  undefined4 *puVar18;\n  \n  uVar14 = param_2 + 0xb;\n  if (uVar14 < 0x17) {\n    if (0x10 < param_2) goto LAB_08008c7a;\n    __malloc_lock();\n    uVar15 = 0x10;\n    iVar7 = 0x18;\n    uVar14 = 2;\nLAB_08008b18:\n    puVar8 = PTR___malloc_av__08008e4c + iVar7;\n    puVar12 = *(undefined **)(puVar8 + 4);\n    if ((puVar12 != puVar8 + -8) || (puVar12 = *(undefined **)(puVar8 + 0xc), puVar8 != puVar12)) {\n      iVar7 = *(int *)(puVar12 + 0xc);\n      puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n      uVar14 = *(uint *)(puVar8 + 4);\nLAB_08008b34:\n      iVar16 = *(int *)(puVar12 + 8);\n      *(int *)(iVar16 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar16;\n      *(uint *)(puVar8 + 4) = uVar14 | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar12 + 8);\n    }\n    uVar14 = uVar14 + 2;\n  }\n  else {\n    uVar15 = uVar14 & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_08008c7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n    __malloc_lock();\n    if (uVar15 < 0x1f8) {\n      uVar14 = uVar14 >> 3;\n      iVar7 = uVar15 + 8;\n      goto LAB_08008b18;\n    }\n    uVar4 = uVar14 >> 9;\n    if (uVar4 == 0) {\n      iVar7 = 0x200;\n      uVar9 = 0x40;\n      uVar4 = 0x3f;\n    }\n    else if (uVar4 < 5) {\n      uVar9 = (uVar14 >> 6) + 0x39;\n      uVar4 = (uVar14 >> 6) + 0x38;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x15) {\n      uVar9 = uVar4 + 0x5c;\n      uVar4 = uVar4 + 0x5b;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x55) {\n      uVar9 = (uVar14 >> 0xc) + 0x6f;\n      uVar4 = (uVar14 >> 0xc) + 0x6e;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x155) {\n      uVar9 = (uVar14 >> 0xf) + 0x78;\n      uVar4 = (uVar14 >> 0xf) + 0x77;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x555) {\n      uVar9 = (uVar14 >> 0x12) + 0x7d;\n      uVar4 = (uVar14 >> 0x12) + 0x7c;\n      iVar7 = uVar9 * 8;\n    }\n    else {\n      iVar7 = 0x3f8;\n      uVar9 = 0x7f;\n      uVar4 = 0x7e;\n    }\n    for (puVar12 = *(undefined **)(PTR___malloc_av__08008e4c + iVar7 + 4); uVar14 = uVar9,\n        PTR___malloc_av__08008e4c + iVar7 + -8 != puVar12; puVar12 = *(undefined **)(puVar12 + 0xc))\n    {\n      iVar16 = (*(uint *)(puVar12 + 4) & 0xfffffffc) - uVar15;\n      uVar14 = uVar4;\n      if (0xf < iVar16) break;\n      if (-1 < iVar16) {\n        puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n        uVar14 = *(uint *)(puVar8 + 4);\n        iVar7 = *(int *)(puVar12 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  puVar8 = PTR_PTR___malloc_av__08008e60;\n  puVar12 = PTR___malloc_av__08008e4c;\n  puVar13 = *(undefined **)(PTR___malloc_av__08008e4c + 0x10);\n  if (puVar13 == PTR_PTR___malloc_av__08008e60) {\n    uVar4 = *(uint *)(PTR___malloc_av__08008e4c + 4);\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) goto LAB_08008c06;\n  }\n  else {\n    uVar9 = *(uint *)(puVar13 + 4);\n    uVar10 = uVar9 & 0xfffffffc;\n    uVar4 = uVar10 - uVar15;\n    if (0xf < (int)uVar4) {\n      puVar3 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar12 + 0x10) = puVar3;\n      *(undefined **)(puVar12 + 0x14) = puVar3;\n      *(undefined **)(puVar3 + 8) = puVar8;\n      *(undefined **)(puVar3 + 0xc) = puVar8;\n      *(uint *)(puVar3 + 4) = uVar4 | 1;\n      *(uint *)(puVar13 + uVar10) = uVar4;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR___malloc_av__08008e4c + 0x10) = PTR_PTR___malloc_av__08008e60;\n    *(undefined **)(puVar12 + 0x14) = puVar8;\n    if (-1 < (int)uVar4) {\n      *(uint *)(puVar13 + uVar10 + 4) = *(uint *)(puVar13 + uVar10 + 4) | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar10 < 0x200) {\n      iVar7 = (uVar9 >> 3) + 1;\n      iVar16 = *(int *)(puVar12 + iVar7 * 8);\n      uVar4 = 1 << ((int)(uVar9 >> 3) >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n      *(int *)(puVar13 + 8) = iVar16;\n      *(undefined **)(puVar13 + 0xc) = puVar12 + iVar7 * 8 + -8;\n      *(uint *)(puVar12 + 4) = uVar4;\n      *(undefined **)(puVar12 + iVar7 * 8) = puVar13;\n      *(undefined **)(iVar16 + 0xc) = puVar13;\n    }\n    else {\n      uVar4 = uVar9 >> 9;\n      if (uVar4 < 5) {\n        iVar7 = ((uVar9 >> 6) + 0x39) * 8;\n        iVar16 = (uVar9 >> 6) + 0x38;\n      }\n      else if (uVar4 < 0x15) {\n        iVar7 = (uVar4 + 0x5c) * 8;\n        iVar16 = uVar4 + 0x5b;\n      }\n      else if (uVar4 < 0x55) {\n        iVar7 = ((uVar9 >> 0xc) + 0x6f) * 8;\n        iVar16 = (uVar9 >> 0xc) + 0x6e;\n      }\n      else if (uVar4 < 0x155) {\n        iVar7 = ((uVar9 >> 0xf) + 0x78) * 8;\n        iVar16 = (uVar9 >> 0xf) + 0x77;\n      }\n      else if (uVar4 < 0x555) {\n        iVar7 = ((uVar9 >> 0x12) + 0x7d) * 8;\n        iVar16 = (uVar9 >> 0x12) + 0x7c;\n      }\n      else {\n        iVar7 = 0x3f8;\n        iVar16 = 0x7e;\n      }\n      puVar3 = *(undefined **)(puVar12 + iVar7);\n      puVar1 = puVar12 + iVar7 + -8;\n      if (puVar1 == puVar3) {\n        uVar4 = 1 << (iVar16 >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n        *(uint *)(puVar12 + 4) = uVar4;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar3 + 4) & 0xfffffffc) <= uVar10) break;\n          puVar3 = *(undefined **)(puVar3 + 8);\n        } while (puVar1 != puVar3);\n        puVar1 = *(undefined **)(puVar3 + 0xc);\n        uVar4 = *(uint *)(puVar12 + 4);\n      }\n      *(undefined **)(puVar13 + 8) = puVar3;\n      *(undefined **)(puVar13 + 0xc) = puVar1;\n      *(undefined **)(puVar1 + 8) = puVar13;\n      *(undefined **)(puVar3 + 0xc) = puVar13;\n    }\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) {\nLAB_08008c06:\n      if ((uVar9 & uVar4) == 0) {\n        uVar14 = uVar14 & 0xfffffffc;\n        do {\n          uVar9 = uVar9 << 1;\n          uVar14 = uVar14 + 4;\n        } while ((uVar9 & uVar4) == 0);\n      }\n      do {\n        puVar17 = (undefined4 *)(puVar12 + uVar14 * 8);\n        uVar4 = uVar14;\n        puVar18 = puVar17;\n        do {\n          for (puVar11 = (undefined4 *)puVar18[3]; puVar18 != puVar11;\n              puVar11 = (undefined4 *)puVar11[3]) {\n            uVar10 = puVar11[1] & 0xfffffffc;\n            uVar5 = uVar10 - uVar15;\n            if (0xf < (int)uVar5) {\n              iVar16 = puVar11[2];\n              iVar7 = puVar11[3];\n              puVar13 = (undefined *)(uVar15 + (int)puVar11);\n              puVar11[1] = uVar15 | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              *(undefined **)(puVar12 + 0x10) = puVar13;\n              *(undefined **)(puVar12 + 0x14) = puVar13;\n              *(undefined **)(puVar13 + 8) = puVar8;\n              *(undefined **)(puVar13 + 0xc) = puVar8;\n              *(uint *)(puVar13 + 4) = uVar5 | 1;\n              *(uint *)((int)puVar11 + uVar10) = uVar5;\n              __malloc_unlock(param_1);\n              return puVar11 + 2;\n            }\n            if (-1 < (int)uVar5) {\n              iVar7 = puVar11[3];\n              iVar16 = puVar11[2];\n              *(uint *)((int)puVar11 + uVar10 + 4) = *(uint *)((int)puVar11 + uVar10 + 4) | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              __malloc_unlock(param_1);\n              return puVar11 + 2;\n            }\n          }\n          uVar4 = uVar4 + 1;\n          puVar18 = puVar18 + 2;\n        } while ((uVar4 & 3) != 0);\n        do {\n          uVar10 = uVar14 & 3;\n          puVar18 = puVar17 + -2;\n          uVar14 = uVar14 - 1;\n          if (uVar10 == 0) {\n            uVar10 = *(uint *)(puVar12 + 4) & ~uVar9;\n            *(uint *)(puVar12 + 4) = uVar10;\n            goto LAB_08008f24;\n          }\n          puVar17 = (undefined4 *)*puVar17;\n        } while (puVar17 == puVar18);\n        uVar10 = *(uint *)(puVar12 + 4);\nLAB_08008f24:\n        uVar9 = uVar9 * 2;\n        if ((uVar10 <= uVar9 && uVar9 - uVar10 != 0) || (uVar14 = uVar4, uVar9 == 0)) break;\n        for (; (uVar9 & uVar10) == 0; uVar9 = uVar9 << 1) {\n          uVar14 = uVar14 + 4;\n        }\n      } while( true );\n    }\n  }\n  puVar8 = PTR___malloc_sbrk_base_08008e64;\n  puVar13 = *(undefined **)(puVar12 + 8);\n  uVar14 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar14) && (uVar4 = uVar14 - uVar15, 0xf < (int)uVar4)) goto LAB_08008dac;\n  if (*(int *)PTR___malloc_sbrk_base_08008e64 == -1) {\n    uVar4 = uVar15 + *(int *)PTR___malloc_top_pad_08008e50 + 0x10;\n  }\n  else {\n    uVar4 = uVar15 + *(int *)PTR___malloc_top_pad_08008e50 + 0x100f & 0xfffff000;\n  }\n  puVar1 = (undefined *)_sbrk_r(param_1,uVar4);\n  puVar6 = (uint *)PTR___malloc_current_mallinfo_08009018;\n  puVar3 = PTR___malloc_current_mallinfo_08008e54;\n  if (puVar1 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar14 = *(uint *)(puVar13 + 4);\n  }\n  else {\n    puVar2 = puVar13 + uVar14;\n    if (puVar2 < puVar1 || puVar2 == puVar1) {\n      uVar9 = *(int *)PTR___malloc_current_mallinfo_08008e54 + uVar4;\n      *(uint *)PTR___malloc_current_mallinfo_08008e54 = uVar9;\n      puVar6 = (uint *)puVar3;\n      if ((puVar2 != puVar1) || (((uint)puVar2 & 0xfff) != 0)) goto LAB_08008d02;\n      *(uint *)(*(int *)(puVar12 + 8) + 4) = uVar14 + uVar4 | 1;\n    }\n    else {\n      if (puVar13 != puVar12) goto LAB_08008ed8;\n      uVar9 = *(int *)PTR___malloc_current_mallinfo_08009018 + uVar4;\n      *(uint *)PTR___malloc_current_mallinfo_08009018 = uVar9;\nLAB_08008d02:\n      if (*(int *)puVar8 == -1) {\n        *(undefined **)puVar8 = puVar1;\n      }\n      else {\n        *puVar6 = (uint)(puVar1 + (uVar9 - (int)puVar2));\n      }\n      uVar9 = (uint)puVar1 & 7;\n      if (uVar9 == 0) {\n        iVar7 = 0x1000;\n      }\n      else {\n        puVar1 = puVar1 + (8 - uVar9);\n        iVar7 = 0x1008 - uVar9;\n      }\n      iVar7 = iVar7 - ((uint)(puVar1 + uVar4) & 0xfff);\n      iVar16 = _sbrk_r(param_1,iVar7);\n      if (iVar16 == -1) {\n        uVar4 = 1;\n        iVar7 = 0;\n      }\n      else {\n        uVar4 = (iVar16 - (int)puVar1) + iVar7 | 1;\n      }\n      uVar9 = *puVar6 + iVar7;\n      *(undefined **)(puVar12 + 8) = puVar1;\n      *puVar6 = uVar9;\n      *(uint *)(puVar1 + 4) = uVar4;\n      if (puVar13 != puVar12) {\n        if (uVar14 < 0x10) {\n          *(undefined4 *)(puVar1 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        uVar14 = uVar14 - 0xc & 0xfffffff8;\n        *(uint *)(puVar13 + 4) = *(uint *)(puVar13 + 4) & 1 | uVar14;\n        *(undefined4 *)(puVar13 + uVar14 + 4) = 5;\n        *(undefined4 *)(puVar13 + uVar14 + 8) = 5;\n        if (0xf < uVar14) {\n          _free_r(param_1,puVar13 + 8);\n          uVar9 = *puVar6;\n        }\n      }\n    }\n    puVar8 = PTR___malloc_max_total_mem_08008e5c;\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar4 = *(uint *)PTR___malloc_max_total_mem_08008e5c;\n    if (*(uint *)PTR___malloc_max_sbrked_mem_08008e58 < uVar9) {\n      *(uint *)PTR___malloc_max_sbrked_mem_08008e58 = uVar9;\n    }\n    uVar14 = *(uint *)(puVar13 + 4);\n    if (uVar4 < uVar9) {\n      *(uint *)puVar8 = uVar9;\n    }\n  }\n  uVar4 = (uVar14 & 0xfffffffc) - uVar15;\n  if ((uVar15 <= (uVar14 & 0xfffffffc)) && (0xf < (int)uVar4)) {\nLAB_08008dac:\n    *(uint *)(puVar13 + 4) = uVar15 | 1;\n    *(undefined **)(puVar12 + 8) = puVar13 + uVar15;\n    *(uint *)(puVar13 + uVar15 + 4) = uVar4 | 1;\n    __malloc_unlock(param_1);\n    return (int *)(puVar13 + 8);\n  }\nLAB_08008eee:\n  __malloc_unlock(param_1);\n  return (int *)0x0;\n}\n\n",
            "called": [
                "_free_r",
                "_sbrk_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008af8",
            "calling": [
                "_realloc_r",
                "_calloc_r",
                "_svfprintf_r",
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "FUNC_08008af8"
        },
        "FUN_08004bd8": {
            "renaming": {
                "FUN_08004bd8": "calculate_pitch_08004bd8",
                "mpu6050": "mpu",
                "pitch": "pitch",
                "uVar1": "unused1",
                "uVar2": "unused2",
                "uVar3": "unused3",
                "acc_pitch": "acc_pitch",
                "gyro_x": "gyro_x",
                "PTR_total_pitch_08004d60": "total_pitch_ptr",
                "DAT_08004d40": "gyro_weight",
                "DAT_08004d44": "unused4",
                "mpu6050->gyroX": "mpu->gyroX",
                "mpu6050->offset_gyroX": "mpu->offset_gyroX",
                "__aeabi_f2d": "float_to_double",
                "accY": "mpu->accY",
                "accZ": "mpu->accZ",
                "DAT_08004d64": "acc_weight",
                "atan2": "atan2",
                "DAT_08004d68": "rad_to_deg",
                "DAT_08004d48": "gyro_gain",
                "DAT_08004d4c": "unused5",
                "mpu6050->offset_acc_pitch": "mpu->offset_acc_pitch",
                "__subdf3": "double_subtract",
                "DAT_08004d6c": "unused6",
                "__aeabi_dadd": "double_add",
                "__truncdfsf2": "double_to_float",
                "*PTR_first_run_08004d70": "first_run_ptr"
            },
            "code": "void calculate_pitch_08004bd8(Mpu6050 *mpu, float *pitch) {\\n  float gyro_x = mpu->gyroX - mpu->offset_gyroX;\\n  float acc_y = mpu->accY / 16384.0;\\n  float acc_z = mpu->accZ / 16384.0;\\n  float acc_pitch = atan2(acc_y, acc_z) * 180 / M_PI - mpu->offset_acc_pitch;\\n  if (*PTR_first_run_08004d70 == \"\\0\") {\\n    float total_pitch = *(float *)PTR_total_pitch_08004d60;\\n    total_pitch = total_pitch * 0.94 + acc_pitch * 0.06;\\n    *(float *)PTR_total_pitch_08004d60 = total_pitch;\\n  }\\n  else {\\n    *(float *)PTR_total_pitch_08004d60 = acc_pitch;\\n    *PTR_first_run_08004d70 = 0;\\n  }\\n  *pitch = *(float *)PTR_total_pitch_08004d60;\\n  return;\\n}",
            "called": [
                "__muldf3",
                "__subdf3",
                "__aeabi_fsub",
                "__divdf3",
                "__truncdfsf2",
                "__aeabi_f2d",
                "atan2",
                "__aeabi_dadd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bd8",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_pitch_08004bd8"
        },
        "FUN_080090c0": {
            "renaming": {
                "FUN_080090c0": "allocate_memory_080090c0",
                "param_1": "size",
                "param_2": "index",
                "puVar1": "memory_block",
                "iVar2": "ptr"
            },
            "code": "undefined4 * allocate_memory_080090c0(int size, uint index)\n{\n  undefined4 *memory_block;\n  int ptr = *(int *)(size + 0x4c);\n  if (ptr == 0) {\n    ptr = _calloc_r(size, 4, 0x21);\n    *(int *)(size + 0x4c) = ptr;\n    if (ptr == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  memory_block = *(undefined4 **)(ptr + index * 4);\n  if (memory_block == (undefined4 *)0x0) {\n    int size_to_allocate = 1 << (index & 0xff);\n    memory_block = (undefined4 *)_calloc_r(size, 1, (size_to_allocate + 5) * 4);\n    if (memory_block == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    memory_block[1] = index;\n    memory_block[2] = size_to_allocate;\n  }\n  else {\n    *(undefined4 *)(ptr + index * 4) = *memory_block;\n  }\n  memory_block[3] = 0;\n  memory_block[4] = 0;\n  return memory_block;\n}",
            "called": [
                "_calloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c0",
            "calling": [
                "__mdiff",
                "__lshift",
                "__pow5mult",
                "_dtoa_r",
                "__i2b",
                "__multadd",
                "__multiply",
                "__d2b"
            ],
            "imported": false,
            "current_name": "allocate_memory_080090c0"
        },
        "FUN_080091e4": {
            "renaming": {
                "FUN_080091e4": "count_leading_zeros_080091e4",
                "param_1": "num",
                "uVar1": "zeros_count",
                "uVar2": "num_copy"
            },
            "code": "uint count_leading_zeros_080091e4(uint *num)\n{\n  uint num_copy = *num;\n  uint zeros_count = num_copy & 7;\n\n  if (zeros_count == 0) {\n    if ((num_copy & 0xffff) == 0) {\n      num_copy = num_copy >> 0x10;\n      zeros_count = 0x10;\n    }\n    if ((num_copy & 0xff) == 0) {\n      num_copy = num_copy >> 8;\n      zeros_count += 8;\n    }\n    if ((num_copy & 0xf) == 0) {\n      num_copy = num_copy >> 4;\n      zeros_count += 4;\n    }\n    if ((num_copy & 3) == 0) {\n      num_copy = num_copy >> 2;\n      zeros_count += 2;\n    }\n    if (-1 < (int)(num_copy << 0x1f)) {\n      num_copy = num_copy >> 1;\n      if (num_copy == 0) {\n        return 0x20;\n      }\n      zeros_count++;\n    }\n    *num = num_copy;\n    return zeros_count;\n  }\n  if (-1 < (int)(num_copy << 0x1f)) {\n    if ((int)(num_copy << 0x1e) < 0) {\n      *num = num_copy >> 1;\n      return 1;\n    }\n    *num = num_copy >> 2;\n    return 2;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091e4",
            "calling": [
                "__d2b"
            ],
            "imported": false,
            "current_name": "count_leading_zeros_080091e4"
        },
        "FUN_08000cb8": {
            "renaming": {
                "FUN_08000cb8": "FUNC_08000cb8"
            },
            "code": "\nuint FUNC_08000cb8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e08;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e08:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cb8",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "FUNC_08000cb8"
        },
        "FUN_080098c0": {
            "renaming": {
                "FUN_080098c0": "add_data_to_list_080098c0",
                "param_1": "type",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "data3",
                "puVar1": "recursive_mutex",
                "uVar2": "mutex",
                "uVar3": "flag",
                "uVar4": "list_size",
                "iVar5": "list_head",
                "iVar6": "global_impure_ptr",
                "iVar7": "new_item_index"
            },
            "code": "undefined4 add_data_to_list_080098c0(int type,undefined4 data1,undefined4 data2,undefined4 data3)\n{\n  undefined *recursive_mutex = PTR___atexit_recursive_mutex_08009974;\n  __retarget_lock_acquire_recursive(*(undefined4 *)PTR___atexit_recursive_mutex_08009974);\n  int global_impure_ptr = *(int *)PTR__global_impure_ptr_08009978;\n  int list_head = *(int *)(global_impure_ptr + 0x148);\n  if (list_head == 0) {\n    list_head = global_impure_ptr + 0x14c;\n    *(int *)(global_impure_ptr + 0x148) = list_head;\n  }\n  uint list_size = *(uint *)(list_head + 4);\n  int new_item_index;\n  if ((int)list_size < 0x20) {\n    new_item_index = list_size + 1;\n  }\n  else {\n    if (DAT_0800997c == 0) {\n      __retarget_lock_release_recursive(*(undefined4 *)recursive_mutex);\n      return 0xffffffff;\n    }\n    int new_list_size = 400;\n    list_size = 0;\n    _DAT_00000190 = *(undefined4 *)(global_impure_ptr + 0x148);\n    new_item_index = 1;\n    _DAT_00000194 = 0;\n    *(undefined4 *)(global_impure_ptr + 0x148) = 400;\n    _DAT_00000318 = 0;\n    _DAT_0000031c = 0;\n  }\n  if (type != 0) {\n    int new_item_ptr = list_head + list_size * 4;\n    *(undefined4 *)(new_item_ptr + 0x88) = data2;\n    uint flag = 1 << (list_size & 0xff);\n    *(uint *)(list_head + 0x188) = *(uint *)(list_head + 0x188) | flag;\n    *(undefined4 *)(new_item_ptr + 0x108) = data3;\n    if (type == 2) {\n      *(uint *)(list_head + 0x18c) = flag | *(uint *)(list_head + 0x18c);\n    }\n  }\n  *(int *)(list_head + 4) = new_item_index;\n  undefined4 mutex = *(undefined4 *)recursive_mutex;\n  *(undefined4 *)(list_head + (list_size + 2) * 4) = data1;\n  __retarget_lock_release_recursive(mutex);\n  return 0;\n}",
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098c0",
            "calling": [
                "atexit"
            ],
            "imported": false,
            "current_name": "add_data_to_list_080098c0"
        },
        "FUN_08003c80": {
            "renaming": {
                "FUN_08003c80": "do_nothing_08003c80"
            },
            "code": "\nvoid do_nothing_08003c80(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c80",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c80"
        },
        "FUN_080027f4": {
            "renaming": {
                "FUN_080027f4": "read_from_i2c_080027f4",
                "hi2c": "i2c_handle",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "Timeout": "timeout",
                "Tickstart": "start_tick",
                "HVar1": "status",
                "uVar2": "current_tick",
                "iVar3": "timeout_reached",
                "tmpreg": "tmpreg"
            },
            "code": "HAL_StatusTypeDef read_from_i2c_080027f4(I2C_HandleTypeDef* i2c_handle, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint32_t timeout, uint32_t start_tick)\n{\n  HAL_StatusTypeDef status;\n  uint32_t current_tick;\n  int timeout_reached = 0;\n  i2c_handle->Instance->CR1 |= I2C_CR1_ACK;\n  i2c_handle->Instance->CR1 |= I2C_CR1_START;\n  do {\n    if ((i2c_handle->Instance->SR1 & I2C_SR1_ADDR) == I2C_SR1_ADDR) {\n      i2c_handle->Instance->SR2;\n      break;\n    }\n    current_tick = HAL_GetTick();\n    if (timeout != HAL_MAX_DELAY && current_tick - start_tick >= timeout) {\n      timeout_reached = 1;\n      break;\n    }\n  } while (1);\n  if (!timeout_reached) {\n    i2c_handle->Instance->DR = (device_address << 1) | I2C_OAR1_ADD0;\n    do {\n      if ((i2c_handle->Instance->SR1 & (I2C_SR1_TXE | I2C_SR1_BTF)) == (I2C_SR1_TXE | I2C_SR1_BTF)) {\n        break;\n      }\n      current_tick = HAL_GetTick();\n      if (timeout != HAL_MAX_DELAY && current_tick - start_tick >= timeout) {\n        timeout_reached = 1;\n        break;\n      }\n    } while (1);\n    if (!timeout_reached) {\n      if (memory_address_size == 1) {\n        i2c_handle->Instance->DR = memory_address & 0xFF;\n      }\n      else {\n        i2c_handle->Instance->DR = (memory_address & 0xFF00) >> 8;\n        do {\n          if ((i2c_handle->Instance->SR1 & (I2C_SR1_TXE | I2C_SR1_BTF)) == (I2C_SR1_TXE | I2C_SR1_BTF)) {\n            break;\n          }\n          current_tick = HAL_GetTick();\n          if (timeout != HAL_MAX_DELAY && current_tick - start_tick >= timeout) {\n            timeout_reached = 1;\n            break;\n          }\n        } while (1);\n        if (!timeout_reached) {\n          i2c_handle->Instance->DR = memory_address & 0xFF;\n          do {\n            if ((i2c_handle->Instance->SR1 & (I2C_SR1_TXE | I2C_SR1_BTF)) == (I2C_SR1_TXE | I2C_SR1_BTF)) {\n              break;\n            }\n            current_tick = HAL_GetTick();\n            if (timeout != HAL_MAX_DELAY && current_tick - start_tick >= timeout) {\n              timeout_reached = 1;\n              break;\n            }\n          } while (1);\n        }\n      }\n      if (!timeout_reached) {\n        i2c_handle->Instance->CR1 |= I2C_CR1_START;\n        do {\n          if ((i2c_handle->Instance->SR1 & I2C_SR1_ADDR) == I2C_SR1_ADDR) {\n            i2c_handle->Instance->SR2;\n            break;\n          }\n          current_tick = HAL_GetTick();\n          if (timeout != HAL_MAX_DELAY && current_tick - start_tick >= timeout) {\n            timeout_reached = 1;\n            break;\n          }\n        } while (1);\n        if (!timeout_reached) {\n          i2c_handle->Instance->DR = (device_address << 1) | I2C_OAR1_ADD0 | 1;\n          do {\n            if ((i2c_handle->Instance->SR1 & I2C_SR1_RXNE) == I2C_SR1_RXNE) {\n              break;\n            }\n            current_tick = HAL_GetTick();\n            if (timeout != HAL_MAX_DELAY && current_tick - start_tick >= timeout) {\n              timeout_reached = 1;\n              break;\n            }\n          } while (1);\n          if (!timeout_reached) {\n            i2c_handle->Instance->CR1 &= ~I2C_CR1_ACK;\n            i2c_handle->Instance->CR1 |= I2C_CR1_STOP;\n            i2c_handle->Instance->SR1;\n            i2c_handle->Instance->SR2;\n            status = HAL_OK;\n          }\n          else {\n            status = HAL_TIMEOUT;\n          }\n        }\n        else {\n          status = HAL_TIMEOUT;\n        }\n      }\n      else {\n        status = HAL_TIMEOUT;\n      }\n    }\n    else {\n      status = HAL_TIMEOUT;\n    }\n  }\n  else {\n    status = HAL_TIMEOUT;\n  }\n  return status;\n}",
            "called": [
                "HAL_GetTick",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f4",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "read_from_i2c_080027f4"
        },
        "FUN_080003d4": {
            "renaming": {
                "FUN_080003d4": "count_leading_zeroes_and_shift_left_080003d4",
                "param_1": "input",
                "uVar1": "shifted_one",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeroes_count",
                "uVar4": "shift_amount_plus_11",
                "in_r12": "unused_register",
                "bVar5": "shift_left",
                "bVar6": "shift_amount_is_zero",
                "bVar7": "shift_amount_overflow"
            },
            "code": "ulonglong count_leading_zeroes_and_shift_left_080003d4(uint input)\n{\n  uint shift_amount;\n  uint leading_zeroes_count;\n  uint shifted_input;\n  uint shifted_zeroes;\n  uint shifted_one;\n  bool shift_left;\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input);\n  shift_amount = leading_zeroes_count + 21;\n  shift_left = shift_amount < 32;\n  shifted_input = shift_left ? input << shift_amount : 0;\n  shifted_zeroes = shift_left ? 0 : 0xFFFFFFFF << (32 - shift_amount);\n  shifted_one = shift_left ? 1 << shift_amount : 0;\n  shifted_input |= shifted_zeroes;\n  shifted_one -= shift_left ? 1 << 21 : 0;\n  return CONCAT44(shifted_input + (0x432 - shift_amount) * 0x100000, shifted_one);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003d4",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "count_leading_zeroes_and_shift_left_080003d4"
        },
        "FUN_08004d78": {
            "renaming": {
                "FUN_08004d78": "calculate_pitch_and_roll_08004d78",
                "mpu6050": "sensor",
                "pitch": "pitch_angle",
                "roll": "roll_angle",
                "acc_roll": "roll_acceleration",
                "acc_pitch": "pitch_acceleration",
                "acc_z": "z_acceleration",
                "acc_y": "y_acceleration",
                "acc_x": "x_acceleration",
                "uVar1": "x_dividend",
                "uVar2": "y_dividend",
                "uVar3": "z_dividend",
                "uVar6": "atan2_result",
                "uVar7": "atan2_result_shifted",
                "fVar4": "pitch_rad",
                "fVar5": "roll_rad"
            },
            "code": "void calculate_pitch_and_roll_08004d78(Mpu6050 *mpu6050, float *pitch, float *roll)\n{\n  float acc_roll;\n  float acc_pitch;\n  float acc_z = mpu6050->accZ / 1090519040.0f;\n  float acc_y = mpu6050->accY / 1090519040.0f;\n  float acc_x = mpu6050->accX / 1090519040.0f;\n  float roll_rad = atan2(acc_y, acc_z);\n  float pitch_rad = atan2(-acc_x, sqrt(acc_y * acc_y + acc_z * acc_z));\n  *pitch = pitch_rad * 57.29578f;\n  *roll = roll_rad * 57.29578f;\n}",
            "called": [
                "__muldf3",
                "__aeabi_fdiv",
                "__truncdfsf2",
                "__divdf3",
                "__aeabi_f2d",
                "atan2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d78",
            "calling": [
                "mpu6050_calibrate"
            ],
            "imported": false,
            "current_name": "calculate_pitch_and_roll_08004d78"
        },
        "FUN_08000c10": {
            "renaming": {
                "FUN_08000c10": "calculate_hash_08000c10",
                "param_1": "input",
                "uVar2": "shift_count",
                "uVar3": "sign_bit",
                "iVar1": "leading_zeroes",
                "iVar4": "hash",
                "uVar5": "carry",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_hash_08000c10(uint input)\n{\n  int leading_zeroes;\n  uint sign_bit, shifted_input, hash, carry, overflow_check;\n\n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeroes = count_leading_zeroes(input);\n  shifted_input = input << (leading_zeroes + 0x18U);\n  if (leading_zeroes > 7) {\n    carry = 0 << (leading_zeroes - 8);\n    hash = ((sign_bit | 0x4b000000) - 0x800000) + carry + shifted_input + (0U >> (0x20 - (leading_zeroes - 8))) + (uint)(0x7fffffff < carry);\n    if (carry == 0x80000000) {\n      hash = hash & 0xfffffffe;\n    }\n    return hash;\n  }\n  hash = ((sign_bit | 0x4b000000) - 0x800000) + ((input >> (0x20 - (leading_zeroes + 0x18U))) - ((int)shifted_input >> 0x1f));\n  overflow_check = shifted_input & 0x7fffffff;\n  if (overflow_check == 0) {\n    hash = hash & ~(shifted_input >> 0x1f);\n  }\n  return hash;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c10",
            "calling": [
                "mpu6050_calibrate",
                "mpu6050_update",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c10"
        },
        "FUN_0800491c": {
            "renaming": {
                "FUN_0800491c": "initialize_mpu6050_0800491c",
                "mpu6050": "mpu6050_data",
                "local_13": "power_mgmt_1_reg",
                "local_12": "gyro_config_reg",
                "local_11": "acc_config_reg",
                "PTR_I2C_Write_Reg_080049c8": "i2c_write_register"
            },
            "code": "void initialize_mpu6050_0800491c(Mpu6050 *mpu6050)\n{\n  unsigned char power_mgmt_1_reg = 0;\n  unsigned char gyro_config_reg = 0x10;\n  unsigned char acc_config_reg = 8;\n  PTR_I2C_Write_Reg_080049c8(0xd0, 0x6b, &power_mgmt_1_reg, 1);\n  PTR_I2C_Write_Reg_080049c8(0xd0, 0x1c, &gyro_config_reg, 1);\n  PTR_I2C_Write_Reg_080049c8(0xd0, 0x1b, &acc_config_reg, 1);\n  mpu6050->accX = 0.0;\n  mpu6050->accY = 0.0;\n  mpu6050->accZ = 0.0;\n  mpu6050->temp = 0.0;\n  mpu6050->gyroX = 0.0;\n  mpu6050->gyroY = 0.0;\n  mpu6050->gyroZ = 0.0;\n  mpu6050->offset_gyroX = 0.0;\n  mpu6050->offset_gyroY = 0.0;\n  mpu6050->offset_acc_pitch = 0.0;\n  mpu6050->offset_acc_roll = 0.0;\n  mpu6050_calibrate(mpu6050);\n  return;\n}",
            "called": [
                "mpu6050_calibrate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800491c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_mpu6050_0800491c"
        }
    },
    "used_tokens": 136433,
    "layers": [
        [
            "FUN_08003440",
            "FUN_08004f2c",
            "FUN_080046ec",
            "FUN_08005500",
            "FUN_08003568",
            "FUN_08002c2e",
            "FUN_080008ec",
            "FUN_08000978",
            "FUN_0800101c",
            "FUN_080056d4",
            "FUN_080078b4",
            "FUN_080017b4",
            "FUN_08001030",
            "FUN_080011ec",
            "FUN_080056ce",
            "FUN_08004f3c",
            "FUN_080008fc",
            "FUN_08001714",
            "FUN_08000988",
            "FUN_080078c0",
            "FUN_080017c4",
            "FUN_080056da",
            "FUN_08001044",
            "FUN_08009444",
            "FUN_08004436",
            "FUN_08009e50",
            "FUN_08004ee8",
            "FUN_080094f8",
            "FUN_08000998",
            "FUN_08000fc8",
            "FUN_08003908",
            "FUN_08004f60",
            "FUN_08001170",
            "FUN_08002ad8",
            "FUN_08000fd0",
            "FUN_08003d60",
            "FUN_08009e68",
            "FUN_08001618",
            "FUN_080091a4",
            "FUN_08004f78",
            "FUN_080015a0",
            "FUN_0800172a",
            "FUN_080009d4",
            "FUN_08009744",
            "FUN_08003640",
            "FUN_08009980",
            "FUN_08000134",
            "FUN_08005704",
            "FUN_08002ca8",
            "FUN_08003a94",
            "FUN_0800416a",
            "FUN_08001ccc",
            "FUN_0800157c",
            "FUN_080036f8",
            "FUN_080009e8",
            "FUN_08009630",
            "FUN_08005830",
            "FUN_08005714",
            "FUN_08005834",
            "FUN_08005838",
            "FUN_080096e0",
            "FUN_08003540",
            "FUN_08001ab0",
            "FUN_08009768",
            "FUN_08001008",
            "FUN_08003ff8",
            "FUN_08004ea4",
            "FUN_08005728",
            "FUN_08003e38",
            "FUN_080006a4",
            "FUN_08009530",
            "FUN_08002bb4",
            "FUN_08002d3c",
            "FUN_080009fc",
            "FUN_080093a4",
            "FUN_080078a0",
            "FUN_080056c8",
            "FUN_080057e8",
            "FUN_080008f4",
            "FUN_080036a8",
            "FUN_08005224",
            "FUN_08005348",
            "FUN_080049cc",
            "FUN_08003c94",
            "FUN_0800884c",
            "FUN_0800901c",
            "FUN_0800177c",
            "FUN_080099ec",
            "FUN_08005598",
            "FUN_08002640",
            "FUN_08005dfc",
            "FUN_080003f4",
            "FUN_0800045c",
            "FUN_0800166c",
            "FUN_0800360c",
            "FUN_08005d68",
            "FUN_080035a4",
            "FUN_080041ea",
            "FUN_08004ae0",
            "FUN_080015fc",
            "FUN_08000110",
            "FUN_08003504",
            "FUN_08000c2c",
            "FUN_080009ac",
            "FUN_0800438a",
            "FUN_0800046c",
            "FUN_080009c0",
            "FUN_08003f18",
            "FUN_080097cc",
            "FUN_08000c3c",
            "FUN_08003518",
            "FUN_08005780",
            "FUN_08000fe0",
            "FUN_08008818",
            "FUN_08000418",
            "FUN_080055f4",
            "FUN_080053b0",
            "FUN_080016d0",
            "FUN_0800088a",
            "FUN_08005d14",
            "FUN_080015b4",
            "FUN_080041a8",
            "FUN_08008ad4",
            "FUN_08005674",
            "FUN_08004104",
            "FUN_08000ff4",
            "FUN_08005d0c",
            "FUN_08005e40",
            "FUN_08005d20",
            "FUN_08001a80",
            "FUN_080090a8",
            "FUN_08004e74",
            "FUN_0800910c",
            "FUN_080052a0",
            "FUN_08009120",
            "FUN_08000f58",
            "FUN_08001084",
            "FUN_08005680",
            "FUN_08003260",
            "FUN_08009244",
            "FUN_08004e6c",
            "FUN_08001762",
            "FUN_080040a0",
            "FUN_08009a18",
            "FUN_0800119c",
            "FUN_080090b4",
            "FUN_08000f60",
            "FUN_0800422e",
            "FUN_0800151c",
            "FUN_08000f68",
            "FUN_08009258",
            "FUN_08000c08",
            "FUN_080042de",
            "FUN_08004bd8",
            "FUN_080090c0",
            "FUN_080091e4",
            "FUN_080098c0",
            "FUN_080027f4",
            "FUN_080003d4",
            "FUN_08004d78",
            "FUN_08000c10",
            "FUN_0800491c"
        ],
        [
            "FUN_080014f0"
        ]
    ],
    "locked_functions": []
}