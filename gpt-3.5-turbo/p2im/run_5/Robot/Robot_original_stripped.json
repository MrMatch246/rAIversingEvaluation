{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 inputValue)\n\n{\n  if ((char)flag == '\\0') {\n    flag._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "inputValue",
                "completed_8655": "flag"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_params_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_params_08000134(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_params_08000134",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "calling": [
                "__libc_init_array",
                "__libc_fini_array"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "add_with_negation_08000150",
            "code": "\nvoid addWithNegation_08000150(undefined4 result,uint value)\n\n{\n  addition(result,value ^ 0x80000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000150": "add_with_negation_08000150",
                "param_1": "result",
                "param_2": "value",
                "__aeabi_dadd": "addition"
            },
            "calling": [],
            "called": [
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000158": {
            "entrypoint": "0x08000158",
            "current_name": "calculate_xor_hash_08000158",
            "code": "\nulonglong calculateXORHash_08000158(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int rightShiftBits;\n  byte carryBit;\n  uint result1;\n  uint result2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int rightShift;\n  uint updatedNum1;\n  uint updatedNum2;\n  uint updatedNum3;\n  uint updatedNum4;\n  bool check1;\n  bool check2;\n  bool check3;\n  \n  temp2 = num4 ^ 0x80000000;\n  updatedNum1 = num2 << 1;\n  num4 = num4 << 1;\n  check1 = ((num2 ^ temp2) & 0x7fffffff) == 0;\n  check2 = check1 && num1 == num3;\n  if (!check1 || num1 != num3) {\n    check2 = (updatedNum1 | num1) == 0;\n  }\n  if (!check2) {\n    check2 = (num4 | num3) == 0;\n  }\n  rightShift = (int)updatedNum1 >> 0x15;\n  if (!check2) {\n    check2 = rightShift == -1;\n  }\n  rightShiftBits = (int)num4 >> 0x15;\n  if (!check2) {\n    check2 = rightShiftBits == -1;\n  }\n  if (check2) {\n    if (rightShift == -1 || rightShiftBits == -1) {\n      updatedNum1 = temp2;\n      updatedNum3 = num3;\n      if (rightShift == -1) {\n        updatedNum1 = num2;\n        updatedNum3 = num1;\n      }\n      if (rightShift != -1 || rightShiftBits != -1) {\n        num3 = updatedNum3;\n        temp2 = updatedNum1;\n      }\n      check2 = (updatedNum3 | updatedNum1 << 0xc) == 0;\n      if (check2) {\n        check2 = (num3 | temp2 << 0xc) == 0;\n      }\n      if (check2) {\n        check2 = updatedNum1 == temp2;\n      }\n      if (!check2) {\n        updatedNum1 = updatedNum1 | 0x80000;\n      }\n      return CONCAT44(updatedNum1,updatedNum3);\n    }\n    if (((num2 ^ temp2) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((updatedNum1 | num1) == 0) {\n        num1 = num3;\n        num2 = temp2;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != temp2) {\n      return 0;\n    }\n    if (updatedNum1 >> 0x15 == 0) {\n      check2 = (num1 & 0x80000000) != 0;\n      temp2 = num2 * 2 + (uint)check2;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)check2)) {\n        temp2 = temp2 | 0x80000000;\n      }\n      return CONCAT44(temp2,num1 << 1);\n    }\n    if (updatedNum1 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  updatedNum1 = updatedNum1 >> 0x15;\n  num4 = num4 >> 0x15;\n  updatedNum3 = num4 - updatedNum1;\n  check2 = updatedNum3 != 0;\n  if (num4 < updatedNum1) {\n    updatedNum3 = -updatedNum3;\n  }\n  updatedNum2 = num1;\n  temp3 = num2;\n  if (check2 && updatedNum1 <= num4) {\n    updatedNum1 = updatedNum1 + updatedNum3;\n    updatedNum2 = num3;\n    temp3 = temp2;\n    num3 = num1;\n    temp2 = num2;\n  }\n  if (0x36 < updatedNum3) {\n    return CONCAT44(temp3,updatedNum2);\n  }\n  result2 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    check2 = updatedNum2 != 0;\n    updatedNum2 = -updatedNum2;\n    result2 = -result2 - (uint)check2;\n  }\n  temp3 = temp2 & 0xfffff | 0x100000;\n  if ((temp2 & 0x80000000) != 0) {\n    check2 = num3 != 0;\n    num3 = -num3;\n    temp3 = -temp3 - (uint)check2;\n  }\n  if (updatedNum1 == updatedNum3) {\n    temp3 = temp3 ^ 0x100000;\n    if (updatedNum1 == 0) {\n      result2 = result2 ^ 0x100000;\n      updatedNum1 = 1;\n    }\n    else {\n      updatedNum3 = updatedNum3 - 1;\n    }\n  }\n  temp2 = -updatedNum3 + 0x20;\n  if ((int)updatedNum3 < 0x21) {\n    updatedNum4 = num3 << (temp2 & 0xff);\n    num3 = num3 >> (updatedNum3 & 0xff);\n    result1 = updatedNum2 + num3;\n    temp1 = temp3 << (temp2 & 0xff);\n    temp2 = result1 + temp1;\n    result2 = result2 + CARRY4(updatedNum2,num3) + ((int)temp3 >> (updatedNum3 & 0xff)) +\n            (uint)CARRY4(result1,temp1);\n  }\n  else {\n    updatedNum4 = temp3 << (-updatedNum3 + 0x40 & 0xff);\n    if (num3 != 0) {\n      updatedNum4 = updatedNum4 | 2;\n    }\n    temp3 = (int)temp3 >> (updatedNum3 - 0x20 & 0xff);\n    temp2 = updatedNum2 + temp3;\n    result2 = result2 + ((int)temp3 >> 0x1f) + (uint)CARRY4(updatedNum2,temp3);\n  }\n  num2 = result2 & 0x80000000;\n  updatedNum3 = result2;\n  if ((int)result2 < 0) {\n    check2 = updatedNum4 == 0;\n    updatedNum4 = -updatedNum4;\n    updatedNum3 = -temp2;\n    temp2 = -(uint)!check2 - temp2;\n    updatedNum3 = -(uint)(check2 <= updatedNum3) - result2;\n  }\n  if (0xfffff < updatedNum3) {\n    updatedNum2 = updatedNum1 - 1;\n    if (0x1fffff < updatedNum3) {\n      updatedNum2 = updatedNum3 & 1;\n      updatedNum3 = updatedNum3 >> 1;\n      carryBit = (byte)temp2;\n      temp2 = (uint)(updatedNum2 != 0) << 0x1f | temp2 >> 1;\n      updatedNum4 = (uint)(carryBit & 1) << 0x1f | updatedNum4 >> 1;\n      updatedNum2 = updatedNum1;\n      if (0xffbfffff < updatedNum1 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    check2 = 0x7fffffff < updatedNum4;\n    if (updatedNum4 == 0x80000000) {\n      check2 = (temp2 & 1) != 0;\n    }\n    return CONCAT44(updatedNum3 + updatedNum2 * 0x100000 + (uint)CARRY4(temp2,(uint)check2) | num2,\n                    temp2 + check2);\n  }\n  check1 = (updatedNum4 & 0x80000000) != 0;\n  updatedNum4 = updatedNum4 << 1;\n  updatedNum2 = temp2 * 2;\n  check2 = CARRY4(temp2,temp2);\n  temp2 = temp2 * 2 + (uint)check1;\n  updatedNum3 = updatedNum3 * 2 + (uint)(check2 || CARRY4(updatedNum2,(uint)check1));\n  updatedNum2 = updatedNum1 - 2;\n  if ((updatedNum3 & 0x100000) != 0) goto LAB_08000268;\n  temp3 = temp2;\n  updatedNum1 = updatedNum3;\n  if (updatedNum3 == 0) {\n    temp3 = 0;\n    updatedNum1 = temp2;\n  }\n  rightShift = LZCOUNT(updatedNum1);\n  if (updatedNum3 == 0) {\n    rightShift = rightShift + 0x20;\n  }\n  updatedNum3 = rightShift - 0xb;\n  check3 = SBORROW4(updatedNum3,0x20);\n  temp2 = rightShift - 0x2b;\n  check2 = (int)temp2 < 0;\n  check1 = temp2 == 0;\n  if ((int)updatedNum3 < 0x20) {\n    check3 = SCARRY4(temp2,0xc);\n    rightShift = rightShift + -0x1f;\n    check2 = rightShift < 0;\n    check1 = rightShift == 0;\n    temp2 = updatedNum3;\n    if (!check1 && check2 == check3) {\n      temp3 = updatedNum1 << (updatedNum3 & 0xff);\n      updatedNum1 = updatedNum1 >> (0xcU - rightShift & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (check1 || check2 != check3) {\n    updatedNum4 = 0x20 - temp2;\n  }\n  updatedNum1 = updatedNum1 << (temp2 & 0xff);\n  if (check1 || check2 != check3) {\n    updatedNum1 = updatedNum1 | temp3 >> (updatedNum4 & 0xff);\n  }\n  if (check1 || check2 != check3) {\n    temp3 = temp3 << (temp2 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)updatedNum3 <= (int)updatedNum2) {\n    return CONCAT44(updatedNum1 + (updatedNum2 - updatedNum3) * 0x100000 | num2,temp3);\n  }\n  temp2 = ~(updatedNum2 - updatedNum3);\n  if ((int)temp2 < 0x1f) {\n    rightShift = temp2 - 0x13;\n    if (rightShift != 0 && rightShift < 0 == SCARRY4(temp2 - 0x1f,0xc)) {\n      return CONCAT44(result2,temp3 >> (0x20 - (0xcU - rightShift) & 0xff) | updatedNum1 << (0xcU - rightShift & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp2 = temp2 + 1;\n    return CONCAT44(num2 | updatedNum1 >> (temp2 & 0xff),\n                    temp3 >> (temp2 & 0xff) | updatedNum1 << (0x20 - temp2 & 0xff));\n  }\n  return CONCAT44(result2,updatedNum1 >> (temp2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000158": "calculate_xor_hash_08000158",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "rightShiftBits",
                "bVar2": "carryBit",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "temp3",
                "iVar8": "rightShift",
                "uVar9": "updatedNum1",
                "uVar10": "updatedNum2",
                "uVar11": "updatedNum3",
                "uVar12": "updatedNum4",
                "bVar13": "check1",
                "bVar14": "check2",
                "bVar15": "check3"
            },
            "calling": [
                "_svfprintf_r",
                "atan",
                "_dtoa_r",
                "__ieee754_atan2",
                "mpu6050_calc_pitch"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800015c": {
            "entrypoint": "0x0800015c",
            "current_name": "calculate_result_0800015c",
            "code": "\nulonglong calculate_result_0800015c(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_num2;\n  uint shifted_num4;\n  uint tmp_shifted_num2;\n  uint tmp_shifted_num4;\n  uint tmp_shifted_result;\n  uint result;\n  bool flag1;\n  bool flag2;\n  bool borrow;\n  \n  shifted_num2 = num2 << 1;\n  tmp_shifted_num2 = num4 << 1;\n  flag1 = ((num2 ^ num4) & 0x7fffffff) == 0;\n  flag2 = flag1 && num1 == num3;\n  if (!flag1 || num1 != num3) {\n    flag2 = (shifted_num2 | num1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (tmp_shifted_num2 | num3) == 0;\n  }\n  shift2 = (int)shifted_num2 >> 0x15;\n  if (!flag2) {\n    flag2 = shift2 == -1;\n  }\n  shift1 = (int)tmp_shifted_num2 >> 0x15;\n  if (!flag2) {\n    flag2 = shift1 == -1;\n  }\n  if (flag2) {\n    if (shift2 == -1 || shift1 == -1) {\n      tmp_shifted_num2 = num4;\n      shifted_num2 = num3;\n      if (shift2 == -1) {\n        tmp_shifted_num2 = num2;\n        shifted_num2 = num1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        num3 = shifted_num2;\n        num4 = tmp_shifted_num2;\n      }\n      flag2 = (shifted_num2 | tmp_shifted_num2 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (num3 | num4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = tmp_shifted_num2 == num4;\n      }\n      if (!flag2) {\n        tmp_shifted_num2 = tmp_shifted_num2 | 0x80000;\n      }\n      return CONCAT44(tmp_shifted_num2,shifted_num2);\n    }\n    if (((num2 ^ num4) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((shifted_num2 | num1) == 0) {\n        num1 = num3;\n        num2 = num4;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != num4) {\n      return 0;\n    }\n    if (shifted_num2 >> 0x15 == 0) {\n      flag2 = (num1 & 0x80000000) != 0;\n      tmp_shifted_num2 = num2 * 2 + (uint)flag2;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)flag2)) {\n        tmp_shifted_num2 = tmp_shifted_num2 | 0x80000000;\n      }\n      return CONCAT44(tmp_shifted_num2,num1 << 1);\n    }\n    if (shifted_num2 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  shifted_num2 = shifted_num2 >> 0x15;\n  tmp_shifted_num2 = tmp_shifted_num2 >> 0x15;\n  tmp_shifted_num4 = tmp_shifted_num2 - shifted_num2;\n  flag2 = tmp_shifted_num4 != 0;\n  if (tmp_shifted_num2 < shifted_num2) {\n    tmp_shifted_num4 = -tmp_shifted_num4;\n  }\n  shifted_num4 = num1;\n  temp3 = num2;\n  if (flag2 && shifted_num2 <= tmp_shifted_num2) {\n    shifted_num2 = shifted_num2 + tmp_shifted_num4;\n    shifted_num4 = num3;\n    temp3 = num4;\n    num3 = num1;\n    num4 = num2;\n  }\n  if (0x36 < tmp_shifted_num4) {\n    return CONCAT44(temp3,shifted_num4);\n  }\n  tmp_shifted_num2 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    flag2 = shifted_num4 != 0;\n    shifted_num4 = -shifted_num4;\n    tmp_shifted_num2 = -tmp_shifted_num2 - (uint)flag2;\n  }\n  temp3 = num4 & 0xfffff | 0x100000;\n  if ((num4 & 0x80000000) != 0) {\n    flag2 = num3 != 0;\n    num3 = -num3;\n    temp3 = -temp3 - (uint)flag2;\n  }\n  if (shifted_num2 == tmp_shifted_num4) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_num2 == 0) {\n      tmp_shifted_num2 = tmp_shifted_num2 ^ 0x100000;\n      shifted_num2 = 1;\n    }\n    else {\n      tmp_shifted_num4 = tmp_shifted_num4 - 1;\n    }\n  }\n  result = -tmp_shifted_num4 + 0x20;\n  if ((int)tmp_shifted_num4 < 0x21) {\n    tmp_shifted_result = num3 << (result & 0xff);\n    num3 = num3 >> (tmp_shifted_num4 & 0xff);\n    temp1 = shifted_num4 + num3;\n    temp2 = temp3 << (result & 0xff);\n    result = temp1 + temp2;\n    tmp_shifted_num2 = tmp_shifted_num2 + CARRY4(shifted_num4,num3) + ((int)temp3 >> (tmp_shifted_num4 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    tmp_shifted_result = temp3 << (-tmp_shifted_num4 + 0x40 & 0xff);\n    if (num3 != 0) {\n      tmp_shifted_result = tmp_shifted_result | 2;\n    }\n    temp3 = (int)temp3 >> (tmp_shifted_num4 - 0x20 & 0xff);\n    result = shifted_num4 + temp3;\n    tmp_shifted_num2 = tmp_shifted_num2 + ((int)temp3 >> 0x1f) + (uint)CARRY4(shifted_num4,temp3);\n  }\n  num2 = tmp_shifted_num2 & 0x80000000;\n  tmp_shifted_num4 = tmp_shifted_num2;\n  if ((int)tmp_shifted_num2 < 0) {\n    flag2 = tmp_shifted_result == 0;\n    tmp_shifted_result = -tmp_shifted_result;\n    tmp_shifted_num4 = -result;\n    result = -(uint)!flag2 - result;\n    tmp_shifted_num4 = -(uint)(flag2 <= tmp_shifted_num4) - tmp_shifted_num2;\n  }\n  if (0xfffff < tmp_shifted_num4) {\n    shifted_num4 = shifted_num2 - 1;\n    if (0x1fffff < tmp_shifted_num4) {\n      tmp_shifted_num2 = tmp_shifted_num4 & 1;\n      tmp_shifted_num4 = tmp_shifted_num4 >> 1;\n      carry = (byte)result;\n      result = (uint)(tmp_shifted_num2 != 0) << 0x1f | result >> 1;\n      tmp_shifted_result = (uint)(carry & 1) << 0x1f | tmp_shifted_result >> 1;\n      shifted_num4 = shifted_num2;\n      if (0xffbfffff < shifted_num2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    flag2 = 0x7fffffff < tmp_shifted_result;\n    if (tmp_shifted_result == 0x80000000) {\n      flag2 = (result & 1) != 0;\n    }\n    return CONCAT44(tmp_shifted_num4 + shifted_num4 * 0x100000 + (uint)CARRY4(result,(uint)flag2) | num2,\n                    result + flag2);\n  }\n  flag1 = (tmp_shifted_result & 0x80000000) != 0;\n  tmp_shifted_result = tmp_shifted_result << 1;\n  shifted_num4 = result * 2;\n  flag2 = CARRY4(result,result);\n  result = result * 2 + (uint)flag1;\n  tmp_shifted_num4 = tmp_shifted_num4 * 2 + (uint)(flag2 || CARRY4(shifted_num4,(uint)flag1));\n  shifted_num4 = shifted_num2 - 2;\n  if ((tmp_shifted_num4 & 0x100000) != 0) goto LAB_08000268;\n  temp3 = result;\n  shifted_num2 = tmp_shifted_num4;\n  if (tmp_shifted_num4 == 0) {\n    temp3 = 0;\n    shifted_num2 = result;\n  }\n  shift2 = LZCOUNT(shifted_num2);\n  if (tmp_shifted_num4 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  result = shift2 - 0xb;\n  borrow = SBORROW4(result,0x20);\n  tmp_shifted_num4 = shift2 - 0x2b;\n  flag2 = (int)tmp_shifted_num4 < 0;\n  flag1 = tmp_shifted_num4 == 0;\n  if ((int)result < 0x20) {\n    borrow = SCARRY4(tmp_shifted_num4,0xc);\n    shift2 = shift2 + -0x1f;\n    flag2 = shift2 < 0;\n    flag1 = shift2 == 0;\n    tmp_shifted_num4 = result;\n    if (!flag1 && flag2 == borrow) {\n      temp3 = shifted_num2 << (result & 0xff);\n      shifted_num2 = shifted_num2 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (flag1 || flag2 != borrow) {\n    tmp_shifted_result = 0x20 - tmp_shifted_num4;\n  }\n  shifted_num2 = shifted_num2 << (tmp_shifted_num4 & 0xff);\n  if (flag1 || flag2 != borrow) {\n    shifted_num2 = shifted_num2 | temp3 >> (tmp_shifted_result & 0xff);\n  }\n  if (flag1 || flag2 != borrow) {\n    temp3 = temp3 << (tmp_shifted_num4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)result <= (int)shifted_num4) {\n    return CONCAT44(shifted_num2 + (shifted_num4 - result) * 0x100000 | num2,temp3);\n  }\n  tmp_shifted_num4 = ~(shifted_num4 - result);\n  if ((int)tmp_shifted_num4 < 0x1f) {\n    shift2 = tmp_shifted_num4 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(tmp_shifted_num4 - 0x1f,0xc)) {\n      return CONCAT44(tmp_shifted_num2,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_num2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    tmp_shifted_num4 = tmp_shifted_num4 + 1;\n    return CONCAT44(num2 | shifted_num2 >> (tmp_shifted_num4 & 0xff),\n                    temp3 >> (tmp_shifted_num4 & 0xff) | shifted_num2 << (0x20 - tmp_shifted_num4 & 0xff));\n  }\n  return CONCAT44(tmp_shifted_num2,shifted_num2 >> (tmp_shifted_num4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800015c": "calculate_result_0800015c",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift2",
                "uVar7": "shifted_num2",
                "uVar8": "shifted_num4",
                "uVar9": "tmp_shifted_num2",
                "uVar10": "tmp_shifted_num4",
                "uVar11": "tmp_shifted_result",
                "uVar12": "result",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "borrow"
            },
            "calling": [
                "atan",
                "_dtoa_r",
                "__ieee754_atan2",
                "__aeabi_drsub",
                "mpu6050_calc_pitch"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003d4": {
            "entrypoint": "0x080003d4",
            "current_name": "bitwise_shift_080003d4",
            "code": "\nulonglong bitwiseShift_080003d4(uint value)\n\n{\n  uint result;\n  uint shift;\n  int count;\n  uint delta;\n  uint mask;\n  bool lessThanZero;\n  bool equalToZero;\n  bool carryFlag;\n  \n  if (value == 0) {\n    return 0;\n  }\n  result = 0;\n  count = LZCOUNT(value);\n  delta = count + 0x15;\n  carryFlag = SBORROW4(delta,0x20);\n  shift = count - 0xb;\n  lessThanZero = (int)shift < 0;\n  equalToZero = shift == 0;\n  if (delta < 0x20) {\n    carryFlag = SCARRY4(shift,0xc);\n    lessThanZero = false;\n    equalToZero = count + 1 == 0;\n    shift = delta;\n    if (!equalToZero && carryFlag == false) {\n      result = value << delta;\n      value = value >> (0xcU - (count + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (equalToZero || lessThanZero != carryFlag) {\n    mask = 0x20 - shift;\n  }\n  value = value << (shift & 0xff);\n  if (equalToZero || lessThanZero != carryFlag) {\n    value = value | 0U >> (mask & 0xff);\n  }\n  if (equalToZero || lessThanZero != carryFlag) {\n    result = 0 << (shift & 0xff);\n  }\nLAB_080002e0:\n  if (delta < 0x433) {\n    return CONCAT44(value + (0x432 - delta) * 0x100000,result);\n  }\n  shift = ~(0x432 - delta);\n  if (0x1e < (int)shift) {\n    return (ulonglong)(value >> (shift - 0x1f & 0xff));\n  }\n  count = shift - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shift - 0x1f,0xc)) {\n    shift = shift + 1;\n    return CONCAT44(value >> (shift & 0xff),\n                    result >> (shift & 0xff) | value << (0x20 - shift & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (0xcU - count) & 0xff) | value << (0xcU - count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080003d4": "bitwise_shift_080003d4",
                "param_1": "value",
                "uVar1": "result",
                "uVar2": "shift",
                "iVar3": "count",
                "uVar4": "delta",
                "in_r12": "mask",
                "bVar5": "lessThanZero",
                "bVar6": "equalToZero",
                "bVar7": "carryFlag"
            },
            "calling": [
                "_dtoa_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003f4": {
            "entrypoint": "0x080003f4",
            "current_name": "extract_bits_080003f4",
            "code": "\nulonglong extractBits_080003f4(uint input)\n\n{\n  uint bitCount;\n  uint absInput;\n  uint shiftAmount;\n  int leadingZeros;\n  uint totalBits;\n  uint signBit;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  absInput = input;\n  if ((int)signBit < 0) {\n    absInput = -input;\n  }\n  bitCount = 0;\n  leadingZeros = countLeadingZeros(absInput);\n  totalBits = leadingZeros + 0x15;\n  carry = SBORROW4(totalBits,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (totalBits < 0x20) {\n    carry = signedSubOverflow(shiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftAmount = totalBits;\n    if (!isZero && carry == false) {\n      bitCount = absInput << totalBits;\n      absInput = absInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isZero || isNegative != carry) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  absInput = absInput << (shiftAmount & 0xff);\n  if (isZero || isNegative != carry) {\n    absInput = absInput | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != carry) {\n    bitCount = 0 << (shiftAmount & 0xff);\n  }\nLAB_080002e0:\n  if (totalBits < 0x433) {\n    return CONCAT44(absInput + (0x432 - totalBits) * 0x100000 | signBit,bitCount);\n  }\n  shiftAmount = ~(0x432 - totalBits);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != signedSubOverflow(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | absInput >> (shiftAmount & 0xff),\n                    bitCount >> (shiftAmount & 0xff) | absInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,bitCount >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080003f4": "extract_bits_080003f4",
                "param_1": "input",
                "uVar1": "bitCount",
                "uVar2": "absInput",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "totalBits",
                "uVar6": "signBit",
                "in_r12": "remainingBits",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "carry",
                "LZCOUNT": "countLeadingZeros",
                "SCARRY4": "signedSubOverflow"
            },
            "calling": [
                "_svfprintf_r",
                "_dtoa_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000418": {
            "entrypoint": "0x08000418",
            "current_name": "unpack_uint64_08000418",
            "code": "\nulonglong unpack_uint64_08000418(uint input,undefined4 unused_param1,undefined4 unused_param2,uint unused_param3)\n\n{\n  uint msb_shifted;\n  uint result1;\n  uint result2;\n  uint shifted_input;\n  uint shifted_twice;\n  int num_of_bits;\n  uint diff;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero1;\n  bool is_zero2;\n  \n  shifted_twice = input << 1;\n  is_zero1 = shifted_twice == 0;\n  msb_shifted = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted_input = (uint)((int)shifted_twice >> 3) >> 1;\n  result2 = msb_shifted | shifted_input;\n  input = input << 0x1d;\n  if (!is_zero1) {\n    unused_param3 = shifted_twice & 0xff000000;\n    is_zero1 = unused_param3 == 0;\n  }\n  if (!is_zero1) {\n    is_zero1 = unused_param3 == 0xff000000;\n  }\n  if (!is_zero1) {\n    return CONCAT44(result2,input) ^ 0x3800000000000000;\n  }\n  if ((shifted_twice & 0xffffff) == 0) {\n    return CONCAT44(result2,input);\n  }\n  if (unused_param3 == 0xff000000) {\n    return CONCAT44(result2,input) | 0x8000000000000;\n  }\n  result1 = input;\n  shifted_twice = shifted_input;\n  if (shifted_input == 0) {\n    result1 = 0;\n    shifted_twice = input;\n  }\n  num_of_bits = LZCOUNT(shifted_twice);\n  if (shifted_input == 0) {\n    num_of_bits = num_of_bits + 0x20;\n  }\n  diff = num_of_bits - 0xb;\n  is_zero2 = SBORROW4(diff,0x20);\n  shifted_input = num_of_bits - 0x2b;\n  is_zero1 = (int)shifted_input < 0;\n  is_negative = shifted_input == 0;\n  if ((int)diff < 0x20) {\n    is_zero2 = SCARRY4(shifted_input,0xc);\n    num_of_bits = num_of_bits + -0x1f;\n    is_zero1 = num_of_bits < 0;\n    is_negative = num_of_bits == 0;\n    shifted_input = diff;\n    if (!is_negative && is_zero1 == is_zero2) {\n      result1 = shifted_twice << (diff & 0xff);\n      shifted_twice = shifted_twice >> (0xcU - num_of_bits & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_negative || is_zero1 != is_zero2) {\n    remaining_bits = 0x20 - shifted_input;\n  }\n  shifted_twice = shifted_twice << (shifted_input & 0xff);\n  if (is_negative || is_zero1 != is_zero2) {\n    shifted_twice = shifted_twice | result1 >> (remaining_bits & 0xff);\n  }\n  if (is_negative || is_zero1 != is_zero2) {\n    result1 = result1 << (shifted_input & 0xff);\n  }\nLAB_080002e0:\n  if ((int)diff < 0x381) {\n    return CONCAT44(shifted_twice + (0x380 - diff) * 0x100000 | msb_shifted,result1);\n  }\n  shifted_input = ~(0x380 - diff);\n  if (0x1e < (int)shifted_input) {\n    return CONCAT44(result2,shifted_twice >> (shifted_input - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  num_of_bits = shifted_input - 0x13;\n  if (num_of_bits == 0 || num_of_bits < 0 != SCARRY4(shifted_input - 0x1f,0xc)) {\n    shifted_input = shifted_input + 1;\n    return CONCAT44(msb_shifted | shifted_twice >> (shifted_input & 0xff),\n                    result1 >> (shifted_input & 0xff) | shifted_twice << (0x20 - shifted_input & 0xff));\n  }\n  return CONCAT44(result2,result1 >> (0x20 - (0xcU - num_of_bits) & 0xff) | shifted_twice << (0xcU - num_of_bits & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000418": "unpack_uint64_08000418",
                "param_1": "input",
                "param_2": "unused_param1",
                "param_3": "unused_param2",
                "param_4": "unused_param3",
                "uVar1": "msb_shifted",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "shifted_input",
                "uVar5": "shifted_twice",
                "iVar6": "num_of_bits",
                "uVar7": "diff",
                "in_r12": "remaining_bits",
                "bVar8": "is_negative",
                "bVar9": "is_zero1",
                "bVar10": "is_zero2"
            },
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "HAL_TIM_PeriodElapsedCallback",
                "mpu6050_calc_pitch"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800045c": {
            "entrypoint": "0x0800045c",
            "current_name": "shift_and_add_0800045c",
            "code": "\nulonglong shift_and_add_0800045c(uint input1,uint input2)\n\n{\n  byte byte1;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int count;\n  uint shift;\n  int constant;\n  uint temp4;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  if ((input1 | input2) == 0) {\n    return CONCAT44(input2,input1);\n  }\n  constant = 0x432;\n  temp4 = input2 >> 0x16;\n  if (temp4 != 0) {\n    constant = 3;\n    if (input2 >> 0x19 != 0) {\n      constant = 6;\n    }\n    if (input2 >> 0x1c != 0) {\n      constant = constant + 3;\n    }\n    temp3 = constant - ((int)input2 >> 0x1f);\n    temp4 = input1 << (0x20 - temp3 & 0xff);\n    input1 = input1 >> (temp3 & 0xff) | input2 << (0x20 - temp3 & 0xff);\n    input2 = input2 >> (temp3 & 0xff);\n    constant = temp3 + 0x432;\n  }\n  if (0xfffff < input2) {\n    if (0x1fffff < input2) {\n      temp3 = input2 & 1;\n      input2 = input2 >> 1;\n      byte1 = (byte)input1;\n      input1 = (uint)(temp3 != 0) << 0x1f | input1 >> 1;\n      temp4 = (uint)(byte1 & 1) << 0x1f | temp4 >> 1;\n      constant = constant + 1;\n      if (0xffbfffff < (uint)(constant * 0x200000)) {\n        return 0x7ff0000000000000;\n      }\n    }\nLAB_08000268:\n    flag2 = 0x7fffffff < temp4;\n    if (temp4 == 0x80000000) {\n      flag2 = (input1 & 1) != 0;\n    }\n    return CONCAT44(input2 + constant * 0x100000 + (uint)CARRY4(input1,(uint)flag2),input1 + flag2\n                   );\n  }\n  flag1 = (temp4 & 0x80000000) != 0;\n  temp4 = temp4 << 1;\n  temp3 = input1 * 2;\n  flag2 = CARRY4(input1,input1);\n  input1 = input1 * 2 + (uint)flag1;\n  input2 = input2 * 2 + (uint)(flag2 || CARRY4(temp3,(uint)flag1));\n  constant = constant + -1;\n  if ((input2 & 0x100000) != 0) goto LAB_08000268;\n  temp1 = input1;\n  temp3 = input2;\n  if (input2 == 0) {\n    temp1 = 0;\n    temp3 = input1;\n  }\n  count = LZCOUNT(temp3);\n  if (input2 == 0) {\n    count = count + 0x20;\n  }\n  shift = count - 0xb;\n  flag3 = SBORROW4(shift,0x20);\n  temp2 = count - 0x2b;\n  flag2 = (int)temp2 < 0;\n  flag1 = temp2 == 0;\n  if ((int)shift < 0x20) {\n    flag3 = SCARRY4(temp2,0xc);\n    count = count + -0x1f;\n    flag2 = count < 0;\n    flag1 = count == 0;\n    temp2 = shift;\n    if (!flag1 && flag2 == flag3) {\n      temp1 = temp3 << (shift & 0xff);\n      temp3 = temp3 >> (0xcU - count & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp4 = 0x20 - temp2;\n  }\n  temp3 = temp3 << (temp2 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    temp3 = temp3 | temp1 >> (temp4 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp1 = temp1 << (temp2 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shift <= constant) {\n    return CONCAT44(temp3 + (constant - shift) * 0x100000,temp1);\n  }\n  temp4 = ~(constant - shift);\n  if (0x1e < (int)temp4) {\n    return (ulonglong)(temp3 >> (temp4 - 0x1f & 0xff));\n  }\n  constant = temp4 - 0x13;\n  if (constant == 0 || constant < 0 != SCARRY4(temp4 - 0x1f,0xc)) {\n    temp4 = temp4 + 1;\n    return CONCAT44(temp3 >> (temp4 & 0xff),temp1 >> (temp4 & 0xff) | temp3 << (0x20 - temp4 & 0xff)\n                   );\n  }\n  return (ulonglong)(temp1 >> (0x20 - (0xcU - constant) & 0xff) | temp3 << (0xcU - constant & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800045c": "shift_and_add_0800045c",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "byte1",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "iVar5": "count",
                "uVar6": "shift",
                "iVar7": "constant",
                "uVar8": "temp4",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800046c": {
            "entrypoint": "0x0800046c",
            "current_name": "calculate_shifted_sum_0800046c",
            "code": "\nulonglong calculate_shifted_sum_0800046c(uint input1,uint input2)\n\n{\n  byte bit1;\n  uint shifted_sum;\n  uint temp1;\n  uint temp2;\n  int count;\n  uint shift;\n  int iteration;\n  uint sign;\n  uint carry;\n  bool is_negative;\n  bool is_true;\n  bool condition_met;\n  \n  if ((input1 | input2) == 0) {\n    return CONCAT44(input2,input1);\n  }\n  sign = input2 & 0x80000000;\n  temp1 = input2;\n  if ((int)sign < 0) {\n    is_true = input1 != 0;\n    input1 = -input1;\n    temp1 = -input2 - (uint)is_true;\n  }\n  iteration = 0x432;\n  carry = temp1 >> 0x16;\n  if (carry != 0) {\n    iteration = 3;\n    if (temp1 >> 0x19 != 0) {\n      iteration = 6;\n    }\n    if (temp1 >> 0x1c != 0) {\n      iteration = iteration + 3;\n    }\n    temp2 = iteration - ((int)temp1 >> 0x1f);\n    carry = input1 << (0x20 - temp2 & 0xff);\n    input1 = input1 >> (temp2 & 0xff) | temp1 << (0x20 - temp2 & 0xff);\n    temp1 = temp1 >> (temp2 & 0xff);\n    iteration = temp2 + 0x432;\n  }\n  if (0xfffff < temp1) {\n    if (0x1fffff < temp1) {\n      temp2 = temp1 & 1;\n      temp1 = temp1 >> 1;\n      bit1 = (byte)input1;\n      input1 = (uint)(temp2 != 0) << 0x1f | input1 >> 1;\n      carry = (uint)(bit1 & 1) << 0x1f | carry >> 1;\n      iteration = iteration + 1;\n      if (0xffbfffff < (uint)(iteration * 0x200000)) {\n        return (ulonglong)(sign | 0x7ff00000) << 0x20;\n      }\n    }\nLAB_08000268:\n    is_true = 0x7fffffff < carry;\n    if (carry == 0x80000000) {\n      is_true = (input1 & 1) != 0;\n    }\n    return CONCAT44(temp1 + iteration * 0x100000 + (uint)CARRY4(input1,(uint)is_true) | sign,\n                    input1 + is_true);\n  }\n  is_negative = (carry & 0x80000000) != 0;\n  carry = carry << 1;\n  temp2 = input1 * 2;\n  is_true = CARRY4(input1,input1);\n  input1 = input1 * 2 + (uint)is_negative;\n  temp1 = temp1 * 2 + (uint)(is_true || CARRY4(temp2,(uint)is_negative));\n  iteration = iteration + -1;\n  if ((temp1 & 0x100000) != 0) goto LAB_08000268;\n  shifted_sum = input1;\n  temp2 = temp1;\n  if (temp1 == 0) {\n    shifted_sum = 0;\n    temp2 = input1;\n  }\n  count = LZCOUNT(temp2);\n  if (temp1 == 0) {\n    count = count + 0x20;\n  }\n  shift = count - 0xb;\n  condition_met = SBORROW4(shift,0x20);\n  temp1 = count - 0x2b;\n  is_true = (int)temp1 < 0;\n  is_negative = temp1 == 0;\n  if ((int)shift < 0x20) {\n    condition_met = SCARRY4(temp1,0xc);\n    count = count + -0x1f;\n    is_true = count < 0;\n    is_negative = count == 0;\n    temp1 = shift;\n    if (!is_negative && is_true == condition_met) {\n      shifted_sum = temp2 << (shift & 0xff);\n      temp2 = temp2 >> (0xcU - count & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_negative || is_true != condition_met) {\n    carry = 0x20 - temp1;\n  }\n  temp2 = temp2 << (temp1 & 0xff);\n  if (is_negative || is_true != condition_met) {\n    temp2 = temp2 | shifted_sum >> (carry & 0xff);\n  }\n  if (is_negative || is_true != condition_met) {\n    shifted_sum = shifted_sum << (temp1 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shift <= iteration) {\n    return CONCAT44(temp2 + (iteration - shift) * 0x100000 | sign,shifted_sum);\n  }\n  temp1 = ~(iteration - shift);\n  if (0x1e < (int)temp1) {\n    return CONCAT44(input2,temp2 >> (temp1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  iteration = temp1 - 0x13;\n  if (iteration == 0 || iteration < 0 != SCARRY4(temp1 - 0x1f,0xc)) {\n    temp1 = temp1 + 1;\n    return CONCAT44(sign | temp2 >> (temp1 & 0xff),\n                    shifted_sum >> (temp1 & 0xff) | temp2 << (0x20 - temp1 & 0xff));\n  }\n  return CONCAT44(input2,shifted_sum >> (0x20 - (0xcU - iteration) & 0xff) | temp2 << (0xcU - iteration & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800046c": "calculate_shifted_sum_0800046c",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "bit1",
                "uVar2": "shifted_sum",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "count",
                "uVar6": "shift",
                "iVar7": "iteration",
                "uVar8": "sign",
                "uVar9": "carry",
                "bVar10": "is_negative",
                "bVar11": "is_true",
                "bVar12": "condition_met"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004c8": {
            "entrypoint": "0x080004c8",
            "current_name": "calculate_precision_value_080004c8",
            "code": "\nulonglong calculate_precision_value_080004c8(undefined4 value_param,uint a_param,uint b_param,uint c_param)\n\n{\n  ulonglong upper_value;\n  longlong temp_var;\n  uint upper_value_temp;\n  uint a_temp;\n  int temp_var_2;\n  uint lower_value_temp;\n  uint c_temp;\n  uint lower_value;\n  uint carry;\n  bool is_zero;\n  bool is_overflow;\n  bool is_negative;\n  ulonglong combined_value;\n  \n  combined_value = CONCAT44(a_param,value_param);\n  lower_value = 0x7ff;\n  a_temp = a_param >> 0x14 & 0x7ff;\n  is_zero = a_temp == 0;\n  if (!is_zero) {\n    c_temp = c_param >> 0x14 & 0x7ff;\n    is_zero = c_temp == 0;\n  }\n  if (!is_zero) {\n    is_zero = a_temp == 0x7ff;\n  }\n  if (!is_zero) {\n    is_zero = c_temp == 0x7ff;\n  }\n  if (is_zero) {\n    combined_value = calculate_double_precision_value_080006a4();\n  }\n  upper_value_temp = (uint)(combined_value >> 0x20);\n  temp_var_2 = a_temp + c_temp;\n  a_temp = upper_value_temp ^ c_param;\n  upper_value_temp = upper_value_temp & ~(lower_value << 0x15);\n  c_param = c_param & ~(lower_value << 0x15);\n  is_zero = ((uint)combined_value | upper_value_temp << 0xc) == 0;\n  if (!is_zero) {\n    is_zero = (b_param | c_param << 0xc) == 0;\n  }\n  upper_value_temp = upper_value_temp | 0x100000;\n  c_param = c_param | 0x100000;\n  if (is_zero) {\n    b_param = (uint)combined_value | b_param;\n    c_param = (a_temp & 0x80000000 | upper_value_temp) ^ c_param;\n    a_temp = lower_value >> 1;\n    is_negative = SBORROW4(temp_var_2,a_temp);\n    lower_value_temp = temp_var_2 - a_temp;\n    is_zero = lower_value_temp == 0;\n    upper_value_temp = lower_value_temp;\n    if (!is_zero && (int)a_temp <= temp_var_2) {\n      is_negative = SBORROW4(lower_value,lower_value_temp);\n      upper_value_temp = lower_value - lower_value_temp;\n      is_zero = lower_value == lower_value_temp;\n    }\n    if (!is_zero && (int)upper_value_temp < 0 == is_negative) {\n      c_param = c_param | lower_value_temp * 0x100000;\n    }\n    if (!is_zero && (int)upper_value_temp < 0 == is_negative) {\n      return CONCAT44(c_param,b_param);\n    }\n    c_param = c_param | 0x100000;\n    lower_value = 0;\n    is_negative = SBORROW4(lower_value_temp,1);\n    lower_value_temp = lower_value_temp - 1;\n    is_zero = lower_value_temp == 0;\n    a_temp = lower_value_temp;\n  }\n  else {\n    upper_value = (combined_value & 0xffffffff) * (ulonglong)b_param;\n    combined_value = (combined_value & 0xffffffff) * (ulonglong)c_param +\n             (ulonglong)upper_value_temp * (ulonglong)b_param + (upper_value >> 0x20);\n    carry = (uint)combined_value;\n    temp_var = (ulonglong)upper_value_temp * (ulonglong)c_param + (combined_value >> 0x20);\n    lower_value = (uint)temp_var;\n    upper_value_temp = (uint)((ulonglong)temp_var >> 0x20);\n    if ((int)upper_value != 0) {\n      carry = carry | 1;\n    }\n    lower_value_temp = (temp_var_2 + -0x3ff) - (uint)(upper_value_temp < 0x200);\n    if (upper_value_temp < 0x200) {\n      is_zero = (carry & 0x80000000) != 0;\n      carry = carry << 1;\n      temp_var = CONCAT44(upper_value_temp * 2 + (uint)(CARRY4(lower_value,lower_value) || CARRY4(lower_value * 2,(uint)is_zero)),\n                       lower_value * 2 + (uint)is_zero);\n    }\n    c_param = a_temp & 0x80000000 | (int)((ulonglong)temp_var >> 0x20) << 0xb | (uint)temp_var >> 0x15;\n    b_param = (uint)temp_var << 0xb | carry >> 0x15;\n    lower_value = carry * 0x800;\n    is_overflow = 0xfc < lower_value_temp;\n    is_negative = SBORROW4(lower_value_temp,0xfd);\n    upper_value_temp = lower_value_temp - 0xfd;\n    is_zero = upper_value_temp == 0;\n    a_temp = upper_value_temp;\n    if (is_overflow && !is_zero) {\n      is_overflow = 0x6ff < upper_value_temp;\n      is_negative = SBORROW4(upper_value_temp,0x700);\n      a_temp = lower_value_temp - 0x7fd;\n      is_zero = upper_value_temp == 0x700;\n    }\n    if (!is_overflow || is_zero) {\n      is_zero = 0x7fffffff < lower_value;\n      if (lower_value == 0x80000000) {\n        is_zero = (carry >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(c_param + lower_value_temp * 0x100000 + (uint)CARRY4(b_param,(uint)is_zero),b_param + is_zero\n                     );\n    }\n  }\n  if (!is_zero && (int)a_temp < 0 == is_negative) {\n    return (ulonglong)(c_param & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  is_overflow = SCARRY4(lower_value_temp,0x36);\n  is_zero = (int)(lower_value_temp + 0x36) < 0;\n  is_negative = lower_value_temp == 0xffffffca;\n  if (is_negative || is_zero != is_overflow) {\n    b_param = 0;\n  }\n  if (is_negative || is_zero != is_overflow) {\n    c_param = c_param & 0x80000000;\n  }\n  if (is_negative || is_zero != is_overflow) {\n    return CONCAT44(c_param,b_param);\n  }\n  a_temp = -lower_value_temp;\n  upper_value_temp = a_temp - 0x20;\n  if (0x1f < (int)a_temp) {\n    lower_value_temp = b_param >> (upper_value_temp & 0xff) | c_param << (0x20 - upper_value_temp & 0xff);\n    a_temp = (c_param >> (upper_value_temp & 0xff) & ~((c_param & 0x80000000) >> (upper_value_temp & 0xff))) -\n            ((int)lower_value_temp >> 0x1f);\n    if ((lower_value | b_param << (0x20 - upper_value_temp & 0xff) | lower_value_temp << 1) == 0) {\n      a_temp = a_temp & ~(lower_value_temp >> 0x1f);\n    }\n    return CONCAT44(c_param,a_temp) & 0x80000000ffffffff;\n  }\n  temp_var_2 = a_temp - 0x14;\n  if (temp_var_2 == 0 || temp_var_2 < 0 != SCARRY4(upper_value_temp,0xc)) {\n    carry = b_param << (lower_value_temp + 0x20 & 0xff);\n    upper_value_temp = b_param >> (a_temp & 0xff) | c_param << (lower_value_temp + 0x20 & 0xff);\n    lower_value_temp = upper_value_temp + -((int)carry >> 0x1f);\n    if ((lower_value | carry << 1) == 0) {\n      lower_value_temp = lower_value_temp & ~(carry >> 0x1f);\n    }\n    return CONCAT44((c_param & 0x80000000) +\n                    ((c_param & 0x7fffffff) >> (a_temp & 0xff)) +\n                    (uint)CARRY4(upper_value_temp,-((int)carry >> 0x1f)),lower_value_temp);\n  }\n  a_temp = 0xc - temp_var_2;\n  lower_value_temp = b_param << (a_temp & 0xff);\n  a_temp = b_param >> (0x20 - a_temp & 0xff) | c_param << (a_temp & 0xff);\n  upper_value_temp = a_temp + -((int)lower_value_temp >> 0x1f);\n  if ((lower_value | lower_value_temp << 1) == 0) {\n    upper_value_temp = upper_value_temp & ~(lower_value_temp >> 0x1f);\n  }\n  return CONCAT44((c_param & 0x80000000) + (uint)CARRY4(a_temp,-((int)lower_value_temp >> 0x1f)),upper_value_temp);\n}\n\n",
            "renaming": {
                "FUN_080004c8": "calculate_precision_value_080004c8",
                "param_1": "value_param",
                "param_2": "a_param",
                "param_3": "b_param",
                "param_4": "c_param",
                "uVar1": "upper_value",
                "lVar2": "temp_var",
                "uVar3": "upper_value_temp",
                "uVar4": "a_temp",
                "iVar5": "temp_var_2",
                "uVar6": "lower_value_temp",
                "unaff_r5": "c_temp",
                "uVar7": "lower_value",
                "uVar8": "carry",
                "bVar9": "is_zero",
                "bVar10": "is_overflow",
                "bVar11": "is_negative",
                "uVar12": "combined_value"
            },
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "_svfprintf_r",
                "atan",
                "_dtoa_r",
                "frexp",
                "mpu6050_calc_pitch"
            ],
            "called": [
                "FUN_080006a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006a4": {
            "entrypoint": "0x080006a4",
            "current_name": "calculate_double_precision_value_080006a4",
            "code": "\nulonglong calculate_double_precision_value_080006a4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint temp1;\n  uint temp2;\n  uint constant;\n  bool isZero;\n  \n  temp1 = constant & input4 >> 0x14;\n  if (bit2 != constant && temp1 != constant) {\n    isZero = (input1 | input2 << 1) == 0;\n    if (!isZero) {\n      isZero = (input3 | input4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      temp2 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp2;\n      if (temp1 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      temp1 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp1 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  isZero = (input1 | input2 << 1) == 0;\n  if (isZero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!isZero) {\n    isZero = (input3 | input4 << 1) == 0;\n  }\n  temp2 = input2;\n  if (((!isZero) && ((bit2 != constant || ((input1 | input2 << 0xc) == 0)))) &&\n     ((temp1 != constant || (input1 = input3, temp2 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp2,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006a4": "calculate_double_precision_value_080006a4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "constant",
                "bVar4": "isZero"
            },
            "calling": [
                "__muldf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800071c": {
            "entrypoint": "0x0800071c",
            "current_name": "calculate_floating_point_0800071c",
            "code": "\nulonglong calculateFloatingPoint_0800071c(undefined4 param1,uint param2,uint param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 temp15;\n  \n  temp15 = CONCAT44(param2,param1);\n  temp14 = 0x7ff;\n  temp7 = param2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = param4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    temp15 = calculate_floating_point_0800088a();\n  }\n  temp9 = (uint)((ulonglong)temp15 >> 0x20);\n  temp12 = (uint)temp15;\n  temp8 = temp7 - temp10;\n  if ((param3 | param4 << 0xc) == 0) {\n    temp7 = (temp9 ^ param4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (param4 << 0xc) >> 4 | 0x10000000 | param3 >> 0x18;\n    temp14 = param3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ param4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((param3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800083a;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_0800083a:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_0800071c": "calculate_floating_point_0800071c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "temp15"
            },
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "atan",
                "_dtoa_r",
                "__ieee754_atan2",
                "mpu6050_calc_pitch"
            ],
            "called": [
                "FUN_0800088a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800088a": {
            "entrypoint": "0x0800088a",
            "current_name": "calculate_floating_point_0800088a",
            "code": "\nulonglong calculateFloatingPoint_0800088a(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint maskedBit2;\n  uint var1;\n  uint var2;\n  bool isZero;\n  \n  maskedBit2 = var2 & input4 >> 0x14;\n  var1 = input2;\n  if (bit2 != var2 || maskedBit2 != var2) {\n    if (bit2 == var2) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, var1 = input4, maskedBit2 != var2)\n         ) {\nLAB_080006fc:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (maskedBit2 == var2) {\n      input1 = input3;\n      var1 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit2 == 0) {\n          var1 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | var1;\n          if (maskedBit2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          var1 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(var1 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_080006fc;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return CONCAT44(var1,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800088a": "calculate_floating_point_0800088a",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "maskedBit2",
                "uVar3": "var1",
                "in_r12": "var2",
                "bVar4": "isZero"
            },
            "calling": [
                "__divdf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008ec": {
            "entrypoint": "0x080008ec",
            "current_name": "check_parameters_080008ec",
            "code": "\nuint check_parameters_080008ec(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint xor_result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(input_2 << 1) >> 0x15 == -1 || (int)(input_4 << 1) >> 0x15 == -1) &&\n     ((((int)(input_2 << 1) >> 0x15 == -1 && ((input_1 | input_2 << 0xc) != 0)) ||\n      (((int)(input_4 << 1) >> 0x15 == -1 && ((input_3 | input_4 << 0xc) != 0)))))) {\n    return 0xffffffff;\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = input_2 == input_4;\n  }\n  if (is_zero) {\n    is_zero = input_1 == input_3;\n  }\n  if (!is_zero) {\n    xor_result = input_2 ^ input_4;\n    is_zero = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      is_zero = input_2 == input_4;\n    }\n    is_negative = -1 < (int)xor_result && input_4 <= input_2;\n    if (is_zero) {\n      is_negative = input_3 <= input_1;\n    }\n    input_4 = (int)input_4 >> 0x1f;\n    if (!is_negative) {\n      input_4 = ~input_4;\n    }\n    return input_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008ec": "check_parameters_080008ec",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "xor_result",
                "bVar2": "is_zero",
                "bVar3": "is_negative"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008f4": {
            "entrypoint": "0x080008f4",
            "current_name": "check_parameters_080008f4",
            "code": "\nuint check_parameters_080008f4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint result;\n  bool isZero;\n  bool isSmaller;\n  \n  if (((int)(input_2 << 1) >> 0x15 == -1 || (int)(input_4 << 1) >> 0x15 == -1) &&\n     ((((int)(input_2 << 1) >> 0x15 == -1 && ((input_1 | input_2 << 0xc) != 0)) ||\n      (((int)(input_4 << 1) >> 0x15 == -1 && ((input_3 | input_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (input_1 | input_2 << 1) == 0;\n  if (isZero) {\n    isZero = (input_3 | input_4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = input_2 == input_4;\n  }\n  if (isZero) {\n    isZero = input_1 == input_3;\n  }\n  if (!isZero) {\n    result = input_2 ^ input_4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = input_2 == input_4;\n    }\n    isSmaller = -1 < (int)result && input_4 <= input_2;\n    if (isZero) {\n      isSmaller = input_3 <= input_1;\n    }\n    input_4 = (int)input_4 >> 0x1f;\n    if (!isSmaller) {\n      input_4 = ~input_4;\n    }\n    return input_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008f4": "check_parameters_080008f4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isSmaller"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008fc": {
            "entrypoint": "0x080008fc",
            "current_name": "check_parameters_080008fc",
            "code": "\nuint check_parameters_080008fc(uint first_param,uint second_param,uint third_param,uint fourth_param)\n\n{\n  uint result;\n  bool isZero;\n  bool isSmaller;\n  \n  if (((int)(second_param << 1) >> 0x15 == -1 || (int)(fourth_param << 1) >> 0x15 == -1) &&\n     ((((int)(second_param << 1) >> 0x15 == -1 && ((first_param | second_param << 0xc) != 0)) ||\n      (((int)(fourth_param << 1) >> 0x15 == -1 && ((third_param | fourth_param << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (first_param | second_param << 1) == 0;\n  if (isZero) {\n    isZero = (third_param | fourth_param << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = second_param == fourth_param;\n  }\n  if (isZero) {\n    isZero = first_param == third_param;\n  }\n  if (!isZero) {\n    result = second_param ^ fourth_param;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = second_param == fourth_param;\n    }\n    isSmaller = -1 < (int)result && fourth_param <= second_param;\n    if (isZero) {\n      isSmaller = third_param <= first_param;\n    }\n    fourth_param = (int)fourth_param >> 0x1f;\n    if (!isSmaller) {\n      fourth_param = ~fourth_param;\n    }\n    return fourth_param | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008fc": "check_parameters_080008fc",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isSmaller"
            },
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000978": {
            "entrypoint": "0x08000978",
            "current_name": "compare_floating_point_values_08000978",
            "code": "\nvoid compareFloatingPointValues_08000978(undefined4 result,undefined4 data,undefined4 value1,undefined4 value2)\n\n{\n  __aeabi_cdcmpeq(value1,value2,result,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000978": "compare_floating_point_values_08000978",
                "param_1": "result",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "__aeabi_dcmpgt",
                "__aeabi_dcmpge"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000988": {
            "entrypoint": "0x08000988",
            "current_name": "convert_undefined_to_float_08000988",
            "code": "\nundefined4 convertUndefinedToFloat_08000988(undefined4 value)\n\n{\n  convertToFloat();\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08000988": "convert_undefined_to_float_08000988",
                "param_1": "value",
                "__nedf2": "convertToFloat"
            },
            "calling": [
                "__aeabi_dcmpeq",
                "__aeabi_cdrcmple",
                "__aeabi_dcmple",
                "__aeabi_dcmplt"
            ],
            "called": [
                "__nedf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "check_cdcmpeq_08000998",
            "code": "\nbool check_cdcmpeq_08000998(void)\n\n{\n  char input_char;\n  \n  __aeabi_cdcmpeq();\n  return input_char != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000998": "check_cdcmpeq_08000998",
                "in_ZR": "input_char"
            },
            "calling": [
                "_svfprintf_r",
                "_dtoa_r"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009ac": {
            "entrypoint": "0x080009ac",
            "current_name": "is_cy_null_080009ac",
            "code": "\nbool is_CY_null_080009ac(void)\n\n{\n  char check_CY;\n  \n  __aeabi_cdcmpeq();\n  return check_CY == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009ac": "is_cy_null_080009ac",
                "in_CY": "check_CY"
            },
            "calling": [
                "_svfprintf_r",
                "_dtoa_r"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c0": {
            "entrypoint": "0x080009c0",
            "current_name": "compare_and_return_080009c0",
            "code": "\nbool compareAndReturn_080009c0(void)\n\n{\n  undefined isZeroResult;\n  undefined isCarrySet;\n  \n  __aeabi_cdcmpeq();\n  return !(bool)isCarrySet || (bool)isZeroResult;\n}\n\n",
            "renaming": {
                "FUN_080009c0": "compare_and_return_080009c0",
                "in_ZR": "isZeroResult",
                "in_CY": "isCarrySet"
            },
            "calling": [
                "_svfprintf_r"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009d4": {
            "entrypoint": "0x080009d4",
            "current_name": "is_zero_or_carry_set_080009d4",
            "code": "\nbool is_Zero_or_Carry_Set_080009d4(void)\n\n{\n  undefined is_Zero_Set;\n  undefined is_Carry_Set;\n  \n  __aeabi_cdrcmple();\n  return !(bool)is_Carry_Set || (bool)is_Zero_Set;\n}\n\n",
            "renaming": {
                "FUN_080009d4": "is_zero_or_carry_set_080009d4",
                "in_ZR": "is_Zero_Set",
                "in_CY": "is_Carry_Set"
            },
            "calling": [
                "_dtoa_r"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009e8": {
            "entrypoint": "0x080009e8",
            "current_name": "is_char_null_080009e8",
            "code": "\nbool isCharNull_080009e8(void)\n\n{\n  char inputChar;\n  \n  __aeabi_cdrcmple();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009e8": "is_char_null_080009e8",
                "in_CY": "inputChar"
            },
            "calling": [
                "_svfprintf_r",
                "atan",
                "_dtoa_r"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009fc": {
            "entrypoint": "0x080009fc",
            "current_name": "calculate_float_value_080009fc",
            "code": "\nuint calculateFloatValue_080009fc(uint inputValue,uint shiftAmount)\n\n{\n  uint result;\n  uint temp;\n  uint shiftedValue;\n  uint adjustedValue;\n  bool isZero;\n  bool isLessThanThreshold;\n  \n  temp = shiftAmount * 2;\n  isLessThanThreshold = temp < 0x70000000;\n  shiftedValue = temp + 0x90000000;\n  result = shiftedValue;\n  if (!isLessThanThreshold) {\n    adjustedValue = temp + 0x8fe00000;\n    result = adjustedValue;\n  }\n  isZero = result == 0;\n  if (!isLessThanThreshold && shiftedValue >= 0x200000) {\n    isZero = adjustedValue == 0x1fc00000;\n  }\n  if (((isLessThanThreshold || shiftedValue < 0x200000) || 0x1fc00000 < adjustedValue) || isZero) {\n    if ((shiftAmount & 0x40000000) != 0) {\n      if (((int)temp >> 0x15 == -1) && ((inputValue | shiftAmount << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return shiftAmount & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp + 0x92e00000) < 0 != SCARRY4(shiftedValue,0x2e00000)) {\n      return shiftAmount & 0x80000000;\n    }\n    temp = 0x18 - (temp + 0x92e00000 >> 0x15);\n    result = inputValue >> (temp & 0xff);\n    if (inputValue << (0x20 - temp & 0xff) != 0) {\n      result = result | 1;\n    }\n    shiftedValue = shiftAmount & 0x1fffff | 0x100000;\n    inputValue = result | shiftedValue << (0x20 - temp & 0xff);\n    shiftedValue = (shiftedValue >> (temp & 0xff)) << 1;\n  }\n  result = (shiftAmount & 0x80000000 | inputValue >> 0x1d) + shiftedValue * 4 + (uint)(0x7fffffff < inputValue * 8);\n  if (inputValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080009fc": "calculate_float_value_080009fc",
                "param_1": "inputValue",
                "param_2": "shiftAmount",
                "uVar1": "result",
                "uVar2": "temp",
                "uVar3": "shiftedValue",
                "in_r12": "adjustedValue",
                "bVar4": "isZero",
                "bVar5": "isLessThanThreshold"
            },
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calc_pitch"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a9c": {
            "entrypoint": "0x08000a9c",
            "current_name": "invert_and_add_float_08000a9c",
            "code": "\nvoid invert_and_add_float_08000a9c(uint input_value)\n\n{\n  __addsf3(input_value ^ 0x80000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a9c": "invert_and_add_float_08000a9c",
                "param_1": "input_value"
            },
            "calling": [],
            "called": [
                "__addsf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "entrypoint": "0x08000aa4",
            "current_name": "calculate_floating_point_08000aa4",
            "code": "\nuint calculateFloatingPoint_08000aa4(uint inputValue,uint controlBits,undefined4 additionalControl,uint flags)\n\n{\n  int exponent;\n  int tempExponent;\n  uint inputBits;\n  uint controlBitsCopy;\n  uint significand;\n  uint shiftAmount;\n  uint difference;\n  bool compareResult;\n  \n  inputBits = controlBits ^ 0x80000000;\n  significand = inputValue << 1;\n  compareResult = significand == 0;\n  if (!compareResult) {\n    flags = controlBits << 1;\n    compareResult = flags == 0;\n  }\n  if (!compareResult) {\n    compareResult = significand == flags;\n  }\n  exponent = (int)significand >> 0x18;\n  if (!compareResult) {\n    compareResult = exponent == -1;\n  }\n  if (!compareResult) {\n    compareResult = (int)flags >> 0x18 == -1;\n  }\n  if (compareResult) {\n    tempExponent = (int)(controlBits << 1) >> 0x18;\n    if (exponent == -1 || tempExponent == -1) {\n      significand = inputBits;\n      if (exponent == -1) {\n        significand = inputValue;\n      }\n      if (exponent != -1 || tempExponent != -1) {\n        inputBits = significand;\n      }\n      compareResult = (significand & 0x7fffff) == 0;\n      if (compareResult) {\n        compareResult = (inputBits & 0x7fffff) == 0;\n      }\n      if (compareResult) {\n        compareResult = significand == inputBits;\n      }\n      if (!compareResult) {\n        significand = significand | 0x400000;\n      }\n      return significand;\n    }\n    if (((inputValue ^ inputBits) & 0x7fffffff) != 0) {\n      if (significand == 0) {\n        inputValue = inputBits;\n      }\n      return inputValue;\n    }\n    if (inputValue != inputBits) {\n      return 0;\n    }\n    if ((significand & 0xff000000) == 0) {\n      inputBits = inputValue << 1;\n      if ((inputValue & 0x80000000) != 0) {\n        inputBits = inputBits | 0x80000000;\n      }\n      return inputBits;\n    }\n    if (significand < 0xfe000000) {\n      return inputValue + 0x800000;\n    }\n    inputValue = inputValue & 0x80000000;\nLAB_08000bde:\n    return inputValue | 0x7f800000;\n  }\n  significand = significand >> 0x18;\n  flags = flags >> 0x18;\n  difference = flags - significand;\n  compareResult = difference != 0;\n  shiftAmount = significand;\n  if (compareResult && significand <= flags) {\n    shiftAmount = significand + difference;\n  }\n  if (compareResult && significand <= flags) {\n    inputBits = inputBits ^ inputValue;\n  }\n  if (compareResult && significand <= flags) {\n    inputValue = inputValue ^ inputBits;\n  }\n  if (compareResult && significand <= flags) {\n    inputBits = inputBits ^ inputValue;\n  }\n  if (flags < significand) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return inputValue;\n  }\n  significand = inputValue & 0xffffff | 0x800000;\n  if ((inputValue & 0x80000000) != 0) {\n    significand = -significand;\n  }\n  controlBitsCopy = inputBits & 0xffffff | 0x800000;\n  if ((inputBits & 0x80000000) != 0) {\n    controlBitsCopy = -controlBitsCopy;\n  }\n  if (shiftAmount == difference) {\n    controlBitsCopy = controlBitsCopy ^ 0x800000;\n    if (shiftAmount == 0) {\n      significand = significand ^ 0x800000;\n      shiftAmount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  significand = significand + ((int)controlBitsCopy >> (difference & 0xff));\n  controlBitsCopy = controlBitsCopy << (0x20 - difference & 0xff);\n  inputValue = significand & 0x80000000;\n  if ((int)significand < 0) {\n    compareResult = controlBitsCopy != 0;\n    controlBitsCopy = -controlBitsCopy;\n    significand = -significand - (uint)compareResult;\n  }\n  if (significand < 0x800000) {\n    inputBits = controlBitsCopy & 0x80000000;\n    controlBitsCopy = controlBitsCopy << 1;\n    significand = significand * 2 + (uint)(inputBits != 0);\n    inputBits = shiftAmount - 2;\n    if ((significand & 0x800000) == 0) {\n      difference = leadingZeroesCount(significand) - 8;\n      significand = significand << (difference & 0xff);\n      if ((int)inputBits < (int)difference) {\n        significand = significand >> (-(inputBits - difference) & 0xff);\n      }\n      else {\n        significand = significand + (inputBits - difference) * 0x800000;\n      }\n      return significand | inputValue;\n    }\n  }\n  else {\n    inputBits = shiftAmount - 1;\n    if (0xffffff < significand) {\n      inputBits = significand & 1;\n      significand = significand >> 1;\n      controlBitsCopy = (uint)(inputBits != 0) << 0x1f | controlBitsCopy >> 1;\n      inputBits = shiftAmount;\n      if (0xfd < shiftAmount) goto LAB_08000bde;\n    }\n  }\n  significand = significand + inputBits * 0x800000 + (uint)(0x7fffffff < controlBitsCopy);\n  if (controlBitsCopy == 0x80000000) {\n    significand = significand & 0xfffffffe;\n  }\n  return significand | inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000aa4": "calculate_floating_point_08000aa4",
                "param_1": "inputValue",
                "param_2": "controlBits",
                "param_3": "additionalControl",
                "param_4": "flags",
                "iVar1": "exponent",
                "iVar2": "tempExponent",
                "uVar3": "inputBits",
                "uVar4": "controlBitsCopy",
                "uVar5": "significand",
                "uVar6": "shiftAmount",
                "uVar7": "difference",
                "bVar8": "compareResult",
                "LZCOUNT": "leadingZeroesCount"
            },
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "mpu6050_calc_pitch"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_float_value_08000aa8",
            "code": "\nuint calculateFloatValue_08000aa8(uint inputValue1,uint inputValue2,undefined4 inputValue3,uint inputValue4)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  uint result1;\n  uint result2;\n  uint temp1;\n  uint temp2;\n  bool isZero;\n  \n  result2 = inputValue1 << 1;\n  isZero = result2 == 0;\n  if (!isZero) {\n    inputValue4 = inputValue2 << 1;\n    isZero = inputValue4 == 0;\n  }\n  if (!isZero) {\n    isZero = result2 == inputValue4;\n  }\n  shiftedValue1 = (int)result2 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedValue1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)inputValue4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedValue2 = (int)(inputValue2 << 1) >> 0x18;\n    if (shiftedValue1 == -1 || shiftedValue2 == -1) {\n      result2 = inputValue2;\n      if (shiftedValue1 == -1) {\n        result2 = inputValue1;\n      }\n      if (shiftedValue1 != -1 || shiftedValue2 != -1) {\n        inputValue2 = result2;\n      }\n      isZero = (result2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (inputValue2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = result2 == inputValue2;\n      }\n      if (!isZero) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((inputValue1 ^ inputValue2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        inputValue1 = inputValue2;\n      }\n      return inputValue1;\n    }\n    if (inputValue1 != inputValue2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = inputValue1 << 1;\n      if ((inputValue1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return inputValue1 + 0x800000;\n    }\n    inputValue1 = inputValue1 & 0x80000000;\nLAB_08000bde:\n    return inputValue1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  inputValue4 = inputValue4 >> 0x18;\n  temp2 = inputValue4 - result2;\n  isZero = temp2 != 0;\n  temp1 = result2;\n  if (isZero && result2 <= inputValue4) {\n    temp1 = result2 + temp2;\n  }\n  if (isZero && result2 <= inputValue4) {\n    inputValue2 = inputValue2 ^ inputValue1;\n  }\n  if (isZero && result2 <= inputValue4) {\n    inputValue1 = inputValue1 ^ inputValue2;\n  }\n  if (isZero && result2 <= inputValue4) {\n    inputValue2 = inputValue2 ^ inputValue1;\n  }\n  if (inputValue4 < result2) {\n    temp2 = -temp2;\n  }\n  if (0x19 < temp2) {\n    return inputValue1;\n  }\n  result2 = inputValue1 & 0xffffff | 0x800000;\n  if ((inputValue1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = inputValue2 & 0xffffff | 0x800000;\n  if ((inputValue2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp1 == temp2) {\n    result1 = result1 ^ 0x800000;\n    if (temp1 == 0) {\n      result2 = result2 ^ 0x800000;\n      temp1 = 1;\n    }\n    else {\n      temp2 = temp2 - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (temp2 & 0xff));\n  result1 = result1 << (0x20 - temp2 & 0xff);\n  inputValue1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    isZero = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)isZero;\n  }\n  if (result2 < 0x800000) {\n    temp2 = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(temp2 != 0);\n    temp2 = temp1 - 2;\n    if ((result2 & 0x800000) == 0) {\n      temp1 = LZCOUNT(result2) - 8;\n      result2 = result2 << (temp1 & 0xff);\n      if ((int)temp2 < (int)temp1) {\n        result2 = result2 >> (-(temp2 - temp1) & 0xff);\n      }\n      else {\n        result2 = result2 + (temp2 - temp1) * 0x800000;\n      }\n      return result2 | inputValue1;\n    }\n  }\n  else {\n    temp2 = temp1 - 1;\n    if (0xffffff < result2) {\n      temp2 = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(temp2 != 0) << 0x1f | result1 >> 1;\n      temp2 = temp1;\n      if (0xfd < temp1) goto LAB_08000bde;\n    }\n  }\n  result2 = result2 + temp2 * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | inputValue1;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_float_value_08000aa8",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "inputValue3",
                "param_4": "inputValue4",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "bVar7": "isZero",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2"
            },
            "calling": [
                "__aeabi_frsub",
                "mpu6050_calibrate",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c08": {
            "entrypoint": "0x08000c08",
            "current_name": "count_leading_zeroes_08000c08",
            "code": "\nuint countLeadingZeroes_08000c08(uint input)\n\n{\n  uint leadingZeroesCount;\n  uint shiftAmount;\n  int offset;\n  uint shiftedZeroes;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZeroesCount = LZCOUNT(input);\n  shiftAmount = leadingZeroesCount - 8;\n  offset = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeroesCount) {\n    shiftedZeroes = 0 << (shiftAmount & 0xff);\n    leadingZeroesCount = offset + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < shiftedZeroes);\n    if (shiftedZeroes == 0x80000000) {\n      leadingZeroesCount = leadingZeroesCount & 0xfffffffe;\n    }\n    return leadingZeroesCount;\n  }\n  shiftAmount = input << leadingZeroesCount + 0x18;\n  leadingZeroesCount = offset + ((input >> (0x20 - (leadingZeroesCount + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeroesCount = leadingZeroesCount & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeroesCount;\n}\n\n",
            "renaming": {
                "FUN_08000c08": "count_leading_zeroes_08000c08",
                "param_1": "input",
                "uVar1": "leadingZeroesCount",
                "uVar2": "shiftAmount",
                "iVar3": "offset",
                "uVar4": "shiftedZeroes"
            },
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c10": {
            "entrypoint": "0x08000c10",
            "current_name": "calculate_value_08000c10",
            "code": "\nuint calculateValue_08000c10(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftValue;\n  uint signBit;\n  int adjustedValue;\n  \n  signBit = inputValue & 0x80000000;\n  if ((int)signBit < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftValue = leadingZeros - 8;\n  adjustedValue = ((signBit | 0x4b000000) - 0x800000) + shiftValue * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftValue & 0xff);\n    signBit = adjustedValue + (inputValue << (shiftValue & 0xff)) +\n            (0U >> (0x20 - shiftValue & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftValue = inputValue << leadingZeros + 0x18;\n  signBit = adjustedValue + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftValue >> 0x1f));\n  if ((shiftValue & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftValue >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08000c10": "calculate_value_08000c10",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftValue",
                "uVar3": "signBit",
                "iVar4": "adjustedValue"
            },
            "calling": [
                "mpu6050_update",
                "mpu6050_calibrate",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c2c": {
            "entrypoint": "0x08000c2c",
            "current_name": "calculate_modified_value_08000c2c",
            "code": "\nuint calculateModifiedValue_08000c2c(uint inputValue1,uint inputValue2)\n\n{\n  uint tempValue1;\n  uint tempValue2;\n  uint shiftAmount;\n  uint shiftedValue;\n  int baseValue;\n  \n  if ((inputValue1 | inputValue2) == 0) {\n    return inputValue1;\n  }\n  tempValue1 = inputValue1;\n  tempValue2 = inputValue2;\n  if (inputValue2 == 0) {\n    tempValue1 = 0;\n    tempValue2 = inputValue1;\n  }\n  baseValue = 0x5b000000;\n  if (inputValue2 == 0) {\n    baseValue = 0x4b000000;\n  }\n  shiftAmount = LZCOUNT(tempValue2);\n  shiftedValue = shiftAmount - 8;\n  baseValue = baseValue + -0x800000 + shiftedValue * -0x800000;\n  if (shiftAmount < 8) {\n    shiftedValue = tempValue2 << shiftAmount + 0x18;\n    tempValue2 = baseValue + ((tempValue2 >> (0x20 - (shiftAmount + 0x18) & 0xff)) - ((int)shiftedValue >> 0x1f));\n    if ((tempValue1 | shiftedValue << 1) == 0) {\n      tempValue2 = tempValue2 & ~(shiftedValue >> 0x1f);\n    }\n    return tempValue2;\n  }\n  shiftAmount = tempValue1 << (shiftedValue & 0xff);\n  tempValue2 = baseValue + (tempValue2 << (shiftedValue & 0xff)) +\n          (tempValue1 >> (0x20 - shiftedValue & 0xff)) + (uint)(0x7fffffff < shiftAmount);\n  if (shiftAmount == 0x80000000) {\n    tempValue2 = tempValue2 & 0xfffffffe;\n  }\n  return tempValue2;\n}\n\n",
            "renaming": {
                "FUN_08000c2c": "calculate_modified_value_08000c2c",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "uVar1": "tempValue1",
                "uVar2": "tempValue2",
                "uVar3": "shiftAmount",
                "uVar4": "shiftedValue",
                "iVar5": "baseValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_08000c3c",
            "code": "\nuint calculate_08000c3c(uint number1,uint number2)\n\n{\n  uint temp1;\n  uint temp2;\n  uint count;\n  uint shift;\n  uint flag;\n  int result;\n  bool isNegative;\n  \n  if ((number1 | number2) == 0) {\n    return number1;\n  }\n  flag = number2 & 0x80000000;\n  if ((int)flag < 0) {\n    isNegative = number1 != 0;\n    number1 = -number1;\n    number2 = -number2 - (uint)isNegative;\n  }\n  temp2 = number1;\n  temp1 = number2;\n  if (number2 == 0) {\n    temp2 = 0;\n    temp1 = number1;\n  }\n  flag = flag | 0x5b000000;\n  if (number2 == 0) {\n    flag = flag + 0xf0000000;\n  }\n  count = LZCOUNT(temp1);\n  shift = count - 8;\n  result = (flag - 0x800000) + shift * -0x800000;\n  if (count < 8) {\n    shift = temp1 << count + 0x18;\n    flag = result + ((temp1 >> (0x20 - (count + 0x18) & 0xff)) - ((int)shift >> 0x1f));\n    if ((temp2 | shift << 1) == 0) {\n      flag = flag & ~(shift >> 0x1f);\n    }\n    return flag;\n  }\n  count = temp2 << (shift & 0xff);\n  flag = result + (temp1 << (shift & 0xff)) +\n          (temp2 >> (0x20 - shift & 0xff)) + (uint)(0x7fffffff < count);\n  if (count == 0x80000000) {\n    flag = flag & 0xfffffffe;\n  }\n  return flag;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_08000c3c",
                "param_1": "number1",
                "param_2": "number2",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "count",
                "uVar4": "shift",
                "uVar5": "flag",
                "iVar6": "result",
                "bVar7": "isNegative"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "entrypoint": "0x08000cb8",
            "current_name": "float_to_binary_08000cb8",
            "code": "\nuint floatToBinary_08000cb8(uint float1,uint float2,undefined4 param3,uint float3)\n\n{\n  longlong product;\n  uint result;\n  uint exp1;\n  int sumExp1Exp2;\n  int diffExpSum;\n  uint productLo;\n  int expDiff;\n  uint exp2;\n  bool isZero;\n  bool isNegative;\n  \n  exp1 = float1 >> 0x17 & 0xff;\n  isZero = exp1 == 0;\n  if (!isZero) {\n    float3 = float2 >> 0x17 & 0xff;\n    isZero = float3 == 0;\n  }\n  if (!isZero) {\n    isZero = exp1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = float3 == 0xff;\n  }\n  if (isZero) {\n    float3 = float2 >> 0x17 & 0xff;\n    if (exp1 == 0xff || float3 == 0xff) {\n      isZero = float1 == 0 || float1 == 0x80000000;\n      result = float2;\n      if (float1 != 0 && float1 != 0x80000000) {\n        isZero = float2 == 0;\n        result = float1;\n      }\n      if (!isZero) {\n        isZero = float2 == 0x80000000;\n      }\n      exp2 = result;\n      if (((isZero) || ((exp1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((float3 == 0xff && (exp2 = float2, (float2 & 0x7fffff) != 0)))) {\n        return exp2 | 0x7fc00000;\n      }\n      result = result ^ float2;\n      goto LAB_08000e08;\n    }\n    isZero = (float1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (float2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (float1 ^ float2) & 0x80000000;\n    }\n    isZero = exp1 == 0;\n    result = float1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        float1 = float1 << 1;\n        isZero = (float1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      exp1 = exp1 - 1;\n    }\n    float1 = float1 | result;\n    isZero = float3 == 0;\n    result = float2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        float2 = float2 << 1;\n        isZero = (float2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      float3 = float3 - 1;\n    }\n    float2 = float2 | result;\n  }\n  sumExp1Exp2 = exp1 + float3;\n  exp2 = float1 ^ float2;\n  exp1 = float1 << 9;\n  isZero = exp1 == 0;\n  if (!isZero) {\n    float2 = float2 << 9;\n    isZero = float2 == 0;\n  }\n  if (isZero) {\n    if (exp1 == 0) {\n      float2 = float2 << 9;\n    }\n    result = exp2 & 0x80000000 | float1 & 0x7fffff | float2 >> 9;\n    isNegative = SBORROW4(sumExp1Exp2,0x7f);\n    diffExpSum = sumExp1Exp2 + -0x7f;\n    isZero = diffExpSum == 0;\n    expDiff = diffExpSum;\n    if (!isZero && 0x7e < sumExp1Exp2) {\n      isNegative = SBORROW4(0xff,diffExpSum);\n      expDiff = 0xff - diffExpSum;\n      isZero = diffExpSum == 0xff;\n    }\n    if (!isZero && expDiff < 0 == isNegative) {\n      result = result | diffExpSum * 0x800000;\n    }\n    if (!isZero && expDiff < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    productLo = 0;\n    isNegative = SBORROW4(diffExpSum,1);\n    exp2 = sumExp1Exp2 - 0x80;\n    isZero = exp2 == 0;\n    exp1 = exp2;\n  }\n  else {\n    product = (ulonglong)(exp1 >> 5 | 0x8000000) * (ulonglong)(float2 >> 5 | 0x8000000);\n    productLo = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | productLo >> 0x1f;\n      productLo = productLo << 1;\n    }\n    result = exp2 & 0x80000000 | result;\n    exp2 = (sumExp1Exp2 + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(exp2,0xfd);\n    isZero = exp2 == 0xfd;\n    exp1 = exp2 - 0xfd;\n    if (exp2 < 0xfe) {\n      result = result + exp2 * 0x800000 + (uint)(0x7fffffff < productLo);\n      if (productLo == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)exp1 < 0 != isNegative) {\n    isZero = (int)(exp2 + 0x19) < 0;\n    if (exp2 == 0xffffffe7 || isZero != SCARRY4(exp2,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (exp2 != 0xffffffe7 && isZero == SCARRY4(exp2,0x19)) {\n      exp1 = (result << 1) >> (-exp2 & 0xff);\n      exp2 = result << (exp2 + 0x20 & 0xff);\n      exp1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exp1 >> 1) + (uint)((byte)exp1 & 1);\n      if ((productLo | exp2 << 1) == 0) {\n        exp1 = exp1 & ~(exp2 >> 0x1f);\n      }\n      return exp1;\n    }\n    return result;\n  }\nLAB_08000e08:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cb8": "float_to_binary_08000cb8",
                "param_1": "float1",
                "param_2": "float2",
                "param_3": "param3",
                "param_4": "float3",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "exp1",
                "iVar4": "sumExp1Exp2",
                "iVar5": "diffExpSum",
                "uVar6": "productLo",
                "iVar7": "expDiff",
                "uVar8": "exp2",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e20": {
            "entrypoint": "0x08000e20",
            "current_name": "calculate_floating_point_08000e20",
            "code": "\nuint calculateFloatingPoint_08000e20(uint input1,uint input2,undefined4 initializedValue,uint epsilon)\n\n{\n  uint bitDifference;\n  uint exponent1;\n  int exponentDifference;\n  uint loopCount;\n  int tmp;\n  uint result;\n  bool isZero;\n  bool carryOverflow;\n  bool subBorrow;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  isZero = exponent1 == 0;\n  if (!isZero) {\n    epsilon = input2 >> 0x17 & 0xff;\n    isZero = epsilon == 0;\n  }\n  if (!isZero) {\n    isZero = exponent1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = epsilon == 0xff;\n  }\n  if (isZero) {\n    epsilon = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (exponent1 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, epsilon == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (epsilon == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      isZero = (input1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (input2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = exponent1 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input1 = input1 << 1;\n            isZero = (input1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          exponent1 = exponent1 - 1;\n        }\n        input1 = input1 | result;\n        isZero = epsilon == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input2 = input2 << 1;\n            isZero = (input2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          epsilon = epsilon - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_08000e38;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e38:\n    exponentDifference = exponent1 - epsilon;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      subBorrow = SCARRY4(exponentDifference,0x7f);\n      tmp = exponentDifference + 0x7f;\n      isZero = tmp < 0;\n      carryOverflow = tmp == 0;\n      if (!carryOverflow && isZero == subBorrow) {\n        subBorrow = SBORROW4(0xff,tmp);\n        isZero = 0xff - tmp < 0;\n        carryOverflow = tmp == 0xff;\n      }\n      if (!carryOverflow && isZero == subBorrow) {\n        input1 = input1 | tmp * 0x800000;\n      }\n      if (!carryOverflow && isZero == subBorrow) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      exponent1 = 0;\n      carryOverflow = SBORROW4(tmp,1);\n      loopCount = exponentDifference + 0x7e;\n      isZero = loopCount == 0;\n      result = loopCount;\n    }\n    else {\n      bitDifference = (input2 << 9) >> 4 | 0x10000000;\n      exponent1 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      isZero = bitDifference <= exponent1;\n      if (!isZero) {\n        exponent1 = exponent1 << 1;\n      }\n      loopCount = exponentDifference + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (bitDifference <= exponent1) {\n          exponent1 = exponent1 - bitDifference;\n          input1 = input1 | result;\n        }\n        isZero = bitDifference >> 1 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (bitDifference >> 1);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 1;\n        }\n        isZero = bitDifference >> 2 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (bitDifference >> 2);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 2;\n        }\n        isZero = bitDifference >> 3 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (bitDifference >> 3);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 3;\n        }\n        exponent1 = exponent1 * 0x10;\n        isZero = exponent1 == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      carryOverflow = SBORROW4(loopCount,0xfd);\n      isZero = loopCount == 0xfd;\n      result = loopCount - 0xfd;\n      if (loopCount < 0xfe) {\n        input1 = input1 + loopCount * 0x800000 + (uint)(bitDifference <= exponent1);\n        if (exponent1 - bitDifference == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (isZero || (int)result < 0 != carryOverflow) {\n      isZero = (int)(loopCount + 0x19) < 0;\n      if (loopCount == 0xffffffe7 || isZero != SCARRY4(loopCount,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (loopCount == 0xffffffe7 || isZero != SCARRY4(loopCount,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-loopCount & 0xff);\n      loopCount = input1 << (loopCount + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((exponent1 | loopCount << 1) == 0) {\n        result = result & ~(loopCount >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e20": "calculate_floating_point_08000e20",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "initializedValue",
                "param_4": "epsilon",
                "uVar1": "bitDifference",
                "uVar2": "exponent1",
                "iVar3": "exponentDifference",
                "uVar4": "loopCount",
                "iVar5": "tmp",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "carryOverflow",
                "bVar9": "subBorrow"
            },
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calibrate"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f58": {
            "entrypoint": "0x08000f58",
            "current_name": "calculate_result_08000f58",
            "code": "\nuint calculateResult_08000f58(uint input1,uint input2)\n\n{\n  bool isNegative;\n  uint input1Times2;\n  uint input2Times2;\n  uint combinedInput;\n  bool isCombinedInputZero;\n  \n  input1Times2 = input1 * 2;\n  input2Times2 = input2 * 2;\n  if (((int)input1Times2 >> 0x18 == -1 || (int)input2Times2 >> 0x18 == -1) &&\n     ((((int)input1Times2 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)input2Times2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  combinedInput = input1Times2 | input2 & 0x7fffffff;\n  isCombinedInputZero = combinedInput == 0;\n  if (!isCombinedInputZero) {\n    combinedInput = input1 ^ input2;\n    isCombinedInputZero = combinedInput == 0;\n  }\n  isNegative = -1 < signedCombinedInput;\n  if (isNegative) {\n    input1 = input1Times2 + input2 * -2;\n    isCombinedInputZero = input1 == 0;\n  }\n  if ((isNegative && input2Times2 <= input1Times2) && !isCombinedInputZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!isNegative || input2Times2 > input1Times2) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isCombinedInputZero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_08000f58": "calculate_result_08000f58",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "isNegative",
                "uVar2": "input1Times2",
                "uVar3": "input2Times2",
                "uVar4": "combinedInput",
                "bVar5": "isCombinedInputZero",
                "(int)uVar4": "signedCombinedInput"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f60": {
            "entrypoint": "0x08000f60",
            "current_name": "calculate_absolute_value_08000f60",
            "code": "\nuint calculate_absolute_value_08000f60(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint combined_inputs;\n  bool is_combined_zero;\n  \n  doubled_input_1 = input_1 * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n  is_combined_zero = combined_inputs == 0;\n  if (!is_combined_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_combined_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_combined_zero = input_1 == 0;\n  }\n  if ((is_negative && doubled_input_2 <= doubled_input_1) && !is_combined_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_combined_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f60": "calculate_absolute_value_08000f60",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_negative",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_inputs",
                "bVar5": "is_combined_zero"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f68": {
            "entrypoint": "0x08000f68",
            "current_name": "calculate_result_08000f68",
            "code": "\nuint calculateResult_08000f68(uint input1,uint input2)\n\n{\n  bool isNegativeResult;\n  uint input1_times_2;\n  uint input2_times_2;\n  uint combined_result;\n  bool isCombinedResultZero;\n  \n  input1_times_2 = input1 * 2;\n  input2_times_2 = input2 * 2;\n  if (((int)input1_times_2 >> 0x18 == -1 || (int)input2_times_2 >> 0x18 == -1) &&\n     ((((int)input1_times_2 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)input2_times_2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_result = input1_times_2 | input2 & 0x7fffffff;\n  isCombinedResultZero = combined_result == 0;\n  if (!isCombinedResultZero) {\n    combined_result = input1 ^ input2;\n    isCombinedResultZero = combined_result == 0;\n  }\n  isNegativeResult = -1 < (int)combined_result;\n  if (isNegativeResult) {\n    input1 = input1_times_2 + input2 * -2;\n    isCombinedResultZero = input1 == 0;\n  }\n  if ((isNegativeResult && input2_times_2 <= input1_times_2) && !isCombinedResultZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!isNegativeResult || input2_times_2 > input1_times_2) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isCombinedResultZero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "isNegativeResult",
                "uVar2": "input1_times_2",
                "uVar3": "input2_times_2",
                "uVar4": "combined_result",
                "bVar5": "isCombinedResultZero"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "entrypoint": "0x08000fc8",
            "current_name": "compare_floating_point_values_08000fc8",
            "code": "\nvoid compareFloatingPointValues_08000fc8(undefined4 value1,undefined4 value2)\n\n{\n  __aeabi_cfcmpeq(value2,value1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fc8": "compare_floating_point_values_08000fc8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "entrypoint": "0x08000fd0",
            "current_name": "concatenate_parameters_08000fd0",
            "code": "\nundefined8 concatenateParameters_08000fd0(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  __cmpsf2();\n  return CONCAT44(inputParam2,inputParam1);\n}\n\n",
            "renaming": {
                "FUN_08000fd0": "concatenate_parameters_08000fd0",
                "param_1": "inputParam1",
                "param_2": "inputParam2"
            },
            "calling": [
                "__aeabi_fcmplt",
                "__aeabi_cfrcmple",
                "__aeabi_fcmple",
                "__aeabi_fcmpeq"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fe0": {
            "entrypoint": "0x08000fe0",
            "current_name": "check_if_comparison_equal_08000fe0",
            "code": "\nbool check_if_comparison_equal_08000fe0(void)\n\n{\n  char is_not_equal;\n  \n  perform_comparison();\n  return is_not_equal != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000fe0": "check_if_comparison_equal_08000fe0",
                "in_ZR": "is_not_equal",
                "__aeabi_cfcmpeq": "perform_comparison"
            },
            "calling": [],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "entrypoint": "0x08000ff4",
            "current_name": "FUNC_08000ff4",
            "code": "\nbool FUNC_08000ff4(void)\n\n{\n  char in_CY;\n  \n  __aeabi_cfcmpeq();\n  return in_CY == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000ff4": "FUNC_08000ff4"
            },
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001008": {
            "entrypoint": "0x08001008",
            "current_name": "check_cfcmpeq_result_08001008",
            "code": "\nbool check_cfcmpeq_result_08001008(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_08001008": "check_cfcmpeq_result_08001008",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "calling": [],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800101c": {
            "entrypoint": "0x0800101c",
            "current_name": "is_comparison_true_0800101c",
            "code": "\nbool isComparisonTrue_0800101c(void)\n\n{\n  undefined isZero;\n  undefined isCarry;\n  \n  __aeabi_cfrcmple();\n  return !(bool)isCarry || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_0800101c": "is_comparison_true_0800101c",
                "in_ZR": "isZero",
                "in_CY": "isCarry"
            },
            "calling": [],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001030": {
            "entrypoint": "0x08001030",
            "current_name": "is_string_empty_08001030",
            "code": "\nbool is_string_empty_08001030(void)\n\n{\n  char input_char;\n  \n  __aeabi_cfrcmple();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001030": "is_string_empty_08001030",
                "in_CY": "input_char"
            },
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001044": {
            "entrypoint": "0x08001044",
            "current_name": "validate_input_08001044",
            "code": "\nuint validate_input_08001044(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08001044": "validate_input_08001044",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001084": {
            "entrypoint": "0x08001084",
            "current_name": "memmove_08001084",
            "code": "\nvoid * memmove_08001084(void *destination,void *source,size_t length)\n\n{\n  undefined *dest_ptr;\n  undefined4 *dest_ptr_aligned;\n  undefined4 *dest_ptr_iter;\n  undefined *src_ptr;\n  undefined4 *src_ptr_aligned;\n  undefined *src_ptr_iter;\n  uint count;\n  uint remainder;\n  bool is_ongoing;\n  \n  dest_ptr_iter = (undefined4 *)destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      remainder = length - 4;\n      dest_ptr = (undefined *)destination;\n      if (3 < length) {\n        do {\n          src_ptr_iter = (undefined *)source;\n          src_ptr = dest_ptr;\n          is_ongoing = remainder != 0;\n          remainder = remainder - 1;\n          *src_ptr = *src_ptr_iter;\n          dest_ptr = src_ptr + 1;\n          source = src_ptr_iter + 1;\n        } while (is_ongoing);\n        src_ptr[1] = src_ptr_iter[1];\n        src_ptr[2] = src_ptr_iter[2];\n        src_ptr[3] = src_ptr_iter[3];\n        return destination;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      remainder = 4 - ((uint)destination & 3);\n      length = length - remainder;\n      dest_ptr_aligned = (undefined4 *)destination;\n      src_ptr_aligned = (undefined4 *)source;\n                    /* WARNING: Load size is inaccurate */\n      if (((uint)destination & 1) != 0) {\n        src_ptr_aligned = (undefined4 *)((int)source + 1);\n        dest_ptr_aligned = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *source;\n      }\n      dest_ptr_iter = dest_ptr_aligned;\n      source = src_ptr_aligned;\n      if ((remainder & 2) != 0) {\n        source = (void *)((int)src_ptr_aligned + 2);\n        dest_ptr_iter = (undefined4 *)((int)dest_ptr_aligned + 2);\n        *(undefined2 *)dest_ptr_aligned = *(undefined2 *)src_ptr_aligned;\n      }\n    }\n  }\n  while (0x3f < length) {\n                    /* WARNING: Load size is inaccurate */\n    *dest_ptr_iter = *source;\n    dest_ptr_iter[1] = *(undefined4 *)((int)source + 4);\n    dest_ptr_iter[2] = *(undefined4 *)((int)source + 8);\n    dest_ptr_iter[3] = *(undefined4 *)((int)source + 0xc);\n    dest_ptr_iter[4] = *(undefined4 *)((int)source + 0x10);\n    dest_ptr_iter[5] = *(undefined4 *)((int)source + 0x14);\n    dest_ptr_iter[6] = *(undefined4 *)((int)source + 0x18);\n    dest_ptr_iter[7] = *(undefined4 *)((int)source + 0x1c);\n    dest_ptr_iter[8] = *(undefined4 *)((int)source + 0x20);\n    dest_ptr_iter[9] = *(undefined4 *)((int)source + 0x24);\n    dest_ptr_iter[10] = *(undefined4 *)((int)source + 0x28);\n    dest_ptr_iter[0xb] = *(undefined4 *)((int)source + 0x2c);\n    dest_ptr_iter[0xc] = *(undefined4 *)((int)source + 0x30);\n    dest_ptr_iter[0xd] = *(undefined4 *)((int)source + 0x34);\n    dest_ptr_iter[0xe] = *(undefined4 *)((int)source + 0x38);\n    dest_ptr_iter[0xf] = *(undefined4 *)((int)source + 0x3c);\n    dest_ptr_iter = dest_ptr_iter + 0x10;\n    source = (undefined4 *)((int)source + 0x40);\n    length = length - 0x40;\n  }\n  count = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n                    /* WARNING: Load size is inaccurate */\n      *dest_ptr_iter = *source;\n      dest_ptr_iter[1] = *(undefined4 *)((int)source + 4);\n      dest_ptr_iter[2] = *(undefined4 *)((int)source + 8);\n      dest_ptr_iter[3] = *(undefined4 *)((int)source + 0xc);\n      dest_ptr_iter = dest_ptr_iter + 4;\n      source = (void *)((int)source + 0x10);\n      is_ongoing = 0xf < count;\n      count = count - 0x10;\n    } while (is_ongoing);\n  }\n  remainder = count + 0xc;\n  src_ptr_aligned = dest_ptr_iter;\n  dest_ptr_aligned = (undefined4 *)source;\n  if (0xfffffff3 < count) {\n    do {\n      source = dest_ptr_aligned + 1;\n      *src_ptr_aligned = *dest_ptr_aligned;\n      is_ongoing = 3 < remainder;\n      remainder = remainder - 4;\n      dest_ptr_iter = src_ptr_aligned + 1;\n      src_ptr_aligned = src_ptr_aligned + 1;\n      dest_ptr_aligned = (undefined4 *)source;\n    } while (is_ongoing);\n  }\nLAB_08001108:\n  if (remainder + 4 != 0) {\n    dest_ptr_aligned = dest_ptr_iter;\n    src_ptr_aligned = (undefined4 *)source;\n                    /* WARNING: Load size is inaccurate */\n    if ((remainder & 1) != 0) {\n      src_ptr_aligned = (undefined4 *)((int)source + 1);\n      dest_ptr_aligned = (undefined4 *)((int)dest_ptr_iter + 1);\n      *(undefined *)dest_ptr_iter = *source;\n    }\n    if ((remainder + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr_aligned = *(undefined2 *)src_ptr_aligned;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_08001084": "memmove_08001084",
                "__dest": "destination",
                "__src": "source",
                "__n": "length",
                "puVar1": "dest_ptr",
                "puVar2": "dest_ptr_aligned",
                "puVar3": "dest_ptr_iter",
                "puVar4": "src_ptr",
                "puVar5": "src_ptr_aligned",
                "puVar6": "src_ptr_iter",
                "uVar7": "count",
                "uVar8": "remainder",
                "bVar9": "is_ongoing"
            },
            "calling": [
                "__ssprint_r",
                "_dtoa_r",
                "__multadd"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "check_conditions_08001170",
            "code": "\nundefined4 check_conditions_08001170(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001170": "check_conditions_08001170",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "_svfprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800119c": {
            "entrypoint": "0x0800119c",
            "current_name": "calculate_result_0800119c",
            "code": "\nuint calculateResult_0800119c(uint input1,uint input2)\n\n{\n  uint result;\n  int tempVar;\n  uint negCount;\n  \n  tempVar = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < tempVar) {\n      return 0;\n    }\n    result = tempVar >> 0x15;\n    negCount = -result - 0x3e1;\n    if (result < 0xfffffc20 && negCount != 0) {\n      result = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (negCount & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}\n\n",
            "renaming": {
                "FUN_0800119c": "calculate_result_0800119c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "iVar2": "tempVar",
                "uVar3": "negCount"
            },
            "calling": [
                "_svfprintf_r",
                "_dtoa_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011ec": {
            "entrypoint": "0x080011ec",
            "current_name": "divide_or_throw_error_080011ec",
            "code": "\nvoid divideOrThrowError_080011ec(int dividend,int divisor,int remainder,int quotient)\n\n{\n  if ((quotient == 0) && (remainder == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      divisor = -1;\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend,divisor);\n    return;\n  }\n  __udivmoddi4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011ec": "divide_or_throw_error_080011ec",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "quotient"
            },
            "calling": [
                "_svfprintf_r"
            ],
            "called": [
                "__udivmoddi4",
                "__aeabi_idiv0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800121c": {
            "entrypoint": "0x0800121c",
            "current_name": "perform_division_with_remainder_0800121c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 performDivisionWithRemainder_0800121c(uint dividend,uint dividend_high,uint divisor,uint divisor_high,uint *remainder)\n\n{\n  code *table;\n  ulonglong mul_result;\n  uint quotient1;\n  uint carry;\n  uint mul_remainder;\n  int shift_count;\n  uint quotient;\n  uint divisor_combined;\n  uint divisor_rem;\n  uint *puVar9;\n  uint quotient2;\n  uint mul_temp1;\n  uint mul_temp2;\n  bool carry_flag;\n  undefined8 result;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_count = LZCOUNT(divisor);\n      divisor_combined = divisor;\n      if (shift_count != 0) {\n        divisor_combined = divisor << shift_count;\n        dividend_high = dividend >> (0x20U - shift_count & 0xff) | dividend_high << shift_count;\n        dividend = dividend << shift_count;\n      }\n      mul_temp1 = divisor_combined >> 0x10;\n      divisor_rem = dividend_high / mul_temp1;\n      quotient2 = divisor_rem * (divisor_combined & 0xffff);\n      quotient = dividend >> 0x10 | (dividend_high - mul_temp1 * divisor_rem) * 0x10000;\n      carry = divisor_rem;\n      if (quotient <= quotient2 && quotient2 - quotient != 0) {\n        carry_flag = CARRY4(divisor_combined,quotient);\n        quotient = divisor_combined + quotient;\n        carry = divisor_rem - 1;\n        if ((carry_flag == false) && (quotient <= quotient2 && quotient2 - quotient != 0)) {\n          carry = divisor_rem - 2;\n          quotient = quotient + divisor_combined;\n        }\n      }\n      quotient1 = (quotient - quotient2) / mul_temp1;\n      mul_remainder = quotient1 * (divisor_combined & 0xffff);\n      divisor_rem = dividend & 0xffff | ((quotient - quotient2) - mul_temp1 * quotient1) * 0x10000;\n      quotient = quotient1;\n      if (divisor_rem <= mul_remainder && mul_remainder - divisor_rem != 0) {\n        carry_flag = CARRY4(divisor_combined,divisor_rem);\n        divisor_rem = divisor_combined + divisor_rem;\n        quotient = quotient1 - 1;\n        if ((carry_flag == false) && (divisor_rem <= mul_remainder && mul_remainder - divisor_rem != 0)) {\n          quotient = quotient1 - 2;\n          divisor_rem = divisor_rem + divisor_combined;\n        }\n      }\n      quotient = quotient | carry << 0x10;\n      puVar9 = (uint *)0x0;\n      divisor_rem = divisor_rem - mul_remainder;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        table = (code *)software_udf(0xff,0x8001302);\n        result = (*table)();\n        return result;\n      }\n      shift_count = LZCOUNT(divisor);\n      if (shift_count == 0) {\n        puVar9 = (uint *)0x1;\n        dividend_high = dividend_high - divisor;\n        mul_temp1 = divisor >> 0x10;\n        quotient1 = divisor & 0xffff;\n        divisor_combined = divisor;\n      }\n      else {\n        divisor_combined = divisor << shift_count;\n        quotient = dividend_high >> (0x20U - shift_count & 0xff);\n        mul_temp1 = divisor_combined >> 0x10;\n        quotient2 = quotient / mul_temp1;\n        quotient1 = divisor_combined & 0xffff;\n        mul_remainder = quotient2 * quotient1;\n        divisor_rem = dividend >> (0x20U - shift_count & 0xff) | dividend_high << shift_count;\n        carry = divisor_rem >> 0x10 | (quotient - mul_temp1 * quotient2) * 0x10000;\n        dividend = dividend << shift_count;\n        quotient = quotient2;\n        if (carry <= mul_remainder && mul_remainder - carry != 0) {\n          carry_flag = CARRY4(divisor_combined,carry);\n          carry = divisor_combined + carry;\n          quotient = quotient2 - 1;\n          if ((carry_flag == false) && (carry <= mul_remainder && mul_remainder - carry != 0)) {\n            quotient = quotient2 - 2;\n            carry = carry + divisor_combined;\n          }\n        }\n        quotient2 = (carry - mul_remainder) / mul_temp1;\n        mul_temp2 = quotient2 * quotient1;\n        dividend_high = divisor_rem & 0xffff | ((carry - mul_remainder) - mul_temp1 * quotient2) * 0x10000;\n        carry = quotient2;\n        if (dividend_high <= mul_temp2 && mul_temp2 - dividend_high != 0) {\n          carry_flag = CARRY4(divisor_combined,dividend_high);\n          dividend_high = divisor_combined + dividend_high;\n          carry = quotient2 - 1;\n          if ((carry_flag == false) && (dividend_high <= mul_temp2 && mul_temp2 - dividend_high != 0)) {\n            carry = quotient2 - 2;\n            dividend_high = dividend_high + divisor_combined;\n          }\n        }\n        dividend_high = dividend_high - mul_temp2;\n        puVar9 = (uint *)(carry | quotient << 0x10);\n      }\n      quotient2 = dividend_high / mul_temp1;\n      quotient = quotient1 * quotient2;\n      divisor_rem = dividend >> 0x10 | (dividend_high - mul_temp1 * quotient2) * 0x10000;\n      carry = quotient2;\n      if (divisor_rem <= quotient && quotient - divisor_rem != 0) {\n        carry_flag = CARRY4(divisor_combined,divisor_rem);\n        divisor_rem = divisor_combined + divisor_rem;\n        carry = quotient2 - 1;\n        if ((carry_flag == false) && (divisor_rem <= quotient && quotient - divisor_rem != 0)) {\n          carry = quotient2 - 2;\n          divisor_rem = divisor_rem + divisor_combined;\n        }\n      }\n      quotient2 = (divisor_rem - quotient) / mul_temp1;\n      quotient1 = quotient1 * quotient2;\n      divisor_rem = dividend & 0xffff | ((divisor_rem - quotient) - mul_temp1 * quotient2) * 0x10000;\n      quotient = quotient2;\n      if (divisor_rem <= quotient1 && quotient1 - divisor_rem != 0) {\n        carry_flag = CARRY4(divisor_combined,divisor_rem);\n        divisor_rem = divisor_combined + divisor_rem;\n        quotient = quotient2 - 1;\n        if ((carry_flag == false) && (divisor_rem <= quotient1 && quotient1 - divisor_rem != 0)) {\n          quotient = quotient2 - 2;\n          divisor_rem = divisor_rem + divisor_combined;\n        }\n      }\n      divisor_rem = divisor_rem - quotient1;\n      quotient = quotient | carry << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = divisor_rem >> LZCOUNT(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else {\n    puVar9 = remainder;\n    if (dividend_high < divisor_high) {\n      if (remainder != (uint *)0x0) {\n        *remainder = dividend;\n        remainder[1] = dividend_high;\n        return 0;\n      }\n      quotient = 0;\n    }\n    else {\n      shift_count = LZCOUNT(divisor_high);\n      if (shift_count == 0) {\n        if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n          carry_flag = dividend < divisor;\n          dividend = dividend - divisor;\n          dividend_high = (dividend_high - divisor_high) - (uint)carry_flag;\n          quotient = 1;\n        }\n        else {\n          quotient = 0;\n        }\n        puVar9 = (uint *)0x0;\n        if (remainder != (uint *)0x0) {\n          *remainder = dividend;\n          remainder[1] = dividend_high;\n        }\n      }\n      else {\n        divisor_rem = 0x20 - shift_count;\n        quotient1 = divisor >> (divisor_rem & 0xff) | divisor_high << shift_count;\n        divisor_combined = dividend_high >> (divisor_rem & 0xff);\n        mul_remainder = quotient1 >> 0x10;\n        quotient2 = divisor_combined / mul_remainder;\n        mul_temp1 = quotient2 * (quotient1 & 0xffff);\n        quotient = dividend_high << shift_count | dividend >> (divisor_rem & 0xff);\n        carry = quotient >> 0x10 | (divisor_combined - mul_remainder * quotient2) * 0x10000;\n        dividend = dividend << shift_count;\n        divisor_combined = quotient2;\n        if (carry <= mul_temp1 && mul_temp1 - carry != 0) {\n          carry_flag = CARRY4(quotient1,carry);\n          carry = quotient1 + carry;\n          divisor_combined = quotient2 - 1;\n          if ((carry_flag == false) && (carry <= mul_temp1 && mul_temp1 - carry != 0)) {\n            divisor_combined = quotient2 - 2;\n            carry = carry + quotient1;\n          }\n        }\n        quotient2 = (carry - mul_temp1) / mul_remainder;\n        mul_temp2 = quotient2 * (quotient1 & 0xffff);\n        carry = quotient & 0xffff | ((carry - mul_temp1) - mul_remainder * quotient2) * 0x10000;\n        quotient = quotient2;\n        if (carry <= mul_temp2 && mul_temp2 - carry != 0) {\n          carry_flag = CARRY4(quotient1,carry);\n          carry = quotient1 + carry;\n          quotient = quotient2 - 1;\n          if ((carry_flag == false) && (carry <= mul_temp2 && mul_temp2 - carry != 0)) {\n            quotient = quotient2 - 2;\n            carry = carry + quotient1;\n          }\n        }\n        quotient = quotient | divisor_combined << 0x10;\n        mul_result = (ulonglong)quotient * (ulonglong)(divisor << shift_count);\n        if (CONCAT44(carry - mul_temp2,dividend) < mul_result) {\n          quotient = quotient - 1;\n          mul_result = mul_result - CONCAT44(quotient1,divisor << shift_count);\n        }\n        if (remainder != (uint *)0x0) {\n          divisor_combined = ((carry - mul_temp2) - (int)(mul_result >> 0x20)) - (uint)(dividend < (uint)mul_result);\n          *remainder = divisor_combined << (divisor_rem & 0xff) | dividend - (uint)mul_result >> shift_count;\n          remainder[1] = divisor_combined >> shift_count;\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,quotient);\n}\n\n",
            "renaming": {
                "FUN_0800121c": "perform_division_with_remainder_0800121c",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "remainder",
                "UNRECOVERED_JUMPTABLE": "table",
                "uVar1": "mul_result",
                "uVar2": "quotient1",
                "uVar3": "carry",
                "uVar4": "mul_remainder",
                "iVar5": "shift_count",
                "uVar6": "quotient",
                "uVar7": "divisor_combined",
                "uVar8": "divisor_rem",
                "uVar10": "quotient2",
                "uVar11": "mul_temp1",
                "uVar12": "mul_temp2",
                "bVar13": "carry_flag",
                "uVar14": "result"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ec": {
            "entrypoint": "0x080014ec",
            "current_name": "FUNC_080014ec",
            "code": "\nvoid FUNC_080014ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080014ec": "FUNC_080014ec"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080014f0": {
            "entrypoint": "0x080014f0",
            "current_name": "initialize_hardware_080014f0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nStatus initializeHardware_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  setInterruptPriorityGrouping(3);\n  initializeTick(0xf);\n  initializeMsp();\n  return OK;\n}\n\n",
            "renaming": {
                "FUN_080014f0": "initialize_hardware_080014f0",
                "HAL_StatusTypeDef": "Status",
                "HAL_NVIC_SetPriorityGrouping": "setInterruptPriorityGrouping",
                "HAL_InitTick": "initializeTick",
                "HAL_MspInit": "initializeMsp",
                "HAL_OK": "OK"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_MspInit",
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_InitTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800151c": {
            "entrypoint": "0x0800151c",
            "current_name": "configure_systick_0800151c",
            "code": "\nHAL_StatusTypeDef configureSystick_0800151c(uint32_t tickPriority)\n\n{\n  uint32_t systickConfigResult;\n  HAL_StatusTypeDef status;\n  uint32_t localTickPriority;\n  \n  systickConfigResult = HAL_SYSTICK_Config((uint32_t)((ulonglong)SystemCoreClock / (1000 / (ulonglong)uwTickFreq))\n                            );\n  if (systickConfigResult == 0) {\n    if (tickPriority < 0x10) {\n      HAL_NVIC_SetPriority(SysTick_IRQn,tickPriority,0);\n      status = HAL_OK;\n      uwTickPrio = tickPriority;\n    }\n    else {\n      status = HAL_ERROR;\n    }\n  }\n  else {\n    status = HAL_ERROR;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_0800151c": "configure_systick_0800151c",
                "TickPriority": "tickPriority",
                "uVar1": "systickConfigResult",
                "HVar2": "status",
                "TickPriority_local": "localTickPriority"
            },
            "calling": [
                "HAL_Init",
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "update_tick_0800157c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateTick_0800157c(void)\n\n{\n  currentTick = currentTick + tickFrequency;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "update_tick_0800157c",
                "uwTick": "currentTick",
                "uwTickFreq": "tickFrequency"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015a0": {
            "entrypoint": "0x080015a0",
            "current_name": "get_system_tick_080015a0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getSystemTick_080015a0(void)\n\n{\n  return systemTick;\n}\n\n",
            "renaming": {
                "FUN_080015a0": "get_system_tick_080015a0",
                "uwTick": "systemTick"
            },
            "calling": [
                "I2C_RequestMemoryRead",
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "HAL_I2C_Mem_Write",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "HAL_I2C_Mem_Read",
                "I2C_WaitOnBTFFlagUntilTimeout",
                "HAL_RCC_OscConfig",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_RequestMemoryWrite",
                "_get_ms_tick",
                "HAL_UART_Transmit",
                "HAL_RCC_ClockConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b4": {
            "entrypoint": "0x080015b4",
            "current_name": "set_priority_group_080015b4",
            "code": "\n\n\nvoid setPriorityGroup_080015b4(uint32_t priorityGroup)\n\n{\n  uint32_t localPriorityGroup;\n  uint32_t registerValue;\n  uint32_t temporaryPriorityGroup;\n  \n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (priorityGroup & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b4": "set_priority_group_080015b4",
                "PriorityGroup": "priorityGroup",
                "PriorityGroup_local": "localPriorityGroup",
                "reg_value": "registerValue",
                "PriorityGroupTmp": "temporaryPriorityGroup"
            },
            "calling": [
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015fc": {
            "entrypoint": "0x080015fc",
            "current_name": "get_bits_from_register_080015fc",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t get_bits_from_register_080015fc(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_080015fc": "get_bits_from_register_080015fc"
            },
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001618": {
            "entrypoint": "0x08001618",
            "current_name": "set_interrupt_priority_08001618",
            "code": "\nvoid setInterruptPriority_08001618(irqNumber_Type irqNumber,uint32_t priorityLevel)\n\n{\n  uint32_t localPriority;\n  irqNumber_Type localIRQn;\n  \n  if (irqNumber < WWDG_irqNumber) {\n    *(char *)(((byte)irqNumber & 0xf) + 0xe000ed14) = (char)((priorityLevel & 0xff) << 4);\n  }\n  else {\n    *(char *)(irqNumber + -0x1fff1c00) = (char)((priorityLevel & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001618": "set_interrupt_priority_08001618",
                "IRQn": "irqNumber",
                "priority": "priorityLevel",
                "priority_local": "localPriority",
                "IRQn_local": "localIRQn"
            },
            "calling": [
                "HAL_NVIC_SetPriority",
                "SysTick_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800166c": {
            "entrypoint": "0x0800166c",
            "current_name": "calculate_priority_0800166c",
            "code": "\nuint32_t calculatePriority_0800166c(uint32_t group,uint32_t preemptPriority,uint32_t subPriority)\n\n{\n  uint groupBits;\n  uint remainingBits;\n  uint32_t localSubPriority;\n  uint32_t localPreemptPriority;\n  uint32_t localPriorityGroup;\n  uint32_t subPriorityBits;\n  uint32_t preemptPriorityBits;\n  uint32_t priorityGroupTmp;\n  \n  groupBits = group & 7;\n  remainingBits = 7 - groupBits;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (groupBits + 4 < 7) {\n    groupBits = 0;\n  }\n  else {\n    groupBits = groupBits - 3;\n  }\n  return subPriority & ~(-1 << (groupBits & 0xff)) |\n         (~(-1 << (remainingBits & 0xff)) & preemptPriority) << (groupBits & 0xff);\n}\n\n",
            "renaming": {
                "FUN_0800166c": "calculate_priority_0800166c",
                "PriorityGroup": "group",
                "PreemptPriority": "preemptPriority",
                "SubPriority": "subPriority",
                "uVar1": "groupBits",
                "uVar2": "remainingBits",
                "SubPriority_local": "localSubPriority",
                "PreemptPriority_local": "localPreemptPriority",
                "PriorityGroup_local": "localPriorityGroup",
                "SubPriorityBits": "subPriorityBits",
                "PreemptPriorityBits": "preemptPriorityBits",
                "PriorityGroupTmp": "priorityGroupTmp"
            },
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016d0": {
            "entrypoint": "0x080016d0",
            "current_name": "check_and_configure_sys_tick_080016d0",
            "code": "\n\n\nuint32_t checkAndConfigureSysTick_080016d0(uint32_t ticks)\n\n{\n  bool isTicksValid;\n  uint32_t localTicks;\n  \n  isTicksValid = ticks - 1 < 0x1000000;\n  if (isTicksValid) {\n    _DAT_e000e014 = ticks - 1;\n    NVIC_SetPriority(SysTick_IRQn,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return (uint)!isTicksValid;\n}\n\n",
            "renaming": {
                "FUN_080016d0": "check_and_configure_sys_tick_080016d0",
                "bVar1": "isTicksValid",
                "ticks_local": "localTicks"
            },
            "calling": [
                "HAL_SYSTICK_Config"
            ],
            "called": [
                "NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001714": {
            "entrypoint": "0x08001714",
            "current_name": "set_nvic_priority_grouping_08001714",
            "code": "\nvoid setNVICPriorityGrouping_08001714(uint32_t priorityGroup)\n\n{\n  uint32_t localPriorityGroup;\n  \n  NVIC_SetpriorityGrouping(priorityGroup);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001714": "set_nvic_priority_grouping_08001714",
                "PriorityGroup": "priorityGroup",
                "PriorityGroup_local": "localPriorityGroup"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800172a": {
            "entrypoint": "0x0800172a",
            "current_name": "set_priority_and_encoding_0800172a",
            "code": "\nvoid setPriorityAndEncoding_0800172a(interruptNumber_Type interruptNumber,uint32_t preemptPriority,uint32_t subPriority)\n\n{\n  uint32_t priorityGrouping;\n  uint32_t localSubPriority;\n  uint32_t localPreemptPriority;\n  interruptNumber_Type localInterruptNumber;\n  uint32_t priorityGroup;\n  \n  priorityGrouping = NVIC_GetPriorityGrouping();\n  priorityGrouping = NVIC_EncodePriority(priorityGrouping,preemptPriority,subPriority);\n  NVIC_SetPriority(interruptNumber,priorityGrouping);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800172a": "set_priority_and_encoding_0800172a",
                "IRQn": "interruptNumber",
                "PreemptPriority": "preemptPriority",
                "SubPriority": "subPriority",
                "uVar1": "priorityGrouping",
                "SubPriority_local": "localSubPriority",
                "PreemptPriority_local": "localPreemptPriority",
                "IRQn_local": "localInterruptNumber",
                "prioritygroup": "priorityGroup"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [
                "NVIC_EncodePriority",
                "NVIC_GetPriorityGrouping",
                "NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001762": {
            "entrypoint": "0x08001762",
            "current_name": "initialize_sys_tick_08001762",
            "code": "\nuint32_t initializeSysTick_08001762(uint32_t ticksNumber)\n\n{\n  uint32_t result;\n  uint32_t localTicksNumber;\n  \n  result = SysTick_Config(ticksNumber);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001762": "initialize_sys_tick_08001762",
                "TicksNumb": "ticksNumber",
                "uVar1": "result",
                "TicksNumb_local": "localTicksNumber"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [
                "SysTick_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800177c": {
            "entrypoint": "0x0800177c",
            "current_name": "set_clock_source_0800177c",
            "code": "\n\n\nvoid setClockSource_0800177c(uint32_t source)\n\n{\n  uint32_t localSource;\n  \n  if (source == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800177c": "set_clock_source_0800177c",
                "CLKSource": "source",
                "CLKSource_local": "localSource"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017b4": {
            "entrypoint": "0x080017b4",
            "current_name": "handle_period_elapsed_callback_080017b4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handlePeriodElapsedCallback_080017b4(void)\n\n{\n  HAL_TIM_PeriodElapsedCallback((timerHandle *)0x0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080017b4": "handle_period_elapsed_callback_080017b4",
                "TIM_HandleTypeDef": "timerHandle"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017c4": {
            "entrypoint": "0x080017c4",
            "current_name": "configure_gpio_080017c4",
            "code": "\n\n\nvoid configureGPIO_080017c4(GPIO *GPIOx,GPIO_Config *GPIO_Init)\n\n{\n  uint bitMask;\n  uint pinCheck;\n  uint modeCheck;\n  GPIO *ptrGPIO;\n  int portIndex;\n  GPIO_Config *localGPIOConfig;\n  GPIO *localGPIO;\n  uint32_t tempRegister;\n  uint32_t *configRegister;\n  uint32_t registerOffset;\n  uint32_t temp;\n  uint32_t ioCurrent;\n  uint32_t ioPosition;\n  uint32_t config;\n  uint32_t position;\n  \n  config = 0;\n  position = 0;\n  do {\n    if (0xf < position) {\n      return;\n    }\n    bitMask = 1 << (position & 0xff);\n    pinCheck = GPIO_Init->Pin & bitMask;\n    if (pinCheck == bitMask) {\n      modeCheck = GPIO_Init->Mode;\n      if (modeCheck == 0x12) {\n        config = GPIO_Init->Speed + 0xc;\n      }\n      else if (modeCheck < 0x13) {\n        if (modeCheck == 2) {\n          config = GPIO_Init->Speed + 8;\n        }\n        else if (modeCheck < 3) {\n          if (modeCheck == 0) goto LAB_08001882;\n          if (modeCheck == 1) {\n            config = GPIO_Init->Speed;\n          }\n        }\n        else if (modeCheck == 3) {\n          config = 0;\n        }\n        else if (modeCheck == 0x11) {\n          config = GPIO_Init->Speed + 4;\n        }\n      }\n      else if (modeCheck == 0x10210000) {\nLAB_08001882:\n        if (GPIO_Init->Pull == 0) {\n          config = 4;\n        }\n        else if (GPIO_Init->Pull == 1) {\n          config = 8;\n          GPIOx->BSRR = bitMask;\n        }\n        else {\n          config = 8;\n          GPIOx->BRR = bitMask;\n        }\n      }\n      else if (modeCheck < 0x10210001) {\n        if ((modeCheck == 0x10110000) || (modeCheck == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((modeCheck == 0x10310000) || (modeCheck == 0x10320000)) || (modeCheck == 0x10220000))\n      goto LAB_08001882;\n      if (pinCheck < 0x100) {\n        bitMask = position << 2;\n        ptrGPIO = GPIOx;\n      }\n      else {\n        ptrGPIO = (GPIO *)&GPIOx->CRH;\n        bitMask = (position - 8) * 4;\n      }\n      ptrGPIO->CRL = ptrGPIO->CRL & ~(0xf << (bitMask & 0xff)) | config << (bitMask & 0xff);\n      if ((GPIO_Init->Mode & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (GPIOx == (GPIO *)0x40010800) {\n          portIndex = 0;\n        }\n        else if (GPIOx == (GPIO *)0x40010c00) {\n          portIndex = 1;\n        }\n        else if (GPIOx == (GPIO *)0x40011000) {\n          portIndex = 2;\n        }\n        else if (GPIOx == (GPIO *)0x40011400) {\n          portIndex = 3;\n        }\n        else {\n          portIndex = 4;\n        }\n        *(uint *)(((position >> 2) + 2) * 4 + 0x40010000) =\n             portIndex << ((position & 3) << 2) |\n             ~(0xf << ((position & 3) << 2)) & *(uint *)(((position >> 2) + 2) * 4 + 0x40010000);\n        if ((GPIO_Init->Mode & 0x10000) == 0) {\n          _DAT_40010400 = ~pinCheck & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = pinCheck | _DAT_40010400;\n        }\n        if ((GPIO_Init->Mode & 0x20000) == 0) {\n          _DAT_40010404 = ~pinCheck & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = pinCheck | _DAT_40010404;\n        }\n        if ((GPIO_Init->Mode & 0x100000) == 0) {\n          _DAT_40010408 = ~pinCheck & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = pinCheck | _DAT_40010408;\n        }\n        if ((GPIO_Init->Mode & 0x200000) == 0) {\n          _DAT_4001040c = ~pinCheck & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = pinCheck | _DAT_4001040c;\n        }\n      }\n    }\n    position = position + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080017c4": "configure_gpio_080017c4",
                "GPIO_TypeDef": "GPIO",
                "GPIO_InitTypeDef": "GPIO_Config",
                "uVar1": "bitMask",
                "uVar2": "pinCheck",
                "uVar3": "modeCheck",
                "pGVar4": "ptrGPIO",
                "iVar5": "portIndex",
                "GPIO_Init_local": "localGPIOConfig",
                "GPIOx_local": "localGPIO",
                "tmpreg": "tempRegister",
                "configregister": "configRegister",
                "registeroffset": "registerOffset",
                "iocurrent": "ioCurrent",
                "ioposition": "ioPosition"
            },
            "calling": [
                "MX_GPIO_Init",
                "HAL_TIM_MspPostInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a80": {
            "entrypoint": "0x08001a80",
            "current_name": "set_gpio_pin_08001a80",
            "code": "\nvoid set_GPIO_Pin_08001a80(GPIO_TypeDef *GPIO_port,uint16_t pin_number,pin_numberState pin_state)\n\n{\n  pin_numberState local_pin_state;\n  uint16_t local_pin_number;\n  GPIO_TypeDef *local_GPIO_port;\n  \n  if (pin_state == GPIO_PIN_RESET) {\n    GPIO_port->BSRR = (uint)pin_number << 0x10;\n  }\n  else {\n    GPIO_port->BSRR = (uint)pin_number;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a80": "set_gpio_pin_08001a80",
                "GPIOx": "GPIO_port",
                "GPIO_Pin": "pin_number",
                "PinState": "pin_state",
                "PinState_local": "local_pin_state",
                "GPIO_Pin_local": "local_pin_number",
                "GPIOx_local": "local_GPIO_port"
            },
            "calling": [
                "MX_GPIO_Init",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "initialize_i2_c_08001ab0",
            "code": "\nHAL_StatusTypeDef initializeI2C_08001ab0(I2C_HandleTypeDef *i2cHandle)\n\n{\n  uint32_t pclk1Freq;\n  char isHighSpeedClock;\n  HAL_StatusTypeDef status;\n  uint32_t pclk1;\n  uint riseTime;\n  bool isZero;\n  I2C_HandleTypeDef *localI2CHandle;\n  uint32_t pclk1;\n  uint32_t freqRange;\n  \n  if (i2cHandle == (I2C_HandleTypeDef *)0x0) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (i2cHandle->State == HAL_I2C_STATE_RESET) {\n      i2cHandle->Lock = HAL_UNLOCKED;\n      HAL_I2C_MspInit(i2cHandle);\n    }\n    i2cHandle->State = HAL_I2C_STATE_BUSY;\n    i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffffe;\n    pclk1Freq = HAL_RCC_GetPCLK1Freq();\n    if ((i2cHandle->Init).ClockSpeed < 0x186a1) {\n      pclk1 = pclk1Freq;\n      if (pclk1Freq < 2000000) {\n        pclk1 = 1;\n      }\n      isHighSpeedClock = (char)pclk1;\n      if (1999999 < pclk1Freq) {\n        isHighSpeedClock = '\\0';\n      }\n    }\n    else {\n      pclk1 = pclk1Freq;\n      if (pclk1Freq < 4000000) {\n        pclk1 = 1;\n      }\n      isHighSpeedClock = (char)pclk1;\n      if (3999999 < pclk1Freq) {\n        isHighSpeedClock = '\\0';\n      }\n    }\n    if (isHighSpeedClock == '\\0') {\n      riseTime = pclk1Freq / 1000000;\n      i2cHandle->Instance->CR2 = riseTime;\n      if (100000 < (i2cHandle->Init).ClockSpeed) {\n        riseTime = (riseTime * 300) / 1000;\n      }\n      i2cHandle->Instance->TRISE = riseTime + 1;\n      if ((i2cHandle->Init).ClockSpeed < 0x186a1) {\n        pclk1Freq = (pclk1Freq - 1) / ((i2cHandle->Init).ClockSpeed << 1) + 1 & 0xfff;\n        if (pclk1Freq < 4) {\n          pclk1Freq = 4;\n        }\n      }\n      else {\n        if ((i2cHandle->Init).DutyCycle == 0) {\n          riseTime = (pclk1Freq - 1) / ((i2cHandle->Init).ClockSpeed * 3) + 1 & 0xfff;\n          isZero = riseTime == 0;\n          if (isZero) {\n            riseTime = 1;\n          }\n          isHighSpeedClock = (char)riseTime;\n          if (!isZero) {\n            isHighSpeedClock = '\\0';\n          }\n        }\n        else {\n          riseTime = (pclk1Freq - 1) / ((i2cHandle->Init).ClockSpeed * 0x19) + 1 & 0xfff;\n          isZero = riseTime == 0;\n          if (isZero) {\n            riseTime = 1;\n          }\n          isHighSpeedClock = (char)riseTime;\n          if (!isZero) {\n            isHighSpeedClock = '\\0';\n          }\n        }\n        if (isHighSpeedClock == '\\0') {\n          if ((i2cHandle->Init).DutyCycle == 0) {\n            pclk1Freq = (pclk1Freq - 1) / ((i2cHandle->Init).ClockSpeed * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            pclk1Freq = (pclk1Freq - 1) / ((i2cHandle->Init).ClockSpeed * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          pclk1Freq = 1;\n        }\n      }\n      i2cHandle->Instance->CCR = pclk1Freq;\n      i2cHandle->Instance->CR1 = (i2cHandle->Init).NoStretchMode | (i2cHandle->Init).GeneralCallMode;\n      i2cHandle->Instance->OAR1 = (i2cHandle->Init).OwnAddress1 | (i2cHandle->Init).AddressingMode;\n      i2cHandle->Instance->OAR2 = (i2cHandle->Init).OwnAddress2 | (i2cHandle->Init).DualAddressMode;\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 1;\n      i2cHandle->ErrorCode = 0;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      i2cHandle->PreviousState = 0;\n      i2cHandle->Mode = HAL_I2C_MODE_NONE;\n      status = HAL_OK;\n    }\n    else {\n      status = HAL_ERROR;\n    }\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "initialize_i2_c_08001ab0",
                "hi2c": "i2cHandle",
                "uVar1": "pclk1Freq",
                "cVar2": "isHighSpeedClock",
                "HVar3": "status",
                "uVar4": "pclk1",
                "uVar5": "riseTime",
                "bVar6": "isZero",
                "hi2c_local": "localI2CHandle",
                "freqrange": "freqRange"
            },
            "calling": [
                "MX_I2C1_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "entrypoint": "0x08001cb8",
            "current_name": "initialize_i2_c_08001cb8",
            "code": "\nvoid initializeI2C_08001cb8(I2C_HandleTypeDef *i2cHandle)\n\n{\n  I2C_HandleTypeDef *localI2CHandle;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cb8": "initialize_i2_c_08001cb8",
                "hi2c": "i2cHandle",
                "hi2c_local": "localI2CHandle"
            },
            "calling": [
                "HAL_I2C_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ccc": {
            "entrypoint": "0x08001ccc",
            "current_name": "perform_memory_write_08001ccc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nHAL_StatusTypeDef\nperformMemoryWrite_08001ccc(I2C_HandleTypeDef *i2cHandle,uint16_t deviceAddress,uint16_t memoryAddress,uint16_t memoryAddressSize,\n            uint8_t *data,uint16_t dataSize,uint32_t timeout)\n\n{\n  HAL_StatusTypeDef status;\n  uint32_t tickStart;\n  uint32_t currentTick;\n  int errorCount;\n  byte *bytePointer;\n  uint16_t memoryAddressSize_local;\n  uint16_t memoryAddress_local;\n  uint16_t deviceAddress_local;\n  I2C_HandleTypeDef *i2cHandle_local;\n  uint32_t startTime;\n  \n  tickStart = HAL_GetTick();\n  if (i2cHandle->State == HAL_I2C_STATE_READY) {\n    do {\n      if ((~i2cHandle->Instance->SR2 & 2) != 0) {\n        errorCount = 0;\n        goto LAB_08001d9c;\n      }\n      currentTick = HAL_GetTick();\n    } while (currentTick - tickStart < 0x1a);\n    i2cHandle->PreviousState = 0;\n    i2cHandle->State = HAL_I2C_STATE_READY;\n    i2cHandle->Mode = HAL_I2C_MODE_NONE;\n    i2cHandle->Lock = HAL_UNLOCKED;\n    errorCount = 3;\nLAB_08001d9c:\n    if (errorCount == 0) {\n      if (i2cHandle->Lock == HAL_LOCKED) {\n        status = HAL_BUSY;\n      }\n      else {\n        i2cHandle->Lock = HAL_LOCKED;\n        if ((i2cHandle->Instance->CR1 & 1) != 1) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 1;\n        }\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffff7ff;\n        i2cHandle->State = HAL_I2C_STATE_BUSY_TX;\n        i2cHandle->Mode = HAL_I2C_MODE_MEM;\n        i2cHandle->ErrorCode = 0;\n        i2cHandle->pBuffPtr = data;\n        i2cHandle->XferCount = dataSize;\n        i2cHandle->XferOptions = 0xffff0000;\n        i2cHandle->XferdataSize = i2cHandle->XferCount;\n        status = I2C_RequestMemoryWrite(i2cHandle,deviceAddress,memoryAddress,memoryAddressSize,timeout,tickStart);\n        if (status == HAL_OK) {\n          while (i2cHandle->XferdataSize != 0) {\n            status = I2C_WaitOnTXEFlagUntiltimeout(i2cHandle,timeout,tickStart);\n            if (status != HAL_OK) {\n              if (i2cHandle->ErrorCode == 4) {\n                i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n                return HAL_ERROR;\n              }\n              return HAL_TIMEOUT;\n            }\n            bytePointer = i2cHandle->pBuffPtr;\n            i2cHandle->pBuffPtr = bytePointer + 1;\n            i2cHandle->Instance->DR = (uint)*bytePointer;\n            i2cHandle->XferdataSize = i2cHandle->XferdataSize - 1;\n            i2cHandle->XferCount = i2cHandle->XferCount - 1;\n            if (((i2cHandle->Instance->SR1 & 4) == 4) && (i2cHandle->XferdataSize != 0)) {\n              bytePointer = i2cHandle->pBuffPtr;\n              i2cHandle->pBuffPtr = bytePointer + 1;\n              i2cHandle->Instance->DR = (uint)*bytePointer;\n              i2cHandle->XferdataSize = i2cHandle->XferdataSize - 1;\n              i2cHandle->XferCount = i2cHandle->XferCount - 1;\n            }\n          }\n          status = I2C_WaitOnBTFFlagUntiltimeout(i2cHandle,timeout,tickStart);\n          if (status == HAL_OK) {\n            i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n            i2cHandle->State = HAL_I2C_STATE_READY;\n            i2cHandle->Mode = HAL_I2C_MODE_NONE;\n            i2cHandle->Lock = HAL_UNLOCKED;\n            status = HAL_OK;\n          }\n          else if (i2cHandle->ErrorCode == 4) {\n            i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n            status = HAL_ERROR;\n          }\n          else {\n            status = HAL_TIMEOUT;\n          }\n        }\n        else if (i2cHandle->ErrorCode == 4) {\n          i2cHandle->Lock = HAL_UNLOCKED;\n          status = HAL_ERROR;\n        }\n        else {\n          i2cHandle->Lock = HAL_UNLOCKED;\n          status = HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      status = HAL_BUSY;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08001ccc": "perform_memory_write_08001ccc",
                "hi2c": "i2cHandle",
                "DevAddress": "deviceAddress",
                "MemAddress": "memoryAddress",
                "MemAddSize": "memoryAddressSize",
                "pData": "data",
                "Size": "dataSize",
                "Timeout": "timeout",
                "HVar1": "status",
                "Tickstart": "tickStart",
                "uVar2": "currentTick",
                "iVar3": "errorCount",
                "pbVar4": "bytePointer",
                "MemAddSize_local": "memoryAddressSize_local",
                "MemAddress_local": "memoryAddress_local",
                "DevAddress_local": "deviceAddress_local",
                "hi2c_local": "i2cHandle_local",
                "tickstart": "startTime"
            },
            "calling": [
                "_i2c_write_reg"
            ],
            "called": [
                "I2C_WaitOnBTFFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_RequestMemoryWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "entrypoint": "0x08001f6c",
            "current_name": "read_from_i2_c_device_memory_08001f6c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nHAL_StatusTypeDef\nreadFromI2CDeviceMemory_08001f6c(I2C_HandleTypeDef *i2cHandle,uint16_t deviceAddress,uint16_t memoryAddress,uint16_t memoryAddressSize,\n            uint8_t *data,uint16_t dataSize,uint32_t timeout)\n\n{\n  HAL_StatusTypeDef status;\n  uint32_t tickStart;\n  uint32_t currentTick;\n  int loopVariable;\n  uint8_t *dataPointer;\n  uint16_t localMemoryAddressSize;\n  uint16_t localMemoryAddress;\n  uint16_t localDeviceAddress;\n  I2C_HandleTypeDef *localI2CHandle;\n  uint32_t tempRegister3;\n  uint32_t tempRegister2;\n  uint32_t tempRegister1;\n  uint32_t tempRegister;\n  uint32_t tickStart;\n  \n  tickStart = HAL_GetTick();\n  if (i2cHandle->State == HAL_I2C_STATE_READY) {\n    do {\n      if ((~i2cHandle->Instance->SR2 & 2) != 0) {\n        loopVariable = 0;\n        goto LAB_08002040;\n      }\n      currentTick = HAL_GetTick();\n    } while (currentTick - tickStart < 0x1a);\n    i2cHandle->PreviousState = 0;\n    i2cHandle->State = HAL_I2C_STATE_READY;\n    i2cHandle->Mode = HAL_I2C_MODE_NONE;\n    i2cHandle->Lock = HAL_UNLOCKED;\n    loopVariable = 3;\nLAB_08002040:\n    if (loopVariable == 0) {\n      if (i2cHandle->Lock == HAL_LOCKED) {\n        status = HAL_BUSY;\n      }\n      else {\n        i2cHandle->Lock = HAL_LOCKED;\n        if ((i2cHandle->Instance->CR1 & 1) != 1) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 1;\n        }\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffff7ff;\n        i2cHandle->State = HAL_I2C_STATE_BUSY_RX;\n        i2cHandle->Mode = HAL_I2C_MODE_MEM;\n        i2cHandle->ErrorCode = 0;\n        i2cHandle->pBuffPtr = data;\n        i2cHandle->XferCount = dataSize;\n        i2cHandle->XferOptions = 0xffff0000;\n        i2cHandle->XferdataSize = i2cHandle->XferCount;\n        status = I2C_RequestMemoryRead(i2cHandle,deviceAddress,memoryAddress,memoryAddressSize,timeout,tickStart);\n        if (status == HAL_OK) {\n          if (i2cHandle->XferdataSize == 0) {\n            i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n          }\n          else if (i2cHandle->XferdataSize == 1) {\n            i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n            disableIRQinterrupts();\n            i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (i2cHandle->XferdataSize == 2) {\n            i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x800;\n            disableIRQinterrupts();\n            i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n          }\n          while (i2cHandle->XferdataSize != 0) {\n            if (i2cHandle->XferdataSize < 4) {\n              if (i2cHandle->XferdataSize == 1) {\n                status = I2C_WaitOnRXNEFlagUntiltimeout(i2cHandle,timeout,tickStart);\n                if (status != HAL_OK) {\n                  if (i2cHandle->ErrorCode == 0x20) {\n                    return HAL_TIMEOUT;\n                  }\n                  return HAL_ERROR;\n                }\n                currentTick = i2cHandle->Instance->DR;\n                dataPointer = i2cHandle->pBuffPtr;\n                i2cHandle->pBuffPtr = dataPointer + 1;\n                *dataPointer = (uint8_t)currentTick;\n                i2cHandle->XferdataSize = i2cHandle->XferdataSize - 1;\n                i2cHandle->XferCount = i2cHandle->XferCount - 1;\n              }\n              else if (i2cHandle->XferdataSize == 2) {\n                do {\n                  if ((~i2cHandle->Instance->SR1 & 4) == 0) {\n                    loopVariable = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((timeout == 0xffffffff) ||\n                        ((timeout != 0 && (currentTick = HAL_GetTick(), currentTick - tickStart <= timeout))));\n                i2cHandle->PreviousState = 0;\n                i2cHandle->State = HAL_I2C_STATE_READY;\n                i2cHandle->Mode = HAL_I2C_MODE_NONE;\n                i2cHandle->Lock = HAL_UNLOCKED;\n                loopVariable = 3;\nLAB_080022fa:\n                if (loopVariable != 0) {\n                  return HAL_TIMEOUT;\n                }\n                disableIRQinterrupts();\n                i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n                currentTick = i2cHandle->Instance->DR;\n                dataPointer = i2cHandle->pBuffPtr;\n                i2cHandle->pBuffPtr = dataPointer + 1;\n                *dataPointer = (uint8_t)currentTick;\n                i2cHandle->XferdataSize = i2cHandle->XferdataSize - 1;\n                i2cHandle->XferCount = i2cHandle->XferCount - 1;\n                enableIRQinterrupts();\n                currentTick = i2cHandle->Instance->DR;\n                dataPointer = i2cHandle->pBuffPtr;\n                i2cHandle->pBuffPtr = dataPointer + 1;\n                *dataPointer = (uint8_t)currentTick;\n                i2cHandle->XferdataSize = i2cHandle->XferdataSize - 1;\n                i2cHandle->XferCount = i2cHandle->XferCount - 1;\n              }\n              else {\n                do {\n                  if ((~i2cHandle->Instance->SR1 & 4) == 0) {\n                    loopVariable = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((timeout == 0xffffffff) ||\n                        ((timeout != 0 && (currentTick = HAL_GetTick(), currentTick - tickStart <= timeout))));\n                i2cHandle->PreviousState = 0;\n                i2cHandle->State = HAL_I2C_STATE_READY;\n                i2cHandle->Mode = HAL_I2C_MODE_NONE;\n                i2cHandle->Lock = HAL_UNLOCKED;\n                loopVariable = 3;\nLAB_08002418:\n                if (loopVariable != 0) {\n                  return HAL_TIMEOUT;\n                }\n                i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n                disableIRQinterrupts();\n                currentTick = i2cHandle->Instance->DR;\n                dataPointer = i2cHandle->pBuffPtr;\n                i2cHandle->pBuffPtr = dataPointer + 1;\n                *dataPointer = (uint8_t)currentTick;\n                i2cHandle->XferdataSize = i2cHandle->XferdataSize - 1;\n                i2cHandle->XferCount = i2cHandle->XferCount - 1;\n                do {\n                  if ((~i2cHandle->Instance->SR1 & 4) == 0) {\n                    loopVariable = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((timeout == 0xffffffff) ||\n                        ((timeout != 0 && (currentTick = HAL_GetTick(), currentTick - tickStart <= timeout))));\n                i2cHandle->PreviousState = 0;\n                i2cHandle->State = HAL_I2C_STATE_READY;\n                i2cHandle->Mode = HAL_I2C_MODE_NONE;\n                i2cHandle->Lock = HAL_UNLOCKED;\n                loopVariable = 3;\nLAB_0800250a:\n                if (loopVariable != 0) {\n                  return HAL_TIMEOUT;\n                }\n                i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n                currentTick = i2cHandle->Instance->DR;\n                dataPointer = i2cHandle->pBuffPtr;\n                i2cHandle->pBuffPtr = dataPointer + 1;\n                *dataPointer = (uint8_t)currentTick;\n                i2cHandle->XferdataSize = i2cHandle->XferdataSize - 1;\n                i2cHandle->XferCount = i2cHandle->XferCount - 1;\n                enableIRQinterrupts();\n                currentTick = i2cHandle->Instance->DR;\n                dataPointer = i2cHandle->pBuffPtr;\n                i2cHandle->pBuffPtr = dataPointer + 1;\n                *dataPointer = (uint8_t)currentTick;\n                i2cHandle->XferdataSize = i2cHandle->XferdataSize - 1;\n                i2cHandle->XferCount = i2cHandle->XferCount - 1;\n              }\n            }\n            else {\n              status = I2C_WaitOnRXNEFlagUntiltimeout(i2cHandle,timeout,tickStart);\n              if (status != HAL_OK) {\n                if (i2cHandle->ErrorCode == 0x20) {\n                  return HAL_TIMEOUT;\n                }\n                return HAL_ERROR;\n              }\n              currentTick = i2cHandle->Instance->DR;\n              dataPointer = i2cHandle->pBuffPtr;\n              i2cHandle->pBuffPtr = dataPointer + 1;\n              *dataPointer = (uint8_t)currentTick;\n              i2cHandle->XferdataSize = i2cHandle->XferdataSize - 1;\n              i2cHandle->XferCount = i2cHandle->XferCount - 1;\n              if ((i2cHandle->Instance->SR1 & 4) == 4) {\n                currentTick = i2cHandle->Instance->DR;\n                dataPointer = i2cHandle->pBuffPtr;\n                i2cHandle->pBuffPtr = dataPointer + 1;\n                *dataPointer = (uint8_t)currentTick;\n                i2cHandle->XferdataSize = i2cHandle->XferdataSize - 1;\n                i2cHandle->XferCount = i2cHandle->XferCount - 1;\n              }\n            }\n          }\n          i2cHandle->State = HAL_I2C_STATE_READY;\n          i2cHandle->Mode = HAL_I2C_MODE_NONE;\n          i2cHandle->Lock = HAL_UNLOCKED;\n          status = HAL_OK;\n        }\n        else if (i2cHandle->ErrorCode == 4) {\n          i2cHandle->Lock = HAL_UNLOCKED;\n          status = HAL_ERROR;\n        }\n        else {\n          i2cHandle->Lock = HAL_UNLOCKED;\n          status = HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      status = HAL_BUSY;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08001f6c": "read_from_i2_c_device_memory_08001f6c",
                "hi2c": "i2cHandle",
                "DevAddress": "deviceAddress",
                "MemAddress": "memoryAddress",
                "MemAddSize": "memoryAddressSize",
                "pData": "data",
                "Size": "dataSize",
                "Timeout": "timeout",
                "HVar1": "status",
                "Tickstart": "tickStart",
                "uVar2": "currentTick",
                "iVar3": "loopVariable",
                "puVar4": "dataPointer",
                "MemAddSize_local": "localMemoryAddressSize",
                "MemAddress_local": "localMemoryAddress",
                "DevAddress_local": "localDeviceAddress",
                "hi2c_local": "localI2CHandle",
                "tmpreg_3": "tempRegister3",
                "tmpreg_2": "tempRegister2",
                "tmpreg_1": "tempRegister1",
                "tmpreg": "tempRegister",
                "tickstart": "tickStart"
            },
            "calling": [
                "_i2c_read_reg"
            ],
            "called": [
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "I2C_RequestMemoryRead",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002640": {
            "entrypoint": "0x08002640",
            "current_name": "perform_i2_c_transaction_08002640",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nHAL_StatusTypeDef\nperformI2CTransaction_08002640(I2C_HandleTypeDef *i2cHandle,uint16_t deviceAddress,uint16_t memoryAddress,uint16_t memoryAddressSize,\n            uint32_t timeout,uint32_t tickStart)\n\n{\n  HAL_StatusTypeDef status;\n  uint32_t currentTick;\n  int loopCounter;\n  uint16_t memoryAddressSize_local;\n  uint16_t memoryAddress_local;\n  uint16_t deviceAddress_local;\n  I2C_HandleTypeDef *i2cHandle_local;\n  uint32_t temporaryRegister;\n  \n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x100;\n  do {\n    if ((~i2cHandle->Instance->SR1 & 1) == 0) {\n      loopCounter = 0;\n      goto LAB_0800270a;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currentTick = HAL_GetTick(), currentTick - tickStart <= timeout))));\n  i2cHandle->PreviousState = 0;\n  i2cHandle->State = HAL_I2C_STATE_READY;\n  i2cHandle->Mode = HAL_I2C_MODE_NONE;\n  i2cHandle->Lock = HAL_UNLOCKED;\n  loopCounter = 3;\nLAB_0800270a:\n  if (loopCounter == 0) {\n    i2cHandle->Instance->DR = (byte)deviceAddress & 0xfe;\n    status = I2C_WaitOnMasterAddressFlagUntiltimeout(i2cHandle,0x10002,timeout,tickStart);\n    if (status == HAL_OK) {\n      status = I2C_WaitOnTXEFlagUntiltimeout(i2cHandle,timeout,tickStart);\n      if (status == HAL_OK) {\n        if (memoryAddressSize == 1) {\n          i2cHandle->Instance->DR = (uint)(byte)memoryAddress;\n        }\n        else {\n          i2cHandle->Instance->DR = (uint)(byte)(memoryAddress >> 8);\n          status = I2C_WaitOnTXEFlagUntiltimeout(i2cHandle,timeout,tickStart);\n          if (status != HAL_OK) {\n            if (i2cHandle->ErrorCode == 4) {\n              i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n              return HAL_ERROR;\n            }\n            return HAL_TIMEOUT;\n          }\n          i2cHandle->Instance->DR = (uint)(byte)memoryAddress;\n        }\n        status = HAL_OK;\n      }\n      else if (i2cHandle->ErrorCode == 4) {\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n        status = HAL_ERROR;\n      }\n      else {\n        status = HAL_TIMEOUT;\n      }\n    }\n    else if (i2cHandle->ErrorCode == 4) {\n      status = HAL_ERROR;\n    }\n    else {\n      status = HAL_TIMEOUT;\n    }\n  }\n  else {\n    status = HAL_TIMEOUT;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08002640": "perform_i2_c_transaction_08002640",
                "hi2c": "i2cHandle",
                "DevAddress": "deviceAddress",
                "MemAddress": "memoryAddress",
                "MemAddSize": "memoryAddressSize",
                "Timeout": "timeout",
                "Tickstart": "tickStart",
                "HVar1": "status",
                "uVar2": "currentTick",
                "iVar3": "loopCounter",
                "MemAddSize_local": "memoryAddressSize_local",
                "MemAddress_local": "memoryAddress_local",
                "DevAddress_local": "deviceAddress_local",
                "hi2c_local": "i2cHandle_local",
                "tmpreg": "temporaryRegister"
            },
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "called": [
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f4": {
            "entrypoint": "0x080027f4",
            "current_name": "read_i2_c_data_080027f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nHAL_StatusTypeDef\nreadI2CData_080027f4(I2C_HandleTypeDef *i2cHandle,uint16_t deviceAddress,uint16_t memoryAddress,uint16_t memoryAddressSize,\n            uint32_t timeout,uint32_t startTick)\n\n{\n  HAL_StatusTypeDef status;\n  uint32_t elapsedTicks;\n  int loopCounter;\n  uint16_t localMemoryAddressSize;\n  uint16_t localMemoryAddress;\n  uint16_t localDeviceAddress;\n  I2C_HandleTypeDef *localI2CHandle;\n  uint32_t tempRegister;\n  \n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x100;\n  do {\n    if ((~i2cHandle->Instance->SR1 & 1) == 0) {\n      loopCounter = 0;\n      goto LAB_080028d2;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (elapsedTicks = HAL_GetTick(), elapsedTicks - startTick <= timeout))));\n  i2cHandle->PreviousState = 0;\n  i2cHandle->State = HAL_I2C_STATE_READY;\n  i2cHandle->Mode = HAL_I2C_MODE_NONE;\n  i2cHandle->Lock = HAL_UNLOCKED;\n  loopCounter = 3;\nLAB_080028d2:\n  if (loopCounter == 0) {\n    i2cHandle->Instance->DR = (byte)deviceAddress & 0xfe;\n    status = I2C_WaitOnMasterAddressFlagUntiltimeout(i2cHandle,0x10002,timeout,startTick);\n    if (status == HAL_OK) {\n      status = I2C_WaitOnTXEFlagUntiltimeout(i2cHandle,timeout,startTick);\n      if (status == HAL_OK) {\n        if (memoryAddressSize == 1) {\n          i2cHandle->Instance->DR = (uint)(byte)memoryAddress;\n        }\n        else {\n          i2cHandle->Instance->DR = (uint)(byte)(memoryAddress >> 8);\n          status = I2C_WaitOnTXEFlagUntiltimeout(i2cHandle,timeout,startTick);\n          if (status != HAL_OK) {\n            if (i2cHandle->ErrorCode == 4) {\n              i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n              return HAL_ERROR;\n            }\n            return HAL_TIMEOUT;\n          }\n          i2cHandle->Instance->DR = (uint)(byte)memoryAddress;\n        }\n        status = I2C_WaitOnTXEFlagUntiltimeout(i2cHandle,timeout,startTick);\n        if (status == HAL_OK) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x100;\n          do {\n            if ((~i2cHandle->Instance->SR1 & 1) == 0) {\n              loopCounter = 0;\n              goto LAB_08002a90;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (elapsedTicks = HAL_GetTick(), elapsedTicks - startTick <= timeout))));\n          i2cHandle->PreviousState = 0;\n          i2cHandle->State = HAL_I2C_STATE_READY;\n          i2cHandle->Mode = HAL_I2C_MODE_NONE;\n          i2cHandle->Lock = HAL_UNLOCKED;\n          loopCounter = 3;\nLAB_08002a90:\n          if (loopCounter == 0) {\n            i2cHandle->Instance->DR = (uint)(byte)((byte)deviceAddress | 1);\n            status = I2C_WaitOnMasterAddressFlagUntiltimeout(i2cHandle,0x10002,timeout,startTick);\n            if (status == HAL_OK) {\n              status = HAL_OK;\n            }\n            else if (i2cHandle->ErrorCode == 4) {\n              status = HAL_ERROR;\n            }\n            else {\n              status = HAL_TIMEOUT;\n            }\n          }\n          else {\n            status = HAL_TIMEOUT;\n          }\n        }\n        else if (i2cHandle->ErrorCode == 4) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n          status = HAL_ERROR;\n        }\n        else {\n          status = HAL_TIMEOUT;\n        }\n      }\n      else if (i2cHandle->ErrorCode == 4) {\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n        status = HAL_ERROR;\n      }\n      else {\n        status = HAL_TIMEOUT;\n      }\n    }\n    else if (i2cHandle->ErrorCode == 4) {\n      status = HAL_ERROR;\n    }\n    else {\n      status = HAL_TIMEOUT;\n    }\n  }\n  else {\n    status = HAL_TIMEOUT;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080027f4": "read_i2_c_data_080027f4",
                "hi2c": "i2cHandle",
                "DevAddress": "deviceAddress",
                "MemAddress": "memoryAddress",
                "MemAddSize": "memoryAddressSize",
                "Timeout": "timeout",
                "Tickstart": "startTick",
                "HVar1": "status",
                "uVar2": "elapsedTicks",
                "iVar3": "loopCounter",
                "MemAddSize_local": "localMemoryAddressSize",
                "MemAddress_local": "localMemoryAddress",
                "DevAddress_local": "localDeviceAddress",
                "hi2c_local": "localI2CHandle",
                "tmpreg": "tempRegister"
            },
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "called": [
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "check_i2_c_status_08002ad8",
            "code": "\nHAL_StatusTypeDef\ncheckI2CStatus_08002ad8(I2C_HandleTypeDef *i2cHandle,uint32_t statusFlag,uint32_t timeout,uint32_t tickStart)\n\n{\n  uint32_t tickDifference;\n  char isFlagSet;\n  uint maskedFlag;\n  bool isFlagNonZero;\n  uint32_t localTickStart;\n  uint32_t localTimeout;\n  uint32_t localStatusFlag;\n  I2C_HandleTypeDef *localI2CHandle;\n  \n  do {\n    if ((statusFlag >> 0x10 & 0xff) == 1) {\n      maskedFlag = statusFlag & ~i2cHandle->Instance->SR1 & 0xffff;\n      isFlagNonZero = maskedFlag != 0;\n      if (isFlagNonZero) {\n        maskedFlag = 1;\n      }\n      isFlagSet = (char)maskedFlag;\n      if (!isFlagNonZero) {\n        isFlagSet = '\\0';\n      }\n    }\n    else {\n      maskedFlag = statusFlag & ~i2cHandle->Instance->SR2 & 0xffff;\n      isFlagNonZero = maskedFlag != 0;\n      if (isFlagNonZero) {\n        maskedFlag = 1;\n      }\n      isFlagSet = (char)maskedFlag;\n      if (!isFlagNonZero) {\n        isFlagSet = '\\0';\n      }\n    }\n    if (isFlagSet == '\\0') {\n      return HAL_OK;\n    }\n    if ((i2cHandle->Instance->SR1 & 0x400) == 0x400) {\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n      i2cHandle->Instance->SR1 = 0xfffffbff;\n      i2cHandle->ErrorCode = 4;\n      i2cHandle->PreviousState = 0;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      i2cHandle->Lock = HAL_UNLOCKED;\n      return HAL_ERROR;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (tickDifference = HAL_GetTick(), tickDifference - tickStart <= timeout))));\n  i2cHandle->PreviousState = 0;\n  i2cHandle->State = HAL_I2C_STATE_READY;\n  i2cHandle->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "check_i2_c_status_08002ad8",
                "hi2c": "i2cHandle",
                "Flag": "statusFlag",
                "Timeout": "timeout",
                "Tickstart": "tickStart",
                "uVar1": "tickDifference",
                "cVar2": "isFlagSet",
                "uVar3": "maskedFlag",
                "bVar4": "isFlagNonZero",
                "Tickstart_local": "localTickStart",
                "Timeout_local": "localTimeout",
                "Flag_local": "localStatusFlag",
                "hi2c_local": "localI2CHandle"
            },
            "calling": [
                "I2C_RequestMemoryRead",
                "I2C_RequestMemoryWrite"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "entrypoint": "0x08002bb4",
            "current_name": "wait_for_acknowledge_08002bb4",
            "code": "\nHAL_StatusTypeDef waitForAcknowledge_08002bb4(I2C_HandleTypeDef *i2cHandle,uint32_t timeout,uint32_t tickStart)\n\n{\n  HAL_StatusTypeDef status;\n  uint32_t currentTick;\n  uint32_t localTickstart;\n  uint32_t localTimeout;\n  I2C_HandleTypeDef *localI2cHandle;\n  \n  while( true ) {\n    if ((i2cHandle->Instance->SR1 & 0x80) == 0x80) {\n      return HAL_OK;\n    }\n    status = I2C_IsAcknowledgeFailed(i2cHandle);\n    if (status != HAL_OK) break;\n    if ((timeout != 0xffffffff) &&\n       ((timeout == 0 || (currentTick = HAL_GetTick(), timeout < currentTick - tickStart)))) {\n      i2cHandle->ErrorCode = i2cHandle->ErrorCode | 0x20;\n      i2cHandle->PreviousState = 0;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      i2cHandle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_ERROR;\n}\n\n",
            "renaming": {
                "FUN_08002bb4": "wait_for_acknowledge_08002bb4",
                "hi2c": "i2cHandle",
                "Timeout": "timeout",
                "Tickstart": "tickStart",
                "HVar1": "status",
                "uVar2": "currentTick",
                "Tickstart_local": "localTickstart",
                "Timeout_local": "localTimeout",
                "hi2c_local": "localI2cHandle"
            },
            "calling": [
                "I2C_RequestMemoryRead",
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryWrite"
            ],
            "called": [
                "HAL_GetTick",
                "I2C_IsAcknowledgeFailed"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "entrypoint": "0x08002c2e",
            "current_name": "wait_for_i2_c_completion_08002c2e",
            "code": "\nHAL_StatusTypeDef waitForI2CCompletion_08002c2e(I2C_HandleTypeDef *i2cHandle,uint32_t timeout,uint32_t tickstart)\n\n{\n  HAL_StatusTypeDef status;\n  uint32_t currentTick;\n  uint32_t localTickstart;\n  uint32_t localTimeout;\n  I2C_HandleTypeDef *localI2CHandle;\n  \n  while( true ) {\n    if ((i2cHandle->Instance->SR1 & 4) == 4) {\n      return HAL_OK;\n    }\n    status = I2C_IsAcknowledgeFailed(i2cHandle);\n    if (status != HAL_OK) break;\n    if ((timeout != 0xffffffff) &&\n       ((timeout == 0 || (currentTick = HAL_GetTick(), timeout < currentTick - tickstart)))) {\n      i2cHandle->ErrorCode = i2cHandle->ErrorCode | 0x20;\n      i2cHandle->PreviousState = 0;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      i2cHandle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_ERROR;\n}\n\n",
            "renaming": {
                "FUN_08002c2e": "wait_for_i2_c_completion_08002c2e",
                "hi2c": "i2cHandle",
                "Timeout": "timeout",
                "Tickstart": "tickstart",
                "HVar1": "status",
                "uVar2": "currentTick",
                "Tickstart_local": "localTickstart",
                "Timeout_local": "localTimeout",
                "hi2c_local": "localI2CHandle"
            },
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "called": [
                "HAL_GetTick",
                "I2C_IsAcknowledgeFailed"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "entrypoint": "0x08002ca8",
            "current_name": "check_i2_c_status_08002ca8",
            "code": "\nHAL_StatusTypeDef checkI2CStatus_08002ca8(I2C_HandleTypeDef *i2cHandle,uint32_t timeout,uint32_t tickstart)\n\n{\n  uint32_t currentTick;\n  uint32_t localTickstart;\n  uint32_t localTimeout;\n  I2C_HandleTypeDef *localI2CHandle;\n  \n  while( true ) {\n    if ((i2cHandle->i2cInstance->statusRegister1 & 0x40) == 0x40) {\n      return HAL_SUCCESS;\n    }\n    if ((i2cHandle->i2cInstance->statusRegister1 & 0x10) == 0x10) break;\n    if ((timeout == 0) || (currentTick = HAL_GetTick(), timeout < currentTick - tickstart)) {\n      i2cHandle->errorFlag = i2cHandle->errorFlag | 0x20;\n      i2cHandle->i2cState = HAL_I2C_STATE_READY;\n      i2cHandle->lockFlag = HAL_UNLOCKED;\n      return HAL_OPERATION_TIMEOUT;\n    }\n  }\n  i2cHandle->i2cInstance->statusRegister1 = 0xffffffef;\n  i2cHandle->errorFlag = 0;\n  i2cHandle->previousI2CState = 0;\n  i2cHandle->i2cState = HAL_I2C_STATE_READY;\n  i2cHandle->lockFlag = HAL_UNLOCKED;\n  return HAL_FAILURE;\n}\n\n",
            "renaming": {
                "FUN_08002ca8": "check_i2_c_status_08002ca8",
                "hi2c": "i2cHandle",
                "Timeout": "timeout",
                "Tickstart": "tickstart",
                "uVar1": "currentTick",
                "Tickstart_local": "localTickstart",
                "Timeout_local": "localTimeout",
                "hi2c_local": "localI2CHandle",
                "Instance": "i2cInstance",
                "SR1": "statusRegister1",
                "ErrorCode": "errorFlag",
                "State": "i2cState",
                "Lock": "lockFlag",
                "PreviousState": "previousI2CState",
                "HAL_OK": "HAL_SUCCESS",
                "HAL_TIMEOUT": "HAL_OPERATION_TIMEOUT",
                "HAL_ERROR": "HAL_FAILURE"
            },
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "entrypoint": "0x08002d3c",
            "current_name": "clear_error_flag_08002d3c",
            "code": "\nHAL_StatusTypeDef clearErrorFlag_08002d3c(I2C_HandleTypeDef *i2cHandle)\n\n{\n  bool isErrorFlagSet;\n  I2C_HandleTypeDef *localI2CHandle;\n  \n  isErrorFlagSet = (i2cHandle->Instance->SR1 & 0x400) == 0x400;\n  if (isErrorFlagSet) {\n    i2cHandle->Instance->SR1 = 0xfffffbff;\n    i2cHandle->ErrorCode = 4;\n    i2cHandle->PreviousState = 0;\n    i2cHandle->State = HAL_I2C_STATE_READY;\n    i2cHandle->Lock = HAL_UNLOCKED;\n  }\n  return isErrorFlagSet;\n}\n\n",
            "renaming": {
                "FUN_08002d3c": "clear_error_flag_08002d3c",
                "hi2c": "i2cHandle",
                "bVar1": "isErrorFlagSet",
                "hi2c_local": "localI2CHandle"
            },
            "calling": [
                "I2C_WaitOnBTFFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "entrypoint": "0x08002d8a",
            "current_name": "FUNC_08002d8a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d98": {
            "entrypoint": "0x08002d98",
            "current_name": "initialize_rcc_oscillators_08002d98",
            "code": "\n\n\nHAL_StatusTypeDef initializeRCCOscillators_08002d98(RCC_OscInitTypeDef *oscInit)\n\n{\n  uint32_t startTime;\n  uint32_t currentTime;\n  HAL_StatusTypeDef status;\n  bool flag;\n  RCC_OscInitTypeDef *localOscInit;\n  uint32_t tmpreg;\n  uint32_t tickstart;\n  FlagStatus powerClockChanged;\n  \n  if ((oscInit->OscillatorType & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (oscInit->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      if (oscInit->HSEState == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (oscInit->HSEState == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (oscInit->HSEState == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (oscInit->HSEState == 0) {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = HAL_GetTick();\n          if (100 < currentTime - startTime) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = HAL_GetTick();\n          if (100 < currentTime - startTime) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((oscInit->OscillatorType & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (oscInit->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      _DAT_40021000 = oscInit->HSICalibrationValue << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (oscInit->HSIState == 0) {\n      _DAT_42420000 = 0;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (2 < currentTime - startTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < currentTime - startTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n      _DAT_40021000 = oscInit->HSICalibrationValue << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((oscInit->OscillatorType & 8) != 0) {\n    if (oscInit->LSIState == 0) {\n      _DAT_42420480 = 0;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (2 < currentTime - startTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < currentTime - startTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((oscInit->OscillatorType & 4) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = HAL_GetTick();\n        if (100 < currentTime - startTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (oscInit->LSEState == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (oscInit->LSEState == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (oscInit->LSEState == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (oscInit->LSEState == 0) {\n      startTime = HAL_GetTick();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < currentTime - startTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      startTime = HAL_GetTick();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < currentTime - startTime) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((oscInit->PLL).PLLState == 0) {\nLAB_0800324a:\n    status = HAL_OK;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    status = HAL_ERROR;\n  }\n  else if ((oscInit->PLL).PLLState == 2) {\n    _DAT_42420060 = 0;\n    startTime = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if ((oscInit->PLL).PLLSource == 0x10000) {\n          _DAT_40021004 = oscInit->HSEPredivValue | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 =\n             (oscInit->PLL).PLLMUL | (oscInit->PLL).PLLSource |\n             _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        startTime = HAL_GetTick();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          currentTime = HAL_GetTick();\n          if (2 < currentTime - startTime) {\n            return HAL_TIMEOUT;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      currentTime = HAL_GetTick();\n    } while (currentTime - startTime < 3);\n    status = HAL_TIMEOUT;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTime = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      currentTime = HAL_GetTick();\n    } while (currentTime - startTime < 3);\n    status = HAL_TIMEOUT;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08002d98": "initialize_rcc_oscillators_08002d98",
                "RCC_OscInitStruct": "oscInit",
                "uVar1": "startTime",
                "uVar2": "currentTime",
                "HVar3": "status",
                "bVar4": "flag",
                "RCC_OscInitStruct_local": "localOscInit",
                "pwrclkchanged": "powerClockChanged"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick",
                "RCC_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003260": {
            "entrypoint": "0x08003260",
            "current_name": "configure_clocks_08003260",
            "code": "\n\n\nHAL_StatusTypeDef configureClocks_08003260(RCC_ClkInitTypeDef *clockInitStruct,uint32_t latency)\n\n{\n  uint32_t sysClockFreq;\n  uint32_t currentTick;\n  HAL_StatusTypeDef status;\n  uint32_t localLatency;\n  RCC_ClkInitTypeDef *localClockInitStruct;\n  uint32_t startTick;\n  \n  if (((_DAT_40022000 & 7) < latency) &&\n     (_DAT_40022000 = latency | _DAT_40022000 & 0xfffffff8, latency != (latency & 7))) {\n    status = HAL_ERROR;\n  }\n  else {\n    if ((clockInitStruct->ClockType & 2) != 0) {\n      _DAT_40021004 = clockInitStruct->AHBCLKDivider | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((clockInitStruct->ClockType & 1) == 0) {\nLAB_08003394:\n      if ((latency < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = latency | _DAT_40022000 & 0xfffffff8, latency != (latency & 7))) {\n        status = HAL_ERROR;\n      }\n      else {\n        if ((clockInitStruct->ClockType & 4) != 0) {\n          _DAT_40021004 = clockInitStruct->APB1CLKDivider | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((clockInitStruct->ClockType & 8) != 0) {\n          _DAT_40021004 = clockInitStruct->APB2CLKDivider << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        sysClockFreq = HAL_RCC_GetSysClockFreq();\n        SystemCoreClock = sysClockFreq >> \"\"[_DAT_40021004 >> 4 & 0xf];\n        HAL_InitTick(0xf);\n        status = HAL_OK;\n      }\n    }\n    else {\n      if (clockInitStruct->SYSCLKSource == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return HAL_ERROR;\n        }\n      }\n      else if ((clockInitStruct->SYSCLKSource != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return HAL_ERROR;\n      }\n      _DAT_40021004 = clockInitStruct->SYSCLKSource | _DAT_40021004 & 0xfffffffc;\n      sysClockFreq = HAL_GetTick();\n      if (clockInitStruct->SYSCLKSource == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          currentTick = HAL_GetTick();\n        } while (currentTick - sysClockFreq < 0x1389);\n        status = HAL_TIMEOUT;\n      }\n      else if (clockInitStruct->SYSCLKSource == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          currentTick = HAL_GetTick();\n        } while (currentTick - sysClockFreq < 0x1389);\n        status = HAL_TIMEOUT;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          currentTick = HAL_GetTick();\n        } while (currentTick - sysClockFreq < 0x1389);\n        status = HAL_TIMEOUT;\n      }\n    }\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003260": "configure_clocks_08003260",
                "RCC_ClkInitStruct": "clockInitStruct",
                "FLatency": "latency",
                "uVar1": "sysClockFreq",
                "uVar2": "currentTick",
                "HVar3": "status",
                "FLatency_local": "localLatency",
                "RCC_ClkInitStruct_local": "localClockInitStruct",
                "tickstart": "startTick"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_RCC_GetSysClockFreq",
                "HAL_GetTick",
                "HAL_InitTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003440": {
            "entrypoint": "0x08003440",
            "current_name": "calculate_sys_clock_freq_08003440",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t calculateSysClockFreq_08003440(void)\n\n{\n  uint8_t predivFactorTable [2];\n  uint8_t pllmulFactorTable [16];\n  uint32_t pllmul;\n  uint32_t prediv;\n  uint32_t tmpreg;\n  uint32_t sysclockfreq;\n  uint32_t pllclk;\n  \n  pllmulFactorTable[0] = '\\x02';\n  pllmulFactorTable[1] = '\\x03';\n  pllmulFactorTable[2] = '\\x04';\n  pllmulFactorTable[3] = '\\x05';\n  pllmulFactorTable[4] = '\\x06';\n  pllmulFactorTable[5] = '\\a';\n  pllmulFactorTable[6] = '\\b';\n  pllmulFactorTable[7] = '\\t';\n  pllmulFactorTable[8] = '\\n';\n  pllmulFactorTable[9] = '\\v';\n  pllmulFactorTable[10] = '\\f';\n  pllmulFactorTable[11] = '\\r';\n  pllmulFactorTable[12] = '\\x0e';\n  pllmulFactorTable[13] = '\\x0f';\n  pllmulFactorTable[14] = '\\x10';\n  pllmulFactorTable[15] = '\\x10';\n  predivFactorTable[0] = '\\x01';\n  predivFactorTable[1] = '\\x02';\n  if ((_DAT_40021004 & 0xc) == 4) {\n    sysclockfreq = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      pllclk = (uint)pllmulFactorTable[_DAT_40021004 >> 0x12 & 0xf] * 4000000;\n    }\n    else {\n      pllclk = ((uint)pllmulFactorTable[_DAT_40021004 >> 0x12 & 0xf] * 8000000) /\n               (uint)predivFactorTable[_DAT_40021004 >> 0x11 & 1];\n    }\n    sysclockfreq = pllclk;\n  }\n  else {\n    sysclockfreq = 8000000;\n  }\n  return sysclockfreq;\n}\n\n",
            "renaming": {
                "FUN_08003440": "calculate_sys_clock_freq_08003440",
                "aPredivFactorTable": "predivFactorTable",
                "aPLLMULFactorTable": "pllmulFactorTable"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003504": {
            "entrypoint": "0x08003504",
            "current_name": "get_system_core_clock_08003504",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getSystemCoreClock_08003504(void)\n\n{\n  return systemCoreClock;\n}\n\n",
            "renaming": {
                "FUN_08003504": "get_system_core_clock_08003504",
                "SystemCoreClock": "systemCoreClock"
            },
            "calling": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003518": {
            "entrypoint": "0x08003518",
            "current_name": "get_hclk_frequency_08003518",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t get_HCLK_frequency_08003518(void)\n\n{\n  uint32_t frequency;\n  \n  frequency = get_HCLK_frequency_08003518();\n  return frequency >> \"\"[_DAT_40021004 >> 8 & 7];\n}\n\n",
            "renaming": {
                "FUN_08003518": "get_hclk_frequency_08003518",
                "uVar1": "frequency",
                "HAL_RCC_GetHCLKFreq": "get_HCLK_frequency"
            },
            "calling": [
                "UART_SetConfig",
                "HAL_I2C_Init"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003540": {
            "entrypoint": "0x08003540",
            "current_name": "calculate_hclk_frequency_shifted_08003540",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t calculateHCLKFrequencyShifted_08003540(void)\n\n{\n  uint32_t hclkFrequency;\n  \n  hclkFrequency = getHCLKFrequency();\n  return hclkFrequency >> \"\"[_DAT_40021004 >> 0xb & 7];\n}\n\n",
            "renaming": {
                "FUN_08003540": "calculate_hclk_frequency_shifted_08003540",
                "uVar1": "hclkFrequency",
                "HAL_RCC_GetHCLKFreq": "getHCLKFrequency"
            },
            "calling": [
                "UART_SetConfig"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003568": {
            "entrypoint": "0x08003568",
            "current_name": "delay_function_08003568",
            "code": "\nvoid delayFunction_08003568(uint32_t delayValue)\n\n{\n  bool isDelayComplete;\n  uint32_t localDelayValue;\n  uint32_t totalDelay;\n  \n  totalDelay = delayValue * (SystemCoreClock / 8000);\n  do {\n    isDelayComplete = totalDelay != 0;\n    totalDelay = totalDelay - 1;\n  } while (isDelayComplete);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003568": "delay_function_08003568",
                "mdelay": "delayValue",
                "mdelay_local": "localDelayValue",
                "Delay": "totalDelay",
                "bVar1": "isDelayComplete"
            },
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035a4": {
            "entrypoint": "0x080035a4",
            "current_name": "initialize_timer_080035a4",
            "code": "\nHAL_StatusTypeDef initializeTimer_080035a4(TIM_HandleTypeDef *timer)\n\n{\n  HAL_StatusTypeDef status;\n  TIM_HandleTypeDef *localTimer;\n  \n  if (timer == (TIM_HandleTypeDef *)0x0) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (timer->State == TIM_STATE_RESET) {\n      timer->Lock = UNLOCKED;\n      HAL_TIM_Base_MspInit(timer);\n    }\n    timer->State = TIM_STATE_BUSY;\n    TIM_Base_SetConfig(timer->Instance,&timer->Init);\n    timer->State = TIM_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080035a4": "initialize_timer_080035a4",
                "htim": "timer",
                "HVar1": "status",
                "htim_local": "localTimer",
                "HAL_TIM_STATE_RESET": "TIM_STATE_RESET",
                "HAL_UNLOCKED": "UNLOCKED",
                "HAL_TIM_STATE_BUSY": "TIM_STATE_BUSY",
                "HAL_TIM_STATE_READY": "TIM_STATE_READY"
            },
            "calling": [
                "MX_TIM2_Init",
                "MX_TIM1_Init"
            ],
            "called": [
                "HAL_TIM_Base_MspInit",
                "TIM_Base_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fa": {
            "entrypoint": "0x080035fa",
            "current_name": "initialize_timer_080035fa",
            "code": "\nvoid initializeTimer_080035fa(TIM_HandleTypeDef *timer)\n\n{\n  TIM_HandleTypeDef *localTimer;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fa": "initialize_timer_080035fa",
                "htim": "timer",
                "htim_local": "localTimer"
            },
            "calling": [
                "HAL_TIM_Base_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800360c": {
            "entrypoint": "0x0800360c",
            "current_name": "configure_timer_interrupt_0800360c",
            "code": "\nHAL_StatusTypeDef configureTimerInterrupt_0800360c(TIM_HandleTypeDef *timerHandler)\n\n{\n  TIM_HandleTypeDef *localTimerHandler;\n  \n  timerHandler->Instance->DIER = timerHandler->Instance->DIER | 1;\n  timerHandler->Instance->CR1 = timerHandler->Instance->CR1 | 1;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_0800360c": "configure_timer_interrupt_0800360c",
                "htim": "timerHandler",
                "htim_local": "localTimerHandler"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003640": {
            "entrypoint": "0x08003640",
            "current_name": "configure_tim_08003640",
            "code": "\nHAL_StatusTypeDef configure_TIM_08003640(TIM_HandleTypeDef *timer)\n\n{\n  HAL_StatusTypeDef status;\n  TIM_HandleTypeDef *local_timer;\n  \n  if (timer == (TIM_HandleTypeDef *)0x0) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (timer->State == HAL_TIM_STATE_RESET) {\n      timer->Lock = HAL_UNLOCKED;\n      HAL_TIM_PWM_MspInit(timer);\n    }\n    timer->State = HAL_TIM_STATE_BUSY;\n    TIM_Base_SetConfig(timer->Instance,&timer->Init);\n    timer->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003640": "configure_tim_08003640",
                "htim": "timer",
                "HVar1": "status",
                "htim_local": "local_timer"
            },
            "calling": [
                "MX_TIM1_Init"
            ],
            "called": [
                "HAL_TIM_PWM_MspInit",
                "TIM_Base_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003696": {
            "entrypoint": "0x08003696",
            "current_name": "initialize_timer_08003696",
            "code": "\nvoid initializeTimer_08003696(TIM_HandleTypeDef *timerHandler)\n\n{\n  TIM_HandleTypeDef *localTimerHandler;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_08003696": "initialize_timer_08003696",
                "htim": "timerHandler",
                "htim_local": "localTimerHandler"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a8": {
            "entrypoint": "0x080036a8",
            "current_name": "initialize_timer_channel_080036a8",
            "code": "\nHAL_StatusTypeDef initializeTimerChannel_080036a8(TIM_HandleTypeDef *timer,uint32_t channel)\n\n{\n  uint32_t localChannel;\n  TIM_HandleTypeDef *localTimer;\n  \n  TIM_CCxchannelCmd(timer->Instance,channel,1);\n  if (timer->Instance == (TIM_TypeDef *)0x40012c00) {\n    timer->Instance->BDTR = timer->Instance->BDTR | 0x8000;\n  }\n  timer->Instance->CR1 = timer->Instance->CR1 | 1;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080036a8": "initialize_timer_channel_080036a8",
                "htim": "timer",
                "Channel": "channel",
                "Channel_local": "localChannel",
                "htim_local": "localTimer"
            },
            "calling": [
                "main"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f8": {
            "entrypoint": "0x080036f8",
            "current_name": "handle_tim_interrupts_080036f8",
            "code": "\nvoid handleTimInterrupts_080036f8(TIM_HandleTypeDef *timHandle)\n\n{\n  TIM_HandleTypeDef *localTimHandle;\n  \n  if (((timHandle->Instance->SR & 2) == 2) && ((timHandle->Instance->DIER & 2) == 2)) {\n    timHandle->Instance->SR = 0xfffffffd;\n    timHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n    if ((timHandle->Instance->CCMR1 & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timHandle);\n      HAL_TIM_PWM_PulseFinishedCallback(timHandle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timHandle);\n    }\n    timHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((timHandle->Instance->SR & 4) == 4) && ((timHandle->Instance->DIER & 4) == 4)) {\n    timHandle->Instance->SR = 0xfffffffb;\n    timHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_2;\n    if ((timHandle->Instance->CCMR1 & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timHandle);\n      HAL_TIM_PWM_PulseFinishedCallback(timHandle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timHandle);\n    }\n    timHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((timHandle->Instance->SR & 8) == 8) && ((timHandle->Instance->DIER & 8) == 8)) {\n    timHandle->Instance->SR = 0xfffffff7;\n    timHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_3;\n    if ((timHandle->Instance->CCMR2 & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timHandle);\n      HAL_TIM_PWM_PulseFinishedCallback(timHandle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timHandle);\n    }\n    timHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((timHandle->Instance->SR & 0x10) == 0x10) && ((timHandle->Instance->DIER & 0x10) == 0x10)) {\n    timHandle->Instance->SR = 0xffffffef;\n    timHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_4;\n    if ((timHandle->Instance->CCMR2 & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timHandle);\n      HAL_TIM_PWM_PulseFinishedCallback(timHandle);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timHandle);\n    }\n    timHandle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  if (((timHandle->Instance->SR & 1) == 1) && ((timHandle->Instance->DIER & 1) == 1)) {\n    timHandle->Instance->SR = 0xfffffffe;\n    HAL_TIM_PeriodElapsedCallback(timHandle);\n  }\n  if (((timHandle->Instance->SR & 0x80) == 0x80) && ((timHandle->Instance->DIER & 0x80) == 0x80)) {\n    timHandle->Instance->SR = 0xffffff7f;\n    HAL_TIMEx_BreakCallback(timHandle);\n  }\n  if (((timHandle->Instance->SR & 0x40) == 0x40) && ((timHandle->Instance->DIER & 0x40) == 0x40)) {\n    timHandle->Instance->SR = 0xffffffbf;\n    HAL_TIM_TriggerCallback(timHandle);\n  }\n  if (((timHandle->Instance->SR & 0x20) == 0x20) && ((timHandle->Instance->DIER & 0x20) == 0x20)) {\n    timHandle->Instance->SR = 0xffffffdf;\n    HAL_TIMEx_CommutationCallback(timHandle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f8": "handle_tim_interrupts_080036f8",
                "htim": "timHandle",
                "htim_local": "localTimHandle"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIMEx_BreakCallback",
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003908": {
            "entrypoint": "0x08003908",
            "current_name": "configure_timer_channel_08003908",
            "code": "\nHAL_StatusTypeDef configureTimerChannel_08003908(TIM_HandleTypeDef *timerHandle,TIM_OC_InitTypeDef *outputCompareConfig,uint32_t channel)\n\n{\n  HAL_StatusTypeDef status;\n  uint32_t localChannel;\n  TIM_OC_InitTypeDef *localOutputCompareConfig;\n  TIM_HandleTypeDef *localTimerHandle;\n  \n  if (timerHandle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timerHandle->Lock = HAL_LOCKED;\n    timerHandle->State = HAL_TIM_STATE_BUSY;\n    switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(timerHandle->Instance,outputCompareConfig);\n      timerHandle->Instance->CCMR1 = timerHandle->Instance->CCMR1 | 8;\n      timerHandle->Instance->CCMR1 = timerHandle->Instance->CCMR1 & 0xfffffffb;\n      timerHandle->Instance->CCMR1 = outputCompareConfig->OCFastMode | timerHandle->Instance->CCMR1;\n      break;\n    case 4:\n      TIM_OC2_SetConfig(timerHandle->Instance,outputCompareConfig);\n      timerHandle->Instance->CCMR1 = timerHandle->Instance->CCMR1 | 0x800;\n      timerHandle->Instance->CCMR1 = timerHandle->Instance->CCMR1 & 0xfffffbff;\n      timerHandle->Instance->CCMR1 = outputCompareConfig->OCFastMode << 8 | timerHandle->Instance->CCMR1;\n      break;\n    case 8:\n      TIM_OC3_SetConfig(timerHandle->Instance,outputCompareConfig);\n      timerHandle->Instance->CCMR2 = timerHandle->Instance->CCMR2 | 8;\n      timerHandle->Instance->CCMR2 = timerHandle->Instance->CCMR2 & 0xfffffffb;\n      timerHandle->Instance->CCMR2 = outputCompareConfig->OCFastMode | timerHandle->Instance->CCMR2;\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(timerHandle->Instance,outputCompareConfig);\n      timerHandle->Instance->CCMR2 = timerHandle->Instance->CCMR2 | 0x800;\n      timerHandle->Instance->CCMR2 = timerHandle->Instance->CCMR2 & 0xfffffbff;\n      timerHandle->Instance->CCMR2 = outputCompareConfig->OCFastMode << 8 | timerHandle->Instance->CCMR2;\n    }\n    timerHandle->State = HAL_TIM_STATE_READY;\n    timerHandle->Lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003908": "configure_timer_channel_08003908",
                "htim": "timerHandle",
                "sConfig": "outputCompareConfig",
                "Channel": "channel",
                "HVar1": "status",
                "Channel_local": "localChannel",
                "sConfig_local": "localOutputCompareConfig",
                "htim_local": "localTimerHandle"
            },
            "calling": [
                "MX_TIM1_Init"
            ],
            "called": [
                "TIM_OC4_SetConfig",
                "TIM_OC3_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC2_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a94": {
            "entrypoint": "0x08003a94",
            "current_name": "configure_timer_clock_08003a94",
            "code": "\nHAL_StatusTypeDef configureTimerClock_08003a94(TIM_HandleTypeDef *timerHandle,TIM_ClockConfigTypeDef *clockConfig)\n\n{\n  HAL_StatusTypeDef status;\n  uint clockSource;\n  TIM_ClockConfigTypeDef *localClockConfig;\n  TIM_HandleTypeDef *localTimerHandle;\n  uint32_t temporarySMCR;\n  \n  if (timerHandle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timerHandle->Lock = HAL_LOCKED;\n    timerHandle->State = HAL_TIM_STATE_BUSY;\n    timerHandle->Instance->SMCR = timerHandle->Instance->SMCR & 0xffff0088;\n    clockSource = clockConfig->ClockSource;\n    if (clockSource == 0x40) {\n      TIM_TI1_ConfigInputStage\n                (timerHandle->Instance,clockConfig->ClockPolarity,clockConfig->ClockFilter);\n      TIM_ITRx_SetConfig(timerHandle->Instance,0x40);\n    }\n    else if (clockSource < 0x41) {\n      if (clockSource == 0x10) {\n        TIM_ITRx_SetConfig(timerHandle->Instance,0x10);\n      }\n      else if (clockSource < 0x11) {\n        if (clockSource == 0) {\n          TIM_ITRx_SetConfig(timerHandle->Instance,0);\n        }\n      }\n      else if (clockSource == 0x20) {\n        TIM_ITRx_SetConfig(timerHandle->Instance,0x20);\n      }\n      else if (clockSource == 0x30) {\n        TIM_ITRx_SetConfig(timerHandle->Instance,0x30);\n      }\n    }\n    else if (clockSource == 0x70) {\n      TIM_ETR_SetConfig(timerHandle->Instance,clockConfig->ClockPrescaler,\n                        clockConfig->ClockPolarity,clockConfig->ClockFilter);\n      timerHandle->Instance->SMCR = timerHandle->Instance->SMCR & 0xffffff88 | 0x77;\n    }\n    else if (clockSource < 0x71) {\n      if (clockSource == 0x50) {\n        TIM_TI1_ConfigInputStage\n                  (timerHandle->Instance,clockConfig->ClockPolarity,clockConfig->ClockFilter)\n        ;\n        TIM_ITRx_SetConfig(timerHandle->Instance,0x50);\n      }\n      else if (clockSource == 0x60) {\n        TIM_TI2_ConfigInputStage\n                  (timerHandle->Instance,clockConfig->ClockPolarity,clockConfig->ClockFilter)\n        ;\n        TIM_ITRx_SetConfig(timerHandle->Instance,0x60);\n      }\n    }\n    else if (clockSource == 0x1000) {\n      timerHandle->Instance->SMCR = timerHandle->Instance->SMCR & 0xfffffff8;\n    }\n    else if (clockSource == 0x2000) {\n      TIM_ETR_SetConfig(timerHandle->Instance,clockConfig->ClockPrescaler,\n                        clockConfig->ClockPolarity,clockConfig->ClockFilter);\n      timerHandle->Instance->SMCR = timerHandle->Instance->SMCR | 0x4000;\n    }\n    timerHandle->State = HAL_TIM_STATE_READY;\n    timerHandle->Lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003a94": "configure_timer_clock_08003a94",
                "htim": "timerHandle",
                "sClockSourceConfig": "clockConfig",
                "HVar1": "status",
                "uVar2": "clockSource",
                "sClockSourceConfig_local": "localClockConfig",
                "htim_local": "localTimerHandle",
                "tmpsmcr": "temporarySMCR"
            },
            "calling": [
                "MX_TIM2_Init",
                "MX_TIM1_Init"
            ],
            "called": [
                "TIM_ETR_SetConfig",
                "TIM_TI2_ConfigInputStage",
                "TIM_TI1_ConfigInputStage",
                "TIM_ITRx_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "entrypoint": "0x08003c4a",
            "current_name": "initialize_timer_08003c4a",
            "code": "\nvoid initialize_timer_08003c4a(TIM_HandleTypeDef *timer_handle)\n\n{\n  TIM_HandleTypeDef *timer_handle_local;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c4a": "initialize_timer_08003c4a",
                "htim": "timer_handle"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c5c": {
            "entrypoint": "0x08003c5c",
            "current_name": "initialize_timer_08003c5c",
            "code": "\nvoid initialize_timer_08003c5c(TIM_HandleTypeDef *timer_handle)\n\n{\n  TIM_HandleTypeDef *timer_handle_local;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c5c": "initialize_timer_08003c5c",
                "htim": "timer_handle"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c6e": {
            "entrypoint": "0x08003c6e",
            "current_name": "initialize_timer_08003c6e",
            "code": "\nvoid initialize_timer_08003c6e(TIM_HandleTypeDef *timer_handle)\n\n{\n  TIM_HandleTypeDef *local_timer_handle;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c6e": "initialize_timer_08003c6e",
                "htim": "timer_handle",
                "htim_local": "local_timer_handle"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c80": {
            "entrypoint": "0x08003c80",
            "current_name": "initialize_timer_08003c80",
            "code": "\nvoid initialize_timer_08003c80(TIM_HandleTypeDef *timer_handle)\n\n{\n  TIM_HandleTypeDef *timer_handle_local;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c80": "initialize_timer_08003c80",
                "htim": "timer_handle"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c94": {
            "entrypoint": "0x08003c94",
            "current_name": "init_timer_08003c94",
            "code": "\nvoid initTimer_08003c94(TIM_TypeDef *timer,TIM_Base_InitTypeDef *initConfig)\n\n{\n  TIM_Base_InitTypeDef *localConfig;\n  TIM_TypeDef *localTimer;\n  uint32_t cr1Temp;\n  \n  cr1Temp = timer->CR1;\n  if ((((timer == (TIM_TypeDef *)0x40012c00) || (timer == (TIM_TypeDef *)0x40000000)) ||\n      (timer == (TIM_TypeDef *)0x40000400)) || (timer == (TIM_TypeDef *)0x40000800)) {\n    cr1Temp = initConfig->CounterMode | cr1Temp & 0xffffff8f;\n  }\n  if (((timer == (TIM_TypeDef *)0x40012c00) || (timer == (TIM_TypeDef *)0x40000000)) ||\n     ((timer == (TIM_TypeDef *)0x40000400 || (timer == (TIM_TypeDef *)0x40000800)))) {\n    cr1Temp = initConfig->ClockDivision | cr1Temp & 0xfffffcff;\n  }\n  timer->CR1 = initConfig->AutoReloadPreload | cr1Temp & 0xffffff7f;\n  timer->ARR = initConfig->Period;\n  timer->PSC = initConfig->Prescaler;\n  if (timer == (TIM_TypeDef *)0x40012c00) {\n    uRam40012c30 = initConfig->RepetitionCounter;\n  }\n  timer->EGR = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c94": "init_timer_08003c94",
                "TIMx": "timer",
                "Structure": "initConfig",
                "Structure_local": "localConfig",
                "TIMx_local": "localTimer",
                "tmpcr1": "cr1Temp"
            },
            "calling": [
                "HAL_TIM_PWM_Init",
                "HAL_TIM_Base_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d60": {
            "entrypoint": "0x08003d60",
            "current_name": "configure_timer_output_08003d60",
            "code": "\nvoid configureTimerOutput_08003d60(TIM_TypeDef *timer,TIM_OC_InitTypeDef *outputConfig)\n\n{\n  uint outputMode;\n  uint32_t outputPolarity;\n  TIM_OC_InitTypeDef *localOutputConfig;\n  TIM_TypeDef *localTimer;\n  uint32_t tmpCCR;\n  uint32_t tmpCR;\n  uint32_t tmpCCER;\n  \n  timer->CCER = timer->CCER & 0xfffffffe;\n  tmpCR = timer->CR2;\n  outputMode = outputConfig->OCMode;\n  outputPolarity = outputConfig->OCPolarity | timer->CCER & 0xfffffffd;\n  if (timer == (TIM_TypeDef *)0x40012c00) {\n    outputPolarity = (outputConfig->OCNPolarity | outputPolarity & 0xfffffff7) & 0xfffffffb;\n    tmpCR = outputConfig->OCNIdleState | outputConfig->OCIdleState | tmpCR & 0xfffffcff;\n  }\n  timer->CR2 = tmpCR;\n  timer->CCMR1 = outputMode | timer->CCMR1 & 0xffffff8c;\n  timer->CCR1 = outputConfig->Pulse;\n  timer->CCER = outputPolarity;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003d60": "configure_timer_output_08003d60",
                "TIMx": "timer",
                "OC_Config": "outputConfig",
                "OC_Config_local": "localOutputConfig",
                "TIMx_local": "localTimer",
                "tmpccmrx": "tmpCCR",
                "tmpcr2": "tmpCR",
                "tmpccer": "tmpCCER",
                "uVar1": "outputMode",
                "uVar2": "outputPolarity"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e38": {
            "entrypoint": "0x08003e38",
            "current_name": "configure_timer_output_compare_08003e38",
            "code": "\nvoid configureTimerOutputCompare_08003e38(TIM_TypeDef *timer,TIM_OC_InitTypeDef *outputCompareConfig)\n\n{\n  uint32_t outputCompareMode;\n  uint32_t outputComparePolarity;\n  TIM_OC_InitTypeDef *outputCompareConfigLocal;\n  TIM_TypeDef *timerLocal;\n  uint32_t temporaryCcmrX;\n  uint32_t temporaryCr2;\n  uint32_t temporaryCcer;\n  \n  timer->CCER = timer->CCER & 0xffffffef;\n  temporaryCr2 = timer->CR2;\n  outputCompareMode = outputCompareConfig->OCMode;\n  outputComparePolarity = outputCompareConfig->OCPolarity << 4 | timer->CCER & 0xffffffdf;\n  if (timer == (TIM_TypeDef *)0x40012c00) {\n    outputComparePolarity = (outputCompareConfig->OCNPolarity << 4 | outputComparePolarity & 0xffffff7f) & 0xffffffbf;\n    temporaryCr2 = outputCompareConfig->OCNIdleState << 2 | outputCompareConfig->OCIdleState << 2 | temporaryCr2 & 0xfffff3ff;\n  }\n  timer->CR2 = temporaryCr2;\n  timer->CCMR1 = outputCompareMode << 8 | timer->CCMR1 & 0xffff8cff;\n  timer->CCR2 = outputCompareConfig->Pulse;\n  timer->CCER = outputComparePolarity;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e38": "configure_timer_output_compare_08003e38",
                "TIMx": "timer",
                "OC_Config": "outputCompareConfig",
                "OC_Config_local": "outputCompareConfigLocal",
                "TIMx_local": "timerLocal",
                "tmpccmrx": "temporaryCcmrX",
                "tmpcr2": "temporaryCr2",
                "tmpccer": "temporaryCcer",
                "uVar1": "outputCompareMode",
                "uVar2": "outputComparePolarity"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "initialize_timer_08003f18",
            "code": "\nvoid initializeTimer_08003f18(TIM_TypeDef *timer,TIM_OC_InitTypeDef *timerConfig)\n\n{\n  uint mode;\n  uint32_t configValue;\n  TIM_OC_InitTypeDef *localTimerConfig;\n  TIM_TypeDef *localTimer;\n  uint32_t temporaryCCMRx;\n  uint32_t temporaryCR2;\n  uint32_t temporaryCCER;\n  \n  timer->CCER = timer->CCER & 0xfffffeff;\n  temporaryCR2 = timer->CR2;\n  mode = timerConfig->OCMode;\n  configValue = timerConfig->OCPolarity << 8 | timer->CCER & 0xfffffdff;\n  if (timer == (TIM_TypeDef *)0x40012c00) {\n    configValue = (timerConfig->OCNPolarity << 8 | configValue & 0xfffff7ff) & 0xfffffbff;\n    temporaryCR2 = timerConfig->OCNIdleState << 4 | timerConfig->OCIdleState << 4 | temporaryCR2 & 0xffffcfff;\n  }\n  timer->CR2 = temporaryCR2;\n  timer->CCMR2 = mode | timer->CCMR2 & 0xffffff8c;\n  timer->CCR3 = timerConfig->Pulse;\n  timer->CCER = configValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "initialize_timer_08003f18",
                "TIMx": "timer",
                "OC_Config": "timerConfig",
                "uVar1": "mode",
                "uVar2": "configValue",
                "OC_Config_local": "localTimerConfig",
                "TIMx_local": "localTimer",
                "tmpccmrx": "temporaryCCMRx",
                "tmpcr2": "temporaryCR2",
                "tmpccer": "temporaryCCER"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "entrypoint": "0x08003ff8",
            "current_name": "configure_oc_08003ff8",
            "code": "\nvoid configureOC_08003ff8(TIM_TypeDef *timer,TIM_OC_InitTypeDef *ocConfig)\n\n{\n  uint32_t ocModeValue;\n  uint32_t ocPolarityValue;\n  TIM_OC_InitTypeDef *localOCConfig;\n  TIM_TypeDef *localTimer;\n  uint32_t tempCCER;\n  uint32_t tempCCMRX;\n  uint32_t tempCR2;\n  \n  timer->CCER = timer->CCER & 0xffffefff;\n  tempCR2 = timer->CR2;\n  ocModeValue = ocConfig->OCMode;\n  ocPolarityValue = ocConfig->OCPolarity;\n  if (timer == (TIM_TypeDef *)0x40012c00) {\n    tempCR2 = ocConfig->OCIdleState << 6 | tempCR2 & 0xffffbfff;\n  }\n  timer->CR2 = tempCR2;\n  timer->CCMR2 = ocModeValue << 8 | timer->CCMR2 & 0xffff8cff;\n  timer->CCR4 = ocConfig->Pulse;\n  timer->CCER = ocPolarityValue << 0xc | timer->CCER & 0xffffdfff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff8": "configure_oc_08003ff8",
                "TIMx": "timer",
                "OC_Config": "ocConfig",
                "OC_Config_local": "localOCConfig",
                "TIMx_local": "localTimer",
                "tmpccer": "tempCCER",
                "tmpccmrx": "tempCCMRX",
                "tmpcr2": "tempCR2",
                "uVar1": "ocModeValue",
                "uVar2": "ocPolarityValue"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040a0": {
            "entrypoint": "0x080040a0",
            "current_name": "configure_timer_capture_080040a0",
            "code": "\nvoid configureTimerCapture_080040a0(TIM_TypeDef *timer,uint32_t inputCapturePolarity,uint32_t inputCaptureFilter)\n\n{\n  uint uVar1;\n  uint32_t localInputCaptureFilter;\n  uint32_t localInputCapturePolarity;\n  TIM_TypeDef *localTimer;\n  uint32_t temporaryCCER;\n  uint32_t temporaryCCMR1;\n  \n  uVar1 = timer->CCER;\n  timer->CCER = timer->CCER & 0xfffffffe;\n  timer->CCMR1 = inputCaptureFilter << 4 | timer->CCMR1 & 0xffffff0f;\n  timer->CCER = inputCapturePolarity | uVar1 & 0xfffffff5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040a0": "configure_timer_capture_080040a0",
                "TIMx": "timer",
                "TIM_ICPolarity": "inputCapturePolarity",
                "TIM_ICFilter": "inputCaptureFilter",
                "TIM_ICFilter_local": "localInputCaptureFilter",
                "TIM_ICPolarity_local": "localInputCapturePolarity",
                "TIMx_local": "localTimer",
                "tmpccer": "temporaryCCER",
                "tmpccmr1": "temporaryCCMR1"
            },
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004104": {
            "entrypoint": "0x08004104",
            "current_name": "configure_timer_input_capture_08004104",
            "code": "\nvoid configureTimerInputCapture_08004104(TIM_TypeDef *timer,uint32_t polarity,uint32_t filter)\n\n{\n  uint32_t localFilter;\n  uint32_t localPolarity;\n  TIM_TypeDef *localTimer;\n  uint32_t tempCCER;\n  uint32_t tempCCMR1;\n  \n  timer->CCER = timer->CCER & 0xffffffef;\n  timer->CCMR1 = filter << 0xc | timer->CCMR1 & 0xffff0fff;\n  timer->CCER = polarity << 4 | timer->CCER & 0xffffff5f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004104": "configure_timer_input_capture_08004104",
                "TIMx": "timer",
                "TIM_ICPolarity": "polarity",
                "TIM_ICFilter": "filter",
                "TIM_ICFilter_local": "localFilter",
                "TIM_ICPolarity_local": "localPolarity",
                "TIMx_local": "localTimer",
                "tmpccer": "tempCCER",
                "tmpccmr1": "tempCCMR1"
            },
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800416a": {
            "entrypoint": "0x0800416a",
            "current_name": "set_input_trigger_source_0800416a",
            "code": "\nvoid setInputTriggerSource_0800416a(TIMx *TIMx,uint16_t inputTrigger)\n\n{\n  uint16_t inputTrigger_local;\n  TIMx *TIMx_local;\n  uint32_t tmp_smcr;\n  \n  TIMx->SMCR = TIMx->SMCR & 0xffffff8f | (uint)(inputTrigger | 7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800416a": "set_input_trigger_source_0800416a",
                "TIM_TypeDef": "TIMx",
                "InputTriggerSource": "inputTrigger",
                "InputTriggerSource_local": "inputTrigger_local",
                "tmpsmcr": "tmp_smcr"
            },
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a8": {
            "entrypoint": "0x080041a8",
            "current_name": "configure_external_trigger_080041a8",
            "code": "\nvoid configureExternalTrigger_080041a8(TIM_TypeDef *timer,uint32_t externalTriggerPrescaler,uint32_t externalTriggerPolarity,\n                 uint32_t externalTriggerFilter)\n\n{\n  uint32_t localExternalTriggerFilter;\n  uint32_t localExternalTriggerPolarity;\n  uint32_t localExternalTriggerPrescaler;\n  TIM_TypeDef *localTimer;\n  uint32_t temporarySMCR;\n  \n  timer->SMCR = externalTriggerPrescaler | externalTriggerFilter << 8 | externalTriggerPolarity |\n               timer->SMCR & 0xffff00ff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a8": "configure_external_trigger_080041a8",
                "TIMx": "timer",
                "TIM_ExtTRGPrescaler": "externalTriggerPrescaler",
                "TIM_ExtTRGPolarity": "externalTriggerPolarity",
                "ExtTRGFilter": "externalTriggerFilter",
                "ExtTRGFilter_local": "localExternalTriggerFilter",
                "TIM_ExtTRGPolarity_local": "localExternalTriggerPolarity",
                "TIM_ExtTRGPrescaler_local": "localExternalTriggerPrescaler",
                "TIMx_local": "localTimer",
                "tmpsmcr": "temporarySMCR"
            },
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ea": {
            "entrypoint": "0x080041ea",
            "current_name": "set_timer_channel_state_080041ea",
            "code": "\nvoid setTimerChannelState_080041ea(TIM_TypeDef *timer,uint32_t channel,uint32_t state)\n\n{\n  uint32_t localState;\n  uint32_t localChannel;\n  TIM_TypeDef *localTimer;\n  uint32_t temporary;\n  \n  timer->CCER = timer->CCER & ~(1 << (channel & 0xff));\n  timer->CCER = timer->CCER | state << (channel & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041ea": "set_timer_channel_state_080041ea",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "state",
                "ChannelState_local": "localState",
                "Channel_local": "localChannel",
                "TIMx_local": "localTimer",
                "tmp": "temporary"
            },
            "calling": [
                "HAL_TIM_PWM_Start"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800422e": {
            "entrypoint": "0x0800422e",
            "current_name": "configure_break_dead_time_0800422e",
            "code": "\nHAL_StatusTypeDef\nconfigureBreakDeadTime_0800422e(TIM_HandleTypeDef *timerHandle,TIM_BreakDeadTimeConfigTypeDef *breakDeadTimeConfig)\n\n{\n  HAL_StatusTypeDef status;\n  TIM_BreakDeadTimeConfigTypeDef *breakDeadTimeConfig_local;\n  TIM_HandleTypeDef *timerHandle_local;\n  uint32_t tmpBDTR;\n  \n  if (timerHandle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timerHandle->Lock = HAL_LOCKED;\n    timerHandle->Instance->BDTR =\n         breakDeadTimeConfig->AutomaticOutput |\n         (breakDeadTimeConfig->AutomaticOutput |\n         (breakDeadTimeConfig->BreakPolarity |\n         (breakDeadTimeConfig->BreakState |\n         (breakDeadTimeConfig->OffStateRunMode |\n         (breakDeadTimeConfig->OffStateIDLEMode |\n         (breakDeadTimeConfig->LockLevel | breakDeadTimeConfig->DeadTime & 0xfffffcff) &\n         0xfffffbff) & 0xfffff7ff) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    timerHandle->Lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_0800422e": "configure_break_dead_time_0800422e",
                "htim": "timerHandle",
                "sBreakDeadTimeConfig": "breakDeadTimeConfig",
                "HVar1": "status",
                "sBreakDeadTimeConfig_local": "breakDeadTimeConfig_local",
                "htim_local": "timerHandle_local",
                "tmpbdtr": "tmpBDTR"
            },
            "calling": [
                "MX_TIM1_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042de": {
            "entrypoint": "0x080042de",
            "current_name": "configure_tim_master_080042de",
            "code": "\nHAL_StatusTypeDef configureTimMaster_080042de(TIM_HandleTypeDef *timHandle,TIM_MasterConfigTypeDef *masterConfig)\n\n{\n  HAL_StatusTypeDef status;\n  TIM_MasterConfigTypeDef *localMasterConfig;\n  TIM_HandleTypeDef *localTimHandle;\n  \n  if (timHandle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timHandle->Lock = HAL_LOCKED;\n    timHandle->State = HAL_TIM_STATE_BUSY;\n    timHandle->Instance->CR2 = timHandle->Instance->CR2 & 0xffffff8f;\n    timHandle->Instance->CR2 = masterConfig->MasterOutputTrigger | timHandle->Instance->CR2;\n    timHandle->Instance->SMCR = timHandle->Instance->SMCR & 0xffffff7f;\n    timHandle->Instance->SMCR = masterConfig->MasterSlaveMode | timHandle->Instance->SMCR;\n    timHandle->State = HAL_TIM_STATE_READY;\n    timHandle->Lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080042de": "configure_tim_master_080042de",
                "htim": "timHandle",
                "sMasterConfig": "masterConfig",
                "HVar1": "status",
                "sMasterConfig_local": "localMasterConfig",
                "htim_local": "localTimHandle"
            },
            "calling": [
                "MX_TIM2_Init",
                "MX_TIM1_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004366": {
            "entrypoint": "0x08004366",
            "current_name": "handle_tim_interrupt_08004366",
            "code": "\nvoid handle_TIM_interrupt_08004366(TIM_HandleTypeDef *tim_handle)\n\n{\n  TIM_HandleTypeDef *tim_handle_local;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_08004366": "handle_tim_interrupt_08004366",
                "htim": "tim_handle"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004378": {
            "entrypoint": "0x08004378",
            "current_name": "initialize_timer_08004378",
            "code": "\nvoid initialize_timer_08004378(TIM_HandleTypeDef *timer_handle)\n\n{\n  TIM_HandleTypeDef *timer_handle_local;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_08004378": "initialize_timer_08004378",
                "htim": "timer_handle"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800438a": {
            "entrypoint": "0x0800438a",
            "current_name": "initialize_uart_0800438a",
            "code": "\nHAL_StatusTypeDef initializeUART_0800438a(UART_HandleTypeDef *uartHandle)\n\n{\n  HAL_StatusTypeDef status;\n  UART_HandleTypeDef *localUartHandle;\n  \n  if (uartHandle == (UART_HandleTypeDef *)0x0) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (uartHandle->gState == HAL_UART_STATE_RESET) {\n      uartHandle->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(uartHandle);\n    }\n    uartHandle->gState = HAL_UART_STATE_BUSY;\n    uartHandle->Instance->CR1 = uartHandle->Instance->CR1 & 0xffffdfff;\n    UART_SetConfig(uartHandle);\n    uartHandle->Instance->CR2 = uartHandle->Instance->CR2 & 0xffffb7ff;\n    uartHandle->Instance->CR3 = uartHandle->Instance->CR3 & 0xffffffd5;\n    uartHandle->Instance->CR1 = uartHandle->Instance->CR1 | 0x2000;\n    uartHandle->ErrorCode = 0;\n    uartHandle->gState = HAL_UART_STATE_READY;\n    uartHandle->RxState = HAL_UART_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_0800438a": "initialize_uart_0800438a",
                "huart": "uartHandle",
                "HVar1": "status",
                "huart_local": "localUartHandle"
            },
            "calling": [
                "MX_USART1_UART_Init"
            ],
            "called": [
                "HAL_UART_MspInit",
                "UART_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004424": {
            "entrypoint": "0x08004424",
            "current_name": "initialize_uart_08004424",
            "code": "\nvoid initialize_UART_08004424(UART_HandleTypeDef *UART_handler)\n\n{\n  UART_HandleTypeDef *local_UART_handler;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_08004424": "initialize_uart_08004424",
                "huart": "UART_handler",
                "huart_local": "local_UART_handler"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004436": {
            "entrypoint": "0x08004436",
            "current_name": "transmit_data_08004436",
            "code": "\nHAL_StatusTypeDef\ntransmitData_08004436(UART_HandleTypeDef *uartHandle,uint8_t *data,uint16_t size,uint32_t timeout)\n\n{\n  uint32_t startTime;\n  uint32_t currentTime;\n  HAL_StatusTypeDef status;\n  int loopVariable;\n  uint32_t localTimeout;\n  uint16_t localSize;\n  uint8_t *localData;\n  UART_HandleTypeDef *localUartHandle;\n  uint16_t *temp;\n  uint32_t tickStart;\n  \n  if (uartHandle->gState == HAL_UART_STATE_READY) {\n    if ((data == (uint8_t *)0x0) || (size == 0)) {\n      status = HAL_ERROR;\n    }\n    else if (uartHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      uartHandle->Lock = HAL_LOCKED;\n      uartHandle->ErrorCode = 0;\n      uartHandle->gState = HAL_UART_STATE_BUSY_TX;\n      startTime = HAL_GetTick();\n      uartHandle->TxXfersize = size;\n      uartHandle->TxXferCount = size;\n      localData = data;\n      while (uartHandle->TxXferCount != 0) {\n        uartHandle->TxXferCount = uartHandle->TxXferCount - 1;\n        if ((uartHandle->Init).WordLength == 0x1000) {\n          do {\n            if ((uartHandle->Instance->SR & 0x80) == 0x80) {\n              loopVariable = 0;\n              goto LAB_0800454c;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (currentTime = HAL_GetTick(), currentTime - startTime <= timeout))));\n          uartHandle->Instance->CR1 = uartHandle->Instance->CR1 & 0xfffffe5f;\n          uartHandle->Instance->CR3 = uartHandle->Instance->CR3 & 0xfffffffe;\n          uartHandle->gState = HAL_UART_STATE_READY;\n          uartHandle->RxState = HAL_UART_STATE_READY;\n          uartHandle->Lock = HAL_UNLOCKED;\n          loopVariable = 3;\nLAB_0800454c:\n          if (loopVariable != 0) {\n            return HAL_TIMEOUT;\n          }\n          uartHandle->Instance->DR = *(ushort *)localData & 0x1ff;\n          if ((uartHandle->Init).Parity == 0) {\n            localData = localData + 2;\n          }\n          else {\n            localData = localData + 1;\n          }\n        }\n        else {\n          do {\n            if ((uartHandle->Instance->SR & 0x80) == 0x80) {\n              loopVariable = 0;\n              goto LAB_08004614;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (currentTime = HAL_GetTick(), currentTime - startTime <= timeout))));\n          uartHandle->Instance->CR1 = uartHandle->Instance->CR1 & 0xfffffe5f;\n          uartHandle->Instance->CR3 = uartHandle->Instance->CR3 & 0xfffffffe;\n          uartHandle->gState = HAL_UART_STATE_READY;\n          uartHandle->RxState = HAL_UART_STATE_READY;\n          uartHandle->Lock = HAL_UNLOCKED;\n          loopVariable = 3;\nLAB_08004614:\n          if (loopVariable != 0) {\n            return HAL_TIMEOUT;\n          }\n          uartHandle->Instance->DR = (uint)*localData;\n          localData = localData + 1;\n        }\n      }\n      do {\n        if ((uartHandle->Instance->SR & 0x40) == 0x40) {\n          loopVariable = 0;\n          goto LAB_080046c6;\n        }\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (currentTime = HAL_GetTick(), currentTime - startTime <= timeout))));\n      uartHandle->Instance->CR1 = uartHandle->Instance->CR1 & 0xfffffe5f;\n      uartHandle->Instance->CR3 = uartHandle->Instance->CR3 & 0xfffffffe;\n      uartHandle->gState = HAL_UART_STATE_READY;\n      uartHandle->RxState = HAL_UART_STATE_READY;\n      uartHandle->Lock = HAL_UNLOCKED;\n      loopVariable = 3;\nLAB_080046c6:\n      if (loopVariable == 0) {\n        uartHandle->gState = HAL_UART_STATE_READY;\n        uartHandle->Lock = HAL_UNLOCKED;\n        status = HAL_OK;\n      }\n      else {\n        status = HAL_TIMEOUT;\n      }\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08004436": "transmit_data_08004436",
                "huart": "uartHandle",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "uVar1": "startTime",
                "uVar2": "currentTime",
                "HVar3": "status",
                "iVar4": "loopVariable",
                "Timeout_local": "localTimeout",
                "Size_local": "localSize",
                "pData_local": "localData",
                "huart_local": "localUartHandle",
                "tmp": "temp",
                "tickstart": "tickStart"
            },
            "calling": [
                "uart_print"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046ec": {
            "entrypoint": "0x080046ec",
            "current_name": "configure_uart_080046ec",
            "code": "\nvoid configureUART_080046ec(UART_HandleTypeDef *uartHandle)\n\n{\n  uint32_t pclkFreq;\n  uint32_t pclkFreq2;\n  uint32_t pclkFreq3;\n  uint32_t pclkFreq4;\n  uint32_t pclkFreq5;\n  uint32_t baudRate1;\n  uint32_t baudRate2;\n  uint32_t baudRate3;\n  uint32_t baudRate4;\n  UART_HandleTypeDef *localUARTHandle;\n  uint32_t tmpRegister;\n  \n  uartHandle->Instance->CR2 = (uartHandle->Init).StopBits | uartHandle->Instance->CR2 & 0xffffcfff;\n  uartHandle->Instance->CR1 =\n       uartHandle->Instance->CR1 & 0xffffe9f3 |\n       (uartHandle->Init).Mode | (uartHandle->Init).WordLength | (uartHandle->Init).Parity;\n  uartHandle->Instance->CR3 = (uartHandle->Init).HwFlowCtl | uartHandle->Instance->CR3 & 0xfffffcff;\n  if (uartHandle->Instance == (USART_TypeDef *)0x40013800) {\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n    baudRate1 = (uartHandle->Init).BaudRate;\n    pclkFreq2 = HAL_RCC_GetPCLK2Freq();\n    baudRate2 = (uartHandle->Init).BaudRate;\n    pclkFreq3 = HAL_RCC_GetPCLK2Freq();\n    baudRate3 = (uartHandle->Init).BaudRate;\n    pclkFreq4 = HAL_RCC_GetPCLK2Freq();\n    baudRate4 = (uartHandle->Init).BaudRate;\n    pclkFreq5 = HAL_RCC_GetPCLK2Freq();\n    uartHandle->Instance->BRR =\n         ((((pclkFreq4 * 0x19) / (baudRate4 << 2) +\n           (int)(((ulonglong)(pclkFreq5 * 0x19) / (ulonglong)((uartHandle->Init).BaudRate << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) +\n         (int)(((ulonglong)(pclkFreq * 0x19) / (ulonglong)(baudRate1 << 2)) / 100) * 0x10 +\n         ((((pclkFreq2 * 0x19) / (baudRate2 << 2) +\n           (int)(((ulonglong)(pclkFreq3 * 0x19) / (ulonglong)(baudRate3 << 2)) / 100) * -100) * 0x10 + 0x32)\n          / 100 & 0xf0);\n  }\n  else {\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n    baudRate1 = (uartHandle->Init).BaudRate;\n    pclkFreq2 = HAL_RCC_GetPCLK1Freq();\n    baudRate2 = (uartHandle->Init).BaudRate;\n    pclkFreq3 = HAL_RCC_GetPCLK1Freq();\n    baudRate3 = (uartHandle->Init).BaudRate;\n    pclkFreq4 = HAL_RCC_GetPCLK1Freq();\n    baudRate4 = (uartHandle->Init).BaudRate;\n    pclkFreq5 = HAL_RCC_GetPCLK1Freq();\n    uartHandle->Instance->BRR =\n         ((((pclkFreq4 * 0x19) / (baudRate4 << 2) +\n           (int)(((ulonglong)(pclkFreq5 * 0x19) / (ulonglong)((uartHandle->Init).BaudRate << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) +\n         (int)(((ulonglong)(pclkFreq * 0x19) / (ulonglong)(baudRate1 << 2)) / 100) * 0x10 +\n         ((((pclkFreq2 * 0x19) / (baudRate2 << 2) +\n           (int)(((ulonglong)(pclkFreq3 * 0x19) / (ulonglong)(baudRate3 << 2)) / 100) * -100) * 0x10 + 0x32)\n          / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046ec": "configure_uart_080046ec",
                "huart": "uartHandle",
                "uVar1": "pclkFreq",
                "uVar2": "pclkFreq2",
                "uVar3": "pclkFreq3",
                "uVar4": "pclkFreq4",
                "uVar5": "pclkFreq5",
                "uVar6": "baudRate1",
                "uVar7": "baudRate2",
                "uVar8": "baudRate3",
                "uVar9": "baudRate4",
                "huart_local": "localUARTHandle",
                "tmpreg": "tmpRegister"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800491c": {
            "entrypoint": "0x0800491c",
            "current_name": "initialize_mpu6050_0800491c",
            "code": "\nvoid initializeMPU6050_0800491c(Mpu6050 *sensorData)\n\n{\n  Mpu6050 *sensorData_local;\n  uint8_t registerValue1;\n  uint8_t registerValue2;\n  uint8_t registerValues [5];\n  \n  registerValue1 = '\\0';\n  (*writeRegister)(0xd0,'k',&registerValue1,1);\n  registerValue2 = '\\x10';\n  (*writeRegister)(0xd0,'\\x1c',&registerValue2,1);\n  registerValues[0] = '\\b';\n  (*writeRegister)(0xd0,'\\x1b',registerValues,1);\n  sensorData->accelerationX = 0.0;\n  sensorData->accelerationY = 0.0;\n  sensorData->accelerationZ = 0.0;\n  sensorData->temperature = 0.0;\n  sensorData->gyroX = 0.0;\n  sensorData->gyroY = 0.0;\n  sensorData->gyroZ = 0.0;\n  sensorData->gyroXOffset = 0.0;\n  sensorData->gyroYOffset = 0.0;\n  sensorData->pitchOffset = 0.0;\n  sensorData->rollOffset = 0.0;\n  calibrateMPU6050(sensorData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800491c": "initialize_mpu6050_0800491c",
                "mpu6050": "sensorData",
                "local_13": "registerValue1",
                "local_12": "registerValue2",
                "local_11": "registerValues",
                "I2C_Write_Reg": "writeRegister",
                "accX": "accelerationX",
                "accY": "accelerationY",
                "accZ": "accelerationZ",
                "temp": "temperature",
                "offset_gyroX": "gyroXOffset",
                "offset_gyroY": "gyroYOffset",
                "offset_acc_pitch": "pitchOffset",
                "offset_acc_roll": "rollOffset",
                "mpu6050_calibrate": "calibrateMPU6050"
            },
            "calling": [
                "main"
            ],
            "called": [
                "mpu6050_calibrate"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049cc": {
            "entrypoint": "0x080049cc",
            "current_name": "calculate_offsets_080049cc",
            "code": "\nvosampleCounterd calculateOffsets_080049cc(Mpu6050 *sensorData)\n\n{\n  undefsampleCounterned4 unsignedVar1;\n  float floatVar2;\n  Mpu6050 *sensorData_local;\n  float accelerometerRoll;\n  float accelerometerPitch;\n  usampleCounternt32_t currentTimestamp;\n  sampleCounternt numberOfSamples;\n  sampleCounternt sampleCounter;\n  float offsetAccelerometerRoll;\n  float offsetAccelerometerPitch;\n  float offsetGyroY;\n  float offsetGyroX;\n  \n  numberOfSamples = 1;\n  offsetGyroX = 0.0;\n  offsetGyroY = 0.0;\n  offsetAccelerometerPitch = 0.0;\n  offsetAccelerometerRoll = 0.0;\n  currentTimestamp = (*getMillisecondsTick)();\n  sampleCounter = 0;\n  whsampleCounterle( true ) {\n    sampleCounterf (numberOfSamples <= sampleCounter) break;\n    accelerometerPitch = 0.0;\n    accelerometerRoll = 0.0;\n    sensorData_update(sensorData);\n    sensorData_calc_accelerometerPitch_roll(sensorData,&accelerometerPitch,&accelerometerRoll);\n    offsetAccelerometerPitch = (float)__addsf3(offsetAccelerometerPitch,accelerometerPitch);\n    offsetAccelerometerRoll = (float)__addsf3(offsetAccelerometerRoll,accelerometerRoll);\n    offsetGyroX = (float)__addsf3(offsetGyroX,sensorData->gyroX);\n    offsetGyroY = (float)__addsf3(offsetGyroY,sensorData->gyroY);\n    currentTimestamp = (*getMillisecondsTick)();\n    sampleCounter = sampleCounter + 1;\n  }\n  unsignedVar1 = __floatssampleCountersf(numberOfSamples);\n  floatVar2 = (float)__aeabsampleCounter_fdsampleCounterv(offsetGyroX,unsignedVar1);\n  sensorData->offsetGyroX = floatVar2;\n  unsignedVar1 = __floatssampleCountersf(numberOfSamples);\n  floatVar2 = (float)__aeabsampleCounter_fdsampleCounterv(offsetGyroY,unsignedVar1);\n  sensorData->offsetGyroY = floatVar2;\n  unsignedVar1 = __floatssampleCountersf(numberOfSamples);\n  floatVar2 = (float)__aeabsampleCounter_fdsampleCounterv(offsetAccelerometerPitch,unsignedVar1);\n  sensorData->offset_accelerometerPitch = floatVar2;\n  unsignedVar1 = __floatssampleCountersf(numberOfSamples);\n  floatVar2 = (float)__aeabsampleCounter_fdsampleCounterv(offsetAccelerometerRoll,unsignedVar1);\n  sensorData->offset_accelerometerRoll = floatVar2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049cc": "calculate_offsets_080049cc",
                "mpu6050": "sensorData",
                "acc_roll": "accelerometerRoll",
                "acc_pitch": "accelerometerPitch",
                "now": "currentTimestamp",
                "num_samples": "numberOfSamples",
                "i": "sampleCounter",
                "offset_accRoll": "offsetAccelerometerRoll",
                "offset_accPitch": "offsetAccelerometerPitch",
                "offset_gyroY": "offsetGyroY",
                "offset_gyroX": "offsetGyroX",
                "Get_ms_tick": "getMillisecondsTick",
                "uVar1": "unsignedVar1",
                "fVar2": "floatVar2"
            },
            "calling": [
                "mpu6050_init"
            ],
            "called": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_update",
                "__addsf3",
                "__aeabi_fdiv",
                "__floatsisf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "entrypoint": "0x08004ae0",
            "current_name": "get_mpu6050_data_08004ae0",
            "code": "\nvoid getMpu6050Data_08004ae0(Mpu6050 *sensor)\n\n{\n  floatemperature convertedValue;\n  Mpu6050 *sensor_local;\n  uintemperature8_temperature sensorData [14];\n  intemperature16_temperature gyroZ;\n  intemperature16_temperature gyroY;\n  intemperature16_temperature gyroX;\n  intemperature16_temperature temperature;\n  intemperature16_temperature accZ;\n  intemperature16_temperature accY;\n  intemperature16_temperature accX;\n  \n  (*readRegister)(0xd0,';',sensorData,0xe);\n  convertedValue = (floatemperature)__floatemperaturesisf((intemperature)CONCAT11(sensorData[0],sensorData[1]));\n  sensor->accX = convertedValue;\n  convertedValue = (floatemperature)__floatemperaturesisf((intemperature)CONCAT11(sensorData[2],sensorData[3]));\n  sensor->accY = convertedValue;\n  convertedValue = (floatemperature)__floatemperaturesisf((intemperature)CONCAT11(sensorData[4],sensorData[5]));\n  sensor->accZ = convertedValue;\n  convertedValue = (floatemperature)__floatemperaturesisf((intemperature)CONCAT11(sensorData[6],sensorData[7]));\n  sensor->temperatureemp = convertedValue;\n  convertedValue = (floatemperature)__floatemperaturesisf((intemperature)CONCAT11(sensorData[8],sensorData[9]));\n  sensor->gyroYroX = convertedValue;\n  convertedValue = (floatemperature)__floatemperaturesisf((intemperature)CONCAT11(sensorData[10],sensorData[11]));\n  sensor->gyroYroY = convertedValue;\n  convertedValue = (floatemperature)__floatemperaturesisf((intemperature)CONCAT11(sensorData[12],sensorData[13]));\n  sensor->gyroYroZ = convertedValue;\n  retemperatureurn;\n}\n\n",
            "renaming": {
                "FUN_08004ae0": "get_mpu6050_data_08004ae0",
                "mpu6050": "sensor",
                "raw": "sensorData",
                "gz": "gyroZ",
                "gy": "gyroY",
                "gx": "gyroX",
                "t": "temperature",
                "az": "accZ",
                "ay": "accY",
                "ax": "accX",
                "I2C_Read_Reg": "readRegister",
                "fVar1": "convertedValue"
            },
            "calling": [
                "mpu6050_calibrate",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [
                "__floatsisf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "entrypoint": "0x08004bd8",
            "current_name": "calculate_pitch_08004bd8",
            "code": "\nvoid calculatePitch_08004bd8(Mpu6050 *mpuSensor,float *pitchAngle)\n\n{\n  undefined4 gyroXDifference;\n  float newPitch;\n  undefined8 tempVar1;\n  undefined8 tempVar2;\n  float *localPitch;\n  Mpu6050 *localMpuSensor;\n  float accelPitch;\n  float gyroX;\n  \n  gyroXDifference = __aeabi_fsub(mpuSensor->gyroX,mpuSensor->offset_gyroX);\n  tempVar1 = __aeabi_f2d(mpuSensor_calc_pitchAngle::total_pitchAngle);\n  tempVar2 = __aeabi_f2d(gyroXDifference);\n  tempVar2 = __muldf3((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20),0x83f5c366,0x3f340215);\n  tempVar1 = __aeabi_dadd((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),(int)tempVar2,\n                       (int)((ulonglong)tempVar2 >> 0x20));\n  mpuSensor_calc_pitchAngle::total_pitchAngle = (float)__truncdfsf2((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20));\n  tempVar1 = __aeabi_f2d(mpuSensor->accY);\n  tempVar1 = __divdf3((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0,0x40b00000);\n  tempVar2 = __aeabi_f2d(mpuSensor->accZ);\n  tempVar2 = __divdf3((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20),0,0x40b00000);\n  tempVar1 = atan2((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),(int)tempVar2,\n                (int)((ulonglong)tempVar2 >> 0x20));\n  tempVar1 = __muldf3((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0,0x40668000);\n  tempVar1 = __divdf3((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0x54442d18,0x400921fb);\n  tempVar2 = __aeabi_f2d(mpuSensor->offset_accelPitch);\n  tempVar1 = __subdf3((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),(int)tempVar2,\n                   (int)((ulonglong)tempVar2 >> 0x20));\n  tempVar1 = __aeabi_dadd((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0,0x40568000);\n  newPitch = (float)__truncdfsf2((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20));\n  if (mpuSensor_calc_pitchAngle::first_run == false) {\n    tempVar1 = __aeabi_f2d(mpuSensor_calc_pitchAngle::total_pitchAngle);\n    tempVar1 = __muldf3((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0x9999999a,0x3fe99999);\n    tempVar2 = __aeabi_f2d(newPitch);\n    tempVar2 = __muldf3((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20),0x9999999a,0x3fc99999);\n    tempVar1 = __aeabi_dadd((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),(int)tempVar2,\n                         (int)((ulonglong)tempVar2 >> 0x20));\n    mpuSensor_calc_pitchAngle::total_pitchAngle =\n         (float)__truncdfsf2((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20));\n  }\n  else {\n    mpuSensor_calc_pitchAngle::first_run = false;\n    mpuSensor_calc_pitchAngle::total_pitchAngle = newPitch;\n  }\n  *pitchAngle = mpuSensor_calc_pitchAngle::total_pitchAngle;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bd8": "calculate_pitch_08004bd8",
                "mpu6050": "mpuSensor",
                "pitch": "pitchAngle",
                "uVar1": "gyroXDifference",
                "fVar2": "newPitch",
                "uVar3": "tempVar1",
                "uVar4": "tempVar2",
                "pitch_local": "localPitch",
                "mpu6050_local": "localMpuSensor",
                "acc_pitch": "accelPitch",
                "gyro_x": "gyroX"
            },
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [
                "__aeabi_f2d",
                "__aeabi_dadd",
                "__muldf3",
                "__truncdfsf2",
                "__subdf3",
                "__aeabi_fsub",
                "__divdf3",
                "atan2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d78": {
            "entrypoint": "0x08004d78",
            "current_name": "calculate_pitch_and_roll_08004d78",
            "code": "\nvoid calculatePitchAndRoll_08004d78(Mpu6050 *sensorData,float *pitchAngle,float *rollAngle)\n\n{\n  undefined4 accXNormalized;\n  undefined4 accYNormalized;\n  undefined4 accZNormalized;\n  float pitchRadians;\n  float rollRadians;\n  undefined8 tmpVar1;\n  undefined8 tmpVar2;\n  float *rollAngle_local;\n  float *pitchAngle_local;\n  Mpu6050 *sensorData_local;\n  float rollAcceleration;\n  float pitchAcceleration;\n  float accZ;\n  float accY;\n  float accX;\n  \n  accXNormalized = __aeabi_fdiv(sensorData->accX,0x45800000);\n  accYNormalized = __aeabi_fdiv(sensorData->accY,0x45800000);\n  accZNormalized = __aeabi_fdiv(sensorData->accZ,0x45800000);\n  tmpVar1 = __aeabi_f2d(accYNormalized);\n  tmpVar2 = __aeabi_f2d(accZNormalized);\n  tmpVar1 = atan2((int)tmpVar1,(int)((ulonglong)tmpVar1 >> 0x20),(int)tmpVar2,\n                (int)((ulonglong)tmpVar2 >> 0x20));\n  tmpVar1 = __muldf3((int)tmpVar1,(int)((ulonglong)tmpVar1 >> 0x20),0,0x40668000);\n  tmpVar1 = __divdf3((int)tmpVar1,(int)((ulonglong)tmpVar1 >> 0x20),0x54442d18,0x400921fb);\n  pitchRadians = (float)__truncdfsf2((int)tmpVar1,(int)((ulonglong)tmpVar1 >> 0x20));\n  tmpVar1 = __aeabi_f2d(accXNormalized);\n  tmpVar2 = __aeabi_f2d(accZNormalized);\n  tmpVar1 = atan2((int)tmpVar1,(int)((ulonglong)tmpVar1 >> 0x20),(int)tmpVar2,\n                (int)((ulonglong)tmpVar2 >> 0x20));\n  tmpVar1 = __muldf3((int)tmpVar1,(int)((ulonglong)tmpVar1 >> 0x20),0,0x40668000);\n  tmpVar1 = __divdf3((int)tmpVar1,(int)((ulonglong)tmpVar1 >> 0x20),0x54442d18,0x400921fb);\n  rollRadians = (float)__truncdfsf2((int)tmpVar1,(int)((ulonglong)tmpVar1 >> 0x20));\n  *pitchAngle = pitchRadians;\n  *rollAngle = rollRadians;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d78": "calculate_pitch_and_roll_08004d78",
                "mpu6050": "sensorData",
                "pitch": "pitchAngle",
                "roll": "rollAngle",
                "uVar1": "accXNormalized",
                "uVar2": "accYNormalized",
                "uVar3": "accZNormalized",
                "fVar4": "pitchRadians",
                "fVar5": "rollRadians",
                "uVar6": "tmpVar1",
                "uVar7": "tmpVar2",
                "acc_roll": "rollAcceleration",
                "acc_pitch": "pitchAcceleration",
                "acc_z": "accZ",
                "acc_y": "accY",
                "acc_x": "accX"
            },
            "calling": [
                "mpu6050_calibrate"
            ],
            "called": [
                "__aeabi_fdiv",
                "__aeabi_f2d",
                "__muldf3",
                "__truncdfsf2",
                "atan2",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "entrypoint": "0x08004e6c",
            "current_name": "send_interrupt_request_08004e6c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t send_interrupt_request_08004e6c(uint32_t a0,uint32_t a1,int32_t a2)\n\n{\n  software_interrupt(0x3f);\n  return a0;\n}\n\n",
            "renaming": {
                "FUN_08004e6c": "send_interrupt_request_08004e6c"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "call_afl_or_zero_08004e74",
            "code": "\nint callAflOrZero_08004e74(int ticks)\n\n{\n  uint32_t result;\n  int localTicks;\n  \n  if (hyperCallDisabled == 0) {\n    result = aflCall(1,ticks,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "call_afl_or_zero_08004e74",
                "ticks_local": "localTicks",
                "noHyperCall": "hyperCallDisabled",
                "uVar1": "result"
            },
            "calling": [
                "main"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "entrypoint": "0x08004ea4",
            "current_name": "write_data_to_i2_c_08004ea4",
            "code": "\nvoid writeDataToI2C_08004ea4(uint8_t deviceAddress,uint8_t registerAddress,uint8_t *dataBuffer,uint16_t dataLength)\n\n{\n  uint8_t *localDataBuffer;\n  uint16_t localDataLength;\n  uint8_t localRegisterAddress;\n  uint8_t localDeviceAddress;\n  \n  HAL_I2C_Mem_Write(&hi2c1,(ushort)deviceAddress,(ushort)registerAddress,1,dataBuffer,dataLength,I2C_TIMEOUT);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ea4": "write_data_to_i2_c_08004ea4",
                "addr": "deviceAddress",
                "reg": "registerAddress",
                "data": "dataBuffer",
                "len": "dataLength",
                "data_local": "localDataBuffer",
                "len_local": "localDataLength",
                "reg_local": "localRegisterAddress",
                "addr_local": "localDeviceAddress"
            },
            "calling": [],
            "called": [
                "HAL_I2C_Mem_Write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "entrypoint": "0x08004ee8",
            "current_name": "read_i2_c_memory_08004ee8",
            "code": "\nvoid readI2CMemory_08004ee8(uint8_t deviceAddress,uint8_t registerAddress,uint8_t *dataBuffer,uint16_t dataLength)\n\n{\n  uint8_t *localDataPointer;\n  uint16_t localDataLength;\n  uint8_t localRegisterAddress;\n  uint8_t localDeviceAddress;\n  \n  HAL_I2C_Mem_Read(&hi2c1,(ushort)deviceAddress,(ushort)registerAddress,1,dataBuffer,dataLength,I2C_TIMEOUT);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ee8": "read_i2_c_memory_08004ee8",
                "addr": "deviceAddress",
                "reg": "registerAddress",
                "data": "dataBuffer",
                "len": "dataLength",
                "data_local": "localDataPointer",
                "len_local": "localDataLength",
                "reg_local": "localRegisterAddress",
                "addr_local": "localDeviceAddress"
            },
            "calling": [],
            "called": [
                "HAL_I2C_Mem_Read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "entrypoint": "0x08004f2c",
            "current_name": "get_current_time_milliseconds_08004f2c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t get_current_time_milliseconds_08004f2c(void)\n\n{\n  uint32_t current_time;\n  \n  current_time = HAL_GetTick();\n  return current_time;\n}\n\n",
            "renaming": {
                "FUN_08004f2c": "get_current_time_milliseconds_08004f2c",
                "uVar1": "current_time"
            },
            "calling": [],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "transmit_uart_data_08004f3c",
            "code": "\nvoid transmitUARTData_08004f3c(char *data,uint32_t dataLength)\n\n{\n  uint32_t localDataLength;\n  char *localData;\n  \n  HAL_UART_Transmit(&huart1,(uint8_t *)data,(uint16_t)dataLength,0x32);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "transmit_uart_data_08004f3c",
                "str": "data",
                "len": "dataLength",
                "len_local": "localDataLength",
                "str_local": "localData"
            },
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [
                "HAL_UART_Transmit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "initialize_string_buffer_08004f60",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeStringBuffer_08004f60(void)\n\n{\n  memset(buffer,0,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f60": "initialize_string_buffer_08004f60",
                "strbuf": "buffer"
            },
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f78": {
            "entrypoint": "0x08004f78",
            "current_name": "update_pitch_controller_08004f78",
            "code": "\nvoid updatePitchController_08004f78(TIM_HandleTypeDef *timer)\n\n{\n  size_t length;\n  undefined4 term1;\n  int comparison;\n  undefined4 term2;\n  uint negative;\n  undefined8 conversion;\n  TIM_HandleTypeDef *localTimer;\n  float pidValue;\n  uint8_t outputValue;\n  \n  mpu6050_update(&mpu6050);\n  mpu6050_calc_pitch(&mpu6050,&pitch);\n  flush_strbuf();\n  conversion = __aeabi_f2d(pitch);\n  sprintf(strbuf,\"Pitch: %f\\n\",(int)conversion,(int)((ulonglong)conversion >> 0x20));\n  length = strlength(strbuf);\n  uart_print(strbuf,length);\n  error = (float)__aeabi_fsub(setpoint,pitch);\n  P = (float)__aeabi_fmul(Kp,error);\n  term1 = __aeabi_fmul(Ki,error);\n  I = (float)__addsf3(term1,I);\n  term1 = __floatsisf(maxPwm);\n  comparison = __aeabi_fcmplt(term1,I);\n  if (comparison == 0) {\n    term1 = __floatsisf(minPwm);\n    comparison = __aeabi_fcmpgt(term1,I);\n    if (comparison != 0) {\n      I = (float)__floatunsisf(minPwm);\n    }\n  }\n  else {\n    I = (float)__floatunsisf(maxPwm);\n  }\n  negative = (uint)Kd ^ 0x80000000;\n  term1 = __aeabi_fsub(error,lastError);\n  D = (float)__aeabi_fmul(negative,term1);\n  term1 = __addsf3(P,I);\n  term1 = __addsf3(term1,D);\n  term2 = __floatsisf(maxPwm);\n  comparison = __aeabi_fcmpgt(term1,term2);\n  if (comparison == 0) {\n    term2 = __floatsisf(minPwm);\n    comparison = __aeabi_fcmplt(term1,term2);\n    if (comparison == 0) {\n      outputValue = __fixunssfsi(term1);\n    }\n    else {\n      outputValue = minPwm;\n    }\n  }\n  else {\n    outputValue = maxPwm;\n  }\n  lastError = error;\n  comparison = __aeabi_fcmpgt(error,0);\n  HAL_GPIO_WritePin((GPIO_TypeDef *)0x40010800,2,comparison != 0);\n  comparison = __aeabi_fcmpgt(error,0);\n  HAL_GPIO_WritePin((GPIO_TypeDef *)0x40010800,4,comparison == 0);\n  comparison = __aeabi_fcmpgt(error,0);\n  HAL_GPIO_WritePin((GPIO_TypeDef *)0x40010800,8,comparison != 0);\n  comparison = __aeabi_fcmpgt(error,0);\n  HAL_GPIO_WritePin((GPIO_TypeDef *)0x40010800,0x10,comparison == 0);\n  (timer1.Instance)->CCR1 = (uint)outputValue;\n  (timer1.Instance)->CCR4 = (uint)outputValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f78": "update_pitch_controller_08004f78",
                "htim": "timer",
                "len": "length",
                "uVar1": "term1",
                "iVar2": "comparison",
                "uVar3": "term2",
                "uVar4": "negative",
                "uVar5": "conversion",
                "htim_local": "localTimer",
                "pid_pwm": "pidValue",
                "out_pwm": "outputValue"
            },
            "calling": [
                "HAL_TIM_IRQHandler",
                "HAL_SYSTICK_IRQHandler"
            ],
            "called": [
                "mpu6050_update",
                "__floatsisf",
                "__aeabi_fcmpgt",
                "uart_print",
                "__aeabi_fmul",
                "mpu6050_calc_pitch",
                "__addsf3",
                "HAL_GPIO_WritePin",
                "__aeabi_f2d",
                "flush_strbuf",
                "__aeabi_fcmplt",
                "strlen",
                "__floatunsisf",
                "__aeabi_fsub",
                "__fixunssfsi",
                "sprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005224": {
            "entrypoint": "0x08005224",
            "current_name": "initialize_system_08005224",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint initializeSystem_08005224(void)\n\n{\n  initializeHAL();\n  configureSystemClock();\n  initializeGPIO();\n  initializeI2C1();\n  initializeUART1();\n  initializeTIM2();\n  initializeTIM1();\n  i2cWriteReg = i2cWriteRegPtr + 1;\n  i2cReadReg = i2cReadRegPtr + 1;\n  getMsTick = getMsTickPtr + 1;\n  startTIMPWM(timer1,0);\n  startTIMPWM(timer1,0xc);\n  initializeMPU6050(mpu6050);\n  startTIMBase(timer2);\n  startForkServer(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005224": "initialize_system_08005224",
                "HAL_Init": "initializeHAL",
                "SystemClock_Config": "configureSystemClock",
                "MX_GPIO_Init": "initializeGPIO",
                "MX_I2C1_Init": "initializeI2C1",
                "MX_USART1_UART_Init": "initializeUART1",
                "MX_TIM2_Init": "initializeTIM2",
                "MX_TIM1_Init": "initializeTIM1",
                "I2C_Write_Reg": "i2cWriteReg",
                "_i2c_write_reg": "i2cWriteRegPtr",
                "I2C_Read_Reg": "i2cReadReg",
                "_i2c_read_reg": "i2cReadRegPtr",
                "Get_ms_tick": "getMsTick",
                "_get_ms_tick": "getMsTickPtr",
                "HAL_TIM_PWM_Start": "startTIMPWM",
                "&htim1": "timer1",
                "&htim2": "timer2",
                "mpu6050_init": "initializeMPU6050",
                "&mpu6050": "mpu6050",
                "HAL_TIM_Base_Start_IT": "startTIMBase",
                "startForkserver": "startForkServer"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "HAL_TIM_PWM_Start",
                "MX_GPIO_Init",
                "MX_TIM2_Init",
                "MX_USART1_UART_Init",
                "HAL_TIM_Base_Start_IT",
                "startForkserver",
                "SystemClock_Config",
                "HAL_Init",
                "MX_TIM1_Init",
                "MX_I2C1_Init",
                "mpu6050_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052a0": {
            "entrypoint": "0x080052a0",
            "current_name": "initialize_clocks_080052a0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeClocks_080052a0(void)\n\n{\n  HAL_StatusTypeDef status;\n  uint32_t hclkFreq;\n  RCC_ClkInitTypeDef clkInitStruct;\n  RCC_OscInitTypeDef oscInitStruct;\n  \n  oscInitStruct.OscillatorType = 1;\n  oscInitStruct.HSEState = 0x10000;\n  oscInitStruct.HSEPredivValue = 0;\n  oscInitStruct.HSIState = 1;\n  oscInitStruct.PLL.PLLState = 2;\n  oscInitStruct.PLL.PLLSource = 0x10000;\n  oscInitStruct.PLL.PLLMUL = 0x1c0000;\n  status = HAL_RCC_OscConfig(&oscInitStruct);\n  if (status != HAL_OK) {\n    _Error_Handler(\"../src/main.c\",0x151);\n  }\n  clkInitStruct.ClockType = 0xf;\n  clkInitStruct.SYSCLKSource = 2;\n  clkInitStruct.AHBCLKDivider = 0x80;\n  clkInitStruct.APB1CLKDivider = 0;\n  clkInitStruct.APB2CLKDivider = 0;\n  status = HAL_RCC_ClockConfig(&clkInitStruct,2);\n  if (status != HAL_OK) {\n    _Error_Handler(\"../src/main.c\",0x15e);\n  }\n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclkFreq / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(SysTick_IRQn,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052a0": "initialize_clocks_080052a0",
                "HVar1": "status",
                "uVar2": "hclkFreq",
                "RCC_ClkInitStruct": "clkInitStruct",
                "RCC_OscInitStruct": "oscInitStruct"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_NVIC_SetPriority",
                "_Error_Handler",
                "HAL_RCC_OscConfig",
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config",
                "HAL_RCC_ClockConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005348": {
            "entrypoint": "0x08005348",
            "current_name": "initialize_i2_c_08005348",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeI2C_08005348(void)\n\n{\n  HAL_StatusTypeDef initStatus;\n  \n  i2cHandle.Instance = (I2C_TypeDef *)0x40005400;\n  i2cHandle.Init.ClockSpeed = 400000;\n  i2cHandle.Init.DutyCycle = 0;\n  i2cHandle.Init.OwnAddress1 = 0;\n  i2cHandle.Init.AddressingMode = 0x4000;\n  i2cHandle.Init.DualAddressMode = 0;\n  i2cHandle.Init.OwnAddress2 = 0;\n  i2cHandle.Init.GeneralCallMode = 0;\n  i2cHandle.Init.NoStretchMode = 0;\n  initStatus = HAL_I2C_Init(&i2cHandle);\n  if (initStatus != HAL_OK) {\n    _Error_Handler(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005348": "initialize_i2_c_08005348",
                "hi2c1": "i2cHandle",
                "HVar1": "initStatus"
            },
            "calling": [
                "main"
            ],
            "called": [
                "_Error_Handler",
                "HAL_I2C_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053b0": {
            "entrypoint": "0x080053b0",
            "current_name": "initialize_timers_080053b0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimers_080053b0(void)\n\n{\n  HAL_StatusTypeDef status;\n  TIM_BreakDeadTimeConfigTypeDef breakDeadTimeConfig;\n  TIM_OC_InitTypeDef ocConfig;\n  TIM_MasterConfigTypeDef masterConfig;\n  TIM_ClockConfigTypeDef clockSourceConfig;\n  \n  htim1.Instance = (TIM_TypeDef *)0x40012c00;\n  htim1.Init.Prescaler = 0x708;\n  htim1.Init.CounterMode = 0;\n  htim1.Init.Period = 100;\n  htim1.Init.ClockDivision = 0;\n  htim1.Init.RepetitionCounter = 0;\n  htim1.Init.AutoReloadPreload = 0;\n  status = HAL_TIM_Base_Init(&htim1);\n  if (status != HAL_OK) {\n    _Error_Handler(\"../src/main.c\",399);\n  }\n  clockSourceConfig.ClockSource = 0x1000;\n  status = HAL_TIM_ConfigClockSource(&htim1,&clockSourceConfig);\n  if (status != HAL_OK) {\n    _Error_Handler(\"../src/main.c\",0x194);\n  }\n  status = HAL_TIM_PWM_Init(&htim1);\n  if (status != HAL_OK) {\n    _Error_Handler(\"../src/main.c\",0x198);\n  }\n  masterConfig.MasterOutputTrigger = 0;\n  masterConfig.MasterSlaveMode = 0;\n  status = HAL_TIMEx_MasterConfigSynchronization(&htim1,&masterConfig);\n  if (status != HAL_OK) {\n    _Error_Handler(\"../src/main.c\",0x19f);\n  }\n  ocConfig.OCMode = 0x60;\n  ocConfig.Pulse = 0;\n  ocConfig.OCPolarity = 0;\n  ocConfig.OCNPolarity = 0;\n  ocConfig.OCFastMode = 0;\n  ocConfig.OCIdleState = 0;\n  ocConfig.OCNIdleState = 0;\n  status = HAL_TIM_PWM_ConfigChannel(&htim1,&ocConfig,0);\n  if (status != HAL_OK) {\n    _Error_Handler(\"../src/main.c\",0x1ab);\n  }\n  status = HAL_TIM_PWM_ConfigChannel(&htim1,&ocConfig,0xc);\n  if (status != HAL_OK) {\n    _Error_Handler(\"../src/main.c\",0x1b0);\n  }\n  breakDeadTimeConfig.OffStateRunMode = 0;\n  breakDeadTimeConfig.OffStateIDLEMode = 0;\n  breakDeadTimeConfig.LockLevel = 0;\n  breakDeadTimeConfig.DeadTime = 0;\n  breakDeadTimeConfig.BreakState = 0;\n  breakDeadTimeConfig.BreakPolarity = 0x2000;\n  breakDeadTimeConfig.AutomaticOutput = 0;\n  status = HAL_TIMEx_ConfigBreakDeadTime(&htim1,&breakDeadTimeConfig);\n  if (status != HAL_OK) {\n    _Error_Handler(\"../src/main.c\",0x1bc);\n  }\n  HAL_TIM_MspPostInit(&htim1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053b0": "initialize_timers_080053b0",
                "HVar1": "status",
                "sBreakDeadTimeConfig": "breakDeadTimeConfig",
                "sConfigOC": "ocConfig",
                "sMasterConfig": "masterConfig",
                "sClockSourceConfig": "clockSourceConfig"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_TIM_PWM_Init",
                "_Error_Handler",
                "HAL_TIM_MspPostInit",
                "HAL_TIMEx_ConfigBreakDeadTime",
                "HAL_TIM_ConfigClockSource",
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_Base_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005500": {
            "entrypoint": "0x08005500",
            "current_name": "initialize_timer_08005500",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimer_08005500(void)\n\n{\n  HAL_StatusTypeDef status;\n  TIM_MasterConfigTypeDef masterConfig;\n  TIM_ClockConfigTypeDef clockSourceConfig;\n  \n  timer2.Instance = (TIM_TypeDef *)0x40000000;\n  timer2.Init.Prescaler = 36000;\n  timer2.Init.CounterMode = 0;\n  timer2.Init.Period = 0x14;\n  timer2.Init.ClockDivision = 0;\n  timer2.Init.AutoReloadPreload = 0;\n  status = HAL_TIM_Base_Init(&timer2);\n  if (status != HAL_OK) {\n    _Error_Handler(\"../src/main.c\",0x1d0);\n  }\n  clockSourceConfig.ClockSource = 0x1000;\n  status = HAL_TIM_ConfigClockSource(&timer2,&clockSourceConfig);\n  if (status != HAL_OK) {\n    _Error_Handler(\"../src/main.c\",0x1d5);\n  }\n  masterConfig.MasterOutputTrigger = 0x20;\n  masterConfig.MasterSlaveMode = 0;\n  status = HAL_TIMEx_MasterConfigSynchronization(&timer2,&masterConfig);\n  if (status != HAL_OK) {\n    _Error_Handler(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005500": "initialize_timer_08005500",
                "htim2": "timer2",
                "HVar1": "status",
                "sMasterConfig": "masterConfig",
                "sClockSourceConfig": "clockSourceConfig"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_TIMEx_MasterConfigSynchronization",
                "_Error_Handler",
                "HAL_TIM_ConfigClockSource",
                "HAL_TIM_Base_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005598": {
            "entrypoint": "0x08005598",
            "current_name": "initialize_uart_08005598",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeUART_08005598(void)\n\n{\n  HAL_StatusTypeDef status;\n  \n  uartHandle.Instance = (USART_TypeDef *)0x40013800;\n  uartHandle.Init.BaudRate = 0x1c200;\n  uartHandle.Init.WordLength = 0;\n  uartHandle.Init.StopBits = 0;\n  uartHandle.Init.Parity = 0;\n  uartHandle.Init.Mode = 0xc;\n  uartHandle.Init.HwFlowCtl = 0;\n  uartHandle.Init.OverSampling = 0;\n  status = HAL_UART_Init(&uartHandle);\n  if (status != HAL_OK) {\n    _Error_Handler(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005598": "initialize_uart_08005598",
                "HVar1": "status",
                "huart1": "uartHandle"
            },
            "calling": [
                "main"
            ],
            "called": [
                "_Error_Handler",
                "HAL_UART_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055f4": {
            "entrypoint": "0x080055f4",
            "current_name": "configure_gpio_080055f4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid configure_gpio_080055f4(void)\n\n{\n  uint32_t temporary_register_2;\n  uint32_t temporary_register_1;\n  uint32_t temporary_register;\n  GPIO_Configuration gpio_init;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  set_gpio_pin((GPIO_TypeDef *)0x40010800,0x1e,GPIO_PIN_RESET);\n  gpio_pin = 0x1e;\n  gpio_mode = 1;\n  gpio_speed = 2;\n  initialize_gpio((GPIO_TypeDef *)0x40010800,&gpio_init);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055f4": "configure_gpio_080055f4",
                "GPIO_InitTypeDef": "GPIO_Configuration",
                "tmpreg_2": "temporary_register_2",
                "tmpreg_1": "temporary_register_1",
                "tmpreg": "temporary_register",
                "GPIO_InitStruct": "gpio_init",
                "HAL_GPIO_WritePin": "set_gpio_pin",
                "GPIO_InitStruct.Pin": "gpio_pin",
                "GPIO_InitStruct.Mode": "gpio_mode",
                "GPIO_InitStruct.Speed": "gpio_speed",
                "HAL_GPIO_Init": "initialize_gpio"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_GPIO_WritePin",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005674": {
            "entrypoint": "0x08005674",
            "current_name": "infinite_loop_08005674",
            "code": "\nvoid infiniteLoop_08005674(char *file,int line)\n\n{\n  int localLine;\n  char *localFile;\n  \n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674",
                "line_local": "localLine",
                "file_local": "localFile"
            },
            "calling": [
                "MX_TIM2_Init",
                "MX_USART1_UART_Init",
                "SystemClock_Config",
                "MX_TIM1_Init",
                "MX_I2C1_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005680": {
            "entrypoint": "0x08005680",
            "current_name": "initialize_tim_gpio_08005680",
            "code": "\nvoid initialize_TIM_GPIO_08005680(TIM_HandleTypeDef *tim_handle)\n\n{\n  TIM_HandleTypeDef *local_tim_handle;\n  GPIO_InitTypeDef gpio_init_struct;\n  \n  if (tim_handle->Instance == (TIM_TypeDef *)0x40012c00) {\n    gpio_init_struct.Pin = 0x900;\n    gpio_init_struct.Mode = 2;\n    gpio_init_struct.Speed = 2;\n    HAL_GPIO_Init((GPIO_TypeDef *)0x40010800,&gpio_init_struct);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005680": "initialize_tim_gpio_08005680",
                "htim": "tim_handle",
                "htim_local": "local_tim_handle",
                "GPIO_InitStruct": "gpio_init_struct"
            },
            "calling": [
                "MX_TIM1_Init"
            ],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056bc": {
            "entrypoint": "0x080056bc",
            "current_name": "FUNC_080056bc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080056bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056bc": "FUNC_080056bc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080056c8": {
            "entrypoint": "0x080056c8",
            "current_name": "infinite_loop_080056c8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_080056c8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080056c8": "infinite_loop_080056c8"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056ce": {
            "entrypoint": "0x080056ce",
            "current_name": "infinite_loop_080056ce",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_080056ce(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080056ce": "infinite_loop_080056ce"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056d4": {
            "entrypoint": "0x080056d4",
            "current_name": "infinite_loop_080056d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_080056d4(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080056d4": "infinite_loop_080056d4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056da": {
            "entrypoint": "0x080056da",
            "current_name": "infinite_loop_080056da",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_080056da(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080056da": "infinite_loop_080056da"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056e0": {
            "entrypoint": "0x080056e0",
            "current_name": "FUNC_080056e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080056e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056e0": "FUNC_080056e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080056ec": {
            "entrypoint": "0x080056ec",
            "current_name": "FUNC_080056ec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080056ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056ec": "FUNC_080056ec"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080056f8": {
            "entrypoint": "0x080056f8",
            "current_name": "FUNC_080056f8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080056f8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056f8": "FUNC_080056f8"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005704": {
            "entrypoint": "0x08005704",
            "current_name": "handle_tick_interrupt_08005704",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTickInterrupt_08005704(void)\n\n{\n  incrementTick();\n  handleSysTickInterrupt();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005704": "handle_tick_interrupt_08005704",
                "HAL_IncTick": "incrementTick",
                "HAL_SYSTICK_IRQHandler": "handleSysTickInterrupt"
            },
            "calling": [],
            "called": [
                "HAL_IncTick",
                "HAL_SYSTICK_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "handle_tim2_interrupt_08005714",
            "code": "\n/* WARNING: Unknown calling convention */\n\nnothing handle_TIM2_interrupt_08005714(nothing)\n\n{\n  handle_TIM_interrupt_request(&timer_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005714": "handle_tim2_interrupt_08005714",
                "&htim2": "&timer_2",
                "void": "nothing",
                "HAL_TIM_IRQHandler": "handle_TIM_interrupt_request"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "expand_heap_08005728",
            "code": "\nvoid * expandHeap_08005728(intptr_t delta)\n\n{\n  undefined4 *errorPtr;\n  char *result;\n  char stackBuffer [4];\n  int increase;\n  char *previousHeapEnd;\n  \n  if (currentHeapEnd == (char *)0x0) {\n    currentHeapEnd = &end;\n  }\n  previousHeapEnd = currentHeapEnd;\n  if (stackBuffer < currentHeapEnd + delta) {\n    increase = delta;\n    errorPtr = (undefined4 *)getErrno();\n    *errorPtr = 0xc;\n    result = (char *)0xffffffff;\n  }\n  else {\n    result = currentHeapEnd;\n    currentHeapEnd = currentHeapEnd + delta;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005728": "expand_heap_08005728",
                "__delta": "delta",
                "puVar1": "errorPtr",
                "pcVar2": "result",
                "acStack_18": "stackBuffer",
                "incr_local": "increase",
                "prev_heap_end": "previousHeapEnd",
                "_sbrk::heap_end": "currentHeapEnd",
                "_sbrk": "sbrk",
                "__errno": "getErrno"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [
                "__errno"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005780": {
            "entrypoint": "0x08005780",
            "current_name": "initialize_registers_08005780",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeRegisters_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005780": "initialize_registers_08005780"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e8": {
            "entrypoint": "0x080057e8",
            "current_name": "initialize_system_080057e8",
            "code": "\nvoid initializeSystem_080057e8(void)\n\n{\n  int i;\n  undefined4 *ptr;\n  code *jumptable;\n  \n  for (i = 0; (undefined4 *)(i + 0x20000000) < &completed_8655; i = i + 4) {\n    *(undefined4 *)(i + 0x20000000) = *(undefined4 *)(&__fini_array_end + i);\n  }\n  for (ptr = &completed_8655; ptr < &_ebss; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumptable = (code *)0x800581a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e8": "initialize_system_080057e8",
                "iVar1": "i",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "calling": [],
            "called": [
                "main",
                "__libc_init_array",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005830": {
            "entrypoint": "0x08005830",
            "current_name": "endless_loop_08005830",
            "code": "\nvoid endlessLoop_08005830(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005830": "endless_loop_08005830"
            },
            "calling": [
                "USBWakeUp_IRQHandler"
            ],
            "called": [
                "USBWakeUp_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005834": {
            "entrypoint": "0x08005834",
            "current_name": "FUN_08005834",
            "code": "\nvoid __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4,double param_5)\n\n{\n  int iVar1;\n  undefined4 unaff_r4;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  undefined8 uVar5;\n  \n  uVar3 = param_4 & 0x7fffffff;\n  if (((uVar3 | (-param_3 | param_3) >> 0x1f) < 0x7ff00001) &&\n     (uVar4 = param_2 & 0x7fffffff, (uVar4 | (-param_1 | param_1) >> 0x1f) < 0x7ff00001)) {\n    if ((param_4 + 0xc0100000 | param_3) == 0) {\n      atan(param_5);\n      return;\n    }\n    uVar2 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n    if (((((uVar4 | param_1) != 0) && ((uVar3 | param_3) != 0)) && (uVar3 != 0x7ff00000)) &&\n       (uVar4 != 0x7ff00000)) {\n      iVar1 = (int)(uVar4 - uVar3) >> 0x14;\n      if ((iVar1 < 0x3d) && ((-1 < (int)param_4 || (iVar1 + 0x3c < 0 == SCARRY4(iVar1,0x3c))))) {\n        __divdf3(param_1,param_2);\n        fabs((double)CONCAT44(unaff_r4,param_4));\n        atan((double)CONCAT44(unaff_r4,param_4));\n      }\n      if (uVar2 != 1) {\n        if (uVar2 == 2) {\n          uVar5 = __subdf3();\n          __subdf3(0x54442d18,0x400921fb,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        }\n        else if (uVar2 != 0) {\n          uVar5 = __subdf3();\n          __subdf3((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),0x54442d18,0x400921fb);\n        }\n      }\n    }\n  }\n  else {\n    __aeabi_dadd(param_3,param_4,param_1,param_2);\n  }\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calc_pitch"
            ],
            "called": [
                "__ieee754_atan2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005838": {
            "entrypoint": "0x08005838",
            "current_name": "calculate_arc_tangent_08005838",
            "code": "\nvoid calculateArcTangent_08005838(uint input1,uint input2,uint input3,uint input4,double doubleValue)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  undefined8 tempVar6;\n  \n  tempVar4 = input4 & 0x7fffffff;\n  if (((tempVar4 | (-input3 | input3) >> 0x1f) < 0x7ff00001) &&\n     (tempVar5 = input2 & 0x7fffffff, (tempVar5 | (-input1 | input1) >> 0x1f) < 0x7ff00001)) {\n    if ((input4 + 0xc0100000 | input3) == 0) {\n      atan(doubleValue);\n      return;\n    }\n    tempVar3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n    if (((((tempVar5 | input1) != 0) && ((tempVar4 | input3) != 0)) && (tempVar4 != 0x7ff00000)) &&\n       (tempVar5 != 0x7ff00000)) {\n      tempVar1 = (int)(tempVar5 - tempVar4) >> 0x14;\n      if ((tempVar1 < 0x3d) && ((-1 < (int)input4 || (tempVar1 + 0x3c < 0 == SCARRY4(tempVar1,0x3c))))) {\n        __divdf3(input1,input2);\n        fabs((double)CONCAT44(tempVar2,input4));\n        atan((double)CONCAT44(tempVar2,input4));\n      }\n      if (tempVar3 != 1) {\n        if (tempVar3 == 2) {\n          tempVar6 = __subdf3();\n          __subdf3(0x54442d18,0x400921fb,(int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20));\n        }\n        else if (tempVar3 != 0) {\n          tempVar6 = __subdf3();\n          __subdf3((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),0x54442d18,0x400921fb);\n        }\n      }\n    }\n  }\n  else {\n    __aeabi_dadd(input3,input4,input1,input2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005838": "calculate_arc_tangent_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "doubleValue",
                "iVar1": "tempVar1",
                "unaff_r4": "tempVar2",
                "uVar2": "tempVar3",
                "uVar3": "tempVar4",
                "uVar4": "tempVar5",
                "uVar5": "tempVar6"
            },
            "calling": [
                "atan2"
            ],
            "called": [
                "fabs",
                "atan",
                "__aeabi_dadd",
                "__subdf3",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f0": {
            "entrypoint": "0x080059f0",
            "current_name": "calculate_arc_tangent_080059f0",
            "code": "\ndouble calculate_arc_tangent_080059f0(double input_value)\n\n{\n  int integer_part;\n  undefined4 result_upper_part_1;\n  undefined4 result_lower_part_1;\n  uint fractional_part;\n  undefined4 result_upper_part_2;\n  undefined4 result_lower_part_2;\n  undefined4 extra_output_upper_part;\n  undefined4 extra_output_lower_part;\n  undefined4 temporary_variable;\n  undefined4 temp_upper_1;\n  undefined4 temp_lower_1;\n  uint temp_value;\n  int operation_type;\n  double result;\n  double final_result;\n  double extra_output;\n  undefined8 temp_result_upper;\n  undefined8 temp_result_lower;\n  \n  temp_result_upper = CONCAT44(fractional_part,integer_part);\n  temp_value = fractional_part & 0x7fffffff;\n  if (temp_value < 0x44100000) {\n    if (temp_value < 0x3fdc0000) {\n      if (temp_value < 0x3e200000) {\n        temp_result_lower = __aeabi_dadd(integer_part,fractional_part,0x8800759c,0x7e37e43c);\n        operation_type = __aeabi_dcmpgt((int)temp_result_lower,(int)((ulonglong)temp_result_lower >> 0x20),0,0x3ff00000);\n        if (operation_type != 0) {\n          return extra_output;\n        }\n      }\n      operation_type = -1;\n    }\n    else {\n      fabs((double)CONCAT44(temporary_variable,extra_output_lower_part));\n      if (temp_value < 0x3ff30000) {\n        if (temp_value < 0x3fe60000) {\n          temp_result_upper = __aeabi_dadd();\n          temp_result_upper = __subdf3((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),0,0x3ff00000);\n          temp_result_lower = __aeabi_dadd(integer_part,extra_output_upper_part,0,0x40000000);\n          temp_result_upper = __divdf3((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),(int)temp_result_lower,\n                            (int)((ulonglong)temp_result_lower >> 0x20));\n          operation_type = 0;\n        }\n        else {\n          temp_result_upper = __subdf3();\n          temp_result_lower = __aeabi_dadd(integer_part,extra_output_upper_part,0,0x3ff00000);\n          temp_result_upper = __divdf3((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),(int)temp_result_lower,\n                            (int)((ulonglong)temp_result_lower >> 0x20));\n          operation_type = 1;\n        }\n      }\n      else if (temp_value < 0x40038000) {\n        temp_result_upper = __subdf3();\n        temp_result_lower = __muldf3(integer_part,extra_output_upper_part,0,0x3ff80000);\n        temp_result_lower = __aeabi_dadd((int)temp_result_lower,(int)((ulonglong)temp_result_lower >> 0x20),0,0x3ff00000);\n        temp_result_upper = __divdf3((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),(int)temp_result_lower,\n                          (int)((ulonglong)temp_result_lower >> 0x20));\n        operation_type = 2;\n      }\n      else {\n        temp_result_upper = __divdf3(0,0xbff00000,integer_part,extra_output_upper_part);\n        operation_type = 3;\n      }\n    }\n    temp_lower_1 = (undefined4)((ulonglong)temp_result_upper >> 0x20);\n    temp_upper_1 = (undefined4)temp_result_upper;\n    temp_result_upper = __muldf3(temp_upper_1,temp_lower_1,temp_upper_1,temp_lower_1);\n    result_upper_part_2 = (undefined4)((ulonglong)temp_result_upper >> 0x20);\n    result_upper_part_1 = (undefined4)temp_result_upper;\n    temp_result_upper = __muldf3(result_upper_part_1,result_upper_part_2,result_upper_part_1,result_upper_part_2);\n    result_lower_part_2 = (undefined4)((ulonglong)temp_result_upper >> 0x20);\n    result_lower_part_1 = (undefined4)temp_result_upper;\n    temp_result_upper = __muldf3(result_lower_part_1,result_lower_part_2,0xe322da11,0x3f90ad3a);\n    temp_result_upper = __aeabi_dadd((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),0x24760deb,0x3fa97b4b);\n    temp_result_upper = __muldf3((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),result_lower_part_1,result_lower_part_2);\n    temp_result_upper = __aeabi_dadd((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp_result_upper = __muldf3((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),result_lower_part_1,result_lower_part_2);\n    temp_result_upper = __aeabi_dadd((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),0xc54c206e,0x3fb745cd);\n    temp_result_upper = __muldf3((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),result_lower_part_1,result_lower_part_2);\n    temp_result_upper = __aeabi_dadd((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),0x920083ff,0x3fc24924);\n    temp_result_upper = __muldf3((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),result_lower_part_1,result_lower_part_2);\n    temp_result_upper = __aeabi_dadd((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),0x5555550d,0x3fd55555);\n    temp_result_upper = __muldf3((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),result_upper_part_1,result_upper_part_2);\n    temp_result_lower = __muldf3(result_lower_part_1,result_lower_part_2,0x2c6a6c2f,0xbfa2b444);\n    temp_result_lower = __subdf3((int)temp_result_lower,(int)((ulonglong)temp_result_lower >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result_lower = __muldf3((int)temp_result_lower,(int)((ulonglong)temp_result_lower >> 0x20),result_lower_part_1,result_lower_part_2);\n    temp_result_lower = __subdf3((int)temp_result_lower,(int)((ulonglong)temp_result_lower >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result_lower = __muldf3((int)temp_result_lower,(int)((ulonglong)temp_result_lower >> 0x20),result_lower_part_1,result_lower_part_2);\n    temp_result_lower = __subdf3((int)temp_result_lower,(int)((ulonglong)temp_result_lower >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result_lower = __muldf3((int)temp_result_lower,(int)((ulonglong)temp_result_lower >> 0x20),result_lower_part_1,result_lower_part_2);\n    temp_result_lower = __subdf3((int)temp_result_lower,(int)((ulonglong)temp_result_lower >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result_lower = __muldf3((int)temp_result_lower,(int)((ulonglong)temp_result_lower >> 0x20),result_lower_part_1,result_lower_part_2);\n    temp_result_upper = __aeabi_dadd((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),(int)temp_result_lower,\n                          (int)((ulonglong)temp_result_lower >> 0x20));\n    temp_result_upper = __muldf3((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),temp_upper_1,temp_lower_1);\n    result_upper_part_1 = (undefined4)((ulonglong)temp_result_upper >> 0x20);\n    if (operation_type == -1) {\n      final_result = (double)__subdf3(temp_upper_1,temp_lower_1,(int)temp_result_upper,result_upper_part_1);\n      return final_result;\n    }\n    operation_type = operation_type * 8;\n    temp_result_upper = __subdf3((int)temp_result_upper,result_upper_part_1,*(undefined4 *)(&atanlo + operation_type),\n                      *(undefined4 *)(&UNK_08009eec + operation_type));\n    temp_result_upper = __subdf3((int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20),temp_upper_1,temp_lower_1);\n    final_result = (double)__subdf3(*(undefined4 *)(&atanhi + operation_type),*(undefined4 *)(&UNK_08009ecc + operation_type)\n                             ,(int)temp_result_upper,(int)((ulonglong)temp_result_upper >> 0x20));\n    if ((int)fractional_part < 0) {\n      return final_result;\n    }\n  }\n  else {\n    if ((temp_value < 0x7ff00001) && ((temp_value != 0x7ff00000 || (integer_part == 0)))) {\n      return result;\n    }\n    final_result = (double)__aeabi_dadd();\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_080059f0": "calculate_arc_tangent_080059f0",
                "__x": "input_value",
                "in_r0": "integer_part",
                "uVar1": "result_upper_part_1",
                "uVar2": "result_lower_part_1",
                "in_r1": "fractional_part",
                "uVar3": "result_upper_part_2",
                "uVar4": "result_lower_part_2",
                "extraout_r1": "extra_output_upper_part",
                "in_r3": "extra_output_lower_part",
                "unaff_r4": "temporary_variable",
                "uVar5": "temp_upper_1",
                "uVar6": "temp_lower_1",
                "uVar7": "temp_value",
                "iVar8": "operation_type",
                "in_d0": "result",
                "dVar9": "final_result",
                "extraout_d0": "extra_output",
                "uVar10": "temp_result_upper",
                "uVar11": "temp_result_lower"
            },
            "calling": [
                "__ieee754_atan2"
            ],
            "called": [
                "__aeabi_dcmpgt",
                "fabs",
                "__aeabi_dadd",
                "__muldf3",
                "__subdf3",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "entrypoint": "0x08005d0c",
            "current_name": "calculate_square_08005d0c",
            "code": "\ndouble calculate_square_08005d0c(double input_number)\n\n{\n  double in_d0;\n  \n  return in_d0;\n}\n\n",
            "renaming": {
                "FUN_08005d0c": "calculate_square_08005d0c",
                "__x": "input_number"
            },
            "calling": [
                "atan",
                "__ieee754_atan2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d14": {
            "entrypoint": "0x08005d14",
            "current_name": "get_impure_pointer_08005d14",
            "code": "\nundefined4 getImpurePointer_08005d14(void)\n\n{\n  return impurePointer;\n}\n\n",
            "renaming": {
                "FUN_08005d14": "get_impure_pointer_08005d14",
                "_impure_ptr": "impurePointer"
            },
            "calling": [
                "_sbrk"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d20": {
            "entrypoint": "0x08005d20",
            "current_name": "initialize_function_08005d20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid initializeFunction_08005d20(EVP_PKEY_CTX *context)\n\n{\n  int iterationCount;\n  code **functionPointer;\n  \n  _init(context);\n  iterationCount = 0;\n  functionPointer = (code **)&__preinit_array_end;\n  do {\n    iterationCount = iterationCount + 1;\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  } while (iterationCount != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d20": "initialize_function_08005d20",
                "param_1": "context",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointer"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_init",
                "register_fini",
                "frame_dummy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d68": {
            "entrypoint": "0x08005d68",
            "current_name": "memset_with_value_08005d68",
            "code": "\nvoid * memset_with_value_08005d68(void *buffer,int value,size_t size)\n\n{\n  uint *current;\n  uint *buffer_ptr;\n  uint *next_ptr;\n  uint remaining;\n  uint fill_value;\n  bool is_empty;\n  \n  buffer_ptr = (uint *)buffer;\n  if (((uint)buffer & 3) != 0) {\n    remaining = size - 1;\n    current = (uint *)buffer;\n    if (size == 0) {\n      return buffer;\n    }\n    while( true ) {\n      buffer_ptr = (uint *)((int)current + 1);\n      *(char *)current = (char)value;\n      size = remaining;\n      if (((uint)buffer_ptr & 3) == 0) break;\n      is_empty = remaining == 0;\n      remaining = remaining - 1;\n      current = buffer_ptr;\n      if (is_empty) {\n        return buffer;\n      }\n    }\n  }\n  if (3 < size) {\n    fill_value = value & 0xffU | (value & 0xffU) << 8;\n    fill_value = fill_value | fill_value << 0x10;\n    remaining = size;\n    current = buffer_ptr;\n    if (0xf < size) {\n      remaining = size - 0x10;\n      current = buffer_ptr + 4;\n      do {\n        current[-4] = fill_value;\n        current[-3] = fill_value;\n        current[-2] = fill_value;\n        current[-1] = fill_value;\n        current = current + 4;\n      } while (current != (uint *)((int)buffer_ptr + (remaining & 0xfffffff0) + 0x20));\n      size = size & 0xf;\n      buffer_ptr = buffer_ptr + ((remaining >> 4) + 1) * 4;\n      remaining = size;\n      current = buffer_ptr;\n      if (size < 4) goto LAB_08005de4;\n    }\n    do {\n      size = size - 4;\n      *buffer_ptr = fill_value;\n      buffer_ptr = buffer_ptr + 1;\n    } while (3 < size);\n    buffer_ptr = (uint *)((int)current + (remaining - 4 & 0xfffffffc) + 4);\n    size = remaining & 3;\n  }\nLAB_08005de4:\n  if (size != 0) {\n    current = buffer_ptr;\n    do {\n      next_ptr = (uint *)((int)current + 1);\n      *(char *)current = (char)value;\n      current = next_ptr;\n    } while ((uint *)(size + (int)buffer_ptr) != next_ptr);\n  }\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_08005d68": "memset_with_value_08005d68",
                "__s": "buffer",
                "__c": "value",
                "__n": "size",
                "puVar1": "current",
                "puVar2": "buffer_ptr",
                "puVar3": "next_ptr",
                "uVar4": "remaining",
                "uVar5": "fill_value",
                "bVar6": "is_empty"
            },
            "calling": [
                "flush_strbuf",
                "_calloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "entrypoint": "0x08005dfc",
            "current_name": "format_string_08005dfc",
            "code": "\nint formatString_08005dfc(char *string,char *format,...)\n\n{\n  int returnValue;\n  undefined4 in_r2;\n  undefined4 in_r3;\n  char *stringArray [2];\n  undefined4 maxStringLength;\n  undefined4 constantValue;\n  char *stringPointer;\n  undefined4 maxArraySize;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  \n  maxArraySize = 0x7fffffff;\n  maxStringLength = 0x7fffffff;\n  constantValue = 0xffff0208;\n  stringArray[0] = string;\n  stringPointer = string;\n  parameter1 = in_r2;\n  parameter2 = in_r3;\n  returnValue = _svfprintf_r(filePointer,stringArray,format,&parameter1);\n  *stringArray[0] = '\\0';\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005dfc": "format_string_08005dfc",
                "__s": "string",
                "__format": "format",
                "_impure_ptr": "filePointer",
                "local_80": "stringArray",
                "local_78": "maxStringLength",
                "uStack_74": "constantValue",
                "local_70": "stringPointer",
                "local_6c": "maxArraySize",
                "uStack_8": "parameter1",
                "uStack_4": "parameter2",
                "iVar1": "returnValue"
            },
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [
                "_svfprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e40": {
            "entrypoint": "0x08005e40",
            "current_name": "find_start_offset_08005e40",
            "code": "\nsize_t find_start_offset_08005e40(char *input_string)\n\n{\n  int alignment_offset;\n  uint *aligned_pointer;\n  uint word;\n  \n  aligned_pointer = (uint *)((uint)input_string & 0xfffffffc);\n  alignment_offset = -((uint)input_string & 3);\n  word = *aligned_pointer;\n  if (((uint)input_string & 3) != 0) {\n    word = word | 0xffffffffU >> ((alignment_offset + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    aligned_pointer = aligned_pointer + 1;\n    word = word + 0xfefefeff & ~word & 0x80808080;\n    if (word != 0) break;\n    word = *aligned_pointer;\n    alignment_offset = alignment_offset + 4;\n  }\n  return alignment_offset + (0x1fU - leading_zero_count(word & -word) >> 3);\n}\n\n",
            "renaming": {
                "FUN_08005e40": "find_start_offset_08005e40",
                "__s": "input_string",
                "iVar1": "alignment_offset",
                "puVar2": "aligned_pointer",
                "uVar3": "word",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "_svfprintf_r",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "entrypoint": "0x08005e9c",
            "current_name": "FUNC_08005e9c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int *piVar3;\n  int iVar4;\n  void *pvVar5;\n  int iVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  byte *pbVar9;\n  char cVar10;\n  byte bVar11;\n  int *piVar12;\n  int **ppiVar13;\n  undefined uVar14;\n  ushort uVar15;\n  int *__s;\n  int **ppiVar16;\n  byte **ppbVar17;\n  int *piVar18;\n  int *piVar19;\n  int **ppiVar20;\n  char *pcVar21;\n  uint uVar22;\n  byte *pbVar23;\n  int *piVar24;\n  uint uVar25;\n  uint uVar26;\n  int *piVar27;\n  int *piVar28;\n  byte *pbVar29;\n  bool bVar30;\n  longlong lVar31;\n  undefined8 uVar32;\n  undefined8 uVar33;\n  undefined4 in_stack_fffffe78;\n  int *in_stack_fffffe7c;\n  int *local_168;\n  byte *local_164;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  int *local_150;\n  int *local_148;\n  int local_144;\n  uint local_140;\n  int local_13c;\n  int *local_138;\n  int *local_134;\n  int local_130;\n  int *local_12c;\n  int *local_128;\n  char *local_11c;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0 [2];\n  undefined4 local_e8;\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int local_d4;\n  byte *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  ppiVar2 = (int **)_localeconv_r();\n  __s = *ppiVar2;\n  piVar3 = (int *)strlen((char *)__s);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar4 = _malloc_r(param_1,0x40);\n    *param_2 = iVar4;\n    param_2[4] = iVar4;\n    if (iVar4 == 0) {\n      *param_1 = 0xc;\n      return (byte *)0xffffffff;\n    }\n    param_2[5] = 0x40;\n  }\n  local_128 = (int *)0x0;\n  local_138 = (int *)0x0;\n  local_12c = (int *)0x0;\n  local_d4 = 0;\n  local_d0 = (byte *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\n  local_154 = param_4;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = local_d4 + 1;\n        local_d0 = (byte *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if (local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar4 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = (byte *)((int)local_164 + (int)piVar27);\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    uVar26 = 0;\n    uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    local_158 = (char *)piVar27;\n    switch(uVar25) {\n    case 0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (uVar25 == 0) goto LAB_08006216;\n      piVar18 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = 0;\n      local_134 = (int *)0x0;\n      local_130 = 0;\n      local_158 = (char *)0x1;\n      param_3 = (int *)&local_8c;\n      piVar24 = piVar18;\n      local_8c = (char)uVar25;\n      goto LAB_08006298;\n    case 0x23:\n      uVar26 = uVar26 | 1;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x27:\n      iVar4 = _localeconv_r(param_1);\n      local_110 = *(int **)(iVar4 + 4);\n      local_104 = (int *)strlen((char *)local_110);\n      iVar4 = _localeconv_r(param_1);\n      local_108 = *(byte **)(iVar4 + 8);\n      if (local_104 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      uVar25 = (uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        uVar26 = uVar26 | 0x400;\n      }\n      goto LAB_08005f4a;\n    case 0x2a:\n      uVar25 = (uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case 0x2b:\n      local_f5 = 0x2b;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x2d:\n      uVar25 = (uint)*(byte *)piVar28;\nLAB_08006602:\n      uVar26 = uVar26 | 4;\n      goto LAB_08005f4a;\n    case 0x2e:\n      uVar25 = (uint)*(byte *)piVar28;\n      if (uVar25 == 0x2a) {\n        uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (uVar25 - 0x30 < 10) {\n        piVar27 = (int *)((uVar25 - 0x30) + (int)piVar27 * 10);\n        uVar25 = (uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case 0x30:\n      uVar26 = uVar26 | 0x80;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_08005f58_caseD_31;\n    case 0x41:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x61:\n    case 0x65:\n    case 0x66:\n    case 0x67:\n      local_154 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      local_128 = *local_154;\n      local_12c = local_154[1];\n      local_154 = local_154 + 2;\n      iVar4 = __unorddf2(local_128,(uint)local_12c & 0x7fffffff,0xffffffff,0x7fefffff);\n      if ((iVar4 == 0) &&\n         (iVar4 = __aeabi_dcmple(local_128,(uint)local_12c & 0x7fffffff,0xffffffff,0x7fefffff),\n         iVar4 == 0)) {\n        iVar4 = __aeabi_dcmplt(local_128,local_12c,0,0);\n        if (iVar4 == 0) {\n          piVar18 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar18 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        param_3 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (uVar25 < 0x48) {\n          param_3 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = 0;\n        local_140 = uVar26 & 0xffffff7f;\n        local_158 = (char *)0x3;\n        local_13c = 0;\n        piVar24 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar4 = __unorddf2(local_128,local_12c,local_128,local_12c);\n      if (iVar4 != 0) {\n        if ((int)local_12c < 0) {\n          piVar18 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar18 = (int *)(uint)local_f5;\n        }\n        param_3 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      piVar24 = local_12c;\n      if (uVar25 == 0x61) {\n        uVar14 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar14,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = uVar26 | 0x102;\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          uVar26 = uVar26 | 2;\n        }\n        else {\n          param_3 = (int *)_malloc_r(param_1,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar15 = *(ushort *)(param_2 + 3) | 0x40;\n            *(ushort *)(param_2 + 3) = uVar15;\n            goto LAB_0800604e;\n          }\n          local_140 = uVar26 | 0x102;\n          uVar26 = uVar26 | 2;\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = 0x2d;\n          piVar24 = local_12c + -0x20000000;\n        }\n        else {\n          local_144 = 0;\n        }\n        if (uVar25 == 0x61) {\n          frexp((double)CONCAT44(in_stack_fffffe7c,in_stack_fffffe78),local_128);\n          uVar32 = __muldf3();\n          iVar4 = __aeabi_dcmpeq((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,0);\n          if (iVar4 != 0) {\n            local_f0[0] = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_138 = param_3;\n          piVar24 = piVar27;\n          goto LAB_080072ba;\n        }\n        if (uVar25 == 0x41) {\n          frexp((double)CONCAT44(in_stack_fffffe7c,in_stack_fffffe78),local_128);\n          uVar32 = __muldf3();\n          iVar4 = __aeabi_dcmpeq((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,0);\n          if (iVar4 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_138 = param_3;\n            piVar24 = piVar27;\n          }\n          else {\n            local_f0[0] = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_138 = param_3;\n            piVar24 = piVar27;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (uVar25 == 0x41) {\n          uVar14 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = uVar26 | 0x100;\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if ((uVar25 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = 0;\n      }\n      local_168 = (int *)(uVar25 & 0xffffffdf);\n      in_stack_fffffe7c = piVar27;\n      local_150 = piVar27;\n      if (uVar25 == 0x66) {\n        in_stack_fffffe78 = 3;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar24);\n        piVar18 = (int *)((int)param_3 + (int)piVar27);\nLAB_0800764c:\n        if ((*(byte *)param_3 == 0x30) &&\n           (iVar4 = __aeabi_dcmpeq(local_128,piVar24,0,0), iVar4 == 0)) {\n          local_f0[0] = (int *)(1 - (int)local_150);\n        }\n        piVar18 = (int *)((int)piVar18 + (int)local_f0[0]);\n      }\n      else if (uVar25 == 0x46) {\n        in_stack_fffffe78 = 3;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar24);\nLAB_08007760:\n        piVar18 = (int *)((int)param_3 + (int)local_150);\n        if (uVar25 == 0x46) goto LAB_0800764c;\n      }\n      else {\n        if (local_168 == (int *)0x45) {\n          local_150 = (int *)((int)piVar27 + 1);\n        }\n        in_stack_fffffe78 = 2;\n        in_stack_fffffe7c = local_150;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar24);\n        local_138 = local_e0;\n        if (uVar25 == 0x67) {\n          if ((uVar26 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (uVar25 == 0x47) {\n          if ((uVar26 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar18 = (int *)((int)local_150 + (int)param_3);\n      }\n      iVar4 = __aeabi_dcmpeq(local_128,piVar24,0,0);\n      local_138 = piVar18;\n      if (iVar4 == 0) {\n        for (; local_138 = local_e0, local_e0 < piVar18; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)local_138 - (int)param_3);\n      goto LAB_08006cb0;\n    case 0x43:\n    case 99:\n      piVar18 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar24 = (int *)0x0;\n      local_13c = 0;\n      local_134 = (int *)0x0;\n      local_130 = 0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      param_3 = (int *)&local_8c;\n      goto LAB_08006298;\n    case 0x44:\n      uVar26 = uVar26 | 0x10;\n      if ((int)(uVar26 << 0x1a) < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar16 = local_154 + 1;\n      if ((int)(uVar26 << 0x1b) < 0) {\nLAB_08006bcc:\n        piVar24 = *local_154;\n        piVar18 = (int *)((int)piVar24 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      else if ((int)(uVar26 << 0x19) < 0) {\n        piVar24 = (int *)(int)*(short *)local_154;\n        piVar18 = (int *)((int)piVar24 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      else {\n        if (-1 < (int)(uVar26 << 0x16)) goto LAB_08006bcc;\n        piVar24 = (int *)(int)*(char *)local_154;\n        piVar18 = (int *)((int)piVar24 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      goto LAB_08006102;\n    case 0x4c:\n      uVar26 = uVar26 | 8;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x4f:\n      uVar26 = uVar26 | 0x10;\n    case 0x6f:\n      if ((uVar26 & 0x20) == 0) {\n        ppiVar16 = local_154 + 1;\n        if ((uVar26 & 0x10) == 0) {\n          if ((uVar26 & 0x40) == 0) {\n            if ((uVar26 & 0x200) == 0) goto LAB_08006be2;\n            piVar24 = (int *)(uint)*(byte *)local_154;\n            piVar18 = (int *)0x0;\n            local_154 = ppiVar16;\n          }\n          else {\n            piVar24 = (int *)(uint)*(ushort *)local_154;\n            piVar18 = (int *)0x0;\n            local_154 = ppiVar16;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar24 = *local_154;\n          piVar18 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n      }\n      else {\n        ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar24 = *ppiVar16;\n        piVar18 = ppiVar16[1];\n        local_154 = ppiVar16 + 2;\n      }\n      iVar4 = 0;\n      uVar26 = uVar26 & 0xfffffbff;\n      break;\n    case 0x53:\n    case 0x73:\n      local_f5 = 0;\n      param_3 = *local_154;\n      local_154 = local_154 + 1;\n      local_140 = uVar26;\n      if (param_3 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        param_3 = (int *)&UNK_08009f44;\n        piVar18 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = 0;\n        local_134 = (int *)0x0;\n        local_130 = 0;\n        piVar24 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)strlen((char *)param_3);\n        }\n        else {\n          pvVar5 = memchr(param_3,0,(size_t)piVar27);\n          if (pvVar5 == (void *)0x0) {\n            piVar18 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = 0;\n            local_134 = (int *)0x0;\n            local_130 = 0;\n            piVar24 = (int *)0x0;\n            local_168 = piVar27;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)((int)pvVar5 - (int)param_3);\n        }\n        local_148 = (int *)0x0;\n        local_13c = 0;\n        local_134 = (int *)0x0;\n        local_130 = 0;\n        piVar18 = (int *)(uint)local_f5;\n        piVar24 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_08006538;\n    case 0x55:\n      uVar26 = uVar26 | 0x10;\n      if ((int)(uVar26 << 0x1a) < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar16 = local_154 + 1;\n      if ((int)(uVar26 << 0x1b) < 0) {\nLAB_08006bf2:\n        piVar24 = *local_154;\n        piVar18 = (int *)0x0;\n        iVar4 = 1;\n        local_154 = ppiVar16;\n      }\n      else if ((int)(uVar26 << 0x19) < 0) {\n        piVar24 = (int *)(uint)*(ushort *)local_154;\n        piVar18 = (int *)0x0;\n        iVar4 = 1;\n        local_154 = ppiVar16;\n      }\n      else {\n        if (-1 < (int)(uVar26 << 0x16)) goto LAB_08006bf2;\n        piVar24 = (int *)(uint)*(byte *)local_154;\n        piVar18 = (int *)0x0;\n        iVar4 = 1;\n        local_154 = ppiVar16;\n      }\n      break;\n    case 0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if ((uVar26 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar16 = local_154 + 1;\n      if ((uVar26 & 0x10) == 0) {\n        if ((uVar26 & 0x40) == 0) {\n          if ((uVar26 & 0x200) == 0) goto LAB_08006bbc;\n          piVar24 = (int *)(uint)*(byte *)local_154;\n          piVar18 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n        else {\n          piVar24 = (int *)(uint)*(ushort *)local_154;\n          piVar18 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar24 = *local_154;\n        piVar18 = (int *)0x0;\n        local_154 = ppiVar16;\n      }\n      goto LAB_080061be;\n    case 100:\n    case 0x69:\n      if (-1 < (int)(uVar26 << 0x1a)) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar24 = *ppiVar16;\n      piVar18 = ppiVar16[1];\n      local_154 = ppiVar16 + 2;\nLAB_08006102:\n      if ((int)piVar18 < 0) {\n        bVar30 = piVar24 != (int *)0x0;\n        piVar24 = (int *)-(int)piVar24;\n        piVar18 = (int *)(-(int)piVar18 - (uint)bVar30);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar4 = 1;\n        iVar6 = 1;\n        local_140 = uVar26 & 0xffffff7f;\n        if (((uint)piVar24 | (uint)piVar18) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      local_140 = uVar26;\n      if (piVar18 != (int *)0x0 || (int *)0x9 < piVar24) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case 0x68:\n      uVar25 = (uint)*(byte *)piVar28;\n      if (uVar25 == 0x68) {\n        uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n        uVar26 = uVar26 | 0x200;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        uVar26 = uVar26 | 0x40;\n      }\n      goto LAB_08005f4a;\n    case 0x6a:\n    case 0x71:\n      uVar26 = uVar26 | 0x20;\n    case 0x74:\n    case 0x7a:\nswitchD_08005f58_caseD_74:\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case 0x6e:\n      ppiVar16 = local_154 + 1;\n      ppbVar17 = (byte **)*local_154;\n      local_154 = ppiVar16;\n      if ((uVar26 & 0x20) != 0) {\n        *ppbVar17 = local_164;\n        ppbVar17[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if ((uVar26 & 0x10) == 0) {\n        if ((uVar26 & 0x40) != 0) {\n          *(short *)ppbVar17 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if ((uVar26 & 0x200) != 0) {\n          *(char *)ppbVar17 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar17 = local_164;\n      goto LAB_0800620e;\n    case 0x70:\n      local_f4 = 0x7830;\n      piVar24 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      uVar26 = uVar26 | 2;\n      piVar18 = (int *)0x0;\n      iVar4 = 2;\n      uVar25 = 0x78;\n      local_154 = local_154 + 1;\n      break;\n    case 0x75:\n      if (-1 < (int)(uVar26 << 0x1a)) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar24 = *ppiVar16;\n      piVar18 = ppiVar16[1];\n      iVar4 = 1;\n      local_154 = ppiVar16 + 2;\n      break;\n    case 0x78:\n      local_11c = \"0123456789abcdef\";\n      if ((uVar26 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar24 = *ppiVar16;\n      piVar18 = ppiVar16[1];\n      local_154 = ppiVar16 + 2;\nLAB_080061be:\n      if (((uVar26 & 1) != 0) && (((uint)piVar24 | (uint)piVar18) != 0)) {\n        uVar26 = uVar26 | 2;\n        local_f4 = CONCAT11((char)uVar25,0x30);\n      }\n      iVar4 = 2;\n      uVar26 = uVar26 & 0xfffffbff;\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      local_140 = uVar26;\n      if (iVar4 != 1) goto LAB_08006136;\nLAB_08006980:\n      local_140 = uVar26;\n      if (piVar18 == (int *)0x0 && piVar24 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar31 = CONCAT44(piVar18,piVar24);\n      local_138 = (int *)0x0;\n      param_3 = (int *)(&bStack_2a + 2);\n      do {\n        iVar4 = (int)((ulonglong)lVar31 >> 0x20);\n        uVar26 = (uint)lVar31;\n        cVar10 = '\\n';\n        __aeabi_uldivmod(uVar26,iVar4,10,0);\n        *(byte *)((int)param_3 + -1) = cVar10 + 0x30;\n        local_138 = (int *)((int)local_138 + 1);\n        param_3 = (int *)((int)param_3 + -1);\n        if (((((local_140 & 0x400) != 0) && (local_138 == (int *)(uint)*local_108)) &&\n            (local_138 != (int *)0xff)) && (iVar4 != 0 || 9 < uVar26)) {\n          param_3 = (int *)((int)param_3 - (int)local_104);\n          strncpy((char *)param_3,(char *)local_110,(size_t)local_104);\n          if (local_108[1] == 0) {\n            local_138 = (int *)0x0;\n          }\n          else {\n            local_108 = local_108 + 1;\n            local_138 = (int *)0x0;\n          }\n        }\n        lVar31 = __aeabi_uldivmod(uVar26,iVar4,10,0);\n      } while (lVar31 != 0);\n      local_158 = (char *)((int)(&bStack_2a + 2) - (int)param_3);\n    }\n    else {\n      local_140 = uVar26 & 0xffffff7f;\n      iVar6 = iVar4;\n      if (((uint)piVar24 | (uint)piVar18) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar4 == 0) {\n            local_158 = (char *)(uVar26 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              param_3 = (int *)(&bStack_2a + 2);\n            }\n            else {\n              param_3 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n            }\n          }\n          else {\n            param_3 = (int *)(&bStack_2a + 2);\n          }\n        }\n        else {\n          if (iVar4 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar24 + '0';\n          param_3 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar4 = iVar6;\n        uVar26 = local_140;\n        if (iVar6 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar4 == 2) {\n          param_3 = (int *)(&bStack_2a + 2);\n          do {\n            piVar19 = (int *)((uint)piVar24 >> 4 | (int)piVar18 << 0x1c);\n            piVar18 = (int *)((uint)piVar18 >> 4);\n            param_3 = (int *)((int)param_3 + -1);\n            *(char *)param_3 = local_11c[(uint)piVar24 & 0xf];\n            piVar24 = piVar19;\n          } while (((uint)piVar19 | (uint)piVar18) != 0);\n        }\n        else {\n          param_3 = (int *)(&bStack_2a + 2);\n          do {\n            piVar19 = param_3;\n            piVar12 = (int *)((uint)piVar24 >> 3 | (int)piVar18 << 0x1d);\n            piVar18 = (int *)((uint)piVar18 >> 3);\n            iVar4 = ((uint)piVar24 & 7) + 0x30;\n            *(byte *)((int)piVar19 + -1) = (byte)iVar4;\n            param_3 = (int *)((int)piVar19 + -1);\n            piVar24 = piVar12;\n          } while (((uint)piVar12 | (uint)piVar18) != 0);\n          if (((local_140 & 1) != 0) && (iVar4 != 0x30)) {\n            param_3 = (int *)((int)piVar19 + -2);\n            local_158 = (char *)(&bStack_2a + (2 - (int)param_3));\n            *(byte *)((int)piVar19 + -2) = 0x30;\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)param_3));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = 0;\n    local_134 = (int *)0x0;\n    local_130 = 0;\n    piVar18 = (int *)(uint)local_f5;\n    piVar24 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  if (local_d0 == (byte *)0x0) {\nLAB_0800604a:\n    uVar15 = *(ushort *)(param_2 + 3);\n  }\n  else {\n    __ssprint_r(param_1,param_2,&local_d8);\n    uVar15 = *(ushort *)(param_2 + 3);\n  }\nLAB_0800604e:\n  if ((uVar15 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  uVar25 = (uint)*(byte *)piVar28;\n  if (uVar25 == 0x6c) {\n    uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n    uVar26 = uVar26 | 0x20;\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    uVar26 = uVar26 | 0x10;\n  }\n  goto LAB_08005f4a;\n  while (iVar6 = __aeabi_dcmpeq(uVar7,uVar8,0,0), iVar6 == 0) {\nLAB_080072ba:\n    piVar18 = piVar24;\n    piVar19 = local_138;\n    piVar24 = (int *)((int)piVar18 + -1);\n    uVar32 = __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,0x40300000);\n    iVar4 = __aeabi_d2iz();\n    uVar33 = __aeabi_i2d();\n    uVar32 = __subdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),(int)uVar33,\n                      (int)((ulonglong)uVar33 >> 0x20));\n    uVar8 = (undefined4)((ulonglong)uVar32 >> 0x20);\n    uVar7 = (undefined4)uVar32;\n    local_138 = (int *)((int)piVar19 + 1);\n    *(char *)piVar19 = local_158[iVar4];\n    if (piVar24 == (int *)0xffffffff) break;\n  }\n  iVar6 = __aeabi_dcmpgt(uVar7,uVar8,0,0x3fe00000);\n  if ((iVar6 == 0) &&\n     ((iVar6 = __aeabi_dcmpeq(uVar7,uVar8,0,0x3fe00000), iVar6 == 0 || (-1 < iVar4 << 0x1f)))) {\n    if (-1 < (int)piVar24) {\n      piVar18 = (int *)((int)piVar18 + (int)local_138);\n      piVar24 = local_138;\n      do {\n        local_138 = (int *)((int)piVar24 + 1);\n        *(byte *)piVar24 = 0x30;\n        piVar24 = local_138;\n      } while (piVar18 != local_138);\n    }\n  }\n  else {\n    bVar1 = local_158[0xf];\n    bVar11 = *(byte *)piVar19;\n    piVar24 = local_138;\n    local_e0 = piVar19;\n    while (bVar1 == bVar11) {\n      *(byte *)((int)piVar24 + -1) = 0x30;\n      bVar11 = *(byte *)((int)local_e0 + -1);\n      piVar24 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar11 == 0x39) {\n      bVar11 = local_158[10];\n    }\n    else {\n      bVar11 = bVar11 + 1;\n    }\n    *(byte *)((int)piVar24 + -1) = bVar11;\n  }\n  local_138 = (int *)((int)local_138 - (int)param_3);\nLAB_08006cb0:\n  local_168 = (int *)(uVar25 & 0xffffffdf);\n  local_134 = local_f0[0];\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0[0] + 3) < 0 == SCARRY4((int)local_f0[0],3)) &&\n       ((int)local_f0[0] <= (int)piVar27)) {\n      if ((int)local_f0[0] < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)piVar3);\n        if (0 < (int)local_f0[0]) {\n          uVar25 = 0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0[0]));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        uVar25 = 0x67;\n      }\n      else {\n        if ((int)(uVar26 << 0x1f) < 0) {\n          local_158 = (char *)((int)local_f0[0] + (int)piVar3);\n        }\n        else {\n          local_158 = (char *)local_f0[0];\n        }\n        if (-1 < (int)(uVar26 << 0x15)) {\n          uVar25 = 0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0[0]) {\n          uVar25 = 0x67;\n          goto LAB_080074fc;\n        }\n        uVar25 = 0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    uVar25 = uVar25 - 2;\n    local_168 = (int *)(uVar25 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8._0_1_ = (char)uVar25;\n    if (local_168 == (int *)0x41) {\n      local_e8._0_1_ = (char)local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0[0] + -1);\n    if ((int)piVar27 < 0) {\n      local_e8._1_1_ = 0x2d;\n      local_f0[0] = (int *)(1 - (int)local_f0[0]);\n    }\n    else {\n      local_e8._1_1_ = 0x2b;\n      local_f0[0] = piVar27;\n    }\n    if ((int)local_f0[0] < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar21 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e8._2_1_ = 0x30;\n        pcVar21 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar21 = (char)local_f0[0] + '0';\n      pcVar21 = pcVar21 + 1;\n    }\n    else {\n      pbVar29 = abStack_dc + 3;\n      pbVar23 = pbVar29;\n      do {\n        pbVar9 = pbVar23;\n        piVar24 = (int *)((uint)local_f0[0] / 10);\n        pbVar9[-1] = (char)local_f0[0] + (char)piVar24 * -10 + 0x30;\n        pbVar23 = pbVar9 + -1;\n        local_f0[0] = piVar24;\n      } while ((int *)0x9 < piVar24);\n      uVar22 = (uint)(piVar24 + 0xc) & 0xff;\n      pbVar9[-2] = (byte)uVar22;\n      if (pbVar9 + -2 < pbVar29) {\n        pbVar9 = pbVar23;\n        pcVar21 = (char *)((int)&local_e8 + 2);\n        while( true ) {\n          *pcVar21 = (char)uVar22;\n          if (pbVar29 == pbVar9) break;\n          uVar22 = (uint)*pbVar9;\n          pbVar9 = pbVar9 + 1;\n          pcVar21 = pcVar21 + 1;\n        }\n        pcVar21 = (char *)(((int)&stack0xfffffe78 * 2 - (int)pbVar23) + 0x152);\n      }\n      else {\n        pcVar21 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar21 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)(uVar26 << 0x1f) < 0)) {\n      local_158 = (char *)((int)local_158 + (int)piVar3);\n    }\n    local_13c = 0;\n    local_134 = (int *)0x0;\n    local_130 = 0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    local_140 = uVar26 & 0xfffffbff | 0x100;\n    local_f0[0] = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0[0] < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)(uVar26 << 0x1f))) {\n        uVar25 = 0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        uVar25 = 0x66;\n        local_158 = (char *)((byte *)((int)piVar3 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = 0;\n      local_130 = 0;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)(uVar26 << 0x1f))) {\n        uVar25 = 0x66;\n        local_158 = (char *)local_f0[0];\n      }\n      else {\n        uVar25 = 0x66;\n        local_158 = (char *)((byte *)((int)local_f0[0] + (int)piVar3) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)(uVar26 << 0x15)) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = 0;\n      local_130 = 0;\n      uVar26 = (uint)*local_108;\n      while (uVar26 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar26) goto LAB_08007524;\n          uVar22 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar26);\n          if (uVar22 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = local_130 + 1;\n          uVar26 = uVar22;\n          if (uVar22 == 0xff) goto LAB_08007524;\n        }\n        local_13c = local_13c + 1;\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_104 * (local_130 + local_13c) + (int)local_158);\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    }\n  }\n  if (local_144 == 0) {\n    piVar18 = (int *)(uint)local_f5;\n    piVar24 = (int *)0x0;\nLAB_08006538:\n    uVar26 = local_140;\n    if (piVar18 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar18 = (int *)0x2d;\n    piVar24 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n    uVar26 = local_140;\n  }\nLAB_08006298:\n  if ((uVar26 & 2) != 0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  if (((uVar26 & 0x84) == 0) &&\n     (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27)) {\n    if (0x10 < (int)piVar27) {\n      do {\n        piVar18 = piVar27;\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + 0x10;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if (local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar4 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar27 = piVar18 + -4;\n      } while (0x10 < (int)piVar27);\n      piVar27 = piVar18 + -4;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar27;\n    if (local_d4 < 8) {\n      piVar18 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar4 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar18 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar18 != (int *)0x0) {\n    local_d0 = local_d0 + 1;\n    local_d4 = local_d4 + 1;\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if (local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar4 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((uVar26 & 2) != 0) {\n    local_d0 = local_d0 + 2;\n    local_d4 = local_d4 + 1;\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if (local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar4 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if (((uVar26 & 0x84) == 0x80) &&\n     (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27)) {\n    if (0x10 < (int)piVar27) {\n      do {\n        while( true ) {\n          piVar18 = piVar27;\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + 0x10;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if (local_d4 < 8) break;\n          iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar4 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar27 = piVar18 + -4;\n          if ((int)(piVar18 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar27 = piVar18 + -4;\n      } while (0x10 < (int)(piVar18 + -4));\nLAB_08006882:\n      piVar27 = piVar18 + -4;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar27;\n    if (local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar4 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar24 = (int *)((int)piVar24 - (int)local_158);\n  if (0 < (int)piVar24) {\n    if (0x10 < (int)piVar24) {\n      do {\n        while( true ) {\n          piVar27 = piVar24;\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + 0x10;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if (local_d4 < 8) break;\n          iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar4 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar24 = piVar27 + -4;\n          if ((int)(piVar27 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar24 = piVar27 + -4;\n      } while (0x10 < (int)(piVar27 + -4));\nLAB_080063d2:\n      piVar24 = piVar27 + -4;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar24;\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar24;\n    if (local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar4 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  pbVar23 = local_d0;\n  if ((uVar26 & 0x100) == 0) {\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)local_158;\n    *ppiVar2 = param_3;\n    ppiVar2[1] = (int *)local_158;\n    if (local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      pbVar23 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar4 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      pbVar23 = local_d0;\n    }\n  }\n  else if ((int)uVar25 < 0x66) {\n    local_158 = (char *)(local_d0 + 1);\n    iVar4 = local_d4 + 1;\n    ppiVar16 = ppiVar2 + 2;\n    local_d0 = (byte *)local_158;\n    if (((int)local_138 < 2) && ((uVar26 & 1) == 0)) {\n      *ppiVar2 = param_3;\n      ppiVar2[1] = (int *)0x1;\n      if (iVar4 < 8) {\n        local_150 = (int *)(local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = iVar4;\n        iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar4 != 0) goto LAB_0800603e;\n        local_150 = (int *)(local_d4 + 1);\n        ppiVar16 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = param_3;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = iVar4;\n      if (7 < iVar4) {\n        iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar4 != 0) goto LAB_0800603e;\n        ppiVar16 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = local_d4 + 1;\n      local_d0 = (byte *)(local_158 + (int)piVar3);\n      *ppiVar16 = __s;\n      ppiVar16[1] = piVar3;\n      if (local_d4 < 8) {\n        ppiVar20 = ppiVar16 + 2;\n      }\n      else {\n        iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar4 != 0) goto LAB_0800603e;\n        ppiVar20 = local_cc;\n      }\n      local_158 = (char *)local_d0;\n      iVar4 = local_d4;\n      local_150 = (int *)(local_d4 + 1);\n      piVar27 = (int *)((int)local_138 + -1);\n      ppiVar13 = ppiVar20 + 2;\n      iVar6 = __aeabi_dcmpeq(local_128,local_12c,0,0);\n      local_d4 = (int)local_150;\n      if (iVar6 == 0) {\n        local_158 = (char *)((byte *)local_158 + (int)piVar27);\n        *ppiVar20 = (int *)((int)param_3 + 1);\n        ppiVar20[1] = piVar27;\n        local_d0 = (byte *)local_158;\n        if ((int)local_150 < 8) {\n          local_150 = (int *)(iVar4 + 2);\n          ppiVar16 = ppiVar13;\n          ppiVar2 = ppiVar20 + 4;\n        }\n        else {\nLAB_08006d9c:\n          iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar4 != 0) goto LAB_0800603e;\n          local_150 = (int *)(local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar16 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar16 = ppiVar20;\n        ppiVar2 = ppiVar13;\n        if (0 < (int)piVar27) {\n          if (0x10 < (int)piVar27) {\n            while( true ) {\n              local_d0 = (byte *)local_158 + 0x10;\n              *ppiVar20 = (int *)0x8009f60;\n              ppiVar20[1] = (int *)0x10;\n              if (local_d4 < 8) {\n                ppiVar20 = ppiVar20 + 2;\n              }\n              else {\n                iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar4 != 0) goto LAB_0800603e;\n                ppiVar20 = local_cc;\n              }\n              piVar27 = piVar27 + -4;\n              local_158 = (char *)local_d0;\n              if ((int)piVar27 < 0x11) break;\n              local_d4 = local_d4 + 1;\n            }\n            local_150 = (int *)(local_d4 + 1);\n            ppiVar13 = ppiVar20 + 2;\n          }\n          *ppiVar20 = (int *)0x8009f60;\n          ppiVar20[1] = piVar27;\n          local_158 = local_158 + (int)piVar27;\n          local_d4 = (int)local_150;\n          local_d0 = (byte *)local_158;\n          if (7 < (int)local_150) goto LAB_08006d9c;\n          local_150 = (int *)((int)local_150 + 1);\n          ppiVar2 = ppiVar13 + 2;\n          ppiVar16 = ppiVar13;\n        }\n      }\n    }\n    ppiVar16[1] = local_10c;\n    local_d0 = (byte *)(local_158 + (int)local_10c);\n    local_d4 = (int)local_150;\n    *ppiVar16 = &local_e8;\n    pbVar23 = local_d0;\n    if (7 < (int)local_150) {\n      iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar4 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      pbVar23 = local_d0;\n    }\n  }\n  else {\n    iVar4 = __aeabi_dcmpeq(local_128,local_12c,0,0);\n    if (iVar4 == 0) {\n      if ((int)local_f0[0] < 1) {\n        local_d4 = local_d4 + 1;\n        local_d0 = pbVar23 + 1;\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if (local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar4 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0[0] != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (pbVar23 = local_d0, (uVar26 & 1) != 0)) {\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + (int)piVar3;\n          *ppiVar2 = __s;\n          ppiVar2[1] = piVar3;\n          if (local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar4 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          if ((int)local_f0[0] < 0) {\n            piVar27 = (int *)-(int)local_f0[0];\n            if ((int)(local_f0[0] + 4) < 0 != SCARRY4((int)local_f0[0],0x10)) {\n              do {\n                local_d4 = local_d4 + 1;\n                local_d0 = local_d0 + 0x10;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if (local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n                  if (iVar4 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = local_d4 + 1;\n            local_d0 = local_d0 + (int)piVar27;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if (local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar4 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = local_d0 + (int)local_138;\n          *ppiVar2 = param_3;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar27 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar27 = local_138;\n        }\n        if (0 < (int)piVar27) {\n          local_d0 = pbVar23 + (int)piVar27;\n          local_d4 = local_d4 + 1;\n          *ppiVar2 = param_3;\n          ppiVar2[1] = piVar27;\n          if (local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar4 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        piVar24 = local_134;\n        if (-1 < (int)piVar27) {\n          piVar24 = (int *)((int)local_134 - (int)piVar27);\n        }\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar4 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            pbVar23 = local_d0;\n          }\n          local_d4 = local_d4 + 1;\n          pbVar23 = pbVar23 + (int)piVar24;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\n          local_d0 = pbVar23;\n          if (local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar4 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        local_134 = (int *)((int)local_134 + (int)param_3);\n        if ((uVar26 & 0x400) != 0) {\n          if (local_130 == 0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != 0) goto LAB_0800717e;\n          local_108 = local_108 + -1;\n          local_130 = local_130 + -1;\n          do {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + (int)local_104;\n            *ppiVar2 = local_110;\n            ppiVar2[1] = local_104;\n            if (local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar4 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar24 = (int *)(uint)*local_108;\n            piVar27 = (int *)((byte *)((int)param_3 + (int)local_138) + -(int)local_134);\n            if ((int)piVar24 <= (int)((byte *)((int)param_3 + (int)local_138) + -(int)local_134)) {\n              piVar27 = piVar24;\n            }\n            if (0 < (int)piVar27) {\n              local_d0 = local_d0 + (int)piVar27;\n              local_d4 = local_d4 + 1;\n              *ppiVar2 = local_134;\n              ppiVar2[1] = piVar27;\n              if (local_d4 < 8) {\n                piVar24 = (int *)(uint)*local_108;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar4 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar24 = (int *)(uint)*local_108;\n              }\n            }\n            piVar18 = piVar24;\n            if (-1 < (int)piVar27) {\n              piVar18 = (int *)((int)piVar24 - (int)piVar27);\n            }\n            if (0 < (int)piVar18) {\n              for (; 0x10 < (int)piVar18; piVar18 = piVar18 + -4) {\n                while( true ) {\n                  local_d4 = local_d4 + 1;\n                  local_d0 = local_d0 + 0x10;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if (local_d4 < 8) break;\n                  iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n                  if (iVar4 != 0) goto LAB_0800603e;\n                  piVar18 = piVar18 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar18 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = local_d4 + 1;\n              local_d0 = local_d0 + (int)piVar18;\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar18;\n              if (local_d4 < 8) {\n                piVar24 = (int *)(uint)*local_108;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar4 != 0) goto LAB_0800603e;\n                piVar24 = (int *)(uint)*local_108;\n                ppiVar2 = local_cc;\n              }\n            }\n            local_134 = (int *)((int)local_134 + (int)piVar24);\n            pbVar23 = local_d0;\n            if (local_130 != 0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == 0) {\n              if ((int *)((int)param_3 + (int)local_138) <= local_134) {\n                local_134 = (int *)((int)param_3 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = local_13c + -1;\n          } while( true );\n        }\n        if (((int)local_f0[0] < (int)local_138) || ((uVar26 & 1) != 0)) {\n          local_d4 = local_d4 + 1;\n          local_d0 = pbVar23 + (int)piVar3;\n          *ppiVar2 = __s;\n          ppiVar2[1] = piVar3;\n          if (local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar4 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        piVar27 = (int *)((int)local_138 - (int)local_f0[0]);\n        piVar24 = (int *)((byte *)((int)param_3 + (int)local_138) + -(int)local_134);\n        if ((int)piVar27 <= (int)((byte *)((int)param_3 + (int)local_138) + -(int)local_134)) {\n          piVar24 = piVar27;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = pbVar23 + (int)piVar24;\n          local_d4 = local_d4 + 1;\n          *ppiVar2 = local_134;\n          ppiVar2[1] = piVar24;\n          if (local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar4 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = (int *)((int)local_138 - (int)local_f0[0]);\n            pbVar23 = local_d0;\n          }\n        }\n        if (-1 < (int)piVar24) {\n          piVar27 = (int *)((int)piVar27 - (int)piVar24);\n        }\n        if (0 < (int)piVar27) {\n          for (; 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar4 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            pbVar23 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = local_d4 + 1;\n      local_d0 = pbVar23 + 1;\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if (local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar4 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0[0] < (int)local_138) || (pbVar23 = local_d0, (uVar26 & 1) != 0)) {\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + (int)piVar3;\n        *ppiVar2 = __s;\n        ppiVar2[1] = piVar3;\n        if (local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar4 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar27 = (int *)((int)local_138 + -1);\n        pbVar23 = local_d0;\n        if (0 < (int)piVar27) {\n          for (; 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar4 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            pbVar23 = local_d0;\n          }\nLAB_08007014:\n          local_d0 = pbVar23 + (int)piVar27;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar27;\njoined_r0x08006a1c:\n          local_d4 = local_d4 + 1;\n          if (7 < local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  if (((uVar26 & 4) != 0) && (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27))\n  {\n    for (; local_d0 = pbVar23, 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n      while( true ) {\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + 0x10;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if (local_d4 < 8) break;\n        iVar4 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar4 != 0) goto LAB_0800603e;\n        piVar27 = piVar27 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar27 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      pbVar23 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar27;\n    pbVar23 = local_d0;\n    if ((7 < local_d4) &&\n       (iVar4 = __ssprint_r(param_1,param_2,&local_d8), pbVar23 = local_d0, iVar4 != 0))\n    goto LAB_0800603e;\n  }\n  if ((int)local_15c < (int)local_168) {\n    local_15c = local_168;\n  }\n  local_164 = local_164 + (int)local_15c;\n  if ((pbVar23 == (byte *)0x0) || (iVar4 = __ssprint_r(param_1,param_2,&local_d8), iVar4 == 0)) {\n    local_d4 = 0;\n    if (local_148 != (int *)0x0) {\n      _free_r(param_1,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    _free_r(param_1,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  uVar22 = uVar25 - 0x30;\n  piVar24 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar24 + 1);\n    uVar25 = (uint)*(byte *)piVar24;\n    local_15c = (int *)(uVar22 + (int)local_15c * 10);\n    uVar22 = uVar25 - 0x30;\n    piVar24 = piVar28;\n  } while (uVar22 < 10);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  uVar25 = (uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "calling": [
                "sprintf"
            ],
            "called": [
                "__ssprint_r",
                "__aeabi_dcmpgt",
                "__aeabi_uldivmod",
                "_dtoa_r",
                "_localeconv_r",
                "__aeabi_dcmpeq",
                "__aeabi_dcmple",
                "__unorddf2",
                "frexp",
                "__aeabi_dcmplt",
                "__subdf3",
                "strncpy",
                "__aeabi_i2d",
                "_malloc_r",
                "strlen",
                "_free_r",
                "__muldf3",
                "__aeabi_d2iz",
                "memchr"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078a0": {
            "entrypoint": "0x080078a0",
            "current_name": "FUNC_080078a0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "atexit"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078b4": {
            "entrypoint": "0x080078b4",
            "current_name": "register_exit_proc_080078b4",
            "code": "\nint registerExitProc_080078b4(functionPointer *functionPointer)\n\n{\n  int returnValue;\n  \n  returnValue = registerExitProc_080078b4(0,functionPointer,0);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080078b4": "register_exit_proc_080078b4",
                "__register_exitproc": "registerExitProc",
                "__func": "functionPointer",
                "iVar1": "returnValue"
            },
            "calling": [
                "register_fini"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078c0": {
            "entrypoint": "0x080078c0",
            "current_name": "calculate_average_080078c0",
            "code": "\nuint calculateAverage_080078c0(int inputArray,int coefficientsArray)\n\n{\n  uint result;\n  uint *ptrInput;\n  int carry;\n  int inputLength;\n  int i;\n  uint average;\n  uint *ptrCoefficients;\n  uint *ptrResult;\n  uint *endPtr;\n  uint partialProduct;\n  uint *ptr;\n  uint *nextPtr;\n  \n  inputLength = *(int *)(coefficientsArray + 0x10);\n  if (*(int *)(inputArray + 0x10) < inputLength) {\n    return 0;\n  }\n  i = inputLength + -1;\n  ptrCoefficients = (uint *)(coefficientsArray + 0x14);\n  ptrResult = (uint *)(inputArray + 0x14);\n  average = ptrResult[i] / (ptrCoefficients[i] + 1);\n  endPtr = ptrCoefficients + i;\n  if (average != 0) {\n    result = 0;\n    carry = 0;\n    ptrInput = ptrResult;\n    ptr = ptrCoefficients;\n    do {\n      nextPtr = ptr + 1;\n      result = average * (*ptr & 0xffff) + result;\n      partialProduct = average * (*ptr >> 0x10) + (result >> 0x10);\n      result = (carry - (result & 0xffff)) + (*ptrInput & 0xffff);\n      carry = ((*ptrInput >> 0x10) - (partialProduct & 0xffff)) + ((int)result >> 0x10);\n      *ptrInput = result & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      result = partialProduct >> 0x10;\n      ptrInput = ptrInput + 1;\n      ptr = nextPtr;\n    } while (nextPtr <= endPtr);\n    if (ptrResult[i] == 0) {\n      if ((ptrResult < ptrResult + inputLength + -2) && (ptrResult[inputLength + -2] == 0)) {\n        ptrInput = ptrResult + inputLength + -3;\n        do {\n          i = i + -1;\n          if (ptrInput <= ptrResult) break;\n          result = *ptrInput;\n          ptrInput = ptrInput + -1;\n        } while (result == 0);\n      }\n      *(int *)(inputArray + 0x10) = i;\n    }\n  }\n  inputLength = __mcmp();\n  if (-1 < inputLength) {\n    inputLength = 0;\n    average = average + 1;\n    ptrInput = ptrResult;\n    do {\n      ptr = ptrCoefficients + 1;\n      result = (inputLength - (*ptrCoefficients & 0xffff)) + (*ptrInput & 0xffff);\n      inputLength = ((*ptrInput >> 0x10) - (*ptrCoefficients >> 0x10)) + ((int)result >> 0x10);\n      *ptrInput = result & 0xffff | inputLength * 0x10000;\n      inputLength = inputLength >> 0x10;\n      ptrInput = ptrInput + 1;\n      ptrCoefficients = ptr;\n    } while (ptr <= endPtr);\n    if (ptrResult[i] == 0) {\n      if ((ptrResult < ptrResult + i + -1) && (ptrResult[i + -1] == 0)) {\n        ptrCoefficients = ptrResult + i + -2;\n        do {\n          i = i + -1;\n          if (ptrCoefficients <= ptrResult) break;\n          result = *ptrCoefficients;\n          ptrCoefficients = ptrCoefficients + -1;\n        } while (result == 0);\n      }\n      *(int *)(inputArray + 0x10) = i;\n    }\n  }\n  return average;\n}\n\n",
            "renaming": {
                "FUN_080078c0": "calculate_average_080078c0",
                "param_1": "inputArray",
                "param_2": "coefficientsArray",
                "uVar1": "result",
                "puVar2": "ptrInput",
                "iVar3": "carry",
                "iVar4": "inputLength",
                "iVar5": "i",
                "uVar6": "average",
                "puVar7": "ptrCoefficients",
                "puVar8": "ptrResult",
                "puVar9": "endPtr",
                "uVar10": "partialProduct",
                "puVar11": "ptr",
                "puVar12": "nextPtr"
            },
            "calling": [
                "_dtoa_r"
            ],
            "called": [
                "__mcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e8": {
            "entrypoint": "0x080079e8",
            "current_name": "convert_float_to_string_080079e8",
            "code": "\nchar * convertFloatToString_080079e8(int value,undefined4 param2,uint mantissa,uint exponent,uint digits,\n                   uint precision,int *length,uint *isNegative,char **output)\n\n{\n  bool isLessThan6;\n  bool isLessThan17;\n  bool isGreaterThanOrEqualTo17;\n  char digit;\n  byte comparisonResult;\n  undefined4 normalizedValue;\n  int tempVar3;\n  int tempVar4;\n  int tempVar5;\n  char *pcVar10;\n  uint uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  int numDigits;\n  int numLeadingZeros;\n  undefined4 uVar16;\n  uint uVar17;\n  uint uVar18;\n  int tempVar2;\n  char *pcVar20;\n  char *pcVar21;\n  undefined4 *puVar22;\n  undefined4 uVar23;\n  int tempVar;\n  bool isLessThan175;\n  undefined8 uVar26;\n  undefined8 uVar27;\n  undefined8 uVar28;\n  uint normalizedExponent;\n  uint absExponent;\n  uint numDigitsExponent;\n  int numTrailingZeros;\n  uint numDigitsBeforeDot;\n  int numTotalDigits;\n  int shiftAmount;\n  uint comparisonResult;\n  uint tempVar6;\n  uint tempVar7;\n  uint numDigitsToDisplay;\n  uint tempVar8;\n  int numInitialDigits;\n  int tempVarArray [2];\n  \n  numDigits = *(int *)(value + 0x40);\n  if (numDigits != 0) {\n    uVar18 = *(uint *)(value + 0x44);\n    *(uint *)(numDigits + 4) = uVar18;\n    *(int *)(numDigits + 8) = 1 << (uVar18 & 0xff);\n    _Bfree(value,numDigits);\n    *(undefined4 *)(value + 0x40) = 0;\n  }\n  isLessThan175 = (int)exponent < 0;\n  uVar18 = exponent;\n  if (isLessThan175) {\n    uVar18 = exponent & 0x7fffffff;\n  }\n  *isNegative = (uint)isLessThan175;\n  absExponent = exponent;\n  if (isLessThan175) {\n    absExponent = uVar18;\n  }\n  uVar17 = absExponent;\n  if ((~uVar18 & 0x7ff00000) == 0) {\n    *length = 9999;\n    if ((mantissa == 0) && ((uVar18 & 0xfffff) == 0)) {\n      pcVar10 = \"Infinity\";\n      if (output == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    else {\n      pcVar10 = \"NaN\";\n      if (output == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    *output = pcVar21;\n    return pcVar10;\n  }\n  uVar26 = __aeabi_dcmpeq(mantissa,absExponent,0,0);\n  if ((int)uVar26 != 0) {\n    *length = 1;\n    if (output != (char **)0x0) {\n      *output = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  normalizedValue = __d2b(value,(int)((ulonglong)uVar26 >> 0x20),mantissa,absExponent,tempVarArray,&numInitialDigits);\n  numDigits = numInitialDigits;\n  if (uVar18 >> 0x14 == 0) {\n    tempVar2 = tempVarArray[0] + numInitialDigits;\n    numLeadingZeros = tempVar2 + 0x432;\n    if (numLeadingZeros < 0x21) {\n      uVar18 = mantissa << (0x20U - numLeadingZeros & 0xff);\n    }\n    else {\n      uVar18 = mantissa >> (tempVar2 + 0x412U & 0xff) | uVar18 << (0x40U - numLeadingZeros & 0xff);\n    }\n    uVar26 = __floatunsidf(uVar18);\n    tempVar2 = tempVar2 + -1;\n    isLessThan175 = true;\n    uVar11 = (int)((ulonglong)uVar26 >> 0x20) + 0xfe100000;\n    uVar18 = (uint)uVar26;\n  }\n  else {\n    tempVar2 = (uVar18 >> 0x14) - 0x3ff;\n    uVar11 = absExponent & 0xfffff | 0x3ff00000;\n    isLessThan175 = false;\n    uVar18 = mantissa;\n  }\n  uVar26 = __subdf3(uVar18,uVar11,0,0x3ff80000);\n  uVar26 = __muldf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0x636f4361,0x3fd287a7);\n  uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0x8b60c8b3,0x3fc68a28);\n  uVar27 = __aeabi_i2d(tempVar2);\n  uVar27 = __muldf3((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0x509f79fb,0x3fd34413);\n  uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar27,\n                        (int)((ulonglong)uVar27 >> 0x20));\n  uVar13 = (undefined4)((ulonglong)uVar26 >> 0x20);\n  numDigitsExponent = __aeabi_d2iz();\n  numLeadingZeros = __aeabi_dcmplt((int)uVar26,uVar13,0,0);\n  if (numLeadingZeros != 0) {\n    uVar27 = __aeabi_i2d(numDigitsExponent);\n    numLeadingZeros = __aeabi_dcmpeq((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,uVar13);\n    if (numLeadingZeros == 0) {\n      numDigitsExponent = numDigitsExponent - 1;\n    }\n  }\n  if (numDigitsExponent < 0x17) {\n    numLeadingZeros = __aeabi_dcmpgt(*(undefined4 *)(&__mprec_tens + numDigitsExponent * 8),\n                            *(undefined4 *)(&DAT_08009fac + numDigitsExponent * 8),mantissa,absExponent);\n    if (numLeadingZeros == 0) {\n      isLessThan17 = false;\n    }\n    else {\n      numDigitsExponent = numDigitsExponent - 1;\n      isLessThan17 = false;\n    }\n  }\n  else {\n    isLessThan17 = true;\n  }\n  numLeadingZeros = (numDigits - tempVar2) + -1;\n  if (numLeadingZeros < 0) {\n    numTrailingZeros = 1 - (numDigits - tempVar2);\n    numLeadingZeros = 0;\n  }\n  else {\n    numTrailingZeros = 0;\n  }\n  if ((int)numDigitsExponent < 0) {\n    comparisonResult = 0;\n    numTrailingZeros = numTrailingZeros - numDigitsExponent;\n    shiftAmount = -numDigitsExponent;\n  }\n  else {\n    numLeadingZeros = numLeadingZeros + numDigitsExponent;\n    comparisonResult = numDigitsExponent;\n    shiftAmount = 0;\n  }\n  if (9 < digits) {\n    numDigitsToDisplay = 0xffffffff;\n    isLessThan6 = true;\n    numDigitsBeforeDot = 0xffffffff;\n    isGreaterThanOrEqualTo17 = true;\n    digits = 0;\n    precision = 0;\n    goto LAB_08007c24;\n  }\n  isLessThan6 = (int)digits < 6;\n  if (!isLessThan6) {\n    digits = digits - 4;\n  }\n  switch(digits) {\n  case 2:\n    isGreaterThanOrEqualTo17 = false;\n    break;\n  case 3:\n    isGreaterThanOrEqualTo17 = false;\n    goto LAB_08008300;\n  case 4:\n    isGreaterThanOrEqualTo17 = true;\n    break;\n  case 5:\n    isGreaterThanOrEqualTo17 = true;\nLAB_08008300:\n    numDigitsToDisplay = numDigitsExponent + precision;\n    numDigitsBeforeDot = numDigitsToDisplay + 1;\n    uVar18 = numDigitsBeforeDot;\n    if ((int)numDigitsBeforeDot < 1) {\n      uVar18 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(value + 0x44) = 0;\n    pcVar10 = (char *)_Balloc(value,0);\n    numDigitsToDisplay = 0xffffffff;\n    numDigitsBeforeDot = 0xffffffff;\n    precision = 0;\n    *(char **)(value + 0x40) = pcVar10;\n    isGreaterThanOrEqualTo17 = true;\n    goto LAB_08007e36;\n  }\n  if ((int)precision < 1) {\n    numDigitsToDisplay = 1;\n    precision = 1;\n    numDigitsBeforeDot = 1;\nLAB_08007c24:\n    *(undefined4 *)(value + 0x44) = 0;\n    uVar11 = numDigitsToDisplay;\n  }\n  else {\n    numDigitsToDisplay = precision;\n    numDigitsBeforeDot = precision;\n    uVar18 = precision;\nLAB_08008314:\n    *(undefined4 *)(value + 0x44) = 0;\n    uVar11 = numDigitsBeforeDot;\n    if (0x17 < (int)uVar18) {\n      tempVar2 = 4;\n      numDigits = 1;\n      do {\n        tempVar3 = numDigits;\n        tempVar2 = tempVar2 * 2;\n        numDigits = tempVar3 + 1;\n      } while (tempVar2 + 0x14U <= uVar18);\n      *(int *)(value + 0x44) = tempVar3;\n    }\n  }\n  pcVar10 = (char *)_Balloc(value);\n  *(char **)(value + 0x40) = pcVar10;\n  if ((uVar11 < 0xf) && (isLessThan6)) {\n    if ((int)numDigitsExponent < 1) {\n      if (numDigitsExponent == 0) {\n        numDigits = 2;\n        normalizedExponent = mantissa;\n      }\n      else {\n        numDigits = (-numDigitsExponent & 0xf) * 8;\n        uVar26 = __muldf3(mantissa,absExponent,*(undefined4 *)(&__mprec_tens + numDigits),\n                          *(undefined4 *)(&DAT_08009fac + numDigits));\n        absExponent = (uint)((ulonglong)uVar26 >> 0x20);\n        normalizedExponent = (uint)uVar26;\n        tempVar2 = (int)-numDigitsExponent >> 4;\n        if (tempVar2 == 0) {\n          numDigits = 2;\n        }\n        else {\n          isLessThan6 = false;\n          numDigits = 2;\n          puVar22 = &__mprec_bigtens;\n          do {\n            if (tempVar2 << 0x1f < 0) {\n              uVar26 = __muldf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar22,puVar22[1]);\n              isLessThan6 = true;\n              numDigits = numDigits + 1;\n            }\n            tempVar2 = tempVar2 >> 1;\n            puVar22 = puVar22 + 2;\n          } while (tempVar2 != 0);\n          if (isLessThan6) {\n            normalizedExponent = (uint)uVar26;\n            absExponent = (uint)((ulonglong)uVar26 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar18 = (int)numDigitsExponent >> 4;\n      uVar27 = *(undefined8 *)(&__mprec_tens + (numDigitsExponent & 0xf) * 8);\n      uVar26 = *(undefined8 *)(&__mprec_tens + (numDigitsExponent & 0xf) * 8);\n      if ((int)(uVar18 << 0x1b) < 0) {\n        uVar28 = __divdf3(mantissa,absExponent,0x7f73bf3c,0x75154fdd);\n        tempVar7 = (uint)((ulonglong)uVar28 >> 0x20);\n        tempVar6 = (uint)uVar28;\n        numDigits = 3;\n        uVar18 = uVar18 & 0xf;\n      }\n      else {\n        numDigits = 2;\n        tempVar7 = absExponent;\n        tempVar6 = mantissa;\n      }\n      if (uVar18 != 0) {\n        puVar22 = &__mprec_bigtens;\n        do {\n          if ((int)(uVar18 << 0x1f) < 0) {\n            uVar26 = __muldf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar22,puVar22[1]);\n            numDigits = numDigits + 1;\n          }\n          uVar18 = (int)uVar18 >> 1;\n          puVar22 = puVar22 + 2;\n          uVar27 = uVar26;\n        } while (uVar18 != 0);\n      }\n      absExponent = (uint)((ulonglong)uVar27 >> 0x20);\n      normalizedExponent = (uint)uVar27;\n      uVar26 = __divdf3(tempVar6,tempVar7,normalizedExponent,absExponent);\n      normalizedExponent = (uint)uVar26;\n      absExponent = (uint)((ulonglong)uVar26 >> 0x20);\n    }\n    uVar26 = CONCAT44(absExponent,normalizedExponent);\n    if ((isLessThan17) && (tempVar2 = __aeabi_dcmplt(normalizedExponent,absExponent,0,0x3ff00000), tempVar2 != 0)) {\n      if (numDigitsBeforeDot == 0) {\n        uVar26 = __aeabi_i2d(numDigits);\n        uVar26 = __muldf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),normalizedExponent,absExponent);\n        uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x401c0000);\n        uVar13 = (undefined4)uVar26;\n        numDigits = (int)((ulonglong)uVar26 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)numDigitsToDisplay) {\n        uVar26 = __muldf3(normalizedExponent,absExponent,0,0x40240000);\n        uVar27 = __aeabi_i2d(numDigits + 1);\n        uVar27 = __muldf3((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,\n                          (int)((ulonglong)uVar26 >> 0x20));\n        uVar27 = __aeabi_dadd((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0,0x401c0000);\n        uVar13 = (undefined4)uVar27;\n        tempVar6 = numDigitsToDisplay;\n        tempVar8 = numDigitsExponent - 1;\n        numDigits = (int)((ulonglong)uVar27 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar27 = __aeabi_i2d(numDigits);\n    uVar27 = __muldf3((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),normalizedExponent,absExponent);\n    uVar27 = __aeabi_dadd((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0,0x401c0000);\n    uVar13 = (undefined4)uVar27;\n    numDigits = (int)((ulonglong)uVar27 >> 0x20) + -0x3400000;\n    if (numDigitsBeforeDot != 0) {\n      tempVar8 = numDigitsExponent;\n      tempVar6 = numDigitsBeforeDot;\nLAB_08007cfa:\n      absExponent = (uint)((ulonglong)uVar26 >> 0x20);\n      normalizedExponent = (uint)uVar26;\n      digit = __aeabi_d2iz(normalizedExponent,absExponent);\n      digit = digit + '0';\n      uVar16 = (&DAT_08009fa0)[tempVar6 * 2];\n      uVar12 = (&DAT_08009fa4)[tempVar6 * 2];\n      uVar26 = __aeabi_i2d();\n      uVar26 = __subdf3(normalizedExponent,absExponent,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n      uVar23 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      pcVar21 = pcVar10 + 1;\n      if (isGreaterThanOrEqualTo17) {\n        uVar27 = __divdf3(0,0x3fe00000,uVar16,uVar12);\n        uVar27 = __subdf3((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),uVar13,numDigits);\n        uVar13 = (undefined4)((ulonglong)uVar27 >> 0x20);\n        *pcVar10 = digit;\n        numDigits = __aeabi_dcmpgt((int)uVar27,uVar13,(int)uVar26,uVar23);\n        if (numDigits != 0) {\nLAB_08008784:\n          numDigitsExponent = tempVar8;\n          goto LAB_08008294;\n        }\n        uVar28 = __subdf3(0,0x3ff00000,(int)uVar26,uVar23);\n        numDigits = __aeabi_dcmpgt((int)uVar27,uVar13,(int)uVar28,(int)((ulonglong)uVar28 >> 0x20));\n        if (numDigits == 0) {\n          if (tempVar6 != 1) {\n            pcVar20 = pcVar21;\n            do {\n              uVar27 = __muldf3((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0,0x40240000);\n              uVar13 = (undefined4)((ulonglong)uVar27 >> 0x20);\n              uVar26 = __muldf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n              digit = __aeabi_d2iz();\n              uVar28 = __aeabi_i2d();\n              uVar26 = __subdf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar28,\n                                (int)((ulonglong)uVar28 >> 0x20));\n              uVar16 = (undefined4)((ulonglong)uVar26 >> 0x20);\n              digit = digit + '0';\n              pcVar21 = pcVar20 + 1;\n              *pcVar20 = digit;\n              numDigits = __aeabi_dcmplt((int)uVar26,uVar16,(int)uVar27,uVar13);\n              if (numDigits != 0) {\n                numDigitsExponent = tempVar8;\n                goto LAB_08008294;\n              }\n              uVar28 = __subdf3(0,0x3ff00000,(int)uVar26,uVar16);\n              numDigits = __aeabi_dcmplt((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),(int)uVar27,\n                                      uVar13);\n              if (numDigits != 0) goto LAB_08008798;\n              pcVar20 = pcVar21;\n            } while (pcVar21 != pcVar10 + tempVar6);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        numDigitsExponent = tempVar8;\n      }\n      else {\n        uVar27 = __muldf3(uVar13,numDigits,uVar16,uVar12);\n        uVar13 = (undefined4)((ulonglong)uVar27 >> 0x20);\n        *pcVar10 = digit;\n        if (tempVar6 != 1) {\n          pcVar20 = pcVar21;\n          do {\n            uVar26 = __muldf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n            digit = __aeabi_d2iz();\n            uVar28 = __aeabi_i2d();\n            uVar26 = __subdf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar28,\n                              (int)((ulonglong)uVar28 >> 0x20));\n            pcVar21 = pcVar20 + 1;\n            *pcVar20 = digit + '0';\n            pcVar20 = pcVar21;\n          } while (pcVar21 != pcVar10 + tempVar6);\n        }\n        uVar16 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        uVar28 = __aeabi_dadd((int)uVar27,uVar13,0,0x3fe00000);\n        numDigits = __aeabi_dcmplt((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),(int)uVar26,uVar16);\n        if (numDigits == 0) {\n          uVar27 = __subdf3(0,0x3fe00000,(int)uVar27,uVar13);\n          numDigits = __aeabi_dcmpgt((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,uVar16);\n          pcVar20 = pcVar21;\n          if (numDigits == 0) goto LAB_08007e36;\n          do {\n            pcVar21 = pcVar20;\n            pcVar20 = pcVar21 + -1;\n          } while (pcVar21[-1] == '0');\n          goto LAB_08008784;\n        }\n        numDigitsExponent = tempVar8;\n        digit = pcVar21[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar26 = __subdf3(normalizedExponent,absExponent,0,0x40140000);\n    uVar16 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    tempVar2 = __aeabi_dcmpgt((int)uVar26,uVar16,uVar13,numDigits);\n    if (tempVar2 == 0) {\n      numDigits = __aeabi_dcmplt((int)uVar26,uVar16,uVar13,numDigits + -0x80000000);\n      if (numDigits == 0) goto LAB_08007e36;\n      tempVar2 = 0;\n      numDigits = 0;\n      pcVar21 = pcVar10;\n      goto LAB_080084f0;\n    }\n    numLeadingZeros = 0;\n    tempVar3 = 0;\nLAB_08008406:\n    *pcVar10 = '1';\n    numDigitsExponent = numDigitsExponent + 1;\n    pcVar21 = pcVar10 + 1;\n    tempVar2 = tempVar3;\n    numDigits = numLeadingZeros;\nLAB_08008416:\n    _Bfree(value,numDigits);\n    if (tempVar2 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar21 = pcVar10;\n    if ((-1 < tempVarArray[0]) && ((int)numDigitsExponent < 0xf)) {\n      uVar13 = *(undefined4 *)(&__mprec_tens + numDigitsExponent * 8);\n      uVar16 = *(undefined4 *)(&DAT_08009fac + numDigitsExponent * 8);\n      if ((-1 < (int)precision) || (0 < (int)numDigitsBeforeDot)) {\n        __divdf3(mantissa,uVar17,uVar13,uVar16);\n        comparisonResult = __aeabi_d2iz();\n        uVar26 = __aeabi_i2d();\n        uVar26 = __muldf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),uVar13,uVar16);\n        uVar26 = __subdf3(mantissa,uVar17,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        *pcVar10 = comparisonResult + 0x30;\n        pcVar21 = pcVar10 + 1;\n        if (numDigitsBeforeDot != 1) {\n          uVar26 = __muldf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n          numDigits = __aeabi_dcmpeq((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0);\n          while (numDigits == 0) {\n            uVar23 = (undefined4)((ulonglong)uVar26 >> 0x20);\n            __divdf3((int)uVar26,uVar23,uVar13,uVar16);\n            comparisonResult = __aeabi_d2iz();\n            uVar27 = __aeabi_i2d();\n            uVar27 = __muldf3((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),uVar13,uVar16);\n            uVar26 = __subdf3((int)uVar26,uVar23,(int)uVar27,(int)((ulonglong)uVar27 >> 0x20));\n            pcVar20 = pcVar21 + 1;\n            *pcVar21 = comparisonResult + 0x30;\n            pcVar21 = pcVar20;\n            if (numDigitsBeforeDot == (int)pcVar20 - (int)pcVar10) goto LAB_08007f3a;\n            uVar26 = __muldf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n            numDigits = __aeabi_dcmpeq((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        uVar23 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        numDigits = __aeabi_dcmpgt((int)uVar26,uVar23,uVar13,uVar16);\n        if ((numDigits == 0) &&\n           ((numDigits = __aeabi_dcmpeq((int)uVar26,uVar23,uVar13,uVar16), numDigits == 0 ||\n            ((comparisonResult & 1) == 0)))) goto LAB_08008294;\n        digit = pcVar21[-1];\nLAB_08007f7c:\n        while (pcVar20 = pcVar21 + -1, digit == '9') {\n          if (pcVar10 == pcVar20) {\n            *pcVar10 = '0';\n            digit = pcVar21[-1];\n            numDigitsExponent = numDigitsExponent + 1;\n            pcVar20 = pcVar10;\n            break;\n          }\n          digit = pcVar21[-2];\n          pcVar21 = pcVar20;\n        }\n        *pcVar20 = digit + '\\x01';\n        goto LAB_08008294;\n      }\n      if (numDigitsBeforeDot == 0) {\n        uVar26 = __muldf3(uVar13,uVar16,0,0x40140000);\n        tempVar5 = __aeabi_dcmpge((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),mantissa,uVar17);\n        tempVar2 = 0;\n        numLeadingZeros = 0;\n        tempVar3 = 0;\n        numDigits = 0;\n        if (tempVar5 == 0) goto LAB_08008406;\n      }\n      else {\n        tempVar2 = 0;\n        numDigits = 0;\n      }\nLAB_080084f0:\n      numDigitsExponent = ~precision;\n      pcVar10 = pcVar21;\n      goto LAB_08008416;\n    }\n    numDigits = shiftAmount;\n    if (isGreaterThanOrEqualTo17) {\n      if ((int)digits < 2) {\n        if (isLessThan175) {\n          numTotalDigits = numTrailingZeros;\n          numTrailingZeros = numTrailingZeros + tempVarArray[0] + 0x433;\n          numLeadingZeros = numLeadingZeros + tempVarArray[0] + 0x433;\n        }\n        else {\n          numTotalDigits = numTrailingZeros;\n          numTrailingZeros = numTrailingZeros + (0x36 - numInitialDigits);\n          numLeadingZeros = numLeadingZeros + (0x36 - numInitialDigits);\n        }\n      }\n      else {\n        tempVar2 = numDigitsBeforeDot - 1;\n        if (shiftAmount < tempVar2) {\n          comparisonResult = comparisonResult + (tempVar2 - shiftAmount);\n          numDigits = 0;\n          shiftAmount = tempVar2;\n        }\n        else {\n          numDigits = shiftAmount - tempVar2;\n        }\n        if ((int)numDigitsBeforeDot < 0) {\n          numTotalDigits = numTrailingZeros - numDigitsBeforeDot;\n        }\n        else {\n          numLeadingZeros = numLeadingZeros + numDigitsBeforeDot;\n          numTotalDigits = numTrailingZeros;\n          numTrailingZeros = numTrailingZeros + numDigitsBeforeDot;\n        }\n      }\n      tempVar2 = __i2b(value,1);\n    }\n    else {\n      numTotalDigits = numTrailingZeros;\n      tempVar2 = 0;\n    }\n    if ((0 < numTotalDigits) && (0 < numLeadingZeros)) {\n      tempVar3 = numTotalDigits;\n      if (numLeadingZeros <= numTotalDigits) {\n        tempVar3 = numLeadingZeros;\n      }\n      numLeadingZeros = numLeadingZeros - tempVar3;\n      numTrailingZeros = numTrailingZeros - tempVar3;\n      numTotalDigits = numTotalDigits - tempVar3;\n    }\n    if (shiftAmount != 0) {\n      if (isGreaterThanOrEqualTo17) {\n        uVar13 = normalizedValue;\n        if (numDigits != 0) {\n          tempVar2 = __pow5mult(value,tempVar2,numDigits);\n          uVar13 = __multiply(value,tempVar2,normalizedValue);\n          _Bfree(value,normalizedValue);\n          normalizedValue = uVar13;\n          if (shiftAmount - numDigits == 0) goto LAB_08008062;\n        }\n        normalizedValue = __pow5mult(value,uVar13,shiftAmount - numDigits);\n      }\n      else {\n        normalizedValue = __pow5mult(value,normalizedValue,shiftAmount);\n      }\n    }\nLAB_08008062:\n    numDigits = __i2b(value,1);\n    if (comparisonResult == 0) {\n      if (((int)digits < 2) && (mantissa == 0)) {\nLAB_0800835a:\n        if ((uVar17 & 0xfffff) == 0) {\n          uVar17 = uVar17 & 0x7ff00000;\n          if (uVar17 != 0) {\n            numLeadingZeros = numLeadingZeros + 1;\n            numTrailingZeros = numTrailingZeros + 1;\n            uVar17 = 1;\n          }\n        }\n        else {\n          uVar17 = 0;\n        }\n        isLessThan175 = comparisonResult != 0;\n        uVar18 = mantissa;\n        comparisonResult = uVar17;\n        if (isLessThan175) goto LAB_080082d4;\n      }\n      tempVar3 = 1;\n    }\n    else {\n      uVar26 = __pow5mult(value,numDigits);\n      numDigits = (int)uVar26;\n      if (((int)digits < 2) && (mantissa == 0)) goto LAB_0800835a;\n      comparisonResult = 0;\n      uVar18 = (uint)((ulonglong)uVar26 >> 0x20);\nLAB_080082d4:\n      tempVar3 = __hi0bits(*(undefined4 *)(numDigits + *(int *)(numDigits + 0x10) * 4 + 0x10),uVar18);\n      tempVar3 = 0x20 - tempVar3;\n    }\n    uVar18 = tempVar3 + numLeadingZeros & 0x1f;\n    if (uVar18 == 0) {\n      tempVar3 = 0x1c;\nLAB_08008096:\n      numLeadingZeros = numLeadingZeros + tempVar3;\n      numTrailingZeros = numTrailingZeros + tempVar3;\n      numTotalDigits = numTotalDigits + tempVar3;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar18)) {\n        tempVar3 = 0x1c - uVar18;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar18 != 4) {\n        tempVar3 = 0x3c - uVar18;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < numTrailingZeros) {\n      normalizedValue = __lshift(value,normalizedValue,numTrailingZeros);\n    }\n    if (0 < numLeadingZeros) {\n      numDigits = __lshift(value,numDigits,numLeadingZeros);\n    }\n    pcVar20 = pcVar10;\n    if ((isLessThan17) && (numLeadingZeros = __mcmp(normalizedValue,numDigits), numLeadingZeros < 0)) {\n      numDigitsExponent = numDigitsExponent - 1;\n      normalizedValue = __multadd(value,normalizedValue,10,0);\n      if (isGreaterThanOrEqualTo17) {\n        tempVar2 = __multadd(value,tempVar2,10,0);\n        if ((0 < (int)numDigitsToDisplay) || ((int)digits < 3)) {\n          numDigitsBeforeDot = numDigitsToDisplay;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)numDigitsToDisplay) || ((int)digits < 3)) {\n        numDigitsBeforeDot = numDigitsToDisplay;\n        goto LAB_0800820a;\n      }\n      numDigitsBeforeDot = numDigitsToDisplay;\nLAB_080084e8:\n      if (numDigitsBeforeDot == 0) {\n        numLeadingZeros = __multadd(value,numDigits,5);\n        tempVar5 = __mcmp(normalizedValue,numLeadingZeros);\n        tempVar3 = tempVar2;\n        numDigits = numLeadingZeros;\n        if (0 < tempVar5) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)numDigitsBeforeDot < 1) && (2 < (int)digits)) goto LAB_080084e8;\n    if (isGreaterThanOrEqualTo17) {\nLAB_080080de:\n      normalizedExponent = tempVar2;\n      if (0 < numTotalDigits) {\n        normalizedExponent = __lshift(value,tempVar2,numTotalDigits);\n      }\n      tempVar2 = normalizedExponent;\n      if (comparisonResult != 0) {\n        tempVar2 = _Balloc(value,*(undefined4 *)(normalizedExponent + 4));\n        memcpy((void *)(tempVar2 + 0xc),(void *)(normalizedExponent + 0xc),(*(int *)(normalizedExponent + 0x10) + 2) * 4);\n        tempVar2 = __lshift(value,tempVar2,1);\n      }\nLAB_08008108:\n      numLeadingZeros = quorem(normalizedValue,numDigits);\n      tempVar3 = __mcmp(normalizedValue,normalizedExponent);\n      tempVar5 = __mdiff(value,numDigits,tempVar2);\n      tempVar = numLeadingZeros + 0x30;\n      if (*(int *)(tempVar5 + 0xc) == 0) {\n        tempVar4 = __mcmp(normalizedValue);\n        _Bfree(value,tempVar5);\n        if ((tempVar4 != 0) || (digits != 0)) goto LAB_0800815a;\n        if ((mantissa & 1) != 0) {\n          tempVar4 = 0;\n          goto LAB_0800815a;\n        }\n        if (tempVar != 0x39) {\n          if (0 < tempVar3) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar21 = pcVar20 + 1;\n        digit = '9';\n        *pcVar20 = '9';\n        goto LAB_08008268;\n      }\n      _Bfree(value,tempVar5);\n      tempVar4 = 1;\nLAB_0800815a:\n      if ((tempVar3 < 0) || (((tempVar3 == 0 && (digits == 0)) && ((mantissa & 1) == 0)))) {\n        if (0 < tempVar4) {\n          normalizedValue = __lshift(value,normalizedValue,1);\n          tempVar3 = __mcmp(normalizedValue,numDigits);\n          if ((0 < tempVar3) || ((tempVar3 == 0 && (numLeadingZeros << 0x1f < 0)))) {\n            if (tempVar == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            tempVar = numLeadingZeros + 0x31;\n          }\n        }\nLAB_080085a4:\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)tempVar;\n        goto LAB_08008274;\n      }\n      pcVar21 = pcVar20 + 1;\n      if (0 < tempVar4) {\n        if (tempVar == 0x39) goto LAB_08008752;\n        *pcVar20 = (char)numLeadingZeros + '1';\n        goto LAB_08008274;\n      }\n      *pcVar20 = (char)tempVar;\n      if (pcVar10 + (numDigitsBeforeDot - 1) != pcVar20) {\n        normalizedValue = __multadd(value,normalizedValue,10,0);\n        pcVar20 = pcVar21;\n        if (normalizedExponent == tempVar2) {\n          normalizedExponent = __multadd(value,normalizedExponent,10,0);\n          tempVar2 = normalizedExponent;\n        }\n        else {\n          normalizedExponent = __multadd(value,normalizedExponent,10,0);\n          tempVar2 = __multadd(value,tempVar2,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        tempVar = quorem(normalizedValue,numDigits);\n        tempVar = tempVar + 0x30;\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)tempVar;\n        if ((int)numDigitsBeforeDot <= (int)pcVar21 - (int)pcVar10) break;\n        normalizedValue = __multadd(value,normalizedValue,10,0);\n        pcVar20 = pcVar21;\n      }\n      normalizedExponent = 0;\n    }\n    normalizedValue = __lshift(value,normalizedValue,1);\n    numLeadingZeros = __mcmp(normalizedValue,numDigits);\n    digit = pcVar21[-1];\n    if ((0 < numLeadingZeros) || ((numLeadingZeros == 0 && (tempVar << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar20 = pcVar21 + -1;\n        if (digit != '9') goto code_r0x08008270;\n        if (pcVar10 == pcVar20) {\n          *pcVar10 = '1';\n          numDigitsExponent = numDigitsExponent + 1;\n          goto LAB_08008274;\n        }\n        digit = pcVar21[-2];\n        pcVar21 = pcVar20;\n      } while( true );\n    }\n    while (digit == '0') {\n      digit = pcVar21[-2];\n      pcVar21 = pcVar21 + -1;\n    }\nLAB_08008274:\n    _Bfree(value,numDigits);\n    if (tempVar2 == 0) goto LAB_08008294;\n    if ((normalizedExponent != 0) && (normalizedExponent != tempVar2)) {\n      _Bfree(value);\n    }\n  }\n  _Bfree(value,tempVar2);\nLAB_08008294:\n  _Bfree(value,normalizedValue);\n  *pcVar21 = '\\0';\n  *length = numDigitsExponent + 1;\n  if (output == (char **)0x0) {\n    return pcVar10;\n  }\n  *output = pcVar21;\n  return pcVar10;\ncode_r0x08008270:\n  *pcVar20 = digit + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "renaming": {
                "FUN_080079e8": "convert_float_to_string_080079e8",
                "param_1": "value",
                "param_2": "param2",
                "param_3": "mantissa",
                "param_4": "exponent",
                "param_5": "digits",
                "param_6": "precision",
                "param_7": "length",
                "param_8": "isNegative",
                "param_9": "output",
                "bVar1": "isLessThan6",
                "bVar2": "isLessThan17",
                "bVar3": "isGreaterThanOrEqualTo17",
                "cVar4": "digit",
                "bVar5": "comparisonResult",
                "uVar6": "normalizedValue",
                "iVar7": "tempVar3",
                "iVar8": "tempVar4",
                "iVar9": "tempVar5",
                "iVar14": "numDigits",
                "iVar15": "numLeadingZeros",
                "iVar19": "tempVar2",
                "iVar24": "tempVar",
                "local_80": "normalizedExponent",
                "local_7c": "absExponent",
                "local_74": "numDigitsExponent",
                "local_70": "numTrailingZeros",
                "local_68": "numDigitsBeforeDot",
                "local_60": "numTotalDigits",
                "local_5c": "shiftAmount",
                "local_58": "comparisonResult",
                "local_48": "tempVar6",
                "uStack_44": "tempVar7",
                "local_38": "numDigitsToDisplay",
                "local_34": "tempVar8",
                "local_30": "numInitialDigits",
                "local_2c": "tempVarArray"
            },
            "calling": [
                "_svfprintf_r"
            ],
            "called": [
                "__aeabi_dcmpgt",
                "__multiply",
                "__aeabi_dcmpge",
                "__d2b",
                "quorem",
                "__hi0bits",
                "__aeabi_dcmpeq",
                "__aeabi_dadd",
                "__multadd",
                "__i2b",
                "__floatunsidf",
                "memcpy",
                "__aeabi_dcmplt",
                "__subdf3",
                "__aeabi_i2d",
                "__lshift",
                "__mdiff",
                "__muldf3",
                "__aeabi_d2iz",
                "_Bfree",
                "_Balloc",
                "__mcmp",
                "__pow5mult",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008818": {
            "entrypoint": "0x08008818",
            "current_name": "execute_global_destructors_08008818",
            "code": "\nvoid execute_global_destructors_08008818(void)\n\n{\n  int iterator;\n  code **dtor_function_ptr;\n  \n  iterator = 1;\n  dtor_function_ptr = (code **)&__do_global_dtors_aux_fini_array_entry;\n  do {\n    iterator = iterator + -1;\n    (**dtor_function_ptr)();\n    dtor_function_ptr = dtor_function_ptr + -1;\n  } while (iterator != 0);\n  _fini();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008818": "execute_global_destructors_08008818",
                "iVar1": "iterator",
                "ppcVar2": "dtor_function_ptr"
            },
            "calling": [],
            "called": [
                "_fini",
                "__do_global_dtors_aux",
                "frame_dummy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800884c": {
            "entrypoint": "0x0800884c",
            "current_name": "allocate_and_adjust_memory_0800884c",
            "code": "\nundefined4 allocate_and_adjust_memory_0800884c(undefined4 lock,int size)\n\n{\n  int result;\n  int adjusted_address;\n  uint current_mallinfo;\n  \n  acquire_lock();\n  current_mallinfo = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  adjusted_address = ((0xfef - size) + current_mallinfo & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_address) {\n    result = sbrk_r(lock,0);\n    if (result == DAT_20000454 + current_mallinfo) {\n      result = sbrk_r(lock,-adjusted_address);\n      if (result != -1) {\n        current_allocated_memory = current_allocated_memory - adjusted_address;\n        *(uint *)(DAT_20000454 + 4) = current_mallinfo - adjusted_address | 1;\n        release_lock(lock);\n        return 1;\n      }\n      adjusted_address = sbrk_r(lock,0);\n      if (0xf < adjusted_address - DAT_20000454) {\n        current_allocated_memory = adjusted_address - initial_sbrk_base;\n        *(uint *)(DAT_20000454 + 4) = adjusted_address - DAT_20000454 | 1;\n      }\n    }\n  }\n  release_lock(lock);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800884c": "allocate_and_adjust_memory_0800884c",
                "param_1": "lock",
                "param_2": "size",
                "iVar1": "result",
                "iVar2": "adjusted_address",
                "uVar3": "current_mallinfo",
                "__malloc_lock": "acquire_lock",
                "__malloc_unlock": "release_lock",
                "_sbrk_r": "sbrk_r",
                "__malloc_current_mallinfo": "current_allocated_memory",
                "__malloc_sbrk_base": "initial_sbrk_base"
            },
            "calling": [
                "_free_r"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088ec": {
            "entrypoint": "0x080088ec",
            "current_name": "trim_and_unlock_malloc_080088ec",
            "code": "\nvoid trimAndUnlockMalloc_080088ec(undefined4 param1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  int index1;\n  uint *ptr1;\n  uint *ptr2;\n  undefined *ptr3;\n  uint size1;\n  uint size2;\n  undefined *ptr4;\n  undefined *ptr5;\n  undefined4 *ptr6;\n  int index2;\n  uint value1;\n  uint value2;\n  \n  if (param2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  value1 = *(uint *)(param2 + -4);\n  ptr1 = (uint *)(param2 + -8);\n  size1 = value1 & 0xfffffffe;\n  ptr2 = (uint *)((int)ptr1 + size1);\n  size2 = ptr2[1] & 0xfffffffc;\n  if (DAT_20000454 == ptr2) {\n    size1 = size1 + size2;\n    if ((value1 & 1) == 0) {\n      ptr1 = (uint *)((int)ptr1 - *(int *)(param2 + -8));\n      size2 = ptr1[2];\n      value1 = ptr1[3];\n      size1 = size1 + *(int *)(param2 + -8);\n      *(uint *)(size2 + 0xc) = value1;\n      *(uint *)(value1 + 8) = size2;\n    }\n    size2 = __malloc_trim_threshold;\n    ptr1[1] = size1 | 1;\n    DAT_20000454 = ptr1;\n    if (size2 <= size1) {\n      _malloc_trim_r(param1,__malloc_top_pad);\n    }\nLAB_080089f0:\n    __malloc_unlock(param1);\n    return;\n  }\n  ptr2[1] = size2;\n  if ((value1 & 1) == 0) {\n    ptr1 = (uint *)((int)ptr1 - *(int *)(param2 + -8));\n    ptr6 = (undefined4 *)ptr1[2];\n    size1 = size1 + *(int *)(param2 + -8);\n    value1 = *(uint *)((int)ptr2 + size2 + 4) & 1;\n    if ((uint **)ptr6 == &DAT_20000454) {\n      if (value1 == 0) {\n        value1 = ptr2[2];\n        value2 = ptr2[3];\n        size1 = size1 + size2;\n        *(uint *)(value1 + 0xc) = value2;\n        *(uint *)(value2 + 8) = value1;\n        ptr1[1] = size1 | 1;\n        *(uint *)((int)ptr1 + size1) = size1;\n      }\n      else {\n        ptr1[1] = size1 | 1;\n        *ptr2 = size1;\n      }\n      goto LAB_080089f0;\n    }\n    value2 = ptr1[3];\n    ptr6[3] = value2;\n    *(undefined4 **)(value2 + 8) = ptr6;\n  }\n  else {\n    value1 = *(uint *)((int)ptr2 + size2 + 4) & 1;\n  }\n  if (value1 == 0) {\n    ptr6 = (undefined4 *)ptr2[2];\n    size1 = size1 + size2;\n    if ((uint **)ptr6 == &DAT_20000454) {\n      DAT_2000045c = ptr1;\n      DAT_20000460 = ptr1;\n      ptr1[2] = (uint)&DAT_20000454;\n      ptr1[3] = (uint)&DAT_20000454;\n      ptr1[1] = size1 | 1;\n      *(uint *)((int)ptr1 + size1) = size1;\n      goto LAB_080089f0;\n    }\n    size2 = ptr2[3];\n    ptr6[3] = size2;\n    *(undefined4 **)(size2 + 8) = ptr6;\n    ptr1[1] = size1 | 1;\n    *(uint *)((int)ptr1 + size1) = size1;\n  }\n  else {\n    ptr1[1] = size1 | 1;\n    *(uint *)((int)ptr1 + size1) = size1;\n  }\n  if (size1 < 0x200) {\n    index2 = (size1 >> 3) + 1;\n    size1 = 1 << ((int)(size1 >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    size2 = *(uint *)(&__malloc_av_ + index2 * 8);\n    ptr1[2] = size2;\n    ptr1[3] = (uint)(&DAT_20000444 + index2 * 8);\n    DAT_20000450 = (undefined *)size1;\n    *(uint **)(&__malloc_av_ + index2 * 8) = ptr1;\n    *(uint **)(size2 + 0xc) = ptr1;\n    __malloc_unlock(param1,ptr1,size1,param4);\n    return;\n  }\n  size2 = size1 >> 9;\n  if (size2 < 5) {\n    index2 = ((size1 >> 6) + 0x39) * 8;\n    index1 = (size1 >> 6) + 0x38;\n  }\n  else if (size2 < 0x15) {\n    index2 = (size2 + 0x5c) * 8;\n    index1 = size2 + 0x5b;\n  }\n  else if (size2 < 0x55) {\n    index2 = ((size1 >> 0xc) + 0x6f) * 8;\n    index1 = (size1 >> 0xc) + 0x6e;\n  }\n  else if (size2 < 0x155) {\n    index2 = ((size1 >> 0xf) + 0x78) * 8;\n    index1 = (size1 >> 0xf) + 0x77;\n  }\n  else if (size2 < 0x555) {\n    index2 = ((size1 >> 0x12) + 0x7d) * 8;\n    index1 = (size1 >> 0x12) + 0x7c;\n  }\n  else {\n    index2 = 0x3f8;\n    index1 = 0x7e;\n  }\n  ptr3 = *(undefined **)(&__malloc_av_ + index2);\n  ptr4 = &DAT_20000444 + index2;\n  if (ptr4 == ptr3) {\n    ptr3 = (undefined *)(1 << (index1 >> 2 & 0xffU) | (uint)DAT_20000450);\n    ptr5 = ptr4;\n    DAT_20000450 = ptr3;\n  }\n  else {\n    do {\n      ptr5 = ptr3;\n      if ((*(uint *)(ptr3 + 4) & 0xfffffffc) <= size1) break;\n      ptr3 = *(undefined **)(ptr3 + 8);\n      ptr5 = ptr4;\n    } while (ptr4 != ptr3);\n    ptr4 = *(undefined **)(ptr5 + 0xc);\n  }\n  ptr1[2] = (uint)ptr5;\n  ptr1[3] = (uint)ptr4;\n  *(uint **)(ptr4 + 8) = ptr1;\n  *(uint **)(ptr5 + 0xc) = ptr1;\n  __malloc_unlock(param1,ptr1,ptr3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088ec": "trim_and_unlock_malloc_080088ec",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "index1",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "size1",
                "uVar6": "size2",
                "puVar7": "ptr4",
                "puVar8": "ptr5",
                "puVar9": "ptr6",
                "iVar10": "index2",
                "uVar11": "value1",
                "uVar12": "value2"
            },
            "calling": [
                "__ssprint_r",
                "_svfprintf_r",
                "_malloc_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_unlock",
                "_malloc_trim_r",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "entrypoint": "0x08008ad4",
            "current_name": "get_locale_pointer_08008ad4",
            "code": "\nundefined1 * getLocalePointer_08008ad4(void)\n\n{\n  undefined1 *localePointer;\n  \n  localePointer = *(undefined1 **)(_impure_ptr + 0x34);\n  if (localePointer == (undefined1 *)0x0) {\n    localePointer = &__global_locale;\n  }\n  return localePointer + 0xf0;\n}\n\n",
            "renaming": {
                "FUN_08008ad4": "get_locale_pointer_08008ad4",
                "puVar1": "localePointer"
            },
            "calling": [
                "_svfprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "FUNC_08008af0",
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "calling": [
                "__register_exitproc",
                "__malloc_lock"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af4": {
            "entrypoint": "0x08008af4",
            "current_name": "FUNC_08008af4",
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "calling": [
                "__register_exitproc",
                "__malloc_unlock"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af8": {
            "entrypoint": "0x08008af8",
            "current_name": "allocate_memory_08008af8",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_08008af8(undefined4 *param,uint size)\n\n{\n  undefined1 *ptr1;\n  undefined1 *ptr2;\n  uint var1;\n  uint var2;\n  int var3;\n  undefined *ptr3;\n  uint var4;\n  uint var5;\n  undefined4 *ptr4;\n  undefined1 *ptr5;\n  undefined *ptr6;\n  int *result;\n  uint var6;\n  uint var7;\n  int var8;\n  undefined4 *ptr7;\n  undefined1 *ptr8;\n  undefined4 *ptr9;\n  \n  var6 = size + 0xb;\n  if (var6 < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    __malloc_lock();\n    var7 = 0x10;\n    var3 = 0x18;\n    var6 = 2;\nLAB_08008b18:\n    ptr6 = *(undefined **)((int)&DAT_20000450 + var3);\n    if ((ptr6 != &DAT_20000444 + var3) ||\n       (ptr6 = *(undefined **)((int)&DAT_20000458 + var3), &__malloc_av_ + var3 != ptr6)) {\n      var3 = *(int *)(ptr6 + 0xc);\n      ptr3 = ptr6 + (*(uint *)(ptr6 + 4) & 0xfffffffc);\n      var6 = *(uint *)(ptr3 + 4);\nLAB_08008b34:\n      var8 = *(int *)(ptr6 + 8);\n      *(int *)(var8 + 0xc) = var3;\n      *(int *)(var3 + 8) = var8;\n      *(uint *)(ptr3 + 4) = var6 | 1;\n      __malloc_unlock(param);\n      return (int *)(ptr6 + 8);\n    }\n    var6 = var6 + 2;\n  }\n  else {\n    var7 = var6 & 0xfffffff8;\n    if (((int)var7 < 0) || (var7 < size)) {\nLAB_08008c7a:\n      *param = 0xc;\n      return (int *)0x0;\n    }\n    __malloc_lock();\n    if (var7 < 0x1f8) {\n      var6 = var6 >> 3;\n      var3 = var7 + 8;\n      goto LAB_08008b18;\n    }\n    var1 = var6 >> 9;\n    if (var1 == 0) {\n      var3 = 0x200;\n      var4 = 0x40;\n      var1 = 0x3f;\n    }\n    else if (var1 < 5) {\n      var4 = (var6 >> 6) + 0x39;\n      var1 = (var6 >> 6) + 0x38;\n      var3 = var4 * 8;\n    }\n    else if (var1 < 0x15) {\n      var4 = var1 + 0x5c;\n      var1 = var1 + 0x5b;\n      var3 = var4 * 8;\n    }\n    else if (var1 < 0x55) {\n      var4 = (var6 >> 0xc) + 0x6f;\n      var1 = (var6 >> 0xc) + 0x6e;\n      var3 = var4 * 8;\n    }\n    else if (var1 < 0x155) {\n      var4 = (var6 >> 0xf) + 0x78;\n      var1 = (var6 >> 0xf) + 0x77;\n      var3 = var4 * 8;\n    }\n    else if (var1 < 0x555) {\n      var4 = (var6 >> 0x12) + 0x7d;\n      var1 = (var6 >> 0x12) + 0x7c;\n      var3 = var4 * 8;\n    }\n    else {\n      var3 = 0x3f8;\n      var4 = 0x7f;\n      var1 = 0x7e;\n    }\n    for (ptr6 = *(undefined **)((int)&DAT_20000450 + var3); var6 = var4,\n        &DAT_20000444 + var3 != ptr6; ptr6 = *(undefined **)(ptr6 + 0xc)) {\n      var8 = (*(uint *)(ptr6 + 4) & 0xfffffffc) - var7;\n      var6 = var1;\n      if (0xf < var8) break;\n      if (-1 < var8) {\n        ptr3 = ptr6 + (*(uint *)(ptr6 + 4) & 0xfffffffc);\n        var6 = *(uint *)(ptr3 + 4);\n        var3 = *(int *)(ptr6 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  ptr7 = DAT_2000045c;\n  if ((undefined1 **)DAT_2000045c == &DAT_20000454) {\n    var4 = 1 << ((int)var6 >> 2 & 0xffU);\n    var1 = DAT_20000450;\n    if (var4 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    var4 = DAT_2000045c[1];\n    var5 = var4 & 0xfffffffc;\n    var1 = var5 - var7;\n    if (0xf < (int)var1) {\n      ptr9 = (undefined4 *)(var7 + (int)DAT_2000045c);\n      DAT_2000045c[1] = var7 | 1;\n      DAT_2000045c = ptr9;\n      DAT_20000460 = ptr9;\n      ptr9[2] = &DAT_20000454;\n      ptr9[3] = &DAT_20000454;\n      ptr9[1] = var1 | 1;\n      *(uint *)((int)ptr7 + var5) = var1;\n      __malloc_unlock(param);\n      return ptr7 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)var1) {\n      *(uint *)((int)ptr7 + var5 + 4) = *(uint *)((int)ptr7 + var5 + 4) | 1;\n      __malloc_unlock(param);\n      return ptr7 + 2;\n    }\n    if (var5 < 0x200) {\n      var3 = (var4 >> 3) + 1;\n      var8 = *(int *)(&__malloc_av_ + var3 * 8);\n      var1 = 1 << ((int)(var4 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      ptr7[2] = var8;\n      ptr7[3] = &DAT_20000444 + var3 * 8;\n      DAT_20000450 = var1;\n      *(undefined4 **)(&__malloc_av_ + var3 * 8) = ptr7;\n      *(undefined4 **)(var8 + 0xc) = ptr7;\n    }\n    else {\n      var1 = var4 >> 9;\n      if (var1 < 5) {\n        var3 = ((var4 >> 6) + 0x39) * 8;\n        var8 = (var4 >> 6) + 0x38;\n      }\n      else if (var1 < 0x15) {\n        var3 = (var1 + 0x5c) * 8;\n        var8 = var1 + 0x5b;\n      }\n      else if (var1 < 0x55) {\n        var3 = ((var4 >> 0xc) + 0x6f) * 8;\n        var8 = (var4 >> 0xc) + 0x6e;\n      }\n      else if (var1 < 0x155) {\n        var3 = ((var4 >> 0xf) + 0x78) * 8;\n        var8 = (var4 >> 0xf) + 0x77;\n      }\n      else if (var1 < 0x555) {\n        var3 = ((var4 >> 0x12) + 0x7d) * 8;\n        var8 = (var4 >> 0x12) + 0x7c;\n      }\n      else {\n        var3 = 0x3f8;\n        var8 = 0x7e;\n      }\n      ptr6 = *(undefined **)(&__malloc_av_ + var3);\n      ptr3 = &DAT_20000444 + var3;\n      if (ptr3 == ptr6) {\n        DAT_20000450 = 1 << (var8 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr6 + 4) & 0xfffffffc) <= var5) break;\n          ptr6 = *(undefined **)(ptr6 + 8);\n        } while (ptr3 != ptr6);\n        ptr3 = *(undefined **)(ptr6 + 0xc);\n      }\n      var1 = DAT_20000450;\n      ptr7[2] = ptr6;\n      ptr7[3] = ptr3;\n      *(undefined4 **)(ptr3 + 8) = ptr7;\n      *(undefined4 **)(ptr6 + 0xc) = ptr7;\n    }\n    var4 = 1 << ((int)var6 >> 2 & 0xffU);\n    if (var4 <= var1) {\nLAB_08008c06:\n      if ((var4 & var1) == 0) {\n        var6 = var6 & 0xfffffffc;\n        do {\n          var4 = var4 << 1;\n          var6 = var6 + 4;\n        } while ((var4 & var1) == 0);\n      }\n      do {\n        ptr9 = (undefined4 *)(&__malloc_av_ + var6 * 8);\n        var1 = var6;\n        ptr7 = ptr9;\n        do {\n          for (ptr4 = (undefined4 *)ptr7[3]; ptr7 != ptr4;\n              ptr4 = (undefined4 *)ptr4[3]) {\n            var5 = ptr4[1] & 0xfffffffc;\n            var2 = var5 - var7;\n            if (0xf < (int)var2) {\n              var8 = ptr4[2];\n              var3 = ptr4[3];\n              ptr7 = (undefined4 *)(var7 + (int)ptr4);\n              ptr4[1] = var7 | 1;\n              *(int *)(var8 + 0xc) = var3;\n              *(int *)(var3 + 8) = var8;\n              DAT_2000045c = ptr7;\n              DAT_20000460 = ptr7;\n              ptr7[2] = &DAT_20000454;\n              ptr7[3] = &DAT_20000454;\n              ptr7[1] = var2 | 1;\n              *(uint *)((int)ptr4 + var5) = var2;\n              __malloc_unlock(param);\n              return ptr4 + 2;\n            }\n            if (-1 < (int)var2) {\n              var3 = ptr4[3];\n              var8 = ptr4[2];\n              *(uint *)((int)ptr4 + var5 + 4) = *(uint *)((int)ptr4 + var5 + 4) | 1;\n              *(int *)(var8 + 0xc) = var3;\n              *(int *)(var3 + 8) = var8;\n              __malloc_unlock(param);\n              return ptr4 + 2;\n            }\n          }\n          var1 = var1 + 1;\n          ptr7 = ptr7 + 2;\n        } while ((var1 & 3) != 0);\n        do {\n          var5 = var6 & 3;\n          ptr7 = ptr9 + -2;\n          var6 = var6 - 1;\n          if (var5 == 0) {\n            DAT_20000450 = DAT_20000450 & ~var4;\n            break;\n          }\n          ptr9 = (undefined4 *)*ptr9;\n        } while (ptr9 == ptr7);\n        var4 = var4 * 2;\n        if ((DAT_20000450 <= var4 && var4 - DAT_20000450 != 0) || (var6 = var1, var4 == 0))\n        break;\n        for (; (var4 & DAT_20000450) == 0; var4 = var4 << 1) {\n          var6 = var6 + 4;\n        }\n      } while( true );\n    }\n  }\n  ptr8 = DAT_20000454;\n  var6 = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((var7 <= var6) && (var1 = var6 - var7, 0xf < (int)var1)) goto LAB_08008dac;\n  if (__malloc_sbrk_base == (undefined1 *)0xffffffff) {\n    var1 = var7 + __malloc_top_pad + 0x10;\n  }\n  else {\n    var1 = var7 + __malloc_top_pad + 0x100f & 0xfffff000;\n  }\n  ptr1 = (undefined1 *)_sbrk_r(param,var1);\n  if (ptr1 == (undefined1 *)0xffffffff) {\nLAB_08008ed8:\n    var6 = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    ptr2 = ptr8 + var6;\n    if (ptr2 < ptr1 || ptr2 == ptr1) {\n      ptr5 = __malloc_current_mallinfo + var1;\n      if ((ptr2 != ptr1) || (((uint)ptr2 & 0xfff) != 0)) goto LAB_08008d02;\n      __malloc_current_mallinfo = ptr5;\n      *(uint *)(DAT_20000454 + 4) = var6 + var1 | 1;\n    }\n    else {\n      if (ptr8 != &__malloc_av_) goto LAB_08008ed8;\nLAB_08008d02:\n      __malloc_current_mallinfo = __malloc_current_mallinfo + var1;\n      ptr5 = ptr1;\n      if (__malloc_sbrk_base != (undefined1 *)0xffffffff) {\n        __malloc_current_mallinfo = __malloc_current_mallinfo + ((int)ptr1 - (int)ptr2);\n        ptr5 = __malloc_sbrk_base;\n      }\n      __malloc_sbrk_base = ptr5;\n      var4 = (uint)ptr1 & 7;\n      if (var4 == 0) {\n        var3 = 0x1000;\n      }\n      else {\n        ptr1 = ptr1 + (8 - var4);\n        var3 = 0x1008 - var4;\n      }\n      var3 = var3 - ((uint)(ptr1 + var1) & 0xfff);\n      var8 = _sbrk_r(param,var3);\n      if (var8 == -1) {\n        var1 = 1;\n        var3 = 0;\n      }\n      else {\n        var1 = (var8 - (int)ptr1) + var3 | 1;\n      }\n      ptr5 = __malloc_current_mallinfo + var3;\n      DAT_20000454 = ptr1;\n      __malloc_current_mallinfo = ptr5;\n      *(uint *)(ptr1 + 4) = var1;\n      if (ptr8 != &__malloc_av_) {\n        if (var6 < 0x10) {\n          *(undefined4 *)(ptr1 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        var6 = var6 - 0xc & 0xfffffff8;\n        *(uint *)(ptr8 + 4) = *(uint *)(ptr8 + 4) & 1 | var6;\n        *(undefined4 *)(ptr8 + var6 + 4) = 5;\n        *(undefined4 *)(ptr8 + var6 + 8) = 5;\n        if (0xf < var6) {\n          _free_r(param,ptr8 + 8);\n          ptr5 = __malloc_current_mallinfo;\n        }\n      }\n    }\n    if (__malloc_max_sbrked_mem < ptr5) {\n      __malloc_max_sbrked_mem = ptr5;\n    }\n    var6 = *(uint *)(DAT_20000454 + 4);\n    if (__malloc_max_total_mem < ptr5) {\n      __malloc_max_total_mem = ptr5;\n    }\n  }\n  var1 = (var6 & 0xfffffffc) - var7;\n  if ((var7 <= (var6 & 0xfffffffc)) && (0xf < (int)var1)) {\nLAB_08008dac:\n    ptr8 = DAT_20000454 + var7;\n    *(uint *)(DAT_20000454 + 4) = var7 | 1;\n    result = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = ptr8;\n    *(uint *)(ptr8 + 4) = var1 | 1;\n    __malloc_unlock(param);\n    return result;\n  }\nLAB_08008eee:\n  __malloc_unlock(param);\n  return (int *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08008af8": "allocate_memory_08008af8",
                "param_1": "param",
                "param_2": "size",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "uVar3": "var1",
                "uVar4": "var2",
                "iVar5": "var3",
                "puVar6": "ptr3",
                "uVar7": "var4",
                "uVar8": "var5",
                "puVar9": "ptr4",
                "puVar10": "ptr5",
                "puVar11": "ptr6",
                "piVar12": "result",
                "uVar13": "var6",
                "uVar14": "var7",
                "iVar15": "var8",
                "puVar16": "ptr7",
                "puVar17": "ptr8",
                "puVar18": "ptr9"
            },
            "calling": [
                "__ssprint_r",
                "_svfprintf_r",
                "_realloc_r",
                "_calloc_r"
            ],
            "called": [
                "_free_r",
                "_sbrk_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800901c": {
            "entrypoint": "0x0800901c",
            "current_name": "find_byte_sequence_0800901c",
            "code": "\nvoid * find_byte_sequence_0800901c(void *data,int target_byte,size_t length)\n\n{\n  uint temp_1;\n  uint temp_2;\n  uint *current_ptr;\n  uint filtered_byte;\n  bool is_equal;\n  \n  filtered_byte = target_byte & 0xff;\n  if (((uint)data & 3) == 0) {\nLAB_0800904a:\n    if (3 < length) {\n      temp_2 = (target_byte & 0xffU) << 8 | filtered_byte;\n      current_ptr = (uint *)data;\n      do {\n        temp_1 = *current_ptr ^ (temp_2 | temp_2 << 0x10);\n        data = current_ptr + 1;\n        if ((temp_1 + 0xfefefeff & ~temp_1 & 0x80808080) != 0) goto LAB_08009050;\n        length = length - 4;\n        current_ptr = (uint *)data;\n      } while (3 < length);\n    }\n    current_ptr = (uint *)data;\n    if (length == 0) {\n      data = (uint *)0x0;\n    }\n    else {\nLAB_08009050:\n      data = current_ptr;\n                    /* WARNING: Load size is inaccurate */\n      if (*data != filtered_byte) {\n        current_ptr = (uint *)(length + (int)data);\n        do {\n          data = (void *)((int)data + 1);\n          if (current_ptr == (uint *)data) goto LAB_0800906c;\n                    /* WARNING: Load size is inaccurate */\n        } while (*data != filtered_byte);\n      }\n    }\n  }\n  else {\n    temp_2 = length - 1;\n    if (length == 0) {\nLAB_0800906c:\n      data = (uint *)0x0;\n    }\n    else {\n                    /* WARNING: Load size is inaccurate */\n      if (*data != filtered_byte) {\n        current_ptr = (uint *)((int)data + 1);\n        do {\n          data = current_ptr;\n          length = temp_2;\n          if (((uint)data & 3) == 0) goto LAB_0800904a;\n          is_equal = temp_2 == 0;\n          temp_2 = temp_2 - 1;\n          if (is_equal) goto LAB_0800906c;\n                    /* WARNING: Load size is inaccurate */\n          current_ptr = (uint *)((int)data + 1);\n        } while (*data != filtered_byte);\n      }\n    }\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_0800901c": "find_byte_sequence_0800901c",
                "__s": "data",
                "__c": "target_byte",
                "__n": "length",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "puVar3": "current_ptr",
                "uVar4": "filtered_byte",
                "bVar5": "is_equal"
            },
            "calling": [
                "_svfprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090a8": {
            "entrypoint": "0x080090a8",
            "current_name": "acquire_malloc_mutex_080090a8",
            "code": "\nvoid acquireMallocMutex_080090a8(void)\n\n{\n  __retarget_lock_acquire_recursive(&mallocMutex);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090a8": "acquire_malloc_mutex_080090a8",
                "__lock___malloc_recursive_mutex": "mallocMutex"
            },
            "calling": [
                "_malloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_realloc_r"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "release_malloc_recursive_lock_080090b4",
            "code": "\nvoid releaseMallocRecursiveLock_080090b4(void)\n\n{\n  __retarget_lock_release_recursive(&lock);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "release_malloc_recursive_lock_080090b4",
                "__lock___malloc_recursive_mutex": "lock"
            },
            "calling": [
                "_malloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_realloc_r"
            ],
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c0": {
            "entrypoint": "0x080090c0",
            "current_name": "allocate_or_update_entry_080090c0",
            "code": "\nundefined4 * allocate_or_update_entry_080090c0(int entry_list,uint index)\n\n{\n  undefined4 *existing_entry;\n  int entry_list_ptr;\n  \n  entry_list_ptr = *(int *)(entry_list + 0x4c);\n  if (entry_list_ptr == 0) {\n    entry_list_ptr = _calloc_r(entry_list,4,0x21);\n    *(int *)(entry_list + 0x4c) = entry_list_ptr;\n    if (entry_list_ptr == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  existing_entry = *(undefined4 **)(entry_list_ptr + index * 4);\n  if (existing_entry == (undefined4 *)0x0) {\n    entry_list_ptr = 1 << (index & 0xff);\n    existing_entry = (undefined4 *)_calloc_r(entry_list,1,(entry_list_ptr + 5) * 4);\n    if (existing_entry == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    existing_entry[1] = index;\n    existing_entry[2] = entry_list_ptr;\n  }\n  else {\n    *(undefined4 *)(entry_list_ptr + index * 4) = *existing_entry;\n  }\n  existing_entry[3] = 0;\n  existing_entry[4] = 0;\n  return existing_entry;\n}\n\n",
            "renaming": {
                "FUN_080090c0": "allocate_or_update_entry_080090c0",
                "param_1": "entry_list",
                "param_2": "index",
                "puVar1": "existing_entry",
                "iVar2": "entry_list_ptr"
            },
            "calling": [
                "__multiply",
                "__lshift",
                "_dtoa_r",
                "__d2b",
                "__mdiff",
                "__multadd",
                "__i2b",
                "__pow5mult"
            ],
            "called": [
                "_calloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800910c": {
            "entrypoint": "0x0800910c",
            "current_name": "update_pointer_value_0800910c",
            "code": "\nvoid updatePointerValue_0800910c(int pointerArrayBase,undefined4 *updatedPointer)\n\n{\n  int tempValue;\n  \n  if (updatedPointer != (undefined4 *)0x0) {\n    tempValue = *(int *)(pointerArrayBase + 0x4c);\n    *updatedPointer = *(undefined4 *)(tempValue + updatedPointer[1] * 4);\n    *(undefined4 **)(tempValue + updatedPointer[1] * 4) = updatedPointer;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800910c": "update_pointer_value_0800910c",
                "param_1": "pointerArrayBase",
                "param_2": "updatedPointer",
                "iVar1": "tempValue"
            },
            "calling": [
                "_dtoa_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009120": {
            "entrypoint": "0x08009120",
            "current_name": "process_data_08009120",
            "code": "\nundefined4 * processData_08009120(int param,undefined4 *data,int multiplier,uint accumulator)\n\n{\n  undefined4 *result;\n  uint temp;\n  int length;\n  uint *ptr;\n  int i;\n  \n  i = 0;\n  length = data[4];\n  ptr = data + 5;\n  do {\n    i = i + 1;\n    accumulator = multiplier * (*ptr & 0xffff) + accumulator;\n    temp = multiplier * (*ptr >> 0x10) + (accumulator >> 0x10);\n    *ptr = (accumulator & 0xffff) + temp * 0x10000;\n    accumulator = temp >> 0x10;\n    ptr = ptr + 1;\n  } while (i < length);\n  result = data;\n  if (accumulator != 0) {\n    if ((int)data[2] <= length) {\n      result = (undefined4 *)_Balloc(param,data[1] + 1);\n      memcpy(result + 3,data + 3,(data[4] + 2) * 4);\n      i = *(int *)(param + 0x4c);\n      *data = *(undefined4 *)(i + data[1] * 4);\n      *(undefined4 **)(i + data[1] * 4) = data;\n    }\n    result[length + 5] = accumulator;\n    result[4] = length + 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009120": "process_data_08009120",
                "param_1": "param",
                "param_2": "data",
                "param_3": "multiplier",
                "param_4": "accumulator",
                "puVar1": "result",
                "uVar2": "temp",
                "iVar3": "length",
                "puVar4": "ptr",
                "iVar5": "i"
            },
            "calling": [
                "_dtoa_r",
                "__pow5mult"
            ],
            "called": [
                "memcpy",
                "_Balloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a4": {
            "entrypoint": "0x080091a4",
            "current_name": "count_leading_zeros_080091a4",
            "code": "\nint countLeadingZeros_080091a4(uint input)\n\n{\n  int leadingZerosCount;\n  \n  if ((input & 0xffff0000) == 0) {\n    input = input << 0x10;\n    leadingZerosCount = 0x10;\n  }\n  else {\n    leadingZerosCount = 0;\n  }\n  if ((input & 0xff000000) == 0) {\n    input = input << 8;\n    leadingZerosCount = leadingZerosCount + 8;\n  }\n  if ((input & 0xf0000000) == 0) {\n    input = input << 4;\n    leadingZerosCount = leadingZerosCount + 4;\n  }\n  if ((input & 0xc0000000) == 0) {\n    input = input << 2;\n    leadingZerosCount = leadingZerosCount + 2;\n  }\n  if (-1 < (int)input) {\n    if ((int)(input << 1) < 0) {\n      return leadingZerosCount + 1;\n    }\n    leadingZerosCount = 0x20;\n  }\n  return leadingZerosCount;\n}\n\n",
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "param_1": "input",
                "iVar1": "leadingZerosCount"
            },
            "calling": [
                "_dtoa_r",
                "__d2b"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091e4": {
            "entrypoint": "0x080091e4",
            "current_name": "determine_leading_zeroes_080091e4",
            "code": "\nint determineLeadingZeroes_080091e4(uint *input)\n\n{\n  int leadingZeroes;\n  uint value;\n  \n  value = *input;\n  if ((value & 7) == 0) {\n    if ((value & 0xffff) == 0) {\n      value = value >> 0x10;\n      leadingZeroes = 0x10;\n    }\n    else {\n      leadingZeroes = 0;\n    }\n    if ((value & 0xff) == 0) {\n      value = value >> 8;\n      leadingZeroes = leadingZeroes + 8;\n    }\n    if ((value & 0xf) == 0) {\n      value = value >> 4;\n      leadingZeroes = leadingZeroes + 4;\n    }\n    if ((value & 3) == 0) {\n      value = value >> 2;\n      leadingZeroes = leadingZeroes + 2;\n    }\n    if (-1 < (int)(value << 0x1f)) {\n      value = value >> 1;\n      if (value == 0) {\n        return 0x20;\n      }\n      leadingZeroes = leadingZeroes + 1;\n    }\n    *input = value;\n    return leadingZeroes;\n  }\n  if ((int)(value << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(value << 0x1e)) {\n    *input = value >> 2;\n    return 2;\n  }\n  *input = value >> 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080091e4": "determine_leading_zeroes_080091e4",
                "param_1": "input",
                "iVar1": "leadingZeroes",
                "uVar2": "value"
            },
            "calling": [
                "__d2b"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009244": {
            "entrypoint": "0x08009244",
            "current_name": "initialize_memory_block_08009244",
            "code": "\nvoid initializeMemoryBlock_08009244(undefined4 size,undefined4 data)\n\n{\n  int memoryBlock;\n  \n  memoryBlock = _Balloc(size,1);\n  *(undefined4 *)(memoryBlock + 0x10) = 1;\n  *(undefined4 *)(memoryBlock + 0x14) = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009244": "initialize_memory_block_08009244",
                "param_1": "size",
                "param_2": "data",
                "iVar1": "memoryBlock"
            },
            "calling": [
                "_dtoa_r"
            ],
            "called": [
                "_Balloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009258": {
            "entrypoint": "0x08009258",
            "current_name": "initialize_array_08009258",
            "code": "\nvoid initializeArray_08009258(undefined4 memory,int array1,int array2)\n\n{\n  uint *pointer1;\n  uint *pointer2;\n  int lengthDiff;\n  uint temp1;\n  uint *ptr1;\n  uint temp2;\n  uint *ptr2;\n  uint temp3;\n  int length1;\n  int length2;\n  uint temp4;\n  int length1Tmp;\n  int array1Tmp;\n  uint *ptr1Tmp;\n  uint *ptr1Tmp2;\n  uint *ptr2Tmp;\n  uint *ptr2Tmp2;\n  uint *ptrTemp;\n  \n  length1Tmp = *(int *)(array1 + 0x10);\n  length1 = *(int *)(array2 + 0x10);\n  length2 = length1;\n  array1Tmp = array1;\n  if (length1Tmp < length1) {\n    length2 = length1Tmp;\n    length1Tmp = length1;\n    array1Tmp = array2;\n    array2 = array1;\n  }\n  length1 = length1Tmp + length2;\n  lengthDiff = *(int *)(array1Tmp + 4);\n  if (*(int *)(array1Tmp + 8) < length1) {\n    lengthDiff = lengthDiff + 1;\n  }\n  lengthDiff = _Balloc(memory,lengthDiff);\n  ptrTemp = (uint *)(lengthDiff + 0x14);\n  ptr2Tmp2 = ptrTemp + length1;\n  for (ptr1 = ptrTemp; ptr1 < ptr2Tmp2; ptr1 = ptr1 + 1) {\n    *ptr1 = 0;\n  }\n  temp2 = array2 + 0x14;\n  temp4 = temp2 + length2 * 4;\n  ptr1 = (uint *)(array1Tmp + 0x14);\n  if (temp2 < temp4) {\n    ptr2 = (uint *)(temp2 + ((temp4 - array2) - 0x15 & 0xfffffffc));\n    ptr2Tmp = (uint *)(array2 + 0x10);\n    do {\n      while( true ) {\n        ptr2Tmp = ptr2Tmp + 1;\n        temp2 = *ptr2Tmp & 0xffff;\n        if (temp2 != 0) break;\n        temp2 = *ptr2Tmp >> 0x10;\n        if (temp2 == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp3 = *ptrTemp;\n        temp1 = 0;\n        pointer1 = ptr1;\n        ptr1Tmp = ptrTemp;\n        temp4 = temp3;\n        do {\n          ptr1Tmp2 = ptr1Tmp;\n          temp1 = temp1 + temp2 * *(ushort *)pointer1 + (temp4 >> 0x10);\n          *ptr1Tmp2 = temp3 & 0xffff | temp1 * 0x10000;\n          pointer2 = pointer1 + 1;\n          temp4 = ptr1Tmp2[1];\n          temp3 = temp2 * (*pointer1 >> 0x10) + (temp4 & 0xffff) + (temp1 >> 0x10);\n          temp1 = temp3 >> 0x10;\n          pointer1 = pointer2;\n          ptr1Tmp = ptr1Tmp2 + 1;\n        } while (pointer2 < ptr1 + length1Tmp);\n        ptr1Tmp2[1] = temp3;\n        ptrTemp = ptrTemp + 1;\n        if (ptr2 == ptr2Tmp) goto LAB_0800937a;\n      }\n      temp4 = 0;\n      pointer1 = ptrTemp;\n      ptr1Tmp = ptr1;\n      do {\n        pointer2 = pointer1;\n        ptr1Tmp2 = ptr1Tmp + 1;\n        temp3 = temp2 * (*ptr1Tmp & 0xffff) + (*pointer2 & 0xffff) + temp4;\n        temp1 = temp2 * (*ptr1Tmp >> 0x10) + (*pointer2 >> 0x10) + (temp3 >> 0x10);\n        temp4 = temp1 >> 0x10;\n        *pointer2 = temp3 & 0xffff | temp1 * 0x10000;\n        pointer1 = pointer2 + 1;\n        ptr1Tmp = ptr1Tmp2;\n      } while (ptr1Tmp2 < ptr1 + length1Tmp);\n      pointer2[1] = temp4;\n      temp2 = *ptr2Tmp >> 0x10;\n      if (temp2 != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptrTemp = ptrTemp + 1;\n    } while (ptr2 != ptr2Tmp);\n  }\nLAB_0800937a:\n  if (0 < length1) {\n    temp2 = ptr2Tmp2[-1];\n    ptr2Tmp2 = ptr2Tmp2 + -1;\n    while ((temp2 == 0 && (length1 = length1 + -1, length1 != 0))) {\n      ptr2Tmp2 = ptr2Tmp2 + -1;\n      temp2 = *ptr2Tmp2;\n    }\n  }\n  *(int *)(lengthDiff + 0x10) = length1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009258": "initialize_array_08009258",
                "param_1": "memory",
                "param_2": "array1",
                "param_3": "array2",
                "puVar1": "pointer1",
                "puVar2": "pointer2",
                "iVar3": "lengthDiff",
                "uVar4": "temp1",
                "puVar5": "ptr1",
                "uVar6": "temp2",
                "puVar7": "ptr2",
                "uVar8": "temp3",
                "iVar9": "length1",
                "iVar10": "length2",
                "uVar11": "temp4",
                "iVar12": "length1Tmp",
                "iVar13": "array1Tmp",
                "puVar14": "ptr1Tmp",
                "puVar15": "ptr1Tmp2",
                "puVar16": "ptr2Tmp",
                "puVar17": "ptr2Tmp2",
                "puVar18": "ptrTemp"
            },
            "calling": [
                "_dtoa_r",
                "__pow5mult"
            ],
            "called": [
                "_Balloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080093a4": {
            "entrypoint": "0x080093a4",
            "current_name": "multiply_and_add_080093a4",
            "code": "\nundefined4 * multiplyAndAdd_080093a4(int input,undefined4 *output,uint size)\n\n{\n  int tempVar1;\n  int tempVar2;\n  undefined4 *iterator1;\n  undefined4 *iterator2;\n  \n  if ((size & 3) != 0) {\n    output = (undefined4 *)\n              __multadd(input,output,*(undefined4 *)(&p05_6092 + ((size & 3) - 1) * 4),0);\n  }\n  tempVar2 = (int)size >> 2;\n  if (tempVar2 != 0) {\n    iterator2 = *(undefined4 **)(input + 0x48);\n    if (iterator2 == (undefined4 *)0x0) {\n      iterator2 = (undefined4 *)_Balloc(input,1);\n      iterator2[4] = 1;\n      iterator2[5] = 0x271;\n      *(undefined4 **)(input + 0x48) = iterator2;\n      *iterator2 = 0;\n    }\n    iterator1 = output;\n    if (tempVar2 << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    tempVar2 = tempVar2 >> 1;\n    iterator1 = iterator2;\n    if (tempVar2 != 0) {\n      while( true ) {\n        iterator2 = (undefined4 *)*iterator1;\n        if (iterator2 == (undefined4 *)0x0) {\n          iterator2 = (undefined4 *)__multiply(input,iterator1,iterator1);\n          *iterator1 = iterator2;\n          *iterator2 = 0;\n        }\n        iterator1 = output;\n        if (-1 < tempVar2 << 0x1f) break;\nLAB_080093d2:\n        output = (undefined4 *)__multiply(input,iterator1,iterator2);\n        if (iterator1 == (undefined4 *)0x0) break;\n        tempVar1 = *(int *)(input + 0x4c);\n        tempVar2 = tempVar2 >> 1;\n        *iterator1 = *(undefined4 *)(tempVar1 + iterator1[1] * 4);\n        *(undefined4 **)(tempVar1 + iterator1[1] * 4) = iterator1;\n        iterator1 = iterator2;\n        if (tempVar2 == 0) {\n          return output;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_080093a4": "multiply_and_add_080093a4",
                "param_1": "input",
                "param_2": "output",
                "param_3": "size",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "puVar3": "iterator1",
                "puVar4": "iterator2"
            },
            "calling": [
                "_dtoa_r"
            ],
            "called": [
                "__multiply",
                "__multadd",
                "_Balloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009444": {
            "entrypoint": "0x08009444",
            "current_name": "reverse_binary_08009444",
            "code": "\nvoid reverseBinary_08009444(int binarySize,undefined4 *binaryParams,uint shiftAmount)\n\n{\n  int factor1;\n  int factor2;\n  int combinedFactors;\n  undefined4 selectedValue;\n  int offset;\n  int multipliedFactor;\n  uint *resultPointer;\n  uint *paramPointer;\n  uint *tempPointer2;\n  uint *paramPointer2;\n  int shiftedValue;\n  int updatedLength;\n  uint shiftedBits;\n  uint *tempPointer;\n  \n  offset = binaryParams[4];\n  shiftedValue = (int)shiftAmount >> 5;\n  updatedLength = shiftedValue + offset + 1;\n  combinedFactors = binaryParams[1];\n  factor2 = binaryParams[2];\n  if ((int)binaryParams[2] < updatedLength) {\n    do {\n      multipliedFactor = factor2 * 2;\n      factor1 = factor2 * -2;\n      combinedFactors = combinedFactors + 1;\n      factor2 = multipliedFactor;\n    } while (updatedLength != multipliedFactor && updatedLength + factor1 < 0 == SBORROW4(updatedLength,multipliedFactor));\n  }\n  factor2 = allocateMemory(binarySize,combinedFactors);\n  resultPointer = (uint *)(factor2 + 0x14);\n  if (0 < shiftedValue) {\n    paramPointer2 = resultPointer + shiftedValue;\n    paramPointer = resultPointer;\n    do {\n      tempPointer = paramPointer + 1;\n      *paramPointer = 0;\n      resultPointer = paramPointer2;\n      paramPointer = tempPointer;\n    } while (tempPointer != paramPointer2);\n  }\n  combinedFactors = binaryParams[4];\n  paramPointer = binaryParams + 5;\n  shiftAmount = shiftAmount & 0x1f;\n  if (shiftAmount == 0) {\n    resultPointer = resultPointer + -1;\n    paramPointer2 = paramPointer;\n    do {\n      tempPointer = paramPointer2 + 1;\n      resultPointer = resultPointer + 1;\n      *resultPointer = *paramPointer2;\n      paramPointer2 = tempPointer;\n    } while (tempPointer < paramPointer + combinedFactors);\n  }\n  else {\n    shiftedBits = 0;\n    paramPointer2 = paramPointer;\n    do {\n      tempPointer = resultPointer;\n      *tempPointer = *paramPointer2 << shiftAmount | shiftedBits;\n      tempPointer2 = paramPointer2 + 1;\n      shiftedBits = *paramPointer2 >> (0x20 - shiftAmount & 0xff);\n      resultPointer = tempPointer + 1;\n      paramPointer2 = tempPointer2;\n    } while (tempPointer2 < paramPointer + combinedFactors);\n    tempPointer[1] = shiftedBits;\n    if (shiftedBits != 0) {\n      updatedLength = shiftedValue + offset + 2;\n    }\n  }\n  offset = *(int *)(binarySize + 0x4c);\n  combinedFactors = binaryParams[1];\n  selectedValue = *(undefined4 *)(offset + combinedFactors * 4);\n  *(int *)(factor2 + 0x10) = updatedLength + -1;\n  *binaryParams = selectedValue;\n  *(undefined4 **)(offset + combinedFactors * 4) = binaryParams;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009444": "reverse_binary_08009444",
                "param_1": "binarySize",
                "param_2": "binaryParams",
                "param_3": "shiftAmount",
                "iVar1": "factor1",
                "iVar2": "factor2",
                "iVar3": "combinedFactors",
                "uVar4": "selectedValue",
                "iVar5": "offset",
                "iVar6": "multipliedFactor",
                "puVar7": "resultPointer",
                "puVar8": "paramPointer",
                "puVar9": "tempPointer",
                "puVar10": "tempPointer2",
                "puVar11": "paramPointer2",
                "iVar12": "shiftedValue",
                "iVar13": "updatedLength",
                "uVar14": "shiftedBits",
                "_Balloc": "allocateMemory"
            },
            "calling": [
                "_dtoa_r"
            ],
            "called": [
                "_Balloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094f8": {
            "entrypoint": "0x080094f8",
            "current_name": "compare_arrays_080094f8",
            "code": "\nint compareArrays_080094f8(int array1,int array2)\n\n{\n  int arraySizeDifference;\n  uint *ptrArray2;\n  int array2Size;\n  uint *ptrArray1;\n  \n  array2Size = *(int *)(array2 + 0x10);\n  arraySizeDifference = *(int *)(array1 + 0x10) - array2Size;\n  if (arraySizeDifference == 0) {\n    ptrArray2 = (uint *)(array2 + 0x14 + array2Size * 4);\n    ptrArray1 = (uint *)(array1 + 0x14) + array2Size;\n    do {\n      ptrArray1 = ptrArray1 + -1;\n      ptrArray2 = ptrArray2 + -1;\n      if (*ptrArray1 != *ptrArray2) {\n        if (*ptrArray2 <= *ptrArray1) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < ptrArray1);\n  }\n  return arraySizeDifference;\n}\n\n",
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "arraySizeDifference",
                "iVar3": "array2Size",
                "puVar2": "ptrArray2",
                "puVar4": "ptrArray1"
            },
            "calling": [
                "_dtoa_r",
                "quorem"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009530": {
            "entrypoint": "0x08009530",
            "current_name": "calculate_balloc_08009530",
            "code": "\nvoid calculateBalloc_08009530(undefined4 param1,uint *input1,uint *input2,undefined4 param4)\n\n{\n  int allocationSize;\n  uint *ptrInput1Size;\n  uint input2Size;\n  uint tempValue;\n  undefined4 isInput1Smaller;\n  uint *ptrResultArray;\n  uint *ptrInput1;\n  uint *ptrInput2;\n  uint *ptrInput2Inner;\n  uint *ptrInput1Start;\n  int carry;\n  uint *ptrInput2Start;\n  uint resultSize;\n  uint *ptrResultArrayInner;\n  \n  ptrInput1Size = (uint *)input2[4];\n  ptrInput1Start = input1 + 5;\n  ptrInput2Start = input2 + 5;\n  ptrInput1 = ptrInput1Start;\n  ptrInput2 = input1;\n  if ((uint *)input1[4] == ptrInput1Size) {\n    ptrResultArray = ptrInput1Start + (int)ptrInput1Size;\n    ptrInput1Size = ptrInput2Start + (int)ptrInput1Size;\n    while( true ) {\n      ptrResultArray = ptrResultArray + -1;\n      ptrInput1Size = ptrInput1Size + -1;\n      if (*ptrResultArray != *ptrInput1Size) break;\n      if (ptrResultArray <= ptrInput1Start) {\n        carry = _Balloc(param1,0,ptrResultArray,ptrInput1Size,param4);\n        *(undefined4 *)(carry + 0x10) = 1;\n        *(undefined4 *)(carry + 0x14) = 0;\n        return;\n      }\n    }\n    isInput1Smaller = 0;\n    if (*ptrInput1Size <= *ptrResultArray) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)input1[4] - (int)ptrInput1Size) {\n    isInput1Smaller = 0;\n    ptrResultArray = input2;\n    goto LAB_08009578;\n  }\n  isInput1Smaller = 1;\n  ptrResultArray = ptrInput1Start;\n  ptrInput1Size = input1;\n  ptrInput1 = ptrInput2Start;\n  ptrInput2 = input2;\n  input2 = input1;\n  ptrInput2Start = ptrInput1Start;\nLAB_08009578:\n  allocationSize = _Balloc(param1,ptrInput2[1],ptrResultArray,ptrInput1Size,param4);\n  carry = 0;\n  resultSize = ptrInput2[4];\n  input2Size = input2[4];\n  *(undefined4 *)(allocationSize + 0xc) = isInput1Smaller;\n  ptrInput1Start = ptrInput1 + resultSize;\n  ptrInput1Size = (uint *)(allocationSize + 0x14);\n  ptrInput2 = ptrInput2Start;\n  do {\n    ptrResultArrayInner = ptrInput1 + 1;\n    ptrInput2Inner = ptrInput2 + 1;\n    tempValue = ((*ptrInput1 & 0xffff) + carry) - (*ptrInput2 & 0xffff);\n    carry = ((*ptrInput1 >> 0x10) - (*ptrInput2 >> 0x10)) + ((int)tempValue >> 0x10);\n    tempValue = tempValue & 0xffff | carry * 0x10000;\n    ptrResultArray = ptrInput1Size + 1;\n    *ptrInput1Size = tempValue;\n    carry = carry >> 0x10;\n    ptrInput1Size = ptrResultArray;\n    ptrInput1 = ptrResultArrayInner;\n    ptrInput2 = ptrInput2Inner;\n  } while (ptrInput2Inner < ptrInput2Start + input2Size);\n  ptrInput1Size = ptrResultArrayInner;\n  ptrInput1 = ptrResultArray;\n  if (ptrResultArrayInner < ptrInput1Start) {\n    do {\n      ptrInput2 = ptrInput1Size + 1;\n      input2Size = (*ptrInput1Size & 0xffff) + carry;\n      carry = ((int)input2Size >> 0x10) + (*ptrInput1Size >> 0x10);\n      tempValue = input2Size & 0xffff | carry * 0x10000;\n      *ptrInput1 = tempValue;\n      carry = carry >> 0x10;\n      ptrInput1Size = ptrInput2;\n      ptrInput1 = ptrInput1 + 1;\n    } while (ptrInput2 < ptrInput1Start);\n    ptrResultArray = (uint *)((int)ptrResultArray + ((int)ptrInput1Start + ~(uint)ptrResultArrayInner & 0xfffffffc) + 4);\n  }\n  ptrResultArray = ptrResultArray + -1;\n  while (tempValue == 0) {\n    ptrResultArray = ptrResultArray + -1;\n    resultSize = resultSize - 1;\n    tempValue = *ptrResultArray;\n  }\n  *(uint *)(allocationSize + 0x10) = resultSize;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009530": "calculate_balloc_08009530",
                "param_1": "param1",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "param4",
                "iVar1": "allocationSize",
                "puVar2": "ptrInput1Size",
                "uVar3": "input2Size",
                "uVar4": "tempValue",
                "uVar5": "isInput1Smaller",
                "puVar6": "ptrResultArray",
                "puVar7": "ptrInput1",
                "puVar8": "ptrResultArrayInner",
                "puVar9": "ptrInput2",
                "puVar10": "ptrInput2Inner",
                "puVar11": "ptrInput1Start",
                "iVar12": "carry",
                "puVar13": "ptrInput2Start",
                "uVar14": "resultSize"
            },
            "calling": [
                "_dtoa_r"
            ],
            "called": [
                "_Balloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009630": {
            "entrypoint": "0x08009630",
            "current_name": "process_data_08009630",
            "code": "\nint processData_08009630(undefined4 param1,undefined4 param2,uint param3,uint param4,int *outputValue1,\n                int *outputValue2)\n\n{\n  int buffer;\n  uint bitOffset;\n  int tempVar1;\n  int tempVar2;\n  uint shiftedValue;\n  uint shiftCount;\n  undefined8 highBits;\n  uint tempValue1;\n  uint tempValue2;\n  \n  buffer = _Balloc(param1,1);\n  shiftCount = (param4 << 1) >> 0x15;\n  tempValue2 = param4 & 0xfffff;\n  if (shiftCount != 0) {\n    tempValue2 = tempValue2 | 0x100000;\n  }\n  if (param3 == 0) {\n    tempVar1 = __lo0bits(&tempValue2);\n    tempVar2 = 1;\n    bitOffset = tempVar1 + 0x20;\n    *(undefined4 *)(buffer + 0x10) = 1;\n    *(uint *)(buffer + 0x14) = tempValue2;\n  }\n  else {\n    tempValue1 = param3;\n    bitOffset = __lo0bits(&tempValue1);\n    if (bitOffset == 0) {\n      *(uint *)(buffer + 0x14) = tempValue1;\n    }\n    else {\n      shiftedValue = tempValue2 << (0x20 - bitOffset & 0xff);\n      tempValue2 = tempValue2 >> (bitOffset & 0xff);\n      *(uint *)(buffer + 0x14) = shiftedValue | tempValue1;\n    }\n    if (tempValue2 == 0) {\n      tempVar2 = 1;\n    }\n    else {\n      tempVar2 = 2;\n    }\n    *(uint *)(buffer + 0x18) = tempValue2;\n    *(int *)(buffer + 0x10) = tempVar2;\n  }\n  if (shiftCount == 0) {\n    *outputValue1 = bitOffset - 0x432;\n    highBits = __hi0bits(*(undefined4 *)(buffer + tempVar2 * 4 + 0x10));\n    *outputValue2 = (int)((ulonglong)highBits >> 0x20) * 0x20 - (int)highBits;\n    return buffer;\n  }\n  *outputValue1 = (shiftCount - 0x433) + bitOffset;\n  *outputValue2 = 0x35 - bitOffset;\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_08009630": "process_data_08009630",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "outputValue1",
                "param_6": "outputValue2",
                "iVar1": "buffer",
                "uVar2": "bitOffset",
                "iVar3": "tempVar1",
                "iVar4": "tempVar2",
                "uVar5": "shiftedValue",
                "uVar6": "shiftCount",
                "uVar7": "highBits",
                "local_20": "tempValue1",
                "local_1c": "tempValue2"
            },
            "calling": [
                "_dtoa_r"
            ],
            "called": [
                "__hi0bits",
                "__lo0bits",
                "_Balloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e0": {
            "entrypoint": "0x080096e0",
            "current_name": "calculate_exponential_080096e0",
            "code": "\ndouble calculate_exponential_080096e0(double input_value,int *exponent)\n\n{\n  uint temp_var1;\n  uint temp_var2;\n  int *output;\n  int increment;\n  uint abs_exponent;\n  double result;\n  \n  increment = 0;\n  abs_exponent = temp_var1 & 0x7fffffff;\n  *output = 0;\n  if ((abs_exponent < 0x7ff00000) && ((abs_exponent | (uint)exponent) != 0)) {\n    if (abs_exponent < 0x100000) {\n      result = (double)__muldf3(exponent,temp_var1,0,0x43500000);\n      increment = -0x36;\n      abs_exponent = temp_var2 & 0x7fffffff;\n    }\n    *output = ((int)abs_exponent >> 0x14) + -0x3fe + increment;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080096e0": "calculate_exponential_080096e0",
                "__x": "input_value",
                "__exponent": "exponent",
                "in_r1": "temp_var1",
                "extraout_r1": "temp_var2",
                "in_r2": "output",
                "iVar1": "increment",
                "uVar2": "abs_exponent",
                "in_d0": "result"
            },
            "calling": [
                "_svfprintf_r"
            ],
            "called": [
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009744": {
            "entrypoint": "0x08009744",
            "current_name": "allocate_memory_08009744",
            "code": "\nvoid allocate_memory_08009744(int *error_code,intptr_t size)\n\n{\n  void *allocated_memory;\n  \n  errno = 0;\n  allocated_memory = _sbrk(size);\n  if ((allocated_memory == (void *)0xffffffff) && (errno != 0)) {\n    *error_code = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009744": "allocate_memory_08009744",
                "param_1": "error_code",
                "param_2": "size",
                "pvVar1": "allocated_memory"
            },
            "calling": [
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009768": {
            "entrypoint": "0x08009768",
            "current_name": "copy_string_08009768",
            "code": "\nchar * copy_string_08009768(char *destination,char *source,size_t length)\n\n{\n  char current_char;\n  uint *src_ptr;\n  uint *dest_ptr;\n  uint *temp_ptr;\n  uint current_value;\n  \n  dest_ptr = (uint *)destination;\n  if (((((uint)destination | (uint)source) & 3) == 0) && (src_ptr = (uint *)source, 3 < length)) {\n    do {\n      source = (char *)(src_ptr + 1);\n      current_value = *src_ptr;\n      if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0) goto LAB_0800979c;\n      length = length - 4;\n      src_ptr = dest_ptr + 1;\n      *dest_ptr = current_value;\n      dest_ptr = src_ptr;\n      src_ptr = (uint *)source;\n    } while (3 < length);\n  }\n  src_ptr = (uint *)source;\n  if (length != 0) {\nLAB_0800979c:\n    current_char = *(char *)src_ptr;\n    *(char *)dest_ptr = current_char;\n    while( true ) {\n      dest_ptr = (uint *)((int)dest_ptr + 1);\n      length = length - 1;\n      if (current_char == '\\0') break;\n      if (length == 0) {\n        return destination;\n      }\n      src_ptr = (uint *)((int)src_ptr + 1);\n      current_char = *(char *)src_ptr;\n      *(char *)dest_ptr = current_char;\n    }\n    if (length != 0) {\n      src_ptr = dest_ptr;\n      do {\n        temp_ptr = (uint *)((int)src_ptr + 1);\n        *(char *)src_ptr = '\\0';\n        src_ptr = temp_ptr;\n      } while (temp_ptr != (uint *)(length + (int)dest_ptr));\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_08009768": "copy_string_08009768",
                "__dest": "destination",
                "__src": "source",
                "__n": "length",
                "cVar1": "current_char",
                "puVar2": "src_ptr",
                "puVar3": "dest_ptr",
                "puVar4": "temp_ptr",
                "uVar5": "current_value"
            },
            "calling": [
                "_svfprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080097cc": {
            "entrypoint": "0x080097cc",
            "current_name": "copy_and_move_data_080097cc",
            "code": "\nundefined4 copyAndMoveData_080097cc(undefined4 *errorStatus,void **sourceDestinationData,int *countValues)\n\n{\n  void *sourceData;\n  void *copyLength;\n  int iterationCount;\n  void *destData;\n  void *sourceLength;\n  void **tempPointer1;\n  void **tempPointer2;\n  void *tempSource;\n  size_t sourceOffset;\n  \n  if (countValues[2] != 0) {\n    sourceData = *sourceDestinationData;\n    destData = sourceDestinationData[2];\n    tempPointer2 = (void **)*countValues;\n    do {\n      do {\n        tempPointer1 = tempPointer2 + 2;\n        tempSource = *tempPointer2;\n        sourceLength = tempPointer2[1];\n        tempPointer2 = tempPointer1;\n      } while (sourceLength == (void *)0x0);\n      copyLength = sourceLength;\n      if ((destData <= sourceLength) && (copyLength = destData, (*(ushort *)(sourceDestinationData + 3) & 0x480) != 0)) {\n        sourceOffset = (int)sourceData - (int)sourceDestinationData[4];\n        destData = (void *)(((int)sourceDestinationData[5] * 3) / 2);\n        sourceData = (void *)((int)sourceLength + sourceOffset + 1);\n        if (destData < sourceData) {\n          destData = sourceData;\n        }\n        if ((int)((uint)*(ushort *)(sourceDestinationData + 3) << 0x15) < 0) {\n          copyLength = (void *)_malloc_r(errorStatus,destData);\n          if (copyLength == (void *)0x0) {\nLAB_08009896:\n            *errorStatus = 0xc;\n            *(ushort *)(sourceDestinationData + 3) = *(ushort *)(sourceDestinationData + 3) | 0x40;\n            countValues[1] = 0;\n            countValues[2] = 0;\n            return 0xffffffff;\n          }\n          memcpy(copyLength,sourceDestinationData[4],sourceOffset);\n          *(ushort *)(sourceDestinationData + 3) = *(ushort *)(sourceDestinationData + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          copyLength = (void *)_realloc_r(errorStatus);\n          if (copyLength == (void *)0x0) {\n            _free_r(errorStatus,sourceDestinationData[4]);\n            goto LAB_08009896;\n          }\n        }\n        sourceData = (void *)((int)copyLength + sourceOffset);\n        sourceDestinationData[5] = destData;\n        sourceDestinationData[4] = copyLength;\n        *sourceDestinationData = sourceData;\n        sourceDestinationData[2] = (void *)((int)destData - sourceOffset);\n        copyLength = sourceLength;\n      }\n      memmove(sourceData,tempSource,(size_t)copyLength);\n      iterationCount = countValues[2];\n      destData = (void *)((int)sourceDestinationData[2] - (int)copyLength);\n      sourceData = (void *)((int)*sourceDestinationData + (int)copyLength);\n      sourceDestinationData[2] = destData;\n      *sourceDestinationData = sourceData;\n      countValues[2] = iterationCount - (int)sourceLength;\n    } while (iterationCount - (int)sourceLength != 0);\n  }\n  countValues[1] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080097cc": "copy_and_move_data_080097cc",
                "param_1": "errorStatus",
                "param_2": "sourceDestinationData",
                "param_3": "countValues",
                "pvVar1": "sourceData",
                "pvVar2": "copyLength",
                "iVar3": "iterationCount",
                "pvVar4": "destData",
                "pvVar5": "sourceLength",
                "ppvVar6": "tempPointer1",
                "ppvVar7": "tempPointer2",
                "__src": "tempSource",
                "__n": "sourceOffset"
            },
            "calling": [
                "_svfprintf_r"
            ],
            "called": [
                "_malloc_r",
                "memmove",
                "_free_r",
                "memcpy",
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098c0": {
            "entrypoint": "0x080098c0",
            "current_name": "update_callback_data_080098c0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 updateCallbackData_080098c0(int eventType,undefined4 callback,undefined4 data,undefined4 extraData)\n\n{\n  undefined *callbackDataPtr;\n  undefined4 returnValue;\n  uint bitMask;\n  uint numCallbacks;\n  \n  __retarget_lock_acquire_recursive(__atexit_recursive_mutex);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  callbackDataPtr = DAT_20000168;\n  numCallbacks = *(uint *)(DAT_20000168 + 4);\n  if ((int)numCallbacks < 0x20) {\n    if (eventType != 0) {\n      *(undefined4 *)(DAT_20000168 + numCallbacks * 4 + 0x88) = data;\n      bitMask = 1 << (numCallbacks & 0xff);\n      *(uint *)(callbackDataPtr + 0x188) = *(uint *)(callbackDataPtr + 0x188) | bitMask;\n      *(undefined4 *)(callbackDataPtr + numCallbacks * 4 + 0x108) = extraData;\n      if (eventType == 2) {\n        *(uint *)(callbackDataPtr + 0x18c) = bitMask | *(uint *)(callbackDataPtr + 0x18c);\n      }\n    }\n    *(uint *)(callbackDataPtr + 4) = numCallbacks + 1;\n    returnValue = __atexit_recursive_mutex;\n    *(undefined4 *)(callbackDataPtr + (numCallbacks + 2) * 4) = callback;\n    __retarget_lock_release_recursive(returnValue);\n    returnValue = 0;\n  }\n  else {\n    __retarget_lock_release_recursive(__atexit_recursive_mutex);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080098c0": "update_callback_data_080098c0",
                "param_1": "eventType",
                "param_2": "callback",
                "param_3": "data",
                "param_4": "extraData",
                "puVar1": "callbackDataPtr",
                "uVar2": "returnValue",
                "uVar3": "bitMask",
                "uVar4": "numCallbacks"
            },
            "calling": [
                "atexit"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009980": {
            "entrypoint": "0x08009980",
            "current_name": "allocate_and_initialize_memory_08009980",
            "code": "\nundefined4 * allocate_and_initialize_memory_08009980(undefined4 size,int element_size,int num_elements)\n\n{\n  undefined4 *allocated_memory;\n  size_t allocated_size;\n  undefined4 *pointer_to_memory;\n  \n  allocated_memory = (undefined4 *)_malloc_r(size,num_elements * element_size);\n  if (allocated_memory == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  allocated_size = (allocated_memory[-1] & 0xfffffffc) - 4;\n  if (allocated_size < 0x25) {\n    pointer_to_memory = allocated_memory;\n    if (0x13 < allocated_size) {\n      *allocated_memory = 0;\n      allocated_memory[1] = 0;\n      if (0x1b < allocated_size) {\n        allocated_memory[2] = 0;\n        allocated_memory[3] = 0;\n        if (allocated_size == 0x24) {\n          allocated_memory[4] = 0;\n          allocated_memory[5] = 0;\n          pointer_to_memory = allocated_memory + 6;\n        }\n        else {\n          pointer_to_memory = allocated_memory + 4;\n        }\n        *pointer_to_memory = 0;\n        pointer_to_memory[1] = 0;\n        pointer_to_memory[2] = 0;\n        return allocated_memory;\n      }\n      pointer_to_memory = allocated_memory + 2;\n    }\n    *pointer_to_memory = 0;\n    pointer_to_memory[1] = 0;\n    pointer_to_memory[2] = 0;\n    return allocated_memory;\n  }\n  memset(allocated_memory,0,allocated_size);\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_08009980": "allocate_and_initialize_memory_08009980",
                "param_1": "size",
                "param_2": "element_size",
                "param_3": "num_elements",
                "__s": "allocated_memory",
                "__n": "allocated_size",
                "puVar1": "pointer_to_memory"
            },
            "calling": [
                "_Balloc"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099ec": {
            "entrypoint": "0x080099ec",
            "current_name": "extract_uint_from_ptr_080099ec",
            "code": "\nuint extract_uint_from_ptr_080099ec(undefined4 undefined,uint *output_uint_ptr,byte *input_byte_array,int array_length)\n\n{\n  uint result;\n  uint temp_uint;\n  \n  if (output_uint_ptr == (uint *)0x0) {\n    output_uint_ptr = &temp_uint;\n  }\n  if (input_byte_array == (byte *)0x0) {\n    return 0;\n  }\n  if (array_length == 0) {\n    result = 0xfffffffe;\n  }\n  else {\n    *output_uint_ptr = (uint)*input_byte_array;\n    result = (uint)*input_byte_array;\n    if (result != 0) {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080099ec": "extract_uint_from_ptr_080099ec",
                "param_1": "undefined",
                "param_2": "output_uint_ptr",
                "param_3": "input_byte_array",
                "param_4": "array_length",
                "uVar1": "result",
                "uStack_4": "temp_uint"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a18": {
            "entrypoint": "0x08009a18",
            "current_name": "copy_reverse_memory_08009a18",
            "code": "\nvoid * copy_reverse_memory_08009a18(void *destination,void *source,size_t size)\n\n{\n  undefined4 *ptr_dest;\n  undefined *ptr_src;\n  int i;\n  void *result;\n  undefined *ptr_dest_end;\n  int i_end;\n  uint remaining_size;\n  int j;\n  uint remaining_size;\n  undefined4 *ptr_src_end;\n  \n  if ((source < destination) && (ptr_src = (undefined *)((int)source + size), destination < ptr_src)) {\n    ptr_dest_end = (undefined *)((int)destination + size);\n    if (size != 0) {\n      do {\n        ptr_src = ptr_src + -1;\n        ptr_dest_end = ptr_dest_end + -1;\n        *ptr_dest_end = *ptr_src;\n      } while ((undefined *)source != ptr_src);\n    }\n  }\n  else {\n    remaining_size = size;\n    result = destination;\n    if (0xf < size) {\n      if ((((uint)destination | (uint)source) & 3) != 0) goto LAB_08009abc;\n      i = (int)source + 0x10;\n      j = (int)destination + 0x10;\n      do {\n        i_end = i + 0x10;\n        *(undefined4 *)(j + -0x10) = *(undefined4 *)(i + -0x10);\n        *(undefined4 *)(j + -0xc) = *(undefined4 *)(i + -0xc);\n        *(undefined4 *)(j + -8) = *(undefined4 *)(i + -8);\n        *(undefined4 *)(j + -4) = *(undefined4 *)(i + -4);\n        i = i_end;\n        j = j + 0x10;\n      } while (i_end != (int)source + (size - 0x10 & 0xfffffff0) + 0x20);\n      remaining_size = size & 0xf;\n      i = ((size - 0x10 >> 4) + 1) * 0x10;\n      source = (void *)((int)source + i);\n      result = (void *)(i + (int)destination);\n      if (3 < remaining_size) {\n        ptr_src_end = (undefined4 *)((int)result + -4);\n        remaining_size = remaining_size;\n        ptr_dest = (undefined4 *)source;\n        do {\n          remaining_size = remaining_size - 4;\n          ptr_src_end = ptr_src_end + 1;\n          *ptr_src_end = *ptr_dest;\n          ptr_dest = ptr_dest + 1;\n        } while (3 < remaining_size);\n        i = (remaining_size - 4 & 0xfffffffc) + 4;\n        source = (void *)((int)source + i);\n        remaining_size = size & 3;\n        result = (void *)((int)result + i);\n      }\n    }\n    size = remaining_size;\n    if (remaining_size != 0) {\nLAB_08009abc:\n      ptr_src = (undefined *)((int)result + -1);\n      ptr_src_end = (undefined4 *)source;\n      do {\n        ptr_dest = (undefined4 *)((int)ptr_src_end + 1);\n        ptr_src = ptr_src + 1;\n        *ptr_src = *(undefined *)ptr_src_end;\n        ptr_src_end = ptr_dest;\n      } while (ptr_dest != (undefined4 *)(size + (int)source));\n      return destination;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_08009a18": "copy_reverse_memory_08009a18",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "ptr_dest",
                "puVar2": "ptr_src",
                "iVar3": "i",
                "pvVar4": "result",
                "puVar5": "ptr_dest_end",
                "iVar6": "i_end",
                "uVar7": "remaining_size",
                "iVar8": "j",
                "uVar9": "remaining_size",
                "puVar10": "ptr_src_end"
            },
            "calling": [
                "__ssprint_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009adc": {
            "entrypoint": "0x08009adc",
            "current_name": "allocate_memory_08009adc",
            "code": "\nint * allocate_memory_08009adc(undefined4 *param_ptr,int *buffer_ptr,uint size)\n\n{\n  int *ptr1;\n  int var1;\n  int *ptr2;\n  uint var2;\n  int var3;\n  uint var4;\n  size_t var5;\n  int *ptr3;\n  uint var6;\n  uint var7;\n  uint var8;\n  int var9;\n  \n  if (buffer_ptr == (int *)0x0) {\n    ptr2 = (int *)_malloc_r(param_ptr,size);\n    return ptr2;\n  }\n  __malloc_lock();\n  var4 = buffer_ptr[-1];\n  var7 = var4 & 0xfffffffc;\n  ptr2 = buffer_ptr + -2;\n  if (size + 0xb < 0x17) {\n    var6 = 0x10;\n  }\n  else {\n    var6 = size + 0xb & 0xfffffff8;\n    if ((int)var6 < 0) goto LAB_08009b8e;\n  }\n  if (var6 < size) {\nLAB_08009b8e:\n    *param_ptr = 0xc;\n    return (int *)0x0;\n  }\n  var9 = (int)ptr2 + var7;\n  var8 = var7;\n  if ((int)var7 < (int)var6) {\n    if (DAT_20000454 == var9) {\n      var9 = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + var7;\n      if ((int)(var6 + 0x10) <= var9) {\n        DAT_20000454 = (int)ptr2 + var6;\n        *(uint *)(DAT_20000454 + 4) = var9 - var6 | 1;\n        buffer_ptr[-1] = var6 | buffer_ptr[-1] & 1U;\n        __malloc_unlock(param_ptr);\n        return buffer_ptr;\n      }\n      if (-1 < (int)(var4 << 0x1f)) {\n        ptr1 = (int *)((int)ptr2 - buffer_ptr[-2]);\n        var4 = ptr1[1] & 0xfffffffc;\n        if ((int)(var6 + 0x10) <= (int)(var9 + var4)) {\n          var3 = ptr1[3];\n          ptr2 = ptr1 + 2;\n          var1 = *ptr2;\n          var5 = var7 - 4;\n          *(int *)(var1 + 0xc) = var3;\n          *(int *)(var3 + 8) = var1;\n          if (var5 < 0x25) {\n            var1 = *buffer_ptr;\n            ptr3 = ptr2;\n            if (0x13 < var5) {\n              ptr1[2] = var1;\n              ptr1[3] = buffer_ptr[1];\n              var1 = buffer_ptr[2];\n              if (var5 < 0x1c) {\n                buffer_ptr = buffer_ptr + 2;\n                ptr3 = ptr1 + 4;\n              }\n              else {\n                ptr1[4] = var1;\n                ptr1[5] = buffer_ptr[3];\n                var1 = buffer_ptr[4];\n                if (var5 == 0x24) {\n                  ptr1[6] = var1;\n                  ptr1[7] = buffer_ptr[5];\n                  var1 = buffer_ptr[6];\n                  buffer_ptr = buffer_ptr + 6;\n                  ptr3 = ptr1 + 8;\n                }\n                else {\n                  buffer_ptr = buffer_ptr + 4;\n                  ptr3 = ptr1 + 6;\n                }\n              }\n            }\n            *ptr3 = var1;\n            ptr3[1] = buffer_ptr[1];\n            ptr3[2] = buffer_ptr[2];\n          }\n          else {\n            memmove(ptr2,buffer_ptr,var5);\n          }\n          DAT_20000454 = (int)ptr1 + var6;\n          *(uint *)(DAT_20000454 + 4) = (var9 + var4) - var6 | 1;\n          ptr1[1] = var6 | ptr1[1] & 1U;\n          __malloc_unlock(param_ptr);\n          return ptr2;\n        }\nLAB_08009bb0:\n        var8 = var7 + var4;\n        if ((int)var6 <= (int)var8) {\n          var3 = ptr1[3];\n          ptr3 = ptr1 + 2;\n          var1 = *ptr3;\n          *(int *)(var1 + 0xc) = var3;\n          var9 = (int)ptr1 + var8;\n          *(int *)(var3 + 8) = var1;\n          ptr2 = ptr1;\n          if (var7 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          memmove(ptr3,buffer_ptr,var7 - 4);\n          buffer_ptr = ptr3;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(var9 + 4) & 0xfffffffe) + var9 + 4) << 0x1f) {\n        var2 = *(uint *)(var9 + 4) & 0xfffffffc;\n        var8 = var7 + var2;\n        if ((int)var8 < (int)var6) {\n          if ((int)(var4 << 0x1f) < 0) goto LAB_08009b36;\n          ptr1 = (int *)((int)ptr2 - buffer_ptr[-2]);\n          var4 = ptr1[1] & 0xfffffffc;\n          var8 = var2 + var4 + var7;\n          if ((int)var8 < (int)var6) goto LAB_08009bb0;\n          var1 = *(int *)(var9 + 8);\n          var9 = *(int *)(var9 + 0xc);\n          *(int *)(var1 + 0xc) = var9;\n          *(int *)(var9 + 8) = var1;\n          ptr3 = ptr1 + 2;\n          var1 = *ptr3;\n          var3 = ptr1[3];\n          *(int *)(var1 + 0xc) = var3;\n          var9 = (int)ptr1 + var8;\n          *(int *)(var3 + 8) = var1;\n          ptr2 = ptr1;\n          if (0x24 < var7 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          var7 = var7 - 4;\n          var1 = *buffer_ptr;\n          ptr1 = ptr3;\n          if (0x13 < var7) {\n            ptr2[2] = var1;\n            ptr2[3] = buffer_ptr[1];\n            var1 = buffer_ptr[2];\n            if (var7 < 0x1c) {\n              buffer_ptr = buffer_ptr + 2;\n              ptr1 = ptr2 + 4;\n            }\n            else {\n              ptr2[4] = var1;\n              ptr2[5] = buffer_ptr[3];\n              var1 = buffer_ptr[4];\n              if (var7 == 0x24) {\n                ptr2[6] = var1;\n                ptr2[7] = buffer_ptr[5];\n                var1 = buffer_ptr[6];\n                buffer_ptr = buffer_ptr + 6;\n                ptr1 = ptr2 + 8;\n              }\n              else {\n                buffer_ptr = buffer_ptr + 4;\n                ptr1 = ptr2 + 6;\n              }\n            }\n          }\n          *ptr1 = var1;\n          ptr1[1] = buffer_ptr[1];\n          ptr1[2] = buffer_ptr[2];\n          buffer_ptr = ptr3;\n        }\n        else {\n          var1 = *(int *)(var9 + 8);\n          var3 = *(int *)(var9 + 0xc);\n          *(int *)(var1 + 0xc) = var3;\n          var9 = (int)ptr2 + var8;\n          *(int *)(var3 + 8) = var1;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(var4 << 0x1f)) {\n        ptr1 = (int *)((int)ptr2 - buffer_ptr[-2]);\n        var4 = ptr1[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    ptr1 = (int *)_malloc_r(param_ptr,size);\n    if (ptr1 != (int *)0x0) {\n      if ((int *)((buffer_ptr[-1] & 0xfffffffeU) + (int)ptr2) == ptr1 + -2) {\n        var8 = var7 + (ptr1[-1] & 0xfffffffcU);\n        var9 = (int)ptr2 + var8;\n        goto LAB_08009c00;\n      }\n      var5 = var7 - 4;\n      if (var5 < 0x25) {\n        var9 = *buffer_ptr;\n        ptr2 = buffer_ptr;\n        ptr3 = ptr1;\n        if (0x13 < var5) {\n          *ptr1 = var9;\n          ptr1[1] = buffer_ptr[1];\n          if (var5 < 0x1c) {\n            var9 = buffer_ptr[2];\n            ptr2 = buffer_ptr + 2;\n            ptr3 = ptr1 + 2;\n          }\n          else {\n            ptr1[2] = buffer_ptr[2];\n            ptr1[3] = buffer_ptr[3];\n            if (var5 == 0x24) {\n              ptr1[4] = buffer_ptr[4];\n              ptr1[5] = buffer_ptr[5];\n              var9 = buffer_ptr[6];\n              ptr2 = buffer_ptr + 6;\n              ptr3 = ptr1 + 6;\n            }\n            else {\n              var9 = buffer_ptr[4];\n              ptr2 = buffer_ptr + 4;\n              ptr3 = ptr1 + 4;\n            }\n          }\n        }\n        *ptr3 = var9;\n        ptr3[1] = ptr2[1];\n        ptr3[2] = ptr2[2];\n      }\n      else {\n        memmove(ptr1,buffer_ptr,var5);\n      }\n      _free_r(param_ptr,buffer_ptr);\n    }\n    __malloc_unlock(param_ptr);\n    buffer_ptr = ptr1;\n  }\n  else {\nLAB_08009c00:\n    if (var8 - var6 < 0x10) {\n      ptr2[1] = ptr2[1] & 1U | var8;\n      *(uint *)(var9 + 4) = *(uint *)(var9 + 4) | 1;\n    }\n    else {\n      ptr2[1] = ptr2[1] & 1U | var6;\n      *(uint *)((int)ptr2 + var6 + 4) = var8 - var6 | 1;\n      *(uint *)(var9 + 4) = *(uint *)(var9 + 4) | 1;\n      _free_r(param_ptr,(int)ptr2 + var6 + 8);\n    }\n    __malloc_unlock(param_ptr);\n  }\n  return buffer_ptr;\n}\n\n",
            "renaming": {
                "FUN_08009adc": "allocate_memory_08009adc",
                "param_1": "param_ptr",
                "param_2": "buffer_ptr",
                "param_3": "size",
                "piVar1": "ptr1",
                "iVar2": "var1",
                "piVar3": "ptr2",
                "uVar4": "var2",
                "iVar5": "var3",
                "uVar6": "var4",
                "sVar7": "var5",
                "piVar8": "ptr3",
                "uVar9": "var6",
                "uVar10": "var7",
                "uVar11": "var8",
                "iVar12": "var9"
            },
            "calling": [
                "__ssprint_r"
            ],
            "called": [
                "_malloc_r",
                "memmove",
                "_free_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e50": {
            "entrypoint": "0x08009e50",
            "current_name": "set_character_08009e50",
            "code": "\nundefined * setCharacter_08009e50(undefined4 *outputPointer,undefined *characterPointer,uint characterCode)\n\n{\n  if (characterPointer != (undefined *)0x0) {\n    if (characterCode < 0x100) {\n      *characterPointer = (char)characterCode;\n      characterPointer = (undefined *)0x1;\n    }\n    else {\n      characterPointer = (undefined *)0xffffffff;\n      *outputPointer = 0x8a;\n    }\n  }\n  return characterPointer;\n}\n\n",
            "renaming": {
                "FUN_08009e50": "set_character_08009e50",
                "param_1": "outputPointer",
                "param_2": "characterPointer",
                "param_3": "characterCode"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e68": {
            "entrypoint": "0x08009e68",
            "current_name": "get_context_pointer_08009e68",
            "code": "\nint getContextPointer_08009e68(EVP_PKEY_CTX *contextPointer)\n\n{\n  return (int)contextPointer;\n}\n\n",
            "renaming": {
                "FUN_08009e68": "get_context_pointer_08009e68",
                "ctx": "contextPointer"
            },
            "calling": [
                "__do_global_dtors_aux",
                "__libc_init_array",
                "frame_dummy"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e74": {
            "entrypoint": "0x08009e74",
            "current_name": "FUNC_08009e74",
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 164407,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_0800045c",
            "FUN_0800046c",
            "FUN_080006a4",
            "FUN_0800088a",
            "FUN_080008ec",
            "FUN_080008f4",
            "FUN_080008fc",
            "FUN_08000978",
            "FUN_08000988",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_080009fc",
            "FUN_08000a9c",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000c2c",
            "FUN_08000c3c",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f58",
            "FUN_08000f60",
            "FUN_08000f68",
            "FUN_08000fc8",
            "FUN_08000fd0",
            "FUN_08000fe0",
            "FUN_08000ff4",
            "FUN_08001008",
            "FUN_0800101c",
            "FUN_08001030",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_080011ec",
            "FUN_0800121c",
            "FUN_080014f0",
            "FUN_0800151c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08001762",
            "FUN_0800177c",
            "FUN_080017b4",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08001ab0",
            "FUN_08001cb8",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d3c",
            "FUN_08002d98",
            "FUN_08003260",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_08003568",
            "FUN_080035a4",
            "FUN_080035fa",
            "FUN_0800360c",
            "FUN_08003640",
            "FUN_08003696",
            "FUN_080036a8",
            "FUN_080036f8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08003c4a",
            "FUN_08003c5c",
            "FUN_08003c6e",
            "FUN_08003c80",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_08004366",
            "FUN_08004378",
            "FUN_0800438a",
            "FUN_08004424",
            "FUN_08004436",
            "FUN_080046ec",
            "FUN_0800491c",
            "FUN_080049cc",
            "FUN_08004ae0",
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08004e6c",
            "FUN_08004e74",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08004f2c",
            "FUN_08004f3c",
            "FUN_08004f60",
            "FUN_08004f78",
            "FUN_08005224",
            "FUN_080052a0",
            "FUN_08005348",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_08005598",
            "FUN_080055f4",
            "FUN_08005674",
            "FUN_08005680",
            "FUN_080056c8",
            "FUN_080056ce",
            "FUN_080056d4",
            "FUN_080056da",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_08005728",
            "FUN_08005780",
            "FUN_080057e8",
            "FUN_08005830",
            "FUN_08005838",
            "FUN_080059f0",
            "FUN_08005d0c",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_080078b4",
            "FUN_080078c0",
            "FUN_080079e8",
            "FUN_08008818",
            "FUN_0800884c",
            "FUN_080088ec",
            "FUN_08008ad4",
            "FUN_08008af8",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_080090c0",
            "FUN_0800910c",
            "FUN_08009120",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_080093a4",
            "FUN_08009444",
            "FUN_080094f8",
            "FUN_08009530",
            "FUN_08009630",
            "FUN_080096e0",
            "FUN_08009744",
            "FUN_08009768",
            "FUN_080097cc",
            "FUN_080098c0",
            "FUN_08009980",
            "FUN_080099ec",
            "FUN_08009a18",
            "FUN_08009adc",
            "FUN_08009e50",
            "FUN_08009e68"
        ],
        [
            "FUN_080004c8",
            "FUN_0800071c"
        ]
    ],
    "locked_functions": []
}