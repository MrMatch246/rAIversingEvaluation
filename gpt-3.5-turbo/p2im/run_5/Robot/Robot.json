{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_08000134(undefined4 input1,undefined4 input2)\n\n{\n  return CONCAT44(input2,input1);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_08000134",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000158": {
            "entrypoint": "0x08000158",
            "current_name": "calculate_08000158",
            "code": "\nulonglong calculate_08000158(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  byte temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp6 = input4 ^ 0x80000000;\n  temp9 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ temp6) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (temp9 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  temp8 = (int)temp9 >> 0x15;\n  if (!flag2) {\n    flag2 = temp8 == -1;\n  }\n  temp1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = temp1 == -1;\n  }\n  if (flag2) {\n    if (temp8 == -1 || temp1 == -1) {\n      temp9 = temp6;\n      temp11 = input3;\n      if (temp8 == -1) {\n        temp9 = input2;\n        temp11 = input1;\n      }\n      if (temp8 != -1 || temp1 != -1) {\n        input3 = temp11;\n        temp6 = temp9;\n      }\n      flag2 = (temp11 | temp9 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp6 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = temp9 == temp6;\n      }\n      if (!flag2) {\n        temp9 = temp9 | 0x80000;\n      }\n      return CONCAT44(temp9,temp11);\n    }\n    if (((input2 ^ temp6) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp9 | input1) == 0) {\n        input1 = input3;\n        input2 = temp6;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp6) {\n      return 0;\n    }\n    if (temp9 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp6 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp6 = temp6 | 0x80000000;\n      }\n      return CONCAT44(temp6,input1 << 1);\n    }\n    if (temp9 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp9 = temp9 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp11 = input4 - temp9;\n  flag2 = temp11 != 0;\n  if (input4 < temp9) {\n    temp11 = -temp11;\n  }\n  temp10 = input1;\n  temp7 = input2;\n  if (flag2 && temp9 <= input4) {\n    temp9 = temp9 + temp11;\n    temp10 = input3;\n    temp7 = temp6;\n    input3 = input1;\n    temp6 = input2;\n  }\n  if (0x36 < temp11) {\n    return CONCAT44(temp7,temp10);\n  }\n  temp4 = temp7 & 0xfffff | 0x100000;\n  if ((temp7 & 0x80000000) != 0) {\n    flag2 = temp10 != 0;\n    temp10 = -temp10;\n    temp4 = -temp4 - (uint)flag2;\n  }\n  temp7 = temp6 & 0xfffff | 0x100000;\n  if ((temp6 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp7 = -temp7 - (uint)flag2;\n  }\n  if (temp9 == temp11) {\n    temp7 = temp7 ^ 0x100000;\n    if (temp9 == 0) {\n      temp4 = temp4 ^ 0x100000;\n      temp9 = 1;\n    }\n    else {\n      temp11 = temp11 - 1;\n    }\n  }\n  temp6 = -temp11 + 0x20;\n  if ((int)temp11 < 0x21) {\n    temp12 = input3 << (temp6 & 0xff);\n    input3 = input3 >> (temp11 & 0xff);\n    temp3 = temp10 + input3;\n    temp5 = temp7 << (temp6 & 0xff);\n    temp6 = temp3 + temp5;\n    temp4 = temp4 + CARRY4(temp10,input3) + ((int)temp7 >> (temp11 & 0xff)) +\n            (uint)CARRY4(temp3,temp5);\n  }\n  else {\n    temp12 = temp7 << (-temp11 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp12 = temp12 | 2;\n    }\n    temp7 = (int)temp7 >> (temp11 - 0x20 & 0xff);\n    temp6 = temp10 + temp7;\n    temp4 = temp4 + ((int)temp7 >> 0x1f) + (uint)CARRY4(temp10,temp7);\n  }\n  input2 = temp4 & 0x80000000;\n  temp11 = temp4;\n  if ((int)temp4 < 0) {\n    flag2 = temp12 == 0;\n    temp12 = -temp12;\n    temp11 = -temp6;\n    temp6 = -(uint)!flag2 - temp6;\n    temp11 = -(uint)(flag2 <= temp11) - temp4;\n  }\n  if (0xfffff < temp11) {\n    temp10 = temp9 - 1;\n    if (0x1fffff < temp11) {\n      temp10 = temp11 & 1;\n      temp11 = temp11 >> 1;\n      temp2 = (byte)temp6;\n      temp6 = (uint)(temp10 != 0) << 0x1f | temp6 >> 1;\n      temp12 = (uint)(temp2 & 1) << 0x1f | temp12 >> 1;\n      temp10 = temp9;\n      if (0xffbfffff < temp9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    flag2 = 0x7fffffff < temp12;\n    if (temp12 == 0x80000000) {\n      flag2 = (temp6 & 1) != 0;\n    }\n    return CONCAT44(temp11 + temp10 * 0x100000 + (uint)CARRY4(temp6,(uint)flag2) | input2,\n                    temp6 + flag2);\n  }\n  flag1 = (temp12 & 0x80000000) != 0;\n  temp12 = temp12 << 1;\n  temp10 = temp6 * 2;\n  flag2 = CARRY4(temp6,temp6);\n  temp6 = temp6 * 2 + (uint)flag1;\n  temp11 = temp11 * 2 + (uint)(flag2 || CARRY4(temp10,(uint)flag1));\n  temp10 = temp9 - 2;\n  if ((temp11 & 0x100000) != 0) goto LAB_08000268;\n  temp7 = temp6;\n  temp9 = temp11;\n  if (temp11 == 0) {\n    temp7 = 0;\n    temp9 = temp6;\n  }\n  temp8 = LZCOUNT(temp9);\n  if (temp11 == 0) {\n    temp8 = temp8 + 0x20;\n  }\n  temp11 = temp8 - 0xb;\n  flag3 = SBORROW4(temp11,0x20);\n  temp6 = temp8 - 0x2b;\n  flag2 = (int)temp6 < 0;\n  flag1 = temp6 == 0;\n  if ((int)temp11 < 0x20) {\n    flag3 = SCARRY4(temp6,0xc);\n    temp8 = temp8 + -0x1f;\n    flag2 = temp8 < 0;\n    flag1 = temp8 == 0;\n    temp6 = temp11;\n    if (!flag1 && flag2 == flag3) {\n      temp7 = temp9 << (temp11 & 0xff);\n      temp9 = temp9 >> (0xcU - temp8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp12 = 0x20 - temp6;\n  }\n  temp9 = temp9 << (temp6 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    temp9 = temp9 | temp7 >> (temp12 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp7 = temp7 << (temp6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp11 <= (int)temp10) {\n    return CONCAT44(temp9 + (temp10 - temp11) * 0x100000 | input2,temp7);\n  }\n  temp6 = ~(temp10 - temp11);\n  if ((int)temp6 < 0x1f) {\n    temp8 = temp6 - 0x13;\n    if (temp8 != 0 && temp8 < 0 == SCARRY4(temp6 - 0x1f,0xc)) {\n      return CONCAT44(temp4,temp7 >> (0x20 - (0xcU - temp8) & 0xff) | temp9 << (0xcU - temp8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp6 = temp6 + 1;\n    return CONCAT44(input2 | temp9 >> (temp6 & 0xff),\n                    temp7 >> (temp6 & 0xff) | temp9 << (0x20 - temp6 & 0xff));\n  }\n  return CONCAT44(temp4,temp9 >> (temp6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000158": "calculate_08000158",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "temp1",
                "bVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "uVar10": "temp10",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800015c": {
            "entrypoint": "0x0800015c",
            "current_name": "calculate_extended_value_0800015c",
            "code": "\nulonglong calculate_extended_value_0800015c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int shift_right1;\n  byte bit_check;\n  uint temp_1;\n  uint temp_2;\n  uint masked_input_2;\n  int shift_right2;\n  uint shifted_input_2;\n  uint shifted_input_4;\n  uint masked_input_4;\n  uint difference;\n  uint temp_3;\n  uint temp_4;\n  bool condition_1;\n  bool condition_2;\n  bool condition_3;\n  \n  shifted_input_2 = input_2 << 1;\n  masked_input_4 = input_4 << 1;\n  condition_1 = ((input_2 ^ input_4) & 0x7fffffff) == 0;\n  condition_2 = condition_1 && input_1 == input_3;\n  if (!condition_1 || input_1 != input_3) {\n    condition_2 = (shifted_input_2 | input_1) == 0;\n  }\n  if (!condition_2) {\n    condition_2 = (masked_input_4 | input_3) == 0;\n  }\n  shift_right2 = (int)shifted_input_2 >> 0x15;\n  if (!condition_2) {\n    condition_2 = shift_right2 == -1;\n  }\n  shift_right1 = (int)masked_input_4 >> 0x15;\n  if (!condition_2) {\n    condition_2 = shift_right1 == -1;\n  }\n  if (condition_2) {\n    if (shift_right2 == -1 || shift_right1 == -1) {\n      masked_input_4 = input_4;\n      shifted_input_2 = input_3;\n      if (shift_right2 == -1) {\n        masked_input_4 = input_2;\n        shifted_input_2 = input_1;\n      }\n      if (shift_right2 != -1 || shift_right1 != -1) {\n        input_3 = shifted_input_2;\n        input_4 = masked_input_4;\n      }\n      condition_2 = (shifted_input_2 | masked_input_4 << 0xc) == 0;\n      if (condition_2) {\n        condition_2 = (input_3 | input_4 << 0xc) == 0;\n      }\n      if (condition_2) {\n        condition_2 = masked_input_4 == input_4;\n      }\n      if (!condition_2) {\n        masked_input_4 = masked_input_4 | 0x80000;\n      }\n      return CONCAT44(masked_input_4,shifted_input_2);\n    }\n    if (((input_2 ^ input_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((shifted_input_2 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = input_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != input_4) {\n      return 0;\n    }\n    if (shifted_input_2 >> 0x15 == 0) {\n      condition_2 = (input_1 & 0x80000000) != 0;\n      masked_input_4 = input_2 * 2 + (uint)condition_2;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)condition_2)) {\n        masked_input_4 = masked_input_4 | 0x80000000;\n      }\n      return CONCAT44(masked_input_4,input_1 << 1);\n    }\n    if (shifted_input_2 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input_2 = shifted_input_2 >> 0x15;\n  masked_input_4 = masked_input_4 >> 0x15;\n  difference = masked_input_4 - shifted_input_2;\n  condition_2 = difference != 0;\n  if (masked_input_4 < shifted_input_2) {\n    difference = -difference;\n  }\n  shifted_input_4 = input_1;\n  masked_input_2 = input_2;\n  if (condition_2 && shifted_input_2 <= masked_input_4) {\n    shifted_input_2 = shifted_input_2 + difference;\n    shifted_input_4 = input_3;\n    masked_input_2 = input_4;\n    input_3 = input_1;\n    input_4 = input_2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(masked_input_2,shifted_input_4);\n  }\n  masked_input_4 = masked_input_2 & 0xfffff | 0x100000;\n  if ((masked_input_2 & 0x80000000) != 0) {\n    condition_2 = shifted_input_4 != 0;\n    shifted_input_4 = -shifted_input_4;\n    masked_input_4 = -masked_input_4 - (uint)condition_2;\n  }\n  masked_input_2 = input_4 & 0xfffff | 0x100000;\n  if ((input_4 & 0x80000000) != 0) {\n    condition_2 = input_3 != 0;\n    input_3 = -input_3;\n    masked_input_2 = -masked_input_2 - (uint)condition_2;\n  }\n  if (shifted_input_2 == difference) {\n    masked_input_2 = masked_input_2 ^ 0x100000;\n    if (shifted_input_2 == 0) {\n      masked_input_4 = masked_input_4 ^ 0x100000;\n      shifted_input_2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp_4 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    temp_3 = input_3 << (temp_4 & 0xff);\n    input_3 = input_3 >> (difference & 0xff);\n    temp_1 = shifted_input_4 + input_3;\n    temp_2 = masked_input_2 << (temp_4 & 0xff);\n    temp_4 = temp_1 + temp_2;\n    masked_input_4 = masked_input_4 + CARRY4(shifted_input_4,input_3) + ((int)masked_input_2 >> (difference & 0xff)) +\n            (uint)CARRY4(temp_1,temp_2);\n  }\n  else {\n    temp_3 = masked_input_2 << (-difference + 0x40 & 0xff);\n    if (input_3 != 0) {\n      temp_3 = temp_3 | 2;\n    }\n    masked_input_2 = (int)masked_input_2 >> (difference - 0x20 & 0xff);\n    temp_4 = shifted_input_4 + masked_input_2;\n    masked_input_4 = masked_input_4 + ((int)masked_input_2 >> 0x1f) + (uint)CARRY4(shifted_input_4,masked_input_2);\n  }\n  input_2 = masked_input_4 & 0x80000000;\n  difference = masked_input_4;\n  if ((int)masked_input_4 < 0) {\n    condition_2 = temp_3 == 0;\n    temp_3 = -temp_3;\n    difference = -temp_4;\n    temp_4 = -(uint)!condition_2 - temp_4;\n    difference = -(uint)(condition_2 <= difference) - masked_input_4;\n  }\n  if (0xfffff < difference) {\n    shifted_input_4 = shifted_input_2 - 1;\n    if (0x1fffff < difference) {\n      masked_input_4 = difference & 1;\n      difference = difference >> 1;\n      bit_check = (byte)temp_4;\n      temp_4 = (uint)(masked_input_4 != 0) << 0x1f | temp_4 >> 1;\n      temp_3 = (uint)(bit_check & 1) << 0x1f | temp_3 >> 1;\n      shifted_input_4 = shifted_input_2;\n      if (0xffbfffff < shifted_input_2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    condition_2 = 0x7fffffff < temp_3;\n    if (temp_3 == 0x80000000) {\n      condition_2 = (temp_4 & 1) != 0;\n    }\n    return CONCAT44(difference + shifted_input_4 * 0x100000 + (uint)CARRY4(temp_4,(uint)condition_2) | input_2,\n                    temp_4 + condition_2);\n  }\n  condition_1 = (temp_3 & 0x80000000) != 0;\n  temp_3 = temp_3 << 1;\n  shifted_input_4 = temp_4 * 2;\n  condition_2 = CARRY4(temp_4,temp_4);\n  temp_4 = temp_4 * 2 + (uint)condition_1;\n  difference = difference * 2 + (uint)(condition_2 || CARRY4(shifted_input_4,(uint)condition_1));\n  shifted_input_4 = shifted_input_2 - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000268;\n  masked_input_2 = temp_4;\n  shifted_input_2 = difference;\n  if (difference == 0) {\n    masked_input_2 = 0;\n    shifted_input_2 = temp_4;\n  }\n  shift_right2 = LZCOUNT(shifted_input_2);\n  if (difference == 0) {\n    shift_right2 = shift_right2 + 0x20;\n  }\n  temp_4 = shift_right2 - 0xb;\n  condition_3 = SBORROW4(temp_4,0x20);\n  difference = shift_right2 - 0x2b;\n  condition_2 = (int)difference < 0;\n  condition_1 = difference == 0;\n  if ((int)temp_4 < 0x20) {\n    condition_3 = SCARRY4(difference,0xc);\n    shift_right2 = shift_right2 + -0x1f;\n    condition_2 = shift_right2 < 0;\n    condition_1 = shift_right2 == 0;\n    difference = temp_4;\n    if (!condition_1 && condition_2 == condition_3) {\n      masked_input_2 = shifted_input_2 << (temp_4 & 0xff);\n      shifted_input_2 = shifted_input_2 >> (0xcU - shift_right2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (condition_1 || condition_2 != condition_3) {\n    temp_3 = 0x20 - difference;\n  }\n  shifted_input_2 = shifted_input_2 << (difference & 0xff);\n  if (condition_1 || condition_2 != condition_3) {\n    shifted_input_2 = shifted_input_2 | masked_input_2 >> (temp_3 & 0xff);\n  }\n  if (condition_1 || condition_2 != condition_3) {\n    masked_input_2 = masked_input_2 << (difference & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp_4 <= (int)shifted_input_4) {\n    return CONCAT44(shifted_input_2 + (shifted_input_4 - temp_4) * 0x100000 | input_2,masked_input_2);\n  }\n  difference = ~(shifted_input_4 - temp_4);\n  if ((int)difference < 0x1f) {\n    shift_right2 = difference - 0x13;\n    if (shift_right2 != 0 && shift_right2 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(masked_input_4,masked_input_2 >> (0x20 - (0xcU - shift_right2) & 0xff) | shifted_input_2 << (0xcU - shift_right2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input_2 | shifted_input_2 >> (difference & 0xff),\n                    masked_input_2 >> (difference & 0xff) | shifted_input_2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(masked_input_4,shifted_input_2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800015c": "calculate_extended_value_0800015c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shift_right1",
                "bVar2": "bit_check",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "uVar5": "masked_input_2",
                "iVar6": "shift_right2",
                "uVar7": "shifted_input_2",
                "uVar8": "shifted_input_4",
                "uVar9": "masked_input_4",
                "uVar10": "difference",
                "uVar11": "temp_3",
                "uVar12": "temp_4",
                "bVar13": "condition_1",
                "bVar14": "condition_2",
                "bVar15": "condition_3"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003d4": {
            "entrypoint": "0x080003d4",
            "current_name": "resize_number_080003d4",
            "code": "\nulonglong resizeNumber_080003d4(uint number)\n\n{\n  uint shiftAmount;\n  uint tempVar;\n  int count;\n  uint adjustedCount;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool carryFlag;\n  \n  if (number == 0) {\n    return 0;\n  }\n  shiftAmount = 0;\n  count = leadingZeroCount(number);\n  adjustedCount = count + 0x15;\n  carryFlag = SBORROW4(adjustedCount,0x20);\n  tempVar = count - 0xb;\n  isNegative = (int)tempVar < 0;\n  isZero = tempVar == 0;\n  if (adjustedCount < 0x20) {\n    carryFlag = signedCarry(tempVar,0xc);\n    isNegative = false;\n    isZero = count + 1 == 0;\n    tempVar = adjustedCount;\n    if (!isZero && carryFlag == false) {\n      shiftAmount = number << adjustedCount;\n      number = number >> (0xcU - (count + 1) & 0xff);\n      goto skipComputation;\n    }\n  }\n  if (isZero || isNegative != carryFlag) {\n    remainingBits = 0x20 - tempVar;\n  }\n  number = number << (tempVar & 0xff);\n  if (isZero || isNegative != carryFlag) {\n    number = number | zero >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != carryFlag) {\n    shiftAmount = 0 << (tempVar & 0xff);\n  }\nskipComputation:\n  if (adjustedCount < 0x433) {\n    return concatenate(number + (0x432 - adjustedCount) * 0x100000,shiftAmount);\n  }\n  tempVar = ~(0x432 - adjustedCount);\n  if (0x1e < (int)tempVar) {\n    return (ulonglong)(number >> (tempVar - 0x1f & 0xff));\n  }\n  count = tempVar - 0x13;\n  if (count == 0 || count < 0 != signedCarry(tempVar - 0x1f,0xc)) {\n    tempVar = tempVar + 1;\n    return concatenate(number >> (tempVar & 0xff),\n                    shiftAmount >> (tempVar & 0xff) | number << (0x20 - tempVar & 0xff));\n  }\n  return (ulonglong)(shiftAmount >> (0x20 - (0xcU - count) & 0xff) | number << (0xcU - count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080003d4": "resize_number_080003d4",
                "param_1": "number",
                "uVar1": "shiftAmount",
                "uVar2": "tempVar",
                "iVar3": "count",
                "uVar4": "adjustedCount",
                "in_r12": "remainingBits",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "carryFlag",
                "LAB_080002e0": "skipComputation",
                "CONCAT44": "concatenate",
                "0U": "zero",
                "SCARRY4": "signedCarry",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003f4": {
            "entrypoint": "0x080003f4",
            "current_name": "calculate_shifted_value_080003f4",
            "code": "\nulonglong calculateShiftedValue_080003f4(uint inputValue)\n\n{\n  uint shiftModulus;\n  uint absInputValue;\n  uint shiftAmount;\n  int leadingZeros;\n  uint adjustedShiftAmount;\n  uint signMask;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool isCarry;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  signMask = inputValue & 0x80000000;\n  absInputValue = inputValue;\n  if ((int)signMask < 0) {\n    absInputValue = -inputValue;\n  }\n  shiftModulus = 0;\n  leadingZeros = LZCOUNT(absInputValue);\n  adjustedShiftAmount = leadingZeros + 0x15;\n  isCarry = SBORROW4(adjustedShiftAmount,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (adjustedShiftAmount < 0x20) {\n    isCarry = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftAmount = adjustedShiftAmount;\n    if (!isZero && isCarry == false) {\n      shiftModulus = absInputValue << adjustedShiftAmount;\n      absInputValue = absInputValue >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isZero || isNegative != isCarry) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  absInputValue = absInputValue << (shiftAmount & 0xff);\n  if (isZero || isNegative != isCarry) {\n    absInputValue = absInputValue | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != isCarry) {\n    shiftModulus = 0 << (shiftAmount & 0xff);\n  }\nLAB_080002e0:\n  if (adjustedShiftAmount < 0x433) {\n    return CONCAT44(absInputValue + (0x432 - adjustedShiftAmount) * 0x100000 | signMask,shiftModulus);\n  }\n  shiftAmount = ~(0x432 - adjustedShiftAmount);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(inputValue,absInputValue >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signMask | absInputValue >> (shiftAmount & 0xff),\n                    shiftModulus >> (shiftAmount & 0xff) | absInputValue << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(inputValue,shiftModulus >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInputValue << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080003f4": "calculate_shifted_value_080003f4",
                "param_1": "inputValue",
                "uVar1": "shiftModulus",
                "uVar2": "absInputValue",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "adjustedShiftAmount",
                "uVar6": "signMask",
                "in_r12": "remainingBits",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "isCarry"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000418": {
            "entrypoint": "0x08000418",
            "current_name": "bitwise_operation_08000418",
            "code": "\nulonglong bitwiseOperation_08000418(uint input,undefined4 offset_1,undefined4 offset_2,uint mask)\n\n{\n  uint shiftedInput;\n  uint result;\n  uint maskedResult;\n  uint shiftedOffset1;\n  uint doubledInput;\n  int bitCount;\n  uint shiftCount;\n  uint temp;\n  bool isBitCountZero;\n  bool isMaskZero;\n  bool isBitCountLessThanZero;\n  \n  doubledInput = input << 1;\n  isMaskZero = doubledInput == 0;\n  shiftedInput = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftedOffset1 = (uint)((int)doubledInput >> 3) >> 1;\n  maskedResult = shiftedInput | shiftedOffset1;\n  input = input << 0x1d;\n  if (!isMaskZero) {\n    mask = doubledInput & 0xff000000;\n    isMaskZero = mask == 0;\n  }\n  if (!isMaskZero) {\n    isMaskZero = mask == 0xff000000;\n  }\n  if (!isMaskZero) {\n    return CONCAT44(maskedResult,input) ^ 0x3800000000000000;\n  }\n  if ((doubledInput & 0xffffff) == 0) {\n    return CONCAT44(maskedResult,input);\n  }\n  if (mask == 0xff000000) {\n    return CONCAT44(maskedResult,input) | 0x8000000000000;\n  }\n  result = input;\n  doubledInput = shiftedOffset1;\n  if (shiftedOffset1 == 0) {\n    result = 0;\n    doubledInput = input;\n  }\n  bitCount = LZCOUNT(doubledInput);\n  if (shiftedOffset1 == 0) {\n    bitCount = bitCount + 0x20;\n  }\n  shiftCount = bitCount - 0xb;\n  isBitCountLessThanZero = SBORROW4(shiftCount,0x20);\n  shiftedOffset1 = bitCount - 0x2b;\n  isMaskZero = (int)shiftedOffset1 < 0;\n  isBitCountZero = shiftedOffset1 == 0;\n  if ((int)shiftCount < 0x20) {\n    isBitCountLessThanZero = SCARRY4(shiftedOffset1,0xc);\n    bitCount = bitCount + -0x1f;\n    isMaskZero = bitCount < 0;\n    isBitCountZero = bitCount == 0;\n    shiftedOffset1 = shiftCount;\n    if (!isBitCountZero && isMaskZero == isBitCountLessThanZero) {\n      result = doubledInput << (shiftCount & 0xff);\n      doubledInput = doubledInput >> (0xcU - bitCount & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isBitCountZero || isMaskZero != isBitCountLessThanZero) {\n    temp = 0x20 - shiftedOffset1;\n  }\n  doubledInput = doubledInput << (shiftedOffset1 & 0xff);\n  if (isBitCountZero || isMaskZero != isBitCountLessThanZero) {\n    doubledInput = doubledInput | result >> (temp & 0xff);\n  }\n  if (isBitCountZero || isMaskZero != isBitCountLessThanZero) {\n    result = result << (shiftedOffset1 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shiftCount < 0x381) {\n    return CONCAT44(doubledInput + (0x380 - shiftCount) * 0x100000 | shiftedInput,result);\n  }\n  shiftedOffset1 = ~(0x380 - shiftCount);\n  if (0x1e < (int)shiftedOffset1) {\n    return CONCAT44(maskedResult,doubledInput >> (shiftedOffset1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bitCount = shiftedOffset1 - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(shiftedOffset1 - 0x1f,0xc)) {\n    shiftedOffset1 = shiftedOffset1 + 1;\n    return CONCAT44(shiftedInput | doubledInput >> (shiftedOffset1 & 0xff),\n                    result >> (shiftedOffset1 & 0xff) | doubledInput << (0x20 - shiftedOffset1 & 0xff));\n  }\n  return CONCAT44(maskedResult,result >> (0x20 - (0xcU - bitCount) & 0xff) | doubledInput << (0xcU - bitCount & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000418": "bitwise_operation_08000418",
                "param_1": "input",
                "param_2": "offset_1",
                "param_3": "offset_2",
                "param_4": "mask",
                "uVar1": "shiftedInput",
                "uVar2": "result",
                "uVar3": "maskedResult",
                "uVar4": "shiftedOffset1",
                "uVar5": "doubledInput",
                "iVar6": "bitCount",
                "uVar7": "shiftCount",
                "in_r12": "temp",
                "bVar8": "isBitCountZero",
                "bVar9": "isMaskZero",
                "bVar10": "isBitCountLessThanZero"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004c8": {
            "entrypoint": "0x080004c8",
            "current_name": "calculate_shifted_result_080004c8",
            "code": "\nulonglong calculate_shifted_result_080004c8(undefined4 input_param1,uint input_param2,uint input_param3,uint input_param4)\n\n{\n  ulonglong result_upper_32;\n  longlong result_lower_64;\n  uint result_lower_32;\n  uint shifted_param2;\n  int sum_shifted_params;\n  uint temp_var1;\n  uint shifted_param4;\n  uint temp_var2;\n  uint temp_var3;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  ulonglong combined_params;\n  \n  combined_params = CONCAT44(input_param2,input_param1);\n  temp_var2 = 0x7ff;\n  shifted_param2 = input_param2 >> 0x14 & 0x7ff;\n  condition1 = shifted_param2 == 0;\n  if (!condition1) {\n    shifted_param4 = input_param4 >> 0x14 & 0x7ff;\n    condition1 = shifted_param4 == 0;\n  }\n  if (!condition1) {\n    condition1 = shifted_param2 == 0x7ff;\n  }\n  if (!condition1) {\n    condition1 = shifted_param4 == 0x7ff;\n  }\n  if (condition1) {\n    combined_params = calculate_shifted_result_080004c8_080006a4();\n  }\n  result_lower_32 = (uint)(combined_params >> 0x20);\n  sum_shifted_params = shifted_param2 + shifted_param4;\n  shifted_param2 = result_lower_32 ^ input_param4;\n  result_lower_32 = result_lower_32 & ~(temp_var2 << 0x15);\n  input_param4 = input_param4 & ~(temp_var2 << 0x15);\n  condition1 = ((uint)combined_params | result_lower_32 << 0xc) == 0;\n  if (!condition1) {\n    condition1 = (input_param3 | input_param4 << 0xc) == 0;\n  }\n  result_lower_32 = result_lower_32 | 0x100000;\n  input_param4 = input_param4 | 0x100000;\n  if (condition1) {\n    input_param3 = (uint)combined_params | input_param3;\n    input_param4 = (shifted_param2 & 0x80000000 | result_lower_32) ^ input_param4;\n    shifted_param2 = temp_var2 >> 1;\n    condition3 = SBORROW4(sum_shifted_params,shifted_param2);\n    temp_var1 = sum_shifted_params - shifted_param2;\n    condition1 = temp_var1 == 0;\n    result_lower_32 = temp_var1;\n    if (!condition1 && (int)shifted_param2 <= sum_shifted_params) {\n      condition3 = SBORROW4(temp_var2,temp_var1);\n      result_lower_32 = temp_var2 - temp_var1;\n      condition1 = temp_var2 == temp_var1;\n    }\n    if (!condition1 && (int)result_lower_32 < 0 == condition3) {\n      input_param4 = input_param4 | temp_var1 * 0x100000;\n    }\n    if (!condition1 && (int)result_lower_32 < 0 == condition3) {\n      return CONCAT44(input_param4,input_param3);\n    }\n    input_param4 = input_param4 | 0x100000;\n    temp_var2 = 0;\n    condition3 = SBORROW4(temp_var1,1);\n    temp_var1 = temp_var1 - 1;\n    condition1 = temp_var1 == 0;\n    shifted_param2 = temp_var1;\n  }\n  else {\n    result_upper_32 = (combined_params & 0xffffffff) * (ulonglong)input_param3;\n    combined_params = (combined_params & 0xffffffff) * (ulonglong)input_param4 +\n             (ulonglong)result_lower_32 * (ulonglong)input_param3 + (result_upper_32 >> 0x20);\n    temp_var3 = (uint)combined_params;\n    result_lower_64 = (ulonglong)result_lower_32 * (ulonglong)input_param4 + (combined_params >> 0x20);\n    temp_var2 = (uint)result_lower_64;\n    result_lower_32 = (uint)((ulonglong)result_lower_64 >> 0x20);\n    if ((int)result_upper_32 != 0) {\n      temp_var3 = temp_var3 | 1;\n    }\n    temp_var1 = (sum_shifted_params + -0x3ff) - (uint)(result_lower_32 < 0x200);\n    if (result_lower_32 < 0x200) {\n      condition1 = (temp_var3 & 0x80000000) != 0;\n      temp_var3 = temp_var3 << 1;\n      result_lower_64 = CONCAT44(result_lower_32 * 2 + (uint)(CARRY4(temp_var2,temp_var2) || CARRY4(temp_var2 * 2,(uint)condition1)),\n                       temp_var2 * 2 + (uint)condition1);\n    }\n    input_param4 = shifted_param2 & 0x80000000 | (int)((ulonglong)result_lower_64 >> 0x20) << 0xb | (uint)result_lower_64 >> 0x15;\n    input_param3 = (uint)result_lower_64 << 0xb | temp_var3 >> 0x15;\n    temp_var2 = temp_var3 * 0x800;\n    condition2 = 0xfc < temp_var1;\n    condition3 = SBORROW4(temp_var1,0xfd);\n    result_lower_32 = temp_var1 - 0xfd;\n    condition1 = result_lower_32 == 0;\n    shifted_param2 = result_lower_32;\n    if (condition2 && !condition1) {\n      condition2 = 0x6ff < result_lower_32;\n      condition3 = SBORROW4(result_lower_32,0x700);\n      shifted_param2 = temp_var1 - 0x7fd;\n      condition1 = result_lower_32 == 0x700;\n    }\n    if (!condition2 || condition1) {\n      condition1 = 0x7fffffff < temp_var2;\n      if (temp_var2 == 0x80000000) {\n        condition1 = (temp_var3 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_param4 + temp_var1 * 0x100000 + (uint)CARRY4(input_param3,(uint)condition1),input_param3 + condition1\n                     );\n    }\n  }\n  if (!condition1 && (int)shifted_param2 < 0 == condition3) {\n    return (ulonglong)(input_param4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  condition2 = SCARRY4(temp_var1,0x36);\n  condition1 = (int)(temp_var1 + 0x36) < 0;\n  condition3 = temp_var1 == 0xffffffca;\n  if (condition3 || condition1 != condition2) {\n    input_param3 = 0;\n  }\n  if (condition3 || condition1 != condition2) {\n    input_param4 = input_param4 & 0x80000000;\n  }\n  if (condition3 || condition1 != condition2) {\n    return CONCAT44(input_param4,input_param3);\n  }\n  shifted_param2 = -temp_var1;\n  result_lower_32 = shifted_param2 - 0x20;\n  if (0x1f < (int)shifted_param2) {\n    temp_var1 = input_param3 >> (result_lower_32 & 0xff) | input_param4 << (0x20 - result_lower_32 & 0xff);\n    shifted_param2 = (input_param4 >> (result_lower_32 & 0xff) & ~((input_param4 & 0x80000000) >> (result_lower_32 & 0xff))) -\n            ((int)temp_var1 >> 0x1f);\n    if ((temp_var2 | input_param3 << (0x20 - result_lower_32 & 0xff) | temp_var1 << 1) == 0) {\n      shifted_param2 = shifted_param2 & ~(temp_var1 >> 0x1f);\n    }\n    return CONCAT44(input_param4,shifted_param2) & 0x80000000ffffffff;\n  }\n  sum_shifted_params = shifted_param2 - 0x14;\n  if (sum_shifted_params == 0 || sum_shifted_params < 0 != SCARRY4(result_lower_32,0xc)) {\n    temp_var3 = input_param3 << (temp_var1 + 0x20 & 0xff);\n    result_lower_32 = input_param3 >> (shifted_param2 & 0xff) | input_param4 << (temp_var1 + 0x20 & 0xff);\n    temp_var1 = result_lower_32 + -((int)temp_var3 >> 0x1f);\n    if ((temp_var2 | temp_var3 << 1) == 0) {\n      temp_var1 = temp_var1 & ~(temp_var3 >> 0x1f);\n    }\n    return CONCAT44((input_param4 & 0x80000000) +\n                    ((input_param4 & 0x7fffffff) >> (shifted_param2 & 0xff)) +\n                    (uint)CARRY4(result_lower_32,-((int)temp_var3 >> 0x1f)),temp_var1);\n  }\n  shifted_param2 = 0xc - sum_shifted_params;\n  temp_var1 = input_param3 << (shifted_param2 & 0xff);\n  shifted_param2 = input_param3 >> (0x20 - shifted_param2 & 0xff) | input_param4 << (shifted_param2 & 0xff);\n  result_lower_32 = shifted_param2 + -((int)temp_var1 >> 0x1f);\n  if ((temp_var2 | temp_var1 << 1) == 0) {\n    result_lower_32 = result_lower_32 & ~(temp_var1 >> 0x1f);\n  }\n  return CONCAT44((input_param4 & 0x80000000) + (uint)CARRY4(shifted_param2,-((int)temp_var1 >> 0x1f)),result_lower_32);\n}\n\n",
            "renaming": {
                "FUN_080004c8": "calculate_shifted_result_080004c8",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "result_upper_32",
                "lVar2": "result_lower_64",
                "uVar3": "result_lower_32",
                "uVar4": "shifted_param2",
                "iVar5": "sum_shifted_params",
                "uVar6": "temp_var1",
                "unaff_r5": "shifted_param4",
                "uVar7": "temp_var2",
                "uVar8": "temp_var3",
                "bVar9": "condition1",
                "bVar10": "condition2",
                "bVar11": "condition3",
                "uVar12": "combined_params"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_080096e0",
                "FUN_08004d78",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080006a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006a4": {
            "entrypoint": "0x080006a4",
            "current_name": "calculate_shifted_result_080006a4",
            "code": "\nulonglong calculate_shifted_result_080006a4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint shifted_input1;\n  uint shifted_input2;\n  uint shifted_input3;\n  uint shifted_input4;\n  uint shift_value;\n  bool is_zero;\n  \n  shifted_input3 = shift_value & input4 >> 0x14;\n  if (shifted_input2 != shift_value && shifted_input3 != shift_value) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (shifted_input2 == 0) {\n      shifted_input4 = input2 & 0x80000000;\n      do {\n        shifted_input1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(shifted_input1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | shifted_input4;\n      if (shifted_input3 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      shifted_input3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(shifted_input3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  shifted_input4 = input2;\n  if (((!is_zero) && ((shifted_input2 != shift_value || ((input1 | input2 << 0xc) == 0)))) &&\n     ((shifted_input3 != shift_value || (input1 = input3, shifted_input4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(shifted_input4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006a4": "calculate_shifted_result_080006a4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "shifted_input1",
                "unaff_r4": "shifted_input2",
                "uVar2": "shifted_input3",
                "uVar3": "shifted_input4",
                "in_r12": "shift_value",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800071c": {
            "entrypoint": "0x0800071c",
            "current_name": "perform_calculation_0800071c",
            "code": "\nulonglong performCalculation_0800071c(undefined4 param1,uint param2,uint param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint result1;\n  uint result2;\n  uint result3;\n  uint result4;\n  uint result5;\n  uint result6;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 concatResult;\n  \n  concatResult = CONCAT44(param2,param1);\n  result6 = 0x7ff;\n  temp7 = param2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    result2 = param4 >> 0x14 & 0x7ff;\n    flag1 = result2 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = result2 == 0x7ff;\n  }\n  if (flag1) {\n    concatResult = mask_high_bits_0800088a();\n  }\n  result1 = (uint)((ulonglong)concatResult >> 0x20);\n  result4 = (uint)concatResult;\n  temp8 = temp7 - result2;\n  if ((param3 | param4 << 0xc) == 0) {\n    temp7 = (result1 ^ param4) & 0x80000000 | result1 & 0xfffff;\n    flag3 = SCARRY4(temp8,result6 >> 1);\n    result1 = temp8 + (result6 >> 1);\n    flag1 = (int)result1 < 0;\n    flag2 = result1 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(result6,result1);\n      flag1 = (int)(result6 - result1) < 0;\n      flag2 = result6 == result1;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | result1 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,result4);\n    }\n    temp7 = temp7 | 0x100000;\n    result6 = 0;\n    flag2 = SBORROW4(result1,1);\n    result1 = result1 - 1;\n    flag1 = result1 == 0;\n    temp3 = result1;\n  }\n  else {\n    temp3 = (param4 << 0xc) >> 4 | 0x10000000 | param3 >> 0x18;\n    result6 = param3 << 8;\n    result3 = (result1 << 0xc) >> 4 | 0x10000000 | result4 >> 0x18;\n    result4 = result4 * 0x100;\n    temp7 = (result1 ^ param4) & 0x80000000;\n    flag1 = temp3 <= result3;\n    if (result3 == temp3) {\n      flag1 = result6 <= result4;\n    }\n    temp8 = temp8 + (uint)flag1;\n    result1 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      result6 = (uint)((param3 >> 0x18 & 1) != 0) << 0x1f | result6 >> 1;\n    }\n    result5 = result4 - result6;\n    result3 = (result3 - temp3) - (uint)(result4 < result6);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | result6 >> 1;\n    result4 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= result5;\n      if (temp4 < result3 || result3 - temp4 < (uint)flag1) {\n        result5 = result5 - temp1;\n        result4 = result4 | temp3;\n        result3 = (result3 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= result5;\n      flag1 = result3 - temp5 < (uint)flag2;\n      result6 = result3;\n      if (temp5 < result3 || flag1) {\n        result5 = result5 - temp1;\n        result6 = (result3 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < result3 || flag1) {\n        result4 = result4 | temp3 >> 1;\n      }\n      result3 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= result5;\n      flag1 = result6 - result3 < (uint)flag2;\n      temp5 = result6;\n      if (result3 < result6 || flag1) {\n        result5 = result5 - temp2;\n        temp5 = (result6 - result3) - (uint)!flag2;\n      }\n      if (result3 < result6 || flag1) {\n        result4 = result4 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((result3 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= result5;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      result3 = temp5;\n      if (temp6 < temp5 || flag1) {\n        result5 = result5 - temp1;\n        result3 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        result4 = result4 | temp3 >> 3;\n      }\n      result6 = result3 | result5;\n      if (result6 == 0) break;\n      result3 = result3 << 4 | result5 >> 0x1c;\n      result5 = result5 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800083a;\n        temp7 = temp7 | result4;\n        result4 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | result4;\n      result4 = 0;\n    }\nLAB_0800083a:\n    flag3 = 0xfc < result1;\n    flag2 = SBORROW4(result1,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= result3;\n      if (result3 == temp6) {\n        flag1 = temp1 <= result5;\n      }\n      if (result3 == temp6 && result5 == temp1) {\n        flag1 = (result4 & 1) != 0;\n      }\n      return CONCAT44(temp7 + result1 * 0x100000 + (uint)CARRY4(result4,(uint)flag1),result4 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(result1,0x36);\n  flag1 = (int)(result1 + 0x36) < 0;\n  flag2 = result1 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    result4 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,result4);\n  }\n  temp3 = -result1;\n  result3 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = result4 >> (result3 & 0xff) | temp7 << (0x20 - result3 & 0xff);\n    result1 = (temp7 >> (result3 & 0xff) & ~((temp7 & 0x80000000) >> (result3 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((result6 | result4 << (0x20 - result3 & 0xff) | temp3 << 1) == 0) {\n      result1 = result1 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,result1) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(result3,0xc)) {\n    result1 = 0xc - temp8;\n    temp3 = result4 << (result1 & 0xff);\n    result4 = result4 >> (0x20 - result1 & 0xff) | temp7 << (result1 & 0xff);\n    result1 = result4 + -((int)temp3 >> 0x1f);\n    if ((result6 | temp3 << 1) == 0) {\n      result1 = result1 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(result4,-((int)temp3 >> 0x1f)),result1);\n  }\n  result3 = result4 << (result1 + 0x20 & 0xff);\n  result4 = result4 >> (temp3 & 0xff) | temp7 << (result1 + 0x20 & 0xff);\n  result1 = result4 + -((int)result3 >> 0x1f);\n  if ((result6 | result3 << 1) == 0) {\n    result1 = result1 & ~(result3 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(result4,-((int)result3 >> 0x1f)),result1);\n}\n\n",
            "renaming": {
                "FUN_0800071c": "perform_calculation_0800071c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "result1",
                "unaff_r5": "result2",
                "uVar10": "result3",
                "uVar11": "result4",
                "uVar12": "result5",
                "uVar13": "result6",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "concatResult"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08004d78",
                "FUN_08005838",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_0800088a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800088a": {
            "entrypoint": "0x0800088a",
            "current_name": "mask_high_bits_0800088a",
            "code": "\nulonglong mask_high_bits_0800088a(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint result1;\n  uint masked_result;\n  uint result2;\n  uint constant;\n  bool is_zero;\n  \n  masked_result = constant & input4 >> 0x14;\n  result2 = input2;\n  if (result1 != constant || masked_result != constant) {\n    if (result1 == constant) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, result2 = input4, masked_result != constant)\n         ) {\nLAB_080006fc:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (masked_result == constant) {\n      input1 = input3;\n      result2 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (result1 == 0) {\n          result2 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | result2;\n          if (masked_result != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          result2 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(result2 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_080006fc;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return CONCAT44(result2,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800088a": "mask_high_bits_0800088a",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "result1",
                "uVar2": "masked_result",
                "uVar3": "result2",
                "in_r12": "constant",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_0800071c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008fc": {
            "entrypoint": "0x080008fc",
            "current_name": "check_equality_and_conditions_080008fc",
            "code": "\nuint checkEqualityAndConditions_080008fc(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint tempVar1;\n  bool isZero1;\n  bool isZero2;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero1 = (value1 | value2 << 1) == 0;\n  if (isZero1) {\n    isZero1 = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero1) {\n    isZero1 = value2 == value4;\n  }\n  if (isZero1) {\n    isZero1 = value1 == value3;\n  }\n  if (!isZero1) {\n    tempVar1 = value2 ^ value4;\n    isZero1 = tempVar1 == 0;\n    if (-1 < (int)tempVar1) {\n      isZero1 = value2 == value4;\n    }\n    isZero2 = -1 < (int)tempVar1 && value4 <= value2;\n    if (isZero1) {\n      isZero2 = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isZero2) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008fc": "check_equality_and_conditions_080008fc",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "tempVar1",
                "bVar2": "isZero1",
                "bVar3": "isZero2"
            },
            "calling": [
                "FUN_08000988"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000978": {
            "entrypoint": "0x08000978",
            "current_name": "check_conditions_08000978",
            "code": "\nvoid check_conditions_08000978(undefined4 input_1,undefined4 input_2,undefined4 value_1,undefined4 value_2)\n\n{\n  check_equality_and_conditions_08000988(value_1,value_2,input_1,input_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000978": "check_conditions_08000978",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "value_1",
                "param_4": "value_2"
            },
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000988": {
            "entrypoint": "0x08000988",
            "current_name": "check_equality_and_conditions_08000988",
            "code": "\nundefined4 check_equality_and_conditions_08000988(undefined4 input_value)\n\n{\n  check_equality_and_conditions_08000988_080008fc();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000988": "check_equality_and_conditions_08000988",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_080009ac",
                "FUN_080009c0",
                "FUN_08000978",
                "FUN_08000998"
            ],
            "called": [
                "FUN_080008fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "check_equality_and_conditions_08000998",
            "code": "\nbool check_equality_and_conditions_08000998(void)\n\n{\n  char result;\n  \n  check_equality_and_conditions_08000998_08000988();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000998": "check_equality_and_conditions_08000998",
                "in_ZR": "result"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009ac": {
            "entrypoint": "0x080009ac",
            "current_name": "check_if_string_is_empty_080009ac",
            "code": "\nbool check_if_string_is_empty_080009ac(void)\n\n{\n  char input_character;\n  \n  check_equality_and_conditions_08000988();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009ac": "check_if_string_is_empty_080009ac",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c0": {
            "entrypoint": "0x080009c0",
            "current_name": "check_equality_or_conditions_080009c0",
            "code": "\nbool check_equality_or_conditions_080009c0(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_flag_set;\n  \n  check_equality_and_conditions_08000988();\n  return !(bool)is_carry_flag_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_080009c0": "check_equality_or_conditions_080009c0",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_flag_set"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009d4": {
            "entrypoint": "0x080009d4",
            "current_name": "check_conditions_and_return_080009d4",
            "code": "\nbool check_conditions_and_return_080009d4(void)\n\n{\n  undefined zero_condition_result;\n  undefined carry_condition_result;\n  \n  check_conditions_08000978();\n  return !(bool)carry_condition_result || (bool)zero_condition_result;\n}\n\n",
            "renaming": {
                "FUN_080009d4": "check_conditions_and_return_080009d4",
                "in_ZR": "zero_condition_result",
                "in_CY": "carry_condition_result"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009e8": {
            "entrypoint": "0x080009e8",
            "current_name": "check_conditions_and_return_result_080009e8",
            "code": "\nbool check_conditions_and_return_result_080009e8(void)\n\n{\n  char input_character;\n  \n  check_conditions_08000978();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009e8": "check_conditions_and_return_result_080009e8",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009fc": {
            "entrypoint": "0x080009fc",
            "current_name": "calculate_float_080009fc",
            "code": "\nuint calculateFloat_080009fc(uint input1,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool isLessThanThreshold;\n  \n  temp1 = input2 * 2;\n  isLessThanThreshold = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!isLessThanThreshold) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  isZero = result == 0;\n  if (!isLessThanThreshold && temp2 >= 0x200000) {\n    isZero = temp3 == 0x1fc00000;\n  }\n  if (((isLessThanThreshold || temp2 < 0x200000) || 0x1fc00000 < temp3) || isZero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input1 >> (temp1 & 0xff);\n    if (input1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080009fc": "calculate_float_080009fc",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isZero",
                "bVar5": "isLessThanThreshold"
            },
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "entrypoint": "0x08000aa4",
            "current_name": "perform_calculation_08000aa4",
            "code": "\nuint performCalculation_08000aa4(uint input1,uint input2,undefined4 setting,uint result)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint maskedInput2;\n  uint temp1;\n  uint temp2;\n  uint shiftAmount;\n  uint difference;\n  bool isZero;\n  \n  maskedInput2 = input2 ^ 0x80000000;\n  temp2 = input1 << 1;\n  isZero = temp2 == 0;\n  if (!isZero) {\n    result = input2 << 1;\n    isZero = result == 0;\n  }\n  if (!isZero) {\n    isZero = temp2 == result;\n  }\n  shiftedInput1 = (int)temp2 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedInput1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)result >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      temp2 = maskedInput2;\n      if (shiftedInput1 == -1) {\n        temp2 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        maskedInput2 = temp2;\n      }\n      isZero = (temp2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (maskedInput2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = temp2 == maskedInput2;\n      }\n      if (!isZero) {\n        temp2 = temp2 | 0x400000;\n      }\n      return temp2;\n    }\n    if (((input1 ^ maskedInput2) & 0x7fffffff) != 0) {\n      if (temp2 == 0) {\n        input1 = maskedInput2;\n      }\n      return input1;\n    }\n    if (input1 != maskedInput2) {\n      return 0;\n    }\n    if ((temp2 & 0xff000000) == 0) {\n      maskedInput2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        maskedInput2 = maskedInput2 | 0x80000000;\n      }\n      return maskedInput2;\n    }\n    if (temp2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  temp2 = temp2 >> 0x18;\n  result = result >> 0x18;\n  difference = result - temp2;\n  isZero = difference != 0;\n  shiftAmount = temp2;\n  if (isZero && temp2 <= result) {\n    shiftAmount = temp2 + difference;\n  }\n  if (isZero && temp2 <= result) {\n    maskedInput2 = maskedInput2 ^ input1;\n  }\n  if (isZero && temp2 <= result) {\n    input1 = input1 ^ maskedInput2;\n  }\n  if (isZero && temp2 <= result) {\n    maskedInput2 = maskedInput2 ^ input1;\n  }\n  if (result < temp2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  temp2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  temp1 = maskedInput2 & 0xffffff | 0x800000;\n  if ((maskedInput2 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  if (shiftAmount == difference) {\n    temp1 = temp1 ^ 0x800000;\n    if (shiftAmount == 0) {\n      temp2 = temp2 ^ 0x800000;\n      shiftAmount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp2 = temp2 + ((int)temp1 >> (difference & 0xff));\n  temp1 = temp1 << (0x20 - difference & 0xff);\n  input1 = temp2 & 0x80000000;\n  if ((int)temp2 < 0) {\n    isZero = temp1 != 0;\n    temp1 = -temp1;\n    temp2 = -temp2 - (uint)isZero;\n  }\n  if (temp2 < 0x800000) {\n    maskedInput2 = temp1 & 0x80000000;\n    temp1 = temp1 << 1;\n    temp2 = temp2 * 2 + (uint)(maskedInput2 != 0);\n    maskedInput2 = shiftAmount - 2;\n    if ((temp2 & 0x800000) == 0) {\n      difference = LZCOUNT(temp2) - 8;\n      temp2 = temp2 << (difference & 0xff);\n      if ((int)maskedInput2 < (int)difference) {\n        temp2 = temp2 >> (-(maskedInput2 - difference) & 0xff);\n      }\n      else {\n        temp2 = temp2 + (maskedInput2 - difference) * 0x800000;\n      }\n      return temp2 | input1;\n    }\n  }\n  else {\n    maskedInput2 = shiftAmount - 1;\n    if (0xffffff < temp2) {\n      maskedInput2 = temp2 & 1;\n      temp2 = temp2 >> 1;\n      temp1 = (uint)(maskedInput2 != 0) << 0x1f | temp1 >> 1;\n      maskedInput2 = shiftAmount;\n      if (0xfd < shiftAmount) goto LAB_08000bde;\n    }\n  }\n  temp2 = temp2 + maskedInput2 * 0x800000 + (uint)(0x7fffffff < temp1);\n  if (temp1 == 0x80000000) {\n    temp2 = temp2 & 0xfffffffe;\n  }\n  return temp2 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000aa4": "perform_calculation_08000aa4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "setting",
                "param_4": "result",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "maskedInput2",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "shiftAmount",
                "uVar7": "difference",
                "bVar8": "isZero"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_float_08000aa8",
            "code": "\nuint calculateFloat_08000aa8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int leftShiftedInput1;\n  int leftShiftedInput2;\n  uint result;\n  uint shiftedInput1;\n  uint shiftedInput2;\n  uint difference;\n  bool isEqual;\n  \n  shiftedInput1 = input1 << 1;\n  isEqual = shiftedInput1 == 0;\n  if (!isEqual) {\n    input4 = input2 << 1;\n    isEqual = input4 == 0;\n  }\n  if (!isEqual) {\n    isEqual = shiftedInput1 == input4;\n  }\n  leftShiftedInput1 = (int)shiftedInput1 >> 0x18;\n  if (!isEqual) {\n    isEqual = leftShiftedInput1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)input4 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    leftShiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (leftShiftedInput1 == -1 || leftShiftedInput2 == -1) {\n      shiftedInput1 = input2;\n      if (leftShiftedInput1 == -1) {\n        shiftedInput1 = input1;\n      }\n      if (leftShiftedInput1 != -1 || leftShiftedInput2 != -1) {\n        input2 = shiftedInput1;\n      }\n      isEqual = (shiftedInput1 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (input2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = shiftedInput1 == input2;\n      }\n      if (!isEqual) {\n        shiftedInput1 = shiftedInput1 | 0x400000;\n      }\n      return shiftedInput1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (shiftedInput1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((shiftedInput1 & 0xff000000) == 0) {\n      shiftedInput1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        shiftedInput1 = shiftedInput1 | 0x80000000;\n      }\n      return shiftedInput1;\n    }\n    if (shiftedInput1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  shiftedInput1 = shiftedInput1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - shiftedInput1;\n  isEqual = difference != 0;\n  shiftedInput2 = shiftedInput1;\n  if (isEqual && shiftedInput1 <= input4) {\n    shiftedInput2 = shiftedInput1 + difference;\n  }\n  if (isEqual && shiftedInput1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (isEqual && shiftedInput1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (isEqual && shiftedInput1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < shiftedInput1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shiftedInput1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shiftedInput1 = -shiftedInput1;\n  }\n  result = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result = -result;\n  }\n  if (shiftedInput2 == difference) {\n    result = result ^ 0x800000;\n    if (shiftedInput2 == 0) {\n      shiftedInput1 = shiftedInput1 ^ 0x800000;\n      shiftedInput2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedInput1 = shiftedInput1 + ((int)result >> (difference & 0xff));\n  result = result << (0x20 - difference & 0xff);\n  input1 = shiftedInput1 & 0x80000000;\n  if ((int)shiftedInput1 < 0) {\n    isEqual = result != 0;\n    result = -result;\n    shiftedInput1 = -shiftedInput1 - (uint)isEqual;\n  }\n  if (shiftedInput1 < 0x800000) {\n    difference = result & 0x80000000;\n    result = result << 1;\n    shiftedInput1 = shiftedInput1 * 2 + (uint)(difference != 0);\n    difference = shiftedInput2 - 2;\n    if ((shiftedInput1 & 0x800000) == 0) {\n      shiftedInput2 = LZCOUNT(shiftedInput1) - 8;\n      shiftedInput1 = shiftedInput1 << (shiftedInput2 & 0xff);\n      if ((int)difference < (int)shiftedInput2) {\n        shiftedInput1 = shiftedInput1 >> (-(difference - shiftedInput2) & 0xff);\n      }\n      else {\n        shiftedInput1 = shiftedInput1 + (difference - shiftedInput2) * 0x800000;\n      }\n      return shiftedInput1 | input1;\n    }\n  }\n  else {\n    difference = shiftedInput2 - 1;\n    if (0xffffff < shiftedInput1) {\n      difference = shiftedInput1 & 1;\n      shiftedInput1 = shiftedInput1 >> 1;\n      result = (uint)(difference != 0) << 0x1f | result >> 1;\n      difference = shiftedInput2;\n      if (0xfd < shiftedInput2) goto LAB_08000bde;\n    }\n  }\n  shiftedInput1 = shiftedInput1 + difference * 0x800000 + (uint)(0x7fffffff < result);\n  if (result == 0x80000000) {\n    shiftedInput1 = shiftedInput1 & 0xfffffffe;\n  }\n  return shiftedInput1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_float_08000aa8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "leftShiftedInput1",
                "iVar2": "leftShiftedInput2",
                "uVar3": "result",
                "uVar4": "shiftedInput1",
                "uVar5": "shiftedInput2",
                "uVar6": "difference",
                "bVar7": "isEqual"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c08": {
            "entrypoint": "0x08000c08",
            "current_name": "calculate_unsigned_value_08000c08",
            "code": "\nuint calculateUnsignedValue_08000c08(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int initialValue;\n  uint maskValue;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  initialValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    maskValue = 0 << (shiftAmount & 0xff);\n    leadingZeros = initialValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < maskValue);\n    if (maskValue == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = initialValue + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08000c08": "calculate_unsigned_value_08000c08",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "initialValue",
                "uVar4": "maskValue"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c10": {
            "entrypoint": "0x08000c10",
            "current_name": "calculate_unsigned_value_08000c10",
            "code": "\nuint calculateUnsignedValue_08000c10(uint input)\n\n{\n  uint leadingZeroes;\n  uint shiftCount;\n  uint signBit;\n  int result;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeroes = countLeadingZeroes(input);\n  shiftCount = leadingZeroes - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftCount * -0x800000;\n  if (7 < leadingZeroes) {\n    leadingZeroes = 0 << (shiftCount & 0xff);\n    signBit = result + (input << (shiftCount & 0xff)) +\n            (0U >> (0x20 - shiftCount & 0xff)) + (uint)(0x7fffffff < leadingZeroes);\n    if (leadingZeroes == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftCount = input << leadingZeroes + 0x18;\n  signBit = result + ((input >> (0x20 - (leadingZeroes + 0x18) & 0xff)) - ((int)shiftCount >> 0x1f));\n  if ((shiftCount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftCount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08000c10": "calculate_unsigned_value_08000c10",
                "param_1": "input",
                "uVar1": "leadingZeroes",
                "uVar2": "shiftCount",
                "uVar3": "signBit",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeroes"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004ae0",
                "FUN_080049cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "entrypoint": "0x08000cb8",
            "current_name": "calculate_floating_point_08000cb8",
            "code": "\nuint calculateFloatingPoint_08000cb8(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint exponent1;\n  int exponentSum;\n  int normalizedExponent;\n  uint productLower;\n  int normalizedExponentDiff;\n  uint normalizedResult;\n  bool isZero;\n  bool isNegative;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  isZero = exponent1 == 0;\n  if (!isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = exponent1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || param4 == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        result = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      normalizedResult = result;\n      if (((isZero) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (normalizedResult = input2, (input2 & 0x7fffff) != 0)))) {\n        return normalizedResult | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e08;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = exponent1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      exponent1 = exponent1 - 1;\n    }\n    input1 = input1 | result;\n    isZero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  exponentSum = exponent1 + param4;\n  normalizedResult = input1 ^ input2;\n  exponent1 = input1 << 9;\n  isZero = exponent1 == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (exponent1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = normalizedResult & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isNegative = SBORROW4(exponentSum,0x7f);\n    normalizedExponent = exponentSum + -0x7f;\n    isZero = normalizedExponent == 0;\n    normalizedExponentDiff = normalizedExponent;\n    if (!isZero && 0x7e < exponentSum) {\n      isNegative = SBORROW4(0xff,normalizedExponent);\n      normalizedExponentDiff = 0xff - normalizedExponent;\n      isZero = normalizedExponent == 0xff;\n    }\n    if (!isZero && normalizedExponentDiff < 0 == isNegative) {\n      result = result | normalizedExponent * 0x800000;\n    }\n    if (!isZero && normalizedExponentDiff < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    productLower = 0;\n    isNegative = SBORROW4(normalizedExponent,1);\n    normalizedResult = exponentSum - 0x80;\n    isZero = normalizedResult == 0;\n    exponent1 = normalizedResult;\n  }\n  else {\n    product = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    productLower = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | productLower >> 0x1f;\n      productLower = productLower << 1;\n    }\n    result = normalizedResult & 0x80000000 | result;\n    normalizedResult = (exponentSum + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(normalizedResult,0xfd);\n    isZero = normalizedResult == 0xfd;\n    exponent1 = normalizedResult - 0xfd;\n    if (normalizedResult < 0xfe) {\n      result = result + normalizedResult * 0x800000 + (uint)(0x7fffffff < productLower);\n      if (productLower == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)exponent1 < 0 != isNegative) {\n    isZero = (int)(normalizedResult + 0x19) < 0;\n    if (normalizedResult == 0xffffffe7 || isZero != SCARRY4(normalizedResult,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (normalizedResult != 0xffffffe7 && isZero == SCARRY4(normalizedResult,0x19)) {\n      exponent1 = (result << 1) >> (-normalizedResult & 0xff);\n      normalizedResult = result << (normalizedResult + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((productLower | normalizedResult << 1) == 0) {\n        exponent1 = exponent1 & ~(normalizedResult >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_08000e08:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cb8": "calculate_floating_point_08000cb8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "exponent1",
                "iVar4": "exponentSum",
                "iVar5": "normalizedExponent",
                "uVar6": "productLower",
                "iVar7": "normalizedExponentDiff",
                "uVar8": "normalizedResult",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e20": {
            "entrypoint": "0x08000e20",
            "current_name": "floating_point_conversion_08000e20",
            "code": "\nuint floatingPointConversion_08000e20(uint input1,uint input2,undefined4 constant1,uint constant2)\n\n{\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    constant2 = input2 >> 0x17 & 0xff;\n    flag1 = constant2 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0xff;\n  }\n  if (!flag1) {\n    flag1 = constant2 == 0xff;\n  }\n  if (flag1) {\n    constant2 = input2 >> 0x17 & 0xff;\n    temp6 = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (temp6 = input2, constant2 == 0xff)) {\nLAB_08000e16:\n        return temp6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (constant2 == 0xff) {\n        temp6 = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      flag1 = (input1 & 0x7fffffff) == 0;\n      if (!flag1) {\n        flag1 = (input2 & 0x7fffffff) == 0;\n      }\n      if (!flag1) {\n        flag1 = temp2 == 0;\n        temp6 = input1 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            input1 = input1 << 1;\n            flag1 = (input1 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | temp6;\n        flag1 = constant2 == 0;\n        temp6 = input2 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            input2 = input2 << 1;\n            flag1 = (input2 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          constant2 = constant2 - 1;\n        }\n        input2 = input2 | temp6;\n        goto LAB_08000e38;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e38:\n    temp3 = temp2 - constant2;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      flag3 = SCARRY4(temp3,0x7f);\n      temp5 = temp3 + 0x7f;\n      flag1 = temp5 < 0;\n      flag2 = temp5 == 0;\n      if (!flag2 && flag1 == flag3) {\n        flag3 = SBORROW4(0xff,temp5);\n        flag1 = 0xff - temp5 < 0;\n        flag2 = temp5 == 0xff;\n      }\n      if (!flag2 && flag1 == flag3) {\n        input1 = input1 | temp5 * 0x800000;\n      }\n      if (!flag2 && flag1 == flag3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      flag2 = SBORROW4(temp5,1);\n      temp4 = temp3 + 0x7e;\n      flag1 = temp4 == 0;\n      temp6 = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      flag1 = temp1 <= temp2;\n      if (!flag1) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = temp3 + 0x7d + (uint)flag1;\n      temp6 = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | temp6;\n        }\n        flag1 = temp1 >> 1 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (flag1) {\n          input1 = input1 | temp6 >> 1;\n        }\n        flag1 = temp1 >> 2 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (flag1) {\n          input1 = input1 | temp6 >> 2;\n        }\n        flag1 = temp1 >> 3 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (flag1) {\n          input1 = input1 | temp6 >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        flag1 = temp2 == 0;\n        if (!flag1) {\n          temp6 = temp6 >> 4;\n          flag1 = temp6 == 0;\n        }\n      } while (!flag1);\n      flag2 = SBORROW4(temp4,0xfd);\n      flag1 = temp4 == 0xfd;\n      temp6 = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (flag1 || (int)temp6 < 0 != flag2) {\n      flag1 = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || flag1 != SCARRY4(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || flag1 != SCARRY4(temp4,0x19)) {\n        return input1;\n      }\n      temp6 = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      temp6 = ((uint)((input1 & 0x80000000) != 0) << 0x1f | temp6 >> 1) + (uint)((byte)temp6 & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        temp6 = temp6 & ~(temp4 >> 0x1f);\n      }\n      return temp6;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e20": "floating_point_conversion_08000e20",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "constant1",
                "param_4": "constant2",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "bVar7": "flag1",
                "bVar8": "flag2",
                "bVar9": "flag3"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f68": {
            "entrypoint": "0x08000f68",
            "current_name": "calculate_abs_difference_08000f68",
            "code": "\nuint calculate_abs_difference_08000f68(uint input_1,uint input_2)\n\n{\n  bool is_negative_difference;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint combined_input_difference;\n  bool is_input_difference_zero;\n  \n  input_1_times_2 = input_1 * 2;\n  input_2_times_2 = input_2 * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_input_difference = input_1_times_2 | input_2 & 0x7fffffff;\n  is_input_difference_zero = combined_input_difference == 0;\n  if (!is_input_difference_zero) {\n    combined_input_difference = input_1 ^ input_2;\n    is_input_difference_zero = combined_input_difference == 0;\n  }\n  is_negative_difference = -1 < (int)combined_input_difference;\n  if (is_negative_difference) {\n    input_1 = input_1_times_2 + input_2 * -2;\n    is_input_difference_zero = input_1 == 0;\n  }\n  if ((is_negative_difference && input_2_times_2 <= input_1_times_2) && !is_input_difference_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative_difference || input_2_times_2 > input_1_times_2) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_input_difference_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f68": "calculate_abs_difference_08000f68",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_negative_difference",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "combined_input_difference",
                "bVar5": "is_input_difference_zero",
                "return": "result"
            },
            "calling": [
                "FUN_08000fd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "entrypoint": "0x08000fc8",
            "current_name": "concatenate_parameters_08000fc8",
            "code": "\nvoid concatenateParameters_08000fc8(undefined4 destination,undefined4 source)\n\n{\n  concatenate_parameters_08000fd0(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fc8": "concatenate_parameters_08000fc8",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08001030"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "entrypoint": "0x08000fd0",
            "current_name": "concatenate_parameters_08000fd0",
            "code": "\nundefined8 concatenate_parameters_08000fd0(undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  calculate_absolute_difference();\n  return CONCAT44(input_param_2,input_param_1);\n}\n\n",
            "renaming": {
                "FUN_08000fd0": "concatenate_parameters_08000fd0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "calculate_abs_difference_08000f68": "calculate_absolute_difference"
            },
            "calling": [
                "FUN_08000fc8",
                "FUN_08000ff4"
            ],
            "called": [
                "FUN_08000f68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "entrypoint": "0x08000ff4",
            "current_name": "is_string_empty_08000ff4",
            "code": "\nbool is_string_empty_08000ff4(void)\n\n{\n  char input_character;\n  \n  concatenate_parameters_08000fd0();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000ff4": "is_string_empty_08000ff4",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001030": {
            "entrypoint": "0x08001030",
            "current_name": "is_string_empty_08001030",
            "code": "\nbool isStringEmpty_08001030(void)\n\n{\n  char inputChar;\n  \n  concatenate_parameters_08000fc8();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001030": "is_string_empty_08001030",
                "in_CY": "inputChar"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fc8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001044": {
            "entrypoint": "0x08001044",
            "current_name": "check_number_range_08001044",
            "code": "\nuint checkNumberRange_08001044(uint number)\n\n{\n  uint shiftedValue;\n  \n  if (((number & 0x80000000) != 0) || (number << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftedValue = 0x9e - ((number << 1) >> 0x18);\n  if (-1 < (int)shiftedValue) {\n    return (number << 8 | 0x80000000) >> (shiftedValue & 0xff);\n  }\n  if ((shiftedValue == 0xffffff9f) && ((number & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08001044": "check_number_range_08001044",
                "param_1": "number",
                "uVar1": "shiftedValue"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001084": {
            "entrypoint": "0x08001084",
            "current_name": "copy_memory_08001084",
            "code": "\nundefined4 * copyMemory_08001084(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *dest;\n  undefined4 *src;\n  uint remainingSize;\n  uint remainingSize2;\n  bool isRemaining;\n  \n  dest = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      remainingSize2 = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = source;\n          src = dest;\n          isRemaining = remainingSize2 != 0;\n          remainingSize2 = remainingSize2 - 1;\n          *(undefined *)src = *(undefined *)destPtr;\n          dest = (undefined4 *)((int)src + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (isRemaining);\n        *(undefined *)(undefined4 *)((int)src + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)src + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)src + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      remainingSize2 = 4 - ((uint)destination & 3);\n      size = size - remainingSize2;\n      destPtr = destination;\n      src = source;\n      if (((uint)destination & 1) != 0) {\n        src = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dest = destPtr;\n      source = src;\n      if ((remainingSize2 & 2) != 0) {\n        source = (undefined4 *)((int)src + 2);\n        dest = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)src;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *dest = *source;\n    dest[1] = source[1];\n    dest[2] = source[2];\n    dest[3] = source[3];\n    dest[4] = source[4];\n    dest[5] = source[5];\n    dest[6] = source[6];\n    dest[7] = source[7];\n    dest[8] = source[8];\n    dest[9] = source[9];\n    dest[10] = source[10];\n    dest[0xb] = source[0xb];\n    dest[0xc] = source[0xc];\n    dest[0xd] = source[0xd];\n    dest[0xe] = source[0xe];\n    dest[0xf] = source[0xf];\n    dest = dest + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *dest = *source;\n      dest[1] = source[1];\n      dest[2] = source[2];\n      dest[3] = source[3];\n      dest = dest + 4;\n      source = source + 4;\n      isRemaining = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (isRemaining);\n  }\n  remainingSize2 = remainingSize + 0xc;\n  src = dest;\n  destPtr = source;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      source = destPtr + 1;\n      *src = *destPtr;\n      isRemaining = 3 < remainingSize2;\n      remainingSize2 = remainingSize2 - 4;\n      dest = src + 1;\n      src = src + 1;\n      destPtr = source;\n    } while (isRemaining);\n  }\nLAB_08001108:\n  if (remainingSize2 + 4 != 0) {\n    destPtr = dest;\n    src = source;\n    if ((remainingSize2 & 1) != 0) {\n      src = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)dest + 1);\n      *(undefined *)dest = *(undefined *)source;\n    }\n    if ((remainingSize2 + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)src;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "dest",
                "puVar3": "src",
                "uVar4": "remainingSize",
                "uVar5": "remainingSize2",
                "bVar6": "isRemaining"
            },
            "calling": [
                "FUN_08009120",
                "FUN_080097cc",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "check_conditions_08001170",
            "code": "\nundefined4 check_conditions_08001170(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001170": "check_conditions_08001170",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800119c": {
            "entrypoint": "0x0800119c",
            "current_name": "convert_value_0800119c",
            "code": "\nuint convertValue_0800119c(uint inputValue1,uint inputValue2)\n\n{\n  uint convertedValue;\n  int tempValue1;\n  uint shiftAmount;\n  \n  tempValue1 = inputValue2 * 2 + 0x200000;\n  if (inputValue2 * 2 < 0xffe00000) {\n    if (-1 < tempValue1) {\n      return 0;\n    }\n    convertedValue = tempValue1 >> 0x15;\n    shiftAmount = -convertedValue - 0x3e1;\n    if (convertedValue < 0xfffffc20 && shiftAmount != 0) {\n      convertedValue = (inputValue2 << 0xb | 0x80000000 | inputValue1 >> 0x15) >> (shiftAmount & 0xff);\n      if ((inputValue2 & 0x80000000) != 0) {\n        convertedValue = -convertedValue;\n      }\n      return convertedValue;\n    }\n  }\n  else if ((inputValue1 | inputValue2 << 0xc) != 0) {\n    return 0;\n  }\n  inputValue2 = inputValue2 & 0x80000000;\n  if (inputValue2 == 0) {\n    inputValue2 = 0x7fffffff;\n  }\n  return inputValue2;\n}\n\n",
            "renaming": {
                "FUN_0800119c": "convert_value_0800119c",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "uVar1": "convertedValue",
                "iVar2": "tempValue1",
                "uVar3": "shiftAmount"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011ec": {
            "entrypoint": "0x080011ec",
            "current_name": "calculate_result_080011ec",
            "code": "\nundefined8 calculate_result_080011ec(int input_param_1,int input_param_2,int input_param_3,int input_param_4)\n\n{\n  undefined8 result;\n  \n  if ((input_param_4 == 0) && (input_param_3 == 0)) {\n    if (input_param_2 != 0 || input_param_1 != 0) {\n      input_param_2 = -1;\n      input_param_1 = -1;\n    }\n    return CONCAT44(input_param_2,input_param_1);\n  }\n  result = calculate_division_0800121c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080011ec": "calculate_result_080011ec",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_0800121c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800121c": {
            "entrypoint": "0x0800121c",
            "current_name": "calculate_division_0800121c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 calculate_division_0800121c(uint dividend,uint dividend_upper,uint divisor,uint divisor_lower,uint *result)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong partial_result;\n  uint quotient;\n  uint remainder;\n  uint temp;\n  int shift_amount;\n  uint temp_quotient;\n  uint temp_remainder;\n  uint dividend_lower;\n  uint *carry_and_quotient;\n  uint temp_quotient2;\n  uint divisor_upper;\n  uint temp_remainder2;\n  bool carry_flag;\n  undefined8 result_combined;\n  \n  if (divisor_lower == 0) {\n    if (dividend_upper < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      temp_remainder = divisor;\n      if (shift_amount != 0) {\n        temp_remainder = divisor << shift_amount;\n        dividend_upper = dividend >> (0x20U - shift_amount & 0xff) | dividend_upper << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      divisor_upper = temp_remainder >> 0x10;\n      dividend_lower = dividend_upper / divisor_upper;\n      temp_quotient2 = dividend_lower * (temp_remainder & 0xffff);\n      temp_quotient = dividend >> 0x10 | (dividend_upper - divisor_upper * dividend_lower) * 0x10000;\n      remainder = dividend_lower;\n      if (temp_quotient <= temp_quotient2 && temp_quotient2 - temp_quotient != 0) {\n        carry_flag = CARRY4(temp_remainder,temp_quotient);\n        temp_quotient = temp_remainder + temp_quotient;\n        remainder = dividend_lower - 1;\n        if ((carry_flag == false) && (temp_quotient <= temp_quotient2 && temp_quotient2 - temp_quotient != 0)) {\n          remainder = dividend_lower - 2;\n          temp_quotient = temp_quotient + temp_remainder;\n        }\n      }\n      quotient = (temp_quotient - temp_quotient2) / divisor_upper;\n      temp = quotient * (temp_remainder & 0xffff);\n      dividend_lower = dividend & 0xffff | ((temp_quotient - temp_quotient2) - divisor_upper * quotient) * 0x10000;\n      temp_quotient = quotient;\n      if (dividend_lower <= temp && temp - dividend_lower != 0) {\n        carry_flag = CARRY4(temp_remainder,dividend_lower);\n        dividend_lower = temp_remainder + dividend_lower;\n        temp_quotient = quotient - 1;\n        if ((carry_flag == false) && (dividend_lower <= temp && temp - dividend_lower != 0)) {\n          temp_quotient = quotient - 2;\n          dividend_lower = dividend_lower + temp_remainder;\n        }\n      }\n      temp_quotient = temp_quotient | remainder << 0x10;\n      carry_and_quotient = (uint *)0x0;\n      dividend_lower = dividend_lower - temp;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        result_combined = (*UNRECOVERED_JUMPTABLE)();\n        return result_combined;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        carry_and_quotient = (uint *)0x1;\n        dividend_upper = dividend_upper - divisor;\n        divisor_upper = divisor >> 0x10;\n        quotient = divisor & 0xffff;\n        temp_remainder = divisor;\n      }\n      else {\n        temp_remainder = divisor << shift_amount;\n        temp_quotient = dividend_upper >> (0x20U - shift_amount & 0xff);\n        divisor_upper = temp_remainder >> 0x10;\n        temp_quotient2 = temp_quotient / divisor_upper;\n        quotient = temp_remainder & 0xffff;\n        temp = temp_quotient2 * quotient;\n        dividend_lower = dividend >> (0x20U - shift_amount & 0xff) | dividend_upper << shift_amount;\n        remainder = dividend_lower >> 0x10 | (temp_quotient - divisor_upper * temp_quotient2) * 0x10000;\n        dividend = dividend << shift_amount;\n        temp_quotient = temp_quotient2;\n        if (remainder <= temp && temp - remainder != 0) {\n          carry_flag = CARRY4(temp_remainder,remainder);\n          remainder = temp_remainder + remainder;\n          temp_quotient = temp_quotient2 - 1;\n          if ((carry_flag == false) && (remainder <= temp && temp - remainder != 0)) {\n            temp_quotient = temp_quotient2 - 2;\n            remainder = remainder + temp_remainder;\n          }\n        }\n        temp_quotient2 = (remainder - temp) / divisor_upper;\n        temp_remainder2 = temp_quotient2 * quotient;\n        dividend_upper = dividend_lower & 0xffff | ((remainder - temp) - divisor_upper * temp_quotient2) * 0x10000;\n        remainder = temp_quotient2;\n        if (dividend_upper <= temp_remainder2 && temp_remainder2 - dividend_upper != 0) {\n          carry_flag = CARRY4(temp_remainder,dividend_upper);\n          dividend_upper = temp_remainder + dividend_upper;\n          remainder = temp_quotient2 - 1;\n          if ((carry_flag == false) && (dividend_upper <= temp_remainder2 && temp_remainder2 - dividend_upper != 0)) {\n            remainder = temp_quotient2 - 2;\n            dividend_upper = dividend_upper + temp_remainder;\n          }\n        }\n        dividend_upper = dividend_upper - temp_remainder2;\n        carry_and_quotient = (uint *)(remainder | temp_quotient << 0x10);\n      }\n      temp_quotient2 = dividend_upper / divisor_upper;\n      temp_quotient = quotient * temp_quotient2;\n      dividend_lower = dividend >> 0x10 | (dividend_upper - divisor_upper * temp_quotient2) * 0x10000;\n      remainder = temp_quotient2;\n      if (dividend_lower <= temp_quotient && temp_quotient - dividend_lower != 0) {\n        carry_flag = CARRY4(temp_remainder,dividend_lower);\n        dividend_lower = temp_remainder + dividend_lower;\n        remainder = temp_quotient2 - 1;\n        if ((carry_flag == false) && (dividend_lower <= temp_quotient && temp_quotient - dividend_lower != 0)) {\n          remainder = temp_quotient2 - 2;\n          dividend_lower = dividend_lower + temp_remainder;\n        }\n      }\n      temp_quotient2 = (dividend_lower - temp_quotient) / divisor_upper;\n      quotient = quotient * temp_quotient2;\n      dividend_lower = dividend & 0xffff | ((dividend_lower - temp_quotient) - divisor_upper * temp_quotient2) * 0x10000;\n      temp_quotient = temp_quotient2;\n      if (dividend_lower <= quotient && quotient - dividend_lower != 0) {\n        carry_flag = CARRY4(temp_remainder,dividend_lower);\n        dividend_lower = temp_remainder + dividend_lower;\n        temp_quotient = temp_quotient2 - 1;\n        if ((carry_flag == false) && (dividend_lower <= quotient && quotient - dividend_lower != 0)) {\n          temp_quotient = temp_quotient2 - 2;\n          dividend_lower = dividend_lower + temp_remainder;\n        }\n      }\n      dividend_lower = dividend_lower - quotient;\n      temp_quotient = temp_quotient | remainder << 0x10;\n    }\n    if (result != (uint *)0x0) {\n      *result = dividend_lower >> LZCOUNT(divisor);\n      result[1] = 0;\n    }\n  }\n  else {\n    carry_and_quotient = result;\n    if (dividend_upper < divisor_lower) {\n      if (result != (uint *)0x0) {\n        *result = dividend;\n        result[1] = dividend_upper;\n        return 0;\n      }\n      temp_quotient = 0;\n    }\n    else {\n      shift_amount = LZCOUNT(divisor_lower);\n      if (shift_amount == 0) {\n        if ((divisor_lower < dividend_upper) || (divisor <= dividend)) {\n          carry_flag = dividend < divisor;\n          dividend = dividend - divisor;\n          dividend_upper = (dividend_upper - divisor_lower) - (uint)carry_flag;\n          temp_quotient = 1;\n        }\n        else {\n          temp_quotient = 0;\n        }\n        carry_and_quotient = (uint *)0x0;\n        if (result != (uint *)0x0) {\n          *result = dividend;\n          result[1] = dividend_upper;\n        }\n      }\n      else {\n        dividend_lower = 0x20 - shift_amount;\n        quotient = divisor >> (dividend_lower & 0xff) | divisor_lower << shift_amount;\n        temp_remainder = dividend_upper >> (dividend_lower & 0xff);\n        temp = quotient >> 0x10;\n        temp_quotient2 = temp_remainder / temp;\n        divisor_upper = temp_quotient2 * (quotient & 0xffff);\n        temp_quotient = dividend_upper << shift_amount | dividend >> (dividend_lower & 0xff);\n        remainder = temp_quotient >> 0x10 | (temp_remainder - temp * temp_quotient2) * 0x10000;\n        dividend = dividend << shift_amount;\n        temp_remainder = temp_quotient2;\n        if (remainder <= divisor_upper && divisor_upper - remainder != 0) {\n          carry_flag = CARRY4(quotient,remainder);\n          remainder = quotient + remainder;\n          temp_remainder = temp_quotient2 - 1;\n          if ((carry_flag == false) && (remainder <= divisor_upper && divisor_upper - remainder != 0)) {\n            temp_remainder = temp_quotient2 - 2;\n            remainder = remainder + quotient;\n          }\n        }\n        temp_quotient2 = (remainder - divisor_upper) / temp;\n        temp_remainder2 = temp_quotient2 * (quotient & 0xffff);\n        remainder = temp_quotient & 0xffff | ((remainder - divisor_upper) - temp * temp_quotient2) * 0x10000;\n        temp_quotient = temp_quotient2;\n        if (remainder <= temp_remainder2 && temp_remainder2 - remainder != 0) {\n          carry_flag = CARRY4(quotient,remainder);\n          remainder = quotient + remainder;\n          temp_quotient = temp_quotient2 - 1;\n          if ((carry_flag == false) && (remainder <= temp_remainder2 && temp_remainder2 - remainder != 0)) {\n            temp_quotient = temp_quotient2 - 2;\n            remainder = remainder + quotient;\n          }\n        }\n        temp_quotient = temp_quotient | temp_remainder << 0x10;\n        partial_result = (ulonglong)temp_quotient * (ulonglong)(divisor << shift_amount);\n        if (CONCAT44(remainder - temp_remainder2,dividend) < partial_result) {\n          temp_quotient = temp_quotient - 1;\n          partial_result = partial_result - CONCAT44(quotient,divisor << shift_amount);\n        }\n        if (result != (uint *)0x0) {\n          temp_remainder = ((remainder - temp_remainder2) - (int)(partial_result >> 0x20)) - (uint)(dividend < (uint)partial_result);\n          *result = temp_remainder << (dividend_lower & 0xff) | dividend - (uint)partial_result >> shift_amount;\n          result[1] = temp_remainder >> shift_amount;\n          carry_and_quotient = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(carry_and_quotient,temp_quotient);\n}\n\n",
            "renaming": {
                "FUN_0800121c": "calculate_division_0800121c",
                "param_1": "dividend",
                "param_2": "dividend_upper",
                "param_3": "divisor",
                "param_4": "divisor_lower",
                "param_5": "result",
                "uVar1": "partial_result",
                "uVar2": "quotient",
                "uVar3": "remainder",
                "uVar4": "temp",
                "iVar5": "shift_amount",
                "uVar6": "temp_quotient",
                "uVar7": "temp_remainder",
                "uVar8": "dividend_lower",
                "uVar10": "temp_quotient2",
                "uVar11": "divisor_upper",
                "uVar12": "temp_remainder2",
                "bVar13": "carry_flag",
                "uVar14": "result_combined",
                "puVar9": "carry_and_quotient"
            },
            "calling": [
                "FUN_080011ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014f0": {
            "entrypoint": "0x080014f0",
            "current_name": "initiate_device_startup_080014f0",
            "code": "\n\n\nundefined4 initiate_device_startup_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  configure_device(3);\n  validate_and_set_parameter(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080014f0": "initiate_device_startup_080014f0",
                "set_configuration_register_08001714": "configure_device",
                "validate_and_set_param_0800151c": "validate_and_set_parameter"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800151c",
                "FUN_08002d8a",
                "FUN_08001714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800151c": {
            "entrypoint": "0x0800151c",
            "current_name": "validate_and_set_param_0800151c",
            "code": "\nundefined4 validateAndSetParam_0800151c(uint inputParam)\n\n{\n  int validationResult;\n  undefined4 returnValue;\n  \n  validationResult = validate_and_set_param_08001762((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (validationResult == 0) {\n    if (inputParam < 0x10) {\n      store_shifted_bits_0800172a(0xffffffff,inputParam,0);\n      returnValue = 0;\n      DAT_20000000 = inputParam;\n    }\n    else {\n      returnValue = 1;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800151c": "validate_and_set_param_0800151c",
                "param_1": "inputParam",
                "iVar1": "validationResult",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_080014f0",
                "FUN_08003260"
            ],
            "called": [
                "FUN_0800172a",
                "FUN_08001762"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "increment_sum_0800157c",
            "code": "\nvoid incrementSum_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "increment_sum_0800157c"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015a0": {
            "entrypoint": "0x080015a0",
            "current_name": "get_data_080015a0",
            "code": "\nundefined4 get_data_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "renaming": {
                "FUN_080015a0": "get_data_080015a0"
            },
            "calling": [
                "FUN_08004436",
                "FUN_08001ccc",
                "FUN_08002c2e",
                "FUN_080027f4",
                "FUN_08002ca8",
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_08004f2c",
                "FUN_08002d98",
                "FUN_08003260",
                "FUN_08002640",
                "FUN_08001f6c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b4": {
            "entrypoint": "0x080015b4",
            "current_name": "set_configuration_register_080015b4",
            "code": "\n\n\nvoid setConfigurationRegister_080015b4(uint configurationValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (configurationValue & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b4": "set_configuration_register_080015b4",
                "param_1": "configurationValue"
            },
            "calling": [
                "FUN_08001714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015fc": {
            "entrypoint": "0x080015fc",
            "current_name": "get_shifted_bits_080015fc",
            "code": "\n\n\nuint getShiftedBits_080015fc(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_080015fc": "get_shifted_bits_080015fc"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001618": {
            "entrypoint": "0x08001618",
            "current_name": "store_value_08001618",
            "code": "\nvoid storeValue_08001618(byte inputByte,uint inputValue)\n\n{\n  if ((char)inputByte < '\\0') {\n    *(char *)((inputByte & 0xf) + 0xe000ed14) = (char)((inputValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((inputValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001618": "store_value_08001618",
                "param_1": "inputByte",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_0800172a",
                "FUN_080016d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800166c": {
            "entrypoint": "0x0800166c",
            "current_name": "bitwise_operation_with_shift_0800166c",
            "code": "\nuint bitwiseOperationWithShift_0800166c(uint input1,uint input2,uint input3)\n\n{\n  uint shiftAmount;\n  \n  input1 = input1 & 7;\n  shiftAmount = 7 - input1;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (input1 + 4 < 7) {\n    input1 = 0;\n  }\n  else {\n    input1 = input1 - 3;\n  }\n  return input3 & ~(-1 << (input1 & 0xff)) |\n         (~(-1 << (shiftAmount & 0xff)) & input2) << (input1 & 0xff);\n}\n\n",
            "renaming": {
                "FUN_0800166c": "bitwise_operation_with_shift_0800166c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016d0": {
            "entrypoint": "0x080016d0",
            "current_name": "check_and_set_param_080016d0",
            "code": "\n\n\nbool checkAndSetParam_080016d0(int input)\n\n{\n  bool isParamValid;\n  \n  isParamValid = input - 1U < 0x1000000;\n  if (isParamValid) {\n    _DAT_e000e014 = input + -1;\n    store_value_08001618(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isParamValid;\n}\n\n",
            "renaming": {
                "FUN_080016d0": "check_and_set_param_080016d0",
                "param_1": "input",
                "bVar1": "isParamValid"
            },
            "calling": [
                "FUN_08001762"
            ],
            "called": [
                "FUN_08001618"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001714": {
            "entrypoint": "0x08001714",
            "current_name": "set_configuration_register_08001714",
            "code": "\nvoid set_configuration_register_08001714(undefined4 reg_value)\n\n{\n  set_configuration_register_08001714_080015b4(reg_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001714": "set_configuration_register_08001714",
                "param_1": "reg_value"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [
                "FUN_080015b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800172a": {
            "entrypoint": "0x0800172a",
            "current_name": "store_shifted_bits_0800172a",
            "code": "\nvoid storeShiftedBits_0800172a(char value,undefined4 param1,undefined4 param2)\n\n{\n  undefined4 shiftedBits;\n  \n  shiftedBits = getShiftedBits();\n  shiftedBits = performBitwiseOperation(shiftedBits,param1,param2);\n  storeValue((int)value,shiftedBits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800172a": "store_shifted_bits_0800172a",
                "param_1": "value",
                "param_2": "param1",
                "param_3": "param2",
                "uVar1": "shiftedBits",
                "get_shifted_bits_080015fc": "getShiftedBits",
                "bitwise_operation_with_shift_0800166c": "performBitwiseOperation",
                "store_value_08001618": "storeValue"
            },
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "called": [
                "FUN_08001618",
                "FUN_080015fc",
                "FUN_0800166c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001762": {
            "entrypoint": "0x08001762",
            "current_name": "validate_and_set_param_08001762",
            "code": "\nundefined4 validate_and_set_param_08001762(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = check_and_set_param_080016d0(input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001762": "validate_and_set_param_08001762",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080016d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800177c": {
            "entrypoint": "0x0800177c",
            "current_name": "set_flag_0800177c",
            "code": "\n\n\nvoid setFlag_0800177c(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800177c": "set_flag_0800177c",
                "param_1": "value"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017b4": {
            "entrypoint": "0x080017b4",
            "current_name": "initialize_data_processing_080017b4",
            "code": "\nvoid initializeDataProcessing_080017b4(void)\n\n{\n  processData(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080017b4": "initialize_data_processing_080017b4",
                "process_data_08004f78": "processData"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [
                "FUN_08004f78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017c4": {
            "entrypoint": "0x080017c4",
            "current_name": "update_bitmask_080017c4",
            "code": "\n\n\nvoid updateBitmask_080017c4(uint *bitmaskArray,uint *inputArray)\n\n{\n  uint mask;\n  uint bitCheck;\n  uint opcode;\n  uint *bitmaskPtr;\n  int index;\n  uint newValue;\n  uint bitPosition;\n  \n  newValue = 0;\n  bitPosition = 0;\n  do {\n    if (0xf < bitPosition) {\n      return;\n    }\n    mask = 1 << (bitPosition & 0xff);\n    bitCheck = *inputArray & mask;\n    if (bitCheck == mask) {\n      opcode = inputArray[1];\n      if (opcode == 0x12) {\n        newValue = inputArray[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          newValue = inputArray[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_08001882;\n          if (opcode == 1) {\n            newValue = inputArray[3];\n          }\n        }\n        else if (opcode == 3) {\n          newValue = 0;\n        }\n        else if (opcode == 0x11) {\n          newValue = inputArray[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_08001882:\n        if (inputArray[2] == 0) {\n          newValue = 4;\n        }\n        else if (inputArray[2] == 1) {\n          newValue = 8;\n          bitmaskArray[4] = mask;\n        }\n        else {\n          newValue = 8;\n          bitmaskArray[5] = mask;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((opcode == 0x10310000) || (opcode == 0x10320000)) || (opcode == 0x10220000))\n      goto LAB_08001882;\n      if (bitCheck < 0x100) {\n        mask = bitPosition << 2;\n        bitmaskPtr = bitmaskArray;\n      }\n      else {\n        bitmaskPtr = bitmaskArray + 1;\n        mask = (bitPosition - 8) * 4;\n      }\n      *bitmaskPtr = *bitmaskPtr & ~(0xf << (mask & 0xff)) | newValue << (mask & 0xff);\n      if ((inputArray[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (bitmaskArray == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (bitmaskArray == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (bitmaskArray == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (bitmaskArray == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40010000) =\n             index << ((bitPosition & 3) << 2) |\n             ~(0xf << ((bitPosition & 3) << 2)) & *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40010000);\n        if ((inputArray[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~bitCheck & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = bitCheck | _DAT_40010400;\n        }\n        if ((inputArray[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~bitCheck & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = bitCheck | _DAT_40010404;\n        }\n        if ((inputArray[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~bitCheck & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = bitCheck | _DAT_40010408;\n        }\n        if ((inputArray[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~bitCheck & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = bitCheck | _DAT_4001040c;\n        }\n      }\n    }\n    bitPosition = bitPosition + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080017c4": "update_bitmask_080017c4",
                "param_1": "bitmaskArray",
                "param_2": "inputArray",
                "uVar1": "mask",
                "uVar2": "bitCheck",
                "uVar3": "opcode",
                "puVar4": "bitmaskPtr",
                "iVar5": "index",
                "local_10": "newValue",
                "local_c": "bitPosition"
            },
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a80": {
            "entrypoint": "0x08001a80",
            "current_name": "set_param_value_08001a80",
            "code": "\nvoid setParamValue_08001a80(int paramAddress,ushort valueToSet,char isExtendedMode)\n\n{\n  if (isExtendedMode == '\\0') {\n    *(unsignedInteger *)(paramAddress + 0x10) = (unsignedInteger)valueToSet << 0x10;\n  }\n  else {\n    *(unsignedInteger *)(paramAddress + 0x10) = (unsignedInteger)valueToSet;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a80": "set_param_value_08001a80",
                "param_1": "paramAddress",
                "param_2": "valueToSet",
                "param_3": "isExtendedMode",
                "uint": "unsignedInteger"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "calculate_parameter_08001ab0",
            "code": "\nundefined4 calculateParameter_08001ab0(uint **parameters)\n\n{\n  uint shiftValue;\n  char flagValue;\n  undefined4 returnValue;\n  uint temporaryValue;\n  bool isZero;\n  \n  if (parameters == (uint **)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)parameters + 0x3d) == '\\0') {\n      *(undefined *)(parameters + 0xf) = 0;\n      FUNC_08001cb8(parameters);\n    }\n    *(undefined *)((int)parameters + 0x3d) = 0x24;\n    **parameters = **parameters & 0xfffffffe;\n    shiftValue = shift_value_from_global_08003518();\n    if (parameters[1] < (uint *)0x186a1) {\n      temporaryValue = shiftValue;\n      if (shiftValue < 2000000) {\n        temporaryValue = 1;\n      }\n      flagValue = (char)temporaryValue;\n      if (1999999 < shiftValue) {\n        flagValue = '\\0';\n      }\n    }\n    else {\n      temporaryValue = shiftValue;\n      if (shiftValue < 4000000) {\n        temporaryValue = 1;\n      }\n      flagValue = (char)temporaryValue;\n      if (3999999 < shiftValue) {\n        flagValue = '\\0';\n      }\n    }\n    if (flagValue == '\\0') {\n      temporaryValue = shiftValue / 1000000;\n      (*parameters)[1] = temporaryValue;\n      if ((uint *)0x186a0 < parameters[1]) {\n        temporaryValue = (temporaryValue * 300) / 1000;\n      }\n      (*parameters)[8] = temporaryValue + 1;\n      if (parameters[1] < (uint *)0x186a1) {\n        shiftValue = (shiftValue - 1) / (uint)((int)parameters[1] << 1) + 1 & 0xfff;\n        if (shiftValue < 4) {\n          shiftValue = 4;\n        }\n      }\n      else {\n        if (parameters[2] == (uint *)0x0) {\n          temporaryValue = (shiftValue - 1) / (uint)((int)parameters[1] * 3) + 1 & 0xfff;\n          isZero = temporaryValue == 0;\n          if (isZero) {\n            temporaryValue = 1;\n          }\n          flagValue = (char)temporaryValue;\n          if (!isZero) {\n            flagValue = '\\0';\n          }\n        }\n        else {\n          temporaryValue = (shiftValue - 1) / (uint)((int)parameters[1] * 0x19) + 1 & 0xfff;\n          isZero = temporaryValue == 0;\n          if (isZero) {\n            temporaryValue = 1;\n          }\n          flagValue = (char)temporaryValue;\n          if (!isZero) {\n            flagValue = '\\0';\n          }\n        }\n        if (flagValue == '\\0') {\n          if (parameters[2] == (uint *)0x0) {\n            shiftValue = (shiftValue - 1) / (uint)((int)parameters[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            shiftValue = (shiftValue - 1) / (uint)((int)parameters[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          shiftValue = 1;\n        }\n      }\n      (*parameters)[7] = shiftValue;\n      **parameters = (uint)parameters[8] | (uint)parameters[7];\n      (*parameters)[2] = (uint)parameters[3] | (uint)parameters[4];\n      (*parameters)[3] = (uint)parameters[6] | (uint)parameters[5];\n      **parameters = **parameters | 1;\n      parameters[0x10] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      returnValue = 0;\n    }\n    else {\n      returnValue = 1;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "calculate_parameter_08001ab0",
                "param_1": "parameters",
                "uVar1": "shiftValue",
                "cVar2": "flagValue",
                "uVar3": "returnValue",
                "uVar4": "temporaryValue",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_08005348"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "entrypoint": "0x08001cb8",
            "current_name": "FUNC_08001cb8",
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ccc": {
            "entrypoint": "0x08001ccc",
            "current_name": "process_input_08001ccc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nprocessInput_08001ccc(uint **tParam,undefined2 inputParam2,undefined2 inputParam3,undefined2 inputParam4,uint *arrayParam,\n            undefined2 inputParam6,undefined4 inputParam7)\n\n{\n  int dataVar1;\n  int dataVar2;\n  undefined4 resultVar;\n  uint *pointerVar;\n  \n  dataVar1 = get_data_080015a0();\n  if (*(char *)((int)tParam + 0x3d) == ' ') {\n    do {\n      if ((~(*tParam)[6] & 2) != 0) {\n        dataVar2 = 0;\n        goto LAB_08001d9c;\n      }\n      dataVar2 = get_data_080015a0();\n    } while ((uint)(dataVar2 - dataVar1) < 0x1a);\n    tParam[0xc] = (uint *)0x0;\n    *(undefined *)((int)tParam + 0x3d) = 0x20;\n    *(undefined *)((int)tParam + 0x3e) = 0;\n    *(undefined *)(tParam + 0xf) = 0;\n    dataVar2 = 3;\nLAB_08001d9c:\n    if (dataVar2 == 0) {\n      if (*(char *)(tParam + 0xf) == '\\x01') {\n        resultVar = 2;\n      }\n      else {\n        *(undefined *)(tParam + 0xf) = 1;\n        if ((**tParam & 1) != 1) {\n          **tParam = **tParam | 1;\n        }\n        **tParam = **tParam & 0xfffff7ff;\n        *(undefined *)((int)tParam + 0x3d) = 0x21;\n        *(undefined *)((int)tParam + 0x3e) = 0x40;\n        tParam[0x10] = (uint *)0x0;\n        tParam[9] = arrayParam;\n        *(undefined2 *)((int)tParam + 0x2a) = inputParam6;\n        tParam[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(tParam + 10) = *(undefined2 *)((int)tParam + 0x2a);\n        dataVar2 = update_status_and_configure_08002640(tParam,inputParam2,inputParam3,inputParam4,inputParam7,dataVar1);\n        if (dataVar2 == 0) {\n          while (*(short *)(tParam + 10) != 0) {\n            dataVar2 = check_and_configure_08002bb4(tParam,inputParam7,dataVar1);\n            if (dataVar2 != 0) {\n              if (tParam[0x10] == (uint *)0x4) {\n                **tParam = **tParam | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            pointerVar = tParam[9];\n            tParam[9] = (uint *)((int)pointerVar + 1);\n            (*tParam)[4] = (uint)*(byte *)pointerVar;\n            *(short *)(tParam + 10) = *(short *)(tParam + 10) + -1;\n            *(short *)((int)tParam + 0x2a) = *(short *)((int)tParam + 0x2a) + -1;\n            if ((((*tParam)[5] & 4) == 4) && (*(short *)(tParam + 10) != 0)) {\n              pointerVar = tParam[9];\n              tParam[9] = (uint *)((int)pointerVar + 1);\n              (*tParam)[4] = (uint)*(byte *)pointerVar;\n              *(short *)(tParam + 10) = *(short *)(tParam + 10) + -1;\n              *(short *)((int)tParam + 0x2a) = *(short *)((int)tParam + 0x2a) + -1;\n            }\n          }\n          dataVar1 = check_and_configure_08002c2e(tParam,inputParam7,dataVar1);\n          if (dataVar1 == 0) {\n            **tParam = **tParam | 0x200;\n            *(undefined *)((int)tParam + 0x3d) = 0x20;\n            *(undefined *)((int)tParam + 0x3e) = 0;\n            *(undefined *)(tParam + 0xf) = 0;\n            resultVar = 0;\n          }\n          else if (tParam[0x10] == (uint *)0x4) {\n            **tParam = **tParam | 0x200;\n            resultVar = 1;\n          }\n          else {\n            resultVar = 3;\n          }\n        }\n        else if (tParam[0x10] == (uint *)0x4) {\n          *(undefined *)(tParam + 0xf) = 0;\n          resultVar = 1;\n        }\n        else {\n          *(undefined *)(tParam + 0xf) = 0;\n          resultVar = 3;\n        }\n      }\n    }\n    else {\n      resultVar = 2;\n    }\n  }\n  else {\n    resultVar = 2;\n  }\n  return resultVar;\n}\n\n",
            "renaming": {
                "FUN_08001ccc": "process_input_08001ccc",
                "param_1": "tParam",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "param_5": "arrayParam",
                "param_6": "inputParam6",
                "param_7": "inputParam7",
                "iVar1": "dataVar1",
                "iVar2": "dataVar2",
                "uVar3": "resultVar",
                "puVar4": "pointerVar"
            },
            "calling": [
                "FUN_08004ea4"
            ],
            "called": [
                "FUN_08002c2e",
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "entrypoint": "0x08001f6c",
            "current_name": "configure_and_check_status_08001f6c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nconfigureAndCheckStatus_08001f6c(uint **configPtr,undefined2 param2,undefined2 param3,undefined2 param4,uint *param5,\n            undefined2 param6,uint param7)\n\n{\n  int data;\n  uint value;\n  int result;\n  undefined4 returnValue;\n  uint *dataPtr;\n  \n  data = get_data_080015a0();\n  if (*(char *)((int)configPtr + 0x3d) == ' ') {\n    do {\n      if ((~(*configPtr)[6] & 2) != 0) {\n        result = 0;\n        goto LAB_08002040;\n      }\n      result = get_data_080015a0();\n    } while ((uint)(result - data) < 0x1a);\n    configPtr[0xc] = (uint *)0x0;\n    *(undefined *)((int)configPtr + 0x3d) = 0x20;\n    *(undefined *)((int)configPtr + 0x3e) = 0;\n    *(undefined *)(configPtr + 0xf) = 0;\n    result = 3;\nLAB_08002040:\n    if (result == 0) {\n      if (*(char *)(configPtr + 0xf) == '\\x01') {\n        returnValue = 2;\n      }\n      else {\n        *(undefined *)(configPtr + 0xf) = 1;\n        if ((**configPtr & 1) != 1) {\n          **configPtr = **configPtr | 1;\n        }\n        **configPtr = **configPtr & 0xfffff7ff;\n        *(undefined *)((int)configPtr + 0x3d) = 0x22;\n        *(undefined *)((int)configPtr + 0x3e) = 0x40;\n        configPtr[0x10] = (uint *)0x0;\n        configPtr[9] = param5;\n        *(undefined2 *)((int)configPtr + 0x2a) = param6;\n        configPtr[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(configPtr + 10) = *(undefined2 *)((int)configPtr + 0x2a);\n        result = configure_and_check_status_080027f4(configPtr,param2,param3,param4,param7,data);\n        if (result == 0) {\n          if (*(short *)(configPtr + 10) == 0) {\n            **configPtr = **configPtr | 0x200;\n          }\n          else if (*(short *)(configPtr + 10) == 1) {\n            **configPtr = **configPtr & 0xfffffbff;\n            disableIRQinterrupts();\n            **configPtr = **configPtr | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(configPtr + 10) == 2) {\n            **configPtr = **configPtr | 0x800;\n            disableIRQinterrupts();\n            **configPtr = **configPtr & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **configPtr = **configPtr | 0x400;\n          }\n          while (*(short *)(configPtr + 10) != 0) {\n            if (*(ushort *)(configPtr + 10) < 4) {\n              if (*(short *)(configPtr + 10) == 1) {\n                result = check_flag_validity_08002ca8(configPtr,param7,data);\n                if (result != 0) {\n                  if (configPtr[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                value = (*configPtr)[4];\n                dataPtr = configPtr[9];\n                configPtr[9] = (uint *)((int)dataPtr + 1);\n                *(char *)dataPtr = (char)value;\n                *(short *)(configPtr + 10) = *(short *)(configPtr + 10) + -1;\n                *(short *)((int)configPtr + 0x2a) = *(short *)((int)configPtr + 0x2a) + -1;\n              }\n              else if (*(short *)(configPtr + 10) == 2) {\n                do {\n                  if ((~(*configPtr)[5] & 4) == 0) {\n                    result = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (result = get_data_080015a0(), (uint)(result - data) <= param7)\n                         )));\n                configPtr[0xc] = (uint *)0x0;\n                *(undefined *)((int)configPtr + 0x3d) = 0x20;\n                *(undefined *)((int)configPtr + 0x3e) = 0;\n                *(undefined *)(configPtr + 0xf) = 0;\n                result = 3;\nLAB_080022fa:\n                if (result != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **configPtr = **configPtr | 0x200;\n                value = (*configPtr)[4];\n                dataPtr = configPtr[9];\n                configPtr[9] = (uint *)((int)dataPtr + 1);\n                *(char *)dataPtr = (char)value;\n                *(short *)(configPtr + 10) = *(short *)(configPtr + 10) + -1;\n                *(short *)((int)configPtr + 0x2a) = *(short *)((int)configPtr + 0x2a) + -1;\n                enableIRQinterrupts();\n                value = (*configPtr)[4];\n                dataPtr = configPtr[9];\n                configPtr[9] = (uint *)((int)dataPtr + 1);\n                *(char *)dataPtr = (char)value;\n                *(short *)(configPtr + 10) = *(short *)(configPtr + 10) + -1;\n                *(short *)((int)configPtr + 0x2a) = *(short *)((int)configPtr + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*configPtr)[5] & 4) == 0) {\n                    result = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (result = get_data_080015a0(), (uint)(result - data) <= param7)\n                         )));\n                configPtr[0xc] = (uint *)0x0;\n                *(undefined *)((int)configPtr + 0x3d) = 0x20;\n                *(undefined *)((int)configPtr + 0x3e) = 0;\n                *(undefined *)(configPtr + 0xf) = 0;\n                result = 3;\nLAB_08002418:\n                if (result != 0) {\n                  return 3;\n                }\n                **configPtr = **configPtr & 0xfffffbff;\n                disableIRQinterrupts();\n                value = (*configPtr)[4];\n                dataPtr = configPtr[9];\n                configPtr[9] = (uint *)((int)dataPtr + 1);\n                *(char *)dataPtr = (char)value;\n                *(short *)(configPtr + 10) = *(short *)(configPtr + 10) + -1;\n                *(short *)((int)configPtr + 0x2a) = *(short *)((int)configPtr + 0x2a) + -1;\n                do {\n                  if ((~(*configPtr)[5] & 4) == 0) {\n                    result = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (result = get_data_080015a0(), (uint)(result - data) <= param7)\n                         )));\n                configPtr[0xc] = (uint *)0x0;\n                *(undefined *)((int)configPtr + 0x3d) = 0x20;\n                *(undefined *)((int)configPtr + 0x3e) = 0;\n                *(undefined *)(configPtr + 0xf) = 0;\n                result = 3;\nLAB_0800250a:\n                if (result != 0) {\n                  return 3;\n                }\n                **configPtr = **configPtr | 0x200;\n                value = (*configPtr)[4];\n                dataPtr = configPtr[9];\n                configPtr[9] = (uint *)((int)dataPtr + 1);\n                *(char *)dataPtr = (char)value;\n                *(short *)(configPtr + 10) = *(short *)(configPtr + 10) + -1;\n                *(short *)((int)configPtr + 0x2a) = *(short *)((int)configPtr + 0x2a) + -1;\n                enableIRQinterrupts();\n                value = (*configPtr)[4];\n                dataPtr = configPtr[9];\n                configPtr[9] = (uint *)((int)dataPtr + 1);\n                *(char *)dataPtr = (char)value;\n                *(short *)(configPtr + 10) = *(short *)(configPtr + 10) + -1;\n                *(short *)((int)configPtr + 0x2a) = *(short *)((int)configPtr + 0x2a) + -1;\n              }\n            }\n            else {\n              result = check_flag_validity_08002ca8(configPtr,param7,data);\n              if (result != 0) {\n                if (configPtr[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              value = (*configPtr)[4];\n              dataPtr = configPtr[9];\n              configPtr[9] = (uint *)((int)dataPtr + 1);\n              *(char *)dataPtr = (char)value;\n              *(short *)(configPtr + 10) = *(short *)(configPtr + 10) + -1;\n              *(short *)((int)configPtr + 0x2a) = *(short *)((int)configPtr + 0x2a) + -1;\n              if (((*configPtr)[5] & 4) == 4) {\n                value = (*configPtr)[4];\n                dataPtr = configPtr[9];\n                configPtr[9] = (uint *)((int)dataPtr + 1);\n                *(char *)dataPtr = (char)value;\n                *(short *)(configPtr + 10) = *(short *)(configPtr + 10) + -1;\n                *(short *)((int)configPtr + 0x2a) = *(short *)((int)configPtr + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)configPtr + 0x3d) = 0x20;\n          *(undefined *)((int)configPtr + 0x3e) = 0;\n          *(undefined *)(configPtr + 0xf) = 0;\n          returnValue = 0;\n        }\n        else if (configPtr[0x10] == (uint *)0x4) {\n          *(undefined *)(configPtr + 0xf) = 0;\n          returnValue = 1;\n        }\n        else {\n          *(undefined *)(configPtr + 0xf) = 0;\n          returnValue = 3;\n        }\n      }\n    }\n    else {\n      returnValue = 2;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001f6c": "configure_and_check_status_08001f6c",
                "param_1": "configPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "iVar1": "data",
                "uVar2": "value",
                "iVar3": "result",
                "uVar4": "returnValue",
                "puVar5": "dataPtr"
            },
            "calling": [
                "FUN_08004ee8"
            ],
            "called": [
                "FUN_08002ca8",
                "FUN_080027f4",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002640": {
            "entrypoint": "0x08002640",
            "current_name": "update_status_and_configure_08002640",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\nupdateStatusAndConfigure_08002640(uint **data,byte flag,undefined2 byte_val,short type,uint size,int param)\n\n{\n  int result;\n  undefined4 output;\n  \n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_0800270a;\n    }\n  } while ((size == 0xffffffff) ||\n          ((size != 0 && (result = get_data_080015a0(), (uint)(result - param) <= size))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\nLAB_0800270a:\n  if (result == 0) {\n    (*data)[4] = flag & 0xfe;\n    result = check_and_update_status_08002ad8(data,0x10002,size,param);\n    if (result == 0) {\n      result = check_and_configure_08002bb4(data,size,param,(*data)[6]);\n      if (result == 0) {\n        if (type == 1) {\n          (*data)[4] = (uint)(byte)byte_val;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)byte_val >> 8);\n          result = check_and_configure_08002bb4(data,size,param);\n          if (result != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)byte_val;\n        }\n        output = 0;\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        output = 1;\n      }\n      else {\n        output = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      output = 1;\n    }\n    else {\n      output = 3;\n    }\n  }\n  else {\n    output = 3;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08002640": "update_status_and_configure_08002640",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "byte_val",
                "param_4": "type",
                "param_5": "size",
                "param_6": "param",
                "iVar1": "result",
                "uVar2": "output"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f4": {
            "entrypoint": "0x080027f4",
            "current_name": "configure_and_check_status_080027f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nconfigureAndCheckStatus_080027f4(uint **configParams,byte statusByte,undefined2 modeByte,short isSingleByte,uint value,int param)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  **configParams = **configParams | 0x400;\n  **configParams = **configParams | 0x100;\n  do {\n    if ((~(*configParams)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_080028d2;\n    }\n  } while ((value == 0xffffffff) ||\n          ((value != 0 && (result = get_data_080015a0(), (uint)(result - param) <= value))));\n  configParams[0xc] = (uint *)0x0;\n  *(undefined *)((int)configParams + 0x3d) = 0x20;\n  *(undefined *)((int)configParams + 0x3e) = 0;\n  *(undefined *)(configParams + 0xf) = 0;\n  result = 3;\nLAB_080028d2:\n  if (result == 0) {\n    (*configParams)[4] = statusByte & 0xfe;\n    result = check_and_update_status_08002ad8(configParams,0x10002,value,param);\n    if (result == 0) {\n      result = check_and_configure_08002bb4(configParams,value,param,(*configParams)[6]);\n      if (result == 0) {\n        if (isSingleByte == 1) {\n          (*configParams)[4] = (uint)(byte)modeByte;\n        }\n        else {\n          (*configParams)[4] = (uint)(byte)((ushort)modeByte >> 8);\n          result = check_and_configure_08002bb4(configParams,value,param);\n          if (result != 0) {\n            if (configParams[0x10] == (uint *)0x4) {\n              **configParams = **configParams | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*configParams)[4] = (uint)(byte)modeByte;\n        }\n        result = check_and_configure_08002bb4(configParams,value,param);\n        if (result == 0) {\n          **configParams = **configParams | 0x100;\n          do {\n            if ((~(*configParams)[5] & 1) == 0) {\n              result = 0;\n              goto LAB_08002a90;\n            }\n          } while ((value == 0xffffffff) ||\n                  ((value != 0 && (result = get_data_080015a0(), (uint)(result - param) <= value))));\n          configParams[0xc] = (uint *)0x0;\n          *(undefined *)((int)configParams + 0x3d) = 0x20;\n          *(undefined *)((int)configParams + 0x3e) = 0;\n          *(undefined *)(configParams + 0xf) = 0;\n          result = 3;\nLAB_08002a90:\n          if (result == 0) {\n            (*configParams)[4] = (uint)(statusByte | 1);\n            result = check_and_update_status_08002ad8(configParams,0x10002,value,param);\n            if (result == 0) {\n              returnValue = 0;\n            }\n            else if (configParams[0x10] == (uint *)0x4) {\n              returnValue = 1;\n            }\n            else {\n              returnValue = 3;\n            }\n          }\n          else {\n            returnValue = 3;\n          }\n        }\n        else if (configParams[0x10] == (uint *)0x4) {\n          **configParams = **configParams | 0x200;\n          returnValue = 1;\n        }\n        else {\n          returnValue = 3;\n        }\n      }\n      else if (configParams[0x10] == (uint *)0x4) {\n        **configParams = **configParams | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (configParams[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080027f4": "configure_and_check_status_080027f4",
                "param_1": "configParams",
                "param_2": "statusByte",
                "param_3": "modeByte",
                "param_4": "isSingleByte",
                "param_5": "value",
                "param_6": "param",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "check_and_update_status_08002ad8",
            "code": "\nundefined4 checkAndUpdateStatus_08002ad8(uint **array,uint value1,uint value2,int value3)\n\n{\n  int dataOffset;\n  char charValue;\n  uint tempValue;\n  bool isNonZero;\n  \n  do {\n    if ((value1 >> 0x10 & 0xff) == 1) {\n      tempValue = value1 & ~(*array)[5] & 0xffff;\n      isNonZero = tempValue != 0;\n      if (isNonZero) {\n        tempValue = 1;\n      }\n      charValue = (char)tempValue;\n      if (!isNonZero) {\n        charValue = '\\0';\n      }\n    }\n    else {\n      tempValue = value1 & ~(*array)[6] & 0xffff;\n      isNonZero = tempValue != 0;\n      if (isNonZero) {\n        tempValue = 1;\n      }\n      charValue = (char)tempValue;\n      if (!isNonZero) {\n        charValue = '\\0';\n      }\n    }\n    if (charValue == '\\0') {\n      result 0;\n    }\n    if (((*array)[5] & 0x400) == 0x400) {\n      **array = **array | 0x200;\n      (*array)[5] = 0xfffffbff;\n      array[0x10] = (uint *)0x4;\n      array[0xc] = (uint *)0x0;\n      *(undefined *)((int)array + 0x3d) = 0x20;\n      *(undefined *)(array + 0xf) = 0;\n      result 1;\n    }\n  } while ((value2 == 0xffffffff) ||\n          ((value2 != 0 && (dataOffset = get_data_080015a0(), (uint)(dataOffset - value3) <= value2))));\n  array[0xc] = (uint *)0x0;\n  *(undefined *)((int)array + 0x3d) = 0x20;\n  *(undefined *)(array + 0xf) = 0;\n  result 3;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "check_and_update_status_08002ad8",
                "param_1": "array",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "dataOffset",
                "cVar2": "charValue",
                "uVar3": "tempValue",
                "bVar4": "isNonZero",
                "return": "result"
            },
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "entrypoint": "0x08002bb4",
            "current_name": "check_and_configure_08002bb4",
            "code": "\nundefined4 check_and_configure_08002bb4(int *ptr_array,uint data_length,int offset)\n\n{\n  int status;\n  \n  while( true ) {\n    if ((*(uint *)(*ptr_array + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    status = check_status_and_configure(ptr_array);\n    if (status != 0) break;\n    if ((data_length != 0xffffffff) &&\n       ((data_length == 0 || (status = get_data_080015a0(), data_length < (uint)(status - offset))))) {\n      ptr_array[16] = ptr_array[16] | 0x20;\n      ptr_array[12] = 0;\n      *(undefined *)((int)ptr_array + 0x3d) = 0x20;\n      *(undefined *)(ptr_array + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002bb4": "check_and_configure_08002bb4",
                "param_1": "ptr_array",
                "param_2": "data_length",
                "param_3": "offset",
                "iVar1": "status",
                "check_status_and_configure_08002d3c": "check_status_and_configure",
                "param_1[0x10]": "ptr_array[16]",
                "param_1[0xc]": "ptr_array[12]"
            },
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "entrypoint": "0x08002c2e",
            "current_name": "check_and_configure_08002c2e",
            "code": "\nundefined4 check_and_configure_08002c2e(int *status_array,uint limit,int offset)\n\n{\n  int status_check_result;\n  \n  while( true ) {\n    if ((*(uint *)(*status_array + 0x14) & 4) == 4) {\n      return 0;\n    }\n    status_check_result = check_status_and_configure_08002d3c(status_array);\n    if (status_check_result != 0) break;\n    if ((limit != 0xffffffff) &&\n       ((limit == 0 || (status_check_result = get_data_080015a0(), limit < (uint)(status_check_result - offset))))) {\n      status_array[0x10] = status_array[0x10] | 0x20;\n      status_array[0xc] = 0;\n      *(undefined *)((int)status_array + 0x3d) = 0x20;\n      *(undefined *)(status_array + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002c2e": "check_and_configure_08002c2e",
                "param_1": "status_array",
                "param_2": "limit",
                "param_3": "offset",
                "iVar1": "status_check_result"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "entrypoint": "0x08002ca8",
            "current_name": "check_flag_validity_08002ca8",
            "code": "\nundefined4 checkFlagValidity_08002ca8(int *flagPtr,uint flagSize,int offset)\n\n{\n  int dataSize;\n  \n  while( true ) {\n    if ((*(uint *)(*flagPtr + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*flagPtr + 0x14) & 0x10) == 0x10) break;\n    if ((flagSize == 0) || (dataSize = getDataSize(), flagSize < (uint)(dataSize - offset))) {\n      flagPtr[0x10] = flagPtr[0x10] | 0x20;\n      *(undefined *)((int)flagPtr + 0x3d) = 0x20;\n      *(undefined *)(flagPtr + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*flagPtr + 0x14) = 0xffffffef;\n  flagPtr[0x10] = 0;\n  flagPtr[0xc] = 0;\n  *(undefined *)((int)flagPtr + 0x3d) = 0x20;\n  *(undefined *)(flagPtr + 0xf) = 0;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002ca8": "check_flag_validity_08002ca8",
                "param_1": "flagPtr",
                "param_2": "flagSize",
                "param_3": "offset",
                "iVar1": "dataSize",
                "get_data_080015a0": "getDataSize"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "entrypoint": "0x08002d3c",
            "current_name": "check_status_and_configure_08002d3c",
            "code": "\nbool checkStatusAndConfigure_08002d3c(int *deviceStatus)\n\n{\n  bool isStatusSet;\n  \n  isStatusSet = (*(uint *)(*deviceStatus + 0x14) & 0x400) == 0x400;\n  if (isStatusSet) {\n    *(undefined4 *)(*deviceStatus + 0x14) = 0xfffffbff;\n    deviceStatus[0x10] = 4;\n    deviceStatus[0xc] = 0;\n    *(undefined *)((int)deviceStatus + 0x3d) = 0x20;\n    *(undefined *)(deviceStatus + 0xf) = 0;\n  }\n  return isStatusSet;\n}\n\n",
            "renaming": {
                "FUN_08002d3c": "check_status_and_configure_08002d3c",
                "param_1": "deviceStatus",
                "bVar1": "isStatusSet"
            },
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "entrypoint": "0x08002d8a",
            "current_name": "FUNC_08002d8a",
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d98": {
            "entrypoint": "0x08002d98",
            "current_name": "check_status_and_change_08002d98",
            "code": "\n\n\nundefined4 checkStatusAndChange_08002d98(uint *status)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  bool isFlagSet;\n  \n  if ((*status & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (status[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (status[1] == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (status[1] == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (status[1] == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (status[1] == 0) {\n        startTime = get_data_080015a0();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = get_data_080015a0();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = get_data_080015a0();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = get_data_080015a0();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*status & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (status[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = status[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (status[4] == 0) {\n      _DAT_42420000 = 0;\n      startTime = get_data_080015a0();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = get_data_080015a0();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTime = get_data_080015a0();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = get_data_080015a0();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = status[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*status & 8) != 0) {\n    if (status[6] == 0) {\n      _DAT_42420480 = 0;\n      startTime = get_data_080015a0();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = get_data_080015a0();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTime = get_data_080015a0();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = get_data_080015a0();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      decrement_to_zero_08003568(1);\n    }\n  }\n  if ((*status & 4) != 0) {\n    isFlagSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = get_data_080015a0();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = get_data_080015a0();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (status[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (status[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (status[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (status[3] == 0) {\n      startTime = get_data_080015a0();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = get_data_080015a0();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = get_data_080015a0();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = get_data_080015a0();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (status[7] == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (status[7] == 2) {\n    _DAT_42420060 = 0;\n    startTime = get_data_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (status[8] == 0x10000) {\n          _DAT_40021004 = status[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = status[9] | status[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        startTime = get_data_080015a0();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          currentTime = get_data_080015a0();\n          if (2 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      currentTime = get_data_080015a0();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTime = get_data_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      currentTime = get_data_080015a0();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002d98": "check_status_and_change_08002d98",
                "param_1": "status",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "bVar4": "isFlagSet"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_08003568",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003260": {
            "entrypoint": "0x08003260",
            "current_name": "calculate_execution_time_08003260",
            "code": "\n\n\nundefined4 calculate_execution_time_08003260(uint *input_parameters,uint execution_time)\n\n{\n  int data_1;\n  int data_2;\n  uint calculated_time;\n  undefined4 result;\n  \n  if (((_DAT_40022000 & 7) < execution_time) &&\n     (_DAT_40022000 = execution_time | _DAT_40022000 & 0xfffffff8, execution_time != (execution_time & 7))) {\n    result = 1;\n  }\n  else {\n    if ((*input_parameters & 2) != 0) {\n      _DAT_40021004 = input_parameters[2] | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*input_parameters & 1) == 0) {\nLAB_08003394:\n      if ((execution_time < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = execution_time | _DAT_40022000 & 0xfffffff8, execution_time != (execution_time & 7))) {\n        result = 1;\n      }\n      else {\n        if ((*input_parameters & 4) != 0) {\n          _DAT_40021004 = input_parameters[3] | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*input_parameters & 8) != 0) {\n          _DAT_40021004 = input_parameters[4] << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        calculated_time = calculate_execution_time_08003260_08003440();\n        DAT_20000018 = calculated_time >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        validate_and_set_param_0800151c(0xf);\n        result = 0;\n      }\n    }\n    else {\n      if (input_parameters[1] == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((input_parameters[1] != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = input_parameters[1] | _DAT_40021004 & 0xfffffffc;\n      data_1 = get_data_080015a0();\n      if (input_parameters[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          data_2 = get_data_080015a0();\n        } while ((uint)(data_2 - data_1) < 0x1389);\n        result = 3;\n      }\n      else if (input_parameters[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          data_2 = get_data_080015a0();\n        } while ((uint)(data_2 - data_1) < 0x1389);\n        result = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          data_2 = get_data_080015a0();\n        } while ((uint)(data_2 - data_1) < 0x1389);\n        result = 3;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003260": "calculate_execution_time_08003260",
                "param_1": "input_parameters",
                "param_2": "execution_time",
                "iVar1": "data_1",
                "iVar2": "data_2",
                "uVar3": "calculated_time",
                "uVar4": "result"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_0800151c",
                "FUN_080015a0",
                "FUN_08003440"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003440": {
            "entrypoint": "0x08003440",
            "current_name": "calculate_execution_time_08003440",
            "code": "\n\n\nuint calculateExecutionTime_08003440(void)\n\n{\n  undefined2 executionMode;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  uint temp1;\n  undefined4 temp2;\n  uint dataRegister;\n  uint executionTime;\n  uint temp3;\n  \n  constant1 = 0x5040302;\n  constant2 = 0x9080706;\n  constant3 = 0xd0c0b0a;\n  constant4 = 0x10100f0e;\n  executionMode = 0x201;\n  temp2 = 0;\n  temp3 = 0;\n  temp1 = 0;\n  executionTime = 0;\n  dataRegister = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    executionTime = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    temp1 = (uint)*(byte *)((int)&constant1 + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      temp3 = temp1 * 4000000;\n    }\n    else {\n      temp3 = (temp1 * 8000000) / (uint)*(byte *)((int)&executionMode + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    executionTime = temp3;\n  }\n  else {\n    executionTime = 8000000;\n  }\n  return executionTime;\n}\n\n",
            "renaming": {
                "FUN_08003440": "calculate_execution_time_08003440",
                "local_30": "executionMode",
                "local_2c": "constant1",
                "uStack_28": "constant2",
                "uStack_24": "constant3",
                "uStack_20": "constant4",
                "local_1c": "temp1",
                "local_18": "temp2",
                "local_14": "dataRegister",
                "local_10": "executionTime",
                "local_c": "temp3"
            },
            "calling": [
                "FUN_08003260"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003504": {
            "entrypoint": "0x08003504",
            "current_name": "get_global_value_08003504",
            "code": "\nundefined4 getGlobalValue_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08003504": "get_global_value_08003504"
            },
            "calling": [
                "FUN_08003518",
                "FUN_080052a0",
                "FUN_08003540"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003518": {
            "entrypoint": "0x08003518",
            "current_name": "shift_value_from_global_08003518",
            "code": "\n\n\nuint shiftValueFromGlobal_08003518(void)\n\n{\n  uint globalValue;\n  \n  globalValue = get_global_value_08003504();\n  return globalValue >> *(shiftAmount *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "renaming": {
                "FUN_08003518": "shift_value_from_global_08003518",
                "uVar1": "globalValue",
                "sbyte": "shiftAmount"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003540": {
            "entrypoint": "0x08003540",
            "current_name": "shift_global_value_08003540",
            "code": "\n\n\nuint shift_global_value_08003540(void)\n\n{\n  uint global_value;\n  \n  global_value = get_global_value_08003504();\n  return global_value >> *(shift_value *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "renaming": {
                "FUN_08003540": "shift_global_value_08003540",
                "uVar1": "global_value",
                "sbyte": "shift_value"
            },
            "calling": [
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003568": {
            "entrypoint": "0x08003568",
            "current_name": "decrement_to_zero_08003568",
            "code": "\nvoid decrementToZero_08003568(int input)\n\n{\n  bool isNotZero;\n  int counter;\n  \n  counter = input * (DAT_20000018 / 8000);\n  do {\n    isNotZero = counter != 0;\n    counter = counter + -1;\n  } while (isNotZero);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003568": "decrement_to_zero_08003568",
                "param_1": "input",
                "local_c": "counter",
                "bVar1": "isNotZero"
            },
            "calling": [
                "FUN_08002d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035a4": {
            "entrypoint": "0x080035a4",
            "current_name": "check_and_update_memory_080035a4",
            "code": "\nundefined4 checkAndUpdateMemory_080035a4(undefined4 *parameter)\n\n{\n  undefined4 result;\n  \n  if (parameter == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)parameter + 0x3d) == '\\0') {\n      *(undefined *)(parameter + 0xf) = 0;\n      FUNC_080035fa(parameter);\n    }\n    *(undefined *)((int)parameter + 0x3d) = 2;\n    updateMemory(*parameter,parameter + 1);\n    *(undefined *)((int)parameter + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080035a4": "check_and_update_memory_080035a4",
                "param_1": "parameter",
                "uVar1": "result",
                "update_memory_08003c94": "updateMemory"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fa": {
            "entrypoint": "0x080035fa",
            "current_name": "FUNC_080035fa",
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "calling": [
                "FUN_080035a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800360c": {
            "entrypoint": "0x0800360c",
            "current_name": "set_flags_and_bitwise_or_0800360c",
            "code": "\nundefined4 setFlagsAndBitwiseOR_0800360c(uint **ptrArray)\n\n{\n  (*ptrArray)[3] = (*ptrArray)[3] | 1;\n  **ptrArray = **ptrArray | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800360c": "set_flags_and_bitwise_or_0800360c",
                "param_1": "ptrArray"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003640": {
            "entrypoint": "0x08003640",
            "current_name": "update_memory_status_08003640",
            "code": "\nundefined4 update_memory_status_08003640(undefined4 *status)\n\n{\n  undefined4 result;\n  \n  if (status == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)status + 0x3d) == '\\0') {\n      *(undefined *)(status + 0xf) = 0;\n      FUNC_08003696(status);\n    }\n    *(undefined *)((int)status + 0x3d) = 2;\n    update_memory(*status,status + 1);\n    *(undefined *)((int)status + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003640": "update_memory_status_08003640",
                "param_1": "status",
                "uVar1": "result",
                "update_memory_08003c94": "update_memory"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003696": {
            "entrypoint": "0x08003696",
            "current_name": "FUNC_08003696",
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "calling": [
                "FUN_08003640"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036a8": {
            "entrypoint": "0x080036a8",
            "current_name": "update_and_set_values_080036a8",
            "code": "\nundefined4 updateAndSetValues_080036a8(uint **ptrArray,undefined4 value)\n\n{\n  update_bit_value_080041ea(*ptrArray,value,1);\n  if (*ptrArray == (uint *)0x40012c00) {\n    (*ptrArray)[0x11] = (*ptrArray)[0x11] | 0x8000;\n  }\n  **ptrArray = **ptrArray | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036a8": "update_and_set_values_080036a8",
                "param_1": "ptrArray",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080041ea"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f8": {
            "entrypoint": "0x080036f8",
            "current_name": "process_flags_080036f8",
            "code": "\nvoid process_flags_080036f8(int *flag_array)\n\n{\n  if (((*(uint *)(*flag_array + 0x10) & 2) == 2) && ((*(uint *)(*flag_array + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*flag_array + 0x10) = 0xfffffffd;\n    *(undefined *)(flag_array + 7) = 1;\n    if ((*(uint *)(*flag_array + 0x18) & 3) == 0) {\n      FUNC_08003c4a(flag_array);\n      FUNC_08003c6e(flag_array);\n    }\n    else {\n      FUNC_08003c5c(flag_array);\n    }\n    *(undefined *)(flag_array + 7) = 0;\n  }\n  if (((*(uint *)(*flag_array + 0x10) & 4) == 4) && ((*(uint *)(*flag_array + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*flag_array + 0x10) = 0xfffffffb;\n    *(undefined *)(flag_array + 7) = 2;\n    if ((*(uint *)(*flag_array + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(flag_array);\n      FUNC_08003c6e(flag_array);\n    }\n    else {\n      FUNC_08003c5c(flag_array);\n    }\n    *(undefined *)(flag_array + 7) = 0;\n  }\n  if (((*(uint *)(*flag_array + 0x10) & 8) == 8) && ((*(uint *)(*flag_array + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*flag_array + 0x10) = 0xfffffff7;\n    *(undefined *)(flag_array + 7) = 4;\n    if ((*(uint *)(*flag_array + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(flag_array);\n      FUNC_08003c6e(flag_array);\n    }\n    else {\n      FUNC_08003c5c(flag_array);\n    }\n    *(undefined *)(flag_array + 7) = 0;\n  }\n  if (((*(uint *)(*flag_array + 0x10) & 0x10) == 0x10) && ((*(uint *)(*flag_array + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*flag_array + 0x10) = 0xffffffef;\n    *(undefined *)(flag_array + 7) = 8;\n    if ((*(uint *)(*flag_array + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(flag_array);\n      FUNC_08003c6e(flag_array);\n    }\n    else {\n      FUNC_08003c5c(flag_array);\n    }\n    *(undefined *)(flag_array + 7) = 0;\n  }\n  if (((*(uint *)(*flag_array + 0x10) & 1) == 1) && ((*(uint *)(*flag_array + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*flag_array + 0x10) = 0xfffffffe;\n    process_data(flag_array);\n  }\n  if (((*(uint *)(*flag_array + 0x10) & 0x80) == 0x80) && ((*(uint *)(*flag_array + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*flag_array + 0x10) = 0xffffff7f;\n    FUNC_08004378(flag_array);\n  }\n  if (((*(uint *)(*flag_array + 0x10) & 0x40) == 0x40) && ((*(uint *)(*flag_array + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*flag_array + 0x10) = 0xffffffbf;\n    FUNC_08003c80(flag_array);\n  }\n  if (((*(uint *)(*flag_array + 0x10) & 0x20) == 0x20) && ((*(uint *)(*flag_array + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*flag_array + 0x10) = 0xffffffdf;\n    FUNC_08004366(flag_array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f8": "process_flags_080036f8",
                "param_1": "flag_array",
                "process_data_08004f78": "process_data"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_08004f78",
                "FUN_08003c6e",
                "FUN_08004378",
                "FUN_08003c4a",
                "FUN_08004366",
                "FUN_08003c80",
                "FUN_08003c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003908": {
            "entrypoint": "0x08003908",
            "current_name": "update_param_values_08003908",
            "code": "\nundefined4 update_param_values_08003908(int *param_ptr,int param_value,undefined4 action)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(param_ptr + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(param_ptr + 0xf) = 1;\n    *(undefined *)((int)param_ptr + 0x3d) = 2;\n    switch(action) {\n    case 0:\n      update_param_values_08003908_08003d60(*param_ptr,param_value);\n      *(uint *)(*param_ptr + 0x18) = *(uint *)(*param_ptr + 0x18) | 8;\n      *(uint *)(*param_ptr + 0x18) = *(uint *)(*param_ptr + 0x18) & 0xfffffffb;\n      *(uint *)(*param_ptr + 0x18) = *(uint *)(param_value + 0x10) | *(uint *)(*param_ptr + 0x18);\n      break;\n    case 4:\n      update_config_08003e38(*param_ptr,param_value);\n      *(uint *)(*param_ptr + 0x18) = *(uint *)(*param_ptr + 0x18) | 0x800;\n      *(uint *)(*param_ptr + 0x18) = *(uint *)(*param_ptr + 0x18) & 0xfffffbff;\n      *(uint *)(*param_ptr + 0x18) = *(int *)(param_value + 0x10) << 8 | *(uint *)(*param_ptr + 0x18);\n      break;\n    case 8:\n      update_data_08003f18(*param_ptr,param_value);\n      *(uint *)(*param_ptr + 0x1c) = *(uint *)(*param_ptr + 0x1c) | 8;\n      *(uint *)(*param_ptr + 0x1c) = *(uint *)(*param_ptr + 0x1c) & 0xfffffffb;\n      *(uint *)(*param_ptr + 0x1c) = *(uint *)(param_value + 0x10) | *(uint *)(*param_ptr + 0x1c);\n      break;\n    case 0xc:\n      update_parameters_08003ff8(*param_ptr,param_value);\n      *(uint *)(*param_ptr + 0x1c) = *(uint *)(*param_ptr + 0x1c) | 0x800;\n      *(uint *)(*param_ptr + 0x1c) = *(uint *)(*param_ptr + 0x1c) & 0xfffffbff;\n      *(uint *)(*param_ptr + 0x1c) = *(int *)(param_value + 0x10) << 8 | *(uint *)(*param_ptr + 0x1c);\n    }\n    *(undefined *)((int)param_ptr + 0x3d) = 1;\n    *(undefined *)(param_ptr + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003908": "update_param_values_08003908",
                "param_1": "param_ptr",
                "param_2": "param_value",
                "param_3": "action",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003ff8",
                "FUN_08003d60",
                "FUN_08003f18",
                "FUN_08003e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a94": {
            "entrypoint": "0x08003a94",
            "current_name": "update_memory_function_08003a94",
            "code": "\nundefined4 updateMemoryFunction_08003a94(int *memoryPointer,uint *updateParameterArray)\n\n{\n  undefined4 returnValue;\n  uint updateValue;\n  \n  if (*(char *)(memoryPointer + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(memoryPointer + 0xf) = 1;\n    *(undefined *)((int)memoryPointer + 0x3d) = 2;\n    *(uint *)(*memoryPointer + 8) = *(uint *)(*memoryPointer + 8) & 0xffff0088;\n    updateValue = *updateParameterArray;\n    if (updateValue == 0x40) {\n      update_parameter_080040a0(*memoryPointer,updateValue2,updateValue4);\n      update_memory_value_0800416a(*memoryPointer,0x40);\n    }\n    else if (updateValue < 0x41) {\n      if (updateValue == 0x10) {\n        update_memory_value_0800416a(*memoryPointer,0x10);\n      }\n      else if (updateValue < 0x11) {\n        if (updateValue == 0) {\n          update_memory_value_0800416a(*memoryPointer,0);\n        }\n      }\n      else if (updateValue == 0x20) {\n        update_memory_value_0800416a(*memoryPointer,0x20);\n      }\n      else if (updateValue == 0x30) {\n        update_memory_value_0800416a(*memoryPointer,0x30);\n      }\n    }\n    else if (updateValue == 0x70) {\n      update_parameter_value_080041a8(*memoryPointer,updateValue3,updateValue2,updateValue4);\n      *(uint *)(*memoryPointer + 8) = *(uint *)(*memoryPointer + 8) & 0xffffff88 | 0x77;\n    }\n    else if (updateValue < 0x71) {\n      if (updateValue == 0x50) {\n        update_parameter_080040a0(*memoryPointer,updateValue2,updateValue4);\n        update_memory_value_0800416a(*memoryPointer,0x50);\n      }\n      else if (updateValue == 0x60) {\n        clear_bit_and_shift_08004104(*memoryPointer,updateValue2,updateValue4);\n        update_memory_value_0800416a(*memoryPointer,0x60);\n      }\n    }\n    else if (updateValue == 0x1000) {\n      *(uint *)(*memoryPointer + 8) = *(uint *)(*memoryPointer + 8) & 0xfffffff8;\n    }\n    else if (updateValue == 0x2000) {\n      update_parameter_value_080041a8(*memoryPointer,updateValue3,updateValue2,updateValue4);\n      *(uint *)(*memoryPointer + 8) = *(uint *)(*memoryPointer + 8) | 0x4000;\n    }\n    *(undefined *)((int)memoryPointer + 0x3d) = 1;\n    *(undefined *)(memoryPointer + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003a94": "update_memory_function_08003a94",
                "param_1": "memoryPointer",
                "param_2": "updateParameterArray",
                "uVar1": "returnValue",
                "uVar2": "updateValue",
                "param_2[1]": "updateValue2",
                "param_2[2]": "updateValue3",
                "param_2[3]": "updateValue4"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_0800416a",
                "FUN_080041a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "entrypoint": "0x08003c4a",
            "current_name": "FUNC_08003c4a",
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c5c": {
            "entrypoint": "0x08003c5c",
            "current_name": "FUNC_08003c5c",
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c6e": {
            "entrypoint": "0x08003c6e",
            "current_name": "FUNC_08003c6e",
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c80": {
            "entrypoint": "0x08003c80",
            "current_name": "FUNC_08003c80",
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c94": {
            "entrypoint": "0x08003c94",
            "current_name": "update_memory_08003c94",
            "code": "\nvoid updateMemory_08003c94(uint *memoryPtr,uint *dataPtr)\n\n{\n  uint oldMemoryValue;\n  \n  oldMemoryValue = *memoryPtr;\n  if ((((memoryPtr == (uint *)0x40012c00) || (memoryPtr == (uint *)0x40000000)) ||\n      (memoryPtr == (uint *)0x40000400)) || (memoryPtr == (uint *)0x40000800)) {\n    oldMemoryValue = dataPtr[1] | oldMemoryValue & 0xffffff8f;\n  }\n  if (((memoryPtr == (uint *)0x40012c00) || (memoryPtr == (uint *)0x40000000)) ||\n     ((memoryPtr == (uint *)0x40000400 || (memoryPtr == (uint *)0x40000800)))) {\n    oldMemoryValue = dataPtr[3] | oldMemoryValue & 0xfffffcff;\n  }\n  *memoryPtr = dataPtr[5] | oldMemoryValue & 0xffffff7f;\n  memoryPtr[0xb] = dataPtr[2];\n  memoryPtr[10] = *dataPtr;\n  if (memoryPtr == (uint *)0x40012c00) {\n    updatedValue = dataPtr[4];\n  }\n  memoryPtr[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c94": "update_memory_08003c94",
                "param_1": "memoryPtr",
                "param_2": "dataPtr",
                "local_c": "oldMemoryValue",
                "uRam40012c30": "updatedValue"
            },
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d60": {
            "entrypoint": "0x08003d60",
            "current_name": "update_param_values_08003d60",
            "code": "\nvoid updateParamValues_08003d60(int functionPointer,uint *paramArray)\n\n{\n  uint value1;\n  uint value2;\n  uint localValue;\n  \n  *(uint *)(functionPointer + 0x20) = *(uint *)(functionPointer + 0x20) & 0xfffffffe;\n  localValue = *(uint *)(functionPointer + 4);\n  value1 = *paramArray;\n  value2 = paramArray[2] | *(uint *)(functionPointer + 0x20) & 0xfffffffd;\n  if (functionPointer == 0x40012c00) {\n    value2 = (paramArray[3] | value2 & 0xfffffff7) & 0xfffffffb;\n    localValue = paramArray[6] | paramArray[5] | localValue & 0xfffffcff;\n  }\n  *(uint *)(functionPointer + 4) = localValue;\n  *(uint *)(functionPointer + 0x18) = value1 | *(uint *)(functionPointer + 0x18) & 0xffffff8c;\n  *(uint *)(functionPointer + 0x34) = paramArray[1];\n  *(uint *)(functionPointer + 0x20) = value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003d60": "update_param_values_08003d60",
                "param_1": "functionPointer",
                "param_2": "paramArray",
                "uVar1": "value1",
                "uVar2": "value2",
                "local_10": "localValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e38": {
            "entrypoint": "0x08003e38",
            "current_name": "update_config_08003e38",
            "code": "\nvoid updateConfig_08003e38(int configAddress,int *configData)\n\n{\n  int tempVar;\n  uint updatedValue;\n  uint localValue;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xffffffef;\n  localValue = *(uint *)(configAddress + 4);\n  tempVar = *configData;\n  updatedValue = configData[2] << 4 | *(uint *)(configAddress + 0x20) & 0xffffffdf;\n  if (configAddress == 0x40012c00) {\n    updatedValue = (configData[3] << 4 | updatedValue & 0xffffff7f) & 0xffffffbf;\n    localValue = configData[6] << 2 | configData[5] << 2 | localValue & 0xfffff3ff;\n  }\n  *(uint *)(configAddress + 4) = localValue;\n  *(uint *)(configAddress + 0x18) = tempVar << 8 | *(uint *)(configAddress + 0x18) & 0xffff8cff;\n  *(int *)(configAddress + 0x38) = configData[1];\n  *(uint *)(configAddress + 0x20) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e38": "update_config_08003e38",
                "param_1": "configAddress",
                "param_2": "configData",
                "iVar1": "tempVar",
                "uVar2": "updatedValue",
                "local_10": "localValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "update_data_08003f18",
            "code": "\nvoid updateData_08003f18(int dataAddress,uint *data)\n\n{\n  uint newValue;\n  uint modifiedValue;\n  uint tempValue;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xfffffeff;\n  tempValue = *(uint *)(dataAddress + 4);\n  newValue = *data;\n  modifiedValue = data[2] << 8 | *(uint *)(dataAddress + 0x20) & 0xfffffdff;\n  if (dataAddress == 0x40012c00) {\n    modifiedValue = (data[3] << 8 | modifiedValue & 0xfffff7ff) & 0xfffffbff;\n    tempValue = data[6] << 4 | data[5] << 4 | tempValue & 0xffffcfff;\n  }\n  *(uint *)(dataAddress + 4) = tempValue;\n  *(uint *)(dataAddress + 0x1c) = newValue | *(uint *)(dataAddress + 0x1c) & 0xffffff8c;\n  *(uint *)(dataAddress + 0x3c) = data[1];\n  *(uint *)(dataAddress + 0x20) = modifiedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "update_data_08003f18",
                "param_1": "dataAddress",
                "param_2": "data",
                "uVar1": "newValue",
                "uVar2": "modifiedValue",
                "local_10": "tempValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "entrypoint": "0x08003ff8",
            "current_name": "update_parameters_08003ff8",
            "code": "\nvoid updateParameters_08003ff8(int baseAddress,int *parameters)\n\n{\n  int value1;\n  int value2;\n  uint value3;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffefff;\n  value3 = *(uint *)(baseAddress + 4);\n  value1 = *parameters;\n  value2 = parameters[2];\n  if (baseAddress == 0x40012c00) {\n    value3 = parameters[5] << 6 | value3 & 0xffffbfff;\n  }\n  *(uint *)(baseAddress + 4) = value3;\n  *(uint *)(baseAddress + 0x1c) = value1 << 8 | *(uint *)(baseAddress + 0x1c) & 0xffff8cff;\n  *(int *)(baseAddress + 0x40) = parameters[1];\n  *(uint *)(baseAddress + 0x20) = value2 << 0xc | *(uint *)(baseAddress + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff8": "update_parameters_08003ff8",
                "param_1": "baseAddress",
                "param_2": "parameters",
                "iVar1": "value1",
                "iVar2": "value2",
                "local_c": "value3"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040a0": {
            "entrypoint": "0x080040a0",
            "current_name": "update_parameter_080040a0",
            "code": "\nvoid updateParameter_080040a0(int functionAddress,uint newValue,int operand)\n\n{\n  uint previousValue;\n  \n  previousValue = *(uint *)(functionAddress + 0x20);\n  *(uint *)(functionAddress + 0x20) = *(uint *)(functionAddress + 0x20) & 0xfffffffe;\n  *(uint *)(functionAddress + 0x18) = operand << 4 | *(uint *)(functionAddress + 0x18) & 0xffffff0f;\n  *(uint *)(functionAddress + 0x20) = newValue | previousValue & 0xfffffff5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040a0": "update_parameter_080040a0",
                "param_1": "functionAddress",
                "param_2": "newValue",
                "param_3": "operand",
                "uVar1": "previousValue"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004104": {
            "entrypoint": "0x08004104",
            "current_name": "clear_bit_and_shift_08004104",
            "code": "\nvoid clearBitAndShift_08004104(int ptr,int newValue,int bitValue)\n\n{\n  *(uint *)(ptr + 0x20) = *(uint *)(ptr + 0x20) & 0xffffffef;\n  *(uint *)(ptr + 0x18) = bitValue << 0xc | *(uint *)(ptr + 0x18) & 0xffff0fff;\n  *(uint *)(ptr + 0x20) = newValue << 4 | *(uint *)(ptr + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004104": "clear_bit_and_shift_08004104",
                "param_1": "ptr",
                "param_2": "newValue",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800416a": {
            "entrypoint": "0x0800416a",
            "current_name": "update_memory_value_0800416a",
            "code": "\nvoid updateMemoryValue_0800416a(int memoryAddress,ushort newValue)\n\n{\n  *(uint *)(memoryAddress + 8) = *(uint *)(memoryAddress + 8) & 0xffffff8f | (uint)(newValue | 7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800416a": "update_memory_value_0800416a",
                "param_1": "memoryAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a8": {
            "entrypoint": "0x080041a8",
            "current_name": "update_parameter_value_080041a8",
            "code": "\nvoid updateParameterValue_080041a8(int baseAddress,uint value1,uint value2,int value3)\n\n{\n  *(uint *)(baseAddress + 8) = value1 | value3 << 8 | value2 | *(uint *)(baseAddress + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a8": "update_parameter_value_080041a8",
                "param_1": "baseAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ea": {
            "entrypoint": "0x080041ea",
            "current_name": "update_bit_value_080041ea",
            "code": "\nvoid updateBitValue_080041ea(int address,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041ea": "update_bit_value_080041ea",
                "param_1": "address",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_080036a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800422e": {
            "entrypoint": "0x0800422e",
            "current_name": "update_configuration_0800422e",
            "code": "\nundefined4 updateConfiguration_0800422e(int *config,uint *data)\n\n{\n  undefined4 status;\n  \n  if (*(char *)(config + 0xf) == '\\x01') {\n    status = 2;\n  }\n  else {\n    *(undefined *)(config + 0xf) = 1;\n    *(uint *)(*config + 0x44) =\n         data[6] |\n         (data[6] |\n         (data[5] |\n         (data[4] |\n         (*data | (data[1] | (data[2] | data[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(config + 0xf) = 0;\n    status = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_0800422e": "update_configuration_0800422e",
                "param_1": "config",
                "param_2": "data",
                "uVar1": "status"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042de": {
            "entrypoint": "0x080042de",
            "current_name": "update_flags_and_values_080042de",
            "code": "\nundefined4 updateFlagsAndValues_080042de(int *ptr1,uint *ptr2)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(ptr1 + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(ptr1 + 0xf) = 1;\n    *(undefined *)((int)ptr1 + 0x3d) = 2;\n    *(uint *)(*ptr1 + 4) = *(uint *)(*ptr1 + 4) & 0xffffff8f;\n    *(uint *)(*ptr1 + 4) = *ptr2 | *(uint *)(*ptr1 + 4);\n    *(uint *)(*ptr1 + 8) = *(uint *)(*ptr1 + 8) & 0xffffff7f;\n    *(uint *)(*ptr1 + 8) = ptr2[1] | *(uint *)(*ptr1 + 8);\n    *(undefined *)((int)ptr1 + 0x3d) = 1;\n    *(undefined *)(ptr1 + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080042de": "update_flags_and_values_080042de",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004366": {
            "entrypoint": "0x08004366",
            "current_name": "FUNC_08004366",
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004378": {
            "entrypoint": "0x08004378",
            "current_name": "FUNC_08004378",
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800438a": {
            "entrypoint": "0x0800438a",
            "current_name": "initialize_data_structure_0800438a",
            "code": "\nundefined4 initializeDataStructure_0800438a(int *dataStructure)\n\n{\n  undefined4 returnValue;\n  \n  if (dataStructure == (int *)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)dataStructure + 0x39) == '\\0') {\n      *(undefined *)(dataStructure + 0xe) = 0;\n      FUNC_08004424(dataStructure);\n    }\n    *(undefined *)((int)dataStructure + 0x39) = 0x24;\n    *(uint *)(*dataStructure + 0xc) = *(uint *)(*dataStructure + 0xc) & 0xffffdfff;\n    calculate_checksum_080046ec(dataStructure);\n    *(uint *)(*dataStructure + 0x10) = *(uint *)(*dataStructure + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataStructure + 0x14) = *(uint *)(*dataStructure + 0x14) & 0xffffffd5;\n    *(uint *)(*dataStructure + 0xc) = *(uint *)(*dataStructure + 0xc) | 0x2000;\n    dataStructure[0xf] = 0;\n    *(undefined *)((int)dataStructure + 0x39) = 0x20;\n    *(undefined *)((int)dataStructure + 0x3a) = 0x20;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800438a": "initialize_data_structure_0800438a",
                "param_1": "dataStructure",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08005598"
            ],
            "called": [
                "FUN_08004424",
                "FUN_080046ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004424": {
            "entrypoint": "0x08004424",
            "current_name": "FUNC_08004424",
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004436": {
            "entrypoint": "0x08004436",
            "current_name": "process_data_08004436",
            "code": "\nundefined4 processData_08004436(uint **data,ushort *buffer,short bufferLength,uint maxIterations)\n\n{\n  int result;\n  int iterationResult;\n  undefined4 returnValue;\n  ushort *currentChar;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if ((buffer == (ushort *)0x0) || (bufferLength == 0)) {\n      returnValue = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = (uint *)0x0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      result = get_data_080015a0();\n      *(short *)(data + 9) = bufferLength;\n      *(short *)((int)data + 0x26) = bufferLength;\n      currentChar = buffer;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == (uint *)0x1000) {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              iterationResult = 0;\n              goto LAB_0800454c;\n            }\n          } while ((maxIterations == 0xffffffff) ||\n                  ((maxIterations != 0 && (iterationResult = get_data_080015a0(), (uint)(iterationResult - result) <= maxIterations))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          iterationResult = 3;\nLAB_0800454c:\n          if (iterationResult != 0) {\n            return 3;\n          }\n          (*data)[1] = *currentChar & 0x1ff;\n          if (data[4] == (uint *)0x0) {\n            currentChar = currentChar + 1;\n          }\n          else {\n            currentChar = (ushort *)((int)currentChar + 1);\n          }\n        }\n        else {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              iterationResult = 0;\n              goto LAB_08004614;\n            }\n          } while ((maxIterations == 0xffffffff) ||\n                  ((maxIterations != 0 && (iterationResult = get_data_080015a0(), (uint)(iterationResult - result) <= maxIterations))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          iterationResult = 3;\nLAB_08004614:\n          if (iterationResult != 0) {\n            return 3;\n          }\n          (*data)[1] = (uint)*(byte *)currentChar;\n          currentChar = (ushort *)((int)currentChar + 1);\n        }\n      }\n      do {\n        if ((**data & 0x40) == 0x40) {\n          result = 0;\n          goto LAB_080046c6;\n        }\n      } while ((maxIterations == 0xffffffff) ||\n              ((maxIterations != 0 && (iterationResult = get_data_080015a0(), (uint)(iterationResult - result) <= maxIterations))));\n      (*data)[3] = (*data)[3] & 0xfffffe5f;\n      (*data)[5] = (*data)[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 0x20;\n      *(undefined *)((int)data + 0x3a) = 0x20;\n      *(undefined *)(data + 0xe) = 0;\n      result = 3;\nLAB_080046c6:\n      if (result == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004436": "process_data_08004436",
                "param_1": "data",
                "param_2": "buffer",
                "param_3": "bufferLength",
                "param_4": "maxIterations",
                "iVar1": "result",
                "iVar2": "iterationResult",
                "uVar3": "returnValue",
                "local_58": "currentChar"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046ec": {
            "entrypoint": "0x080046ec",
            "current_name": "calculate_checksum_080046ec",
            "code": "\nvoid calculateChecksum_080046ec(int *paramArray)\n\n{\n  ulonglong tempVar1;\n  int tempVar2;\n  int tempVar3;\n  uint tempVar4;\n  int tempVar5;\n  undefined8 shiftedValue;\n  \n  *(uint *)(*paramArray + 0x10) = paramArray[3] | *(uint *)(*paramArray + 0x10) & 0xffffcfff;\n  *(uint *)(*paramArray + 0xc) =\n       *(uint *)(*paramArray + 0xc) & 0xffffe9f3 | paramArray[5] | paramArray[2] | paramArray[4];\n  *(uint *)(*paramArray + 0x14) = paramArray[6] | *(uint *)(*paramArray + 0x14) & 0xfffffcff;\n  if (*paramArray == 0x40013800) {\n    shiftedValue = calculateShiftedValue1();\n    tempVar1 = (ulonglong)(uint)((int)shiftedValue * 0x19) / (ulonglong)(uint)(paramArray[1] << 2);\n    tempVar2 = calculateShiftedValue1((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),(int)(tempVar1 * 0x51eb851f));\n    tempVar3 = paramArray[1];\n    shiftedValue = calculateShiftedValue1();\n    tempVar4 = ((uint)(tempVar2 * 0x19) / (uint)(tempVar3 << 2) +\n            (int)(((ulonglong)(uint)((int)shiftedValue * 0x19) / (ulonglong)(uint)(paramArray[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    tempVar2 = calculateShiftedValue1((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),tempVar4 * 0x51eb851f);\n    tempVar5 = paramArray[1];\n    tempVar3 = calculateShiftedValue1();\n    *(uint *)(*paramArray + 8) =\n         ((((uint)(tempVar2 * 0x19) / (uint)(tempVar5 << 2) +\n           (int)(((ulonglong)(uint)(tempVar3 * 0x19) / (ulonglong)(uint)(paramArray[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(tempVar1 / 100) * 0x10 + (tempVar4 / 100 & 0xf0);\n  }\n  else {\n    shiftedValue = calculateShiftedValue2();\n    tempVar1 = (ulonglong)(uint)((int)shiftedValue * 0x19) / (ulonglong)(uint)(paramArray[1] << 2);\n    tempVar2 = calculateShiftedValue2((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),(int)(tempVar1 * 0x51eb851f));\n    tempVar3 = paramArray[1];\n    shiftedValue = calculateShiftedValue2();\n    tempVar4 = ((uint)(tempVar2 * 0x19) / (uint)(tempVar3 << 2) +\n            (int)(((ulonglong)(uint)((int)shiftedValue * 0x19) / (ulonglong)(uint)(paramArray[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    tempVar2 = calculateShiftedValue2((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20),tempVar4 * 0x51eb851f);\n    tempVar5 = paramArray[1];\n    tempVar3 = calculateShiftedValue2();\n    *(uint *)(*paramArray + 8) =\n         ((((uint)(tempVar2 * 0x19) / (uint)(tempVar5 << 2) +\n           (int)(((ulonglong)(uint)(tempVar3 * 0x19) / (ulonglong)(uint)(paramArray[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(tempVar1 / 100) * 0x10 + (tempVar4 / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046ec": "calculate_checksum_080046ec",
                "param_1": "paramArray",
                "uVar1": "tempVar1",
                "iVar2": "tempVar2",
                "iVar3": "tempVar3",
                "uVar4": "tempVar4",
                "iVar5": "tempVar5",
                "uVar6": "shiftedValue",
                "shift_global_value_08003540": "calculateShiftedValue1",
                "shift_value_from_global_08003518": "calculateShiftedValue2"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08003540"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800491c": {
            "entrypoint": "0x0800491c",
            "current_name": "initialize_parameters_0800491c",
            "code": "\nvoid initializeParameters_0800491c(undefined4 *parameters)\n\n{\n  undefined flag1;\n  undefined flag2;\n  undefined buffer [5];\n  \n  flag1 = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&flag1,1);\n  flag2 = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&flag2,1);\n  buffer[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,buffer,1);\n  *parameters = 0;\n  parameters[1] = 0;\n  parameters[2] = 0;\n  parameters[3] = 0;\n  parameters[4] = 0;\n  parameters[5] = 0;\n  parameters[6] = 0;\n  parameters[7] = 0;\n  parameters[8] = 0;\n  parameters[9] = 0;\n  parameters[10] = 0;\n  calculateFloatValues(parameters);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800491c": "initialize_parameters_0800491c",
                "param_1": "parameters",
                "local_13": "flag1",
                "local_12": "flag2",
                "local_11": "buffer",
                "calculate_float_values_080049cc": "calculateFloatValues"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080049cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049cc": {
            "entrypoint": "0x080049cc",
            "current_name": "calculate_float_values_080049cc",
            "code": "\nvoid calculateFloatValues_080049cc(int input)\n\n{\n  undefined4 result;\n  undefined4 value2;\n  undefined4 value1;\n  undefined4 timestamp;\n  int count;\n  int index;\n  undefined4 sum1;\n  undefined4 sum2;\n  undefined4 sum3;\n  undefined4 sum4;\n  \n  count = 1;\n  sum4 = 0;\n  sum3 = 0;\n  sum2 = 0;\n  sum1 = 0;\n  timestamp = (*DAT_20000a50)();\n  index = 0;\n  while( true ) {\n    if (count <= index) break;\n    value1 = 0;\n    value2 = 0;\n    extract_unsigned_values_08004ae0(input);\n    perform_calculation_08004d78(input,&value1,&value2);\n    sum2 = calculate_float_08000aa8(sum2,value1);\n    sum1 = calculate_float_08000aa8(sum1,value2);\n    sum4 = calculate_float_08000aa8(sum4,*(undefined4 *)(input + 0x10));\n    sum3 = calculate_float_08000aa8(sum3,*(undefined4 *)(input + 0x14));\n    timestamp = (*DAT_20000a50)();\n    index = index + 1;\n  }\n  result = calculate_unsigned_value_08000c10(count);\n  result = floating_point_conversion_08000e20(sum4,result);\n  *(undefined4 *)(input + 0x1c) = result;\n  result = calculate_unsigned_value_08000c10(count);\n  result = floating_point_conversion_08000e20(sum3,result);\n  *(undefined4 *)(input + 0x20) = result;\n  result = calculate_unsigned_value_08000c10(count);\n  result = floating_point_conversion_08000e20(sum2,result);\n  *(undefined4 *)(input + 0x24) = result;\n  result = calculate_unsigned_value_08000c10(count);\n  result = floating_point_conversion_08000e20(sum1,result);\n  *(undefined4 *)(input + 0x28) = result;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049cc": "calculate_float_values_080049cc",
                "param_1": "input",
                "uVar1": "result",
                "local_2c": "value2",
                "local_28": "value1",
                "local_24": "timestamp",
                "local_20": "count",
                "local_1c": "index",
                "local_18": "sum1",
                "local_14": "sum2",
                "local_10": "sum3",
                "local_c": "sum4"
            },
            "calling": [
                "FUN_0800491c"
            ],
            "called": [
                "FUN_08000e20",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08004d78",
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "entrypoint": "0x08004ae0",
            "current_name": "extract_unsigned_values_08004ae0",
            "code": "\nvoid extract_unsigned_values_08004ae0(undefined4 *output_values)\n\n{\n  undefined4 uVar1;\n  undefined first_byte;\n  undefined second_byte;\n  undefined third_byte;\n  undefined fourth_byte;\n  undefined fifth_byte;\n  undefined sixth_byte;\n  undefined seventh_byte;\n  undefined eighth_byte;\n  undefined ninth_byte;\n  undefined tenth_byte;\n  undefined eleventh_byte;\n  undefined twelfth_byte;\n  undefined thirteenth_byte;\n  undefined fourteenth_byte;\n  short first_short;\n  short second_short;\n  short third_short;\n  short fourth_short;\n  short fifth_short;\n  short sixth_short;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&first_byte,0xe);\n  sixth_short = CONCAT11(third_byte,fourth_byte);\n  fifth_short = CONCAT11(fifth_byte,sixth_byte);\n  fourth_short = CONCAT11(seventh_byte,eighth_byte);\n  third_short = CONCAT11(ninth_byte,tenth_byte);\n  second_short = CONCAT11(eleventh_byte,twelfth_byte);\n  first_short = CONCAT11(thirteenth_byte,fourteenth_byte);\n  uVar1 = calculated_unsigned_value((int)CONCAT11(first_byte,second_byte));\n  *output_values = uVar1;\n  uVar1 = calculated_unsigned_value((int)sixth_short);\n  output_values[1] = uVar1;\n  uVar1 = calculated_unsigned_value((int)fifth_short);\n  output_values[2] = uVar1;\n  uVar1 = calculated_unsigned_value((int)fourth_short);\n  output_values[3] = uVar1;\n  uVar1 = calculated_unsigned_value((int)third_short);\n  output_values[4] = uVar1;\n  uVar1 = calculated_unsigned_value((int)second_short);\n  output_values[5] = uVar1;\n  uVar1 = calculated_unsigned_value((int)first_short);\n  output_values[6] = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ae0": "extract_unsigned_values_08004ae0",
                "param_1": "output_values",
                "local_2c": "first_byte",
                "local_2b": "second_byte",
                "local_2a": "third_byte",
                "local_29": "fourth_byte",
                "local_28": "fifth_byte",
                "local_27": "sixth_byte",
                "local_26": "seventh_byte",
                "local_25": "eighth_byte",
                "local_24": "ninth_byte",
                "local_23": "tenth_byte",
                "local_22": "eleventh_byte",
                "local_21": "twelfth_byte",
                "local_20": "thirteenth_byte",
                "local_1f": "fourteenth_byte",
                "local_1e": "first_short",
                "local_1c": "second_short",
                "local_1a": "third_short",
                "local_18": "fourth_short",
                "local_16": "fifth_short",
                "local_14": "sixth_short",
                "calculate_unsigned_value_08000c10": "calculated_unsigned_value"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "called": [
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "entrypoint": "0x08004bd8",
            "current_name": "calculate_output_08004bd8",
            "code": "\nvoid calculate_output_08004bd8(int input_parameter,undefined4 *output_parameter)\n\n{\n  undefined4 calculation_result1;\n  undefined8 calculation_result2;\n  undefined8 calculation_result3;\n  \n  calculation_result1 = perform_calculation_08000aa4(*(undefined4 *)(input_parameter + 0x10),*(undefined4 *)(input_parameter + 0x1c));\n  calculation_result2 = bitwise_operation_08000418(DAT_200009e4);\n  calculation_result3 = bitwise_operation_08000418(calculation_result1);\n  calculation_result3 = calculate_shifted_result_080004c8((int)calculation_result3,(int)((ulonglong)calculation_result3 >> 0x20),0x83f5c366,0x3f340215);\n  calculation_result2 = calculate_extended_value_0800015c((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),(int)calculation_result3,\n                       (int)((ulonglong)calculation_result3 >> 0x20));\n  DAT_200009e4 = calculate_float_080009fc((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20));\n  calculation_result2 = bitwise_operation_08000418(*(undefined4 *)(input_parameter + 4));\n  calculation_result2 = perform_calculation_0800071c((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),0,0x40b00000);\n  calculation_result3 = bitwise_operation_08000418(*(undefined4 *)(input_parameter + 8));\n  calculation_result3 = perform_calculation_0800071c((int)calculation_result3,(int)((ulonglong)calculation_result3 >> 0x20),0,0x40b00000);\n  calculation_result2 = thunk_calculate_output_08004bd8_08005838((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),(int)calculation_result3,\n                             (int)((ulonglong)calculation_result3 >> 0x20));\n  calculation_result2 = calculate_shifted_result_080004c8((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),0,0x40668000);\n  calculation_result2 = perform_calculation_0800071c((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),0x54442d18,0x400921fb);\n  calculation_result3 = bitwise_operation_08000418(*(undefined4 *)(input_parameter + 0x24));\n  calculation_result2 = calculate_08000158((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),(int)calculation_result3,\n                       (int)((ulonglong)calculation_result3 >> 0x20));\n  calculation_result2 = calculate_extended_value_0800015c((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),0,0x40568000);\n  calculation_result1 = calculate_float_080009fc((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    calculation_result2 = bitwise_operation_08000418(DAT_200009e4);\n    calculation_result2 = calculate_shifted_result_080004c8((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),0x9999999a,0x3fe99999);\n    calculation_result3 = bitwise_operation_08000418(calculation_result1);\n    calculation_result3 = calculate_shifted_result_080004c8((int)calculation_result3,(int)((ulonglong)calculation_result3 >> 0x20),0x9999999a,0x3fc99999);\n    calculation_result2 = calculate_extended_value_0800015c((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),(int)calculation_result3,\n                         (int)((ulonglong)calculation_result3 >> 0x20));\n    DAT_200009e4 = calculate_float_080009fc((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = calculation_result1;\n  }\n  *output_parameter = DAT_200009e4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bd8": "calculate_output_08004bd8",
                "param_1": "input_parameter",
                "param_2": "output_parameter",
                "uVar1": "calculation_result1",
                "uVar2": "calculation_result2",
                "uVar3": "calculation_result3"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08000158",
                "FUN_080009fc",
                "thunk_FUN_08005838",
                "FUN_08000418",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_08000aa4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d78": {
            "entrypoint": "0x08004d78",
            "current_name": "perform_calculation_08004d78",
            "code": "\nvoid perform_calculation_08004d78(undefined4 *input_values,undefined4 *output_value_1,undefined4 *output_value_2)\n\n{\n  undefined4 converted_value_1;\n  undefined4 converted_value_2;\n  undefined4 converted_value_3;\n  undefined8 shifted_result;\n  undefined8 second_shifted_result;\n  \n  converted_value_1 = floating_point_conversion_08000e20(*input_values,0x45800000);\n  converted_value_2 = floating_point_conversion_08000e20(input_values[1],0x45800000);\n  converted_value_3 = floating_point_conversion_08000e20(input_values[2],0x45800000);\n  shifted_result = bitwise_operation_08000418(converted_value_2);\n  second_shifted_result = bitwise_operation_08000418(converted_value_3);\n  shifted_result = thunk_calculate_output_08005838((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20),(int)second_shifted_result,\n                             (int)((ulonglong)second_shifted_result >> 0x20));\n  shifted_result = calculate_shifted_result_080004c8((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20),0,0x40668000);\n  shifted_result = perform_calculation_08004d78_0800071c((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20),0x54442d18,0x400921fb);\n  converted_value_2 = calculate_float_080009fc((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n  shifted_result = bitwise_operation_08000418(converted_value_1);\n  second_shifted_result = bitwise_operation_08000418(converted_value_3);\n  shifted_result = thunk_calculate_output_08005838((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20),(int)second_shifted_result,\n                             (int)((ulonglong)second_shifted_result >> 0x20));\n  shifted_result = calculate_shifted_result_080004c8((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20),0,0x40668000);\n  shifted_result = perform_calculation_08004d78_0800071c((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20),0x54442d18,0x400921fb);\n  converted_value_1 = calculate_float_080009fc((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n  *output_value_1 = converted_value_2;\n  *output_value_2 = converted_value_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d78": "perform_calculation_08004d78",
                "param_1": "input_values",
                "param_2": "output_value_1",
                "param_3": "output_value_2",
                "uVar1": "converted_value_1",
                "uVar2": "converted_value_2",
                "uVar3": "converted_value_3",
                "uVar4": "shifted_result",
                "uVar5": "second_shifted_result"
            },
            "calling": [
                "FUN_080049cc"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000e20",
                "thunk_FUN_08005838",
                "FUN_08000418",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "entrypoint": "0x08004e6c",
            "current_name": "invoke_software_interrupt_08004e6c",
            "code": "\nvoid invoke_software_interrupt_08004e6c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e6c": "invoke_software_interrupt_08004e6c"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "execute_interrupt_08004e74",
            "code": "\nundefined4 execute_interrupt_08004e74(undefined4 value)\n\n{\n  undefined4 result;\n  \n  if (DAT_200009f0 == 0) {\n    result = invoke_software_interrupt_08004e6c(1,value,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "execute_interrupt_08004e74",
                "param_1": "value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08004e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "entrypoint": "0x08004ea4",
            "current_name": "process_input_08004ea4",
            "code": "\nvoid processInput_08004ea4(undefined input1,undefined input2,undefined4 value,undefined2 code)\n\n{\n  processInput_08004ea4Data(&DAT_20000a88,input1,input2,1,value,code,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ea4": "process_input_08004ea4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "value",
                "param_4": "code",
                "process_input_08001ccc": "processInputData"
            },
            "calling": [],
            "called": [
                "FUN_08001ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "entrypoint": "0x08004ee8",
            "current_name": "configure_and_check_status_08004ee8",
            "code": "\nvoid configureAndCheckStatus_08004ee8(undefined data1,undefined data2,undefined4 flag,undefined2 value)\n\n{\n  configure_and_check_status_08001f6c(&DAT_20000a88,data1,data2,1,flag,value,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ee8": "configure_and_check_status_08004ee8",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "flag",
                "param_4": "value"
            },
            "calling": [],
            "called": [
                "FUN_08001f6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "entrypoint": "0x08004f2c",
            "current_name": "get_data_from_binary_08004f2c",
            "code": "\nundefined4 get_data_from_binary_08004f2c(void)\n\n{\n  undefined4 data;\n  \n  data = get_data_from_memory();\n  return data;\n}\n\n",
            "renaming": {
                "FUN_08004f2c": "get_data_from_binary_08004f2c",
                "uVar1": "data",
                "get_data_080015a0": "get_data_from_memory"
            },
            "calling": [],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "process_data_08004f3c",
            "code": "\nvoid process_data_08004f3c(undefined4 input_data,undefined2 input_value)\n\n{\n  process_data_08004f3c_08004436(&DAT_20000adc,input_data,input_value,0x32);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "process_data_08004f3c",
                "param_1": "input_data",
                "param_2": "input_value"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08004436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "initialize_data_08004f60",
            "code": "\nvoid initializeData_08004f60(void)\n\n{\n  clearMemory(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f60": "initialize_data_08004f60",
                "memset_08005d68": "clearMemory"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005d68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f78": {
            "entrypoint": "0x08004f78",
            "current_name": "process_data_08004f78",
            "code": "\nvoid processData_08004f78(void)\n\n{\n  undefined4 returnValue;\n  int isEmpty;\n  undefined4 tempValue;\n  uint tempMask;\n  undefined8 bitwiseResult;\n  byte numberRangeValue;\n  \n  extract_unsigned_values_08004ae0(&DAT_20000a5c);\n  calculate_output_08004bd8(&DAT_20000a5c,&DAT_20000ba0);\n  initialize_data_08004f60();\n  bitwiseResult = bitwise_operation_08000418(DAT_20000ba0);\n  initialize_memory_08005dfc(&DAT_20000ba8,\"Pitch: %f\\n\",(int)bitwiseResult,(int)((ulonglong)bitwiseResult >> 0x20));\n  returnValue = calculate_lzcount_08005e40(&DAT_20000ba8);\n  process_data_08004f3c(&DAT_20000ba8,returnValue);\n  DAT_200009f8 = perform_calculation_08000aa4(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = calculate_floating_point_08000cb8(DAT_20000a00,DAT_200009f8);\n  returnValue = calculate_floating_point_08000cb8(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = calculate_float_08000aa8(returnValue,DAT_20000b5c);\n  returnValue = calculate_unsigned_value_08000c10(DAT_20000010);\n  isEmpty = is_string_empty_08000ff4(returnValue,DAT_20000b5c);\n  if (isEmpty == 0) {\n    returnValue = calculate_unsigned_value_08000c10(DAT_200009f4);\n    isEmpty = is_string_empty_08001030(returnValue,DAT_20000b5c);\n    if (isEmpty != 0) {\n      DAT_20000b5c = calculate_unsigned_value_08000c08(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = calculate_unsigned_value_08000c08(DAT_20000010);\n  }\n  tempMask = DAT_20000a08 ^ 0x80000000;\n  returnValue = perform_calculation_08000aa4(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = calculate_floating_point_08000cb8(tempMask,returnValue);\n  returnValue = calculate_float_08000aa8(DAT_20000be8,DAT_20000b5c);\n  returnValue = calculate_float_08000aa8(returnValue,DAT_20000a58);\n  tempValue = calculate_unsigned_value_08000c10(DAT_20000010);\n  isEmpty = is_string_empty_08001030(returnValue,tempValue);\n  if (isEmpty == 0) {\n    tempValue = calculate_unsigned_value_08000c10(DAT_200009f4);\n    isEmpty = is_string_empty_08000ff4(returnValue,tempValue);\n    if (isEmpty == 0) {\n      numberRangeValue = check_number_range_08001044(returnValue);\n    }\n    else {\n      numberRangeValue = DAT_200009f4;\n    }\n  }\n  else {\n    numberRangeValue = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  isEmpty = is_string_empty_08001030(DAT_200009f8,0);\n  set_param_value_08001a80(0x40010800,2,isEmpty != 0);\n  isEmpty = is_string_empty_08001030(DAT_200009f8,0);\n  set_param_value_08001a80(0x40010800,4,isEmpty == 0);\n  isEmpty = is_string_empty_08001030(DAT_200009f8,0);\n  set_param_value_08001a80(0x40010800,8,isEmpty != 0);\n  isEmpty = is_string_empty_08001030(DAT_200009f8,0);\n  set_param_value_08001a80(0x40010800,0x10,isEmpty == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)numberRangeValue;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)numberRangeValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f78": "process_data_08004f78",
                "uVar1": "returnValue",
                "iVar2": "isEmpty",
                "uVar3": "tempValue",
                "uVar4": "tempMask",
                "uVar5": "bitwiseResult",
                "local_11": "numberRangeValue"
            },
            "calling": [
                "FUN_080017b4",
                "FUN_080036f8"
            ],
            "called": [
                "FUN_08004bd8",
                "FUN_08005e40",
                "FUN_08000418",
                "FUN_08000ff4",
                "FUN_08001030",
                "FUN_08004ae0",
                "FUN_08000c10",
                "FUN_08000cb8",
                "FUN_08005dfc",
                "FUN_08001044",
                "FUN_08001a80",
                "FUN_08000c08",
                "FUN_08000aa8",
                "FUN_08004f60",
                "FUN_08000aa4",
                "FUN_08004f3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005224": {
            "entrypoint": "0x08005224",
            "current_name": "initialize_device_08005224",
            "code": "\nvoid initialize_device_08005224(void)\n\n{\n  initiate_startup();\n  initialize_system();\n  set_and_update_bitmask();\n  initialize_data();\n  initialize_data_structure();\n  initialize_memory();\n  initialize_memory_configuration();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  update_and_set_values(&DAT_20000b1c,0);\n  update_and_set_values(&DAT_20000b1c,0xc);\n  initialize_parameters(&DAT_20000a5c);\n  set_flags_and_bitwise_or(&DAT_20000b60);\n  execute_interrupt(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005224": "initialize_device_08005224",
                "initiate_device_startup_080014f0": "initiate_startup",
                "initialize_system_080052a0": "initialize_system",
                "set_and_update_bitmask_080055f4": "set_and_update_bitmask",
                "initialize_data_08005348": "initialize_data",
                "initialize_data_structure_08005598": "initialize_data_structure",
                "initialize_memory_08005500": "initialize_memory",
                "initialize_memory_configuration_080053b0": "initialize_memory_configuration",
                "update_and_set_values_080036a8": "update_and_set_values",
                "initialize_parameters_0800491c": "initialize_parameters",
                "set_flags_and_bitwise_or_0800360c": "set_flags_and_bitwise_or",
                "execute_interrupt_08004e74": "execute_interrupt"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080053b0",
                "FUN_0800360c",
                "FUN_080014f0",
                "FUN_08005500",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_0800491c",
                "FUN_080036a8",
                "FUN_08005348",
                "FUN_080055f4",
                "FUN_08004e74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052a0": {
            "entrypoint": "0x080052a0",
            "current_name": "initialize_system_080052a0",
            "code": "\nvoid initializeSystem_080052a0(void)\n\n{\n  int result;\n  undefined8 globalValue;\n  undefined4 status;\n  undefined4 count;\n  undefined4 value;\n  undefined4 temp;\n  undefined4 temp2;\n  undefined4 flag;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  undefined4 constant5;\n  undefined4 constant6;\n  \n  flag = 1;\n  constant1 = 0x10000;\n  constant2 = 0;\n  constant3 = 1;\n  constant4 = 2;\n  constant5 = 0x10000;\n  constant6 = 0x1c0000;\n  result = check_status_and_change_08002d98(&flag);\n  if (result != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x151);\n  }\n  status = 0xf;\n  count = 2;\n  value = 0x80;\n  temp = 0;\n  temp2 = 0;\n  result = calculate_execution_time_08003260(&status,2);\n  if (result != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x15e);\n  }\n  globalValue = get_global_value_08003504();\n  validate_and_set_param_08001762((uint)globalValue / 1000,(int)((ulonglong)globalValue >> 0x20),(uint)globalValue * 0x10624dd3);\n  set_flag_0800177c(4);\n  store_shifted_bits_0800172a(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052a0": "initialize_system_080052a0",
                "local_44": "status",
                "local_40": "count",
                "local_3c": "value",
                "local_38": "temp",
                "local_34": "temp2",
                "local_30": "flag",
                "local_2c": "constant1",
                "local_28": "constant2",
                "local_20": "constant3",
                "local_14": "constant4",
                "local_10": "constant5",
                "local_c": "constant6",
                "iVar1": "result",
                "uVar2": "globalValue"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003504",
                "FUN_0800172a",
                "FUN_08005674",
                "FUN_08002d98",
                "FUN_08003260",
                "FUN_08001762",
                "FUN_0800177c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005348": {
            "entrypoint": "0x08005348",
            "current_name": "initialize_data_08005348",
            "code": "\nvoid initializeData_08005348(void)\n\n{\n  int result;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  result = calculateParameter(&DAT_20000a88);\n  if (result != 0) {\n    handleError(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "iVar1": "result",
                "calculate_parameter_08001ab0": "calculateParameter",
                "infinite_loop_08005674": "handleError"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053b0": {
            "entrypoint": "0x080053b0",
            "current_name": "initialize_memory_configuration_080053b0",
            "code": "\nvoid initialize_memory_configuration_080053b0(void)\n\n{\n  int error_code;\n  undefined4 config_value_1;\n  undefined4 config_value_2;\n  undefined4 config_value_3;\n  undefined4 config_value_4;\n  undefined4 config_value_5;\n  undefined4 config_value_6;\n  undefined4 config_value_7;\n  undefined4 config_value_8;\n  undefined4 param_value_1;\n  undefined4 param_value_2;\n  undefined4 param_value_3;\n  undefined4 param_value_4;\n  undefined4 param_value_5;\n  undefined4 param_value_6;\n  undefined4 flag_value_1;\n  undefined4 flag_value_2;\n  undefined4 array_values [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  error_code = check_and_update_memory_080035a4(&DAT_20000b1c);\n  if (error_code != 0) {\n    infinite_loop_08005674(\"../src/main.c\",399);\n  }\n  array_values[0] = 0x1000;\n  error_code = update_memory_function_08003a94(&DAT_20000b1c,array_values);\n  if (error_code != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x194);\n  }\n  error_code = update_memory_status_08003640(&DAT_20000b1c);\n  if (error_code != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x198);\n  }\n  flag_value_1 = 0;\n  flag_value_2 = 0;\n  error_code = update_flags_and_values_080042de(&DAT_20000b1c,&flag_value_1);\n  if (error_code != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x19f);\n  }\n  config_value_8 = 0x60;\n  param_value_1 = 0;\n  param_value_2 = 0;\n  param_value_3 = 0;\n  param_value_4 = 0;\n  param_value_5 = 0;\n  param_value_6 = 0;\n  error_code = update_param_values_08003908(&DAT_20000b1c,&config_value_8,0);\n  if (error_code != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1ab);\n  }\n  error_code = update_param_values_08003908(&DAT_20000b1c,&config_value_8,0xc);\n  if (error_code != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1b0);\n  }\n  config_value_1 = 0;\n  config_value_2 = 0;\n  config_value_3 = 0;\n  config_value_4 = 0;\n  config_value_5 = 0;\n  config_value_6 = 0x2000;\n  config_value_7 = 0;\n  error_code = update_configuration_0800422e(&DAT_20000b1c,&config_value_1);\n  if (error_code != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1bc);\n  }\n  initialize_bitmask_08005680(&DAT_20000b1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053b0": "initialize_memory_configuration_080053b0",
                "iVar1": "error_code",
                "local_58": "config_value_1",
                "local_54": "config_value_2",
                "local_50": "config_value_3",
                "local_4c": "config_value_4",
                "local_48": "config_value_5",
                "local_44": "config_value_6",
                "local_40": "config_value_7",
                "local_3c": "config_value_8",
                "local_38": "param_value_1",
                "local_34": "param_value_2",
                "local_30": "param_value_3",
                "local_2c": "param_value_4",
                "local_28": "param_value_5",
                "local_24": "param_value_6",
                "local_20": "flag_value_1",
                "local_1c": "flag_value_2",
                "local_18": "array_values"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003a94",
                "FUN_08003908",
                "FUN_0800422e",
                "FUN_08003640",
                "FUN_080035a4",
                "FUN_08005674",
                "FUN_08005680",
                "FUN_080042de"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005500": {
            "entrypoint": "0x08005500",
            "current_name": "initialize_memory_08005500",
            "code": "\nvoid initializeMemory_08005500(void)\n\n{\n  int result;\n  undefined4 bufferSize;\n  undefined4 counter;\n  undefined4 valuesArray [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  result = check_and_update_memory_080035a4(&DAT_20000b60);\n  if (result != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1d0);\n  }\n  valuesArray[0] = 0x1000;\n  result = update_memory_function_08003a94(&DAT_20000b60,valuesArray);\n  if (result != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1d5);\n  }\n  bufferSize = 0x20;\n  counter = 0;\n  result = update_flags_and_values_080042de(&DAT_20000b60,&bufferSize);\n  if (result != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005500": "initialize_memory_08005500",
                "local_20": "bufferSize",
                "local_1c": "counter",
                "local_18": "valuesArray",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003a94",
                "FUN_080035a4",
                "FUN_08005674",
                "FUN_080042de"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005598": {
            "entrypoint": "0x08005598",
            "current_name": "initialize_data_structure_08005598",
            "code": "\nvoid initialize_data_structure_08005598(void)\n\n{\n  int iVar1;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  iVar1 = initialize_data_structure_08005598_helper(&DAT_20000adc);\n  if (iVar1 != 0) {\n    infinite_loop_08005674(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005598": "initialize_data_structure_08005598",
                "initialize_data_structure_0800438a": "initialize_data_structure_helper"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800438a",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055f4": {
            "entrypoint": "0x080055f4",
            "current_name": "set_and_update_bitmask_080055f4",
            "code": "\n\n\nvoid setAndUpdateBitmask_080055f4(void)\n\n{\n  undefined4 paramValue;\n  undefined4 bitmaskBit;\n  undefined4 flag;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  set_param_value_08001a80(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  paramValue = 0x1e;\n  bitmaskBit = 1;\n  flag = 2;\n  update_bitmask_080017c4(0x40010800,&paramValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055f4": "set_and_update_bitmask_080055f4",
                "local_18": "paramValue",
                "local_14": "bitmaskBit",
                "local_c": "flag"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001a80",
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005674": {
            "entrypoint": "0x08005674",
            "current_name": "infinite_loop_08005674",
            "code": "\nvoid infiniteLoop_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_08005348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005680": {
            "entrypoint": "0x08005680",
            "current_name": "initialize_bitmask_08005680",
            "code": "\nvoid initializeBitmask_08005680(int *bitmaskPointer)\n\n{\n  undefined4 bitmaskSize;\n  undefined4 bitmaskValue;\n  undefined4 bitmaskFlag;\n  \n  if (*bitmaskPointer == 0x40012c00) {\n    bitmaskSize = 0x900;\n    bitmaskValue = 2;\n    bitmaskFlag = 2;\n    update_bitmask_080017c4(0x40010800,&bitmaskSize);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005680": "initialize_bitmask_08005680",
                "param_1": "bitmaskPointer",
                "local_18": "bitmaskSize",
                "local_14": "bitmaskValue",
                "local_c": "bitmaskFlag"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005704": {
            "entrypoint": "0x08005704",
            "current_name": "initialize_and_increment_08005704",
            "code": "\nvoid initialize_and_increment_08005704(void)\n\n{\n  increment_sum();\n  initialize_data_processing();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005704": "initialize_and_increment_08005704",
                "increment_sum_0800157c": "increment_sum",
                "initialize_data_processing_080017b4": "initialize_data_processing"
            },
            "calling": [],
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_flag_processing_08005714",
            "code": "\nvoid initializeFlagProcessing_08005714(void)\n\n{\n  process_flags_080036f8(&DAT_20000b60);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_flag_processing_08005714"
            },
            "calling": [],
            "called": [
                "FUN_080036f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "allocate_memory_08005728",
            "code": "\nundefined * allocateMemory_08005728(int size)\n\n{\n  undefined4 *resourceAddress;\n  undefined *allocatedMemory;\n  undefined tempMemory [4];\n  int remainingSize;\n  undefined *baseMemory;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  baseMemory = DAT_20000a10;\n  if (tempMemory < DAT_20000a10 + size) {\n    remainingSize = size;\n    resourceAddress = (undefined4 *)get_resource_address_08005d14();\n    *resourceAddress = 0xc;\n    allocatedMemory = (undefined *)0xffffffff;\n  }\n  else {\n    allocatedMemory = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "param_1": "size",
                "puVar1": "resourceAddress",
                "puVar2": "allocatedMemory",
                "auStack_18": "tempMemory",
                "local_14": "remainingSize",
                "local_c": "baseMemory"
            },
            "calling": [
                "FUN_08009744"
            ],
            "called": [
                "FUN_08005d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005780": {
            "entrypoint": "0x08005780",
            "current_name": "initialize_peripheral_registers_08005780",
            "code": "\n\n\nvoid initializePeripheralRegisters_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005780": "initialize_peripheral_registers_08005780"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080057e8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_peripheral_registers_08005780();\n  execute_functions_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  initialize_device_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005d20",
                "FUN_08005780",
                "FUN_08005224"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "entrypoint": "0x08005834",
            "current_name": "calculate_result_thunk_08005838",
            "code": "\nuint calculate_result_thunk_08005838(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int temp_var1;\n  undefined4 temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  undefined8 temp_var6;\n  \n  temp_var4 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp_var4 | (-input_3 | input_3) >> 0x1f)) ||\n     (temp_var5 = input_2 & 0x7fffffff, 0x7ff00000 < (temp_var5 | (-input_1 | input_1) >> 0x1f))) {\n    temp_var4 = calculate_extended_value_0800015c(input_3,input_4,input_1,input_2);\n    return temp_var4;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    temp_var4 = calculate_value_080059f0();\n    return temp_var4;\n  }\n  temp_var3 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((temp_var5 | input_1) == 0) {\n    if (temp_var3 == 2) {\n      return 0x54442d18;\n    }\n    if (temp_var3 != 3) {\n      return input_1;\n    }\n  }\n  else if ((temp_var4 | input_3) != 0) {\n    if (temp_var4 == 0x7ff00000) {\n      if (temp_var5 == 0x7ff00000) {\n        if (temp_var3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (temp_var3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (temp_var3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (temp_var3 == 2) {\n        return 0x54442d18;\n      }\n      if (temp_var3 != 3) {\n        if (temp_var3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (temp_var5 != 0x7ff00000) {\n      temp_var1 = (int)(temp_var5 - temp_var4) >> 0x14;\n      if (temp_var1 < 0x3d) {\n        if (((int)input_4 < 0) && (temp_var1 + 0x3c < 0 != SCARRY4(temp_var1,0x3c))) {\n          temp_var6 = 0;\n        }\n        else {\n          perform_calculation_0800071c(input_1,input_2,input_3,input_4,input_4);\n          FUNC_08005d0c();\n          temp_var6 = calculate_value_080059f0();\n        }\n      }\n      else {\n        temp_var6 = 0x3ff921fb54442d18;\n      }\n      temp_var2 = (undefined4)((ulonglong)temp_var6 >> 0x20);\n      temp_var4 = (uint)temp_var6;\n      if (temp_var3 == 1) {\n        return temp_var4;\n      }\n      if (temp_var3 == 2) {\n        temp_var6 = calculate_08000158(temp_var4,temp_var2,0x33145c07,0x3ca1a626);\n        temp_var4 = calculate_08000158(0x54442d18,0x400921fb,(int)temp_var6,(int)((ulonglong)temp_var6 >> 0x20));\n        return temp_var4;\n      }\n      if (temp_var3 != 0) {\n        temp_var6 = calculate_08000158(temp_var4,temp_var2,0x33145c07,0x3ca1a626);\n        temp_var4 = calculate_08000158((int)temp_var6,(int)((ulonglong)temp_var6 >> 0x20),0x54442d18,0x400921fb);\n        return temp_var4;\n      }\n      return temp_var4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "temp_var1",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "uVar6": "temp_var6"
            },
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "called": [
                "FUN_08005838"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005838": {
            "entrypoint": "0x08005838",
            "current_name": "calculate_output_08005838",
            "code": "\nuint calculate_output_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 upper_value;\n  uint condition;\n  uint value;\n  uint abs_value;\n  undefined8 result;\n  \n  value = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (value | (-input3 | input3) >> 0x1f)) ||\n     (abs_value = input2 & 0x7fffffff, 0x7ff00000 < (abs_value | (-input1 | input1) >> 0x1f))) {\n    value = calculate_extended_value_0800015c(input3,input4,input1,input2);\n    return value;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    value = calculate_value_080059f0();\n    return value;\n  }\n  condition = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((abs_value | input1) == 0) {\n    if (condition == 2) {\n      return 0x54442d18;\n    }\n    if (condition != 3) {\n      return input1;\n    }\n  }\n  else if ((value | input3) != 0) {\n    if (value == 0x7ff00000) {\n      if (abs_value == 0x7ff00000) {\n        if (condition == 2) {\n          return 0x7f3321d2;\n        }\n        if (condition == 3) {\n          return 0x7f3321d2;\n        }\n        if (condition == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (condition == 2) {\n        return 0x54442d18;\n      }\n      if (condition != 3) {\n        if (condition != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (abs_value != 0x7ff00000) {\n      difference = (int)(abs_value - value) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n          result = 0;\n        }\n        else {\n          perform_calculation_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          result = calculate_value_080059f0();\n        }\n      }\n      else {\n        result = 0x3ff921fb54442d18;\n      }\n      upper_value = (undefined4)((ulonglong)result >> 0x20);\n      value = (uint)result;\n      if (condition == 1) {\n        return value;\n      }\n      if (condition == 2) {\n        result = calculate_08000158(value,upper_value,0x33145c07,0x3ca1a626);\n        value = calculate_08000158(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        return value;\n      }\n      if (condition != 0) {\n        result = calculate_08000158(value,upper_value,0x33145c07,0x3ca1a626);\n        value = calculate_08000158((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        return value;\n      }\n      return value;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "FUN_08005838": "calculate_output_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "difference",
                "uVar2": "upper_value",
                "uVar3": "condition",
                "uVar4": "value",
                "uVar5": "abs_value",
                "uVar6": "result"
            },
            "calling": [
                "thunk_FUN_08005838"
            ],
            "called": [
                "FUN_08000158",
                "FUN_080059f0",
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f0": {
            "entrypoint": "0x080059f0",
            "current_name": "calculate_value_080059f0",
            "code": "\nundefined8 calculate_value_080059f0(int input_param1,uint input_param2,undefined4 input_param3,undefined4 input_param4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  uint unsigned_param2;\n  int result7;\n  undefined8 result8;\n  undefined8 result9;\n  \n  result9 = CONCAT44(input_param2,input_param1);\n  unsigned_param2 = input_param2 & 0x7fffffff;\n  if (unsigned_param2 < 0x44100000) {\n    if (unsigned_param2 < 0x3fdc0000) {\n      if (unsigned_param2 < 0x3e200000) {\n        result8 = calculate_extended_value_0800015c(input_param1,input_param2,0x8800759c,0x7e37e43c,input_param4);\n        result7 = check_conditions_and_return_result_080009e8((int)result8,(int)((ulonglong)result8 >> 0x20),0,0x3ff00000);\n        if (result7 != 0) {\n          return CONCAT44(input_param2,input_param1);\n        }\n      }\n      result7 = -1;\n    }\n    else {\n      result9 = FUNC_08005d0c();\n      result4 = (undefined4)((ulonglong)result9 >> 0x20);\n      result1 = (undefined4)result9;\n      if (unsigned_param2 < 0x3ff30000) {\n        if (unsigned_param2 < 0x3fe60000) {\n          result9 = calculate_extended_value_0800015c(result1,result4,result1,result4);\n          result9 = calculate_08000158((int)result9,(int)((ulonglong)result9 >> 0x20),0,0x3ff00000);\n          result8 = calculate_extended_value_0800015c(result1,result4,0,0x40000000);\n          result9 = perform_calculation_0800071c((int)result9,(int)((ulonglong)result9 >> 0x20),(int)result8,\n                                (int)((ulonglong)result8 >> 0x20));\n          result7 = 0;\n        }\n        else {\n          result9 = calculate_08000158(result1,result4,0,0x3ff00000);\n          result8 = calculate_extended_value_0800015c(result1,result4,0,0x3ff00000);\n          result9 = perform_calculation_0800071c((int)result9,(int)((ulonglong)result9 >> 0x20),(int)result8,\n                                (int)((ulonglong)result8 >> 0x20));\n          result7 = 1;\n        }\n      }\n      else if (unsigned_param2 < 0x40038000) {\n        result9 = calculate_08000158(result1,result4,0,0x3ff80000);\n        result8 = calculate_shifted_result_080004c8(result1,result4,0,0x3ff80000);\n        result8 = calculate_extended_value_0800015c((int)result8,(int)((ulonglong)result8 >> 0x20),0,0x3ff00000);\n        result9 = perform_calculation_0800071c((int)result9,(int)((ulonglong)result9 >> 0x20),(int)result8,\n                              (int)((ulonglong)result8 >> 0x20));\n        result7 = 2;\n      }\n      else {\n        result9 = perform_calculation_0800071c(0,0xbff00000,result1,result4);\n        result7 = 3;\n      }\n    }\n    result6 = (undefined4)((ulonglong)result9 >> 0x20);\n    result5 = (undefined4)result9;\n    result9 = calculate_shifted_result_080004c8(result5,result6,result5,result6);\n    result2 = (undefined4)((ulonglong)result9 >> 0x20);\n    result1 = (undefined4)result9;\n    result9 = calculate_shifted_result_080004c8(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)result9 >> 0x20);\n    result4 = (undefined4)result9;\n    result9 = calculate_shifted_result_080004c8(result4,result3,0xe322da11,0x3f90ad3a);\n    result9 = calculate_extended_value_0800015c((int)result9,(int)((ulonglong)result9 >> 0x20),0x24760deb,0x3fa97b4b);\n    result9 = calculate_shifted_result_080004c8((int)result9,(int)((ulonglong)result9 >> 0x20),result4,result3);\n    result9 = calculate_extended_value_0800015c((int)result9,(int)((ulonglong)result9 >> 0x20),0xa0d03d51,0x3fb10d66);\n    result9 = calculate_shifted_result_080004c8((int)result9,(int)((ulonglong)result9 >> 0x20),result4,result3);\n    result9 = calculate_extended_value_0800015c((int)result9,(int)((ulonglong)result9 >> 0x20),0xc54c206e,0x3fb745cd);\n    result9 = calculate_shifted_result_080004c8((int)result9,(int)((ulonglong)result9 >> 0x20),result4,result3);\n    result9 = calculate_extended_value_0800015c((int)result9,(int)((ulonglong)result9 >> 0x20),0x920083ff,0x3fc24924);\n    result9 = calculate_shifted_result_080004c8((int)result9,(int)((ulonglong)result9 >> 0x20),result4,result3);\n    result9 = calculate_extended_value_0800015c((int)result9,(int)((ulonglong)result9 >> 0x20),0x5555550d,0x3fd55555);\n    result9 = calculate_shifted_result_080004c8((int)result9,(int)((ulonglong)result9 >> 0x20),result1,result2);\n    result8 = calculate_shifted_result_080004c8(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    result8 = calculate_08000158((int)result8,(int)((ulonglong)result8 >> 0x20),0x52defd9a,0x3fadde2d);\n    result8 = calculate_shifted_result_080004c8((int)result8,(int)((ulonglong)result8 >> 0x20),result4,result3);\n    result8 = calculate_08000158((int)result8,(int)((ulonglong)result8 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    result8 = calculate_shifted_result_080004c8((int)result8,(int)((ulonglong)result8 >> 0x20),result4,result3);\n    result8 = calculate_08000158((int)result8,(int)((ulonglong)result8 >> 0x20),0xfe231671,0x3fbc71c6);\n    result8 = calculate_shifted_result_080004c8((int)result8,(int)((ulonglong)result8 >> 0x20),result4,result3);\n    result8 = calculate_08000158((int)result8,(int)((ulonglong)result8 >> 0x20),0x9998ebc4,0x3fc99999);\n    result8 = calculate_shifted_result_080004c8((int)result8,(int)((ulonglong)result8 >> 0x20),result4,result3);\n    result9 = calculate_extended_value_0800015c((int)result9,(int)((ulonglong)result9 >> 0x20),(int)result8,\n                          (int)((ulonglong)result8 >> 0x20));\n    result9 = calculate_shifted_result_080004c8((int)result9,(int)((ulonglong)result9 >> 0x20),result5,result6);\n    result1 = (undefined4)((ulonglong)result9 >> 0x20);\n    if (result7 == -1) {\n      result9 = calculate_08000158(result5,result6,(int)result9,result1);\n      return result9;\n    }\n    result7 = result7 * 8;\n    result9 = calculate_08000158((int)result9,result1,*(undefined4 *)(&UNK_08009ee8 + result7),\n                          *(undefined4 *)(&UNK_08009eec + result7));\n    result9 = calculate_08000158((int)result9,(int)((ulonglong)result9 >> 0x20),result5,result6);\n    result9 = calculate_08000158(*(undefined4 *)(&UNK_08009ec8 + result7),\n                          *(undefined4 *)(&UNK_08009ecc + result7),(int)result9,\n                          (int)((ulonglong)result9 >> 0x20));\n    if ((int)input_param2 < 0) {\n      return CONCAT44((int)((ulonglong)result9 >> 0x20) + -0x80000000,(int)result9);\n    }\n  }\n  else {\n    if ((unsigned_param2 < 0x7ff00001) && ((unsigned_param2 != 0x7ff00000 || (input_param1 == 0)))) {\n      result1 = 0xbff921fb;\n      if (0 < (int)input_param2) {\n        result1 = 0x3ff921fb;\n      }\n      return CONCAT44(result1,0x54442d18);\n    }\n    result9 = calculate_extended_value_0800015c(input_param1,input_param2,input_param1,input_param2,input_param4);\n  }\n  return result9;\n}\n\n",
            "renaming": {
                "FUN_080059f0": "calculate_value_080059f0",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "unsigned_param2",
                "iVar8": "result7",
                "uVar9": "result8",
                "uVar10": "result9"
            },
            "calling": [
                "FUN_08005838"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08000158",
                "FUN_080009e8",
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "entrypoint": "0x08005d0c",
            "current_name": "FUNC_08005d0c",
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "calling": [
                "FUN_080059f0",
                "FUN_08005838"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005d14": {
            "entrypoint": "0x08005d14",
            "current_name": "get_resource_address_08005d14",
            "code": "\nundefined4 get_resource_address_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "renaming": {
                "FUN_08005d14": "get_resource_address_08005d14"
            },
            "calling": [
                "FUN_08005728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d20": {
            "entrypoint": "0x08005d20",
            "current_name": "execute_functions_08005d20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid executeFunctions_08005d20(void)\n\n{\n  int counter;\n  code **functionArray;\n  \n  FUNC_08009e68();\n  counter = 0;\n  functionArray = (code **)&DAT_0800a198;\n  do {\n    counter = counter + 1;\n    (**functionArray)();\n    functionArray = functionArray + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d20": "execute_functions_08005d20",
                "iVar1": "counter",
                "ppcVar2": "functionArray"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000134",
                "FUN_08009e68",
                "FUN_080078a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d68": {
            "entrypoint": "0x08005d68",
            "current_name": "memset_08005d68",
            "code": "\nvoid memset_08005d68(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *temp_ptr;\n  uint temp_size;\n  undefined4 pattern;\n  bool is_empty;\n  \n  if (((uint)dest & 3) != 0) {\n    temp_size = size - 1;\n    dest_ptr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      size = temp_size;\n      if (((uint)dest & 3) == 0) break;\n      is_empty = temp_size == 0;\n      temp_size = temp_size - 1;\n      dest_ptr = dest;\n      if (is_empty) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    temp_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      temp_size = size - 0x10;\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = pattern;\n        dest_ptr[-3] = pattern;\n        dest_ptr[-2] = pattern;\n        dest_ptr[-1] = pattern;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (temp_size & 0xfffffff0) + 0x20));\n      size = size & 0xf;\n      dest = dest + ((temp_size >> 4) + 1) * 4;\n      temp_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto memset_08005d68_end;\n    }\n    do {\n      size = size - 4;\n      *dest = pattern;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (temp_size - 4 & 0xfffffffc) + 4);\n    size = temp_size & 3;\n  }\nmemset_08005d68_end:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      temp_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = temp_ptr;\n    } while ((undefined4 *)(size + (int)dest) != temp_ptr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d68": "memset_08005d68",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "temp_ptr",
                "uVar3": "temp_size",
                "uVar4": "pattern",
                "bVar5": "is_empty",
                "LAB_08005de4": "memset_end"
            },
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "entrypoint": "0x08005dfc",
            "current_name": "initialize_memory_08005dfc",
            "code": "\nvoid initializeMemory_08005dfc(undefined *dataPointer,undefined4 sizeParam,undefined4 param3,undefined4 param4)\n\n{\n  undefined *localArray [2];\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined *localVar3;\n  undefined4 maxSize;\n  undefined4 localVar4;\n  undefined4 localVar5;\n  \n  maxSize = 0x7fffffff;\n  localVar1 = 0x7fffffff;\n  localVar2 = 0xffff0208;\n  localArray[0] = dataPointer;\n  localVar3 = dataPointer;\n  localVar4 = param3;\n  localVar5 = param4;\n  FUNC_08005e9c(DAT_2000001c,localArray,sizeParam,&localVar4);\n  *localArray[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dfc": "initialize_memory_08005dfc",
                "param_1": "dataPointer",
                "param_2": "sizeParam",
                "param_3": "param3",
                "param_4": "param4",
                "local_80": "localArray",
                "local_78": "localVar1",
                "uStack_74": "localVar2",
                "local_70": "localVar3",
                "local_6c": "maxSize",
                "uStack_8": "localVar4",
                "uStack_4": "localVar5"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005e9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e40": {
            "entrypoint": "0x08005e40",
            "current_name": "calculate_lzcount_08005e40",
            "code": "\nint calculateLZCOUNT_08005e40(uint input)\n\n{\n  int index;\n  uint *ptr;\n  uint value;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  index = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((index + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    ptr = ptr + 1;\n    value = value + 0xfefefeff & ~value & 0x80808080;\n    if (value != 0) break;\n    value = *ptr;\n    index = index + 4;\n  }\n  return index + (0x1fU - LZCOUNT(value & -value) >> 3);\n}\n\n",
            "renaming": {
                "FUN_08005e40": "calculate_lzcount_08005e40",
                "param_1": "input",
                "iVar1": "index",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "entrypoint": "0x08005e9c",
            "current_name": "FUNC_08005e9c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)get_updated_value_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)calculate_lzcount_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = allocate_and_initialize_memory_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = get_updated_value_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)calculate_lzcount_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = get_updated_value_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = check_conditions_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = check_equality_or_conditions_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = check_if_string_is_empty_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = check_conditions_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)allocate_and_initialize_memory_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = calculate_result_and_shift_080096e0(local_128,uVar19,&local_f0);\n          local_150 = calculate_shifted_result_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = check_equality_and_conditions_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = calculate_result_and_shift_080096e0(local_128,uVar19,&local_f0);\n          local_150 = calculate_shifted_result_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = check_equality_and_conditions_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)convert_number_to_string_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = check_equality_and_conditions_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)convert_number_to_string_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)convert_number_to_string_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = check_equality_and_conditions_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)calculate_lzcount_08005e40(piVar23);\n        }\n        else {\n          iVar3 = find_u_var1_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        calculate_result_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          copy_and_clean_string_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = calculate_result_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = check_equality_and_conditions_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = calculate_shifted_result_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = convert_value_0800119c();\n    uVar34 = calculate_shifted_value_080003f4();\n    uVar33 = calculate_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = check_conditions_and_return_result_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = check_equality_and_conditions_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = copy_and_resize_data_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = copy_and_resize_data_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = copy_and_resize_data_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = check_equality_and_conditions_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = copy_and_resize_data_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = check_equality_and_conditions_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = copy_and_resize_data_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_resize_data_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_resize_data_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = copy_and_resize_data_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = copy_and_resize_data_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = copy_and_resize_data_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_resize_data_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = copy_and_resize_data_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = copy_and_resize_data_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = copy_and_resize_data_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      initialize_data_structure_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    initialize_data_structure_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "calling": [
                "FUN_08005dfc"
            ],
            "called": [
                "FUN_080004c8",
                "FUN_08005e40",
                "FUN_0800119c",
                "FUN_080011ec",
                "FUN_080009c0",
                "FUN_08008ad4",
                "FUN_080003f4",
                "FUN_08000998",
                "FUN_08001170",
                "FUN_08008af8",
                "FUN_08000158",
                "FUN_08009768",
                "FUN_080009e8",
                "FUN_0800901c",
                "FUN_080009ac",
                "FUN_080097cc",
                "FUN_080096e0",
                "FUN_080088ec",
                "FUN_080079e8"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078a0": {
            "entrypoint": "0x080078a0",
            "current_name": "FUNC_080078a0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_080098c0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078c0": {
            "entrypoint": "0x080078c0",
            "current_name": "divide_arrays_080078c0",
            "code": "\nuint divideArrays_080078c0(int array1,int array2)\n\n{\n  uint quotient;\n  uint *ptrArray1;\n  int carry;\n  int length;\n  int lastIndex;\n  uint result;\n  uint *ptrArray2;\n  uint *ptrResult;\n  uint *ptrLast;\n  uint temp;\n  uint *ptrTempArray1;\n  uint *ptrTempArray2;\n  \n  length = *(int *)(array2 + 0x10);\n  if (*(int *)(array1 + 0x10) < length) {\n    return 0;\n  }\n  lastIndex = length + -1;\n  ptrArray2 = (uint *)(array2 + 0x14);\n  ptrResult = (uint *)(array1 + 0x14);\n  result = ptrResult[lastIndex] / (ptrArray2[lastIndex] + 1);\n  ptrLast = ptrArray2 + lastIndex;\n  if (result != 0) {\n    quotient = 0;\n    carry = 0;\n    ptrArray1 = ptrResult;\n    ptrTempArray1 = ptrArray2;\n    do {\n      ptrTempArray2 = ptrTempArray1 + 1;\n      quotient = result * (*ptrTempArray1 & 0xffff) + quotient;\n      temp = result * (*ptrTempArray1 >> 0x10) + (quotient >> 0x10);\n      quotient = (carry - (quotient & 0xffff)) + (*ptrArray1 & 0xffff);\n      carry = ((*ptrArray1 >> 0x10) - (temp & 0xffff)) + ((int)quotient >> 0x10);\n      *ptrArray1 = quotient & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      quotient = temp >> 0x10;\n      ptrArray1 = ptrArray1 + 1;\n      ptrTempArray1 = ptrTempArray2;\n    } while (ptrTempArray2 <= ptrLast);\n    if (ptrResult[lastIndex] == 0) {\n      if ((ptrResult < ptrResult + length + -2) && (ptrResult[length + -2] == 0)) {\n        ptrArray1 = ptrResult + length + -3;\n        do {\n          lastIndex = lastIndex + -1;\n          if (ptrArray1 <= ptrResult) break;\n          quotient = *ptrArray1;\n          ptrArray1 = ptrArray1 + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(array1 + 0x10) = lastIndex;\n    }\n  }\n  length = compare_arrays_080094f8();\n  if (-1 < length) {\n    length = 0;\n    result = result + 1;\n    ptrArray1 = ptrResult;\n    do {\n      ptrTempArray1 = ptrArray2 + 1;\n      quotient = (length - (*ptrArray2 & 0xffff)) + (*ptrArray1 & 0xffff);\n      length = ((*ptrArray1 >> 0x10) - (*ptrArray2 >> 0x10)) + ((int)quotient >> 0x10);\n      *ptrArray1 = quotient & 0xffff | length * 0x10000;\n      length = length >> 0x10;\n      ptrArray1 = ptrArray1 + 1;\n      ptrArray2 = ptrTempArray1;\n    } while (ptrTempArray1 <= ptrLast);\n    if (ptrResult[lastIndex] == 0) {\n      if ((ptrResult < ptrResult + lastIndex + -1) && (ptrResult[lastIndex + -1] == 0)) {\n        ptrArray2 = ptrResult + lastIndex + -2;\n        do {\n          lastIndex = lastIndex + -1;\n          if (ptrArray2 <= ptrResult) break;\n          quotient = *ptrArray2;\n          ptrArray2 = ptrArray2 + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(array1 + 0x10) = lastIndex;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080078c0": "divide_arrays_080078c0",
                "param_1": "array1",
                "param_2": "array2",
                "uVar1": "quotient",
                "puVar2": "ptrArray1",
                "iVar3": "carry",
                "iVar4": "length",
                "iVar5": "lastIndex",
                "uVar6": "result",
                "puVar7": "ptrArray2",
                "puVar8": "ptrResult",
                "puVar9": "ptrLast",
                "uVar10": "temp",
                "puVar11": "ptrTempArray1",
                "puVar12": "ptrTempArray2"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080094f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e8": {
            "entrypoint": "0x080079e8",
            "current_name": "convert_number_to_string_080079e8",
            "code": "\nchar * convertNumberToString_080079e8(int number,undefined4 param2,uint mantissa,uint exponent,uint format,\n                   uint precision,int *sign,uint *isInfinity,char **stringValue)\n\n{\n  bool shouldMoveDecimal;\n  bool isNegative;\n  bool isScientificNotation;\n  char digit;\n  byte carry;\n  undefined4 processedDigits;\n  int numDigits;\n  int i;\n  int diff;\n  char *result;\n  uint temp;\n  undefined4 temp1;\n  undefined4 temp2;\n  int numBlocks;\n  int numLeadingZeros;\n  undefined4 factor1;\n  uint effectiveMantissa;\n  uint adjustedExponent;\n  int temp3;\n  char *pcVar20;\n  char *pcVar21;\n  undefined4 *puVar22;\n  undefined4 uVar23;\n  int numShifts;\n  bool isNegative5;\n  undefined8 temp4;\n  undefined8 temp5;\n  undefined8 temp6;\n  uint temp8;\n  uint absoluteExponent;\n  uint exp;\n  int numLZeros;\n  uint temp9;\n  int remainingDigits;\n  int extraZeros;\n  uint nonZeroDigits;\n  uint lowerBound;\n  uint temp7;\n  uint padding;\n  uint previousDigits;\n  int blockIndex;\n  int divResult [2];\n  \n  numBlocks = *(int *)(number + 0x40);\n  if (numBlocks != 0) {\n    adjustedExponent = *(uint *)(number + 0x44);\n    *(uint *)(numBlocks + 4) = adjustedExponent;\n    *(int *)(numBlocks + 8) = 1 << (adjustedExponent & 0xff);\n    copy_value_and_link_to_next_0800910c(number,numBlocks);\n    *(undefined4 *)(number + 0x40) = 0;\n  }\n  isNegative5 = (int)exponent < 0;\n  adjustedExponent = exponent;\n  if (isNegative5) {\n    adjustedExponent = exponent & 0x7fffffff;\n  }\n  *isInfinity = (uint)isNegative5;\n  absoluteExponent = exponent;\n  if (isNegative5) {\n    absoluteExponent = adjustedExponent;\n  }\n  effectiveMantissa = absoluteExponent;\n  if ((~adjustedExponent & 0x7ff00000) == 0) {\n    *sign = 9999;\n    if ((mantissa == 0) && ((adjustedExponent & 0xfffff) == 0)) {\n      result = \"Infinity\";\n      if (stringValue == (char **)0x0) {\n        return result;\n      }\n      pcVar21 = \"\";\n    }\n    else {\n      result = \"NaN\";\n      if (stringValue == (char **)0x0) {\n        return result;\n      }\n      pcVar21 = \"\";\n    }\n    *stringValue = pcVar21;\n    return result;\n  }\n  temp4 = check_equality_and_conditions_08000998(mantissa,absoluteExponent,0,0);\n  if ((int)temp4 != 0) {\n    *sign = 1;\n    if (stringValue != (char **)0x0) {\n      *stringValue = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  processedDigits = extract_bits_08009630(number,(int)((ulonglong)temp4 >> 0x20),mantissa,absoluteExponent,divResult,&blockIndex)\n  ;\n  numBlocks = blockIndex;\n  if (adjustedExponent >> 0x14 == 0) {\n    temp3 = divResult[0] + blockIndex;\n    numLeadingZeros = temp3 + 0x432;\n    if (numLeadingZeros < 0x21) {\n      adjustedExponent = mantissa << (0x20U - numLeadingZeros & 0xff);\n    }\n    else {\n      adjustedExponent = mantissa >> (temp3 + 0x412U & 0xff) | adjustedExponent << (0x40U - numLeadingZeros & 0xff);\n    }\n    temp4 = resize_number_080003d4(adjustedExponent);\n    temp3 = temp3 + -1;\n    isNegative5 = true;\n    temp = (int)((ulonglong)temp4 >> 0x20) + 0xfe100000;\n    adjustedExponent = (uint)temp4;\n  }\n  else {\n    temp3 = (adjustedExponent >> 0x14) - 0x3ff;\n    temp = absoluteExponent & 0xfffff | 0x3ff00000;\n    isNegative5 = false;\n    adjustedExponent = mantissa;\n  }\n  temp4 = calculate_08000158(adjustedExponent,temp,0,0x3ff80000);\n  temp4 = calculate_shifted_result_080004c8((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x636f4361,0x3fd287a7);\n  temp4 = calculate_extended_value_0800015c((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x8b60c8b3,0x3fc68a28);\n  temp5 = calculate_shifted_value_080003f4(temp3);\n  temp5 = calculate_shifted_result_080004c8((int)temp5,(int)((ulonglong)temp5 >> 0x20),0x509f79fb,0x3fd34413);\n  temp4 = calculate_extended_value_0800015c((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp5,\n                        (int)((ulonglong)temp5 >> 0x20));\n  temp2 = (undefined4)((ulonglong)temp4 >> 0x20);\n  exp = convert_value_0800119c();\n  numLeadingZeros = check_if_string_is_empty_080009ac((int)temp4,temp2,0,0);\n  if (numLeadingZeros != 0) {\n    temp5 = calculate_shifted_value_080003f4(exp);\n    numLeadingZeros = check_equality_and_conditions_08000998((int)temp5,(int)((ulonglong)temp5 >> 0x20),(int)temp4,temp2);\n    if (numLeadingZeros == 0) {\n      exp = exp - 1;\n    }\n  }\n  if (exp < 0x17) {\n    numLeadingZeros = check_conditions_and_return_result_080009e8(*(undefined4 *)(&DAT_08009fa8 + exp * 8),\n                          *(undefined4 *)(&DAT_08009fac + exp * 8),mantissa,absoluteExponent);\n    if (numLeadingZeros == 0) {\n      isNegative = false;\n    }\n    else {\n      exp = exp - 1;\n      isNegative = false;\n    }\n  }\n  else {\n    isNegative = true;\n  }\n  numLeadingZeros = (numBlocks - temp3) + -1;\n  if (numLeadingZeros < 0) {\n    numLZeros = 1 - (numBlocks - temp3);\n    numLeadingZeros = 0;\n  }\n  else {\n    numLZeros = 0;\n  }\n  if ((int)exp < 0) {\n    nonZeroDigits = 0;\n    numLZeros = numLZeros - exp;\n    extraZeros = -exp;\n  }\n  else {\n    numLeadingZeros = numLeadingZeros + exp;\n    nonZeroDigits = exp;\n    extraZeros = 0;\n  }\n  if (9 < format) {\n    padding = 0xffffffff;\n    shouldMoveDecimal = true;\n    temp9 = 0xffffffff;\n    isScientificNotation = true;\n    format = 0;\n    precision = 0;\n    goto LAB_08007c24;\n  }\n  shouldMoveDecimal = (int)format < 6;\n  if (!shouldMoveDecimal) {\n    format = format - 4;\n  }\n  switch(format) {\n  case 2:\n    isScientificNotation = false;\n    break;\n  case 3:\n    isScientificNotation = false;\n    goto LAB_08008300;\n  case 4:\n    isScientificNotation = true;\n    break;\n  case 5:\n    isScientificNotation = true;\nLAB_08008300:\n    padding = exp + precision;\n    temp9 = padding + 1;\n    adjustedExponent = temp9;\n    if ((int)temp9 < 1) {\n      adjustedExponent = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(number + 0x44) = 0;\n    result = (char *)initialize_or_get_memory_block_080090c0(number,0);\n    padding = 0xffffffff;\n    temp9 = 0xffffffff;\n    precision = 0;\n    *(char **)(number + 0x40) = result;\n    isScientificNotation = true;\n    goto LAB_08007e36;\n  }\n  if ((int)precision < 1) {\n    padding = 1;\n    precision = 1;\n    temp9 = 1;\nLAB_08007c24:\n    *(undefined4 *)(number + 0x44) = 0;\n    temp = padding;\n  }\n  else {\n    padding = precision;\n    temp9 = precision;\n    adjustedExponent = precision;\nLAB_08008314:\n    *(undefined4 *)(number + 0x44) = 0;\n    temp = temp9;\n    if (0x17 < (int)adjustedExponent) {\n      temp3 = 4;\n      numBlocks = 1;\n      do {\n        numDigits = numBlocks;\n        temp3 = temp3 * 2;\n        numBlocks = numDigits + 1;\n      } while (temp3 + 0x14U <= adjustedExponent);\n      *(int *)(number + 0x44) = numDigits;\n    }\n  }\n  result = (char *)initialize_or_get_memory_block_080090c0(number);\n  *(char **)(number + 0x40) = result;\n  if ((temp < 0xf) && (shouldMoveDecimal)) {\n    if ((int)exp < 1) {\n      if (exp == 0) {\n        numBlocks = 2;\n        temp8 = mantissa;\n      }\n      else {\n        numBlocks = (-exp & 0xf) * 8;\n        temp4 = calculate_shifted_result_080004c8(mantissa,absoluteExponent,*(undefined4 *)(&DAT_08009fa8 + numBlocks),\n                              *(undefined4 *)(&DAT_08009fac + numBlocks));\n        absoluteExponent = (uint)((ulonglong)temp4 >> 0x20);\n        temp8 = (uint)temp4;\n        temp3 = (int)-exp >> 4;\n        if (temp3 == 0) {\n          numBlocks = 2;\n        }\n        else {\n          shouldMoveDecimal = false;\n          numBlocks = 2;\n          puVar22 = &DAT_08009f80;\n          do {\n            if (temp3 << 0x1f < 0) {\n              temp4 = calculate_shifted_result_080004c8((int)temp4,(int)((ulonglong)temp4 >> 0x20),*puVar22,puVar22[1]\n                                   );\n              shouldMoveDecimal = true;\n              numBlocks = numBlocks + 1;\n            }\n            temp3 = temp3 >> 1;\n            puVar22 = puVar22 + 2;\n          } while (temp3 != 0);\n          if (shouldMoveDecimal) {\n            temp8 = (uint)temp4;\n            absoluteExponent = (uint)((ulonglong)temp4 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      adjustedExponent = (int)exp >> 4;\n      temp5 = *(undefined8 *)(&DAT_08009fa8 + (exp & 0xf) * 8);\n      temp4 = *(undefined8 *)(&DAT_08009fa8 + (exp & 0xf) * 8);\n      if ((int)(adjustedExponent << 0x1b) < 0) {\n        temp6 = perform_calculation_0800071c(mantissa,absoluteExponent,0x7f73bf3c,0x75154fdd);\n        temp7 = (uint)((ulonglong)temp6 >> 0x20);\n        lowerBound = (uint)temp6;\n        numBlocks = 3;\n        adjustedExponent = adjustedExponent & 0xf;\n      }\n      else {\n        numBlocks = 2;\n        temp7 = absoluteExponent;\n        lowerBound = mantissa;\n      }\n      if (adjustedExponent != 0) {\n        puVar22 = &DAT_08009f80;\n        do {\n          if ((int)(adjustedExponent << 0x1f) < 0) {\n            temp4 = calculate_shifted_result_080004c8((int)temp4,(int)((ulonglong)temp4 >> 0x20),*puVar22,puVar22[1]);\n            numBlocks = numBlocks + 1;\n          }\n          adjustedExponent = (int)adjustedExponent >> 1;\n          puVar22 = puVar22 + 2;\n          temp5 = temp4;\n        } while (adjustedExponent != 0);\n      }\n      absoluteExponent = (uint)((ulonglong)temp5 >> 0x20);\n      temp8 = (uint)temp5;\n      temp4 = perform_calculation_0800071c(lowerBound,temp7,temp8,absoluteExponent);\n      temp8 = (uint)temp4;\n      absoluteExponent = (uint)((ulonglong)temp4 >> 0x20);\n    }\n    temp4 = CONCAT44(absoluteExponent,temp8);\n    if ((isNegative) && (temp3 = check_if_string_is_empty_080009ac(temp8,absoluteExponent,0,0x3ff00000), temp3 != 0)) {\n      if (temp9 == 0) {\n        temp4 = calculate_shifted_value_080003f4(numBlocks);\n        temp4 = calculate_shifted_result_080004c8((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp8,absoluteExponent);\n        temp4 = calculate_extended_value_0800015c((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x401c0000);\n        temp2 = (undefined4)temp4;\n        numBlocks = (int)((ulonglong)temp4 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)padding) {\n        temp4 = calculate_shifted_result_080004c8(temp8,absoluteExponent,0,0x40240000);\n        temp5 = calculate_shifted_value_080003f4(numBlocks + 1);\n        temp5 = calculate_shifted_result_080004c8((int)temp5,(int)((ulonglong)temp5 >> 0x20),(int)temp4,\n                              (int)((ulonglong)temp4 >> 0x20));\n        temp5 = calculate_extended_value_0800015c((int)temp5,(int)((ulonglong)temp5 >> 0x20),0,0x401c0000);\n        temp2 = (undefined4)temp5;\n        lowerBound = padding;\n        previousDigits = exp - 1;\n        numBlocks = (int)((ulonglong)temp5 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    temp5 = calculate_shifted_value_080003f4(numBlocks);\n    temp5 = calculate_shifted_result_080004c8((int)temp5,(int)((ulonglong)temp5 >> 0x20),temp8,absoluteExponent);\n    temp5 = calculate_extended_value_0800015c((int)temp5,(int)((ulonglong)temp5 >> 0x20),0,0x401c0000);\n    temp2 = (undefined4)temp5;\n    numBlocks = (int)((ulonglong)temp5 >> 0x20) + -0x3400000;\n    if (temp9 != 0) {\n      previousDigits = exp;\n      lowerBound = temp9;\nLAB_08007cfa:\n      absoluteExponent = (uint)((ulonglong)temp4 >> 0x20);\n      temp8 = (uint)temp4;\n      digit = convert_value_0800119c(temp8,absoluteExponent);\n      digit = digit + '0';\n      factor1 = (&DAT_08009fa0)[lowerBound * 2];\n      temp1 = (&DAT_08009fa4)[lowerBound * 2];\n      temp4 = calculate_shifted_value_080003f4();\n      temp4 = calculate_08000158(temp8,absoluteExponent,(int)temp4,(int)((ulonglong)temp4 >> 0x20));\n      uVar23 = (undefined4)((ulonglong)temp4 >> 0x20);\n      pcVar21 = result + 1;\n      if (isScientificNotation) {\n        temp5 = perform_calculation_0800071c(0,0x3fe00000,factor1,temp1);\n        temp5 = calculate_08000158((int)temp5,(int)((ulonglong)temp5 >> 0x20),temp2,numBlocks);\n        temp2 = (undefined4)((ulonglong)temp5 >> 0x20);\n        *result = digit;\n        numBlocks = check_conditions_and_return_result_080009e8((int)temp5,temp2,(int)temp4,uVar23);\n        if (numBlocks != 0) {\nLAB_08008784:\n          exp = previousDigits;\n          goto LAB_08008294;\n        }\n        temp6 = calculate_08000158(0,0x3ff00000,(int)temp4,uVar23);\n        numBlocks = check_conditions_and_return_result_080009e8((int)temp5,temp2,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n        if (numBlocks == 0) {\n          if (lowerBound != 1) {\n            pcVar20 = pcVar21;\n            do {\n              temp5 = calculate_shifted_result_080004c8((int)temp5,(int)((ulonglong)temp5 >> 0x20),0,0x40240000);\n              temp2 = (undefined4)((ulonglong)temp5 >> 0x20);\n              temp4 = calculate_shifted_result_080004c8((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x40240000);\n              digit = convert_value_0800119c();\n              temp6 = calculate_shifted_value_080003f4();\n              temp4 = calculate_08000158((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp6,\n                                    (int)((ulonglong)temp6 >> 0x20));\n              factor1 = (undefined4)((ulonglong)temp4 >> 0x20);\n              digit = digit + '0';\n              pcVar21 = pcVar20 + 1;\n              *pcVar20 = digit;\n              numBlocks = check_if_string_is_empty_080009ac((int)temp4,factor1,(int)temp5,temp2);\n              if (numBlocks != 0) {\n                exp = previousDigits;\n                goto LAB_08008294;\n              }\n              temp6 = calculate_08000158(0,0x3ff00000,(int)temp4,factor1);\n              numBlocks = check_if_string_is_empty_080009ac((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp5,temp2)\n              ;\n              if (numBlocks != 0) goto LAB_08008798;\n              pcVar20 = pcVar21;\n            } while (pcVar21 != result + lowerBound);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        exp = previousDigits;\n      }\n      else {\n        temp5 = calculate_shifted_result_080004c8(temp2,numBlocks,factor1,temp1);\n        temp2 = (undefined4)((ulonglong)temp5 >> 0x20);\n        *result = digit;\n        if (lowerBound != 1) {\n          pcVar20 = pcVar21;\n          do {\n            temp4 = calculate_shifted_result_080004c8((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x40240000);\n            digit = convert_value_0800119c();\n            temp6 = calculate_shifted_value_080003f4();\n            temp4 = calculate_08000158((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp6,\n                                  (int)((ulonglong)temp6 >> 0x20));\n            pcVar21 = pcVar20 + 1;\n            *pcVar20 = digit + '0';\n            pcVar20 = pcVar21;\n          } while (pcVar21 != result + lowerBound);\n        }\n        factor1 = (undefined4)((ulonglong)temp4 >> 0x20);\n        temp6 = calculate_extended_value_0800015c((int)temp5,temp2,0,0x3fe00000);\n        numBlocks = check_if_string_is_empty_080009ac((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp4,factor1);\n        if (numBlocks == 0) {\n          temp5 = calculate_08000158(0,0x3fe00000,(int)temp5,temp2);\n          numBlocks = check_conditions_and_return_result_080009e8((int)temp5,(int)((ulonglong)temp5 >> 0x20),(int)temp4,factor1);\n          pcVar20 = pcVar21;\n          if (numBlocks == 0) goto LAB_08007e36;\n          do {\n            pcVar21 = pcVar20;\n            pcVar20 = pcVar21 + -1;\n          } while (pcVar21[-1] == '0');\n          goto LAB_08008784;\n        }\n        exp = previousDigits;\n        digit = pcVar21[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    temp4 = calculate_08000158(temp8,absoluteExponent,0,0x40140000);\n    factor1 = (undefined4)((ulonglong)temp4 >> 0x20);\n    temp3 = check_conditions_and_return_result_080009e8((int)temp4,factor1,temp2,numBlocks);\n    if (temp3 == 0) {\n      numBlocks = check_if_string_is_empty_080009ac((int)temp4,factor1,temp2,numBlocks + -0x80000000);\n      if (numBlocks == 0) goto LAB_08007e36;\n      temp3 = 0;\n      numBlocks = 0;\n      pcVar21 = result;\n      goto LAB_080084f0;\n    }\n    numLeadingZeros = 0;\n    numDigits = 0;\nLAB_08008406:\n    *result = '1';\n    exp = exp + 1;\n    pcVar21 = result + 1;\n    temp3 = numDigits;\n    numBlocks = numLeadingZeros;\nLAB_08008416:\n    copy_value_and_link_to_next_0800910c(number,numBlocks);\n    if (temp3 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar21 = result;\n    if ((-1 < divResult[0]) && ((int)exp < 0xf)) {\n      temp2 = *(undefined4 *)(&DAT_08009fa8 + exp * 8);\n      factor1 = *(undefined4 *)(&DAT_08009fac + exp * 8);\n      if ((-1 < (int)precision) || (0 < (int)temp9)) {\n        perform_calculation_0800071c(mantissa,effectiveMantissa,temp2,factor1);\n        carry = convert_value_0800119c();\n        temp4 = calculate_shifted_value_080003f4();\n        temp4 = calculate_shifted_result_080004c8((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp2,factor1);\n        temp4 = calculate_08000158(mantissa,effectiveMantissa,(int)temp4,(int)((ulonglong)temp4 >> 0x20));\n        *result = carry + 0x30;\n        pcVar21 = result + 1;\n        if (temp9 != 1) {\n          temp4 = calculate_shifted_result_080004c8((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x40240000);\n          numBlocks = check_equality_and_conditions_08000998((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0);\n          while (numBlocks == 0) {\n            uVar23 = (undefined4)((ulonglong)temp4 >> 0x20);\n            perform_calculation_0800071c((int)temp4,uVar23,temp2,factor1);\n            carry = convert_value_0800119c();\n            temp5 = calculate_shifted_value_080003f4();\n            temp5 = calculate_shifted_result_080004c8((int)temp5,(int)((ulonglong)temp5 >> 0x20),temp2,factor1);\n            temp4 = calculate_08000158((int)temp4,uVar23,(int)temp5,(int)((ulonglong)temp5 >> 0x20));\n            pcVar20 = pcVar21 + 1;\n            *pcVar21 = carry + 0x30;\n            pcVar21 = pcVar20;\n            if (temp9 == (int)pcVar20 - (int)result) goto LAB_08007f3a;\n            temp4 = calculate_shifted_result_080004c8((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x40240000);\n            numBlocks = check_equality_and_conditions_08000998((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        temp4 = calculate_extended_value_0800015c((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n        uVar23 = (undefined4)((ulonglong)temp4 >> 0x20);\n        numBlocks = check_conditions_and_return_result_080009e8((int)temp4,uVar23,temp2,factor1);\n        if ((numBlocks == 0) &&\n           ((numBlocks = check_equality_and_conditions_08000998((int)temp4,uVar23,temp2,factor1), numBlocks == 0 ||\n            ((carry & 1) == 0)))) goto LAB_08008294;\n        digit = pcVar21[-1];\nLAB_08007f7c:\n        while (pcVar20 = pcVar21 + -1, digit == '9') {\n          if (result == pcVar20) {\n            *result = '0';\n            digit = pcVar21[-1];\n            exp = exp + 1;\n            pcVar20 = result;\n            break;\n          }\n          digit = pcVar21[-2];\n          pcVar21 = pcVar20;\n        }\n        *pcVar20 = digit + '\\x01';\n        goto LAB_08008294;\n      }\n      if (temp9 == 0) {\n        temp4 = calculate_shifted_result_080004c8(temp2,factor1,0,0x40140000);\n        diff = check_conditions_and_return_080009d4((int)temp4,(int)((ulonglong)temp4 >> 0x20),mantissa,effectiveMantissa);\n        temp3 = 0;\n        numLeadingZeros = 0;\n        numDigits = 0;\n        numBlocks = 0;\n        if (diff == 0) goto LAB_08008406;\n      }\n      else {\n        temp3 = 0;\n        numBlocks = 0;\n      }\nLAB_080084f0:\n      exp = ~precision;\n      result = pcVar21;\n      goto LAB_08008416;\n    }\n    numBlocks = extraZeros;\n    if (isScientificNotation) {\n      if ((int)format < 2) {\n        if (isNegative5) {\n          remainingDigits = numLZeros;\n          numLZeros = numLZeros + divResult[0] + 0x433;\n          numLeadingZeros = numLeadingZeros + divResult[0] + 0x433;\n        }\n        else {\n          remainingDigits = numLZeros;\n          numLZeros = numLZeros + (0x36 - blockIndex);\n          numLeadingZeros = numLeadingZeros + (0x36 - blockIndex);\n        }\n      }\n      else {\n        temp3 = temp9 - 1;\n        if (extraZeros < temp3) {\n          nonZeroDigits = nonZeroDigits + (temp3 - extraZeros);\n          numBlocks = 0;\n          extraZeros = temp3;\n        }\n        else {\n          numBlocks = extraZeros - temp3;\n        }\n        if ((int)temp9 < 0) {\n          remainingDigits = numLZeros - temp9;\n        }\n        else {\n          numLeadingZeros = numLeadingZeros + temp9;\n          remainingDigits = numLZeros;\n          numLZeros = numLZeros + temp9;\n        }\n      }\n      temp3 = initialize_memory_block_08009244(number,1);\n    }\n    else {\n      remainingDigits = numLZeros;\n      temp3 = 0;\n    }\n    if ((0 < remainingDigits) && (0 < numLeadingZeros)) {\n      numDigits = remainingDigits;\n      if (numLeadingZeros <= remainingDigits) {\n        numDigits = numLeadingZeros;\n      }\n      numLeadingZeros = numLeadingZeros - numDigits;\n      numLZeros = numLZeros - numDigits;\n      remainingDigits = remainingDigits - numDigits;\n    }\n    if (extraZeros != 0) {\n      if (isScientificNotation) {\n        temp2 = processedDigits;\n        if (numBlocks != 0) {\n          temp3 = process_data_080093a4(number,temp3,numBlocks);\n          temp2 = initialize_memory_block_08009258(number,temp3,processedDigits);\n          copy_value_and_link_to_next_0800910c(number,processedDigits);\n          processedDigits = temp2;\n          if (extraZeros - numBlocks == 0) goto LAB_08008062;\n        }\n        processedDigits = process_data_080093a4(number,temp2,extraZeros - numBlocks);\n      }\n      else {\n        processedDigits = process_data_080093a4(number,processedDigits,extraZeros);\n      }\n    }\nLAB_08008062:\n    numBlocks = initialize_memory_block_08009244(number,1);\n    if (nonZeroDigits == 0) {\n      if (((int)format < 2) && (mantissa == 0)) {\nLAB_0800835a:\n        if ((effectiveMantissa & 0xfffff) == 0) {\n          effectiveMantissa = effectiveMantissa & 0x7ff00000;\n          if (effectiveMantissa != 0) {\n            numLeadingZeros = numLeadingZeros + 1;\n            numLZeros = numLZeros + 1;\n            effectiveMantissa = 1;\n          }\n        }\n        else {\n          effectiveMantissa = 0;\n        }\n        isNegative5 = nonZeroDigits != 0;\n        adjustedExponent = mantissa;\n        nonZeroDigits = effectiveMantissa;\n        if (isNegative5) goto LAB_080082d4;\n      }\n      numDigits = 1;\n    }\n    else {\n      temp4 = process_data_080093a4(number,numBlocks);\n      numBlocks = (int)temp4;\n      if (((int)format < 2) && (mantissa == 0)) goto LAB_0800835a;\n      nonZeroDigits = 0;\n      adjustedExponent = (uint)((ulonglong)temp4 >> 0x20);\nLAB_080082d4:\n      numDigits = count_leading_zeros_080091a4(*(undefined4 *)(numBlocks + *(int *)(numBlocks + 0x10) * 4 + 0x10),adjustedExponent);\n      numDigits = 0x20 - numDigits;\n    }\n    adjustedExponent = numDigits + numLeadingZeros & 0x1f;\n    if (adjustedExponent == 0) {\n      numDigits = 0x1c;\nLAB_08008096:\n      numLeadingZeros = numLeadingZeros + numDigits;\n      numLZeros = numLZeros + numDigits;\n      remainingDigits = remainingDigits + numDigits;\n    }\n    else {\n      if (4 < (int)(0x20 - adjustedExponent)) {\n        numDigits = 0x1c - adjustedExponent;\n        goto LAB_08008096;\n      }\n      if (0x20 - adjustedExponent != 4) {\n        numDigits = 0x3c - adjustedExponent;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < numLZeros) {\n      processedDigits = initialize_memory_block_08009444(number,processedDigits,numLZeros);\n    }\n    if (0 < numLeadingZeros) {\n      numBlocks = initialize_memory_block_08009444(number,numBlocks,numLeadingZeros);\n    }\n    pcVar20 = result;\n    if ((isNegative) && (numLeadingZeros = compare_arrays_080094f8(processedDigits,numBlocks), numLeadingZeros < 0)) {\n      exp = exp - 1;\n      processedDigits = multiply_and_add_08009120(number,processedDigits,10,0);\n      if (isScientificNotation) {\n        temp3 = multiply_and_add_08009120(number,temp3,10,0);\n        if ((0 < (int)padding) || ((int)format < 3)) {\n          temp9 = padding;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)padding) || ((int)format < 3)) {\n        temp9 = padding;\n        goto LAB_0800820a;\n      }\n      temp9 = padding;\nLAB_080084e8:\n      if (temp9 == 0) {\n        numLeadingZeros = multiply_and_add_08009120(number,numBlocks,5);\n        diff = compare_arrays_080094f8(processedDigits,numLeadingZeros);\n        numDigits = temp3;\n        numBlocks = numLeadingZeros;\n        if (0 < diff) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)temp9 < 1) && (2 < (int)format)) goto LAB_080084e8;\n    if (isScientificNotation) {\nLAB_080080de:\n      temp8 = temp3;\n      if (0 < remainingDigits) {\n        temp8 = initialize_memory_block_08009444(number,temp3,remainingDigits);\n      }\n      temp3 = temp8;\n      if (nonZeroDigits != 0) {\n        temp3 = initialize_or_get_memory_block_080090c0(number,*(undefined4 *)(temp8 + 4));\n        copy_memory_08001084(temp3 + 0xc,temp8 + 0xc,(*(int *)(temp8 + 0x10) + 2) * 4);\n        temp3 = initialize_memory_block_08009444(number,temp3,1);\n      }\nLAB_08008108:\n      numLeadingZeros = divide_arrays_080078c0(processedDigits,numBlocks);\n      numDigits = compare_arrays_080094f8(processedDigits,temp8);\n      diff = compare_and_update_blocks_08009530(number,numBlocks,temp3);\n      numShifts = numLeadingZeros + 0x30;\n      if (*(int *)(diff + 0xc) == 0) {\n        i = compare_arrays_080094f8(processedDigits);\n        copy_value_and_link_to_next_0800910c(number,diff);\n        if ((i != 0) || (format != 0)) goto LAB_0800815a;\n        if ((mantissa & 1) != 0) {\n          i = 0;\n          goto LAB_0800815a;\n        }\n        if (numShifts != 0x39) {\n          if (0 < numDigits) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar21 = pcVar20 + 1;\n        digit = '9';\n        *pcVar20 = '9';\n        goto LAB_08008268;\n      }\n      copy_value_and_link_to_next_0800910c(number,diff);\n      i = 1;\nLAB_0800815a:\n      if ((numDigits < 0) || (((numDigits == 0 && (format == 0)) && ((mantissa & 1) == 0)))) {\n        if (0 < i) {\n          processedDigits = initialize_memory_block_08009444(number,processedDigits,1);\n          numDigits = compare_arrays_080094f8(processedDigits,numBlocks);\n          if ((0 < numDigits) || ((numDigits == 0 && (numLeadingZeros << 0x1f < 0)))) {\n            if (numShifts == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            numShifts = numLeadingZeros + 0x31;\n          }\n        }\nLAB_080085a4:\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)numShifts;\n        goto LAB_08008274;\n      }\n      pcVar21 = pcVar20 + 1;\n      if (0 < i) {\n        if (numShifts == 0x39) goto LAB_08008752;\n        *pcVar20 = (char)numLeadingZeros + '1';\n        goto LAB_08008274;\n      }\n      *pcVar20 = (char)numShifts;\n      if (result + (temp9 - 1) != pcVar20) {\n        processedDigits = multiply_and_add_08009120(number,processedDigits,10,0);\n        pcVar20 = pcVar21;\n        if (temp8 == temp3) {\n          temp8 = multiply_and_add_08009120(number,temp8,10,0);\n          temp3 = temp8;\n        }\n        else {\n          temp8 = multiply_and_add_08009120(number,temp8,10,0);\n          temp3 = multiply_and_add_08009120(number,temp3,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        numShifts = divide_arrays_080078c0(processedDigits,numBlocks);\n        numShifts = numShifts + 0x30;\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)numShifts;\n        if ((int)temp9 <= (int)pcVar21 - (int)result) break;\n        processedDigits = multiply_and_add_08009120(number,processedDigits,10,0);\n        pcVar20 = pcVar21;\n      }\n      temp8 = 0;\n    }\n    processedDigits = initialize_memory_block_08009444(number,processedDigits,1);\n    numLeadingZeros = compare_arrays_080094f8(processedDigits,numBlocks);\n    digit = pcVar21[-1];\n    if ((0 < numLeadingZeros) || ((numLeadingZeros == 0 && (numShifts << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar20 = pcVar21 + -1;\n        if (digit != '9') goto code_r0x08008270;\n        if (result == pcVar20) {\n          *result = '1';\n          exp = exp + 1;\n          goto LAB_08008274;\n        }\n        digit = pcVar21[-2];\n        pcVar21 = pcVar20;\n      } while( true );\n    }\n    while (digit == '0') {\n      digit = pcVar21[-2];\n      pcVar21 = pcVar21 + -1;\n    }\nLAB_08008274:\n    copy_value_and_link_to_next_0800910c(number,numBlocks);\n    if (temp3 == 0) goto LAB_08008294;\n    if ((temp8 != 0) && (temp8 != temp3)) {\n      copy_value_and_link_to_next_0800910c(number);\n    }\n  }\n  copy_value_and_link_to_next_0800910c(number,temp3);\nLAB_08008294:\n  copy_value_and_link_to_next_0800910c(number,processedDigits);\n  *pcVar21 = '\\0';\n  *sign = exp + 1;\n  if (stringValue == (char **)0x0) {\n    return result;\n  }\n  *stringValue = pcVar21;\n  return result;\ncode_r0x08008270:\n  *pcVar20 = digit + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "renaming": {
                "FUN_080079e8": "convert_number_to_string_080079e8",
                "param_1": "number",
                "param_2": "param2",
                "param_3": "mantissa",
                "param_4": "exponent",
                "param_5": "format",
                "param_6": "precision",
                "param_7": "sign",
                "param_8": "isInfinity",
                "param_9": "stringValue",
                "bVar1": "shouldMoveDecimal",
                "bVar2": "isNegative",
                "bVar3": "isScientificNotation",
                "cVar4": "digit",
                "bVar5": "carry",
                "uVar6": "processedDigits",
                "iVar7": "numDigits",
                "iVar8": "i",
                "iVar9": "diff",
                "pcVar10": "result",
                "uVar11": "temp",
                "uVar12": "temp1",
                "uVar13": "temp2",
                "iVar14": "numBlocks",
                "iVar15": "numLeadingZeros",
                "iVar19": "temp3",
                "iVar24": "numShifts",
                "uVar26": "temp4",
                "uVar27": "temp5",
                "uVar28": "temp6",
                "uStack_44": "temp7",
                "local_48": "lowerBound",
                "uVar16": "factor1",
                "uVar17": "effectiveMantissa",
                "uVar18": "adjustedExponent",
                "local_80": "temp8",
                "local_7c": "absoluteExponent",
                "local_74": "exp",
                "local_70": "numLZeros",
                "local_68": "temp9",
                "local_60": "remainingDigits",
                "local_5c": "extraZeros",
                "local_58": "nonZeroDigits",
                "local_38": "padding",
                "local_34": "previousDigits",
                "local_30": "blockIndex",
                "local_2c": "divResult"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080009d4",
                "FUN_080004c8",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_0800119c",
                "FUN_080091a4",
                "FUN_080090c0",
                "FUN_0800015c",
                "FUN_080003f4",
                "FUN_08000998",
                "FUN_080094f8",
                "FUN_08000158",
                "FUN_08009120",
                "FUN_080009e8",
                "FUN_080093a4",
                "FUN_080078c0",
                "FUN_080003d4",
                "FUN_080009ac",
                "FUN_0800910c",
                "FUN_08001084",
                "FUN_08009258",
                "FUN_08009444",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800884c": {
            "entrypoint": "0x0800884c",
            "current_name": "reverse_and_initialize_memory_0800884c",
            "code": "\nundefined4 reverse_and_initialize_memory_0800884c(undefined4 parameter1,int parameter2)\n\n{\n  int allocated_address1;\n  int allocated_address2;\n  uint masked_variable;\n  \n  initialize_data_structure();\n  masked_variable = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  allocated_address2 = ((0xfef - parameter2) + masked_variable & 0xfffff000) - 0x1000;\n  if (0xfff < allocated_address2) {\n    allocated_address1 = allocate_and_check_memory(parameter1,0);\n    if (allocated_address1 == DAT_20000454 + masked_variable) {\n      allocated_address1 = allocate_and_check_memory(parameter1,-allocated_address2);\n      if (allocated_address1 != -1) {\n        DAT_20000a14 = DAT_20000a14 - allocated_address2;\n        *(uint *)(DAT_20000454 + 4) = masked_variable - allocated_address2 | 1;\n        initialize_data(parameter1);\n        return 1;\n      }\n      allocated_address2 = allocate_and_check_memory(parameter1,0);\n      if (0xf < allocated_address2 - DAT_20000454) {\n        DAT_20000a14 = allocated_address2 - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = allocated_address2 - DAT_20000454 | 1;\n      }\n    }\n  }\n  initialize_data(parameter1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800884c": "reverse_and_initialize_memory_0800884c",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "iVar1": "allocated_address1",
                "iVar2": "allocated_address2",
                "uVar3": "masked_variable",
                "initialize_data_structure_080090a8": "initialize_data_structure",
                "allocate_and_check_memory_08009744": "allocate_and_check_memory",
                "initialize_data_080090b4": "initialize_data"
            },
            "calling": [
                "FUN_080088ec"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009744",
                "FUN_080090b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088ec": {
            "entrypoint": "0x080088ec",
            "current_name": "initialize_data_structure_080088ec",
            "code": "\nvoid initialize_data_structure_080088ec(undefined4 arg1,int arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  int loop_index;\n  uint *current_ptr;\n  uint *next_ptr;\n  undefined *temp_ptr;\n  uint total_size;\n  uint next_size;\n  undefined *prev_ptr;\n  undefined *new_prev_ptr;\n  undefined4 *temp_ptr2;\n  int size_index;\n  uint flags;\n  uint other_flags;\n  \n  if (arg2 == 0) {\n    return;\n  }\n  initialize_data_structure_080088ec_080090a8();\n  flags = *(uint *)(arg2 + -4);\n  current_ptr = (uint *)(arg2 + -8);\n  total_size = flags & 0xfffffffe;\n  next_ptr = (uint *)((int)current_ptr + total_size);\n  next_size = next_ptr[1] & 0xfffffffc;\n  if (DAT_20000454 == next_ptr) {\n    total_size = total_size + next_size;\n    if ((flags & 1) == 0) {\n      current_ptr = (uint *)((int)current_ptr - *(int *)(arg2 + -8));\n      next_size = current_ptr[2];\n      flags = current_ptr[3];\n      total_size = total_size + *(int *)(arg2 + -8);\n      *(uint *)(next_size + 0xc) = flags;\n      *(uint *)(flags + 8) = next_size;\n    }\n    next_size = DAT_20000858;\n    current_ptr[1] = total_size | 1;\n    DAT_20000454 = current_ptr;\n    if (next_size <= total_size) {\n      reverse_and_initialize_memory_0800884c(arg1,DAT_20000a44);\n    }\nLAB_080089f0:\n    initialize_data_080090b4(arg1);\n    return;\n  }\n  next_ptr[1] = next_size;\n  if ((flags & 1) == 0) {\n    current_ptr = (uint *)((int)current_ptr - *(int *)(arg2 + -8));\n    temp_ptr2 = (undefined4 *)current_ptr[2];\n    total_size = total_size + *(int *)(arg2 + -8);\n    flags = *(uint *)((int)next_ptr + next_size + 4) & 1;\n    if ((uint **)temp_ptr2 == &DAT_20000454) {\n      if (flags == 0) {\n        flags = next_ptr[2];\n        other_flags = next_ptr[3];\n        total_size = total_size + next_size;\n        *(uint *)(flags + 0xc) = other_flags;\n        *(uint *)(other_flags + 8) = flags;\n        current_ptr[1] = total_size | 1;\n        *(uint *)((int)current_ptr + total_size) = total_size;\n      }\n      else {\n        current_ptr[1] = total_size | 1;\n        *next_ptr = total_size;\n      }\n      goto LAB_080089f0;\n    }\n    other_flags = current_ptr[3];\n    temp_ptr2[3] = other_flags;\n    *(undefined4 **)(other_flags + 8) = temp_ptr2;\n  }\n  else {\n    flags = *(uint *)((int)next_ptr + next_size + 4) & 1;\n  }\n  if (flags == 0) {\n    temp_ptr2 = (undefined4 *)next_ptr[2];\n    total_size = total_size + next_size;\n    if ((uint **)temp_ptr2 == &DAT_20000454) {\n      DAT_2000045c = current_ptr;\n      DAT_20000460 = current_ptr;\n      current_ptr[2] = (uint)&DAT_20000454;\n      current_ptr[3] = (uint)&DAT_20000454;\n      current_ptr[1] = total_size | 1;\n      *(uint *)((int)current_ptr + total_size) = total_size;\n      goto LAB_080089f0;\n    }\n    next_size = next_ptr[3];\n    temp_ptr2[3] = next_size;\n    *(undefined4 **)(next_size + 8) = temp_ptr2;\n    current_ptr[1] = total_size | 1;\n    *(uint *)((int)current_ptr + total_size) = total_size;\n  }\n  else {\n    current_ptr[1] = total_size | 1;\n    *(uint *)((int)current_ptr + total_size) = total_size;\n  }\n  if (total_size < 0x200) {\n    size_index = (total_size >> 3) + 1;\n    total_size = 1 << ((int)(total_size >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    next_size = *(uint *)(&DAT_2000044c + size_index * 8);\n    current_ptr[2] = next_size;\n    current_ptr[3] = (uint)(&DAT_20000444 + size_index * 8);\n    DAT_20000450 = (undefined *)total_size;\n    *(uint **)(&DAT_2000044c + size_index * 8) = current_ptr;\n    *(uint **)(next_size + 0xc) = current_ptr;\n    initialize_data_080090b4(arg1,current_ptr,total_size,arg4);\n    return;\n  }\n  next_size = total_size >> 9;\n  if (next_size < 5) {\n    size_index = ((total_size >> 6) + 0x39) * 8;\n    loop_index = (total_size >> 6) + 0x38;\n  }\n  else if (next_size < 0x15) {\n    size_index = (next_size + 0x5c) * 8;\n    loop_index = next_size + 0x5b;\n  }\n  else if (next_size < 0x55) {\n    size_index = ((total_size >> 0xc) + 0x6f) * 8;\n    loop_index = (total_size >> 0xc) + 0x6e;\n  }\n  else if (next_size < 0x155) {\n    size_index = ((total_size >> 0xf) + 0x78) * 8;\n    loop_index = (total_size >> 0xf) + 0x77;\n  }\n  else if (next_size < 0x555) {\n    size_index = ((total_size >> 0x12) + 0x7d) * 8;\n    loop_index = (total_size >> 0x12) + 0x7c;\n  }\n  else {\n    size_index = 0x3f8;\n    loop_index = 0x7e;\n  }\n  temp_ptr = *(undefined **)(&DAT_2000044c + size_index);\n  prev_ptr = &DAT_20000444 + size_index;\n  if (prev_ptr == temp_ptr) {\n    temp_ptr = (undefined *)(1 << (loop_index >> 2 & 0xffU) | (uint)DAT_20000450);\n    new_prev_ptr = prev_ptr;\n    DAT_20000450 = temp_ptr;\n  }\n  else {\n    do {\n      new_prev_ptr = temp_ptr;\n      if ((*(uint *)(temp_ptr + 4) & 0xfffffffc) <= total_size) break;\n      temp_ptr = *(undefined **)(temp_ptr + 8);\n      new_prev_ptr = prev_ptr;\n    } while (prev_ptr != temp_ptr);\n    prev_ptr = *(undefined **)(new_prev_ptr + 0xc);\n  }\n  current_ptr[2] = (uint)new_prev_ptr;\n  current_ptr[3] = (uint)prev_ptr;\n  *(uint **)(prev_ptr + 8) = current_ptr;\n  *(uint **)(new_prev_ptr + 0xc) = current_ptr;\n  initialize_data_080090b4(arg1,current_ptr,temp_ptr,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088ec": "initialize_data_structure_080088ec",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "loop_index",
                "puVar2": "current_ptr",
                "puVar3": "next_ptr",
                "puVar4": "temp_ptr",
                "uVar5": "total_size",
                "uVar6": "next_size",
                "puVar7": "prev_ptr",
                "puVar8": "new_prev_ptr",
                "puVar9": "temp_ptr2",
                "iVar10": "size_index",
                "uVar11": "flags",
                "uVar12": "other_flags"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_0800884c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "entrypoint": "0x08008ad4",
            "current_name": "get_updated_value_08008ad4",
            "code": "\nint getUpdatedValue_08008ad4(void)\n\n{\n  int currentValue;\n  \n  currentValue = *(int *)(DAT_2000001c + 0x34);\n  if (currentValue == 0) {\n    currentValue = 0x2000085c;\n  }\n  return currentValue + 0xf0;\n}\n\n",
            "renaming": {
                "FUN_08008ad4": "get_updated_value_08008ad4",
                "iVar1": "currentValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "FUNC_08008af0",
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af4": {
            "entrypoint": "0x08008af4",
            "current_name": "FUNC_08008af4",
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af8": {
            "entrypoint": "0x08008af8",
            "current_name": "allocate_and_initialize_memory_08008af8",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_and_initialize_memory_08008af8(undefined4 *input_ptr,uint size)\n\n{\n  undefined *pointer_1;\n  uint temp_var1;\n  uint temp_var2;\n  int index_var1;\n  undefined *pointer_2;\n  uint loop_var1;\n  uint loop_var2;\n  undefined4 *pointer_3;\n  undefined *pointer_4;\n  undefined *pointer_5;\n  int *result_ptr;\n  uint modified_size;\n  uint modified_value;\n  int index_var2;\n  undefined4 *pointer_6;\n  undefined4 *pointer_7;\n  \n  modified_size = size + 0xb;\n  if (modified_size < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    initialize_data_structure_080090a8();\n    modified_value = 0x10;\n    index_var1 = 0x18;\n    modified_size = 2;\nLAB_08008b18:\n    pointer_5 = *(undefined **)((int)&DAT_20000450 + index_var1);\n    if ((pointer_5 != &DAT_20000444 + index_var1) ||\n       (pointer_5 = *(undefined **)((int)&DAT_20000458 + index_var1), &DAT_2000044c + index_var1 != pointer_5)) {\n      index_var1 = *(int *)(pointer_5 + 0xc);\n      pointer_2 = pointer_5 + (*(uint *)(pointer_5 + 4) & 0xfffffffc);\n      modified_size = *(uint *)(pointer_2 + 4);\nLAB_08008b34:\n      index_var2 = *(int *)(pointer_5 + 8);\n      *(int *)(index_var2 + 0xc) = index_var1;\n      *(int *)(index_var1 + 8) = index_var2;\n      *(uint *)(pointer_2 + 4) = modified_size | 1;\n      initialize_data_080090b4(input_ptr);\n      return (int *)(pointer_5 + 8);\n    }\n    modified_size = modified_size + 2;\n  }\n  else {\n    modified_value = modified_size & 0xfffffff8;\n    if (((int)modified_value < 0) || (modified_value < size)) {\nLAB_08008c7a:\n      *input_ptr = 0xc;\n      return (int *)0x0;\n    }\n    initialize_data_structure_080090a8();\n    if (modified_value < 0x1f8) {\n      modified_size = modified_size >> 3;\n      index_var1 = modified_value + 8;\n      goto LAB_08008b18;\n    }\n    temp_var1 = modified_size >> 9;\n    if (temp_var1 == 0) {\n      index_var1 = 0x200;\n      loop_var1 = 0x40;\n      temp_var1 = 0x3f;\n    }\n    else if (temp_var1 < 5) {\n      loop_var1 = (modified_size >> 6) + 0x39;\n      temp_var1 = (modified_size >> 6) + 0x38;\n      index_var1 = loop_var1 * 8;\n    }\n    else if (temp_var1 < 0x15) {\n      loop_var1 = temp_var1 + 0x5c;\n      temp_var1 = temp_var1 + 0x5b;\n      index_var1 = loop_var1 * 8;\n    }\n    else if (temp_var1 < 0x55) {\n      loop_var1 = (modified_size >> 0xc) + 0x6f;\n      temp_var1 = (modified_size >> 0xc) + 0x6e;\n      index_var1 = loop_var1 * 8;\n    }\n    else if (temp_var1 < 0x155) {\n      loop_var1 = (modified_size >> 0xf) + 0x78;\n      temp_var1 = (modified_size >> 0xf) + 0x77;\n      index_var1 = loop_var1 * 8;\n    }\n    else if (temp_var1 < 0x555) {\n      loop_var1 = (modified_size >> 0x12) + 0x7d;\n      temp_var1 = (modified_size >> 0x12) + 0x7c;\n      index_var1 = loop_var1 * 8;\n    }\n    else {\n      index_var1 = 0x3f8;\n      loop_var1 = 0x7f;\n      temp_var1 = 0x7e;\n    }\n    for (pointer_5 = *(undefined **)((int)&DAT_20000450 + index_var1); modified_size = loop_var1,\n        &DAT_20000444 + index_var1 != pointer_5; pointer_5 = *(undefined **)(pointer_5 + 0xc)) {\n      index_var2 = (*(uint *)(pointer_5 + 4) & 0xfffffffc) - modified_value;\n      modified_size = temp_var1;\n      if (0xf < index_var2) break;\n      if (-1 < index_var2) {\n        pointer_2 = pointer_5 + (*(uint *)(pointer_5 + 4) & 0xfffffffc);\n        modified_size = *(uint *)(pointer_2 + 4);\n        index_var1 = *(int *)(pointer_5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  pointer_6 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    loop_var1 = 1 << ((int)modified_size >> 2 & 0xffU);\n    temp_var1 = DAT_20000450;\n    if (loop_var1 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    loop_var1 = DAT_2000045c[1];\n    loop_var2 = loop_var1 & 0xfffffffc;\n    temp_var1 = loop_var2 - modified_value;\n    if (0xf < (int)temp_var1) {\n      pointer_7 = (undefined4 *)(modified_value + (int)DAT_2000045c);\n      DAT_2000045c[1] = modified_value | 1;\n      DAT_2000045c = pointer_7;\n      DAT_20000460 = pointer_7;\n      pointer_7[2] = &DAT_20000454;\n      pointer_7[3] = &DAT_20000454;\n      pointer_7[1] = temp_var1 | 1;\n      *(uint *)((int)pointer_6 + loop_var2) = temp_var1;\n      initialize_data_080090b4(input_ptr);\n      return pointer_6 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)temp_var1) {\n      *(uint *)((int)pointer_6 + loop_var2 + 4) = *(uint *)((int)pointer_6 + loop_var2 + 4) | 1;\n      initialize_data_080090b4(input_ptr);\n      return pointer_6 + 2;\n    }\n    if (loop_var2 < 0x200) {\n      index_var1 = (loop_var1 >> 3) + 1;\n      index_var2 = *(int *)(&DAT_2000044c + index_var1 * 8);\n      temp_var1 = 1 << ((int)(loop_var1 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      pointer_6[2] = index_var2;\n      pointer_6[3] = &DAT_20000444 + index_var1 * 8;\n      DAT_20000450 = temp_var1;\n      *(undefined4 **)(&DAT_2000044c + index_var1 * 8) = pointer_6;\n      *(undefined4 **)(index_var2 + 0xc) = pointer_6;\n    }\n    else {\n      temp_var1 = loop_var1 >> 9;\n      if (temp_var1 < 5) {\n        index_var1 = ((loop_var1 >> 6) + 0x39) * 8;\n        index_var2 = (loop_var1 >> 6) + 0x38;\n      }\n      else if (temp_var1 < 0x15) {\n        index_var1 = (temp_var1 + 0x5c) * 8;\n        index_var2 = temp_var1 + 0x5b;\n      }\n      else if (temp_var1 < 0x55) {\n        index_var1 = ((loop_var1 >> 0xc) + 0x6f) * 8;\n        index_var2 = (loop_var1 >> 0xc) + 0x6e;\n      }\n      else if (temp_var1 < 0x155) {\n        index_var1 = ((loop_var1 >> 0xf) + 0x78) * 8;\n        index_var2 = (loop_var1 >> 0xf) + 0x77;\n      }\n      else if (temp_var1 < 0x555) {\n        index_var1 = ((loop_var1 >> 0x12) + 0x7d) * 8;\n        index_var2 = (loop_var1 >> 0x12) + 0x7c;\n      }\n      else {\n        index_var1 = 0x3f8;\n        index_var2 = 0x7e;\n      }\n      pointer_5 = *(undefined **)(&DAT_2000044c + index_var1);\n      pointer_2 = &DAT_20000444 + index_var1;\n      if (pointer_2 == pointer_5) {\n        DAT_20000450 = 1 << (index_var2 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(pointer_5 + 4) & 0xfffffffc) <= loop_var2) break;\n          pointer_5 = *(undefined **)(pointer_5 + 8);\n        } while (pointer_2 != pointer_5);\n        pointer_2 = *(undefined **)(pointer_5 + 0xc);\n      }\n      temp_var1 = DAT_20000450;\n      pointer_6[2] = pointer_5;\n      pointer_6[3] = pointer_2;\n      *(undefined4 **)(pointer_2 + 8) = pointer_6;\n      *(undefined4 **)(pointer_5 + 0xc) = pointer_6;\n    }\n    loop_var1 = 1 << ((int)modified_size >> 2 & 0xffU);\n    if (loop_var1 <= temp_var1) {\nLAB_08008c06:\n      if ((loop_var1 & temp_var1) == 0) {\n        modified_size = modified_size & 0xfffffffc;\n        do {\n          loop_var1 = loop_var1 << 1;\n          modified_size = modified_size + 4;\n        } while ((loop_var1 & temp_var1) == 0);\n      }\n      do {\n        pointer_7 = (undefined4 *)(&DAT_2000044c + modified_size * 8);\n        temp_var1 = modified_size;\n        pointer_6 = pointer_7;\n        do {\n          for (pointer_3 = (undefined4 *)pointer_6[3]; pointer_6 != pointer_3;\n              pointer_3 = (undefined4 *)pointer_3[3]) {\n            loop_var2 = pointer_3[1] & 0xfffffffc;\n            temp_var2 = loop_var2 - modified_value;\n            if (0xf < (int)temp_var2) {\n              index_var2 = pointer_3[2];\n              index_var1 = pointer_3[3];\n              pointer_6 = (undefined4 *)(modified_value + (int)pointer_3);\n              pointer_3[1] = modified_value | 1;\n              *(int *)(index_var2 + 0xc) = index_var1;\n              *(int *)(index_var1 + 8) = index_var2;\n              DAT_2000045c = pointer_6;\n              DAT_20000460 = pointer_6;\n              pointer_6[2] = &DAT_20000454;\n              pointer_6[3] = &DAT_20000454;\n              pointer_6[1] = temp_var2 | 1;\n              *(uint *)((int)pointer_3 + loop_var2) = temp_var2;\n              initialize_data_080090b4(input_ptr);\n              return pointer_3 + 2;\n            }\n            if (-1 < (int)temp_var2) {\n              index_var1 = pointer_3[3];\n              index_var2 = pointer_3[2];\n              *(uint *)((int)pointer_3 + loop_var2 + 4) = *(uint *)((int)pointer_3 + loop_var2 + 4) | 1;\n              *(int *)(index_var2 + 0xc) = index_var1;\n              *(int *)(index_var1 + 8) = index_var2;\n              initialize_data_080090b4(input_ptr);\n              return pointer_3 + 2;\n            }\n          }\n          temp_var1 = temp_var1 + 1;\n          pointer_6 = pointer_6 + 2;\n        } while ((temp_var1 & 3) != 0);\n        do {\n          loop_var2 = modified_size & 3;\n          pointer_6 = pointer_7 + -2;\n          modified_size = modified_size - 1;\n          if (loop_var2 == 0) {\n            DAT_20000450 = DAT_20000450 & ~loop_var1;\n            break;\n          }\n          pointer_7 = (undefined4 *)*pointer_7;\n        } while (pointer_7 == pointer_6);\n        loop_var1 = loop_var1 * 2;\n        if ((DAT_20000450 <= loop_var1 && loop_var1 - DAT_20000450 != 0) || (modified_size = temp_var1, loop_var1 == 0))\n        break;\n        for (; (loop_var1 & DAT_20000450) == 0; loop_var1 = loop_var1 << 1) {\n          modified_size = modified_size + 4;\n        }\n      } while( true );\n    }\n  }\n  pointer_5 = DAT_20000454;\n  modified_size = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((modified_value <= modified_size) && (temp_var1 = modified_size - modified_value, 0xf < (int)temp_var1)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    temp_var1 = modified_value + DAT_20000a44 + 0x10;\n  }\n  else {\n    temp_var1 = modified_value + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  pointer_2 = (undefined *)allocate_and_check_memory_08009744(input_ptr,temp_var1);\n  if (pointer_2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    modified_size = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    pointer_1 = pointer_5 + modified_size;\n    if (pointer_1 < pointer_2 || pointer_1 == pointer_2) {\n      pointer_4 = DAT_20000a14 + temp_var1;\n      if ((pointer_1 != pointer_2) || (((uint)pointer_1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = pointer_4;\n      *(uint *)(DAT_20000454 + 4) = modified_size + temp_var1 | 1;\n    }\n    else {\n      if (pointer_5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + temp_var1;\n      pointer_4 = pointer_2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)pointer_2 - (int)pointer_1);\n        pointer_4 = DAT_20000854;\n      }\n      DAT_20000854 = pointer_4;\n      loop_var1 = (uint)pointer_2 & 7;\n      if (loop_var1 == 0) {\n        index_var1 = 0x1000;\n      }\n      else {\n        pointer_2 = pointer_2 + (8 - loop_var1);\n        index_var1 = 0x1008 - loop_var1;\n      }\n      index_var1 = index_var1 - ((uint)(pointer_2 + temp_var1) & 0xfff);\n      index_var2 = allocate_and_check_memory_08009744(input_ptr,index_var1);\n      if (index_var2 == -1) {\n        temp_var1 = 1;\n        index_var1 = 0;\n      }\n      else {\n        temp_var1 = (index_var2 - (int)pointer_2) + index_var1 | 1;\n      }\n      pointer_4 = DAT_20000a14 + index_var1;\n      DAT_20000454 = pointer_2;\n      DAT_20000a14 = pointer_4;\n      *(uint *)(pointer_2 + 4) = temp_var1;\n      if (pointer_5 != &DAT_2000044c) {\n        if (modified_size < 0x10) {\n          *(undefined4 *)(pointer_2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        modified_size = modified_size - 0xc & 0xfffffff8;\n        *(uint *)(pointer_5 + 4) = *(uint *)(pointer_5 + 4) & 1 | modified_size;\n        *(undefined4 *)(pointer_5 + modified_size + 4) = 5;\n        *(undefined4 *)(pointer_5 + modified_size + 8) = 5;\n        if (0xf < modified_size) {\n          initialize_data_structure_080088ec(input_ptr,pointer_5 + 8);\n          pointer_4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < pointer_4) {\n      DAT_20000a3c = pointer_4;\n    }\n    modified_size = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < pointer_4) {\n      DAT_20000a40 = pointer_4;\n    }\n  }\n  temp_var1 = (modified_size & 0xfffffffc) - modified_value;\n  if ((modified_value <= (modified_size & 0xfffffffc)) && (0xf < (int)temp_var1)) {\nLAB_08008dac:\n    pointer_5 = DAT_20000454 + modified_value;\n    *(uint *)(DAT_20000454 + 4) = modified_value | 1;\n    result_ptr = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = pointer_5;\n    *(uint *)(pointer_5 + 4) = temp_var1 | 1;\n    initialize_data_080090b4(input_ptr);\n    return result_ptr;\n  }\nLAB_08008eee:\n  initialize_data_080090b4(input_ptr);\n  return (int *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08008af8": "allocate_and_initialize_memory_08008af8",
                "param_1": "input_ptr",
                "param_2": "size",
                "puVar1": "pointer_1",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "iVar4": "index_var1",
                "puVar5": "pointer_2",
                "uVar6": "loop_var1",
                "uVar7": "loop_var2",
                "puVar8": "pointer_3",
                "puVar9": "pointer_4",
                "puVar10": "pointer_5",
                "piVar11": "result_ptr",
                "uVar12": "modified_size",
                "uVar13": "modified_value",
                "iVar14": "index_var2",
                "puVar15": "pointer_6",
                "puVar16": "pointer_7"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08009980"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080088ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800901c": {
            "entrypoint": "0x0800901c",
            "current_name": "find_u_var1_0800901c",
            "code": "\nuint * find_uVar1_0800901c(uint *input_array,uint key,uint array_length)\n\n{\n  uint result;\n  uint combined_key;\n  uint *current_element;\n  uint lowest_byte;\n  bool is_last_element;\n  \n  lowest_byte = key & 0xff;\n  if (((uint)input_array & 3) == 0) {\nLAB_0800904a:\n    if (3 < array_length) {\n      combined_key = (key & 0xff) << 8 | lowest_byte;\n      current_element = input_array;\n      do {\n        result = *current_element ^ (combined_key | combined_key << 0x10);\n        input_array = current_element + 1;\n        if ((result + 0xfefefeff & ~result & 0x80808080) != 0) goto LAB_08009050;\n        array_length = array_length - 4;\n        current_element = input_array;\n      } while (3 < array_length);\n    }\n    current_element = input_array;\n    if (array_length == 0) {\n      input_array = (uint *)0x0;\n    }\n    else {\nLAB_08009050:\n      input_array = current_element;\n      if (*(byte *)input_array != lowest_byte) {\n        current_element = (uint *)(array_length + (int)input_array);\n        do {\n          input_array = (uint *)((int)input_array + 1);\n          if (current_element == input_array) goto LAB_0800906c;\n        } while (*(byte *)input_array != lowest_byte);\n      }\n    }\n  }\n  else {\n    combined_key = array_length - 1;\n    if (array_length == 0) {\nLAB_0800906c:\n      input_array = (uint *)0x0;\n    }\n    else if (*(byte *)input_array != lowest_byte) {\n      current_element = (uint *)((int)input_array + 1);\n      do {\n        input_array = current_element;\n        array_length = combined_key;\n        if (((uint)input_array & 3) == 0) goto LAB_0800904a;\n        is_last_element = combined_key == 0;\n        combined_key = combined_key - 1;\n        if (is_last_element) goto LAB_0800906c;\n        current_element = (uint *)((int)input_array + 1);\n      } while (*(byte *)input_array != lowest_byte);\n    }\n  }\n  return input_array;\n}\n\n",
            "renaming": {
                "FUN_0800901c": "find_u_var1_0800901c",
                "param_1": "input_array",
                "param_2": "key",
                "param_3": "array_length",
                "uVar1": "result",
                "uVar2": "combined_key",
                "puVar3": "current_element",
                "uVar4": "lowest_byte",
                "bVar5": "is_last_element"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090a8": {
            "entrypoint": "0x080090a8",
            "current_name": "initialize_data_structure_080090a8",
            "code": "\nvoid initialize_data_structure_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090a8": "initialize_data_structure_080090a8"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initialize_data_080090b4",
            "code": "\nvoid initializeData_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initialize_data_080090b4"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c0": {
            "entrypoint": "0x080090c0",
            "current_name": "initialize_or_get_memory_block_080090c0",
            "code": "\nundefined4 * initializeOrGetMemoryBlock_080090c0(int memoryBlockPtr,uint index)\n\n{\n  undefined4 *pointerToBlock;\n  int blockAddress;\n  \n  blockAddress = *(int *)(memoryBlockPtr + 0x4c);\n  if (blockAddress == 0) {\n    blockAddress = initialize_memory_08009980(memoryBlockPtr,4,0x21);\n    *(int *)(memoryBlockPtr + 0x4c) = blockAddress;\n    if (blockAddress == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  pointerToBlock = *(undefined4 **)(blockAddress + index * 4);\n  if (pointerToBlock == (undefined4 *)0x0) {\n    blockAddress = 1 << (index & 0xff);\n    pointerToBlock = (undefined4 *)initialize_memory_08009980(memoryBlockPtr,1,(blockAddress + 5) * 4);\n    if (pointerToBlock == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    pointerToBlock[1] = index;\n    pointerToBlock[2] = blockAddress;\n  }\n  else {\n    *(undefined4 *)(blockAddress + index * 4) = *pointerToBlock;\n  }\n  pointerToBlock[3] = 0;\n  pointerToBlock[4] = 0;\n  return pointerToBlock;\n}\n\n",
            "renaming": {
                "FUN_080090c0": "initialize_or_get_memory_block_080090c0",
                "param_1": "memoryBlockPtr",
                "param_2": "index",
                "puVar1": "pointerToBlock",
                "iVar2": "blockAddress"
            },
            "calling": [
                "FUN_08009244",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_08009120",
                "FUN_080093a4",
                "FUN_08009258",
                "FUN_08009444",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800910c": {
            "entrypoint": "0x0800910c",
            "current_name": "copy_value_and_link_to_next_0800910c",
            "code": "\nvoid copyValueAndLinkToNext_0800910c(int ptr1,undefined4 *ptr2)\n\n{\n  int ptr3;\n  \n  if (ptr2 != (undefined4 *)0x0) {\n    ptr3 = *(int *)(ptr1 + 0x4c);\n    *ptr2 = *(undefined4 *)(ptr3 + ptr2[1] * 4);\n    *(undefined4 **)(ptr3 + ptr2[1] * 4) = ptr2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800910c": "copy_value_and_link_to_next_0800910c",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "iVar1": "ptr3"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009120": {
            "entrypoint": "0x08009120",
            "current_name": "multiply_and_add_08009120",
            "code": "\nundefined4 * multiplyAndAdd_08009120(int input,undefined4 *array,int multiplier,uint accumulator)\n\n{\n  undefined4 *result;\n  uint temp;\n  int arraySize;\n  uint *arrayPtr;\n  int counter;\n  \n  counter = 0;\n  arraySize = array[4];\n  arrayPtr = array + 5;\n  do {\n    counter = counter + 1;\n    accumulator = multiplier * (*arrayPtr & 0xffff) + accumulator;\n    temp = multiplier * (*arrayPtr >> 0x10) + (accumulator >> 0x10);\n    *arrayPtr = (accumulator & 0xffff) + temp * 0x10000;\n    accumulator = temp >> 0x10;\n    arrayPtr = arrayPtr + 1;\n  } while (counter < arraySize);\n  result = array;\n  if (accumulator != 0) {\n    if ((int)array[2] <= arraySize) {\n      result = (undefined4 *)initialize_or_get_memory_block_080090c0(input,array[1] + 1);\n      copy_memory_08001084(result + 3,array + 3,(array[4] + 2) * 4);\n      counter = *(int *)(input + 0x4c);\n      *array = *(undefined4 *)(counter + array[1] * 4);\n      *(undefined4 **)(counter + array[1] * 4) = array;\n    }\n    result[arraySize + 5] = accumulator;\n    result[4] = arraySize + 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009120": "multiply_and_add_08009120",
                "param_1": "input",
                "param_2": "array",
                "param_3": "multiplier",
                "param_4": "accumulator",
                "puVar1": "result",
                "uVar2": "temp",
                "iVar3": "arraySize",
                "puVar4": "arrayPtr",
                "iVar5": "counter"
            },
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a4": {
            "entrypoint": "0x080091a4",
            "current_name": "count_leading_zeros_080091a4",
            "code": "\nint countLeadingZeros_080091a4(uint input)\n\n{\n  int leadingZerosCount;\n  \n  if ((input & 0xffff0000) == 0) {\n    input = input << 0x10;\n    leadingZerosCount = 0x10;\n  }\n  else {\n    leadingZerosCount = 0;\n  }\n  if ((input & 0xff000000) == 0) {\n    input = input << 8;\n    leadingZerosCount = leadingZerosCount + 8;\n  }\n  if ((input & 0xf0000000) == 0) {\n    input = input << 4;\n    leadingZerosCount = leadingZerosCount + 4;\n  }\n  if ((input & 0xc0000000) == 0) {\n    input = input << 2;\n    leadingZerosCount = leadingZerosCount + 2;\n  }\n  if (-1 < (int)input) {\n    if ((int)(input << 1) < 0) {\n      return leadingZerosCount + 1;\n    }\n    leadingZerosCount = 0x20;\n  }\n  return leadingZerosCount;\n}\n\n",
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "param_1": "input",
                "iVar1": "leadingZerosCount"
            },
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091e4": {
            "entrypoint": "0x080091e4",
            "current_name": "count_trailing_zeros_080091e4",
            "code": "\nint countTrailingZeros_080091e4(uint *numPtr)\n\n{\n  int trailingZerosCount;\n  uint num;\n  \n  num = *numPtr;\n  if ((num & 7) == 0) {\n    if ((num & 0xffff) == 0) {\n      num = num >> 0x10;\n      trailingZerosCount = 0x10;\n    }\n    else {\n      trailingZerosCount = 0;\n    }\n    if ((num & 0xff) == 0) {\n      num = num >> 8;\n      trailingZerosCount = trailingZerosCount + 8;\n    }\n    if ((num & 0xf) == 0) {\n      num = num >> 4;\n      trailingZerosCount = trailingZerosCount + 4;\n    }\n    if ((num & 3) == 0) {\n      num = num >> 2;\n      trailingZerosCount = trailingZerosCount + 2;\n    }\n    if (-1 < (int)(num << 0x1f)) {\n      num = num >> 1;\n      if (num == 0) {\n        return 0x20;\n      }\n      trailingZerosCount = trailingZerosCount + 1;\n    }\n    *numPtr = num;\n    return trailingZerosCount;\n  }\n  if ((int)(num << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(num << 0x1e)) {\n    *numPtr = num >> 2;\n    return 2;\n  }\n  *numPtr = num >> 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080091e4": "count_trailing_zeros_080091e4",
                "param_1": "numPtr",
                "iVar1": "trailingZerosCount",
                "uVar2": "num"
            },
            "calling": [
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009244": {
            "entrypoint": "0x08009244",
            "current_name": "initialize_memory_block_08009244",
            "code": "\nvoid initializeMemoryBlock_08009244(undefined4 memoryBlockPtr,undefined4 value)\n\n{\n  int memoryBlock;\n  \n  memoryBlock = initialize_or_get_memory_block_080090c0(memoryBlockPtr,1);\n  *(undefined4 *)(memoryBlock + 0x10) = 1;\n  *(undefined4 *)(memoryBlock + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009244": "initialize_memory_block_08009244",
                "param_1": "memoryBlockPtr",
                "param_2": "value",
                "iVar1": "memoryBlock"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009258": {
            "entrypoint": "0x08009258",
            "current_name": "initialize_memory_block_08009258",
            "code": "\nvoid initializeMemoryBlock_08009258(undefined4 param1,int param2,int param3)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int totalSize;\n  uint temp1;\n  uint *ptr3;\n  uint startOffset;\n  uint *ptr4;\n  uint temp2;\n  int length1;\n  int length2;\n  uint endOffset;\n  int length3;\n  int sourceOffset;\n  uint *ptr5;\n  uint *ptr6;\n  uint *ptr7;\n  uint *ptr8;\n  uint *ptr9;\n  \n  length3 = *(int *)(param2 + 0x10);\n  length1 = *(int *)(param3 + 0x10);\n  length2 = length1;\n  sourceOffset = param2;\n  if (length3 < length1) {\n    length2 = length3;\n    length3 = length1;\n    sourceOffset = param3;\n    param3 = param2;\n  }\n  length1 = length3 + length2;\n  totalSize = *(int *)(sourceOffset + 4);\n  if (*(int *)(sourceOffset + 8) < length1) {\n    totalSize = totalSize + 1;\n  }\n  totalSize = initialize_or_get_memory_block_080090c0(param1,totalSize);\n  ptr9 = (uint *)(totalSize + 0x14);\n  ptr8 = ptr9 + length1;\n  for (ptr3 = ptr9; ptr3 < ptr8; ptr3 = ptr3 + 1) {\n    *ptr3 = 0;\n  }\n  startOffset = param3 + 0x14;\n  endOffset = startOffset + length2 * 4;\n  ptr3 = (uint *)(sourceOffset + 0x14);\n  if (startOffset < endOffset) {\n    ptr4 = (uint *)(startOffset + ((endOffset - param3) - 0x15 & 0xfffffffc));\n    ptr7 = (uint *)(param3 + 0x10);\n    do {\n      while( true ) {\n        ptr7 = ptr7 + 1;\n        startOffset = *ptr7 & 0xffff;\n        if (startOffset != 0) break;\n        startOffset = *ptr7 >> 0x10;\n        if (startOffset == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp2 = *ptr9;\n        temp1 = 0;\n        ptr1 = ptr3;\n        ptr5 = ptr9;\n        endOffset = temp2;\n        do {\n          ptr6 = ptr5;\n          temp1 = temp1 + startOffset * *(ushort *)ptr1 + (endOffset >> 0x10);\n          *ptr6 = temp2 & 0xffff | temp1 * 0x10000;\n          ptr2 = ptr1 + 1;\n          endOffset = ptr6[1];\n          temp2 = startOffset * (*ptr1 >> 0x10) + (endOffset & 0xffff) + (temp1 >> 0x10);\n          temp1 = temp2 >> 0x10;\n          ptr1 = ptr2;\n          ptr5 = ptr6 + 1;\n        } while (ptr2 < ptr3 + length3);\n        ptr6[1] = temp2;\n        ptr9 = ptr9 + 1;\n        if (ptr4 == ptr7) goto LAB_0800937a;\n      }\n      endOffset = 0;\n      ptr1 = ptr9;\n      ptr5 = ptr3;\n      do {\n        ptr2 = ptr1;\n        ptr6 = ptr5 + 1;\n        temp2 = startOffset * (*ptr5 & 0xffff) + (*ptr2 & 0xffff) + endOffset;\n        temp1 = startOffset * (*ptr5 >> 0x10) + (*ptr2 >> 0x10) + (temp2 >> 0x10);\n        endOffset = temp1 >> 0x10;\n        *ptr2 = temp2 & 0xffff | temp1 * 0x10000;\n        ptr1 = ptr2 + 1;\n        ptr5 = ptr6;\n      } while (ptr6 < ptr3 + length3);\n      ptr2[1] = endOffset;\n      startOffset = *ptr7 >> 0x10;\n      if (startOffset != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptr9 = ptr9 + 1;\n    } while (ptr4 != ptr7);\n  }\nLAB_0800937a:\n  if (0 < length1) {\n    startOffset = ptr8[-1];\n    ptr8 = ptr8 + -1;\n    while ((startOffset == 0 && (length1 = length1 + -1, length1 != 0))) {\n      ptr8 = ptr8 + -1;\n      startOffset = *ptr8;\n    }\n  }\n  *(int *)(totalSize + 0x10) = length1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009258": "initialize_memory_block_08009258",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "totalSize",
                "uVar4": "temp1",
                "puVar5": "ptr3",
                "uVar6": "startOffset",
                "puVar7": "ptr4",
                "uVar8": "temp2",
                "iVar9": "length1",
                "iVar10": "length2",
                "uVar11": "endOffset",
                "iVar12": "length3",
                "iVar13": "sourceOffset",
                "puVar14": "ptr5",
                "puVar15": "ptr6",
                "puVar16": "ptr7",
                "puVar17": "ptr8",
                "puVar18": "ptr9"
            },
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080093a4": {
            "entrypoint": "0x080093a4",
            "current_name": "process_data_080093a4",
            "code": "\nundefined4 * processData_080093a4(int inputData,undefined4 *outputData,uint dataSize)\n\n{\n  int tmpVar1;\n  int tmpVar2;\n  undefined4 *block1;\n  undefined4 *block2;\n  \n  if ((dataSize & 3) != 0) {\n    outputData = (undefined4 *)\n              multiply_and_add_08009120(inputData,outputData,*(undefined4 *)(&DAT_0800a070 + ((dataSize & 3) - 1) * 4),\n                           0);\n  }\n  tmpVar2 = (int)dataSize >> 2;\n  if (tmpVar2 != 0) {\n    block2 = *(undefined4 **)(inputData + 0x48);\n    if (block2 == (undefined4 *)0x0) {\n      block2 = (undefined4 *)initialize_or_get_memory_block_080090c0(inputData,1);\n      block2[4] = 1;\n      block2[5] = 0x271;\n      *(undefined4 **)(inputData + 0x48) = block2;\n      *block2 = 0;\n    }\n    block1 = outputData;\n    if (tmpVar2 << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    tmpVar2 = tmpVar2 >> 1;\n    block1 = block2;\n    if (tmpVar2 != 0) {\n      while( true ) {\n        block2 = (undefined4 *)*block1;\n        if (block2 == (undefined4 *)0x0) {\n          block2 = (undefined4 *)initialize_memory_block_08009258(inputData,block1,block1);\n          *block1 = block2;\n          *block2 = 0;\n        }\n        block1 = outputData;\n        if (-1 < tmpVar2 << 0x1f) break;\nLAB_080093d2:\n        outputData = (undefined4 *)initialize_memory_block_08009258(inputData,block1,block2);\n        if (block1 == (undefined4 *)0x0) break;\n        tmpVar1 = *(int *)(inputData + 0x4c);\n        tmpVar2 = tmpVar2 >> 1;\n        *block1 = *(undefined4 *)(tmpVar1 + block1[1] * 4);\n        *(undefined4 **)(tmpVar1 + block1[1] * 4) = block1;\n        block1 = block2;\n        if (tmpVar2 == 0) {\n          return outputData;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return outputData;\n}\n\n",
            "renaming": {
                "FUN_080093a4": "process_data_080093a4",
                "param_1": "inputData",
                "param_2": "outputData",
                "param_3": "dataSize",
                "iVar1": "tmpVar1",
                "iVar2": "tmpVar2",
                "puVar3": "block1",
                "puVar4": "block2"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009120",
                "FUN_08009258",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009444": {
            "entrypoint": "0x08009444",
            "current_name": "initialize_memory_block_08009444",
            "code": "\nvoid initializeMemoryBlock_08009444(int param1,undefined4 *param2,uint param3)\n\n{\n  int temp1;\n  int temp2;\n  int temp3;\n  undefined4 temp4;\n  int temp5;\n  int temp6;\n  uint *ptr1;\n  uint *ptr2;\n  uint *ptr3;\n  uint *ptr4;\n  int temp7;\n  int temp8;\n  uint temp9;\n  uint *puVar9;\n  \n  temp5 = param2[4];\n  temp7 = (int)param3 >> 5;\n  temp8 = temp7 + temp5 + 1;\n  temp3 = param2[1];\n  temp2 = param2[2];\n  if ((int)param2[2] < temp8) {\n    do {\n      temp6 = temp2 * 2;\n      temp1 = temp2 * -2;\n      temp3 = temp3 + 1;\n      temp2 = temp6;\n    } while (temp8 != temp6 && temp8 + temp1 < 0 == SBORROW4(temp8,temp6));\n  }\n  temp2 = initialize_or_get_memory_block_080090c0(param1,temp3);\n  ptr1 = (uint *)(temp2 + 0x14);\n  if (0 < temp7) {\n    ptr4 = ptr1 + temp7;\n    ptr2 = ptr1;\n    do {\n      puVar9 = ptr2 + 1;\n      *ptr2 = 0;\n      ptr1 = ptr4;\n      ptr2 = puVar9;\n    } while (puVar9 != ptr4);\n  }\n  temp3 = param2[4];\n  ptr2 = param2 + 5;\n  param3 = param3 & 0x1f;\n  if (param3 == 0) {\n    ptr1 = ptr1 + -1;\n    ptr4 = ptr2;\n    do {\n      puVar9 = ptr4 + 1;\n      ptr1 = ptr1 + 1;\n      *ptr1 = *ptr4;\n      ptr4 = puVar9;\n    } while (puVar9 < ptr2 + temp3);\n  }\n  else {\n    temp9 = 0;\n    ptr4 = ptr2;\n    do {\n      puVar9 = ptr1;\n      *puVar9 = *ptr4 << param3 | temp9;\n      ptr3 = ptr4 + 1;\n      temp9 = *ptr4 >> (0x20 - param3 & 0xff);\n      ptr1 = puVar9 + 1;\n      ptr4 = ptr3;\n    } while (ptr3 < ptr2 + temp3);\n    puVar9[1] = temp9;\n    if (temp9 != 0) {\n      temp8 = temp7 + temp5 + 2;\n    }\n  }\n  temp5 = *(int *)(param1 + 0x4c);\n  temp3 = param2[1];\n  temp4 = *(undefined4 *)(temp5 + temp3 * 4);\n  *(int *)(temp2 + 0x10) = temp8 + -1;\n  *param2 = temp4;\n  *(undefined4 **)(temp5 + temp3 * 4) = param2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009444": "initialize_memory_block_08009444",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "temp1",
                "iVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "iVar6": "temp6",
                "puVar7": "ptr1",
                "puVar8": "ptr2",
                "puVar10": "ptr3",
                "puVar11": "ptr4",
                "iVar12": "temp7",
                "iVar13": "temp8",
                "uVar14": "temp9"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094f8": {
            "entrypoint": "0x080094f8",
            "current_name": "compare_arrays_080094f8",
            "code": "\nint compare_arrays_080094f8(int array1,int array2)\n\n{\n  int length_diff;\n  uint *array2_ptr;\n  int array2_length;\n  uint *array1_ptr;\n  \n  array2_length = *(int *)(array2 + 0x10);\n  length_diff = *(int *)(array1 + 0x10) - array2_length;\n  if (length_diff == 0) {\n    array2_ptr = (uint *)(array2 + 0x14 + array2_length * 4);\n    array1_ptr = (uint *)(array1 + 0x14) + array2_length;\n    do {\n      array1_ptr = array1_ptr + -1;\n      array2_ptr = array2_ptr + -1;\n      if (*array1_ptr != *array2_ptr) {\n        if (*array2_ptr <= *array1_ptr) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < array1_ptr);\n  }\n  return length_diff;\n}\n\n",
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "length_diff",
                "iVar3": "array2_length",
                "puVar2": "array2_ptr",
                "puVar4": "array1_ptr"
            },
            "calling": [
                "FUN_080078c0",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009530": {
            "entrypoint": "0x08009530",
            "current_name": "compare_and_update_blocks_08009530",
            "code": "\nvoid compareAndUpdateBlocks_08009530(undefined4 param1,uint *block1,uint *block2,undefined4 param4)\n\n{\n  int memoryBlock;\n  uint *ptrBlock1Index;\n  uint block1Size;\n  uint blockDifference;\n  undefined4 isGreater;\n  uint *block1Ptr;\n  uint *block1Index;\n  uint *block2Ptr;\n  uint *block2Index;\n  uint *block2Current;\n  int carryValue;\n  uint *block2Start;\n  uint block2Size;\n  uint *block1Current;\n  \n  ptrBlock1Index = (uint *)block2[4];\n  block2Current = block1 + 5;\n  block2Start = block2 + 5;\n  block1Index = block2Current;\n  block2Ptr = block1;\n  if ((uint *)block1[4] == ptrBlock1Index) {\n    block1Ptr = block2Current + (int)ptrBlock1Index;\n    ptrBlock1Index = block2Start + (int)ptrBlock1Index;\n    while( true ) {\n      block1Ptr = block1Ptr + -1;\n      ptrBlock1Index = ptrBlock1Index + -1;\n      if (*block1Ptr != *ptrBlock1Index) break;\n      if (block1Ptr <= block2Current) {\n        carryValue = initialize_or_get_memory_block_080090c0(param1,0,block1Ptr,ptrBlock1Index,param4);\n        *(undefined4 *)(carryValue + 0x10) = 1;\n        *(undefined4 *)(carryValue + 0x14) = 0;\n        return;\n      }\n    }\n    isGreater = 0;\n    if (*ptrBlock1Index <= *block1Ptr) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)block1[4] - (int)ptrBlock1Index) {\n    isGreater = 0;\n    block1Ptr = block2;\n    goto LAB_08009578;\n  }\n  isGreater = 1;\n  block1Ptr = block2Current;\n  ptrBlock1Index = block1;\n  block1Index = block2Start;\n  block2Ptr = block2;\n  block2 = block1;\n  block2Start = block2Current;\nLAB_08009578:\n  memoryBlock = initialize_or_get_memory_block_080090c0(param1,block2Ptr[1],block1Ptr,ptrBlock1Index,param4);\n  carryValue = 0;\n  block2Size = block2Ptr[4];\n  block1Size = block2[4];\n  *(undefined4 *)(memoryBlock + 0xc) = isGreater;\n  block2Current = block1Index + block2Size;\n  ptrBlock1Index = (uint *)(memoryBlock + 0x14);\n  block2Ptr = block2Start;\n  do {\n    block1Current = block1Index + 1;\n    block2Index = block2Ptr + 1;\n    blockDifference = ((*block1Index & 0xffff) + carryValue) - (*block2Ptr & 0xffff);\n    carryValue = ((*block1Index >> 0x10) - (*block2Ptr >> 0x10)) + ((int)blockDifference >> 0x10);\n    blockDifference = blockDifference & 0xffff | carryValue * 0x10000;\n    block1Ptr = ptrBlock1Index + 1;\n    *ptrBlock1Index = blockDifference;\n    carryValue = carryValue >> 0x10;\n    ptrBlock1Index = block1Ptr;\n    block1Index = block1Current;\n    block2Ptr = block2Index;\n  } while (block2Index < block2Start + block1Size);\n  ptrBlock1Index = block1Current;\n  block1Index = block1Ptr;\n  if (block1Current < block2Current) {\n    do {\n      block2Ptr = ptrBlock1Index + 1;\n      block1Size = (*ptrBlock1Index & 0xffff) + carryValue;\n      carryValue = ((int)block1Size >> 0x10) + (*ptrBlock1Index >> 0x10);\n      blockDifference = block1Size & 0xffff | carryValue * 0x10000;\n      *block1Index = blockDifference;\n      carryValue = carryValue >> 0x10;\n      ptrBlock1Index = block2Ptr;\n      block1Index = block1Index + 1;\n    } while (block2Ptr < block2Current);\n    block1Ptr = (uint *)((int)block1Ptr + ((int)block2Current + ~(uint)block1Current & 0xfffffffc) + 4);\n  }\n  block1Ptr = block1Ptr + -1;\n  while (blockDifference == 0) {\n    block1Ptr = block1Ptr + -1;\n    block2Size = block2Size - 1;\n    blockDifference = *block1Ptr;\n  }\n  *(uint *)(memoryBlock + 0x10) = block2Size;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009530": "compare_and_update_blocks_08009530",
                "param_1": "param1",
                "param_2": "block1",
                "param_3": "block2",
                "param_4": "param4",
                "iVar1": "memoryBlock",
                "puVar2": "ptrBlock1Index",
                "uVar3": "block1Size",
                "uVar4": "blockDifference",
                "uVar5": "isGreater",
                "puVar6": "block1Ptr",
                "puVar7": "block1Index",
                "puVar8": "block1Current",
                "puVar9": "block2Ptr",
                "puVar10": "block2Index",
                "puVar11": "block2Current",
                "iVar12": "carryValue",
                "puVar13": "block2Start",
                "uVar14": "block2Size"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009630": {
            "entrypoint": "0x08009630",
            "current_name": "extract_bits_08009630",
            "code": "\nint extract_bits_08009630(undefined4 memory_param,undefined4 flag_param,uint input_param,uint bit_param,int *output_param_1,\n                int *output_param_2)\n\n{\n  int memory_block;\n  uint trailing_zeros;\n  int trailing_zeros_count;\n  int field_count;\n  uint shifted_bits;\n  uint shift_val;\n  undefined8 leading_zeros_count;\n  uint input_val;\n  uint bit_field;\n  \n  memory_block = initialize_or_get_memory_block_080090c0(memory_param,1);\n  shift_val = (bit_param << 1) >> 0x15;\n  bit_field = bit_param & 0xfffff;\n  if (shift_val != 0) {\n    bit_field = bit_field | 0x100000;\n  }\n  if (input_param == 0) {\n    trailing_zeros_count = count_trailing_zeros_080091e4(&bit_field);\n    field_count = 1;\n    trailing_zeros = trailing_zeros_count + 0x20;\n    *(undefined4 *)(memory_block + 0x10) = 1;\n    *(uint *)(memory_block + 0x14) = bit_field;\n  }\n  else {\n    input_val = input_param;\n    trailing_zeros = count_trailing_zeros_080091e4(&input_val);\n    if (trailing_zeros == 0) {\n      *(uint *)(memory_block + 0x14) = input_val;\n    }\n    else {\n      shifted_bits = bit_field << (0x20 - trailing_zeros & 0xff);\n      bit_field = bit_field >> (trailing_zeros & 0xff);\n      *(uint *)(memory_block + 0x14) = shifted_bits | input_val;\n    }\n    if (bit_field == 0) {\n      field_count = 1;\n    }\n    else {\n      field_count = 2;\n    }\n    *(uint *)(memory_block + 0x18) = bit_field;\n    *(int *)(memory_block + 0x10) = field_count;\n  }\n  if (shift_val == 0) {\n    *output_param_1 = trailing_zeros - 0x432;\n    leading_zeros_count = count_leading_zeros_080091a4(*(undefined4 *)(memory_block + field_count * 4 + 0x10));\n    *output_param_2 = (int)((ulonglong)leading_zeros_count >> 0x20) * 0x20 - (int)leading_zeros_count;\n    return memory_block;\n  }\n  *output_param_1 = (shift_val - 0x433) + trailing_zeros;\n  *output_param_2 = 0x35 - trailing_zeros;\n  return memory_block;\n}\n\n",
            "renaming": {
                "FUN_08009630": "extract_bits_08009630",
                "param_1": "memory_param",
                "param_2": "flag_param",
                "param_3": "input_param",
                "param_4": "bit_param",
                "param_5": "output_param_1",
                "param_6": "output_param_2",
                "iVar1": "memory_block",
                "uVar2": "trailing_zeros",
                "iVar3": "trailing_zeros_count",
                "iVar4": "field_count",
                "uVar5": "shifted_bits",
                "uVar6": "shift_val",
                "uVar7": "leading_zeros_count",
                "local_20": "input_val",
                "local_1c": "bit_field"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080091e4",
                "FUN_080091a4",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e0": {
            "entrypoint": "0x080096e0",
            "current_name": "calculate_result_and_shift_080096e0",
            "code": "\nundefined8 calculate_result_and_shift_080096e0(uint input_value_1,uint input_value_2,int *output_shifted_result,undefined4 additional_param)\n\n{\n  int iteration_count;\n  uint masked_input_2;\n  undefined8 concatenated_result;\n  \n  concatenated_result = CONCAT44(input_value_2,input_value_1);\n  iteration_count = 0;\n  masked_input_2 = input_value_2 & 0x7fffffff;\n  *output_shifted_result = 0;\n  if ((masked_input_2 < 0x7ff00000) && ((masked_input_2 | input_value_1) != 0)) {\n    if (masked_input_2 < 0x100000) {\n      concatenated_result = calculate_shifted_result_080004c8(input_value_1,input_value_2,0,0x43500000,additional_param);\n      iteration_count = -0x36;\n      masked_input_2 = (uint)((ulonglong)concatenated_result >> 0x20) & 0x7fffffff;\n    }\n    input_value_1 = (uint)concatenated_result;\n    input_value_2 = (uint)((ulonglong)concatenated_result >> 0x20) & 0x800fffff | 0x3fe00000;\n    *output_shifted_result = ((int)masked_input_2 >> 0x14) + -0x3fe + iteration_count;\n  }\n  return CONCAT44(input_value_2,input_value_1);\n}\n\n",
            "renaming": {
                "FUN_080096e0": "calculate_result_and_shift_080096e0",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "output_shifted_result",
                "param_4": "additional_param",
                "iVar1": "iteration_count",
                "uVar2": "masked_input_2",
                "uVar3": "concatenated_result"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080004c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009744": {
            "entrypoint": "0x08009744",
            "current_name": "allocate_and_check_memory_08009744",
            "code": "\nvoid allocateAndCheckMemory_08009744(int *outputPointer,undefined4 size)\n\n{\n  int allocationResult;\n  \n  DAT_20000c10 = 0;\n  allocationResult = allocate_memory_08005728(size);\n  if ((allocationResult == -1) && (DAT_20000c10 != 0)) {\n    *outputPointer = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009744": "allocate_and_check_memory_08009744",
                "param_1": "outputPointer",
                "param_2": "size",
                "iVar1": "allocationResult"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009768": {
            "entrypoint": "0x08009768",
            "current_name": "copy_and_clean_string_08009768",
            "code": "\nvoid copy_and_clean_string_08009768(uint *source,uint *destination,uint size)\n\n{\n  char current_char;\n  uint *source_ptr;\n  uint *destination_ptr;\n  uint current_uint;\n  \n  if (((((uint)source | (uint)destination) & 3) == 0) &&\n     (destination_ptr = source, source_ptr = destination, 3 < size)) {\n    do {\n      destination = source_ptr + 1;\n      current_uint = *source_ptr;\n      source = destination_ptr;\n      if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_0800979c;\n      size = size - 4;\n      source = destination_ptr + 1;\n      *destination_ptr = current_uint;\n      destination_ptr = source;\n      source_ptr = destination;\n    } while (3 < size);\n  }\n  source_ptr = destination;\n  if (size != 0) {\nLAB_0800979c:\n    current_char = *(char *)source_ptr;\n    *(char *)source = current_char;\n    while( true ) {\n      source = (uint *)((int)source + 1);\n      size = size - 1;\n      if (current_char == '\\0') break;\n      if (size == 0) {\n        return;\n      }\n      source_ptr = (uint *)((int)source_ptr + 1);\n      current_char = *(char *)source_ptr;\n      *(char *)source = current_char;\n    }\n    if (size != 0) {\n      source_ptr = source;\n      do {\n        destination_ptr = (uint *)((int)source_ptr + 1);\n        *(char *)source_ptr = '\\0';\n        source_ptr = destination_ptr;\n      } while (destination_ptr != (uint *)(size + (int)source));\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009768": "copy_and_clean_string_08009768",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "size",
                "cVar1": "current_char",
                "uVar4": "current_uint",
                "puVar2": "source_ptr",
                "puVar3": "destination_ptr"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080097cc": {
            "entrypoint": "0x080097cc",
            "current_name": "copy_and_resize_data_080097cc",
            "code": "\nundefined4 copyAndResizeData_080097cc(undefined4 *dest,int *srcData,int *srcSize)\n\n{\n  int destOffset;\n  uint srcDataSize;\n  int newDestOffset;\n  int srcSizeRemaining;\n  uint newSrcDataSize;\n  uint currentSrcDataSize;\n  undefined4 *currentSrcData;\n  undefined4 *nextSrcData;\n  undefined4 currentSrcValue;\n  \n  if (srcSize[2] != 0) {\n    destOffset = *srcData;\n    newSrcDataSize = srcData[2];\n    nextSrcData = (undefined4 *)*srcSize;\n    do {\n      do {\n        currentSrcData = nextSrcData + 2;\n        currentSrcValue = *nextSrcData;\n        currentSrcDataSize = nextSrcData[1];\n        nextSrcData = currentSrcData;\n      } while (currentSrcDataSize == 0);\n      srcDataSize = currentSrcDataSize;\n      if ((newSrcDataSize <= currentSrcDataSize) && (srcDataSize = newSrcDataSize, (*(ushort *)(srcData + 3) & 0x480) != 0)) {\n        srcSizeRemaining = destOffset - srcData[4];\n        newSrcDataSize = (srcData[5] * 3) / 2;\n        srcDataSize = currentSrcDataSize + 1 + srcSizeRemaining;\n        if (newSrcDataSize < srcDataSize) {\n          newSrcDataSize = srcDataSize;\n        }\n        if ((int)((uint)*(ushort *)(srcData + 3) << 0x15) < 0) {\n          newDestOffset = allocate_and_initialize_memory_08008af8(dest,newSrcDataSize);\n          if (newDestOffset == 0) {\nLAB_08009896:\n            *dest = 0xc;\n            *(ushort *)(srcData + 3) = *(ushort *)(srcData + 3) | 0x40;\n            srcSize[1] = 0;\n            srcSize[2] = 0;\n            return 0xffffffff;\n          }\n          copy_memory_08001084(newDestOffset,srcData[4],srcSizeRemaining);\n          *(ushort *)(srcData + 3) = *(ushort *)(srcData + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          newDestOffset = allocate_and_initialize_memory_08009adc(dest);\n          if (newDestOffset == 0) {\n            initialize_data_structure_080088ec(dest,srcData[4]);\n            goto LAB_08009896;\n          }\n        }\n        destOffset = newDestOffset + srcSizeRemaining;\n        srcData[5] = newSrcDataSize;\n        srcData[4] = newDestOffset;\n        *srcData = destOffset;\n        srcData[2] = newSrcDataSize - srcSizeRemaining;\n        srcDataSize = currentSrcDataSize;\n      }\n      copy_memory_08009a18(destOffset,currentSrcValue,srcDataSize);\n      srcSizeRemaining = srcSize[2];\n      newSrcDataSize = srcData[2] - srcDataSize;\n      destOffset = *srcData + srcDataSize;\n      srcData[2] = newSrcDataSize;\n      *srcData = destOffset;\n      srcSize[2] = srcSizeRemaining - currentSrcDataSize;\n    } while (srcSizeRemaining - currentSrcDataSize != 0);\n  }\n  srcSize[1] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080097cc": "copy_and_resize_data_080097cc",
                "param_1": "dest",
                "param_2": "srcData",
                "param_3": "srcSize",
                "iVar1": "destOffset",
                "uVar2": "srcDataSize",
                "iVar3": "newDestOffset",
                "iVar4": "srcSizeRemaining",
                "uVar5": "newSrcDataSize",
                "uVar6": "currentSrcDataSize",
                "puVar7": "currentSrcData",
                "puVar8": "nextSrcData",
                "uVar9": "currentSrcValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08009a18",
                "FUN_08001084",
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098c0": {
            "entrypoint": "0x080098c0",
            "current_name": "update_data_080098c0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 updateData_080098c0(int operationType,undefined4 param2,undefined4 value1,undefined4 value2)\n\n{\n  undefined *dataPtr;\n  undefined4 returnValue;\n  uint bitMask;\n  uint itemCount;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataPtr = DAT_20000168;\n  itemCount = *(uint *)(DAT_20000168 + 4);\n  if ((int)itemCount < 0x20) {\n    if (operationType != 0) {\n      *(undefined4 *)(DAT_20000168 + itemCount * 4 + 0x88) = value1;\n      bitMask = 1 << (itemCount & 0xff);\n      *(uint *)(dataPtr + 0x188) = *(uint *)(dataPtr + 0x188) | bitMask;\n      *(undefined4 *)(dataPtr + itemCount * 4 + 0x108) = value2;\n      if (operationType == 2) {\n        *(uint *)(dataPtr + 0x18c) = bitMask | *(uint *)(dataPtr + 0x18c);\n      }\n    }\n    *(uint *)(dataPtr + 4) = itemCount + 1;\n    returnValue = DAT_20000448;\n    *(undefined4 *)(dataPtr + (itemCount + 2) * 4) = param2;\n    FUNC_08008af4(returnValue);\n    returnValue = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080098c0": "update_data_080098c0",
                "param_1": "operationType",
                "param_2": "param2",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "dataPtr",
                "uVar2": "returnValue",
                "uVar3": "bitMask",
                "uVar4": "itemCount"
            },
            "calling": [
                "FUN_080078a0"
            ],
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009980": {
            "entrypoint": "0x08009980",
            "current_name": "initialize_memory_08009980",
            "code": "\nundefined4 * initializeMemory_08009980(undefined4 param1,int numColumns,int numRows)\n\n{\n  undefined4 *allocatedMemory;\n  uint headerSize;\n  undefined4 *dataStart;\n  \n  allocatedMemory = (undefined4 *)allocate_and_initialize_memory_08008af8(param1,numRows * numColumns);\n  if (allocatedMemory == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  headerSize = (allocatedMemory[-1] & 0xfffffffc) - 4;\n  if (headerSize < 0x25) {\n    dataStart = allocatedMemory;\n    if (0x13 < headerSize) {\n      *allocatedMemory = 0;\n      allocatedMemory[1] = 0;\n      if (0x1b < headerSize) {\n        allocatedMemory[2] = 0;\n        allocatedMemory[3] = 0;\n        if (headerSize == 0x24) {\n          allocatedMemory[4] = 0;\n          allocatedMemory[5] = 0;\n          dataStart = allocatedMemory + 6;\n        }\n        else {\n          dataStart = allocatedMemory + 4;\n        }\n        *dataStart = 0;\n        dataStart[1] = 0;\n        dataStart[2] = 0;\n        return allocatedMemory;\n      }\n      dataStart = allocatedMemory + 2;\n    }\n    *dataStart = 0;\n    dataStart[1] = 0;\n    dataStart[2] = 0;\n    return allocatedMemory;\n  }\n  memset_08005d68(allocatedMemory,0);\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_08009980": "initialize_memory_08009980",
                "param_1": "param1",
                "param_2": "numColumns",
                "param_3": "numRows",
                "puVar1": "allocatedMemory",
                "uVar2": "headerSize",
                "puVar3": "dataStart"
            },
            "calling": [
                "FUN_080090c0"
            ],
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a18": {
            "entrypoint": "0x08009a18",
            "current_name": "copy_memory_08009a18",
            "code": "\nvoid copyMemory_08009a18(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  int iteration;\n  undefined *destEnd;\n  undefined4 *srcEnd;\n  uint remainingBytes;\n  uint remainingLength;\n  \n  if ((source < destination) && (srcPtr = (undefined4 *)((int)source + length), destination < srcPtr)) {\n    destEnd = (undefined *)((int)destination + length);\n    if (length != 0) {\n      do {\n        srcPtr = (undefined4 *)((int)srcPtr + -1);\n        destEnd = destEnd + -1;\n        *destEnd = *(undefined *)srcPtr;\n      } while (source != srcPtr);\n    }\n  }\n  else {\n    remainingLength = length;\n    if (0xf < length) {\n      if ((((uint)destination | (uint)source) & 3) != 0) goto LAB_08009abc;\n      srcPtr = source + 4;\n      destPtr = destination + 4;\n      do {\n        srcEnd = srcPtr + 4;\n        destPtr[-4] = srcPtr[-4];\n        destPtr[-3] = srcPtr[-3];\n        destPtr[-2] = srcPtr[-2];\n        destPtr[-1] = srcPtr[-1];\n        srcPtr = srcEnd;\n        destPtr = destPtr + 4;\n      } while (srcEnd != (undefined4 *)((int)source + (length - 0x10 & 0xfffffff0) + 0x20));\n      iteration = (length - 0x10 >> 4) + 1;\n      remainingLength = length & 0xf;\n      source = source + iteration * 4;\n      destination = destination + iteration * 4;\n      if (3 < remainingLength) {\n        srcPtr = destination + -1;\n        remainingBytes = remainingLength;\n        destPtr = source;\n        do {\n          remainingBytes = remainingBytes - 4;\n          srcPtr = srcPtr + 1;\n          *srcPtr = *destPtr;\n          destPtr = destPtr + 1;\n        } while (3 < remainingBytes);\n        iteration = (remainingLength - 4 & 0xfffffffc) + 4;\n        destination = (undefined4 *)((int)destination + iteration);\n        source = (undefined4 *)((int)source + iteration);\n        remainingLength = length & 3;\n      }\n    }\n    length = remainingLength;\n    if (remainingLength != 0) {\nLAB_08009abc:\n      destEnd = (undefined *)((int)destination + -1);\n      srcPtr = source;\n      do {\n        destPtr = (undefined4 *)((int)srcPtr + 1);\n        destEnd = destEnd + 1;\n        *destEnd = *(undefined *)srcPtr;\n        srcPtr = destPtr;\n      } while (destPtr != (undefined4 *)(length + (int)source));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009a18": "copy_memory_08009a18",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "srcPtr",
                "iVar3": "iteration",
                "puVar4": "destEnd",
                "puVar5": "srcEnd",
                "uVar6": "remainingBytes",
                "uVar7": "remainingLength"
            },
            "calling": [
                "FUN_08009adc",
                "FUN_080097cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009adc": {
            "entrypoint": "0x08009adc",
            "current_name": "allocate_and_initialize_memory_08009adc",
            "code": "\nint * allocate_and_initialize_memory_08009adc(undefined4 *memory_block,int *existing_data,uint data_size)\n\n{\n  int *new_memory_block;\n  int temp_var;\n  int *prev_data_block;\n  uint temp_var2;\n  int temp_var3;\n  uint data_block_size;\n  int *piVar7;\n  uint aligned_size;\n  uint rounded_data_size;\n  uint new_data_block_size;\n  int current_block_size;\n  \n  if (existing_data == (int *)0x0) {\n    prev_data_block = (int *)allocate_and_initialize_memory_08009adc_08008af8(memory_block,data_size);\n    return prev_data_block;\n  }\n  initialize_data_structure_080090a8();\n  data_block_size = existing_data[-1];\n  rounded_data_size = data_block_size & 0xfffffffc;\n  prev_data_block = existing_data + -2;\n  if (data_size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = data_size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_08009b8e;\n  }\n  if (aligned_size < data_size) {\nLAB_08009b8e:\n    *memory_block = 0xc;\n    return (int *)0x0;\n  }\n  current_block_size = (int)prev_data_block + rounded_data_size;\n  new_data_block_size = rounded_data_size;\n  if ((int)rounded_data_size < (int)aligned_size) {\n    if (DAT_20000454 == current_block_size) {\n      current_block_size = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + rounded_data_size;\n      if ((int)(aligned_size + 0x10) <= current_block_size) {\n        DAT_20000454 = (int)prev_data_block + aligned_size;\n        *(uint *)(DAT_20000454 + 4) = current_block_size - aligned_size | 1;\n        existing_data[-1] = aligned_size | existing_data[-1] & 1U;\n        initialize_data_080090b4(memory_block);\n        return existing_data;\n      }\n      if (-1 < (int)(data_block_size << 0x1f)) {\n        new_memory_block = (int *)((int)prev_data_block - existing_data[-2]);\n        data_block_size = new_memory_block[1] & 0xfffffffc;\n        if ((int)(aligned_size + 0x10) <= (int)(current_block_size + data_block_size)) {\n          temp_var3 = new_memory_block[3];\n          prev_data_block = new_memory_block + 2;\n          temp_var = *prev_data_block;\n          rounded_data_size = rounded_data_size - 4;\n          *(int *)(temp_var + 0xc) = temp_var3;\n          *(int *)(temp_var3 + 8) = temp_var;\n          if (rounded_data_size < 0x25) {\n            temp_var = *existing_data;\n            piVar7 = prev_data_block;\n            if (0x13 < rounded_data_size) {\n              new_memory_block[2] = temp_var;\n              new_memory_block[3] = existing_data[1];\n              temp_var = existing_data[2];\n              if (rounded_data_size < 0x1c) {\n                existing_data = existing_data + 2;\n                piVar7 = new_memory_block + 4;\n              }\n              else {\n                new_memory_block[4] = temp_var;\n                new_memory_block[5] = existing_data[3];\n                temp_var = existing_data[4];\n                if (rounded_data_size == 0x24) {\n                  new_memory_block[6] = temp_var;\n                  new_memory_block[7] = existing_data[5];\n                  temp_var = existing_data[6];\n                  existing_data = existing_data + 6;\n                  piVar7 = new_memory_block + 8;\n                }\n                else {\n                  existing_data = existing_data + 4;\n                  piVar7 = new_memory_block + 6;\n                }\n              }\n            }\n            *piVar7 = temp_var;\n            piVar7[1] = existing_data[1];\n            piVar7[2] = existing_data[2];\n          }\n          else {\n            copy_memory_08009a18(prev_data_block,existing_data);\n          }\n          DAT_20000454 = (int)new_memory_block + aligned_size;\n          *(uint *)(DAT_20000454 + 4) = (current_block_size + data_block_size) - aligned_size | 1;\n          new_memory_block[1] = aligned_size | new_memory_block[1] & 1U;\n          initialize_data_080090b4(memory_block);\n          return prev_data_block;\n        }\nLAB_08009bb0:\n        new_data_block_size = rounded_data_size + data_block_size;\n        if ((int)aligned_size <= (int)new_data_block_size) {\n          temp_var3 = new_memory_block[3];\n          piVar7 = new_memory_block + 2;\n          temp_var = *piVar7;\n          *(int *)(temp_var + 0xc) = temp_var3;\n          current_block_size = (int)new_memory_block + new_data_block_size;\n          *(int *)(temp_var3 + 8) = temp_var;\n          prev_data_block = new_memory_block;\n          if (rounded_data_size - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          copy_memory_08009a18(piVar7,existing_data);\n          existing_data = piVar7;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(current_block_size + 4) & 0xfffffffe) + current_block_size + 4) << 0x1f) {\n        temp_var2 = *(uint *)(current_block_size + 4) & 0xfffffffc;\n        new_data_block_size = rounded_data_size + temp_var2;\n        if ((int)new_data_block_size < (int)aligned_size) {\n          if ((int)(data_block_size << 0x1f) < 0) goto LAB_08009b36;\n          new_memory_block = (int *)((int)prev_data_block - existing_data[-2]);\n          data_block_size = new_memory_block[1] & 0xfffffffc;\n          new_data_block_size = temp_var2 + data_block_size + rounded_data_size;\n          if ((int)new_data_block_size < (int)aligned_size) goto LAB_08009bb0;\n          temp_var = *(int *)(current_block_size + 8);\n          current_block_size = *(int *)(current_block_size + 0xc);\n          *(int *)(temp_var + 0xc) = current_block_size;\n          *(int *)(current_block_size + 8) = temp_var;\n          piVar7 = new_memory_block + 2;\n          temp_var = *piVar7;\n          temp_var3 = new_memory_block[3];\n          *(int *)(temp_var + 0xc) = temp_var3;\n          current_block_size = (int)new_memory_block + new_data_block_size;\n          *(int *)(temp_var3 + 8) = temp_var;\n          prev_data_block = new_memory_block;\n          if (0x24 < rounded_data_size - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          rounded_data_size = rounded_data_size - 4;\n          temp_var = *existing_data;\n          new_memory_block = piVar7;\n          if (0x13 < rounded_data_size) {\n            prev_data_block[2] = temp_var;\n            prev_data_block[3] = existing_data[1];\n            temp_var = existing_data[2];\n            if (rounded_data_size < 0x1c) {\n              existing_data = existing_data + 2;\n              new_memory_block = prev_data_block + 4;\n            }\n            else {\n              prev_data_block[4] = temp_var;\n              prev_data_block[5] = existing_data[3];\n              temp_var = existing_data[4];\n              if (rounded_data_size == 0x24) {\n                prev_data_block[6] = temp_var;\n                prev_data_block[7] = existing_data[5];\n                temp_var = existing_data[6];\n                existing_data = existing_data + 6;\n                new_memory_block = prev_data_block + 8;\n              }\n              else {\n                existing_data = existing_data + 4;\n                new_memory_block = prev_data_block + 6;\n              }\n            }\n          }\n          *new_memory_block = temp_var;\n          new_memory_block[1] = existing_data[1];\n          new_memory_block[2] = existing_data[2];\n          existing_data = piVar7;\n        }\n        else {\n          temp_var = *(int *)(current_block_size + 8);\n          temp_var3 = *(int *)(current_block_size + 0xc);\n          *(int *)(temp_var + 0xc) = temp_var3;\n          current_block_size = (int)prev_data_block + new_data_block_size;\n          *(int *)(temp_var3 + 8) = temp_var;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(data_block_size << 0x1f)) {\n        new_memory_block = (int *)((int)prev_data_block - existing_data[-2]);\n        data_block_size = new_memory_block[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    new_memory_block = (int *)allocate_and_initialize_memory_08009adc_08008af8(memory_block,data_size);\n    if (new_memory_block != (int *)0x0) {\n      if ((int *)((existing_data[-1] & 0xfffffffeU) + (int)prev_data_block) == new_memory_block + -2) {\n        new_data_block_size = rounded_data_size + (new_memory_block[-1] & 0xfffffffcU);\n        current_block_size = (int)prev_data_block + new_data_block_size;\n        goto LAB_08009c00;\n      }\n      rounded_data_size = rounded_data_size - 4;\n      if (rounded_data_size < 0x25) {\n        current_block_size = *existing_data;\n        prev_data_block = existing_data;\n        piVar7 = new_memory_block;\n        if (0x13 < rounded_data_size) {\n          *new_memory_block = current_block_size;\n          new_memory_block[1] = existing_data[1];\n          if (rounded_data_size < 0x1c) {\n            current_block_size = existing_data[2];\n            prev_data_block = existing_data + 2;\n            piVar7 = new_memory_block + 2;\n          }\n          else {\n            new_memory_block[2] = existing_data[2];\n            new_memory_block[3] = existing_data[3];\n            if (rounded_data_size == 0x24) {\n              new_memory_block[4] = existing_data[4];\n              new_memory_block[5] = existing_data[5];\n              current_block_size = existing_data[6];\n              prev_data_block = existing_data + 6;\n              piVar7 = new_memory_block + 6;\n            }\n            else {\n              current_block_size = existing_data[4];\n              prev_data_block = existing_data + 4;\n              piVar7 = new_memory_block + 4;\n            }\n          }\n        }\n        *piVar7 = current_block_size;\n        piVar7[1] = prev_data_block[1];\n        piVar7[2] = prev_data_block[2];\n      }\n      else {\n        copy_memory_08009a18(new_memory_block,existing_data);\n      }\n      initialize_data_structure_080088ec(memory_block,existing_data);\n    }\n    initialize_data_080090b4(memory_block);\n    existing_data = new_memory_block;\n  }\n  else {\nLAB_08009c00:\n    if (new_data_block_size - aligned_size < 0x10) {\n      prev_data_block[1] = prev_data_block[1] & 1U | new_data_block_size;\n      *(uint *)(current_block_size + 4) = *(uint *)(current_block_size + 4) | 1;\n    }\n    else {\n      prev_data_block[1] = prev_data_block[1] & 1U | aligned_size;\n      *(uint *)((int)prev_data_block + aligned_size + 4) = new_data_block_size - aligned_size | 1;\n      *(uint *)(current_block_size + 4) = *(uint *)(current_block_size + 4) | 1;\n      initialize_data_structure_080088ec(memory_block,(int)prev_data_block + aligned_size + 8);\n    }\n    initialize_data_080090b4(memory_block);\n  }\n  return existing_data;\n}\n\n",
            "renaming": {
                "FUN_08009adc": "allocate_and_initialize_memory_08009adc",
                "param_1": "memory_block",
                "param_2": "existing_data",
                "param_3": "data_size",
                "piVar1": "new_memory_block",
                "iVar2": "temp_var",
                "piVar3": "prev_data_block",
                "uVar4": "temp_var2",
                "iVar5": "temp_var3",
                "uVar6": "data_block_size",
                "uVar8": "aligned_size",
                "uVar9": "rounded_data_size",
                "uVar10": "new_data_block_size",
                "iVar11": "current_block_size"
            },
            "calling": [
                "FUN_080097cc"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_08009a18",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e68": {
            "entrypoint": "0x08009e68",
            "current_name": "FUNC_08009e68",
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "calling": [
                "FUN_08005d20",
                "FUN_08000134",
                "FUN_08000110"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009e74": {
            "entrypoint": "0x08009e74",
            "current_name": "FUNC_08009e74",
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 151097,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080006a4",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_0800121c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_0800177c",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08002d3c",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003568",
            "FUN_0800360c",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_08004e6c",
            "FUN_08005674",
            "FUN_08005780",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_08008ad4",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_0800910c",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_080094f8",
            "FUN_08009768",
            "FUN_080098c0",
            "FUN_08009a18"
        ],
        [
            "FUN_080004c8",
            "FUN_0800071c",
            "FUN_08000988",
            "FUN_08000fd0",
            "FUN_080011ec",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d98",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_080035a4",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08004436",
            "FUN_08004ae0",
            "FUN_08004e74",
            "FUN_08004f2c",
            "FUN_08004f60",
            "FUN_080055f4",
            "FUN_08005680",
            "FUN_08005728",
            "FUN_080078c0"
        ],
        [
            "FUN_08000978",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_08000fc8",
            "FUN_08000ff4",
            "FUN_08001762",
            "FUN_08001ab0",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_080046ec",
            "FUN_08004f3c",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_080096e0",
            "FUN_08009744"
        ],
        [
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_08001030",
            "FUN_0800151c",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_0800438a",
            "FUN_08005348",
            "FUN_0800884c"
        ],
        [
            "FUN_080014f0",
            "FUN_08003260",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08005598",
            "FUN_080059f0",
            "FUN_080088ec"
        ],
        [
            "FUN_080052a0",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_08008af8"
        ],
        [
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08009980",
            "FUN_08009adc"
        ],
        [
            "FUN_080049cc",
            "FUN_08004f78",
            "FUN_080090c0",
            "FUN_080097cc"
        ],
        [
            "FUN_080017b4",
            "FUN_080036f8",
            "FUN_0800491c",
            "FUN_08009120",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_08009444",
            "FUN_08009530",
            "FUN_08009630"
        ],
        [
            "FUN_08005224",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_080093a4"
        ],
        [
            "FUN_080079e8"
        ]
    ],
    "locked_functions": []
}