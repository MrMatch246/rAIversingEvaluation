{
    "functions": {
        "FUN_0800071c": {
            "renaming": {
                "FUN_0800071c": "FUNC_0800071c"
            },
            "code": "\nulonglong FUNC_0800071c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculateFloatingPoint_0800088a();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800083a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800083a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_0800088a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800071c",
            "calling": [
                "FUN_08004d78",
                "FUN_080059f0",
                "FUN_08005838",
                "FUN_080079e8",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "FUNC_0800071c"
        },
        "FUN_080036a8": {
            "renaming": {
                "FUN_080036a8": "set_bit_in_uint_array_080036a8",
                "param_1": "uint_array",
                "*param_1": "uint_array_pointer",
                "param_2": "bit_position",
                "DAT_080036f4": "PTR_DAT_080036f4"
            },
            "code": "void set_bit_in_uint_array_080036a8(uint **uint_array, uint bit_position) {\n  update_bit_in_uint_array(*uint_array, bit_position, 1);\n  if (*uint_array == DAT_080036f4) {\n    (*uint_array)[17] |= 0x8000;\n  }\n  **uint_array |= 1;\n}",
            "called": [
                "FUN_080041ea"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a8",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "set_bit_in_uint_array_080036a8"
        },
        "FUN_080088ec": {
            "renaming": {
                "FUN_080088ec": "FUNC_080088ec"
            },
            "code": "\nvoid FUNC_080088ec(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  uint uVar10;\n  int iVar11;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  doNothingWithPointer_080090a8();\n  puVar8 = PTR_DAT_08008ac4;\n  uVar10 = *(uint *)(param_2 + -4);\n  iVar2 = param_2 + -8;\n  uVar5 = uVar10 & 0xfffffffe;\n  puVar3 = (uint *)(iVar2 + uVar5);\n  uVar6 = puVar3[1] & 0xfffffffc;\n  if (*(uint **)(PTR_DAT_08008ac4 + 8) == puVar3) {\n    uVar5 = uVar5 + uVar6;\n    if ((uVar10 & 1) == 0) {\n      iVar2 = iVar2 - *(int *)(param_2 + -8);\n      iVar11 = *(int *)(iVar2 + 8);\n      iVar1 = *(int *)(iVar2 + 0xc);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      *(int *)(iVar11 + 0xc) = iVar1;\n      *(int *)(iVar1 + 8) = iVar11;\n    }\n    uVar6 = *(uint *)PTR_DAT_08008acc;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(int *)(puVar8 + 8) = iVar2;\n    if (uVar6 <= uVar5) {\n      calculate_value_0800884c(param_1,*(undefined4 *)PTR_DAT_08008ad0);\n    }\nLAB_080089f0:\n    do_nothing_with_pointer_080090b4(param_1);\n    return;\n  }\n  puVar3[1] = uVar6;\n  if ((uVar10 & 1) == 0) {\n    iVar2 = iVar2 - *(int *)(param_2 + -8);\n    puVar9 = *(undefined **)(iVar2 + 8);\n    uVar5 = uVar5 + *(int *)(param_2 + -8);\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n    if (puVar9 == puVar8 + 8) {\n      if (uVar10 == 0) {\n        uVar10 = puVar3[2];\n        uVar4 = puVar3[3];\n        uVar5 = uVar5 + uVar6;\n        *(uint *)(uVar10 + 0xc) = uVar4;\n        *(uint *)(uVar4 + 8) = uVar10;\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *(uint *)(iVar2 + uVar5) = uVar5;\n      }\n      else {\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *puVar3 = uVar5;\n      }\n      goto LAB_080089f0;\n    }\n    iVar11 = *(int *)(iVar2 + 0xc);\n    *(int *)(puVar9 + 0xc) = iVar11;\n    *(undefined **)(iVar11 + 8) = puVar9;\n  }\n  else {\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n  }\n  if (uVar10 == 0) {\n    puVar9 = (undefined *)puVar3[2];\n    uVar5 = uVar5 + uVar6;\n    if (puVar9 == PTR_PTR_DAT_08008ac8) {\n      *(int *)(puVar8 + 0x10) = iVar2;\n      *(int *)(puVar8 + 0x14) = iVar2;\n      *(undefined **)(iVar2 + 8) = puVar9;\n      *(undefined **)(iVar2 + 0xc) = puVar9;\n      *(uint *)(iVar2 + 4) = uVar5 | 1;\n      *(uint *)(iVar2 + uVar5) = uVar5;\n      goto LAB_080089f0;\n    }\n    uVar6 = puVar3[3];\n    *(uint *)(puVar9 + 0xc) = uVar6;\n    *(undefined **)(uVar6 + 8) = puVar9;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  else {\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  if (uVar5 < 0x200) {\n    iVar11 = (uVar5 >> 3) + 1;\n    uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(puVar8 + 4);\n    iVar1 = *(int *)(puVar8 + iVar11 * 8);\n    *(int *)(iVar2 + 8) = iVar1;\n    *(undefined **)(iVar2 + 0xc) = puVar8 + iVar11 * 8 + -8;\n    *(uint *)(puVar8 + 4) = uVar5;\n    *(int *)(puVar8 + iVar11 * 8) = iVar2;\n    *(int *)(iVar1 + 0xc) = iVar2;\n    do_nothing_with_pointer_080090b4(param_1,iVar2,uVar5,param_4);\n    return;\n  }\n  uVar6 = uVar5 >> 9;\n  if (uVar6 < 5) {\n    iVar11 = ((uVar5 >> 6) + 0x39) * 8;\n    iVar1 = (uVar5 >> 6) + 0x38;\n  }\n  else if (uVar6 < 0x15) {\n    iVar11 = (uVar6 + 0x5c) * 8;\n    iVar1 = uVar6 + 0x5b;\n  }\n  else if (uVar6 < 0x55) {\n    iVar11 = ((uVar5 >> 0xc) + 0x6f) * 8;\n    iVar1 = (uVar5 >> 0xc) + 0x6e;\n  }\n  else if (uVar6 < 0x155) {\n    iVar11 = ((uVar5 >> 0xf) + 0x78) * 8;\n    iVar1 = (uVar5 >> 0xf) + 0x77;\n  }\n  else if (uVar6 < 0x555) {\n    iVar11 = ((uVar5 >> 0x12) + 0x7d) * 8;\n    iVar1 = (uVar5 >> 0x12) + 0x7c;\n  }\n  else {\n    iVar11 = 0x3f8;\n    iVar1 = 0x7e;\n  }\n  puVar9 = *(undefined **)(puVar8 + iVar11);\n  puVar7 = puVar8 + iVar11 + -8;\n  if (puVar7 == puVar9) {\n    puVar9 = (undefined *)(1 << (iVar1 >> 2 & 0xffU) | *(uint *)(puVar8 + 4));\n    *(undefined **)(puVar8 + 4) = puVar9;\n    puVar8 = puVar7;\n  }\n  else {\n    do {\n      puVar8 = puVar9;\n      if ((*(uint *)(puVar9 + 4) & 0xfffffffc) <= uVar5) break;\n      puVar9 = *(undefined **)(puVar9 + 8);\n      puVar8 = puVar7;\n    } while (puVar7 != puVar9);\n    puVar7 = *(undefined **)(puVar8 + 0xc);\n  }\n  *(undefined **)(iVar2 + 8) = puVar8;\n  *(undefined **)(iVar2 + 0xc) = puVar7;\n  *(int *)(puVar7 + 8) = iVar2;\n  *(int *)(puVar8 + 0xc) = iVar2;\n  do_nothing_with_pointer_080090b4(param_1,iVar2,puVar9,param_4);\n  return;\n}\n\n",
            "called": [
                "FUN_080090b4",
                "FUN_080090a8",
                "FUN_0800884c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080088ec",
            "calling": [
                "FUN_080097cc",
                "FUN_08008af8",
                "FUN_08005e9c",
                "FUN_08009adc"
            ],
            "imported": false,
            "current_name": "FUNC_080088ec"
        },
        "FUN_08005224": {
            "renaming": {
                "PTR_DAT_08005294": "data_array_1",
                "PTR_process_data_08004ee8_1_08005288": "ptr_process_data_1",
                "PTR_DAT_08005284": "ptr_data_2",
                "FUN_08005224": "initialize_all_data_and_parameters_08005224",
                "PTR_DAT_08005298": "data_array_2",
                "PTR_processDataWithParam_08004ea4_1_08005280": "ptr_process_data_with_param_1",
                "initialize_parameters_0800491c": "initialize_parameters",
                "set_flag_and_process_bits_080055f4": "set_flag_and_process_bits",
                "initialize_data_08005348": "initialize_data_1",
                "PTR_DAT_0800528c": "ptr_data_3",
                "calculate_parameter_080052a0": "calculate_parameter",
                "PTR_DAT_0800529c": "data_array_3",
                "PTR_DAT_0800527c": "ptr_data_1",
                "initialize_and_process_data_080053b0": "initialize_and_process_data",
                "initialize_data_08005598": "initialize_data_2",
                "initialize_memory_protection_08005500": "initialize_memory_protection",
                "set_first_bit_to_one_0800360c": "set_first_bit_to_one",
                "set_bit_in_uint_array_080036a8": "set_bit_in_uint_array",
                "handle_interrupt_08004e74": "handle_interrupt",
                "set_display_flag_and_update_080014f0": "set_display_flag_and_update",
                "PTR_get_value_from_pointer_08004f2c_1_08005290": "ptr_get_value_from_pointer_1"
            },
            "code": "void initialize_all_data_and_parameters_08005224(void)\n{\n  set_display_flag_and_update();\n  calculate_parameter();\n  set_flag_and_process_bits();\n  initialize_data_1();\n  initialize_data_2();\n  initialize_memory_protection();\n  initialize_and_process_data();\n  *(void **)PTR_DAT_0800527c = PTR_processDataWithParam_08004ea4_1_08005280;\n  *(void **)PTR_DAT_08005284 = PTR_process_data_08004ee8_1_08005288;\n  *(void **)PTR_DAT_0800528c = PTR_get_value_from_pointer_08004f2c_1_08005290;\n  set_bit_in_uint_array(PTR_DAT_08005294,0);\n  set_bit_in_uint_array(PTR_DAT_08005294,0xc);\n  initialize_parameters(PTR_DAT_08005298);\n  set_first_bit_to_one(PTR_DAT_0800529c);\n  handle_interrupt(0);\n  while( true )\n  {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "FUN_08004e74",
                "FUN_0800491c",
                "FUN_080036a8",
                "FUN_08005500",
                "FUN_08005598",
                "FUN_080053b0",
                "FUN_0800360c",
                "FUN_080055f4",
                "FUN_080014f0",
                "FUN_080052a0",
                "FUN_08005348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005224",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": true,
            "current_name": "initialize_all_data_and_parameters_08005224"
        },
        "FUN_08003440": {
            "renaming": {
                "DAT_080034f0": "PTR_DAT_080034f0",
                "local_c": "value_0",
                "DAT_080034f4": "PTR_DAT_080034f4",
                "FUN_08003440": "calculate_value_08003440",
                "uStack_24": "ptr_8",
                "DAT_08003500": "DAT_08003500",
                "uStack_20": "ptr_c",
                "local_1c": "value_4",
                "local_2c": "ptr_0",
                "local_18": "value_8",
                "uStack_28": "ptr_4",
                "DAT_080034fc": "DAT_080034fc",
                "local_10": "value",
                "DAT_080034f8": "DAT_080034f8",
                "local_30": "value_16",
                "local_14": "flags"
            },
            "code": "uint calculate_value_08003440(void)\n{\n  uint value = 0;\n  uint flags = *(uint *)(DAT_080034f8 + 4);\n  if ((flags & 0xc) == 4) {\n    value = DAT_080034fc;\n  }\n  else if ((flags & 0xc) == 8) {\n    uint index = (flags >> 0x12) & 0xf;\n    uint factor = *(byte *)((int)&PTR_DAT_08003440 + index);\n    if ((flags & 0x10000) == 0) {\n      value = DAT_08003500 * factor;\n    }\n    else {\n      uint divisor = *(byte *)((int)&PTR_DAT_08003440 + (*(uint *)(DAT_080034f8 + 4) >> 0x11 & 1));\n      value = (DAT_080034fc * factor) / divisor;\n    }\n  }\n  else {\n    value = DAT_080034fc;\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003440",
            "calling": [
                "FUN_08003260"
            ],
            "imported": true,
            "current_name": "calculate_value_08003440"
        },
        "FUN_080035fa": {
            "renaming": {
                "FUN_080035fa": "do_nothing_080035fa"
            },
            "code": "\nvoid do_nothing_080035fa(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fa",
            "calling": [
                "FUN_080035a4"
            ],
            "imported": true,
            "current_name": "do_nothing_080035fa"
        },
        "FUN_08004f2c": {
            "renaming": {
                "uVar1": "value",
                "FUN_08004f2c": "get_value_from_pointer_08004f2c"
            },
            "code": "int get_value_from_pointer_08004f2c() {\n  int value = get_value_from_pointer_08004f2c_080015a0();\n  return value;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": true,
            "current_name": "get_value_from_pointer_08004f2c"
        },
        "FUN_08005348": {
            "renaming": {
                "calculate_result_08001ab0": "calculate_result",
                "FUN_08005348": "initialize_data_08005348",
                "PTR_s____src_main_c_080053ac": "source_main_c",
                "wait_forever_08005674": "wait_forever",
                "PTR_DAT_080053a0": "data_pointer",
                "DAT_080053a4": "data_value1",
                "DAT_080053a8": "data_value2"
            },
            "code": "void initialize_data_08005348(void)\n{\n  int result;\n\n  PTR_DAT_080053a0->value1 = DAT_080053a4;\n  PTR_DAT_080053a0->value2 = DAT_080053a8;\n  PTR_DAT_080053a0->value3 = 0;\n  PTR_DAT_080053a0->value4 = 0;\n  PTR_DAT_080053a0->value5 = 0x4000;\n  PTR_DAT_080053a0->value6 = 0;\n  PTR_DAT_080053a0->value7 = 0;\n  PTR_DAT_080053a0->value8 = 0;\n  PTR_DAT_080053a0->value9 = 0;\n  result = calculate_result(PTR_DAT_080053a0);\n  if (result != 0) {\n    wait_forever(\"source_main.c\", 378);\n  }\n  return;\n}",
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005348",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "initialize_data_08005348"
        },
        "FUN_08004378": {
            "renaming": {
                "FUN_08004378": "do_nothing_08004378"
            },
            "code": "\nvoid do_nothing_08004378(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004378",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": true,
            "current_name": "do_nothing_08004378"
        },
        "FUN_080046ec": {
            "renaming": {
                "iVar3": "quotient1",
                "iVar4": "quotient2",
                "iVar5": "quotient3",
                "FUN_080046ec": "calculate_values_080046ec",
                "param_1": "ptr_param",
                "lVar1": "dividend1",
                "lVar2": "dividend2",
                "uVar6": "shifted_value"
            },
            "code": "void calculate_values_080046ec(int *ptr_param)\n{\n  long long dividend1;\n  long long dividend2;\n  int quotient1;\n  int quotient2;\n  int quotient3;\n  undefined8 shifted_value;\n  \n  *(uint *)(*ptr_param + 0x10) = ptr_param[3] | *(uint *)(*ptr_param + 0x10) & 0xffffcfff;\n  *(uint *)(*ptr_param + 0xc) =\n       *(uint *)(*ptr_param + 0xc) & 0xffffe9f3 | ptr_param[5] | ptr_param[2] | ptr_param[4];\n  *(uint *)(*ptr_param + 0x14) = ptr_param[6] | *(uint *)(*ptr_param + 0x14) & 0xfffffcff;\n  if (*ptr_param == PTR_DAT_08004914) {\n    shifted_value = get_shifted_value_08003540();\n    dividend1 = (ulonglong)PTR_DAT_08004918 *\n            ((ulonglong)(uint)((int)shifted_value * 0x19) / (ulonglong)(uint)(ptr_param[1] << 2));\n    quotient1 = get_shifted_value_08003540((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),(int)dividend1);\n    quotient2 = ptr_param[1];\n    shifted_value = get_shifted_value_08003540();\n    dividend2 = (ulonglong)PTR_DAT_08004918 *\n            (ulonglong)\n            (((uint)(quotient1 * 0x19) / (uint)(quotient2 << 2) +\n             (uint)((ulonglong)PTR_DAT_08004918 *\n                    ((ulonglong)(uint)((int)shifted_value * 0x19) / (ulonglong)(uint)(ptr_param[1] << 2)) >>\n                   0x25) * -100) * 0x10 + 0x32);\n    quotient1 = get_shifted_value_08003540((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),(int)dividend2);\n    quotient3 = ptr_param[1];\n    quotient2 = get_shifted_value_08003540();\n    *(uint *)(*ptr_param + 8) =\n         ((uint)((ulonglong)PTR_DAT_08004918 *\n                 (ulonglong)\n                 (((uint)(quotient1 * 0x19) / (uint)(quotient3 << 2) +\n                  (uint)((ulonglong)PTR_DAT_08004918 *\n                         ((ulonglong)(uint)(quotient2 * 0x19) / (ulonglong)(uint)(ptr_param[1] << 2)) >>\n                        0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf) +\n         (uint)((ulonglong)dividend1 >> 0x25) * 0x10 + ((uint)((ulonglong)dividend2 >> 0x25) & 0xf0);\n  }\n  else {\n    shifted_value = get_shifted_value_from_pointer_08003518();\n    dividend1 = (ulonglong)PTR_DAT_08004918 *\n            ((ulonglong)(uint)((int)shifted_value * 0x19) / (ulonglong)(uint)(ptr_param[1] << 2));\n    quotient1 = get_shifted_value_from_pointer_08003518((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),(int)dividend1);\n    quotient2 = ptr_param[1];\n    shifted_value = get_shifted_value_from_pointer_08003518();\n    dividend2 = (ulonglong)PTR_DAT_08004918 *\n            (ulonglong)\n            (((uint)(quotient1 * 0x19) / (uint)(quotient2 << 2) +\n             (uint)((ulonglong)PTR_DAT_08004918 *\n                    ((ulonglong)(uint)((int)shifted_value * 0x19) / (ulonglong)(uint)(ptr_param[1] << 2)) >>\n                   0x25) * -100) * 0x10 + 0x32);\n    quotient1 = get_shifted_value_from_pointer_08003518((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),(int)dividend2);\n    quotient3 = ptr_param[1];\n    quotient2 = get_shifted_value_from_pointer_08003518();\n    *(uint *)(*ptr_param + 8) =\n         ((uint)((ulonglong)PTR_DAT_08004918 *\n                 (ulonglong)\n                 (((uint)(quotient1 * 0x19) / (uint)(quotient3 << 2) +\n                  (uint)((ulonglong)PTR_DAT_08004918 *\n                         ((ulonglong)(uint)(quotient2 * 0x19) / (ulonglong)(uint)(ptr_param[1] << 2)) >>\n                        0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf) +\n         (uint)((ulonglong)dividend1 >> 0x25) * 0x10 + ((uint)((ulonglong)dividend2 >> 0x25) & 0xf0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003518",
                "FUN_08003540"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046ec",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": true,
            "current_name": "calculate_values_080046ec"
        },
        "FUN_08005500": {
            "renaming": {
                "PTR_DAT_08005590": "memory_protection_data",
                "PTR_s____src_main_c_08005594": "source_file_main_c",
                "FUN_08005500": "initialize_memory_protection_08005500",
                "update_permissions_and_flags_08003a94": "update_permissions_and_flags",
                "set_flag_080042de": "set_flag",
                "check_params_validity_080035a4": "check_params_validity"
            },
            "code": "void initialize_memory_protection_08005500(void)\n{\n  int validity_check_result;\n  unsigned int permissions[4] = {0x1000, 0, 0, 0};\n  unsigned int flag = 0x20;\n  unsigned int flag_value = 0;\n  unsigned int *PTR_DAT_08005590 = PTR_DAT_08005590;\n  \n  PTR_DAT_08005590[0] = 0x40000000;\n  PTR_DAT_08005590[1] = 36000;\n  PTR_DAT_08005590[2] = 0;\n  PTR_DAT_08005590[3] = 0x14;\n  PTR_DAT_08005590[4] = 0;\n  PTR_DAT_08005590[6] = 0;\n  \n  validity_check_result = check_params_validity(PTR_DAT_08005590);\n  if (validity_check_result != 0) {\n    wait_forever(PTR_s____src_main_c_08005594, 0x1d0);\n  }\n  \n  validity_check_result = update_permissions_and_flags(PTR_DAT_08005590, permissions);\n  if (validity_check_result != 0) {\n    wait_forever(PTR_s____src_main_c_08005594, 0x1d5);\n  }\n  \n  validity_check_result = set_flag(PTR_DAT_08005590, &flag, &flag_value);\n  if (validity_check_result != 0) {\n    wait_forever(PTR_s____src_main_c_08005594, 0x1dc);\n  }\n  \n  return;\n}",
            "called": [
                "FUN_08005674",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005500",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "initialize_memory_protection_08005500"
        },
        "FUN_08002c2e": {
            "renaming": {
                "iVar1": "flag_value",
                "param_1": "flag_ptr",
                "FUN_08002c2e": "check_and_update_flags_08002c2e",
                "param_2": "max_value",
                "param_3": "min_value"
            },
            "code": "int check_and_update_flags_08002c2e(int *flag_ptr,uint max_value,int min_value)\n{\n  int flag_value;\n  while( true ) {\n    flag_value = *(uint *)(*flag_ptr + 0x14);\n    if ((flag_value & 4) == 4) {\n      return 0;\n    }\n    if (check_flag_08002d3c(flag_ptr) != 0) break;\n    if ((max_value != 0xffffffff) && ((max_value == 0 || (flag_value = get_value_from_pointer_080015a0(), max_value < (uint)(flag_value - min_value)))) {\n      flag_ptr[0x10] |= 0x20;\n      flag_ptr[0xc] = 0;\n      *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n      *(undefined *)(flag_ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2e",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": true,
            "current_name": "check_and_update_flags_08002c2e"
        },
        "FUN_08003568": {
            "renaming": {
                "bVar1": "delay_not_zero",
                "local_c": "delay",
                "param_1": "num_iterations",
                "FUN_08003568": "calculate_delay_08003568",
                "PTR_DAT_0800359c": "DATA_POINTER",
                "DAT_080035a0": "MULTIPLIER"
            },
            "code": "void calculate_delay_08003568(int num_iterations) {\n  const int DAT_080035a0 = 1745329;\n  const int SHIFT_AMOUNT = 41;\n  int delay = num_iterations * ((unsigned long long) DAT_080035a0 * *(uint *)PTR_DAT_0800359c >> SHIFT_AMOUNT);\n  while (delay != 0) {\n    delay--;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003568",
            "calling": [
                "FUN_08002d98"
            ],
            "imported": true,
            "current_name": "calculate_delay_08003568"
        },
        "FUN_080049cc": {
            "renaming": {
                "local_c": "sum1",
                "param_1": "input_value",
                "local_1c": "max_loop_count",
                "FUN_080049cc": "calculate_and_assign_values_080049cc",
                "local_2c": "temp2",
                "local_18": "sum4",
                "local_28": "temp1",
                "local_10": "sum2",
                "local_20": "loop_count",
                "local_14": "sum3",
                "local_24": "function_pointer"
            },
            "code": "void calculate_and_assign_values_080049cc(int input_value)\n{\n  int loop_count = 1;\n  int sum1 = 0, sum2 = 0, sum3 = 0, sum4 = 0;\n  int temp1, temp2;\n  int function_pointer = (**(code **)PTR_DAT_08004adc)();\n  int max_loop_count = 0;\n  while(loop_count <= max_loop_count)\n  {\n    temp1 = 0;\n    temp2 = 0;\n    count_leading_zero_bits_08004ae0(input_value);\n    calculate_and_assign_floats_08004d78(input_value, &temp1, &temp2);\n    sum3 = FUNC_08000aa8(sum3, temp1);\n    sum4 = FUNC_08000aa8(sum4, temp2);\n    sum1 = FUNC_08000aa8(sum1, *(undefined4 *)(input_value + 0x10));\n    sum2 = FUNC_08000aa8(sum2, *(undefined4 *)(input_value + 0x14));\n    function_pointer = (**(code **)PTR_DAT_08004adc)();\n    max_loop_count = max_loop_count + 1;\n  }\n  int leading_zero_bits = count_leading_zero_bits_08000c10(loop_count);\n  *(undefined4 *)(input_value + 0x1c) = FUNC_08000e20(sum1, leading_zero_bits);\n  *(undefined4 *)(input_value + 0x20) = FUNC_08000e20(sum2, leading_zero_bits);\n  *(undefined4 *)(input_value + 0x24) = FUNC_08000e20(sum3, leading_zero_bits);\n  *(undefined4 *)(input_value + 0x28) = FUNC_08000e20(sum4, leading_zero_bits);\n}",
            "called": [
                "FUN_08004ae0",
                "FUN_08004d78",
                "FUN_08000c10",
                "FUN_08000aa8",
                "FUN_08000e20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049cc",
            "calling": [
                "FUN_0800491c"
            ],
            "imported": true,
            "current_name": "calculate_and_assign_values_080049cc"
        },
        "FUN_08003c94": {
            "renaming": {
                "local_c": "current_param_value",
                "param_1": "param_list",
                "FUN_08003c94": "update_params_08003c94",
                "param_2": "new_params",
                "DAT_08003d5c": "ptr_dat_08003d5c",
                "DAT_08003d54": "ptr_dat_08003d54",
                "DAT_08003d58": "ptr_dat_08003d58"
            },
            "code": "void update_params_08003c94(uint *param_list, uint *new_params) {\n  uint current_param_value;\n  current_param_value = *param_list;\n  if ((((param_list == DAT_08003d54) || (param_list == (uint *)0x40000000)) || (param_list == DAT_08003d58)) || (param_list == DAT_08003d5c)) {\n    current_param_value = new_params[1] | current_param_value & 0xffffff8f;\n  }\n  if (((param_list == DAT_08003d54) || (param_list == (uint *)0x40000000)) || ((param_list == DAT_08003d58 || (param_list == DAT_08003d5c)))) {\n    current_param_value = new_params[3] | current_param_value & 0xfffffcff;\n  }\n  *param_list = new_params[5] | current_param_value & 0xffffff7f;\n  param_list[0xb] = new_params[2];\n  param_list[10] = *new_params;\n  if (param_list == DAT_08003d54) {\n    param_list[0xc] = new_params[4];\n  }\n  param_list[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c94",
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "imported": true,
            "current_name": "update_params_08003c94"
        },
        "FUN_08000978": {
            "renaming": {
                "param_1": "first_param",
                "FUN_08000978": "check_and_return_params_08000978",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param"
            },
            "code": "void check_and_return_params_08000978(undefined4 first_param, undefined4 second_param, undefined4 third_param, undefined4 fourth_param)\n{\n  check_and_return_param_08000988_08000988(third_param, fourth_param, first_param, second_param);\n  return;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000978",
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "imported": true,
            "current_name": "check_and_return_params_08000978"
        },
        "FUN_0800884c": {
            "renaming": {
                "iVar3": "temp_value",
                "iVar4": "new_value",
                "puVar2": "temp_ptr",
                "param_1": "value",
                "FUN_0800884c": "calculate_value_0800884c",
                "param_2": "offset",
                "puVar1": "data_ptr",
                "uVar5": "mask"
            },
            "code": "int calculate_value_0800884c(int value, int offset)\n{\n  uint32_t* data_ptr = PTR_DAT_080088e0;\n  do_nothing_with_pointer_080090a8();\n  uint32_t mask = *(uint32_t *)(*(int *)(data_ptr + 8) + 4) & 0xfffffffc;\n  int new_value = ((0xfef - offset) + mask & 0xfffff000) - 0x1000;\n  if (0xfff < new_value) {\n    int temp_value = update_value_08009744(value,0);\n    if (temp_value == *(int *)(data_ptr + 8) + mask) {\n      temp_value = update_value_08009744(value,-new_value);\n      undefined* temp_ptr = PTR_DAT_080088e4;\n      if (temp_value != -1) {\n        int temp_int = *(int *)PTR_DAT_080088e4;\n        *(uint32_t *)(*(int *)(data_ptr + 8) + 4) = mask - new_value | 1;\n        *(int *)temp_ptr = temp_int - new_value;\n        do_nothing_with_pointer_080090b4(value);\n        return 1;\n      }\n      new_value = update_value_08009744(value,0);\n      temp_ptr = PTR_DAT_080088e4;\n      mask = new_value - *(int *)(data_ptr + 8);\n      if (0xf < (int)mask) {\n        int temp_int = *(int *)PTR_DAT_080088e8;\n        *(uint32_t *)(*(int *)(data_ptr + 8) + 4) = mask | 1;\n        *(int *)temp_ptr = new_value - temp_int;\n      }\n    }\n  }\n  do_nothing_with_pointer_080090b4(value);\n  return 0;\n}",
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_08009744"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800884c",
            "calling": [
                "FUN_080088ec"
            ],
            "imported": true,
            "current_name": "calculate_value_0800884c"
        },
        "FUN_0800901c": {
            "renaming": {
                "puVar4": "next_element",
                "param_1": "input_array",
                "FUN_0800901c": "find_first_occurrence_of_byte_0800901c",
                "param_2": "array_length",
                "param_3": "search_byte",
                "puVar1": "current_element",
                "uVar3": "xor_result",
                "uVar2": "combined_value",
                "uVar5": "search_value",
                "bVar6": "no_more_elements"
            },
            "code": "uint * find_first_occurrence_of_byte_0800901c(uint *input_array, uint array_length, uint *search_byte){\n  uint *current_element;\n  uint search_value = array_length & 0xff;\n  if (((uint)input_array & 3) == 0) {\n    current_element = input_array;\nLAB_0800904a:\n    input_array = search_byte;\n    if ((uint *)0x3 < search_byte) {\n      uint combined_value = (array_length & 0xff) << 8 | search_value;\n      uint *next_element = current_element + 1;\n      do {\n        uint xor_result = *next_element ^ (combined_value | combined_value << 0x10);\n        current_element = next_element;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) goto LAB_08009050;\n        search_byte = search_byte + -1;\n        input_array = search_byte;\n        next_element = current_element + 1;\n      } while ((uint *)0x3 < search_byte);\n    }\n    next_element = current_element;\n    search_byte = input_array;\n    if (input_array != (uint *)0x0) {\nLAB_08009050:\n      input_array = next_element;\n      if (*(byte *)input_array != search_value) {\n        search_byte = (uint *)((int)search_byte + (int)next_element);\n        do {\n          input_array = (uint *)((int)input_array + 1);\n          if (search_byte == input_array) goto LAB_0800906c;\n        } while (*(byte *)input_array != search_value);\n      }\n    }\n  }\n  else {\n    uint *last_element = (uint *)((int)search_byte + -1);\n    if (search_byte == (uint *)0x0) {\nLAB_0800906c:\n      current_element = (uint *)0x0;\n    }\n    else if (*(byte *)input_array != search_value) {\n      uint *next_element = (uint *)((int)input_array + 1);\n      do {\n        current_element = next_element;\n        next_element = current_element;\n        search_byte = last_element;\n        if (((uint)current_element & 3) == 0) goto LAB_0800904a;\n        bool no_more_elements = last_element == (uint *)0x0;\n        last_element = (uint *)((int)last_element + -1);\n        if (no_more_elements) goto LAB_0800906c;\n        next_element = (uint *)((int)current_element + 1);\n      } while (*(byte *)current_element != search_value);\n    }\n  }\n  return current_element;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800901c",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "find_first_occurrence_of_byte_0800901c"
        },
        "FUN_0800177c": {
            "renaming": {
                "param_1": "param",
                "FUN_0800177c": "set_bit_if_param_is_4_0800177c",
                "DAT_080017b0": "data_pointer"
            },
            "code": "void set_bit_if_param_is_4_0800177c(int param){\n  if (param == 4) {\n    *DAT_080017b0 = *DAT_080017b0 | 4;\n  }\n  else {\n    *DAT_080017b0 = *DAT_080017b0 & 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800177c",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": true,
            "current_name": "set_bit_if_param_is_4_0800177c"
        },
        "FUN_080017b4": {
            "renaming": {
                "FUN_080017b4": "processUserInput_080017b4",
                "processInput_08004f78": "processInputFromUser"
            },
            "code": "void processUserInput_080017b4(void)\n{\n  processInputFromUser(0);\n  return;\n}",
            "called": [
                "FUN_08004f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017b4",
            "calling": [
                "FUN_08005704"
            ],
            "imported": true,
            "current_name": "processUserInput_080017b4"
        },
        "FUN_08005598": {
            "renaming": {
                "check_parameter_0800438a": "check_parameter",
                "FUN_08005598": "initialize_data_08005598",
                "parameter_check_result": "parameter_check_result",
                "PTR_DAT_080055e8": "data_pointer",
                "DAT_080055ec": "initial_value",
                "PTR_s____src_main_c_080055f0": "wait_message"
            },
            "code": "void initialize_data_08005598(void)\n{\n  int parameter_check_result;\n  int* PTR_DAT_080055e8 = (int*)PTR_DAT_080055e8;\n  *PTR_DAT_080055e8 = DAT_080055ec;\n  *(PTR_DAT_080055e8 + 1) = 0x1c200;\n  *(PTR_DAT_080055e8 + 2) = 0;\n  *(PTR_DAT_080055e8 + 3) = 0;\n  *(PTR_DAT_080055e8 + 4) = 0;\n  *(PTR_DAT_080055e8 + 5) = 0xc;\n  *(PTR_DAT_080055e8 + 6) = 0;\n  *(PTR_DAT_080055e8 + 7) = 0;\n  parameter_check_result = check_parameter_0800438a(PTR_DAT_080055e8);\n  if (parameter_check_result != 0) {\n    wait_forever_08005674(PTR_s____src_main_c_080055f0,0x1ed);\n  }\n  return;\n}",
            "called": [
                "FUN_0800438a",
                "FUN_08005674"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005598",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "initialize_data_08005598"
        },
        "FUN_08001030": {
            "renaming": {
                "FUN_08001030": "is_string_empty_08001030",
                "in_CY": "input_char",
                "concatenate_uint32s_to_uint64_08000fc8": "concatenate_uint32s_to_uint64"
            },
            "code": "bool is_string_empty_08001030(void)\n{\n  char input_char;\n  concatenate_uint32s_to_uint64();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000fc8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001030",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "is_string_empty_08001030"
        },
        "FUN_080011ec": {
            "renaming": {
                "FUNC_0800121c": "calculate_helper",
                "uVar1": "output",
                "FUN_080011ec": "calculate_output_080011ec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "undefined8 calculate_output_080011ec(int input1, int input2, int input3, int input4) {\n  undefined8 output;\n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    output = CONCAT44(input2, input1);\n  }\n  else {\n    output = calculate_helper();\n  }\n  return output;\n}",
            "called": [
                "FUN_0800121c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011ec",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "calculate_output_080011ec"
        },
        "FUN_08004424": {
            "renaming": {
                "FUN_08004424": "do_nothing_08004424"
            },
            "code": "\nvoid do_nothing_08004424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004424",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": true,
            "current_name": "do_nothing_08004424"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "process_input_wrapper_08004f3c",
                "param_1": "input_data",
                "param_2": "input_data_size"
            },
            "code": "void process_input_wrapper_08004f3c(const undefined4 input_data, const undefined2 input_data_size){\n  process_input(PTR_DAT_08004f5c, input_data, input_data_size, 0x32);\n  return;\n}",
            "called": [
                "FUN_08004436"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "process_input_wrapper_08004f3c"
        },
        "FUN_08009adc": {
            "renaming": {
                "FUN_08009adc": "FUNC_08009adc"
            },
            "code": "\nint * FUNC_08009adc(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int *piVar2;\n  int iVar3;\n  int *piVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  int *piVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  int iVar12;\n  \n  if (param_2 == (int *)0x0) {\n    piVar4 = (int *)FUNC_08008af8(param_1,param_3);\n    return piVar4;\n  }\n  doNothingWithPointer_080090a8();\n  puVar1 = PTR_DAT_08009e38;\n  uVar7 = param_2[-1];\n  uVar10 = uVar7 & 0xfffffffc;\n  piVar4 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_08009b8e;\n  }\n  if (uVar9 < param_3) {\nLAB_08009b8e:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  iVar12 = (int)piVar4 + uVar10;\n  uVar11 = uVar10;\n  if ((int)uVar10 < (int)uVar9) {\n    if (*(int *)(PTR_DAT_08009e38 + 8) == iVar12) {\n      iVar12 = (*(uint *)(*(int *)(PTR_DAT_08009e38 + 8) + 4) & 0xfffffffc) + uVar10;\n      if ((int)(uVar9 + 0x10) <= iVar12) {\n        *(uint *)(PTR_DAT_08009e38 + 8) = (int)piVar4 + uVar9;\n        *(uint *)((int)piVar4 + uVar9 + 4) = iVar12 - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        do_nothing_with_pointer_080090b4(param_1);\n        return param_2;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        if ((int)(uVar9 + 0x10) <= (int)(iVar12 + uVar7)) {\n          iVar6 = piVar2[3];\n          piVar4 = piVar2 + 2;\n          iVar3 = *piVar4;\n          uVar10 = uVar10 - 4;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          *(int *)(iVar6 + 8) = iVar3;\n          if (uVar10 < 0x25) {\n            iVar3 = *param_2;\n            piVar8 = piVar4;\n            if (0x13 < uVar10) {\n              piVar2[2] = iVar3;\n              piVar2[3] = param_2[1];\n              iVar3 = param_2[2];\n              if (uVar10 < 0x1c) {\n                param_2 = param_2 + 2;\n                piVar8 = piVar2 + 4;\n              }\n              else {\n                piVar2[4] = iVar3;\n                piVar2[5] = param_2[3];\n                iVar3 = param_2[4];\n                if (uVar10 == 0x24) {\n                  piVar2[6] = iVar3;\n                  piVar2[7] = param_2[5];\n                  iVar3 = param_2[6];\n                  param_2 = param_2 + 6;\n                  piVar8 = piVar2 + 8;\n                }\n                else {\n                  param_2 = param_2 + 4;\n                  piVar8 = piVar2 + 6;\n                }\n              }\n            }\n            *piVar8 = iVar3;\n            piVar8[1] = param_2[1];\n            piVar8[2] = param_2[2];\n          }\n          else {\n            copy_memory_08009a18(piVar4,param_2);\n          }\n          *(uint *)(puVar1 + 8) = (int)piVar2 + uVar9;\n          *(uint *)((int)piVar2 + uVar9 + 4) = (iVar12 + uVar7) - uVar9 | 1;\n          piVar2[1] = uVar9 | piVar2[1] & 1U;\n          do_nothing_with_pointer_080090b4(param_1);\n          return piVar4;\n        }\nLAB_08009bb0:\n        uVar11 = uVar10 + uVar7;\n        if ((int)uVar9 <= (int)uVar11) {\n          iVar6 = piVar2[3];\n          piVar8 = piVar2 + 2;\n          iVar3 = *piVar8;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar2 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (uVar10 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          copy_memory_08009a18(piVar8,param_2);\n          param_2 = piVar8;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(iVar12 + 4) & 0xfffffffe) + iVar12 + 4) << 0x1f) {\n        uVar5 = *(uint *)(iVar12 + 4) & 0xfffffffc;\n        uVar11 = uVar10 + uVar5;\n        if ((int)uVar11 < (int)uVar9) {\n          if ((int)(uVar7 << 0x1f) < 0) goto LAB_08009b36;\n          piVar2 = (int *)((int)piVar4 - param_2[-2]);\n          uVar7 = piVar2[1] & 0xfffffffc;\n          uVar11 = uVar5 + uVar7 + uVar10;\n          if ((int)uVar11 < (int)uVar9) goto LAB_08009bb0;\n          iVar3 = *(int *)(iVar12 + 8);\n          iVar12 = *(int *)(iVar12 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar12;\n          *(int *)(iVar12 + 8) = iVar3;\n          piVar8 = piVar2 + 2;\n          iVar3 = *piVar8;\n          iVar6 = piVar2[3];\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar2 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (0x24 < uVar10 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          uVar10 = uVar10 - 4;\n          iVar3 = *param_2;\n          piVar2 = piVar8;\n          if (0x13 < uVar10) {\n            piVar4[2] = iVar3;\n            piVar4[3] = param_2[1];\n            iVar3 = param_2[2];\n            if (uVar10 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar4 + 4;\n            }\n            else {\n              piVar4[4] = iVar3;\n              piVar4[5] = param_2[3];\n              iVar3 = param_2[4];\n              if (uVar10 == 0x24) {\n                piVar4[6] = iVar3;\n                piVar4[7] = param_2[5];\n                iVar3 = param_2[6];\n                param_2 = param_2 + 6;\n                piVar2 = piVar4 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar4 + 6;\n              }\n            }\n          }\n          *piVar2 = iVar3;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          param_2 = piVar8;\n        }\n        else {\n          iVar3 = *(int *)(iVar12 + 8);\n          iVar6 = *(int *)(iVar12 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar4 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    piVar2 = (int *)FUNC_08008af8(param_1,param_3);\n    if (piVar2 != (int *)0x0) {\n      if ((int *)((param_2[-1] & 0xfffffffeU) + (int)piVar4) == piVar2 + -2) {\n        uVar11 = uVar10 + (piVar2[-1] & 0xfffffffcU);\n        iVar12 = (int)piVar4 + uVar11;\n        goto LAB_08009c00;\n      }\n      uVar10 = uVar10 - 4;\n      if (uVar10 < 0x25) {\n        iVar12 = *param_2;\n        piVar4 = param_2;\n        piVar8 = piVar2;\n        if (0x13 < uVar10) {\n          *piVar2 = iVar12;\n          piVar2[1] = param_2[1];\n          if (uVar10 < 0x1c) {\n            iVar12 = param_2[2];\n            piVar4 = param_2 + 2;\n            piVar8 = piVar2 + 2;\n          }\n          else {\n            piVar2[2] = param_2[2];\n            piVar2[3] = param_2[3];\n            if (uVar10 == 0x24) {\n              piVar2[4] = param_2[4];\n              piVar2[5] = param_2[5];\n              iVar12 = param_2[6];\n              piVar4 = param_2 + 6;\n              piVar8 = piVar2 + 6;\n            }\n            else {\n              iVar12 = param_2[4];\n              piVar4 = param_2 + 4;\n              piVar8 = piVar2 + 4;\n            }\n          }\n        }\n        *piVar8 = iVar12;\n        piVar8[1] = piVar4[1];\n        piVar8[2] = piVar4[2];\n      }\n      else {\n        copy_memory_08009a18(piVar2,param_2);\n      }\n      FUNC_080088ec(param_1,param_2);\n    }\n    do_nothing_with_pointer_080090b4(param_1);\n    param_2 = piVar2;\n  }\n  else {\nLAB_08009c00:\n    if (uVar11 - uVar9 < 0x10) {\n      piVar4[1] = piVar4[1] & 1U | uVar11;\n      *(uint *)(iVar12 + 4) = *(uint *)(iVar12 + 4) | 1;\n    }\n    else {\n      piVar4[1] = piVar4[1] & 1U | uVar9;\n      *(uint *)((int)piVar4 + uVar9 + 4) = uVar11 - uVar9 | 1;\n      *(uint *)(iVar12 + 4) = *(uint *)(iVar12 + 4) | 1;\n      FUNC_080088ec(param_1,(int)piVar4 + uVar9 + 8);\n    }\n    do_nothing_with_pointer_080090b4(param_1);\n  }\n  return param_2;\n}\n\n",
            "called": [
                "FUN_080090b4",
                "FUN_080090a8",
                "FUN_08009a18",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009adc",
            "calling": [
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "FUNC_08009adc"
        },
        "FUN_08003696": {
            "renaming": {
                "FUN_08003696": "do_nothing_08003696"
            },
            "code": "\nvoid do_nothing_08003696(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003696",
            "calling": [
                "FUN_08003640"
            ],
            "imported": true,
            "current_name": "do_nothing_08003696"
        },
        "FUN_08002640": {
            "renaming": {
                "iVar1": "condition",
                "FUN_08002640": "process_data_08002640",
                "param_1": "data_ptr",
                "param_6": "value4",
                "param_2": "flag",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "value3",
                "uVar2": "result"
            },
            "code": "uint32_t process_data_08002640(uint32_t **data_ptr, uint8_t flag, uint16_t value1, int16_t value2, uint32_t value3, int value4)\n{\n  int condition;\n  uint32_t result;\n  **data_ptr |= 0x100;\n  do {\n    if (((*data_ptr)[5] & 1) == 0)\n    {\n      condition = 0;\n      goto LAB_0800270a;\n    }\n  } while ((value3 == 0xffffffff) || ((value3 != 0) && ((condition = get_value_from_pointer_080015a0() - value4), (uint32_t)(condition) <= value3)));\n  data_ptr[0xc] = (uint32_t *)0x0;\n  *((uint8_t *)((int)data_ptr + 0x3d)) = 0x20;\n  *((uint8_t *)((int)data_ptr + 0x3e)) = 0;\n  *((uint8_t *)(data_ptr + 0xf)) = 0;\n  condition = 3;\nLAB_0800270a:\n  if (condition == 0)\n  {\n    (*data_ptr)[4] = flag & 0xfe;\n    condition = check_value(data_ptr, DAT_080027f0, value3, value4);\n    if (condition == 0)\n    {\n      condition = check_and_update_flags(data_ptr, value3, value4, (*data_ptr)[6]);\n      if (condition == 0)\n      {\n        if (value2 == 1)\n        {\n          (*data_ptr)[4] = (uint32_t)(uint8_t)value1;\n        }\n        else\n        {\n          (*data_ptr)[4] = (uint32_t)(uint8_t)(value1 >> 8);\n          condition = check_and_update_flags(data_ptr, value3, value4);\n          if (condition != 0)\n          {\n            if (data_ptr[0x10] == (uint32_t *)0x4)\n            {\n              **data_ptr |= 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data_ptr)[4] = (uint32_t)(uint8_t)value1;\n        }\n        result = 0;\n      }\n      else if (data_ptr[0x10] == (uint32_t *)0x4)\n      {\n        **data_ptr |= 0x200;\n        result = 1;\n      }\n      else\n      {\n        result = 3;\n      }\n    }\n    else if (data_ptr[0x10] == (uint32_t *)0x4)\n    {\n      result = 1;\n    }\n    else\n    {\n      result = 3;\n    }\n  }\n  else\n  {\n    result = 3;\n  }\n  return result;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002ad8",
                "FUN_08002bb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002640",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": true,
            "current_name": "process_data_08002640"
        },
        "FUN_080008fc": {
            "renaming": {
                "are_param1_and_3_equal": "are_param1_and_3_equal",
                "is_xor_of_param2_and_4_positive": "is_xor_of_input_param2_and_4_positive",
                "param_1": "input_param1",
                "FUN_080008fc": "check_params_080008fc",
                "is_xor_of_param2_and_4_zero": "are_input_param2_and_4_equal",
                "are_param2_and_4_equal": "are_param2_and_4_equal",
                "xor_of_param2_and_4": "xor_of_input_param2_and_4",
                "is_param4_less_than_or_equal_to_param2": "is_input_param4_less_than_or_equal_to_input_param2",
                "is_param1_or_3_zero": "are_param1_or_3_zero",
                "param_2": "input_param2",
                "is_param2_or_4_negative": "are_param2_or_4_negative",
                "param_3": "input_param3",
                "is_param4_negative": "are_input_param2_and_4_different",
                "param_4": "input_param4",
                "is_param1_or_3_nonzero": "are_param1_or_3_nonzero",
                "is_param3_less_than_or_equal_to_param1": "is_input_param3_less_than_or_equal_to_input_param1"
            },
            "code": "uint check_params_080008fc(uint param_1, uint param_2, uint param_3, uint param_4)\n{\n  bool is_param2_or_4_negative = ((int)(param_2 << 1) >> 0x15 == -1 || (int)(param_4 << 1) >> 0x15 == -1);\n  bool is_param1_or_3_nonzero = ((int)(param_2 << 1) >> 0x15 == -1 && ((param_1 | param_2 << 0xc) != 0)) || (((int)(param_4 << 1) >> 0x15 == -1 && ((param_3 | param_4 << 0xc) != 0)));\n  if (is_param2_or_4_negative && is_param1_or_3_nonzero) {\n    return 1;\n  }\n  bool is_param1_or_3_zero = (param_1 | param_2 << 1) == 0 && (param_3 | param_4 << 1) == 0;\n  bool are_param2_and_4_equal = param_2 == param_4;\n  bool are_param1_and_3_equal = param_1 == param_3;\n  if (!is_param1_or_3_zero && !are_param2_and_4_equal && !are_param1_and_3_equal) {\n    uint xor_of_param2_and_4 = param_2 ^ param_4;\n    bool is_xor_of_param2_and_4_zero = xor_of_param2_and_4 == 0;\n    bool is_xor_of_param2_and_4_positive = -1 < (int)xor_of_param2_and_4;\n    bool is_param4_less_than_or_equal_to_param2 = param_4 <= param_2;\n    bool is_param3_less_than_or_equal_to_param1 = param_3 <= param_1;\n    bool is_param4_negative = -1 < (int)xor_of_param2_and_4 && is_param4_less_than_or_equal_to_param2;\n    if (is_xor_of_param2_and_4_zero || (is_xor_of_param2_and_4_positive && is_param4_less_than_or_equal_to_param2) || (!is_xor_of_param2_and_4_positive && is_param3_less_than_or_equal_to_param1)) {\n      return 0;\n    }\n    return ~((int)param_4 >> 0x1f) | 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [
                "FUN_08000988"
            ],
            "imported": true,
            "current_name": "check_params_080008fc"
        },
        "FUN_08000988": {
            "renaming": {
                "param_1": "input_param",
                "FUN_08000988": "check_and_return_param_08000988_08000988",
                "check_params_080008fc": "check_parameters"
            },
            "code": "undefined4 check_and_return_param_08000988_08000988(undefined4 input_param)\n{\n  check_parameters();\n  return input_param;\n}",
            "called": [
                "FUN_080008fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000988",
            "calling": [
                "FUN_08000978",
                "FUN_080009ac",
                "FUN_080009c0",
                "FUN_08000998"
            ],
            "imported": true,
            "current_name": "check_and_return_param_08000988_08000988"
        },
        "FUN_08001714": {
            "renaming": {
                "param_1": "display_data",
                "FUN_08001714": "display_update_08001714",
                "update_display_080015b4": "update_display"
            },
            "code": "void display_update_08001714(void *display_data){\n  update_display(display_data);\n  return;\n}",
            "called": [
                "FUN_080015b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001714",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": true,
            "current_name": "display_update_08001714"
        },
        "FUN_08005dfc": {
            "renaming": {
                "local_70": "local_string_ptr_2",
                "local_80": "local_string_ptr",
                "local_6c": "arg_4",
                "uStack_8": "arg_5",
                "param_1": "string_to_modify",
                "uStack_4": "static_var",
                "uStack_74": "local_var_2",
                "FUN_08005dfc": "set_string_to_null_terminator_08005dfc",
                "param_2": "string_length",
                "param_3": "arg_2",
                "param_4": "arg_3",
                "local_78": "local_var_1"
            },
            "code": "void set_string_to_null_terminator_08005dfc(char *string_to_modify, int string_length, int arg_2, int arg_3)\n{\n  char *local_string_ptr [2];\n  int local_var_1 = 0x7fffffff;\n  int local_var_2 = 0x7fffffff;\n  int static_var = DAT_08005e3c;\n  local_string_ptr[0] = string_to_modify;\n  char *local_string_ptr_2 = string_to_modify;\n  int arg_4 = arg_2;\n  int arg_5 = arg_3;\n  function_pointer(*(int *)PTR_PTR_DAT_08005e38, local_string_ptr, string_length, &arg_4);\n  *local_string_ptr[0] = 0;\n  return;\n}",
            "called": [
                "FUN_08005e9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dfc",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "set_string_to_null_terminator_08005dfc"
        },
        "FUN_080078c0": {
            "renaming": {
                "iVar3": "dividend_index",
                "iVar4": "divisor_length",
                "iVar5": "divisor_index",
                "comparison_result": "comparison_result",
                "quotient_sum": "quotient_sum",
                "puVar11": "divisor_current_ptr",
                "puVar12": "divisor_current_ptr",
                "param_1": "dividend_array",
                "dividend_high": "dividend_high",
                "uVar6": "quotient_candidate",
                "divisor_current": "divisor_current",
                "quotient_product": "quotient_product",
                "dividend_last_nonzero": "dividend_last_nonzero",
                "uVar1": "quotient",
                "dividend_product": "dividend_product",
                "puVar2": "dividend_ptr",
                "i": "i",
                "dividend_last_nonzero_ptr": "dividend_last_nonzero_ptr",
                "puVar7": "divisor_ptr",
                "divisor_difference": "divisor_difference",
                "puVar8": "dividend_ptr",
                "puVar9": "divisor_end_ptr",
                "divisor_high": "divisor_high",
                "dividend_sum": "dividend_sum",
                "FUN_080078c0": "calculate_quotient_080078c0",
                "param_2": "divisor_array",
                "carry": "carry",
                "dividend_current": "dividend_current"
            },
            "code": "uint calculate_quotient_080078c0(uint dividend_array[], uint divisor_array[], int dividend_length, int divisor_length)\n{\n  uint quotient = 0;\n  uint *dividend_ptr = dividend_array;\n  uint *divisor_ptr = divisor_array;\n  int dividend_index = dividend_length - 1;\n  int divisor_index = divisor_length - 1;\n  if (dividend_array[dividend_index] < divisor_array[divisor_index]) {\n    return 0;\n  }\n  uint quotient_candidate = dividend_ptr[dividend_index] / (divisor_ptr[divisor_index] + 1);\n  uint *divisor_end_ptr = divisor_ptr + divisor_index;\n  if (quotient_candidate != 0) {\n    uint carry = 0;\n    int i = 0;\n    do {\n      uint *divisor_current_ptr = divisor_ptr + 1;\n      uint dividend_current = *dividend_ptr & 0xffff;\n      uint dividend_high = *dividend_ptr >> 0x10;\n      uint dividend_product = quotient_candidate * dividend_current + carry;\n      uint dividend_sum = dividend_high + (dividend_product >> 0x10);\n      uint divisor_current = *divisor_current_ptr & 0xffff;\n      uint divisor_high = *divisor_current_ptr >> 0x10;\n      uint divisor_difference = dividend_sum - divisor_high;\n      uint quotient_product = quotient_candidate * divisor_current;\n      uint quotient_sum = quotient_product + (divisor_difference >> 31);\n      carry = (dividend_product & 0xffff) - (quotient_sum & 0xffff) + divisor_current;\n      dividend_ptr++;\n      divisor_ptr++;\n      *dividend_ptr = quotient_sum & 0xffff | ((divisor_difference - (carry & 0xffff)) + ((int)dividend_sum >> 0x10)) * 0x10000;\n      carry = ((int)quotient_sum >> 0x10) - (divisor_difference >> 16) + ((int)*dividend_ptr >> 0x10);\n      quotient_candidate = (uint)((int)quotient_candidate + 1);\n      i++;\n    } while (divisor_ptr <= divisor_end_ptr);\n    if (dividend_array[dividend_index] == 0) {\n      if ((dividend_array < dividend_array + dividend_length - 2) && (dividend_array[dividend_length - 2] == 0)) {\n        uint *dividend_last_nonzero_ptr = dividend_array + dividend_length - 3;\n        do {\n          dividend_index--;\n          if (dividend_last_nonzero_ptr <= dividend_array) break;\n          uint dividend_last_nonzero = *dividend_last_nonzero_ptr;\n          dividend_last_nonzero_ptr--;\n        } while (dividend_last_nonzero == 0);\n      }\n      *(int *)(dividend_array + dividend_length - 4) = dividend_index;\n    }\n  }\n  int comparison_result = compare_arrays_080094f8();\n  if (-1 < comparison_result) {\n    quotient_candidate++;\n    uint carry = 0;\n    uint *dividend_current_ptr = dividend_array;\n    uint *divisor_current_ptr = divisor_array + 1;\n    do {\n      uint dividend_current = *dividend_current_ptr & 0xffff;\n      uint dividend_high = *dividend_current_ptr >> 0x10;\n      uint dividend_product = carry - *divisor_current_ptr + dividend_current;\n      uint dividend_sum = dividend_high - (*divisor_current_ptr >> 0x10) + ((int)dividend_product >> 0x10);\n      uint quotient_product = quotient_candidate * *divisor_current_ptr;\n      uint quotient_sum = quotient_product + (dividend_sum >> 31);\n      carry = dividend_product - quotient_sum + *divisor_current_ptr;\n      *dividend_current_ptr = quotient_sum & 0xffff | ((dividend_sum << 0x10) - (*dividend_current_ptr & 0xffff) - (carry >> 16));\n      carry = ((int)quotient_sum >> 16) - (dividend_sum >> 16) + ((int)*dividend_current_ptr >> 0x10);\n      dividend_current_ptr++;\n      divisor_current_ptr++;\n    } while (divisor_current_ptr <= divisor_end_ptr);\n    if (dividend_array[dividend_index] == 0) {\n      if ((dividend_array < dividend_array + dividend_index) && (dividend_array[dividend_index - 1] == 0)) {\n        uint *dividend_last_nonzero_ptr = dividend_array + dividend_index - 2;\n        do {\n          dividend_index--;\n          if (dividend_last_nonzero_ptr <= dividend_array) break;\n          uint dividend_last_nonzero = *dividend_last_nonzero_ptr;\n          dividend_last_nonzero_ptr--;\n        } while (dividend_last_nonzero == 0);\n      }\n      *(int *)(dividend_array + dividend_length - 4) = dividend_index;\n    }\n  }\n  return quotient_candidate;\n}",
            "called": [
                "FUN_080094f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078c0",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "calculate_quotient_080078c0"
        },
        "thunk_FUN_08005838": {
            "renaming": {
                "iVar1": "difference",
                "DAT_080059f0": "calculate_value_helper",
                "param_1": "param1",
                "DAT_080059bc": "N/A",
                "DAT_080059a8": "N/A",
                "DAT_080059c8": "N/A",
                "uVar3": "flags",
                "uVar2": "result",
                "DAT_080059a0": "N/A",
                "uVar5": "abs_param1",
                "uVar4": "abs_param4",
                "DAT_080059c0": "N/A",
                "uVar6": "temp",
                "DAT_080059e8": "N/A",
                "DAT_080059e0": "N/A",
                "DAT_080059ac": "N/A",
                "DAT_080059b8": "N/A",
                "DAT_080059d8": "N/A",
                "param_2": "param2",
                "thunk_FUN_08005838": "calculate_value_thunk_08005838",
                "param_3": "param3",
                "param_4": "param4",
                "DAT_080059b0": "N/A",
                "DAT_080059d0": "N/A",
                "DAT_080059b4": "N/A"
            },
            "code": "uint calculate_value_thunk_08005838(uint param1, uint param2, uint param3, uint param4)\n{\n  int difference;\n  uint result;\n  uint flags;\n  uint abs_param3 = abs(param3);\n  uint abs_param1 = abs(param1);\n  uint abs_param4 = param4 & 0x7fffffff;\n  if ((DAT_080059e8 < (abs_param4 | (-abs_param3 | abs_param3) >> 0x1f)) || (DAT_080059e8 < (param2 & 0x7fffffff | (-abs_param1 | abs_param1) >> 0x1f))) {\n    result = DAT_080059f0(param3, param4, param1, param2);\n    return result;\n  }\n  if ((param4 + 0xc0100000 | param3) == 0) {\n    result = FUNC_080059f0();\n    return result;\n  }\n  flags = (int)param4 >> 0x1e & 2U | param2 >> 0x1f;\n  if ((abs_param4 | abs_param1) == 0) {\n    if (flags == 2) {\n      return DAT_080059b0;\n    }\n    result = DAT_080059a0;\n    if (flags != 3) {\n      return param1;\n    }\n  }\n  else {\n    if ((abs_param4 | abs_param3) != 0) {\n      if (abs_param4 == DAT_080059e8) {\n        if (param2 == abs_param4) {\n          if (flags == 2) {\n            return DAT_080059e0;\n          }\n          if (flags == 3) {\n            return DAT_080059d8;\n          }\n          if (flags == 1) {\n            return DAT_080059d0;\n          }\n          return DAT_080059c8;\n        }\n        if (flags == 2) {\n          return DAT_080059b0;\n        }\n        if (flags == 3) {\n          return DAT_080059a0;\n        }\n        if (flags == 1) {\n          return 0;\n        }\n        return 0;\n      }\n      if (param2 != DAT_080059e8) {\n        difference = (int)(param2 - abs_param4) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)param4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            result = 0;\n          }\n          else {\n            DAT_080059f0(param1, param2, abs_param3, param4, abs_param4);\n            do_nothing_08005d0c();\n            result = FUNC_080059f0();\n          }\n        }\n        else {\n          result = FUNC_080059f0();\n        }\n        if (flags == 1) {\n          return result;\n        }\n        if (flags == 2) {\n          uint64_t temp = CONCAT44(result, (uint64_t)FUNC_08000158(DAT_080059a8, DAT_080059ac, result, (uint32_t)(result >> 32)));\n          result = FUNC_08000158(DAT_080059b0, DAT_080059b4, (uint32_t)temp, (uint32_t)(temp >> 32));\n          return result;\n        }\n        if (flags == 0) {\n          return result;\n        }\n        uint64_t temp = CONCAT44(result, (uint64_t)FUNC_08000158(result, (uint32_t)(result >> 32), DAT_080059b0, DAT_080059b4));\n        result = (uint32_t)temp;\n        return result;\n      }\n    }\n    result = DAT_080059c0;\n    if (-1 < (int)param2) {\n      result = DAT_080059b8;\n    }\n  }\n  return result;\n}\n",
            "called": [
                "FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005834",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": true,
            "current_name": "calculate_value_thunk_08005838"
        },
        "FUN_080003f4": {
            "renaming": {
                "uVar1": "mask",
                "iVar4": "leading_zeros",
                "upper": "upper",
                "inv_shift": "inv_shift",
                "param_1": "num",
                "FUN_080003f4": "convert_to_concat64_080003f4",
                "uVar3": "shift",
                "uVar2": "abs_num",
                "bVar9": "is_overflow",
                "uVar5": "shift",
                "uVar6": "mask",
                "in_r12": "in_r12",
                "bVar8": "is_zero",
                "shifted_num": "shifted_num",
                "bVar7": "is_negative",
                "shift_diff": "shift_diff"
            },
            "code": "ulonglong convert_to_concat64_080003f4(uint num) {\n  uint mask = 0x80000000;\n  uint abs_num = num & mask ? -num : num;\n  if (abs_num == 0) {\n    return 0;\n  }\n  uint leading_zeros = count_leading_zeroes(abs_num);\n  uint shift = leading_zeros + 0x15;\n  if (shift < 0x20) {\n    return CONCAT44(abs_num << (shift & 0xff) | (num & mask), 0);\n  }\n  uint in_r12 = 0x20 - leading_zeros;\n  uint shifted_num = abs_num << (leading_zeros & 0xff);\n  uint upper = 0;\n  if (in_r12 < 0x20) {\n    upper = 0U >> (in_r12 & 0xff);\n  }\n  if (shift < 0x433) {\n    return CONCAT44(shifted_num | (num & mask) | (upper & mask), upper);\n  }\n  uint inv_shift = ~(0x432 - shift);\n  if (inv_shift > 0x1e) {\n    return CONCAT44(num, shifted_num >> (inv_shift - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  int shift_diff = inv_shift - 0x13;\n  if (shift_diff == 0 || (inv_shift - 0x1f < 0) != (shift_diff < 0)) {\n    inv_shift++;\n    return CONCAT44((num & mask) | shifted_num >> (inv_shift & 0xff), upper >> (inv_shift & 0xff) | shifted_num << (0x20 - inv_shift & 0xff));\n  }\n  return CONCAT44(num, upper >> (0x20 - (0xcU - shift_diff) & 0xff) | shifted_num << (0xcU - shift_diff & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003f4",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "convert_to_concat64_080003f4"
        },
        "FUN_080079e8": {
            "renaming": {
                "FUN_080079e8": "FUNC_080079e8"
            },
            "code": "\nchar * FUNC_080079e8(int param_1,undefined4 param_2,uint param_3,uint param_4,uint param_5,\n                   uint param_6,int *param_7,uint *param_8,char **param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  int iVar13;\n  char *pcVar14;\n  char *pcVar15;\n  undefined4 *puVar16;\n  undefined4 uVar17;\n  char *pcVar18;\n  int iVar19;\n  bool bVar20;\n  undefined8 uVar21;\n  undefined8 uVar22;\n  undefined8 uVar23;\n  uint local_80;\n  uint local_7c;\n  uint local_74;\n  int local_70;\n  uint local_68;\n  uint local_64;\n  int local_60;\n  int local_5c;\n  uint local_58;\n  int local_54;\n  uint local_48;\n  uint uStack_44;\n  uint local_38;\n  uint local_34;\n  int local_30;\n  int local_2c [2];\n  \n  iVar9 = *(int *)(param_1 + 0x40);\n  if (iVar9 != 0) {\n    uVar12 = *(uint *)(param_1 + 0x44);\n    *(uint *)(iVar9 + 4) = uVar12;\n    *(int *)(iVar9 + 8) = 1 << (uVar12 & 0xff);\n    extract_data_0800910c(param_1,iVar9);\n    *(undefined4 *)(param_1 + 0x40) = 0;\n  }\n  bVar20 = (int)param_4 < 0;\n  uVar12 = param_4;\n  if (bVar20) {\n    uVar12 = param_4 & 0x7fffffff;\n  }\n  *param_8 = (uint)bVar20;\n  local_7c = param_4;\n  if (bVar20) {\n    local_7c = uVar12;\n  }\n  uVar4 = local_7c;\n  if ((DAT_08007bf8 & ~uVar12) == 0) {\n    *param_7 = 9999;\n    if ((param_3 == 0) && ((uVar12 & 0xfffff) == 0)) {\n      if (param_9 == (char **)0x0) {\n        return PTR_s_Infinity_08007c08;\n      }\n      pcVar15 = PTR_s_Infinity_08007c08 + 8;\n      pcVar18 = PTR_s_Infinity_08007c08;\n    }\n    else {\n      if (param_9 == (char **)0x0) {\n        return PTR_DAT_08007c0c;\n      }\n      pcVar15 = PTR_DAT_08007c0c + 3;\n      pcVar18 = PTR_DAT_08007c0c;\n    }\n    *param_9 = pcVar15;\n    return pcVar18;\n  }\n  uVar21 = is_input_valid_08000998(param_3,local_7c,0,0);\n  local_60 = (int)uVar21;\n  if (local_60 != 0) {\n    *param_7 = 1;\n    if (param_9 != (char **)0x0) {\n      pcVar18 = PTR_DAT_08007bfc + -1;\n      *param_9 = PTR_DAT_08007bfc;\n      return pcVar18;\n    }\n    return PTR_DAT_08007c10;\n  }\n  uVar3 = allocate_and_initialize_memory_08009630(param_1,(int)((ulonglong)uVar21 >> 0x20),param_3,local_7c,local_2c,&local_30)\n  ;\n  iVar9 = local_30;\n  if (uVar12 >> 0x14 == 0) {\n    iVar13 = local_2c[0] + local_30;\n    iVar10 = iVar13 + 0x432;\n    if (iVar10 < 0x21) {\n      uVar12 = param_3 << (0x20U - iVar10 & 0xff);\n    }\n    else {\n      uVar12 = param_3 >> (iVar13 + 0x412U & 0xff) | uVar12 << (0x40U - iVar10 & 0xff);\n    }\n    uVar21 = bit_shift_080003d4(uVar12);\n    iVar13 = iVar13 + -1;\n    local_60 = 1;\n    uVar5 = (int)((ulonglong)uVar21 >> 0x20) + 0xfe100000;\n    uVar12 = (uint)uVar21;\n  }\n  else {\n    iVar13 = (uVar12 >> 0x14) - 0x3ff;\n    uVar5 = local_7c & 0xfffff | 0x3ff00000;\n    uVar12 = param_3;\n  }\n  uVar21 = FUNC_08000158(uVar12,uVar5,0,DAT_08007c00);\n  uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be0,DAT_08007be4);\n  uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be8,DAT_08007bec);\n  uVar22 = convert_to_concat64_080003f4(iVar13);\n  uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08007bf0,DAT_08007bf4);\n  uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar22,\n                        (int)((ulonglong)uVar22 >> 0x20));\n  uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n  local_74 = decode_float_0800119c();\n  iVar10 = is_input_empty_080009ac((int)uVar21,uVar8,0,0);\n  if (iVar10 != 0) {\n    uVar22 = convert_to_concat64_080003f4(local_74);\n    iVar10 = is_input_valid_08000998((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar8);\n    if (iVar10 == 0) {\n      local_74 = local_74 - 1;\n    }\n  }\n  if (local_74 < 0x17) {\n    local_54 = is_end_of_string_080009e8(*(undefined4 *)(PTR_DAT_08007c04 + local_74 * 8),\n                            *(undefined4 *)((int)(PTR_DAT_08007c04 + local_74 * 8) + 4),param_3,\n                            local_7c);\n    if (local_54 != 0) {\n      local_74 = local_74 - 1;\n      local_54 = 0;\n    }\n  }\n  else {\n    local_54 = 1;\n  }\n  iVar10 = (iVar9 - iVar13) + -1;\n  if (iVar10 < 0) {\n    local_70 = 1 - (iVar9 - iVar13);\n    iVar10 = 0;\n  }\n  else {\n    local_70 = 0;\n  }\n  if ((int)local_74 < 0) {\n    local_58 = 0;\n    local_70 = local_70 - local_74;\n    local_5c = -local_74;\n  }\n  else {\n    iVar10 = iVar10 + local_74;\n    local_58 = local_74;\n    local_5c = 0;\n  }\n  if (9 < param_5) {\n    local_38 = 0xffffffff;\n    bVar20 = true;\n    local_68 = 0xffffffff;\n    local_64 = 1;\n    param_5 = 0;\n    param_6 = 0;\n    goto LAB_08007c24;\n  }\n  bVar20 = (int)param_5 < 6;\n  if (!bVar20) {\n    param_5 = param_5 - 4;\n  }\n  switch(param_5) {\n  case 2:\n    local_64 = 0;\n    break;\n  case 3:\n    local_64 = 0;\n    goto LAB_08008300;\n  case 4:\n    local_64 = 1;\n    break;\n  case 5:\n    local_64 = 1;\nLAB_08008300:\n    local_38 = local_74 + param_6;\n    local_68 = local_38 + 1;\n    uVar12 = local_68;\n    if ((int)local_68 < 1) {\n      uVar12 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    pcVar18 = (char *)allocate_and_initialize_memory_080090c0(param_1,0);\n    local_38 = 0xffffffff;\n    local_68 = 0xffffffff;\n    param_6 = 0;\n    *(char **)(param_1 + 0x40) = pcVar18;\n    local_64 = 1;\n    goto LAB_08007e36;\n  }\n  if ((int)param_6 < 1) {\n    local_38 = 1;\n    param_6 = 1;\n    local_68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_38;\n  }\n  else {\n    local_38 = param_6;\n    local_68 = param_6;\n    uVar12 = param_6;\nLAB_08008314:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_68;\n    if (0x17 < (int)uVar12) {\n      iVar13 = 4;\n      iVar9 = 1;\n      do {\n        iVar19 = iVar9;\n        iVar13 = iVar13 * 2;\n        iVar9 = iVar19 + 1;\n      } while (iVar13 + 0x14U <= uVar12);\n      *(int *)(param_1 + 0x44) = iVar19;\n    }\n  }\n  pcVar18 = (char *)allocate_and_initialize_memory_080090c0(param_1);\n  *(char **)(param_1 + 0x40) = pcVar18;\n  if ((uVar5 < 0xf) && (bVar20)) {\n    if ((int)local_74 < 1) {\n      if (local_74 == 0) {\n        iVar9 = 2;\n        local_80 = param_3;\n      }\n      else {\n        uVar21 = FUNC_080004c8(param_3,local_7c,\n                              *(undefined4 *)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8),\n                              *(undefined4 *)((int)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8) + 4));\n        local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n        local_80 = (uint)uVar21;\n        iVar13 = (int)-local_74 >> 4;\n        if (iVar13 == 0) {\n          iVar9 = 2;\n        }\n        else {\n          bVar20 = false;\n          iVar9 = 2;\n          puVar16 = (undefined4 *)PTR_DAT_080086d0;\n          do {\n            if (iVar13 << 0x1f < 0) {\n              uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),*puVar16,puVar16[1]\n                                   );\n              bVar20 = true;\n              iVar9 = iVar9 + 1;\n            }\n            iVar13 = iVar13 >> 1;\n            puVar16 = puVar16 + 2;\n          } while (iVar13 != 0);\n          if (bVar20) {\n            local_80 = (uint)uVar21;\n            local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar12 = (int)local_74 >> 4;\n      uVar21 = *(undefined8 *)(PTR_DAT_08007ec4 + (local_74 & 0xf) * 8);\n      if ((int)(uVar12 << 0x1b) < 0) {\n        uVar22 = FUNC_0800071c(param_3,local_7c,*(undefined4 *)(PTR_DAT_08007ec8 + 0x20),\n                              *(undefined4 *)(PTR_DAT_08007ec8 + 0x24));\n        uStack_44 = (uint)((ulonglong)uVar22 >> 0x20);\n        local_48 = (uint)uVar22;\n        iVar9 = 3;\n        uVar12 = uVar12 & 0xf;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n      }\n      else {\n        iVar9 = 2;\n        uStack_44 = local_7c;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n        local_48 = param_3;\n      }\n      while( true ) {\n        uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        if (uVar12 == 0) break;\n        if ((int)(uVar12 << 0x1f) < 0) {\n          uVar21 = FUNC_080004c8((int)uVar21,uVar8,*puVar16,puVar16[1]);\n          iVar9 = iVar9 + 1;\n        }\n        uVar12 = (int)uVar12 >> 1;\n        puVar16 = puVar16 + 2;\n      }\n      uVar21 = FUNC_0800071c(local_48,uStack_44,(int)uVar21,uVar8);\n      local_80 = (uint)uVar21;\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n    }\n    uVar21 = CONCAT44(local_7c,local_80);\n    if ((local_54 != 0) && (iVar13 = is_input_empty_080009ac(local_80,local_7c,0,DAT_08007ecc), iVar13 != 0)) {\n      if (local_68 == 0) {\n        uVar21 = convert_to_concat64_080003f4(iVar9);\n        uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),local_80,local_7c);\n        uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d4);\n        uVar8 = (undefined4)uVar21;\n        iVar9 = (int)((ulonglong)uVar21 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_38) {\n        uVar21 = FUNC_080004c8(local_80,local_7c,0,DAT_0800880c);\n        uVar22 = convert_to_concat64_080003f4(iVar9 + 1);\n        uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,\n                              (int)((ulonglong)uVar21 >> 0x20));\n        uVar22 = FUNC_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08008810);\n        uVar8 = (undefined4)uVar22;\n        local_48 = local_38;\n        local_34 = local_74 - 1;\n        iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar22 = convert_to_concat64_080003f4(iVar9);\n    uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),local_80,local_7c);\n    uVar22 = FUNC_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed0);\n    uVar8 = (undefined4)uVar22;\n    iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n    if (local_68 != 0) {\n      local_34 = local_74;\n      local_48 = local_68;\nLAB_08007cfa:\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n      local_80 = (uint)uVar21;\n      cVar1 = decode_float_0800119c(local_80,local_7c);\n      cVar1 = cVar1 + '0';\n      uVar11 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -8);\n      uVar7 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -4);\n      uVar21 = convert_to_concat64_080003f4();\n      uVar21 = FUNC_08000158(local_80,local_7c,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n      uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n      pcVar15 = pcVar18 + 1;\n      if (local_64 == 0) {\n        uVar22 = FUNC_080004c8(uVar8,iVar9,uVar11,uVar7);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        if (local_48 != 1) {\n          pcVar14 = pcVar15;\n          do {\n            uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d8);\n            cVar1 = decode_float_0800119c();\n            uVar23 = convert_to_concat64_080003f4();\n            uVar21 = FUNC_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                  (int)((ulonglong)uVar23 >> 0x20));\n            pcVar15 = pcVar14 + 1;\n            *pcVar14 = cVar1 + '0';\n            pcVar14 = pcVar15;\n          } while (pcVar15 != pcVar18 + local_48);\n        }\n        uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        uVar23 = FUNC_0800015c((int)uVar22,uVar8,0,DAT_080086dc);\n        iVar9 = is_input_empty_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar21,uVar11);\n        if (iVar9 == 0) {\n          uVar22 = FUNC_08000158(0,DAT_08008814,(int)uVar22,uVar8);\n          iVar9 = is_end_of_string_080009e8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar11);\n          pcVar14 = pcVar15;\n          if (iVar9 == 0) goto LAB_08007e36;\n          do {\n            pcVar15 = pcVar14;\n            pcVar14 = pcVar15 + -1;\n          } while (pcVar15[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_74 = local_34;\n        cVar1 = pcVar15[-1];\n      }\n      else {\n        uVar22 = FUNC_0800071c(0,DAT_08007ed4,uVar11,uVar7);\n        uVar22 = FUNC_08000158((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,iVar9);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        iVar9 = is_end_of_string_080009e8((int)uVar22,uVar8,(int)uVar21,uVar17);\n        if (iVar9 != 0) {\nLAB_08008784:\n          local_74 = local_34;\n          goto LAB_08008294;\n        }\n        uVar23 = FUNC_08000158(0,DAT_08007ecc,(int)uVar21,uVar17);\n        iVar9 = is_end_of_string_080009e8((int)uVar22,uVar8,(int)uVar23,(int)((ulonglong)uVar23 >> 0x20));\n        if (iVar9 == 0) {\n          if (local_48 != 1) {\n            pcVar14 = pcVar15;\n            do {\n              uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed8);\n              uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n              uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n              cVar1 = decode_float_0800119c();\n              uVar23 = convert_to_concat64_080003f4();\n              uVar21 = FUNC_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                    (int)((ulonglong)uVar23 >> 0x20));\n              uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n              cVar1 = cVar1 + '0';\n              pcVar15 = pcVar14 + 1;\n              *pcVar14 = cVar1;\n              iVar9 = is_input_empty_080009ac((int)uVar21,uVar11,(int)uVar22,uVar8);\n              if (iVar9 != 0) {\n                local_74 = local_34;\n                goto LAB_08008294;\n              }\n              uVar23 = FUNC_08000158(0,DAT_08007ecc,(int)uVar21,uVar11);\n              iVar9 = is_input_empty_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar22,uVar8);\n              if (iVar9 != 0) goto LAB_08008798;\n              pcVar14 = pcVar15;\n            } while (pcVar15 != pcVar18 + local_48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_74 = local_34;\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar21 = FUNC_08000158(local_80,local_7c,0,DAT_080086c8);\n    uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n    uVar12 = is_end_of_string_080009e8((int)uVar21,uVar11,uVar8,iVar9);\n    if (uVar12 == 0) {\n      iVar9 = is_input_empty_080009ac((int)uVar21,uVar11,uVar8,iVar9 + -0x80000000);\n      uVar5 = uVar12;\n      pcVar15 = pcVar18;\n      if (iVar9 == 0) goto LAB_08007e36;\n      goto LAB_080084f0;\n    }\n    local_68 = 0;\n    uVar12 = 0;\nLAB_08008406:\n    *pcVar18 = '1';\n    local_74 = local_74 + 1;\n    pcVar15 = pcVar18 + 1;\n    uVar5 = local_68;\nLAB_08008416:\n    extract_data_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar15 = pcVar18;\n    if ((-1 < local_2c[0]) && ((int)local_74 < 0xf)) {\n      uVar8 = *(undefined4 *)(PTR_DAT_08007ec4 + local_74 * 8);\n      uVar11 = *(undefined4 *)((int)(PTR_DAT_08007ec4 + local_74 * 8) + 4);\n      if ((-1 < (int)param_6) || (0 < (int)local_68)) {\n        FUNC_0800071c(param_3,uVar4,uVar8,uVar11);\n        bVar2 = decode_float_0800119c();\n        uVar21 = convert_to_concat64_080003f4();\n        uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),uVar8,uVar11);\n        uVar21 = FUNC_08000158(param_3,uVar4,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        *pcVar18 = bVar2 + 0x30;\n        pcVar15 = pcVar18 + 1;\n        if (local_68 != 1) {\n          uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n          iVar9 = is_input_valid_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          while (iVar9 == 0) {\n            uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n            FUNC_0800071c((int)uVar21,uVar17,uVar8,uVar11);\n            bVar2 = decode_float_0800119c();\n            uVar22 = convert_to_concat64_080003f4();\n            uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,uVar11);\n            uVar21 = FUNC_08000158((int)uVar21,uVar17,(int)uVar22,(int)((ulonglong)uVar22 >> 0x20));\n            pcVar14 = pcVar15 + 1;\n            *pcVar15 = bVar2 + 0x30;\n            pcVar15 = pcVar14;\n            if (local_68 == (int)pcVar14 - (int)pcVar18) goto LAB_08007f3a;\n            uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080081f8);\n            iVar9 = is_input_valid_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        iVar9 = is_end_of_string_080009e8((int)uVar21,uVar17,uVar8,uVar11);\n        if ((iVar9 == 0) &&\n           ((iVar9 = is_input_valid_08000998((int)uVar21,uVar17,uVar8,uVar11), iVar9 == 0 || ((bVar2 & 1) == 0)\n            ))) goto LAB_08008294;\n        cVar1 = pcVar15[-1];\nLAB_08007f7c:\n        while (pcVar14 = pcVar15 + -1, cVar1 == '9') {\n          if (pcVar18 == pcVar14) {\n            *pcVar18 = '0';\n            cVar1 = pcVar15[-1];\n            local_74 = local_74 + 1;\n            pcVar14 = pcVar18;\n            break;\n          }\n          cVar1 = pcVar15[-2];\n          pcVar15 = pcVar14;\n        }\n        *pcVar14 = cVar1 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_68 == 0) {\n        uVar21 = FUNC_080004c8(uVar8,uVar11,0,DAT_080086c8);\n        iVar9 = check_and_return_result_080009d4((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),param_3,uVar4);\n        uVar12 = local_68;\n        uVar5 = local_68;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        uVar12 = 0;\n        uVar5 = 0;\n      }\nLAB_080084f0:\n      local_74 = ~param_6;\n      pcVar18 = pcVar15;\n      goto LAB_08008416;\n    }\n    iVar9 = local_5c;\n    if (local_64 == 0) {\n      local_60 = local_70;\n      uVar12 = local_64;\n    }\n    else {\n      if ((int)param_5 < 2) {\n        if (local_60 == 0) {\n          local_60 = local_70;\n          local_70 = local_70 + (0x36 - local_30);\n          iVar10 = iVar10 + (0x36 - local_30);\n        }\n        else {\n          local_60 = local_70;\n          local_70 = local_70 + local_2c[0] + 0x433;\n          iVar10 = iVar10 + local_2c[0] + 0x433;\n        }\n      }\n      else {\n        iVar13 = local_68 - 1;\n        if (local_5c < iVar13) {\n          local_58 = local_58 + (iVar13 - local_5c);\n          iVar9 = 0;\n          local_5c = iVar13;\n        }\n        else {\n          iVar9 = local_5c - iVar13;\n        }\n        if ((int)local_68 < 0) {\n          local_60 = local_70 - local_68;\n        }\n        else {\n          iVar10 = iVar10 + local_68;\n          local_60 = local_70;\n          local_70 = local_70 + local_68;\n        }\n      }\n      uVar12 = allocate_and_initialize_memory_08009244(param_1,1);\n    }\n    if ((0 < local_60) && (0 < iVar10)) {\n      iVar13 = local_60;\n      if (iVar10 <= local_60) {\n        iVar13 = iVar10;\n      }\n      iVar10 = iVar10 - iVar13;\n      local_70 = local_70 - iVar13;\n      local_60 = local_60 - iVar13;\n    }\n    if (local_5c != 0) {\n      if (local_64 == 0) {\n        uVar3 = calculate_hash_table_080093a4(param_1,uVar3,local_5c);\n      }\n      else {\n        uVar8 = uVar3;\n        if (iVar9 != 0) {\n          uVar12 = calculate_hash_table_080093a4(param_1,uVar12,iVar9);\n          uVar8 = calculate_hash_08009258(param_1,uVar12,uVar3);\n          extract_data_0800910c(param_1,uVar3);\n          uVar3 = uVar8;\n          if (local_5c - iVar9 == 0) goto LAB_08008062;\n        }\n        uVar3 = calculate_hash_table_080093a4(param_1,uVar8,local_5c - iVar9);\n      }\n    }\nLAB_08008062:\n    uVar5 = allocate_and_initialize_memory_08009244(param_1,1);\n    if (local_58 == 0) {\n      if (((int)param_5 < 2) && (param_3 == 0)) {\nLAB_0800835a:\n        if ((uVar4 & 0xfffff) == 0) {\n          uVar4 = uVar4 & 0x7ff00000;\n          if (uVar4 != 0) {\n            iVar10 = iVar10 + 1;\n            local_70 = local_70 + 1;\n            uVar4 = 1;\n          }\n        }\n        else {\n          uVar4 = 0;\n        }\n        bVar20 = local_58 != 0;\n        uVar6 = param_3;\n        local_58 = uVar4;\n        if (bVar20) goto LAB_080082d4;\n      }\n      iVar9 = 1;\n    }\n    else {\n      uVar21 = calculate_hash_table_080093a4(param_1,uVar5);\n      uVar5 = (uint)uVar21;\n      if (((int)param_5 < 2) && (param_3 == 0)) goto LAB_0800835a;\n      local_58 = 0;\n      uVar6 = (uint)((ulonglong)uVar21 >> 0x20);\nLAB_080082d4:\n      iVar9 = count_bits_set_080091a4(*(undefined4 *)(uVar5 + *(int *)(uVar5 + 0x10) * 4 + 0x10),uVar6);\n      iVar9 = 0x20 - iVar9;\n    }\n    uVar4 = iVar9 + iVar10 & 0x1f;\n    if (uVar4 == 0) {\n      iVar9 = 0x1c;\nLAB_08008096:\n      iVar10 = iVar10 + iVar9;\n      local_70 = local_70 + iVar9;\n      local_60 = local_60 + iVar9;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar4)) {\n        iVar9 = 0x1c - uVar4;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar4 != 4) {\n        iVar9 = 0x3c - uVar4;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_70) {\n      uVar3 = allocate_and_initialize_memory_08009444(param_1,uVar3,local_70);\n    }\n    if (0 < iVar10) {\n      uVar5 = allocate_and_initialize_memory_08009444(param_1,uVar5,iVar10);\n    }\n    pcVar14 = pcVar18;\n    if ((local_54 != 0) && (iVar9 = compare_arrays_080094f8(uVar3,uVar5), iVar9 < 0)) {\n      local_74 = local_74 - 1;\n      uVar3 = calculate_polynomial_08009120(param_1,uVar3,10,0);\n      if (local_64 == 0) {\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_0800820a;\n        }\n      }\n      else {\n        uVar12 = calculate_polynomial_08009120(param_1,uVar12,10,0);\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_080080de;\n        }\n      }\n      local_68 = local_38;\nLAB_080084e8:\n      if (local_68 == 0) {\n        local_68 = calculate_polynomial_08009120(param_1,uVar5,5);\n        iVar9 = compare_arrays_080094f8(uVar3,local_68);\n        uVar5 = local_68;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_68 < 1) && (2 < (int)param_5)) goto LAB_080084e8;\n    if (local_64 == 0) {\nLAB_0800820a:\n      while( true ) {\n        iVar19 = calculate_quotient_080078c0(uVar3,uVar5);\n        iVar19 = iVar19 + 0x30;\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        if ((int)local_68 <= (int)pcVar15 - (int)pcVar18) break;\n        uVar3 = calculate_polynomial_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n      }\n      local_80 = 0;\n    }\n    else {\nLAB_080080de:\n      local_80 = uVar12;\n      if (0 < local_60) {\n        local_80 = allocate_and_initialize_memory_08009444(param_1,uVar12,local_60);\n      }\n      uVar12 = local_80;\n      if (local_58 != 0) {\n        iVar9 = allocate_and_initialize_memory_080090c0(param_1,*(undefined4 *)(local_80 + 4));\n        copy_memory_block_08001084(iVar9 + 0xc,local_80 + 0xc,(*(int *)(local_80 + 0x10) + 2) * 4);\n        uVar12 = allocate_and_initialize_memory_08009444(param_1,iVar9,1);\n      }\nLAB_08008108:\n      iVar9 = calculate_quotient_080078c0(uVar3,uVar5);\n      iVar13 = compare_arrays_080094f8(uVar3,local_80);\n      iVar10 = compare_and_allocate_memory_08009530(param_1,uVar5,uVar12);\n      iVar19 = iVar9 + 0x30;\n      if (*(int *)(iVar10 + 0xc) == 0) {\n        uVar4 = compare_arrays_080094f8(uVar3);\n        extract_data_0800910c(param_1,iVar10);\n        if (((uVar4 != 0) || (param_5 != 0)) || (uVar4 = param_5, (param_3 & 1) != 0))\n        goto LAB_0800815a;\n        if (iVar19 != 0x39) {\n          if (0 < iVar13) {\nLAB_0800874c:\n            iVar19 = iVar9 + 0x31;\n          }\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar15 = pcVar14 + 1;\n        cVar1 = '9';\n        *pcVar14 = '9';\n        goto LAB_08008268;\n      }\n      extract_data_0800910c(param_1,iVar10);\n      uVar4 = 1;\nLAB_0800815a:\n      if ((iVar13 < 0) || (((iVar13 == 0 && (param_5 == 0)) && ((param_3 & 1) == 0)))) {\n        if (0 < (int)uVar4) {\n          uVar3 = allocate_and_initialize_memory_08009444(param_1,uVar3,1);\n          iVar13 = compare_arrays_080094f8(uVar3,uVar5);\n          if ((0 < iVar13) || ((iVar13 == 0 && (iVar9 << 0x1f < 0)))) {\n            if (iVar19 != 0x39) goto LAB_0800874c;\n            goto LAB_08008752;\n          }\n        }\nLAB_080085a4:\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        goto LAB_08008274;\n      }\n      pcVar15 = pcVar14 + 1;\n      if (0 < (int)uVar4) {\n        if (iVar19 == 0x39) goto LAB_08008752;\n        *pcVar14 = (char)iVar9 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar14 = (char)iVar19;\n      if (pcVar18 + (local_68 - 1) != pcVar14) {\n        uVar3 = calculate_polynomial_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n        if (local_80 == uVar12) {\n          local_80 = calculate_polynomial_08009120(param_1,local_80,10,0);\n          uVar12 = local_80;\n        }\n        else {\n          local_80 = calculate_polynomial_08009120(param_1,local_80,10,0);\n          uVar12 = calculate_polynomial_08009120(param_1,uVar12,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    uVar3 = allocate_and_initialize_memory_08009444(param_1,uVar3,1);\n    iVar9 = compare_arrays_080094f8(uVar3,uVar5);\n    cVar1 = pcVar15[-1];\n    if ((0 < iVar9) || ((iVar9 == 0 && (iVar19 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar14 = pcVar15 + -1;\n        if (cVar1 != '9') goto code_r0x08008270;\n        if (pcVar18 == pcVar14) {\n          *pcVar18 = '1';\n          local_74 = local_74 + 1;\n          goto LAB_08008274;\n        }\n        cVar1 = pcVar15[-2];\n        pcVar15 = pcVar14;\n      } while( true );\n    }\n    while (cVar1 == '0') {\n      cVar1 = pcVar15[-2];\n      pcVar15 = pcVar15 + -1;\n    }\nLAB_08008274:\n    extract_data_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != uVar12)) {\n      extract_data_0800910c(param_1);\n    }\n  }\n  extract_data_0800910c(param_1,uVar12);\nLAB_08008294:\n  extract_data_0800910c(param_1,uVar3);\n  *pcVar15 = '\\0';\n  *param_7 = local_74 + 1;\n  if (param_9 == (char **)0x0) {\n    return pcVar18;\n  }\n  *param_9 = pcVar15;\n  return pcVar18;\ncode_r0x08008270:\n  *pcVar14 = cVar1 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "called": [
                "FUN_08009244",
                "FUN_080094f8",
                "FUN_080009ac",
                "FUN_08009630",
                "FUN_0800071c",
                "FUN_08009444",
                "FUN_08009120",
                "FUN_080003d4",
                "FUN_080078c0",
                "FUN_08000158",
                "FUN_08000998",
                "FUN_0800119c",
                "FUN_080093a4",
                "FUN_080009d4",
                "FUN_080004c8",
                "FUN_080003f4",
                "FUN_080090c0",
                "FUN_0800910c",
                "FUN_08009530",
                "FUN_0800015c",
                "FUN_080091a4",
                "FUN_08001084",
                "FUN_080009e8",
                "FUN_08009258"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080079e8",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "FUNC_080079e8"
        },
        "FUN_0800166c": {
            "renaming": {
                "bits_to_extract": "bits_to_extract",
                "uVar1": "end_bit",
                "param_1": "input",
                "param_2": "bits_to_insert",
                "param_3": "output",
                "FUN_0800166c": "extract_bits_0800166c",
                "mask": "mask"
            },
            "code": "uint extract_bits_0800166c(uint input, uint start_bit, uint num_bits) {\n  uint end_bit = 7 - start_bit;\n  if (end_bit > 3) {\n    end_bit = 4;\n  }\n  if (start_bit + 4 < 7) {\n    start_bit = 0;\n  }\n  else {\n    start_bit -= 3;\n  }\n  uint mask = ~(-1 << (start_bit & 0xff));\n  uint bits_to_extract = ~(-1 << (end_bit & 0xff)) & input;\n  return (input & ~mask) | (bits_to_extract << (start_bit & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800166c",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": true,
            "current_name": "extract_bits_0800166c"
        },
        "FUN_0800360c": {
            "renaming": {
                "param_1": "pointer_to_pointer",
                "PTR_": "pointer_",
                "DAT_": "data_",
                "FUN_0800360c": "set_first_bit_to_one_0800360c"
            },
            "code": "int set_first_bit_to_one_0800360c(uint **PTR_to_pointer){\n  uint *pointer = *PTR_to_pointer;\n  pointer[3] |= 1;\n  *pointer |= 1;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800360c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "set_first_bit_to_one_0800360c"
        },
        "FUN_08005d68": {
            "renaming": {
                "puVar2": "next_memory",
                "param_1": "memory",
                "param_2": "byte_value",
                "param_3": "num_bytes",
                "puVar1": "aligned_memory",
                "uVar3": "num_remaining_bytes",
                "uVar4": "aligned_byte_value",
                "FUN_08005d68": "write_bytes_to_memory_08005d68",
                "bVar5": "all_bytes_aligned"
            },
            "code": "void write_bytes_to_memory_08005d68(uint32_t *memory, uint8_t byte_value, uint32_t num_bytes) {\n  uint32_t *aligned_memory;\n  uint32_t num_aligned_bytes;\n  uint32_t remainder_bytes;\n  uint32_t aligned_byte_value;\n  bool all_bytes_aligned;\n  \n  if (((uint32_t)memory & 3) != 0) {\n    remainder_bytes = num_bytes - 1;\n    aligned_memory = memory;\n    if (num_bytes == 0) {\n      return;\n    }\n    while (true) {\n      memory = (uint32_t *)((int)aligned_memory + 1);\n      *(uint8_t *)aligned_memory = byte_value;\n      num_bytes = remainder_bytes;\n      if (((uint32_t)memory & 3) == 0) {\n        break;\n      }\n      all_bytes_aligned = remainder_bytes == 0;\n      remainder_bytes = remainder_bytes - 1;\n      aligned_memory = memory;\n      if (all_bytes_aligned) {\n        return;\n      }\n    }\n  }\n  if (3 < num_bytes) {\n    aligned_byte_value = (byte_value << 24) | (byte_value << 16) | (byte_value << 8) | byte_value;\n    num_aligned_bytes = num_bytes;\n    aligned_memory = memory;\n    if (0xf < num_bytes) {\n      num_aligned_bytes = num_bytes - 0x10;\n      aligned_memory = memory + 4;\n      do {\n        aligned_memory[-4] = aligned_byte_value;\n        aligned_memory[-3] = aligned_byte_value;\n        aligned_memory[-2] = aligned_byte_value;\n        aligned_memory[-1] = aligned_byte_value;\n        aligned_memory = aligned_memory + 4;\n      } while (aligned_memory != (uint32_t *)((int)memory + (num_aligned_bytes & 0xfffffff0) + 0x20));\n      num_bytes = num_bytes & 0xf;\n      memory = memory + ((num_aligned_bytes >> 4) + 1) * 4;\n      num_aligned_bytes = num_bytes;\n      aligned_memory = memory;\n      if (num_bytes < 4) {\n        goto LAB_08005de4;\n      }\n    }\n    do {\n      num_aligned_bytes = num_aligned_bytes - 4;\n      *memory = aligned_byte_value;\n      memory = memory + 1;\n    } while (3 < num_aligned_bytes);\n    memory = (uint32_t *)((int)aligned_memory + (num_bytes - 4 & 0xfffffffc) + 4);\n    num_bytes = num_bytes & 3;\n  }\nLAB_08005de4:\n  if (num_bytes != 0) {\n    aligned_memory = memory;\n    do {\n      aligned_memory = (uint32_t *)((int)aligned_memory + 1);\n      *(uint8_t *)(aligned_memory - 1) = byte_value;\n    } while ((uint32_t *)(num_bytes + (int)memory) != aligned_memory);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d68",
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "imported": true,
            "current_name": "write_bytes_to_memory_08005d68"
        },
        "FUN_080017c4": {
            "renaming": {
                "local_c": "bit_index",
                "uVar1": "shift_amount",
                "iVar7": "data_type",
                "param_1": "bit_array",
                "puVar6": "bit_array_ptr",
                "param_2": "data_array",
                "uVar3": "shift_amount",
                "local_10": "local_offset",
                "uVar2": "bit_mask",
                "uVar5": "data_value",
                "uVar4": "bit_mask",
                "FUN_080017c4": "process_bits_080017c4"
            },
            "code": "void process_bits_080017c4(uint *bit_array, uint *data_array)\n{\n  uint bit_mask;\n  uint data_value;\n  uint shift_amount;\n  uint bit_index;\n  uint *bit_array_ptr;\n  int data_type;\n  uint bit_value;\n  uint local_offset;\n  \n  local_offset = 0;\n  bit_index = 0;\n  \n  while (bit_index <= 0xf) {\n    if (bit_index > 0xf) {\n      return;\n    }\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_value = *data_array & bit_mask;\n    if (bit_value == bit_mask) {\n      data_value = data_array[1];\n      if (data_value == 0x12) {\n        local_offset = data_array[3] + 0xc;\n      }\n      else if (data_value < 0x13) {\n        if (data_value == 2) {\n          local_offset = data_array[3] + 8;\n        }\n        else if (data_value < 3) {\n          if (data_value == 0) goto LAB_08001882;\n          if (data_value == 1) {\n            local_offset = data_array[3];\n          }\n        }\n        else if (data_value == 3) {\n          local_offset = 0;\n        }\n        else if (data_value == 0x11) {\n          local_offset = data_array[3] + 4;\n        }\n      }\n      else if (((data_value == PTR_DAT_08001a4c) ||\n               (((shift_amount = PTR_DAT_08001a50, bit_mask = PTR_DAT_08001a54, PTR_DAT_08001a4c < data_value &&\n                 (shift_amount = PTR_DAT_08001a5c, bit_mask = PTR_DAT_08001a60, data_value == PTR_DAT_08001a58)) ||\n                (data_value == shift_amount)))) || (data_value == bit_mask)) {\nLAB_08001882:\n        if (data_array[2] == 0) {\n          local_offset = 4;\n        }\n        else if (data_array[2] == 1) {\n          local_offset = 8;\n          bit_array[4] = bit_mask;\n        }\n        else {\n          local_offset = 8;\n          bit_array[5] = bit_mask;\n        }\n      }\n      if (bit_value < 0x100) {\n        shift_amount = bit_index << 2;\n        bit_array_ptr = bit_array;\n      }\n      else {\n        bit_array_ptr = bit_array + 1;\n        shift_amount = (bit_index - 8) * 4;\n      }\n      *bit_array_ptr = *bit_array_ptr & ~(0xf << (shift_amount & 0xff)) | local_offset << (shift_amount & 0xff);\n      if ((data_array[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_08001a64 + 0x18) = *(uint *)(PTR_DAT_08001a64 + 0x18) | 1;\n        if (bit_array == PTR_DAT_08001a6c) {\n          data_type = 0;\n        }\n        else if (bit_array == PTR_DAT_08001a70) {\n          data_type = 1;\n        }\n        else if (bit_array == PTR_DAT_08001a74) {\n          data_type = 2;\n        }\n        else if (bit_array == PTR_DAT_08001a78) {\n          data_type = 3;\n        }\n        else {\n          data_type = 4;\n        }\n        *(uint *)(PTR_DAT_08001a68 + ((bit_index >> 2) + 2) * 4) =\n             data_type << ((bit_index & 3) << 2) |\n             ~(0xf << ((bit_index & 3) << 2)) & *(uint *)(PTR_DAT_08001a68 + ((bit_index >> 2) + 2) * 4);\n        if ((data_array[1] & 0x10000) == 0) {\n          *PTR_DAT_08001a7c = ~bit_value & *PTR_DAT_08001a7c;\n        }\n        else {\n          *PTR_DAT_08001a7c = bit_value | *PTR_DAT_08001a7c;\n        }\n        if ((data_array[1] & 0x20000) == 0) {\n          PTR_DAT_08001a7c[1] = ~bit_value & PTR_DAT_08001a7c[1];\n        }\n        else {\n          PTR_DAT_08001a7c[1] = bit_value | PTR_DAT_08001a7c[1];\n        }\n        if ((data_array[1] & 0x100000) == 0) {\n          PTR_DAT_08001a7c[2] = ~bit_value & PTR_DAT_08001a7c[2];\n        }\n        else {\n          PTR_DAT_08001a7c[2] = bit_value | PTR_DAT_08001a7c[2];\n        }\n        if ((data_array[1] & 0x200000) == 0) {\n          PTR_DAT_08001a7c[3] = ~bit_value & PTR_DAT_08001a7c[3];\n        }\n        else {\n          PTR_DAT_08001a7c[3] = bit_value | PTR_DAT_08001a7c[3];\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n  } \n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017c4",
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "imported": true,
            "current_name": "process_bits_080017c4"
        },
        "FUN_080035a4": {
            "renaming": {
                "uVar1": "result",
                "param_1": "params",
                "do_nothing_080035fa": "perform_no_operation",
                "FUN_080035a4": "check_params_validity_080035a4"
            },
            "code": "int check_params_validity_080035a4(int *params)\n{\n  int result;\n  if (params == NULL) {\n    result = 1;\n  }\n  else {\n    if (*((char *)params + 61) == 0) {\n      *(char *)(params + 15) = 0;\n      perform_no_operation(params);\n    }\n    *((char *)params + 61) = 2;\n    update_params(*params, params + 1);\n    *((char *)params + 61) = 1;\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035a4",
            "calling": [
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": true,
            "current_name": "check_params_validity_080035a4"
        },
        "FUN_080041ea": {
            "renaming": {
                "updated_array": "updated_array",
                "FUN_080041ea": "update_bit_in_uint_array_080041ea",
                "*(uint *)(param_1 + 0x20)": "*array",
                "param_1": "array",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "masked_array": "masked_array",
                "mask": "mask"
            },
            "code": "void update_bit_in_uint_array_080041ea(uint* array, uint bit_index, uint bit_value) {\n  uint mask = ~(1u << (bit_index & 0xff));\n  uint masked_array = *array & mask;\n  uint updated_array = masked_array | (bit_value << (bit_index & 0xff));\n  *array = updated_array;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ea",
            "calling": [
                "FUN_080036a8"
            ],
            "imported": true,
            "current_name": "update_bit_in_uint_array_080041ea"
        },
        "FUN_08004ae0": {
            "renaming": {
                "local_1f": "",
                "FUN_08004ae0": "count_leading_zero_bits_08004ae0",
                "local_1e": "",
                "local_2a": "",
                "param_1": "result_array",
                "local_1c": "",
                "local_2c": "number",
                "local_2b": "",
                "local_1a": "",
                "local_29": "",
                "local_18": "",
                "local_28": "",
                "local_27": "",
                "local_16": "",
                "local_26": "",
                "local_21": "",
                "local_20": "",
                "local_25": "",
                "local_14": "",
                "local_24": "",
                "local_23": "",
                "local_22": ""
            },
            "code": "void count_leading_zero_bits_08004ae0(int* result_array)\n{\n    int number;\n    int i;\n    int count;\n    for(i=0; i<7; i++)\n    {\n        (**(code **)PTR_DAT_08004bd4)(0xd0,0x3b,&number,0xe);\n        count = count_leading_zero_bits_08004ae0_08000c10(number);\n        result_array[i] = count;\n    }\n}",
            "called": [
                "FUN_08000c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ae0",
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "imported": true,
            "current_name": "count_leading_zero_bits_08004ae0"
        },
        "FUN_08001044": {
            "renaming": {
                "FUN_08001044": "decode_unsigned_integer_08001044",
                "uVar1": "exponent",
                "param_1": "input",
                "result": "result",
                "shifted_input": "shifted_input",
                "msb": "msb"
            },
            "code": "uint decode_unsigned_integer_08001044(uint input){\n    uint result;\n    uint shifted_input = input << 1;\n    uint msb = shifted_input & 0x80000000;\n    uint exponent = 0x9e - ((shifted_input) >> 0x18);\n    \n    if (msb != 0 || shifted_input < 0x7f000000){\n        return 0;\n    }\n    \n    if (exponent >= 0){\n        result = (input << 8 | 0x80000000) >> (exponent & 0xff);\n        return result;\n    }\n    \n    if ((exponent == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n        return 0;\n    }\n    \n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001044",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "decode_unsigned_integer_08001044"
        },
        "FUN_08009444": {
            "renaming": {
                "iVar1": "index",
                "iVar2": "max_num_words",
                "iVar3": "initial_num_words",
                "FUN_08009444": "allocate_and_initialize_memory_08009444",
                "iVar5": "memory_info_table",
                "iVar6": "new_num_words",
                "puVar11": "input_memory",
                "puVar12": "output_memory",
                "param_1": "memory_info_table_address",
                "puVar10": "next_input_memory",
                "puVar7": "current_memory",
                "puVar8": "end_memory",
                "puVar13": "end_input_memory",
                "puVar9": "next_memory",
                "param_2": "memory_info",
                "param_3": "num_bits",
                "uVar4": "old_memory_info"
            },
            "code": "void allocate_and_initialize_memory_08009444(int param_1, uint32_t *memory_info, uint32_t num_bits){\n  uint32_t num_words = (num_bits >> 5) + memory_info[4] + 1;\n  uint32_t initial_num_words = memory_info[1];\n  uint32_t max_num_words = memory_info[2];\n  if (max_num_words < num_words) {\n    do {\n      initial_num_words++;\n      max_num_words *= 2;\n    } while (num_words != max_num_words && num_words + (-2 * max_num_words) < 0);\n  }\n  uint32_t memory_address = allocate_and_initialize_memory_08009444_080090c0(param_1, initial_num_words);\n  uint32_t *memory = (uint32_t *)(memory_address + 0x14);\n  if (num_words > 0) {\n    uint32_t *end_memory = memory + num_words;\n    uint32_t *current_memory = memory;\n    do {\n      *current_memory = 0;\n      current_memory++;\n    } while (current_memory != end_memory);\n  }\n  uint32_t num_bits_in_last_word = num_bits & 0x1f;\n  if (num_bits_in_last_word == 0) {\n    memory--;\n    uint32_t *end_memory = memory_info + 5 + memory_info[4];\n    uint32_t *current_memory = end_memory;\n    do {\n      current_memory--;\n      *memory = *current_memory;\n      memory--;\n    } while (current_memory != memory_info + 5);\n  }\n  else {\n    uint32_t carry_bits = 0;\n    uint32_t *current_memory = memory;\n    uint32_t *end_memory = memory_info + 5 + memory_info[4];\n    do {\n      *current_memory = *memory_info << num_bits_in_last_word | carry_bits;\n      carry_bits = *memory_info >> (0x20 - num_bits_in_last_word);\n      current_memory++;\n      memory_info++;\n    } while (memory_info != end_memory);\n    current_memory--;\n    if (carry_bits != 0) {\n      num_words++;\n    }\n  }\n  uint32_t *memory_info_table = *(uint32_t **)(param_1 + 0x4c);\n  uint32_t table_index = memory_info[1];\n  uint32_t old_memory_info = *(uint32_t *)(memory_info_table + table_index * 4);\n  *(uint32_t *)(memory_address + 0x10) = num_words - 1;\n  *memory_info = old_memory_info;\n  *(uint32_t **)(memory_info_table + table_index * 4) = memory_info;\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009444",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "allocate_and_initialize_memory_08009444"
        },
        "FUN_080015fc": {
            "renaming": {
                "DAT_08001614": "data_ptr",
                "FUN_080015fc": "get_bits_from_uint_080015fc"
            },
            "code": "uint get_bits_from_uint_080015fc(void)\n{\n  uint data = *(uint *)(DAT_08001614 + 0xc);\n  uint bits = data >> 8 & 7;\n  return bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015fc",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": true,
            "current_name": "get_bits_from_uint_080015fc"
        },
        "FUN_08004436": {
            "renaming": {
                "iVar1": "current_time",
                "iVar2": "value2",
                "FUN_08004436": "process_input_08004436",
                "param_1": "input_pointer",
                "param_2": "input_data",
                "param_3": "input_length",
                "param_4": "max_input_length",
                "local_58": "current_input_data"
            },
            "code": "int process_input_08004436(uint **input_pointer, ushort *input_data, int input_length, uint max_input_length) {\n  int current_time = get_current_time();\n  int value1;\n  int value2 = 0;\n  ushort *current_input_data = input_data;\n  if (*(char *)((int)input_pointer + 0x39) != ' ')\n    return 2;\n  if (input_data == NULL || input_length == 0)\n    return 1;\n  if (*(char *)(input_pointer + 0xe) == '\\x01')\n    return 2;\n  *(undefined *)(input_pointer + 0xe) = 1;\n  input_pointer[0xf] = (uint *)0x0;\n  *(undefined *)((int)input_pointer + 0x39) = 0x21;\n  value1 = get_current_time();\n  input_pointer[9] = input_length;\n  *(short *)((int)input_pointer + 0x26) = input_length;\n  while (*(short *)((int)input_pointer + 0x26) != 0) {\n    *(short *)((int)input_pointer + 0x26) = *(short *)((int)input_pointer + 0x26) + -1;\n    if (input_pointer[2] == (uint *)0x1000) {\n      while ((**input_pointer & 0x80) != 0x80) {\n        if (max_input_length != 0xffffffff && get_current_time() - value1 > max_input_length) {\n          input_pointer[3] = input_pointer[3] & 0xfffffe5f;\n          input_pointer[5] = input_pointer[5] & 0xfffffffe;\n          *(undefined *)((int)input_pointer + 0x39) = 0x20;\n          *(undefined *)((int)input_pointer + 0x3a) = 0x20;\n          *(undefined *)(input_pointer + 0xe) = 0;\n          return 3;\n        }\n      }\n      if (value2 != 0)\n        return 3;\n      input_pointer[1] = *current_input_data & 0x1ff;\n      if (input_pointer[4] == (uint *)0x0)\n        current_input_data++;\n      else\n        current_input_data = (ushort *)((int)current_input_data + 1);\n    }\n    else {\n      while ((**input_pointer & 0x80) != 0x80) {\n        if (max_input_length != 0xffffffff && get_current_time() - value1 > max_input_length) {\n          input_pointer[3] = input_pointer[3] & 0xfffffe5f;\n          input_pointer[5] = input_pointer[5] & 0xfffffffe;\n          *(undefined *)((int)input_pointer + 0x39) = 0x20;\n          *(undefined *)((int)input_pointer + 0x3a) = 0x20;\n          *(undefined *)(input_pointer + 0xe) = 0;\n          return 3;\n        }\n      }\n      if (value2 != 0)\n        return 3;\n      input_pointer[1] = (uint)*(byte *)current_input_data;\n      current_input_data = (ushort *)((int)current_input_data + 1);\n    }\n  }\n  while ((**input_pointer & 0x40) != 0x40) {\n    if (max_input_length != 0xffffffff && get_current_time() - value1 > max_input_length) {\n      input_pointer[3] = input_pointer[3] & 0xfffffe5f;\n      input_pointer[5] = input_pointer[5] & 0xfffffffe;\n      *(undefined *)((int)input_pointer + 0x39) = 0x20;\n      *(undefined *)((int)input_pointer + 0x3a) = 0x20;\n      *(undefined *)(input_pointer + 0xe) = 0;\n      return 3;\n    }\n  }\n  *(undefined *)((int)input_pointer + 0x39) = 0x20;\n  *(undefined *)(input_pointer + 0xe) = 0;\n  return 0;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004436",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": true,
            "current_name": "process_input_08004436"
        },
        "FUN_08000110": {
            "renaming": {
                "*PTR_DAT_08000128": "*initialized_flag_ptr",
                "PTR_FUN_08000130": "initialization_function_ptr",
                "FUN_08000110": "check_and_set_initialized_flag_08000110",
                "param_1": "input_param",
                "DAT_0800012c": "non_zero_flag_value"
            },
            "code": "undefined check_and_set_initialized_flag_08000110(undefined *input_param){\\n  if (*PTR_DAT_08000128 == \"\\0\") {\\n    if (DAT_0800012c != 0) {\\n      input_param = PTR_FUN_08000130;\\n    }\\n    *PTR_DAT_08000128 = 1;\\n  }\\n  return input_param;\\n}",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": true,
            "current_name": "check_and_set_initialized_flag_08000110"
        },
        "FUN_08003504": {
            "renaming": {
                "FUN_08003504": "get_value_from_pointer_08003504",
                "PTR_DAT_08003514": "value_pointer"
            },
            "code": "get_value_from_pointer_08003504() {\n  int* PTR_DAT_08003514 = PTR_DAT_08003514;\n  int value = *PTR_DAT_08003514;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003504",
            "calling": [
                "FUN_08003518",
                "FUN_08003540",
                "FUN_080052a0"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_08003504"
        },
        "FUN_08000aa4": {
            "renaming": {
                "FUN_08000aa4": "FUNC_08000aa4"
            },
            "code": "\nuint FUNC_08000aa4(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa4",
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa4"
        },
        "FUN_08004ee8": {
            "renaming": {
                "PTR_DAT_08004f28": "function_pointer_array",
                "param_1": "data",
                "PTR_DAT_08004f24": "code",
                "FUN_08004ee8": "process_data_08004ee8",
                "param_2": "data_size",
                "param_3": "flag",
                "param_4": "id"
            },
            "code": "void process_data_08004ee8(void* data, size_t data_size, int flag, int id, short* PTR_DAT_08004f24)\n{\n  call_function_with_args(PTR_DAT_08004f28, data, data_size, 1, flag, id, *PTR_DAT_08004f24);\n  return;\n}",
            "called": [
                "FUN_08001f6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [],
            "imported": true,
            "current_name": "process_data_08004ee8"
        },
        "FUN_080094f8": {
            "renaming": {
                "iVar1": "diff",
                "iVar3": "index",
                "puVar2": "ptr2",
                "puVar4": "ptr1",
                "param_1": "array1",
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_2": "array2"
            },
            "code": "int compare_arrays_080094f8(int *array1, int *array2, int size)\n{\n  int index = *(array2 + 4);\n  int diff = *(array1 + 4) - index;\n  if (diff == 0) {\n    int *ptr1 = array1 + 5;\n    int *ptr2 = array2 + 5 + index;\n    for (int i = 0; i < size - 1; i++) {\n      if (*--ptr1 != *--ptr2) {\n        if (*ptr2 <= *ptr1) {\n          return 1;\n        }\n        return -1;\n      }\n    }\n  }\n  return diff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094f8",
            "calling": [
                "FUN_080078c0",
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "compare_arrays_080094f8"
        },
        "FUN_08000998": {
            "renaming": {
                "in_ZR": "input_char",
                "FUN_08000998": "is_input_valid_08000998",
                "check_and_return_param_08000988_08000988": "check_and_return_parameter"
            },
            "code": "bool is_input_valid_08000998(void)\n{\n  char input_char;\n  check_and_return_parameter();\n  return input_char != '\\0';\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "is_input_valid_08000998"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "FUNC_08000aa8"
            },
            "code": "\nuint FUNC_08000aa8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000bde;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa8"
        },
        "FUN_080009ac": {
            "renaming": {
                "in_CY": "input_char",
                "FUN_080009ac": "is_input_empty_080009ac"
            },
            "code": "bool is_input_empty_080009ac(void)\n{\n  char input_char;\n  check_and_return_parameter();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009ac",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "is_input_empty_080009ac"
        },
        "FUN_08000fc8": {
            "renaming": {
                "param_1": "ptr_param1",
                "FUN_08000fc8": "concatenate_uint32s_to_uint64_08000fc8",
                "param_2": "ptr_param2"
            },
            "code": "void concatenate_uint32s_to_uint64_08000fc8(uint32_t* ptr_param1, uint32_t* ptr_param2)\n{\n    uint64_t concatenated_value = ((uint64_t)*ptr_param2 << 32) | *ptr_param1;\n    return concatenated_value;\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fc8",
            "calling": [
                "FUN_08001030"
            ],
            "imported": true,
            "current_name": "concatenate_uint32s_to_uint64_08000fc8"
        },
        "FUN_08001cb8": {
            "renaming": {
                "FUN_08001cb8": "do_nothing_08001cb8"
            },
            "code": "\nvoid do_nothing_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cb8",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": true,
            "current_name": "do_nothing_08001cb8"
        },
        "FUN_0800438a": {
            "renaming": {
                "*(uint *)(*param_1 + 0x14)": "*(unsigned int *)(param_arr[0] + 0x14)",
                "do_nothing_08004424": "do_nothing",
                "*(uint *)(*param_1 + 0xc)": "*(unsigned int *)(param_arr[0] + 0xc)",
                "*(undefined *)((int)param_1 + 0x3a)": "param_arr[10]",
                "uVar1": "result",
                "param_1": "param_arr",
                "*(undefined *)((int)param_1 + 0x39)": "param_arr[9]",
                "calculate_values_080046ec": "calculate_values",
                "param_1[0xf]": "param_arr[15]",
                "FUN_0800438a": "check_parameter_0800438a",
                "*(char *)((int)param_1 + 0x39)": "param_arr[9]",
                "*(uint *)(*param_1 + 0x10)": "*(unsigned int *)(param_arr[0] + 0x10)",
                "*(undefined *)(param_1 + 0xe)": "param_arr[14]"
            },
            "code": "int check_parameter_0800438a(int *param_arr) {\n  int result;\n  if (param_arr == NULL) {\n    result = 1;\n  }\n  else {\n    if (param_arr[9] == 0) {\n      param_arr[14] = 0;\n      do_nothing(param_arr);\n    }\n    param_arr[9] = 0x24;\n    *(unsigned int *)(param_arr[0] + 0xc) &= 0xffffdfff;\n    calculate_values(param_arr);\n    *(unsigned int *)(param_arr[0] + 0x10) &= 0xffffb7ff;\n    *(unsigned int *)(param_arr[0] + 0x14) &= 0xffffffd5;\n    *(unsigned int *)(param_arr[0] + 0xc) |= 0x2000;\n    param_arr[15] = 0;\n    param_arr[9] = 0x20;\n    param_arr[10] = 0x20;\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080046ec",
                "FUN_08004424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800438a",
            "calling": [
                "FUN_08005598"
            ],
            "imported": true,
            "current_name": "check_parameter_0800438a"
        },
        "FUN_080014f0": {
            "renaming": {
                "DAT_08001518": "display_flag",
                "check_parameter_range_0800151c": "check_parameter_range",
                "FUN_080014f0": "set_display_flag_and_update_080014f0",
                "do_nothing_08002d8a": "do_nothing",
                "display_update_08001714": "update_display"
            },
            "code": "int set_display_flag_and_update_080014f0() {\n  DAT_08001518 |= 0x10;\n  update_display(3);\n  check_parameter_range(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08001714",
                "FUN_08002d8a",
                "FUN_0800151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014f0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "set_display_flag_and_update_080014f0"
        },
        "FUN_08003908": {
            "renaming": {
                "uVar1": "return_value",
                "param_1": "params",
                "FUN_08003908": "update_params_and_data_08003908",
                "param_2": "data",
                "param_3": "update_type"
            },
            "code": "int update_params_and_data_08003908(int *params, int data, int update_type)\n{\n  int return_value;\n  \n  if (*(char *)(params + 15) == 1) {\n    return_value = 2;\n  }\n  else {\n    *(char *)(params + 15) = 1;\n    *(char *)((int)params + 61) = 2;\n    switch(update_type) {\n      case 0:\n        update_params_08003d60(params, data);\n        *(unsigned int *)(*params + 24) = *(unsigned int *)(*params + 24) | 8;\n        *(unsigned int *)(*params + 24) = *(unsigned int *)(*params + 24) & 4294967287;\n        *(unsigned int *)(*params + 24) = *(unsigned int *)(data + 16) | *(unsigned int *)(*params + 24);\n        break;\n      case 4:\n        update_data_08003e38(params, data);\n        *(unsigned int *)(*params + 24) = *(unsigned int *)(*params + 24) | 2048;\n        *(unsigned int *)(*params + 24) = *(unsigned int *)(*params + 24) & 4294965247;\n        *(unsigned int *)(*params + 24) = *(int *)(data + 16) << 8 | *(unsigned int *)(*params + 24);\n        break;\n      case 8:\n        update_data_08003f18(params, data);\n        *(unsigned int *)(*params + 28) = *(unsigned int *)(*params + 28) | 8;\n        *(unsigned int *)(*params + 28) = *(unsigned int *)(*params + 28) & 4294967287;\n        *(unsigned int *)(*params + 28) = *(unsigned int *)(data + 16) | *(unsigned int *)(*params + 28);\n        break;\n      case 12:\n        update_params_08003ff8(params, data);\n        *(unsigned int *)(*params + 28) = *(unsigned int *)(*params + 28) | 2048;\n        *(unsigned int *)(*params + 28) = *(unsigned int *)(*params + 28) & 4294965247;\n        *(unsigned int *)(*params + 28) = *(int *)(data + 16) << 8 | *(unsigned int *)(*params + 28);\n    }\n    *(char *)((int)params + 61) = 1;\n    *(char *)(params + 15) = 0;\n    return_value = 0;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_08003d60",
                "FUN_08003f18",
                "FUN_08003ff8",
                "FUN_08003e38"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003908",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": true,
            "current_name": "update_params_and_data_08003908"
        },
        "FUN_08004f60": {
            "renaming": {
                "PTR_DAT_08004f74": "memoryPointer",
                "FUN_08004f60": "clearMemory_08004f60"
            },
            "code": "void clearMemory_08004f60(void)\n{\n  write_bytes_to_memory(PTR_DAT_08004f74, 0, 64);\n  return;\n}",
            "called": [
                "FUN_08005d68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "clearMemory_08004f60"
        },
        "FUN_080009c0": {
            "renaming": {
                "in_ZR": "is_ZR_nonzero",
                "in_CY": "is_CY_zero",
                "FUN_080009c0": "is_param_valid_080009c0"
            },
            "code": "bool is_param_valid_080009c0(void)\n{\n  bool is_CY_zero;\n  bool is_ZR_nonzero;\n  check_and_return_param();\n  return !is_CY_zero || is_ZR_nonzero;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "is_param_valid_080009c0"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "is_valid_input_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08001170(uint input1, int input2, uint input3, int input4) {\n  bool is_input2_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n  bool is_input4_valid = ((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0));\n  if (is_input2_valid && is_input4_valid) {\n    return 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "is_valid_input_08001170"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "update_data_08003f18",
                "uVar1": "first_value",
                "param_1": "data_address",
                "param_2": "data",
                "local_10": "local_value",
                "uVar2": "second_value"
            },
            "code": "void update_data_08003f18(int data_address, unsigned int *data)\n{\n  unsigned int first_value;\n  unsigned int second_value;\n  unsigned int local_value;\n  \n  *(unsigned int *)(data_address + 0x20) = *(unsigned int *)(data_address + 0x20) & 0xfffffeff;\n  local_value = *(unsigned int *)(data_address + 4);\n  first_value = *data;\n  second_value = data[2] << 8 | *(unsigned int *)(data_address + 0x20) & 0xfffffdff;\n  if (data_address == DAT_08003ff4) {\n    second_value = (data[3] << 8 | second_value & 0xfffff7ff) & 0xfffffbff;\n    local_value = data[6] << 4 | data[5] << 4 | local_value & 0xffffcfff;\n  }\n  *(unsigned int *)(data_address + 4) = local_value;\n  *(unsigned int *)(data_address + 0x1c) = first_value | *(unsigned int *)(data_address + 0x1c) & 0xffffff8c;\n  *(unsigned int *)(data_address + 0x3c) = data[1];\n  *(unsigned int *)(data_address + 0x20) = second_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08003908"
            ],
            "imported": true,
            "current_name": "update_data_08003f18"
        },
        "FUN_080097cc": {
            "renaming": {
                "FUN_080097cc": "process_data_080097cc",
                "iVar1": "input_data_offset",
                "iVar3": "output_data",
                "iVar4": "data_offset",
                "param_1": "output_buffer",
                "puVar7": "current_input_data",
                "puVar8": "input_data",
                "param_2": "input_buffer",
                "param_3": "remaining_data_size",
                "uVar2": "input_data_length",
                "uVar5": "max_data_length",
                "uVar6": "current_input_data_length",
                "uVar9": "current_input_data_value"
            },
            "code": "int process_data_080097cc(uint32_t *output_buffer,int *input_buffer,int *remaining_data_size)\n{\n  int input_data_offset = *input_buffer;\n  uint32_t input_data_length = input_buffer[2];\n  uint32_t *input_data = (uint32_t *)*remaining_data_size;\n  if (input_data_length != 0) {\n    do {\n      uint32_t *current_input_data = input_data + 2;\n      uint32_t current_input_data_value = *input_data;\n      uint32_t current_input_data_length = input_data[1];\n      input_data = current_input_data;\n      if (current_input_data_length != 0) {\n        uint32_t data_length = current_input_data_length;\n        if ((input_data_length <= current_input_data_length) && ((*(ushort *)(input_buffer + 3) & 0x480) != 0)) {\n          int data_offset = input_data_offset - input_buffer[4];\n          uint32_t max_data_length = (input_buffer[5] * 3) / 2;\n          data_length = current_input_data_length + 1 + data_offset;\n          if (max_data_length < data_length) {\n            max_data_length = data_length;\n          }\n          if ((int)((uint)*(ushort *)(input_buffer + 3) << 0x15) < 0) {\n            int output_data = allocate_data_block_08008af8(output_buffer,max_data_length);\n            if (output_data == 0) {\n              *output_buffer = 0xc;\n              *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x40;\n              remaining_data_size[1] = 0;\n              remaining_data_size[2] = 0;\n              return -1;\n            }\n            copy_data_block_08001084(output_data,input_buffer[4],data_offset);\n            *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) & 0xfb7f | 0x80;\n            input_data_offset = output_data + data_offset;\n            input_buffer[5] = max_data_length;\n            input_buffer[4] = output_data;\n            *input_buffer = input_data_offset;\n            input_buffer[2] = max_data_length - data_offset;\n          }\n          else {\n            int output_data = allocate_data_block_08009adc(output_buffer);\n            if (output_data == 0) {\n              allocate_data_block_080088ec(output_buffer,input_buffer[4]);\n              *output_buffer = 0xc;\n              *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x40;\n              remaining_data_size[1] = 0;\n              remaining_data_size[2] = 0;\n              return -1;\n            }\n            input_data_offset = output_data + data_offset;\n            input_buffer[5] = max_data_length;\n            input_buffer[4] = output_data;\n            *input_buffer = input_data_offset;\n          }\n          input_data_length = current_input_data_length;\n        }\n        copy_data_08009a18(input_data_offset,current_input_data_value,current_input_data_length);\n        int remaining_input_data_length = remaining_data_size[2];\n        uint32_t new_input_data_length = input_buffer[2] - current_input_data_length;\n        input_data_offset += current_input_data_length;\n        *input_buffer = input_data_offset;\n        remaining_data_size[2] = remaining_input_data_length - current_input_data_length;\n      }\n    } while (remaining_data_size[2] != 0);\n  }\n  remaining_data_size[1] = 0;\n  return 0;\n}",
            "called": [
                "FUN_08009a18",
                "FUN_08008af8",
                "FUN_08009adc",
                "FUN_08001084",
                "FUN_080088ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080097cc",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "process_data_080097cc"
        },
        "FUN_08001f6c": {
            "renaming": {
                "FUN_08001f6c": "FUNC_08001f6c"
            },
            "code": "\nundefined4\nFUNC_08001f6c(uint **param_1,undefined2 param_2,undefined2 param_3,undefined2 param_4,uint *param_5,\n            undefined2 param_6,uint param_7)\n\n{\n  int iVar1;\n  uint uVar2;\n  char cVar3;\n  uint uVar4;\n  int iVar5;\n  undefined4 uVar6;\n  uint *puVar7;\n  bool bVar8;\n  \n  iVar1 = get_value_from_pointer_080015a0();\n  uVar2 = DAT_080021e0;\n  if (*(char *)((int)param_1 + 0x3d) == ' ') {\n    do {\n      if ((uVar2 >> 0x10 & 0xff) == 1) {\n        uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      else {\n        uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      if (cVar3 != '\\x01') {\n        iVar5 = 0;\n        goto LAB_08002040;\n      }\n      iVar5 = get_value_from_pointer_080015a0();\n    } while ((uint)(iVar5 - iVar1) < 0x1a);\n    param_1[0xc] = (uint *)0x0;\n    *(undefined *)((int)param_1 + 0x3d) = 0x20;\n    *(undefined *)((int)param_1 + 0x3e) = 0;\n    *(undefined *)(param_1 + 0xf) = 0;\n    iVar5 = 3;\nLAB_08002040:\n    if (iVar5 == 0) {\n      if (*(char *)(param_1 + 0xf) == '\\x01') {\n        uVar6 = 2;\n      }\n      else {\n        *(undefined *)(param_1 + 0xf) = 1;\n        if ((**param_1 & 1) != 1) {\n          **param_1 = **param_1 | 1;\n        }\n        **param_1 = **param_1 & 0xfffff7ff;\n        *(undefined *)((int)param_1 + 0x3d) = 0x22;\n        *(undefined *)((int)param_1 + 0x3e) = 0x40;\n        param_1[0x10] = (uint *)0x0;\n        param_1[9] = param_5;\n        *(undefined2 *)((int)param_1 + 0x2a) = param_6;\n        param_1[0xb] = DAT_080021e4;\n        *(undefined2 *)(param_1 + 10) = *(undefined2 *)((int)param_1 + 0x2a);\n        iVar5 = process_input_080027f4(param_1,param_2,param_3,param_4,param_7,iVar1);\n        if (iVar5 == 0) {\n          if (*(short *)(param_1 + 10) == 0) {\n            **param_1 = **param_1 | 0x200;\n          }\n          else if (*(short *)(param_1 + 10) == 1) {\n            **param_1 = **param_1 & 0xfffffbff;\n            disableIRQinterrupts();\n            **param_1 = **param_1 | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(param_1 + 10) == 2) {\n            **param_1 = **param_1 | 0x800;\n            disableIRQinterrupts();\n            **param_1 = **param_1 & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **param_1 = **param_1 | 0x400;\n          }\n          while (uVar2 = DAT_080024bc, *(short *)(param_1 + 10) != 0) {\n            if (*(ushort *)(param_1 + 10) < 4) {\n              if (*(short *)(param_1 + 10) == 1) {\n                iVar5 = check_value_08002ca8(param_1,param_7,iVar1);\n                if (iVar5 != 0) {\n                  if (param_1[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else if (*(short *)(param_1 + 10) == 2) {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = get_value_from_pointer_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_080022fa:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = get_value_from_pointer_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_08002418:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 & 0xfffffbff;\n                disableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                uVar2 = DAT_080024bc;\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = get_value_from_pointer_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_0800250a:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n            else {\n              iVar5 = check_value_08002ca8(param_1,param_7,iVar1);\n              if (iVar5 != 0) {\n                if (param_1[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              uVar2 = (*param_1)[4];\n              puVar7 = param_1[9];\n              param_1[9] = (uint *)((int)puVar7 + 1);\n              *(char *)puVar7 = (char)uVar2;\n              *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n              *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              if (((*param_1)[5] & 4) == 4) {\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)param_1 + 0x3d) = 0x20;\n          *(undefined *)((int)param_1 + 0x3e) = 0;\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 0;\n        }\n        else if (param_1[0x10] == (uint *)0x4) {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 1;\n        }\n        else {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 3;\n        }\n      }\n    }\n    else {\n      uVar6 = 2;\n    }\n  }\n  else {\n    uVar6 = 2;\n  }\n  return uVar6;\n}\n\n",
            "called": [
                "FUN_08002ca8",
                "FUN_080015a0",
                "FUN_080027f4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f6c",
            "calling": [
                "FUN_08004ee8"
            ],
            "imported": false,
            "current_name": "FUNC_08001f6c"
        },
        "FUN_08002ad8": {
            "renaming": {
                "bVar4": "value_not_zero",
                "iVar1": "comparison_result",
                "FUN_08002ad8": "check_value_08002ad8",
                "param_1": "pointer_array",
                "param_2": "value1",
                "param_3": "value2",
                "cVar2": "result_char",
                "param_4": "param4",
                "uVar3": "masked_value"
            },
            "code": "int check_value_08002ad8(uint **pointer_array, uint value1, uint value2, int param4) {\n  int comparison_result;\n  char result_char;\n  uint masked_value;\n  bool value_not_zero;\n  do {\n    if ((value1 >> 0x10 & 0xff) == 1) {\n      masked_value = value1 & ~(*pointer_array)[5] & 0xffff;\n      value_not_zero = masked_value != 0;\n      if (value_not_zero) {\n        masked_value = 1;\n      }\n      result_char = (char)masked_value;\n      if (!value_not_zero) {\n        result_char = '\\0';\n      }\n    }\n    else {\n      masked_value = value1 & ~(*pointer_array)[6] & 0xffff;\n      value_not_zero = masked_value != 0;\n      if (value_not_zero) {\n        masked_value = 1;\n      }\n      result_char = (char)masked_value;\n      if (!value_not_zero) {\n        result_char = '\\0';\n      }\n    }\n    if (result_char == '\\0') {\n      return 0;\n    }\n    if (((*pointer_array)[5] & 0x400) == 0x400) {\n      **pointer_array = **pointer_array | 0x200;\n      (*pointer_array)[5] = 0xfffffbff;\n      pointer_array[0x10] = (uint *)0x4;\n      pointer_array[0xc] = (uint *)0x0;\n      *(undefined *)((int)pointer_array + 0x3d) = 0x20;\n      *(undefined *)(pointer_array + 0xf) = 0;\n      return 1;\n    }\n  } while ((value2 == 0xffffffff) || ((value2 != 0 && (comparison_result = get_value_from_pointer_080015a0(), (uint)(comparison_result - param4) <= value2))));\n  pointer_array[0xc] = (uint *)0x0;\n  *(undefined *)((int)pointer_array + 0x3d) = 0x20;\n  *(undefined *)(pointer_array + 0xf) = 0;\n  return 3;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_08002640",
                "FUN_080027f4"
            ],
            "imported": true,
            "current_name": "check_value_08002ad8"
        },
        "FUN_08000fd0": {
            "renaming": {
                "FUN_08000fd0": "concatenate_uint32s_to_uint64_08000fd0",
                "param_1": "lower",
                "param_2": "upper"
            },
            "code": "undefined8 concatenate_uint32s_to_uint64_08000fd0(uint32_t lower, uint32_t upper)\n{\n  calculate_result();\n  return CONCAT44(upper,lower);\n}",
            "called": [
                "FUN_08000f68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fd0",
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "imported": true,
            "current_name": "concatenate_uint32s_to_uint64_08000fd0"
        },
        "FUN_08003d60": {
            "renaming": {
                "mask4": "mask4",
                "uVar1": "new_val1",
                "mask1": "mask1",
                "new_val3": "new_val3",
                "new_val2": "new_val2",
                "mask3": "mask3",
                "param_1": "param_ptr",
                "mask2": "mask2",
                "new_val4": "new_val4",
                "FUN_08003d60": "update_params_08003d60",
                "param_2": "params",
                "new_val1": "new_val1",
                "local_10": "mask4",
                "uVar2": "new_val2",
                "DAT_08003e34": "PTR_DAT_08003e34"
            },
            "code": "void update_params_08003d60(int param_1, uint *param_2)\n{\n  uint mask1 = 0xfffffffe;\n  uint mask2 = 0xfffffffd;\n  uint mask3 = 0xfffffff7;\n  uint mask4 = 0xfffffcff;\n  uint new_val1 = *param_2;\n  uint new_val2 = param_2[2] | (*(uint *)(param_1 + 0x20) & mask2);\n  uint new_val3 = param_2[1];\n  uint new_val4 = 0;\n  if (param_1 == DAT_08003e34) {\n    new_val2 = (param_2[3] | new_val2 & mask3) & mask2;\n    new_val4 = param_2[6] | param_2[5] | (*(uint *)(param_1 + 4) & mask4);\n  }\n  *(uint *)(param_1 + 0x20) &= mask1;\n  *(uint *)(param_1 + 0x4) = *(uint *)(param_1 + 0x4) | new_val4;\n  *(uint *)(param_1 + 0x18) = new_val1 | (*(uint *)(param_1 + 0x18) & 0xffffff8c);\n  *(uint *)(param_1 + 0x34) = new_val3;\n  *(uint *)(param_1 + 0x20) |= new_val2;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d60",
            "calling": [
                "FUN_08003908"
            ],
            "imported": true,
            "current_name": "update_params_08003d60"
        },
        "FUN_08009e68": {
            "renaming": {
                "FUN_08009e68": "do_nothing_08009e68"
            },
            "code": "\nvoid do_nothing_08009e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e68",
            "calling": [
                "FUN_08000110",
                "FUN_08000134",
                "FUN_08005d20"
            ],
            "imported": true,
            "current_name": "do_nothing_08009e68"
        },
        "FUN_08003518": {
            "renaming": {
                "uVar1": "shifted_value",
                "PTR_DAT_0800353c": "pointer_array",
                "DAT_08003538": "data_array",
                "get_value_from_pointer_08003504": "get_value_from_pointer",
                "FUN_08003518": "get_shifted_value_from_pointer_08003518"
            },
            "code": "uint get_shifted_value_from_pointer_08003518(void)\n{\n  uint shifted_value = get_value_from_pointer();\n  uint index = *(uint *)(DAT_08003538 + 4) >> 8 & 7;\n  uint shifted_result = shifted_value >> PTR_DAT_0800353c[index];\n  return shifted_result;\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003518",
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "imported": true,
            "current_name": "get_shifted_value_from_pointer_08003518"
        },
        "FUN_08001618": {
            "renaming": {
                "DAT_08001664": "data_array_1",
                "param_1": "input_byte",
                "DAT_08001668": "data_array_2",
                "param_2": "input_value",
                "FUN_08001618": "set_byte_08001618"
            },
            "code": "void set_byte_08001618(byte input_byte, uint input_value) {\n  if (input_byte < 0) {\n    *(char *)((input_byte & 0xf) + DAT_08001664 + 0x14) = (char)((input_value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)input_byte + DAT_08001668 + 0x300) = (char)((input_value & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001618",
            "calling": [
                "FUN_080016d0",
                "FUN_0800172a"
            ],
            "imported": true,
            "current_name": "set_byte_08001618"
        },
        "FUN_080091a4": {
            "renaming": {
                "iVar1": "bit_count",
                "param_1": "num",
                "FUN_080091a4": "count_bits_set_080091a4"
            },
            "code": "int count_bits_set_080091a4(uint num) {\n  int bit_count = 0;\n  if ((num & 0xffff0000) == 0) {\n    num <<= 16;\n    bit_count = 16;\n  }\n  if ((num & 0xff000000) == 0) {\n    num <<= 8;\n    bit_count += 8;\n  }\n  if ((num & 0xf0000000) == 0) {\n    num <<= 4;\n    bit_count += 4;\n  }\n  if ((num & 0xc0000000) == 0) {\n    num <<= 2;\n    bit_count += 2;\n  }\n  if ((int)num >= 0) {\n    if ((int)(num << 1) < 0) {\n      return bit_count + 1;\n    }\n    bit_count = 32;\n  }\n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a4",
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "count_bits_set_080091a4"
        },
        "FUN_08004f78": {
            "renaming": {
                "isInputEmpty_08000ff4": "isInputEmpty",
                "iVar2": "isEmpty",
                "set_param_value_08001a80": "setParamValue",
                "uVar1": "inputHash",
                "decode_unsigned_integer_08001044": "decodeUnsignedInteger",
                "decode_and_calculate_08004bd8": "decodeAndCalculate",
                "calculate_hash_08000c08": "calculateHash",
                "process_input_wrapper_08004f3c": "processInputWrapper",
                "is_string_empty_08001030": "isStringEmpty",
                "decode_08000418": "decode",
                "count_leading_zero_bits_08000c10": "countLeadingZeroBits",
                "FUNC_08000aa4": "hash1",
                "clearMemory_08004f60": "clearMemory",
                "FUN_08004f78": "processInput_08004f78",
                "uVar3": "decodedLength",
                "FUNC_08000cb8": "hash2",
                "uVar5": "decodedLength64",
                "uVar4": "temp",
                "count_leading_zero_bits_08004ae0": "countLeadingZeroBits",
                "find_first_set_bit_08005e40": "findFirstSetBit",
                "local_11": "result",
                "set_string_to_null_terminator_08005dfc": "setStringToNullTerminator"
            },
            "code": "void processInput_08004f78() {\n  uint inputHash;\n  uint hash1;\n  uint hash2;\n  uint hash3;\n  uint hash4;\n  uint param1;\n  uint param2;\n  uint param3;\n  uint param4;\n  uint local_11;\n\n  countLeadingZeroBits(PTR_DAT_080051e0);\n  decodeAndCalculate(PTR_DAT_080051e0, PTR_DAT_080051e4);\n  clearMemory();\n\n  uint decodedLength = decode(*(uint *)PTR_DAT_080051e4);\n  setStringToNullTerminator(PTR_DAT_080051ec, PTR_s_Pitch___f_080051e8, decodedLength & 0xFFFFFFFF, decodedLength >> 0x20);\n  uint firstSetBit = findFirstSetBit(PTR_DAT_080051ec);\n  processInput_08004f78Wrapper(PTR_DAT_080051ec, firstSetBit);\n\n  hash1 = FUNC_08000aa4(*(uint *)PTR_DAT_080051f0, *(uint *)PTR_DAT_080051e4);\n  *(uint *)PTR_DAT_080051f4 = FUNC_08000cb8(*(uint *)PTR_DAT_080051f8, hash1);\n  *(uint *)PTR_DAT_080051fc = FUNC_08000cb8(*(uint *)PTR_DAT_08005200, *(uint *)PTR_DAT_080051f4);\n  hash2 = FUNC_08000aa8(*(uint *)PTR_DAT_080051fc, *(uint *)PTR_DAT_08005204);\n\n  uint leadingZeroBits = countLeadingZeroBits(*(uint *)PTR_DAT_08005208);\n  if (isInputEmpty(hash2, leadingZeroBits)) {\n    inputHash = calculateHash(*(uint *)PTR_DAT_08005208);\n  }\n  else {\n    uint leadingZeroBits2 = countLeadingZeroBits(*(uint *)PTR_DAT_0800520c);\n    if (isStringEmpty(hash2, leadingZeroBits2)) {\n      inputHash = calculateHash(*(uint *)PTR_DAT_0800520c);\n    }\n    else {\n      local_11 = decodeUnsignedInteger(hash2);\n    }\n  }\n\n  hash3 = FUNC_08000aa4(*(uint *)PTR_DAT_080051f4, *(uint *)PTR_DAT_08005214);\n  hash4 = FUNC_08000cb8(*(uint *)PTR_DAT_08005210 ^ 0x80000000, hash3);\n  inputHash = FUNC_08000aa8(FUNC_08000aa8(hash2, hash4), *(uint *)PTR_DAT_08005218);\n\n  if (!isStringEmpty(inputHash, *(uint *)PTR_DAT_08005208)) {\n    local_11 = *(uint *)PTR_DAT_08005208;\n  }\n  else {\n    uint leadingZeroBits3 = countLeadingZeroBits(*(uint *)PTR_DAT_0800520c);\n    if (!isInputEmpty(inputHash, leadingZeroBits3)) {\n      local_11 = *(uint *)PTR_DAT_0800520c;\n    }\n  }\n\n  *(uint *)PTR_DAT_08005214 = *(uint *)PTR_DAT_080051f4;\n  param1 = isStringEmpty(*(uint *)PTR_DAT_080051f4, 0);\n  setParamValue(DAT_0800521c, 2, param1 == 0);\n  param2 = isStringEmpty(*(uint *)PTR_DAT_080051f4, 0);\n  setParamValue(DAT_0800521c, 4, param2 != 0);\n  param3 = isStringEmpty(*(uint *)PTR_DAT_080051f4, 0);\n  setParamValue(DAT_0800521c, 8, param3 == 0);\n  param4 = isStringEmpty(*(uint *)PTR_DAT_080051f4, 0);\n  setParamValue(DAT_0800521c, 0x10, param4 != 0);\n  *(uint *)(*(int *)PTR_DAT_08005220 + 0x34) = local_11;\n  *(uint *)(*(int *)PTR_DAT_08005220 + 0x40) = local_11;\n}",
            "called": [
                "FUN_08004ae0",
                "FUN_08005e40",
                "FUN_08001a80",
                "FUN_08000418",
                "FUN_08004f3c",
                "FUN_08000c10",
                "FUN_08000aa8",
                "FUN_08004bd8",
                "FUN_08004f60",
                "FUN_08000cb8",
                "FUN_08001030",
                "FUN_08000aa4",
                "FUN_08001044",
                "FUN_08000ff4",
                "FUN_08005dfc",
                "FUN_08000c08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f78",
            "calling": [
                "FUN_080036f8",
                "FUN_080017b4"
            ],
            "imported": true,
            "current_name": "processInput_08004f78"
        },
        "FUN_080015a0": {
            "renaming": {
                "PTR_DAT_080015b0": "pointer_to_data",
                "FUN_080015a0": "get_value_from_pointer_080015a0"
            },
            "code": "get_value_from_pointer_080015a0() {\n  return *(undefined4 *)PTR_DAT_080015b0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015a0",
            "calling": [
                "FUN_08002d98",
                "FUN_08002ca8",
                "FUN_08001f6c",
                "FUN_08004436",
                "FUN_08002ad8",
                "FUN_08003260",
                "FUN_08002640",
                "FUN_08002c2e",
                "FUN_080027f4",
                "FUN_08004f2c",
                "FUN_08001ccc",
                "FUN_08002bb4"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_080015a0"
        },
        "FUN_08002d98": {
            "renaming": {
                "FUN_08002d98": "FUNC_08002d98"
            },
            "code": "\nundefined4 FUNC_08002d98(uint *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined4 uVar3;\n  bool bVar4;\n  \n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 4) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0x10000)))) {\n      if (((*DAT_08002ffc & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else if (param_1[1] == 0) {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x40000;\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar1 = get_value_from_pointer_080015a0();\n        while ((*DAT_08002ffc & 0x20000) != 0) {\n          iVar2 = get_value_from_pointer_080015a0();\n          if (100 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar1 = get_value_from_pointer_080015a0();\n        while ((*DAT_08002ffc & 0x20000) == 0) {\n          iVar2 = get_value_from_pointer_080015a0();\n          if (100 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 0) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0)))) {\n      if (((*DAT_08002ffc & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08002ffc = param_1[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08003000 = 0;\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((*DAT_08002ffc & 2) != 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003000 = 1;\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((*DAT_08002ffc & 2) == 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      *DAT_08002ffc = param_1[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003004 = 0;\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((DAT_08003254[9] & 2) != 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003004 = 1;\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((DAT_08002ffc[9] & 2) == 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      calculate_delay_08003568(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar4 = (DAT_08003254[7] & 0x10000000) == 0;\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] | 0x10000000;\n    }\n    if ((*DAT_08003258 & 0x100) == 0) {\n      *DAT_08003258 = *DAT_08003258 | 0x100;\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((*DAT_08003258 & 0x100) == 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (100 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    if (param_1[3] == 1) {\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else if (param_1[3] == 0) {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    else if (param_1[3] == 5) {\n      DAT_08003254[8] = DAT_08003254[8] | 4;\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((DAT_08003254[8] & 2) != 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar1 = get_value_from_pointer_080015a0();\n      while ((DAT_08003254[8] & 2) == 0) {\n        iVar2 = get_value_from_pointer_080015a0();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\nLAB_0800324a:\n    uVar3 = 0;\n  }\n  else if ((DAT_08003254[1] & 0xc) == 8) {\n    uVar3 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800325c = 0;\n    iVar1 = get_value_from_pointer_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003254[1] = param_1[2] | DAT_08003254[1] & 0xfffdffff;\n        }\n        DAT_08003254[1] = param_1[9] | param_1[8] | DAT_08003254[1] & 0xffc2ffff;\n        *DAT_0800325c = 1;\n        iVar1 = get_value_from_pointer_080015a0();\n        while ((*DAT_08003254 & 0x2000000) == 0) {\n          iVar2 = get_value_from_pointer_080015a0();\n          if (2 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      iVar2 = get_value_from_pointer_080015a0();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    uVar3 = 3;\n  }\n  else {\n    *DAT_0800325c = 0;\n    iVar1 = get_value_from_pointer_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) goto LAB_0800324a;\n      iVar2 = get_value_from_pointer_080015a0();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    uVar3 = 3;\n  }\n  return uVar3;\n}\n\n",
            "called": [
                "FUN_080015a0",
                "FUN_08003568"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08002d98",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "FUNC_08002d98"
        },
        "FUN_0800172a": {
            "renaming": {
                "set_byte_08001618": "set_byte",
                "get_bits_from_uint_080015fc": "get_bits",
                "uVar1": "extracted_bits",
                "param_1": "index",
                "param_2": "bits",
                "param_3": "num_bits",
                "extract_bits_0800166c": "extract_bits",
                "FUN_0800172a": "set_byte_at_index_0800172a"
            },
            "code": "void set_byte_at_index_0800172a(char index, uint32_t bits, uint32_t num_bits){\n  uint32_t extracted_bits = extract_bits(bits, num_bits);\n  set_byte(index, extracted_bits);\n  return;\n}",
            "called": [
                "FUN_0800166c",
                "FUN_080015fc",
                "FUN_08001618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800172a",
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "imported": true,
            "current_name": "set_byte_at_index_0800172a"
        },
        "FUN_080009d4": {
            "renaming": {
                "FUN_080009d4": "check_and_return_result_080009d4",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "check_and_return_params_08000978": "check_and_return_params"
            },
            "code": "bool check_and_return_result_080009d4(void)\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  check_and_return_params();\n  return !(bool)carry_flag || (bool)zero_flag;\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "check_and_return_result_080009d4"
        },
        "FUN_08002d8a": {
            "renaming": {
                "FUN_08002d8a": "do_nothing_08002d8a"
            },
            "code": "\nvoid do_nothing_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d8a",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": true,
            "current_name": "do_nothing_08002d8a"
        },
        "FUN_08005780": {
            "renaming": {
                "FUN_08005780": "set_bit_and_clear_others_08005780",
                "DAT_080057e0": "mask2",
                "DAT_080057dc": "data_ptr",
                "DAT_080057e4": "mask5"
            },
            "code": "void set_bit_and_clear_others_08005780(void)\n{\n  unsigned int* DAT_080057dc = DAT_080057dc;\n  unsigned int mask1 = 0x00010000;\n  unsigned int DAT_080057e0 = 0x00040000;\n  unsigned int mask3 = 0xFF80FFFF;\n  unsigned int mask4 = 0x9F0000;\n  unsigned int DAT_080057e4 = 0x8000000;\n  *DAT_080057dc |= mask1;\n  DAT_080057dc[1] &= DAT_080057e0;\n  *DAT_080057dc &= ~DAT_080057e0;\n  *DAT_080057dc &= ~mask3;\n  DAT_080057dc[1] &= ~mask3;\n  DAT_080057dc[2] = mask4;\n  *(unsigned int*)(DAT_080057e4 + 8) = DAT_080057e4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005780",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": true,
            "current_name": "set_bit_and_clear_others_08005780"
        },
        "FUN_08009744": {
            "renaming": {
                "FUN_08009744": "update_value_08009744",
                "iVar2": "updated_value",
                "param_1": "stored_value",
                "param_2": "new_value",
                "puVar1": "stored_ptr"
            },
            "code": "void update_value_08009744(int *stored_value, undefined4 new_value)\n{\n  undefined *stored_ptr = PTR_DAT_08009764;\n  *(undefined4 *)stored_ptr = 0;\n  int updated_value = update_value_08009744_and_get_result_08005728(new_value);\n  if ((updated_value == -1) && (*(int *)stored_ptr != 0)) {\n    *stored_value = *(int *)stored_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009744",
            "calling": [
                "FUN_08008af8",
                "FUN_0800884c"
            ],
            "imported": true,
            "current_name": "update_value_08009744"
        },
        "FUN_08003640": {
            "renaming": {
                "FUN_08003640": "check_params_and_update_08003640",
                "uVar1": "result",
                "param_1": "params",
                "do_nothing_08003696": "do_nothing"
            },
            "code": "int check_params_and_update_08003640(int *params)\n{\n  int result = 0;\n  if (params == NULL) {\n    result = 1;\n  }\n  else {\n    if (*(char *)(params + 0x3d) == '\\0') {\n      *(char *)(params + 0xf) = '\\0';\n      do_nothing(params);\n    }\n    *(char *)(params + 0x3d) = 2;\n    update_params(*params, params + 1);\n    *(char *)(params + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003c94",
                "FUN_08003696"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003640",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": true,
            "current_name": "check_params_and_update_08003640"
        },
        "FUN_08009980": {
            "renaming": {
                "FUN_08009980": "allocate_and_initialize_memory_08009980",
                "puVar3": "last_word_address",
                "param_1": "starting_address",
                "param_2": "num_rows",
                "param_3": "num_cols",
                "puVar1": "memory_address",
                "uVar2": "memory_size"
            },
            "code": "undefined4 * allocate_and_initialize_memory_08009980(undefined4 starting_address,int num_rows,int num_cols)\n{\n  undefined4 *memory_address;\n  uint32_t memory_size;\n  undefined4 *last_word_address;\n\n  memory_address = (undefined4 *)FUNC_08008af8(starting_address, num_rows * num_cols * sizeof(undefined4));\n  if (memory_address == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n\n  // Calculate the size of the allocated memory block\n  memory_size = (memory_address[-1] & 0xfffffffc) - 4;\n\n  // If the memory block is less than 37 bytes, initialize only the first few words\n  if (memory_size < 0x25) {\n    last_word_address = memory_address;\n    if (0x13 < memory_size) {\n      *memory_address = 0;\n      memory_address[1] = 0;\n      if (0x1b < memory_size) {\n        memory_address[2] = 0;\n        memory_address[3] = 0;\n        if (memory_size == 0x24) {\n          memory_address[4] = 0;\n          memory_address[5] = 0;\n          last_word_address = memory_address + 6;\n        }\n        else {\n          last_word_address = memory_address + 4;\n        }\n        *last_word_address = 0;\n        last_word_address[1] = 0;\n        last_word_address[2] = 0;\n        return memory_address;\n      }\n      last_word_address = memory_address + 2;\n    }\n    *last_word_address = 0;\n    last_word_address[1] = 0;\n    last_word_address[2] = 0;\n    return memory_address;\n  }\n  \n  // If the memory block is larger than 36 bytes, initialize all words to 0\n  write_bytes_to_memory_08005d68(memory_address, 0);\n  return memory_address;\n}",
            "called": [
                "FUN_08008af8",
                "FUN_08005d68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009980",
            "calling": [
                "FUN_080090c0"
            ],
            "imported": true,
            "current_name": "allocate_and_initialize_memory_08009980"
        },
        "FUN_08005e9c": {
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n/* WARNING: Could not reconcile some variable overlaps */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  int **local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  undefined *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)get_data_from_ptr_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)find_first_set_bit_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUNC_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (undefined *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (int **)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = get_data_from_ptr_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)find_first_set_bit_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = get_data_from_ptr_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = is_valid_input_08001170(uVar10,local_168,0xffffffff,DAT_08006724);\n      if ((iVar3 == 0) &&\n         (iVar3 = is_param_valid_080009c0(uVar10,local_168,0xffffffff,DAT_08006724), iVar3 == 0)) {\n        iVar3 = is_input_empty_080009ac(local_128,local_12c,local_124,local_120);\n        piVar23 = (int *)PTR_DAT_08006728;\n        piVar27 = (int *)PTR_DAT_0800672c;\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (int **)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      piVar22 = (int *)is_valid_input_08001170(local_128,local_12c,local_128,local_12c);\n      if (piVar22 != (int *)0x0) {\n        piVar23 = (int *)PTR_DAT_08007898;\n        piVar27 = (int *)PTR_DAT_0800789c;\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        goto LAB_08006524;\n      }\n      piVar16 = piVar27;\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUNC_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        piVar27 = piVar16;\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n          piVar16 = piVar27;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        local_158 = (int **)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = calculate_float_exponent_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = is_input_valid_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = (int **)PTR_s_0123456789abcdef_08007888;\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar16;\n          local_100 = piVar25;\n          local_fc = param_3;\n          puVar20 = PTR_s_0123456789abcdef_08007888;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        piVar27 = piVar16;\n        if (piVar24 == (int *)0x41) {\n          uVar33 = calculate_float_exponent_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = is_input_valid_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = (int **)PTR_s_0123456789ABCDEF_0800739c;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_0800739c;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = (int **)PTR_s_0123456789ABCDEF_08007894;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_08007894;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = piVar22;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar16 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar16 = (int *)0x1;\n            local_148 = piVar27;\n          }\n          goto LAB_0800724a;\n        }\n        uVar19 = local_12c;\n        local_144 = piVar22;\n        if ((int)local_12c < 0) goto LAB_08007414;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (int **)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = is_input_valid_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = is_input_valid_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (int **)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar22 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar22 == (int *)0x0) {\n        piVar16 = piVar22;\n        piVar23 = (int *)PTR_s__null__08007084;\n        local_168 = piVar27;\n        local_158 = (int **)piVar27;\n        local_154 = ppiVar14;\n        local_148 = piVar22;\n        local_13c = (int **)piVar22;\n        local_134 = piVar22;\n        local_130 = piVar22;\n        if ((int *)0x5 < piVar27) {\n          local_158 = (int **)0x6;\n          local_168 = (int *)local_158;\n        }\n        goto LAB_08006538;\n      }\n      piVar23 = piVar22;\n      if (piVar27 == (int *)0xffffffff) {\n        local_158 = (int **)find_first_set_bit_08005e40(piVar22);\n      }\n      else {\n        local_148 = (int *)find_first_occurrence_of_byte_0800901c(piVar22,0,piVar27);\n        if (local_148 == (int *)0x0) {\n          piVar16 = (int *)(uint)local_f5;\n          piVar22 = local_148;\n          local_168 = piVar27;\n          local_158 = (int **)piVar27;\n          local_154 = ppiVar14;\n          local_13c = (int **)local_148;\n          local_134 = local_148;\n          local_130 = local_148;\n          goto LAB_08006538;\n        }\n        local_158 = (int **)((int)local_148 - (int)piVar22);\n      }\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      piVar16 = (int *)(uint)local_f5;\n      piVar22 = (int *)0x0;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      local_154 = ppiVar14;\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = PTR_s_0123456789ABCDEF_08006730;\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      piVar22 = *local_154;\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        calculate_output_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          copy_string_08009768(piVar23,local_110,local_104);\n          piVar22 = (int *)(uint)pbVar26[1];\n          if (piVar22 != (int *)0x0) {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = calculate_output_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = local_158;\n      local_158 = (int **)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (int **)((uint)piVar25 & 1);\n            if (local_158 == (int **)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (int **)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (int **)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(undefined *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    process_data_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = is_input_valid_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar22 = param_3;\n    piVar16 = (int *)((int)piVar16 + -1);\n    uVar33 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,DAT_080073a0);\n    iVar3 = decode_float_0800119c();\n    uVar34 = convert_to_concat64_080003f4();\n    uVar33 = FUNC_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar22 + 1);\n    *(undefined *)piVar22 = puVar20[iVar3];\n    if (piVar16 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar16;\n  local_134 = piVar22;\n  local_150 = uVar33;\n  iVar8 = is_end_of_string_080009e8((int)uVar33,uVar10,0,DAT_080073a4);\n  if (iVar8 == 0) {\n    iVar8 = is_input_valid_08000998((int *)local_150,local_150._4_4_,0,DAT_080073a4);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = *(byte *)((int)local_158 + 0xf);\n    bVar7 = *(byte *)piVar22;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = *(byte *)((int)local_158 + 10);\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (int **)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (int **)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (int **)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (int **)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((ulonglong)DAT_08007890 * ZEXT48(local_f0) >> 0x23);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (int **)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (int **)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (int **)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (int **)((int)local_158 + (int)local_104 * (int)((int)local_130 + (int)local_13c))\n      ;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = local_144;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = process_data_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = process_data_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)puVar20;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_0800643c;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    piVar16 = (int *)PTR_s_0000000000000000Infinity_08007088;\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = process_data_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n      piVar16 = (int *)puVar20;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = piVar16;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (int **)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (int **)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (int **)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = is_input_valid_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n      if (iVar3 == 0) {\n        local_158 = (int **)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (int **)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (int **)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)puVar20;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = process_data_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            piVar24 = (int *)puVar20;\n            local_158 = (int **)local_d0;\n          }\n          *ppiVar17 = piVar24;\n          ppiVar17[1] = piVar22;\n          local_158 = (int **)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = is_input_valid_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)PTR_DAT_08006d98;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          puVar20 = PTR_s_0000000000000000Infinity_0800788c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)puVar20;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = process_data_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = process_data_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar24 = (int *)puVar20;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = piVar24;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007398;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (int **)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = process_data_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = process_data_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)puVar20;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = process_data_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)puVar20;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = process_data_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007088;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = process_data_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar22 = (int *)puVar20;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)PTR_DAT_08006a50;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = process_data_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = process_data_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar22 = (int *)puVar20;\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = piVar22;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = process_data_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = process_data_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = process_data_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUNC_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUNC_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "called": [
                "FUN_080009ac",
                "FUN_08005e40",
                "FUN_080009c0",
                "FUN_0800901c",
                "FUN_080097cc",
                "FUN_08009768",
                "FUN_080011ec",
                "FUN_08000158",
                "FUN_080079e8",
                "FUN_08000998",
                "FUN_080088ec",
                "FUN_0800119c",
                "FUN_080004c8",
                "FUN_080003f4",
                "FUN_08001170",
                "FUN_08008af8",
                "FUN_08008ad4",
                "FUN_080096e0",
                "FUN_080009e8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005e9c",
            "calling": [
                "FUN_08005dfc"
            ],
            "imported": false,
            "current_name": "FUNC_08005e9c"
        },
        "FUN_08000134": {
            "renaming": {
                "DAT_08000144": "global_variable",
                "FUN_08000134": "concatenate_08000134",
                "param_1": "x",
                "PTR_DAT_08000148": "ptr_data",
                "param_2": "y",
                "PTR_FUN_0800014c": "ptr_function"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t concatenate_08000134(uint64_t x, uint64_t y) {\n  if (DAT_08000144 != 0) {\n    x = PTR_FUN_0800014c;\n    y = PTR_DAT_08000148;\n  }\n  return (((uint64_t)y) << 32) | ((uint64_t)x);\n}",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": true,
            "current_name": "concatenate_08000134"
        },
        "FUN_08005704": {
            "renaming": {
                "FUN_08005704": "processUserInputAndAddByteToUint_08005704_08005704",
                "addByteToUintAndStoreResult_0800157c": "addByteToUintAndStoreResult",
                "processUserInput_080017b4": "processUserInput"
            },
            "code": "void processUserInputAndAddByteToUint_08005704_08005704(void)\n{\n  addByteToUintAndStoreResult_0800157c();\n  processUserInput_080017b4();\n  return;\n}",
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005704",
            "calling": [],
            "imported": true,
            "current_name": "processUserInputAndAddByteToUint_08005704_08005704"
        },
        "FUN_08000418": {
            "renaming": {
                "bVar10": "is_negative",
                "uVar1": "temp1",
                "param_1": "input1",
                "count_leading_zeroes": "count_leading_zeros",
                "FUN_08000418": "decode_08000418",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "temp3",
                "uVar2": "temp2",
                "bVar9": "is_ff",
                "uVar5": "temp5",
                "uVar4": "temp4",
                "uVar7": "temp7",
                "in_r12": "in_r12",
                "bVar8": "is_zero"
            },
            "code": "ulonglong decode_08000418(uint input1, undefined4 input2, undefined4 input3, uint input4)\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int count_leading_zeros;\n  uint temp6;\n  uint temp7;\n  uint in_r12;\n  bool is_zero;\n  bool is_ff;\n  bool is_negative;\n  \n  temp5 = input1 << 1;\n  is_zero = temp5 == 0;\n  temp1 = (uint)((input1 & 0x80000000) != 0) << 0x1f;\n  temp4 = (uint)((int)temp5 >> 3) >> 1;\n  temp3 = temp1 | temp4;\n  input1 = input1 << 0x1d;\n  if (!is_zero) {\n    temp4 = temp5 & 0xff000000;\n    is_zero = temp4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp4 == 0xff000000;\n  }\n  if (!is_zero) {\n    return CONCAT44(temp3,input1) ^ 0x3800000000000000;\n  }\n  if ((temp5 & 0xffffff) == 0) {\n    return CONCAT44(temp3,input1);\n  }\n  if (temp4 == 0xff000000) {\n    return CONCAT44(temp3,input1) | 0x8000000000000;\n  }\n  temp2 = input1;\n  temp5 = temp4;\n  if (temp4 == 0) {\n    temp2 = 0;\n    temp5 = input1;\n  }\n  count_leading_zeros = count_leading_zeroes(temp5);\n  if (temp4 == 0) {\n    count_leading_zeros = count_leading_zeros + 0x20;\n  }\n  temp7 = count_leading_zeros - 0xb;\n  is_negative = SBORROW4(temp7,0x20);\n  temp4 = count_leading_zeros - 0x2b;\n  is_zero = (int)temp4 < 0;\n  is_ff = temp4 == 0;\n  if ((int)temp7 < 0x20) {\n    is_negative = SCARRY4(temp4,0xc);\n    count_leading_zeros = count_leading_zeros + -0x1f;\n    is_zero = count_leading_zeros < 0;\n    is_ff = count_leading_zeros == 0;\n    temp4 = temp7;\n    if (!is_ff && is_zero == is_negative) {\n      temp2 = temp5 << (temp7 & 0xff);\n      temp5 = temp5 >> (0xcU - count_leading_zeros & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_ff || is_zero != is_negative) {\n    in_r12 = 0x20 - temp4;\n  }\n  temp5 = temp5 << (temp4 & 0xff);\n  if (is_ff || is_zero != is_negative) {\n    temp5 = temp5 | temp2 >> (in_r12 & 0xff);\n  }\n  if (is_ff || is_zero != is_negative) {\n    temp2 = temp2 << (temp4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp7 < 0x381) {\n    return CONCAT44(temp5 + (0x380 - temp7) * 0x100000 | temp1,temp2);\n  }\n  temp4 = ~(0x380 - temp7);\n  if (0x1e < (int)temp4) {\n    return CONCAT44(temp3,temp5 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  count_leading_zeros = temp4 - 0x13;\n  if (count_leading_zeros == 0 || count_leading_zeros < 0 != SCARRY4(temp4 - 0x1f,0xc)) {\n    temp4 = temp4 + 1;\n    return CONCAT44(temp1 | temp5 >> (temp4 & 0xff),\n                    temp2 >> (temp4 & 0xff) | temp5 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp3,temp2 >> (0x20 - (0xcU - count_leading_zeros) & 0xff) | temp5 << (0xcU - count_leading_zeros & 0xff)) &\n         0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000418",
            "calling": [
                "FUN_08004f78",
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": true,
            "current_name": "decode_08000418"
        },
        "FUN_08002ca8": {
            "renaming": {
                "iVar1": "temp_value",
                "param_1": "ptr_values",
                "FUN_08002ca8": "check_value_08002ca8",
                "param_2": "value",
                "param_3": "offset"
            },
            "code": "int check_value_08002ca8(int *ptr_values, uint value, int offset)\n{\n  int temp_value;\n  while (true) {\n    if ((*(uint *)(*ptr_values + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*ptr_values + 0x14) & 0x10) == 0x10) {\n      break;\n    }\n    if ((value == 0) || (temp_value = get_value_from_pointer_080015a0(), value < (uint)(temp_value - offset))) {\n      ptr_values[0x10] |= 0x20;\n      *(undefined *)((int)ptr_values + 0x3d) = 0x20;\n      *(undefined *)(ptr_values + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*ptr_values + 0x14) = 0xffffffef;\n  ptr_values[0x10] = 0;\n  ptr_values[0xc] = 0;\n  *(undefined *)((int)ptr_values + 0x3d) = 0x20;\n  *(undefined *)(ptr_values + 0xf) = 0;\n  return 1;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca8",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": true,
            "current_name": "check_value_08002ca8"
        },
        "FUN_08003a94": {
            "renaming": {
                "uVar1": "return_value",
                "param_1": "param_array",
                "FUN_08003a94": "update_permissions_and_flags_08003a94",
                "param_2": "flag_array",
                "uVar2": "flag_value"
            },
            "code": "int update_permissions_and_flags_08003a94(int *param_array, uint *flag_array) {\n  int return_value;\n  uint flag_value;\n  \n  if (*(char *)(param_array + 0xf) == '\\x01') {\n    return_value = 2;\n  }\n  else {\n    *(undefined *)(param_array + 0xf) = 1;\n    *(undefined *)((int)param_array + 0x3d) = 2;\n    *(uint *)(*param_array + 8) = *(uint *)(*param_array + 8) & 0xffff0088;\n    flag_value = *flag_array;\n    if (flag_value == 0x40) {\n      update_flags_and_data(*param_array, flag_array[1], flag_array[3]);\n      set_permissions_and_flags(*param_array, 0x40);\n    }\n    else if (flag_value < 0x41) {\n      if (flag_value == 0x10) {\n        set_permissions_and_flags(*param_array, 0x10);\n      }\n      else if (flag_value < 0x11) {\n        if (flag_value == 0) {\n          set_permissions_and_flags(*param_array, 0);\n        }\n      }\n      else if (flag_value == 0x20) {\n        set_permissions_and_flags(*param_array, 0x20);\n      }\n      else if (flag_value == 0x30) {\n        set_permissions_and_flags(*param_array, 0x30);\n      }\n    }\n    else if (flag_value == 0x70) {\n      set_bits(*param_array, flag_array[2], flag_array[1], flag_array[3]);\n      *(uint *)(*param_array + 8) = *(uint *)(*param_array + 8) & 0xffffff88 | 0x77;\n    }\n    else if (flag_value < 0x71) {\n      if (flag_value == 0x50) {\n        update_flags_and_data(*param_array, flag_array[1], flag_array[3]);\n        set_permissions_and_flags(*param_array, 0x50);\n      }\n      else if (flag_value == 0x60) {\n        update_flags_and_values(*param_array, flag_array[1], flag_array[3]);\n        set_permissions_and_flags(*param_array, 0x60);\n      }\n    }\n    else if (flag_value == 0x1000) {\n      *(uint *)(*param_array + 8) = *(uint *)(*param_array + 8) & 0xfffffff8;\n    }\n    else if (flag_value == 0x2000) {\n      set_bits(*param_array, flag_array[2], flag_array[1], flag_array[3]);\n      *(uint *)(*param_array + 8) = *(uint *)(*param_array + 8) | 0x4000;\n    }\n    *(undefined *)((int)param_array + 0x3d) = 1;\n    *(undefined *)(param_array + 0xf) = 0;\n    return_value = 0;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_080041a8",
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_0800416a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a94",
            "calling": [
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": true,
            "current_name": "update_permissions_and_flags_08003a94"
        },
        "FUN_0800416a": {
            "renaming": {
                "old_flags": "old_flags",
                "param_1": "file_descriptor",
                "uint": "unsigned int",
                "flags_ptr": "flags_pointer",
                "FUN_0800416a": "set_permissions_and_flags_0800416a",
                "param_2": "permissions",
                "PTR_": "",
                "DAT_": "",
                "new_flags": "new_flags"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ set_permissions_and_flags_0800416a(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_7DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800416a",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": true,
            "current_name": "set_permissions_and_flags_0800416a"
        },
        "FUN_080055f4": {
            "renaming": {
                "local_c": "bit2",
                "DAT_0800566c": "data_pointer",
                "set_param_value_08001a80": "set_param_value",
                "local_18": "bitfield",
                "DAT_08005670": "param_pointer",
                "FUN_080055f4": "set_flag_and_process_bits_080055f4",
                "local_14": "bit1",
                "process_bits_080017c4": "process_bits"
            },
            "code": "void set_flag_and_process_bits_080055f4(void)\n{\n  uint32_t flag = 0x20 | 0x4 | 0x8;\n  *(uint32_t *)(DAT_0800566c + 0x18) |= flag;\n  bool should_process_bits = (*(uint32_t *)(DAT_0800566c + 0x18) & 8) != 0;\n  set_param_value_08001a80(DAT_08005670, 0x1e, 0, should_process_bits);\n  uint32_t bitfield = 0x1e;\n  uint32_t bit1 = 1;\n  uint32_t bit2 = 2;\n  process_bits_080017c4(DAT_08005670, &bitfield);\n  return;\n}",
            "called": [
                "FUN_08001a80",
                "FUN_080017c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055f4",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "set_flag_and_process_bits_080055f4"
        },
        "FUN_080059f0": {
            "renaming": {
                "FUN_080059f0": "FUNC_080059f0"
            },
            "code": "\nulonglong FUNC_080059f0(int param_1,uint param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  int iVar8;\n  undefined8 uVar9;\n  undefined8 uVar10;\n  ulonglong uVar11;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar7 = param_2 & 0x7fffffff;\n  if (DAT_08005cd8 < (int)uVar7) {\n    if ((uVar7 == DAT_08005cdc || (int)uVar7 < (int)DAT_08005cdc) &&\n       ((uVar7 != DAT_08005cdc || (param_1 == 0)))) {\n      uVar1 = DAT_08005ce4;\n      if (0 < (int)param_2) {\n        uVar1 = DAT_08005ce0;\n      }\n      return CONCAT44(uVar1,DAT_08005ce8);\n    }\n    uVar11 = FUNC_0800015c(param_1,param_2,param_1,param_2,param_4);\n  }\n  else {\n    if (DAT_08005cec < (int)uVar7) {\n      uVar9 = do_nothing_08005d0c();\n      uVar4 = (undefined4)((ulonglong)uVar9 >> 0x20);\n      uVar1 = (undefined4)uVar9;\n      if (DAT_08005cfc < (int)uVar7) {\n        if (DAT_08005d00 < (int)uVar7) {\n          uVar9 = FUNC_0800071c(0,DAT_08005d08,uVar1,uVar4);\n          iVar8 = 3;\n        }\n        else {\n          uVar9 = FUNC_08000158(uVar1,uVar4,0,DAT_08005d04);\n          uVar10 = FUNC_080004c8(uVar1,uVar4,0,DAT_08005d04);\n          uVar10 = FUNC_0800015c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n          uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                               (int)((ulonglong)uVar10 >> 0x20));\n          iVar8 = 2;\n        }\n      }\n      else if (DAT_08005cfc + -0xd0000 < (int)uVar7) {\n        uVar9 = FUNC_08000158(uVar1,uVar4,0,DAT_08005cf8);\n        uVar10 = FUNC_0800015c(uVar1,uVar4,0,DAT_08005cf8);\n        uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar8 = 1;\n      }\n      else {\n        uVar9 = FUNC_0800015c(uVar1,uVar4,uVar1,uVar4);\n        uVar9 = FUNC_08000158((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0,DAT_08005cf8);\n        uVar10 = FUNC_0800015c(uVar1,uVar4,0,0x40000000);\n        uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar8 = 0;\n      }\n    }\n    else {\n      if ((int)uVar7 <= DAT_08005cec + -0x1bc0000) {\n        uVar10 = FUNC_0800015c(param_1,param_2,DAT_08005cd0,DAT_08005cd4,param_4);\n        iVar8 = is_end_of_string_080009e8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n        if (iVar8 != 0) {\n          return CONCAT44(param_2,param_1);\n        }\n      }\n      iVar8 = -1;\n    }\n    uVar6 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar5 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar5,uVar6,uVar5,uVar6);\n    uVar2 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar1 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar1,uVar2,uVar1,uVar2);\n    uVar3 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar4 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar4,uVar3,DAT_08005c78,DAT_08005c7c);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c80,DAT_08005c84);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c88,DAT_08005c8c);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c90,DAT_08005c94);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c98,DAT_08005c9c);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005ca0,DAT_08005ca4);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar1,uVar2);\n    uVar10 = FUNC_080004c8(uVar4,uVar3,DAT_08005ca8,DAT_08005cac);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cb0,DAT_08005cb4);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cb8,DAT_08005cbc);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cc0,DAT_08005cc4);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cc8,DAT_08005ccc);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar5,uVar6);\n    uVar1 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    if (iVar8 == -1) {\n      uVar11 = FUNC_08000158(uVar5,uVar6,(int)uVar9,uVar1);\n      return uVar11;\n    }\n    uVar9 = FUNC_08000158((int)uVar9,uVar1,*(undefined4 *)(PTR_DAT_08005cf0 + iVar8 * 8),\n                         *(undefined4 *)((int)(PTR_DAT_08005cf0 + iVar8 * 8) + 4));\n    uVar9 = FUNC_08000158((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar5,uVar6);\n    uVar11 = FUNC_08000158(*(undefined4 *)(PTR_DAT_08005cf4 + iVar8 * 8),\n                          *(undefined4 *)((int)(PTR_DAT_08005cf4 + iVar8 * 8) + 4),(int)uVar9,\n                          (int)((ulonglong)uVar9 >> 0x20));\n    if ((int)param_2 < 0) {\n      return uVar11 & 0xffffffff | (ulonglong)((int)(uVar11 >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return uVar11;\n}\n\n",
            "called": [
                "FUN_080004c8",
                "FUN_08005d0c",
                "FUN_0800071c",
                "FUN_0800015c",
                "FUN_08000158",
                "FUN_080009e8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080059f0",
            "calling": [
                "FUN_08005838"
            ],
            "imported": false,
            "current_name": "FUNC_080059f0"
        },
        "FUN_080053b0": {
            "renaming": {
                "flag_value": "flag_value",
                "update_permissions_and_flags_08003a94": "update_permissions_and_flags",
                "local_2c": "unused_variable_9",
                "process_bits_if_match_08005680": "process_bits_if_match",
                "local_48": "unused_variable_4",
                "permissions": "permissions",
                "FUN_080053b0": "initialize_and_process_data_080053b0",
                "local_40": "unused_variable_5",
                "local_44": "data_flags",
                "data_size": "data_size",
                "validity_check_result": "validity_check_result",
                "local_50": "unused_variable_2",
                "wait_time": "wait_time",
                "set_value_if_flag_is_true_0800422e": "set_value_if_flag_is_true",
                "params": "params",
                "update_params_and_data_08003908": "update_params_and_data",
                "local_3c": "data_size",
                "local_18": "unused_variable_14",
                "data_offset_2": "data_offset_2",
                "PTR_DAT_080054f4": "params",
                "local_54": "unused_variable_1",
                "DAT_080054f8": "param_1",
                "local_58": "flag_value",
                "data_update_result": "data_update_result",
                "local_4c": "unused_variable_3",
                "param_1": "param_1",
                "local_28": "unused_variable_10",
                "set_flag_080042de": "set_flag",
                "wait_time_3": "wait_time_3",
                "wait_time_2": "wait_time_2",
                "check_params_validity_080035a4": "check_params_validity",
                "wait_time_5": "wait_time_5",
                "wait_time_4": "wait_time_4",
                "wait_time_7": "wait_time_7",
                "wait_time_6": "wait_time_6",
                "local_20": "unused_variable_12",
                "check_params_and_update_08003640": "check_params_and_update",
                "local_24": "unused_variable_11",
                "permission_update_result": "permission_update_result",
                "params_update_result": "params_update_result",
                "PTR_s____src_main_c_080054fc": "wait_forever_param",
                "local_1c": "unused_variable_13",
                "data_offset": "data_offset",
                "unused_variable_1": "unused_variable_1",
                "unused_variable_13": "unused_variable_13",
                "unused_variable_14": "unused_variable_14",
                "local_38": "unused_variable_6",
                "flag_set_result": "flag_set_result",
                "unused_variable_10": "unused_variable_10",
                "unused_variable_11": "unused_variable_11",
                "unused_variable_12": "unused_variable_12",
                "unused_variable_9": "unused_variable_9",
                "unused_variable_8": "unused_variable_8",
                "local_30": "unused_variable_8",
                "unused_variable_7": "unused_variable_7",
                "unused_variable_6": "unused_variable_6",
                "unused_variable_5": "unused_variable_5",
                "data_flags": "data_flags",
                "unused_variable_4": "unused_variable_4",
                "local_34": "unused_variable_7",
                "unused_variable_3": "unused_variable_3",
                "unused_variable_2": "unused_variable_2"
            },
            "code": "void initialize_and_process_data_080053b0(void)\n{\n  int validity_check_result;\n  int permission_update_result;\n  int PTR_DAT_080054f4_update_result;\n  int flag_set_result;\n  int data_update_result;\n  int flag_value;\n  int bit_processing_result;\n  int permissions = 0x1000;\n  int data_size = 0x60;\n  int data_offset = 0;\n  int data_offset_2 = 0xc;\n  int data_flags = 0x2000;\n  int wait_time = 399;\n  int wait_time_2 = 0x194;\n  int wait_time_3 = 0x198;\n  int wait_time_4 = 0x19f;\n  int wait_time_5 = 0x1ab;\n  int wait_time_6 = 0x1b0;\n  int wait_time_7 = 0x1bc;\n  int *PTR_DAT_080054f4 = (int *)PTR_DAT_080054f4;\n  *PTR_DAT_080054f4 = DAT_080054f8;\n  *(PTR_DAT_080054f4 + 1) = 0x708;\n  *(PTR_DAT_080054f4 + 2) = 0;\n  *(PTR_DAT_080054f4 + 3) = 100;\n  *(PTR_DAT_080054f4 + 4) = 0;\n  *(PTR_DAT_080054f4 + 5) = 0;\n  *(PTR_DAT_080054f4 + 6) = 0;\n  validity_check_result = check_PTR_DAT_080054f4_validity_080035a4(PTR_DAT_080054f4);\n  if (validity_check_result != 0) {\n    wait_forever_08005674(PTR_s____src_main_c_080054fc, wait_time);\n  }\n  permission_update_result = update_permissions_and_flags_08003a94(PTR_DAT_080054f4, &permissions);\n  if (permission_update_result != 0) {\n    wait_forever_08005674(PTR_s____src_main_c_080054fc, wait_time_2);\n  }\n  PTR_DAT_080054f4_update_result = check_PTR_DAT_080054f4_and_update_08003640(PTR_DAT_080054f4);\n  if (PTR_DAT_080054f4_update_result != 0) {\n    wait_forever_08005674(PTR_s____src_main_c_080054fc, wait_time_3);\n  }\n  flag_set_result = set_flag_080042de(PTR_DAT_080054f4, &flag_value);\n  if (flag_set_result != 0) {\n    wait_forever_08005674(PTR_s____src_main_c_080054fc, wait_time_4);\n  }\n  data_update_result = update_PTR_DAT_080054f4_and_data_08003908(PTR_DAT_080054f4, &data_size, data_offset);\n  if (data_update_result != 0) {\n    wait_forever_08005674(PTR_s____src_main_c_080054fc, wait_time_5);\n  }\n  data_update_result = update_PTR_DAT_080054f4_and_data_08003908(PTR_DAT_080054f4, &data_size, data_offset_2);\n  if (data_update_result != 0) {\n    wait_forever_08005674(PTR_s____src_main_c_080054fc, wait_time_6);\n  }\n  flag_value = 0;\n  flag_set_result = set_value_if_flag_is_true_0800422e(PTR_DAT_080054f4, &flag_value);\n  if (flag_set_result != 0) {\n    wait_forever_08005674(PTR_s____src_main_c_080054fc, wait_time_7);\n  }\n  process_bits_if_match_08005680(PTR_DAT_080054f4);\n  return;\n}",
            "called": [
                "FUN_0800422e",
                "FUN_08005674",
                "FUN_08003908",
                "FUN_08005680",
                "FUN_08003640",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053b0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "initialize_and_process_data_080053b0"
        },
        "FUN_08009e74": {
            "renaming": {
                "FUN_08009e74": "do_nothing_08009e74"
            },
            "code": "\nvoid do_nothing_08009e74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e74",
            "calling": [],
            "imported": true,
            "current_name": "do_nothing_08009e74"
        },
        "FUN_0800088a": {
            "renaming": {
                "bVar4": "isExponentZero",
                "uVar1": "msb",
                "param_1": "exponent",
                "unaff_r4": "exponentBits",
                "param_2": "mantissa",
                "param_3": "sign",
                "param_4": "signExponent",
                "FUN_0800088a": "calculateFloatingPoint_0800088a",
                "uVar3": "mantissaValue",
                "uVar2": "exponentValue",
                "in_r12": "exponentShift"
            },
            "code": "ulonglong calculateFloatingPoint_0800088a(uint exponent, uint mantissa, uint sign, uint signExponent)\n{\n  uint exponentMask = 0x7ff00000;\n  uint mantissaMask = 0x80000000;\n  uint hiddenBit = 0x100000;\n  uint signMask = 0x80000000;\n  uint exponentBits = signExponent & sign;\n  uint exponentShift = 0x14;\n  uint exponentValue = exponentShift & signExponent >> exponentShift;\n  uint mantissaValue = mantissa;\n  if (sign != exponentBits || exponentValue != signExponent) {\n    if (sign == exponentBits) {\n      if (((exponent | mantissa << 0xc) == 0) && (exponent = signExponent, mantissaValue = sign, exponentValue != signExponent)) {\n        return (ulonglong)((mantissa ^ sign) & mantissaMask | exponentMask) << 0x20;\n      }\n    }\n    else if (exponentValue == signExponent) {\n      exponent = signExponent;\n      mantissaValue = sign;\n      if ((signExponent | sign << 0xc) == 0) {\n        return (ulonglong)((mantissa ^ sign) & mantissaMask) << 0x20;\n      }\n    }\n    else {\n      bool isExponentZero = (exponent | mantissa << 1) == 0;\n      if (!isExponentZero) {\n        isExponentZero = (signExponent | sign << 1) == 0;\n      }\n      if (!isExponentZero) {\n        if (exponentBits == 0) {\n          mantissaValue &= mantissaMask;\n          do {\n            uint msb = exponent & mantissaMask;\n            exponent <<= 1;\n            mantissaValue = mantissaValue * 2 + (uint)(msb != 0);\n          } while ((mantissaValue & hiddenBit) == 0);\n          mantissaValue |= msb;\n          if (exponentValue != 0) {\n            return ((ulonglong)mantissaValue << 0x20) | exponent;\n          }\n        }\n        do {\n          uint msb = signExponent & mantissaMask;\n          signExponent <<= 1;\n          sign = sign * 2 + (uint)(msb != 0);\n        } while ((sign & hiddenBit) == 0);\n        return ((ulonglong)mantissaValue << 0x20) | exponent;\n      }\n      if ((exponent | mantissa << 1) != 0) goto LAB_080006fc;\n      if ((signExponent | sign << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return ((ulonglong)mantissaValue << 0x20) | exponent | exponentMask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800088a",
            "calling": [
                "FUN_0800071c"
            ],
            "imported": true,
            "current_name": "calculateFloatingPoint_0800088a"
        },
        "FUN_080016d0": {
            "renaming": {
                "bVar1": "is_less_than_limit",
                "param_1": "parameter",
                "DAT_08001710": "PTR_DAT_08001710",
                "FUN_080016d0": "is_param_less_than_16_millions_080016d0"
            },
            "code": "bool is_param_less_than_16_millions_080016d0(int parameter)\n{\n  bool is_less_than_limit = parameter < 0x1000000;\n  if (is_less_than_limit) {\n    DAT_08001710[1] = parameter - 1;\n    set_all_bytes_to_1(0xffffffff);\n    DAT_08001710[2] = 0;\n    *DAT_08001710 = 7;\n  }\n  return !is_less_than_limit;\n}",
            "called": [
                "FUN_08001618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016d0",
            "calling": [
                "FUN_08001762"
            ],
            "imported": true,
            "current_name": "is_param_less_than_16_millions_080016d0"
        },
        "FUN_08001ccc": {
            "renaming": {
                "iVar2": "value_2",
                "uVar1": "value_1",
                "value_6": "value_7",
                "iVar5": "value_4",
                "value_5": "result_value",
                "param_1": "input_data",
                "puVar7": "pointer_value",
                "param_6": "param_6",
                "param_7": "param_7",
                "param_2": "param_2",
                "cVar3": "result_char",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "FUN_08001ccc": "process_data_08001ccc",
                "uVar4": "value_3",
                "bVar8": "is_zero"
            },
            "code": "uint32_t process_data_08001ccc(uint32_t **input_data, uint16_t param_2, uint16_t param_3, uint16_t param_4, uint32_t *param_5, uint16_t param_6, uint32_t param_7)\\n\\\n{\\n\\\n  uint32_t value_1 = get_value_from_pointer();\\n\\\n  uint32_t value_2 = DAT_08001f64;\\n\\\n  if (*(char *)((int)input_data + 0x3d) == \" \")\\n\\\n  {\\n\\\n    do\\n\\\n    {\\n\\\n      if ((value_2 >> 0x10 & 0xff) == 1)\\n\\\n      {\\n\\\n        uint32_t value_3 = value_2 & ~(*input_data)[5] & 0xffff;\\n\\\n        bool is_zero = value_3 == 0;\\n\\\n        char result_char = is_zero ? 1 : 0;\\n\\\n        if (!is_zero)\\n\\\n        {\\n\\\n          result_char = 0;\\n\\\n        }\\n\\\n      }\\n\\\n      else\\n\\\n      {\\n\\\n        uint32_t value_3 = value_2 & ~(*input_data)[6] & 0xffff;\\n\\\n        bool is_zero = value_3 == 0;\\n\\\n        char result_char = is_zero ? 1 : 0;\\n\\\n        if (!is_zero)\\n\\\n        {\\n\\\n          result_char = 0;\\n\\\n        }\\n\\\n      }\\n\\\n      if (result_char != 1)\\n\\\n      {\\n\\\n        uint32_t value_4 = 0;\\n\\\n        goto LAB_08001d9c;\\n\\\n      }\\n\\\n      uint32_t value_4 = get_value_from_pointer();\\n\\\n    } while ((uint32_t)(value_4 - value_1) < 0x1a);\\n\\\n    input_data[0xc] = (uint32_t *)0x0;\\n\\\n    *(char *)((int)input_data + 0x3d) = 0x20;\\n\\\n    *(char *)((int)input_data + 0x3e) = 0;\\n\\\n    *(char *)(input_data + 0xf) = 0;\\n\\\n    uint32_t value_5 = 3;\\n\\\nLAB_08001d9c:\\n\\\n    if (value_5 == 0)\\n\\\n    {\\n\\\n      if (*(char *)(input_data + 0xf) == \"\\x01\")\\n\\\n      {\\n\\\n        return 2;\\n\\\n      }\\n\\\n      else\\n\\\n      {\\n\\\n        *(char *)(input_data + 0xf) = 1;\\n\\\n        if ((**input_data & 1) != 1)\\n\\\n        {\\n\\\n          **input_data = **input_data | 1;\\n\\\n        }\\n\\\n        **input_data = **input_data & 0xfffff7ff;\\n\\\n        *(char *)((int)input_data + 0x3d) = 0x21;\\n\\\n        *(char *)((int)input_data + 0x3e) = 0x40;\\n\\\n        input_data[0x10] = (uint32_t *)0x0;\\n\\\n        input_data[9] = param_5;\\n\\\n        *(uint16_t *)((int)input_data + 0x2a) = param_6;\\n\\\n        input_data[0xb] = DAT_08001f68;\\n\\\n        *(uint16_t *)(input_data + 10) = *(uint16_t *)((int)input_data + 0x2a);\\n\\\n        uint32_t result_value = process_data_08001ccc_08002640(input_data, param_2, param_3, param_4, param_7, value_1);\\n\\\n        if (result_value == 0)\\n\\\n        {\\n\\\n          while (*(uint16_t *)(input_data + 10) != 0)\\n\\\n          {\\n\\\n            uint32_t value_6 = check_and_update_flags(input_data, param_7, value_1);\\n\\\n            if (value_6 != 0)\\n\\\n            {\\n\\\n              if (input_data[0x10] == (uint32_t *)0x4)\\n\\\n              {\\n\\\n                **input_data = **input_data | 0x200;\\n\\\n                return 1;\\n\\\n              }\\n\\\n              return 3;\\n\\\n            }\\n\\\n            uint32_t *pointer_value = input_data[9];\\n\\\n            input_data[9] = (uint32_t *)((int)pointer_value + 1);\\n\\\n            (*input_data)[4] = (uint32_t)*(char *)pointer_value;\\n\\\n            *(uint16_t *)(input_data + 10) = *(uint16_t *)(input_data + 10) + -1;\\n\\\n            *(uint16_t *)((int)input_data + 0x2a) = *(uint16_t *)((int)input_data + 0x2a) + -1;\\n\\\n            if ((((*input_data)[5] & 4) == 4) && (*(uint16_t *)(input_data + 10) != 0))\\n\\\n            {\\n\\\n              uint32_t *pointer_value = input_data[9];\\n\\\n              input_data[9] = (uint32_t *)((int)pointer_value + 1);\\n\\\n              (*input_data)[4] = (uint32_t)*(char *)pointer_value;\\n\\\n              *(uint16_t *)(input_data + 10) = *(uint16_t *)(input_data + 10) + -1;\\n\\\n              *(uint16_t *)((int)input_data + 0x2a) = *(uint16_t *)((int)input_data + 0x2a) + -1;\\n\\\n            }\\n\\\n          }\\n\\\n          uint32_t value_7 = check_and_update_flags(input_data, param_7, value_1);\\n\\\n          if (value_7 == 0)\\n\\\n          {\\n\\\n            **input_data = **input_data | 0x200;\\n\\\n            *(char *)((int)input_data + 0x3d) = 0x20;\\n\\\n            *(char *)((int)input_data + 0x3e) = 0;\\n\\\n            *(char *)(input_data + 0xf) = 0;\\n\\\n            return 0;\\n\\\n          }\\n\\\n          else if (input_data[0x10] == (uint32_t *)0x4)\\n\\\n          {\\n\\\n            **input_data = **input_data | 0x200;\\n\\\n            return 1;\\n\\\n          }\\n\\\n          else\\n\\\n          {\\n\\\n            return 3;\\n\\\n          }\\n\\\n        }\\n\\\n        else if (input_data[0x10] == (uint32_t *)0x4)\\n\\\n        {\\n\\\n          *(char *)(input_data + 0xf) = 0;\\n\\\n          return 1;\\n\\\n        }\\n\\\n        else\\n\\\n        {\\n\\\n          *(char *)(input_data + 0xf) = 0;\\n\\\n          return 3;\\n\\\n        }\\n\\\n      }\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n      return 2;\\n\\\n    }\\n\\\n  }\\n\\\n  else\\n\\\n  {\\n\\\n    return 2;\\n\\\n  }\\n\\\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002640",
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ccc",
            "calling": [
                "FUN_08004ea4"
            ],
            "imported": true,
            "current_name": "process_data_08001ccc"
        },
        "FUN_0800157c": {
            "renaming": {
                "byte": "byteToAdd",
                "uint": "result",
                "int": "value",
                "PTR_DAT_08001598": "byteToAdd",
                "PTR_DAT_0800159c": "result",
                "FUN_0800157c": "addByteToUintAndStoreResult_0800157c"
            },
            "code": "void addByteToUintAndStoreResult_0800157c(void)\n{\n  uint *PTR_DAT_0800159c = (uint *)PTR_DAT_0800159c;\n  int *value = (int *)PTR_DAT_0800159c;\n  byte *PTR_DAT_08001598 = (byte *)PTR_DAT_08001598;\n  *PTR_DAT_0800159c = *value + (uint)(*PTR_DAT_08001598);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08005704"
            ],
            "imported": true,
            "current_name": "addByteToUintAndStoreResult_0800157c"
        },
        "FUN_08000e20": {
            "renaming": {
                "FUN_08000e20": "FUNC_08000e20"
            },
            "code": "\nuint FUNC_08000e20(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e16:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e38;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e38:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e20",
            "calling": [
                "FUN_08004d78",
                "FUN_080049cc"
            ],
            "imported": false,
            "current_name": "FUNC_08000e20"
        },
        "FUN_0800121c": {
            "renaming": {
                "FUN_0800121c": "FUNC_0800121c"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 FUNC_0800121c(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong uVar1;\n  uint uVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint *puVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  undefined8 uVar15;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 != 0) {\n        param_3 = param_3 << (uVar6 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        param_1 = param_1 << (uVar6 & 0xff);\n      }\n      uVar12 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar12;\n      uVar11 = uVar8 * (param_3 & 0xffff);\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar12 * uVar8) * 0x10000;\n      uVar4 = uVar8;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar14 = CARRY4(param_3,uVar7);\n        uVar7 = param_3 + uVar7;\n        uVar4 = uVar8 - 1;\n        if ((bVar14 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar4 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar2 = (uVar7 - uVar11) / uVar12;\n      uVar5 = uVar2 * (param_3 & 0xffff);\n      uVar8 = param_1 & 0xffff | ((uVar7 - uVar11) - uVar12 * uVar2) * 0x10000;\n      uVar7 = uVar2;\n      if (uVar8 <= uVar5 && uVar5 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar2 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar5 && uVar5 - uVar8 != 0)) {\n          uVar7 = uVar2 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n      puVar9 = (uint *)0x0;\n      uVar8 = uVar8 - uVar5;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x08001302. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        uVar15 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar15;\n      }\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 == 0) {\n        puVar9 = (uint *)0x1;\n        param_2 = param_2 - param_3;\n        uVar12 = param_3 >> 0x10;\n        uVar2 = param_3 & 0xffff;\n      }\n      else {\n        param_3 = param_3 << (uVar6 & 0xff);\n        uVar4 = param_2 >> (0x20 - uVar6 & 0xff);\n        uVar12 = param_3 >> 0x10;\n        uVar11 = uVar4 / uVar12;\n        uVar2 = param_3 & 0xffff;\n        uVar5 = uVar11 * uVar2;\n        uVar8 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        uVar7 = uVar8 >> 0x10 | (uVar4 - uVar12 * uVar11) * 0x10000;\n        param_1 = param_1 << (uVar6 & 0xff);\n        uVar4 = uVar11;\n        if (uVar7 <= uVar5 && uVar5 - uVar7 != 0) {\n          bVar14 = CARRY4(param_3,uVar7);\n          uVar7 = param_3 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar5 && uVar5 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + param_3;\n          }\n        }\n        uVar11 = (uVar7 - uVar5) / uVar12;\n        uVar13 = uVar11 * uVar2;\n        param_2 = uVar8 & 0xffff | ((uVar7 - uVar5) - uVar12 * uVar11) * 0x10000;\n        uVar7 = uVar11;\n        if (param_2 <= uVar13 && uVar13 - param_2 != 0) {\n          bVar14 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar7 = uVar11 - 1;\n          if ((bVar14 == false) && (param_2 <= uVar13 && uVar13 - param_2 != 0)) {\n            uVar7 = uVar11 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar13;\n        puVar9 = (uint *)(uVar7 | uVar4 << 0x10);\n      }\n      uVar11 = param_2 / uVar12;\n      uVar7 = uVar2 * uVar11;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar12 * uVar11) * 0x10000;\n      uVar4 = uVar11;\n      if (uVar8 <= uVar7 && uVar7 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar4 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar7 && uVar7 - uVar8 != 0)) {\n          uVar4 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar11 = (uVar8 - uVar7) / uVar12;\n      uVar2 = uVar2 * uVar11;\n      uVar8 = param_1 & 0xffff | ((uVar8 - uVar7) - uVar12 * uVar11) * 0x10000;\n      uVar7 = uVar11;\n      if (uVar8 <= uVar2 && uVar2 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar2 && uVar2 - uVar8 != 0)) {\n          uVar7 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar8 = uVar8 - uVar2;\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar8 >> (uVar6 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else {\n    puVar9 = param_5;\n    if (param_2 < param_4) {\n      puVar3 = param_5;\n      if (param_5 != (uint *)0x0) {\n        *param_5 = param_1;\n        param_5[1] = param_2;\n        return 0;\n      }\n    }\n    else {\n      puVar10 = (uint *)count_leading_zeroes(param_4);\n      if (puVar10 == (uint *)0x0) {\n        if ((param_4 < param_2) || (puVar3 = puVar10, param_3 <= param_1)) {\n          bVar14 = param_1 < param_3;\n          param_1 = param_1 - param_3;\n          param_2 = (param_2 - param_4) - (uint)bVar14;\n          puVar3 = (uint *)0x1;\n        }\n        puVar9 = puVar10;\n        if (param_5 != (uint *)0x0) {\n          *param_5 = param_1;\n          param_5[1] = param_2;\n        }\n      }\n      else {\n        uVar8 = 0x20 - (int)puVar10;\n        uVar2 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar10 & 0xff);\n        uVar6 = param_2 >> (uVar8 & 0xff);\n        uVar5 = uVar2 >> 0x10;\n        uVar11 = uVar6 / uVar5;\n        uVar12 = uVar11 * (uVar2 & 0xffff);\n        uVar4 = param_2 << ((uint)puVar10 & 0xff) | param_1 >> (uVar8 & 0xff);\n        uVar7 = uVar4 >> 0x10 | (uVar6 - uVar5 * uVar11) * 0x10000;\n        param_3 = param_3 << ((uint)puVar10 & 0xff);\n        param_1 = param_1 << ((uint)puVar10 & 0xff);\n        uVar6 = uVar11;\n        if (uVar7 <= uVar12 && uVar12 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar6 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar12 && uVar12 - uVar7 != 0)) {\n            uVar6 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        uVar11 = (uVar7 - uVar12) / uVar5;\n        uVar13 = uVar11 * (uVar2 & 0xffff);\n        uVar7 = uVar4 & 0xffff | ((uVar7 - uVar12) - uVar5 * uVar11) * 0x10000;\n        uVar4 = uVar11;\n        if (uVar7 <= uVar13 && uVar13 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar13 && uVar13 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        puVar3 = (uint *)(uVar4 | uVar6 << 0x10);\n        uVar1 = ZEXT48(puVar3) * (ulonglong)param_3;\n        if (CONCAT44(uVar7 - uVar13,param_1) < uVar1) {\n          puVar3 = (uint *)((int)puVar3 + -1);\n          uVar1 = uVar1 - CONCAT44(uVar2,param_3);\n        }\n        if (param_5 != (uint *)0x0) {\n          uVar6 = ((uVar7 - uVar13) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n          *param_5 = uVar6 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar10 & 0xff);\n          param_5[1] = uVar6 >> ((uint)puVar10 & 0xff);\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,puVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800121c",
            "calling": [
                "FUN_080011ec"
            ],
            "imported": false,
            "current_name": "FUNC_0800121c"
        },
        "FUN_08005d14": {
            "renaming": {
                "PTR_PTR_DAT_08005d1c": "pointer_to_pointer",
                "FUN_08005d14": "get_value_from_pointer_08005d14"
            },
            "code": "get_value_from_pointer_08005d14() {\n  return *(undefined4 *)PTR_PTR_DAT_08005d1c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d14",
            "calling": [
                "FUN_08005728"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_08005d14"
        },
        "FUN_080015b4": {
            "renaming": {
                "PTR_DAT_080015f8": "display_ptr",
                "param_1": "display_value",
                "FUN_080015b4": "update_display_080015b4",
                "DAT_080015f8": "display_offset"
            },
            "code": "void update_display_080015b4(uint display_value) {\n  uint* PTR_DAT_080015f8 = (uint*)(DAT_080015f8 + 0xc);\n  uint mask = 0xf8ff;\n  uint shifted_value = (display_value & 7) << 8;\n  uint constant = 0x5fa0000;\n  *PTR_DAT_080015f8 = (*PTR_DAT_080015f8 & mask) | shifted_value | constant;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b4",
            "calling": [
                "FUN_08001714"
            ],
            "imported": true,
            "current_name": "update_display_080015b4"
        },
        "FUN_080036f8": {
            "renaming": {
                "param_1": "flag_ptr",
                "flag_10": "flag_10",
                "flag_c": "flag_c",
                "FUN_080036f8": "process_flags_080036f8"
            },
            "code": "void process_flags_080036f8(int *flag_ptr) {\n  uint8_t flag_c = *(uint *)(*flag_ptr + 0xc);\n  uint8_t flag_10 = *(uint *)(*flag_ptr + 0x10);\n  if ((flag_10 & 2) && (flag_c & 2)) {\n    *(uint *)(*flag_ptr + 0x10) = 0xfffffffd;\n    *(uint8_t *)(flag_ptr + 7) = 1;\n    if ((*(uint *)(*flag_ptr + 0x18) & 3) == 0) {\n      do_nothing_08003c4a(flag_ptr);\n      do_nothing_08003c6e(flag_ptr);\n    }\n    else {\n      do_nothing_08003c5c(flag_ptr);\n    }\n    *(uint8_t *)(flag_ptr + 7) = 0;\n  }\n  if ((flag_10 & 4) && (flag_c & 4)) {\n    *(uint *)(*flag_ptr + 0x10) = 0xfffffffb;\n    *(uint8_t *)(flag_ptr + 7) = 2;\n    if ((*(uint *)(*flag_ptr + 0x18) & 0x300) == 0) {\n      do_nothing_08003c4a(flag_ptr);\n      do_nothing_08003c6e(flag_ptr);\n    }\n    else {\n      do_nothing_08003c5c(flag_ptr);\n    }\n    *(uint8_t *)(flag_ptr + 7) = 0;\n  }\n  if ((flag_10 & 8) && (flag_c & 8)) {\n    *(uint *)(*flag_ptr + 0x10) = 0xfffffff7;\n    *(uint8_t *)(flag_ptr + 7) = 4;\n    if ((*(uint *)(*flag_ptr + 0x1c) & 3) == 0) {\n      do_nothing_08003c4a(flag_ptr);\n      do_nothing_08003c6e(flag_ptr);\n    }\n    else {\n      do_nothing_08003c5c(flag_ptr);\n    }\n    *(uint8_t *)(flag_ptr + 7) = 0;\n  }\n  if ((flag_10 & 0x10) && (flag_c & 0x10)) {\n    *(uint *)(*flag_ptr + 0x10) = 0xffffffef;\n    *(uint8_t *)(flag_ptr + 7) = 8;\n    if ((*(uint *)(*flag_ptr + 0x1c) & 0x300) == 0) {\n      do_nothing_08003c4a(flag_ptr);\n      do_nothing_08003c6e(flag_ptr);\n    }\n    else {\n      do_nothing_08003c5c(flag_ptr);\n    }\n    *(uint8_t *)(flag_ptr + 7) = 0;\n  }\n  if ((flag_10 & 1) && (flag_c & 1)) {\n    *(uint *)(*flag_ptr + 0x10) = 0xfffffffe;\n    processInput_08004f78(flag_ptr);\n  }\n  if ((flag_10 & 0x80) && (flag_c & 0x80)) {\n    *(uint *)(*flag_ptr + 0x10) = 0xffffff7f;\n    do_nothing_08004378(flag_ptr);\n  }\n  if ((flag_10 & 0x40) && (flag_c & 0x40)) {\n    *(uint *)(*flag_ptr + 0x10) = 0xffffffbf;\n    do_nothing_08003c80(flag_ptr);\n  }\n  if ((flag_10 & 0x20) && (flag_c & 0x20)) {\n    *(uint *)(*flag_ptr + 0x10) = 0xffffffdf;\n    do_nothing_08004366(flag_ptr);\n  }\n  return;\n}",
            "called": [
                "FUN_08004378",
                "FUN_08004f78",
                "FUN_08004366",
                "FUN_08003c6e",
                "FUN_08003c4a",
                "FUN_08003c5c",
                "FUN_08003c80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f8",
            "calling": [
                "FUN_08005714"
            ],
            "imported": true,
            "current_name": "process_flags_080036f8"
        },
        "FUN_080041a8": {
            "renaming": {
                "param_1": "data",
                "*(uint *)(param_1 + 8) & 0xffff00ff": "~mask",
                "*(uint *)(param_1 + 8)": "*data",
                "param_2 | param_4 << 8 | param_3": "bits_to_set << shift_amount",
                "param_2": "bits_to_set",
                "param_3": "mask",
                "param_4": "shift_amount",
                "FUN_080041a8": "set_bits_080041a8"
            },
            "code": "void set_bits_080041a8(uint32_t* data, uint32_t bits_to_set, uint32_t mask, uint32_t shift_amount) {\n  uint32_t current_data = *data;\n  uint32_t masked_data = current_data & ~mask;\n  uint32_t shifted_bits = bits_to_set << shift_amount;\n  *data = masked_data | shifted_bits;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a8",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": true,
            "current_name": "set_bits_080041a8"
        },
        "FUN_080004c8": {
            "renaming": {
                "FUN_080004c8": "FUNC_080004c8"
            },
            "code": "\nulonglong FUNC_080004c8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_080006a4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004c8",
            "calling": [
                "FUN_08004d78",
                "FUN_080059f0",
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_080096e0",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "FUNC_080004c8"
        },
        "FUN_08008ad4": {
            "renaming": {
                "FUN_08008ad4": "get_data_from_ptr_08008ad4",
                "puVar1": "data_ptr"
            },
            "code": "undefined* get_data_from_ptr_08008ad4(){\n    undefined* data_ptr = *(undefined **)(*(int *)PTR_PTR_DAT_08008ae8 + 0x34);\n    if (data_ptr == (undefined *)0x0) {\n        data_ptr = PTR_DAT_08008aec;\n    }\n    return data_ptr + 0xf0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ad4",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "get_data_from_ptr_08008ad4"
        },
        "FUN_080009e8": {
            "renaming": {
                "FUN_080009e8": "is_end_of_string_080009e8",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_080009e8(void)\n{\n  char current_char;\n  check_and_return_params();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009e8",
            "calling": [
                "FUN_080059f0",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "is_end_of_string_080009e8"
        },
        "FUN_08005674": {
            "renaming": {
                "FUN_08005674": "wait_forever_08005674"
            },
            "code": "void wait_forever_08005674(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005674",
            "calling": [
                "FUN_08005500",
                "FUN_08005598",
                "FUN_080053b0",
                "FUN_080052a0",
                "FUN_08005348"
            ],
            "imported": true,
            "current_name": "wait_forever_08005674"
        },
        "FUN_08003c4a": {
            "renaming": {
                "FUN_08003c4a": "do_nothing_08003c4a"
            },
            "code": "\nvoid do_nothing_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c4a",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": true,
            "current_name": "do_nothing_08003c4a"
        },
        "FUN_08009630": {
            "renaming": {
                "iVar1": "memory_address",
                "iVar3": "memory_address",
                "iVar4": "memory_address",
                "FUN_08009630": "allocate_and_initialize_memory_08009630",
                "param_1": "size",
                "local_1c": "value_1_masked",
                "param_6": "bits_set_count",
                "param_2": "value",
                "param_3": "count_set_bits",
                "param_4": "count_bits_set",
                "param_5": "memory_address",
                "uVar2": "set_bits_count",
                "local_20": "value_2",
                "uVar5": "value_1_shifted",
                "uVar7": "bits_set_count",
                "uVar6": "shift_count"
            },
            "code": "int allocate_and_initialize_memory_08009630(uint32_t size, uint32_t value, uint32_t* count_set_bits, uint32_t* count_bits_set) {\n  int memory_address;\n  uint32_t set_bits_count;\n  uint32_t bits_set_count;\n  uint32_t value_1 = value;\n  uint32_t value_2 = 0;\n  uint32_t shift_count = (size << 1) >> 0x15;\n  uint32_t value_1_masked = size & 0xfffff;\n  if (shift_count != 0) {\n    value_1_masked |= 0x100000;\n  }\n  if (value_1_masked == 0) {\n    set_bits_count = 0;\n    memory_address = 1;\n  }\n  else {\n    set_bits_count = count_set_bits_080091e4(&value_1_masked);\n    if (set_bits_count == 0) {\n      value_2 = value_1_masked;\n    }\n    else {\n      uint32_t value_1_shifted = value_1_masked << (0x20 - set_bits_count & 0xff);\n      value_2 = value_1_masked >> (set_bits_count & 0xff) | value_1_shifted;\n    }\n    if (value_2 == 0) {\n      memory_address = 1;\n    }\n    else {\n      memory_address = 2;\n    }\n  }\n  if (shift_count == 0) {\n    *count_set_bits = set_bits_count + 0x20;\n    *count_bits_set = (0x20 - count_bits_set_080091a4(value_2)) & 0x1f;\n    return memory_address;\n  }\n  *count_set_bits = shift_count + set_bits_count;\n  *count_bits_set = 0x35 - set_bits_count;\n  return memory_address;\n}",
            "called": [
                "FUN_080090c0",
                "FUN_080091a4",
                "FUN_080091e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009630",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "allocate_and_initialize_memory_08009630"
        },
        "FUN_08004104": {
            "renaming": {
                "+ 0x20": " + flags_offset",
                "<< 0xc": " << flag_shift",
                "<< 4": " << value_shift",
                "FUN_08004104": "update_flags_and_values_08004104",
                "param_1": "base_address",
                "uint": "unsigned int",
                "param_2": "new_value",
                "PTR_": "",
                "param_3": "flag_value",
                "DAT_": "",
                "& 0xffff0fff": " & clear_value_mask",
                "*(": "*",
                "+ 0x18": " + values_offset",
                "& 0xffffffef": " & clear_flag_mask",
                ")(": ")*"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ update_flags_and_values_08004104(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004104",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": true,
            "current_name": "update_flags_and_values_08004104"
        },
        "FUN_08000ff4": {
            "renaming": {
                "in_CY": "inputChar",
                "FUN_08000ff4": "isInputEmpty_08000ff4",
                "concatenate_uint32s_to_uint64_08000fd0": "concatenateNumbers"
            },
            "code": "bool isInputEmpty_08000ff4(void)\n{\n  char inputChar;\n  concatenateNumbers();\n  return inputChar == '\\0';\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ff4",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "isInputEmpty_08000ff4"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "process_flags_08005714",
                "process_flags_080036f8": "process_flags_helper",
                "PTR_DAT_08005724": "flags"
            },
            "code": "void process_flags_08005714(void)\n{\n  process_flags_08005714_helper(PTR_DAT_08005724);\n  return;\n}",
            "called": [
                "FUN_080036f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": true,
            "current_name": "process_flags_08005714"
        },
        "FUN_08005d0c": {
            "renaming": {
                "FUN_08005d0c": "do_nothing_08005d0c"
            },
            "code": "\nvoid do_nothing_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d0c",
            "calling": [
                "FUN_080059f0",
                "FUN_08005838"
            ],
            "imported": true,
            "current_name": "do_nothing_08005d0c"
        },
        "FUN_08005e40": {
            "renaming": {
                "iVar1": "offset",
                "puVar2": "ptr",
                "param_1": "address",
                "count_leading_zeroes": "count_leading_zeroes",
                "FUN_08005e40": "find_first_set_bit_08005e40",
                "uVar4": "value"
            },
            "code": "int find_first_set_bit_08005e40(uint32_t address) {\n  int offset = -(address & 3);\n  uint32_t value = *(uint32_t *)(address & 0xFFFFFFFC);\n  if ((address & 3) != 0) {\n    value |= 0xFFFFFFFFU >> ((offset + 4U & 0x1f) << 3);\n  }\n  while (true) {\n    address += 4;\n    value = value + 0xFEFEFEFFU & ~value & 0x80808080U;\n    if (value != 0) break;\n    value = *(uint32_t *)address;\n    offset += 4;\n  }\n  int num_leading_zeroes = count_leading_zeroes(value & -value);\n  return offset + (31 - num_leading_zeroes >> 3);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e40",
            "calling": [
                "FUN_08004f78",
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "find_first_set_bit_08005e40"
        },
        "FUN_08005d20": {
            "renaming": {
                "iVar2": "i",
                "iVar4": "function_count",
                "FUN_08005d20": "execute_functions_08005d20",
                "puVar1": "function_pointer",
                "ppcVar3": "function_array"
            },
            "code": "void execute_functions_08005d20(void)\n{\n  undefined *function_pointer;\n  int function_count;\n  code **function_array;\n  int i;\n  function_count = (int)PTR_DAT_08005d58 - (int)PTR_DAT_08005d5c >> 2;\n  if (function_count != 0) {\n    i = 0;\n    function_array = (code **)PTR_DAT_08005d5c;\n    do {\n      i++;\n      (**function_array)();\n      function_array++;\n    } while (function_count != i);\n  }\n  function_array = (code **)PTR_DAT_08005d64;\n  function_pointer = PTR_DAT_08005d60;\n  do_nothing_08009e68();\n  function_count = (int)function_pointer - (int)function_array >> 2;\n  if (function_count != 0) {\n    i = 0;\n    do {\n      i++;\n      (**function_array)();\n      function_array++;\n    } while (function_count != i);\n  }\n  return;\n}",
            "called": [
                "FUN_08000134",
                "FUN_08009e68",
                "FUN_080078a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d20",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": true,
            "current_name": "execute_functions_08005d20"
        },
        "FUN_08001a80": {
            "renaming": {
                "param_1": "base_address",
                "uint": "unsigned_int",
                "FUN_08001a80": "set_param_value_08001a80",
                "param_2": "value",
                "param_3": "is_high_word"
            },
            "code": "void set_param_value_08001a80(int base_address, ushort value, char is_high_word) {\\n  if (is_high_word == \"\\0\") {\\n    *(uint *)(base_address + 0x10) = (uint)value << 0x10;\\n  }\\n  else {\\n    *(uint *)(base_address + 0x10) = (uint)value;\\n  }\\n  return;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a80",
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "imported": true,
            "current_name": "set_param_value_08001a80"
        },
        "FUN_08005838": {
            "renaming": {
                "uVar10": "constant_5",
                "uVar11": "constant_6",
                "uVar12": "constant_7",
                "uVar13": "constant_8",
                "uVar14": "constant_9",
                "uVar1": "difference",
                "is_negative_input_param_4": "is_negative_input_param_4",
                "is_negative_input_param_2": "is_negative_input_param_2",
                "param_1": "input_param_1",
                "FUN_08005838": "calculate_result_08005838",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar3": "result_lower",
                "uVar2": "result_upper",
                "uVar5": "max_value",
                "uVar4": "abs_input_param_4",
                "uVar7": "constant_2",
                "uVar6": "constant_1",
                "uVar9": "constant_4",
                "uVar8": "constant_3"
            },
            "code": "uint calculate_result_08005838(uint input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n{\n  int difference;\n  undefined4 result_upper;\n  uint result_lower;\n  uint abs_input_param_1 = abs(input_param_1);\n  uint abs_input_param_2 = abs(input_param_2);\n  uint abs_input_param_3 = abs(input_param_3);\n  uint abs_input_param_4 = abs(input_param_4) & 0x7fffffff;\n  uint max_value = DAT_080059e8;\n  uint constant_1 = DAT_080059b0;\n  uint constant_2 = DAT_080059a0;\n  uint constant_3 = DAT_080059d8;\n  uint constant_4 = DAT_080059d0;\n  uint constant_5 = DAT_080059c8;\n  uint constant_6 = DAT_080059e0;\n  uint constant_7 = DAT_080059b8;\n  uint constant_8 = DAT_080059c0;\n  undefined8 constant_9 = CONCAT44(DAT_080059bc,DAT_080059b8);\n  uint is_negative_input_param_2 = input_param_2 >> 0x1f;\n  uint is_negative_input_param_4 = input_param_4 >> 0x1f;\n\n  if (max_value < (abs_input_param_4 | (-input_param_3 | input_param_3) >> 0x1f) || max_value < (abs_input_param_2 | (-input_param_1 | input_param_1) >> 0x1f)) {\n    result_lower = calculate_result_08005838(abs_input_param_3, abs_input_param_4, abs_input_param_1, abs_input_param_2);\n    return result_lower;\n  }\n\n  if ((input_param_4 + 0xc0100000 | input_param_3) == 0) {\n    result_lower = FUNC_080059f0();\n    return result_lower;\n  }\n\n  if (abs_input_param_1 == 0) {\n    if (is_negative_input_param_2 == 2) {\n      return constant_1;\n    }\n    if (is_negative_input_param_2 == 3) {\n      return constant_2;\n    }\n    if (is_negative_input_param_2 == 1) {\n      return 0;\n    }\n    return 0;\n  }\n\n  if ((abs_input_param_4 | abs_input_param_3) != 0) {\n    if (abs_input_param_4 == max_value) {\n      if (abs_input_param_2 == abs_input_param_4) {\n        if (is_negative_input_param_2 == 2) {\n          return constant_6;\n        }\n        if (is_negative_input_param_2 == 3) {\n          return constant_3;\n        }\n        if (is_negative_input_param_2 == 1) {\n          return constant_4;\n        }\n        return constant_5;\n      }\n      if (is_negative_input_param_2 == 2) {\n        return constant_1;\n      }\n      if (is_negative_input_param_2 == 3) {\n        return constant_2;\n      }\n      if (is_negative_input_param_2 == 1) {\n        return 0;\n      }\n      return 0;\n    }\n    if (abs_input_param_2 != max_value) {\n      difference = (int)(abs_input_param_2 - abs_input_param_4) >> 0x14;\n      if (difference < 0x3d) {\n        if ((input_param_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n          constant_9 = 0;\n        }\n        else {\n          FUNC_0800071c(abs_input_param_1, abs_input_param_2, abs_input_param_3, abs_input_param_4, abs_input_param_4);\n          do_nothing_08005d0c();\n          constant_9 = FUNC_080059f0();\n        }\n      }\n      result_upper = (undefined4)((ulonglong)constant_9 >> 0x20);\n      result_lower = (uint)constant_9;\n      if (is_negative_input_param_2 == 1) {\n        return result_lower;\n      }\n      if (is_negative_input_param_2 == 2) {\n        constant_9 = FUNC_08000158(result_lower, result_upper, DAT_080059a8, DAT_080059ac);\n        result_lower = FUNC_08000158(constant_1, DAT_080059b4, (int)constant_9, (int)((ulonglong)constant_9 >> 0x20));\n        return result_lower;\n      }\n      if (is_negative_input_param_2 == 0) {\n        return result_lower;\n      }\n      constant_9 = FUNC_08000158(result_lower, result_upper, DAT_080059a8, DAT_080059ac);\n      result_lower = FUNC_08000158((int)constant_9, (int)((ulonglong)constant_9 >> 0x20), constant_1, DAT_080059b4);\n      return result_lower;\n    }\n  }\n\n  result_lower = constant_5;\n  if (-1 < (int)input_param_2) {\n    result_lower = constant_7;\n  }\n\n  if (is_negative_input_param_4) {\n    result_lower = constant_8;\n  }\n\n  return result_lower;\n}",
            "called": [
                "FUN_08005d0c",
                "FUN_0800071c",
                "FUN_080059f0",
                "FUN_0800015c",
                "FUN_08000158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005838",
            "calling": [
                "thunk_FUN_08005838"
            ],
            "imported": true,
            "current_name": "calculate_result_08005838"
        },
        "FUN_080090a8": {
            "renaming": {
                "FUN_080090a8": "doNothingWithPointer_080090a8",
                "PTR_DAT_080090b0": "PTR_DATA"
            },
            "code": "void doNothingWithPointer_080090a8(void)\n{\n  do_nothing(PTR_DAT_080090b0);\n  return;\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090a8",
            "calling": [
                "FUN_08008af8",
                "FUN_0800884c",
                "FUN_08009adc",
                "FUN_080088ec"
            ],
            "imported": true,
            "current_name": "doNothingWithPointer_080090a8"
        },
        "FUN_08004e74": {
            "renaming": {
                "uVar1": "result",
                "param_1": "interrupt_number",
                "FUN_08004e74": "handle_interrupt_08004e74",
                "PTR_DAT_08004ea0": "is_interrupt_enabled"
            },
            "code": "int handle_interrupt_08004e74(int interrupt_number)\n{\n  int PTR_DAT_08004ea0 = *(int *)PTR_DAT_08004ea0;\n  int result = 0;\n  if (PTR_DAT_08004ea0 == 0) {\n    result = trigger_software_interrupt_08004e6c(1, interrupt_number, 0);\n  }\n  return result;\n}",
            "called": [
                "FUN_08004e6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "handle_interrupt_08004e74"
        },
        "FUN_080096e0": {
            "renaming": {
                "DAT_0800973c": "MIN_NORMAL_DOUBLE",
                "param_1": "mantissa",
                "param_2": "exponent",
                "FUN_080096e0": "calculate_float_exponent_080096e0",
                "param_3": "exponent_diff",
                "param_4": "sign_bit",
                "DAT_08009740": "MAX_EXPONENT"
            },
            "code": "uint32_t calculate_float_exponent_080096e0(uint32_t mantissa, uint32_t exponent, int *exponent_diff, uint32_t sign_bit)\n{\n  int max_exponent = DAT_08009740;\n  uint64_t combined = ((uint64_t)exponent << 32) | mantissa;\n  int exponent_diff_value = 0;\n  *exponent_diff = 0;\n  if (((int)exponent & 0x7fffffff) <= max_exponent && ((exponent & mantissa) != 0)) {\n    if ((int)exponent < 0x100000) {\n      combined = calculate_double(mantissa, exponent, 0, DAT_0800973c, sign_bit);\n      exponent_diff_value = -54;\n      exponent = (uint32_t)((combined >> 32) & 0x7fffffff);\n    }\n    mantissa = (uint32_t)combined;\n    exponent = (uint32_t)((combined >> 32) & 0x800fffff) | 0x3fe00000;\n    exponent_diff_value = ((int)exponent >> 0x14) - 0x3fe + exponent_diff_value;\n    *exponent_diff = exponent_diff_value;\n  }\n  return (uint32_t)(combined & 0xffffffff);\n}",
            "called": [
                "FUN_080004c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "calculate_float_exponent_080096e0"
        },
        "FUN_0800910c": {
            "renaming": {
                "iVar1": "data_array_ptr",
                "param_1": "data_index",
                "param_2": "output_data",
                "FUN_0800910c": "extract_data_0800910c"
            },
            "code": "void extract_data_0800910c(int data_index, undefined4 *output_data)\n{\n  int data_array_ptr;\n  if (output_data != (undefined4 *)0x0) {\n    data_array_ptr = *(int *)(data_index + 0x4c);\n    *output_data = *(undefined4 *)(data_array_ptr + output_data[1] * 4);\n    *(undefined4 **)(data_array_ptr + output_data[1] * 4) = output_data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800910c",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "extract_data_0800910c"
        },
        "FUN_080052a0": {
            "renaming": {
                "local_c": "parameter7",
                "iVar2": "success_flag",
                "lVar1": "product",
                "local_2c": "parameter2",
                "local_3c": "parameter10",
                "local_28": "parameter3",
                "local_38": "parameter11",
                "FUN_080052a0": "calculate_parameter_080052a0",
                "local_10": "parameter6",
                "uVar3": "parameter13",
                "local_20": "parameter4",
                "local_30": "parameter1",
                "local_40": "parameter9",
                "local_14": "parameter5",
                "local_34": "parameter12",
                "local_44": "parameter8"
            },
            "code": "void calculate_parameter_080052a0() {\n  int success_flag;\n  longlong product;\n  int parameter1 = 1;\n  ulonglong parameter2 = 0x10000;\n  int parameter3 = 0;\n  int parameter4 = 1;\n  int parameter5 = 2;\n  ulonglong parameter6 = 0x10000;\n  ulonglong parameter7 = 0x1c0000;\n  success_flag = calculate_new_value(&parameter1);\n  if (success_flag != 0) {\n    wait_forever(PTR_s____src_main_c_08005340, 0x151);\n  }\n  int parameter8 = 0xf;\n  int parameter9 = 2;\n  int parameter10 = 0x80;\n  int parameter11 = 0;\n  int parameter12 = 0;\n  success_flag = calculate_new_value_2(&parameter8, 2);\n  if (success_flag != 0) {\n    wait_forever(PTR_s____src_main_c_08005340, 0x15e);\n  }\n  ulonglong parameter13 = get_value_from_pointer();\n  product = (ulonglong)DAT_08005344 * (parameter13 & 0xffffffff);\n  check_parameter_range((uint)(product >> 0x26), (int)(parameter13 >> 0x20), (int)product);\n  set_bit_if_parameter_is_4(4);\n  set_byte_at_index(0xffffffff, 0, 0);\n  return;\n}",
            "called": [
                "FUN_08002d98",
                "FUN_08005674",
                "FUN_0800177c",
                "FUN_08003504",
                "FUN_08003260",
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052a0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "calculate_parameter_080052a0"
        },
        "FUN_08009120": {
            "renaming": {
                "iVar3": "n",
                "iVar5": "heap_ptr",
                "puVar4": "coeff_ptr",
                "param_1": "degree",
                "param_2": "coefficients",
                "param_3": "base",
                "param_4": "result",
                "puVar1": "polynomial",
                "uVar2": "quotient",
                "FUN_08009120": "calculate_polynomial_08009120"
            },
            "code": "undefined4 * calculate_polynomial_08009120(int degree, undefined4 *coefficients, int base, uint result)\n{\n  undefined4 *polynomial;\n  uint carryover = 0;\n  int i = 0;\n  int n = coefficients[4];\n  uint *coeff_ptr = coefficients + 5;\n  do {\n    i++;\n    result = base * (*coeff_ptr & 0xffff) + result;\n    uint quotient = base * (*coeff_ptr >> 0x10) + (result >> 0x10);\n    *coeff_ptr = (result & 0xffff) + quotient * 0x10000;\n    result = quotient >> 0x10;\n    coeff_ptr++;\n  } while (i < n);\n  polynomial = coefficients;\n  if (result != 0) {\n    if ((int)coefficients[2] <= n) {\n      polynomial = (undefined4 *)allocate_and_initialize_memory_080090c0(degree, coefficients[1] + 1);\n      copy_memory_block_08001084(polynomial + 3, coefficients + 3, (coefficients[4] + 2) * 4);\n      int heap_ptr = *(int *)(degree + 0x4c);\n      *coefficients = *(undefined4 *)(heap_ptr + coefficients[1] * 4);\n      *(undefined4 **)(heap_ptr + coefficients[1] * 4) = coefficients;\n    }\n    polynomial[n + 5] = result;\n    polynomial[4] = n + 1;\n  }\n  return polynomial;\n}",
            "called": [
                "FUN_080090c0",
                "FUN_08001084"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009120",
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "calculate_polynomial_08009120"
        },
        "FUN_08001084": {
            "renaming": {
                "FUN_08001084": "copy_memory_block_08001084",
                "puVar2": "src_ptr",
                "puVar3": "N/A",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "uVar5": "remaining_size",
                "uVar4": "i",
                "bVar6": "is_aligned"
            },
            "code": "undefined4 copy_memory_block_08001084(undefined4 *destination, undefined4 *source, uint size)\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint i;\n  bool is_aligned;\n  \n  dest_ptr = destination;\n  is_aligned = (((uint)source | (uint)destination) & 3) == 0;\n  \n  if (!is_aligned) {\n    if (size < 8) {\n      remaining_size = size - 4;\n      if (remaining_size > 3) {\n        do {\n          src_ptr = source;\n          dest_ptr = destination;\n          remaining_size--;\n          *(undefined *)dest_ptr = *(undefined *)src_ptr;\n          dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n          source = (undefined4 *)((int)src_ptr + 1);\n        } while (remaining_size > 0);\n        *(undefined *)(undefined4 *)((int)dest_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)src_ptr + 1);\n        *(undefined *)((int)dest_ptr + 2) = *(undefined *)((int)src_ptr + 2);\n        *(undefined *)((int)dest_ptr + 3) = *(undefined *)((int)src_ptr + 3);\n        return destination;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      remaining_size = 4 - ((uint)destination & 3);\n      size -= remaining_size;\n      src_ptr = source;\n      dest_ptr = destination;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      if ((remaining_size & 2) != 0) {\n        dest_ptr = (undefined4 *)((int)dest_ptr + 2);\n        src_ptr = (undefined4 *)((int)src_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  \n  for (i = 0; i < size / 16; i++) {\n    dest_ptr[0] = source[0];\n    dest_ptr[1] = source[1];\n    dest_ptr[2] = source[2];\n    dest_ptr[3] = source[3];\n    dest_ptr[4] = source[4];\n    dest_ptr[5] = source[5];\n    dest_ptr[6] = source[6];\n    dest_ptr[7] = source[7];\n    dest_ptr[8] = source[8];\n    dest_ptr[9] = source[9];\n    dest_ptr[10] = source[10];\n    dest_ptr[11] = source[11];\n    dest_ptr[12] = source[12];\n    dest_ptr[13] = source[13];\n    dest_ptr[14] = source[14];\n    dest_ptr[15] = source[15];\n    dest_ptr += 16;\n    source += 16;\n  }\n  remaining_size = size % 16;\n  if (remaining_size > 0) {\n    for (i = 0; i < remaining_size / 4; i++) {\n      *dest_ptr = *source;\n      dest_ptr++;\n      source++;\n    }\n    remaining_size &= 3;\n    if (remaining_size > 0) {\n      *(undefined *)dest_ptr = *(undefined *)source;\n      if ((remaining_size & 2) != 0) {\n        *(undefined2 *)((int)dest_ptr + 2) = *(undefined2 *)((int)source + 2);\n      }\n    }\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001084",
            "calling": [
                "FUN_08009120",
                "FUN_080097cc",
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "copy_memory_block_08001084"
        },
        "FUN_08005680": {
            "renaming": {
                "FUN_08005680": "process_bits_if_match_08005680",
                "local_c": "val_2",
                "param_1": "bits",
                "local_18": "match",
                "local_14": "val_1"
            },
            "code": "void process_bits_if_match_08005680(int *bits)\n{\n  int match = 0x900;\n  int val_1 = 2;\n  int val_2 = 2;\n  if (*bits == match) {\n    process_bits(DAT_080056b8, &match);\n  }\n  return;\n}",
            "called": [
                "FUN_080017c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005680",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": true,
            "current_name": "process_bits_if_match_08005680"
        },
        "FUN_08003260": {
            "renaming": {
                "get_value_from_pointer_080015a0": "get_value_from_pointer",
                "FUN_08003260": "calculate_new_value_08003260",
                "iVar1": "value1",
                "iVar2": "value2",
                "LAB_08003394": "LABEL1",
                "PTR_DAT_0800343c": "pointer_location1",
                "param_1": "params",
                "DAT_08003434": "memory_location2",
                "check_parameter_range_0800151c": "check_parameter_range",
                "param_2": "num_params",
                "calculate_value_08003440": "calculate_value",
                "DAT_08003430": "memory_location1",
                "uVar3": "result",
                "uVar4": "result",
                "PTR_DAT_08003438": "pointer_location2"
            },
            "code": "uint32_t calculate_new_value_08003260(uint32_t *params, uint32_t num_params)\n{\n  int value1;\n  int value2;\n  uint32_t result;\n  \n  if (((*DAT_08003430 & 7) < num_params) &&\n     (*DAT_08003430 = num_params | *DAT_08003430 & 0xfffffff8, num_params != (*DAT_08003430 & 7))) {\n    result = 1;\n  }\n  else {\n    if ((*params & 2) != 0) {\n      DAT_08003434[1] = params[2] | DAT_08003434[1] & 0xffffff0f;\n    }\n    if ((*params & 1) == 0) {\n      // jump to label\n      goto LABEL1;\n      result = 0;\n    }\n    else {\n      if (params[1] == 1) {\n        if ((*DAT_08003434 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((params[1] != 2) && ((*DAT_08003434 & 2) == 0)) {\n        return 1;\n      }\n      DAT_08003434[1] = params[1] | DAT_08003434[1] & 0xfffffffc;\n      value1 = get_value_from_pointer();\n      if (params[1] == 1) {\n        do {\n          if ((DAT_08003434[1] & 0xc) == 4) goto LABEL1;\n          value2 = get_value_from_pointer();\n        } while ((uint32_t)(value2 - value1) < 0x1389);\n        result = 3;\n      }\n      else if (params[1] == 2) {\n        do {\n          if ((DAT_08003434[1] & 0xc) == 8) goto LABEL1;\n          value2 = get_value_from_pointer();\n        } while ((uint32_t)(value2 - value1) < 0x1389);\n        result = 3;\n      }\n      else {\n        do {\n          if ((DAT_08003434[1] & 0xc) == 0) goto LABEL1;\n          value2 = get_value_from_pointer();\n        } while ((uint32_t)(value2 - value1) < 0x1389);\n        result = 3;\n      }\n    }\n  }\n  return result;\n}\n",
            "called": [
                "FUN_080015a0",
                "FUN_08003440",
                "FUN_0800151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003260",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": true,
            "current_name": "calculate_new_value_08003260"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "calculate_result_08001ab0",
                "uVar1": "value1",
                "param_1": "input",
                "cVar2": "flag1",
                "uVar3": "result",
                "uVar4": "value2",
                "bVar5": "flag2"
            },
            "code": "int calculate_result_08001ab0(uint **input)\\n{\\n  uint value1;\\n  char flag1;\\n  int result;\\n  uint value2;\\n  bool flag2;\\n  if (input == (uint **)0x0) {\\n    result = 1;\\n  }\\n  else {\\n    if (*(char *)((int)input + 0x3d) == \"\\0\") {\\n      *(undefined *)(input + 0xf) = 0;\\n      do_nothing(input);\\n    }\\n    *(undefined *)((int)input + 0x3d) = 0x24;\\n    **input = **input & 0xfffffffe;\\n    value1 = get_shifted_value_from_pointer();\\n    if (PTR_DAT_08001ca4 < input[1]) {\\n      value2 = value1;\\n      if (value1 <= PTR_DAT_08001cac) {\\n        value2 = 1;\\n      }\\n      flag1 = (char)value2;\\n      if (PTR_DAT_08001cac < value1) {\\n        flag1 = \"\\0\";\\n      }\\n    }\\n    else {\\n      value2 = value1;\\n      if (value1 <= PTR_DAT_08001ca8) {\\n        value2 = 1;\\n      }\\n      flag1 = (char)value2;\\n      if (PTR_DAT_08001ca8 < value1) {\\n        flag1 = \"\\0\";\\n      }\\n    }\\n    if (flag1 == \"\\0\") {\\n      value2 = (uint)((ulonglong)PTR_DAT_08001cb0 * (ulonglong)value1 >> 0x32);\\n      (*input)[1] = value2;\\n      if (PTR_DAT_08001ca4 < input[1]) {\\n        value2 = (uint)((ulonglong)PTR_DAT_08001cb4 * (ulonglong)(value2 * 300) >> 0x26);\\n      }\\n      (*input)[8] = value2 + 1;\\n      if (PTR_DAT_08001ca4 < input[1]) {\\n        if (input[2] == (uint *)0x0) {\\n          value2 = (value1 - 1) / (uint)((int)input[1] * 3) + 1 & 0xfff;\\n          flag2 = value2 == 0;\\n          if (flag2) {\\n            value2 = 1;\\n          }\\n          flag1 = (char)value2;\\n          if (!flag2) {\\n            flag1 = \"\\0\";\\n          }\\n        }\\n        else {\\n          value2 = (value1 - 1) / (uint)((int)input[1] * 0x19) + 1 & 0xfff;\\n          flag2 = value2 == 0;\\n          if (flag2) {\\n            value2 = 1;\\n          }\\n          flag1 = (char)value2;\\n          if (!flag2) {\\n            flag1 = \"\\0\";\\n          }\\n        }\\n        if (flag1 == \"\\0\") {\\n          if (input[2] == (uint *)0x0) {\\n            value1 = (value1 - 1) / (uint)((int)input[1] * 3) + 1 & 0xfff | 0x8000;\\n          }\\n          else {\\n            value1 = (value1 - 1) / (uint)((int)input[1] * 0x19) + 1 & 0xfff | 0xc000;\\n          }\\n        }\\n        else {\\n          value1 = 1;\\n        }\\n      }\\n      else {\\n        value1 = (value1 - 1) / (uint)((int)input[1] << 1) + 1 & 0xfff;\\n        if (value1 < 4) {\\n          value1 = 4;\\n        }\\n      }\\n      **input = (uint)input[8] | (uint)input[7];\\n      (*input)[2] = (uint)input[3] | (uint)input[4];\\n      (*input)[3] = (uint)input[6] | (uint)input[5];\\n      **input = **input | 1;\\n      input[0x10] = (uint *)0x0;\\n      *(undefined *)((int)input + 0x3d) = 0x20;\\n      input[0xc] = (uint *)0x0;\\n      *(undefined *)((int)input + 0x3e) = 0;\\n      result = 0;\\n    }\\n    else {\\n      result = 1;\\n    }\\n  }\\n  return result;\\n}",
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08005348"
            ],
            "imported": true,
            "current_name": "calculate_result_08001ab0"
        },
        "FUN_08003540": {
            "renaming": {
                "FUN_08003540": "get_shifted_value_08003540",
                "uVar1": "value",
                "get_value_from_pointer_08003504": "get_value_from_pointer",
                "DAT_08003560": "data_array",
                "PTR_DAT_08003564": "shift_array"
            },
            "code": "uint get_shifted_value_08003540(void)\n{\n  uint value = get_value_from_pointer();\n  uint shift_amount = *(uint *)(DAT_08003560 + 4) >> 0xb & 7;\n  return value >> PTR_DAT_08003564[shift_amount];\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003540",
            "calling": [
                "FUN_080046ec"
            ],
            "imported": true,
            "current_name": "get_shifted_value_08003540"
        },
        "FUN_08009244": {
            "renaming": {
                "iVar1": "allocated_memory",
                "FUN_08009244": "allocate_and_initialize_memory_08009244",
                "param_1": "size",
                "param_2": "value"
            },
            "code": "void allocate_and_initialize_memory_08009244(int size, int value){\n  int allocated_memory = allocate_and_initialize_memory_08009244_080090c0(size,1);\n  *(int *)(allocated_memory + 0x10) = 1;\n  *(int *)(allocated_memory + 0x14) = value;\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009244",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "allocate_and_initialize_memory_08009244"
        },
        "FUN_08003c5c": {
            "renaming": {
                "FUN_08003c5c": "do_nothing_08003c5c"
            },
            "code": "\nvoid do_nothing_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c5c",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": true,
            "current_name": "do_nothing_08003c5c"
        },
        "FUN_08004e6c": {
            "renaming": {
                "FUN_08004e6c": "trigger_software_interrupt_08004e6c",
                "0x3f": "SYSTEM_CALL_NUMBER",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ trigger_software_interrupt_08004e6c(DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_SDAT_PDAT_TDAT_RDAT__DAT_YDAT_PDAT_TDAT_RDAT__DAT_SDAT_PDAT_TDAT_RDAT__DAT_TDAT_PDAT_TDAT_RDAT__DAT_EDAT_PDAT_TDAT_RDAT__DAT_MDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_CDAT_PDAT_TDAT_RDAT__DAT_ADAT_PDAT_TDAT_RDAT__DAT_LDAT_PDAT_TDAT_RDAT__DAT_LDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_NDAT_PDAT_TDAT_RDAT__DAT_UDAT_PDAT_TDAT_RDAT__DAT_MDAT_PDAT_TDAT_RDAT__DAT_BDAT_PDAT_TDAT_RDAT__DAT_EDAT_PDAT_TDAT_RDAT__DAT_RDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e6c",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": true,
            "current_name": "trigger_software_interrupt_08004e6c"
        },
        "FUN_08001762": {
            "renaming": {
                "uVar1": "is_less_than_16_millions",
                "FUN_08001762": "check_parameter_range_08001762",
                "param_1": "parameter",
                "is_param_less_than_16_millions_080016d0": "is_param_less_than_16_millions"
            },
            "code": "undefined4 check_parameter_range_08001762(undefined4 parameter)\n{\n  undefined4 is_less_than_16_millions = is_param_less_than_16_millions_080016d0(parameter);\n  return is_less_than_16_millions;\n}",
            "called": [
                "FUN_080016d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001762",
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "imported": true,
            "current_name": "check_parameter_range_08001762"
        },
        "FUN_08000158": {
            "renaming": {
                "FUN_08000158": "FUNC_08000158"
            },
            "code": "\nulonglong FUNC_08000158(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000268;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000158",
            "calling": [
                "FUN_080059f0",
                "FUN_08005838",
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "FUNC_08000158"
        },
        "FUN_08009768": {
            "renaming": {
                "puVar2": "src_ptr",
                "puVar3": "dest_ptr",
                "param_1": "destination",
                "FUN_08009768": "copy_string_08009768",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "current_char",
                "uVar4": "current_word"
            },
            "code": "void copy_string_08009768(uint *destination, uint *source, uint length) {\n  char current_char;\n  uint *dest_ptr;\n  uint *src_ptr;\n  uint current_word;\n\n  if (((uint)destination | (uint)source) & 3) {\n    return;\n  }\n\n  dest_ptr = destination;\n  src_ptr = source;\n\n  while (length > 3) {\n    current_word = *src_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) {\n      break;\n    }\n    length -= 4;\n    *dest_ptr = current_word;\n    dest_ptr++;\n    src_ptr++;\n  }\n\n  while (length > 0) {\n    current_char = *(char *)src_ptr;\n    *(char *)dest_ptr = current_char;\n    dest_ptr = (uint *)((int)dest_ptr + 1);\n    src_ptr = (uint *)((int)src_ptr + 1);\n    length--;\n    if (current_char == '\\0') {\n      break;\n    }\n  }\n\n  while (length > 0) {\n    *(char *)dest_ptr = '\\0';\n    dest_ptr = (uint *)((int)dest_ptr + 1);\n    length--;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009768",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "copy_string_08009768"
        },
        "FUN_08003ff8": {
            "renaming": {
                "local_c": "local_value",
                "value2": "value_2",
                "value1": "value_1",
                "param_1": "value_ptr",
                "FUN_08003ff8": "update_params_08003ff8",
                "ptr2": "pointer_2",
                "ptr3": "pointer_3",
                "ptr4": "pointer_4",
                "param_2": "params_ptr",
                "ptr1": "pointer_1"
            },
            "code": "void update_params_08003ff8(int param_1, int *param_2)\n{\n  int value1;\n  int value2;\n  uint local_c;\n  \n  uint *ptr1 = (uint *)(param_1 + 0x20);\n  uint *ptr2 = (uint *)(param_1 + 4);\n  uint *ptr3 = (uint *)(param_1 + 0x1c);\n  int *ptr4 = (int *)(param_1 + 0x40);\n  \n  *ptr1 = *ptr1 & 0xffffefff;\n  local_c = *ptr2;\n  value1 = *param_2;\n  value2 = param_2[2];\n  if (param_1 == DAT_0800409c) {\n    local_c = param_2[5] << 6 | local_c & 0xffffbfff;\n  }\n  *ptr2 = local_c;\n  *ptr3 = value1 << 8 | *ptr3 & 0xffff8cff;\n  *ptr4 = param_2[1];\n  *ptr1 = value2 << 0xc | *ptr1 & 0xffffdfff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff8",
            "calling": [
                "FUN_08003908"
            ],
            "imported": true,
            "current_name": "update_params_08003ff8"
        },
        "FUN_08004ea4": {
            "renaming": {
                "param_1": "data",
                "FUN_08004ea4": "processDataWithParam_08004ea4",
                "param_2": "param1",
                "param_3": "param3",
                "param_4": "param4",
                "PTR_DAT_08004ee4": "data",
                "*(undefined4 *)PTR_DAT_08004ee0": "param5"
            },
            "code": "void processDataWithParam_08004ea4(void* PTR_DAT_08004ee4, void* param1, void* param2, int flag, int param3, short param4, int* *(undefined4 *)PTR_DAT_08004ee0){\n  process_PTR_DAT_08004ee4_08001ccc(PTR_DAT_08004ee4, param1, param2, flag, param3, param4, **(undefined4 *)PTR_DAT_08004ee0);\n  return;\n}",
            "called": [
                "FUN_08001ccc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ea4",
            "calling": [],
            "imported": true,
            "current_name": "processDataWithParam_08004ea4"
        },
        "FUN_080040a0": {
            "renaming": {
                "uVar1": "old_flag_value",
                "param_1": "flag_data_address",
                "FUN_080040a0": "update_flags_and_data_080040a0",
                "param_2": "new_flag_value",
                "param_3": "new_data_value"
            },
            "code": "void update_flags_and_data_080040a0(int flag_data_address, uint new_flag_value, int new_data_value)\n{\n  uint old_flag_value = *(uint *)(flag_data_address + 0x20);\n  *(uint *)(flag_data_address + 0x20) = old_flag_value & 0xfffffffe;\n  *(uint *)(flag_data_address + 0x18) = (new_data_value << 4) | (old_flag_value & 0xffffff0f);\n  *(uint *)(flag_data_address + 0x20) = new_flag_value | (old_flag_value & 0xfffffff5);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040a0",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": true,
            "current_name": "update_flags_and_data_080040a0"
        },
        "FUN_08009a18": {
            "renaming": {
                "iVar3": "num_words",
                "puVar2": "src_word_ptr",
                "puVar4": "dst_byte_ptr",
                "param_1": "destination",
                "puVar5": "src_byte_ptr",
                "FUN_08009a18": "copy_memory_08009a18",
                "param_2": "source",
                "param_3": "num_bytes",
                "puVar1": "dst_word_ptr",
                "uVar7": "num_bytes_left",
                "uVar6": "num_remaining_bytes"
            },
            "code": "void copy_memory_08009a18(uint8_t *destination, const uint8_t *source, size_t num_bytes) {\n  if ((source < destination) && ((source + num_bytes) > destination)) {\n    uint8_t *dst_ptr = destination + num_bytes - 1;\n    const uint8_t *src_ptr = source + num_bytes - 1;\n    while (num_bytes--) {\n      *dst_ptr-- = *src_ptr--;\n    }\n  }\n  else {\n    size_t num_words = num_bytes / 4;\n    size_t num_remaining_bytes = num_bytes % 4;\n    uint32_t *dst_word_ptr = (uint32_t *)destination;\n    const uint32_t *src_word_ptr = (uint32_t *)source;\n    while (num_words--) {\n      *dst_word_ptr++ = *src_word_ptr++;\n    }\n    uint8_t *dst_byte_ptr = (uint8_t *)dst_word_ptr;\n    const uint8_t *src_byte_ptr = (uint8_t *)src_word_ptr;\n    while (num_remaining_bytes--) {\n      *dst_byte_ptr++ = *src_byte_ptr++;\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a18",
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "imported": true,
            "current_name": "copy_memory_08009a18"
        },
        "FUN_0800119c": {
            "renaming": {
                "iVar2": "temp1",
                "uVar1": "result1",
                "param_1": "input1",
                "FUN_0800119c": "decode_float_0800119c",
                "param_2": "input2",
                "uVar3": "temp2"
            },
            "code": "uint decode_float_0800119c(uint input1, uint input2)\n{\n  uint result1;\n  int temp1;\n  uint temp2;\n  \n  temp1 = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < temp1) {\n      return 0;\n    }\n    result1 = temp1 >> 0x15;\n    temp2 = -result1 - 0x3e1;\n    if (result1 < 0xfffffc20 && temp2 != 0) {\n      result1 = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (temp2 & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        result1 = -result1;\n      }\n      return result1;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800119c",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "decode_float_0800119c"
        },
        "FUN_08005728": {
            "renaming": {
                "local_c": "result",
                "auStack_18": "maximum_value",
                "param_1": "new_value",
                "FUN_08005728": "update_value_and_get_result_08005728",
                "PTR_DAT_0800577c": "pointer_to_default_value",
                "puVar1": "pointer_to_error_code",
                "local_14": "current_value",
                "PTR_DAT_08005778": "pointer_to_value"
            },
            "code": "int update_value_and_get_result_08005728(int new_value) {\n  int *PTR_DAT_08005778 = (int *)PTR_DAT_08005778;\n  undefined4 *PTR_DAT_0800577c = (undefined4 *)PTR_DAT_0800577c;\n  int current_value = *PTR_DAT_08005778;\n  int updated_value = new_value + current_value;\n  if (updated_value > (int) auStack_18) {\n    undefined4 *pointer_to_error_code = (undefined4 *)get_value_from_pointer_08005d14();\n    *pointer_to_error_code = 0xc;\n    return -1;\n  }\n  *PTR_DAT_08005778 = updated_value;\n  return *PTR_DAT_0800577c;\n}",
            "called": [
                "FUN_08005d14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08009744"
            ],
            "imported": true,
            "current_name": "update_value_and_get_result_08005728"
        },
        "FUN_080090b4": {
            "renaming": {
                "PTR_DAT_080090bc": "PTR_DATA",
                "FUN_080090b4": "do_nothing_with_pointer_080090b4"
            },
            "code": "void do_nothing_with_pointer_080090b4(void)\n{\n  do_nothing_with_pointer_080090b4(PTR_DAT_080090bc);\n  return;\n}",
            "called": [
                "FUN_08008af4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090b4",
            "calling": [
                "FUN_08008af8",
                "FUN_0800884c",
                "FUN_08009adc",
                "FUN_080088ec"
            ],
            "imported": true,
            "current_name": "do_nothing_with_pointer_080090b4"
        },
        "FUN_0800422e": {
            "renaming": {
                "uVar1": "result",
                "param_1": "value_ptr",
                "param_2": "flag_ptr",
                "FUN_0800422e": "set_value_if_flag_is_true_0800422e"
            },
            "code": "int set_value_if_flag_is_true_0800422e(int *value_ptr, uint *flag_ptr) {\n  int result = 0;\n  if (*(char *)(value_ptr + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(value_ptr + 0xf) = 1;\n    *(uint *)(*value_ptr + 0x44) =\n         flag_ptr[6] |\n         (flag_ptr[5] |\n         (flag_ptr[4] |\n         (flag_ptr[3] |\n         (flag_ptr[2] |\n         (flag_ptr[1] |\n         (*flag_ptr & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(value_ptr + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800422e",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": true,
            "current_name": "set_value_if_flag_is_true_0800422e"
        },
        "FUN_08008af4": {
            "renaming": {
                "FUN_08008af4": "do_nothing_08008af4"
            },
            "code": "\nvoid do_nothing_08008af4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af4",
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "imported": true,
            "current_name": "do_nothing_08008af4"
        },
        "FUN_08003e38": {
            "renaming": {
                "value5": "value5",
                "iVar1": "index",
                "mask5": "0xfffff3ff",
                "value2": "value2",
                "mask4": "0xffffff7f",
                "value1": "value1",
                "value4": "value4",
                "value3": "value3",
                "mask1": "0xffffffeF",
                "mask3": "0xffffffdf",
                "param_1": "data_ptr",
                "mask2": "0xffffffbf",
                "param_2": "data_array",
                "local_10": "index",
                "uVar2": "value2",
                "FUN_08003e38": "update_data_08003e38",
                "DAT_08003f14": "data_ptr2"
            },
            "code": "void update_data_08003e38(int data_ptr, int *data_array)\n{\n  int index = 0;\n  uint mask1 = 0xffffffeF;\n  uint mask2 = 0xffffffeF;\n  uint mask3 = 0xffffffdf;\n  uint mask4 = 0xffffff7f;\n  uint mask5 = 0xfffff3ff;\n  uint value1 = 0;\n  uint value2 = 0;\n  uint value3 = 0;\n  uint value4 = 0;\n  uint value5 = 0;\n\n  value1 = *(uint *)(data_ptr + 0x20) & mask1;\n  index = *(uint *)(data_ptr + 4);\n  value2 = data_array[2] << 4 | *(uint *)(data_ptr + 0x20) & mask3;\n  \n  if (data_ptr == DAT_08003f14) {\n    value2 = (data_array[3] << 4 | value2 & mask4) & mask2;\n    index = data_array[6] << 2 | data_array[5] << 2 | index & mask5;\n  }\n  \n  *(uint *)(data_ptr + 4) = index;\n  *(uint *)(data_ptr + 0x18) = data_array[0] << 8 | *(uint *)(data_ptr + 0x18) & 0xffff8cff;\n  *(int *)(data_ptr + 0x38) = data_array[1];\n  *(uint *)(data_ptr + 0x20) = value2 | value1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e38",
            "calling": [
                "FUN_08003908"
            ],
            "imported": true,
            "current_name": "update_data_08003e38"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "do_nothing_08008af0"
            },
            "code": "\nvoid do_nothing_08008af0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "FUN_080098c0",
                "FUN_080090a8"
            ],
            "imported": true,
            "current_name": "do_nothing_08008af0"
        },
        "FUN_0800151c": {
            "renaming": {
                "iVar1": "is_valid_range",
                "PTR_DAT_08001570": "range_ptr_1",
                "param_1": "parameter",
                "PTR_DAT_08001578": "output_ptr",
                "PTR_DAT_08001574": "range_ptr_2",
                "set_byte_at_index_0800172a": "set_byte_at_index",
                "uVar2": "return_value",
                "FUN_0800151c": "check_parameter_range_0800151c",
                "check_parameter_range_08001762": "check_parameter_range_func"
            },
            "code": "int check_parameter_range_0800151c(int parameter){\n  int range = *(uint *)PTR_DAT_08001570 / (1000 / (ulonglong)(byte)*PTR_DAT_08001574);\n  int is_valid_range = check_parameter_range_0800151c_08001762(range);\n  if (is_valid_range == 0) {\n    if (parameter < 0x10) {\n      set_byte_at_index(0xffffffff, parameter, 0);\n      *(uint *)PTR_DAT_08001578 = parameter;\n      return 0;\n    }\n    else {\n      return 1;\n    }\n  }\n  else {\n    return 1;\n  }\n}",
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800151c",
            "calling": [
                "FUN_08003260",
                "FUN_080014f0"
            ],
            "imported": true,
            "current_name": "check_parameter_range_0800151c"
        },
        "FUN_080006a4": {
            "renaming": {
                "FUN_080006a4": "calculate_080006a4",
                "bVar4": "is_zero1",
                "uVar1": "temp1",
                "param_1": "input1",
                "unaff_r4": "temp2",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "temp4",
                "uVar2": "temp3",
                "is_zero4": "is_equal",
                "is_zero3": "is_zero4",
                "in_r12": "mask",
                "is_zero2": "is_zero3",
                "is_zero1": "is_zero2"
            },
            "code": "ulonglong calculate_080006a4(uint input1, uint input2, uint input3, uint input4)\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint mask = 0x80000000;\n  bool is_zero1;\n  bool is_zero2;\n  bool is_zero3;\n  bool is_zero4;\n  bool is_equal;\n  \n  temp1 = input1 << 1;\n  temp2 = input2 << 1;\n  temp3 = input3 << 1;\n  temp4 = input4 << 1;\n  \n  is_zero1 = (temp1 | temp2) == 0;\n  is_zero2 = (temp3 | temp4) == 0;\n  is_zero3 = input1 == 0 && input2 == 0;\n  is_zero4 = input3 == 0 && input4 == 0;\n  is_equal = input4 >> 0x14 == 0 && input2 >> 0x14 == 0;\n  \n  if (input3 != input4 && !is_equal) {\n    if (is_zero1 || is_zero2) {\n      return (ulonglong)((input2 ^ input4) & mask) << 0x20;\n    }\n    if (input3 == 0) {\n      while ((temp2 & 0x100000) == 0) {\n        temp1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(input1 >> 0x1f);\n        input1 = temp1;\n      }\n      input2 |= input4 & mask;\n      if (input4 >> 0x14 != 0) {\n        return ((ulonglong)input2 << 0x20) | input1;\n      }\n    }\n    while ((temp4 & 0x100000) == 0) {\n      temp3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(input3 >> 0x1f);\n      input3 = temp3;\n    }\n    return ((ulonglong)input2 << 0x20) | input1;\n  }\n  if (is_zero1) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero1) {\n    is_zero1 = is_zero2;\n  }\n  if (!is_zero2) {\n    is_zero2 = is_zero1;\n  }\n  if (is_zero3 && input2 << 0xc == 0) {\n    return (ulonglong)((input2 ^ input4) & mask | 0x7ff00000) << 0x20;\n  }\n  if (is_zero4 && input1 << 0xc == 0) {\n    return (ulonglong)((input2 ^ input4) & mask | 0x7ff00000) << 0x20;\n  }\n  return ((ulonglong)input2 << 0x20) | input1 | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006a4",
            "calling": [
                "FUN_080004c8"
            ],
            "imported": true,
            "current_name": "calculate_080006a4"
        },
        "FUN_08000f68": {
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "bVar1": "is_negative",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar3": "doubled_input_2",
                "uVar2": "doubled_input_1",
                "uVar4": "combined_inputs",
                "bVar5": "is_combined_zero"
            },
            "code": "uint calculate_result_08000f68(uint input_1, uint input_2)\n{\n  bool is_negative;\n  uint doubled_input_1 = input_1 * 2;\n  uint doubled_input_2 = input_2 * 2;\n  \n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) && ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) || (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  \n  uint combined_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n  bool is_combined_zero = combined_inputs == 0;\n  if (!is_combined_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_combined_zero = combined_inputs == 0;\n  }\n  \n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_combined_zero = input_1 == 0;\n  }\n  \n  if (is_negative && doubled_input_2 <= doubled_input_1 && !is_combined_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  \n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  \n  if (!is_combined_zero) {\n    input_1 = input_1 | 1;\n  }\n  \n  return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f68",
            "calling": [
                "FUN_08000fd0"
            ],
            "imported": true,
            "current_name": "calculate_result_08000f68"
        },
        "FUN_08009258": {
            "renaming": {
                "FUN_08009258": "calculate_hash_08009258",
                "uVar11": "temp_var_1",
                "puVar17": "hash_ptr_end",
                "puVar18": "hash_ptr_start",
                "iVar3": "hash_ptr_size",
                "puVar2": "temp_ptr_2",
                "iVar12": "size_1",
                "param_1": "hash",
                "puVar5": "data_ptr",
                "iVar9": "max_size",
                "iVar10": "min_size",
                "puVar15": "temp_ptr_4",
                "puVar7": "temp_ptr_3",
                "puVar16": "temp_ptr_5",
                "puVar14": "hash_ptr",
                "param_2": "hash_size",
                "param_3": "data",
                "iVar13": "data_ptr_start",
                "puVar1": "temp_ptr_1",
                "uVar4": "result_low",
                "uVar6": "word",
                "uVar8": "result_high"
            },
            "code": "void calculate_hash_08009258(uint8_t* hash, int hash_size, const uint8_t* data, int data_size) {\n  uint32_t* data_ptr = (uint32_t*)(data + 0x14);\n  uint32_t* hash_ptr = (uint32_t*)calloc((hash_size + 4) / 4 + 5, 4);\n  int hash_ptr_size = hash_size / 4 + 5;\n  for (int i = 0; i < hash_ptr_size; i++) {\n    hash_ptr[i] = 0;\n  }\n  int data_ptr_size = (data_size - 0x14) / 4 + 1;\n  for (int i = 0; i < data_ptr_size; i++) {\n    uint32_t word = data_ptr[i];\n    if (word != 0) {\n      uint32_t carry = 0;\n      for (int j = 0; j < hash_ptr_size; j++) {\n        uint64_t result = (uint64_t)hash_ptr[j] + (uint64_t)word * (uint64_t)*(uint16_t*)(hash + j * 2) + (uint64_t)carry;\n        hash_ptr[j] = result & 0xffff;\n        carry = result >> 16;\n      }\n      hash_ptr[hash_ptr_size] += carry;\n    }\n  }\n  while (hash_ptr_size > 0 && hash_ptr[hash_ptr_size - 1] == 0) {\n    hash_ptr_size--;\n  }\n  memcpy(hash, hash_ptr, hash_ptr_size * 4);\n  free(hash_ptr);\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009258",
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "calculate_hash_08009258"
        },
        "FUN_08000c08": {
            "renaming": {
                "FUN_08000c08": "calculate_hash_08000c08",
                "iVar1": "leading_zeroes",
                "iVar3": "multiplier",
                "shifted_output": "shifted_output",
                "param_1": "input",
                "shifted_zeroes": "shifted_zeroes",
                "result": "result",
                "uVar2": "shift_distance",
                "uVar4": "carry",
                "shifted_input": "shifted_input",
                "mask": "mask"
            },
            "code": "uint calculate_hash_08000c08(uint input)\n{\n  int leading_zeroes = count_leading_zeroes(input);\n  int shift_distance = leading_zeroes - 8;\n  int multiplier = shift_distance * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint shifted_input = input << (shift_distance & 0xff);\n    uint shifted_zeroes = 0U >> (0x20 - shift_distance & 0xff);\n    uint carry = (uint)(0x7fffffff < shifted_zeroes);\n    uint result = multiplier + shifted_input + shifted_zeroes + carry;\n    if ((shifted_zeroes & 0x80000000) != 0) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n  uint shifted_output = (input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f);\n  uint mask = ~(shifted_input >> 0x1f);\n  if ((shifted_input & 0x7fffffff) == 0) {\n    shifted_output = shifted_output & mask;\n  }\n  return multiplier + shifted_output;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c08",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "calculate_hash_08000c08"
        },
        "FUN_08003c6e": {
            "renaming": {
                "FUN_08003c6e": "do_nothing_08003c6e"
            },
            "code": "\nvoid do_nothing_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c6e",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": true,
            "current_name": "do_nothing_08003c6e"
        },
        "FUN_080042de": {
            "renaming": {
                "FUN_080042de": "set_flag_080042de",
                "uVar1": "return_value",
                "param_1": "flag_ptr",
                "param_2": "value_ptr"
            },
            "code": "int set_flag_080042de(int *flag_ptr, uint *value_ptr) {\n  int return_value;\n  if (*(char *)(flag_ptr + 0xf) == '\\x01') {\n    return_value = 2;\n  }\n  else {\n    *(undefined *)(flag_ptr + 0xf) = 1;\n    *(undefined *)((int)flag_ptr + 0x3d) = 2;\n    *(uint *)(*flag_ptr + 4) &= 0xffffff8f;\n    *(uint *)(*flag_ptr + 4) |= *value_ptr;\n    *(uint *)(*flag_ptr + 8) &= 0xffffff7f;\n    *(uint *)(*flag_ptr + 8) |= value_ptr[1];\n    *(undefined *)((int)flag_ptr + 0x3d) = 1;\n    *(undefined *)(flag_ptr + 0xf) = 0;\n    return_value = 0;\n  }\n  return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042de",
            "calling": [
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": true,
            "current_name": "set_flag_080042de"
        },
        "FUN_08004366": {
            "renaming": {
                "FUN_08004366": "do_nothing_08004366"
            },
            "code": "\nvoid do_nothing_08004366(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004366",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": true,
            "current_name": "do_nothing_08004366"
        },
        "FUN_08009530": {
            "renaming": {
                "iVar1": "allocation_address",
                "FUN_08009530": "compare_and_allocate_memory_08009530",
                "uVar14": "source_data_size",
                "iVar5": "source_size",
                "puVar2": "target_data",
                "puVar11": "end_of_data",
                "iVar12": "carry",
                "param_1": "memory_allocation_flag",
                "puVar10": "target_data",
                "puVar6": "allocation_data",
                "puVar7": "source_data",
                "puVar8": "end_of_data",
                "puVar13": "end_of_data",
                "puVar9": "source_data",
                "param_2": "source_ptr",
                "param_3": "target_ptr",
                "param_4": "parameter_4",
                "uVar3": "source_data_size",
                "uVar4": "sum"
            },
            "code": "void compare_and_allocate_memory_08009530(uint32_t param_1, uint32_t *source_ptr, uint32_t *target_ptr, uint32_t param_4)\n{\n  int source_size = source_ptr[4] - (int)target_ptr[4];\n  uint32_t *source_data = source_ptr + 5;\n  uint32_t *target_data = target_ptr + 5;\n  uint32_t *source_end = source_data + source_size;\n  uint32_t *target_end = target_data + target_ptr[4];\n  int allocation_flag = 1;\n  if (source_size == 0) {\n    while (source_end > source_data) {\n      source_end--;\n      target_end--;\n      if (*source_end != *target_end) {\n        allocation_flag = allocate_and_initialize_memory(param_1, 0, source_end, target_end, param_4);\n        *(uint32_t *)(allocation_flag + 0x10) = 1;\n        *(uint32_t *)(allocation_flag + 0x14) = 0;\n        return;\n      }\n    }\n  }\n  else if (source_size < 0) {\n    source_size = 0;\n    source_data = target_ptr;\n  }\n  else {\n    target_data = source_ptr;\n    source_end = target_ptr + 5;\n    target_end = source_data + source_ptr[4];\n  }\n  int allocation_address = allocate_and_initialize_memory(param_1, target_ptr[1], source_data, target_data, param_4);\n  int carry = 0;\n  uint32_t source_data_word;\n  uint32_t target_data_word;\n  uint32_t *allocation_data = (uint32_t *)(allocation_address + 0x14);\n  while (target_data < target_end) {\n    source_data_word = *source_data;\n    target_data_word = *target_data;\n    uint32_t sum = (source_data_word & 0xffff) + carry - (target_data_word & 0xffff);\n    carry = ((source_data_word >> 0x10) - (target_data_word >> 0x10)) + ((int)sum >> 0x10);\n    sum = (sum & 0xffff) | (carry << 0x10);\n    *allocation_data = sum;\n    carry >>= 0x10;\n    source_data++;\n    target_data++;\n    allocation_data++;\n  }\n  while (target_data_word == 0) {\n    allocation_data--;\n    target_ptr[4]--;\n    target_data_word = *allocation_data;\n  }\n  *(uint32_t *)(allocation_address + 0x10) = target_ptr[4];\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009530",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "compare_and_allocate_memory_08009530"
        },
        "FUN_08008af8": {
            "renaming": {
                "FUN_08008af8": "FUNC_08008af8"
            },
            "code": "\nint * FUNC_08008af8(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint *puVar6;\n  int iVar7;\n  undefined *puVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined4 *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  uint uVar14;\n  uint uVar15;\n  int iVar16;\n  undefined4 *puVar17;\n  undefined4 *puVar18;\n  \n  uVar14 = param_2 + 0xb;\n  if (uVar14 < 0x17) {\n    if (0x10 < param_2) goto LAB_08008c7a;\n    doNothingWithPointer_080090a8();\n    uVar15 = 0x10;\n    iVar7 = 0x18;\n    uVar14 = 2;\nLAB_08008b18:\n    puVar8 = PTR_DAT_08008e4c + iVar7;\n    puVar12 = *(undefined **)(puVar8 + 4);\n    if ((puVar12 != puVar8 + -8) || (puVar12 = *(undefined **)(puVar8 + 0xc), puVar8 != puVar12)) {\n      iVar7 = *(int *)(puVar12 + 0xc);\n      puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n      uVar14 = *(uint *)(puVar8 + 4);\nLAB_08008b34:\n      iVar16 = *(int *)(puVar12 + 8);\n      *(int *)(iVar16 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar16;\n      *(uint *)(puVar8 + 4) = uVar14 | 1;\n      do_nothing_with_pointer_080090b4(param_1);\n      return (int *)(puVar12 + 8);\n    }\n    uVar14 = uVar14 + 2;\n  }\n  else {\n    uVar15 = uVar14 & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_08008c7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n    doNothingWithPointer_080090a8();\n    if (uVar15 < 0x1f8) {\n      uVar14 = uVar14 >> 3;\n      iVar7 = uVar15 + 8;\n      goto LAB_08008b18;\n    }\n    uVar4 = uVar14 >> 9;\n    if (uVar4 == 0) {\n      iVar7 = 0x200;\n      uVar9 = 0x40;\n      uVar4 = 0x3f;\n    }\n    else if (uVar4 < 5) {\n      uVar9 = (uVar14 >> 6) + 0x39;\n      uVar4 = (uVar14 >> 6) + 0x38;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x15) {\n      uVar9 = uVar4 + 0x5c;\n      uVar4 = uVar4 + 0x5b;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x55) {\n      uVar9 = (uVar14 >> 0xc) + 0x6f;\n      uVar4 = (uVar14 >> 0xc) + 0x6e;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x155) {\n      uVar9 = (uVar14 >> 0xf) + 0x78;\n      uVar4 = (uVar14 >> 0xf) + 0x77;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x555) {\n      uVar9 = (uVar14 >> 0x12) + 0x7d;\n      uVar4 = (uVar14 >> 0x12) + 0x7c;\n      iVar7 = uVar9 * 8;\n    }\n    else {\n      iVar7 = 0x3f8;\n      uVar9 = 0x7f;\n      uVar4 = 0x7e;\n    }\n    for (puVar12 = *(undefined **)(PTR_DAT_08008e4c + iVar7 + 4); uVar14 = uVar9,\n        PTR_DAT_08008e4c + iVar7 + -8 != puVar12; puVar12 = *(undefined **)(puVar12 + 0xc)) {\n      iVar16 = (*(uint *)(puVar12 + 4) & 0xfffffffc) - uVar15;\n      uVar14 = uVar4;\n      if (0xf < iVar16) break;\n      if (-1 < iVar16) {\n        puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n        uVar14 = *(uint *)(puVar8 + 4);\n        iVar7 = *(int *)(puVar12 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  puVar8 = PTR_PTR_DAT_08008e60;\n  puVar12 = PTR_DAT_08008e4c;\n  puVar13 = *(undefined **)(PTR_DAT_08008e4c + 0x10);\n  if (puVar13 == PTR_PTR_DAT_08008e60) {\n    uVar4 = *(uint *)(PTR_DAT_08008e4c + 4);\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) goto LAB_08008c06;\n  }\n  else {\n    uVar9 = *(uint *)(puVar13 + 4);\n    uVar10 = uVar9 & 0xfffffffc;\n    uVar4 = uVar10 - uVar15;\n    if (0xf < (int)uVar4) {\n      puVar3 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar12 + 0x10) = puVar3;\n      *(undefined **)(puVar12 + 0x14) = puVar3;\n      *(undefined **)(puVar3 + 8) = puVar8;\n      *(undefined **)(puVar3 + 0xc) = puVar8;\n      *(uint *)(puVar3 + 4) = uVar4 | 1;\n      *(uint *)(puVar13 + uVar10) = uVar4;\n      do_nothing_with_pointer_080090b4(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR_DAT_08008e4c + 0x10) = PTR_PTR_DAT_08008e60;\n    *(undefined **)(puVar12 + 0x14) = puVar8;\n    if (-1 < (int)uVar4) {\n      *(uint *)(puVar13 + uVar10 + 4) = *(uint *)(puVar13 + uVar10 + 4) | 1;\n      do_nothing_with_pointer_080090b4(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar10 < 0x200) {\n      iVar7 = (uVar9 >> 3) + 1;\n      iVar16 = *(int *)(puVar12 + iVar7 * 8);\n      uVar4 = 1 << ((int)(uVar9 >> 3) >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n      *(int *)(puVar13 + 8) = iVar16;\n      *(undefined **)(puVar13 + 0xc) = puVar12 + iVar7 * 8 + -8;\n      *(uint *)(puVar12 + 4) = uVar4;\n      *(undefined **)(puVar12 + iVar7 * 8) = puVar13;\n      *(undefined **)(iVar16 + 0xc) = puVar13;\n    }\n    else {\n      uVar4 = uVar9 >> 9;\n      if (uVar4 < 5) {\n        iVar7 = ((uVar9 >> 6) + 0x39) * 8;\n        iVar16 = (uVar9 >> 6) + 0x38;\n      }\n      else if (uVar4 < 0x15) {\n        iVar7 = (uVar4 + 0x5c) * 8;\n        iVar16 = uVar4 + 0x5b;\n      }\n      else if (uVar4 < 0x55) {\n        iVar7 = ((uVar9 >> 0xc) + 0x6f) * 8;\n        iVar16 = (uVar9 >> 0xc) + 0x6e;\n      }\n      else if (uVar4 < 0x155) {\n        iVar7 = ((uVar9 >> 0xf) + 0x78) * 8;\n        iVar16 = (uVar9 >> 0xf) + 0x77;\n      }\n      else if (uVar4 < 0x555) {\n        iVar7 = ((uVar9 >> 0x12) + 0x7d) * 8;\n        iVar16 = (uVar9 >> 0x12) + 0x7c;\n      }\n      else {\n        iVar7 = 0x3f8;\n        iVar16 = 0x7e;\n      }\n      puVar3 = *(undefined **)(puVar12 + iVar7);\n      puVar1 = puVar12 + iVar7 + -8;\n      if (puVar1 == puVar3) {\n        uVar4 = 1 << (iVar16 >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n        *(uint *)(puVar12 + 4) = uVar4;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar3 + 4) & 0xfffffffc) <= uVar10) break;\n          puVar3 = *(undefined **)(puVar3 + 8);\n        } while (puVar1 != puVar3);\n        puVar1 = *(undefined **)(puVar3 + 0xc);\n        uVar4 = *(uint *)(puVar12 + 4);\n      }\n      *(undefined **)(puVar13 + 8) = puVar3;\n      *(undefined **)(puVar13 + 0xc) = puVar1;\n      *(undefined **)(puVar1 + 8) = puVar13;\n      *(undefined **)(puVar3 + 0xc) = puVar13;\n    }\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) {\nLAB_08008c06:\n      if ((uVar9 & uVar4) == 0) {\n        uVar14 = uVar14 & 0xfffffffc;\n        do {\n          uVar9 = uVar9 << 1;\n          uVar14 = uVar14 + 4;\n        } while ((uVar9 & uVar4) == 0);\n      }\n      do {\n        puVar17 = (undefined4 *)(puVar12 + uVar14 * 8);\n        uVar4 = uVar14;\n        puVar18 = puVar17;\n        do {\n          for (puVar11 = (undefined4 *)puVar18[3]; puVar18 != puVar11;\n              puVar11 = (undefined4 *)puVar11[3]) {\n            uVar10 = puVar11[1] & 0xfffffffc;\n            uVar5 = uVar10 - uVar15;\n            if (0xf < (int)uVar5) {\n              iVar16 = puVar11[2];\n              iVar7 = puVar11[3];\n              puVar13 = (undefined *)(uVar15 + (int)puVar11);\n              puVar11[1] = uVar15 | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              *(undefined **)(puVar12 + 0x10) = puVar13;\n              *(undefined **)(puVar12 + 0x14) = puVar13;\n              *(undefined **)(puVar13 + 8) = puVar8;\n              *(undefined **)(puVar13 + 0xc) = puVar8;\n              *(uint *)(puVar13 + 4) = uVar5 | 1;\n              *(uint *)((int)puVar11 + uVar10) = uVar5;\n              do_nothing_with_pointer_080090b4(param_1);\n              return puVar11 + 2;\n            }\n            if (-1 < (int)uVar5) {\n              iVar7 = puVar11[3];\n              iVar16 = puVar11[2];\n              *(uint *)((int)puVar11 + uVar10 + 4) = *(uint *)((int)puVar11 + uVar10 + 4) | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              do_nothing_with_pointer_080090b4(param_1);\n              return puVar11 + 2;\n            }\n          }\n          uVar4 = uVar4 + 1;\n          puVar18 = puVar18 + 2;\n        } while ((uVar4 & 3) != 0);\n        do {\n          uVar10 = uVar14 & 3;\n          puVar18 = puVar17 + -2;\n          uVar14 = uVar14 - 1;\n          if (uVar10 == 0) {\n            uVar10 = *(uint *)(puVar12 + 4) & ~uVar9;\n            *(uint *)(puVar12 + 4) = uVar10;\n            goto LAB_08008f24;\n          }\n          puVar17 = (undefined4 *)*puVar17;\n        } while (puVar17 == puVar18);\n        uVar10 = *(uint *)(puVar12 + 4);\nLAB_08008f24:\n        uVar9 = uVar9 * 2;\n        if ((uVar10 <= uVar9 && uVar9 - uVar10 != 0) || (uVar14 = uVar4, uVar9 == 0)) break;\n        for (; (uVar9 & uVar10) == 0; uVar9 = uVar9 << 1) {\n          uVar14 = uVar14 + 4;\n        }\n      } while( true );\n    }\n  }\n  puVar8 = PTR_DAT_08008e64;\n  puVar13 = *(undefined **)(puVar12 + 8);\n  uVar14 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar14) && (uVar4 = uVar14 - uVar15, 0xf < (int)uVar4)) goto LAB_08008dac;\n  if (*(int *)PTR_DAT_08008e64 == -1) {\n    uVar4 = uVar15 + *(int *)PTR_DAT_08008e50 + 0x10;\n  }\n  else {\n    uVar4 = uVar15 + *(int *)PTR_DAT_08008e50 + 0x100f & 0xfffff000;\n  }\n  puVar1 = (undefined *)update_value_08009744(param_1,uVar4);\n  puVar6 = (uint *)PTR_DAT_08009018;\n  puVar3 = PTR_DAT_08008e54;\n  if (puVar1 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar14 = *(uint *)(puVar13 + 4);\n  }\n  else {\n    puVar2 = puVar13 + uVar14;\n    if (puVar2 < puVar1 || puVar2 == puVar1) {\n      uVar9 = *(int *)PTR_DAT_08008e54 + uVar4;\n      *(uint *)PTR_DAT_08008e54 = uVar9;\n      puVar6 = (uint *)puVar3;\n      if ((puVar2 != puVar1) || (((uint)puVar2 & 0xfff) != 0)) goto LAB_08008d02;\n      *(uint *)(*(int *)(puVar12 + 8) + 4) = uVar14 + uVar4 | 1;\n    }\n    else {\n      if (puVar13 != puVar12) goto LAB_08008ed8;\n      uVar9 = *(int *)PTR_DAT_08009018 + uVar4;\n      *(uint *)PTR_DAT_08009018 = uVar9;\nLAB_08008d02:\n      if (*(int *)puVar8 == -1) {\n        *(undefined **)puVar8 = puVar1;\n      }\n      else {\n        *puVar6 = (uint)(puVar1 + (uVar9 - (int)puVar2));\n      }\n      uVar9 = (uint)puVar1 & 7;\n      if (uVar9 == 0) {\n        iVar7 = 0x1000;\n      }\n      else {\n        puVar1 = puVar1 + (8 - uVar9);\n        iVar7 = 0x1008 - uVar9;\n      }\n      iVar7 = iVar7 - ((uint)(puVar1 + uVar4) & 0xfff);\n      iVar16 = update_value_08009744(param_1,iVar7);\n      if (iVar16 == -1) {\n        uVar4 = 1;\n        iVar7 = 0;\n      }\n      else {\n        uVar4 = (iVar16 - (int)puVar1) + iVar7 | 1;\n      }\n      uVar9 = *puVar6 + iVar7;\n      *(undefined **)(puVar12 + 8) = puVar1;\n      *puVar6 = uVar9;\n      *(uint *)(puVar1 + 4) = uVar4;\n      if (puVar13 != puVar12) {\n        if (uVar14 < 0x10) {\n          *(undefined4 *)(puVar1 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        uVar14 = uVar14 - 0xc & 0xfffffff8;\n        *(uint *)(puVar13 + 4) = *(uint *)(puVar13 + 4) & 1 | uVar14;\n        *(undefined4 *)(puVar13 + uVar14 + 4) = 5;\n        *(undefined4 *)(puVar13 + uVar14 + 8) = 5;\n        if (0xf < uVar14) {\n          FUNC_080088ec(param_1,puVar13 + 8);\n          uVar9 = *puVar6;\n        }\n      }\n    }\n    puVar8 = PTR_DAT_08008e5c;\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar4 = *(uint *)PTR_DAT_08008e5c;\n    if (*(uint *)PTR_DAT_08008e58 < uVar9) {\n      *(uint *)PTR_DAT_08008e58 = uVar9;\n    }\n    uVar14 = *(uint *)(puVar13 + 4);\n    if (uVar4 < uVar9) {\n      *(uint *)puVar8 = uVar9;\n    }\n  }\n  uVar4 = (uVar14 & 0xfffffffc) - uVar15;\n  if ((uVar15 <= (uVar14 & 0xfffffffc)) && (0xf < (int)uVar4)) {\nLAB_08008dac:\n    *(uint *)(puVar13 + 4) = uVar15 | 1;\n    *(undefined **)(puVar12 + 8) = puVar13 + uVar15;\n    *(uint *)(puVar13 + uVar15 + 4) = uVar4 | 1;\n    do_nothing_with_pointer_080090b4(param_1);\n    return (int *)(puVar13 + 8);\n  }\nLAB_08008eee:\n  do_nothing_with_pointer_080090b4(param_1);\n  return (int *)0x0;\n}\n\n",
            "called": [
                "FUN_080090b4",
                "FUN_080090a8",
                "FUN_08009744",
                "FUN_080088ec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008af8",
            "calling": [
                "FUN_08009980",
                "FUN_080097cc",
                "FUN_08005e9c",
                "FUN_08009adc"
            ],
            "imported": false,
            "current_name": "FUNC_08008af8"
        },
        "FUN_08002bb4": {
            "renaming": {
                "iVar1": "flag_check_result",
                "FUN_08002bb4": "check_and_update_flags_08002bb4",
                "param_1": "flag_array",
                "param_2": "max_value",
                "param_3": "offset"
            },
            "code": "int check_and_update_flags_08002bb4(int *flag_array, uint max_value, int offset) {\n  int flag_check_result;\n  while(true) {\n    if ((*(uint *)(*flag_array + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    flag_check_result = check_flag_08002d3c(flag_array);\n    if (flag_check_result != 0) {\n      break;\n    }\n    if ((max_value != 0xffffffff) && ((max_value == 0 || (flag_check_result = get_value_from_pointer_080015a0(), max_value < (uint)(flag_check_result - offset)))) {\n      flag_array[0x10] = flag_array[0x10] | 0x20;\n      flag_array[0xc] = 0;\n      *(undefined *)((int)flag_array + 0x3d) = 0x20;\n      *(undefined *)(flag_array + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bb4",
            "calling": [
                "FUN_08002640",
                "FUN_080027f4",
                "FUN_08001ccc"
            ],
            "imported": true,
            "current_name": "check_and_update_flags_08002bb4"
        },
        "FUN_08002d3c": {
            "renaming": {
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*flag_ptr + 0x14)",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)flag_ptr + 0x3d)",
                "bVar1": "flag_value",
                "FUN_08002d3c": "check_flag_08002d3c",
                "param_1": "flag_ptr",
                "param_1[0x10]": "flag_ptr[0x10]",
                "*param_1": "*flag_ptr",
                "param_1[0xc]": "flag_ptr[0xc]",
                "*(undefined *)(param_1 + 0xf)": "*(undefined *)(flag_ptr + 0xf)"
            },
            "code": "bool check_flag_08002d3c(int *flag_ptr) {\n  bool flag_value = (*(uint *)(*flag_ptr + 0x14) & 0x400) == 0x400;\n  if (flag_value) {\n    *(undefined4 *)(*flag_ptr + 0x14) = 0xfffffbff;\n    flag_ptr[0x10] = 4;\n    flag_ptr[0xc] = 0;\n    *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n    *(undefined *)(flag_ptr + 0xf) = 0;\n  }\n  return flag_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d3c",
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "imported": true,
            "current_name": "check_flag_08002d3c"
        },
        "FUN_08004bd8": {
            "renaming": {
                "DAT_08004d64": "constant3",
                "DAT_08004d40": "constant1",
                "FUNC_080004c8": "calculate",
                "calculate_float_080009fc": "calculate_float",
                "param_1": "input",
                "FUNC_08000aa4": "decode",
                "PTR_DAT_08004d70": "pointer2",
                "DAT_08004d4c": "constant5",
                "DAT_08004d6c": "constant11",
                "calculate_value_thunk_08005838": "calculate_value_thunk",
                "uVar3": "decoded3",
                "DAT_08004d58": "constant9",
                "uVar2": "decoded2",
                "DAT_08004d50": "constant7",
                "DAT_08004d54": "constant8",
                "uVar1": "decoded1",
                "FUN_08004bd8": "decode_and_calculate_08004bd8",
                "decode_08000418": "decode",
                "PTR_DAT_08004d60": "pointer1",
                "param_2": "output",
                "DAT_08004d5c": "constant10",
                "DAT_08004d68": "constant6",
                "DAT_08004d44": "constant2",
                "DAT_08004d48": "constant4"
            },
            "code": "void decode_and_calculate_08004bd8(int input, undefined4 *output) {\n  undefined4 decoded1 = decode(input + 0x10, input + 0x1c);\n  undefined4 decoded2 = decode(*PTR_DAT_08004d60);\n  undefined4 calculated1 = calculate(decoded2, calculate(decoded1, DAT_08004d40, DAT_08004d44));\n  undefined4 decoded3 = decode(input + 4);\n  undefined4 decoded4 = decode(input + 8);\n  undefined4 calculated2 = calculate_value_thunk(decoded3, decoded4, 0, DAT_08004d64);\n  undefined4 calculated3 = calculate(calculated2, 0, DAT_08004d68);\n  undefined4 decoded5 = decode(input + 0x24);\n  undefined4 calculated4 = calculate(decoded5, calculated3, 0, DAT_08004d6c);\n  if (*PTR_DAT_08004d70 == 0) {\n    undefined4 calculated5 = calculate(decoded_and_calculate(*PTR_DAT_08004d60), calculated1, DAT_08004d50, DAT_08004d54);\n    undefined4 calculated6 = calculate(decoded_and_calculate(calculated4), DAT_08004d58, DAT_08004d5c);\n    undefined4 calculated7 = calculate(calculated5, calculated6);\n    *PTR_DAT_08004d60 = calculate_float(calculated7);\n  }\n  else {\n    *PTR_DAT_08004d60 = calculate_float(calculated4);\n    *PTR_DAT_08004d70 = 0;\n  }\n  *output = *PTR_DAT_08004d60;\n  return;\n}",
            "called": [
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000aa4",
                "FUN_080009fc",
                "FUN_08000418",
                "thunk_FUN_08005838",
                "FUN_0800015c",
                "FUN_08000158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bd8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "decode_and_calculate_08004bd8"
        },
        "FUN_080090c0": {
            "renaming": {
                "iVar2": "memory_block_address",
                "FUN_080090c0": "allocate_and_initialize_memory_080090c0",
                "param_1": "memory_address",
                "param_2": "parameter_2",
                "puVar1": "allocated_memory"
            },
            "code": "undefined4* allocate_and_initialize_memory_080090c0(int memory_address, uint size_of_allocation, uint parameter_2){\n  undefined4 *allocated_memory;\n  int memory_block_address = *(int *)(memory_address + 0x4c);\n  if (memory_block_address == 0) {\n    memory_block_address = allocate_and_initialize_memory_080090c0_08009980(memory_address, 4, 0x21);\n    *(int *)(memory_address + 0x4c) = memory_block_address;\n    if (memory_block_address == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  allocated_memory = *(undefined4 **)(memory_block_address + parameter_2 * 4);\n  if (allocated_memory == (undefined4 *)0x0) {\n    uint allocation_size = 1 << (parameter_2 & 0xff);\n    allocated_memory = (undefined4 *)allocate_and_initialize_memory_080090c0_08009980(memory_address, 1, (allocation_size + 5) * 4);\n    if (allocated_memory == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    allocated_memory[1] = parameter_2;\n    allocated_memory[2] = allocation_size;\n  }\n  else {\n    *(undefined4 *)(memory_block_address + parameter_2 * 4) = *allocated_memory;\n  }\n  allocated_memory[3] = 0;\n  allocated_memory[4] = 0;\n  return allocated_memory;\n}",
            "called": [
                "FUN_08009980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c0",
            "calling": [
                "FUN_08009244",
                "FUN_080093a4",
                "FUN_08009630",
                "FUN_08009444",
                "FUN_08009120",
                "FUN_08009530",
                "FUN_080079e8",
                "FUN_08009258"
            ],
            "imported": true,
            "current_name": "allocate_and_initialize_memory_080090c0"
        },
        "FUN_080091e4": {
            "renaming": {
                "uVar1": "count",
                "FUN_080091e4": "count_set_bits_080091e4",
                "*param_1": "*num",
                "uVar2": "num_copy"
            },
            "code": "uint count_set_bits_080091e4(uint *num) {\n  uint num_copy = *num;\n  uint count = num_copy & 7;\n  if (count == 0) {\n    if ((num_copy & 0xffff) == 0) {\n      num_copy >>= 0x10;\n      count = 0x10;\n    }\n    if ((num_copy & 0xff) == 0) {\n      num_copy >>= 8;\n      count += 8;\n    }\n    if ((num_copy & 0xf) == 0) {\n      num_copy >>= 4;\n      count += 4;\n    }\n    if ((num_copy & 3) == 0) {\n      num_copy >>= 2;\n      count += 2;\n    }\n    if (-1 < (int)(num_copy << 0x1f)) {\n      num_copy >>= 1;\n      if (num_copy == 0) {\n        return 0x20;\n      }\n      count++;\n    }\n    *num = num_copy;\n    return count;\n  }\n  if (-1 < (int)(num_copy << 0x1f)) {\n    if ((int)(num_copy << 0x1e) < 0) {\n      *num = num_copy >> 1;\n      return 1;\n    }\n    *num = num_copy >> 2;\n    return 2;\n  }\n  return 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091e4",
            "calling": [
                "FUN_08009630"
            ],
            "imported": true,
            "current_name": "count_set_bits_080091e4"
        },
        "FUN_080009fc": {
            "renaming": {
                "bVar4": "is_normal",
                "uVar1": "exponent",
                "param_1": "float_bits",
                "FUN_080009fc": "calculate_float_080009fc",
                "param_2": "float_bits2",
                "uVar3": "sign",
                "uVar2": "mantissa",
                "bVar5": "is_denormal",
                "in_r12": "exp_offset"
            },
            "code": "uint calculate_float_080009fc(uint float_bits, uint float_bits2)\n{\n  uint exponent;\n  uint mantissa;\n  uint sign;\n  uint exp_offset;\n  bool is_normal;\n  bool is_denormal;\n  \n  exponent = (float_bits >> 23) & 0xff;\n  mantissa = float_bits & 0x7fffff;\n  sign = float_bits >> 31;\n  exp_offset = (exponent == 0) ? 1 : ((exponent == 0xff) ? 0 : 127);\n  is_normal = (exponent != 0) && (exponent != 0xff);\n  is_denormal = (exponent == 0) && (mantissa != 0);\n  \n  if (is_denormal)\n  {\n    exponent = 1;\n    exp_offset = 126;\n    while ((mantissa & 0x400000) == 0)\n    {\n      mantissa <<= 1;\n      exponent--;\n    }\n    mantissa &= 0x3fffff;\n  }\n  else if (is_normal)\n  {\n    exponent -= exp_offset;\n    mantissa |= 0x800000;\n  }\n  else\n  {\n    exponent = 0;\n    mantissa = 0;\n  }\n  \n  exponent += (float_bits2 >> 23) & 0xff;\n  mantissa = (mantissa << 29) | (float_bits2 & 0x1fffffff);\n  \n  if (mantissa == 0)\n  {\n    return sign << 31;\n  }\n  \n  if (exponent > 0xfe)\n  {\n    return (sign << 31) | 0x7f800000;\n  }\n  else if (exponent < 1)\n  {\n    uint shift = 1 - exponent;\n    if (shift <= 31)\n    {\n      mantissa = (mantissa >> shift) | ((mantissa << (32 - shift)) != 0);\n      exponent = 0;\n    }\n    else\n    {\n      mantissa = 0;\n      exponent = 0;\n    }\n  }\n  \n  exponent <<= 23;\n  mantissa &= 0x7fffff;\n  return (sign << 31) | exponent | mantissa;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009fc",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": true,
            "current_name": "calculate_float_080009fc"
        },
        "FUN_08000cb8": {
            "renaming": {
                "FUN_08000cb8": "FUNC_08000cb8"
            },
            "code": "\nuint FUNC_08000cb8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e08;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e08:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cb8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000cb8"
        },
        "FUN_080093a4": {
            "renaming": {
                "allocate_and_initialize_memory_080090c0": "allocate_and_initialize_memory",
                "PTR_DAT_08009440": "pointer_DAT_08009440",
                "iVar1": "hash_table_index",
                "iVar2": "num_words",
                "calculate_hash_08009258": "calculate_hash",
                "puVar3": "current_data",
                "puVar4": "hash_entry",
                "param_1": "hash_table_address",
                "FUN_080093a4": "calculate_hash_table_080093a4",
                "calculate_polynomial_08009120": "calculate_polynomial",
                "param_2": "data",
                "param_3": "data_length"
            },
            "code": "uint32_t * calculate_hash_table_080093a4(int hash_table_address, uint32_t *data, uint data_length)\n{\n  int remainder = data_length & 3;\n  if (remainder != 0) {\n    data = (uint32_t *)calculate_polynomial(hash_table_address, data, *(uint32_t *)(PTR_DAT_08009440 + ((data_length & 3) - 1) * 4), 0);\n  }\n  int num_words = (int)data_length >> 2;\n  if (num_words != 0) {\n    uint32_t *hash_table = *(uint32_t **)(hash_table_address + 0x48);\n    if (hash_table == NULL) {\n      hash_table = (uint32_t *)allocate_and_initialize_memory(hash_table_address, 1);\n      hash_table[4] = 1;\n      hash_table[5] = 0x271;\n      *(uint32_t **)(hash_table_address + 0x48) = hash_table;\n      *hash_table = 0;\n    }\n    uint32_t *current_data = data;\n    if (num_words << 0x1f >= 0) {\n      while (num_words != 0) {\n        uint32_t *hash_entry = (uint32_t *)*hash_table;\n        if (hash_entry == NULL) {\n          hash_entry = (uint32_t *)calculate_hash(hash_table_address, hash_table, hash_table);\n          *hash_table = hash_entry;\n          *hash_entry = 0;\n        }\n        current_data = data;\n        if (num_words << 0x1f < 0) {\n          break;\n        }\n        data = (uint32_t *)calculate_hash(hash_table_address, current_data, hash_entry);\n        if (current_data == NULL) {\n          break;\n        }\n        int hash_table_index = *(int *)(hash_table_address + 0x4c);\n        num_words = num_words >> 1;\n        *current_data = *(uint32_t *)(hash_table_index + current_data[1] * 4);\n        *(uint32_t **)(hash_table_index + current_data[1] * 4) = current_data;\n        current_data = hash_entry;\n        if (num_words == 0) {\n          return data;\n        }\n      }\n    }\n  }\n  return data;\n}",
            "called": [
                "FUN_08009120",
                "FUN_080090c0",
                "FUN_08009258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080093a4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "calculate_hash_table_080093a4"
        },
        "FUN_080098c0": {
            "renaming": {
                "iVar5": "list_ptr",
                "iVar6": "item_ptr",
                "iVar7": "i",
                "param_1": "item_type",
                "FUN_080098c0": "add_item_to_list_080098c0",
                "param_2": "item_value",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptr",
                "uVar3": "flag",
                "uVar2": "result",
                "uVar4": "item_count"
            },
            "code": "undefined4 add_item_to_list_080098c0(int item_type, undefined4 item_value, undefined4 param_3, undefined4 param_4)\n{\n  undefined *ptr = PTR_PTR_DAT_08009974;\n  do_nothing_08008af0(*(undefined4 *)PTR_PTR_DAT_08009974);\n  int list_ptr = *(int *)PTR_PTR_DAT_08009978;\n  int item_ptr = *(int *)(list_ptr + 0x148);\n  if (item_ptr == 0) {\n    item_ptr = list_ptr + 0x14c;\n    *(int *)(list_ptr + 0x148) = item_ptr;\n  }\n  uint item_count = *(uint *)(item_ptr + 4);\n  if ((int)item_count < 0x20) {\n    item_count++;\n  }\n  else {\n    if (DAT_0800997c == 0) {\n      do_nothing_08008af4(*(undefined4 *)ptr);\n      return 0xffffffff;\n    }\n    int new_item_ptr = 400;\n    item_count = 0;\n    _DAT_00000190 = *(undefined4 *)(list_ptr + 0x148);\n    int i = 1;\n    _DAT_00000194 = 0;\n    *(undefined4 *)(list_ptr + 0x148) = 400;\n    _DAT_00000318 = 0;\n    _DAT_0000031c = 0;\n  }\n  if (item_type != 0) {\n    int current_item_ptr = item_ptr + item_count * 4;\n    *(undefined4 *)(current_item_ptr + 0x88) = param_3;\n    uint flag = 1 << (item_count & 0xff);\n    *(uint *)(item_ptr + 0x188) = *(uint *)(item_ptr + 0x188) | flag;\n    *(undefined4 *)(current_item_ptr + 0x108) = param_4;\n    if (item_type == 2) {\n      *(uint *)(item_ptr + 0x18c) = flag | *(uint *)(item_ptr + 0x18c);\n    }\n  }\n  *(int *)(item_ptr + 4) = item_count;\n  undefined4 result = *(undefined4 *)ptr;\n  *(undefined4 *)(item_ptr + (item_count + 2) * 4) = item_value;\n  do_nothing_08008af4(result);\n  return 0;\n}",
            "called": [
                "FUN_08008af0",
                "FUN_08008af4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098c0",
            "calling": [
                "FUN_080078a0"
            ],
            "imported": true,
            "current_name": "add_item_to_list_080098c0"
        },
        "FUN_08003c80": {
            "renaming": {
                "FUN_08003c80": "do_nothing_08003c80"
            },
            "code": "\nvoid do_nothing_08003c80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c80",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": true,
            "current_name": "do_nothing_08003c80"
        },
        "FUN_0800015c": {
            "renaming": {
                "FUN_0800015c": "FUNC_0800015c"
            },
            "code": "\nulonglong FUNC_0800015c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800015c",
            "calling": [
                "FUN_080059f0",
                "FUN_08005838",
                "FUN_080079e8",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "FUNC_0800015c"
        },
        "FUN_080027f4": {
            "renaming": {
                "iVar1": "temp",
                "param_1": "input",
                "param_6": "base_address",
                "param_2": "flag",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "max_value",
                "FUN_080027f4": "process_input_080027f4",
                "uVar2": "result"
            },
            "code": "uint32_t process_input_080027f4(uint32_t **input, uint8_t flag, uint16_t value1, uint16_t value2, uint32_t max_value, int32_t base_address)\n{\n  uint32_t result;\n  uint32_t *input_ptr = *input;\n  input_ptr[0] |= 0x400;\n  input_ptr[0] |= 0x100;\n  while ((input_ptr[5] & 1) == 0)\n  {\n    if (max_value == 0xffffffff || (max_value != 0 && abs(get_value_from_pointer_080015a0() - base_address) <= max_value))\n    {\n      goto LAB_080029d8;\n    }\n    input[12] = NULL;\n    *((uint8_t *)input + 0x3d) = 0x20;\n    *((uint8_t *)input + 0x3e) = 0;\n    input[15] = NULL;\n    result = 3;\n    return result;\n  }\nLAB_080029d8:\n  result = 3;\n  if (flag & 1)\n  {\n    input_ptr[4] = flag;\n    if (check_value(input, DAT_08002ad4, max_value, base_address))\n    {\n      result = 3;\n    }\n    else if (check_and_update_flags(input, max_value, base_address, input_ptr[6]))\n    {\n      if (input[16] == (uint32_t *)0x4)\n      {\n        input_ptr[0] |= 0x200;\n        result = 1;\n      }\n      else\n      {\n        result = 3;\n      }\n    }\n    else\n    {\n      if (value2 == 1)\n      {\n        input_ptr[4] = value1 & 0xff;\n      }\n      else\n      {\n        input_ptr[4] = value1 >> 8;\n        if (check_and_update_flags(input, max_value, base_address))\n        {\n          if (input[16] == (uint32_t *)0x4)\n          {\n            input_ptr[0] |= 0x200;\n            result = 1;\n            return result;\n          }\n          else\n          {\n            result = 3;\n            return result;\n          }\n        }\n        input_ptr[4] = value1 & 0xff;\n      }\n      if (check_and_update_flags(input, max_value, base_address))\n      {\n        input_ptr[0] |= 0x100;\n        while ((input_ptr[5] & 1) == 0)\n        {\n          if (max_value == 0xffffffff || (max_value != 0 && abs(get_value_from_pointer_080015a0() - base_address) <= max_value))\n          {\n            goto LAB_08002b88;\n          }\n          input[12] = NULL;\n          *((uint8_t *)input + 0x3d) = 0x20;\n          *((uint8_t *)input + 0x3e) = 0;\n          input[15] = NULL;\n          result = 3;\n          return result;\n        }\nLAB_08002b88:\n        result = 3;\n        if (flag & 1)\n        {\n          input_ptr[4] = flag | 1;\n          if (check_value(input, DAT_08002ad4, max_value, base_address))\n          {\n            result = 3;\n          }\n          else if (input[16] == (uint32_t *)0x4)\n          {\n            result = 1;\n          }\n          else\n          {\n            result = 3;\n          }\n        }\n        else\n        {\n          result = 3;\n        }\n      }\n      else if (input[16] == (uint32_t *)0x4)\n      {\n        input_ptr[0] |= 0x200;\n        result = 1;\n      }\n      else\n      {\n        result = 3;\n      }\n    }\n  }\n  else\n  {\n    result = 3;\n  }\n  return result;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002ad8",
                "FUN_08002bb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f4",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": true,
            "current_name": "process_input_080027f4"
        },
        "FUN_080003d4": {
            "renaming": {
                "iVar3": "leading_zeroes_count",
                "uVar1": "shifted_value_1",
                "param_1": "value",
                "result": "result",
                "uVar2": "shifted_value_2",
                "FUN_080003d4": "bit_shift_080003d4",
                "uVar4": "shift_amount_1",
                "bVar6": "shift_amount_2_is_zero",
                "bVar5": "shift_amount_2_is_negative",
                "in_r12": "shift_amount_2",
                "bVar7": "shift_amount_1_is_greater_than_32"
            },
            "code": "ulonglong bit_shift_080003d4(uint value)\n{\n  uint count_leading_zeroes_result;\n  uint shift_amount_1;\n  uint shift_amount_2;\n  uint shift_amount_3;\n  uint shift_amount_4;\n  uint shift_amount_5;\n  ulonglong result = 0;\n  if (value == 0) {\n    return 0;\n  }\n  count_leading_zeroes_result = count_leading_zeroes(value);\n  shift_amount_1 = count_leading_zeroes_result + 21;\n  shift_amount_2 = count_leading_zeroes_result - 11;\n  shift_amount_3 = count_leading_zeroes_result + 1;\n  shift_amount_4 = shift_amount_1 & 0xff;\n  shift_amount_5 = 32 - shift_amount_2;\n  if (shift_amount_1 < 32) {\n    result = value << shift_amount_4;\n    value = value >> (12 - shift_amount_3 & 0xff);\n  }\n  if (shift_amount_2 >= 0 && (shift_amount_2 != 0 || shift_amount_1 >= 32)) {\n    result = (value << shift_amount_2) | (0U >> (32 - shift_amount_2 & 0xff));\n  }\n  if (shift_amount_2 >= 0 && (shift_amount_2 != 0 || shift_amount_1 >= 32)) {\n    result = result | (0 << shift_amount_2);\n  }\n  if (shift_amount_1 < 1075) {\n    result = result + ((1074 - shift_amount_1) * 0x100000);\n  }\n  else {\n    shift_amount_4 = ~(1074 - shift_amount_1);\n    if (shift_amount_4 > 30) {\n      result = (ulonglong)(value >> (shift_amount_4 - 31 & 0xff));\n    }\n    else {\n      shift_amount_3 = shift_amount_4 - 19;\n      if (shift_amount_3 == 0 || shift_amount_3 < 0 != ((shift_amount_4 - 31) < 0xc)) {\n        shift_amount_4 = shift_amount_4 + 1;\n        result = (value >> shift_amount_4) | (result << (32 - shift_amount_4 & 0xff));\n      }\n      else {\n        result = (ulonglong)(result >> (32 - (12 - shift_amount_3) & 0xff) | value << (12 - shift_amount_3 & 0xff));\n      }\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "bit_shift_080003d4"
        },
        "FUN_08004d78": {
            "renaming": {
                "uVar1": "first_calculation_result",
                "param_1": "input_array",
                "param_2": "output_array_1",
                "param_3": "output_array_2",
                "uVar3": "third_calculation_result",
                "uVar2": "second_calculation_result",
                "FUN_08004d78": "calculate_and_assign_floats_08004d78",
                "uVar5": "fifth_calculation_result",
                "uVar4": "fourth_calculation_result"
            },
            "code": "void calculate_and_assign_floats_08004d78(float *input_array, float *output_array_1, float *output_array_2)\n{\n  float first_calculation_result = calculate_value(input_array[1], 0x45800000);\n  float second_calculation_result = calculate_value(input_array[2], 0x45800000);\n  float third_calculation_result = calculate_value(decode_value(input_array[0]), 0x45800000);\n  float fourth_calculation_result = calculate_value_thunk(first_calculation_result, second_calculation_result);\n  float fifth_calculation_result = calculate_value_thunk(decode_value(input_array[0]), second_calculation_result);\n  float sixth_calculation_result = calculate_value(third_calculation_result, 0);\n  float seventh_calculation_result = calculate_value(fourth_calculation_result, 0);\n  float eighth_calculation_result = calculate_value(sixth_calculation_result, DAT_08004e60);\n  float ninth_calculation_result = calculate_value(seventh_calculation_result, DAT_08004e60);\n  *output_array_1 = calculate_float(eighth_calculation_result);\n  *output_array_2 = calculate_float(ninth_calculation_result);\n  return;\n}",
            "called": [
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_080009fc",
                "FUN_08000418",
                "thunk_FUN_08005838",
                "FUN_08000e20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d78",
            "calling": [
                "FUN_080049cc"
            ],
            "imported": true,
            "current_name": "calculate_and_assign_floats_08004d78"
        },
        "FUN_08000c10": {
            "renaming": {
                "iVar1": "num_leading_zeros",
                "iVar4": "base_value",
                "param_1": "number",
                "count_leading_zeroes": "count_leading_zeroes",
                "uVar3": "shifted_mask",
                "uVar2": "shift_amount",
                "uVar5": "mask",
                "FUN_08000c10": "count_leading_zero_bits_08000c10"
            },
            "code": "uint count_leading_zero_bits_08000c10(uint number)\n{\n  int num_leading_zeros;\n  uint sign_bit = number & 0x80000000;\n  if ((int)sign_bit < 0) {\n    number = -number;\n  }\n  if (number == 0) {\n    return 0;\n  }\n  num_leading_zeros = count_leading_zeroes(number);\n  uint shift_amount = num_leading_zeros - 8;\n  int base_value = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (num_leading_zeros > 7) {\n    uint shift = shift_amount & 0xff;\n    uint mask = 0 << shift;\n    uint shifted_number = number << shift;\n    uint shifted_mask = 0U >> (0x20 - shift) & 0xff;\n    uint carry = (uint)(0x7fffffff < mask);\n    uint result = base_value + shifted_number + shifted_mask + carry;\n    if (mask == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_number = number << (num_leading_zeros + 0x18U & 0xff);\n  uint shifted_mask = (number >> (0x20 - (num_leading_zeros + 0x18U) & 0xff)) - ((int)shifted_number >> 0x1f);\n  if ((shifted_number & 0x7fffffff) == 0) {\n    shifted_mask = shifted_mask & ~(shifted_number >> 0x1f);\n  }\n  return base_value + shifted_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c10",
            "calling": [
                "FUN_08004ae0",
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "imported": true,
            "current_name": "count_leading_zero_bits_08000c10"
        },
        "FUN_0800491c": {
            "renaming": {
                "param_1": "parameters",
                "FUN_0800491c": "initialize_parameters_0800491c",
                "local_13": "dummy",
                "local_12": "length",
                "local_11": "buffer"
            },
            "code": "void initialize_parameters_0800491c(undefined4 *parameters)\n{\n  int dummy = 0;\n  int length = 1;\n  char buffer[5];\n  buffer[0] = 8;\n  memset(&parameters[0], 0, 11 * sizeof(int));\n  (**(code **)PTR_DAT_080049c8)(0xd0,0x6b,&dummy,length);\n  dummy = 0x10;\n  (**(code **)PTR_DAT_080049c8)(0xd0,0x1c,&dummy,length);\n  (**(code **)PTR_DAT_080049c8)(0xd0,0x1b,buffer,length);\n  calculate_and_assign_values_080049cc(parameters);\n  return;\n}\n",
            "called": [
                "FUN_080049cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800491c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "initialize_parameters_0800491c"
        },
        "FUN_080078a0": {
            "renaming": {
                "DAT_080078ac": "isDataAvailable",
                "add_item_to_list_080098c0": "addItemToList",
                "FUN_080078a0": "checkDataAvailabilityAndAddItemToList_080078a0",
                "PTR_LAB_08008818_1_080078b0": "itemLabel"
            },
            "code": "void checkDataAvailabilityAndAddItemToList_080078a0(void)\n{\n  if (DAT_080078ac) {\n    addItemToList(0, PTR_LAB_08008818_1_080078b0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080098c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078a0",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": true,
            "current_name": "checkDataAvailabilityAndAddItemToList_080078a0"
        },
        "FUN_080057e8": {
            "renaming": {
                "iVar1": "i",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "FUN_080057e8": "copy_initialize_execute_data_080057e8"
            },
            "code": "void copy_initialize_execute_data_080057e8(void)\n{\n  int i;\n  undefined4 *data_ptr;\n  code *jump_table;\n  for (i = 0; PTR_DAT_08005820 + i < PTR_DAT_08005824; i += 4) {\n    *(undefined4 *)(PTR_DAT_08005820 + i) = *(undefined4 *)(DAT_0800581c + i);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_08005828; data_ptr < PTR_DAT_0800582c; data_ptr++) {\n    *data_ptr = 0;\n  }\n  set_bit_and_clear_others_08005780();\n  execute_functions_08005d20();\n  jump_table = (code *)0x800581a;\n  initialize_all_data_and_parameters_08005224();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08005224",
                "FUN_08005780",
                "FUN_08005d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e8",
            "calling": [],
            "imported": true,
            "current_name": "copy_initialize_execute_data_080057e8"
        }
    },
    "used_tokens": 135095,
    "layers": [
        [
            "FUN_08003440",
            "FUN_08003568",
            "FUN_08003c94",
            "FUN_0800901c",
            "FUN_0800177c",
            "FUN_080011ec",
            "FUN_080008fc",
            "FUN_08005dfc",
            "thunk_FUN_08005838",
            "FUN_080003f4",
            "FUN_0800166c",
            "FUN_0800360c",
            "FUN_08005d68",
            "FUN_080017c4",
            "FUN_080041ea",
            "FUN_08001044",
            "FUN_080015fc",
            "FUN_08000110",
            "FUN_08003504",
            "FUN_08004ee8",
            "FUN_080094f8",
            "FUN_08001170",
            "FUN_08003f18",
            "FUN_08003d60",
            "FUN_08001618",
            "FUN_080091a4",
            "FUN_080015a0",
            "FUN_08005780",
            "FUN_08000134",
            "FUN_08000418",
            "FUN_0800416a",
            "FUN_0800088a",
            "FUN_0800157c",
            "FUN_08005d14",
            "FUN_080015b4",
            "FUN_080041a8",
            "FUN_08008ad4",
            "FUN_08005674",
            "FUN_08004104",
            "FUN_08005e40",
            "FUN_08005d20",
            "FUN_08001a80",
            "FUN_08005838",
            "FUN_080090a8",
            "FUN_080096e0",
            "FUN_0800910c",
            "FUN_08001084",
            "FUN_08004e6c",
            "FUN_08009768",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08009a18",
            "FUN_0800119c",
            "FUN_080090b4",
            "FUN_0800422e",
            "FUN_08003e38",
            "FUN_080006a4",
            "FUN_08000f68",
            "FUN_08000c08",
            "FUN_080042de",
            "FUN_08002d3c",
            "FUN_080091e4",
            "FUN_080009fc",
            "FUN_080098c0",
            "FUN_080003d4",
            "FUN_08000c10"
        ],
        [
            "FUN_080036a8",
            "FUN_08004f2c",
            "FUN_08002c2e",
            "FUN_08000988",
            "FUN_08001714",
            "FUN_080078c0",
            "FUN_080035a4",
            "FUN_08004ae0",
            "FUN_08004436",
            "FUN_08003908",
            "FUN_08004f60",
            "FUN_080097cc",
            "FUN_08002ad8",
            "FUN_08000fd0",
            "FUN_08003518",
            "FUN_0800172a",
            "FUN_08003640",
            "FUN_08009980",
            "FUN_08002ca8",
            "FUN_08003a94",
            "FUN_080055f4",
            "FUN_080016d0",
            "FUN_08004e74",
            "FUN_08005680",
            "FUN_08003540",
            "FUN_08005728",
            "FUN_08002bb4",
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_080078a0"
        ],
        [
            "FUN_080046ec",
            "FUN_08005500",
            "FUN_080049cc",
            "FUN_08000978",
            "FUN_08004f3c",
            "FUN_08002640",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_08000fc8",
            "FUN_080009c0",
            "FUN_08009744",
            "FUN_080053b0",
            "FUN_08000ff4",
            "FUN_08001ab0",
            "FUN_08001762",
            "FUN_080090c0",
            "FUN_080027f4"
        ],
        [
            "FUN_08005348",
            "FUN_0800884c",
            "FUN_08001030",
            "FUN_08009444",
            "FUN_0800438a",
            "FUN_080009d4",
            "FUN_08001ccc",
            "FUN_080009e8",
            "FUN_08009630",
            "FUN_08009120",
            "FUN_08009244",
            "FUN_0800151c",
            "FUN_08009258",
            "FUN_08009530",
            "FUN_0800491c"
        ],
        [
            "FUN_08005598",
            "FUN_080014f0",
            "FUN_08004f78",
            "FUN_08003260",
            "FUN_08004ea4",
            "FUN_080093a4"
        ],
        [
            "FUN_080017b4",
            "FUN_080036f8",
            "FUN_080052a0"
        ],
        [
            "FUN_08005224",
            "FUN_08005704",
            "FUN_08005714"
        ],
        [
            "FUN_080057e8"
        ]
    ],
    "locked_functions": []
}