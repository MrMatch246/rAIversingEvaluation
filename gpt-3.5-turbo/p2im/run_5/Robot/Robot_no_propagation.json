{
    "functions": {
        "FUN_0800071c": {
            "renaming": {
                "FUN_0800071c": "FUNC_0800071c"
            },
            "code": "\nulonglong FUNC_0800071c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = FUN_0800088a();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800083a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800083a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_0800088a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800071c",
            "calling": [
                "FUN_080079e8",
                "FUN_08004bd8",
                "FUN_080059f0",
                "FUN_08004d78",
                "FUN_08005838"
            ],
            "imported": false,
            "current_name": "FUNC_0800071c"
        },
        "FUN_080036a8": {
            "renaming": {
                "FUN_080036a8": "set_flag_and_update_data_080036a8",
                "param_1": "data_ptr",
                "*param_1": "*data_ptr",
                "param_2": "flag",
                "DAT_080036f4": "data_end_ptr"
            },
            "code": "void set_flag_and_update_data_080036a8(uint **data_ptr, uint flag) {\n  update_data(*data_ptr, flag, 1);\n  if (*data_ptr == DAT_080036f4) {\n    (*data_ptr)[17] |= 0x8000;\n  }\n  **data_ptr |= 0x1;\n}",
            "called": [
                "FUN_080041ea"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a8",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "set_flag_and_update_data_080036a8"
        },
        "FUN_080088ec": {
            "renaming": {
                "FUN_080088ec": "FUNC_080088ec"
            },
            "code": "\nvoid FUNC_080088ec(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  uint uVar10;\n  int iVar11;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  FUN_080090a8();\n  puVar8 = PTR_DAT_08008ac4;\n  uVar10 = *(uint *)(param_2 + -4);\n  iVar2 = param_2 + -8;\n  uVar5 = uVar10 & 0xfffffffe;\n  puVar3 = (uint *)(iVar2 + uVar5);\n  uVar6 = puVar3[1] & 0xfffffffc;\n  if (*(uint **)(PTR_DAT_08008ac4 + 8) == puVar3) {\n    uVar5 = uVar5 + uVar6;\n    if ((uVar10 & 1) == 0) {\n      iVar2 = iVar2 - *(int *)(param_2 + -8);\n      iVar11 = *(int *)(iVar2 + 8);\n      iVar1 = *(int *)(iVar2 + 0xc);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      *(int *)(iVar11 + 0xc) = iVar1;\n      *(int *)(iVar1 + 8) = iVar11;\n    }\n    uVar6 = *(uint *)PTR_DAT_08008acc;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(int *)(puVar8 + 8) = iVar2;\n    if (uVar6 <= uVar5) {\n      FUN_0800884c(param_1,*(undefined4 *)PTR_DAT_08008ad0);\n    }\nLAB_080089f0:\n    FUN_080090b4(param_1);\n    return;\n  }\n  puVar3[1] = uVar6;\n  if ((uVar10 & 1) == 0) {\n    iVar2 = iVar2 - *(int *)(param_2 + -8);\n    puVar9 = *(undefined **)(iVar2 + 8);\n    uVar5 = uVar5 + *(int *)(param_2 + -8);\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n    if (puVar9 == puVar8 + 8) {\n      if (uVar10 == 0) {\n        uVar10 = puVar3[2];\n        uVar4 = puVar3[3];\n        uVar5 = uVar5 + uVar6;\n        *(uint *)(uVar10 + 0xc) = uVar4;\n        *(uint *)(uVar4 + 8) = uVar10;\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *(uint *)(iVar2 + uVar5) = uVar5;\n      }\n      else {\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *puVar3 = uVar5;\n      }\n      goto LAB_080089f0;\n    }\n    iVar11 = *(int *)(iVar2 + 0xc);\n    *(int *)(puVar9 + 0xc) = iVar11;\n    *(undefined **)(iVar11 + 8) = puVar9;\n  }\n  else {\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n  }\n  if (uVar10 == 0) {\n    puVar9 = (undefined *)puVar3[2];\n    uVar5 = uVar5 + uVar6;\n    if (puVar9 == PTR_PTR_DAT_08008ac8) {\n      *(int *)(puVar8 + 0x10) = iVar2;\n      *(int *)(puVar8 + 0x14) = iVar2;\n      *(undefined **)(iVar2 + 8) = puVar9;\n      *(undefined **)(iVar2 + 0xc) = puVar9;\n      *(uint *)(iVar2 + 4) = uVar5 | 1;\n      *(uint *)(iVar2 + uVar5) = uVar5;\n      goto LAB_080089f0;\n    }\n    uVar6 = puVar3[3];\n    *(uint *)(puVar9 + 0xc) = uVar6;\n    *(undefined **)(uVar6 + 8) = puVar9;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  else {\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  if (uVar5 < 0x200) {\n    iVar11 = (uVar5 >> 3) + 1;\n    uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(puVar8 + 4);\n    iVar1 = *(int *)(puVar8 + iVar11 * 8);\n    *(int *)(iVar2 + 8) = iVar1;\n    *(undefined **)(iVar2 + 0xc) = puVar8 + iVar11 * 8 + -8;\n    *(uint *)(puVar8 + 4) = uVar5;\n    *(int *)(puVar8 + iVar11 * 8) = iVar2;\n    *(int *)(iVar1 + 0xc) = iVar2;\n    FUN_080090b4(param_1,iVar2,uVar5,param_4);\n    return;\n  }\n  uVar6 = uVar5 >> 9;\n  if (uVar6 < 5) {\n    iVar11 = ((uVar5 >> 6) + 0x39) * 8;\n    iVar1 = (uVar5 >> 6) + 0x38;\n  }\n  else if (uVar6 < 0x15) {\n    iVar11 = (uVar6 + 0x5c) * 8;\n    iVar1 = uVar6 + 0x5b;\n  }\n  else if (uVar6 < 0x55) {\n    iVar11 = ((uVar5 >> 0xc) + 0x6f) * 8;\n    iVar1 = (uVar5 >> 0xc) + 0x6e;\n  }\n  else if (uVar6 < 0x155) {\n    iVar11 = ((uVar5 >> 0xf) + 0x78) * 8;\n    iVar1 = (uVar5 >> 0xf) + 0x77;\n  }\n  else if (uVar6 < 0x555) {\n    iVar11 = ((uVar5 >> 0x12) + 0x7d) * 8;\n    iVar1 = (uVar5 >> 0x12) + 0x7c;\n  }\n  else {\n    iVar11 = 0x3f8;\n    iVar1 = 0x7e;\n  }\n  puVar9 = *(undefined **)(puVar8 + iVar11);\n  puVar7 = puVar8 + iVar11 + -8;\n  if (puVar7 == puVar9) {\n    puVar9 = (undefined *)(1 << (iVar1 >> 2 & 0xffU) | *(uint *)(puVar8 + 4));\n    *(undefined **)(puVar8 + 4) = puVar9;\n    puVar8 = puVar7;\n  }\n  else {\n    do {\n      puVar8 = puVar9;\n      if ((*(uint *)(puVar9 + 4) & 0xfffffffc) <= uVar5) break;\n      puVar9 = *(undefined **)(puVar9 + 8);\n      puVar8 = puVar7;\n    } while (puVar7 != puVar9);\n    puVar7 = *(undefined **)(puVar8 + 0xc);\n  }\n  *(undefined **)(iVar2 + 8) = puVar8;\n  *(undefined **)(iVar2 + 0xc) = puVar7;\n  *(int *)(puVar7 + 8) = iVar2;\n  *(int *)(puVar8 + 0xc) = iVar2;\n  FUN_080090b4(param_1,iVar2,puVar9,param_4);\n  return;\n}\n\n",
            "called": [
                "FUN_080090b4",
                "FUN_0800884c",
                "FUN_080090a8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080088ec",
            "calling": [
                "FUN_08005e9c",
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08008af8"
            ],
            "imported": false,
            "current_name": "FUNC_080088ec"
        },
        "FUN_08005224": {
            "renaming": {
                "FUN_080036a8": "initialize_memory",
                "PTR_DAT_08005294": "MEMORY_PTR_1",
                "PTR_DAT_08005284": "SYSTEM_DATA_PTR_2",
                "FUN_08005598": "configure_network",
                "PTR_DAT_08005298": "DATA_PTR",
                "FUN_08005224": "run_application_08005224",
                "PTR_FUN_08004f2c_1_08005290": "SYSTEM_FUNCTION_PTR_3",
                "FUN_08005348": "configure_devices",
                "FUN_08005500": "configure_security",
                "PTR_DAT_0800528c": "SYSTEM_DATA_PTR_3",
                "PTR_DAT_0800529c": "DISPLAY_PTR",
                "PTR_DAT_0800527c": "SYSTEM_DATA_PTR_1",
                "FUN_080014f0": "initialize_system",
                "FUN_080055f4": "load_settings",
                "FUN_08004e74": "initialize_audio",
                "PTR_FUN_08004ea4_1_08005280": "SYSTEM_FUNCTION_PTR_1",
                "FUN_080052a0": "start_processes",
                "FUN_080053b0": "initialize_memory",
                "PTR_FUN_08004ee8_1_08005288": "SYSTEM_FUNCTION_PTR_2",
                "FUN_0800491c": "load_data",
                "FUN_0800360c": "initialize_display"
            },
            "code": "void run_application_08005224(void)\n{\n  initialize_system();\n  start_processes();\n  load_settings();\n  configure_devices();\n  configure_network();\n  configure_security();\n  *(undefined **)PTR_DAT_0800527c = PTR_FUN_08004ea4_1_08005280;\n  *(undefined **)PTR_DAT_08005284 = PTR_FUN_08004ee8_1_08005288;\n  *(undefined **)PTR_DAT_0800528c = PTR_FUN_08004f2c_1_08005290;\n  initialize_memory(PTR_DAT_08005294,0);\n  initialize_memory(MEMORY_PTR_2,0xc);\n  load_data(PTR_DAT_08005298);\n  initialize_display(PTR_DAT_0800529c);\n  initialize_audio(0);\n  do {\n    // Infinite loop\n  } while(true);\n}",
            "called": [
                "FUN_080036a8",
                "FUN_0800491c",
                "FUN_08004e74",
                "FUN_080053b0",
                "FUN_08005348",
                "FUN_080055f4",
                "FUN_0800360c",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_080014f0",
                "FUN_08005500"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005224",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": true,
            "current_name": "run_application_08005224"
        },
        "FUN_08003440": {
            "renaming": {
                "local_c": "multiplier",
                "FUN_08003440": "calculate_value_08003440",
                "uStack_24": "data_ptr_2",
                "uStack_20": "data_ptr_3",
                "local_1c": "index",
                "local_2c": "data_ptr",
                "local_18": "unused",
                "uStack_28": "data_ptr_1",
                "local_10": "value",
                "local_30": "header",
                "local_14": "flags"
            },
            "code": "uint calculate_value_08003440(void)\n{\n  uint value = 0;\n  uint flags = *(uint *)(DAT_080034f8 + 4);\n  if ((flags & 0xc) == 4) {\n    value = DAT_080034fc;\n  }\n  else if ((flags & 0xc) == 8) {\n    uint index = (flags >> 0x12 & 0xf);\n    uint multiplier = 0;\n    if ((flags & 0x10000) == 0) {\n      multiplier = DAT_08003500;\n    }\n    else {\n      uint divisor = *(byte *)((int)&value + (*(uint *)(DAT_080034f8 + 4) >> 0x11 & 1));\n      multiplier = (DAT_080034fc * divisor) / divisor;\n    }\n    value = multiplier * index;\n  }\n  else {\n    value = DAT_080034fc;\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003440",
            "calling": [
                "FUN_08003260"
            ],
            "imported": true,
            "current_name": "calculate_value_08003440"
        },
        "FUN_080035fa": {
            "renaming": {
                "FUN_080035fa": "do_nothing_080035fa"
            },
            "code": "\nvoid do_nothing_080035fa(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fa",
            "calling": [
                "FUN_080035a4"
            ],
            "imported": true,
            "current_name": "do_nothing_080035fa"
        },
        "FUN_08004f2c": {
            "renaming": {
                "uVar1": "result",
                "FUN_08004f2c": "get_result_08004f2c",
                "FUN_080015a0": "calculate"
            },
            "code": "int get_result_08004f2c(void)\n{\n  int result = calculate();\n  return result;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": true,
            "current_name": "get_result_08004f2c"
        },
        "FUN_08005348": {
            "renaming": {
                "iVar1": "status",
                "FUN_08005348": "initialize_pointers_and_data_08005348",
                "zero": "zero",
                "PTR_DAT_080053a0": "ptr_dat_080053a0",
                "DAT_080053a4": "dat_080053a4",
                "DAT_080053a8": "dat_080053a8",
                "page_size": "page_size"
            },
            "code": "void initialize_pointers_and_data_08005348() {\n  int status;\n  int* PTR_DAT_080053a0 = (int*) PTR_DAT_080053a0;\n  int DAT_080053a4 = DAT_080053a4;\n  int DAT_080053a8 = DAT_080053a8;\n  int zero = 0;\n  int page_size = 0x4000;\n  status = 0;\n  memset(PTR_DAT_080053a0, 0, 28);\n  *(int*)(PTR_DAT_080053a0) = DAT_080053a4;\n  *(int*)(PTR_DAT_080053a0 + 1) = DAT_080053a8;\n  *(int*)(PTR_DAT_080053a0 + 4) = page_size;\n  status = FUN_08001ab0(PTR_DAT_080053a0);\n  if (status != 0) {\n    FUN_08005674(PTR_s____src_main_c_080053ac, 0x17a);\n  }\n  return;\n}",
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005348",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "initialize_pointers_and_data_08005348"
        },
        "FUN_08004378": {
            "renaming": {
                "FUN_08004378": "do_nothing_08004378"
            },
            "code": "\nvoid do_nothing_08004378(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004378",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": true,
            "current_name": "do_nothing_08004378"
        },
        "FUN_080046ec": {
            "renaming": {
                "iVar3": "result",
                "iVar4": "param4",
                "iVar5": "param1",
                "FUN_080046ec": "calculate_values_080046ec",
                "param_1": "params",
                "lVar1": "first_value",
                "lVar2": "second_value",
                "uVar6": "param2"
            },
            "code": "void calculate_values_080046ec(int *params)\n{\n  longlong first_value = 0;\n  longlong second_value = 0;\n  int result = 0;\n  int param1 = params[1];\n\n  *(uint *)(*params + 0x10) = params[3] | *(uint *)(*params + 0x10) & 0xffffcfff;\n  *(uint *)(*params + 0xc) = *(uint *)(*params + 0xc) & 0xffffe9f3 | params[5] | params[2] | params[4];\n  *(uint *)(*params + 0x14) = params[6] | *(uint *)(*params + 0x14) & 0xfffffcff;\n\n  if (*params == PTR_DAT_08004914) {\n    int param2 = FUN_08003540();\n    first_value = (ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)((int)param2 * 0x19) / (ulonglong)(uint)(param1 << 2));\n    int param3 = FUN_08003540((int)param2,(int)((ulonglong)param2 >> 0x20),(int)first_value);\n    int param4 = FUN_08003540();\n    second_value = (ulonglong)PTR_DAT_08004918 * (ulonglong)(((uint)(param3 * 0x19) / (uint)(param1 << 2) + (uint)((ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)((int)param4 * 0x19) / (ulonglong)(uint)(param1 << 2)) >> 0x25) * -100) * 0x10 + 0x32);\n    result = FUN_08003540((int)param4,(int)((ulonglong)param4 >> 0x20),(int)second_value);\n    *(uint *)(*params + 8) = ((uint)((ulonglong)PTR_DAT_08004918 * (ulonglong)(((uint)(result * 0x19) / (uint)(param1 << 2) + (uint)((ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)(param4 * 0x19) / (ulonglong)(uint)(param1 << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf) + (uint)((ulonglong)first_value >> 0x25) * 0x10 + ((uint)((ulonglong)second_value >> 0x25) & 0xf0);\n  }\n  else {\n    int param2 = FUN_08003518();\n    first_value = (ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)((int)param2 * 0x19) / (ulonglong)(uint)(param1 << 2));\n    int param3 = FUN_08003518((int)param2,(int)((ulonglong)param2 >> 0x20),(int)first_value);\n    int param4 = FUN_08003518();\n    second_value = (ulonglong)PTR_DAT_08004918 * (ulonglong)(((uint)(param3 * 0x19) / (uint)(param1 << 2) + (uint)((ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)((int)param4 * 0x19) / (ulonglong)(uint)(param1 << 2)) >> 0x25) * -100) * 0x10 + 0x32);\n    result = FUN_08003518((int)param4,(int)((ulonglong)param4 >> 0x20),(int)second_value);\n    *(uint *)(*params + 8) = ((uint)((ulonglong)PTR_DAT_08004918 * (ulonglong)(((uint)(result * 0x19) / (uint)(param1 << 2) + (uint)((ulonglong)PTR_DAT_08004918 * ((ulonglong)(uint)(param4 * 0x19) / (ulonglong)(uint)(param1 << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf) + (uint)((ulonglong)first_value >> 0x25) * 0x10 + ((uint)((ulonglong)second_value >> 0x25) & 0xf0);\n  }\n}",
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046ec",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": true,
            "current_name": "calculate_values_080046ec"
        },
        "FUN_08005500": {
            "renaming": {
                "PTR_DAT_08005590": "memory_map",
                "iVar1": "status",
                "FUN_080042de": "map_file_to_memory",
                "PTR_s____src_main_c_08005594": "error_message",
                "FUN_08005500": "initialize_memory_08005500",
                "local_1c": "offset",
                "local_18": "permissions",
                "FUN_08003a94": "allocate_memory",
                "local_20": "map_size",
                "FUN_080035a4": "create_memory_map"
            },
            "code": "void initialize_memory_08005500() {\n  int status;\n  int page_size = 4096;\n  int permissions = 0;\n  int map_fixed = 0x14;\n  int map_anonymous = 0;\n  int map_file = 0;\n  \n  *(int*)PTR_DAT_08005590 = 0x40000000;\n  *(int*)(PTR_DAT_08005590 + 4) = 36000;\n  *(int*)(PTR_DAT_08005590 + 8) = permissions;\n  *(int*)(PTR_DAT_08005590 + 0xc) = map_fixed;\n  *(int*)(PTR_DAT_08005590 + 0x10) = map_anonymous;\n  *(int*)(PTR_DAT_08005590 + 0x18) = map_file;\n  \n  status = create_PTR_DAT_08005590(PTR_DAT_08005590);\n  if (status != 0) {\n    print_PTR_s____src_main_c_08005594(PTR_s____src_main_c_08005594,0x1d0);\n  }\n  \n  int map_size = 4096;\n  status = allocate_memory(PTR_DAT_08005590, map_size);\n  if (status != 0) {\n    print_PTR_s____src_main_c_08005594(PTR_s____src_main_c_08005594,0x1d5);\n  }\n  \n  int offset = 0x20;\n  int fd = 0;\n  status = map_file_to_memory(PTR_DAT_08005590, offset, fd);\n  if (status != 0) {\n    print_PTR_s____src_main_c_08005594(PTR_s____src_main_c_08005594,0x1dc);\n  }\n  return;\n}",
            "called": [
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94",
                "FUN_08005674"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005500",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "initialize_memory_08005500"
        },
        "FUN_08002c2e": {
            "renaming": {
                "iVar1": "result",
                "param_1": "flags",
                "FUN_08002c2e": "check_for_flagged_08002c2e",
                "param_2": "max_flag",
                "param_3": "param_3"
            },
            "code": "int check_for_flagged_08002c2e(uint* flags, uint max_flag, int param_3) {\n    int result;\n    while (true) {\n        if ((*flags & 4) == 4) {\n            return 0;\n        }\n        result = get_flagged(flags);\n        if (result != 0) {\n            break;\n        }\n        if ((max_flag != 0xffffffff) && ((max_flag == 0 || (result = get_current_time(), max_flag < (uint)(result - param_3)))) {\n            flags[0x10] = flags[0x10] | 0x20;\n            flags[0xc] = 0;\n            *(undefined *)((int)flags + 0x3d) = 0x20;\n            *(undefined *)(flags + 0xf) = 0;\n            return 3;\n        }\n    }\n    return 1;\n}",
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2e",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": true,
            "current_name": "check_for_flagged_08002c2e"
        },
        "FUN_08003568": {
            "renaming": {
                "bVar1": "flag",
                "local_c": "delay",
                "param_1": "input_value",
                "FUN_08003568": "calculate_delay_08003568",
                "PTR_DAT_0800359c": "POINTER",
                "DAT_080035a0": "MULTIPLIER"
            },
            "code": "void calculate_delay_08003568(int input_value) {\n  const int DAT_080035a0 = 0x080035a0;\n  const int SHIFT = 0x29;\n  const int* PTR_DAT_0800359c = (int*)0x0800359c;\n  int delay = input_value * ((unsigned long long)DAT_080035a0 * (unsigned long long)(*PTR_DAT_0800359c) >> SHIFT);\n  while(delay > 0) {\n    delay--;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003568",
            "calling": [
                "FUN_08002d98"
            ],
            "imported": true,
            "current_name": "calculate_delay_08003568"
        },
        "FUN_080049cc": {
            "renaming": {
                "local_c": "sum3",
                "param_1": "input",
                "local_1c": "i",
                "FUN_080049cc": "calculate_results_080049cc",
                "local_2c": "temp2",
                "local_18": "sum2",
                "local_28": "temp1",
                "local_10": "sum4",
                "local_20": "num_iterations",
                "local_14": "sum1",
                "local_24": "function_result"
            },
            "code": "void calculate_results_080049cc(int input)\n{\n  int num_iterations = 1;\n  int sum1 = 0;\n  int sum2 = 0;\n  int sum3 = 0;\n  int sum4 = 0;\n  int function_result = (**(code **)PTR_DAT_08004adc)();\n  int i = 0;\n  while (i < num_iterations) {\n    int temp1 = 0;\n    int temp2 = 0;\n    FUN_08004ae0(input);\n    FUN_08004d78(input, &temp1, &temp2);\n    sum3 = FUNC_08000aa8(sum3, *(int *)(input + 16));\n    sum4 = FUNC_08000aa8(sum4, *(int *)(input + 20));\n    sum1 = FUNC_08000aa8(sum1, temp1);\n    sum2 = FUNC_08000aa8(sum2, temp2);\n    function_result = (**(code **)PTR_DAT_08004adc)();\n    i++;\n  }\n  int divisor = FUN_08000c10(num_iterations);\n  *(int *)(input + 28) = FUNC_08000e20(sum1, divisor);\n  *(int *)(input + 24) = FUNC_08000e20(sum2, divisor);\n  *(int *)(input + 20) = FUNC_08000e20(sum3, divisor);\n  *(int *)(input + 16) = FUNC_08000e20(sum4, divisor);\n  return;\n}",
            "called": [
                "FUN_08004ae0",
                "FUN_08000aa8",
                "FUN_08004d78",
                "FUN_08000c10",
                "FUN_08000e20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049cc",
            "calling": [
                "FUN_0800491c"
            ],
            "imported": true,
            "current_name": "calculate_results_080049cc"
        },
        "FUN_08003c94": {
            "renaming": {
                "local_c": "current_param_value",
                "param_1": "params",
                "FUN_08003c94": "update_params_08003c94",
                "param_2": "new_params",
                "DAT_08003d5c": "ptr_3",
                "DAT_08003d54": "ptr_1",
                "DAT_08003d58": "ptr_2"
            },
            "code": "void update_params_08003c94(uint *params, uint *new_params)\n{\n  uint current_param_value;\n\n  current_param_value = *params;\n  if ((((params == DAT_08003d54) || (params == (uint *)0x40000000)) || (params == DAT_08003d58)) || (params == DAT_08003d5c)) {\n    current_param_value = new_params[1] | current_param_value & 0xffffff8f;\n  }\n  if (((params == DAT_08003d54) || (params == (uint *)0x40000000)) || ((params == DAT_08003d58 || (params == DAT_08003d5c)))) {\n    current_param_value = new_params[3] | current_param_value & 0xfffffcff;\n  }\n  *params = new_params[5] | current_param_value & 0xffffff7f;\n  params[0xb] = new_params[2];\n  params[10] = *new_params;\n  if (params == DAT_08003d54) {\n    params[0xc] = new_params[4];\n  }\n  params[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c94",
            "calling": [
                "FUN_080035a4",
                "FUN_08003640"
            ],
            "imported": true,
            "current_name": "update_params_08003c94"
        },
        "FUN_08000978": {
            "renaming": {
                "param_1": "first_integer",
                "FUN_08000978": "swap_integers_08000978",
                "param_2": "second_integer",
                "param_3": "temp"
            },
            "code": "void swap_integers_08000978(int* first_integer, int* second_integer)\n{\n    int temp = *first_integer;\n    *first_integer = *second_integer;\n    *second_integer = temp;\n    return;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000978",
            "calling": [
                "FUN_080009e8",
                "FUN_080009d4"
            ],
            "imported": true,
            "current_name": "swap_integers_08000978"
        },
        "FUN_0800884c": {
            "renaming": {
                "iVar3": "header_size",
                "iVar4": "aligned_size",
                "puVar2": "data_pointer",
                "param_1": "memory_address",
                "FUN_0800884c": "allocate_memory_and_set_flag_0800884c",
                "param_2": "memory_size",
                "puVar1": "header_pointer",
                "uVar5": "flags"
            },
            "code": "int allocate_memory_and_set_flag_0800884c(void *memory_address, int memory_size)\n{\n  void *data_pointer;\n  void *header_pointer;\n  int header_size;\n  int aligned_size;\n  uint32_t flags;\n  header_pointer = PTR_DAT_080088e0;\n  initialize_memory();\n  flags = *(uint32_t *)(*(int *)(header_pointer + 8) + 4) & 0xfffffffc;\n  aligned_size = ((0xfef - memory_size) + flags & 0xfffff000) - 0x1000;\n  if (0xfff < aligned_size) {\n    header_size = FUN_08009744(memory_address, 0);\n    if (header_size == *(int *)(header_pointer + 8) + flags) {\n      header_size = FUN_08009744(memory_address, -aligned_size);\n      data_pointer = PTR_DAT_080088e4;\n      if (header_size != -1) {\n        header_size = *(int *)PTR_DAT_080088e4;\n        *(uint32_t *)(*(int *)(header_pointer + 8) + 4) = flags - aligned_size | 1;\n        *(int *)data_pointer = header_size - aligned_size;\n        finalize_memory(memory_address);\n        return 1;\n      }\n      aligned_size = FUN_08009744(memory_address, 0);\n      data_pointer = PTR_DAT_080088e4;\n      flags = aligned_size - *(int *)(header_pointer + 8);\n      if (0xf < (int)flags) {\n        header_size = *(int *)PTR_DAT_080088e8;\n        *(uint32_t *)(*(int *)(header_pointer + 8) + 4) = flags | 1;\n        *(int *)data_pointer = aligned_size - header_size;\n      }\n    }\n  }\n  finalize_memory(memory_address);\n  return 0;\n}",
            "called": [
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080090a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800884c",
            "calling": [
                "FUN_080088ec"
            ],
            "imported": true,
            "current_name": "allocate_memory_and_set_flag_0800884c"
        },
        "FUN_0800901c": {
            "renaming": {
                "puVar4": "current_sequence_position",
                "param_1": "buffer_start",
                "FUN_0800901c": "find_byte_sequence_0800901c",
                "param_2": "buffer_size",
                "param_3": "sequence_start",
                "puVar1": "current_buffer_position",
                "uVar3": "temp_word",
                "uVar2": "current_sequence_word",
                "uVar5": "current_sequence_byte",
                "bVar6": "sequence_found"
            },
            "code": "uint * find_byte_sequence_0800901c(uint *buffer_start, uint buffer_size, uint *sequence_start) {\n  uint *current_buffer_position;\n  uint current_sequence_byte;\n  uint *current_sequence_position;\n  uint current_sequence_word;\n  bool sequence_found;\n  \n  current_sequence_byte = buffer_size & 0xff;\n  current_buffer_position = buffer_start;\n  if (((uint)buffer_start & 3) == 0) {\nLAB_0800904a:\n    buffer_start = sequence_start;\n    if ((uint *)0x3 < sequence_start) {\n      current_sequence_word = (buffer_size & 0xff) << 8 | current_sequence_byte;\n      current_sequence_position = current_buffer_position;\n      do {\n        current_sequence_word = *current_sequence_position ^ (current_sequence_word | current_sequence_word << 0x10);\n        current_buffer_position = current_sequence_position + 1;\n        if ((current_sequence_word + 0xfefefeff & ~current_sequence_word & 0x80808080) != 0) goto LAB_08009050;\n        sequence_start = sequence_start + -1;\n        buffer_start = sequence_start;\n        current_sequence_position = current_buffer_position;\n      } while ((uint *)0x3 < sequence_start);\n    }\n    current_sequence_position = current_buffer_position;\n    sequence_start = buffer_start;\n    if (buffer_start != (uint *)0x0) {\nLAB_08009050:\n      buffer_start = current_sequence_position;\n      if (*(byte *)buffer_start != current_sequence_byte) {\n        sequence_start = (uint *)((int)sequence_start + (int)current_sequence_position);\n        do {\n          buffer_start = (uint *)((int)buffer_start + 1);\n          if (sequence_start == buffer_start) goto LAB_0800906c;\n        } while (*(byte *)buffer_start != current_sequence_byte);\n      }\n    }\n  }\n  else {\n    current_sequence_position = (uint *)((int)sequence_start + -1);\n    if (sequence_start == (uint *)0x0) {\nLAB_0800906c:\n      buffer_start = (uint *)0x0;\n    }\n    else if (*(byte *)current_buffer_position != current_sequence_byte) {\n      current_sequence_position = (uint *)((int)sequence_start + 1);\n      do {\n        current_buffer_position = current_sequence_position;\n        sequence_start = current_buffer_position;\n        if (((uint)current_buffer_position & 3) == 0) goto LAB_0800904a;\n        sequence_found = current_sequence_position == (uint *)0x0;\n        current_sequence_position = (uint *)((int)current_sequence_position + -1);\n        if (sequence_found) goto LAB_0800906c;\n        current_buffer_position = (uint *)((int)current_buffer_position + 1);\n      } while (*(byte *)current_buffer_position != current_sequence_byte);\n    }\n  }\n  return current_buffer_position;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800901c",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "find_byte_sequence_0800901c"
        },
        "FUN_0800177c": {
            "renaming": {
                "param_1": "parameter",
                "FUN_0800177c": "set_flag_if_parameter_is_four_0800177c",
                "DAT_080017b0": "flag_pointer"
            },
            "code": "void set_flag_if_parameter_is_four_0800177c(int parameter) {\n  if (parameter == 4) {\n    *DAT_080017b0 = *DAT_080017b0 | 4;\n  }\n  else {\n    *DAT_080017b0 = *DAT_080017b0 & 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800177c",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": true,
            "current_name": "set_flag_if_parameter_is_four_0800177c"
        },
        "FUN_080017b4": {
            "renaming": {
                "FUN_080017b4": "startProcess_080017b4",
                "FUN_08004f78": "initializeProcess"
            },
            "code": "void startProcess_080017b4(void)\n{\n  initializeProcess(0);\n  return;\n}",
            "called": [
                "FUN_08004f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017b4",
            "calling": [
                "FUN_08005704"
            ],
            "imported": true,
            "current_name": "startProcess_080017b4"
        },
        "FUN_08005598": {
            "renaming": {
                "iVar1": "result",
                "FUN_08005598": "initialize_data_section_08005598",
                "0x1c200": "data_section_value_2",
                "PTR_DAT_080055e8": "data_section_ptr",
                "0": "data_section_value_3",
                "DAT_080055ec": "data_section_value_1",
                "PTR_s____src_main_c_080055f0": "unknown_pointer",
                "0xc": "data_section_value_6"
            },
            "code": "void initialize_data_section_08005598(void)\n{\n  int result = 0;\n  int* PTR_DAT_080055e8 = PTR_DAT_080055e8;\n  int DAT_080055ec = DAT_080055ec;\n  int data_section_value_2 = 0x1c200;\n  int data_section_value_3 = 0;\n  int data_section_value_4 = 0;\n  int data_section_value_5 = 0;\n  int data_section_value_6 = 0xc;\n  int data_section_value_7 = 0;\n  int data_section_value_8 = 0;\n  \n  *(int *)PTR_DAT_080055e8 = DAT_080055ec;\n  *(int *)(PTR_DAT_080055e8 + 1) = data_section_value_2;\n  *(int *)(PTR_DAT_080055e8 + 2) = data_section_value_3;\n  *(int *)(PTR_DAT_080055e8 + 3) = data_section_value_4;\n  *(int *)(PTR_DAT_080055e8 + 4) = data_section_value_5;\n  *(int *)(PTR_DAT_080055e8 + 5) = data_section_value_6;\n  *(int *)(PTR_DAT_080055e8 + 6) = data_section_value_7;\n  *(int *)(PTR_DAT_080055e8 + 7) = data_section_value_8;\n  \n  result = FUN_0800438a(PTR_DAT_080055e8);\n  if (result != 0) {\n    FUN_08005674(PTR_s____src_main_c_080055f0,0x1ed);\n  }\n  return;\n}",
            "called": [
                "FUN_08005674",
                "FUN_0800438a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005598",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "initialize_data_section_08005598"
        },
        "FUN_08001030": {
            "renaming": {
                "FUN_08001030": "is_end_of_input_08001030",
                "in_CY": "input_char",
                "FUN_08000fc8": "execute_preprocessing"
            },
            "code": "bool is_end_of_input_08001030(void)\n{\n  char input_char;\n  execute_preprocessing();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000fc8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001030",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "is_end_of_input_08001030"
        },
        "FUN_080011ec": {
            "renaming": {
                "uVar1": "result",
                "FUN_080011ec": "check_params_and_return_concat_080011ec",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4"
            },
            "code": "undefined8 check_params_and_return_concat_080011ec(int num1, int num2, int num3, int num4) {\n  if ((num4 == 0) && (num3 == 0)) {\n    if (num2 != 0 || num1 != 0) {\n      num2 = -1;\n      num1 = -1;\n    }\n    return CONCAT44(num2,num1);\n  }\n  undefined8 result = FUNC_0800121c();\n  return result;\n}",
            "called": [
                "FUN_0800121c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011ec",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "check_params_and_return_concat_080011ec"
        },
        "FUN_08004424": {
            "renaming": {
                "FUN_08004424": "do_nothing_08004424"
            },
            "code": "\nvoid do_nothing_08004424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004424",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": true,
            "current_name": "do_nothing_08004424"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004436": "print_bytes",
                "FUN_08004f3c": "print_data_at_address_08004f3c",
                "param_1": "address",
                "param_2": "length"
            },
            "code": "void print_data_at_address_08004f3c(void* address, int length)\n{\n  print_bytes(address, length, 0x32);\n  return;\n}",
            "called": [
                "FUN_08004436"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "print_data_at_address_08004f3c"
        },
        "FUN_08009adc": {
            "renaming": {
                "FUN_08009adc": "FUNC_08009adc"
            },
            "code": "\nint * FUNC_08009adc(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int *piVar2;\n  int iVar3;\n  int *piVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  int *piVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  int iVar12;\n  \n  if (param_2 == (int *)0x0) {\n    piVar4 = (int *)FUNC_08008af8(param_1,param_3);\n    return piVar4;\n  }\n  FUN_080090a8();\n  puVar1 = PTR_DAT_08009e38;\n  uVar7 = param_2[-1];\n  uVar10 = uVar7 & 0xfffffffc;\n  piVar4 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_08009b8e;\n  }\n  if (uVar9 < param_3) {\nLAB_08009b8e:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  iVar12 = (int)piVar4 + uVar10;\n  uVar11 = uVar10;\n  if ((int)uVar10 < (int)uVar9) {\n    if (*(int *)(PTR_DAT_08009e38 + 8) == iVar12) {\n      iVar12 = (*(uint *)(*(int *)(PTR_DAT_08009e38 + 8) + 4) & 0xfffffffc) + uVar10;\n      if ((int)(uVar9 + 0x10) <= iVar12) {\n        *(uint *)(PTR_DAT_08009e38 + 8) = (int)piVar4 + uVar9;\n        *(uint *)((int)piVar4 + uVar9 + 4) = iVar12 - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        FUN_080090b4(param_1);\n        return param_2;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        if ((int)(uVar9 + 0x10) <= (int)(iVar12 + uVar7)) {\n          iVar6 = piVar2[3];\n          piVar4 = piVar2 + 2;\n          iVar3 = *piVar4;\n          uVar10 = uVar10 - 4;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          *(int *)(iVar6 + 8) = iVar3;\n          if (uVar10 < 0x25) {\n            iVar3 = *param_2;\n            piVar8 = piVar4;\n            if (0x13 < uVar10) {\n              piVar2[2] = iVar3;\n              piVar2[3] = param_2[1];\n              iVar3 = param_2[2];\n              if (uVar10 < 0x1c) {\n                param_2 = param_2 + 2;\n                piVar8 = piVar2 + 4;\n              }\n              else {\n                piVar2[4] = iVar3;\n                piVar2[5] = param_2[3];\n                iVar3 = param_2[4];\n                if (uVar10 == 0x24) {\n                  piVar2[6] = iVar3;\n                  piVar2[7] = param_2[5];\n                  iVar3 = param_2[6];\n                  param_2 = param_2 + 6;\n                  piVar8 = piVar2 + 8;\n                }\n                else {\n                  param_2 = param_2 + 4;\n                  piVar8 = piVar2 + 6;\n                }\n              }\n            }\n            *piVar8 = iVar3;\n            piVar8[1] = param_2[1];\n            piVar8[2] = param_2[2];\n          }\n          else {\n            FUN_08009a18(piVar4,param_2);\n          }\n          *(uint *)(puVar1 + 8) = (int)piVar2 + uVar9;\n          *(uint *)((int)piVar2 + uVar9 + 4) = (iVar12 + uVar7) - uVar9 | 1;\n          piVar2[1] = uVar9 | piVar2[1] & 1U;\n          FUN_080090b4(param_1);\n          return piVar4;\n        }\nLAB_08009bb0:\n        uVar11 = uVar10 + uVar7;\n        if ((int)uVar9 <= (int)uVar11) {\n          iVar6 = piVar2[3];\n          piVar8 = piVar2 + 2;\n          iVar3 = *piVar8;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar2 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (uVar10 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          FUN_08009a18(piVar8,param_2);\n          param_2 = piVar8;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(iVar12 + 4) & 0xfffffffe) + iVar12 + 4) << 0x1f) {\n        uVar5 = *(uint *)(iVar12 + 4) & 0xfffffffc;\n        uVar11 = uVar10 + uVar5;\n        if ((int)uVar11 < (int)uVar9) {\n          if ((int)(uVar7 << 0x1f) < 0) goto LAB_08009b36;\n          piVar2 = (int *)((int)piVar4 - param_2[-2]);\n          uVar7 = piVar2[1] & 0xfffffffc;\n          uVar11 = uVar5 + uVar7 + uVar10;\n          if ((int)uVar11 < (int)uVar9) goto LAB_08009bb0;\n          iVar3 = *(int *)(iVar12 + 8);\n          iVar12 = *(int *)(iVar12 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar12;\n          *(int *)(iVar12 + 8) = iVar3;\n          piVar8 = piVar2 + 2;\n          iVar3 = *piVar8;\n          iVar6 = piVar2[3];\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar2 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (0x24 < uVar10 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          uVar10 = uVar10 - 4;\n          iVar3 = *param_2;\n          piVar2 = piVar8;\n          if (0x13 < uVar10) {\n            piVar4[2] = iVar3;\n            piVar4[3] = param_2[1];\n            iVar3 = param_2[2];\n            if (uVar10 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar4 + 4;\n            }\n            else {\n              piVar4[4] = iVar3;\n              piVar4[5] = param_2[3];\n              iVar3 = param_2[4];\n              if (uVar10 == 0x24) {\n                piVar4[6] = iVar3;\n                piVar4[7] = param_2[5];\n                iVar3 = param_2[6];\n                param_2 = param_2 + 6;\n                piVar2 = piVar4 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar4 + 6;\n              }\n            }\n          }\n          *piVar2 = iVar3;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          param_2 = piVar8;\n        }\n        else {\n          iVar3 = *(int *)(iVar12 + 8);\n          iVar6 = *(int *)(iVar12 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar4 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    piVar2 = (int *)FUNC_08008af8(param_1,param_3);\n    if (piVar2 != (int *)0x0) {\n      if ((int *)((param_2[-1] & 0xfffffffeU) + (int)piVar4) == piVar2 + -2) {\n        uVar11 = uVar10 + (piVar2[-1] & 0xfffffffcU);\n        iVar12 = (int)piVar4 + uVar11;\n        goto LAB_08009c00;\n      }\n      uVar10 = uVar10 - 4;\n      if (uVar10 < 0x25) {\n        iVar12 = *param_2;\n        piVar4 = param_2;\n        piVar8 = piVar2;\n        if (0x13 < uVar10) {\n          *piVar2 = iVar12;\n          piVar2[1] = param_2[1];\n          if (uVar10 < 0x1c) {\n            iVar12 = param_2[2];\n            piVar4 = param_2 + 2;\n            piVar8 = piVar2 + 2;\n          }\n          else {\n            piVar2[2] = param_2[2];\n            piVar2[3] = param_2[3];\n            if (uVar10 == 0x24) {\n              piVar2[4] = param_2[4];\n              piVar2[5] = param_2[5];\n              iVar12 = param_2[6];\n              piVar4 = param_2 + 6;\n              piVar8 = piVar2 + 6;\n            }\n            else {\n              iVar12 = param_2[4];\n              piVar4 = param_2 + 4;\n              piVar8 = piVar2 + 4;\n            }\n          }\n        }\n        *piVar8 = iVar12;\n        piVar8[1] = piVar4[1];\n        piVar8[2] = piVar4[2];\n      }\n      else {\n        FUN_08009a18(piVar2,param_2);\n      }\n      FUNC_080088ec(param_1,param_2);\n    }\n    FUN_080090b4(param_1);\n    param_2 = piVar2;\n  }\n  else {\nLAB_08009c00:\n    if (uVar11 - uVar9 < 0x10) {\n      piVar4[1] = piVar4[1] & 1U | uVar11;\n      *(uint *)(iVar12 + 4) = *(uint *)(iVar12 + 4) | 1;\n    }\n    else {\n      piVar4[1] = piVar4[1] & 1U | uVar9;\n      *(uint *)((int)piVar4 + uVar9 + 4) = uVar11 - uVar9 | 1;\n      *(uint *)(iVar12 + 4) = *(uint *)(iVar12 + 4) | 1;\n      FUNC_080088ec(param_1,(int)piVar4 + uVar9 + 8);\n    }\n    FUN_080090b4(param_1);\n  }\n  return param_2;\n}\n\n",
            "called": [
                "FUN_080090b4",
                "FUN_08009a18",
                "FUN_080088ec",
                "FUN_080090a8",
                "FUN_08008af8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009adc",
            "calling": [
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "FUNC_08009adc"
        },
        "FUN_08003696": {
            "renaming": {
                "FUN_08003696": "do_nothing_08003696"
            },
            "code": "\nvoid do_nothing_08003696(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003696",
            "calling": [
                "FUN_08003640"
            ],
            "imported": true,
            "current_name": "do_nothing_08003696"
        },
        "FUN_08002640": {
            "renaming": {
                "iVar1": "loop_counter",
                "FUN_08002640": "set_param_and_call_function_08002640",
                "param_1": "param_ptr",
                "param_6": "param_6",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "uVar2": "result"
            },
            "code": "uint32_t set_param_and_call_function_08002640(uint32_t **param_ptr, uint8_t param_2, uint16_t param_3, uint16_t param_4, uint32_t param_5, int param_6) {\n  uint32_t result = 0;\n  **param_ptr |= 0x100;\n  while (((*param_ptr)[5] & 1) == 0) {\n    if ((param_5 == 0xffffffff) || ((param_5 != 0) && (FUN_080015a0() - param_6 <= param_5))) {\n      param_ptr[0xc] = NULL;\n      param_ptr[0xf] = NULL;\n      param_ptr[0x3d] = 0x20;\n      param_ptr[0x3e] = 0;\n      result = 3;\n      goto LAB_0800272a;\n    }\n  }\n  if (param_4 == 1) {\n    (*param_ptr)[4] = param_2 & 0xfe;\n  } else {\n    (*param_ptr)[4] = (uint32_t)(param_3 >> 8);\n    if (FUN_08002bb4(param_ptr, param_5, param_6, (*param_ptr)[6]) != 0) {\n      if (param_ptr[0x10] == (uint32_t *)0x4) {\n        **param_ptr |= 0x200;\n        result = 1;\n        goto LAB_0800272a;\n      }\n      result = 3;\n      goto LAB_0800272a;\n    }\n    (*param_ptr)[4] = param_2 & 0xfe;\n  }\n  if (FUN_08002ad8(param_ptr, DAT_080027f0, param_5, param_6) != 0) {\n    if (param_ptr[0x10] == (uint32_t *)0x4) {\n      result = 1;\n      goto LAB_0800272a;\n    }\n    result = 3;\n    goto LAB_0800272a;\n  }\n  if (FUN_08002bb4(param_ptr, param_5, param_6, (*param_ptr)[6]) != 0) {\n    if (param_ptr[0x10] == (uint32_t *)0x4) {\n      **param_ptr |= 0x200;\n      result = 1;\n      goto LAB_0800272a;\n    }\n    result = 3;\n    goto LAB_0800272a;\n  }\n  result = 0;\nLAB_0800272a:\n  return result;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002bb4",
                "FUN_08002ad8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002640",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": true,
            "current_name": "set_param_and_call_function_08002640"
        },
        "FUN_080008fc": {
            "renaming": {
                "bVar2": "is_equal1",
                "bVar3": "is_greater",
                "uVar1": "xor_value",
                "param_1": "value1",
                "FUN_080008fc": "compare_values_080008fc",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "code": "uint compare_values_080008fc(uint value1, uint value2, uint value3, uint value4)\n{\n  bool is_negative1 = ((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1);\n  bool is_negative2 = ((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0));\n  bool is_negative3 = ((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0));\n  if (is_negative1 && (is_negative2 || is_negative3)) {\n    return 1;\n  }\n  bool is_equal1 = (value1 | value2 << 1) == 0;\n  bool is_equal2 = (value3 | value4 << 1) == 0;\n  if (!is_equal1 && !is_equal2 && value2 != value4 && value1 != value3) {\n    uint xor_value = value2 ^ value4;\n    bool is_equal3 = xor_value == 0;\n    if (-1 < (int)xor_value) {\n      is_equal3 = value2 == value4;\n    }\n    bool is_greater = -1 < (int)xor_value && value4 <= value2;\n    if (is_equal3) {\n      is_greater = value3 <= value1;\n    }\n    uint result = (int)value4 >> 0x1f;\n    if (!is_greater) {\n      result = ~result;\n    }\n    return result | 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [
                "FUN_08000988"
            ],
            "imported": true,
            "current_name": "compare_values_080008fc"
        },
        "FUN_08000988": {
            "renaming": {
                "param_1": "input_param",
                "FUN_080008fc": "call_some_other_function",
                "FUN_08000988": "execute_function_08000988"
            },
            "code": "undefined4 execute_function_08000988(undefined4 input_param)\n{\n  call_some_other_function();\n  return input_param;\n}",
            "called": [
                "FUN_080008fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000988",
            "calling": [
                "FUN_08000998",
                "FUN_080009ac",
                "FUN_080009c0",
                "FUN_08000978"
            ],
            "imported": true,
            "current_name": "execute_function_08000988"
        },
        "FUN_08001714": {
            "renaming": {
                "param_1": "parameter",
                "FUN_08001714": "call_function_with_parameter_08001714",
                "FUN_080015b4": "call_some_other_function"
            },
            "code": "void call_function_with_parameter_08001714(void* parameter)\n{\n  call_some_other_function(parameter);\n  return;\n}",
            "called": [
                "FUN_080015b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001714",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": true,
            "current_name": "call_function_with_parameter_08001714"
        },
        "FUN_08005dfc": {
            "renaming": {
                "local_70": "unused",
                "local_80": "reversed_string",
                "local_6c": "unused",
                "uStack_8": "unused",
                "param_1": "string_to_reverse",
                "uStack_4": "unused",
                "uStack_74": "max_index",
                "FUN_08005dfc": "reverse_and_clear_string_08005dfc",
                "param_2": "string_length",
                "param_3": "param_3",
                "param_4": "param_4",
                "local_78": "i"
            },
            "code": "void reverse_and_clear_string_08005dfc(char *string_to_reverse, int string_length, int param_3, int param_4)\n{\n  char *reversed_string = malloc(string_length + 1);\n  int i;\n  int max_index = string_length - 1;\n  for(i = 0; i < string_length; i++)\n  {\n    reversed_string[max_index - i] = string_to_reverse[i];\n  }\n  reversed_string[string_length] = '\\0';\n  free(reversed_string);\n  return;\n}",
            "called": [
                "FUN_08005e9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dfc",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "reverse_and_clear_string_08005dfc"
        },
        "FUN_080078c0": {
            "renaming": {
                "iVar3": "temp2",
                "uVar1": "temp1",
                "iVar4": "divisor_len",
                "iVar5": "i",
                "puVar2": "dividend_ptr",
                "puVar11": "current_divisor_ptr",
                "puVar12": "next_divisor_ptr",
                "param_1": "dividend",
                "puVar7": "divisor_ptr",
                "puVar8": "dividend_arr",
                "puVar9": "last_divisor_ptr",
                "FUN_080078c0": "divide_and_conquer_080078c0",
                "param_2": "divisor",
                "uVar6": "quotient"
            },
            "code": "uint divide_and_conquer_080078c0(uint dividend, uint divisor)\n{\n  uint quotient;\n  uint *divisor_arr;\n  int divisor_len;\n  uint *dividend_arr;\n  int dividend_len;\n  uint *dividend_ptr;\n  uint *divisor_ptr;\n  uint temp;\n  int i;\n  int j;\n  int k;\n  if (divisor_len <= 0)\n  {\n    return 0;\n  }\n  if (dividend_len < divisor_len)\n  {\n    return 0;\n  }\n  divisor_ptr = divisor_arr + divisor_len - 1;\n  dividend_ptr = dividend_arr + divisor_len - 1;\n  quotient = *dividend_ptr / (*divisor_ptr + 1);\n  if (quotient != 0)\n  {\n    i = 0;\n    j = 0;\n    do\n    {\n      divisor_ptr = divisor_arr + i + 1;\n      temp = quotient * (*divisor_arr + i) + j;\n      k = temp >> 16;\n      j = dividend_arr[i] - (temp & 0xFFFF) + (dividend_arr + i + 1);\n      k = k - ((dividend_arr + i + 1) >> 16);\n      dividend_arr[i] = (j & 0xFFFF) | (k << 16);\n      j = k;\n      i++;\n    } while (i <= divisor_len - 1);\n    if (dividend_arr[divisor_len - 1] == 0)\n    {\n      if ((dividend_arr < dividend_arr + dividend_len - 2) && (dividend_arr[dividend_len - 2] == 0))\n      {\n        dividend_ptr = dividend_arr + dividend_len - 3;\n        do\n        {\n          divisor_len--;\n          if (dividend_ptr <= dividend_arr)\n            break;\n          temp = *dividend_ptr;\n          dividend_ptr--;\n        } while (temp == 0);\n      }\n      dividend_len = divisor_len;\n    }\n  }\n  j = FUN_080094f8();\n  if (j >= 0)\n  {\n    j = 0;\n    quotient++;\n    i = 0;\n    do\n    {\n      divisor_ptr = divisor_arr + i + 1;\n      temp = j - (*divisor_arr + i) + dividend_arr + i;\n      k = temp >> 16;\n      j = *dividend_ptr - (*divisor_ptr >> 16) + k;\n      k = k - ((*dividend_ptr + k) >> 16);\n      *dividend_ptr = (j & 0xFFFF) | (k << 16);\n      j = k;\n      i++;\n    } while (i <= divisor_len - 1);\n    if (dividend_arr[divisor_len - 1] == 0)\n    {\n      if ((dividend_arr < dividend_arr + dividend_len - 1) && (dividend_arr[dividend_len - 1] == 0))\n      {\n        dividend_ptr = dividend_arr + dividend_len - 2;\n        do\n        {\n          divisor_len--;\n          if (dividend_ptr <= dividend_arr)\n            break;\n          temp = *dividend_ptr;\n          dividend_ptr--;\n        } while (temp == 0);\n      }\n      dividend_len = divisor_len;\n    }\n  }\n  return quotient;\n}",
            "called": [
                "FUN_080094f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078c0",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "divide_and_conquer_080078c0"
        },
        "thunk_FUN_08005838": {
            "renaming": {
                "iVar1": "difference",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "thunk_FUN_08005838": "improved_08005838_thunk_08005838",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar3": "sign_bit_2",
                "uVar2": "result_high",
                "uVar5": "sign_bit_4",
                "uVar4": "result_low",
                "uVar6": "concat_result"
            },
            "code": "uint improved_08005838_thunk_08005838(uint param_1,uint param_2,uint param_3,uint param_4)\n{\n  int difference;\n  undefined4 result_high;\n  uint result_low;\n  uint sign_bit_2;\n  uint sign_bit_4;\n  uint sign_bit_sum;\n  uint uVar5;\n  uint uVar6;\n  undefined8 concat_result;\n  concat_result = CONCAT44(DAT_080059bc,DAT_080059b8);\n  sign_bit_4 = param_4 & 0x7fffffff;\n  sign_bit_sum = (-param_3 | param_3) >> 0x1f;\n  if ((DAT_080059e8 < (sign_bit_4 | sign_bit_sum)) ||\n     (uVar5 = param_2 & 0x7fffffff, DAT_080059e8 < (uVar5 | (-param_1 | param_1) >> 0x1f))) {\n    result_low = FUNC_0800015c(param_3,param_4,param_1,param_2);\n    return result_low;\n  }\n  if ((param_4 + 0xc0100000 | param_3) == 0) {\n    result_low = FUNC_080059f0();\n    return result_low;\n  }\n  sign_bit_2 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n  if ((uVar5 | param_1) == 0) {\n    if (sign_bit_2 == 2) {\n      return DAT_080059b0;\n    }\n    result_low = DAT_080059a0;\n    if (sign_bit_2 != 3) {\n      return param_1;\n    }\n  }\n  else {\n    sign_bit_4 = DAT_080059e8;\n    if ((sign_bit_4 | param_3) != 0) {\n      if (sign_bit_4 == sign_bit_4) {\n        if (uVar5 == sign_bit_4) {\n          if (sign_bit_2 == 2) {\n            return DAT_080059e0;\n          }\n          if (sign_bit_2 == 3) {\n            return DAT_080059d8;\n          }\n          if (sign_bit_2 == 1) {\n            return DAT_080059d0;\n          }\n          return DAT_080059c8;\n        }\n        if (sign_bit_2 == 2) {\n          return DAT_080059b0;\n        }\n        if (sign_bit_2 == 3) {\n          return DAT_080059a0;\n        }\n        if (sign_bit_2 == 1) {\n          return 0;\n        }\n        return 0;\n      }\n      if (uVar5 != DAT_080059e8) {\n        difference = (int)(uVar5 - sign_bit_4) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)param_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            concat_result = 0;\n          }\n          else {\n            FUNC_0800071c(param_1,param_2,param_3,param_4,param_4);\n            do_nothing_08005d0c();\n            concat_result = FUNC_080059f0();\n          }\n        }\n        result_high = (undefined4)((ulonglong)concat_result >> 0x20);\n        result_low = (uint)concat_result;\n        if (sign_bit_2 == 1) {\n          return result_low;\n        }\n        if (sign_bit_2 == 2) {\n          concat_result = FUNC_08000158(result_low,result_high,DAT_080059a8,DAT_080059ac);\n          result_low = FUNC_08000158(DAT_080059b0,DAT_080059b4,(int)concat_result,(int)((ulonglong)concat_result >> 0x20));\n          return result_low;\n        }\n        if (sign_bit_2 == 0) {\n          return result_low;\n        }\n        concat_result = FUNC_08000158(result_low,result_high,DAT_080059a8,DAT_080059ac);\n        result_low = FUNC_08000158((int)concat_result,(int)((ulonglong)concat_result >> 0x20),DAT_080059b0,DAT_080059b4);\n        return result_low;\n      }\n    }\n    result_low = DAT_080059c0;\n    if (-1 < (int)param_2) {\n      result_low = DAT_080059b8;\n    }\n  }\n  return result_low;\n}",
            "called": [
                "FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005834",
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "imported": true,
            "current_name": "improved_08005838_thunk_08005838"
        },
        "FUN_080003f4": {
            "renaming": {
                "uVar1": "mask",
                "iVar4": "leading_zeroes",
                "param_1": "input",
                "FUN_080003f4": "calculate_bitshifted_value_080003f4",
                "uVar3": "shift_amount",
                "uVar2": "absolute_input",
                "bVar9": "is_shift_amount_negative",
                "uVar5": "trailing_zeroes",
                "uVar6": "mask",
                "in_r12": "in_r12",
                "bVar8": "is_trailing_zeroes_zero",
                "bVar7": "is_trailing_zeroes_negative"
            },
            "code": "ulonglong calculate_bitshifted_value_080003f4(uint input)\n{\n  uint mask = 0x80000000;\n  uint absolute_input = input;\n  if ((int)mask < 0) {\n    absolute_input = -input;\n  }\n  uint shift_amount = 0;\n  int leading_zeroes = count_leading_zeroes(absolute_input);\n  shift_amount = leading_zeroes + 0x15;\n  bool is_shift_amount_negative = SBORROW4(shift_amount,0x20);\n  uint trailing_zeroes = leading_zeroes - 0xb;\n  bool is_trailing_zeroes_negative = (int)trailing_zeroes < 0;\n  bool is_trailing_zeroes_zero = trailing_zeroes == 0;\n  if ((int)shift_amount < 0x20) {\n    is_shift_amount_negative = SCARRY4(trailing_zeroes,0xc);\n    leading_zeroes = leading_zeroes + 1;\n    is_trailing_zeroes_negative = leading_zeroes < 0;\n    is_trailing_zeroes_zero = leading_zeroes == 0;\n    trailing_zeroes = shift_amount;\n    if (!is_trailing_zeroes_zero && is_trailing_zeroes_negative == is_shift_amount_negative) {\n      uint shifted_input = absolute_input << (shift_amount & 0xff);\n      absolute_input = absolute_input >> (0xcU - leading_zeroes & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  uint in_r12 = 0;\n  if (is_trailing_zeroes_zero || is_trailing_zeroes_negative != is_shift_amount_negative) {\n    in_r12 = 0x20 - shift_amount;\n  }\n  uint shifted_input = absolute_input << (trailing_zeroes & 0xff);\n  if (is_trailing_zeroes_zero || is_trailing_zeroes_negative != is_shift_amount_negative) {\n    shifted_input = shifted_input | 0U >> (in_r12 & 0xff);\n  }\n  uint result = 0;\n  if (is_trailing_zeroes_zero || is_trailing_zeroes_negative != is_shift_amount_negative) {\n    result = 0 << (trailing_zeroes & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shift_amount < 0x433) {\n    return CONCAT44(shifted_input + (0x432 - shift_amount) * 0x100000 | mask,result);\n  }\n  uint shift_amount_complement = ~(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount_complement) {\n    return CONCAT44(input,shifted_input >> (shift_amount_complement - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  int shift_amount_difference = shift_amount_complement - 0x13;\n  if (shift_amount_difference == 0 || shift_amount_difference < 0 != SCARRY4(shift_amount_complement - 0x1f,0xc)) {\n    shift_amount_complement = shift_amount_complement + 1;\n    return CONCAT44(mask | shifted_input >> (shift_amount_complement & 0xff),\n                    result >> (shift_amount_complement & 0xff) | shifted_input << (0x20 - shift_amount_complement & 0xff));\n  }\n  return CONCAT44(input,result >> (0x20 - (0xcU - shift_amount_difference) & 0xff) | shifted_input << (0xcU - shift_amount_difference & 0xff))\n         & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003f4",
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "calculate_bitshifted_value_080003f4"
        },
        "FUN_080079e8": {
            "renaming": {
                "FUN_080079e8": "FUNC_080079e8"
            },
            "code": "\nchar * FUNC_080079e8(int param_1,undefined4 param_2,uint param_3,uint param_4,uint param_5,\n                   uint param_6,int *param_7,uint *param_8,char **param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  int iVar13;\n  char *pcVar14;\n  char *pcVar15;\n  undefined4 *puVar16;\n  undefined4 uVar17;\n  char *pcVar18;\n  int iVar19;\n  bool bVar20;\n  undefined8 uVar21;\n  undefined8 uVar22;\n  undefined8 uVar23;\n  uint local_80;\n  uint local_7c;\n  uint local_74;\n  int local_70;\n  uint local_68;\n  uint local_64;\n  int local_60;\n  int local_5c;\n  uint local_58;\n  int local_54;\n  uint local_48;\n  uint uStack_44;\n  uint local_38;\n  uint local_34;\n  int local_30;\n  int local_2c [2];\n  \n  iVar9 = *(int *)(param_1 + 0x40);\n  if (iVar9 != 0) {\n    uVar12 = *(uint *)(param_1 + 0x44);\n    *(uint *)(iVar9 + 4) = uVar12;\n    *(int *)(iVar9 + 8) = 1 << (uVar12 & 0xff);\n    FUN_0800910c(param_1,iVar9);\n    *(undefined4 *)(param_1 + 0x40) = 0;\n  }\n  bVar20 = (int)param_4 < 0;\n  uVar12 = param_4;\n  if (bVar20) {\n    uVar12 = param_4 & 0x7fffffff;\n  }\n  *param_8 = (uint)bVar20;\n  local_7c = param_4;\n  if (bVar20) {\n    local_7c = uVar12;\n  }\n  uVar4 = local_7c;\n  if ((DAT_08007bf8 & ~uVar12) == 0) {\n    *param_7 = 9999;\n    if ((param_3 == 0) && ((uVar12 & 0xfffff) == 0)) {\n      if (param_9 == (char **)0x0) {\n        return PTR_s_Infinity_08007c08;\n      }\n      pcVar15 = PTR_s_Infinity_08007c08 + 8;\n      pcVar18 = PTR_s_Infinity_08007c08;\n    }\n    else {\n      if (param_9 == (char **)0x0) {\n        return PTR_DAT_08007c0c;\n      }\n      pcVar15 = PTR_DAT_08007c0c + 3;\n      pcVar18 = PTR_DAT_08007c0c;\n    }\n    *param_9 = pcVar15;\n    return pcVar18;\n  }\n  uVar21 = FUN_08000998(param_3,local_7c,0,0);\n  local_60 = (int)uVar21;\n  if (local_60 != 0) {\n    *param_7 = 1;\n    if (param_9 != (char **)0x0) {\n      pcVar18 = PTR_DAT_08007bfc + -1;\n      *param_9 = PTR_DAT_08007bfc;\n      return pcVar18;\n    }\n    return PTR_DAT_08007c10;\n  }\n  uVar3 = FUN_08009630(param_1,(int)((ulonglong)uVar21 >> 0x20),param_3,local_7c,local_2c,&local_30)\n  ;\n  iVar9 = local_30;\n  if (uVar12 >> 0x14 == 0) {\n    iVar13 = local_2c[0] + local_30;\n    iVar10 = iVar13 + 0x432;\n    if (iVar10 < 0x21) {\n      uVar12 = param_3 << (0x20U - iVar10 & 0xff);\n    }\n    else {\n      uVar12 = param_3 >> (iVar13 + 0x412U & 0xff) | uVar12 << (0x40U - iVar10 & 0xff);\n    }\n    uVar21 = FUN_080003d4(uVar12);\n    iVar13 = iVar13 + -1;\n    local_60 = 1;\n    uVar5 = (int)((ulonglong)uVar21 >> 0x20) + 0xfe100000;\n    uVar12 = (uint)uVar21;\n  }\n  else {\n    iVar13 = (uVar12 >> 0x14) - 0x3ff;\n    uVar5 = local_7c & 0xfffff | 0x3ff00000;\n    uVar12 = param_3;\n  }\n  uVar21 = FUNC_08000158(uVar12,uVar5,0,DAT_08007c00);\n  uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be0,DAT_08007be4);\n  uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be8,DAT_08007bec);\n  uVar22 = FUN_080003f4(iVar13);\n  uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08007bf0,DAT_08007bf4);\n  uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar22,\n                        (int)((ulonglong)uVar22 >> 0x20));\n  uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n  local_74 = FUN_0800119c();\n  iVar10 = FUN_080009ac((int)uVar21,uVar8,0,0);\n  if (iVar10 != 0) {\n    uVar22 = FUN_080003f4(local_74);\n    iVar10 = FUN_08000998((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar8);\n    if (iVar10 == 0) {\n      local_74 = local_74 - 1;\n    }\n  }\n  if (local_74 < 0x17) {\n    local_54 = FUN_080009e8(*(undefined4 *)(PTR_DAT_08007c04 + local_74 * 8),\n                            *(undefined4 *)((int)(PTR_DAT_08007c04 + local_74 * 8) + 4),param_3,\n                            local_7c);\n    if (local_54 != 0) {\n      local_74 = local_74 - 1;\n      local_54 = 0;\n    }\n  }\n  else {\n    local_54 = 1;\n  }\n  iVar10 = (iVar9 - iVar13) + -1;\n  if (iVar10 < 0) {\n    local_70 = 1 - (iVar9 - iVar13);\n    iVar10 = 0;\n  }\n  else {\n    local_70 = 0;\n  }\n  if ((int)local_74 < 0) {\n    local_58 = 0;\n    local_70 = local_70 - local_74;\n    local_5c = -local_74;\n  }\n  else {\n    iVar10 = iVar10 + local_74;\n    local_58 = local_74;\n    local_5c = 0;\n  }\n  if (9 < param_5) {\n    local_38 = 0xffffffff;\n    bVar20 = true;\n    local_68 = 0xffffffff;\n    local_64 = 1;\n    param_5 = 0;\n    param_6 = 0;\n    goto LAB_08007c24;\n  }\n  bVar20 = (int)param_5 < 6;\n  if (!bVar20) {\n    param_5 = param_5 - 4;\n  }\n  switch(param_5) {\n  case 2:\n    local_64 = 0;\n    break;\n  case 3:\n    local_64 = 0;\n    goto LAB_08008300;\n  case 4:\n    local_64 = 1;\n    break;\n  case 5:\n    local_64 = 1;\nLAB_08008300:\n    local_38 = local_74 + param_6;\n    local_68 = local_38 + 1;\n    uVar12 = local_68;\n    if ((int)local_68 < 1) {\n      uVar12 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    pcVar18 = (char *)FUN_080090c0(param_1,0);\n    local_38 = 0xffffffff;\n    local_68 = 0xffffffff;\n    param_6 = 0;\n    *(char **)(param_1 + 0x40) = pcVar18;\n    local_64 = 1;\n    goto LAB_08007e36;\n  }\n  if ((int)param_6 < 1) {\n    local_38 = 1;\n    param_6 = 1;\n    local_68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_38;\n  }\n  else {\n    local_38 = param_6;\n    local_68 = param_6;\n    uVar12 = param_6;\nLAB_08008314:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_68;\n    if (0x17 < (int)uVar12) {\n      iVar13 = 4;\n      iVar9 = 1;\n      do {\n        iVar19 = iVar9;\n        iVar13 = iVar13 * 2;\n        iVar9 = iVar19 + 1;\n      } while (iVar13 + 0x14U <= uVar12);\n      *(int *)(param_1 + 0x44) = iVar19;\n    }\n  }\n  pcVar18 = (char *)FUN_080090c0(param_1);\n  *(char **)(param_1 + 0x40) = pcVar18;\n  if ((uVar5 < 0xf) && (bVar20)) {\n    if ((int)local_74 < 1) {\n      if (local_74 == 0) {\n        iVar9 = 2;\n        local_80 = param_3;\n      }\n      else {\n        uVar21 = FUNC_080004c8(param_3,local_7c,\n                              *(undefined4 *)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8),\n                              *(undefined4 *)((int)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8) + 4));\n        local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n        local_80 = (uint)uVar21;\n        iVar13 = (int)-local_74 >> 4;\n        if (iVar13 == 0) {\n          iVar9 = 2;\n        }\n        else {\n          bVar20 = false;\n          iVar9 = 2;\n          puVar16 = (undefined4 *)PTR_DAT_080086d0;\n          do {\n            if (iVar13 << 0x1f < 0) {\n              uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),*puVar16,puVar16[1]\n                                   );\n              bVar20 = true;\n              iVar9 = iVar9 + 1;\n            }\n            iVar13 = iVar13 >> 1;\n            puVar16 = puVar16 + 2;\n          } while (iVar13 != 0);\n          if (bVar20) {\n            local_80 = (uint)uVar21;\n            local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar12 = (int)local_74 >> 4;\n      uVar21 = *(undefined8 *)(PTR_DAT_08007ec4 + (local_74 & 0xf) * 8);\n      if ((int)(uVar12 << 0x1b) < 0) {\n        uVar22 = FUNC_0800071c(param_3,local_7c,*(undefined4 *)(PTR_DAT_08007ec8 + 0x20),\n                              *(undefined4 *)(PTR_DAT_08007ec8 + 0x24));\n        uStack_44 = (uint)((ulonglong)uVar22 >> 0x20);\n        local_48 = (uint)uVar22;\n        iVar9 = 3;\n        uVar12 = uVar12 & 0xf;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n      }\n      else {\n        iVar9 = 2;\n        uStack_44 = local_7c;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n        local_48 = param_3;\n      }\n      while( true ) {\n        uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        if (uVar12 == 0) break;\n        if ((int)(uVar12 << 0x1f) < 0) {\n          uVar21 = FUNC_080004c8((int)uVar21,uVar8,*puVar16,puVar16[1]);\n          iVar9 = iVar9 + 1;\n        }\n        uVar12 = (int)uVar12 >> 1;\n        puVar16 = puVar16 + 2;\n      }\n      uVar21 = FUNC_0800071c(local_48,uStack_44,(int)uVar21,uVar8);\n      local_80 = (uint)uVar21;\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n    }\n    uVar21 = CONCAT44(local_7c,local_80);\n    if ((local_54 != 0) && (iVar13 = FUN_080009ac(local_80,local_7c,0,DAT_08007ecc), iVar13 != 0)) {\n      if (local_68 == 0) {\n        uVar21 = FUN_080003f4(iVar9);\n        uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),local_80,local_7c);\n        uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d4);\n        uVar8 = (undefined4)uVar21;\n        iVar9 = (int)((ulonglong)uVar21 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_38) {\n        uVar21 = FUNC_080004c8(local_80,local_7c,0,DAT_0800880c);\n        uVar22 = FUN_080003f4(iVar9 + 1);\n        uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,\n                              (int)((ulonglong)uVar21 >> 0x20));\n        uVar22 = FUNC_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08008810);\n        uVar8 = (undefined4)uVar22;\n        local_48 = local_38;\n        local_34 = local_74 - 1;\n        iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar22 = FUN_080003f4(iVar9);\n    uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),local_80,local_7c);\n    uVar22 = FUNC_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed0);\n    uVar8 = (undefined4)uVar22;\n    iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n    if (local_68 != 0) {\n      local_34 = local_74;\n      local_48 = local_68;\nLAB_08007cfa:\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n      local_80 = (uint)uVar21;\n      cVar1 = FUN_0800119c(local_80,local_7c);\n      cVar1 = cVar1 + '0';\n      uVar11 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -8);\n      uVar7 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -4);\n      uVar21 = FUN_080003f4();\n      uVar21 = FUNC_08000158(local_80,local_7c,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n      uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n      pcVar15 = pcVar18 + 1;\n      if (local_64 == 0) {\n        uVar22 = FUNC_080004c8(uVar8,iVar9,uVar11,uVar7);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        if (local_48 != 1) {\n          pcVar14 = pcVar15;\n          do {\n            uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d8);\n            cVar1 = FUN_0800119c();\n            uVar23 = FUN_080003f4();\n            uVar21 = FUNC_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                  (int)((ulonglong)uVar23 >> 0x20));\n            pcVar15 = pcVar14 + 1;\n            *pcVar14 = cVar1 + '0';\n            pcVar14 = pcVar15;\n          } while (pcVar15 != pcVar18 + local_48);\n        }\n        uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        uVar23 = FUNC_0800015c((int)uVar22,uVar8,0,DAT_080086dc);\n        iVar9 = FUN_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar21,uVar11);\n        if (iVar9 == 0) {\n          uVar22 = FUNC_08000158(0,DAT_08008814,(int)uVar22,uVar8);\n          iVar9 = FUN_080009e8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar11);\n          pcVar14 = pcVar15;\n          if (iVar9 == 0) goto LAB_08007e36;\n          do {\n            pcVar15 = pcVar14;\n            pcVar14 = pcVar15 + -1;\n          } while (pcVar15[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_74 = local_34;\n        cVar1 = pcVar15[-1];\n      }\n      else {\n        uVar22 = FUNC_0800071c(0,DAT_08007ed4,uVar11,uVar7);\n        uVar22 = FUNC_08000158((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,iVar9);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        iVar9 = FUN_080009e8((int)uVar22,uVar8,(int)uVar21,uVar17);\n        if (iVar9 != 0) {\nLAB_08008784:\n          local_74 = local_34;\n          goto LAB_08008294;\n        }\n        uVar23 = FUNC_08000158(0,DAT_08007ecc,(int)uVar21,uVar17);\n        iVar9 = FUN_080009e8((int)uVar22,uVar8,(int)uVar23,(int)((ulonglong)uVar23 >> 0x20));\n        if (iVar9 == 0) {\n          if (local_48 != 1) {\n            pcVar14 = pcVar15;\n            do {\n              uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed8);\n              uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n              uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n              cVar1 = FUN_0800119c();\n              uVar23 = FUN_080003f4();\n              uVar21 = FUNC_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                    (int)((ulonglong)uVar23 >> 0x20));\n              uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n              cVar1 = cVar1 + '0';\n              pcVar15 = pcVar14 + 1;\n              *pcVar14 = cVar1;\n              iVar9 = FUN_080009ac((int)uVar21,uVar11,(int)uVar22,uVar8);\n              if (iVar9 != 0) {\n                local_74 = local_34;\n                goto LAB_08008294;\n              }\n              uVar23 = FUNC_08000158(0,DAT_08007ecc,(int)uVar21,uVar11);\n              iVar9 = FUN_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar22,uVar8);\n              if (iVar9 != 0) goto LAB_08008798;\n              pcVar14 = pcVar15;\n            } while (pcVar15 != pcVar18 + local_48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_74 = local_34;\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar21 = FUNC_08000158(local_80,local_7c,0,DAT_080086c8);\n    uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n    uVar12 = FUN_080009e8((int)uVar21,uVar11,uVar8,iVar9);\n    if (uVar12 == 0) {\n      iVar9 = FUN_080009ac((int)uVar21,uVar11,uVar8,iVar9 + -0x80000000);\n      uVar5 = uVar12;\n      pcVar15 = pcVar18;\n      if (iVar9 == 0) goto LAB_08007e36;\n      goto LAB_080084f0;\n    }\n    local_68 = 0;\n    uVar12 = 0;\nLAB_08008406:\n    *pcVar18 = '1';\n    local_74 = local_74 + 1;\n    pcVar15 = pcVar18 + 1;\n    uVar5 = local_68;\nLAB_08008416:\n    FUN_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar15 = pcVar18;\n    if ((-1 < local_2c[0]) && ((int)local_74 < 0xf)) {\n      uVar8 = *(undefined4 *)(PTR_DAT_08007ec4 + local_74 * 8);\n      uVar11 = *(undefined4 *)((int)(PTR_DAT_08007ec4 + local_74 * 8) + 4);\n      if ((-1 < (int)param_6) || (0 < (int)local_68)) {\n        FUNC_0800071c(param_3,uVar4,uVar8,uVar11);\n        bVar2 = FUN_0800119c();\n        uVar21 = FUN_080003f4();\n        uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),uVar8,uVar11);\n        uVar21 = FUNC_08000158(param_3,uVar4,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        *pcVar18 = bVar2 + 0x30;\n        pcVar15 = pcVar18 + 1;\n        if (local_68 != 1) {\n          uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n          iVar9 = FUN_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          while (iVar9 == 0) {\n            uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n            FUNC_0800071c((int)uVar21,uVar17,uVar8,uVar11);\n            bVar2 = FUN_0800119c();\n            uVar22 = FUN_080003f4();\n            uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,uVar11);\n            uVar21 = FUNC_08000158((int)uVar21,uVar17,(int)uVar22,(int)((ulonglong)uVar22 >> 0x20));\n            pcVar14 = pcVar15 + 1;\n            *pcVar15 = bVar2 + 0x30;\n            pcVar15 = pcVar14;\n            if (local_68 == (int)pcVar14 - (int)pcVar18) goto LAB_08007f3a;\n            uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080081f8);\n            iVar9 = FUN_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        iVar9 = FUN_080009e8((int)uVar21,uVar17,uVar8,uVar11);\n        if ((iVar9 == 0) &&\n           ((iVar9 = FUN_08000998((int)uVar21,uVar17,uVar8,uVar11), iVar9 == 0 || ((bVar2 & 1) == 0)\n            ))) goto LAB_08008294;\n        cVar1 = pcVar15[-1];\nLAB_08007f7c:\n        while (pcVar14 = pcVar15 + -1, cVar1 == '9') {\n          if (pcVar18 == pcVar14) {\n            *pcVar18 = '0';\n            cVar1 = pcVar15[-1];\n            local_74 = local_74 + 1;\n            pcVar14 = pcVar18;\n            break;\n          }\n          cVar1 = pcVar15[-2];\n          pcVar15 = pcVar14;\n        }\n        *pcVar14 = cVar1 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_68 == 0) {\n        uVar21 = FUNC_080004c8(uVar8,uVar11,0,DAT_080086c8);\n        iVar9 = FUN_080009d4((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),param_3,uVar4);\n        uVar12 = local_68;\n        uVar5 = local_68;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        uVar12 = 0;\n        uVar5 = 0;\n      }\nLAB_080084f0:\n      local_74 = ~param_6;\n      pcVar18 = pcVar15;\n      goto LAB_08008416;\n    }\n    iVar9 = local_5c;\n    if (local_64 == 0) {\n      local_60 = local_70;\n      uVar12 = local_64;\n    }\n    else {\n      if ((int)param_5 < 2) {\n        if (local_60 == 0) {\n          local_60 = local_70;\n          local_70 = local_70 + (0x36 - local_30);\n          iVar10 = iVar10 + (0x36 - local_30);\n        }\n        else {\n          local_60 = local_70;\n          local_70 = local_70 + local_2c[0] + 0x433;\n          iVar10 = iVar10 + local_2c[0] + 0x433;\n        }\n      }\n      else {\n        iVar13 = local_68 - 1;\n        if (local_5c < iVar13) {\n          local_58 = local_58 + (iVar13 - local_5c);\n          iVar9 = 0;\n          local_5c = iVar13;\n        }\n        else {\n          iVar9 = local_5c - iVar13;\n        }\n        if ((int)local_68 < 0) {\n          local_60 = local_70 - local_68;\n        }\n        else {\n          iVar10 = iVar10 + local_68;\n          local_60 = local_70;\n          local_70 = local_70 + local_68;\n        }\n      }\n      uVar12 = FUN_08009244(param_1,1);\n    }\n    if ((0 < local_60) && (0 < iVar10)) {\n      iVar13 = local_60;\n      if (iVar10 <= local_60) {\n        iVar13 = iVar10;\n      }\n      iVar10 = iVar10 - iVar13;\n      local_70 = local_70 - iVar13;\n      local_60 = local_60 - iVar13;\n    }\n    if (local_5c != 0) {\n      if (local_64 == 0) {\n        uVar3 = FUN_080093a4(param_1,uVar3,local_5c);\n      }\n      else {\n        uVar8 = uVar3;\n        if (iVar9 != 0) {\n          uVar12 = FUN_080093a4(param_1,uVar12,iVar9);\n          uVar8 = FUN_08009258(param_1,uVar12,uVar3);\n          FUN_0800910c(param_1,uVar3);\n          uVar3 = uVar8;\n          if (local_5c - iVar9 == 0) goto LAB_08008062;\n        }\n        uVar3 = FUN_080093a4(param_1,uVar8,local_5c - iVar9);\n      }\n    }\nLAB_08008062:\n    uVar5 = FUN_08009244(param_1,1);\n    if (local_58 == 0) {\n      if (((int)param_5 < 2) && (param_3 == 0)) {\nLAB_0800835a:\n        if ((uVar4 & 0xfffff) == 0) {\n          uVar4 = uVar4 & 0x7ff00000;\n          if (uVar4 != 0) {\n            iVar10 = iVar10 + 1;\n            local_70 = local_70 + 1;\n            uVar4 = 1;\n          }\n        }\n        else {\n          uVar4 = 0;\n        }\n        bVar20 = local_58 != 0;\n        uVar6 = param_3;\n        local_58 = uVar4;\n        if (bVar20) goto LAB_080082d4;\n      }\n      iVar9 = 1;\n    }\n    else {\n      uVar21 = FUN_080093a4(param_1,uVar5);\n      uVar5 = (uint)uVar21;\n      if (((int)param_5 < 2) && (param_3 == 0)) goto LAB_0800835a;\n      local_58 = 0;\n      uVar6 = (uint)((ulonglong)uVar21 >> 0x20);\nLAB_080082d4:\n      iVar9 = FUN_080091a4(*(undefined4 *)(uVar5 + *(int *)(uVar5 + 0x10) * 4 + 0x10),uVar6);\n      iVar9 = 0x20 - iVar9;\n    }\n    uVar4 = iVar9 + iVar10 & 0x1f;\n    if (uVar4 == 0) {\n      iVar9 = 0x1c;\nLAB_08008096:\n      iVar10 = iVar10 + iVar9;\n      local_70 = local_70 + iVar9;\n      local_60 = local_60 + iVar9;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar4)) {\n        iVar9 = 0x1c - uVar4;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar4 != 4) {\n        iVar9 = 0x3c - uVar4;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_70) {\n      uVar3 = FUN_08009444(param_1,uVar3,local_70);\n    }\n    if (0 < iVar10) {\n      uVar5 = FUN_08009444(param_1,uVar5,iVar10);\n    }\n    pcVar14 = pcVar18;\n    if ((local_54 != 0) && (iVar9 = FUN_080094f8(uVar3,uVar5), iVar9 < 0)) {\n      local_74 = local_74 - 1;\n      uVar3 = FUN_08009120(param_1,uVar3,10,0);\n      if (local_64 == 0) {\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_0800820a;\n        }\n      }\n      else {\n        uVar12 = FUN_08009120(param_1,uVar12,10,0);\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_080080de;\n        }\n      }\n      local_68 = local_38;\nLAB_080084e8:\n      if (local_68 == 0) {\n        local_68 = FUN_08009120(param_1,uVar5,5);\n        iVar9 = FUN_080094f8(uVar3,local_68);\n        uVar5 = local_68;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_68 < 1) && (2 < (int)param_5)) goto LAB_080084e8;\n    if (local_64 == 0) {\nLAB_0800820a:\n      while( true ) {\n        iVar19 = FUN_080078c0(uVar3,uVar5);\n        iVar19 = iVar19 + 0x30;\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        if ((int)local_68 <= (int)pcVar15 - (int)pcVar18) break;\n        uVar3 = FUN_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n      }\n      local_80 = 0;\n    }\n    else {\nLAB_080080de:\n      local_80 = uVar12;\n      if (0 < local_60) {\n        local_80 = FUN_08009444(param_1,uVar12,local_60);\n      }\n      uVar12 = local_80;\n      if (local_58 != 0) {\n        iVar9 = FUN_080090c0(param_1,*(undefined4 *)(local_80 + 4));\n        FUN_08001084(iVar9 + 0xc,local_80 + 0xc,(*(int *)(local_80 + 0x10) + 2) * 4);\n        uVar12 = FUN_08009444(param_1,iVar9,1);\n      }\nLAB_08008108:\n      iVar9 = FUN_080078c0(uVar3,uVar5);\n      iVar13 = FUN_080094f8(uVar3,local_80);\n      iVar10 = FUN_08009530(param_1,uVar5,uVar12);\n      iVar19 = iVar9 + 0x30;\n      if (*(int *)(iVar10 + 0xc) == 0) {\n        uVar4 = FUN_080094f8(uVar3);\n        FUN_0800910c(param_1,iVar10);\n        if (((uVar4 != 0) || (param_5 != 0)) || (uVar4 = param_5, (param_3 & 1) != 0))\n        goto LAB_0800815a;\n        if (iVar19 != 0x39) {\n          if (0 < iVar13) {\nLAB_0800874c:\n            iVar19 = iVar9 + 0x31;\n          }\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar15 = pcVar14 + 1;\n        cVar1 = '9';\n        *pcVar14 = '9';\n        goto LAB_08008268;\n      }\n      FUN_0800910c(param_1,iVar10);\n      uVar4 = 1;\nLAB_0800815a:\n      if ((iVar13 < 0) || (((iVar13 == 0 && (param_5 == 0)) && ((param_3 & 1) == 0)))) {\n        if (0 < (int)uVar4) {\n          uVar3 = FUN_08009444(param_1,uVar3,1);\n          iVar13 = FUN_080094f8(uVar3,uVar5);\n          if ((0 < iVar13) || ((iVar13 == 0 && (iVar9 << 0x1f < 0)))) {\n            if (iVar19 != 0x39) goto LAB_0800874c;\n            goto LAB_08008752;\n          }\n        }\nLAB_080085a4:\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        goto LAB_08008274;\n      }\n      pcVar15 = pcVar14 + 1;\n      if (0 < (int)uVar4) {\n        if (iVar19 == 0x39) goto LAB_08008752;\n        *pcVar14 = (char)iVar9 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar14 = (char)iVar19;\n      if (pcVar18 + (local_68 - 1) != pcVar14) {\n        uVar3 = FUN_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n        if (local_80 == uVar12) {\n          local_80 = FUN_08009120(param_1,local_80,10,0);\n          uVar12 = local_80;\n        }\n        else {\n          local_80 = FUN_08009120(param_1,local_80,10,0);\n          uVar12 = FUN_08009120(param_1,uVar12,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    uVar3 = FUN_08009444(param_1,uVar3,1);\n    iVar9 = FUN_080094f8(uVar3,uVar5);\n    cVar1 = pcVar15[-1];\n    if ((0 < iVar9) || ((iVar9 == 0 && (iVar19 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar14 = pcVar15 + -1;\n        if (cVar1 != '9') goto code_r0x08008270;\n        if (pcVar18 == pcVar14) {\n          *pcVar18 = '1';\n          local_74 = local_74 + 1;\n          goto LAB_08008274;\n        }\n        cVar1 = pcVar15[-2];\n        pcVar15 = pcVar14;\n      } while( true );\n    }\n    while (cVar1 == '0') {\n      cVar1 = pcVar15[-2];\n      pcVar15 = pcVar15 + -1;\n    }\nLAB_08008274:\n    FUN_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != uVar12)) {\n      FUN_0800910c(param_1);\n    }\n  }\n  FUN_0800910c(param_1,uVar12);\nLAB_08008294:\n  FUN_0800910c(param_1,uVar3);\n  *pcVar15 = '\\0';\n  *param_7 = local_74 + 1;\n  if (param_9 == (char **)0x0) {\n    return pcVar18;\n  }\n  *param_9 = pcVar15;\n  return pcVar18;\ncode_r0x08008270:\n  *pcVar14 = cVar1 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "called": [
                "FUN_080009ac",
                "FUN_080094f8",
                "FUN_0800071c",
                "FUN_080090c0",
                "FUN_08009630",
                "FUN_0800910c",
                "FUN_08009444",
                "FUN_08009530",
                "FUN_0800119c",
                "FUN_0800015c",
                "FUN_08009258",
                "FUN_08000998",
                "FUN_080004c8",
                "FUN_080078c0",
                "FUN_080009e8",
                "FUN_08009244",
                "FUN_080003d4",
                "FUN_080093a4",
                "FUN_08001084",
                "FUN_08009120",
                "FUN_080009d4",
                "FUN_080003f4",
                "FUN_080091a4",
                "FUN_08000158"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080079e8",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "FUNC_080079e8"
        },
        "FUN_0800166c": {
            "renaming": {
                "uVar1": "num_bits_to_keep",
                "param_1": "bitmask",
                "param_2": "value",
                "param_3": "offset",
                "FUN_0800166c": "apply_bitmask_0800166c"
            },
            "code": "uint apply_bitmask_0800166c(uint bitmask, uint value, uint offset) {\n  uint num_bits_to_keep = 7 - (bitmask & 7);\n  if (num_bits_to_keep > 3) {\n    num_bits_to_keep = 4;\n  }\n  if ((bitmask & 7) + 4 < 7) {\n    bitmask = 0;\n  }\n  else {\n    bitmask = (bitmask & 7) - 3;\n  }\n  return value & ~(-1 << (bitmask & 0xff)) | (~(-1 << (num_bits_to_keep & 0xff)) & bitmask) << (bitmask & 0xff);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800166c",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": true,
            "current_name": "apply_bitmask_0800166c"
        },
        "FUN_0800360c": {
            "renaming": {
                "param_1": "pointer_to_array_of_uints",
                "*param_1": "array_of_uints",
                "FUN_0800360c": "set_bit_flags_0800360c"
            },
            "code": "void set_bit_flags_0800360c(uint **pointer_to_array_of_uints) {\n  uint *array_of_uints = *pointer_to_array_of_uints;\n  array_of_uints[3] |= 0x1;\n  *array_of_uints |= 0x1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800360c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "set_bit_flags_0800360c"
        },
        "FUN_08005d68": {
            "renaming": {
                "puVar2": "next_address",
                "param_1": "memory_address",
                "param_2": "byte_to_write",
                "param_3": "number_of_bytes_to_write",
                "puVar1": "current_address",
                "uVar3": "remaining_bytes",
                "uVar4": "repeated_byte",
                "FUN_08005d68": "write_bytes_to_memory_08005d68",
                "bVar5": "is_remaining_bytes"
            },
            "code": "void write_bytes_to_memory_08005d68(unsigned int *memory_address, unsigned char byte_to_write, unsigned int number_of_bytes_to_write) {\n  unsigned int *current_address;\n  unsigned int remaining_bytes;\n  unsigned int repeated_byte;\n  bool is_remaining_bytes;\n  \n  if (((unsigned int)memory_address & 3) != 0) {\n    remaining_bytes = number_of_bytes_to_write - 1;\n    current_address = memory_address;\n    if (number_of_bytes_to_write == 0) {\n      return;\n    }\n    while(true) {\n      memory_address = (unsigned int *)((int)current_address + 1);\n      *(unsigned char *)current_address = byte_to_write;\n      number_of_bytes_to_write = remaining_bytes;\n      if (((unsigned int)memory_address & 3) == 0) break;\n      is_remaining_bytes = remaining_bytes == 0;\n      remaining_bytes = remaining_bytes - 1;\n      current_address = memory_address;\n      if (is_remaining_bytes) {\n        return;\n      }\n    }\n  }\n  if (3 < number_of_bytes_to_write) {\n    repeated_byte = CONCAT22(CONCAT11(byte_to_write,byte_to_write),CONCAT11(byte_to_write,byte_to_write));\n    remaining_bytes = number_of_bytes_to_write;\n    current_address = memory_address;\n    if (0xf < number_of_bytes_to_write) {\n      remaining_bytes = number_of_bytes_to_write - 0x10;\n      memory_address = memory_address + 4;\n      do {\n        memory_address[-4] = repeated_byte;\n        memory_address[-3] = repeated_byte;\n        memory_address[-2] = repeated_byte;\n        memory_address[-1] = repeated_byte;\n        memory_address = memory_address + 4;\n      } while (memory_address != (unsigned int *)((int)current_address + (remaining_bytes & 0xfffffff0) + 0x20));\n      number_of_bytes_to_write = number_of_bytes_to_write & 0xf;\n      memory_address = current_address + ((remaining_bytes >> 4) + 1) * 4;\n      remaining_bytes = number_of_bytes_to_write;\n      if (number_of_bytes_to_write < 4) goto LAB_08005de4;\n    }\n    do {\n      number_of_bytes_to_write = number_of_bytes_to_write - 4;\n      *memory_address = repeated_byte;\n      memory_address = memory_address + 1;\n    } while (3 < number_of_bytes_to_write);\n    memory_address = (unsigned int *)((int)current_address + (remaining_bytes - 4 & 0xfffffffc) + 4);\n    number_of_bytes_to_write = remaining_bytes & 3;\n  }\nLAB_08005de4:\n  if (number_of_bytes_to_write != 0) {\n    current_address = memory_address;\n    do {\n      unsigned int *next_address = (unsigned int *)((int)current_address + 1);\n      *(unsigned char *)current_address = byte_to_write;\n      current_address = next_address;\n    } while ((unsigned int *)(number_of_bytes_to_write + (int)memory_address) != current_address);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d68",
            "calling": [
                "FUN_08009980",
                "FUN_08004f60"
            ],
            "imported": true,
            "current_name": "write_bytes_to_memory_08005d68"
        },
        "FUN_080017c4": {
            "renaming": {
                "local_c": "flag_index",
                "uVar1": "value_type_offset",
                "iVar7": "value_index",
                "param_1": "flags",
                "puVar6": "flag_ptr",
                "param_2": "values",
                "uVar3": "flag_bit",
                "local_10": "value_offset",
                "uVar2": "value_offset",
                "uVar5": "value_type",
                "uVar4": "value_bit",
                "FUN_080017c4": "update_flags_and_values_080017c4"
            },
            "code": "void update_flags_and_values_080017c4(uint *flags, uint *values) {\n  uint flag_bit, value_bit, value_type;\n  uint *flag_ptr;\n  int flag_index, value_index;\n  uint value_type_offset;\n  uint value_offset = 0;\n\n  for (flag_index = 0; flag_index <= 0xf; flag_index++) {\n    flag_bit = 1 << (flag_index & 0xff);\n    value_bit = *values & flag_bit;\n\n    if (value_bit != flag_bit) {\n      continue;\n    }\n\n    value_type = values[1];\n\n    if (value_type == 0x12) {\n      value_offset = values[3] + 0xc;\n    }\n    else if (value_type < 0x13) {\n      if (value_type == 2) {\n        value_offset = values[3] + 8;\n      }\n      else if (value_type == 0) {\n        continue;\n      }\n      else if (value_type == 1) {\n        value_offset = values[3];\n      }\n      else if (value_type == 3) {\n        value_offset = 0;\n      }\n      else if (value_type == 0x11) {\n        value_offset = values[3] + 4;\n      }\n    }\n    else {\n      value_type_offset = value_type == PTR_DAT_08001a4c ? 0 : value_type == PTR_DAT_08001a50 ? 4 : value_type == PTR_DAT_08001a54 ? 8 : value_type == PTR_DAT_08001a58 ? 12 : 16;\n      value_offset = values[3] + value_type_offset;\n    }\n\n    flag_ptr = flags + (flag_index < 8 ? 0 : 1);\n    value_index = (flag_index & 3) << 2;\n\n    flag_ptr[0] = flag_ptr[0] & ~(0xf << value_index) | value_offset << value_index;\n\n    if ((values[1] & 0x10000000) != 0) {\n      *PTR_DAT_08001a64 |= 1;\n      value_index = flags == PTR_DAT_08001a6c ? 0 : flags == PTR_DAT_08001a70 ? 1 : flags == PTR_DAT_08001a74 ? 2 : flags == PTR_DAT_08001a78 ? 3 : 4;\n      value_type_offset = (flag_index >> 2) + 2;\n      flag_index = ~(0xf << ((flag_index & 3) << 2)) & *PTR_DAT_08001a68;\n      flag_index |= value_index << ((flag_index & 3) << 2);\n      *(uint *)(PTR_DAT_08001a68 + value_type_offset * 4) = flag_index;\n\n      if (values[2] == 1) {\n        flags[4] |= flag_bit;\n      }\n      else if (values[2] > 1) {\n        flags[5] |= flag_bit;\n      }\n\n      if ((values[1] & 0x10000) == 0) {\n        *PTR_DAT_08001a7c = ~value_bit & *PTR_DAT_08001a7c;\n      }\n      else {\n        *PTR_DAT_08001a7c = value_bit | *PTR_DAT_08001a7c;\n      }\n\n      if ((values[1] & 0x20000) == 0) {\n        PTR_DAT_08001a7c[1] = ~value_bit & PTR_DAT_08001a7c[1];\n      }\n      else {\n        PTR_DAT_08001a7c[1] = value_bit | PTR_DAT_08001a7c[1];\n      }\n\n      if ((values[1] & 0x100000) == 0) {\n        PTR_DAT_08001a7c[2] = ~value_bit & PTR_DAT_08001a7c[2];\n      }\n      else {\n        PTR_DAT_08001a7c[2] = value_bit | PTR_DAT_08001a7c[2];\n      }\n\n      if ((values[1] & 0x200000) == 0) {\n        PTR_DAT_08001a7c[3] = ~value_bit & PTR_DAT_08001a7c[3];\n      }\n      else {\n        PTR_DAT_08001a7c[3] = value_bit | PTR_DAT_08001a7c[3];\n      }\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017c4",
            "calling": [
                "FUN_080055f4",
                "FUN_08005680"
            ],
            "imported": true,
            "current_name": "update_flags_and_values_080017c4"
        },
        "FUN_080035a4": {
            "renaming": {
                "uVar1": "is_valid",
                "param_1": "param_array",
                "FUN_08003c94": "perform_operation",
                "do_nothing_080035fa": "execute_function",
                "FUN_080035a4": "check_parameter_validity_080035a4"
            },
            "code": "int check_parameter_validity_080035a4(int *param_array)\\n{\\n  int is_valid = 0;\\n  if (param_array == NULL) {\\n    is_valid = 1;\\n  }\\n  else {\\n    if (*(char *)((int)param_array + 0x3d) == \"\\0\") {\\n      *(undefined *)(param_array + 0xf) = 0;\\n      execute_function(param_array);\\n    }\\n    *(undefined *)((int)param_array + 0x3d) = 2;\\n    perform_operation(*param_array,param_array + 1);\\n    *(undefined *)((int)param_array + 0x3d) = 1;\\n    is_valid = 0;\\n  }\\n  return is_valid;\\n}",
            "called": [
                "FUN_08003c94",
                "FUN_080035fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035a4",
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "imported": true,
            "current_name": "check_parameter_validity_080035a4"
        },
        "FUN_080041ea": {
            "renaming": {
                "FUN_080041ea": "set_bit_in_memory_080041ea",
                "*(uint *)(param_1 + 0x20)": "memory_location",
                "param_1": "memory",
                "uint": "uint8_t",
                "1 << (param_2 & 0xff)": "1 << (bit_position & 0xff)",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "return": "return",
                "bit_mask": "bit_mask"
            },
            "code": "void set_bit_in_memory_080041ea(uint8_t* memory, uint8_t bit_position, uint8_t bit_value) {\n  uint8_t* memory_location = memory + 0x20;\n  uint8_t bit_mask = ~(1 << (bit_position & 0xff));\n  *memory_location &= bit_mask;\n  *memory_location |= bit_value << (bit_position & 0xff);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ea",
            "calling": [
                "FUN_080036a8"
            ],
            "imported": true,
            "current_name": "set_bit_in_memory_080041ea"
        },
        "FUN_08004ae0": {
            "renaming": {
                "local_1f": "N/A",
                "FUN_08004ae0": "decode_and_store_data_08004ae0",
                "local_1e": "decoded_data[6:7]",
                "local_2a": "N/A",
                "param_1": "output_array",
                "local_1c": "decoded_data[4:5]",
                "local_2c": "decoded_data[0]",
                "local_2b": "N/A",
                "local_1a": "decoded_data[2:3]",
                "local_29": "N/A",
                "local_18": "decoded_data[0:1]",
                "local_28": "N/A",
                "local_27": "N/A",
                "local_16": "decoded_data[8:9]",
                "local_26": "N/A",
                "local_21": "N/A",
                "local_20": "N/A",
                "local_25": "N/A",
                "local_14": "decoded_data[6:7]",
                "local_24": "N/A",
                "local_23": "N/A",
                "local_22": "N/A"
            },
            "code": "void decode_and_store_data_08004ae0(undefined4 *output_array)\n{\n  // Decode data from some source\n  // and store it in an output array\n  char decoded_data[14];\n  (**(code **)PTR_DAT_08004bd4)(0xd0,0x3b,&decoded_data,0xe);\n  // Store decoded data in output array\n  output_array[0] = FUN_08000c10((int)decoded_data[0]);\n  output_array[1] = FUN_08000c10((int)(decoded_data[1] << 8) | decoded_data[2]);\n  output_array[2] = FUN_08000c10((int)(decoded_data[3] << 8) | decoded_data[4]);\n  output_array[3] = FUN_08000c10((int)(decoded_data[5] << 8) | decoded_data[6]);\n  output_array[4] = FUN_08000c10((int)(decoded_data[7] << 8) | decoded_data[8]);\n  output_array[5] = FUN_08000c10((int)(decoded_data[9] << 8) | decoded_data[10]);\n  output_array[6] = FUN_08000c10((int)(decoded_data[11] << 8) | decoded_data[12]);\n}\n",
            "called": [
                "FUN_08000c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ae0",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "decode_and_store_data_08004ae0"
        },
        "FUN_08001044": {
            "renaming": {
                "FUN_08001044": "calculate_shifted_value_08001044",
                "uVar1": "shift_amount",
                "param_1": "value",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ calculate_shifted_value_08001044(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_7DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_9DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_-DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_9DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_7DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001044",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "calculate_shifted_value_08001044"
        },
        "FUN_08009444": {
            "renaming": {
                "iVar1": "temp1",
                "iVar2": "current_block",
                "iVar3": "current_word",
                "uVar14": "carry",
                "FUN_08009444": "encode_08009444",
                "iVar5": "buffer_ptr",
                "iVar6": "temp2",
                "puVar11": "end_ptr",
                "iVar12": "num_blocks",
                "param_1": "data",
                "puVar10": "next_ptr",
                "puVar7": "output_ptr",
                "puVar8": "input_ptr",
                "puVar9": "current_ptr",
                "param_2": "output_buffer",
                "param_3": "num_bits",
                "iVar13": "total_words",
                "uVar4": "buffer_value"
            },
            "code": "void encode_08009444(uint32_t data, uint32_t *output_buffer, uint32_t num_bits)\n{\n  uint32_t num_words = output_buffer[4];\n  uint32_t num_blocks = (int)num_bits >> 5;\n  uint32_t total_words = num_blocks + num_words + 1;\n  uint32_t current_word = output_buffer[1];\n  uint32_t current_block = output_buffer[2];\n  if ((int)output_buffer[2] < total_words) {\n    do {\n      current_block = current_block * 2;\n      current_word = current_word + 1;\n    } while (total_words != current_block && total_words - current_block < 0 == SBORROW4(total_words,current_block));\n  }\n  uint32_t encode_08009444d_data = encode_08009444_data(data,current_word);\n  uint32_t *output_ptr = (uint32_t *)(encode_08009444d_data + 0x14);\n  if (0 < num_blocks) {\n    uint32_t *end_ptr = output_ptr + num_blocks;\n    uint32_t *current_ptr = output_ptr;\n    do {\n      current_ptr = current_ptr + 1;\n      *current_ptr = 0;\n      output_ptr = end_ptr;\n    } while (current_ptr != end_ptr);\n  }\n  num_words = output_buffer[4];\n  uint32_t *input_ptr = output_buffer + 5;\n  num_bits = num_bits & 0x1f;\n  if (num_bits == 0) {\n    output_ptr = output_ptr + -1;\n    uint32_t *end_ptr = input_ptr;\n    do {\n      end_ptr = end_ptr + 1;\n      output_ptr = output_ptr + 1;\n      *output_ptr = *end_ptr;\n    } while (end_ptr < input_ptr + num_words);\n  }\n  else {\n    uint32_t carry = 0;\n    uint32_t *end_ptr = input_ptr;\n    do {\n      uint32_t *current_ptr = output_ptr;\n      *current_ptr = *end_ptr << num_bits | carry;\n      uint32_t *next_ptr = end_ptr + 1;\n      carry = *end_ptr >> (0x20 - num_bits & 0xff);\n      output_ptr = current_ptr + 1;\n      end_ptr = next_ptr;\n    } while (next_ptr < input_ptr + num_words);\n    output_ptr[1] = carry;\n    if (carry != 0) {\n      total_words = num_blocks + num_words + 2;\n    }\n  }\n  uint32_t *buffer_ptr = (uint32_t *)(data + 0x4c);\n  current_word = output_buffer[1];\n  uint32_t buffer_index = output_buffer[2];\n  uint32_t buffer_value = *(uint32_t *)(buffer_ptr + current_word * 4);\n  *(uint32_t *)(encode_08009444d_data + 0x10) = total_words + -1;\n  *output_buffer = buffer_value;\n  *(uint32_t **)(buffer_ptr + current_word * 4) = output_buffer;\n}\n",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009444",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "encode_08009444"
        },
        "FUN_080015fc": {
            "renaming": {
                "DAT_08001614": "PTR_uint_at_offset",
                "FUN_080015fc": "get_bits_from_uint_at_offset_080015fc"
            },
            "code": "uint get_bits_from_uint_at_offset_080015fc(void)\n{\n  uint uint_at_offset = *(uint *)(DAT_08001614 + 0xc);\n  uint bits = uint_at_offset >> 8 & 7;\n  return bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015fc",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": true,
            "current_name": "get_bits_from_uint_at_offset_080015fc"
        },
        "FUN_08004436": {
            "renaming": {
                "iVar1": "start_time",
                "iVar2": "elapsed_time",
                "FUN_08004436": "decode_08004436",
                "param_1": "params",
                "param_2": "input_buffer",
                "param_3": "input_length",
                "param_4": "timeout",
                "uVar3": "result",
                "local_58": "input_ptr"
            },
            "code": "uint decode_08004436(uint **params, ushort *input_buffer, short input_length, uint timeout) {\n  int start_time = FUN_080015a0();\n  uint result = 0;\n  ushort *input_ptr = input_buffer;\n  if (*(char *)((int)params + 0x39) == ' ') {\n    if ((input_buffer == NULL) || (input_length == 0)) {\n      result = 1;\n    }\n    else if (*(char *)(params + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(params + 0xe) = 1;\n      params[0xf] = NULL;\n      *(undefined *)((int)params + 0x39) = 0x21;\n      *(short *)(params + 9) = input_length;\n      *(short *)((int)params + 0x26) = input_length;\n      while (*(short *)((int)params + 0x26) != 0) {\n        *(short *)((int)params + 0x26) = *(short *)((int)params + 0x26) + -1;\n        if (params[2] == (uint *)0x1000) {\n          while ((**params & 0x80) != 0x80) {\n            if ((timeout != 0xffffffff) && ((timeout != 0) && (FUN_080015a0() - start_time > timeout))) {\n              params[3] = (uint *)((int)params[3] & 0xfffffe5f);\n              params[5] = (uint *)((int)params[5] & 0xfffffffe);\n              *(undefined *)((int)params + 0x39) = 0x20;\n              *(undefined *)((int)params + 0x3a) = 0x20;\n              *(undefined *)(params + 0xe) = 0;\n              return 3;\n            }\n          }\n          if ((result = (**params & 0x1ff)) == 0) {\n            result = (uint)*input_ptr;\n            input_ptr = (ushort *)((int)input_ptr + 1);\n          }\n        }\n        else {\n          while ((**params & 0x80) != 0x80) {\n            if ((timeout != 0xffffffff) && ((timeout != 0) && (FUN_080015a0() - start_time > timeout))) {\n              params[3] = (uint *)((int)params[3] & 0xfffffe5f);\n              params[5] = (uint *)((int)params[5] & 0xfffffffe);\n              *(undefined *)((int)params + 0x39) = 0x20;\n              *(undefined *)((int)params + 0x3a) = 0x20;\n              *(undefined *)(params + 0xe) = 0;\n              return 3;\n            }\n          }\n          result = (uint)*(byte *)input_ptr;\n          input_ptr = (ushort *)((int)input_ptr + 1);\n        }\n      }\n      while ((**params & 0x40) != 0x40) {\n        if ((timeout != 0xffffffff) && ((timeout != 0) && (FUN_080015a0() - start_time > timeout))) {\n          params[3] = (uint *)((int)params[3] & 0xfffffe5f);\n          params[5] = (uint *)((int)params[5] & 0xfffffffe);\n          *(undefined *)((int)params + 0x39) = 0x20;\n          *(undefined *)((int)params + 0x3a) = 0x20;\n          *(undefined *)(params + 0xe) = 0;\n          return 3;\n        }\n      }\n      *(undefined *)((int)params + 0x39) = 0x20;\n      *(undefined *)(params + 0xe) = 0;\n      result = 0;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004436",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": true,
            "current_name": "decode_08004436"
        },
        "FUN_08000110": {
            "renaming": {
                "PTR_FUN_08000130": "default_function_pointer",
                "FUN_08000110": "check_and_return_function_pointer_08000110",
                "param_1": "function_pointer",
                "DAT_0800012c": "has_been_called_before",
                "PTR_DAT_08000128": "is_first_call"
            },
            "code": "undefined* check_and_return_function_pointer_08000110(undefined* function_pointer) {\\n  if (*PTR_DAT_08000128 == \"\\0\") {\\n    if (DAT_0800012c != 0) {\\n      function_pointer = PTR_FUN_08000130;\\n    }\\n    *PTR_DAT_08000128 = 1;\\n  }\\n  return function_pointer;\\n}",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": true,
            "current_name": "check_and_return_function_pointer_08000110"
        },
        "FUN_08003504": {
            "renaming": {
                "FUN_08003504": "get_value_from_pointer_08003504",
                "PTR_DAT_08003514": "value_pointer"
            },
            "code": "get_value_from_pointer_08003504() {\n    int* PTR_DAT_08003514 = PTR_DAT_08003514;\n    return *PTR_DAT_08003514;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003504",
            "calling": [
                "FUN_08003540",
                "FUN_08003518",
                "FUN_080052a0"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_08003504"
        },
        "FUN_08000aa4": {
            "renaming": {
                "FUN_08000aa4": "FUNC_08000aa4"
            },
            "code": "\nuint FUNC_08000aa4(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa4",
            "calling": [
                "FUN_08004bd8",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa4"
        },
        "FUN_08004ee8": {
            "renaming": {
                "PTR_DAT_08004f28": "server_address",
                "param_1": "data",
                "FUN_08004ee8": "send_data_to_server_08004ee8",
                "FUNC_08001f6c": "send_packet_to_server",
                "param_2": "size",
                "*(undefined4 *)PTR_DAT_08004f24": "port",
                "param_3": "is_encrypted",
                "param_4": "timeout"
            },
            "code": "void send_data_to_server_08004ee8(void* data, size_t size, int is_encrypted, int timeout, uint16_t *(undefined4 *)PTR_DAT_08004f24) {\n  send_packet_to_server(PTR_DAT_08004f28, data, size, is_encrypted, timeout, *(undefined4 *)PTR_DAT_08004f24);\n  return;\n}",
            "called": [
                "FUN_08001f6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [],
            "imported": true,
            "current_name": "send_data_to_server_08004ee8"
        },
        "FUN_080094f8": {
            "renaming": {
                "iVar1": "difference",
                "iVar3": "length",
                "puVar2": "ptr1",
                "puVar4": "ptr2",
                "param_1": "array1",
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_2": "array2"
            },
            "code": "int compare_arrays_080094f8(int* array1, int* array2, int length) {\n  int difference = *(array1 + 4) - *(array2 + 4);\n  if (difference == 0) {\n    int* ptr1 = array1 + 5;\n    int* ptr2 = array2 + 5;\n    for (int i = 0; i < length; i++) {\n      ptr1--;\n      ptr2--;\n      if (*ptr1 != *ptr2) {\n        if (*ptr2 <= *ptr1) {\n          return 1;\n        }\n        return -1;\n      }\n    }\n  }\n  return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094f8",
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "imported": true,
            "current_name": "compare_arrays_080094f8"
        },
        "FUN_08000998": {
            "renaming": {
                "in_ZR": "input_character",
                "FUN_08000988": "execute_input_validation",
                "FUN_08000998": "check_input_is_not_null_08000998"
            },
            "code": "bool check_input_is_not_null_08000998(void)\\n{\\n  char input_character;\\n  execute_input_validation();\\n  return input_character != \"\\0\";\\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "check_input_is_not_null_08000998"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "FUNC_08000aa8"
            },
            "code": "\nuint FUNC_08000aa8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000bde;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa8"
        },
        "FUN_080009ac": {
            "renaming": {
                "in_CY": "current_char",
                "FUN_08000988": "execute_predefined_function",
                "FUN_080009ac": "is_end_of_string_reached_080009ac"
            },
            "code": "bool is_end_of_string_reached_080009ac(void)\\n{\\n  char current_char;\\n  execute_predefined_function();\\n  return current_char == \"\\0\";\\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009ac",
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "is_end_of_string_reached_080009ac"
        },
        "FUN_08000fc8": {
            "renaming": {
                "param_1": "first_parameter",
                "FUN_08000fd0": "swap",
                "FUN_08000fc8": "swap_parameters_and_return_08000fc8",
                "param_2": "second_parameter"
            },
            "code": "void swap_parameters_and_return_08000fc8(undefined4 param_1, undefined4 param_2)\n{\n  swap(param_2, param_1);\n  return;\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fc8",
            "calling": [
                "FUN_08001030"
            ],
            "imported": true,
            "current_name": "swap_parameters_and_return_08000fc8"
        },
        "FUN_08001cb8": {
            "renaming": {
                "FUN_08001cb8": "do_nothing_08001cb8"
            },
            "code": "\nvoid do_nothing_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cb8",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": true,
            "current_name": "do_nothing_08001cb8"
        },
        "FUN_0800438a": {
            "renaming": {
                "do_nothing_08004424": "do_nothing",
                "uVar1": "result",
                "param_1": "parameter",
                "FUN_0800438a": "check_parameter_0800438a"
            },
            "code": "int check_parameter_0800438a(int *parameter)\n{\n  int result;\n  if (parameter == NULL) {\n    result = 1;\n  }\n  else {\n    if (parameter[0x39] == 0) {\n      parameter[0xe] = 0;\n      do_nothing(parameter);\n    }\n    parameter[0x39] = 0x24;\n    *(uint *)(*(int *)parameter + 0xc) &= 0xffffdfff;\n    update_parameter(parameter);\n    *(uint *)(*(int *)parameter + 0x10) &= 0xffffb7ff;\n    *(uint *)(*(int *)parameter + 0x14) &= 0xffffffd5;\n    *(uint *)(*(int *)parameter + 0xc) |= 0x2000;\n    parameter[0xf] = 0;\n    parameter[0x39] = 0x20;\n    parameter[0x3a] = 0x20;\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080046ec",
                "FUN_08004424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800438a",
            "calling": [
                "FUN_08005598"
            ],
            "imported": true,
            "current_name": "check_parameter_0800438a"
        },
        "FUN_080014f0": {
            "renaming": {
                "DAT_08001518": "data_register",
                "FUN_08001714": "call_function_one",
                "FUN_080014f0": "set_flag_and_call_functions_080014f0",
                "do_nothing_08002d8a": "do_nothing",
                "FUN_0800151c": "call_function_two"
            },
            "code": "void set_flag_and_call_functions_080014f0(void)\n{\n  *DAT_08001518 = *DAT_08001518 | 0x10;\n  call_function_one(3);\n  call_function_two(0xf);\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08001714",
                "FUN_0800151c",
                "FUN_08002d8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014f0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "set_flag_and_call_functions_080014f0"
        },
        "FUN_08003908": {
            "renaming": {
                "*(uint *)(*param_1 + 0x18)": "*(uint *)(*data_ptr + 0x18)",
                "uVar1": "result",
                "*(int *)(param_2 + 0x10)": "*(int *)(data_size + 0x10)",
                "param_1": "data_ptr",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)data_ptr + 0x3d)",
                "*(uint *)(*param_1 + 0x1c)": "*(uint *)(*data_ptr + 0x1c)",
                "FUN_08003908": "process_data_08003908",
                "param_2": "data_size",
                "param_3": "operation_type",
                "*(char *)(param_1 + 0xf)": "*(char *)(data_ptr + 0xf)",
                "*(uint *)(param_2 + 0x10)": "*(uint *)(data_size + 0x10)"
            },
            "code": "int process_data_08003908(int *data_ptr, int data_size, int operation_type) {\n  int result = 0;\n  if (*(char *)(data_ptr + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(char *)(data_ptr + 0xf) = 1;\n    *(char *)((int)data_ptr + 0x3d) = 2;\n    switch(operation_type) {\n      case 0:\n        perform_operation_1(*data_ptr, data_size);\n        *(uint *)(*data_ptr + 0x18) |= 8;\n        *(uint *)(*data_ptr + 0x18) &= 0xfffffffb;\n        *(uint *)(*data_ptr + 0x18) |= *(uint *)(data_size + 0x10);\n        break;\n      case 4:\n        perform_operation_2(*data_ptr, data_size);\n        *(uint *)(*data_ptr + 0x18) |= 0x800;\n        *(uint *)(*data_ptr + 0x18) &= 0xfffffbff;\n        *(uint *)(*data_ptr + 0x18) |= *(int *)(data_size + 0x10) << 8;\n        break;\n      case 8:\n        perform_operation_3(*data_ptr, data_size);\n        *(uint *)(*data_ptr + 0x1c) |= 8;\n        *(uint *)(*data_ptr + 0x1c) &= 0xfffffffb;\n        *(uint *)(*data_ptr + 0x1c) |= *(uint *)(data_size + 0x10);\n        break;\n      case 0xc:\n        perform_operation_4(*data_ptr, data_size);\n        *(uint *)(*data_ptr + 0x1c) |= 0x800;\n        *(uint *)(*data_ptr + 0x1c) &= 0xfffffbff;\n        *(uint *)(*data_ptr + 0x1c) |= *(int *)(data_size + 0x10) << 8;\n        break;\n    }\n    *(char *)((int)data_ptr + 0x3d) = 1;\n    *(char *)(data_ptr + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003ff8",
                "FUN_08003f18",
                "FUN_08003e38",
                "FUN_08003d60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003908",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": true,
            "current_name": "process_data_08003908"
        },
        "FUN_08004f60": {
            "renaming": {
                "PTR_DAT_08004f74": "starting_pointer",
                "FUN_08004f60": "initialize_memory_08004f60",
                "FUN_08005d68": "set_memory_to_zero"
            },
            "code": "void initialize_memory_08004f60(void)\n{\n  set_memory_to_zero(PTR_DAT_08004f74, 0, 64);\n  return;\n}",
            "called": [
                "FUN_08005d68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "initialize_memory_08004f60"
        },
        "FUN_080009c0": {
            "renaming": {
                "bool": "bool",
                "in_ZR": "is_ZR_zero",
                "in_CY": "is_CY_zero",
                "FUN_08000988": "check_CY_zero",
                "FUN_080009c0": "check_for_zero_080009c0"
            },
            "code": "bool check_for_zero_080009c0(void)\n{\n  bool is_CY_zero = check_CY_zero();\n  bool is_ZR_zero = check_ZR_zero();\n  return is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "check_for_zero_080009c0"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "is_input_valid_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_input_valid_08001170(uint input1, int input2, uint input3, int input4) {\n  bool is_input2_valid = (((input2 << 1) >> 0x15) != -1) || ((input1 | (input2 << 0xc)) == 0);\n  bool is_input4_valid = (((input4 << 1) >> 0x15) != -1) || ((input3 | (input4 << 0xc)) == 0);\n  if (is_input2_valid && is_input4_valid) {\n    return 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "is_input_valid_08001170"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "update_params_08003f18",
                "val4": "PARAM_VALUE_2",
                "mask4": "ADDR_MASK_4",
                "val3": "PARAM_VALUE_1",
                "val2": "ADDR_VALUE_2",
                "val1": "ADDR_VALUE_1",
                "mask1": "ADDR_MASK_1",
                "mask3": "ADDR_MASK_3",
                "param_1": "param_addr",
                "mask2": "ADDR_MASK_2",
                "param_2": "param_values"
            },
            "code": "void update_params_08003f18(int param_1, uint *param_2) {\n  uint mask1 = 0xfffffeff;\n  uint mask2 = 0xfffffdff;\n  uint mask3 = 0xfffff7ff;\n  uint mask4 = 0xfffffbff;\n  uint val1 = *(uint *)(param_1 + 0x20);\n  uint val2 = *(uint *)(param_1 + 4);\n  uint val3 = *param_2;\n  uint val4 = param_2[2] << 8 | val1 & mask2;\n  if (param_1 == DAT_08003ff4) {\n    val4 = (param_2[3] << 8 | val4 & mask3) & mask4;\n    val2 = param_2[6] << 4 | param_2[5] << 4 | val2 & 0xffffcfff;\n  }\n  val1 &= 0xffffff8c;\n  *(uint *)(param_1 + 0x20) = val4;\n  *(uint *)(param_1 + 4) = val2;\n  *(uint *)(param_1 + 0x1c) = val3 | val1;\n  *(uint *)(param_1 + 0x3c) = param_2[1];\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08003908"
            ],
            "imported": true,
            "current_name": "update_params_08003f18"
        },
        "FUN_080097cc": {
            "renaming": {
                "output_data_offset": "output_data_offset",
                "FUN_080097cc": "process_data_080097cc",
                "iVar1": "current_position",
                "iVar3": "new_position",
                "iVar4": "data_length",
                "max_data_length": "max_output_data_size",
                "param_1": "output_buffer",
                "puVar7": "data_pointer",
                "puVar8": "data_pointer_next",
                "param_2": "input_buffer",
                "param_3": "input_buffer_size",
                "uVar2": "data_offset",
                "uVar5": "data_size",
                "output_data_size": "output_data_size",
                "uVar6": "data_value",
                "uVar9": "data_value_next"
            },
            "code": "int process_data_080097cc(uint32_t *output_buffer, int *input_buffer, int *input_buffer_size)\n{\n  int current_position = *input_buffer;\n  uint32_t *data = (uint32_t *)*input_buffer_size;\n  uint32_t data_size = input_buffer_size[2];\n  uint32_t data_offset;\n  uint32_t data_value;\n  uint32_t data_length;\n  uint32_t max_data_length;\n  uint32_t output_data_size;\n  uint32_t output_data_offset;\n  if (input_buffer_size[2] != 0)\n  {\n    do\n    {\n      data_value = *data;\n      data_length = data[1];\n      data += 2;\n      if (data_length != 0)\n      {\n        data_offset = data_length;\n        if ((data_size <= data_length) && ((*(ushort *)(input_buffer + 3) & 0x480) != 0))\n        {\n          data_offset = data_size + 1 + (current_position - input_buffer[4]);\n          max_data_length = (input_buffer[5] * 3) / 2;\n          if (max_data_length < data_offset)\n          {\n            data_offset = max_data_length;\n          }\n          if ((int)((uint)*(ushort *)(input_buffer + 3) << 0x15) < 0)\n          {\n            int new_position = allocate_memory(output_buffer, data_offset);\n            if (new_position == 0)\n            {\n              *output_buffer = 0xc;\n              *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x40;\n              input_buffer_size[1] = 0;\n              input_buffer_size[2] = 0;\n              return -1;\n            }\n            copy_data(new_position, input_buffer[4], current_position - input_buffer[4]);\n            *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) & 0xfb7f | 0x80;\n            current_position = new_position + (current_position - input_buffer[4]);\n          }\n          else\n          {\n            int new_position = allocate_memory(output_buffer, data_offset);\n            if (new_position == 0)\n            {\n              copy_data(output_buffer, input_buffer[4]);\n              input_buffer_size[1] = 0;\n              return -1;\n            }\n            current_position = new_position + (current_position - input_buffer[4]);\n          }\n          input_buffer[5] = max_data_length;\n          input_buffer[4] = current_position;\n          *input_buffer = current_position;\n          input_buffer_size[2] = data_size - data_length;\n          data_offset = data_length;\n        }\n        write_data(output_buffer, current_position, data_value, data_offset);\n        data_size = input_buffer_size[2];\n        current_position += data_offset;\n        input_buffer_size[2] = data_size - data_length;\n      }\n    } while (data_length != 0);\n  }\n  input_buffer_size[1] = 0;\n  return 0;\n}",
            "called": [
                "FUN_08009a18",
                "FUN_08009adc",
                "FUN_08001084",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080097cc",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "process_data_080097cc"
        },
        "FUN_08001f6c": {
            "renaming": {
                "FUN_08001f6c": "FUNC_08001f6c"
            },
            "code": "\nundefined4\nFUNC_08001f6c(uint **param_1,undefined2 param_2,undefined2 param_3,undefined2 param_4,uint *param_5,\n            undefined2 param_6,uint param_7)\n\n{\n  int iVar1;\n  uint uVar2;\n  char cVar3;\n  uint uVar4;\n  int iVar5;\n  undefined4 uVar6;\n  uint *puVar7;\n  bool bVar8;\n  \n  iVar1 = FUN_080015a0();\n  uVar2 = DAT_080021e0;\n  if (*(char *)((int)param_1 + 0x3d) == ' ') {\n    do {\n      if ((uVar2 >> 0x10 & 0xff) == 1) {\n        uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      else {\n        uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      if (cVar3 != '\\x01') {\n        iVar5 = 0;\n        goto LAB_08002040;\n      }\n      iVar5 = FUN_080015a0();\n    } while ((uint)(iVar5 - iVar1) < 0x1a);\n    param_1[0xc] = (uint *)0x0;\n    *(undefined *)((int)param_1 + 0x3d) = 0x20;\n    *(undefined *)((int)param_1 + 0x3e) = 0;\n    *(undefined *)(param_1 + 0xf) = 0;\n    iVar5 = 3;\nLAB_08002040:\n    if (iVar5 == 0) {\n      if (*(char *)(param_1 + 0xf) == '\\x01') {\n        uVar6 = 2;\n      }\n      else {\n        *(undefined *)(param_1 + 0xf) = 1;\n        if ((**param_1 & 1) != 1) {\n          **param_1 = **param_1 | 1;\n        }\n        **param_1 = **param_1 & 0xfffff7ff;\n        *(undefined *)((int)param_1 + 0x3d) = 0x22;\n        *(undefined *)((int)param_1 + 0x3e) = 0x40;\n        param_1[0x10] = (uint *)0x0;\n        param_1[9] = param_5;\n        *(undefined2 *)((int)param_1 + 0x2a) = param_6;\n        param_1[0xb] = DAT_080021e4;\n        *(undefined2 *)(param_1 + 10) = *(undefined2 *)((int)param_1 + 0x2a);\n        iVar5 = FUN_080027f4(param_1,param_2,param_3,param_4,param_7,iVar1);\n        if (iVar5 == 0) {\n          if (*(short *)(param_1 + 10) == 0) {\n            **param_1 = **param_1 | 0x200;\n          }\n          else if (*(short *)(param_1 + 10) == 1) {\n            **param_1 = **param_1 & 0xfffffbff;\n            disableIRQinterrupts();\n            **param_1 = **param_1 | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(param_1 + 10) == 2) {\n            **param_1 = **param_1 | 0x800;\n            disableIRQinterrupts();\n            **param_1 = **param_1 & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **param_1 = **param_1 | 0x400;\n          }\n          while (uVar2 = DAT_080024bc, *(short *)(param_1 + 10) != 0) {\n            if (*(ushort *)(param_1 + 10) < 4) {\n              if (*(short *)(param_1 + 10) == 1) {\n                iVar5 = FUN_08002ca8(param_1,param_7,iVar1);\n                if (iVar5 != 0) {\n                  if (param_1[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else if (*(short *)(param_1 + 10) == 2) {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = FUN_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_080022fa:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = FUN_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_08002418:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 & 0xfffffbff;\n                disableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                uVar2 = DAT_080024bc;\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = FUN_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_0800250a:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n            else {\n              iVar5 = FUN_08002ca8(param_1,param_7,iVar1);\n              if (iVar5 != 0) {\n                if (param_1[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              uVar2 = (*param_1)[4];\n              puVar7 = param_1[9];\n              param_1[9] = (uint *)((int)puVar7 + 1);\n              *(char *)puVar7 = (char)uVar2;\n              *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n              *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              if (((*param_1)[5] & 4) == 4) {\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)param_1 + 0x3d) = 0x20;\n          *(undefined *)((int)param_1 + 0x3e) = 0;\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 0;\n        }\n        else if (param_1[0x10] == (uint *)0x4) {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 1;\n        }\n        else {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 3;\n        }\n      }\n    }\n    else {\n      uVar6 = 2;\n    }\n  }\n  else {\n    uVar6 = 2;\n  }\n  return uVar6;\n}\n\n",
            "called": [
                "FUN_080015a0",
                "FUN_08002ca8",
                "FUN_080027f4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f6c",
            "calling": [
                "FUN_08004ee8"
            ],
            "imported": false,
            "current_name": "FUNC_08001f6c"
        },
        "FUN_08002ad8": {
            "renaming": {
                "bVar4": "is_not_zero",
                "(*param_1)[5]": "(ptr_array)[5]",
                "iVar1": "iVar",
                "(*param_1)[6]": "(ptr_array)[6]",
                "FUN_08002ad8": "check_and_update_08002ad8",
                "param_1": "param_array",
                "param_1[0x10]": "param_array[0x10]",
                "*param_1": "*ptr_array",
                "param_1 + 0xf": "param_array + 0xf",
                "param_2": "param_value_1",
                "param_1[0xc]": "param_array[0xc]",
                "param_3": "param_value_2",
                "cVar2": "is_valid",
                "param_4": "param_value_3",
                "(int)param_1 + 0x3d": "(int)param_array + 0x3d",
                "uVar3": "value"
            },
            "code": "int check_and_update_08002ad8(uint **param_array, uint param_value_1, uint param_value_2, int param_value_3)\n{\n  int iVar;\n  char is_valid = 0;\n  uint value = 0;\n  bool is_not_zero;\n  uint* ptr_array = *param_array;\n  uint* ptr_array_2 = param_array[0xc];\n  undefined* ptr_undefined = (undefined*)((int)param_array + 0x3d);\n  undefined* ptr_undefined_2 = (undefined*)(param_array + 0xf);\n  do {\n    if ((param_value_1 >> 0x10 & 0xff) == 1) {\n      value = param_value_1 & ~(ptr_array)[5] & 0xffff;\n      is_not_zero = value != 0;\n      if (is_not_zero) {\n        value = 1;\n      }\n      is_valid = (char)value;\n      if (!is_not_zero) {\n        is_valid = 0;\n      }\n    }\n    else {\n      value = param_value_1 & ~(ptr_array)[6] & 0xffff;\n      is_not_zero = value != 0;\n      if (is_not_zero) {\n        value = 1;\n      }\n      is_valid = (char)value;\n      if (!is_not_zero) {\n        is_valid = 0;\n      }\n    }\n    if (is_valid == 0) {\n      return 0;\n    }\n    if (((ptr_array)[5] & 0x400) == 0x400) {\n      **param_array = **param_array | 0x200;\n      (ptr_array)[5] = 0xfffffbff;\n      param_array[0x10] = (uint *)0x4;\n      param_array[0xc] = (uint *)0x0;\n      *ptr_undefined = 0x20;\n      *ptr_undefined_2 = 0;\n      return 1;\n    }\n  } while ((param_value_2 == 0xffffffff) || ((param_value_2 != 0 && (iVar = FUN_080015a0(), (uint)(iVar - param_value_3) <= param_value_2))));\n  param_array[0xc] = (uint *)0x0;\n  *ptr_undefined = 0x20;\n  *ptr_undefined_2 = 0;\n  return 3;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_08002640",
                "FUN_080027f4"
            ],
            "imported": true,
            "current_name": "check_and_update_08002ad8"
        },
        "FUN_08000fd0": {
            "renaming": {
                "FUN_08000f68": "call_function_to_initialize",
                "FUN_08000fd0": "concatenate_32_and_64_bit_integers_08000fd0",
                "param_1": "uint32_t param_1",
                "param_2": "uint64_t param_2",
                "CONCAT44": "CONCAT44"
            },
            "code": "undefined8 concatenate_32_and_64_bit_integers_08000fd0(uint32_t param_1, uint64_t param_2)\n{\n  call_function_to_initialize();\n  return CONCAT44(param_2, param_1);\n}",
            "called": [
                "FUN_08000f68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fd0",
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "imported": true,
            "current_name": "concatenate_32_and_64_bit_integers_08000fd0"
        },
        "FUN_08003d60": {
            "renaming": {
                "param_2[1]": "new_val3",
                "*(uint *)(param_1 + 0x34)": "param2_val2",
                "param_2[2]": "param2_val1",
                "uVar1": "new_val1",
                "*(uint *)(param_1 + 0x20)": "mask1",
                "*(uint *)(param_1 + 0x18)": "param2_val",
                "param_1": "param_ptr",
                "FUN_08003d60": "update_parameters_08003d60",
                "param_2": "param_array",
                "*(uint *)(param_1 + 4)": "param1_val",
                "local_10": "mask4",
                "uVar2": "new_val2",
                "DAT_08003e34": "PTR_DAT_08003e34"
            },
            "code": "void update_parameters_08003d60(int param_1, uint *param_2) {\n  uint mask1 = 0xfffffffe;\n  uint mask2 = 0xfffffffd;\n  uint mask3 = 0xfffffff7;\n  uint mask4 = 0xfffffcff;\n  uint new_val1 = *param_2;\n  uint new_val2 = param_2[2] | (*(uint *)(param_1 + 0x20) & mask2);\n  uint new_val3 = param_2[1];\n  uint new_val4 = 0;\n  if (param_1 == DAT_08003e34) {\n    new_val2 = (param_2[3] | new_val2 & mask3) & mask2;\n    new_val4 = param_2[6] | param_2[5];\n  }\n  *(uint *)(param_1 + 0x20) &= mask1;\n  *(uint *)(param_1 + 4) = new_val4 | new_val3 | (*(uint *)(param_1 + 4) & mask4);\n  *(uint *)(param_1 + 0x18) = new_val1 | (*(uint *)(param_1 + 0x18) & 0xffffff8c);\n  *(uint *)(param_1 + 0x34) = new_val3;\n  *(uint *)(param_1 + 0x20) |= new_val2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d60",
            "calling": [
                "FUN_08003908"
            ],
            "imported": true,
            "current_name": "update_parameters_08003d60"
        },
        "FUN_08009e68": {
            "renaming": {
                "FUN_08009e68": "do_nothing_08009e68"
            },
            "code": "\nvoid do_nothing_08009e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e68",
            "calling": [
                "FUN_08000110",
                "FUN_08000134",
                "FUN_08005d20"
            ],
            "imported": true,
            "current_name": "do_nothing_08009e68"
        },
        "FUN_08003518": {
            "renaming": {
                "uVar1": "result",
                "PTR_DAT_0800353c": "shift_table",
                "DAT_08003538": "data_array",
                "FUN_08003518": "calculate_shift_amount_08003518"
            },
            "code": "uint calculate_shift_amount_08003518(void)\n{\n  uint result;\n  uint data = *(uint *)(DAT_08003538 + 4);\n  uint shift_value = PTR_DAT_0800353c[data >> 8 & 7];\n  result = FUN_08003504();\n  return result >> shift_value;\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003518",
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "imported": true,
            "current_name": "calculate_shift_amount_08003518"
        },
        "FUN_08001618": {
            "renaming": {
                "DAT_08001664": "memory_offset_1",
                "param_1": "address",
                "DAT_08001668": "memory_offset_2",
                "param_2": "data",
                "FUN_08001618": "write_to_memory_08001618"
            },
            "code": "void write_to_memory_08001618(byte address, uint data) {\n  if (address < 0) {\n    *(char *)((address & 0xf) + DAT_08001664 + 0x14) = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + DAT_08001668 + 0x300) = (char)((data & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001618",
            "calling": [
                "FUN_080016d0",
                "FUN_0800172a"
            ],
            "imported": true,
            "current_name": "write_to_memory_08001618"
        },
        "FUN_080091a4": {
            "renaming": {
                "iVar1": "count",
                "param_1": "number",
                "FUN_080091a4": "countLeadingZeros_080091a4"
            },
            "code": "int countLeadingZeros_080091a4(uint number) {\n  int count = 0;\n  if ((number & 0xffff0000) == 0) {\n    number <<= 0x10;\n    count = 0x10;\n  }\n  if ((number & 0xff000000) == 0) {\n    number <<= 8;\n    count += 8;\n  }\n  if ((number & 0xf0000000) == 0) {\n    number <<= 4;\n    count += 4;\n  }\n  if ((number & 0xc0000000) == 0) {\n    number <<= 2;\n    count += 2;\n  }\n  if ((int)number >= 0) {\n    if ((int)(number << 1) < 0) {\n      return count + 1;\n    }\n    count = 0x20;\n  }\n  return count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a4",
            "calling": [
                "FUN_080079e8",
                "FUN_08009630"
            ],
            "imported": true,
            "current_name": "countLeadingZeros_080091a4"
        },
        "FUN_08004f78": {
            "renaming": {
                "FUN_08004ae0": "initialize_data",
                "PTR_DAT_080051fc": "data_ptr7",
                "DAT_0800521c": "flag_data",
                "PTR_DAT_08005220": "final_val_ptr",
                "PTR_DAT_08005200": "data_ptr8",
                "PTR_DAT_0800520c": "flag_ptr2",
                "FUN_08000aa8": "compute_final_val",
                "PTR_DAT_080051e0": "data_ptr1",
                "FUN_08000418": "get_pitch",
                "FUNC_08000aa4": "compute_val4",
                "PTR_DAT_080051e4": "data_ptr2",
                "FUN_08004f60": "prepare_data",
                "PTR_DAT_08005214": "result_ptr",
                "FUN_08000c08": "set_flag1",
                "PTR_DAT_080051ec": "data_ptr3",
                "PTR_DAT_08005210": "flag_ptr3",
                "FUN_08004bd8": "load_data",
                "FUN_08004f3c": "compute_val3",
                "PTR_s_Pitch___f_080051e8": "pitch_ptr",
                "FUN_08000ff4": "check_flag2",
                "FUN_08005dfc": "compute_val1",
                "FUN_08005e40": "compute_val2",
                "PTR_DAT_080051f4": "data_ptr5",
                "PTR_DAT_080051f8": "data_ptr6",
                "FUN_08004f78": "process_data_08004f78",
                "FUNC_08000cb8": "compute_result",
                "FUN_08000c10": "check_flag1",
                "PTR_DAT_08005204": "data_ptr9",
                "PTR_DAT_080051f0": "data_ptr4",
                "PTR_DAT_08005208": "flag_ptr1"
            },
            "code": "void process_data_08004f78(void)\n{\n  int pitch = get_pitch();\n  int val1 = compute_val1(pitch);\n  int val2 = compute_val2(val1);\n  int val3 = compute_val3(val1);\n  int val4 = compute_val4(val2, val3);\n  int result = compute_result(val4);\n  int final_val = compute_final_val(result);\n  int flag1 = check_flag1(final_val);\n  int flag2 = check_flag2(final_val);\n  int flag3 = check_flag3(final_val);\n  int flag4 = check_flag4(final_val);\n  set_flag1(flag1);\n  set_flag2(flag2);\n  set_flag3(flag3);\n  set_flag4(flag4);\n}\n",
            "called": [
                "FUN_08001030",
                "FUN_08005e40",
                "FUN_08004bd8",
                "FUN_08004f60",
                "FUN_08000aa4",
                "FUN_08004ae0",
                "FUN_08004f3c",
                "FUN_08000aa8",
                "FUN_08001044",
                "FUN_08000c08",
                "FUN_08000c10",
                "FUN_08000cb8",
                "FUN_08000ff4",
                "FUN_08001a80",
                "FUN_08000418",
                "FUN_08005dfc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f78",
            "calling": [
                "FUN_080017b4",
                "FUN_080036f8"
            ],
            "imported": true,
            "current_name": "process_data_08004f78"
        },
        "FUN_080015a0": {
            "renaming": {
                "PTR_DAT_080015b0": "pointer_data",
                "FUN_080015a0": "get_pointer_value_080015a0"
            },
            "code": "get_pointer_value_080015a0() {\n  return *(undefined4 *)PTR_DAT_080015b0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015a0",
            "calling": [
                "FUN_08002d98",
                "FUN_08004f2c",
                "FUN_08002bb4",
                "FUN_08002c2e",
                "FUN_08001f6c",
                "FUN_08002ca8",
                "FUN_08001ccc",
                "FUN_08002ad8",
                "FUN_08002640",
                "FUN_080027f4",
                "FUN_08004436",
                "FUN_08003260"
            ],
            "imported": true,
            "current_name": "get_pointer_value_080015a0"
        },
        "FUN_08002d98": {
            "renaming": {
                "FUN_08002d98": "FUNC_08002d98"
            },
            "code": "\nundefined4 FUNC_08002d98(uint *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined4 uVar3;\n  bool bVar4;\n  \n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 4) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0x10000)))) {\n      if (((*DAT_08002ffc & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else if (param_1[1] == 0) {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x40000;\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar1 = FUN_080015a0();\n        while ((*DAT_08002ffc & 0x20000) != 0) {\n          iVar2 = FUN_080015a0();\n          if (100 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar1 = FUN_080015a0();\n        while ((*DAT_08002ffc & 0x20000) == 0) {\n          iVar2 = FUN_080015a0();\n          if (100 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 0) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0)))) {\n      if (((*DAT_08002ffc & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08002ffc = param_1[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08003000 = 0;\n      iVar1 = FUN_080015a0();\n      while ((*DAT_08002ffc & 2) != 0) {\n        iVar2 = FUN_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003000 = 1;\n      iVar1 = FUN_080015a0();\n      while ((*DAT_08002ffc & 2) == 0) {\n        iVar2 = FUN_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      *DAT_08002ffc = param_1[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003004 = 0;\n      iVar1 = FUN_080015a0();\n      while ((DAT_08003254[9] & 2) != 0) {\n        iVar2 = FUN_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003004 = 1;\n      iVar1 = FUN_080015a0();\n      while ((DAT_08002ffc[9] & 2) == 0) {\n        iVar2 = FUN_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      FUN_08003568(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar4 = (DAT_08003254[7] & 0x10000000) == 0;\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] | 0x10000000;\n    }\n    if ((*DAT_08003258 & 0x100) == 0) {\n      *DAT_08003258 = *DAT_08003258 | 0x100;\n      iVar1 = FUN_080015a0();\n      while ((*DAT_08003258 & 0x100) == 0) {\n        iVar2 = FUN_080015a0();\n        if (100 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    if (param_1[3] == 1) {\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else if (param_1[3] == 0) {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    else if (param_1[3] == 5) {\n      DAT_08003254[8] = DAT_08003254[8] | 4;\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar1 = FUN_080015a0();\n      while ((DAT_08003254[8] & 2) != 0) {\n        iVar2 = FUN_080015a0();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar1 = FUN_080015a0();\n      while ((DAT_08003254[8] & 2) == 0) {\n        iVar2 = FUN_080015a0();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\nLAB_0800324a:\n    uVar3 = 0;\n  }\n  else if ((DAT_08003254[1] & 0xc) == 8) {\n    uVar3 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800325c = 0;\n    iVar1 = FUN_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003254[1] = param_1[2] | DAT_08003254[1] & 0xfffdffff;\n        }\n        DAT_08003254[1] = param_1[9] | param_1[8] | DAT_08003254[1] & 0xffc2ffff;\n        *DAT_0800325c = 1;\n        iVar1 = FUN_080015a0();\n        while ((*DAT_08003254 & 0x2000000) == 0) {\n          iVar2 = FUN_080015a0();\n          if (2 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      iVar2 = FUN_080015a0();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    uVar3 = 3;\n  }\n  else {\n    *DAT_0800325c = 0;\n    iVar1 = FUN_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) goto LAB_0800324a;\n      iVar2 = FUN_080015a0();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    uVar3 = 3;\n  }\n  return uVar3;\n}\n\n",
            "called": [
                "FUN_080015a0",
                "FUN_08003568"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08002d98",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "FUNC_08002d98"
        },
        "FUN_0800172a": {
            "renaming": {
                "uVar1": "result",
                "FUN_080015fc": "calculate_result",
                "param_1": "output",
                "param_2": "num1",
                "param_3": "num2",
                "FUN_08001618": "display_output",
                "FUN_0800166c": "process_result",
                "FUN_0800172a": "print_result_0800172a"
            },
            "code": "void print_result_0800172a(char output, int num1, int num2)\n{\n  int result = calculate_result();\n  int final_result = process_result(result, num1, num2);\n  display_output((int)output, final_result);\n  return;\n}",
            "called": [
                "FUN_0800166c",
                "FUN_080015fc",
                "FUN_08001618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800172a",
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "imported": true,
            "current_name": "print_result_0800172a"
        },
        "FUN_080009d4": {
            "renaming": {
                "FUN_080009d4": "check_if_CY_is_false_or_ZR_is_true_080009d4",
                "bool": "bool",
                "in_ZR": "ZR_is_true",
                "in_CY": "CY_is_true",
                "undefined": "undefined",
                "FUN_08000978": "initialize_registers"
            },
            "code": "bool check_if_CY_is_false_or_ZR_is_true_080009d4(void)\n{\n  bool CY_is_false = !is_CY_true();\n  bool ZR_is_true = is_ZR_true();\n  return CY_is_false || ZR_is_true;\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "check_if_CY_is_false_or_ZR_is_true_080009d4"
        },
        "FUN_08002d8a": {
            "renaming": {
                "FUN_08002d8a": "do_nothing_08002d8a"
            },
            "code": "\nvoid do_nothing_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d8a",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": true,
            "current_name": "do_nothing_08002d8a"
        },
        "FUN_08005780": {
            "renaming": {
                "DAT_080057dc[1]": "flags_ptr[1]",
                "FUN_08005780": "setFlags_08005780",
                "*DAT_080057dc": "*flags_ptr",
                "DAT_080057e0": "flag2",
                "DAT_080057dc": "flags_ptr",
                "*DAT_080057e4": "data_ptr",
                "*(undefined4 *)(DAT_080057e4 + 8)": "*(unsigned int *)(data_ptr + 8)"
            },
            "code": "void setFlags_08005780(void)\n{\n  unsigned int *DAT_080057dc = DAT_080057dc;\n  unsigned int flag1 = 1;\n  unsigned int DAT_080057e0 = 0xfef6ffff;\n  unsigned int flag3 = 0xfffbffff;\n  unsigned int flag4 = 0xff80ffff;\n  unsigned int flag5 = 0x9f0000;\n  unsigned int flag6 = 0x8000000;\n  \n  *DAT_080057dc |= flag1;\n  DAT_080057dc[1] &= DAT_080057e0;\n  *DAT_080057dc &= DAT_080057e0;\n  *DAT_080057dc &= flag3;\n  DAT_080057dc[1] &= flag4;\n  DAT_080057dc[2] = flag5;\n  *(unsigned int *)(DAT_080057e4 + 8) = flag6;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005780",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": true,
            "current_name": "setFlags_08005780"
        },
        "FUN_08009744": {
            "renaming": {
                "FUN_08009744": "read_integer_from_memory_08009744",
                "iVar2": "function_result",
                "param_1": "output_integer",
                "param_2": "input_address",
                "puVar1": "memory_pointer"
            },
            "code": "void read_integer_from_memory_08009744(int *output_integer, undefined4 input_address) {\n  undefined *memory_pointer;\n  int function_result;\n  memory_pointer = PTR_DAT_08009764;\n  *(undefined4 *)PTR_DAT_08009764 = 0;\n  function_result = read_integer_from_input(input_address);\n  if ((function_result == -1) && (*(int *)memory_pointer != 0)) {\n    *output_integer = *(int *)memory_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009744",
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "imported": true,
            "current_name": "read_integer_from_memory_08009744"
        },
        "FUN_08003640": {
            "renaming": {
                "FUN_08003640": "check_param_validity_08003640",
                "uVar1": "is_valid",
                "param_1": "param_array",
                "*(char *)((int)param_1 + 0x3d)": "param_array[15]",
                "FUN_08003c94": "call_function",
                "do_nothing_08003696": "do_nothing",
                "*(undefined *)(param_1 + 0xf)": "param_array[6]"
            },
            "code": "int check_param_validity_08003640(int *param_array)\n{\n  int is_valid = 0;\n  if (param_array == NULL) {\n    is_valid = 1;\n  }\n  else {\n    if (param_array[15] == 0) {\n      param_array[6] = 0;\n      do_nothing(param_array);\n    }\n    param_array[15] = 2;\n    call_function(param_array[0], &param_array[1]);\n    param_array[15] = 1;\n    is_valid = 0;\n  }\n  return is_valid;\n}",
            "called": [
                "FUN_08003c94",
                "FUN_08003696"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003640",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": true,
            "current_name": "check_param_validity_08003640"
        },
        "FUN_08009980": {
            "renaming": {
                "FUN_08009980": "allocate_memory_with_zeros_08009980",
                "puVar3": "current_address",
                "param_1": "base_address",
                "param_2": "num_rows",
                "param_3": "num_cols",
                "puVar1": "allocated_memory",
                "uVar2": "memory_size"
            },
            "code": "undefined4* allocate_memory_with_zeros_08009980(undefined4 base_address, int num_rows, int num_cols)\n{\n  undefined4* allocated_memory;\n  uint32_t total_size;\n  undefined4* current_address;\n  \n  total_size = num_rows * num_cols;\n  allocated_memory = (undefined4*)FUNC_08008af8(base_address, total_size);\n  if (allocated_memory == (undefined4*)0x0) {\n    return (undefined4*)0x0;\n  }\n  uint32_t memory_size = (allocated_memory[-1] & 0xfffffffc) - 4;\n  if (memory_size < 0x25) {\n    current_address = allocated_memory;\n    if (0x13 < memory_size) {\n      *allocated_memory = 0;\n      allocated_memory[1] = 0;\n      if (0x1b < memory_size) {\n        allocated_memory[2] = 0;\n        allocated_memory[3] = 0;\n        if (memory_size == 0x24) {\n          allocated_memory[4] = 0;\n          allocated_memory[5] = 0;\n          current_address = allocated_memory + 6;\n        }\n        else {\n          current_address = allocated_memory + 4;\n        }\n        *current_address = 0;\n        current_address[1] = 0;\n        current_address[2] = 0;\n        return allocated_memory;\n      }\n      current_address = allocated_memory + 2;\n    }\n    *current_address = 0;\n    current_address[1] = 0;\n    current_address[2] = 0;\n    return allocated_memory;\n  }\n  FUN_08005d68(allocated_memory, 0);\n  return allocated_memory;\n}",
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009980",
            "calling": [
                "FUN_080090c0"
            ],
            "imported": true,
            "current_name": "allocate_memory_with_zeros_08009980"
        },
        "FUN_08005e9c": {
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n/* WARNING: Could not reconcile some variable overlaps */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  int **local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  undefined *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)FUN_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)FUN_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUNC_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (undefined *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (int **)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = FUN_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)FUN_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = FUN_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = FUN_08001170(uVar10,local_168,0xffffffff,DAT_08006724);\n      if ((iVar3 == 0) &&\n         (iVar3 = FUN_080009c0(uVar10,local_168,0xffffffff,DAT_08006724), iVar3 == 0)) {\n        iVar3 = FUN_080009ac(local_128,local_12c,local_124,local_120);\n        piVar23 = (int *)PTR_DAT_08006728;\n        piVar27 = (int *)PTR_DAT_0800672c;\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (int **)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      piVar22 = (int *)FUN_08001170(local_128,local_12c,local_128,local_12c);\n      if (piVar22 != (int *)0x0) {\n        piVar23 = (int *)PTR_DAT_08007898;\n        piVar27 = (int *)PTR_DAT_0800789c;\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        goto LAB_08006524;\n      }\n      piVar16 = piVar27;\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUNC_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        piVar27 = piVar16;\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n          piVar16 = piVar27;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        local_158 = (int **)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = (int **)PTR_s_0123456789abcdef_08007888;\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar16;\n          local_100 = piVar25;\n          local_fc = param_3;\n          puVar20 = PTR_s_0123456789abcdef_08007888;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        piVar27 = piVar16;\n        if (piVar24 == (int *)0x41) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = (int **)PTR_s_0123456789ABCDEF_0800739c;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_0800739c;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = (int **)PTR_s_0123456789ABCDEF_08007894;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_08007894;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = piVar22;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar16 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar16 = (int *)0x1;\n            local_148 = piVar27;\n          }\n          goto LAB_0800724a;\n        }\n        uVar19 = local_12c;\n        local_144 = piVar22;\n        if ((int)local_12c < 0) goto LAB_08007414;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (int **)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (int **)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar22 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar22 == (int *)0x0) {\n        piVar16 = piVar22;\n        piVar23 = (int *)PTR_s__null__08007084;\n        local_168 = piVar27;\n        local_158 = (int **)piVar27;\n        local_154 = ppiVar14;\n        local_148 = piVar22;\n        local_13c = (int **)piVar22;\n        local_134 = piVar22;\n        local_130 = piVar22;\n        if ((int *)0x5 < piVar27) {\n          local_158 = (int **)0x6;\n          local_168 = (int *)local_158;\n        }\n        goto LAB_08006538;\n      }\n      piVar23 = piVar22;\n      if (piVar27 == (int *)0xffffffff) {\n        local_158 = (int **)FUN_08005e40(piVar22);\n      }\n      else {\n        local_148 = (int *)FUN_0800901c(piVar22,0,piVar27);\n        if (local_148 == (int *)0x0) {\n          piVar16 = (int *)(uint)local_f5;\n          piVar22 = local_148;\n          local_168 = piVar27;\n          local_158 = (int **)piVar27;\n          local_154 = ppiVar14;\n          local_13c = (int **)local_148;\n          local_134 = local_148;\n          local_130 = local_148;\n          goto LAB_08006538;\n        }\n        local_158 = (int **)((int)local_148 - (int)piVar22);\n      }\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      piVar16 = (int *)(uint)local_f5;\n      piVar22 = (int *)0x0;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      local_154 = ppiVar14;\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = PTR_s_0123456789ABCDEF_08006730;\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      piVar22 = *local_154;\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        FUN_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          FUN_08009768(piVar23,local_110,local_104);\n          piVar22 = (int *)(uint)pbVar26[1];\n          if (piVar22 != (int *)0x0) {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = FUN_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = local_158;\n      local_158 = (int **)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (int **)((uint)piVar25 & 1);\n            if (local_158 == (int **)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (int **)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (int **)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(undefined *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    FUN_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = FUN_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar22 = param_3;\n    piVar16 = (int *)((int)piVar16 + -1);\n    uVar33 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,DAT_080073a0);\n    iVar3 = FUN_0800119c();\n    uVar34 = FUN_080003f4();\n    uVar33 = FUNC_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar22 + 1);\n    *(undefined *)piVar22 = puVar20[iVar3];\n    if (piVar16 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar16;\n  local_134 = piVar22;\n  local_150 = uVar33;\n  iVar8 = FUN_080009e8((int)uVar33,uVar10,0,DAT_080073a4);\n  if (iVar8 == 0) {\n    iVar8 = FUN_08000998((int *)local_150,local_150._4_4_,0,DAT_080073a4);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = *(byte *)((int)local_158 + 0xf);\n    bVar7 = *(byte *)piVar22;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = *(byte *)((int)local_158 + 10);\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (int **)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (int **)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (int **)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (int **)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((ulonglong)DAT_08007890 * ZEXT48(local_f0) >> 0x23);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (int **)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (int **)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (int **)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (int **)((int)local_158 + (int)local_104 * (int)((int)local_130 + (int)local_13c))\n      ;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = local_144;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)puVar20;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_0800643c;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    piVar16 = (int *)PTR_s_0000000000000000Infinity_08007088;\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n      piVar16 = (int *)puVar20;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = piVar16;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (int **)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (int **)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (int **)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n      if (iVar3 == 0) {\n        local_158 = (int **)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (int **)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (int **)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)puVar20;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            piVar24 = (int *)puVar20;\n            local_158 = (int **)local_d0;\n          }\n          *ppiVar17 = piVar24;\n          ppiVar17[1] = piVar22;\n          local_158 = (int **)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)PTR_DAT_08006d98;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          puVar20 = PTR_s_0000000000000000Infinity_0800788c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)puVar20;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = FUN_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar24 = (int *)puVar20;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = piVar24;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007398;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (int **)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)puVar20;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)puVar20;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007088;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar22 = (int *)puVar20;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)PTR_DAT_08006a50;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar22 = (int *)puVar20;\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = piVar22;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUNC_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUNC_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "called": [
                "FUN_080079e8",
                "FUN_080009c0",
                "FUN_080009ac",
                "FUN_0800901c",
                "FUN_08005e40",
                "FUN_080096e0",
                "FUN_0800119c",
                "FUN_080088ec",
                "FUN_08001170",
                "FUN_08008ad4",
                "FUN_08000998",
                "FUN_080004c8",
                "FUN_080009e8",
                "FUN_080097cc",
                "FUN_08008af8",
                "FUN_08009768",
                "FUN_080003f4",
                "FUN_080011ec",
                "FUN_08000158"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005e9c",
            "calling": [
                "FUN_08005dfc"
            ],
            "imported": false,
            "current_name": "FUNC_08005e9c"
        },
        "FUN_08000134": {
            "renaming": {
                "DAT_08000144": "is_initialized",
                "FUN_08000134": "concatenate_params_08000134",
                "param_1": "default_param_1",
                "PTR_DAT_08000148": "initialized_param_2",
                "param_2": "default_param_2",
                "PTR_FUN_0800014c": "initialized_param_1"
            },
            "code": "typedef unsigned long long uint64_t;\\\n\\\nuint64_t concatenate_params_08000134(uint64_t a, uint64_t b) {\\\n    return (a << 32) | b;\\\n}\\\n\\\nuint64_t concatenate_params_08000134_params() {\\\n  uint64_t param_1;\\\n  uint64_t param_2;\\\n  if (DAT_08000144) {\\\n    param_1 = PTR_FUN_0800014c;\\\n    param_2 = PTR_DAT_08000148;\\\n  } else {\\\n    param_1 = default_param_1;\\\n    param_2 = default_param_2;\\\n  }\\\n  return concatenate_params_08000134(param_2, param_1);\\\n}",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": true,
            "current_name": "concatenate_params_08000134"
        },
        "FUN_08005704": {
            "renaming": {
                "FUN_080017b4": "load_resources",
                "FUN_08005704": "execute_application_08005704",
                "FUN_0800157c": "initialize_graphics"
            },
            "code": "void execute_application_08005704(void)\n{\n  initialize_graphics();\n  load_resources();\n  return;\n}",
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005704",
            "calling": [],
            "imported": true,
            "current_name": "execute_application_08005704"
        },
        "FUN_08000418": {
            "renaming": {
                "bVar10": "temp11",
                "uVar1": "temp1",
                "iVar6": "temp6",
                "param_1": "input1",
                "FUN_08000418": "decode_uint_08000418",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "temp3",
                "uVar2": "temp2",
                "bVar9": "temp10",
                "uVar5": "temp5",
                "uVar4": "temp4",
                "uVar7": "temp7",
                "in_r12": "temp8",
                "bVar8": "temp9"
            },
            "code": "ulonglong decode_uint_08000418(uint input1, undefined4 input2, undefined4 input3, uint input4) {\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int temp6;\n  uint temp7;\n  uint temp8;\n  bool temp9;\n  bool temp10;\n  bool temp11;\n  \n  temp5 = input1 << 1;\n  temp9 = temp5 == 0;\n  temp1 = (uint)((input1 & 0x80000000) != 0) << 0x1f;\n  temp4 = (uint)((int)temp5 >> 3) >> 1;\n  temp3 = temp1 | temp4;\n  input1 = input1 << 0x1d;\n  if (!temp9) {\n    input4 = temp5 & 0xff000000;\n    temp9 = input4 == 0;\n  }\n  if (!temp9) {\n    temp9 = input4 == 0xff000000;\n  }\n  if (!temp9) {\n    return CONCAT44(temp3,input1) ^ 0x3800000000000000;\n  }\n  if ((temp5 & 0xffffff) == 0) {\n    return CONCAT44(temp3,input1);\n  }\n  if (input4 == 0xff000000) {\n    return CONCAT44(temp3,input1) | 0x8000000000000;\n  }\n  temp2 = input1;\n  temp5 = temp4;\n  if (temp4 == 0) {\n    temp2 = 0;\n    temp5 = input1;\n  }\n  temp6 = count_leading_zeroes(temp5);\n  if (temp4 == 0) {\n    temp6 = temp6 + 0x20;\n  }\n  temp7 = temp6 - 0xb;\n  temp11 = SBORROW4(temp7,0x20);\n  temp4 = temp6 - 0x2b;\n  temp9 = (int)temp4 < 0;\n  temp10 = temp4 == 0;\n  if ((int)temp7 < 0x20) {\n    temp11 = SCARRY4(temp4,0xc);\n    temp6 = temp6 + -0x1f;\n    temp9 = temp6 < 0;\n    temp10 = temp6 == 0;\n    temp4 = temp7;\n    if (!temp10 && temp9 == temp11) {\n      temp2 = temp5 << (temp7 & 0xff);\n      temp5 = temp5 >> (0xcU - temp6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (temp10 || temp9 != temp11) {\n    temp8 = 0x20 - temp4;\n  }\n  temp5 = temp5 << (temp4 & 0xff);\n  if (temp10 || temp9 != temp11) {\n    temp5 = temp5 | temp2 >> (temp8 & 0xff);\n  }\n  if (temp10 || temp9 != temp11) {\n    temp2 = temp2 << (temp4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp7 < 0x381) {\n    return CONCAT44(temp5 + (0x380 - temp7) * 0x100000 | temp1,temp2);\n  }\n  temp4 = ~(0x380 - temp7);\n  if (0x1e < (int)temp4) {\n    return CONCAT44(temp3,temp5 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  temp6 = temp4 - 0x13;\n  if (temp6 == 0 || temp6 < 0 != SCARRY4(temp4 - 0x1f,0xc)) {\n    temp4 = temp4 + 1;\n    return CONCAT44(temp1 | temp5 >> (temp4 & 0xff),\n                    temp2 >> (temp4 & 0xff) | temp5 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp3,temp2 >> (0x20 - (0xcU - temp6) & 0xff) | temp5 << (0xcU - temp6 & 0xff)) &\n         0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000418",
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78",
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "decode_uint_08000418"
        },
        "FUN_08002ca8": {
            "renaming": {
                "iVar1": "iVar",
                "param_1": "ptr_param1",
                "FUN_08002ca8": "check_and_update_08002ca8",
                "param_2": "param2",
                "param_3": "param3",
                "FUN_080015a0": "get_difference"
            },
            "code": "int check_and_update_08002ca8(int *ptr_param1, uint param2, int param3)\n{\n  int iVar;\n  while (true) {\n    if ((*(uint *)(*ptr_param1 + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*ptr_param1 + 0x14) & 0x10) == 0x10) {\n      break;\n    }\n    if ((param2 == 0) || (iVar = get_difference(), param2 < (uint)(iVar - param3))) {\n      ptr_param1[0x10] |= 0x20;\n      *(undefined *)((int)ptr_param1 + 0x3d) = 0x20;\n      *(undefined *)(ptr_param1 + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*ptr_param1 + 0x14) = 0xffffffef;\n  ptr_param1[0x10] = 0;\n  ptr_param1[0xc] = 0;\n  *(undefined *)((int)ptr_param1 + 0x3d) = 0x20;\n  *(undefined *)(ptr_param1 + 0xf) = 0;\n  return 1;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca8",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": true,
            "current_name": "check_and_update_08002ca8"
        },
        "FUN_08003a94": {
            "renaming": {
                "uVar1": "result",
                "param_1": "command_ptr",
                "FUN_08003a94": "execute_command_08003a94",
                "param_2": "args_ptr",
                "uVar2": "command_id"
            },
            "code": "int execute_command_08003a94(int *command_ptr, uint *args_ptr) {\n  int result = 0;\n  if (*(char *)(command_ptr + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(char *)(command_ptr + 0xf) = 1;\n    *(char *)((int)command_ptr + 0x3d) = 2;\n    *(uint *)(*command_ptr + 8) &= 0xffff0088;\n    uint command_id = *args_ptr;\n    switch (command_id) {\n      case 0:\n        FUN_0800416a(*command_ptr, 0);\n        break;\n      case 0x10:\n        FUN_0800416a(*command_ptr, 0x10);\n        break;\n      case 0x20:\n        FUN_0800416a(*command_ptr, 0x20);\n        break;\n      case 0x30:\n        FUN_0800416a(*command_ptr, 0x30);\n        break;\n      case 0x40:\n        FUN_080040a0(*command_ptr, args_ptr[1], args_ptr[3]);\n        FUN_0800416a(*command_ptr, 0x40);\n        break;\n      case 0x50:\n        FUN_080040a0(*command_ptr, args_ptr[1], args_ptr[3]);\n        FUN_0800416a(*command_ptr, 0x50);\n        break;\n      case 0x60:\n        FUN_08004104(*command_ptr, args_ptr[1], args_ptr[3]);\n        FUN_0800416a(*command_ptr, 0x60);\n        break;\n      case 0x70:\n        FUN_080041a8(*command_ptr, args_ptr[2], args_ptr[1], args_ptr[3]);\n        *(uint *)(*command_ptr + 8) &= 0xffffff88 | 0x77;\n        break;\n      case 0x1000:\n        *(uint *)(*command_ptr + 8) &= 0xfffffff8;\n        break;\n      case 0x2000:\n        FUN_080041a8(*command_ptr, args_ptr[2], args_ptr[1], args_ptr[3]);\n        *(uint *)(*command_ptr + 8) |= 0x4000;\n        break;\n    }\n    *(char *)((int)command_ptr + 0x3d) = 1;\n    *(char *)(command_ptr + 0xf) = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080041a8",
                "FUN_0800416a",
                "FUN_080040a0",
                "FUN_08004104"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a94",
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "imported": true,
            "current_name": "execute_command_08003a94"
        },
        "FUN_0800416a": {
            "renaming": {
                "param_1": "memory_address",
                "ushort": "ushort",
                "uint": "uint",
                "*(uint *)(param_1 + 8)": "permission_bits",
                "FUN_0800416a": "set_memory_permissions_0800416a",
                "param_2": "permissions"
            },
            "code": "void set_memory_permissions_0800416a(int memory_address, ushort permissions) {\n  uint* permission_bits = (uint*)(memory_address + 8);\n  *permission_bits = (*permission_bits & 0xffffff8f) | (uint)(permissions | 7);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800416a",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": true,
            "current_name": "set_memory_permissions_0800416a"
        },
        "FUN_080055f4": {
            "renaming": {
                "local_c": "arg2",
                "DAT_0800566c": "flags_pointer",
                "local_18": "length",
                "DAT_08005670": "data_pointer",
                "FUN_080055f4": "set_flags_and_call_function_080055f4",
                "local_14": "arg1"
            },
            "code": "void set_flags_and_call_function_080055f4(void)\n{\n  uint32_t* flags = (uint32_t*)(DAT_0800566c + 0x18);\n  *flags |= 0x20;\n  *flags |= 0x4;\n  *flags |= 0x8;\n  bool flag = (*flags) & 0x8;\n  int length = 0x1e;\n  int arg1 = 1;\n  int arg2 = 2;\n  FUN_080017c4(DAT_08005670, &length, arg1, arg2);\n  FUN_08001a80(DAT_08005670, length, 0, flag);\n  return;\n}",
            "called": [
                "FUN_08001a80",
                "FUN_080017c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055f4",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "set_flags_and_call_function_080055f4"
        },
        "FUN_080059f0": {
            "renaming": {
                "FUN_080059f0": "FUNC_080059f0"
            },
            "code": "\nulonglong FUNC_080059f0(int param_1,uint param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  int iVar8;\n  undefined8 uVar9;\n  undefined8 uVar10;\n  ulonglong uVar11;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar7 = param_2 & 0x7fffffff;\n  if (DAT_08005cd8 < (int)uVar7) {\n    if ((uVar7 == DAT_08005cdc || (int)uVar7 < (int)DAT_08005cdc) &&\n       ((uVar7 != DAT_08005cdc || (param_1 == 0)))) {\n      uVar1 = DAT_08005ce4;\n      if (0 < (int)param_2) {\n        uVar1 = DAT_08005ce0;\n      }\n      return CONCAT44(uVar1,DAT_08005ce8);\n    }\n    uVar11 = FUNC_0800015c(param_1,param_2,param_1,param_2,param_4);\n  }\n  else {\n    if (DAT_08005cec < (int)uVar7) {\n      uVar9 = do_nothing_08005d0c();\n      uVar4 = (undefined4)((ulonglong)uVar9 >> 0x20);\n      uVar1 = (undefined4)uVar9;\n      if (DAT_08005cfc < (int)uVar7) {\n        if (DAT_08005d00 < (int)uVar7) {\n          uVar9 = FUNC_0800071c(0,DAT_08005d08,uVar1,uVar4);\n          iVar8 = 3;\n        }\n        else {\n          uVar9 = FUNC_08000158(uVar1,uVar4,0,DAT_08005d04);\n          uVar10 = FUNC_080004c8(uVar1,uVar4,0,DAT_08005d04);\n          uVar10 = FUNC_0800015c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n          uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                               (int)((ulonglong)uVar10 >> 0x20));\n          iVar8 = 2;\n        }\n      }\n      else if (DAT_08005cfc + -0xd0000 < (int)uVar7) {\n        uVar9 = FUNC_08000158(uVar1,uVar4,0,DAT_08005cf8);\n        uVar10 = FUNC_0800015c(uVar1,uVar4,0,DAT_08005cf8);\n        uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar8 = 1;\n      }\n      else {\n        uVar9 = FUNC_0800015c(uVar1,uVar4,uVar1,uVar4);\n        uVar9 = FUNC_08000158((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0,DAT_08005cf8);\n        uVar10 = FUNC_0800015c(uVar1,uVar4,0,0x40000000);\n        uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar8 = 0;\n      }\n    }\n    else {\n      if ((int)uVar7 <= DAT_08005cec + -0x1bc0000) {\n        uVar10 = FUNC_0800015c(param_1,param_2,DAT_08005cd0,DAT_08005cd4,param_4);\n        iVar8 = FUN_080009e8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n        if (iVar8 != 0) {\n          return CONCAT44(param_2,param_1);\n        }\n      }\n      iVar8 = -1;\n    }\n    uVar6 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar5 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar5,uVar6,uVar5,uVar6);\n    uVar2 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar1 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar1,uVar2,uVar1,uVar2);\n    uVar3 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar4 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar4,uVar3,DAT_08005c78,DAT_08005c7c);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c80,DAT_08005c84);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c88,DAT_08005c8c);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c90,DAT_08005c94);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c98,DAT_08005c9c);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005ca0,DAT_08005ca4);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar1,uVar2);\n    uVar10 = FUNC_080004c8(uVar4,uVar3,DAT_08005ca8,DAT_08005cac);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cb0,DAT_08005cb4);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cb8,DAT_08005cbc);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cc0,DAT_08005cc4);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cc8,DAT_08005ccc);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar5,uVar6);\n    uVar1 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    if (iVar8 == -1) {\n      uVar11 = FUNC_08000158(uVar5,uVar6,(int)uVar9,uVar1);\n      return uVar11;\n    }\n    uVar9 = FUNC_08000158((int)uVar9,uVar1,*(undefined4 *)(PTR_DAT_08005cf0 + iVar8 * 8),\n                         *(undefined4 *)((int)(PTR_DAT_08005cf0 + iVar8 * 8) + 4));\n    uVar9 = FUNC_08000158((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar5,uVar6);\n    uVar11 = FUNC_08000158(*(undefined4 *)(PTR_DAT_08005cf4 + iVar8 * 8),\n                          *(undefined4 *)((int)(PTR_DAT_08005cf4 + iVar8 * 8) + 4),(int)uVar9,\n                          (int)((ulonglong)uVar9 >> 0x20));\n    if ((int)param_2 < 0) {\n      return uVar11 & 0xffffffff | (ulonglong)((int)(uVar11 >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return uVar11;\n}\n\n",
            "called": [
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_080009e8",
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_08000158"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080059f0",
            "calling": [
                "FUN_08005838"
            ],
            "imported": false,
            "current_name": "FUNC_080059f0"
        },
        "FUN_080053b0": {
            "renaming": {
                "local_50": "data[0]",
                "local_4c": "data[1]",
                "local_2c": "heap_size",
                "local_3c": "data[5]",
                "local_28": "N/A",
                "local_38": "data[6]",
                "local_48": "data[2]",
                "FUN_080053b0": "initialize_program_080053b0",
                "local_54": "mem_size",
                "local_20": "N/A",
                "local_30": "offset",
                "local_40": "data[4]",
                "local_58": "status",
                "local_24": "N/A",
                "local_34": "stack_size",
                "local_44": "data[3]"
            },
            "code": "void initialize_program_080053b0(void)\n{\n  int status;\n  int mem_size = 0x1000;\n  int data[4];\n  data[0] = DAT_080054f8;\n  data[1] = 0x708;\n  data[2] = 0;\n  data[3] = 100;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  status = initialize_data(data);\n  if (status != 0) {\n    print_error(\"Error initializing data\\n\");\n  }\n  status = allocate_memory(data, &mem_size);\n  if (status != 0) {\n    print_error(\"Error allocating memory\\n\");\n  }\n  status = initialize_memory(data);\n  if (status != 0) {\n    print_error(\"Error initializing memory\\n\");\n  }\n  int stack_size = 0x60;\n  int offset = 0;\n  status = initialize_stack(data, &stack_size, offset);\n  if (status != 0) {\n    print_error(\"Error initializing stack\\n\");\n  }\n  status = initialize_registers(data, &offset);\n  if (status != 0) {\n    print_error(\"Error initializing registers\\n\");\n  }\n  int heap_size = 0x2000;\n  status = allocate_heap(data, &heap_size);\n  if (status != 0) {\n    print_error(\"Error allocating heap\\n\");\n  }\n  finalize_program(data);\n}\n",
            "called": [
                "FUN_080035a4",
                "FUN_0800422e",
                "FUN_080042de",
                "FUN_08003a94",
                "FUN_08005674",
                "FUN_08003640",
                "FUN_08003908",
                "FUN_08005680"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053b0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "initialize_program_080053b0"
        },
        "FUN_08009e74": {
            "renaming": {
                "FUN_08009e74": "do_nothing_08009e74"
            },
            "code": "\nvoid do_nothing_08009e74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e74",
            "calling": [],
            "imported": true,
            "current_name": "do_nothing_08009e74"
        },
        "FUN_0800088a": {
            "renaming": {
                "bVar4": "check1",
                "uVar1": "temp_var1",
                "param_1": "param1",
                "unaff_r4": "bit_mask",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "FUN_0800088a": "calculate_value_0800088a",
                "uVar3": "temp_var3",
                "uVar2": "temp_var2",
                "bVar6": "check3",
                "bVar5": "check2",
                "in_r12": "shift_amount"
            },
            "code": "ulonglong calculate_value_0800088a(uint param1, uint param2, uint param3, uint param4) {\n  uint bit_mask = 0x80000000;\n  uint shift_amount = 0x14;\n  uint temp_var1;\n  uint temp_var2;\n  uint temp_var3;\n  bool check1;\n  bool check2;\n  bool check3;\n  \n  temp_var1 = param4 >> shift_amount;\n  temp_var2 = param2;\n  check1 = param1 | (param2 << 0xc);\n  check2 = param3 | (param4 << 0xc);\n  check3 = param1 | (param2 << 1);\n  \n  if (unaff_r4 != in_r12 || temp_var1 != in_r12) {\n    if (unaff_r4 == in_r12) {\n      if (!check1 && temp_var1 != in_r12) {\n        return (ulonglong)((param2 ^ param4) & bit_mask | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp_var1 == in_r12) {\n      param1 = param3;\n      temp_var2 = param4;\n      if (!check2) {\n        return (ulonglong)((param2 ^ param4) & bit_mask) << 0x20;\n      }\n    }\n    else {\n      if (!check1 && !check2) {\n        if (unaff_r4 == 0) {\n          temp_var2 &= bit_mask;\n          do {\n            temp_var3 = param1 & bit_mask;\n            param1 <<= 1;\n            temp_var2 = param2 * 2 + (uint)(temp_var3 != 0);\n          } while ((temp_var2 & 0x100000) == 0);\n          param2 |= temp_var2;\n          if (temp_var1 != 0) {\n            return CONCAT44(param2,param1);\n          }\n        }\n        do {\n          temp_var3 = param3 & bit_mask;\n          param3 <<= 1;\n          param4 = param4 * 2 + (uint)(temp_var3 != 0);\n        } while ((param4 & 0x100000) == 0);\n        return CONCAT44(temp_var2,param1);\n      }\n      if (!check3) {\n        return (ulonglong)((param2 ^ param4) & bit_mask | 0x7ff00000) << 0x20;\n      }\n      if (!check2) {\n        return (ulonglong)((param2 ^ param4) & bit_mask) << 0x20;\n      }\n    }\n  }\n  return CONCAT44(temp_var2,param1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800088a",
            "calling": [
                "FUN_0800071c"
            ],
            "imported": true,
            "current_name": "calculate_value_0800088a"
        },
        "FUN_080016d0": {
            "renaming": {
                "bVar1": "is_within_range",
                "param_1": "param",
                "DAT_08001710": "DAT",
                "ptr": "ptr",
                "*ptr": "*(ptr)",
                "FUN_08001618": "set_value_for_range",
                "FUN_080016d0": "check_param_within_range_080016d0"
            },
            "code": "bool check_param_within_range_080016d0(int param)\n{\n  bool is_within_range = param < 0x1000000;\n  if (is_within_range) {\n    int* ptr = &DAT_08001710_08001710[1];\n    *ptr = param - 1;\n    set_value_for_range(0xffffffff, 0xf);\n    DAT_08001710_08001710[2] = 0;\n    *DAT_08001710_08001710 = 7;\n  }\n  return !is_within_range;\n}",
            "called": [
                "FUN_08001618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016d0",
            "calling": [
                "FUN_08001762"
            ],
            "imported": true,
            "current_name": "check_param_within_range_080016d0"
        },
        "FUN_08001ccc": {
            "renaming": {
                "iVar2": "start_time",
                "uVar1": "SIZE_OF_DAT",
                "iVar5": "loop_counter",
                "param_1": "input_ptr",
                "puVar7": "byte_ptr",
                "param_6": "param_6",
                "param_7": "param_7",
                "param_2": "param_2",
                "cVar3": "char_val",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "FUN_08001ccc": "process_input_08001ccc",
                "uVar4": "temp_val",
                "uVar6": "result"
            },
            "code": "uint32_t process_input_08001ccc(uint32_t **input_ptr, uint16_t param_2, uint16_t param_3, uint16_t param_4, uint32_t *param_5, uint16_t param_6, uint32_t param_7)\n{\n  uint32_t uVar1;\n  int32_t iVar2;\n  char cVar3;\n  uint32_t uVar4;\n  int32_t iVar5;\n  uint32_t result;\n  uint32_t *byte_ptr;\n  bool bVar6;\n  \n  iVar2 = get_time();\n  uVar1 = SIZE_OF_DAT;\n  if (*(char *)((int)input_ptr + 0x3d) == ' ') {\n    do {\n      if ((uVar1 >> 0x10 & 0xff) == 1) {\n        uVar4 = uVar1 & ~(*input_ptr)[5] & 0xffff;\n        bVar6 = uVar4 == 0;\n        if (bVar6) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar6) {\n          cVar3 = '\\0';\n        }\n      }\n      else {\n        uVar4 = uVar1 & ~(*input_ptr)[6] & 0xffff;\n        bVar6 = uVar4 == 0;\n        if (bVar6) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar6) {\n          cVar3 = '\\0';\n        }\n      }\n      if (cVar3 != '\\x01') {\n        iVar5 = 0;\n        goto LAB_08001d9c;\n      }\n      iVar5 = get_time();\n    } while ((uint32_t)(iVar5 - iVar2) < 0x1a);\n    input_ptr[0xc] = (uint32_t *)0x0;\n    *(undefined *)((int)input_ptr + 0x3d) = 0x20;\n    *(undefined *)((int)input_ptr + 0x3e) = 0;\n    *(undefined *)(input_ptr + 0xf) = 0;\n    iVar5 = 3;\nLAB_08001d9c:\n    if (iVar5 == 0) {\n      if (*(char *)(input_ptr + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(input_ptr + 0xf) = 1;\n        if ((**input_ptr & 1) != 1) {\n          **input_ptr = **input_ptr | 1;\n        }\n        **input_ptr = **input_ptr & 0xfffff7ff;\n        *(undefined *)((int)input_ptr + 0x3d) = 0x21;\n        *(undefined *)((int)input_ptr + 0x3e) = 0x40;\n        input_ptr[0x10] = (uint32_t *)0x0;\n        input_ptr[9] = param_5;\n        *(uint16_t *)((int)input_ptr + 0x2a) = param_6;\n        input_ptr[0xb] = SIZE_OF_DAT_2;\n        *(uint16_t *)(input_ptr + 10) = *(uint16_t *)((int)input_ptr + 0x2a);\n        iVar5 = process_data(input_ptr, param_2, param_3, param_4, param_7, iVar2);\n        if (iVar5 == 0) {\n          while (*(uint16_t *)(input_ptr + 10) != 0) {\n            iVar5 = process_buffer(input_ptr, param_7, iVar2);\n            if (iVar5 != 0) {\n              if (input_ptr[0x10] == (uint32_t *)0x4) {\n                **input_ptr = **input_ptr | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            byte_ptr = input_ptr[9];\n            input_ptr[9] = (uint32_t *)((int)byte_ptr + 1);\n            (*input_ptr)[4] = (uint32_t)*(uint8_t *)byte_ptr;\n            *(uint16_t *)(input_ptr + 10) = *(uint16_t *)(input_ptr + 10) + -1;\n            *(uint16_t *)((int)input_ptr + 0x2a) = *(uint16_t *)((int)input_ptr + 0x2a) + -1;\n            if (((*input_ptr)[5] & 4) == 4 && (*(uint16_t *)(input_ptr + 10) != 0)) {\n              byte_ptr = input_ptr[9];\n              input_ptr[9] = (uint32_t *)((int)byte_ptr + 1);\n              (*input_ptr)[4] = (uint32_t)*(uint8_t *)byte_ptr;\n              *(uint16_t *)(input_ptr + 10) = *(uint16_t *)(input_ptr + 10) + -1;\n              *(uint16_t *)((int)input_ptr + 0x2a) = *(uint16_t *)((int)input_ptr + 0x2a) + -1;\n            }\n          }\n          iVar2 = process_end(input_ptr, param_7, iVar2);\n          if (iVar2 == 0) {\n            **input_ptr = **input_ptr | 0x200;\n            *(undefined *)((int)input_ptr + 0x3d) = 0x20;\n            *(undefined *)((int)input_ptr + 0x3e) = 0;\n            *(undefined *)(input_ptr + 0xf) = 0;\n            result = 0;\n          }\n          else if (input_ptr[0x10] == (uint32_t *)0x4) {\n            **input_ptr = **input_ptr | 0x200;\n            result = 1;\n          }\n          else {\n            result = 3;\n          }\n        }\n        else if (input_ptr[0x10] == (uint32_t *)0x4) {\n          *(undefined *)(input_ptr + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(input_ptr + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_08002c2e",
                "FUN_080015a0",
                "FUN_08002bb4",
                "FUN_08002640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ccc",
            "calling": [
                "FUN_08004ea4"
            ],
            "imported": true,
            "current_name": "process_input_08001ccc"
        },
        "FUN_0800157c": {
            "renaming": {
                "(uint)(byte)*PTR_DAT_08001598": "(uint)*byte_ptr",
                "*PTR_DAT_0800159c": "*int_ptr",
                "PTR_DAT_08001598": "byte_ptr",
                "PTR_DAT_0800159c": "result_ptr",
                "FUN_0800157c": "add_byte_to_uint_and_store_result_0800157c"
            },
            "code": "void add_byte_to_uint_and_store_result_0800157c(void)\n{\n  uint* PTR_DAT_0800159c = (uint*) PTR_DAT_0800159c;\n  int* int_ptr = (int*) PTR_DAT_0800159c;\n  byte* PTR_DAT_08001598 = (byte*) PTR_DAT_08001598;\n  uint result = *PTR_DAT_0800159c + (uint)(byte)*PTR_DAT_08001598;\n  *PTR_DAT_0800159c = result;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08005704"
            ],
            "imported": true,
            "current_name": "add_byte_to_uint_and_store_result_0800157c"
        },
        "FUN_08000e20": {
            "renaming": {
                "FUN_08000e20": "FUNC_08000e20"
            },
            "code": "\nuint FUNC_08000e20(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e16:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e38;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e38:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e20",
            "calling": [
                "FUN_08004d78",
                "FUN_080049cc"
            ],
            "imported": false,
            "current_name": "FUNC_08000e20"
        },
        "FUN_0800121c": {
            "renaming": {
                "FUN_0800121c": "FUNC_0800121c"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 FUNC_0800121c(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong uVar1;\n  uint uVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint *puVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  undefined8 uVar15;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 != 0) {\n        param_3 = param_3 << (uVar6 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        param_1 = param_1 << (uVar6 & 0xff);\n      }\n      uVar12 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar12;\n      uVar11 = uVar8 * (param_3 & 0xffff);\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar12 * uVar8) * 0x10000;\n      uVar4 = uVar8;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar14 = CARRY4(param_3,uVar7);\n        uVar7 = param_3 + uVar7;\n        uVar4 = uVar8 - 1;\n        if ((bVar14 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar4 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar2 = (uVar7 - uVar11) / uVar12;\n      uVar5 = uVar2 * (param_3 & 0xffff);\n      uVar8 = param_1 & 0xffff | ((uVar7 - uVar11) - uVar12 * uVar2) * 0x10000;\n      uVar7 = uVar2;\n      if (uVar8 <= uVar5 && uVar5 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar2 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar5 && uVar5 - uVar8 != 0)) {\n          uVar7 = uVar2 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n      puVar9 = (uint *)0x0;\n      uVar8 = uVar8 - uVar5;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x08001302. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        uVar15 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar15;\n      }\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 == 0) {\n        puVar9 = (uint *)0x1;\n        param_2 = param_2 - param_3;\n        uVar12 = param_3 >> 0x10;\n        uVar2 = param_3 & 0xffff;\n      }\n      else {\n        param_3 = param_3 << (uVar6 & 0xff);\n        uVar4 = param_2 >> (0x20 - uVar6 & 0xff);\n        uVar12 = param_3 >> 0x10;\n        uVar11 = uVar4 / uVar12;\n        uVar2 = param_3 & 0xffff;\n        uVar5 = uVar11 * uVar2;\n        uVar8 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        uVar7 = uVar8 >> 0x10 | (uVar4 - uVar12 * uVar11) * 0x10000;\n        param_1 = param_1 << (uVar6 & 0xff);\n        uVar4 = uVar11;\n        if (uVar7 <= uVar5 && uVar5 - uVar7 != 0) {\n          bVar14 = CARRY4(param_3,uVar7);\n          uVar7 = param_3 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar5 && uVar5 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + param_3;\n          }\n        }\n        uVar11 = (uVar7 - uVar5) / uVar12;\n        uVar13 = uVar11 * uVar2;\n        param_2 = uVar8 & 0xffff | ((uVar7 - uVar5) - uVar12 * uVar11) * 0x10000;\n        uVar7 = uVar11;\n        if (param_2 <= uVar13 && uVar13 - param_2 != 0) {\n          bVar14 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar7 = uVar11 - 1;\n          if ((bVar14 == false) && (param_2 <= uVar13 && uVar13 - param_2 != 0)) {\n            uVar7 = uVar11 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar13;\n        puVar9 = (uint *)(uVar7 | uVar4 << 0x10);\n      }\n      uVar11 = param_2 / uVar12;\n      uVar7 = uVar2 * uVar11;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar12 * uVar11) * 0x10000;\n      uVar4 = uVar11;\n      if (uVar8 <= uVar7 && uVar7 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar4 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar7 && uVar7 - uVar8 != 0)) {\n          uVar4 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar11 = (uVar8 - uVar7) / uVar12;\n      uVar2 = uVar2 * uVar11;\n      uVar8 = param_1 & 0xffff | ((uVar8 - uVar7) - uVar12 * uVar11) * 0x10000;\n      uVar7 = uVar11;\n      if (uVar8 <= uVar2 && uVar2 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar2 && uVar2 - uVar8 != 0)) {\n          uVar7 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar8 = uVar8 - uVar2;\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar8 >> (uVar6 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else {\n    puVar9 = param_5;\n    if (param_2 < param_4) {\n      puVar3 = param_5;\n      if (param_5 != (uint *)0x0) {\n        *param_5 = param_1;\n        param_5[1] = param_2;\n        return 0;\n      }\n    }\n    else {\n      puVar10 = (uint *)count_leading_zeroes(param_4);\n      if (puVar10 == (uint *)0x0) {\n        if ((param_4 < param_2) || (puVar3 = puVar10, param_3 <= param_1)) {\n          bVar14 = param_1 < param_3;\n          param_1 = param_1 - param_3;\n          param_2 = (param_2 - param_4) - (uint)bVar14;\n          puVar3 = (uint *)0x1;\n        }\n        puVar9 = puVar10;\n        if (param_5 != (uint *)0x0) {\n          *param_5 = param_1;\n          param_5[1] = param_2;\n        }\n      }\n      else {\n        uVar8 = 0x20 - (int)puVar10;\n        uVar2 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar10 & 0xff);\n        uVar6 = param_2 >> (uVar8 & 0xff);\n        uVar5 = uVar2 >> 0x10;\n        uVar11 = uVar6 / uVar5;\n        uVar12 = uVar11 * (uVar2 & 0xffff);\n        uVar4 = param_2 << ((uint)puVar10 & 0xff) | param_1 >> (uVar8 & 0xff);\n        uVar7 = uVar4 >> 0x10 | (uVar6 - uVar5 * uVar11) * 0x10000;\n        param_3 = param_3 << ((uint)puVar10 & 0xff);\n        param_1 = param_1 << ((uint)puVar10 & 0xff);\n        uVar6 = uVar11;\n        if (uVar7 <= uVar12 && uVar12 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar6 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar12 && uVar12 - uVar7 != 0)) {\n            uVar6 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        uVar11 = (uVar7 - uVar12) / uVar5;\n        uVar13 = uVar11 * (uVar2 & 0xffff);\n        uVar7 = uVar4 & 0xffff | ((uVar7 - uVar12) - uVar5 * uVar11) * 0x10000;\n        uVar4 = uVar11;\n        if (uVar7 <= uVar13 && uVar13 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar13 && uVar13 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        puVar3 = (uint *)(uVar4 | uVar6 << 0x10);\n        uVar1 = ZEXT48(puVar3) * (ulonglong)param_3;\n        if (CONCAT44(uVar7 - uVar13,param_1) < uVar1) {\n          puVar3 = (uint *)((int)puVar3 + -1);\n          uVar1 = uVar1 - CONCAT44(uVar2,param_3);\n        }\n        if (param_5 != (uint *)0x0) {\n          uVar6 = ((uVar7 - uVar13) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n          *param_5 = uVar6 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar10 & 0xff);\n          param_5[1] = uVar6 >> ((uint)puVar10 & 0xff);\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,puVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800121c",
            "calling": [
                "FUN_080011ec"
            ],
            "imported": false,
            "current_name": "FUNC_0800121c"
        },
        "FUN_08005d14": {
            "renaming": {
                "PTR_PTR_DAT_08005d1c": "PTR_PTR_DATA",
                "FUN_08005d14": "get_pointer_value_08005d14"
            },
            "code": "get_pointer_value_08005d14() {\n    return *(undefined4 *)PTR_PTR_DAT_08005d1c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d14",
            "calling": [
                "FUN_08005728"
            ],
            "imported": true,
            "current_name": "get_pointer_value_08005d14"
        },
        "FUN_080015b4": {
            "renaming": {
                "param_1": "config_value",
                "FUN_080015b4": "update_config_register_080015b4",
                "DAT_080015f8": "CONFIG_REG_BASE_ADDR"
            },
            "code": "void update_config_register_080015b4(uint8_t config_value) {\n  uint32_t* config_reg = (uint32_t*)(DAT_080015f8 + 0xc);\n  *config_reg = (*config_reg & 0xf8ff) | ((config_value & 7) << 8) | 0x5fa0000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b4",
            "calling": [
                "FUN_08001714"
            ],
            "imported": true,
            "current_name": "update_config_register_080015b4"
        },
        "FUN_080036f8": {
            "renaming": {
                "do_nothing_08003c80": "do_something_5",
                "param_1": "data_ptr",
                "PTR_": "data_ptr",
                "DAT_": "flag_",
                "do_nothing_08003c4a": "do_something_1",
                "do_nothing_08003c6e": "do_something_2",
                "do_nothing_08004366": "do_something_6",
                "do_nothing_08003c5c": "do_something_3",
                "FUN_080036f8": "process_data_080036f8",
                "do_nothing_08004378": "do_something_4"
            },
            "code": "void process_data_080036f8(int *PTR_) {\n  uint32_t DAT_1 = *(uint32_t *)(*PTR_ + 0x10);\n  uint32_t DAT_2 = *(uint32_t *)(*PTR_ + 0xc);\n\n  if ((DAT_1 & 2) && (DAT_2 & 2)) {\n    *(uint32_t *)(*PTR_ + 0x10) = 0xfffffffd;\n    *(uint8_t *)(PTR_ + 7) = 1;\n    if ((*(uint32_t *)(*PTR_ + 0x18) & 3) == 0) {\n      do_something_1(PTR_);\n      do_something_2(PTR_);\n    }\n    else {\n      do_something_3(PTR_);\n    }\n    *(uint8_t *)(PTR_ + 7) = 0;\n  }\n\n  if ((DAT_1 & 4) && (DAT_2 & 4)) {\n    *(uint32_t *)(*PTR_ + 0x10) = 0xfffffffb;\n    *(uint8_t *)(PTR_ + 7) = 2;\n    if ((*(uint32_t *)(*PTR_ + 0x18) & 0x300) == 0) {\n      do_something_1(PTR_);\n      do_something_2(PTR_);\n    }\n    else {\n      do_something_3(PTR_);\n    }\n    *(uint8_t *)(PTR_ + 7) = 0;\n  }\n\n  if ((DAT_1 & 8) && (DAT_2 & 8)) {\n    *(uint32_t *)(*PTR_ + 0x10) = 0xfffffff7;\n    *(uint8_t *)(PTR_ + 7) = 4;\n    if ((*(uint32_t *)(*PTR_ + 0x1c) & 3) == 0) {\n      do_something_1(PTR_);\n      do_something_2(PTR_);\n    }\n    else {\n      do_something_3(PTR_);\n    }\n    *(uint8_t *)(PTR_ + 7) = 0;\n  }\n\n  if ((DAT_1 & 0x10) && (DAT_2 & 0x10)) {\n    *(uint32_t *)(*PTR_ + 0x10) = 0xffffffef;\n    *(uint8_t *)(PTR_ + 7) = 8;\n    if ((*(uint32_t *)(*PTR_ + 0x1c) & 0x300) == 0) {\n      do_something_1(PTR_);\n      do_something_2(PTR_);\n    }\n    else {\n      do_something_3(PTR_);\n    }\n    *(uint8_t *)(PTR_ + 7) = 0;\n  }\n\n  if ((DAT_1 & 1) && (DAT_2 & 1)) {\n    *(uint32_t *)(*PTR_ + 0x10) = 0xfffffffe;\n    perform_action_1(PTR_);\n  }\n\n  if ((DAT_1 & 0x80) && (DAT_2 & 0x80)) {\n    *(uint32_t *)(*PTR_ + 0x10) = 0xffffff7f;\n    do_something_4(PTR_);\n  }\n\n  if ((DAT_1 & 0x40) && (DAT_2 & 0x40)) {\n    *(uint32_t *)(*PTR_ + 0x10) = 0xffffffbf;\n    do_something_5(PTR_);\n  }\n\n  if ((DAT_1 & 0x20) && (DAT_2 & 0x20)) {\n    *(uint32_t *)(*PTR_ + 0x10) = 0xffffffdf;\n    do_something_6(PTR_);\n  }\n}\n",
            "called": [
                "FUN_08004378",
                "FUN_08004366",
                "FUN_08003c6e",
                "FUN_08003c4a",
                "FUN_08004f78",
                "FUN_08003c80",
                "FUN_08003c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f8",
            "calling": [
                "FUN_08005714"
            ],
            "imported": true,
            "current_name": "process_data_080036f8"
        },
        "FUN_080041a8": {
            "renaming": {
                "param_1": "address",
                "uint": "uint32_t",
                "*(uint *)(param_1 + 8) & 0xffff00ff": "current_value & 0x00FFFF00",
                "*(uint *)(param_1 + 8)": "*(address + 1)",
                "param_2 | param_4 << 8 | param_3": "value_1 | (value_2 << 8) | (shift_amount << 24)",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "shift_amount",
                "FUN_080041a8": "update_data_at_address_080041a8"
            },
            "code": "void update_data_at_address_080041a8(uint32_t* address, uint32_t value_1, uint32_t value_2, uint8_t shift_amount) {\n  uint32_t current_value = *(address + 1);\n  uint32_t shifted_value = (value_2 << 8) | value_1 | (shift_amount << 24);\n  *(address + 1) = shifted_value | (current_value & 0x00FFFF00);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a8",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": true,
            "current_name": "update_data_at_address_080041a8"
        },
        "FUN_080004c8": {
            "renaming": {
                "FUN_080004c8": "FUNC_080004c8"
            },
            "code": "\nulonglong FUNC_080004c8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = FUN_080006a4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004c8",
            "calling": [
                "FUN_080079e8",
                "FUN_08004bd8",
                "FUN_080096e0",
                "FUN_08005e9c",
                "FUN_080059f0",
                "FUN_08004d78"
            ],
            "imported": false,
            "current_name": "FUNC_080004c8"
        },
        "FUN_08008ad4": {
            "renaming": {
                "FUN_08008ad4": "get_data_buffer_08008ad4",
                "puVar1": "data_buffer"
            },
            "code": "undefined* get_data_buffer_08008ad4(void)\n{\n  undefined* data_buffer = *(undefined**)(*(int*)PTR_PTR_DAT_08008ae8 + 0x34);\n  if (data_buffer == (undefined*)0x0) {\n    data_buffer = PTR_DAT_08008aec;\n  }\n  return data_buffer + 0xf0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ad4",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "get_data_buffer_08008ad4"
        },
        "FUN_080009e8": {
            "renaming": {
                "FUN_080009e8": "is_end_of_string_080009e8",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_080009e8(void)\n{\n  char current_char;\n  FUN_08000978();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009e8",
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c",
                "FUN_080059f0"
            ],
            "imported": true,
            "current_name": "is_end_of_string_080009e8"
        },
        "FUN_08005674": {
            "renaming": {
                "FUN_08005674": "run_infinite_loop_08005674"
            },
            "code": "void run_infinite_loop_08005674(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005674",
            "calling": [
                "FUN_08005348",
                "FUN_080053b0",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_08005500"
            ],
            "imported": true,
            "current_name": "run_infinite_loop_08005674"
        },
        "FUN_08003c4a": {
            "renaming": {
                "FUN_08003c4a": "do_nothing_08003c4a"
            },
            "code": "\nvoid do_nothing_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c4a",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": true,
            "current_name": "do_nothing_08003c4a"
        },
        "FUN_08009630": {
            "renaming": {
                "iVar1": "decoded_value",
                "iVar3": "num_parts",
                "iVar4": "num_parts",
                "FUN_08009630": "decode_08009630",
                "param_1": "param1",
                "local_1c": "local_1c",
                "param_6": "out2",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "out1",
                "uVar2": "shift_amount",
                "local_20": "local_20",
                "uVar5": "part1",
                "uVar7": "combined_value",
                "uVar6": "part2"
            },
            "code": "int decode_08009630(uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4, int *out1, int *out2)\n{\n  int decode_08009630d_value;\n  uint32_t shift_amount;\n  int num_parts;\n  uint32_t part1;\n  uint32_t part2;\n  uint32_t combined_value;\n  uint32_t local_20;\n  uint32_t local_1c;\n  decode_08009630d_value = FUN_080090c0(param1, 1);\n  shift_amount = (param4 << 1) >> 21;\n  local_1c = param4 & 0xfffff;\n  if (shift_amount != 0)\n  {\n    local_1c |= 0x100000;\n  }\n  if (param3 == 0)\n  {\n    num_parts = FUN_080091e4(&local_1c) + 32;\n    *(uint32_t *)(decode_08009630d_value + 16) = 1;\n    *(uint32_t *)(decode_08009630d_value + 20) = local_1c;\n  }\n  else\n  {\n    local_20 = param3;\n    num_parts = FUN_080091e4(&local_20);\n    if (num_parts == 0)\n    {\n      *(uint32_t *)(decode_08009630d_value + 20) = local_20;\n    }\n    else\n    {\n      part1 = local_1c << (32 - num_parts);\n      part2 = local_1c >> num_parts;\n      combined_value = part1 | local_20;\n      *(uint32_t *)(decode_08009630d_value + 20) = combined_value;\n    }\n    if (part2 == 0)\n    {\n      num_parts = 1;\n    }\n    else\n    {\n      num_parts = 2;\n    }\n    *(uint32_t *)(decode_08009630d_value + 24) = part2;\n    *(uint32_t *)(decode_08009630d_value + 16) = num_parts;\n  }\n  if (shift_amount == 0)\n  {\n    *out1 = num_parts + 654;\n    *out2 = (int)(((uint64_t)FUN_080091a4(*(uint32_t *)(decode_08009630d_value + num_parts * 4 + 16)) >> 32) * 32 - (int)FUN_080091a4(*(uint32_t *)(decode_08009630d_value + num_parts * 4 + 16)));\n    return decode_08009630d_value;\n  }\n  *out1 = shift_amount + 655;\n  *out2 = 53 - num_parts;\n  return decode_08009630d_value;\n}",
            "called": [
                "FUN_080090c0",
                "FUN_080091e4",
                "FUN_080091a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009630",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "decode_08009630"
        },
        "FUN_08004104": {
            "renaming": {
                "*(uint *)(param_1 + 0x20)": "param_1_32",
                "*(uint *)(param_1 + 0x18)": "param_1_24",
                "FUN_08004104": "update_params_08004104",
                "param_1": "base_addr",
                "param_2": "param_2",
                "param_3": "param_3"
            },
            "code": "void update_params_08004104(int base_addr, int param_2, int param_3)\n{\n  uint* param_1_32 = (uint*)(base_addr + 0x20);\n  uint* param_1_24 = (uint*)(base_addr + 0x18);\n  *param_1_32 = *param_1_32 & 0xffffffef;\n  *param_1_24 = (param_3 << 0xc) | (*param_1_24 & 0xffff0fff);\n  *param_1_32 = (param_2 << 4) | (*param_1_32 & 0xffffff5f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004104",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": true,
            "current_name": "update_params_08004104"
        },
        "FUN_08000ff4": {
            "renaming": {
                "in_CY": "current_character",
                "FUN_08000fd0": "execute_input_processing",
                "FUN_08000ff4": "is_end_of_input_reached_08000ff4"
            },
            "code": "bool is_end_of_input_reached_08000ff4(void)\n{\n  char current_character;\n  execute_input_processing();\n  return current_character == '\\0';\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ff4",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "is_end_of_input_reached_08000ff4"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "initialize_data_08005714",
                "PTR_DAT_08005724": "PTR_DATA",
                "FUN_080036f8": "initialize_pointer_data"
            },
            "code": "void initialize_data_08005714(void)\n{\n  initialize_pointer_data(PTR_DAT_08005724);\n  return;\n}",
            "called": [
                "FUN_080036f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": true,
            "current_name": "initialize_data_08005714"
        },
        "FUN_08005d0c": {
            "renaming": {
                "FUN_08005d0c": "do_nothing_08005d0c"
            },
            "code": "\nvoid do_nothing_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d0c",
            "calling": [
                "FUN_080059f0",
                "FUN_08005838"
            ],
            "imported": true,
            "current_name": "do_nothing_08005d0c"
        },
        "FUN_08005e40": {
            "renaming": {
                "iVar1": "bit_offset",
                "puVar2": "data_ptr",
                "param_1": "data",
                "count_leading_zeroes": "count_leading_zero_bits",
                "FUN_08005e40": "find_first_set_bit_08005e40",
                "uVar4": "word"
            },
            "code": "int find_first_set_bit_08005e40(uint num)\n{\n  int leading_zero_bits = 0;\n  while (num != 0)\n  {\n    leading_zero_bits++;\n    num >>= 1;\n  }\n  return 32 - leading_zero_bits;\n}\n\nint find_first_set_bit_08005e40(uint data)\n{\n  uint* data_ptr = (uint*)(PTR_8 - 4 & (int)data);\n  int bit_offset = -(int)data & 3;\n  uint word = *data_ptr;\n  if ((int)data & 3)\n  {\n    word |= 0xFFFFFFFF >> ((bit_offset + 4 & 31) << 3);\n  }\n  while (word == 0)\n  {\n    data_ptr++;\n    word = *data_ptr;\n    bit_offset += 4;\n  }\n  int leading_zero_bits = find_first_set_bit_08005e40(word & -word);\n  return bit_offset + (31 - leading_zero_bits >> 3);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e40",
            "calling": [
                "FUN_08005e9c",
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "find_first_set_bit_08005e40"
        },
        "FUN_08005d20": {
            "renaming": {
                "iVar2": "i",
                "iVar4": "num_functions",
                "FUN_08005d20": "execute_functions_08005d20",
                "puVar1": "do_nothing_ptr",
                "ppcVar3": "function_ptr"
            },
            "code": "void execute_functions_08005d20(void)\n{\n  int num_functions = (int)PTR_DAT_08005d58 - (int)PTR_DAT_08005d5c >> 2;\n  if (num_functions != 0) {\n    int i = 0;\n    code **function_ptr = (code **)PTR_DAT_08005d5c;\n    while (i != num_functions) {\n      (**function_ptr)();\n      function_ptr++;\n      i++;\n    }\n  }\n  code **post_functions_ptr = (code **)PTR_DAT_08005d64;\n  undefined *do_nothing_ptr = PTR_DAT_08005d60;\n  do_nothing_08009e68();\n  num_functions = (int)do_nothing_ptr - (int)post_functions_ptr >> 2;\n  if (num_functions != 0) {\n    int i = 0;\n    while (i != num_functions) {\n      (**post_functions_ptr)();\n      post_functions_ptr++;\n      i++;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08009e68",
                "FUN_08000134",
                "FUN_080078a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d20",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": true,
            "current_name": "execute_functions_08005d20"
        },
        "FUN_08001a80": {
            "renaming": {
                "param_1": "base_address",
                "uint": "uint32_t",
                "FUN_08001a80": "set_param_value_08001a80",
                "param_2": "value",
                "param_3": "is_high_byte"
            },
            "code": "void set_param_value_08001a80(uint32_t base_address, uint16_t value, char is_high_byte){\\n  if (is_high_byte == \"\\0\") {\\n    *(uint32_t *)(base_address + 0x10) = (uint32_t)value << 0x10;\\n  }\\n  else {\\n    *(uint32_t *)(base_address + 0x10) = (uint32_t)value;\\n  }\\n  return;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a80",
            "calling": [
                "FUN_080055f4",
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "set_param_value_08001a80"
        },
        "FUN_08005838": {
            "renaming": {
                "do_nothing_08005d0c": "do_nothing",
                "FUNC_080059f0": "calculate_value3",
                "param_1": "value1",
                "DAT_080059bc": "max_value3",
                "DAT_080059a8": "max_value7",
                "FUNC_08000158": "calculate_value5",
                "DAT_080059c8": "max_value5",
                "uVar3": "result",
                "SCARRY4": "SCARRY4",
                "uVar2": "temp2",
                "DAT_080059a0": "max_value1",
                "uVar5": "temp4",
                "uVar4": "temp3",
                "DAT_080059c0": "max_value4",
                "uVar6": "temp5",
                "DAT_080059e8": "max_value3",
                "DAT_080059e0": "max_value3",
                "uVar1": "temp1",
                "FUNC_0800015c": "calculate_value2",
                "FUNC_0800071c": "calculate_value4",
                "DAT_080059ac": "max_value8",
                "DAT_080059b8": "max_value6",
                "DAT_080059d8": "max_value4",
                "FUN_08005838": "calculate_value_08005838",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "DAT_080059b0": "max_value2",
                "DAT_080059d0": "max_value5",
                "DAT_080059b4": "max_value9"
            },
            "code": "uint calculate_value_08005838(uint value1, uint value2, uint value3, uint value4)\n{\n  int temp1;\n  undefined4 temp2;\n  uint result;\n  uint temp3;\n  uint temp4;\n  undefined8 temp5;\n  \n  temp5 = CONCAT44(DAT_080059a0,DAT_080059b0);\n  temp3 = value4 & 0x7fffffff;\n  if ((DAT_080059bc < (temp3 | (-value3 | value3) >> 0x1f)) ||\n     (temp4 = value2 & 0x7fffffff, DAT_080059bc < (temp4 | (-value1 | value1) >> 0x1f))) {\n    result = calculate_value_080058382(value3,value4,value1,value2);\n    return result;\n  }\n  if ((value4 + 0xc0100000 | value3) == 0) {\n    result = calculate_value_080058383();\n    return result;\n  }\n  temp1 = (int)value4 >> 0x1e & 2U | value2 >> 0x1f;\n  if ((temp4 | value1) == 0) {\n    if (temp1 == 2) {\n      return DAT_080059b0;\n    }\n    result = DAT_080059a0;\n    if (temp1 != 3) {\n      return value1;\n    }\n  }\n  else {\n    if ((temp3 | value3) != 0) {\n      if (temp3 == DAT_080059bc) {\n        if (temp4 == temp3) {\n          if (temp1 == 2) {\n            return DAT_080059bc;\n          }\n          if (temp1 == 3) {\n            return DAT_080059c0;\n          }\n          if (temp1 == 1) {\n            return DAT_080059c8;\n          }\n          return DAT_080059b8;\n        }\n        if (temp1 == 2) {\n          return DAT_080059b0;\n        }\n        if (temp1 == 3) {\n          return DAT_080059a0;\n        }\n        if (temp1 == 1) {\n          return 0;\n        }\n        return 0;\n      }\n      if (temp4 != DAT_080059bc) {\n        temp1 = (int)(temp4 - temp3) >> 0x14;\n        if (temp1 < 0x3d) {\n          if (((int)value4 < 0) && (temp1 + 0x3c < 0 != SCARRY4(temp1,0x3c))) {\n            temp5 = 0;\n          }\n          else {\n            calculate_value_080058384(value1,value2,value3,value4,value4);\n            do_nothing();\n            temp5 = calculate_value_080058383();\n          }\n        }\n        temp2 = (undefined4)((ulonglong)temp5 >> 0x20);\n        temp3 = (uint)temp5;\n        if (temp1 == 1) {\n          return temp3;\n        }\n        if (temp1 == 2) {\n          temp5 = calculate_value_080058385(temp3,temp2,DAT_080059a8,DAT_080059ac);\n          temp3 = calculate_value_080058385(DAT_080059b0,DAT_080059b4,(int)temp5,(int)((ulonglong)temp5 >> 0x20));\n          return temp3;\n        }\n        if (temp1 == 0) {\n          return temp3;\n        }\n        temp5 = calculate_value_080058385(temp3,temp2,DAT_080059a8,DAT_080059ac);\n        temp3 = calculate_value_080058385((int)temp5,(int)((ulonglong)temp5 >> 0x20),DAT_080059b0,DAT_080059b4);\n        return temp3;\n      }\n    }\n    temp3 = DAT_080059b8;\n    if (-1 < (int)value2) {\n      temp3 = DAT_080059b0;\n    }\n  }\n  return temp3;\n}",
            "called": [
                "FUN_0800071c",
                "FUN_080059f0",
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_08000158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005838",
            "calling": [
                "thunk_FUN_08005838"
            ],
            "imported": true,
            "current_name": "calculate_value_08005838"
        },
        "FUN_080090a8": {
            "renaming": {
                "do_nothing_08008af0": "do_nothing",
                "FUN_080090a8": "execute_nothing_function_080090a8",
                "PTR_DAT_080090b0": "PTR_DATA"
            },
            "code": "void execute_nothing_function_080090a8(void)\n{\n  do_nothing(PTR_DAT_080090b0);\n  return;\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090a8",
            "calling": [
                "FUN_0800884c",
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "imported": true,
            "current_name": "execute_nothing_function_080090a8"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e6c": "create_object",
                "uVar1": "result",
                "param_1": "param",
                "FUN_08004e74": "initialize_08004e74",
                "PTR_DAT_08004ea0": "pointer_to_data"
            },
            "code": "int initialize_08004e74(int param){\n  int result;\n  if (*PTR_DAT_08004ea0 == 0) {\n    result = create_object(1, param, 0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08004e6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "initialize_08004e74"
        },
        "FUN_080096e0": {
            "renaming": {
                "iVar1": "max_exponent",
                "iVar2": "exponent_diff_temp",
                "param_1": "exponent",
                "param_2": "mantissa",
                "FUN_080096e0": "calculate_float_bits_080096e0",
                "param_3": "exponent_diff",
                "param_4": "sign_bit",
                "uVar3": "absolute_exponent",
                "uVar4": "combined_bits"
            },
            "code": "uint32_t calculate_float_bits_080096e0(uint32_t exponent, uint32_t mantissa, int *exponent_diff, uint32_t sign_bit) {\n  int max_exponent = MAX_EXPONENT;\n  uint64_t combined_bits = ((uint64_t)mantissa << 32) | exponent;\n  int exponent_diff_temp = 0;\n  uint32_t absolute_exponent = exponent & 0x7fffffff;\n  *exponent_diff = 0;\n  if ((absolute_exponent <= max_exponent) && ((absolute_exponent | mantissa) != 0)) {\n    if (absolute_exponent < 0x100000) {\n      combined_bits = calculate_mantissa_and_exponent(mantissa, exponent, 0, ROUNDING_MODE, sign_bit);\n      exponent_diff_temp = -54;\n      absolute_exponent = (uint32_t)(combined_bits >> 32) & 0x7fffffff;\n    }\n    exponent = (uint32_t)combined_bits;\n    mantissa = (uint32_t)(combined_bits >> 32) & 0x800fffff | 0x3fe00000;\n    *exponent_diff = ((int)absolute_exponent >> 20) - 0x3fe + exponent_diff_temp;\n  }\n  return ((uint64_t)mantissa << 32) | exponent;\n}",
            "called": [
                "FUN_080004c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "calculate_float_bits_080096e0"
        },
        "FUN_0800910c": {
            "renaming": {
                "iVar1": "data_ptr",
                "param_1": "data_address",
                "param_2": "value_address",
                "FUN_0800910c": "update_value_if_not_null_0800910c"
            },
            "code": "void update_value_if_not_null_0800910c(int data_address, undefined4 *value_address)\n{\n  int data_ptr;\n  if (value_address != (undefined4 *)0x0) {\n    data_ptr = *(int *)(data_address + 0x4c);\n    *value_address = *(undefined4 *)(data_ptr + value_address[1] * 4);\n    *(undefined4 **)(data_ptr + value_address[1] * 4) = value_address;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800910c",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "update_value_if_not_null_0800910c"
        },
        "FUN_080052a0": {
            "renaming": {
                "local_c": "constant_7",
                "iVar2": "success",
                "lVar1": "hash_value",
                "local_2c": "constant_2",
                "local_3c": "input_3",
                "local_28": "constant_3",
                "local_38": "input_4",
                "FUN_080052a0": "calculate_hash_080052a0",
                "local_10": "constant_6",
                "uVar3": "current_time",
                "local_20": "constant_4",
                "local_30": "constant_1",
                "local_40": "input_2",
                "local_14": "constant_5",
                "local_34": "input_5",
                "local_44": "input_1"
            },
            "code": "void calculate_hash_080052a0(void)\n{\n  longlong hash_value;\n  int success;\n  ulonglong current_time;\n  int constant_1 = 1;\n  int constant_2 = 0x10000;\n  int constant_3 = 0;\n  int constant_4 = 1;\n  int constant_5 = 2;\n  int constant_6 = 0x10000;\n  int constant_7 = 0x1c0000;\n  success = get_random_number(&constant_1);\n  if (success != 0) {\n    print_error_message(\"Error: Unable to generate random number.\");\n  }\n  int input_1 = 0xf;\n  int input_2 = 2;\n  int input_3 = 0x80;\n  int input_4 = 0;\n  int input_5 = 0;\n  success = perform_operation(&input_1, 2);\n  if (success != 0) {\n    print_error_message(\"Error: Unable to perform operation.\");\n  }\n  current_time = get_current_time();\n  hash_value = (ulonglong)constant_7 * (current_time & 0xffffffff);\n  calculate_hash_080052a0_helper((uint)((ulonglong)hash_value >> 0x26),(int)(current_time >> 0x20),(int)hash_value);\n  finalize_hash(4);\n  reset_variables(0xffffffff,0,0);\n  return;\n}",
            "called": [
                "FUN_08002d98",
                "FUN_0800172a",
                "FUN_08001762",
                "FUN_08005674",
                "FUN_0800177c",
                "FUN_08003504",
                "FUN_08003260"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052a0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "calculate_hash_080052a0"
        },
        "FUN_08009120": {
            "renaming": {
                "iVar3": "block_size_ptr",
                "iVar5": "block_count",
                "puVar4": "data_ptr",
                "param_1": "num_blocks",
                "param_2": "block_data",
                "param_3": "block_size",
                "param_4": "hash_value",
                "puVar1": "hash",
                "uVar2": "carry",
                "FUN_08009120": "calculate_hash_08009120"
            },
            "code": "undefined4 * calculate_hash_08009120(int num_blocks, undefined4 *block_data, int block_size, uint32_t hash_value) {\n  undefined4 *hash = block_data;\n  uint32_t carry = 0;\n  uint32_t temp = 0;\n  uint32_t *data_ptr = block_data + 5;\n  int block_count = block_data[4];\n  for (int i = 0; i < block_count; i++) {\n    temp = block_size * (*data_ptr & 0xffff) + hash_value;\n    carry = block_size * (*data_ptr >> 0x10) + (temp >> 0x10);\n    *data_ptr = (temp & 0xffff) + carry * 0x10000;\n    hash_value = carry >> 0x10;\n    data_ptr++;\n  }\n  if (hash_value != 0) {\n    if ((int)block_data[2] <= block_count) {\n      hash = (undefined4 *) allocate_memory(num_blocks, block_data[1] + 1);\n      copy_memory(hash + 3, block_data + 3, (block_data[4] + 2) * 4);\n      int ptr = *(int *)(num_blocks + 0x4c);\n      *block_data = *(undefined4 *)(ptr + block_data[1] * 4);\n      *(undefined4 **)(ptr + block_data[1] * 4) = block_data;\n    }\n    hash[block_count + 5] = hash_value;\n    hash[4] = block_count + 1;\n  }\n  return hash;\n}",
            "called": [
                "FUN_080090c0",
                "FUN_08001084"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009120",
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "imported": true,
            "current_name": "calculate_hash_08009120"
        },
        "FUN_08001084": {
            "renaming": {
                "FUN_08001084": "copy_data_08001084",
                "puVar2": "new_src",
                "puVar3": "temp_dest",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "new_dest",
                "uVar5": "remaining_size",
                "uVar4": "i",
                "bVar6": "is_aligned"
            },
            "code": "undefined4 * copy_data_08001084(undefined4 *dest, undefined4 *src, uint size)\n{\n  undefined4 *new_dest;\n  undefined4 *new_src;\n  uint remaining_size;\n  uint i;\n  bool is_aligned;\n\n  new_dest = dest;\n  new_src = src;\n  is_aligned = (((uint)src | (uint)dest) & 3) == 0;\n\n  if (!is_aligned)\n  {\n    if (size < 8)\n    {\n      remaining_size = size - 4;\n\n      if (remaining_size > 0)\n      {\n        do {\n          *new_dest = *new_src;\n          new_dest = (undefined4 *)((int)new_dest + 1);\n          new_src = (undefined4 *)((int)new_src + 1);\n          remaining_size--;\n        } while (remaining_size > 0);\n\n        *(undefined *)(undefined4 *)((int)new_dest + 1) = *(undefined *)(undefined4 *)((int)new_src + 1);\n        *(undefined *)((int)new_dest + 2) = *(undefined *)((int)new_src + 2);\n        *(undefined *)((int)new_dest + 3) = *(undefined *)((int)new_src + 3);\n      }\n\n      return dest;\n    }\n\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0))\n    {\n      remaining_size = 4 - ((uint)dest & 3);\n      size -= remaining_size;\n      new_dest = dest;\n      new_src = src;\n\n      if (((uint)dest & 1) != 0)\n      {\n        new_src = (undefined4 *)((int)src + 1);\n        new_dest = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n\n      if ((remaining_size & 2) != 0)\n      {\n        new_src = (undefined4 *)((int)new_src + 2);\n        new_dest = (undefined4 *)((int)new_dest + 2);\n        *(undefined2 *)new_dest = *(undefined2 *)new_src;\n      }\n    }\n  }\n\n  for (i = 0; i < size / 16; i++)\n  {\n    *new_dest = *new_src;\n    new_dest[1] = new_src[1];\n    new_dest[2] = new_src[2];\n    new_dest[3] = new_src[3];\n    new_dest[4] = new_src[4];\n    new_dest[5] = new_src[5];\n    new_dest[6] = new_src[6];\n    new_dest[7] = new_src[7];\n    new_dest[8] = new_src[8];\n    new_dest[9] = new_src[9];\n    new_dest[10] = new_src[10];\n    new_dest[11] = new_src[11];\n    new_dest[12] = new_src[12];\n    new_dest[13] = new_src[13];\n    new_dest[14] = new_src[14];\n    new_dest[15] = new_src[15];\n    new_dest += 16;\n    new_src += 16;\n  }\n\n  remaining_size = size % 16;\n\n  if (remaining_size > 0)\n  {\n    for (i = 0; i < remaining_size / 4; i++)\n    {\n      *new_dest = *new_src;\n      new_dest++;\n      new_src++;\n    }\n\n    remaining_size %= 4;\n\n    if (remaining_size > 0)\n    {\n      if ((remaining_size & 2) != 0)\n      {\n        *(undefined2 *)new_dest = *(undefined2 *)new_src;\n        new_dest = (undefined4 *)((int)new_dest + 2);\n        new_src = (undefined4 *)((int)new_src + 2);\n      }\n\n      *(undefined *)new_dest = *(undefined *)new_src;\n    }\n  }\n\n  return dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001084",
            "calling": [
                "FUN_080079e8",
                "FUN_08009120",
                "FUN_080097cc"
            ],
            "imported": true,
            "current_name": "copy_data_08001084"
        },
        "FUN_08005680": {
            "renaming": {
                "FUN_08005680": "check_parameter_value_08005680",
                "local_c": "number_of_attempts",
                "param_1": "parameter",
                "local_18": "value_to_set",
                "*param_1": "*parameter",
                "DAT_080056b4": "expected_value",
                "local_14": "number_of_attempts",
                "DAT_080056b8": "target_address",
                "FUN_080017c4": "set_value"
            },
            "code": "void check_parameter_value_08005680(int *parameter)\n{\n  int DAT_080056b4 = 1234;\n  int value_to_set = 2304;\n  int number_of_attempts = 2;\n  if (*parameter == DAT_080056b4) {\n    set_value(DAT_080056b8, value_to_set);\n  }\n  return;\n}",
            "called": [
                "FUN_080017c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005680",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": true,
            "current_name": "check_parameter_value_08005680"
        },
        "FUN_08003260": {
            "renaming": {
                "FUN_08003260": "check_08003260",
                "iVar1": "loop_var1",
                "iVar2": "loop_var2",
                "param_1": "param_array",
                "param_2": "array_length",
                "uVar3": "uVar3",
                "uVar4": "result"
            },
            "code": "uint32_t check_08003260(uint32_t *param_array, uint32_t array_length)\n{\n  int loop_var1;\n  int loop_var2;\n  uint32_t uVar3;\n  uint32_t result;\n  \n  if (((*global_var1 & 7) < array_length) &&\n     (*global_var1 = array_length | *global_var1 & 0xfffffff8, array_length != (*global_var1 & 7))) {\n    result = 1;\n  }\n  else {\n    if ((*param_array & 2) != 0) {\n      global_var2[1] = param_array[2] | global_var2[1] & 0xffffff0f;\n    }\n    if ((*param_array & 1) == 0) {\nLAB_08003394:\n      if ((array_length < (*global_var1 & 7)) &&\n         (*global_var1 = array_length | *global_var1 & 0xfffffff8, array_length != (*global_var1 & 7))) {\n        result = 1;\n      }\n      else {\n        if ((*param_array & 4) != 0) {\n          global_var2[1] = param_array[3] | global_var2[1] & 0xfffff8ff;\n        }\n        if ((*param_array & 8) != 0) {\n          global_var2[1] = param_array[4] << 3 | global_var2[1] & 0xffffc7ff;\n        }\n        uVar3 = FUN_08003440();\n        *(uint32_t *)global_var3 = uVar3 >> global_var4[global_var2[1] >> 4 & 0xf];\n        FUN_0800151c(0xf);\n        result = 0;\n      }\n    }\n    else {\n      if (param_array[1] == 1) {\n        if ((*global_var2 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((param_array[1] != 2) && ((*global_var2 & 2) == 0)) {\n        return 1;\n      }\n      global_var2[1] = param_array[1] | global_var2[1] & 0xfffffffc;\n      loop_var1 = FUN_080015a0();\n      if (param_array[1] == 1) {\n        do {\n          if ((global_var2[1] & 0xc) == 4) goto LAB_08003394;\n          loop_var2 = FUN_080015a0();\n        } while ((uint32_t)(loop_var2 - loop_var1) < 0x1389);\n        result = 3;\n      }\n      else if (param_array[1] == 2) {\n        do {\n          if ((global_var2[1] & 0xc) == 8) goto LAB_08003394;\n          loop_var2 = FUN_080015a0();\n        } while ((uint32_t)(loop_var2 - loop_var1) < 0x1389);\n        result = 3;\n      }\n      else {\n        do {\n          if ((global_var2[1] & 0xc) == 0) goto LAB_08003394;\n          loop_var2 = FUN_080015a0();\n        } while ((uint32_t)(loop_var2 - loop_var1) < 0x1389);\n        result = 3;\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_0800151c",
                "FUN_08003440"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003260",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": true,
            "current_name": "check_08003260"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "check_and_set_08001ab0",
                "uVar1": "value_1",
                "param_1": "param_array",
                "cVar2": "char_1",
                "uVar3": "result",
                "uVar4": "value_2",
                "bVar5": "bool_1"
            },
            "code": "uint check_and_set_08001ab0(uint **param_array) {\n  uint value_1;\n  char char_1;\n  uint result;\n  uint value_2;\n  bool bool_1;\n  \n  if (param_array == NULL) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)param_array + 0x3d) == '\\0') {\n      *(undefined *)(param_array + 0xf) = 0;\n      do_nothing(param_array);\n    }\n    *(undefined *)((int)param_array + 0x3d) = 0x24;\n    **param_array = **param_array & 0xfffffffe;\n    value_1 = get_random_number();\n    if (PTR_DAT_08001ca4 < param_array[1]) {\n      value_2 = value_1;\n      if (value_1 <= PTR_DAT_08001cac) {\n        value_2 = 1;\n      }\n      char_1 = (char)value_2;\n      if (PTR_DAT_08001cac < value_1) {\n        char_1 = '\\0';\n      }\n    }\n    else {\n      value_2 = value_1;\n      if (value_1 <= PTR_DAT_08001ca8) {\n        value_2 = 1;\n      }\n      char_1 = (char)value_2;\n      if (PTR_DAT_08001ca8 < value_1) {\n        char_1 = '\\0';\n      }\n    }\n    if (char_1 == '\\0') {\n      value_2 = (uint)((ulonglong)PTR_DAT_08001cb0 * (ulonglong)value_1 >> 0x32);\n      (*param_array)[1] = value_2;\n      if (PTR_DAT_08001ca4 < param_array[1]) {\n        value_2 = (uint)((ulonglong)PTR_DAT_08001cb4 * (ulonglong)(value_2 * 300) >> 0x26);\n      }\n      (*param_array)[8] = value_2 + 1;\n      if (PTR_DAT_08001ca4 < param_array[1]) {\n        if (param_array[2] == NULL) {\n          value_2 = (value_1 - 1) / (uint)((int)param_array[1] * 3) + 1 & 0xfff;\n          bool_1 = value_2 == 0;\n          if (bool_1) {\n            value_2 = 1;\n          }\n          char_1 = (char)value_2;\n          if (!bool_1) {\n            char_1 = '\\0';\n          }\n        }\n        else {\n          value_2 = (value_1 - 1) / (uint)((int)param_array[1] * 0x19) + 1 & 0xfff;\n          bool_1 = value_2 == 0;\n          if (bool_1) {\n            value_2 = 1;\n          }\n          char_1 = (char)value_2;\n          if (!bool_1) {\n            char_1 = '\\0';\n          }\n        }\n        if (char_1 == '\\0') {\n          if (param_array[2] == NULL) {\n            value_1 = (value_1 - 1) / (uint)((int)param_array[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            value_1 = (value_1 - 1) / (uint)((int)param_array[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          value_1 = 1;\n        }\n      }\n      else {\n        value_1 = (value_1 - 1) / (uint)((int)param_array[1] << 1) + 1 & 0xfff;\n        if (value_1 < 4) {\n          value_1 = 4;\n        }\n      }\n      **param_array = (uint)param_array[8] | (uint)param_array[7];\n      (*param_array)[2] = (uint)param_array[3] | (uint)param_array[4];\n      (*param_array)[3] = (uint)param_array[6] | (uint)param_array[5];\n      **param_array = **param_array | 1;\n      param_array[0x10] = NULL;\n      *(undefined *)((int)param_array + 0x3d) = 0x20;\n      param_array[0xc] = NULL;\n      *(undefined *)((int)param_array + 0x3e) = 0;\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08005348"
            ],
            "imported": true,
            "current_name": "check_and_set_08001ab0"
        },
        "FUN_08003540": {
            "renaming": {
                "FUN_08003540": "calculate_shift_amount_08003540",
                "uVar1": "shift_amount",
                "DAT_08003560": "data",
                "PTR_DAT_08003564": "ptr_value"
            },
            "code": "uint calculate_shift_amount_08003540(void)\n{\n  uint shift_amount;\n  uint DAT_08003560 = *(uint *)(DAT_08003560 + 4);\n  uint PTR_DAT_08003564 = PTR_DAT_08003564[DAT_08003560 >> 0xb & 7];\n  shift_amount = FUN_08003504();\n  return shift_amount >> PTR_DAT_08003564;\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003540",
            "calling": [
                "FUN_080046ec"
            ],
            "imported": true,
            "current_name": "calculate_shift_amount_08003540"
        },
        "FUN_08009244": {
            "renaming": {
                "iVar1": "address",
                "FUN_08009244": "set_value_at_offset_08009244",
                "FUN_080090c0": "calculate_address",
                "param_1": "base_address",
                "param_2": "value"
            },
            "code": "void set_value_at_offset_08009244(int base_address, int offset, int value)\n{\n  int address = calculate_address(base_address, offset);\n  *(int *)(address + 0x10) = 1;\n  *(int *)(address + 0x14) = value;\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009244",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "set_value_at_offset_08009244"
        },
        "FUN_08003c5c": {
            "renaming": {
                "FUN_08003c5c": "do_nothing_08003c5c"
            },
            "code": "\nvoid do_nothing_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c5c",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": true,
            "current_name": "do_nothing_08003c5c"
        },
        "FUN_08004e6c": {
            "renaming": {
                "FUN_08004e6c": "trigger_software_interrupt_08004e6c",
                "SOFTWARE_INTERRUPT_NUMBER": "0x3f",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void trigger_software_interrupt_08004e6c(void)\n{\n  software_interrupt(SOFTWARE_INTERRUPT_NUMBER);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e6c",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": true,
            "current_name": "trigger_software_interrupt_08004e6c"
        },
        "FUN_08001762": {
            "renaming": {
                "FUN_08001762": "FUNC_08001762"
            },
            "code": "\nundefined4 FUNC_08001762(undefined4 param_1)\n\n{\n  undefined4 uVar1;\n  \n  uVar1 = FUN_080016d0(param_1);\n  return uVar1;\n}\n\n",
            "called": [
                "FUN_080016d0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001762",
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "FUNC_08001762"
        },
        "FUN_08000158": {
            "renaming": {
                "FUN_08000158": "FUNC_08000158"
            },
            "code": "\nulonglong FUNC_08000158(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000268;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000158",
            "calling": [
                "FUN_080079e8",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_080059f0",
                "FUN_08005838"
            ],
            "imported": false,
            "current_name": "FUNC_08000158"
        },
        "FUN_08009768": {
            "renaming": {
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "param_1": "dest",
                "FUN_08009768": "copy_string_08009768",
                "param_2": "src",
                "param_3": "length",
                "cVar1": "current_char",
                "uVar4": "current_word"
            },
            "code": "void copy_string_08009768(uint *dest, uint *src, uint length) {\n  char current_char;\n  uint *dest_ptr;\n  uint *src_ptr;\n  uint current_word;\n  if (((uint)src | (uint)dest) & 3) return;\n  dest_ptr = dest;\n  src_ptr = src;\n  while (length > 3) {\n    current_word = *src_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) return;\n    length -= 4;\n    *dest_ptr = current_word;\n    dest_ptr++;\n    src_ptr++;\n  }\n  while (length > 0) {\n    current_char = *(char *)src_ptr;\n    *dest_ptr = current_char;\n    dest_ptr = (uint *)((int)dest_ptr + 1);\n    src_ptr = (uint *)((int)src_ptr + 1);\n    length--;\n  }\n  while (length > 0) {\n    *dest_ptr = 0;\n    dest_ptr = (uint *)((int)dest_ptr + 1);\n    length--;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009768",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "copy_string_08009768"
        },
        "FUN_08003ff8": {
            "renaming": {
                "iVar1": "index1",
                "local_c": "local_data",
                "iVar2": "index2",
                "param_1": "data_address",
                "FUN_08003ff8": "update_data_08003ff8",
                "param_2": "data_array"
            },
            "code": "void update_data_08003ff8(int data_address, int *data_array) {\n  int index1 = *data_array;\n  int index2 = data_array[2];\n  uint local_data = *(uint *)(data_address + 4);\n  if (data_address == DAT_0800409c) {\n    local_data = data_array[5] << 6 | local_data & 0xffffbfff;\n  }\n  *(uint *)(data_address + 4) = local_data;\n  *(uint *)(data_address + 0x1c) = index1 << 8 | *(uint *)(data_address + 0x1c) & 0xffff8cff;\n  *(int *)(data_address + 0x40) = data_array[1];\n  *(uint *)(data_address + 0x20) = index2 << 0xc | *(uint *)(data_address + 0x20) & 0xffffdfff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff8",
            "calling": [
                "FUN_08003908"
            ],
            "imported": true,
            "current_name": "update_data_08003ff8"
        },
        "FUN_08004ea4": {
            "renaming": {
                "PTR_DAT_08004ee0": "PTR_DATA_COUNT",
                "param_1": "data",
                "FUN_08004ea4": "process_data_08004ea4",
                "param_2": "buffer",
                "param_3": "size",
                "param_4": "flag",
                "PTR_DAT_08004ee4": "PTR_DATA_ARRAY"
            },
            "code": "void process_data_08004ea4(void* data, void* buffer, int size, short flag)\n{\n  send_data(PTR_DAT_08004ee4, data, buffer, 1, size, flag, *(int *)PTR_DAT_08004ee0);\n  return;\n}",
            "called": [
                "FUN_08001ccc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ea4",
            "calling": [],
            "imported": true,
            "current_name": "process_data_08004ea4"
        },
        "FUN_080040a0": {
            "renaming": {
                "uVar1": "current_mask",
                "param_1": "data",
                "FUN_080040a0": "set_bits_and_shift_left_080040a0",
                "param_2": "mask",
                "param_3": "shift_amount"
            },
            "code": "void set_bits_and_shift_left_080040a0(int data, uint mask, int shift_amount)\n{\n  uint current_mask = *(uint *)(data + 0x20);\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & 0xfffffffe;\n  *(uint *)(data + 0x18) = (shift_amount << 4) | (*(uint *)(data + 0x18) & 0xffffff0f);\n  *(uint *)(data + 0x20) = mask | current_mask & 0xfffffff5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040a0",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": true,
            "current_name": "set_bits_and_shift_left_080040a0"
        },
        "FUN_08009a18": {
            "renaming": {
                "iVar3": "i",
                "puVar2": "src_int",
                "puVar4": "src_last",
                "param_1": "dest",
                "puVar5": "dest_last",
                "FUN_08009a18": "copy_memory_08009a18",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dest_int",
                "uVar7": "remainder",
                "uVar6": "j"
            },
            "code": "void copy_memory_08009a18(uint8_t *dest, uint8_t *src, uint32_t size) {\n  uint32_t i;\n  if (src < dest && dest < src + size) {\n    for (i = size; i > 0; i--) {\n      *(dest + i - 1) = *(src + i - 1);\n    }\n  }\n  else {\n    uint32_t remainder = size % 16;\n    uint32_t blocks = size / 16;\n    uint32_t *src_int = (uint32_t*)src;\n    uint32_t *dest_int = (uint32_t*)dest;\n    if (remainder != 0) {\n      blocks++;\n    }\n    for (i = 0; i < blocks; i++) {\n      if (i == blocks - 1 && remainder != 0) {\n        uint8_t *src_last = (uint8_t*)(src_int + i);\n        uint8_t *dest_last = (uint8_t*)(dest_int + i);\n        for (uint32_t j = 0; j < remainder; j++) {\n          *(dest_last + j) = *(src_last + j);\n        }\n      }\n      else {\n        *(dest_int + i) = *(src_int + i);\n      }\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a18",
            "calling": [
                "FUN_08009adc",
                "FUN_080097cc"
            ],
            "imported": true,
            "current_name": "copy_memory_08009a18"
        },
        "FUN_0800119c": {
            "renaming": {
                "iVar2": "scaled_divisor",
                "uVar1": "quotient",
                "param_1": "dividend",
                "FUN_0800119c": "calculate_0800119c",
                "param_2": "divisor",
                "uVar3": "shift_amount"
            },
            "code": "uint calculate_0800119c(uint dividend, uint divisor)\n{\n  uint quotient;\n  int scaled_divisor;\n  uint shift_amount;\n  \n  scaled_divisor = divisor * 2 + 0x200000;\n  if (divisor * 2 < 0xffe00000) {\n    if (-1 < scaled_divisor) {\n      return 0;\n    }\n    quotient = scaled_divisor >> 0x15;\n    shift_amount = -quotient - 0x3e1;\n    if (quotient < 0xfffffc20 && shift_amount != 0) {\n      quotient = (divisor << 0xb | 0x80000000 | dividend >> 0x15) >> (shift_amount & 0xff);\n      if ((divisor & 0x80000000) != 0) {\n        quotient = -quotient;\n      }\n      return quotient;\n    }\n  }\n  else if ((dividend | divisor << 0xc) != 0) {\n    return 0;\n  }\n  divisor = divisor & 0x80000000;\n  if (divisor == 0) {\n    divisor = 0x7fffffff;\n  }\n  return divisor;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800119c",
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "imported": true,
            "current_name": "calculate_0800119c"
        },
        "FUN_08005728": {
            "renaming": {
                "local_c": "return_value",
                "auStack_18": "temporary_memory",
                "param_1": "required_size",
                "FUN_08005728": "allocate_memory_08005728",
                "PTR_DAT_0800577c": "memory_ptr_2",
                "puVar1": "memory_ptr",
                "local_14": "current_size",
                "PTR_DAT_08005778": "memory_ptr_1",
                "FUN_08005d14": "function_to_call"
            },
            "code": "int allocate_memory_08005728(int required_size)\n{\n  undefined4 *memory_ptr;\n  undefined temporary_memory[4];\n  int current_size;\n  undefined4 return_value;\n  \n  if (*(int *)PTR_DAT_08005778 == 0) {\n    *(undefined **)PTR_DAT_08005778 = PTR_DAT_0800577c;\n  }\n  return_value = *(undefined4 *)PTR_DAT_08005778;\n  if (temporary_memory < (undefined *)(required_size + *(int *)PTR_DAT_08005778)) {\n    current_size = required_size;\n    memory_ptr = (undefined4 *)function_to_call();\n    *memory_ptr = 0xc;\n    return_value = 0xffffffff;\n  }\n  else {\n    *(int *)PTR_DAT_08005778 = required_size + *(int *)PTR_DAT_08005778;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_08005d14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08009744"
            ],
            "imported": true,
            "current_name": "allocate_memory_08005728"
        },
        "FUN_080090b4": {
            "renaming": {
                "PTR_DAT_080090bc": "PTR_DATA",
                "FUN_080090b4": "do_nothing_with_pointer_080090b4"
            },
            "code": "void do_nothing_with_pointer_080090b4(void)\n{\n  do_nothing_with_pointer_080090b4(PTR_DAT_080090bc);\n  return;\n}",
            "called": [
                "FUN_08008af4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090b4",
            "calling": [
                "FUN_0800884c",
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "imported": true,
            "current_name": "do_nothing_with_pointer_080090b4"
        },
        "FUN_0800422e": {
            "renaming": {
                "uVar1": "result",
                "param_1": "params",
                "param_2": "data",
                "PTR_": "ptr_",
                "DAT_": "dat_",
                "FUN_0800422e": "set_flags_0800422e"
            },
            "code": "int set_flags_0800422e(int *params, uint *data)\n{\n  int result;\n  if (*(char *)(params + 15) == 1) {\n    result = 2;\n  }\n  else {\n    *(undefined *)(params + 15) = 1;\n    uint flags = data[6] | (data[6] | (data[5] | (data[4] | (*data | (data[1] | (data[2] | data[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(uint *)(*params + 68) = flags;\n    *(undefined *)(params + 15) = 0;\n    result = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800422e",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": true,
            "current_name": "set_flags_0800422e"
        },
        "FUN_08008af4": {
            "renaming": {
                "FUN_08008af4": "do_nothing_08008af4"
            },
            "code": "\nvoid do_nothing_08008af4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af4",
            "calling": [
                "FUN_080090b4",
                "FUN_080098c0"
            ],
            "imported": true,
            "current_name": "do_nothing_08008af4"
        },
        "FUN_08003e38": {
            "renaming": {
                "bitmask_3": "0xfffff3ff",
                "bitmask_2": "0xffffffdf",
                "bitmask_5": "0xffffff7f",
                "iVar1": "index_1",
                "bitmask_4": "0xffff8cff",
                "bitmask_1": "0xffffffef",
                "param_1": "data_address",
                "param_2": "data_array",
                "local_10": "temp_1",
                "uVar2": "temp_2",
                "FUN_08003e38": "update_data_08003e38",
                "DAT_08003f14": "special_address"
            },
            "code": "void update_data_08003e38(int data_address, int *data_array)\n{\n  int index_1;\n  uint temp_1;\n  uint temp_2;\n  uint bitmask_1 = 0xffffffef;\n  uint bitmask_2 = 0xffffffdf;\n  uint bitmask_3 = 0xfffff3ff;\n  uint bitmask_4 = 0xffff8cff;\n  uint bitmask_5 = 0xffffff7f;\n  \n  *(uint *)(data_address + 0x20) &= bitmask_1;\n  \n  temp_1 = *(uint *)(data_address + 4);\n  index_1 = *data_array;\n  temp_2 = data_array[2] << 4 | *(uint *)(data_address + 0x20) & bitmask_2;\n  \n  if (data_address == DAT_08003f14) {\n    temp_2 = (data_array[3] << 4 | temp_2 & bitmask_5) & ~bitmask_5;\n    temp_1 = data_array[6] << 2 | data_array[5] << 2 | temp_1 & bitmask_3;\n  }\n  \n  *(uint *)(data_address + 4) = temp_1;\n  *(uint *)(data_address + 0x18) = index_1 << 8 | *(uint *)(data_address + 0x18) & bitmask_4;\n  *(int *)(data_address + 0x38) = data_array[1];\n  *(uint *)(data_address + 0x20) = temp_2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e38",
            "calling": [
                "FUN_08003908"
            ],
            "imported": true,
            "current_name": "update_data_08003e38"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "do_nothing_08008af0"
            },
            "code": "\nvoid do_nothing_08008af0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "FUN_080098c0",
                "FUN_080090a8"
            ],
            "imported": true,
            "current_name": "do_nothing_08008af0"
        },
        "FUN_0800151c": {
            "renaming": {
                "iVar1": "result",
                "PTR_DAT_08001570": "time_delay_ptr",
                "param_1": "milliseconds",
                "FUN_08001762": "calculate_result",
                "PTR_DAT_08001578": "result_ptr",
                "PTR_DAT_08001574": "delay_factor_ptr",
                "uVar2": "return_value",
                "FUN_0800151c": "calculate_time_delay_0800151c"
            },
            "code": "int calculate_time_delay_0800151c(uint milliseconds) {\n  uint time_delay = *(uint *)PTR_DAT_08001570 / (1000 / (byte)*PTR_DAT_08001574);\n  int result = FUN_08001762((int)((ulonglong)time_delay));\n  if (result == 0) {\n    if (milliseconds < 16) {\n      FUN_0800172a(0xffffffff, milliseconds, 0);\n      *(uint *)PTR_DAT_08001578 = milliseconds;\n      return 0;\n    }\n    else {\n      return 1;\n    }\n  }\n  else {\n    return 1;\n  }\n}",
            "called": [
                "FUN_0800172a",
                "FUN_08001762"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800151c",
            "calling": [
                "FUN_080014f0",
                "FUN_08003260"
            ],
            "imported": true,
            "current_name": "calculate_time_delay_0800151c"
        },
        "FUN_080006a4": {
            "renaming": {
                "FUN_080006a4": "calculate_result_080006a4",
                "bVar4": "is_remainder_zero",
                "uVar1": "temp1",
                "param_1": "dividend",
                "unaff_r4": "is_dividend_zero",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "quotient",
                "uVar3": "temp3",
                "uVar2": "temp2",
                "in_r12": "divisor_mask"
            },
            "code": "ulonglong calculate_result_080006a4(uint dividend, uint divisor, uint remainder, uint quotient) {\n  uint temp1, temp2, temp3;\n  bool is_dividend_zero, is_remainder_zero;\n\n  temp1 = remainder & divisor >> 0x14;\n  if (quotient != divisor && temp1 != divisor) {\n    is_dividend_zero = (dividend | divisor << 1) == 0;\n    if (!is_dividend_zero) {\n      is_dividend_zero = (remainder | quotient << 1) == 0;\n    }\n    if (is_dividend_zero) {\n      return (ulonglong)((divisor ^ quotient) & 0x80000000) << 0x20;\n    }\n    if (quotient == 0) {\n      temp2 = divisor & 0x80000000;\n      do {\n        temp3 = dividend & 0x80000000;\n        dividend = dividend << 1;\n        divisor = divisor * 2 + (uint)(temp3 != 0);\n      } while ((divisor & 0x100000) == 0);\n      divisor = divisor | temp2;\n      if (temp1 != 0) {\n        return CONCAT44(divisor, dividend);\n      }\n    }\n    do {\n      temp1 = remainder & 0x80000000;\n      remainder = remainder << 1;\n      quotient = quotient * 2 + (uint)(temp1 != 0);\n    } while ((quotient & 0x100000) == 0);\n    return CONCAT44(divisor, dividend);\n  }\n  is_dividend_zero = (dividend | divisor << 1) == 0;\n  if (is_dividend_zero) {\n    dividend = quotient;\n    divisor = remainder;\n  }\n  if (!is_dividend_zero) {\n    is_remainder_zero = (remainder | quotient << 1) == 0;\n  }\n  temp2 = divisor;\n  if (((!is_remainder_zero) && ((quotient != divisor || ((dividend | divisor << 0xc) == 0)))) && ((temp1 != divisor || (dividend = remainder, temp2 = quotient, (remainder | quotient << 0xc) == 0)))) {\n    return (ulonglong)((divisor ^ quotient) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp2, dividend) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006a4",
            "calling": [
                "FUN_080004c8"
            ],
            "imported": true,
            "current_name": "calculate_result_080006a4"
        },
        "FUN_08000f68": {
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "bVar1": "is_negative",
                "param_1": "first_operand",
                "param_2": "second_operand",
                "uVar3": "doubled_second_operand",
                "uVar2": "doubled_first_operand",
                "uVar4": "combined_operands",
                "bVar5": "is_zero"
            },
            "code": "uint calculate_result_08000f68(uint first_operand, uint second_operand)\n{\n  bool is_negative;\n  uint doubled_first_operand;\n  uint doubled_second_operand;\n  uint combined_operands;\n  bool is_zero;\n  \n  doubled_first_operand = first_operand * 2;\n  doubled_second_operand = second_operand * 2;\n  \n  if (((int)doubled_first_operand >> 0x18 == -1 || (int)doubled_second_operand >> 0x18 == -1) &&\n     ((((int)doubled_first_operand >> 0x18 == -1 && ((first_operand & 0x7fffff) != 0)) ||\n      (((int)doubled_second_operand >> 0x18 == -1 && ((second_operand & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  \n  combined_operands = doubled_first_operand | second_operand & 0x7fffffff;\n  is_zero = combined_operands == 0;\n  if (!is_zero) {\n    combined_operands = first_operand ^ second_operand;\n    is_zero = combined_operands == 0;\n  }\n  is_negative = -1 < (int)combined_operands;\n  if (is_negative) {\n    first_operand = doubled_first_operand + second_operand * -2;\n    is_zero = first_operand == 0;\n  }\n  if ((is_negative && doubled_second_operand <= doubled_first_operand) && !is_zero) {\n    first_operand = (int)second_operand >> 0x1f;\n  }\n  if (!is_negative || doubled_second_operand > doubled_first_operand) {\n    first_operand = ~((int)second_operand >> 0x1f);\n  }\n  if (!is_zero) {\n    first_operand = first_operand | 1;\n  }\n  return first_operand;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f68",
            "calling": [
                "FUN_08000fd0"
            ],
            "imported": true,
            "current_name": "calculate_result_08000f68"
        },
        "FUN_08009258": {
            "renaming": {
                "FUN_08009258": "calculate_hash_08009258",
                "uVar11": "hash_value2",
                "puVar17": "hash_ptr4",
                "puVar18": "hash_ptr5",
                "iVar3": "hash_ptr_len",
                "puVar2": "data_ptr2",
                "iVar12": "hash_ptr_len",
                "param_1": "hash",
                "puVar5": "hash_ptr3",
                "iVar9": "data_ptr1_len",
                "iVar10": "data_ptr2_len",
                "puVar15": "hash_ptr8",
                "puVar7": "data_ptr5",
                "puVar16": "data_ptr6",
                "puVar14": "hash_ptr7",
                "param_2": "hash_len",
                "param_3": "data",
                "iVar13": "hash_ptr1_len",
                "puVar1": "data_ptr1",
                "uVar4": "hash_value2",
                "uVar6": "data_value1",
                "uVar8": "hash_value1"
            },
            "code": "void calculate_hash_08009258(uint8_t* hash, int hash_len, uint8_t* data, int data_len)\n{\n  uint32_t* data_ptr1 = (uint32_t*)(data + 0x10);\n  uint32_t* data_ptr2 = (uint32_t*)(hash_len + 0x10);\n  uint32_t* hash_ptr1 = (uint32_t*)(hash_len + data_len + 0x14);\n  uint32_t* hash_ptr2 = (uint32_t*)(hash_len + 0x14);\n  int data_ptr1_len = *data_ptr1;\n  int data_ptr2_len = *data_ptr2;\n  if (data_ptr1_len < data_ptr2_len) {\n    data_ptr2_len = data_ptr1_len;\n    data_ptr1_len = *data_ptr2;\n    uint32_t* temp_ptr = data_ptr1;\n    data_ptr1 = data_ptr2;\n    data_ptr2 = temp_ptr;\n  }\n  int hash_ptr_len = data_ptr1_len + data_ptr2_len;\n  if (*(int *)(hash_len + 8) < hash_ptr_len) {\n    hash_ptr_len = hash_ptr_len + 1;\n  }\n  int hash_ptr1_len = hash_ptr_len + 5;\n  uint32_t* hash_ptr3 = (uint32_t*)malloc(hash_ptr1_len * 4);\n  memset(hash_ptr3, 0, hash_ptr1_len * 4);\n  uint32_t* hash_ptr4 = hash_ptr3 + hash_ptr_len;\n  for (uint32_t* hash_ptr5 = hash_ptr3; hash_ptr5 < hash_ptr4; hash_ptr5++) {\n    *hash_ptr5 = 0;\n  }\n  uint32_t* data_ptr3 = (uint32_t*)(data + 0x14);\n  uint32_t* data_ptr4 = data_ptr3 + data_ptr2_len;\n  uint32_t* hash_ptr6 = (uint32_t*)(hash_len + 0x14 + data_ptr2_len * 4);\n  if (data_ptr3 < data_ptr4) {\n    uint32_t* data_ptr5 = (uint32_t*)(data_ptr3 + ((data_ptr4 - data_ptr3) - 0x15 & 0xfffffffc));\n    uint32_t* data_ptr6 = (uint32_t*)(data + 0x10);\n    do {\n      while (true) {\n        data_ptr6++;\n        uint32_t data_value1 = *data_ptr6 & 0xffff;\n        if (data_value1 != 0) {\n          uint32_t data_value2 = *data_ptr6 >> 0x10;\n          uint32_t hash_value1 = *hash_ptr3;\n          uint32_t hash_value2 = 0;\n          uint32_t* hash_ptr7 = data_ptr3;\n          uint32_t* hash_ptr8 = hash_ptr3;\n          do {\n            hash_ptr8 = hash_ptr7;\n            hash_value2 += data_value2 * *(uint16_t*)hash_ptr7 + (hash_value1 >> 0x10);\n            *hash_ptr8 = hash_value1 & 0xffff | hash_value2 * 0x10000;\n            uint32_t* hash_ptr9 = hash_ptr7 + 1;\n            hash_value1 = hash_ptr8[1];\n            hash_value2 = data_value2 * (*hash_ptr7 >> 0x10) + (hash_value1 & 0xffff) + (hash_value2 >> 0x10);\n            hash_ptr7 = hash_ptr9;\n          } while (hash_ptr9 < data_ptr3 + data_ptr1_len);\n          hash_ptr8[1] = hash_value2;\n          hash_ptr3++;\n          if (data_ptr5 == data_ptr6) {\n            goto end;\n          }\n        }\n      }\n    } while (true);\n  }\nend:\n  if (0 < hash_ptr_len) {\n    uint32_t hash_value = *(hash_ptr4 - 1);\n    hash_ptr4--;\n    while ((hash_value == 0 && (hash_ptr_len--, hash_ptr_len != 0))) {\n      hash_ptr4--;\n      hash_value = *hash_ptr4;\n    }\n  }\n  *(int *)(hash_len + 0x10) = hash_ptr_len;\n  free(hash_ptr3);\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009258",
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "imported": true,
            "current_name": "calculate_hash_08009258"
        },
        "FUN_08000c08": {
            "renaming": {
                "FUN_08000c08": "calculate_hash_08000c08",
                "iVar1": "leading_zeroes",
                "iVar3": "multiplier",
                "param_1": "input",
                "PTR_": "new_",
                "DAT_": "data_",
                "uVar2": "shift_amount",
                "uVar4": "shifted_input"
            },
            "code": "uint calculate_hash_08000c08(uint input)\n{\n  int leading_zeroes = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes - 8;\n  int multiplier = shift_amount * -0x800000 + 0x4a800000;\n  uint shifted_input;\n  uint shifted_zeroes;\n  uint shifted_max;\n  uint result;\n  if (leading_zeroes > 7)\n  {\n    shifted_input = input << (shift_amount & 0xff);\n    shifted_zeroes = 0U >> (0x20 - shift_amount & 0xff);\n    shifted_max = 0x7fffffff < shifted_zeroes;\n    result = multiplier + shifted_input + shifted_zeroes + shifted_max;\n    if ((shifted_zeroes & 0x80000000) != 0)\n    {\n      result = result & 0xfffffffe;\n    }\n  }\n  else\n  {\n    shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n    shifted_zeroes = (input >> (0x20 - (leading_zeroes + 0x18U) & 0xff));\n    shifted_max = ((int)shifted_input >> 0x1f);\n    result = multiplier + (shifted_zeroes - shifted_max);\n    if ((shifted_input & 0x7fffffff) == 0)\n    {\n      result = result & ~(shifted_input >> 0x1f);\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c08",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "calculate_hash_08000c08"
        },
        "FUN_08003c6e": {
            "renaming": {
                "FUN_08003c6e": "do_nothing_08003c6e"
            },
            "code": "\nvoid do_nothing_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c6e",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": true,
            "current_name": "do_nothing_08003c6e"
        },
        "FUN_080042de": {
            "renaming": {
                "FUN_080042de": "set_flag_and_combine_values_080042de",
                "uVar1": "return_value",
                "param_1": "ptr_param1",
                "param_2": "ptr_param2"
            },
            "code": "int set_flag_and_combine_values_080042de(int *ptr_param1, uint *ptr_param2)\n{\n  int return_value;\n  if (*(char *)(ptr_param1 + 0xf) == '\\x01') {\n    return_value = 2;\n  }\n  else {\n    *(undefined *)(ptr_param1 + 0xf) = 1;\n    *(undefined *)((int)ptr_param1 + 0x3d) = 2;\n    *(uint *)(*ptr_param1 + 4) &= 0xffffff8f;\n    *(uint *)(*ptr_param1 + 4) |= *ptr_param2;\n    *(uint *)(*ptr_param1 + 8) &= 0xffffff7f;\n    *(uint *)(*ptr_param1 + 8) |= ptr_param2[1];\n    *(undefined *)((int)ptr_param1 + 0x3d) = 1;\n    *(undefined *)(ptr_param1 + 0xf) = 0;\n    return_value = 0;\n  }\n  return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042de",
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "imported": true,
            "current_name": "set_flag_and_combine_values_080042de"
        },
        "FUN_08004366": {
            "renaming": {
                "FUN_08004366": "do_nothing_08004366"
            },
            "code": "\nvoid do_nothing_08004366(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004366",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": true,
            "current_name": "do_nothing_08004366"
        },
        "FUN_08009530": {
            "renaming": {
                "iVar1": "res_ptr",
                "FUN_08009530": "compare_and_set_08009530",
                "uVar14": "len",
                "iVar5": "len_diff",
                "puVar2": "src1_end",
                "puVar11": "src2_end",
                "iVar12": "carry",
                "param_1": "param_1",
                "puVar10": "src2_ptr",
                "puVar6": "src1_ptr",
                "puVar7": "src2_ptr",
                "puVar8": "res_ptr",
                "puVar13": "src2_ptr",
                "puVar9": "src1_ptr",
                "param_2": "src1",
                "param_3": "src2",
                "param_4": "param_4",
                "uVar3": "src2_len",
                "uVar4": "res"
            },
            "code": "void compare_and_set_08009530(uint32_t param_1, uint32_t *src1, uint32_t *src2, uint32_t param_4)\n{\n  uint32_t *src1_end;\n  uint32_t *src2_end;\n  uint32_t *src1_ptr;\n  uint32_t *src2_ptr;\n  uint32_t carry;\n  uint32_t res;\n  uint32_t len_diff;\n  uint32_t len;\n  uint32_t i;\n  uint32_t *res_ptr;\n\n  src1_end = src1 + src1[4];\n  len_diff = src2[4] - (src1_end - src1);\n  if (len_diff == 0) {\n    src1_ptr = src1_end - 1;\n    src2_ptr = src2 + src1[4] - 1;\n    while (true) {\n      if (*src1_ptr != *src2_ptr) {\n        if (*src2_ptr <= *src1_ptr) {\n          carry = 0;\n          res_ptr = src1;\n          src1_ptr = src1 + 1;\n          src2_ptr = src2 + 1;\n          len = src1[4];\n          while (len != 0) {\n            res = (uint64_t)*src1_ptr + (uint64_t)*src2_ptr + carry;\n            carry = res >> 0x20;\n            *res_ptr = res & 0xffffffff;\n            src1_ptr++;\n            src2_ptr++;\n            res_ptr++;\n            len--;\n          }\n          while (*--res_ptr == 0 && res_ptr != src1) {\n            src1[4]--;\n          }\n          return;\n        }\n        break;\n      }\n      src1_ptr--;\n      src2_ptr--;\n      if (src1_ptr < src1) {\n        src1[4] = src1[4] + len_diff;\n        return;\n      }\n    }\n  }\n  else if (len_diff < 0) {\n    len_diff = -len_diff;\n    src1_ptr = src1;\n    src2_ptr = src2;\n  }\n  else {\n    src1_ptr = src2;\n    src2_ptr = src1;\n    src1 = src2;\n    len_diff = src2[4] - src1[4];\n  }\n  res_ptr = (uint32_t*)malloc((src2[4] + 1) << 2);\n  if (res_ptr == NULL) {\n    exit(1);\n  }\n  carry = 0;\n  len = src1[4];\n  for (i = 0; i < len; i++) {\n    res = (uint64_t)src1_ptr[i] + (uint64_t)src2_ptr[i] + carry;\n    carry = res >> 0x20;\n    res_ptr[i] = res & 0xffffffff;\n  }\n  for (i = len; i < src2[4]; i++) {\n    res = (uint64_t)src2_ptr[i] + carry;\n    carry = res >> 0x20;\n    res_ptr[i] = res & 0xffffffff;\n  }\n  if (carry != 0) {\n    res_ptr[src2[4]] = carry;\n    src2[4]++;\n  }\n  free(src1);\n  src1 = res_ptr;\n  return;\n}\n",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009530",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "compare_and_set_08009530"
        },
        "FUN_08008af8": {
            "renaming": {
                "FUN_08008af8": "FUNC_08008af8"
            },
            "code": "\nint * FUNC_08008af8(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint *puVar6;\n  int iVar7;\n  undefined *puVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined4 *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  uint uVar14;\n  uint uVar15;\n  int iVar16;\n  undefined4 *puVar17;\n  undefined4 *puVar18;\n  \n  uVar14 = param_2 + 0xb;\n  if (uVar14 < 0x17) {\n    if (0x10 < param_2) goto LAB_08008c7a;\n    FUN_080090a8();\n    uVar15 = 0x10;\n    iVar7 = 0x18;\n    uVar14 = 2;\nLAB_08008b18:\n    puVar8 = PTR_DAT_08008e4c + iVar7;\n    puVar12 = *(undefined **)(puVar8 + 4);\n    if ((puVar12 != puVar8 + -8) || (puVar12 = *(undefined **)(puVar8 + 0xc), puVar8 != puVar12)) {\n      iVar7 = *(int *)(puVar12 + 0xc);\n      puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n      uVar14 = *(uint *)(puVar8 + 4);\nLAB_08008b34:\n      iVar16 = *(int *)(puVar12 + 8);\n      *(int *)(iVar16 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar16;\n      *(uint *)(puVar8 + 4) = uVar14 | 1;\n      FUN_080090b4(param_1);\n      return (int *)(puVar12 + 8);\n    }\n    uVar14 = uVar14 + 2;\n  }\n  else {\n    uVar15 = uVar14 & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_08008c7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n    FUN_080090a8();\n    if (uVar15 < 0x1f8) {\n      uVar14 = uVar14 >> 3;\n      iVar7 = uVar15 + 8;\n      goto LAB_08008b18;\n    }\n    uVar4 = uVar14 >> 9;\n    if (uVar4 == 0) {\n      iVar7 = 0x200;\n      uVar9 = 0x40;\n      uVar4 = 0x3f;\n    }\n    else if (uVar4 < 5) {\n      uVar9 = (uVar14 >> 6) + 0x39;\n      uVar4 = (uVar14 >> 6) + 0x38;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x15) {\n      uVar9 = uVar4 + 0x5c;\n      uVar4 = uVar4 + 0x5b;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x55) {\n      uVar9 = (uVar14 >> 0xc) + 0x6f;\n      uVar4 = (uVar14 >> 0xc) + 0x6e;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x155) {\n      uVar9 = (uVar14 >> 0xf) + 0x78;\n      uVar4 = (uVar14 >> 0xf) + 0x77;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x555) {\n      uVar9 = (uVar14 >> 0x12) + 0x7d;\n      uVar4 = (uVar14 >> 0x12) + 0x7c;\n      iVar7 = uVar9 * 8;\n    }\n    else {\n      iVar7 = 0x3f8;\n      uVar9 = 0x7f;\n      uVar4 = 0x7e;\n    }\n    for (puVar12 = *(undefined **)(PTR_DAT_08008e4c + iVar7 + 4); uVar14 = uVar9,\n        PTR_DAT_08008e4c + iVar7 + -8 != puVar12; puVar12 = *(undefined **)(puVar12 + 0xc)) {\n      iVar16 = (*(uint *)(puVar12 + 4) & 0xfffffffc) - uVar15;\n      uVar14 = uVar4;\n      if (0xf < iVar16) break;\n      if (-1 < iVar16) {\n        puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n        uVar14 = *(uint *)(puVar8 + 4);\n        iVar7 = *(int *)(puVar12 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  puVar8 = PTR_PTR_DAT_08008e60;\n  puVar12 = PTR_DAT_08008e4c;\n  puVar13 = *(undefined **)(PTR_DAT_08008e4c + 0x10);\n  if (puVar13 == PTR_PTR_DAT_08008e60) {\n    uVar4 = *(uint *)(PTR_DAT_08008e4c + 4);\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) goto LAB_08008c06;\n  }\n  else {\n    uVar9 = *(uint *)(puVar13 + 4);\n    uVar10 = uVar9 & 0xfffffffc;\n    uVar4 = uVar10 - uVar15;\n    if (0xf < (int)uVar4) {\n      puVar3 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar12 + 0x10) = puVar3;\n      *(undefined **)(puVar12 + 0x14) = puVar3;\n      *(undefined **)(puVar3 + 8) = puVar8;\n      *(undefined **)(puVar3 + 0xc) = puVar8;\n      *(uint *)(puVar3 + 4) = uVar4 | 1;\n      *(uint *)(puVar13 + uVar10) = uVar4;\n      FUN_080090b4(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR_DAT_08008e4c + 0x10) = PTR_PTR_DAT_08008e60;\n    *(undefined **)(puVar12 + 0x14) = puVar8;\n    if (-1 < (int)uVar4) {\n      *(uint *)(puVar13 + uVar10 + 4) = *(uint *)(puVar13 + uVar10 + 4) | 1;\n      FUN_080090b4(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar10 < 0x200) {\n      iVar7 = (uVar9 >> 3) + 1;\n      iVar16 = *(int *)(puVar12 + iVar7 * 8);\n      uVar4 = 1 << ((int)(uVar9 >> 3) >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n      *(int *)(puVar13 + 8) = iVar16;\n      *(undefined **)(puVar13 + 0xc) = puVar12 + iVar7 * 8 + -8;\n      *(uint *)(puVar12 + 4) = uVar4;\n      *(undefined **)(puVar12 + iVar7 * 8) = puVar13;\n      *(undefined **)(iVar16 + 0xc) = puVar13;\n    }\n    else {\n      uVar4 = uVar9 >> 9;\n      if (uVar4 < 5) {\n        iVar7 = ((uVar9 >> 6) + 0x39) * 8;\n        iVar16 = (uVar9 >> 6) + 0x38;\n      }\n      else if (uVar4 < 0x15) {\n        iVar7 = (uVar4 + 0x5c) * 8;\n        iVar16 = uVar4 + 0x5b;\n      }\n      else if (uVar4 < 0x55) {\n        iVar7 = ((uVar9 >> 0xc) + 0x6f) * 8;\n        iVar16 = (uVar9 >> 0xc) + 0x6e;\n      }\n      else if (uVar4 < 0x155) {\n        iVar7 = ((uVar9 >> 0xf) + 0x78) * 8;\n        iVar16 = (uVar9 >> 0xf) + 0x77;\n      }\n      else if (uVar4 < 0x555) {\n        iVar7 = ((uVar9 >> 0x12) + 0x7d) * 8;\n        iVar16 = (uVar9 >> 0x12) + 0x7c;\n      }\n      else {\n        iVar7 = 0x3f8;\n        iVar16 = 0x7e;\n      }\n      puVar3 = *(undefined **)(puVar12 + iVar7);\n      puVar1 = puVar12 + iVar7 + -8;\n      if (puVar1 == puVar3) {\n        uVar4 = 1 << (iVar16 >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n        *(uint *)(puVar12 + 4) = uVar4;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar3 + 4) & 0xfffffffc) <= uVar10) break;\n          puVar3 = *(undefined **)(puVar3 + 8);\n        } while (puVar1 != puVar3);\n        puVar1 = *(undefined **)(puVar3 + 0xc);\n        uVar4 = *(uint *)(puVar12 + 4);\n      }\n      *(undefined **)(puVar13 + 8) = puVar3;\n      *(undefined **)(puVar13 + 0xc) = puVar1;\n      *(undefined **)(puVar1 + 8) = puVar13;\n      *(undefined **)(puVar3 + 0xc) = puVar13;\n    }\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) {\nLAB_08008c06:\n      if ((uVar9 & uVar4) == 0) {\n        uVar14 = uVar14 & 0xfffffffc;\n        do {\n          uVar9 = uVar9 << 1;\n          uVar14 = uVar14 + 4;\n        } while ((uVar9 & uVar4) == 0);\n      }\n      do {\n        puVar17 = (undefined4 *)(puVar12 + uVar14 * 8);\n        uVar4 = uVar14;\n        puVar18 = puVar17;\n        do {\n          for (puVar11 = (undefined4 *)puVar18[3]; puVar18 != puVar11;\n              puVar11 = (undefined4 *)puVar11[3]) {\n            uVar10 = puVar11[1] & 0xfffffffc;\n            uVar5 = uVar10 - uVar15;\n            if (0xf < (int)uVar5) {\n              iVar16 = puVar11[2];\n              iVar7 = puVar11[3];\n              puVar13 = (undefined *)(uVar15 + (int)puVar11);\n              puVar11[1] = uVar15 | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              *(undefined **)(puVar12 + 0x10) = puVar13;\n              *(undefined **)(puVar12 + 0x14) = puVar13;\n              *(undefined **)(puVar13 + 8) = puVar8;\n              *(undefined **)(puVar13 + 0xc) = puVar8;\n              *(uint *)(puVar13 + 4) = uVar5 | 1;\n              *(uint *)((int)puVar11 + uVar10) = uVar5;\n              FUN_080090b4(param_1);\n              return puVar11 + 2;\n            }\n            if (-1 < (int)uVar5) {\n              iVar7 = puVar11[3];\n              iVar16 = puVar11[2];\n              *(uint *)((int)puVar11 + uVar10 + 4) = *(uint *)((int)puVar11 + uVar10 + 4) | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              FUN_080090b4(param_1);\n              return puVar11 + 2;\n            }\n          }\n          uVar4 = uVar4 + 1;\n          puVar18 = puVar18 + 2;\n        } while ((uVar4 & 3) != 0);\n        do {\n          uVar10 = uVar14 & 3;\n          puVar18 = puVar17 + -2;\n          uVar14 = uVar14 - 1;\n          if (uVar10 == 0) {\n            uVar10 = *(uint *)(puVar12 + 4) & ~uVar9;\n            *(uint *)(puVar12 + 4) = uVar10;\n            goto LAB_08008f24;\n          }\n          puVar17 = (undefined4 *)*puVar17;\n        } while (puVar17 == puVar18);\n        uVar10 = *(uint *)(puVar12 + 4);\nLAB_08008f24:\n        uVar9 = uVar9 * 2;\n        if ((uVar10 <= uVar9 && uVar9 - uVar10 != 0) || (uVar14 = uVar4, uVar9 == 0)) break;\n        for (; (uVar9 & uVar10) == 0; uVar9 = uVar9 << 1) {\n          uVar14 = uVar14 + 4;\n        }\n      } while( true );\n    }\n  }\n  puVar8 = PTR_DAT_08008e64;\n  puVar13 = *(undefined **)(puVar12 + 8);\n  uVar14 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar14) && (uVar4 = uVar14 - uVar15, 0xf < (int)uVar4)) goto LAB_08008dac;\n  if (*(int *)PTR_DAT_08008e64 == -1) {\n    uVar4 = uVar15 + *(int *)PTR_DAT_08008e50 + 0x10;\n  }\n  else {\n    uVar4 = uVar15 + *(int *)PTR_DAT_08008e50 + 0x100f & 0xfffff000;\n  }\n  puVar1 = (undefined *)FUN_08009744(param_1,uVar4);\n  puVar6 = (uint *)PTR_DAT_08009018;\n  puVar3 = PTR_DAT_08008e54;\n  if (puVar1 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar14 = *(uint *)(puVar13 + 4);\n  }\n  else {\n    puVar2 = puVar13 + uVar14;\n    if (puVar2 < puVar1 || puVar2 == puVar1) {\n      uVar9 = *(int *)PTR_DAT_08008e54 + uVar4;\n      *(uint *)PTR_DAT_08008e54 = uVar9;\n      puVar6 = (uint *)puVar3;\n      if ((puVar2 != puVar1) || (((uint)puVar2 & 0xfff) != 0)) goto LAB_08008d02;\n      *(uint *)(*(int *)(puVar12 + 8) + 4) = uVar14 + uVar4 | 1;\n    }\n    else {\n      if (puVar13 != puVar12) goto LAB_08008ed8;\n      uVar9 = *(int *)PTR_DAT_08009018 + uVar4;\n      *(uint *)PTR_DAT_08009018 = uVar9;\nLAB_08008d02:\n      if (*(int *)puVar8 == -1) {\n        *(undefined **)puVar8 = puVar1;\n      }\n      else {\n        *puVar6 = (uint)(puVar1 + (uVar9 - (int)puVar2));\n      }\n      uVar9 = (uint)puVar1 & 7;\n      if (uVar9 == 0) {\n        iVar7 = 0x1000;\n      }\n      else {\n        puVar1 = puVar1 + (8 - uVar9);\n        iVar7 = 0x1008 - uVar9;\n      }\n      iVar7 = iVar7 - ((uint)(puVar1 + uVar4) & 0xfff);\n      iVar16 = FUN_08009744(param_1,iVar7);\n      if (iVar16 == -1) {\n        uVar4 = 1;\n        iVar7 = 0;\n      }\n      else {\n        uVar4 = (iVar16 - (int)puVar1) + iVar7 | 1;\n      }\n      uVar9 = *puVar6 + iVar7;\n      *(undefined **)(puVar12 + 8) = puVar1;\n      *puVar6 = uVar9;\n      *(uint *)(puVar1 + 4) = uVar4;\n      if (puVar13 != puVar12) {\n        if (uVar14 < 0x10) {\n          *(undefined4 *)(puVar1 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        uVar14 = uVar14 - 0xc & 0xfffffff8;\n        *(uint *)(puVar13 + 4) = *(uint *)(puVar13 + 4) & 1 | uVar14;\n        *(undefined4 *)(puVar13 + uVar14 + 4) = 5;\n        *(undefined4 *)(puVar13 + uVar14 + 8) = 5;\n        if (0xf < uVar14) {\n          FUNC_080088ec(param_1,puVar13 + 8);\n          uVar9 = *puVar6;\n        }\n      }\n    }\n    puVar8 = PTR_DAT_08008e5c;\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar4 = *(uint *)PTR_DAT_08008e5c;\n    if (*(uint *)PTR_DAT_08008e58 < uVar9) {\n      *(uint *)PTR_DAT_08008e58 = uVar9;\n    }\n    uVar14 = *(uint *)(puVar13 + 4);\n    if (uVar4 < uVar9) {\n      *(uint *)puVar8 = uVar9;\n    }\n  }\n  uVar4 = (uVar14 & 0xfffffffc) - uVar15;\n  if ((uVar15 <= (uVar14 & 0xfffffffc)) && (0xf < (int)uVar4)) {\nLAB_08008dac:\n    *(uint *)(puVar13 + 4) = uVar15 | 1;\n    *(undefined **)(puVar12 + 8) = puVar13 + uVar15;\n    *(uint *)(puVar13 + uVar15 + 4) = uVar4 | 1;\n    FUN_080090b4(param_1);\n    return (int *)(puVar13 + 8);\n  }\nLAB_08008eee:\n  FUN_080090b4(param_1);\n  return (int *)0x0;\n}\n\n",
            "called": [
                "FUN_080090b4",
                "FUN_08009744",
                "FUN_080090a8",
                "FUN_080088ec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008af8",
            "calling": [
                "FUN_08009980",
                "FUN_08005e9c",
                "FUN_08009adc",
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "FUNC_08008af8"
        },
        "FUN_08002bb4": {
            "renaming": {
                "iVar1": "result",
                "FUN_08002bb4": "check_if_flag_set_08002bb4",
                "param_1": "flag_array",
                "param_2": "array_size",
                "param_3": "offset"
            },
            "code": "int check_if_flag_set_08002bb4(int *flag_array, uint array_size, int offset) {\n  int flag_value;\n  while (true) {\n    flag_value = *(uint *)(*flag_array + 0x14) & 0x80;\n    if (flag_value == 0x80) {\n      return 0;\n    }\n    int result = FUN_08002d3c(flag_array);\n    if (result != 0) {\n      break;\n    }\n    if ((array_size != 0xffffffff) && ((array_size == 0 || (result = FUN_080015a0(), array_size < (uint)(result - offset))))) {\n      flag_array[0x10] |= 0x20;\n      flag_array[0xc] = 0;\n      *(undefined *)((int)flag_array + 0x3d) = 0x20;\n      *(undefined *)(flag_array + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bb4",
            "calling": [
                "FUN_08001ccc",
                "FUN_08002640",
                "FUN_080027f4"
            ],
            "imported": true,
            "current_name": "check_if_flag_set_08002bb4"
        },
        "FUN_08002d3c": {
            "renaming": {
                "bVar1": "flag_value",
                "FUN_08002d3c": "check_flag_08002d3c",
                "param_1": "flag_ptr"
            },
            "code": "bool check_flag_08002d3c(int *flag_ptr) {\n  bool flag_value = (*(uint *)(*flag_ptr + 0x14) & 0x400) == 0x400;\n  \n  if (flag_value) {\n    *(undefined4 *)(*flag_ptr + 0x14) = 0xfffffbff;\n    flag_ptr[0x10] = 4;\n    flag_ptr[0xc] = 0;\n    *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n    *(undefined *)(flag_ptr + 0xf) = 0;\n  }\n  \n  return flag_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d3c",
            "calling": [
                "FUN_08002bb4",
                "FUN_08002c2e"
            ],
            "imported": true,
            "current_name": "check_flag_08002d3c"
        },
        "FUN_08004bd8": {
            "renaming": {
                "uVar1": "intermediate_result_1",
                "FUN_08004bd8": "calculate_result_08004bd8",
                "param_1": "input",
                "param_2": "output",
                "uVar3": "intermediate_result_3",
                "uVar2": "intermediate_result_2"
            },
            "code": "void calculate_result_08004bd8(int input, undefined4 *output)\\n{\\n  undefined4 intermediate_result_1 = calculate_1(*(undefined4 *)(input + 0x10),*(undefined4 *)(input + 0x1c));\\n  undefined8 intermediate_result_2 = get_constant_1();\\n  undefined8 intermediate_result_3 = calculate_2(intermediate_result_1);\\n  intermediate_result_3 = calculate_3((int)intermediate_result_3,(int)((ulonglong)intermediate_result_3 >> 0x20),get_constant_2(),get_constant_3());\\n  intermediate_result_2 = calculate_4((int)intermediate_result_2,(int)((ulonglong)intermediate_result_2 >> 0x20),(int)intermediate_result_3,(int)((ulonglong)intermediate_result_3 >> 0x20));\\n  intermediate_result_1 = calculate_5((int)intermediate_result_2,(int)((ulonglong)intermediate_result_2 >> 0x20));\\n  *PTR_DAT_08004d60 = intermediate_result_1;\\n  undefined8 intermediate_result_4 = calculate_6(*(undefined4 *)(input + 4));\\n  intermediate_result_4 = calculate_7((int)intermediate_result_4,(int)((ulonglong)intermediate_result_4 >> 0x20),0,get_constant_4());\\n  undefined8 intermediate_result_5 = calculate_6(*(undefined4 *)(input + 8));\\n  intermediate_result_5 = calculate_7((int)intermediate_result_5,(int)((ulonglong)intermediate_result_5 >> 0x20),0,get_constant_4());\\n  intermediate_result_4 = calculate_8((int)intermediate_result_4,(int)((ulonglong)intermediate_result_4 >> 0x20),(int)intermediate_result_5,(int)((ulonglong)intermediate_result_5 >> 0x20));\\n  intermediate_result_4 = calculate_3((int)intermediate_result_4,(int)((ulonglong)intermediate_result_4 >> 0x20),0,get_constant_5());\\n  intermediate_result_4 = calculate_7((int)intermediate_result_4,(int)((ulonglong)intermediate_result_4 >> 0x20),get_constant_6(),get_constant_7());\\n  undefined8 intermediate_result_6 = calculate_6(*(undefined4 *)(input + 0x24));\\n  intermediate_result_4 = calculate_4((int)intermediate_result_4,(int)((ulonglong)intermediate_result_4 >> 0x20),(int)intermediate_result_6,(int)((ulonglong)intermediate_result_6 >> 0x20));\\n  intermediate_result_4 = calculate_4((int)intermediate_result_4,(int)((ulonglong)intermediate_result_4 >> 0x20),0,get_constant_8());\\n  intermediate_result_1 = calculate_5((int)intermediate_result_4,(int)((ulonglong)intermediate_result_4 >> 0x20));\\n  if (*PTR_DAT_08004d70 == \"\\0\") {\\n    intermediate_result_2 = get_constant_1();\\n    intermediate_result_2 = calculate_3((int)intermediate_result_2,(int)((ulonglong)intermediate_result_2 >> 0x20),get_constant_9(),get_constant_10());\\n    intermediate_result_5 = calculate_3((int)intermediate_result_5,(int)((ulonglong)intermediate_result_5 >> 0x20),get_constant_11(),get_constant_12());\\n    intermediate_result_2 = calculate_4((int)intermediate_result_2,(int)((ulonglong)intermediate_result_2 >> 0x20),(int)intermediate_result_5,(int)((ulonglong)intermediate_result_5 >> 0x20));\\n    intermediate_result_1 = calculate_5((int)intermediate_result_2,(int)((ulonglong)intermediate_result_2 >> 0x20));\\n    *PTR_DAT_08004d60 = intermediate_result_1;\\n  }\\n  else {\\n    *PTR_DAT_08004d60 = intermediate_result_1;\\n    *PTR_DAT_08004d70 = 0;\\n  }\\n  *output = *PTR_DAT_08004d60;\\n  return;\\n}",
            "called": [
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_080009fc",
                "FUN_08000aa4",
                "thunk_FUN_08005838",
                "FUN_0800015c",
                "FUN_08000418",
                "FUN_08000158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bd8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "calculate_result_08004bd8"
        },
        "FUN_080090c0": {
            "renaming": {
                "iVar2": "temp_var",
                "FUN_080090c0": "get_data_080090c0",
                "param_1": "data_array",
                "param_2": "index",
                "puVar1": "data_ptr"
            },
            "code": "undefined4 * get_data_080090c0(int data_array, uint index){\n  undefined4 *data_ptr;\n  int temp_var;\n  temp_var = *(int *)(data_array + 0x4c);\n  if (temp_var == 0) {\n    temp_var = allocate_memory(data_array,4,0x21);\n    *(int *)(data_array + 0x4c) = temp_var;\n    if (temp_var == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  data_ptr = *(undefined4 **)(temp_var + index * 4);\n  if (data_ptr == (undefined4 *)0x0) {\n    int size = 1 << (index & 0xff);\n    data_ptr = (undefined4 *)allocate_memory(data_array,1,(size + 5) * 4);\n    if (data_ptr == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    data_ptr[1] = index;\n    data_ptr[2] = size;\n  }\n  else {\n    *(undefined4 *)(temp_var + index * 4) = *data_ptr;\n  }\n  data_ptr[3] = 0;\n  data_ptr[4] = 0;\n  return data_ptr;\n}",
            "called": [
                "FUN_08009980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c0",
            "calling": [
                "FUN_080079e8",
                "FUN_08009630",
                "FUN_08009244",
                "FUN_080093a4",
                "FUN_08009444",
                "FUN_08009530",
                "FUN_08009120",
                "FUN_08009258"
            ],
            "imported": true,
            "current_name": "get_data_080090c0"
        },
        "FUN_080091e4": {
            "renaming": {
                "uVar1": "count",
                "FUN_080091e4": "count_bits_set_to_0_080091e4",
                "param_1": "num",
                "uVar2": "original_num"
            },
            "code": "uint count_bits_set_to_0_080091e4(uint *num)\n{\n  uint original_num = *num;\n  uint count = original_num & 7;\n  if (count == 0) {\n    if ((original_num & 0xffff) == 0) {\n      original_num = original_num >> 0x10;\n      count = 0x10;\n    }\n    if ((original_num & 0xff) == 0) {\n      original_num = original_num >> 8;\n      count += 8;\n    }\n    if ((original_num & 0xf) == 0) {\n      original_num = original_num >> 4;\n      count += 4;\n    }\n    if ((original_num & 3) == 0) {\n      original_num = original_num >> 2;\n      count += 2;\n    }\n    if (-1 < (int)(original_num << 0x1f)) {\n      original_num = original_num >> 1;\n      if (original_num == 0) {\n        return 0x20;\n      }\n      count += 1;\n    }\n    *num = original_num;\n    return count;\n  }\n  if (-1 < (int)(original_num << 0x1f)) {\n    if ((int)(original_num << 0x1e) < 0) {\n      *num = original_num >> 1;\n      return 1;\n    }\n    *num = original_num >> 2;\n    return 2;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091e4",
            "calling": [
                "FUN_08009630"
            ],
            "imported": true,
            "current_name": "count_bits_set_to_0_080091e4"
        },
        "FUN_080009fc": {
            "renaming": {
                "bVar4": "exponent_is_negative",
                "uVar1": "exponent_bits",
                "param_1": "exponent",
                "FUN_080009fc": "calculate_float_bits_080009fc",
                "param_2": "mantissa",
                "uVar3": "mantissa_bits",
                "uVar2": "mantissa_shifted",
                "bVar5": "exponent_is_too_large",
                "in_r12": "unused_variable"
            },
            "code": "uint calculate_float_bits_080009fc(uint exponent, uint mantissa)\n{\n  uint sign_bit;\n  uint exponent_bits;\n  uint mantissa_bits;\n  bool exponent_is_negative;\n  bool exponent_is_too_large;\n  bool mantissa_is_zero;\n  \n  uint mantissa_shifted = mantissa * 2;\n  exponent_is_too_large = mantissa_shifted < 0x70000000;\n  mantissa_bits = mantissa_shifted + 0x90000000;\n  exponent_bits = mantissa_bits;\n  if (!exponent_is_too_large) {\n    exponent_bits = mantissa_shifted + 0x8fe00000;\n  }\n  exponent_is_negative = exponent_bits == 0;\n  if (!exponent_is_too_large && mantissa_bits >= 0x200000) {\n    exponent_is_negative = mantissa_shifted + 0x8fe00000 == 0x1fc00000;\n  }\n  if (((exponent_is_too_large || mantissa_bits < 0x200000) || 0x1fc00000 < mantissa_shifted + 0x8fe00000) || exponent_is_negative) {\n    if ((mantissa & 0x40000000) != 0) {\n      if (((int)mantissa_shifted >> 0x15 == -1) && ((exponent | mantissa << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return mantissa & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(mantissa_shifted + 0x92e00000) < 0 != SCARRY4(mantissa_bits,0x2e00000)) {\n      return mantissa & 0x80000000;\n    }\n    uint shift_amount = 0x18 - (mantissa_shifted + 0x92e00000 >> 0x15);\n    exponent_bits = exponent >> (shift_amount & 0xff);\n    if (exponent << (0x20 - shift_amount & 0xff) != 0) {\n      exponent_bits = exponent_bits | 1;\n    }\n    mantissa_bits = mantissa & 0x1fffff | 0x100000;\n    exponent_bits = exponent_bits | mantissa_bits << (0x20 - shift_amount & 0xff);\n    mantissa_bits = (mantissa_bits >> (shift_amount & 0xff)) << 1;\n  }\n  exponent_bits = (mantissa & 0x80000000 | exponent_bits >> 0x1d) + mantissa_bits * 4 + (uint)(0x7fffffff < exponent * 8);\n  if (exponent * 8 == 0x80000000) {\n    exponent_bits = exponent_bits & 0xfffffffe;\n  }\n  return exponent_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009fc",
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "imported": true,
            "current_name": "calculate_float_bits_080009fc"
        },
        "FUN_08000cb8": {
            "renaming": {
                "FUN_08000cb8": "FUNC_08000cb8"
            },
            "code": "\nuint FUNC_08000cb8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e08;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e08:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cb8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000cb8"
        },
        "FUN_080093a4": {
            "renaming": {
                "PTR_DAT_08009440": "byte_reverse_lookup_table",
                "iVar1": "i",
                "iVar2": "j",
                "puVar3": "current_output_pointer",
                "puVar4": "current_node",
                "param_1": "data",
                "FUN_080093a4": "reverse_bytes_080093a4",
                "param_2": "output",
                "param_3": "length"
            },
            "code": "uint32_t * reverse_bytes_080093a4(uint32_t *data, uint32_t *output, uint32_t length)\n{\n  int i = 0;\n  int j = length - 1;\n  while (i < length) {\n    output[j] = data[i];\n    i++;\n    j--;\n  }\n  return output;\n}",
            "called": [
                "FUN_080090c0",
                "FUN_08009120",
                "FUN_08009258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080093a4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "reverse_bytes_080093a4"
        },
        "FUN_080098c0": {
            "renaming": {
                "iVar5": "global_var1",
                "iVar6": "global_var2",
                "iVar7": "var2",
                "param_1": "input",
                "FUN_080098c0": "process_data_080098c0",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "data3",
                "puVar1": "global_ptr",
                "uVar3": "var1",
                "uVar2": "do_nothing_result",
                "uVar4": "var2"
            },
            "code": "undefined4 process_data_080098c0(int input, undefined4 data1, undefined4 data2, undefined4 data3)\n{\n  undefined *global_ptr = PTR_PTR_DAT_08009974;\n  do_nothing_08008af0(*(undefined4 *)PTR_PTR_DAT_08009974);\n  int global_var1 = *(int *)PTR_PTR_DAT_08009978;\n  int global_var2 = *(int *)(global_var1 + 0x148);\n  if (global_var2 == 0) {\n    global_var2 = global_var1 + 0x14c;\n    *(int *)(global_var1 + 0x148) = global_var2;\n  }\n  uint var1 = *(uint *)(global_var2 + 4);\n  int var2;\n  if ((int)var1 < 0x20) {\n    var2 = var1 + 1;\n  }\n  else {\n    if (DAT_0800997c == 0) {\n      do_nothing_08008af4(*(undefined4 *)global_ptr);\n      return 0xffffffff;\n    }\n    int global_var3 = 400;\n    var1 = 0;\n    _DAT_00000190 = *(undefined4 *)(global_var1 + 0x148);\n    var2 = 1;\n    _DAT_00000194 = 0;\n    *(undefined4 *)(global_var1 + 0x148) = 400;\n    _DAT_00000318 = 0;\n    _DAT_0000031c = 0;\n  }\n  if (input != 0) {\n    int var3 = global_var2 + var1 * 4;\n    *(undefined4 *)(var3 + 0x88) = data2;\n    uint var4 = 1 << (var1 & 0xff);\n    *(uint *)(global_var2 + 0x188) = *(uint *)(global_var2 + 0x188) | var4;\n    *(undefined4 *)(var3 + 0x108) = data3;\n    if (input == 2) {\n      *(uint *)(global_var2 + 0x18c) = var4 | *(uint *)(global_var2 + 0x18c);\n    }\n  }\n  *(int *)(global_var2 + 4) = var2;\n  undefined4 do_nothing_result = *(undefined4 *)global_ptr;\n  *(undefined4 *)(global_var2 + (var1 + 2) * 4) = data1;\n  do_nothing_08008af4(do_nothing_result);\n  return 0;\n}",
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098c0",
            "calling": [
                "FUN_080078a0"
            ],
            "imported": true,
            "current_name": "process_data_080098c0"
        },
        "FUN_08003c80": {
            "renaming": {
                "FUN_08003c80": "do_nothing_08003c80"
            },
            "code": "\nvoid do_nothing_08003c80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c80",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": true,
            "current_name": "do_nothing_08003c80"
        },
        "FUN_0800015c": {
            "renaming": {
                "FUN_0800015c": "FUNC_0800015c"
            },
            "code": "\nulonglong FUNC_0800015c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800015c",
            "calling": [
                "FUN_080079e8",
                "FUN_08004bd8",
                "FUN_080059f0",
                "FUN_08005838"
            ],
            "imported": false,
            "current_name": "FUNC_0800015c"
        },
        "FUN_080027f4": {
            "renaming": {
                "iVar1": "result",
                "param_1": "data_ptr",
                "param_6": "param_6",
                "param_2": "flags",
                "param_3": "data_size",
                "param_4": "data_value",
                "param_5": "timeout",
                "FUN_080027f4": "send_data_080027f4"
            },
            "code": "uint32_t send_data_080027f4(uint32_t **data_ptr, uint8_t flags, uint16_t data_size, uint16_t data_value, uint32_t timeout, int param_6) {\n  uint32_t result = 3;\n  **data_ptr |= 0x400;\n  **data_ptr |= 0x100;\n  while ((~(*data_ptr)[5] & 1) != 0) {\n    if ((timeout != 0xffffffff) && ((timeout == 0) || ((uint32_t)(FUN_080015a0() - param_6) > timeout))) {\n      *data_ptr[12] = 0;\n      *(uint8_t *)((int)data_ptr + 0x3d) = 0x20;\n      *(uint8_t *)((int)data_ptr + 0x3e) = 0;\n      *(uint32_t *)(data_ptr + 15) = 0;\n      result = 3;\n      goto LAB_08002a90;\n    }\n  }\n  *data_ptr[12] = 0;\n  *(uint8_t *)((int)data_ptr + 0x3d) = 0x20;\n  *(uint8_t *)((int)data_ptr + 0x3e) = 0;\n  *(uint32_t *)(data_ptr + 15) = 0;\n  if (FUN_08002ad8(data_ptr, DAT_08002ad4, timeout, param_6) != 0) {\n    if (*data_ptr[16] == 4) {\n      **data_ptr |= 0x200;\n      result = 1;\n    }\n  } else {\n    if (FUN_08002bb4(data_ptr, timeout, param_6, (*data_ptr)[6]) != 0) {\n      if (*data_ptr[16] == 4) {\n        **data_ptr |= 0x200;\n        result = 1;\n      }\n    } else {\n      if (data_size == 1) {\n        (*data_ptr)[4] = flags & 0xfe;\n        if (FUN_08002bb4(data_ptr, timeout, param_6) == 0) {\n          **data_ptr |= 0x100;\n          while ((~(*data_ptr)[5] & 1) != 0) {\n            if ((timeout != 0xffffffff) && ((timeout == 0) || ((uint32_t)(FUN_080015a0() - param_6) > timeout))) {\n              *data_ptr[12] = 0;\n              *(uint8_t *)((int)data_ptr + 0x3d) = 0x20;\n              *(uint8_t *)((int)data_ptr + 0x3e) = 0;\n              *(uint32_t *)(data_ptr + 15) = 0;\n              result = 3;\n              goto LAB_08002a90;\n            }\n          }\n          *data_ptr[12] = 0;\n          *(uint8_t *)((int)data_ptr + 0x3d) = 0x20;\n          *(uint8_t *)((int)data_ptr + 0x3e) = 0;\n          *(uint32_t *)(data_ptr + 15) = 0;\n          result = 0;\n        } else {\n          if (*data_ptr[16] == 4) {\n            **data_ptr |= 0x200;\n            result = 1;\n          }\n        }\n      } else {\n        (*data_ptr)[4] = (uint32_t)(flags | ((uint16_t)data_value >> 8));\n        if (FUN_08002bb4(data_ptr, timeout, param_6) != 0) {\n          if (*data_ptr[16] == 4) {\n            **data_ptr |= 0x200;\n            result = 1;\n          }\n        } else {\n          (*data_ptr)[4] = (uint32_t)(uint8_t)data_value;\n          if (FUN_08002bb4(data_ptr, timeout, param_6) == 0) {\n            **data_ptr |= 0x100;\n            while ((~(*data_ptr)[5] & 1) != 0) {\n              if ((timeout != 0xffffffff) && ((timeout == 0) || ((uint32_t)(FUN_080015a0() - param_6) > timeout))) {\n                *data_ptr[12] = 0;\n                *(uint8_t *)((int)data_ptr + 0x3d) = 0x20;\n                *(uint8_t *)((int)data_ptr + 0x3e) = 0;\n                *(uint32_t *)(data_ptr + 15) = 0;\n                result = 3;\n                goto LAB_08002a90;\n              }\n            }\n            *data_ptr[12] = 0;\n            *(uint8_t *)((int)data_ptr + 0x3d) = 0x20;\n            *(uint8_t *)((int)data_ptr + 0x3e) = 0;\n            *(uint32_t *)(data_ptr + 15) = 0;\n            result = 0;\n          } else {\n            if (*data_ptr[16] == 4) {\n              **data_ptr |= 0x200;\n              result = 1;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_08002a90:\n  return result;\n}\n",
            "called": [
                "FUN_080015a0",
                "FUN_08002bb4",
                "FUN_08002ad8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f4",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": true,
            "current_name": "send_data_080027f4"
        },
        "FUN_080003d4": {
            "renaming": {
                "iVar3": "leading_zeroes",
                "uVar1": "output_upper",
                "param_1": "input",
                "SCARRY4": "carry_check",
                "uVar2": "shift_amount",
                "SBORROW4": "subtract_with_overflow",
                "FUN_080003d4": "reverse_bits_080003d4",
                "uVar4": "shift_amount2",
                "bVar6": "shift_condition2",
                "bVar5": "shift_condition1",
                "in_r12": "unused",
                "bVar7": "carry_check"
            },
            "code": "ulonglong reverse_bits_080003d4(uint input) {\n  uint leading_zeroes = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes + 21;\n  bool shift_condition = shift_amount < 32;\n  uint shifted_input;\n  uint shifted_output;\n  if (input == 0) {\n    return 0;\n  }\n  if (shift_condition) {\n    shifted_input = input << (shift_amount & 0xff);\n    shifted_output = input >> ((12 - leading_zeroes) & 0xff);\n  } else {\n    uint shift_amount2 = 32 - shift_amount;\n    shifted_input = input >> (leading_zeroes & 0xff);\n    shifted_output = (shift_amount2 > 31) ? 0 : input >> shift_amount2;\n  }\n  uint upper_bits = shifted_output << (shift_amount & 0xff);\n  uint lower_bits = (shift_condition) ? 0 : (0xffffffff >> (32 - (shift_amount & 0xff)));\n  ulonglong output = (ulonglong)(upper_bits | lower_bits);\n  if (shift_amount < 1075) {\n    return output + ((1074 - shift_amount) * 0x100000);\n  } else {\n    uint shift_amount3 = ~(1074 - shift_amount);\n    if (shift_amount3 > 30) {\n      return (ulonglong)(shifted_output >> (shift_amount3 - 31));\n    } else {\n      int shift_amount4 = shift_amount3 - 19;\n      if (shift_amount4 != 0 && (shift_amount3 - 31 < 0) != ((shift_amount3 - 19) < 0)) {\n        shift_amount3++;\n        return (ulonglong)((shifted_output >> (shift_amount3 & 0xff)) | (upper_bits << (32 - shift_amount3 & 0xff)));\n      } else {\n        return (ulonglong)((upper_bits >> (32 - (12 - shift_amount4) & 0xff)) | (shifted_output << (12 - shift_amount4 & 0xff)));\n      }\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": true,
            "current_name": "reverse_bits_080003d4"
        },
        "FUN_08004d78": {
            "renaming": {
                "DAT_08004e60": "constant2",
                "DAT_08004e64": "constant3",
                "uVar1": "a",
                "FUNC_080004c8": "calculate_product",
                "FUNC_0800071c": "calculate_quotient",
                "param_1": "input_array",
                "FUN_080009fc": "calculate_difference",
                "param_2": "output1",
                "param_3": "output2",
                "thunk_FUN_08005838": "calculate_sum",
                "uVar3": "c",
                "DAT_08004e68": "constant1",
                "uVar2": "b",
                "FUN_08004d78": "calculate_result_08004d78",
                "uVar5": "e",
                "uVar4": "d"
            },
            "code": "void calculate_result_08004d78(float *input_array, float *output1, float *output2)\n{\n  float a = FUNC_08000e20(input_array[0],0x45800000);\n  float b = FUNC_08000e20(input_array[1],0x45800000);\n  float c = FUNC_08000e20(input_array[2],0x45800000);\n  float d = FUN_08000418(b);\n  float e = FUN_08000418(c);\n  float f = thunk_FUN_08005838((int)d,(int)((ulonglong)d >> 0x20),(int)e,(int)((ulonglong)e >> 0x20));\n  float g = FUNC_080004c8((int)f,(int)((ulonglong)f >> 0x20),0,DAT_08004e68);\n  float h = FUNC_0800071c((int)g,(int)((ulonglong)g >> 0x20),DAT_08004e60,DAT_08004e64);\n  float i = FUN_080009fc((int)h,(int)((ulonglong)h >> 0x20));\n  d = FUN_08000418(a);\n  e = FUN_08000418(c);\n  f = thunk_FUN_08005838((int)d,(int)((ulonglong)d >> 0x20),(int)e,(int)((ulonglong)e >> 0x20));\n  g = FUNC_080004c8((int)f,(int)((ulonglong)f >> 0x20),0,DAT_08004e68);\n  h = FUNC_0800071c((int)g,(int)((ulonglong)g >> 0x20),DAT_08004e60,DAT_08004e64);\n  float j = FUN_080009fc((int)h,(int)((ulonglong)h >> 0x20));\n  *output1 = i;\n  *output2 = j;\n  return;\n}",
            "called": [
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_080009fc",
                "thunk_FUN_08005838",
                "FUN_08000e20",
                "FUN_08000418"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d78",
            "calling": [
                "FUN_080049cc"
            ],
            "imported": true,
            "current_name": "calculate_result_08004d78"
        },
        "FUN_08000c10": {
            "renaming": {
                "iVar1": "leading_zeroes_count",
                "iVar4": "hash_value",
                "param_1": "input",
                "uVar3": "sign_bit_mask",
                "uVar2": "shifted_input",
                "uVar5": "overflow_check",
                "FUN_08000c10": "calculate_hash_08000c10"
            },
            "code": "uint calculate_hash_08000c10(uint input)\n{\n  int leading_zeroes_count;\n  uint sign_bit_mask;\n  uint hash_value;\n  uint shifted_input;\n\n  sign_bit_mask = input & 0x80000000;\n  if ((int)sign_bit_mask < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input);\n  shifted_input = input << (leading_zeroes_count - 8);\n  hash_value = ((sign_bit_mask | 0x4b000000) - 0x800000) + shifted_input * -0x800000;\n  if (leading_zeroes_count > 7) {\n    uint overflow_check = 0 << (shifted_input & 0xff);\n    hash_value += (input << (shifted_input & 0xff)) + (0U >> (0x20 - shifted_input & 0xff)) + (uint)(0x7fffffff < overflow_check);\n    if (overflow_check == 0x80000000) {\n      hash_value = hash_value & 0xfffffffe;\n    }\n    return hash_value;\n  }\n  shifted_input = input << (leading_zeroes_count + 0x18U & 0xff);\n  hash_value += ((input >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f));\n  if ((shifted_input & 0x7fffffff) == 0) {\n    hash_value = hash_value & ~(shifted_input >> 0x1f);\n  }\n  return hash_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c10",
            "calling": [
                "FUN_08004ae0",
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": true,
            "current_name": "calculate_hash_08000c10"
        },
        "FUN_0800491c": {
            "renaming": {
                "PTR_DAT_080049c8": "unchanged",
                "param_1": "data_array",
                "FUN_080049cc": "perform_additional_operations",
                "FUN_0800491c": "initialize_data_array_0800491c",
                "local_13": "zero_char",
                "local_12": "ten_char",
                "local_11": "eight_char"
            },
            "code": "void initialize_data_array_0800491c(int* data_array)\n{\n  char zero_char = 0;\n  char ten_char = 0x10;\n  char eight_char = 8;\n  // Initialize data_array with zeros\n  for (int i = 0; i < 11; i++) {\n    data_array[i] = 0;\n  }\n  // Call another function to perform additional operations\n  perform_additional_operations(data_array);\n}\n",
            "called": [
                "FUN_080049cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800491c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": true,
            "current_name": "initialize_data_array_0800491c"
        },
        "FUN_080078a0": {
            "renaming": {
                "DAT_080078ac": "isMessagePresent",
                "FUN_080098c0": "printMessage",
                "FUN_080078a0": "checkAndPrintMessage_080078a0",
                "PTR_LAB_08008818_1_080078b0": "messagePointer"
            },
            "code": "void checkAndPrintMessage_080078a0(void)\n{\n  if (DAT_080078ac != 0) {\n    printMessage(0, PTR_LAB_08008818_1_080078b0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080098c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078a0",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": true,
            "current_name": "checkAndPrintMessage_080078a0"
        },
        "FUN_080057e8": {
            "renaming": {
                "iVar1": "i",
                "puVar2": "destination_ptr",
                "UNRECOVERED_JUMPTABLE": "jumptable_ptr",
                "FUN_080057e8": "copy_and_clear_memory_080057e8"
            },
            "code": "void copy_and_clear_memory_080057e8(void)\n{\n  int i;\n  undefined4 *destination_ptr;\n  code *jumptable_ptr;\n  for (i = 0; PTR_DAT_08005820 + i < PTR_DAT_08005824; i += 4) {\n    *(undefined4 *)(PTR_DAT_08005820 + i) = *(undefined4 *)(DAT_0800581c + i);\n  }\n  for (destination_ptr = (undefined4 *)PTR_DAT_08005828; destination_ptr < PTR_DAT_0800582c; destination_ptr++) {\n    *destination_ptr = 0;\n  }\n  FUN_08005780();\n  FUN_08005d20();\n  jumptable_ptr = (code *)0x800581a;\n  FUN_08005224();\n  (*jumptable_ptr)();\n  return;\n}",
            "called": [
                "FUN_08005224",
                "FUN_08005d20",
                "FUN_08005780"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e8",
            "calling": [],
            "imported": true,
            "current_name": "copy_and_clear_memory_080057e8"
        }
    },
    "used_tokens": 130204,
    "layers": [
        [
            "FUN_080036a8",
            "FUN_08005224",
            "FUN_08003440",
            "FUN_08004f2c",
            "FUN_08005348",
            "FUN_080046ec",
            "FUN_08005500",
            "FUN_08002c2e",
            "FUN_08003568",
            "FUN_080049cc",
            "FUN_08003c94",
            "FUN_08000978",
            "FUN_0800884c",
            "FUN_0800901c",
            "FUN_0800177c",
            "FUN_080017b4",
            "FUN_08005598",
            "FUN_08001030",
            "FUN_080011ec",
            "FUN_08004f3c",
            "FUN_08002640",
            "FUN_080008fc",
            "FUN_08000988",
            "FUN_08001714",
            "FUN_08005dfc",
            "FUN_080078c0",
            "thunk_FUN_08005838",
            "FUN_080003f4",
            "FUN_0800166c",
            "FUN_0800360c",
            "FUN_08005d68",
            "FUN_080017c4",
            "FUN_080035a4",
            "FUN_080041ea",
            "FUN_08004ae0",
            "FUN_08001044",
            "FUN_08009444",
            "FUN_080015fc",
            "FUN_08004436",
            "FUN_08000110",
            "FUN_08003504",
            "FUN_08004ee8",
            "FUN_080094f8",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_08000fc8",
            "FUN_0800438a",
            "FUN_080014f0",
            "FUN_08003908",
            "FUN_08004f60",
            "FUN_080009c0",
            "FUN_08001170",
            "FUN_08003f18",
            "FUN_080097cc",
            "FUN_08002ad8",
            "FUN_08000fd0",
            "FUN_08003d60",
            "FUN_08003518",
            "FUN_08001618",
            "FUN_080091a4",
            "FUN_08004f78",
            "FUN_080015a0",
            "FUN_0800172a",
            "FUN_080009d4",
            "FUN_08005780",
            "FUN_08009744",
            "FUN_08003640",
            "FUN_08009980",
            "FUN_08000134",
            "FUN_08005704",
            "FUN_08000418",
            "FUN_08002ca8",
            "FUN_08003a94",
            "FUN_0800416a",
            "FUN_080055f4",
            "FUN_080053b0",
            "FUN_0800088a",
            "FUN_080016d0",
            "FUN_08001ccc",
            "FUN_0800157c",
            "FUN_08005d14",
            "FUN_080015b4",
            "FUN_080036f8",
            "FUN_080041a8",
            "FUN_08008ad4",
            "FUN_080009e8",
            "FUN_08005674",
            "FUN_08009630",
            "FUN_08004104",
            "FUN_08000ff4",
            "FUN_08005714",
            "FUN_08005e40",
            "FUN_08005d20",
            "FUN_08001a80",
            "FUN_08005838",
            "FUN_080090a8",
            "FUN_08004e74",
            "FUN_080096e0",
            "FUN_0800910c",
            "FUN_080052a0",
            "FUN_08009120",
            "FUN_08001084",
            "FUN_08005680",
            "FUN_08003260",
            "FUN_08001ab0",
            "FUN_08003540",
            "FUN_08009244",
            "FUN_08004e6c",
            "FUN_08001762",
            "FUN_08009768",
            "FUN_08003ff8",
            "FUN_08004ea4",
            "FUN_080040a0",
            "FUN_08009a18",
            "FUN_0800119c",
            "FUN_08005728",
            "FUN_080090b4",
            "FUN_0800422e",
            "FUN_08003e38",
            "FUN_0800151c",
            "FUN_080006a4",
            "FUN_08000f68",
            "FUN_08009258",
            "FUN_08000c08",
            "FUN_080042de",
            "FUN_08009530",
            "FUN_08002bb4",
            "FUN_08002d3c",
            "FUN_08004bd8",
            "FUN_080090c0",
            "FUN_080091e4",
            "FUN_080009fc",
            "FUN_080093a4",
            "FUN_080098c0",
            "FUN_080027f4",
            "FUN_080003d4",
            "FUN_08004d78",
            "FUN_08000c10",
            "FUN_0800491c",
            "FUN_080078a0",
            "FUN_080057e8"
        ]
    ],
    "locked_functions": []
}