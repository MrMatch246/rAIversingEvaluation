{
    "functions": {
        "FUN_080006b4": {
            "renaming": {
                "FUN_080006b4": "read_data_080006b4",
                "bVar1": "is_overflow",
                "bVar4": "current_byte_index",
                "iVar3": "read_result",
                "param_1": "data",
                "uVar2": "byte_value"
            },
            "code": "int read_data_080006b4(int **data)\n{\n  bool is_overflow = false;\n  undefined byte_value;\n  int data_length = *(byte *)((int)data + 6);\n  if (data_length > 1) {\n    FUN_080041bc(data_length, 0);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    while (true) {\n      int read_result = (**(code **)(**data + 8))();\n      if (read_result == 0) {\n        break;\n      }\n      byte current_byte_index = *(byte *)((int)data + 0x49);\n      byte_value = (**(code **)(**data + 0xc))();\n      *(undefined *)((int)data + current_byte_index + 9) = byte_value;\n      current_byte_index++;\n      *(byte *)((int)data + 0x49) = current_byte_index;\n      if (current_byte_index > 0x3f) {\n        is_overflow = true;\n        break;\n      }\n    }\n  }\n  if (is_overflow) {\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n    return -3;\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  return (int)*(char *)((int)data + 0x49);\n}",
            "called": [
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006b4",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "read_data_080006b4"
        },
        "FUN_080034da": {
            "renaming": {
                "FUN_080034da": "find_value_in_array_080034da",
                "undefined4": "int",
                "param_1": "value_to_find",
                "*param_2": "*array",
                "param_2": "array",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ find_value_in_array_080034da(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_-DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_6DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034da",
            "calling": [
                "FUN_080034f4",
                "FUN_080034da"
            ],
            "imported": true,
            "current_name": "find_value_in_array_080034da"
        },
        "FUN_080035fc": {
            "renaming": {
                "DAT_08003728": "BITFIELD_5",
                "DAT_08003718": "BITFIELD_1",
                "DAT_08003748": "BITFIELD_13",
                "DAT_08003738": "BITFIELD_9",
                "FUN_080035fc": "set_bit_080035fc",
                "DAT_08003720": "BITFIELD_3",
                "DAT_08003740": "BITFIELD_11",
                "param_1": "bitfield",
                "DAT_08003730": "BITFIELD_7",
                "DAT_08003724": "BITFIELD_4",
                "DAT_08003744": "BITFIELD_12",
                "DAT_08003734": "BITFIELD_8",
                "DAT_0800371c": "BITFIELD_2",
                "DAT_0800373c": "BITFIELD_10",
                "DAT_0800372c": "BITFIELD_6"
            },
            "code": "void set_bit_080035fc(uint32_t *bitfield){\n  uint32_t *bitfield_ptr = (uint32_t *)(DAT_0800374c + 0x40);\n  uint32_t *bitfield_ptr2 = (uint32_t *)(DAT_0800374c + 0x44);\n  switch(*bitfield){\n    case DAT_08003718:\n      *bitfield_ptr2 &= 0xfffffffe;\n      break;\n    case 0x40000000:\n      *bitfield_ptr &= 0xfffffffe;\n      break;\n    case DAT_0800371c:\n      *bitfield_ptr &= 0xfffffffd;\n      break;\n    case DAT_08003720:\n      *bitfield_ptr &= 0xfffffffb;\n      break;\n    case DAT_08003724:\n      *bitfield_ptr &= 0xfffffff7;\n      break;\n    case DAT_08003728:\n      *bitfield_ptr &= 0xffffffef;\n      break;\n    case DAT_0800372c:\n      *bitfield_ptr &= 0xffffffdf;\n      break;\n    case DAT_08003730:\n      *bitfield_ptr2 &= 0xfffffffd;\n      break;\n    case DAT_08003734:\n      *bitfield_ptr2 &= 0xfffeffff;\n      break;\n    case DAT_08003738:\n      *bitfield_ptr2 &= 0xfffdffff;\n      break;\n    case DAT_0800373c:\n      *bitfield_ptr2 &= 0xfffbffff;\n      break;\n    case DAT_08003740:\n      *bitfield_ptr &= 0xffffffbf;\n      break;\n    case DAT_08003744:\n      *bitfield_ptr &= 0xffffff7f;\n      break;\n    case DAT_08003748:\n      *bitfield_ptr &= 0xfffffeff;\n      break;\n    default:\n      break;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [
                "FUN_0800340c"
            ],
            "imported": true,
            "current_name": "set_bit_080035fc"
        },
        "FUN_08003dd0": {
            "renaming": {
                "PTR_DAT_08003df0": "record_table",
                "FUN_08003dd0": "is_valid_08003dd0",
                "uVar1": "record_flags",
                "byte": "uint8_t",
                "param_1": "record_index",
                "*(byte *)": "*(uint8_t *)",
                "*(undefined4 *)": "*(uint32_t *)"
            },
            "code": "bool is_valid_08003dd0(int record_index) {\n  uint32_t record_address = PTR_DAT_08003df0 + (*(uint8_t *)(record_index + 0x44) * 4);\n  uint32_t record_flags = FUN_0800312c(*(uint32_t *)record_address);\n  return (record_flags & 0x22) == 0x22;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003dd0",
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "imported": true,
            "current_name": "is_valid_08003dd0"
        },
        "FUN_08000c8c": {
            "renaming": {
                "local_50": "arg2",
                "FUN_08001f9c": "function2",
                "FUN_08000c8c": "set_flags_and_call_functions_08000c8c",
                "FUN_08002488": "function3",
                "FUN_08000ee0": "function5",
                "local_1c": "arg11",
                "local_2c": "arg7",
                "FUN_08000f2c": "function6",
                "local_3c": "arg3",
                "local_18": "arg12",
                "local_28": "arg8",
                "local_38": "arg4",
                "FUN_080025e0": "function4",
                "FUN_08000e60": "function7",
                "local_54": "arg1",
                "DAT_08000d30": "flag1_ptr",
                "local_20": "arg10",
                "local_30": "arg6",
                "FUN_0800201c": "function1",
                "local_14": "arg13",
                "DAT_08000d34": "flag2_ptr",
                "local_24": "arg9",
                "local_34": "arg5"
            },
            "code": "void set_flags_and_call_functions_08000c8c(void)\n{\n  uint result;\n  uint *flag_ptr = (uint *)(DAT_08000d30 + 0x40);\n  uint *DAT_08000d34 = (uint *)(DAT_08000d34);\n  *flag_ptr |= 0x10000000;\n  *DAT_08000d34 |= 0xc000;\n  int arg1 = 1;\n  int arg2 = 0x50000;\n  int arg3 = 2;\n  int arg4 = 0x400000;\n  int arg5 = 8;\n  int arg6 = 0x150;\n  int arg7 = 2;\n  int arg8 = 7;\n  FUNC_0800201c(&arg1);\n  FUN_08001f9c();\n  int arg9 = 0xf;\n  int arg10 = 2;\n  int arg11 = 0;\n  int arg12 = 0x1400;\n  int arg13 = 0x1000;\n  FUN_08002488(&arg9,5);\n  result = FUN_080025e0();\n  FUN_08000ee0((uint)((ulonglong)DAT_08000d38 * (ulonglong)result >> 0x26));\n  FUN_08000f2c(4);\n  FUN_08000e60(0xffffffff,0,0);\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08002488",
                "FUN_08001f9c",
                "FUN_08000f2c",
                "FUN_080025e0",
                "FUN_08000ee0",
                "FUN_0800201c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c8c",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": true,
            "current_name": "set_flags_and_call_functions_08000c8c"
        },
        "FUN_08000a4e": {
            "renaming": {
                "*(undefined *)(param_1 + 0x49)": "*(uint8_t *)(data_addr + 0x49)",
                "bVar1": "index",
                "*(undefined *)(param_1 + 0xb)": "*(uint8_t *)(data_addr + 0xb)",
                "FUN_08004640": "get_index",
                "FUN_08000a4e": "get_value_and_set_flag_08000a4e",
                "param_1": "data_addr",
                "*(undefined2 *)(param_2 + (uint)bVar1 * 2)": "*(uint16_t *)(result_addr + index * 2)",
                "param_2": "result_addr",
                "uVar2": "value",
                "*(undefined *)(param_1 + 0xc)": "*(uint8_t *)(data_addr + 0xc)",
                "*(undefined *)(param_1 + 0xd)": "*(uint8_t *)(data_addr + 0xd)",
                "FUN_0800076c": "update_data",
                "*(undefined *)(param_1 + 0xe)": "*(uint8_t *)(data_addr + 0xe)"
            },
            "code": "uint8_t get_value_and_set_flag_08000a4e(int data_addr, int result_addr) {\n  uint8_t index = get_index(*(uint8_t *)(data_addr + 0xb), *(uint8_t *)(data_addr + 0xc));\n  uint16_t value = get_value(*(uint8_t *)(data_addr + 0xd), *(uint8_t *)(data_addr + 0xe));\n  *(uint16_t *)(result_addr + index * 2) = value;\n  *(uint8_t *)(data_addr + 0x49) = 6;\n  update_data(data_addr);\n  return 8;\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a4e",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "get_value_and_set_flag_08000a4e"
        },
        "FUN_08004658": {
            "renaming": {
                "FUN_08000c4c": "initialize",
                "FUN_08004658": "perform_task_08004658",
                "FUN_08004338": "finalize_task",
                "DAT_08004674": "data_flag",
                "FUN_08000c64": "perform_action"
            },
            "code": "void perform_task_08004658(void)\n{\n  do_nothing();\n  initialize();\n  do {\n    do {\n      perform_action();\n    } while (DAT_08004674 == 0);\n    finalize_task();\n  } while(true);\n}",
            "called": [
                "FUN_08004646",
                "FUN_08000c4c",
                "FUN_08004338",
                "FUN_08000c64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004658",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": true,
            "current_name": "perform_task_08004658"
        },
        "FUN_080034f4": {
            "renaming": {
                "FUN_080034da": "get_value_from_database",
                "uVar1": "return_value",
                "param_1": "input_value",
                "FUN_080034f4": "check_for_valid_input_080034f4"
            },
            "code": "int check_for_valid_input_080034f4(int input_value) {\n  int return_value;\n  if (input_value != -1) {\n    return_value = get_value_from_database();\n    return return_value;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034f4",
            "calling": [
                "FUN_080033d8",
                "FUN_08003414",
                "FUN_08003978",
                "FUN_08003d18",
                "FUN_08003cc8"
            ],
            "imported": true,
            "current_name": "check_for_valid_input_080034f4"
        },
        "FUN_0800355e": {
            "renaming": {
                "param_1": "value",
                "param_2": "array",
                "FUN_0800355e": "find_value_in_array_0800355e"
            },
            "code": "int find_value_in_array_0800355e(int value, short *array)\n{\n  if (value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value == *array) break;\n    array = array + 6;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800355e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": true,
            "current_name": "find_value_in_array_0800355e"
        },
        "FUN_0800573c": {
            "renaming": {
                "iVar2": "result_code",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "result_ptr",
                "FUN_0800573c": "process_result_0800573c"
            },
            "code": "void process_result_0800573c(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n  undefined *result_ptr = PTR_DAT_0800575c;\n  *(undefined4 *)result_ptr = 0;\n  int result_code = execute_task(param_2, param_3, param_4, param_4, param_4);\n  if ((result_code == -1) && (*(int *)result_ptr != 0)) {\n    *result = *(int *)result_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_08005608"
            ],
            "imported": true,
            "current_name": "process_result_0800573c"
        },
        "FUN_080056d4": {
            "renaming": {
                "iVar2": "func_result",
                "param_1": "result",
                "param_2": "param_1",
                "param_3": "param_2",
                "param_4": "param_3",
                "puVar1": "ptr_data",
                "FUN_080056d4": "execute_function_with_param_080056d4"
            },
            "code": "void execute_function_with_param_080056d4(int *result, undefined4 param_1, undefined4 param_2, undefined4 param_3){\n  undefined *ptr_data = PTR_DAT_080056f4;\n  *(undefined4 *)PTR_DAT_080056f4 = 0;\n  int func_result = call_another_function(param_1,param_2,param_3,0,param_3);\n  if ((func_result == -1) && (*(int *)ptr_data != 0)) {\n    *result = *(int *)ptr_data;\n  }\n  return;\n}",
            "called": [
                "FUN_080040d6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [
                "FUN_080054b4"
            ],
            "imported": true,
            "current_name": "execute_function_with_param_080056d4"
        },
        "FUN_08004fdc": {
            "renaming": {
                "PTR_PTR_DAT_08005008": "PTR_PTR_DAT_08005008",
                "iVar1": "var1",
                "uStack_8": "param3",
                "param_1": "param1",
                "uStack_4": "param4",
                "uStack_c": "param2",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "FUN_080053a0": "cleanup_function",
                "uVar2": "param1",
                "FUN_08004fdc": "execute_function_08004fdc",
                "FUNC_08004a84": "execute_subfunction"
            },
            "code": "void execute_function_08004fdc(int param1, int param2, int param3, int param4)\n{\n  int var1 = *(int *)PTR_PTR_DAT_08005008;\n  if ((var1 != 0) && (*(int *)(var1 + 0x18) == 0)) {\n    cleanup_function(var1);\n  }\n  execute_subfunction(var1, *(int *)(var1 + 8), param1, &param2, param1, &param2);\n  return;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fdc",
            "calling": [
                "FUN_08003978"
            ],
            "imported": true,
            "current_name": "execute_function_08004fdc"
        },
        "FUN_08003e54": {
            "renaming": {
                "*(undefined4 *)(PTR_DAT_08003ea0 + uVar2 * 4)": "*(int *)(PTR_DAT_08003ea0 + data_index * 4)",
                "*(char *)(param_1 + 0x5c)": "*(char *)(data_ptr + 0x5c)",
                "iVar1": "result",
                "param_1": "data_ptr",
                "*(byte *)(param_1 + 0x44)": "*(byte *)(data_ptr + 0x44)",
                "FUN_08000ec4": "process_data_type_cleanup",
                "param_2": "data_value",
                "FUN_08002efa": "process_data_type_conversion",
                "param_3": "data_length",
                "param_4": "data_flag",
                "FUN_08000e60": "process_data_type",
                "uVar2": "data_index",
                "FUN_08003e54": "process_data_08003e54",
                "*(int *)(PTR_DAT_08003ea4 + uVar2 * 4)": "*(int *)(PTR_DAT_08003ea4 + data_index * 4)"
            },
            "code": "void process_data_08003e54(int data_ptr, int data_value, int data_length, int data_flag) {\n  int result = FUN_08003dd0();\n  if (data_ptr != 0 && result == 0) {\n    uint data_index = (uint)*(byte *)(data_ptr + 0x44);\n    *(int *)(PTR_DAT_08003ea4 + uVar2 * 4) = data_ptr;\n    *(undefined4 *)(PTR_DAT_08003ea0 + uVar2 * 4) = data_value;\n    int data_type = (int)*(char *)(data_ptr + 0x5c);\n    FUN_08000e60(data_type, 0, 1, data_index, data_flag);\n    FUN_08000ec4(data_type);\n    FUN_08002efa(*(int *)(PTR_DAT_08003ea8 + data_index * 4), data_ptr + 0x45, 1);\n  }\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08000ec4",
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e54",
            "calling": [
                "FUN_08004388"
            ],
            "imported": true,
            "current_name": "process_data_08003e54"
        },
        "thunk_FUN_0800410c": {
            "renaming": {
                "thunk_FUN_0800410c": "get_one_thunk_0800410c"
            },
            "code": "int get_one_thunk_0800410c() {\n  return 1;\n}",
            "called": [
                "FUN_0800410c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": true,
            "current_name": "get_one_thunk_0800410c"
        },
        "FUN_080033d8": {
            "renaming": {
                "FUN_08003380": "check_status",
                "param_1": "input_data",
                "local_1c": "result",
                "PTR_DAT_08003408": "DATA_ARRAY",
                "FUN_080034f4": "calculate_result",
                "FUN_08000f72": "free_memory",
                "FUN_080033d8": "process_data_and_print_080033d8",
                "FUN_08000f56": "print_result"
            },
            "code": "void process_data_and_print_080033d8(int input_data)\n{\n  int result = calculate_result(input_data, PTR_DAT_08003408);\n  if ((result != 0) && ((status = check_status(input_data), status == 0 || (status == 0x10)))) {\n    print_result(result);\n    free_memory(result);\n  }\n  return;\n}",
            "called": [
                "FUN_08000f72",
                "FUN_08000f56",
                "FUN_080034f4",
                "FUN_08003380"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033d8",
            "calling": [
                "FUN_08004110"
            ],
            "imported": true,
            "current_name": "process_data_and_print_080033d8"
        },
        "FUN_080029c8": {
            "renaming": {
                "FUN_080029c8": "FUNC_080029c8"
            },
            "code": "\nvoid FUNC_080029c8(int *param_1)\n\n{\n  ulonglong uVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  \n  *(uint *)(*param_1 + 0x10) = *(uint *)(*param_1 + 0x10) & 0xffffcfff | param_1[3];\n  *(uint *)(*param_1 + 0xc) =\n       *(uint *)(*param_1 + 0xc) & 0xffff69f3 | param_1[2] | param_1[4] | param_1[5] | param_1[7];\n  *(uint *)(*param_1 + 0x14) = *(uint *)(*param_1 + 0x14) & 0xfffffcff | param_1[6];\n  if (param_1[7] == 0x8000) {\n    iVar12 = *param_1;\n    if ((iVar12 != 0x40011000) && (iVar12 != 0x40011400)) {\n      iVar3 = FUN_080025ec();\n      uVar2 = DAT_08002d08;\n      iVar8 = param_1[1];\n      uVar1 = (ulonglong)DAT_08002d08;\n      iVar4 = FUN_080025ec();\n      iVar9 = param_1[1];\n      iVar5 = FUN_080025ec();\n      iVar10 = param_1[1];\n      iVar6 = FUN_080025ec();\n      iVar11 = param_1[1];\n      iVar7 = FUN_080025ec();\n      *(uint *)(iVar12 + 8) =\n           ((uint)((int)((ulonglong)uVar2 *\n                         (ulonglong)\n                         (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                          (uint)((ulonglong)uVar2 *\n                                 ((ulonglong)(uint)(iVar7 * 0x19) /\n                                 (ulonglong)(uint)(param_1[1] << 1)) >> 0x25) * -100) * 8 + 0x32) >>\n                        0x20) << 0x18) >> 0x1d) +\n           ((uint)((ulonglong)uVar2 *\n                   (ulonglong)\n                   (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                    (uint)((ulonglong)uVar2 *\n                           ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >>\n                          0x25) * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n           (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25)\n           * 0x10;\n      return;\n    }\n    iVar3 = FUN_0800260c();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = FUN_0800260c();\n    iVar9 = param_1[1];\n    iVar5 = FUN_0800260c();\n    iVar10 = param_1[1];\n    iVar6 = FUN_0800260c();\n    iVar11 = param_1[1];\n    iVar7 = FUN_0800260c();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 1)\n                               ) >> 0x25) * -100) * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >> 0x25)\n                  * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar12 = *param_1;\n  if ((iVar12 != DAT_08002d04) && (iVar12 != DAT_08002d04 + 0x400)) {\n    iVar3 = FUN_080025ec();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = FUN_080025ec();\n    iVar9 = param_1[1];\n    iVar5 = FUN_080025ec();\n    iVar10 = param_1[1];\n    iVar6 = FUN_080025ec();\n    iVar11 = param_1[1];\n    iVar7 = FUN_080025ec();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)\n                               ) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25)\n                  * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar3 = FUN_0800260c();\n  uVar2 = DAT_08002d08;\n  iVar8 = param_1[1];\n  uVar1 = (ulonglong)DAT_08002d08;\n  iVar4 = FUN_0800260c();\n  iVar9 = param_1[1];\n  iVar5 = FUN_0800260c();\n  iVar10 = param_1[1];\n  iVar6 = FUN_0800260c();\n  iVar11 = param_1[1];\n  iVar7 = FUN_0800260c();\n  *(uint *)(iVar12 + 8) =\n       ((uint)((int)((ulonglong)uVar2 *\n                     (ulonglong)\n                     (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                      (uint)((ulonglong)uVar2 *\n                             ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2))\n                            >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n       ((uint)((ulonglong)uVar2 *\n               (ulonglong)\n               (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                (uint)((ulonglong)uVar2 *\n                       ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25) *\n                -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n       (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n       0x10;\n  return;\n}\n\n",
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080029c8",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": true,
            "current_name": "FUNC_080029c8"
        },
        "FUN_08002488": {
            "renaming": {
                "iVar2": "start_time",
                "iVar3": "current_time",
                "FUN_08002488": "validate_input_and_update_08002488",
                "param_1": "input_values",
                "control_value": "control_value",
                "param_2": "input_count",
                "puVar1": "control_values",
                "uVar4": "result",
                "input_value_1": "input_value_1"
            },
            "code": "int validate_input_and_update_08002488(uint *input_values, uint input_count) {\n  uint *control_values = DAT_080025d0;\n  if (input_values == NULL) {\n    return 1;\n  }\n  uint control_value = *control_values & 0xf;\n  if (control_value < input_count) {\n    *(char *)control_values = (char)input_count;\n    if (input_count != (control_value & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*input_values & 2) != 0) {\n    if ((*input_values & 4) != 0) {\n      DAT_080025d4[2] |= 0x1c00;\n    }\n    if ((*input_values & 8) != 0) {\n      DAT_080025d4[2] |= 0xe000;\n    }\n    DAT_080025d4[2] = (DAT_080025d4[2] & 0xffffff0f) | input_values[2];\n  }\n  if ((*input_values & 1) != 0) {\n    uint input_value_1 = input_values[1];\n    if (input_value_1 == 1) {\n      if ((*DAT_080025d4 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (input_value_1 - 2 < 2) {\n      if ((*DAT_080025d4 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((*DAT_080025d4 & 2) == 0) {\n      return 1;\n    }\n    DAT_080025d4[2] = input_value_1 | (DAT_080025d4[2] & 0xfffffffc);\n    int start_time = FUN_08000e30();\n    while ((DAT_080025d4[2] & 0xc) != (input_values[1] * 4)) {\n      int current_time = FUN_08000e30();\n      if (5000 < (uint)(current_time - start_time)) {\n        return 3;\n      }\n    }\n  }\n  control_value = *control_values & 0xf;\n  if (input_count < control_value) {\n    *(char *)control_values = (char)input_count;\n    if (input_count != (control_value & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*input_values & 4) != 0) {\n    DAT_080025d4[2] = (DAT_080025d4[2] & 0xffffe3ff) | input_values[3];\n  }\n  if ((*input_values & 8) != 0) {\n    DAT_080025d4[2] = (DAT_080025d4[2] & 0xffff1fff) | (input_values[4] << 3);\n  }\n  uint result = FUN_080023b4();\n  *(uint *)PTR_DAT_080025dc = result >> PTR_DAT_080025d8[(DAT_080025d4[2] << 0x18) >> 0x1c];\n  FUN_08000d98(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_080023b4",
                "FUN_08000d98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002488",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": true,
            "current_name": "validate_input_and_update_08002488"
        },
        "FUN_08004544": {
            "renaming": {
                "FUN_08004544": "initialize_parameters_08004544",
                "param_1": "param_array",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "param_5": "parameter_5"
            },
            "code": "void initialize_parameters_08004544(undefined4 *param_array, undefined param_2, undefined param_3, undefined param_4, undefined param_5)\n{\n  *param_array = PTR_PTR_LAB_0800450a_1_0800455c;\n  *(undefined *)(param_array + 1) = param_2;\n  *(undefined *)((int)param_array + 5) = param_3;\n  *(undefined *)((int)param_array + 6) = param_4;\n  *(undefined *)((int)param_array + 7) = param_5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004544",
            "calling": [
                "FUN_08004560"
            ],
            "imported": true,
            "current_name": "initialize_parameters_08004544"
        },
        "FUN_08003cc8": {
            "renaming": {
                "sVar1": "data_value",
                "PTR_DAT_08003d08": "data_pointer_1",
                "iVar4": "result",
                "puVar2": "data_ptr",
                "PTR_DAT_08003d10": "data_pointer_3",
                "PTR_DAT_08003d14": "data_pointer_4",
                "FUN_08003cc8": "process_data_08003cc8",
                "uVar3": "converted_value",
                "uVar5": "temp_value",
                "FUNC_08003978": "execute_function",
                "PTR_DAT_08003d0c": "data_pointer_2"
            },
            "code": "void process_data_08003cc8(void)\n{\n  short data_value;\n  undefined *data_ptr;\n  undefined2 converted_value;\n  int result;\n  undefined4 temp_value;\n  \n  data_value = *(short *)(PTR_DAT_08003d08 + 0x9a);\n  result = find_data_value((int)data_value,PTR_DAT_08003d0c);\n  if (result != 0) {\n    temp_value = find_data_value((int)data_value,PTR_DAT_08003d0c);\n    converted_value = convert_data(temp_value,PTR_DAT_08003d10);\n    data_ptr = PTR_DAT_08003d14;\n    *(undefined2 *)(PTR_DAT_08003d14 + 0x5a) = converted_value;\n    *(short *)(data_ptr + 0x58) = data_value;\n    *(undefined4 *)(data_ptr + 0x48) = 0x2580;\n    *(undefined4 *)(data_ptr + 0x54) = 0;\n    *(undefined4 *)(data_ptr + 0x4c) = 0;\n    *(undefined4 *)(data_ptr + 0x50) = 0;\n    execute_function(data_ptr);\n  }\n  return;\n}",
            "called": [
                "FUN_080034f4",
                "FUN_08003978",
                "FUN_0800351e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003cc8",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": true,
            "current_name": "process_data_08003cc8"
        },
        "FUN_08000fb4": {
            "renaming": {
                "puVar2": "mask_ptr",
                "iVar8": "data_index",
                "param_1": "data",
                "iVar10": "mask_index",
                "FUN_08000fb4": "update_data_08000fb4",
                "param_2": "mask",
                "puVar1": "data_ptr",
                "uVar3": "bit_value",
                "uVar5": "bit_index",
                "uVar4": "data_mask",
                "uVar7": "data_flag",
                "uVar6": "bit_flag",
                "uVar9": "data_value"
            },
            "code": "void update_data_08000fb4(uint *data, uint *mask) {\n  uint *data_ptr;\n  uint *mask_ptr;\n  uint bit_mask;\n  uint bit_flag;\n  uint bit_index;\n  uint bit_value;\n  uint data_value;\n  uint data_mask;\n  uint data_flag;\n  int data_index;\n  int mask_index;\n  for (bit_index = 0; bit_index < 16; bit_index++) {\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_flag = bit_mask & *mask;\n    if (bit_mask == bit_flag) {\n      if ((mask[1] == 2) || (mask[1] == 0x12)) {\n        data_index = (bit_index >> 3) + 8;\n        mask_index = (bit_index & 7) << 2;\n        data[data_index] = data[data_index] & ~(0xf << mask_index) | mask[4] << mask_index;\n      }\n      data_value = ~(3 << (bit_index << 1 & 0xff));\n      data[data_index] = data[data_index] & data_value | (mask[1] & 3) << (bit_index << 1 & 0xff);\n      data_flag = mask[1];\n      if (((data_flag - 1 < 2) || (data_flag == 0x11)) || (data_flag == 0x12)) {\n        data[2] = data[2] & data_value | mask[3] << (bit_index << 1 & 0xff);\n        data[1] = data[1] & ~bit_mask | ((mask[1] << 0x1b) >> 0x1f) << (bit_index & 0xff);\n      }\n      data[3] = data_value & data[3] | mask[2] << (bit_index << 1 & 0xff);\n      if ((mask[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_0800118c + 0x44) = *(uint *)(PTR_DAT_0800118c + 0x44) | 0x4000;\n        mask_index = (bit_index & 3) << 2;\n        if (data == PTR_DAT_08001190) {\n          data_index = 0;\n        }\n        else if (data == PTR_DAT_08001194) {\n          data_index = 1;\n        }\n        else if (data == PTR_DAT_08001194 + 0x100) {\n          data_index = 2;\n        }\n        else if (data == PTR_DAT_08001194 + 0x200) {\n          data_index = 3;\n        }\n        else if (data == PTR_DAT_08001194 + 0x300) {\n          data_index = 4;\n        }\n        else if (data == PTR_DAT_08001194 + 0x400) {\n          data_index = 5;\n        }\n        else if (data == PTR_DAT_08001194 + 0x500) {\n          data_index = 6;\n        }\n        else if (data == PTR_DAT_08001194 + 0x600) {\n          data_index = 7;\n        }\n        else if (data == PTR_DAT_08001194 + 0x700) {\n          data_index = 8;\n        }\n        else if (data == PTR_DAT_08001194 + 0x800) {\n          data_index = 9;\n        }\n        else {\n          data_index = 10;\n        }\n        *(uint *)(PTR_DAT_08001184 + ((bit_index >> 2) + 2) * 4) = *(uint *)(PTR_DAT_08001184 + ((bit_index >> 2) + 2) * 4) & ~(0xf << mask_index) | data_index << mask_index;\n        data_ptr = PTR_DAT_08001188;\n        data_mask = ~bit_flag;\n        data_value = *PTR_DAT_08001188 & data_mask;\n        if ((mask[1] & 0x10000) != 0) {\n          data_value = bit_flag | *PTR_DAT_08001188;\n        }\n        *PTR_DAT_08001188 = data_value;\n        mask_ptr = PTR_DAT_08001188;\n        data_value = data_mask & data_ptr[1];\n        if ((mask[1] & 0x20000) != 0) {\n          data_value = bit_flag | data_ptr[1];\n        }\n        PTR_DAT_08001188[1] = data_value;\n        data_ptr = PTR_DAT_08001188;\n        data_value = data_mask & mask_ptr[2];\n        if ((mask[1] & 0x100000) != 0) {\n          data_value = bit_flag | mask_ptr[2];\n        }\n        PTR_DAT_08001188[2] = data_value;\n        data_mask = data_mask & data_ptr[3];\n        if ((mask[1] & 0x200000) != 0) {\n          data_mask = bit_flag | data_ptr[3];\n        }\n        PTR_DAT_08001188[3] = data_mask;\n      }\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fb4",
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "imported": true,
            "current_name": "update_data_08000fb4"
        },
        "FUN_08002d70": {
            "renaming": {
                "FUN_08002d70": "do_nothing_08002d70"
            },
            "code": "\nvoid do_nothing_08002d70(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d70",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": true,
            "current_name": "do_nothing_08002d70"
        },
        "FUN_08001bfc": {
            "renaming": {
                "puVar2": "ptr_input",
                "puVar3": "ptr_input_9",
                "param_1": "input",
                "FUN_08001bfc": "process_input_08001bfc",
                "cVar1": "current_char"
            },
            "code": "uint32_t process_input_08001bfc(uint32_t **input)\n{\n  char current_char = *(char *)((int)input + 0x3d);\n  (*input)[1] &= 0xfffff8ff;\n  **input |= 1;\n  **input &= 0xfffffbff;\n  uint32_t *ptr_input = *input;\n  if ((ptr_input[1] & 0x800) != 0) {\n    if ((current_char == '\"') || (current_char == '*')) {\n      *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(*input[0xe] + 4);\n    }\n    else {\n      *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(*input[0xd] + 4);\n    }\n  }\n  if (*(int16_t *)((int)input + 0x2a) != 0) {\n    if ((ptr_input[5] & 4) != 0) {\n      uint32_t *ptr_input_9 = input[9];\n      input[9] = (uint32_t *)((int)ptr_input_9 + 1);\n      *(char *)ptr_input_9 = (char)ptr_input[4];\n      *(int16_t *)((int)input + 0x2a) -= 1;\n    }\n    if (((*input)[5] & 0x40) != 0) {\n      ptr_input = input[9];\n      input[9] = (uint32_t *)((int)ptr_input + 1);\n      *(char *)ptr_input = (char)(*input)[4];\n      *(int16_t *)((int)input + 0x2a) -= 1;\n    }\n    input[0x10] = (uint32_t *)((uint32_t)input[0x10] | 4);\n  }\n  if (input[0x10] == (uint32_t *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      input[0xb] = PTR_DAT_08001cfc;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      do_something_1();\n    }\n    else if ((input[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      do_something_2();\n    }\n  }\n  else {\n    do_something_3();\n  }\n  return 0;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_08001ab0",
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bfc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "process_input_08001bfc"
        },
        "FUN_08001718": {
            "renaming": {
                "FUN_08001718": "do_nothing_08001718"
            },
            "code": "\nvoid do_nothing_08001718(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001718",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": true,
            "current_name": "do_nothing_08001718"
        },
        "FUN_08002d72": {
            "renaming": {
                "do_nothing_08002d70": "do_nothing",
                "param_1": "param_array",
                "FUN_08002d72": "set_flags_and_values_08002d72"
            },
            "code": "int set_flags_and_values_08002d72(int *param_array) {\\n  if (param_array != NULL) {\\n    if (*(char *)((int)param_array + 0x39) == \"\\0\") {\\n      *(undefined *)(param_array + 0xe) = 0;\\n      do_nothing();\\n    }\\n    *(undefined *)((int)param_array + 0x39) = 0x24;\\n    *(uint *)(*param_array + 0xc) &= 0xffffdfff;\\n    FUNC_080029c8(param_array);\\n    *(uint *)(*param_array + 0x10) &= 0xffffb7ff;\\n    *(uint *)(*param_array + 0x14) &= 0xffffffd5;\\n    *(uint *)(*param_array + 0xc) |= 0x2000;\\n    param_array[0xf] = 0;\\n    *(undefined *)((int)param_array + 0x39) = 0x20;\\n    *(undefined *)((int)param_array + 0x3a) = 0x20;\\n    return 0;\\n  }\\n  return 1;\\n}",
            "called": [
                "FUN_08002d70",
                "FUN_080029c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d72",
            "calling": [
                "FUN_08003978"
            ],
            "imported": true,
            "current_name": "set_flags_and_values_08002d72"
        },
        "FUN_080007f0": {
            "renaming": {
                "bVar2": "byte_value",
                "bVar1": "found_flag",
                "iVar5": "i",
                "iVar7": "index",
                "param_1": "data",
                "cVar4": "byte_result",
                "param_2": "flag",
                "cVar3": "result",
                "param_3": "value",
                "param_4": "index",
                "FUN_080007f0": "check_values_080007f0",
                "uVar6": "loop_counter"
            },
            "code": "uint8_t check_values_080007f0(int data, uint8_t flag, uint32_t value, int index) {\n  bool found_flag;\n  uint8_t byte_value;\n  int8_t result;\n  uint8_t* ptr_data = (uint8_t*) data;\n  uint8_t* ptr_flag = (uint8_t*) &flag;\n  uint8_t* ptr_value = (uint8_t*) &value;\n\n  for (int i = 0; i < 8; i++) {\n    if (i > index) {\n      found_flag = false;\n      break;\n    }\n    uint8_t current_flag = ptr_flag[i];\n    if (current_flag == ptr_data[i]) {\n      found_flag = true;\n    }\n  }\n\n  if (!found_flag) {\n    *(short *)(data + 0x54) = *(short *)(data + 0x54) + 1;\n    return 1;\n  }\n\n  index = *(uint8_t *)(data + 10) - 1;\n  switch(*(uint8_t *)(data + 10)) {\n    case 1:\n    case 2:\n    case 0xf:\n      goto case_1_2_15;\n    case 3:\n    case 4:\n    case 0x10:\n      result = call_function(*(uint8_t *)(data + 0xb), *(uint8_t *)(data + 0xc), value, index, flag);\n      byte_value = call_function(*(uint8_t *)(data + 0xd), *(uint8_t *)(data + 0xe));\n      if (*(uint8_t *)(data + 0x60) < (byte)(byte_value + result)) {\n        return 2;\n      }\n      return 0;\n    case 5:\n      result = call_function(*(uint8_t *)(data + 0xb), *(uint8_t *)(data + 0xc), value, index, flag);\n      if (*(uint8_t *)(data + 0x60) < (uint8_t)((result << 0x14) >> 0x18)) {\n        return 2;\n      }\n      return 0;\n    case 6:\n      byte_value = call_function(*(uint8_t *)(data + 0xb), *(uint8_t *)(data + 0xc), value, index, flag);\n      if (*(uint8_t *)(data + 0x60) < byte_value) {\n        return 2;\n      }\n      return 0;\n    default:\n      return 0;\n  }\n\ncase_1_2_15:\n  result = call_function(*(uint8_t *)(data + 0xb), *(uint8_t *)(data + 0xc), value, index, flag);\n  byte_value = call_function(*(uint8_t *)(data + 0xd), *(uint8_t *)(data + 0xe));\n  if (*(uint8_t *)(data + 0x60) < (((uint8_t)((result << 0xc) >> 0x10)) + ((uint8_t)((byte_value << 0xc) >> 0x10)) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080007f0",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "check_values_080007f0"
        },
        "FUN_0800562a": {
            "renaming": {
                "sVar1": "data",
                "iVar3": "result",
                "puVar2": "unused_variable4",
                "PTR_DAT_080056b0": "PTR_DAT",
                "param_1": "output",
                "unaff_r5": "unused_variable6",
                "unaff_r4": "unused_variable5",
                "param_2": "input_ptr",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "FUN_0800562a": "process_data_0800562a",
                "in_lr": "unused_variable7"
            },
            "code": "void process_data_0800562a(int *output, int input_ptr, int unused_param1, int unused_param2) {\n  short data = *(short *)(input_ptr + 0xe);\n  *(ushort *)(input_ptr + 0xc) &= 0xefff;\n  if ((int)((uint)*(ushort *)(input_ptr + 0xc) << 0x17) < 0) {\n    set_data(output, data, 0, 2);\n  }\n  else {\n    undefined4 unused_variable1 = 0;\n    undefined4 unused_variable2 = 0;\n    undefined4 unused_variable3 = 0;\n    int result = calculate_data(data, unused_param1, unused_param2, unused_variable1, unused_variable2, unused_variable3);\n    if (result == -1 && (*PTR_DAT_080056b0_080056b0 != 0)) {\n      *output = *PTR_DAT_080056b0_080056b0;\n    }\n  }\n}",
            "called": [
                "FUN_08005718",
                "FUN_080040ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800562a",
            "calling": [],
            "imported": true,
            "current_name": "process_data_0800562a"
        },
        "FUN_080044d8": {
            "renaming": {
                "DAT_080044f4": "message_data",
                "param_1": "param1",
                "PTR_DAT_080044f8": "PTR_message_data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "FUN_0800447c": "print_error_message",
                "FUN_080044d8": "print_error_message_if_param1_is_one_and_param2_is_ffff_080044d8"
            },
            "code": "void print_error_message_if_param1_is_one_and_param2_is_ffff_080044d8(int param1, int param2, undefined4 param3, undefined4 param4) {\n  if (param1 == 1) {\n    if (param2 == 0xffff) {\n      print_error_message(PTR_DAT_080044f8, DAT_080044f4, param3, 0xffff, param4);\n    }\n  }\n}",
            "called": [
                "FUN_0800447c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044d8",
            "calling": [],
            "imported": true,
            "current_name": "print_error_message_if_param1_is_one_and_param2_is_ffff_080044d8"
        },
        "FUN_08005400": {
            "renaming": {
                "FUN_08005400": "find_and_initialize_08005400",
                "iVar3": "current_ptr",
                "piVar2": "current_ptr_2",
                "param_1": "result",
                "piVar1": "current_ptr_1",
                "FUN_080048cc": "set_memory",
                "param_2": "size_of_result",
                "param_3": "error_code",
                "param_4": "unknown_parameter",
                "FUN_080053a0": "initialize",
                "PTR_PTR_DAT_08005474": "pointer_to_pointer_to_data_08005474",
                "short": "unsigned_short",
                "ppiVar4": "next_ptr_ptr"
            },
            "code": "int* find_and_initialize_08005400(int* result, int size_of_result, int* error_code, int unknown_parameter) {\n  int* current_ptr = *(int**)0x08005474;\n  if (*(int*)(current_ptr + 0x18) == 0) {\n    initialize(current_ptr);\n  }\n  int** next_ptr_ptr = (int**)(current_ptr + 0x48);\n  while (true) {\n    int* current_ptr_2 = next_ptr_ptr[2];\n    int* current_ptr_1 = next_ptr_ptr[1];\n    while (current_ptr_1 = (int*)((int)current_ptr_1 - 1), -1 < (int)current_ptr_1) {\n      if (*(short*)(current_ptr_2 + 3) == 0) {\n        *(unsigned short*)((int)current_ptr_2 + 0xe) = 0xffff;\n        *(unsigned short*)(current_ptr_2 + 3) = 1;\n        current_ptr_2[0x19] = 0;\n        *current_ptr_2 = 0;\n        current_ptr_2[2] = 0;\n        current_ptr_2[1] = 0;\n        current_ptr_2[4] = 0;\n        current_ptr_2[5] = 0;\n        current_ptr_2[6] = 0;\n        set_memory(current_ptr_2 + 0x17, 0, 8, 1, unknown_parameter);\n        current_ptr_2[0xd] = 0;\n        current_ptr_2[0xe] = 0;\n        current_ptr_2[0x12] = 0;\n        current_ptr_2[0x13] = 0;\n        return current_ptr_2;\n      }\n      current_ptr_2 += 0x1a;\n    }\n    if (*next_ptr_ptr == (int*)0x0) {\n      int* new_ptr = allocate_memory(result, size_of_result);\n      *next_ptr_ptr = new_ptr;\n      if (new_ptr == (int*)0x0) {\n        *error_code = 0xc;\n        return (int*)0x0;\n      }\n    }\n    next_ptr_ptr = (int**)*next_ptr_ptr;\n  }\n}",
            "called": [
                "FUN_08005374",
                "FUN_080053a0",
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005400",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": true,
            "current_name": "find_and_initialize_08005400"
        },
        "FUN_08003df4": {
            "renaming": {
                "FUN_08003df4": "is_valid_08003df4",
                "uVar1": "result",
                "param_1": "data"
            },
            "code": "bool is_valid_08003df4(uint8_t *data) {\n  uint32_t ptr = *(uint32_t *)(PTR_DAT_08003e14 + data[0x44] * 4);\n  uint32_t result = FUN_0800312c(ptr);\n  return (result & 0x21) == 0x21;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003df4",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": true,
            "current_name": "is_valid_08003df4"
        },
        "FUN_08003582": {
            "renaming": {
                "FUN_08003582": "compare_and_return_08003582",
                "param_1": "first_value",
                "param_2": "second_value"
            },
            "code": "int compare_and_return_08003582(int first_value, int second_value) {\n  if (first_value != second_value) {\n    if (first_value == 0) {\n      return second_value;\n    }\n    if (second_value == 0) {\n      return first_value;\n    }\n    first_value = 0;\n  }\n  return first_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003582",
            "calling": [
                "FUN_08003978"
            ],
            "imported": true,
            "current_name": "compare_and_return_08003582"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_080051ac": "execute_function_1",
                "FUN_08005760": "execute_jumptable_08005760",
                "set_flag_if_negative": "set_flag_if_value_is_negative",
                "PTR_DAT_0800580c": "flag_ptr_5",
                "PTR_DAT_0800581c": "flag_ptr_9",
                "UNRECOVERED_JUMPTABLE": "jumptable_ptr",
                "PTR_DAT_08005804": "flag_ptr_3",
                "PTR_DAT_08005818": "flag_ptr_8",
                "PTR_DAT_08005828": "flag_ptr_12",
                "PTR_DAT_08005808": "flag_ptr_4",
                "PTR_DAT_080057fc": "flag_ptr_1",
                "PTR_DAT_08005810": "flag_ptr_6",
                "PTR_DAT_08005820": "flag_ptr_10",
                "PTR_DAT_08005800": "flag_ptr_2",
                "PTR_DAT_08005814": "flag_ptr_7",
                "PTR_DAT_08005824": "flag_ptr_11"
            },
            "code": "void execute_jumptable_08005760(void)\n{\n  code *jumptable_ptr = execute_jumptable_08005760;\n  execute_function_1();\n  set_flag_if_negative(PTR_DAT_080057fc);\n  set_flag_if_negative(PTR_DAT_08005800);\n  set_flag_if_negative(PTR_DAT_08005804);\n  set_flag_if_negative(PTR_DAT_08005808);\n  set_flag_if_negative(PTR_DAT_0800580c);\n  set_flag_if_negative(PTR_DAT_08005810);\n  set_flag_if_negative(PTR_DAT_08005814);\n  set_flag_if_negative(PTR_DAT_08005818);\n  set_flag_if_negative(PTR_DAT_0800581c);\n  set_flag_if_negative(PTR_DAT_08005820);\n  set_flag_if_negative(PTR_DAT_08005824);\n  set_flag_if_negative(PTR_DAT_08005828);\n  (*jumptable_ptr)();\n}",
            "called": [
                "FUN_080051ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_080047c0"
            ],
            "imported": true,
            "current_name": "execute_jumptable_08005760"
        },
        "FUN_08004678": {
            "renaming": {
                "FUN_08004678": "find_highest_bit_set_08004678",
                "param_1": "num",
                "cVar1": "highest_bit"
            },
            "code": "int find_highest_bit_set_08004678(uint num) {\n  int highest_bit = 0;\n  while (num > 1) {\n    num = num >> 1;\n    highest_bit++;\n  }\n  return highest_bit;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004678",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": true,
            "current_name": "find_highest_bit_set_08004678"
        },
        "FUN_08003900": {
            "renaming": {
                "iVar1": "function_result",
                "*(char *)(iVar1 + 0x5f)": "is_function_set",
                "param_1": "is_set",
                "FUN_08003900": "check_and_call_function_if_not_set_08003900",
                "FUN_08001578": "call_function",
                "FUN_0800387c": "get_function_result"
            },
            "code": "void check_and_call_function_if_not_set_08003900(bool is_set) {\\n  int function_result = get_function_result();\\n  if (*(char *)(function_result + 0x5f) == \"\\0\") {\\n    call_function(is_set);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003900",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": true,
            "current_name": "check_and_call_function_if_not_set_08003900"
        },
        "FUN_08000f0c": {
            "renaming": {
                "param_1": "index",
                "FUN_08000f0c": "set_bit_at_index_08000f0c",
                "DAT_08000f28": "data_ptr"
            },
            "code": "void set_bit_at_index_08000f0c(uint index) {\n  if (index >= 0) {\n    int* DAT_08000f28 = DAT_08000f28 + ((index >> 5) + 0x60) * 4;\n    int bit_mask = 1 << (index & 0x1f);\n    *DAT_08000f28 = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f0c",
            "calling": [],
            "imported": true,
            "current_name": "set_bit_at_index_08000f0c"
        },
        "FUN_08000998": {
            "renaming": {
                "bVar1": "current_storage_index",
                "bVar4": "num_bytes_to_store",
                "bVar3": "num_bytes_to_read",
                "param_1": "buffer_address",
                "FUN_08000998": "decode_and_store_data_08000998",
                "param_2": "data_address",
                "param_3": "param_3",
                "cVar2": "next_storage_index_char",
                "param_4": "param_4",
                "uVar5": "i",
                "uVar6": "next_storage_index"
            },
            "code": "int decode_and_store_data_08000998(int buffer_address, int data_address, int param_3, int param_4) {\n  byte num_bytes_to_read = get_num_bytes_to_read(*(undefined *)(buffer_address + 0xb),*(undefined *)(buffer_address + 0xc),param_3,param_4,param_4);\n  byte num_bytes_to_store = get_num_bytes_to_read(*(undefined *)(buffer_address + 0xd),*(undefined *)(buffer_address + 0xe));\n  *(byte *)(buffer_address + 0xb) = num_bytes_to_store << 1;\n  *(undefined *)(buffer_address + 0x49) = 3;\n  for (uint i = (uint)num_bytes_to_read; i < (uint)num_bytes_to_read + (uint)num_bytes_to_store; i = i + 1 & 0xff) {\n    byte current_storage_index = *(byte *)(buffer_address + 0x49);\n    *(char *)(buffer_address + (uint)current_storage_index + 9) = (char)((ushort)*(undefined2 *)(data_address + i * 2) >> 8);\n    uint next_storage_index = current_storage_index + 1 & 0xff;\n    char next_storage_index_char = (char)next_storage_index;\n    *(char *)(buffer_address + 0x49) = next_storage_index_char;\n    *(undefined *)(buffer_address + next_storage_index + 9) = *(undefined *)(data_address + i * 2);\n    *(char *)(buffer_address + 0x49) = next_storage_index_char + '\\x01';\n  }\n  char final_storage_index_char = *(char *)(buffer_address + 0x49);\n  store_data(buffer_address);\n  return (int)(char)(final_storage_index_char + '\\x02');\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "decode_and_store_data_08000998"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "do_nothing_08003f94"
            },
            "code": "\nvoid do_nothing_08003f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": true,
            "current_name": "do_nothing_08003f94"
        },
        "FUN_080055d0": {
            "renaming": {
                "iVar4": "result",
                "PTR_PTR_DAT_080055dc": "function_return_codes_pointer",
                "param_1": "function_id",
                "piVar3": "function_return_codes",
                "puVar6": "function_thunk",
                "unaff_r5": "thunk_return_register_2",
                "unaff_r4": "thunk_return_register",
                "FUN_080055d0": "execute_function_080055d0",
                "puVar1": "string_buffer",
                "uVar2": "thunk_return",
                "pcVar5": "function",
                "in_lr": "link_register",
                "PTR_DAT_08005600": "string_buffer_pointer"
            },
            "code": "int execute_function_080055d0(uint function_id) {\n  int *return_code = *(int **)function_return_codes;\n  if (function_id > 31) {\n    *return_code = 22;\n    return -1;\n  }\n  int *function_pointer = return_codes[17];\n  if (function_pointer != NULL) {\n    code *function = *(code **)(function_pointer + function_id * 4);\n    if (function != NULL) {\n      if (function != (code *)1) {\n        if (function == (code *)-1) {\n          *return_code = 22;\n          return 1;\n        }\n        *(undefined4 *)(function_pointer + function_id * 4) = 0;\n        (*function)(function_id);\n      }\n      return 0;\n    }\n  }\n  void *thunk_return = function_thunk(return_code);\n  undefined *string_buffer = PTR_DAT_08005600;\n  *(undefined4 *)PTR_DAT_08005600 = 0;\n  int result = execute_thunk(thunk_return, function_id, function_id, 0, function_return_codes, thunk_return_register, thunk_return_register_2, link_register);\n  if (result == -1 && (*(int *)string_buffer != 0)) {\n    *return_code = *(int *)string_buffer;\n  }\n  return result;\n}",
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055d0",
            "calling": [
                "FUN_080051ac"
            ],
            "imported": true,
            "current_name": "execute_function_080055d0"
        },
        "FUN_080056f8": {
            "renaming": {
                "iVar2": "result",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "puVar1": "ptrToValue",
                "FUN_080056f8": "findValueAndAssignToParam_080056f8"
            },
            "code": "void findValueAndAssignToParam_080056f8(int *outputValue, undefined4 inputValue)\n{\n  undefined *ptrToValue = PTR_DAT_08005714;\n  *(undefined4 *)PTR_DAT_08005714 = 0;\n  int result = calculateValue(inputValue);\n  if ((result == -1) && (*(int *)ptrToValue != 0)) {\n    *outputValue = *(int *)ptrToValue;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": true,
            "current_name": "findValueAndAssignToParam_080056f8"
        },
        "FUN_080054b4": {
            "renaming": {
                "auStack_4c": "file_type",
                "iVar1": "result",
                "param_1": "file_descriptor",
                "local_48": "file_type_flags",
                "param_2": "file_mode",
                "param_3": "error_code",
                "param_4": "permissions",
                "uVar2": "file_permissions",
                "FUN_080054b4": "check_file_permissions_080054b4"
            },
            "code": "int check_file_permissions_080054b4(int file_descriptor, int file_mode, int *error_code, uint *permissions) {\n  int result;\n  uint file_type;\n  if (*(short *)(file_mode + 0xe) < 0 || (result = get_file_type(file_descriptor, (int)*(short *)(file_mode + 0xe), &file_type)) < 0) {\n    *error_code = 0;\n    if ((int)((uint)*(ushort *)(file_mode + 0xc) << 0x18) < 0) {\n      *permissions = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *permissions = (uint)((file_type & 0xf000) == 0x2000);\n  }\n  *permissions = 0x400;\nLAB_080054f4:\n  return 0;\n}",
            "called": [
                "FUN_080056d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b4",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": true,
            "current_name": "check_file_permissions_080054b4"
        },
        "FUN_0800171a": {
            "renaming": {
                "puVar2": "ptr_b",
                "param_1": "data",
                "cVar1": "current_char",
                "FUN_0800171a": "decode_0800171a"
            },
            "code": "uint32_t decode_0800171a(uint32_t **data)\n{\n  char current_char = *(char *)((int)data + 0x3d);\n  uint32_t *ptr_b = data[0xb];\n  if ((*(short *)(data + 10) == 0) && (current_char == '!')) {\n    if ((ptr_b == (uint32_t *)0x4) || ((ptr_b == (uint32_t *)0x8 || (ptr_b == (uint32_t *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      data[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        do_nothing_08001718();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        do_nothing_080015b6();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      data[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      do_nothing_080015b6();\n    }\n  }\n  else if ((current_char == '!') || ((*(char *)((int)data + 0x3e) == '@' && (current_char == '\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (data[0x14] == (uint32_t *)0x0) {\n        if (data[0x13] == (uint32_t *)0x1) {\n          (*data)[4] = (uint32_t)data[0x12] & 0xff;\n          data[0x14] = (uint32_t *)((int)data[0x14] + 2);\n        }\n        else {\n          (*data)[4] = (uint32_t)((int)data[0x12] << 0x10) >> 0x18;\n          data[0x14] = (uint32_t *)((int)data[0x14] + 1);\n        }\n      }\n      else if (data[0x14] == (uint32_t *)0x1) {\n        (*data)[4] = (uint32_t)data[0x12] & 0xff;\n        data[0x14] = (uint32_t *)((int)data[0x14] + 1);\n      }\n      else if (data[0x14] == (uint32_t *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          uint32_t *ptr_9 = data[9];\n          data[9] = (uint32_t *)((int)ptr_9 + 1);\n          (*data)[4] = (uint32_t)*(uint8_t *)ptr_9;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      uint32_t *ptr_9 = data[9];\n      data[9] = (uint32_t *)((int)ptr_9 + 1);\n      (*data)[4] = (uint32_t)*(uint8_t *)ptr_9;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800171a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "decode_0800171a"
        },
        "FUN_08004560": {
            "renaming": {
                "FUN_08004560": "execute_if_valid_input_08004560",
                "param_1": "input_value",
                "param_2": "input_mask",
                "PTR_DAT_08004588": "PTR_TASK_DATA"
            },
            "code": "void execute_if_valid_input_08004560(int input_value, int input_mask) {\n  if ((input_value == 1) && (input_mask == 0xffff)) {\n    execute_task(PTR_DAT_08004588, 0, 0, 0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08004544"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004560",
            "calling": [],
            "imported": true,
            "current_name": "execute_if_valid_input_08004560"
        },
        "FUN_08000a7a": {
            "renaming": {
                "FUN_08000a7a": "set_bits_according_to_pattern_08000a7a",
                "iVar1": "pattern_start",
                "iVar2": "output_start",
                "param_1": "pattern_address",
                "param_2": "output_address",
                "param_3": "pattern_offset",
                "param_4": "output_offset",
                "uVar3": "i",
                "uVar5": "current_output_bit",
                "uVar4": "current_pattern_bit",
                "uVar7": "current_pattern_byte",
                "uVar6": "current_output_byte"
            },
            "code": "int set_bits_according_to_pattern_08000a7a(int pattern_address, int output_address, int param_3, int param_4) {\n  int pattern_start = *(undefined *)(pattern_address + 0xb);\n  int pattern_end = *(undefined *)(pattern_address + 0xc);\n  int output_start = *(undefined *)(pattern_address + 0xd);\n  int output_end = *(undefined *)(pattern_address + 0xe);\n  int pattern_length = pattern_end - pattern_start;\n  int output_length = output_end - output_start;\n  int pattern_offset = pattern_start + param_3 % pattern_length;\n  int output_offset = output_start + param_4 % output_length;\n  int current_pattern_byte = *(byte *)(pattern_address + 16);\n  int current_pattern_bit = 7;\n  int i;\n\n  for (i = 0; i < output_length; i++) {\n    int current_output_byte = output_offset + (i / 8);\n    int current_output_bit = 7 - (i % 8);\n    if ((current_pattern_byte >> current_pattern_bit) & 1) {\n      *(ushort *)(output_address + current_output_byte * 2) |= 1 << current_output_bit;\n    }\n    else {\n      *(ushort *)(output_address + current_output_byte * 2) &= ~(1 << current_output_bit);\n    }\n    current_pattern_bit--;\n    if (current_pattern_bit < 0) {\n      current_pattern_byte = *(byte *)(pattern_address + 17 + (pattern_offset / 8));\n      current_pattern_bit = 7 - (pattern_offset % 8);\n      pattern_offset = (pattern_offset + 1) % pattern_length + pattern_start;\n    }\n  }\n  *(undefined *)(pattern_address + 0x49) = 6;\n  FUN_0800076c(pattern_address);\n  return 8;\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a7a",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "set_bits_according_to_pattern_08000a7a"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "do_nothing_08003474"
            },
            "code": "\nvoid do_nothing_08003474(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08003476"
            ],
            "imported": true,
            "current_name": "do_nothing_08003474"
        },
        "FUN_08004cb0": {
            "renaming": {
                "bVar4": "is_four",
                "iVar1": "result",
                "FUN_08004cb0": "calculate_08004cb0",
                "param_1": "start",
                "param_2": "data",
                "param_3": "length",
                "param_4": "arg",
                "param_5": "callback",
                "uVar3": "j",
                "uVar2": "max_length"
            },
            "code": "uint32_t calculate_08004cb0(uint32_t start, uint32_t* data, uint32_t* length, uint32_t arg, code* callback)\\n{\\n  uint32_t max_length = data[4] < data[2] ? data[2] : data[4];\\n  *length = max_length;\\n  if (*(char *)((int)data + 0x43) != \"\\0\") {\\n    *length = max_length + 1;\\n  }\\n  if ((int)(*data << 0x1a) < 0) {\\n    *length = *length + 2;\\n  }\\n  uint32_t i = *data & 6;\\n  if (i == 0) {\\n    for (; (int)i < (int)(data[3] - *length); i = i + 1) {\\n      int result = (*callback)(start, arg, (int)data + 0x19, 1);\\n      if (result == -1) {\\n        return 0xffffffff;\\n      }\\n    }\\n  }\\n  uint32_t has_extra_char = (uint32_t)*(byte *)((int)data + 0x43);\\n  if (has_extra_char != 0) {\\n    has_extra_char = 1;\\n  }\\n  if ((int)(*data << 0x1a) < 0) {\\n    *(undefined *)((int)data + has_extra_char + 0x43) = 0x30;\\n    *(undefined *)((int)data + has_extra_char + 0x44) = *(undefined *)((int)data + 0x45);\\n    has_extra_char = has_extra_char + 2;\\n  }\\n  int result = (*callback)(start, arg, (int)data + 0x43, has_extra_char);\\n  if (result != -1) {\\n    uint32_t remaining_length = data[3];\\n    bool is_four = (*data & 6) == 4;\\n    if (is_four) {\\n      remaining_length = remaining_length - *length;\\n    }\\n    if (is_four) {\\n      remaining_length = remaining_length & ~((int)remaining_length >> 0x1f);\\n    }\\n    else {\\n      remaining_length = 0;\\n    }\\n    if (data[4] < data[2]) {\\n      remaining_length = remaining_length + (data[2] - data[4]);\\n    }\\n    uint32_t j = 0;\\n    while (true) {\\n      if (remaining_length == j) {\\n        return 0;\\n      }\\n      result = (*callback)(start, arg, (int)data + 0x1a, 1);\\n      if (result == -1) {\\n        break;\\n      }\\n      j = j + 1;\\n    }\\n  }\\n  return 0xffffffff;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb0",
            "calling": [
                "FUN_08004d9c"
            ],
            "imported": true,
            "current_name": "calculate_08004cb0"
        },
        "FUN_08003594": {
            "renaming": {
                "PTR_DAT_080035a8": "functionArgumentData",
                "code": "codePointer",
                "FUN_08003594": "executeFunctionIfNotNull_08003594",
                "PTR_DAT_080035a4": "functionPointerData"
            },
            "code": "void executeFunctionIfNotNull_08003594(void)\n{\n  code* functionPointer = *(code**)PTR_DAT_080035a4;\n  if (functionPointer != nullptr)\n  {\n    int arg = *(int*)PTR_DAT_080035a8;\n    (*functionPointer)(arg);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003594",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": true,
            "current_name": "executeFunctionIfNotNull_08003594"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "run_function_with_initialization_08004204",
                "FUN_0800346c": "initialize_system"
            },
            "code": "void run_function_with_initialization_08004204(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_0800346c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "run_function_with_initialization_08004204"
        },
        "FUN_08002940": {
            "renaming": {
                "*(uint *)(*param_1 + 0x14)": "*flag2",
                "*(uint *)(*param_1 + 0xc)": "*flag1",
                "*(undefined *)((int)param_1 + 0x3a)": "*flag3",
                "FUN_08002940": "update_flags_08002940",
                "param_1": "flag_values",
                "*param_1": "*flag_values"
            },
            "code": "void update_flags_08002940(int *flag_values)\n{\n  uint32_t *flag1 = (uint32_t *)(*flag_values + 0xc);\n  uint32_t *flag2 = (uint32_t *)(*flag_values + 0x14);\n  uint8_t *flag3 = (uint8_t *)(flag_values + 0x3a);\n  *flag1 &= 0xfffffedf;\n  *flag2 &= 0xfffffffe;\n  *flag3 = 0x20;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002940",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": true,
            "current_name": "update_flags_08002940"
        },
        "FUN_08003476": {
            "renaming": {
                "FUN_08000e18": "initialize_graphics",
                "FUN_08003476": "initialize_game_08003476",
                "FUN_08000f4e": "initialize_audio",
                "do_nothing_08003474": "do_nothing"
            },
            "code": "void initialize_game_08003476(void)\n{\n  initialize_graphics();\n  initialize_audio();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000e18",
                "FUN_08000f4e",
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003476",
            "calling": [],
            "imported": true,
            "current_name": "initialize_game_08003476"
        },
        "FUN_08004444": {
            "renaming": {
                "uVar1": "value",
                "FUN_08004444": "set_value_based_on_index_08004444",
                "param_1": "index",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "param_2": "data_array"
            },
            "code": "void set_value_based_on_index_08004444(uint8_t index, uint16_t *data_array)\n{\n  uint16_t value;\n  if (index < 0x60) {\n    value = *(data_array + index);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(data_array + 0x12e) = value;\n  code *jump_table = (code *)0x08004452;\n  jump_table();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004444",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": true,
            "current_name": "set_value_based_on_index_08004444"
        },
        "FUN_0800346c": {
            "renaming": {
                "FUN_0800346c": "execute_main_function_0800346c",
                "FUN_08000e30": "initialize_application"
            },
            "code": "void execute_main_function_0800346c(void)\n{\n  initialize_application();\n  return;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800346c",
            "calling": [
                "FUN_08004204"
            ],
            "imported": true,
            "current_name": "execute_main_function_0800346c"
        },
        "FUN_080053a0": {
            "renaming": {
                "DATA_FLAG_OFFSET": "0x18",
                "bVar3": "is_current_data_address",
                "iVar2": "current_data_address",
                "FUN_08005400": "get_field_value",
                "uVar1": "field_value",
                "DATA_LABEL_OFFSET": "0x28",
                "param_1": "data_address",
                "PTR_LAB_08005320_1_080053fc": "DATA_LABEL_PTR",
                "FUN_0800532c": "set_field_value",
                "PTR_PTR_DAT_080053f8": "CURRENT_DATA_ADDRESS_PTR_PTR",
                "FUN_080053a0": "initialize_data_080053a0",
                "DATA_FIELD_1_OFFSET": "0x48",
                "DATA_FIELD_2_OFFSET": "0x4c",
                "DATA_FIELD_3_OFFSET": "0x50"
            },
            "code": "void initialize_data_080053a0(int data_address)\n{\n  if (*(int *)(data_address + DATA_FLAG_OFFSET) == 0) {\n    *(undefined4 *)(data_address + DATA_FIELD_1_OFFSET) = 0;\n    *(undefined4 *)(data_address + DATA_FIELD_2_OFFSET) = 0;\n    *(undefined4 *)(data_address + DATA_FIELD_3_OFFSET) = 0;\n    int current_data_address = *(int *)PTR_PTR_DAT_080053f8;\n    *(undefined **)(data_address + DATA_LABEL_OFFSET) = PTR_LAB_08005320_1_080053fc;\n    bool is_current_data_address = data_address == current_data_address;\n    if (is_current_data_address) {\n      current_data_address = 1;\n    }\n    if (is_current_data_address) {\n      *(int *)(data_address + DATA_FLAG_OFFSET) = current_data_address;\n    }\n    undefined4 field_1_value = get_field_value();\n    *(undefined4 *)(data_address + DATA_FIELD_1_OFFSET) = field_1_value;\n    undefined4 field_2_value = get_field_value(data_address);\n    *(undefined4 *)(data_address + DATA_FIELD_2_OFFSET) = field_2_value;\n    undefined4 field_3_value = get_field_value(data_address);\n    *(undefined4 *)(data_address + DATA_FIELD_3_OFFSET) = field_3_value;\n    set_field_value(*(undefined4 *)(data_address + DATA_FIELD_1_OFFSET),4,0);\n    set_field_value(*(undefined4 *)(data_address + DATA_FIELD_2_OFFSET),9,1);\n    set_field_value(*(undefined4 *)(data_address + DATA_FIELD_3_OFFSET),0x12,2);\n    *(undefined4 *)(data_address + DATA_FLAG_OFFSET) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_08004a84",
                "FUN_08004fdc",
                "FUN_080052cc",
                "FUN_080050d0",
                "FUN_08004a34",
                "FUN_08005400"
            ],
            "imported": true,
            "current_name": "initialize_data_080053a0"
        },
        "FUN_0800201c": {
            "renaming": {
                "FUN_0800201c": "FUNC_0800201c"
            },
            "code": "\nundefined4 FUNC_0800201c(uint *param_1)\n\n{\n  uint *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  bool bVar5;\n  \n  puVar1 = DAT_080022d0;\n  if (param_1 == (uint *)0x0) {\n    return 1;\n  }\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 4) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) != 0)))) {\n      if (((*DAT_080022d0 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x10000;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x40000;\n        *puVar1 = *puVar1 | 0x10000;\n      }\n      else {\n        *DAT_080022d0 = *DAT_080022d0 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar2 = FUN_08000e30();\n        while ((*DAT_080022d0 & 0x20000) != 0) {\n          iVar3 = FUN_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar2 = FUN_08000e30();\n        while ((*DAT_080022d0 & 0x20000) == 0) {\n          iVar3 = FUN_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 0) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) == 0)))) {\n      if (((*DAT_080022d0 & 2) != 0) && (param_1[3] != 1)) {\n        return 1;\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n    else if (param_1[3] == 0) {\n      *DAT_080022d4 = 0;\n      iVar2 = FUN_08000e30();\n      while ((*DAT_080022d0 & 2) != 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d4 = 1;\n      iVar2 = FUN_08000e30();\n      while ((*DAT_080022d0 & 2) == 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[5] == 0) {\n      *DAT_080022d8 = 0;\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) != 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d8 = 1;\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) == 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar5 = (DAT_080022d0[0x10] & 0x10000000) == 0;\n    if (bVar5) {\n      DAT_080022d0[0x10] = DAT_080022d0[0x10] | 0x10000000;\n    }\n    if ((*DAT_080022dc & 0x100) == 0) {\n      *DAT_080022dc = *DAT_080022dc | 0x100;\n      iVar2 = FUN_08000e30();\n      while ((*DAT_080022dc & 0x100) == 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    puVar1 = DAT_080022d0;\n    if (param_1[2] == 1) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 1;\n    }\n    else if (param_1[2] == 5) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 4;\n      puVar1[0x1c] = puVar1[0x1c] | 1;\n    }\n    else {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] & 0xfffffffe;\n      puVar1[0x1c] = puVar1[0x1c] & 0xfffffffb;\n    }\n    if (param_1[2] == 0) {\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) != 0) {\n        iVar3 = FUN_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) == 0) {\n        iVar3 = FUN_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar5) {\n      DAT_080023ac[0x10] = DAT_080023ac[0x10] & 0xefffffff;\n    }\n  }\n  if (param_1[6] == 0) {\n    uVar4 = 0;\n  }\n  else if ((DAT_080023ac[2] & 0xc) == 8) {\n    uVar4 = 1;\n  }\n  else if (param_1[6] == 2) {\n    *DAT_080023b0 = 0;\n    iVar2 = FUN_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        DAT_080023ac[1] =\n             param_1[7] | param_1[8] | param_1[9] << 6 | ((param_1[10] >> 1) - 1) * 0x10000 |\n             param_1[0xb] << 0x18;\n        *DAT_080023b0 = 1;\n        iVar2 = FUN_08000e30();\n        do {\n          if ((*DAT_080023ac & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar3 = FUN_08000e30();\n        } while ((uint)(iVar3 - iVar2) < 3);\n        return 3;\n      }\n      iVar3 = FUN_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  else {\n    *DAT_080023b0 = 0;\n    iVar2 = FUN_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar3 = FUN_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  return uVar4;\n}\n\n",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800201c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": true,
            "current_name": "FUNC_0800201c"
        },
        "FUN_080028d4": {
            "renaming": {
                "param_1": "data",
                "param_2": "bit_position",
                "PTR_": "",
                "param_3": "new_value",
                "DAT_": "",
                "FUN_080028d4": "update_bits_080028d4"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ update_bits_080028d4(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_~DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d4",
            "calling": [
                "FUN_080028f0"
            ],
            "imported": true,
            "current_name": "update_bits_080028d4"
        },
        "FUN_0800293c": {
            "renaming": {
                "FUN_0800293c": "do_nothing_0800293c"
            },
            "code": "\nvoid do_nothing_0800293c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293c",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": true,
            "current_name": "do_nothing_0800293c"
        },
        "FUN_080040ec": {
            "renaming": {
                "FUN_080040ec": "call_with_four_params_080040ec",
                "FUN_08003d18": "call_function_with_four_params",
                "param_1": "ptr_1",
                "param_2": "ptr_2",
                "param_3": "num_1",
                "param_4": "num_2"
            },
            "code": "void call_with_four_params_080040ec(void* ptr_1, void* ptr_2, int num_1, int num_2)\n{\n  call_function_with_four_params(ptr_2, num_1, num_1, num_2, num_2);\n  return;\n}",
            "called": [
                "FUN_08003d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040ec",
            "calling": [
                "FUN_0800562a"
            ],
            "imported": true,
            "current_name": "call_with_four_params_080040ec"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "validate_input_and_set_params_08001460",
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1": "input_ptr",
                "param_2": "param_2",
                "PTR_": "PTR_",
                "param_3": "param_3",
                "param_4": "param_4",
                "DAT_": "DAT_"
            },
            "code": "int validate_input_and_set_params_08001460(uint **input_ptr, uint *param_2, int param_3, uint *param_4) {\n  int result;\n  uint *input = *input_ptr;\n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (param_2 == NULL) {\n      result = 1;\n    }\n    else if (param_3 == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input + 0xf) = 1;\n      uint *ptr = *input_ptr;\n      if ((*ptr & 1) == 0) {\n        *ptr |= 1;\n      }\n      **input_ptr &= 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x29;\n      *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n      result = 0;\n      input_ptr[0x10] = NULL;\n      input_ptr[9] = param_2;\n      *(short *)((int)input_ptr + 0x2a) = (short)param_3;\n      input_ptr[0xb] = param_4;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] |= 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_08003880"
            ],
            "imported": true,
            "current_name": "validate_input_and_set_params_08001460"
        },
        "FUN_08003880": {
            "renaming": {
                "iVar1": "process_id",
                "*(int *)(param_1 + 0xc)": "*(int *)(data_address + 0xc)",
                "FUN_08003880": "process_data_08003880",
                "process_data_helper": "process_data_helper",
                "param_1": "data_address",
                "*(undefined *)(iVar1 + 0x5e)": "*(undefined *)(process_id + 0x5e)",
                "param_2": "flag",
                "param_3": "data_length",
                "param_4": "param_4",
                "*(code **)(iVar1 + 100)": "*(code **)(process_id + 100)",
                "FUN_0800387c": "get_process_id",
                "*(undefined *)(iVar1 + 0x88)": "*(undefined *)(process_id + 0x88)"
            },
            "code": "void process_data_08003880(int data_address, int flag, int data_length, undefined4 param_4)\n{\n  int process_id;\n  process_id = get_process_id();\n  if (data_length == *(int *)(data_address + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(process_id + 0x88) = 0;\n      *(undefined *)(process_id + 0x5e) = 0;\n      if (*(code **)(process_id + 100) != (code *)0x0) {\n        (**(code **)(process_id + 100))();\n      }\n      process_data_08003880_helper(data_address, process_id + 0x68, *(undefined *)(process_id + 0x88), 8);\n      return;\n    }\n    *(undefined *)(process_id + 0x5e) = 1;\n    process_data_08003880_helper(data_address, process_id + 0x68, 0x20, 8, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_080014ec",
                "FUN_08001460",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003880",
            "calling": [
                "FUN_0800165a"
            ],
            "imported": true,
            "current_name": "process_data_08003880"
        },
        "FUN_08002f4c": {
            "renaming": {
                "*(uint *)(*param_1 + 0xc)": "*flag_ptr",
                "FUN_08002f4c": "set_flag_and_call_function_08002f4c",
                "param_1": "param_array",
                "uint": "uint32_t",
                "*(undefined *)((int)param_1 + 0x39)": "*char_ptr",
                "*param_1": "*param_array",
                "char": "char",
                "FUN_08003f48": "call_some_function"
            },
            "code": "int set_flag_and_call_function_08002f4c(int *param_array)\n{\n  uint32_t *flag_ptr = (uint32_t *)(*param_array + 0xc);\n  *flag_ptr &= 0xffffffbf;\n  char *char_ptr = (char *)((int)param_array + 0x39);\n  *char_ptr = 0x20;\n  call_some_function();\n  return 0;\n}",
            "called": [
                "FUN_08003f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f4c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": true,
            "current_name": "set_flag_and_call_function_08002f4c"
        },
        "FUN_080035bc": {
            "renaming": {
                "DAT_080035f0": "data_pointer",
                "FUN_080035bc": "initialize_data_080035bc",
                "puVar1": "data_pointer",
                "DAT_080035f4": "data_pointer_1",
                "DAT_080035f8": "data_pointer_2"
            },
            "code": "void initialize_data_080035bc(void)\n{\n  uint *DAT_080035f0;\n  DAT_080035f0 = DAT_080035f0;\n  *DAT_080035f0 |= 1;\n  DAT_080035f0[2] = 0;\n  *DAT_080035f0 &= 0xFEF6FFFF;\n  DAT_080035f0[1] = DAT_080035f4;\n  *DAT_080035f0 &= 0xFFFBFFFF;\n  DAT_080035f0[3] = 0;\n  *(undefined4 *)(DAT_080035f8 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035bc",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": true,
            "current_name": "initialize_data_080035bc"
        },
        "FUN_08000c4c": {
            "renaming": {
                "0x4b00": "SCREEN_BUFFER_SIZE",
                "FUN_08000c4c": "initialize_screen_08000c4c",
                "FUN_08000600": "set_screen_buffer",
                "PTR_DAT_08000c60": "PTR_SCREEN_BUFFER",
                "FUN_080005e4": "clear_screen"
            },
            "code": "void initialize_screen_08000c4c(void)\n{\n  clear_screen();\n  set_screen_buffer(PTR_DAT_08000c60, SCREEN_BUFFER_SIZE);\n  return;\n}",
            "called": [
                "FUN_08000600",
                "FUN_080005e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c4c",
            "calling": [
                "FUN_08004658"
            ],
            "imported": true,
            "current_name": "initialize_screen_08000c4c"
        },
        "FUN_080025ec": {
            "renaming": {
                "DAT_08002604": "data_pointer",
                "uVar1": "shifted_value",
                "FUN_080025ec": "calculate_shifted_value_080025ec",
                "FUN_080025e0": "get_shifted_value",
                "PTR_DAT_08002608": "shift_array"
            },
            "code": "uint calculate_shifted_value_080025ec(void)\n{\n  uint shifted_value;\n  shifted_value = get_shifted_value();\n  uint index = (uint)(*(int *)(DAT_08002604 + 8) << 0x13) >> 0x1d;\n  uint shifted_index = PTR_DAT_08002608[index];\n  return shifted_value >> shifted_index;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ec",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": true,
            "current_name": "calculate_shifted_value_080025ec"
        },
        "FUN_080050d0": {
            "renaming": {
                "iVar3": "message_header_ptr",
                "uVar1": "return_value",
                "PTR_DAT_080051a4": "message_header_type_2",
                "param_1": "return_code",
                "FUN_080050d0": "decode_message_header_080050d0",
                "PTR_DAT_080051a8": "message_header_type_3",
                "PTR_PTR_DAT_0800519c": "message_header_constants",
                "param_2": "header",
                "PTR_DAT_080051a0": "message_header_type_1",
                "uVar2": "flags"
            },
            "code": "uint decode_message_header_080050d0(uint32_t *return_code, uint32_t *header)\n{\n  uint32_t message_header_ptr;\n  uint16_t flags;\n  int32_t temp_var;\n  message_header_ptr = *(int32_t *)PTR_PTR_DAT_0800519c;\n  if ((message_header_ptr != 0) && (*(int32_t *)(message_header_ptr + 0x18) == 0)) {\n    free_message_header(message_header_ptr);\n  }\n  if (header == (uint32_t *)PTR_DAT_080051a0) {\n    header = *(uint32_t **)(message_header_ptr + 4);\n  }\n  else if (header == (uint32_t *)PTR_DAT_080051a4) {\n    header = *(uint32_t **)(message_header_ptr + 8);\n  }\n  else if (header == (uint32_t *)PTR_DAT_080051a8) {\n    header = *(uint32_t **)(message_header_ptr + 0xc);\n  }\n  flags = *(uint16_t *)(header + 3);\n  temp_var = (int32_t)flags << 0x1c;\n  if (-1 < temp_var) {\n    temp_var = (int32_t)flags << 0x1b;\n    if (-1 < temp_var) {\n      *return_code = MESSAGE_TYPE_1;\n      goto LAB_08005100;\n    }\n    temp_var = (int32_t)flags << 0x1d;\n    if (temp_var < 0) {\n      if ((uint32_t *)header[0xd] != (uint32_t *)0x0) {\n        if ((uint32_t *)header[0xd] != header + 0x11) {\n          free_message_header(return_code);\n        }\n        header[0xd] = 0;\n      }\n      *(uint16_t *)(header + 3) = *(uint16_t *)(header + 3) & 0xffdb;\n      header[1] = 0;\n      *header = header[4];\n    }\n    *(uint16_t *)(header + 3) = *(uint16_t *)(header + 3) | 8;\n  }\n  if ((header[4] == 0) && ((*(uint16_t *)(header + 3) & 0x280) != 0x200)) {\n    free_message_header(return_code, header);\n  }\n  flags = *(uint16_t *)(header + 3);\n  temp_var = flags & 1;\n  if (temp_var == 0) {\n    temp_var = (int32_t)((uint32_t)flags << 0x1e);\n    if (-1 < temp_var) {\n      temp_var = header[5];\n    }\n    header[2] = temp_var;\n  }\n  else {\n    header[2] = 0;\n    header[6] = -header[5];\n  }\n  if (header[4] == 0) {\n    flags = *(uint16_t *)(header + 3);\n    temp_var = (int32_t)(int16_t)flags & 0x80;\n    if (temp_var != 0) {\n      *(uint16_t *)(header + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    temp_var = 0;\n  }\n  return temp_var;\n}",
            "called": [
                "FUN_080054fc",
                "FUN_080053a0",
                "FUN_080048dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050d0",
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "imported": true,
            "current_name": "decode_message_header_080050d0"
        },
        "FUN_08004a60": {
            "renaming": {
                "iVar1": "result",
                "iVar3": "index",
                "puVar2": "data_end",
                "param_1": "arg1",
                "FUN_08004a60": "process_data_08004a60",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "length"
            },
            "code": "int process_data_08004a60(undefined4 arg1, undefined4 arg2, undefined *data, int length) {\n  int index = 0;\n  undefined *data_end = data + length;\n  do {\n    if (data == data_end) {\n      return 0;\n    }\n    int result = process_byte(arg1, *data, arg2, length, index);\n    length = result + 1;\n    data++;\n    index++;\n  } while (length != 0);\n  return result;\n}",
            "called": [
                "FUN_08004a34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a60",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": true,
            "current_name": "process_data_08004a60"
        },
        "FUN_08004978": {
            "renaming": {
                "iVar4": "remaining_size",
                "puVar3": "current_block_ptr",
                "param_1": "out_ptr",
                "puVar6": "prev_block_ptr",
                "FUN_08004978": "allocate_memory_block_08004978",
                "puVar7": "block_ptr",
                "param_2": "size",
                "puVar1": "unused_ptr",
                "uVar2": "result",
                "uVar5": "difference",
                "uVar8": "block_size"
            },
            "code": "uint allocate_memory_block_08004978(uint *out_ptr, uint size)\n{\n  uint *prev_block_ptr;\n  uint block_size;\n  uint *block_ptr;\n  uint remaining_size;\n  \n  block_size = (size + 3 & 0xfffffffc) + 8;\n  if (block_size < 0xc) {\n    block_size = 0xc;\n  }\n  if (((int)block_size < 0) || (block_size < size)) {\n    *out_ptr = 0xc;\n  }\n  else {\n    do_nothing_0800557c();\n    prev_block_ptr = PTR_DAT_08004a30;\n    block_ptr = *(uint **)PTR_DAT_08004a2c;\n    while (block_ptr != (uint *)0x0) {\n      remaining_size = *block_ptr - block_size;\n      if (-1 < (int)remaining_size) {\n        if (remaining_size < 0xc) {\n          if (prev_block_ptr == block_ptr) {\n            block_size = prev_block_ptr[1];\n          }\n          else {\n            block_size = block_ptr[1];\n          }\n          if (prev_block_ptr == block_ptr) {\n            *(uint *)PTR_DAT_08004a2c = block_size;\n            block_ptr = prev_block_ptr;\n          }\n          else {\n            prev_block_ptr[1] = block_size;\n          }\n        }\n        else {\n          *block_ptr = remaining_size;\n          *(uint *)((int)block_ptr + remaining_size) = block_size;\n          block_ptr = (uint *)((int)block_ptr + remaining_size);\n        }\n        goto LAB_080049dc;\n      }\n      prev_block_ptr = block_ptr;\n      block_ptr = (uint *)block_ptr[1];\n    }\n    if (*(int *)PTR_DAT_08004a30 == 0) {\n      uint result = FUN_0800500c(out_ptr);\n      *(uint *)prev_block_ptr = result;\n    }\n    block_ptr = (uint *)FUN_0800500c(out_ptr,block_size);\n    if ((block_ptr != (uint *)0xffffffff) &&\n       ((remaining_size = (uint *)((int)block_ptr + 3U & 0xfffffffc), block_ptr == remaining_size ||\n        (remaining_size = (uint *)((int)remaining_size + FUN_0800500c(out_ptr,(int)remaining_size - (int)block_ptr)), remaining_size != (uint *)-1)))) {\n      *remaining_size = block_size;\nLAB_080049dc:\n      do_nothing_0800557e(out_ptr);\n      block_size = (int)remaining_size + 0xbU & 0xfffffff8;\n      remaining_size = (uint *)(block_size - (int)(remaining_size + 1));\n      if (remaining_size != 0) {\n        *(int *)((int)remaining_size + (int)block_ptr) = -remaining_size;\n        return block_size;\n      }\n      return block_size;\n    }\n    *out_ptr = 0xc;\n    do_nothing_0800557e(out_ptr);\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800500c",
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "FUN_08005374",
                "FUN_080054fc"
            ],
            "imported": true,
            "current_name": "allocate_memory_block_08004978"
        },
        "FUN_08002d0c": {
            "renaming": {
                "**param_1": "**ptr_param",
                "(*param_1)[5]": "(*ptr_param)[5]",
                "iVar1": "diff",
                "*(undefined *)((int)param_1 + 0x3a)": "*(uint8_t *)((int32_t)ptr_param + 0x3A)",
                "param_1": "ptr_param",
                "(*param_1)[3]": "(*ptr_param)[3]",
                "*(undefined *)((int)param_1 + 0x39)": "*(uint8_t *)((int32_t)ptr_param + 0x39)",
                "FUN_08002d0c": "check_and_modify_08002d0c",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "*(undefined *)(param_1 + 0xe)": "*(uint8_t *)(ptr_param + 0xE)"
            },
            "code": "uint32_t check_and_modify_08002d0c(uint32_t **ptr_param, uint32_t param_2, bool param_3, int32_t param_4, uint32_t param_5) {\n  int32_t diff;\n  while (true) {\n    uint32_t mask = ~**ptr_param;\n    if ((param_2 & mask) == 0 != param_3) {\n      return 0;\n    }\n    if (param_5 == 0xFFFFFFFF || (param_5 != 0 && (diff = FUN_08000e30() - param_4, (uint32_t)diff <= param_5))) {\n      break;\n    }\n  }\n  (*ptr_param)[3] &= 0xFFFFFE5F;\n  (*ptr_param)[5] &= 0xFFFFFFFE;\n  *(uint8_t *)((int32_t)ptr_param + 0x39) = 0x20;\n  *(uint8_t *)((int32_t)ptr_param + 0x3A) = 0x20;\n  *(uint8_t *)(ptr_param + 0xE) = 0;\n  return 3;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d0c",
            "calling": [
                "FUN_08002dd0"
            ],
            "imported": true,
            "current_name": "check_and_modify_08002d0c"
        },
        "FUN_08001902": {
            "renaming": {
                "FUN_08001902": "do_nothing_08001902"
            },
            "code": "\nvoid do_nothing_08001902(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001902",
            "calling": [
                "FUN_080019a0",
                "FUN_08001904"
            ],
            "imported": true,
            "current_name": "do_nothing_08001902"
        },
        "FUN_08001904": {
            "renaming": {
                "PTR_080015b8": "do_nothing_080015b8",
                "**param_1": "*current_char_ptr",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)string_ptr + 0x3d)",
                "*(undefined *)((int)param_1 + 0x3e)": "*(undefined *)((int)string_ptr + 0x3e)",
                "*puVar1": "*(char *)char_buffer_ptr",
                "param_1": "string_ptr",
                "*(char *)((int)param_1 + 0x3e)": "*(char *)((int)string_ptr + 0x3e)",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)string_ptr + 0x3d)",
                "(*param_1)[1]": "*(current_char_ptr + 1)",
                "PTR_08001902": "do_nothing_08001902",
                "*(ushort *)((int)param_1 + 0x2a)": "*char_count_ptr",
                "FUN_08001904": "process_string_08001904",
                "puVar1": "char_buffer_ptr"
            },
            "code": "unsigned int process_string_08001904(uint **string_ptr)\n{\n  unsigned int *current_char_ptr;\n  unsigned int *char_count_ptr;\n  unsigned int *char_buffer_ptr;\n  \n  current_char_ptr = *string_ptr;\n  if (*(char *)((int)string_ptr + 0x3d) == '\"') {\n    char_count_ptr = (unsigned int *)((int)string_ptr + 0x2a);\n    if (*char_count_ptr < 4) {\n      if (*char_count_ptr < 2) {\n        *current_char_ptr = *current_char_ptr & 0xfffffbff;\n        *(current_char_ptr + 1) = *(current_char_ptr + 1) & 0xfffff8ff;\n        char_buffer_ptr = string_ptr[9];\n        string_ptr[9] = (uint *)((int)char_buffer_ptr + 1);\n        *(char *)char_buffer_ptr = (char)(*current_char_ptr)[4];\n        *char_count_ptr = *char_count_ptr - 1;\n        *(undefined *)((int)string_ptr + 0x3d) = 0x20;\n        string_ptr[0xc] = (uint *)0x0;\n        if (*(char *)((int)string_ptr + 0x3e) == '@') {\n          *(undefined *)((int)string_ptr + 0x3e) = 0;\n          PTR_08001902();\n        }\n        else {\n          *(undefined *)((int)string_ptr + 0x3e) = 0;\n          PTR_080015b8();\n        }\n      }\n    }\n    else {\n      char_buffer_ptr = string_ptr[9];\n      string_ptr[9] = (uint *)((int)char_buffer_ptr + 1);\n      *(char *)char_buffer_ptr = (char)(*current_char_ptr)[4];\n      *char_count_ptr = *char_count_ptr - 1;\n      if (*char_count_ptr == 3) {\n        *(current_char_ptr + 1) = *(current_char_ptr + 1) & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001904",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "process_string_08001904"
        },
        "FUN_08000c64": {
            "renaming": {
                "in_r3": "in_register_3",
                "PTR_DAT_08000c78": "destination_address",
                "PTR_DAT_08000c74": "source_address",
                "FUN_08000c64": "execute_data_transfer_08000c64"
            },
            "code": "void execute_data_transfer_08000c64(void)\n{\n  undefined4 in_register_3;\n  uint32_t transfer_size = 0x10;\n  uint32_t PTR_DAT_08000c74 = (uint32_t)PTR_DAT_08000c74;\n  uint32_t PTR_DAT_08000c78 = (uint32_t)PTR_DAT_08000c78;\n  data_transfer(PTR_DAT_08000c74, PTR_DAT_08000c78, transfer_size, in_register_3, in_register_3);\n  return;\n}",
            "called": [
                "FUN_08000b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c64",
            "calling": [
                "FUN_08004658"
            ],
            "imported": true,
            "current_name": "execute_data_transfer_08000c64"
        },
        "FUN_08002ffc": {
            "renaming": {
                "iVar1": "result",
                "puVar3": "data_ptr",
                "FUN_08002f4c": "process_data_case3",
                "FUN_08002940": "process_data_case4",
                "param_1": "data",
                "do_nothing_08003f94": "do_nothing",
                "PTR_LAB_0800311c_1_08003118": "process_data_case5",
                "uVar2": "flags2",
                "uVar5": "flags",
                "FUN_08002ffc": "process_data_08002ffc",
                "uVar4": "flags3",
                "FUN_08002f66": "process_data_case1",
                "FUN_0800295c": "process_data_case2"
            },
            "code": "void process_data_08002ffc(uint **data)\n{\n  uint *data_ptr = *data;\n  uint flags = *data_ptr;\n  uint flags2 = data_ptr[3];\n  \n  if ((flags & 0xf) == 0 && (flags & 0x20) && (flags2 & 0x20))\n  {\n    process_data_08002ffc_case1(data);\n    return;\n  }\n  \n  if ((flags & 0xf) == 0 || ((data_ptr[5] & 1) == 0 && (flags2 & 0x120) == 0))\n  {\n    if ((flags & 0x80) && (flags2 & 0x80))\n    {\n      process_data_08002ffc_case2(data);\n      return;\n    }\n    \n    if ((flags & 0x40) && (flags2 & 0x40))\n    {\n      process_data_08002ffc_case3(data);\n    }\n  }\n  else\n  {\n    if ((flags & 1) && (flags2 & 0x100))\n    {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if ((flags & 4) && (data_ptr[5] & 1))\n    {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if ((flags & 2) && (data_ptr[5] & 1))\n    {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if ((flags & 8) && (data_ptr[5] & 1))\n    {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    \n    if (data[0xf] != (uint *)0x0)\n    {\n      if ((flags & 0x20) && (flags2 & 0x20))\n      {\n        process_data_08002ffc_case1(data);\n      }\n      if (((uint)data[0xf] & 8) == 0 && ((**data)[5] & 0x40) == 0)\n      {\n        do_nothing(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      process_data_08002ffc_case4(data);\n      \n      data_ptr = *data;\n      if ((data_ptr[5] & 0x40) == 0)\n      {\n        do_nothing(data);\n        return;\n      }\n      \n      data_ptr[5] &= 0xffffffbf;\n      if (data[0xd] == (uint *)0x0)\n      {\n        do_nothing(data);\n        return;\n      }\n      data[0xd][0x14] = (uint *)PTR_LAB_0800311c_1_08003118;\n      int result = function_call(data[0xd]);\n      if (result != 0)\n      {\n        (*(code *)data[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002f66",
                "FUN_0800295c",
                "FUN_08003f94",
                "FUN_08002940",
                "FUN_08002f4c",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ffc",
            "calling": [],
            "imported": true,
            "current_name": "process_data_08002ffc"
        },
        "FUN_0800387c": {
            "renaming": {
                "param_1": "value",
                "FUN_0800387c": "subtract_four_from_value_0800387c"
            },
            "code": "int subtract_four_from_value_0800387c(int value) {\n  return value - 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800387c",
            "calling": [
                "FUN_08003900",
                "FUN_080038d0",
                "FUN_08003880"
            ],
            "imported": true,
            "current_name": "subtract_four_from_value_0800387c"
        },
        "FUN_0800351e": {
            "renaming": {
                "uVar1": "result",
                "param_1": "input",
                "FUN_08003506": "calculate_result",
                "FUN_0800351e": "get_result_0800351e"
            },
            "code": "int get_result_0800351e(int input){\n  int result = -1;\n  if (input != 0) {\n    result = calculate_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800351e",
            "calling": [
                "FUN_0800447c",
                "FUN_08003cc8"
            ],
            "imported": true,
            "current_name": "get_result_0800351e"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "do_nothing_080059f8"
            },
            "code": "\nvoid do_nothing_080059f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "imported": true,
            "current_name": "do_nothing_080059f8"
        },
        "FUN_08002f66": {
            "renaming": {
                "sVar2": "remaining_chars",
                "*puVar3": "*void_ptr",
                "puVar3": "void_ptr",
                "param_1": "params",
                "pbVar1": "byte_ptr",
                "str": "string",
                "*pbVar1": "*byte_ptr",
                "FUN_08002f66": "encode_string_08002f66"
            },
            "code": "int encode_string_08002f66(int* params) {\n  char* str = (char*)(params + 0x3a);\n  if (*str != '\"') {\n    return 2;\n  }\n  if (params[2] == 0x1000) {\n    if (params[4] == 0) {\n      *(unsigned short*)params[10] = (unsigned short)((*(int*)(*params + 4)) << 0x17) >> 0x17;\n      params[10] += 2;\n    }\n    else {\n      *(unsigned short*)params[10] = (unsigned short)*(unsigned int*)(*params + 4) & 0xff;\n      params[10]++;\n    }\n  }\n  else if (params[4] == 0) {\n    *(char*)params[10] = *(unsigned int*)(*params + 4);\n    params[10]++;\n  }\n  else {\n    *(char*)params[10] = *(unsigned int*)(*params + 4) & 0x7f;\n    params[10]++;\n  }\n  short* remaining_chars = (short*)(params + 0x2e);\n  (*remaining_chars)--;\n  if (*remaining_chars != 0) {\n    return 0;\n  }\n  *(unsigned int*)(*params + 0xc) &= 0xfffffedf;\n  *(unsigned int*)(*params + 0x14) &= 0xfffffffe;\n  *str = ' ';\n  call_some_function();\n  return 0;\n}",
            "called": [
                "FUN_08003f24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f66",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": true,
            "current_name": "encode_string_08002f66"
        },
        "FUN_080034b6": {
            "renaming": {
                "FUN_08001198": "printMessage",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "FUN_080034b6": "printMessageIfParamIsZero_080034b6"
            },
            "code": "void printMessageIfParamIsZero_080034b6(int param1, int param2, int param3, int param4) {\n  if (param3 == 0) {\n    printMessage(param1, param2, 0, param4, param4);\n    return;\n  }\n  printMessage(param1, param2, 1, param4, param4);\n  return;\n}",
            "called": [
                "FUN_08001198"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034b6",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": true,
            "current_name": "printMessageIfParamIsZero_080034b6"
        },
        "FUN_08003eac": {
            "renaming": {
                "bVar1": "param_index",
                "*(char *)(param_1 + 0x5c)": "*(char *)(param_address + 0x5c)",
                "*(undefined4 *)(PTR_DAT_08003efc + (uint)*(byte *)(param_1 + 0x44) * 4)": "*(undefined4 *)(param_func1 + (uint)*(byte *)(param_address + 0x44) * 4)",
                "*(ushort *)(param_1 + 0x6e)": "*(uint16_t *)(param_address + 0x6e)",
                "PTR_DAT_08003efc": "param_func1",
                "FUN_08002eb2": "call_function",
                "param_1": "param_address",
                "*(int *)(PTR_DAT_08003ef8 + (uint)bVar1 * 4)": "*(int *)(param_addresses + (uint)param_index * 4)",
                "*(undefined4 *)(PTR_DAT_08003ef4 + (uint)bVar1 * 4)": "*(undefined4 *)(param_values + (uint)param_index * 4)",
                "*(byte *)(param_1 + 0x44)": "*(byte *)(param_address + 0x44)",
                "FUN_08000ec4": "send_to_device",
                "param_2": "new_param_value",
                "FUN_08000e60": "send_to_device",
                "*(int *)(param_1 + 0x68)": "*(int *)(param_address + 0x68)",
                "PTR_DAT_08003ef4": "param_values",
                "PTR_DAT_08003ef8": "param_addresses",
                "FUN_08003eac": "update_param_08003eac"
            },
            "code": "void update_param_08003eac(int param_address, int new_param_value)\n{\n  if (param_address != 0) {\n    byte param_index = *(byte *)(param_address + 0x44);\n    *(undefined4 *)(PTR_DAT_08003ef4 + (uint)bVar1 * 4) = new_param_value;\n    *(int *)(PTR_DAT_08003ef8 + (uint)bVar1 * 4) = param_address;\n    int char_value = *(char *)(param_address + 0x5c);\n    send_to_device(0, char_value, 2);\n    send_to_device(1, char_value, 0);\n    uint32_t func_param1 = *(undefined4 *)(PTR_DAT_08003efc + (uint)*(byte *)(param_1 + 0x44) * 4);\n    uint32_t func_param2 = *(uint16_t *)(param_address + 0x6e);\n    uint32_t func_param3 = *(int *)(param_address + 0x68);\n    uint32_t func_param4 = func_param2 + func_param3;\n    call_function(func_param1, func_param4, 1);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08002eb2",
                "FUN_08000ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": true,
            "current_name": "update_param_08003eac"
        },
        "FUN_08003e18": {
            "renaming": {
                "FUN_08003e18": "read_value_from_address_08003e18",
                "iVar1": "value",
                "get_value_from_table": "get_value_from_table",
                "FUN_08003dd0": "get_value_from_address",
                "param_1": "address",
                "write_value_to_address": "write_value_to_address",
                "param_2": "output_buffer",
                "param_3": "buffer_size",
                "param_4": "default_value",
                "PTR_DAT_08003e50": "table_address"
            },
            "code": "int read_value_from_address_08003e18(int address, char *output_buffer, int buffer_size, int default_value) {\n  if (address == 0) {\n    return -1;\n  }\n  int value = get_value_from_address();\n  if (value == 0) {\n    *output_buffer = *(char *)(address + 0x45);\n    write_value_to_address(get_value_from_table((uint)*(char *)(address + 0x44)), address + 0x45, 1, get_PTR_DAT_08003e50(), default_value);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e18",
            "calling": [
                "FUN_080042ac"
            ],
            "imported": true,
            "current_name": "read_value_from_address_08003e18"
        },
        "FUN_080040fc": {
            "renaming": {
                "FUN_080040fc": "set_pointer_value_080040fc",
                "0x16": "pointer_value",
                "PTR_DAT_08004108": "ptr_data"
            },
            "code": "void set_pointer_value_080040fc(void)\n{\n  int pointer_value = 22;\n  int* PTR_DAT_08004108 = (int*) PTR_DAT_08004108;\n  *PTR_DAT_08004108 = pointer_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040fc",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": true,
            "current_name": "set_pointer_value_080040fc"
        },
        "FUN_08002dd0": {
            "renaming": {
                "FUN_08002dd0": "encode_data_08002dd0",
                "iVar2": "encoding_result",
                "uVar1": "encoding_key",
                "param_1": "data_buffer",
                "param_2": "data_to_encode",
                "param_3": "data_length",
                "param_4": "param_4"
            },
            "code": "int encode_data_08002dd0(int *data_buffer, ushort *data_to_encode, int data_length, undefined4 param_4) {\n  undefined4 uVar1;\n  int encoding_result;\n  if (*(char *)((int)data_buffer + 0x39) == ' ') {\n    if (data_to_encode == (ushort *)0x0 || data_length == 0 || *(char *)(data_buffer + 0xe) == '\\x01') {\n      encoding_result = 1;\n    }\n    else {\n      *(undefined *)(data_buffer + 0xe) = 1;\n      data_buffer[0xf] = 0;\n      *(undefined *)((int)data_buffer + 0x39) = 0x21;\n      uVar1 = get_encoding_key();\n      *(short *)(data_buffer + 9) = (short)data_length;\n      *(short *)((int)data_buffer + 0x26) = (short)data_length;\n      while (*(short *)((int)data_buffer + 0x26) != 0) {\n        *(short *)((int)data_buffer + 0x26) = *(short *)((int)data_buffer + 0x26) + -1;\n        if (data_buffer[2] == 0x1000) {\n          encoding_result = encode_data_08002dd0_chunk(data_buffer,0x80,0,uVar1,param_4);\n          if (encoding_result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_buffer + 4) = *data_to_encode & 0x1ff;\n          if (data_buffer[4] == 0) {\n            data_to_encode = data_to_encode + 1;\n          }\n          else {\n            data_to_encode = (ushort *)((int)data_to_encode + 1);\n          }\n        }\n        else {\n          encoding_result = encode_data_08002dd0_chunk(data_buffer,0x80,0,uVar1,param_4);\n          if (encoding_result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_buffer + 4) = (uint)*(byte *)data_to_encode;\n          data_to_encode = (ushort *)((int)data_to_encode + 1);\n        }\n      }\n      encoding_result = encode_data_08002dd0_chunk(data_buffer,0x40,0,uVar1,param_4);\n      if (encoding_result == 0) {\n        *(undefined *)((int)data_buffer + 0x39) = 0x20;\n        *(undefined *)(data_buffer + 0xe) = 0;\n      }\n      else {\n        encoding_result = 3;\n      }\n    }\n  }\n  else {\n    encoding_result = 2;\n  }\n  return encoding_result;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dd0",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": true,
            "current_name": "encode_data_08002dd0"
        },
        "FUN_08004860": {
            "renaming": {
                "FUN_08004860": "process_data_and_call_func_08004860",
                "uStack_8": "temp1",
                "param_1": "data1",
                "uStack_4": "temp2",
                "param_2": "data2",
                "param_3": "ptr1",
                "param_4": "ptr2",
                "PTR_PTR_DAT_08004880": "function_pointer",
                "FUNC_08004a84": "call_function"
            },
            "code": "void process_data_and_call_func_08004860(int data1, int data2, int* ptr1, int* ptr2)\n{\n  int temp1 = *ptr1;\n  int temp2 = *ptr2;\n  call_function(*(int **)PTR_PTR_DAT_08004880, data1, data2, &temp1, data1, &temp1);\n  return;\n}",
            "called": [
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004860",
            "calling": [
                "FUN_08004808"
            ],
            "imported": true,
            "current_name": "process_data_and_call_func_08004860"
        },
        "FUN_08004622": {
            "renaming": {
                "FUN_08004622": "execute_function_08004622",
                "param_1": "function_pointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "FUN_080045c8": "call_function_with_args"
            },
            "code": "void execute_function_08004622(uint32_t *function_pointer, uint32_t arg1, uint32_t arg2, uint32_t arg3) {\n  if (arg2 != 0) {\n    uint32_t arg3_masked = arg3 & 0xff;\n    call_function_with_args(function_pointer, arg1, arg3_masked, arg3);\n    return;\n  }\n  call_function_with_args((void (**)(void))(*function_pointer), arg1 & 0xff, 0, (void (**)(void))(*function_pointer), arg3);\n  return;\n}",
            "called": [
                "FUN_080045c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004622",
            "calling": [
                "FUN_08004638"
            ],
            "imported": true,
            "current_name": "execute_function_08004622"
        },
        "FUN_08003414": {
            "renaming": {
                "iVar1": "int_value",
                "local_4c": "data_array",
                "param_1": "data_input",
                "FUN_08003414": "process_data_08003414",
                "FUN_08002864": "process_data_helper",
                "FUN_0800339c": "get_int_value",
                "FUN_080034f4": "calculate_value",
                "FUN_0800354a": "get_flag_value",
                "uVar2": "flag_value",
                "FUN_080028f0": "process_data_helper2",
                "FUN_0800268e": "final_data_processing",
                "PTR_DAT_08003468": "PTR_DAT_08003468"
            },
            "code": "void process_data_08003414(uint32_t data_input) {\n  int data_array[16];\n  data_array[0] = calculate_value(data_input, PTR_DAT_08003468);\n  if ((data_array[0] != 0) && ((((int_value = get_int_value(data_input), int_value == 0 || (int_value == 4)) || (int_value == 8)) || ((int_value == 0xc || (int_value == 0x18)))))) {\n    uint32_t flag_value = get_flag_value(data_input, PTR_DAT_08003468);\n    if ((flag_value & 0x100000) == 0) {\n      process_data_08003414_helper(data_array, int_value);\n    }\n    else {\n      process_data_08003414_helper2(data_array, int_value);\n    }\n    final_data_processing(data_array);\n  }\n  return;\n}",
            "called": [
                "FUN_0800339c",
                "FUN_080034f4",
                "FUN_080028f0",
                "FUN_08002864",
                "FUN_0800268e",
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003414",
            "calling": [
                "FUN_08004110"
            ],
            "imported": true,
            "current_name": "process_data_08003414"
        },
        "FUN_08005718": {
            "renaming": {
                "iVar2": "result",
                "param_1": "output",
                "FUN_08005718": "process_input_08005718",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "ptr"
            },
            "code": "void process_input_08005718(int *output, undefined4 input1, undefined4 input2, undefined4 input3)\n{\n  undefined *ptr = PTR_DAT_08005738;\n  *(undefined4 *)ptr = 0;\n  int result = execute_function(input1, input2, input3, input3, input3);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005718",
            "calling": [
                "FUN_08005662",
                "FUN_0800562a"
            ],
            "imported": true,
            "current_name": "process_input_08005718"
        },
        "FUN_080011c0": {
            "renaming": {
                "param_1[0x14]": "packet_type_flag",
                "packet_header_ptr": "packet_header_ptr",
                "param_1": "packet_data",
                "*(char *)((int)param_1 + 0x3e)": "*(char *)((int)packet_data + 0x3e)",
                "uint": "unsigned int",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)packet_data + 0x3d)",
                "param_1[0x11]": "packet_type",
                "FUN_080011c0": "decode_packet_080011c0",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(packet_header_ptr + 0x4)"
            },
            "code": "int decode_packet_080011c0(int *packet_data)\n{\n    int packet_type = packet_data[0x11];\n    int *packet_header_ptr = (int *)*packet_data;\n\n    if (*(char *)((int)packet_data + 0x3e) == '@') {\n        if (packet_data[0x14] == 0) {\n            *(uint *)(packet_header_ptr + 0x4) = packet_type & 0xfe;\n        }\n        else {\n            *(uint *)(packet_header_ptr + 0x4) = packet_type & 0xffU | 1;\n        }\n    }\n    else if (packet_data[4] == 0x4000) {\n        if (*(char *)((int)packet_data + 0x3d) == '!') {\n            *(uint *)(packet_header_ptr + 0x4) = packet_type & 0xfe;\n        }\n        else {\n            *(uint *)(packet_header_ptr + 0x4) = packet_type & 0xffU | 1;\n        }\n    }\n    else if (packet_data[0x14] == 0) {\n        *(uint *)(packet_header_ptr + 0x4) = (uint)(packet_type << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (packet_data[0x14] == 1) {\n        *(uint *)(packet_header_ptr + 0x4) = (uint)(packet_type << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011c0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "decode_packet_080011c0"
        },
        "FUN_08000b54": {
            "renaming": {
                "bVar1": "function_result",
                "iVar2": "temp1",
                "iVar3": "result",
                "param_1": "input_array",
                "unaff_r5": "input_length_uint",
                "param_2": "input_value",
                "param_3": "input_length",
                "FUN_08000b54": "process_input_08000b54"
            },
            "code": "int process_input_08000b54(int **input_array, int *input_value, int input_length) {\n  byte function_result;\n  int temp1;\n  uint input_length_uint;\n  int result;\n  \n  input_array[19] = input_value;\n  *(char *)((char *)input_array + 24) = (char)input_length;\n  if (*(byte *)((char *)input_array + 5) < 4) {\n    function_result = (**(code **)(**(int **)input_array + 8))();\n    input_length_uint = (uint)function_result;\n  }\n  if (input_length_uint == 0) {\n    result = 0;\n  }\n  else if ((int)input_length_uint < 8) {\n    result = 0;\n  }\n  else {\n    result = FUN_080006b4(input_array);\n    *(char *)(input_array + 2) = (char)result;\n    if (*(char *)((char *)input_array + 9) == *(char *)(input_array + 1)) {\n      temp1 = FUN_080007f0(input_array);\n      if (temp1 < 1) {\n        temp1 = FUN_08004204();\n        input_array[23] = (int *)((uint)*(ushort *)((char *)input_array + 86) + temp1);\n        *(undefined *)((char *)input_array + 8) = 0;\n        switch(*(undefined *)((char *)input_array + 10)) {\n        case 1:\n        case 2:\n          result = FUN_080008e2(input_array, input_value, input_length);\n          break;\n        case 3:\n        case 4:\n          result = FUN_08000998(input_array, input_value, input_length);\n          break;\n        case 5:\n          result = FUN_08000a00(input_array, input_value, input_length);\n          break;\n        case 6:\n          result = FUN_08000a4e(input_array, input_value, input_length);\n          break;\n        case 15:\n          result = FUN_08000a7a(input_array, input_value, input_length);\n          break;\n        case 16:\n          result = FUN_08000b04(input_array, input_value, input_length);\n        }\n      }\n      else {\n        if (temp1 != 0xff) {\n          FUN_080008cc(input_array, temp1);\n          FUN_0800076c(input_array);\n        }\n        *(char *)(input_array + 2) = (char)temp1;\n        result = (int)(char)temp1;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08000a7a",
                "FUN_08004204",
                "FUN_080006b4",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_080008cc",
                "FUN_0800076c",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b54",
            "calling": [
                "FUN_08000c64"
            ],
            "imported": true,
            "current_name": "process_input_08000b54"
        },
        "FUN_08000d96": {
            "renaming": {
                "FUN_08000d96": "do_nothing_08000d96"
            },
            "code": "\nvoid do_nothing_08000d96(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d96",
            "calling": [
                "FUN_08000de4"
            ],
            "imported": true,
            "current_name": "do_nothing_08000d96"
        },
        "FUN_0800376e": {
            "renaming": {
                "iVar1": "function_address",
                "code": "function_pointer",
                "FUN_08003750": "get_function_address",
                "PTR_": "",
                "DAT_": "",
                "FUN_0800376e": "execute_function_if_exists_0800376e"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ execute_function_if_exists_0800376e(DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_NDAT_PDAT_TDAT_RDAT__DAT_UDAT_PDAT_TDAT_RDAT__DAT_LDAT_PDAT_TDAT_RDAT__DAT_LDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": true,
            "current_name": "execute_function_if_exists_0800376e"
        },
        "FUN_08000d98": {
            "renaming": {
                "iVar1": "result",
                "PTR_DAT_08000ddc": "DIVISOR_PTR",
                "FUN_08000ee0": "check_divisor",
                "param_1": "param",
                "FUN_08000e60": "set_value",
                "PTR_DAT_08000de0": "VALUE_PTR",
                "FUN_08000d98": "check_param_within_bounds_08000d98",
                "PTR_DAT_08000dd8": "BYTE_PTR",
                "0xf": "UPPER_BOUND"
            },
            "code": "int check_param_within_bounds_08000d98(uint param)\n{\n  uint divisor = *(uint *)PTR_DAT_08000ddc / (1000 / (byte)*PTR_DAT_08000dd8);\n  int result = FUN_08000ee0(divisor);\n  if (result != 0) {\n    return 1;\n  }\n  if (param > 0xf) {\n    return 1;\n  }\n  FUN_08000e60(0xffffffff, param, 0);\n  *(uint *)PTR_DAT_08000de0 = param;\n  return 0;\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08000ee0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d98",
            "calling": [
                "FUN_08000de4",
                "FUN_08002488"
            ],
            "imported": true,
            "current_name": "check_param_within_bounds_08000d98"
        },
        "FUN_08003f48": {
            "renaming": {
                "iVar2": "function_pointer",
                "iVar3": "function_pointer",
                "uVar1": "random_index",
                "PTR_DAT_08003f8c": "function_pointer_array_2",
                "PTR_DAT_08003f88": "function_pointer_array",
                "PTR_DAT_08003f90": "parameter_array",
                "FUN_08003f00": "get_random_index",
                "FUN_08003f48": "execute_function_08003f48"
            },
            "code": "void execute_function_08003f48(void)\n{\n  uint random_index = get_random_index();\n  int function_pointer = *(int *)(PTR_DAT_08003f88 + random_index * 4);\n  if ((random_index < 10) && (function_pointer = (**(code **)(PTR_DAT_08003f8c + random_index * 4))(function_pointer), function_pointer != -1)) {\n    int parameter_1 = *(undefined4 *)(PTR_DAT_08003f90 + (uint)*(byte *)(function_pointer + 0x44) * 4);\n    int parameter_2 = *(int *)(function_pointer + 0x68) + (uint)*(ushort *)(function_pointer + 0x6e);\n    FUN_08002eb2(parameter_1, parameter_2, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_08002eb2",
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f48",
            "calling": [
                "FUN_08002f4c"
            ],
            "imported": true,
            "current_name": "execute_function_08003f48"
        },
        "FUN_0800340c": {
            "renaming": {
                "FUN_080035fc": "initialize_system",
                "FUN_0800340c": "call_function_on_startup_0800340c"
            },
            "code": "void call_function_on_startup_0800340c(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_080035fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800340c",
            "calling": [
                "FUN_0800268e"
            ],
            "imported": true,
            "current_name": "call_function_on_startup_0800340c"
        },
        "FUN_0800352e": {
            "renaming": {
                "param_1": "target_value",
                "*param_2": "*values",
                "param_2": "values",
                "FUN_0800352e": "find_value_0800352e"
            },
            "code": "unsigned int find_value_0800352e(short* values, int target_value) {\n  while( true ) {\n    if (*values == -1) {\n      return 0xffffffff;\n    }\n    if (*values == target_value) break;\n    values = values + 6;\n  }\n  return *(unsigned int *)(values + 4);\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800352e",
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "imported": true,
            "current_name": "find_value_0800352e"
        },
        "FUN_08001ab0": {
            "renaming": {
                "iVar1": "index",
                "FUN_08001ab0": "process_data_08001ab0",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "param_1": "data"
            },
            "code": "void process_data_08001ab0(uint **data)\n{\n  int index;\n  uint *ptr1;\n  uint *ptr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[12] = NULL;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[12] = NULL;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  ptr2 = *data;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[16] = NULL;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      do_nothing(data);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      process_data_08001ab0(data);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)data[13] + 0x35) == '\\x01') {\n      data[14][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      index = FUN_08000f8c(data[14]);\n      if (index != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          ptr2 = data[9];\n          data[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[14][0x14])();\n      }\n    }\n    else {\n      data[13][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      index = FUN_08000f8c(data[13]);\n      if (index != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[13][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[16] & 4) != 0)) {\n    data[11] = DAT_08001bf8;\n    data[12] = NULL;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    process_data_08001ab0(data);\n  }\n  return;\n}",
            "called": [
                "FUN_08003900",
                "FUN_08001aac",
                "FUN_080038d0",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "imported": true,
            "current_name": "process_data_08001ab0"
        },
        "FUN_08001f9c": {
            "renaming": {
                "iVar1": "start_time",
                "iVar2": "current_time",
                "FUN_08001f9c": "check_for_flag_08001f9c",
                "PTR_DAT_0800200c": "flag_data_ptr",
                "PTR_DAT_08002010": "flag_data_ptr2"
            },
            "code": "int check_for_flag_08001f9c(void)\n{\n  int start_time = get_current_time();\n  uint* flag_ptr = (uint*)(PTR_DAT_0800200c + 0x40);\n  *flag_ptr |= 0x10000000;\n  *PTR_DAT_0800200c = 1;\n  int current_time = get_current_time();\n  while ((uint)(current_time - start_time) < 0x3e9)\n  {\n    if ((*(uint*)(PTR_DAT_0800200c + 4) & 0x10000) != 0)\n    {\n      *PTR_DAT_08002010 = 1;\n      current_time = get_current_time();\n      while ((uint)(get_current_time() - current_time) < 0x3e9)\n      {\n        if ((*(uint*)(PTR_DAT_0800200c + 4) & 0x20000) != 0)\n        {\n          return 0;\n        }\n      }\n      return 3;\n    }\n    current_time = get_current_time();\n  }\n  return 3;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f9c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": true,
            "current_name": "check_for_flag_08001f9c"
        },
        "FUN_08000d8e": {
            "renaming": {
                "FUN_08000d8e": "execute_application_08000d8e",
                "FUN_080034ce": "initialize_application"
            },
            "code": "void execute_application_08000d8e(void)\n{\n  initialize_application();\n  return;\n}",
            "called": [
                "FUN_080034ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8e",
            "calling": [
                "FUN_08004648"
            ],
            "imported": true,
            "current_name": "execute_application_08000d8e"
        },
        "FUN_08004638": {
            "renaming": {
                "FUN_08004622": "initialize_application",
                "FUN_08004638": "execute_application_08004638"
            },
            "code": "void execute_application_08004638(void)\n{\n  initialize_application();\n  return;\n}",
            "called": [
                "FUN_08004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004638",
            "calling": [],
            "imported": true,
            "current_name": "execute_application_08004638"
        },
        "FUN_080008cc": {
            "renaming": {
                "*(undefined *)(param_1 + 0x49)": "*(undefined *)(address + 0x49)",
                "*(byte *)(param_1 + 10)": "*(byte *)(address + 10)",
                "*(undefined *)(param_1 + 0xb)": "*(undefined *)(address + 0xb)",
                "param_1": "address",
                "FUN_080008cc": "copy_data_080008cc",
                "*(undefined *)(param_1 + 4)": "*(undefined *)(address + 4)",
                "param_2": "data",
                "*(undefined *)(param_1 + 9)": "*(undefined *)(address + 9)"
            },
            "code": "void copy_data_080008cc(int address, undefined data) {\n  *(undefined *)(address + 9) = *(undefined *)(address + 4);\n  *(byte *)(address + 10) = *(byte *)(address + 10) ^ 0x80;\n  *(undefined *)(address + 0xb) = data;\n  *(undefined *)(address + 0x49) = 3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008cc",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "copy_data_080008cc"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "FUNC_08004a84"
            },
            "code": "\nint FUNC_08004a84(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_080053a0();\n  }\n  if (param_2 == PTR_DAT_08004c90) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08004c98) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08004c9c) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = FUN_080050d0(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_08004ac6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = FUN_08004a60(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08004c70;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = FUN_08000230(PTR_s___0__08004c94,*pbVar5);\n    puVar1 = PTR_DAT_08004ca0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__08004c94 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08004ba0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08004ba0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      param_3 = param_3 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar4 = false;\n      local_84 = 0;\n      iVar7 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = FUN_08000230(PTR_DAT_08004ca0,*param_3,3);\n  if (iVar7 != 0) {\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n    param_3 = param_3 + 1;\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = FUN_08000230(PTR_s_efgEFG_08004ca4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08004d9c(param_1,&local_88,param_2,DAT_08004cac,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_08004ca8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08004c22;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08004c70;\nLAB_08004c22:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_08004ac6;\n}\n\n",
            "called": [
                "FUN_080053a0",
                "FUN_08004d9c",
                "FUN_080050d0",
                "FUN_08004a60",
                "FUN_08000230"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_08004fdc",
                "FUN_08004860"
            ],
            "imported": true,
            "current_name": "FUNC_08004a84"
        },
        "FUN_08005608": {
            "renaming": {
                "iVar1": "param_value",
                "bVar3": "is_offset_valid",
                "param_1": "address",
                "value_offset": "value_offset",
                "FUN_08005608": "update_value_of_param_08005608",
                "param_2": "param_address",
                "uVar2": "new_value"
            },
            "code": "void update_value_of_param_08005608(int address, int param_address){\n  int param_value = *(short *)(param_address + 0xe);\n  int value_offset = FUN_0800573c(address, param_value);\n  bool is_offset_valid = value_offset >= 0;\n  uint new_value;\n  if (is_offset_valid) {\n    new_value = *(int *)(param_address + 0x54) + value_offset;\n  }\n  else {\n    new_value = *(ushort *)(param_address + 0xc) & 0xffffefff;\n  }\n  if (is_offset_valid) {\n    *(uint *)(param_address + 0x54) = new_value;\n  }\n  if (!is_offset_valid) {\n    *(short *)(param_address + 0xc) = (short)new_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005608",
            "calling": [],
            "imported": true,
            "current_name": "update_value_of_param_08005608"
        },
        "FUN_08002efa": {
            "renaming": {
                "*(char *)((int)param_1 + 0x3a)": "input_array[58]",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*input_array + 0x14)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[58]",
                "param_1": "input_array",
                "*(short *)((int)param_1 + 0x2e)": "*(short *)(input_array + 14)",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[15]",
                "FUN_08002efa": "validate_input_08002efa",
                "param_2": "array_size",
                "param_3": "input_value",
                "*(short *)(param_1 + 0xb)": "*(short *)(input_array + 11)",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]"
            },
            "code": "int validate_input_08002efa(int *input_array,int array_size,int input_value)\n{\n  if (input_array[10] != ' ')\n  {\n    return 2;\n  }\n  if (array_size == 0)\n  {\n    return 1;\n  }\n  if (input_value == 0)\n  {\n    return 1;\n  }\n  if (input_array[14] != '\\x01')\n  {\n    input_array[10] = array_size;\n    *(short *)(input_array + 11) = (short)input_value;\n    *(short *)(input_array + 14) = (short)input_value;\n    input_array[15] = 0;\n    input_array[58] = 0x22;\n    input_array[14] = 0;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efa",
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "imported": true,
            "current_name": "validate_input_08002efa"
        },
        "FUN_0800268c": {
            "renaming": {
                "FUN_0800268c": "do_nothing_0800268c"
            },
            "code": "\nvoid do_nothing_0800268c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268c",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": true,
            "current_name": "do_nothing_0800268c"
        },
        "FUN_08001aac": {
            "renaming": {
                "FUN_08001aac": "do_nothing_08001aac"
            },
            "code": "\nvoid do_nothing_08001aac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001aac",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": true,
            "current_name": "do_nothing_08001aac"
        },
        "FUN_0800377c": {
            "renaming": {
                "PTR_DAT_08003794 + 0x24": "secondValue",
                "FUN_080026ce": "executeFunction",
                "PTR_DAT_08003794": "firstValue",
                "FUN_0800377c": "checkAndExecuteIfNotNull_0800377c"
            },
            "code": "void checkAndExecuteIfNotNull_0800377c(void)\n{\n  int* PTR_DAT_08003794 = (int*) PTR_DAT_08003794;\n  int* PTR_DAT_08003794 + 0x24 = (int*) (PTR_DAT_08003794 + 0x24);\n  if (*PTR_DAT_08003794 != 0 || *PTR_DAT_08003794 + 0x24 != 0) {\n    executeFunction();\n  }\n  return;\n}",
            "called": [
                "FUN_080026ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800377c",
            "calling": [],
            "imported": true,
            "current_name": "checkAndExecuteIfNotNull_0800377c"
        },
        "FUN_0800268e": {
            "renaming": {
                "(int)param_1 + 0x39": "(*data)[57]",
                "*puVar1": "*data_ptr",
                "puVar1[8]": "data_ptr[8]",
                "param_1": "data",
                "(param_1 + 0xe)": "(*(data + 14))",
                "puVar1": "data_ptr",
                "FUN_0800268e": "update_data_0800268e",
                "FUN_0800340c": "update_data_helper"
            },
            "code": "void update_data_0800268e(uint **data)\n{\n  uint *data_ptr;\n  \n  (*data)[57] = 2;\n  data_ptr = *data;\n  if ((data_ptr[8] & 0x1111) == 0) {\n    if ((data_ptr[8] & 0x444) == 0) {\n      *data_ptr = *data_ptr & 0xfffffffe;\n    }\n  }\n  update_data_0800268e_helper(data);\n  (*data)[57] = 0;\n  (*(data + 14)) = 0;\n  return;\n}",
            "called": [
                "FUN_0800340c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268e",
            "calling": [
                "FUN_08003414"
            ],
            "imported": true,
            "current_name": "update_data_0800268e"
        },
        "FUN_080008e2": {
            "renaming": {
                "*(undefined *)(param_1 + 0x49)": "*(undefined *)(data_offset + 0x49)",
                "iVar1": "data_start",
                "*(undefined *)(param_1 + 0xb)": "*(undefined *)(data_offset + 0xb)",
                "*(char *)(param_1 + 0xb)": "*(char *)(data_offset + 0xb)",
                "iVar6": "byte_offset",
                "*(char *)(param_1 + 0x49)": "*(char *)(data_offset + 0x49)",
                "cVar5": "bit_val",
                "param_1": "data_offset",
                "*(byte *)(iVar6 + 9)": "*(byte *)(byte_offset + 9)",
                "param_2": "data_length",
                "*(ushort *)(param_2 + ((uVar3 + iVar1) * 0x100000 >> 0x18) * 2)": "*(ushort *)(data_length + byte_index * 2)",
                "uVar3": "i",
                "uVar2": "num_bits",
                "uVar4": "bit_index",
                "FUN_080008e2": "process_data_080008e2",
                "*(undefined *)(param_1 + 0xc)": "*(undefined *)(data_offset + 0xc)",
                "*(undefined *)(param_1 + 0xd)": "*(undefined *)(data_offset + 0xd)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(data_offset + 0xe)"
            },
            "code": "int process_data_080008e2(int data_offset,int data_length,undefined4 param_3,undefined4 param_4)\n{\n  int data_start = FUN_08004640(*(undefined *)(data_offset + 0xb),*(undefined *)(data_offset + 0xc),param_3,param_4,param_4);\n  uint num_bits = FUN_08004640(*(undefined *)(data_offset + 0xd),*(undefined *)(data_offset + 0xe));\n  char bit_val = (char)((num_bits << 0x15) >> 0x18);\n  if ((num_bits & 7) != 0) {\n    bit_val = bit_val + '\\x01';\n  }\n  *(char *)(data_offset + 0xb) = bit_val;\n  *(undefined *)(data_offset + 0x49) = 3;\n  uint bit_index = 0;\n  for (uint i = 0; i < num_bits; i++) {\n    uint byte_index = (i + data_start) * 0x100000 >> 0x18;\n    ushort bit_mask = (uint)*(ushort *)(data_length + byte_index * 2);\n    uint shifted_mask = (bit_mask >> (i + data_start & 0xf)) & 1U;\n    uint byte_offset = (uint)*(byte *)(data_offset + 0x49) + data_offset;\n    if (shifted_mask == 0) {\n      *(byte *)(byte_offset + 9) = *(byte *)(byte_offset + 9) & ~(byte)(1 << bit_index);\n    }\n    else {\n      *(byte *)(byte_offset + 9) = *(byte *)(byte_offset + 9) | (byte)(1 << bit_index);\n    }\n    bit_index = (bit_index + 1) & 0xff;\n    if (bit_index > 7) {\n      *(char *)(data_offset + 0x49) = *(char *)(data_offset + 0x49) + '\\x01';\n      bit_index = 0;\n    }\n  }\n  if ((num_bits & 7) != 0) {\n    *(char *)(data_offset + 0x49) = *(char *)(data_offset + 0x49) + '\\x01';\n  }\n  char result = *(char *)(data_offset + 0x49);\n  FUN_0800076c(data_offset);\n  return (int)(char)(result + '\\x02');\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008e2",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "process_data_080008e2"
        },
        "FUN_080045c8": {
            "renaming": {
                "param_1": "param_list",
                "local_15": "digits_buffer",
                "param_2": "num",
                "param_3": "base",
                "cVar1": "digit",
                "uVar3": "remainder",
                "uVar2": "result",
                "uVar4": "quotient",
                "pcVar5": "digits_list",
                "FUN_080045c8": "convert_base_080045c8"
            },
            "code": "undefined4 convert_base_080045c8(int *param_list, uint num, uint base) {\n  char digit;\n  undefined4 result;\n  uint quotient;\n  uint remainder;\n  char *digits_list;\n  char digits_buffer[9];\n  \n  digits_buffer[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  digits_list = digits_buffer + 1;\n  do {\n    quotient = num / base;\n    remainder = (num & 0xff) - ((int)(short)quotient * (int)(short)base & 0xffU) & 0xff;\n    digits_list = digits_list + -1;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *digits_list = digit;\n    num = quotient;\n  } while (quotient != 0);\n  if (digits_list == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = FUN_08000218(digits_list);\n    result = (**(code **)(*param_list + 4))(param_list,digits_list,result);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000218"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c8",
            "calling": [
                "FUN_08004622"
            ],
            "imported": true,
            "current_name": "convert_base_080045c8"
        },
        "FUN_08003d18": {
            "renaming": {
                "sVar1": "data_value",
                "FUN_08003d18": "process_data_08003d18",
                "iVar2": "start_time",
                "iVar3": "result",
                "PTR_DAT_08003dc0": "data_pointer_1",
                "PTR_DAT_08003dcc": "data_pointer_4",
                "param_1": "data",
                "check_data": "check_data",
                "param_2": "count",
                "process_data_2": "process_data_2",
                "uVar4": "i",
                "PTR_DAT_08003dc4": "data_pointer_2",
                "PTR_DAT_08003dc8": "data_pointer_3",
                "check_data_2": "check_data_2"
            },
            "code": "uint process_data_08003d18(undefined4 data, uint count)\n{\n  int start_time = get_current_time();\n  short data_value = *(short *)(PTR_DAT_08003dc0 + 0x9a);\n  int result = check_data(data_value, PTR_DAT_08003dc4);\n  if (result == 0) {\n    return 0;\n  }\n  uint i = 0;\n  while (i < 10 && ((*(int *)(PTR_DAT_08003dc8 + i * 4) == 0) || (result = check_data(data_value, PTR_DAT_08003dc4), **(int **)(PTR_DAT_08003dc8 + i * 4) != result))) {\n    i++;\n  }\n  if (i > 9) {\n    if (PTR_DAT_08003dcc[0x44] > 9 && check_data_2() > 9) {\n      return 0;\n    }\n    i = (uint)PTR_DAT_08003dcc[0x44];\n  }\n  do {\n    result = process_data_08003d18_2(*(undefined4 *)(PTR_DAT_08003dc8 + i * 4), data, count & 0xffff, 1000);\n    if (result == 0) {\n      return count;\n    }\n    start_time = get_current_time();\n  } while ((uint)(get_current_time() - start_time) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_080034f4",
                "FUN_08003cc8",
                "FUN_08002dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d18",
            "calling": [
                "FUN_080040ec"
            ],
            "imported": true,
            "current_name": "process_data_08003d18"
        },
        "FUN_08004640": {
            "renaming": {
                "FUN_08004640": "combine_bits_08004640",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "uint combine_bits_08004640(int value1, uint value2) {\n  return value2 | value1 << 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004640",
            "calling": [
                "FUN_08000a7a",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "imported": true,
            "current_name": "combine_bits_08004640"
        },
        "FUN_080034ce": {
            "renaming": {
                "FUN_08000c8c": "load_user_settings",
                "FUN_080034ce": "execute_main_function_080034ce",
                "FUN_08000de4": "initialize_network_connection"
            },
            "code": "void execute_main_function_080034ce(void)\n{\n  initialize_network_connection();\n  load_user_settings();\n  return;\n}",
            "called": [
                "FUN_08000de4",
                "FUN_08000c8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034ce",
            "calling": [
                "FUN_08000d8e"
            ],
            "imported": true,
            "current_name": "execute_main_function_080034ce"
        },
        "FUN_080047fe": {
            "renaming": {
                "FUN_080047fe": "swap_arguments_and_call_080047fe",
                "param_1": "arg1",
                "FUN_08004844": "call_function_with_swapped_arguments",
                "param_2": "arg2"
            },
            "code": "void swap_arguments_and_call_080047fe(void* arg1, void* arg2)\n{\n  call_function_with_swapped_arguments(arg2, arg1);\n  return;\n}",
            "called": [
                "FUN_08004844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047fe",
            "calling": [
                "FUN_080046b4"
            ],
            "imported": true,
            "current_name": "swap_arguments_and_call_080047fe"
        },
        "FUN_08001256": {
            "renaming": {
                "PTR_DAT_0800002e": "input[11]",
                "PTR_DAT_0800000c": "input[12]",
                "PTR_DAT_0800004c": "input[20]",
                "PTR_DAT_0800002a": "*(short *)((int)input + 0x2a)",
                "PTR_DAT_08000050": "input[4]",
                "FUN_08001256": "process_string_08001256",
                "param_1": "input",
                "puVar1": "current_ptr",
                "DAT_0800043d": "*(char *)((int)input + 0x3d)",
                "DAT_0800043e": "*(char *)((int)input + 0x3e)"
            },
            "code": "uint32_t process_string_08001256(uint32_t **input)\n{\n  uint32_t *current_ptr;\n  current_ptr = PTR_DAT_0800002e;\n  if ((DAT_0800043d == '\"') &&\n     ((PTR_DAT_0800004c != (uint32_t *)0x0 || (DAT_0800043e != '@')))) {\n    if ((PTR_DAT_0800004c == (uint32_t *)0x0) && (PTR_DAT_08000050 == (uint32_t *)0xc000)) {\n      **input = **input | 0x100;\n      PTR_DAT_0800004c = (uint32_t *)((int)PTR_DAT_0800004c + 1);\n    }\n    else {\n      if (PTR_DAT_0800002a == 0) {\n        **input = **input | 0x200;\n      }\n      else if (PTR_DAT_0800002a == 1) {\n        if (current_ptr == (uint32_t *)0xffff0000) {\n          **input = **input & 0xfffffbff;\n          current_ptr = *input;\n          if ((current_ptr[1] & 0x800) == 0) {\n            *current_ptr = *current_ptr | 0x200;\n          }\n          else {\n            *current_ptr = *current_ptr & 0xfffffbff;\n          }\n        }\n        else if (((current_ptr == (uint32_t *)0x4) || (current_ptr == (uint32_t *)0x8)) ||\n                (PTR_DAT_0800000c == (uint32_t *)0x12)) {\n          **input = **input & 0xfffffbff;\n          **input = **input | 0x200;\n        }\n        else if (PTR_DAT_0800002e == (uint32_t *)0x2) {\n          **input = **input | 0x400;\n        }\n        else {\n          **input = **input & 0xfffffbff;\n        }\n      }\n      else if (PTR_DAT_0800002a == 2) {\n        if (PTR_DAT_0800002e == (uint32_t *)0x2) {\n          **input = **input | 0x400;\n        }\n        else {\n          **input = **input & 0xfffffbff;\n          **input = **input | 0x800;\n        }\n        current_ptr = *input;\n        if ((current_ptr[1] & 0x800) != 0) {\n          current_ptr[1] = current_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **input = **input | 0x400;\n        current_ptr = *input;\n        if ((current_ptr[1] & 0x800) != 0) {\n          current_ptr[1] = current_ptr[1] | 0x1000;\n        }\n      }\n      PTR_DAT_0800004c = (uint32_t *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001256",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "process_string_08001256"
        },
        "FUN_08004884": {
            "renaming": {
                "iVar4": "function_list_size",
                "iVar5": "i",
                "puVar2": "second_function_list_start",
                "puVar3": "second_function_list_end",
                "FUN_08004884": "execute_functions_08004884",
                "puVar1": "function_list_start"
            },
            "code": "void execute_functions_08004884(void)\n{\n  undefined *function_list_start = PTR_DAT_080048bc;\n  undefined *function_list_end = PTR_DAT_080048c0;\n  undefined *second_function_list_start = PTR_DAT_080048c4;\n  undefined *second_function_list_end = PTR_DAT_080048c8;\n  int function_list_size = (int)function_list_end - (int)function_list_start;\n  int second_function_list_size = (int)second_function_list_end - (int)second_function_list_start;\n  for (int i = 0; i < function_list_size >> 2; i++) {\n    (**(code **)(function_list_start + i * 4))();\n  }\n  do_nothing_080059f8();\n  for (int i = 0; i < second_function_list_size >> 2; i++) {\n    (**(code **)(second_function_list_start + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_080059f8",
                "FUN_08004648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": true,
            "current_name": "execute_functions_08004884"
        },
        "FUN_08004648": {
            "renaming": {
                "FUN_08000d8e": "initialize_database_connection",
                "FUN_08000e3c": "initialize_logging",
                "FUN_08004648": "initialize_and_run_application_08004648"
            },
            "code": "void initialize_and_run_application_08004648(void)\n{\n  initialize_logging(3);\n  initialize_database_connection();\n  return;\n}",
            "called": [
                "FUN_08000e3c",
                "FUN_08000d8e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004648",
            "calling": [
                "FUN_08004884"
            ],
            "imported": true,
            "current_name": "initialize_and_run_application_08004648"
        },
        "FUN_08000600": {
            "renaming": {
                "FUN_08004388": "execute_subfunction",
                "iVar2": "result",
                "param_1": "function_ptr",
                "FUN_08000600": "execute_function_08000600",
                "param_2": "arg",
                "cVar1": "function_type",
                "PTR_DAT_08000668": "ptr_to_data"
            },
            "code": "void execute_function_08000600(int **function_ptr, undefined4 arg){\n  char function_type = *(char *)((int)function_ptr + 5);\n  int *PTR_DAT_08000668 = (int *)PTR_DAT_08000668;\n  if (function_type == '\\x02' || function_type == '\\x03' || function_type == '\\x01') {\n    *function_ptr = PTR_DAT_08000668;\n  }\n  else {\n    *function_ptr = PTR_DAT_08000668;\n  }\n  execute_subfunction(*function_ptr, arg, 6);\n  if (*(byte *)((int)function_ptr + 6) > 1) {\n    execute_subfunction(*(byte *)((int)function_ptr + 6), 1);\n    execute_subfunction(*(undefined *)((int)function_ptr + 6), 0);\n  }\n  int result;\n  do {\n    result = (**(code **)(**function_ptr + 0xc))();\n  } while (result >= -1);\n  *(undefined *)((int)function_ptr + 0x49) = 0;\n  *(undefined *)((int)function_ptr + 0x4a) = 0;\n  *(undefined2 *)(function_ptr + 0x15) = 0;\n  *(undefined2 *)((int)function_ptr + 0x52) = 0;\n  *(undefined2 *)(function_ptr + 0x14) = 0;\n  return;\n}",
            "called": [
                "FUN_080041bc",
                "FUN_08004388",
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000600",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": true,
            "current_name": "execute_function_08000600"
        },
        "FUN_080045be": {
            "renaming": {
                "param_1": "function_pointer",
                "FUN_080045be": "execute_function_pointer_080045be"
            },
            "code": "void execute_function_pointer_080045be(void *function_pointer) {\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045be",
            "calling": [],
            "imported": true,
            "current_name": "execute_function_pointer_080045be"
        },
        "FUN_08004646": {
            "renaming": {
                "FUN_08004646": "do_nothing_08004646"
            },
            "code": "\nvoid do_nothing_08004646(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004646",
            "calling": [
                "FUN_08004658"
            ],
            "imported": true,
            "current_name": "do_nothing_08004646"
        },
        "FUN_08000728": {
            "renaming": {
                "bVar1": "j",
                "param_1": "data_start",
                "FUN_08000728": "calculate_crc16_ccitt_08000728",
                "param_2": "data_len",
                "uVar3": "lsb",
                "uVar2": "crc",
                "uVar4": "i"
            },
            "code": "uint calculate_crc16_ccitt_08000728(int data_start, int data_len) {\n  uint crc = 0xffff;\n  for (uint i = 0; i < data_len; i++) {\n    crc ^= *(byte *)(data_start + i + 9);\n    for (uint j = 1; j < 9; j++) {\n      uint lsb = crc & 1;\n      crc >>= 1;\n      if (lsb != 0) {\n        crc ^= 0xa001;\n      }\n    }\n  }\n  return (crc & 0xff) << 8 | crc >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000728",
            "calling": [
                "FUN_0800076c"
            ],
            "imported": true,
            "current_name": "calculate_crc16_ccitt_08000728"
        },
        "FUN_0800354a": {
            "renaming": {
                "uVar1": "return_value",
                "param_1": "input_param",
                "FUN_0800354a": "check_param_0800354a",
                "FUN_0800352e": "call_function"
            },
            "code": "int check_param_0800354a(int input_param) {\n  int return_value;\n  if (input_param == -1) {\n    return_value = -1;\n  }\n  else {\n    return_value = call_function();\n  }\n  return return_value;\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800354a",
            "calling": [
                "FUN_0800339c",
                "FUN_08003380",
                "FUN_08003414",
                "FUN_08003978"
            ],
            "imported": true,
            "current_name": "check_param_0800354a"
        },
        "FUN_0800124a": {
            "renaming": {
                "array_value": "array_value",
                "param_1": "array",
                "ptr": "ptr",
                "PTR_": "",
                "array": "array",
                "FUN_0800124a": "set_value_from_array_index_0800124a",
                "DAT_": "",
                "array_index": "array_index"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ set_value_from_array_index_0800124a(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800124a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "set_value_from_array_index_0800124a"
        },
        "FUN_08004094": {
            "renaming": {
                "iVar1": "current_offset",
                "puVar2": "current_pointer",
                "param_1": "base_address",
                "FUN_08004094": "find_address_offset_08004094"
            },
            "code": "int find_address_offset_08004094(int base_address)\n{\n  int current_offset;\n  undefined *current_pointer;\n  \n  if (*(int *)PTR_DAT_080040c4 == 0) {\n    *(undefined **)PTR_DAT_080040c4 = PTR_DAT_080040c8;\n  }\n  current_offset = *(int *)PTR_DAT_080040c4;\n  current_pointer = (undefined *)(base_address + current_offset);\n  if (current_pointer <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_080040c4 = current_pointer;\n    return current_offset;\n  }\n  *(undefined4 *)PTR_DAT_080040cc = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004094",
            "calling": [
                "FUN_0800500c"
            ],
            "imported": true,
            "current_name": "find_address_offset_08004094"
        },
        "FUN_080033c8": {
            "renaming": {
                "PTR_": "",
                "DAT_080033d4": "data_memory_address",
                "FUN_080033c8": "clear_bit_in_memory_080033c8"
            },
            "code": "PTR_vPTR_oPTR_iPTR_dPTR_ clear_bit_in_memory_080033c8(PTR_vPTR_oPTR_iPTR_dPTR_)PTR_\nPTR_{PTR_\nPTR_ PTR_ PTR_uPTR_iPTR_nPTR_tPTR_3PTR_2PTR__PTR_tPTR_*PTR_ PTR_pPTR_tPTR_rPTR_ PTR_=PTR_ PTR_(PTR_uPTR_iPTR_nPTR_tPTR_3PTR_2PTR__PTR_tPTR_*PTR_)PTR_(PTR_DPTR_APTR_TPTR__PTR_0PTR_8PTR_0PTR_0PTR_3PTR_3PTR_dPTR_4PTR_ PTR_+PTR_ PTR_0PTR_xPTR_4PTR_0PTR_)PTR_;PTR_\nPTR_ PTR_ PTR_uPTR_iPTR_nPTR_tPTR_3PTR_2PTR__PTR_tPTR_ PTR_mPTR_aPTR_sPTR_kPTR_ PTR_=PTR_ PTR_0PTR_xPTR_dPTR_fPTR_fPTR_fPTR_fPTR_fPTR_fPTR_fPTR_;PTR_\nPTR_ PTR_ PTR_*PTR_pPTR_tPTR_rPTR_ PTR_=PTR_ PTR_(PTR_*PTR_pPTR_tPTR_rPTR_)PTR_ PTR_&PTR_ PTR_mPTR_aPTR_sPTR_kPTR_;PTR_\nPTR_ PTR_ PTR_rPTR_ePTR_tPTR_uPTR_rPTR_nPTR_;PTR_\nPTR_}PTR_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033c8",
            "calling": [
                "FUN_08000f56"
            ],
            "imported": true,
            "current_name": "clear_bit_in_memory_080033c8"
        },
        "FUN_080031fc": {
            "renaming": {
                "FUN_080031fc": "set_flag_080031fc",
                "DAT_0800336c": "result_6",
                "DAT_0800337c": "result_10",
                "uVar1": "result",
                "DAT_0800335c": "result_2",
                "DAT_08003378": "result_9",
                "DAT_08003358": "result_1",
                "param_1": "flag_index",
                "DAT_08003368": "result_5",
                "DAT_08003370": "result_7",
                "DAT_08003350": "flag_ptr",
                "DAT_08003360": "result_3",
                "DAT_08003374": "result_8",
                "DAT_08003354": "result_0",
                "DAT_08003364": "result_4"
            },
            "code": "uint32_t set_flag_080031fc(uint32_t flag_index) {\n  uint32_t* DAT_08003350 = (uint32_t*) (DAT_08003350 + 0x30);\n  uint32_t flag_value = 1 << flag_index;\n  *DAT_08003350 |= flag_value;\n  uint32_t result = 0;\n  switch(flag_index) {\n    case 0:\n      result = DAT_08003354;\n      break;\n    case 1:\n      result = DAT_08003358;\n      break;\n    case 2:\n      result = DAT_0800335c;\n      break;\n    case 3:\n      result = DAT_08003360;\n      break;\n    case 4:\n      result = DAT_08003364;\n      break;\n    case 5:\n      result = DAT_08003368;\n      break;\n    case 6:\n      result = DAT_0800336c;\n      break;\n    case 7:\n      result = DAT_08003370;\n      break;\n    case 8:\n      result = DAT_08003374;\n      break;\n    case 9:\n      result = DAT_08003378;\n      break;\n    case 10:\n      result = DAT_0800337c;\n      break;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031fc",
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "imported": true,
            "current_name": "set_flag_080031fc"
        },
        "FUN_08000690": {
            "renaming": {
                "FUN_08000690": "check_param_and_execute_08000690",
                "FUN_08000682": "execute_function",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "void check_param_and_execute_08000690(int param1, int param2, undefined4 param3, undefined4 param4)\n{\n  if (param1 == 1 && param2 == 0xffff) {\n    execute_function(PTR_DAT_080006b0, 1, 0, 0, param4);\n  }\n  return;\n}",
            "called": [
                "FUN_08000682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000690",
            "calling": [],
            "imported": true,
            "current_name": "check_param_and_execute_08000690"
        },
        "FUN_080054fc": {
            "renaming": {
                "iVar2": "temp_var_1",
                "uVar1": "flag",
                "FUN_080054fc": "process_data_080054fc",
                "param_1": "data",
                "local_18": "local_data_1",
                "param_2": "data_array",
                "local_14": "local_data_2"
            },
            "code": "void process_data_080054fc(int data, int *data_array) {\n  ushort flag;\n  int temp_var_1;\n  int temp_var_2;\n  int local_data_1;\n  int *local_data_2;\n  \n  if ((int)((uint)*(ushort *)(data_array + 3) << 0x1e) >= 0) {\n    local_data_1 = data;\n    local_data_2 = data_array;\n    flag = get_flag(data, data_array, &local_data_1, &local_data_2);\n    temp_var_1 = calculate_val(data, local_data_1);\n    if (temp_var_1 != 0) {\n      *(undefined **)(data + 0x28) = PTR_LAB_08005320_1_08005578;\n      *data_array = temp_var_1;\n      *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x80;\n      data_array[5] = local_data_1;\n      data_array[4] = temp_var_1;\n      if ((local_data_2 != (int *)0x0) &&\n         (temp_var_2 = process_data_080054fc(data, (int)*(short *)((int)data_array + 0xe)), temp_var_2 != 0)) {\n        *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data_array + 3) = flag | *(ushort *)(data_array + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data_array + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 2;\n  }\n  *data_array = (int)data_array + 0x47;\n  data_array[4] = (int)data_array + 0x47;\n  data_array[5] = 1;\n  return;\n}",
            "called": [
                "FUN_080056f8",
                "FUN_080054b4",
                "FUN_08004978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054fc",
            "calling": [
                "FUN_080050d0"
            ],
            "imported": true,
            "current_name": "process_data_080054fc"
        },
        "FUN_08001420": {
            "renaming": {
                "param_1[9]": "current_position",
                "FUN_08001420": "read_byte_from_buffer_08001420",
                "param_1": "buffer",
                "pbVar1": "byte_buffer",
                "*(short *)((int)param_1 + 0x2a)": "remaining_bytes",
                "*(uint *)(*param_1 + 0x10)": "byte_read"
            },
            "code": "int read_byte_from_buffer_08001420(int *buffer) {\n  int *current_position = buffer + 9;\n  short remaining_bytes = *(short *)(buffer + 42);\n  if (remaining_bytes != 0) {\n    byte *byte_buffer = (byte *)*current_position;\n    *current_position = (int)(byte_buffer + 1);\n    uint byte_read = (uint)*byte_buffer;\n    *(uint *)(*buffer + 16) = byte_read;\n    *(short *)(buffer + 42) = remaining_bytes - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001420",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "read_byte_from_buffer_08001420"
        },
        "FUN_080026ca": {
            "renaming": {
                "FUN_080026ca": "do_nothing_080026ca"
            },
            "code": "\nvoid do_nothing_080026ca(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ca",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": true,
            "current_name": "do_nothing_080026ca"
        },
        "FUN_08000de4": {
            "renaming": {
                "FUN_08000de4": "set_flags_and_call_functions_08000de4",
                "*DAT_08000e14": "*flags_ptr",
                "FUN_08000e3c": "call_function_with_parameter_3",
                "do_nothing_08000d96": "do_nothing",
                "puVar1": "flags_ptr",
                "FUN_08000d98": "call_function_with_parameter_1"
            },
            "code": "int set_flags_and_call_functions_08000de4(void)\n{\n  uint *DAT_08000e14;\n  flags_ptr = DAT_08000e14;\n  *DAT_08000e14 |= 0x200;\n  *DAT_08000e14 |= 0x400;\n  *DAT_08000e14 |= 0x100;\n  call_function_with_parameter_3(3);\n  call_function_with_parameter_1(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08000d96",
                "FUN_08000e3c",
                "FUN_08000d98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000de4",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": true,
            "current_name": "set_flags_and_call_functions_08000de4"
        },
        "FUN_080026ce": {
            "renaming": {
                "do_nothing_080026ca": "do_nothing",
                "do_nothing_080026cc": "do_nothing_5",
                "iVar1": "ptr1",
                "FUN_08003754": "do_something_1",
                "*(uint *)(*param_array + 0x1c)": "flag5",
                "param_1": "param_array",
                "FUN_080026ce": "process_flags_080026ce",
                "*(undefined *)(param_1 + 6)": "flag3",
                "*(uint *)(*param_array + 0x18)": "flag4",
                "do_nothing_0800293c": "do_nothing_6",
                "do_nothing_080026c8": "do_nothing_2",
                "do_nothing_0800293e": "do_nothing_4",
                "*(undefined4 *)(iVar1 + 0x10)": "flag1",
                "FUN_0800376e": "do_something_3",
                "*(uint *)(iVar1 + 0xc)": "flag2",
                "*(uint *)(iVar1 + 0x10)": "flag1"
            },
            "code": "void process_flags_080026ce(int *param_array)\n{\n  int ptr1 = *param_array;\n  uint flag1 = *(uint *)(ptr1 + 0x10);\n  uint flag2 = *(uint *)(ptr1 + 0xc);\n\n  if ((flag1 & 2) && (flag2 & 2)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xfffffffd;\n    *(undefined *)(param_array + 6) = 1;\n    if ((*(uint *)(*param_array + 0x18) & 3) == 0) {\n      do_something_1();\n      do_nothing(param_array);\n    }\n    else {\n      do_nothing_2();\n    }\n    *(undefined *)(param_array + 6) = 0;\n  }\n\n  ptr1 = *param_array;\n  flag1 = *(uint *)(ptr1 + 0x10);\n  flag2 = *(uint *)(ptr1 + 0xc);\n\n  if ((flag1 & 4) && (flag2 & 4)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xfffffffb;\n    *(undefined *)(param_array + 6) = 2;\n    if ((*(uint *)(*param_array + 0x18) & 0x300) == 0) {\n      do_something_1(param_array);\n      do_nothing(param_array);\n    }\n    else {\n      do_nothing_2(param_array);\n    }\n    *(undefined *)(param_array + 6) = 0;\n  }\n\n  ptr1 = *param_array;\n  flag1 = *(uint *)(ptr1 + 0x10);\n  flag2 = *(uint *)(ptr1 + 0xc);\n\n  if ((flag1 & 8) && (flag2 & 8)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xfffffff7;\n    *(undefined *)(param_array + 6) = 4;\n    if ((*(uint *)(*param_array + 0x1c) & 3) == 0) {\n      do_something_1(param_array);\n      do_nothing(param_array);\n    }\n    else {\n      do_nothing_2(param_array);\n    }\n    *(undefined *)(param_array + 6) = 0;\n  }\n\n  ptr1 = *param_array;\n  flag1 = *(uint *)(ptr1 + 0x10);\n  flag2 = *(uint *)(ptr1 + 0xc);\n\n  if ((flag1 & 0x10) && (flag2 & 0x10)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xffffffef;\n    *(undefined *)(param_array + 6) = 8;\n    if ((*(uint *)(*param_array + 0x1c) & 0x300) == 0) {\n      do_something_1(param_array);\n      do_nothing(param_array);\n    }\n    else {\n      do_nothing_2(param_array);\n    }\n    *(undefined *)(param_array + 6) = 0;\n  }\n\n  ptr1 = *param_array;\n  flag1 = *(uint *)(ptr1 + 0x10);\n  flag2 = *(uint *)(ptr1 + 0xc);\n\n  if ((flag1 & 1) && (flag2 & 1)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xfffffffe;\n    do_something_3(param_array);\n  }\n\n  ptr1 = *param_array;\n  flag1 = *(uint *)(ptr1 + 0x10);\n  flag2 = *(uint *)(ptr1 + 0xc);\n\n  if ((flag1 & 0x80) && (flag2 & 0x80)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xffffff7f;\n    do_nothing_4(param_array);\n  }\n\n  ptr1 = *param_array;\n  flag1 = *(uint *)(ptr1 + 0x10);\n  flag2 = *(uint *)(ptr1 + 0xc);\n\n  if ((flag1 & 0x40) && (flag2 & 0x40)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xffffffbf;\n    do_nothing_5(param_array);\n  }\n\n  ptr1 = *param_array;\n  flag1 = *(uint *)(ptr1 + 0x10);\n  flag2 = *(uint *)(ptr1 + 0xc);\n\n  if ((flag1 & 0x20) && (flag2 & 0x20)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xffffffdf;\n    do_nothing_6(param_array);\n  }\n  return;\n}",
            "called": [
                "FUN_0800293e",
                "FUN_0800293c",
                "FUN_0800376e",
                "FUN_080026cc",
                "FUN_080026c8",
                "FUN_080026ca",
                "FUN_08003754"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ce",
            "calling": [
                "FUN_0800377c"
            ],
            "imported": true,
            "current_name": "process_flags_080026ce"
        },
        "FUN_080026cc": {
            "renaming": {
                "FUN_080026cc": "do_nothing_080026cc"
            },
            "code": "\nvoid do_nothing_080026cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026cc",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": true,
            "current_name": "do_nothing_080026cc"
        },
        "FUN_08000218": {
            "renaming": {
                "pcVar2": "current_ptr",
                "pcVar3": "current_ptr",
                "param_1": "str",
                "FUN_08000218": "find_end_of_string_08000218",
                "cVar1": "current_char"
            },
            "code": "char* find_end_of_string_08000218(char* str) {\n  char current_char;\n  char* current_ptr = str;\n  do {\n    current_ptr++;\n    current_char = *current_ptr;\n  } while (current_char != '\\0');\n  return current_ptr + (-1 - (int)str);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000218",
            "calling": [
                "FUN_080045c8"
            ],
            "imported": true,
            "current_name": "find_end_of_string_08000218"
        },
        "FUN_0800339c": {
            "renaming": {
                "iVar1": "result",
                "param_1": "input1",
                "FUN_0800339c": "get_result_0800339c",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "shifted_result"
            },
            "code": "int get_result_0800339c(uint input1, uint input2, uint input3, uint input4)\n{\n  int result = calculate_result(input1, PTR_DAT_080033c4, input3, input4, input4);\n  uint shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800339c",
            "calling": [
                "FUN_08003414"
            ],
            "imported": true,
            "current_name": "get_result_0800339c"
        },
        "FUN_0800557e": {
            "renaming": {
                "FUN_0800557e": "do_nothing_0800557e"
            },
            "code": "\nvoid do_nothing_0800557e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557e",
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "imported": true,
            "current_name": "do_nothing_0800557e"
        },
        "FUN_08000e60": {
            "renaming": {
                "uVar1": "shift_amount",
                "param_1": "bit_offset",
                "masked_value": "masked_value",
                "param_2": "bit_mask",
                "param_3": "value",
                "FUN_08000e60": "update_bits_08000e60",
                "uVar2": "shift_distance"
            },
            "code": "void update_bits_08000e60(uint bit_offset, uint bit_mask, uint value) {\n  uint shift_amount = (*(int *)(DAT_08000ebc + 0xc) << 0x15) >> 0x1d;\n  uint shift_distance = 7 - shift_amount;\n  if (shift_distance > 3) {\n    shift_distance = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  uint masked_value = (bit_mask & (1 << (shift_distance & 0xff)) - 1U) << (shift_amount & 0xff) | (1 << (shift_amount & 0xff)) - 1U & value;\n  if ((int)bit_offset < 0) {\n    *(char *)(DAT_08000ec0 + (bit_offset & 0xf)) = (char)(masked_value << 4);\n  }\n  else {\n    *(char *)(bit_offset + 0xe000e400) = (char)(masked_value << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e60",
            "calling": [
                "FUN_08000c8c",
                "FUN_08003e54",
                "FUN_08000d98",
                "FUN_08003eac"
            ],
            "imported": true,
            "current_name": "update_bits_08000e60"
        },
        "FUN_0800557c": {
            "renaming": {
                "FUN_0800557c": "do_nothing_0800557c"
            },
            "code": "\nvoid do_nothing_0800557c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557c",
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "imported": true,
            "current_name": "do_nothing_0800557c"
        },
        "FUN_0800165a": {
            "renaming": {
                "uVar1": "value",
                "param_1": "data_ptr",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "FUN_0800165a": "process_data_0800165a",
                "uVar2": "flags"
            },
            "code": "int process_data_0800165a(int *data_ptr, int arg2, int arg3, int arg4)\n{\n  int flags = *(uint *)(*data_ptr + 0x18);\n  int value;\n  if ((flags & 0x80) == 0) {\n    value = *(int *)(data_ptr + 3);\n  }\n  else {\n    value = *(int *)(data_ptr + 6);\n  }\n  call_function(data_ptr, (flags & 4) == 0, value, flags, arg4);\n  return 0;\n}",
            "called": [
                "FUN_08003880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800165a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "process_data_0800165a"
        },
        "FUN_08000b04": {
            "renaming": {
                "bVar2": "output_length",
                "bVar1": "data_length",
                "FUN_08004640": "process",
                "param_1": "data_pointer",
                "param_2": "output_pointer",
                "cVar3": "counter",
                "uVar5": "index",
                "uVar4": "processed_data",
                "FUN_0800076c": "process_end",
                "FUN_08000b04": "process_data_08000b04"
            },
            "code": "int process_data_08000b04(int data_pointer, int output_pointer) {\n  byte data_length;\n  byte output_length;\n  char counter;\n  undefined2 processed_data;\n  uint index;\n  data_length = *(byte *)(data_pointer + 0xc);\n  output_length = *(byte *)(data_pointer + 0xe);\n  *(undefined *)(data_pointer + 0xd) = 0;\n  *(byte *)(data_pointer + 0xe) = output_length;\n  *(undefined *)(data_pointer + 0x49) = 6;\n  for (index = 0; index < output_length; index = index + 1 & 0xff) {\n    processed_data = process(*(undefined *)(index * 2 + data_pointer + 0x10),\n                             *(undefined *)(data_pointer + (index + 4) * 2 + 9));\n    *(undefined2 *)(output_pointer + (data_length + index) * 2) = processed_data;\n  }\n  counter = *(char *)(data_pointer + 0x49);\n  process_end(data_pointer);\n  return (int)(char)(counter + '\\x02');\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b04",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "process_data_08000b04"
        },
        "FUN_0800262c": {
            "renaming": {
                "param_1": "param_pointer",
                "is_flag_1_set": "is_flag_1_set",
                "DAT_08002688": "DAT_08002688",
                "is_flag_3_set": "is_flag_3_set",
                "is_flag_4_set": "is_flag_4_set",
                "FUN_0800262c": "check_and_update_flags_0800262c",
                "is_flag_2_set": "is_flag_2_set"
            },
            "code": "void check_and_update_flags_0800262c(int *param_pointer)\n{\n  bool is_flag_1_set = (*(uint *)(*param_pointer + 0xc) & 0x100) != 0;\n  bool is_flag_2_set = (*(uint *)(*param_pointer + 8) & 0x1000) != 0;\n  if (is_flag_1_set && is_flag_2_set) {\n    call_function_08003594();\n    *(uint *)(*param_pointer + 0xc) = *(uint *)(*param_pointer + 0xc) & 0xff | 0xfffffe7f;\n  }\n  bool is_flag_3_set = (*(uint *)(*param_pointer + 0xc) & 0x200) != 0;\n  bool is_flag_4_set = (*(uint *)(*param_pointer + 8) & 0x2000) != 0;\n  if (is_flag_3_set && is_flag_4_set) {\n    do_nothing_0800268c(param_pointer);\n    *(uint *)(*param_pointer + 0xc) = *(uint *)(*param_pointer + 0xc) & 0xff | 0xfffffd7f;\n  }\n  *(undefined4 *)(DAT_08002688 + 0x14) = 0x20000;\n  *(undefined *)((int)param_pointer + 0x1d) = 1;\n  return;\n}",
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800262c",
            "calling": [],
            "imported": true,
            "current_name": "check_and_update_flags_0800262c"
        },
        "FUN_08004388": {
            "renaming": {
                "bVar1": "flag_bits",
                "FUN_08004388": "set_flags_08004388",
                "iVar2": "num_flags",
                "param_1": "obj",
                "UNRECOVERED_JUMPTABLE": "jumptable",
                "param_2": "value",
                "param_3": "flags",
                "FUN_08004808": "set_func3",
                "FUN_08003e54": "set_func2",
                "FUNC_08003978": "set_func"
            },
            "code": "void set_flags_08004388(int obj, int value, byte flags) {\n  uint idx;\n  byte flag_bits;\n  int num_flags;\n  code *jumptable;\n  *(int *)(obj + 0x11c) = value;\n  *(byte *)(obj + 0x144) = flags;\n  flag_bits = flags & 7;\n  if (flag_bits == 4) {\n    num_flags = 7;\n  }\n  else if (flag_bits == 6) {\n    num_flags = 8;\n  }\n  else if (flag_bits == 2) {\n    num_flags = 6;\n  }\n  else {\n    num_flags = 0;\n  }\n  if ((flags & 0x30) == 0x30) {\n    *(int *)(obj + 0x128) = 0x600;\n    num_flags++;\n  }\n  else if ((flags & 0x20) == 0) {\n    *(int *)(obj + 0x128) = 0;\n  }\n  else {\n    *(int *)(obj + 0x128) = 0x400;\n    num_flags++;\n  }\n  if ((flags & 8) == 0) {\n    *(int *)(obj + 0x124) = 0;\n  }\n  else {\n    *(int *)(obj + 0x124) = 0x2000;\n  }\n  if (num_flags == 8) {\n    *(int *)(obj + 0x120) = 0;\n  }\n  else if (num_flags == 9) {\n    *(int *)(obj + 0x120) = 0x1000;\n  }\n  else {\n    num_flags = 0;\n  }\n  if (num_flags != 0) {\n    set_func(obj + 0xd4);\n    set_func2(obj + 0xd4,uRam08004434);\n    return;\n  }\n  jumptable = (code *)0x8004432;\n  set_func3(uRam08004440,299,uRam0800443c);\n  idx = (uint)(extraout_r1 < 0x60);\n  uRam0000012e = *(undefined2 *)(PTR_DAT_0800445c + idx * 2);\n  (*jumptable)();\n  return;\n}",
            "called": [
                "FUN_08004808",
                "FUN_08003e54",
                "FUN_08003978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004388",
            "calling": [
                "FUN_08000600"
            ],
            "imported": true,
            "current_name": "set_flags_08004388"
        },
        "FUN_080051ac": {
            "renaming": {
                "uVar10": "value_3",
                "bVar11": "flag_1",
                "uVar12": "value_4",
                "iVar2": "index_1",
                "FUN_080051ac": "process_data_080051ac",
                "piVar4": "index_3_ptr",
                "iVar7": "index_4",
                "piVar3": "index_2_ptr",
                "iVar9": "index_5",
                "UNRECOVERED_JUMPTABLE_00": "jump_table_1",
                "puVar1": "data_ptr",
                "uVar5": "value_1",
                "uVar6": "value_2",
                "pcVar8": "function_ptr_1"
            },
            "code": "void process_data_080051ac(void)\n{\n  uint *data_ptr;\n  int index_1;\n  int *index_2_ptr;\n  int *index_3_ptr;\n  uint value_1;\n  ushort value_2;\n  int index_4;\n  code *function_ptr_1;\n  int index_5;\n  uint value_3;\n  code *jump_table_1;\n  bool flag_1;\n  undefined8 value_4;\n  \n  init(6);\n  jump_table_1 = (code *)0x80051bb;\n  value_4 = get_data(1);\n  index_2_ptr = (int *)((ulonglong)value_4 >> 0x20);\n  data_ptr = (uint *)value_4;\n  value_2 = *(ushort *)(index_2_ptr + 3);\n  value_1 = (uint)value_2;\n  if ((int)(value_1 << 0x1c) < 0) {\n    index_1 = index_2_ptr[4];\n    if (index_1 != 0) {\n      index_4 = value_1 << 0x1e;\n      flag_1 = index_4 == 0;\n      index_5 = *index_2_ptr;\n      if (flag_1) {\n        index_4 = index_2_ptr[5];\n      }\n      *index_2_ptr = index_1;\n      if (!flag_1) {\n        index_4 = 0;\n      }\n      index_2_ptr[2] = index_4;\n      for (index_5 = index_5 - index_1; 0 < index_5; index_5 = index_5 - index_4) {\n        index_4 = (*(code *)index_2_ptr[10])(data_ptr,index_2_ptr[8],index_1,index_5);\n        if (index_4 < 1) {\n          value_2 = *(ushort *)(index_2_ptr + 3);\n          goto LAB_080052b2;\n        }\n        index_1 = index_1 + index_4;\n      }\n    }\n  }\n  else if (((0 < index_2_ptr[1]) || (0 < index_2_ptr[0x10])) &&\n          (function_ptr_1 = (code *)index_2_ptr[0xb], function_ptr_1 != (code *)0x0)) {\n    value_3 = *data_ptr;\n    *data_ptr = 0;\n    if ((value_2 & 0x1000) == 0) {\n      index_1 = (*function_ptr_1)(data_ptr,index_2_ptr[8],value_1 & 0x1000,1);\n      if ((index_1 == -1) && (value_1 = *data_ptr, value_1 != 0)) {\n        if ((value_1 != 0x1d) && (value_1 != 0x16)) {\n          *(ushort *)(index_2_ptr + 3) = *(ushort *)(index_2_ptr + 3) | 0x40;\n          jump_table_1();\n          return;\n        }\n        *data_ptr = value_3;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      index_1 = index_2_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(index_2_ptr + 3) << 0x1d) < 0) &&\n       (index_1 = index_1 - index_2_ptr[1], index_2_ptr[0xd] != 0)) {\n      index_1 = index_1 - index_2_ptr[0x10];\n    }\n    index_1 = (*(code *)index_2_ptr[0xb])(data_ptr,index_2_ptr[8],index_1,0);\n    value_2 = *(ushort *)(index_2_ptr + 3);\n    if ((index_1 == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((DAT_080052c8 >> (*data_ptr & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(index_2_ptr + 3) = value_2 | 0x40;\n      jump_table_1(0xffffffff);\n      return;\n    }\n    index_2_ptr[1] = 0;\n    *index_2_ptr = index_2_ptr[4];\n    if (((int)((uint)value_2 << 0x13) < 0) && ((index_1 != -1 || (*data_ptr == 0)))) {\n      index_2_ptr[0x15] = index_1;\n    }\n    index_3_ptr = (int *)index_2_ptr[0xd];\n    *data_ptr = value_3;\n    if (index_3_ptr != (int *)0x0) {\n      if (index_3_ptr != index_2_ptr + 0x11) {\n        cleanup_data(data_ptr);\n      }\n      index_2_ptr[0xd] = 0;\n      jump_table_1();\n      return;\n    }\n  }\nLAB_080051d6:\n  jump_table_1(0);\n  return;\n}",
            "called": [
                "FUN_080048dc",
                "FUN_080040f8",
                "FUN_080055d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051ac",
            "calling": [
                "FUN_08004808",
                "FUN_08005760"
            ],
            "imported": true,
            "current_name": "process_data_080051ac"
        },
        "FUN_080052cc": {
            "renaming": {
                "bVar10": "condition1",
                "iVar2": "param4",
                "FUN_080052cc": "process_data_080052cc",
                "uVar1": "result",
                "iVar6": "temp_var",
                "iVar8": "temp_var",
                "param_1": "data",
                "piVar3": "param_ptr",
                "UNRECOVERED_JUMPTABLE_00": "UNRECOVERED_JUMPTABLE_00",
                "unaff_r5": "unused2",
                "condition1": "condition1",
                "unaff_r4": "unused1",
                "condition2": "condition2",
                "param_2": "params",
                "pcVar7": "function_pointer",
                "uVar5": "flags",
                "uVar4": "param3",
                "condition3": "condition3",
                "condition4": "condition4",
                "uVar9": "temp_var",
                "condition5": "condition5",
                "condition6": "condition6"
            },
            "code": "uint32_t process_data_080052cc(uint32_t *data, int32_t *params)\n{\n  uint32_t result;\n  int32_t param4;\n  int32_t *param_ptr;\n  uint32_t param3;\n  uint32_t param5;\n  uint32_t param6;\n  uint32_t param7;\n  uint32_t param8;\n  uint32_t param9;\n  uint32_t param10;\n  uint32_t param11;\n  uint32_t param12;\n  uint32_t param13;\n  uint32_t param14;\n  uint32_t param15;\n  uint32_t param16;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  bool condition4;\n  bool condition5;\n  bool condition6;\n  code *function_pointer;\n  int32_t temp_var;\n  uint16_t flags;\n  \n  if (params[4] != 0) {\n    if ((data != NULL) && (data[6] == 0)) {\n      reset_data();\n    }\n    if (params == (int32_t *)PTR_DAT_08005314) {\n      param_ptr = (int32_t *)data[1];\n    }\n    else if (params == (int32_t *)PTR_DAT_08005318) {\n      param_ptr = (int32_t *)data[2];\n    }\n    else if (params == (int32_t *)PTR_DAT_0800531c) {\n      param_ptr = (int32_t *)data[3];\n    }\n    flags = *(uint16_t *)(param_ptr + 3);\n    if (flags != 0) {\n      if ((int)(flags << 0x1c) < 0) {\n        param4 = params[4];\n        if (param4 != 0) {\n          param3 = (uint32_t)flags;\n          condition1 = (param3 << 0x1e) == 0;\n          temp_var = *param_ptr;\n          if (condition1) {\n            param3 = (uint32_t)param_ptr[5];\n          }\n          *param_ptr = param4;\n          if (!condition1) {\n            param3 = 0;\n          }\n          param_ptr[2] = param3;\n          for (temp_var = temp_var - param4; 0 < temp_var; temp_var = temp_var - param3) {\n            result = (*(code *)param_ptr[10])(data,param_ptr[8],param4,temp_var,0,0);\n            if (result < 1) {\n              flags = *(uint16_t *)(param_ptr + 3);\n              goto LAB_080052b2;\n            }\n            param4 = param4 + result;\n          }\n        }\n      }\n      else {\n        condition2 = (params[1] > 0) || (params[0x10] > 0);\n        condition3 = (params[0xb] != NULL);\n        if (condition2 && condition3) {\n          param3 = *data;\n          *data = 0;\n          condition4 = (flags & 0x1000) == 0;\n          if (condition4) {\n            function_pointer = (code *)param_ptr[0xb];\n            temp_var = (*function_pointer)(data,param_ptr[8],flags & 0x1000,1);\n            if ((temp_var == -1) && (*data != 0)) {\n              if ((*data != 0x1d) && (*data != 0x16)) {\n                flags = *(uint16_t *)(param_ptr + 3);\n                flags = flags | 0x40;\n                goto LAB_080052bc;\n              }\n              *data = param3;\n              goto LAB_080051d6;\n            }\n          }\n          else {\n            temp_var = params[0x15];\n          }\n          condition5 = (flags << 0x1d) < 0;\n          if (condition5 && (params[1] > 0) && (params[0xd] != 0)) {\n            temp_var = temp_var - params[1];\n            temp_var = temp_var - params[0x10];\n          }\n          result = (*(code *)param_ptr[0xb])(data,param_ptr[8],temp_var,0,0,0);\n          flags = *(uint16_t *)(param_ptr + 3);\n          if ((result == -1) && ((*data > 0x1d) || ((int)(DAT_080052c8 >> (*data & 0xff)) < 0))) {\n            flags = flags | 0x40;\n            goto LAB_080052bc;\n          }\n          params[1] = 0;\n          *param_ptr = params[4];\n          condition6 = (flags << 0x13) < 0;\n          if (condition6 && ((result != -1) || (*data == 0))) {\n            params[0x15] = result;\n          }\n          if (param_ptr[0xd] != 0) {\n            if (param_ptr[0xd] != param_ptr + 0x11) {\n              reset_data();\n            }\n            param_ptr[0xd] = 0;\n            flags = *(uint16_t *)(param_ptr + 3);\n            flags = flags | 0x40;\n            goto LAB_08005252;\n          }\n        }\n      }\nLAB_080051d6:\n      flags = *(uint16_t *)(param_ptr + 3);\n      flags = flags & 0xffbf;\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n\nLAB_080052b2:\n  flags = flags | 0x40;\nLAB_080052bc:\n  result = -1;\n  return result;\n\nLAB_08005252:\n  result = (*UNRECOVERED_JUMPTABLE_00)();\n  return result;\n}",
            "called": [
                "FUN_080053a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052cc",
            "calling": [
                "FUN_08004a34"
            ],
            "imported": true,
            "current_name": "process_data_080052cc"
        },
        "FUN_08002eb2": {
            "renaming": {
                "FUN_08002eb2": "set_params_08002eb2",
                "param_1": "param_array",
                "is_valid_2": "is_param_array_valid_2",
                "param_2": "param_2",
                "param_3": "param_3",
                "is_valid": "is_param_array_valid"
            },
            "code": "int set_params_08002eb2(int *param_array, int param_2, int param_3) {\n    int is_valid = *(char *)((int)param_array + 0x39) == ' ';\n    if (!is_valid) {\n        return 2;\n    }\n    if (param_2 == 0 || param_3 == 0) {\n        return 1;\n    }\n    int is_valid_2 = *(char *)(param_array + 0xe) == '\\x01';\n    if (!is_valid_2) {\n        param_array[8] = param_2;\n        *(short *)(param_array + 9) = (short)param_3;\n        *(short *)((int)param_array + 0x26) = (short)param_3;\n        param_array[0xf] = 0;\n        *(unsigned char *)((int)param_array + 0x39) = 0x21;\n        *(unsigned char *)(param_array + 0xe) = 0;\n        *(unsigned int *)(*param_array + 0xc) |= 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002eb2",
            "calling": [
                "FUN_08003f48",
                "FUN_08003eac"
            ],
            "imported": true,
            "current_name": "set_params_08002eb2"
        },
        "FUN_08000d3c": {
            "renaming": {
                "iVar1": "index",
                "puVar2": "data_pointer",
                "FUN_08000d3c": "initialize_program_08000d3c",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void initialize_program_08000d3c(void)\n{\n  int index;\n  undefined4 *data_pointer;\n  code *jump_table;\n  for (index = 0; PTR_DAT_08000d7c + index < PTR_DAT_08000d80; index += 4) {\n    *(undefined4 *)(PTR_DAT_08000d7c + index) = *(undefined4 *)(DAT_08000d78 + index);\n  }\n  for (data_pointer = (undefined4 *)PTR_DAT_08000d84; data_pointer < PTR_DAT_08000d88; data_pointer++) {\n    *data_pointer = 0;\n  }\n  initialize_subsystem_A();\n  initialize_subsystem_B();\n  jump_table = (code *)0x8000d72;\n  initialize_subsystem_C();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_080035bc",
                "FUN_08004658",
                "FUN_08004884"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d3c",
            "calling": [],
            "imported": true,
            "current_name": "initialize_program_08000d3c"
        },
        "FUN_08003978": {
            "renaming": {
                "FUN_08003978": "FUNC_08003978"
            },
            "code": "\nvoid FUNC_08003978(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  undefined4 uVar10;\n  uint uVar11;\n  uint local_2c;\n  uint local_28;\n  uint local_24;\n  undefined4 local_20;\n  uint local_1c;\n  \n  if (param_1 != (int *)0x0) {\n    iVar7 = FUN_080034f4((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n    iVar8 = FUN_080034f4((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n    if ((iVar8 == 0) || (iVar7 == 0)) {\n      FUN_08004fdc(PTR_s_ERROR__at_least_one_UART_pin_has_08003c84,iVar8);\n    }\n    else {\n      iVar9 = FUN_08003582(iVar7);\n      *param_1 = iVar9;\n      iVar6 = DAT_08003c7c;\n      iVar5 = DAT_08003c78;\n      iVar4 = DAT_08003c74;\n      iVar3 = DAT_08003c70;\n      iVar2 = DAT_08003c6c;\n      iVar1 = DAT_08003c68;\n      iVar8 = DAT_08003c64;\n      iVar7 = DAT_08003c60;\n      if (iVar9 == 0) {\n        FUN_08004fdc(PTR_s_ERROR__U_S_ART_pins_mismatch_08003c88);\n      }\n      else {\n        if (iVar9 == DAT_08003c60) {\n          *(uint *)(DAT_08003c60 + 0x12824) = *(uint *)(DAT_08003c60 + 0x12824) | 0x10;\n          *(uint *)(iVar7 + 0x12824) = *(uint *)(iVar7 + 0x12824) & 0xffffffef;\n          *(uint *)(iVar7 + 0x12844) = *(uint *)(iVar7 + 0x12844) | 0x10;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)(param_1 + 0x17) = 0x25;\n        }\n        else if (iVar9 == DAT_08003c64) {\n          *(uint *)(DAT_08003c64 + 0x1f420) = *(uint *)(DAT_08003c64 + 0x1f420) | 0x20000;\n          *(uint *)(iVar8 + 0x1f420) = *(uint *)(iVar8 + 0x1f420) & 0xfffdffff;\n          *(uint *)(iVar8 + 0x1f440) = *(uint *)(iVar8 + 0x1f440) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)(param_1 + 0x17) = 0x26;\n        }\n        else if (iVar9 == DAT_08003c68) {\n          *(uint *)(DAT_08003c68 + 0x1f020) = *(uint *)(DAT_08003c68 + 0x1f020) | 0x40000;\n          *(uint *)(iVar1 + 0x1f020) = *(uint *)(iVar1 + 0x1f020) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1f040) = *(uint *)(iVar1 + 0x1f040) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)(param_1 + 0x17) = 0x27;\n        }\n        else if (iVar9 == DAT_08003c6c) {\n          *(uint *)(DAT_08003c6c + 0x1ec20) = *(uint *)(DAT_08003c6c + 0x1ec20) | 0x80000;\n          *(uint *)(iVar2 + 0x1ec20) = *(uint *)(iVar2 + 0x1ec20) & 0xfff7ffff;\n          *(uint *)(iVar2 + 0x1ec40) = *(uint *)(iVar2 + 0x1ec40) | 0x80000;\n          *(undefined *)(param_1 + 0x11) = 3;\n          *(undefined *)(param_1 + 0x17) = 0x34;\n        }\n        else if (iVar9 == DAT_08003c70) {\n          *(uint *)(DAT_08003c70 + 0x1e820) = *(uint *)(DAT_08003c70 + 0x1e820) | 0x100000;\n          *(uint *)(iVar3 + 0x1e820) = *(uint *)(iVar3 + 0x1e820) & 0xffefffff;\n          *(uint *)(iVar3 + 0x1e840) = *(uint *)(iVar3 + 0x1e840) | 0x100000;\n          *(undefined *)(param_1 + 0x11) = 4;\n          *(undefined *)(param_1 + 0x17) = 0x35;\n        }\n        else if (iVar9 == DAT_08003c74) {\n          *(uint *)(DAT_08003c74 + 0x12424) = *(uint *)(DAT_08003c74 + 0x12424) | 0x20;\n          *(uint *)(iVar4 + 0x12424) = *(uint *)(iVar4 + 0x12424) & 0xffffffdf;\n          *(uint *)(iVar4 + 0x12444) = *(uint *)(iVar4 + 0x12444) | 0x20;\n          *(undefined *)(param_1 + 0x11) = 5;\n          *(undefined *)(param_1 + 0x17) = 0x47;\n        }\n        else if (iVar9 == DAT_08003c78) {\n          *(uint *)(DAT_08003c78 + 0x1c020) = *(uint *)(DAT_08003c78 + 0x1c020) | 0x40000000;\n          *(uint *)(iVar5 + 0x1c020) = *(uint *)(iVar5 + 0x1c020) & 0xbfffffff;\n          *(uint *)(iVar5 + 0x1c040) = *(uint *)(iVar5 + 0x1c040) | 0x40000000;\n          *(undefined *)(param_1 + 0x11) = 6;\n          *(undefined *)(param_1 + 0x17) = 0x52;\n        }\n        else if (iVar9 == DAT_08003c7c) {\n          *(uint *)(DAT_08003c7c + 0x1bc20) = *(uint *)(DAT_08003c7c + 0x1bc20) | 0x80000000;\n          *(uint *)(iVar6 + 0x1bc20) = *(uint *)(iVar6 + 0x1bc20) & 0x7fffffff;\n          *(uint *)(iVar6 + 0x1bc40) = *(uint *)(iVar6 + 0x1bc40) | 0x80000000;\n          *(undefined *)(param_1 + 0x11) = 7;\n          *(undefined *)(param_1 + 0x17) = 0x53;\n        }\n        uVar10 = FUN_080031fc((uint)((int)*(short *)((int)param_1 + 0x5a) << 0x18) >> 0x1c);\n        uVar11 = FUN_0800354a((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n        local_2c = 1 << (*(ushort *)((int)param_1 + 0x5a) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        local_1c = (uVar11 << 0x11) >> 0x19;\n        local_20 = 3;\n        FUN_08000fb4(uVar10,&local_2c);\n        uVar10 = FUN_080031fc((uint)((int)*(short *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar11 = FUN_0800354a((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n        local_2c = 1 << (*(ushort *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        FUN_08000fb4(uVar10,&local_2c);\n        *(int **)(PTR_DAT_08003c80 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        FUN_08002d72(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002d72",
                "FUN_08000fb4",
                "FUN_080034f4",
                "FUN_08004fdc",
                "FUN_08003582",
                "FUN_080031fc",
                "FUN_0800354a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003978",
            "calling": [
                "FUN_08004388",
                "FUN_08003cc8"
            ],
            "imported": true,
            "current_name": "FUNC_08003978"
        },
        "FUN_0800316c": {
            "renaming": {
                "uVar1": "index",
                "param_1": "bit_position",
                "*(uint *)(param_2 + uVar1 * 4) & ~(1 << (param_1 & 0xf))": "mask",
                "FUN_0800316c": "reverse_bits_0800316c",
                "param_2": "data_array",
                "*(uint *)(param_2 + uVar1 * 4)": "target"
            },
            "code": "void reverse_bits_0800316c(uint bit_position, int* data_array){\n  uint index = (bit_position << 0x18) >> 0x1c;\n  uint* target = (uint*)(data_array + index * 4);\n  uint mask = ~(1 << (bit_position & 0xf));\n  *target = *target & mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08004110"
            ],
            "imported": true,
            "current_name": "reverse_bits_0800316c"
        },
        "FUN_080040d0": {
            "renaming": {
                "FUN_080040d0": "return_error_080040d0"
            },
            "code": "int32_t return_error_080040d0(void) {\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d0",
            "calling": [],
            "imported": true,
            "current_name": "return_error_080040d0"
        },
        "FUN_080040d6": {
            "renaming": {
                "param_1": "address",
                "param_2": "size",
                "FUN_080040d6": "set_memory_protection_080040d6"
            },
            "code": "void set_memory_protection_080040d6(int address, int size) {\n  *(int *)(address + 4) = 0x2000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d6",
            "calling": [
                "FUN_080056d4"
            ],
            "imported": true,
            "current_name": "set_memory_protection_080040d6"
        },
        "FUN_08004a34": {
            "renaming": {
                "iVar1": "buffer_length",
                "PTR_DAT_080050cc": "ptr_data_3",
                "FUN_080052cc": "validate_buffer",
                "PTR_DAT_080050c8": "ptr_data_2",
                "param_1": "input_length",
                "FUN_080050d0": "validate_buffer",
                "pbVar2": "buffer_pointer",
                "pbVar3": "buffer_end",
                "process_buffer": "validate_buffer",
                "param_2": "input_byte",
                "PTR_DAT_080050c4": "ptr_data_1",
                "FUN_08004a34": "process_input_08004a34",
                "param_3": "input_buffer",
                "FUN_080053a0": "handle_error",
                "uVar4": "output_byte"
            },
            "code": "uint process_input_08004a34(int input_length, byte input_byte, byte **input_buffer){\n  int buffer_length;\n  byte *buffer_pointer;\n  byte *buffer_end;\n  uint output_byte;\n  \n  buffer_end = *input_buffer[2] - 1;\n  *input_buffer[2] = buffer_end;\n  if ((buffer_end >= -1) || ((buffer_end >= *input_buffer[6]) && (input_byte != 0xa))){\n    buffer_pointer = *input_buffer;\n    *input_buffer = buffer_pointer + 1;\n    *buffer_pointer = input_byte;\n    return (uint)input_byte;\n  }\n  if ((input_length != 0) && (*(int *)(input_length + 0x18) == 0)) {\n    handle_error();\n  }\n  if (input_buffer == (byte **)PTR_DAT_080050c4) {\n    input_buffer = *(byte ***)(input_length + 4);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_080050c8) {\n    input_buffer = *(byte ***)(input_length + 8);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_080050cc) {\n    input_buffer = *(byte ***)(input_length + 0xc);\n  }\n  input_buffer[2] = input_buffer[6];\n  buffer_pointer = (byte *)(uint)*(ushort *)(input_buffer + 3);\n  buffer_length = (int)buffer_pointer << 0x1c;\n  if (((buffer_length < 0) && (buffer_pointer = input_buffer[4], buffer_pointer != (byte *)0x0)) || (buffer_length = process_buffer(input_length, input_buffer, buffer_length, buffer_pointer, buffer_end), buffer_length == 0)) {\n    buffer_length = (int)*input_buffer - (int)input_buffer[4];\n    output_byte = (uint)input_byte;\n    if ((buffer_length < (int)input_buffer[5]) || (buffer_length = validate_buffer(input_length, input_buffer), buffer_length == 0)) {\n      input_buffer[2] = input_buffer[2] + -1;\n      buffer_pointer = *input_buffer;\n      *input_buffer = buffer_pointer + 1;\n      *buffer_pointer = input_byte;\n      if ((byte *)(buffer_length + 1) != input_buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input_buffer + 3) << 0x1f)) {\n          return output_byte;\n        }\n        if (output_byte != 10) {\n          return output_byte;\n        }\n      }\n      buffer_length = validate_buffer(input_length, input_buffer);\n      if (buffer_length == 0) {\n        return output_byte;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_080052cc",
                "FUN_080050d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a34",
            "calling": [
                "FUN_08004a60"
            ],
            "imported": true,
            "current_name": "process_input_08004a34"
        },
        "FUN_080002d0": {
            "renaming": {
                "uVar1": "concatenated_values",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "FUN_080002d0": "get_concatenated_values_080002d0"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t get_concatenated_values_080002d0(int value1, int value2, int value3, int value4)\n{\n    if (value4 == 0 && value3 == 0) {\n        if (value2 != 0 || value1 != 0) {\n            value2 = -1;\n            value1 = -1;\n        }\n        return ((uint64_t)value2 << 32) | value1;\n    }\n    else {\n        return FUNC_08000300();\n    }\n}",
            "called": [
                "FUN_08000300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002d0",
            "calling": [
                "FUN_080023b4"
            ],
            "imported": true,
            "current_name": "get_concatenated_values_080002d0"
        },
        "FUN_08003f00": {
            "renaming": {
                "uVar1": "index",
                "param_1": "value_to_find",
                "FUN_08003f00": "find_index_08003f00"
            },
            "code": "uint find_index_08003f00(int value_to_find)\n{\n  uint index;\n  if (value_to_find == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (9 < index) {\n        return index;\n      }\n      if (value_to_find == *(int *)(PTR_DAT_08003f20 + index * 4)) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f00",
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "imported": true,
            "current_name": "find_index_08003f00"
        },
        "FUN_08005a04": {
            "renaming": {
                "FUN_08005a04": "do_nothing_08005a04"
            },
            "code": "\nvoid do_nothing_08005a04(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a04",
            "calling": [],
            "imported": true,
            "current_name": "do_nothing_08005a04"
        },
        "FUN_08001440": {
            "renaming": {
                "*puVar1": "*data_buffer",
                "FUN_08001440": "write_data_to_buffer_08001440",
                "param_1": "buffer",
                "*(short *)((int)param_1 + 0x2a)": "*buffer_size",
                "puVar1": "data_buffer",
                "*(short *)((int)param_1 + 0x2a) + -1": "*buffer_size - 1"
            },
            "code": "int write_data_to_buffer_08001440(int *buffer) {\n  short *buffer_size = (short *)((int)buffer + 0x2a);\n  if (*buffer_size != 0) {\n    char *data_buffer = (char *)buffer[9];\n    buffer[9] = (int)(data_buffer + 1);\n    *data_buffer = (char)*(int *)(*buffer + 0x10);\n    *buffer_size = *buffer_size + -1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001440",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "write_data_to_buffer_08001440"
        },
        "FUN_08000230": {
            "renaming": {
                "bVar1": "current_byte",
                "uVar10": "sequence_length_2",
                "uVar11": "xor_result_1",
                "uVar12": "xor_result_2",
                "bVar13": "byte_1_set",
                "FUN_08000230": "find_byte_sequence_08000230",
                "cVar5": "byte_4",
                "param_1": "sequence",
                "cVar4": "byte_3",
                "bVar14": "byte_2_set",
                "pbVar6": "result_ptr",
                "puVar7": "sequence_ptr",
                "bVar15": "byte_3_set",
                "bVar16": "byte_4_set",
                "pbVar8": "result_ptr_2",
                "param_2": "sequence_length",
                "cVar3": "byte_2",
                "param_3": "byte_to_find",
                "cVar2": "byte_1",
                "uVar9": "offset"
            },
            "code": "byte* find_byte_sequence_08000230(uint* sequence, uint sequence_length, uint byte_to_find) {\n    byte* result = NULL;\n    uint uVar1, uVar2, uVar3, uVar4;\n    bool bVar5, bVar6, bVar7, bVar8;\n\n    byte_to_find = byte_to_find & 0xff;\n    if ((int)sequence_length < 0x10) {\n        while (sequence_length != 0) {\n            if (*(byte*)sequence == byte_to_find) {\n                result = (byte*)sequence;\n                break;\n            }\n            sequence = (uint*)((int)sequence + 1);\n            sequence_length--;\n        }\n    }\n    else {\n        uVar1 = (uint)sequence & 7;\n        while (true) {\n            if (uVar1 == 0) {\n                uVar1 = byte_to_find | byte_to_find << 8 | byte_to_find << 0x10 | byte_to_find << 0x18;\n                uVar2 = sequence_length & 0xfffffff8;\n                do {\n                    sequence = sequence + 2;\n                    uVar2 = uVar2 - 8;\n                    uVar3 = *sequence ^ uVar1;\n                    uVar4 = sequence[1] ^ uVar1;\n                    bVar5 = (char)uVar3 == 0;\n                    bVar6 = (char)(uVar3 >> 8) == 0;\n                    bVar7 = (char)(uVar3 >> 0x10) == 0;\n                    bVar8 = (char)(uVar3 >> 0x18) == 0;\n                    uVar3 = CONCAT13(bVar8, CONCAT12(bVar7, CONCAT11(bVar6, bVar5)));\n                    bVar5 = (char)uVar4 != 0;\n                    bVar6 = (char)(uVar4 >> 8) != 0;\n                    bVar7 = (char)(uVar4 >> 0x10) != 0;\n                    bVar8 = (char)(uVar4 >> 0x18) != 0;\n                    uVar4 = CONCAT13(bVar8, CONCAT12(bVar7, CONCAT11(bVar6, bVar5)));\n                    if (uVar4 != 0) {\n                        if (uVar3 == 0) {\n                            result = (byte*)((int)sequence + 5);\n                            uVar3 = uVar4;\n                        }\n                        else {\n                            result = (byte*)((int)sequence + 1);\n                        }\n                        if ((uVar3 & 1) == 0) {\n                            bVar5 = (uVar3 & 0x100) == 0;\n                            result = result + 1 + (bVar5 ? 1 : 0) + ((uVar3 & 0x18000) == 0 ? 0 : 1);\n                        }\n                        break;\n                    }\n                } while (uVar2 != 0);\n                sequence_length = sequence_length & 7;\n                if (sequence_length != 0) {\n                    while (sequence_length != 0) {\n                        if (*(byte*)sequence == byte_to_find) {\n                            result = (byte*)sequence;\n                            break;\n                        }\n                        sequence = (uint*)((int)sequence + 1);\n                        sequence_length--;\n                    }\n                }\n            }\n            else {\n                while (true) {\n                    sequence_length--;\n                    if (*(byte*)sequence == byte_to_find) {\n                        result = (byte*)sequence;\n                        break;\n                    }\n                    uVar1 = (uint)((int)sequence + 1) & 7;\n                    sequence = (uint*)((int)sequence + 1);\n                    if (sequence_length == 0) {\n                        break;\n                    }\n                    if (uVar1 == 0) {\n                        uVar1 = byte_to_find | byte_to_find << 8 | byte_to_find << 0x10 | byte_to_find << 0x18;\n                        uVar2 = sequence_length & 0xfffffff8;\n                        do {\n                            sequence = sequence + 2;\n                            uVar2 = uVar2 - 8;\n                            uVar3 = *sequence ^ uVar1;\n                            uVar4 = sequence[1] ^ uVar1;\n                            bVar5 = (char)uVar3 == 0;\n                            bVar6 = (char)(uVar3 >> 8) == 0;\n                            bVar7 = (char)(uVar3 >> 0x10) == 0;\n                            bVar8 = (char)(uVar3 >> 0x18) == 0;\n                            uVar3 = CONCAT13(bVar8, CONCAT12(bVar7, CONCAT11(bVar6, bVar5)));\n                            bVar5 = (char)uVar4 != 0;\n                            bVar6 = (char)(uVar4 >> 8) != 0;\n                            bVar7 = (char)(uVar4 >> 0x10) != 0;\n                            bVar8 = (char)(uVar4 >> 0x18) != 0;\n                            uVar4 = CONCAT13(bVar8, CONCAT12(bVar7, CONCAT11(bVar6, bVar5)));\n                            if (uVar4 != 0) {\n                                if (uVar3 == 0) {\n                                    result = (byte*)((int)sequence + 5);\n                                    uVar3 = uVar4;\n                                }\n                                else {\n                                    result = (byte*)((int)sequence + 1);\n                                }\n                                if ((uVar3 & 1) == 0) {\n                                    bVar5 = (uVar3 & 0x100) == 0;\n                                    result = result + 1 + (bVar5 ? 1 : 0) + ((uVar3 & 0x18000) == 0 ? 0 : 1);\n                                }\n                                goto LAB_080002f0;\n                            }\n                        } while (uVar2 != 0);\n                        sequence_length = sequence_length & 7;\n                        if (sequence_length != 0) {\n                            do {\n                                sequence_length--;\n                                if (*(byte*)sequence == byte_to_find) {\n                                    result = (byte*)sequence;\n                                    goto LAB_080002f0;\n                                }\n                                sequence = (uint*)((int)sequence + 1);\n                            } while (sequence_length != 0);\n                        }\n                        break;\n                    }\n                }\n            }\n            break;\n        }\n    }\nLAB_080002f0:\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000230",
            "calling": [
                "FUN_08004d9c",
                "FUN_08004a84"
            ],
            "imported": true,
            "current_name": "find_byte_sequence_08000230"
        },
        "FUN_08001684": {
            "renaming": {
                "**param_1": "*status",
                "*(undefined *)((int)param_1 + 0x3d)": "status[0x3d]",
                "*(undefined *)((int)param_1 + 0x3e)": "status[0x3e]",
                "(*param_1)[5]": "status[5]",
                "(uint *)0x8": "PTR_08001718",
                "FUN_08001684": "update_status_08001684",
                "param_1": "status_ptr",
                "*(char *)((int)param_1 + 0x3d)": "status[0x3d]",
                "(*param_1)[1]": "status[1]",
                "param_1[0xc]": "status_ptr[12]",
                "param_1[0xb]": "status_ptr[11]",
                "(int)param_1": "(int)status_ptr",
                "(uint *)0x0": "NULL",
                "(uint *)0x4": "PTR_08001714"
            },
            "code": "int update_status_08001684(uint **status_ptr) {\n    uint *status = *status_ptr;\n    if (((status_ptr[11] == PTR_08001714) || (status_ptr[11] == PTR_08001718)) && (status[0x3d] == '(')) {\n        status_ptr[11] = PTR_08001714;\n        status[1] &= 0xfffff8ff;\n        status[5] = 0xfffffbff;\n        *status &= 0xfffffbff;\n        status_ptr[12] = NULL;\n        status[0x3d] = ' ';\n        status[0x3e] = 0;\n        reset_status_080038d0();\n    }\n    else if (status[0x3d] == '!') {\n        status_ptr[11] = PTR_08001714;\n        status_ptr[12] = (uint *)0x21;\n        status[0x3d] = ' ';\n        status[0x3e] = 0;\n        status[1] &= 0xfffff8ff;\n        status[5] = 0xfffffbff;\n        *status &= 0xfffffbff;\n        do_nothing_080015ba();\n    }\n    else {\n        status[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001684",
            "calling": [
                "FUN_08001e68"
            ],
            "imported": true,
            "current_name": "update_status_08001684"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "update_status_08000f8c",
                "param_1": "status_ptr",
                "uint": "unsigned int"
            },
            "code": "int update_status_08000f8c(uint **status_ptr) {\n  if (*(char *)((int)status_ptr + 0x35) != '\\x02') {\n    status_ptr[21] = (uint *)0x80;\n    return 1;\n  }\n  *(undefined *)((int)status_ptr + 0x35) = 5;\n  **status_ptr &= 0xfffffffe;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "imported": true,
            "current_name": "update_status_08000f8c"
        },
        "FUN_080001ac": {
            "renaming": {
                "PTR_DAT_080001c4": "flag_pointer",
                "PTR_FUN_080001cc": "function_pointer_pointer",
                "FUN_080001ac": "check_and_get_function_pointer_080001ac",
                "param_1": "function_pointer",
                "DAT_080001c8": "data_value"
            },
            "code": "undefined* check_and_get_function_pointer_080001ac(undefined* function_pointer) {\\n  if (*PTR_DAT_080001c4 == \"\\0\") {\\n    if (DAT_080001c8 != 0) {\\n      function_pointer = PTR_FUN_080001cc;\\n    }\\n    *PTR_DAT_080001c4 = 1;\\n  }\\n  return function_pointer;\\n}",
            "called": [
                "FUN_080059f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [],
            "imported": true,
            "current_name": "check_and_get_function_pointer_080001ac"
        },
        "FUN_080040e0": {
            "renaming": {
                "FUN_080040e0": "return_one_080040e0"
            },
            "code": "int return_one_080040e0(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e0",
            "calling": [
                "FUN_080056f8"
            ],
            "imported": true,
            "current_name": "return_one_080040e0"
        },
        "FUN_080048cc": {
            "renaming": {
                "param_1": "memory",
                "FUN_080048cc": "fill_memory_with_value_080048cc",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_of_memory"
            },
            "code": "void fill_memory_with_value_080048cc(uint8_t *memory, uint8_t value, int size) {\n  uint8_t *end_of_memory = memory + size;\n  for (; memory != end_of_memory; memory++) {\n    *memory = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048cc",
            "calling": [
                "FUN_08005374",
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "imported": true,
            "current_name": "fill_memory_with_value_080048cc"
        },
        "FUN_080040e4": {
            "renaming": {
                "undefined4": "int",
                "FUN_080040e4": "returnZero_080040e4",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int returnZero_080040e4(void)\n{\n  int zero = 0;\n  return zero;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e4",
            "calling": [
                "FUN_08005718"
            ],
            "imported": true,
            "current_name": "returnZero_080040e4"
        },
        "FUN_08003506": {
            "renaming": {
                "param_1": "value",
                "FUN_08003506": "find_short_value_08003506",
                "param_2": "data"
            },
            "code": "int find_short_value_08003506(int value, short* data)\n{\n  while (true)\n  {\n    if (*(int*)(data + 2) == 0)\n    {\n      return -1;\n    }\n\n    if (*(int*)(data + 2) == value)\n    {\n      break;\n    }\n\n    data += 6;\n  }\n\n  return (int)*data;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003506",
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "imported": true,
            "current_name": "find_short_value_08003506"
        },
        "FUN_080025e0": {
            "renaming": {
                "PTR_DAT_080025e8": "pointer_data",
                "FUN_080025e0": "get_pointer_value_080025e0"
            },
            "code": "get_pointer_value_080025e0() {\n  return *(undefined4 *)PTR_DAT_080025e8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e0",
            "calling": [
                "FUN_08000c8c",
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "imported": true,
            "current_name": "get_pointer_value_080025e0"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "returnZero_080040e8"
            },
            "code": "int returnZero_080040e8() {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_0800573c"
            ],
            "imported": true,
            "current_name": "returnZero_080040e8"
        },
        "FUN_08000a00": {
            "renaming": {
                "uVar1": "value",
                "param_1": "array_address",
                "param_2": "value_address",
                "param_3": "bit_offset",
                "param_4": "bit_mask",
                "FUN_08000a00": "set_value_at_index_08000a00",
                "uVar2": "index"
            },
            "code": "int set_value_at_index_08000a00(int array_address, int value_address, int bit_offset, int bit_mask)\n{\n  uint value = calculate_value(*(char *)(array_address + 0xb), *(char *)(array_address + 0xc), bit_offset, bit_mask, bit_mask);\n  uint index = (value << 0x14) >> 0x18;\n  if (*(char *)(array_address + 0xd) == -1) {\n    *(ushort *)(value_address + index * 2) = (ushort)(1 << (value & 0xf)) | *(ushort *)(value_address + index * 2);\n  }\n  else {\n    *(ushort *)(value_address + index * 2) = *(ushort *)(value_address + index * 2) & ~(ushort)(1 << (value & 0xf));\n  }\n  *(char *)(array_address + 0x49) = 6;\n  update_array(array_address);\n  return 8;\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a00",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "set_value_at_index_08000a00"
        },
        "FUN_080047c0": {
            "renaming": {
                "iVar1": "function_index",
                "param_1": "param",
                "function_pointer": "function_pointer",
                "function": "function",
                "FUN_080047c0": "execute_function_080047c0"
            },
            "code": "void execute_function_080047c0(int param)\n{\n  int function_pointer = *(int *)(param + 8);\n  int function_index = 0;\n  \n  if (function_pointer != 0) {\n    void (*function)() = *(void (**)(void))(param + 12);\n    function();\n    return;\n  }\n  \n  call_first_function();\n  function_index = get_function_index();\n  \n  if (*(int *)(PTR_DAT_080047ec + function_index * 0x14 + 0xc) != 0) {\n    execute_function_080047c0();\n  }\n  return;\n}",
            "called": [
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047c0",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": true,
            "current_name": "execute_function_080047c0"
        },
        "FUN_08005374": {
            "renaming": {
                "FUN_08005374": "allocate_memory_block_08005374",
                "iVar2": "block_offset",
                "param_1": "starting_address",
                "param_2": "block_size",
                "puVar1": "allocated_block"
            },
            "code": "undefined4 * allocate_memory_block_08005374(undefined4 starting_address, int block_size)\n{\n  undefined4 *allocated_block;\n  int block_offset = (block_size - 1) * 0x68;\n  allocated_block = (undefined4 *)FUN_08004978(starting_address, block_offset + 0x74);\n  if (allocated_block != (undefined4 *)0x0) {\n    *allocated_block = 0;\n    allocated_block[1] = block_size;\n    allocated_block[2] = allocated_block + 3;\n    FUN_080048cc(allocated_block + 3, 0, block_offset + 0x68);\n  }\n  return allocated_block;\n}",
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005374",
            "calling": [
                "FUN_08005400"
            ],
            "imported": true,
            "current_name": "allocate_memory_block_08005374"
        },
        "FUN_08004d9c": {
            "renaming": {
                "FUN_08004d9c": "FUNC_08004d9c"
            },
            "code": "\nuint FUNC_08004d9c(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08004f56;\n          if (bVar1 != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\nLAB_08004ee6:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08004dcc;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08004dec;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08004dec:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_08004ec2;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08004e2c:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08004e52:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08004e60;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08004e60:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            puVar5 = PTR_s_0123456789abcdef_08004fd4;\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08004e52;\n          if (bVar1 == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08004e2c;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = FUN_08000230(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08004f42:\n    *puVar3 = uVar6;\n  }\nLAB_08004f56:\n  param_2[4] = 0;\nLAB_08004ec2:\n  iVar2 = FUN_08004cb0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_08004ed6:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_08004ed6;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08004cb0",
                "FUN_08000230"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004d9c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": true,
            "current_name": "FUNC_08004d9c"
        },
        "FUN_08003750": {
            "renaming": {
                "FUN_08003750": "subtract_four_08003750",
                "param_1": "input_num",
                "return": "result"
            },
            "code": "int subtract_four_08003750(int input_num) {\n  int result = input_num - 4;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003750",
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "imported": true,
            "current_name": "subtract_four_08003750"
        },
        "FUN_080014ec": {
            "renaming": {
                "*(undefined *)((int)param_1 + 0x3d)": "param_list[0x3d]",
                "**param_1": "**param_list",
                "*(undefined *)((int)param_1 + 0x3e)": "param_list[0x3e]",
                "param_1[9]": "param_list[9]",
                "uVar1": "result",
                "**param_1 & 0xfffff7ff": "**param_list &= 0xfffff7ff",
                "FUN_080014ec": "check_and_update_params_080014ec",
                "puVar2": "ptr1",
                "param_1": "param_list",
                "param_1[0x10]": "param_list[0x10]",
                "*(char *)((int)param_1 + 0x3d)": "param_list[0x3d]",
                "(*param_1)[1]": "(*param_list)[1]",
                "param_1[0xf]": "param_list[0xf]",
                "*(undefined2 *)(param_1 + 10)": "*(short *)(param_list + 10)",
                "*(short *)((int)param_1 + 0x2a)": "*(short *)(param_list + 0x2a)",
                "param_2": "param1",
                "param_3": "param2",
                "param_1[0xb]": "param_list[0xb]",
                "param_4": "param3",
                "(*puVar2 & 1)": "(*ptr1 & 1)",
                "*(char *)(param_1 + 0xf)": "param_list[0xf]",
                "*puVar2 = *puVar2 | 1": "*ptr1 |= 1",
                "*(undefined *)(param_1 + 0xf)": "param_list[0xf]"
            },
            "code": "int check_and_update_params_080014ec(uint **param_list, uint *param1, int param2, uint *param3) {\n  int result;\n  uint *ptr1;\n  char param1_char;\n  if (param_list[0x3d] == '(') {\n    if (param1 == NULL) {\n      result = 1;\n    }\n    else if (param2 == 0) {\n      result = 1;\n    }\n    else if (param_list[0xf] == 1) {\n      result = 2;\n    }\n    else {\n      param_list[0xf] = 1;\n      ptr1 = *param_list;\n      if ((*ptr1 & 1) == 0) {\n        *ptr1 |= 1;\n      }\n      **param_list &= 0xfffff7ff;\n      param_list[0x3d] = '*';\n      param_list[0x3e] = ' ';\n      result = 0;\n      param_list[0x10] = NULL;\n      param_list[9] = param1;\n      *(short *)(param_list + 0x2a) = (short)param2;\n      param_list[0xb] = param3;\n      *(short *)(param_list + 10) = *(short *)(param_list + 0x2a);\n      param_list[0xf] = 0;\n      (*param_list)[1] |= 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "FUN_08003880"
            ],
            "imported": true,
            "current_name": "check_and_update_params_080014ec"
        },
        "FUN_080048dc": {
            "renaming": {
                "FUN_080048dc": "insert_node_080048dc",
                "piVar2": "tempPtr",
                "param_1": "errorCode",
                "ppiVar6": "tempPtr3",
                "ppiVar7": "currentNodePtr",
                "param_2": "nodeAddress",
                "param_3": "size",
                "param_4": "nextAddress",
                "puVar1": "currentNodePtr",
                "extraout_r1": "previousNodePtr",
                "ppiVar3": "tempPtr1",
                "ppiVar4": "tempPtr2",
                "bVar8": "isHeadNode",
                "ppiVar5": "headNodePtr"
            },
            "code": "void insert_node_080048dc(int *errorCode, int nodeAddress, int size, int nextAddress)\n{\n  int **currentNodePtr;\n  int **previousNodePtr;\n  int **headNodePtr;\n  bool isHeadNode;\n  \n  if (size == 0) {\n    return;\n  }\n  currentNodePtr = (int **)(size + -4 + nodeAddress);\n  if (*(int *)(size + -4 + nodeAddress) < 0) {\n    currentNodePtr = (int **)((int)currentNodePtr + *(int *)(size + -4 + nodeAddress));\n  }\n  do_nothing_0800557c();\n  headNodePtr = *(int ***)PTR_DAT_08004974;\n  previousNodePtr = (int **)&headNodePtr;\n  isHeadNode = (headNodePtr == (int **)0x0);\n  if (!isHeadNode) {\n    while ((int **)currentNodePtr > headNodePtr[1]) {\n      previousNodePtr = headNodePtr + 1;\n      headNodePtr = (int **)headNodePtr[1];\n      if (headNodePtr == (int **)0x0) {\n        break;\n      }\n    }\n    isHeadNode = (int **)currentNodePtr == headNodePtr;\n  }\n  if (isHeadNode) {\n    currentNodePtr[1] = (int *)headNodePtr;\n    *(int ***)PTR_DAT_08004974 = currentNodePtr;\n    previousNodePtr = currentNodePtr;\n  }\n  else {\n    currentNodePtr[1] = (int *)headNodePtr;\n    previousNodePtr[1] = currentNodePtr;\n    previousNodePtr = currentNodePtr;\n  }\n  do_nothing_0800557e(errorCode, previousNodePtr, currentNodePtr, nextAddress);\n  return;\n}",
            "called": [
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048dc",
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "imported": true,
            "current_name": "insert_node_080048dc"
        },
        "FUN_08003754": {
            "renaming": {
                "iVar1": "function_ptr",
                "FUN_08003754": "execute_function_if_condition_met_08003754",
                "param_1": "param_to_check"
            },
            "code": "void execute_function_if_condition_met_08003754(int param_to_check)\n{\n  int function_ptr;\n  \n  function_ptr = get_function_pointer();\n  if ((*(code **)(function_ptr + 0x48) != (code *)0x0) && (*(char *)(param_to_check + 0x18) == '\\x01')) {\n    (**(code **)(function_ptr + 0x48))(function_ptr,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003754",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": true,
            "current_name": "execute_function_if_condition_met_08003754"
        },
        "FUN_08001578": {
            "renaming": {
                "param_1": "param_pointer",
                "FUN_08001578": "set_bit_and_flag_08001578",
                "puVar1": "data_pointer"
            },
            "code": "int set_bit_and_flag_08001578(uint **param_pointer) {\n  uint *data_pointer;\n  char flag = *(char *)((int)param_pointer + 0x3d);\n  if (flag != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)param_pointer + 0x3d) = 0x28;\n  data_pointer = *param_pointer;\n  if ((*data_pointer & 1) == 0) {\n    *data_pointer = *data_pointer | 1;\n  }\n  **param_pointer = **param_pointer | 0x400;\n  (*param_pointer)[1] = (*param_pointer)[1] | 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001578",
            "calling": [
                "FUN_08003900",
                "FUN_080038d0"
            ],
            "imported": true,
            "current_name": "set_bit_and_flag_08001578"
        },
        "FUN_08004844": {
            "renaming": {
                "param_1": "inputNum",
                "FUN_08004844": "convertTo64Bit_08004844",
                "param_2": "ptr_data",
                "DAT_0800485c": "*ptr_data"
            },
            "code": "long long convertTo64Bit_08004844(unsigned int inputNum, uint64_t* ptr_data)\n{\n  if (DAT_0800485c != 0) {\n    return CONCAT44(inputNum, 2);\n  }\n  return (uint64_t)inputNum << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004844",
            "calling": [
                "FUN_080047fe"
            ],
            "imported": true,
            "current_name": "convertTo64Bit_08004844"
        },
        "FUN_0800318c": {
            "renaming": {
                "DAT_080031e0": "data_5",
                "DAT_080031f0": "data_9",
                "DAT_080031d0": "data_0",
                "DAT_080031e4": "data_6",
                "DAT_080031f4": "data_10",
                "DAT_080031d4": "data_2",
                "param_1": "index",
                "FUN_0800318c": "get_data_by_index_0800318c",
                "DAT_080031dc": "data_4",
                "DAT_080031ec": "data_8",
                "DAT_080031e8": "data_7",
                "DAT_080031f8": "data_1",
                "DAT_080031d8": "data_3"
            },
            "code": "int get_data_by_index_0800318c(int index) {\n  switch(index) {\n    case 0:\n      return DAT_080031d0;\n    case 1:\n      return DAT_080031f8;\n    case 2:\n      return DAT_080031d4;\n    case 3:\n      return DAT_080031d8;\n    case 4:\n      return DAT_080031dc;\n    case 5:\n      return DAT_080031e0;\n    case 6:\n      return DAT_080031e4;\n    case 7:\n      return DAT_080031e8;\n    case 8:\n      return DAT_080031ec;\n    case 9:\n      return DAT_080031f0;\n    case 10:\n      return DAT_080031f4;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800318c",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": true,
            "current_name": "get_data_by_index_0800318c"
        },
        "FUN_080047d0": {
            "renaming": {
                "iVar1": "index",
                "FUN_080047d0": "check_if_data_is_valid_080047d0",
                "PTR_DAT_080047ec": "data_ptr_start",
                "FUN_080047c0": "handle_invalid_data",
                "* (PTR_DAT_080047ec + iVar1 * 0x14 + 0xc)": "*data_ptr"
            },
            "code": "void check_if_data_is_valid_080047d0(void)\n{\n  int index = get_random_index();\n  int* data_ptr = (int*)(PTR_DAT_080047ec + index * 0x14 + 0xc);\n  if (* (PTR_DAT_080047ec + iVar1 * 0x14 + 0xc) != 0) {\n    handle_invalid_data();\n  }\n  return;\n}",
            "called": [
                "FUN_08004678",
                "FUN_080047c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d0",
            "calling": [
                "FUN_080011a4"
            ],
            "imported": true,
            "current_name": "check_if_data_is_valid_080047d0"
        },
        "FUN_080040f8": {
            "renaming": {
                "FUN_080040f8": "wait_forever_080040f8"
            },
            "code": "void wait_forever_080040f8(void)\n{\n  while(true)\n  {\n    // do nothing\n  }\n}",
            "called": [
                "FUN_080040f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040f8",
            "calling": [
                "FUN_080040f8",
                "FUN_080051ac"
            ],
            "imported": true,
            "current_name": "wait_forever_080040f8"
        },
        "FUN_0800500c": {
            "renaming": {
                "iVar2": "result",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "FUN_0800500c": "checkAndAssignValue_0800500c",
                "puVar1": "previousValuePtr"
            },
            "code": "void checkAndAssignValue_0800500c(int *outputValue, undefined4 inputValue)\n{\n  undefined *previousValuePtr = PTR_DAT_08005028;\n  *(undefined4 *)previousValuePtr = 0;\n  int result = calculateValue(inputValue);\n  if ((result == -1) && (*(int *)previousValuePtr != 0)) {\n    *outputValue = *(int *)previousValuePtr;\n  }\n  return;\n}",
            "called": [
                "FUN_08004094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800500c",
            "calling": [
                "FUN_08004978"
            ],
            "imported": true,
            "current_name": "checkAndAssignValue_0800500c"
        },
        "FUN_080023b4": {
            "renaming": {
                "in_r3": "input_parameter",
                "temp": "temp",
                "flag": "flag",
                "uVar1": "value",
                "multiplier": "multiplier",
                "FUN_080023b4": "calculate_value_080023b4",
                "uVar2": "multiplier",
                "carry": "carry",
                "factor": "factor",
                "value": "value"
            },
            "code": "uint calculate_value_080023b4(void)\n{\n  uint value;\n  uint flag;\n  uint factor;\n  int multiplier;\n  int carry;\n  int temp;\n  \n  flag = *(uint *)(DAT_0800247c + 8) & 0xc;\n  if (flag == 4) {\n    return DAT_08002484;\n  }\n  if (flag != 8) {\n    return DAT_08002480;\n  }\n  value = *(uint *)(DAT_0800247c + 4) & 0x3f;\n  if ((*(uint *)(DAT_0800247c + 4) & 0x400000) == 0) {\n    multiplier = *(int *)(DAT_0800247c + 4) << 0x11;\n    temp = multiplier >> 0x17;\n    carry = (uint)(multiplier * 0x3d08) >> 0x1f;\n    factor = ((carry * -0x3f) - ((uint)(multiplier * 0x7c0) >> 0x1f)) * 8 + (uint)CARRY4(multiplier * 0x3d08,temp);\n    value = FUN_080002d0(temp * 16000000, (temp * 0x3d09) >> 0x16 | factor * 0x400, value, 0, in_r3);\n  }\n  else {\n    multiplier = *(int *)(DAT_0800247c + 4) << 0x11;\n    temp = multiplier >> 0x17;\n    carry = (uint)(multiplier * 0x3d08) >> 0x1f;\n    factor = ((carry * -0x3f) - ((uint)(multiplier * 0x7c0) >> 0x1f)) * 8 + (uint)CARRY4(multiplier * 0x3d08,temp);\n    value = FUN_080002d0(temp * 8000000, factor * 0x200, value, 0, in_r3);\n  }\n  return value / ((((uint)(*(int *)(DAT_0800247c + 4) << 0xe) >> 0x1e) + 1) * 2);\n}",
            "called": [
                "FUN_080002d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023b4",
            "calling": [
                "FUN_08002488"
            ],
            "imported": true,
            "current_name": "calculate_value_080023b4"
        },
        "FUN_080011a4": {
            "renaming": {
                "DAT_080011bc": "data_ptr",
                "PTR_080011bc": "data_ptr",
                "param_1": "new_param",
                "FUN_080011a4": "update_param_080011a4"
            },
            "code": "void update_param_080011a4(uint new_param)\n{\n    uint* DAT_080011bc = (uint*)(DAT_080011bc + 0x14);\n    uint current_param = *DAT_080011bc;\n    if ((current_param & new_param) != 0) {\n        *DAT_080011bc = new_param;\n        call_function();\n    }\n    return;\n}",
            "called": [
                "FUN_080047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011a4",
            "calling": [],
            "imported": true,
            "current_name": "update_param_080011a4"
        },
        "FUN_08001e68": {
            "renaming": {
                "FUN_08001ab0": "handle_case2",
                "puVar2": "flag_ptrs",
                "FUN_08001684": "handle_case1",
                "param_1": "flags",
                "PTR_00000021": "case_ptr",
                "PTR_00000000": "ptr",
                "DAT_08001f38": "FLAG_MASK1",
                "cVar1": "c",
                "uVar3": "flag1",
                "uVar4": "flag2",
                "FUN_08001e68": "check_flags_08001e68"
            },
            "code": "void check_flags_08001e68(uint **flags)\n{\n  uint *flag_PTR_00000000s = *flags;\n  uint flag1 = flag_PTR_00000000s[5];\n  uint flag2 = flag_PTR_00000000s[1];\n  if (((flag1 & DAT_08001f38) != 0) && ((flag2 & 0x100) != 0)) {\n    flags[0x10] = (uint *)((uint)flags[0x10] | 1);\n    flag_PTR_00000000s[5] = 0xfffffeff;\n  }\n  if (((flag1 & FLAG_MASK2) != 0) && ((flag2 & 0x100) != 0)) {\n    flags[0x10] = (uint *)((uint)flags[0x10] | 2);\n    (*flags)[5] = 0xfffffdff;\n  }\n  if (((flag1 & FLAG_MASK3) != 0) && ((flag2 & 0x100) != 0)) {\n    char c = *(char *)((int)flags + 0x3d);\n    if (((*(char *)((int)flags + 0x3e) == ' ') && (*(short *)((int)flags + 0x2a) == 0)) && (((c == '!' || (c == ')')) || ((c == '(' && (flags[0xc] == (uint *)0x21)))))) {\n      handle_case1(flags);\n    }\n    else {\n      flags[0x10] = (uint *)((uint)flags[0x10] | 4);\n      if (*(char *)((int)flags + 0x3e) == '\\x10') {\n        **flags = **flags | 0x200;\n      }\n      (*flags)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag1 & FLAG_MASK4) != 0) && ((flag2 & 0x100) != 0)) {\n    flags[0x10] = (uint *)((uint)flags[0x10] | 8);\n    (*flags)[5] = 0xfffff7ff;\n  }\n  if (flags[0x10] != (uint *)0x0) {\n    handle_case2(flags);\n  }\n  return;\n}",
            "called": [
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e68",
            "calling": [],
            "imported": true,
            "current_name": "check_flags_08001e68"
        },
        "FUN_080019a0": {
            "renaming": {
                "current_state": "current_state",
                "param_1": "data",
                "current_value": "current_value",
                "current_data": "current_data",
                "puVar1": "current_buffer",
                "FUN_080019a0": "process_data_080019a0"
            },
            "code": "uint32_t process_data_080019a0(uint32_t **data)\n{\n  uint32_t *current_data = *data;\n  uint32_t current_value = current_data[4];\n  uint16_t current_state = *(uint16_t *)((int)data + 0x2a);\n\n  if (current_state == 4) {\n    current_data[1] &= 0xfffffbff;\n    uint32_t *current_buffer = data[9];\n    data[9] = (uint32_t *)((int)current_buffer + 1);\n    *(char *)current_buffer = (char)current_value;\n    current_state--;\n  }\n  else if (current_state == 3) {\n    current_data[1] &= 0xfffffbff;\n    **data &= 0xfffffbff;\n    uint32_t *current_buffer = data[9];\n    data[9] = (uint32_t *)((int)current_buffer + 1);\n    *(char *)current_buffer = (char)current_value;\n    current_state--;\n  }\n  else if (current_state == 2) {\n    if ((int)data[0xb] - 1U < 2) {\n      **data &= 0xfffffbff;\n      **data |= 0x100;\n    }\n    else {\n      **data |= 0x200;\n    }\n    uint32_t *current_buffer = data[9];\n    data[9] = (uint32_t *)((int)current_buffer + 1);\n    *(char *)current_buffer = (char)current_value;\n    current_state--;\n    current_buffer = data[9];\n    data[9] = (uint32_t *)((int)current_buffer + 1);\n    *(char *)current_buffer = (char)current_value;\n    current_state--;\n    current_data[1] &= 0xfffffcff;\n    *(uint8_t *)((int)data + 0x3d) = 0x20;\n    data[0xc] = (uint32_t *)0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(uint8_t *)((int)data + 0x3e) = 0;\n      do_nothing_08001902();\n    }\n    else {\n      *(uint8_t *)((int)data + 0x3e) = 0;\n      do_nothing_080015b8();\n    }\n  }\n  else {\n    uint32_t *current_buffer = data[9];\n    data[9] = (uint32_t *)((int)current_buffer + 1);\n    *(char *)current_buffer = (char)current_value;\n    current_state--;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019a0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "process_data_080019a0"
        },
        "FUN_08003f24": {
            "renaming": {
                "uVar1": "function_index",
                "PTR_DAT_08003f40": "function_pointers",
                "PTR_DAT_08003f44": "function_arguments",
                "FUN_08003f00": "get_function_index",
                "FUN_08003f24": "execute_function_if_less_than_10_08003f24"
            },
            "code": "void execute_function_if_less_than_10_08003f24(void)\n{\n  uint function_index;\n  function_index = get_function_index();\n  if (function_index < 10) {\n    (**(code **)(PTR_DAT_08003f40 + function_index * 4))(*(undefined4 *)(PTR_DAT_08003f44 + function_index * 4));\n  }\n  return;\n}",
            "called": [
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f24",
            "calling": [
                "FUN_08002f66"
            ],
            "imported": true,
            "current_name": "execute_function_if_less_than_10_08003f24"
        },
        "FUN_080046b4": {
            "renaming": {
                "PTR_LAB_0800468c_1_0800475c": "data_label_ptr",
                "param_1": "argc",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "data_ptr",
                "PTR_DAT_08004754": "data_start_ptr",
                "FUN_080046b4": "initialize_data_080046b4",
                "PTR_DAT_08004758": "data_ptr_next"
            },
            "code": "void initialize_data_080046b4(int argc, int arg1, undefined4 arg2, undefined4 arg3) {\n  undefined *data_ptr;\n  data_ptr = PTR_DAT_08004754;\n  if (argc != 1) {\n    return;\n  }\n  if (arg1 == 0xffff) {\n    *PTR_DAT_08004754 = 6;\n    *(undefined4 *)(data_ptr + 0xc) = 0;\n    data_ptr[0x14] = 7;\n    *(undefined4 *)(data_ptr + 0x20) = 0;\n    data_ptr[0x28] = 8;\n    *(undefined4 *)(data_ptr + 0x34) = 0;\n    data_ptr[0x3c] = 9;\n    *(undefined4 *)(data_ptr + 0x48) = 0;\n    data_ptr[0x50] = 10;\n    *(undefined4 *)(data_ptr + 0x5c) = 0;\n    data_ptr[100] = 0x17;\n    *(undefined4 *)(data_ptr + 0x70) = 0;\n    data_ptr[0x78] = 0x17;\n    *(undefined4 *)(data_ptr + 0x84) = 0;\n    data_ptr[0x8c] = 0x17;\n    *(undefined4 *)(data_ptr + 0x98) = 0;\n    data_ptr[0xa0] = 0x17;\n    *(undefined4 *)(data_ptr + 0xac) = 0;\n    data_ptr[0xb4] = 0x17;\n    *(undefined4 *)(data_ptr + 0xc0) = 0;\n    data_ptr[200] = 0x28;\n    *(undefined4 *)(data_ptr + 0xd4) = 0;\n    data_ptr[0xdc] = 0x28;\n    *(undefined4 *)(data_ptr + 0xe8) = 0;\n    data_ptr[0xf0] = 0x28;\n    *(undefined4 *)(data_ptr + 0xfc) = 0;\n    data_ptr[0x104] = 0x28;\n    *(undefined4 *)(data_ptr + 0x110) = 0;\n    data_ptr[0x118] = 0x28;\n    *(undefined4 *)(data_ptr + 0x124) = 0;\n    data_ptr[300] = 0x28;\n    *(undefined4 *)(data_ptr + 0x138) = 0;\n    initialize_data_080046b4(0, PTR_LAB_0800468c_1_0800475c, PTR_DAT_08004758, arg3);\n  }\n  return;\n}",
            "called": [
                "FUN_080047fe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b4",
            "calling": [],
            "imported": true,
            "current_name": "initialize_data_080046b4"
        },
        "FUN_0800160c": {
            "renaming": {
                "FUN_0800160c": "do_nothing_0800160c"
            },
            "code": "\nvoid do_nothing_0800160c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160c",
            "calling": [
                "FUN_08001bfc",
                "FUN_0800160e"
            ],
            "imported": true,
            "current_name": "do_nothing_0800160c"
        },
        "FUN_0800160e": {
            "renaming": {
                "FUN_0800160e": "add_to_buffer_0800160e",
                "puVar2": "next_char",
                "param_1": "buffer",
                "cVar1": "current_char"
            },
            "code": "int add_to_buffer_0800160e(int *buffer)\n{\n  char current_char = *(char *)((int)buffer + 0x3d);\n  if (*(short *)((int)buffer + 0x2a) != 0) {\n    undefined *next_char = (undefined *)buffer[9];\n    buffer[9] = (int)(next_char + 1);\n    *next_char = (char)*(undefined4 *)(*buffer + 0x10);\n    *(short *)((int)buffer + 0x2a) = *(short *)((int)buffer + 0x2a) + -1;\n    if ((*(short *)((int)buffer + 0x2a) == 0) && (current_char == '*')) {\n      *(uint *)(*buffer + 4) = *(uint *)(*buffer + 4) & 0xfffffbff;\n      buffer[0xc] = 0x22;\n      *(undefined *)((int)buffer + 0x3d) = 0x28;\n      do_nothing_0800160c();\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160e",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "add_to_buffer_0800160e"
        },
        "FUN_0800293e": {
            "renaming": {
                "FUN_0800293e": "do_nothing_0800293e"
            },
            "code": "\nvoid do_nothing_0800293e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": true,
            "current_name": "do_nothing_0800293e"
        },
        "FUN_08000e18": {
            "renaming": {
                "int_pointer": "int_pointer",
                "*PTR_DAT_08000e2c": "byte_value",
                "FUN_08000e18": "add_byte_to_uint_and_store_in_uint_pointer_08000e18",
                "byte": "byte_value",
                "*(uint *)PTR_DAT_08000e28": "sum",
                "PTR_DAT_08000e28": "result_pointer",
                "uint": "unsigned_integer",
                "int": "int_value",
                "PTR_DAT_08000e2c": "byte_pointer",
                "*result_pointer": "sum",
                "*PTR_DAT_08000e28": "int_value",
                "*(int *)PTR_DAT_08000e28": "int_value"
            },
            "code": "void add_byte_to_uint_and_store_in_uint_pointer_08000e18(void)\n{\n  uint *PTR_DAT_08000e28 = (uint *)PTR_DAT_08000e28;\n  byte *PTR_DAT_08000e2c = *(byte *)PTR_DAT_08000e2c;\n  int *int_pointer = (int *)PTR_DAT_08000e28;\n  uint *PTR_DAT_08000e28 = *int_pointer;\n  uint *(uint *)PTR_DAT_08000e28 = *PTR_DAT_08000e28 + *PTR_DAT_08000e2c;\n  *PTR_DAT_08000e28 = *(uint *)PTR_DAT_08000e28;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e18",
            "calling": [
                "FUN_08003476"
            ],
            "imported": true,
            "current_name": "add_byte_to_uint_and_store_in_uint_pointer_08000e18"
        },
        "FUN_08003486": {
            "renaming": {
                "FUN_08003486": "decode_and_set_bit_08003486",
                "uVar1": "decoded_value",
                "param_1": "bit_position",
                "local_1c": "mask",
                "local_18": "unused",
                "param_2": "value",
                "param_3": "mask",
                "local_20": "value",
                "local_24": "bit_mask"
            },
            "code": "void decode_and_set_bit_08003486(uint bit_position, uint value, uint mask) {\n  uint bit_mask = 1 << (bit_position & 0xf) & 0xffff;\n  uint decoded_value = decode_value((bit_position << 0x18) >> 0x1c);\n  uint masked_value = value & mask;\n  set_bit(decoded_value, &bit_mask);\n  return;\n}",
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003486",
            "calling": [
                "FUN_08004110"
            ],
            "imported": true,
            "current_name": "decode_and_set_bit_08003486"
        },
        "FUN_08005662": {
            "renaming": {
                "iVar1": "result",
                "bVar3": "is_result_negative",
                "FUN_08005662": "process_data_08005662",
                "param_1": "data",
                "param_2": "params",
                "uVar2": "flag"
            },
            "code": "void process_data_08005662(int data, int* params){\n    int result = calculate_result(data, *(short *)(params + 0xe));\n    bool is_result_negative = result == -1;\n    ushort flag = *(ushort *)(params + 0xc);\n    if (is_result_negative) {\n        flag &= 0xefff;\n    }\n    else {\n        *(int *)(params + 0x54) = result;\n        flag |= 0x1000;\n    }\n    *(ushort *)(params + 0xc) = flag;\n}",
            "called": [
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005662",
            "calling": [],
            "imported": true,
            "current_name": "process_data_08005662"
        },
        "FUN_080042ac": {
            "renaming": {
                "iVar1": "result",
                "FUN_080042ac": "checkAndUpdateData_080042ac",
                "param_1": "dataAddress",
                "local_9": "newData",
                "uVar2": "currentIndex"
            },
            "code": "void checkAndUpdateData_080042ac(int dataAddress)\n{\n  int result;\n  ushort currentIndex;\n  undefined newData;\n  \n  result = getData(dataAddress, &newData);\n  if ((result == 0) &&\n     (currentIndex = *(short *)(dataAddress + 100) + 1U & 0x3f, currentIndex != *(ushort *)(dataAddress + 0x66))) {\n    *(undefined *)(*(int *)(dataAddress + 0x60) + (uint)*(ushort *)(dataAddress + 100)) = newData;\n    *(ushort *)(dataAddress + 100) = currentIndex;\n  }\n  return;\n}",
            "called": [
                "FUN_08003e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042ac",
            "calling": [],
            "imported": true,
            "current_name": "checkAndUpdateData_080042ac"
        },
        "FUN_08001864": {
            "renaming": {
                "param_value": "param_value",
                "first_char": "first_char",
                "param_1": "input",
                "FUN_08001864": "process_input_08001864",
                "param": "param",
                "puVar1": "command"
            },
            "code": "uint32_t process_input_08001864(uint32_t **input)\n{\n  uint32_t *command = input[11];\n  char first_char = *(char *)((int)input + 0x3d);\n  if (first_char == '!') {\n    uint32_t *param = input[9];\n    uint32_t param_value = *(uint8_t *)param;\n    if (*(int16_t *)((int)input + 0x2a) == 0) {\n      if (((command == (uint32_t *)0x4) || (command == (uint32_t *)0x8)) || (command == (uint32_t *)0xffff0000)) {\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        **input = **input | 0x200;\n        input[12] = (uint32_t *)0x0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08001718();\n        }\n        else {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_080015b6();\n        }\n      }\n      else {\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        input[12] = (uint32_t *)0x11;\n        *(char *)((int)input + 0x3e) = 0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        do_nothing_080015b6();\n      }\n    }\n    else {\n      input[9] = (uint32_t *)((int)param + 1);\n      (*input)[4] = param_value;\n      *(int16_t *)((int)input + 0x2a) = *(int16_t *)((int)input + 0x2a) - 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001864",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "process_input_08001864"
        },
        "FUN_08000f2c": {
            "renaming": {
                "param_1": "flag_value",
                "FUN_08000f2c": "set_flag_08000f2c",
                "DAT_08000f48": "flag_ptr"
            },
            "code": "void set_flag_08000f2c(int flag_value) {\n  if (flag_value != 4) {\n    *DAT_08000f48 = *DAT_08000f48 & 0xfffffffb;\n    return;\n  }\n  *DAT_08000f48 = *DAT_08000f48 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f2c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": true,
            "current_name": "set_flag_08000f2c"
        },
        "FUN_08000ec4": {
            "renaming": {
                "param_1": "bitIndex",
                "FUN_08000ec4": "setBitInArray_08000ec4",
                "DAT_08000edc": "arrayStartPtr"
            },
            "code": "void setBitInArray_08000ec4(uint bitIndex) {\n  if (bitIndex >= 0) {\n    int arrayIndex = bitIndex >> 5;\n    int bitOffset = bitIndex & 0x1f;\n    int* arrayPtr = (int*)(DAT_08000edc + arrayIndex * 4);\n    *arrayPtr = 1 << bitOffset;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ec4",
            "calling": [
                "FUN_08003e54",
                "FUN_08003eac"
            ],
            "imported": true,
            "current_name": "setBitInArray_08000ec4"
        },
        "FUN_08004338": {
            "renaming": {
                "FUN_08004240": "callFunctionWithData",
                "PTR_DAT_08004360": "dataPointer",
                "DAT_0800435c": "isDataPresent",
                "FUN_08004338": "checkAndCallFunction_08004338"
            },
            "code": "void checkAndCallFunction_08004338(void)\n{\n  if (DAT_0800435c != 0) {\n    callFunctionWithData(PTR_DAT_08004360);\n  }\n  return;\n}",
            "called": [
                "FUN_08004240"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004338",
            "calling": [
                "FUN_08004658"
            ],
            "imported": true,
            "current_name": "checkAndCallFunction_08004338"
        },
        "FUN_080005e0": {
            "renaming": {
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "FUN_080005e0": "trigger_software_interrupt_080005e0"
            },
            "code": "void trigger_software_interrupt_080005e0(void)\n{\n  software_interrupt(SYSTEM_CALL_NUMBER);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_080005e4"
            ],
            "imported": true,
            "current_name": "trigger_software_interrupt_080005e0"
        },
        "FUN_080005e4": {
            "renaming": {
                "uVar1": "result",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "FUN_080005e4": "check_and_call_function_080005e4"
            },
            "code": "int check_and_call_function_080005e4(int arg1, int arg2, int arg3, int arg4)\n{\n  int result;\n  if (*(int *)PTR_DAT_080005fc != 0) {\n    return 0;\n  }\n  result = call_function(1, arg1, 0, 0, arg4);\n  return result;\n}",
            "called": [
                "FUN_080005e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e4",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": true,
            "current_name": "check_and_call_function_080005e4"
        },
        "FUN_0800076c": {
            "renaming": {
                "iVar2": "status",
                "FUN_080041bc": "call_function_with_param",
                "uVar1": "result",
                "DAT_08000771": "0x49",
                "param_1": "data",
                "DAT_08000776": "6",
                "PTR_08004204": "get_pointer",
                "DAT_08000777": "5",
                "param_2": "size",
                "FUN_08000728": "calculate_result",
                "PTR_FUN_08000c08": "function_pointer1",
                "param_3": "index",
                "param_4": "value",
                "uVar3": "current_index",
                "DAT_0800078a": "0x56",
                "FUN_0800076c": "increment_and_update_0800076c",
                "DAT_0800076d": "9",
                "PTR_FUN_08000c0c": "function_pointer2"
            },
            "code": "void increment_and_update_0800076c(int **data, int size, int index, int value) {\n  int current_index = (uint)*(byte *)((int)data + DAT_08000771);\n  int result = calculate_result(data, current_index, index, value, value);\n  *(char *)((int)data + current_index + DAT_0800076d) = (char)((ushort)result >> 8);\n  current_index = (current_index + 1) & 0xff;\n  *(char *)((int)data + current_index + DAT_0800076d) = (char)result;\n  *(char *)((int)data + DAT_08000771) = (char)current_index + '\\x01';\n  if (size > 1) {\n    call_function_with_param(size, 1);\n  }\n  if (*(byte *)((int)data + DAT_08000777) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + DAT_0800076d,*(undefined *)((int)data + DAT_08000771));\n  }\n  if (size > 1) {\n    call_function_with_param(size, 0);\n  }\n  if (*(byte *)((int)data + DAT_08000777) < 4) {\n    do {\n      int status = (**(code **)(**data + 0xc))();\n    } while (status >= 0);\n  }\n  *(undefined *)((int)data + DAT_08000771) = 0;\n  int pointer = PTR_08004204();\n  data[0x17] = (int *)(pointer + (uint)*(ushort *)((int)data + DAT_0800078a));\n  *(short *)((int)data + 0xDAT_080007772) = *(short *)((int)data + 0xDAT_080007772) + 1;\n  return;\n}",
            "called": [
                "FUN_08000728",
                "FUN_08004204",
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800076c",
            "calling": [
                "FUN_08000a7a",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_08000b54",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "imported": true,
            "current_name": "increment_and_update_0800076c"
        },
        "FUN_080015b6": {
            "renaming": {
                "FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "\nvoid do_nothing_080015b6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b6",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": true,
            "current_name": "do_nothing_080015b6"
        },
        "FUN_08004460": {
            "renaming": {
                "FUN_08004460": "set_value_at_index_08004460",
                "uVar1": "value_to_set",
                "param_1": "index",
                "param_2": "value"
            },
            "code": "void set_value_at_index_08004460(int index, uint value) {\n  undefined2 value_to_set;\n  if (value < 0x60) {\n    value_to_set = *(undefined2 *)(PTR_DAT_08004478 + value * 2);\n  }\n  else {\n    value_to_set = 0xffff;\n  }\n  *(undefined2 *)(index + 300) = value_to_set;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004460",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": true,
            "current_name": "set_value_at_index_08004460"
        },
        "FUN_080015b8": {
            "renaming": {
                "FUN_080015b8": "do_nothing_080015b8"
            },
            "code": "\nvoid do_nothing_080015b8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b8",
            "calling": [
                "FUN_080019a0",
                "FUN_08001904"
            ],
            "imported": true,
            "current_name": "do_nothing_080015b8"
        },
        "FUN_08001198": {
            "renaming": {
                "FUN_08001198": "set_value_at_offset_08001198",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "shift_amount"
            },
            "code": "void set_value_at_offset_08001198(int base_address, int value, int shift_amount) {\n  if (shift_amount == 0) {\n    *(int *)(base_address + 0x18) = value << 0x10;\n    return;\n  }\n  *(int *)(base_address + 0x18) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001198",
            "calling": [
                "FUN_080034b6"
            ],
            "imported": true,
            "current_name": "set_value_at_offset_08001198"
        },
        "FUN_08003138": {
            "renaming": {
                "FUN_08003138": "get_bit_08003138",
                "param_1": "bit_index",
                "param_2": "data_ptr",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ get_bit_08003138(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003138",
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "imported": true,
            "current_name": "get_bit_08003138"
        },
        "FUN_08000300": {
            "renaming": {
                "FUN_08000300": "FUNC_08000300"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong FUNC_08000300(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  ulonglong uVar1;\n  uint *puVar2;\n  uint uVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 != 0) {\n        param_3 = param_3 << (uVar12 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        param_1 = param_1 << (uVar12 & 0xff);\n      }\n      uVar10 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar10;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar10 * uVar8) * 0x10000;\n      uVar6 = uVar8 * (param_3 & 0xffff);\n      uVar5 = uVar8;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar8 = (uVar7 - uVar6) / uVar10;\n      uVar7 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar10 * uVar8) * 0x10000;\n      uVar10 = uVar8 * (param_3 & 0xffff);\n      uVar6 = uVar8;\n      if (uVar7 <= uVar10 && uVar10 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar10 && uVar10 - uVar7 != 0)) {\n          uVar6 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar10;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n      puVar4 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 == 0) {\n        param_2 = param_2 - param_3;\n        uVar7 = param_3 >> 0x10;\n        uVar11 = param_3 & 0xffff;\n        puVar4 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar12 & 0xff);\n        uVar7 = param_3 >> 0x10;\n        uVar5 = param_2 >> (0x20 - uVar12 & 0xff);\n        uVar9 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        uVar6 = uVar5 / uVar7;\n        uVar11 = param_3 & 0xffff;\n        uVar10 = uVar9 >> 0x10 | (uVar5 - uVar7 * uVar6) * 0x10000;\n        uVar8 = uVar6 * uVar11;\n        param_1 = param_1 << (uVar12 & 0xff);\n        uVar5 = uVar6;\n        if (uVar10 <= uVar8 && uVar8 - uVar10 != 0) {\n          bVar13 = CARRY4(uVar10,param_3);\n          uVar10 = uVar10 + param_3;\n          uVar5 = uVar6 - 1;\n          if ((bVar13 == false) && (uVar10 <= uVar8 && uVar8 - uVar10 != 0)) {\n            uVar5 = uVar6 - 2;\n            uVar10 = uVar10 + param_3;\n          }\n        }\n        uVar3 = (uVar10 - uVar8) / uVar7;\n        param_2 = uVar9 & 0xffff | ((uVar10 - uVar8) - uVar7 * uVar3) * 0x10000;\n        uVar8 = uVar3 * uVar11;\n        uVar6 = uVar3;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar6 = uVar3 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar6 = uVar3 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        puVar4 = (uint *)(uVar6 | uVar5 << 0x10);\n      }\n      uVar10 = param_2 / uVar7;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar10) * 0x10000;\n      uVar6 = uVar11 * uVar10;\n      uVar5 = uVar10;\n      if (uVar8 <= uVar6 && uVar6 - uVar8 != 0) {\n        bVar13 = CARRY4(uVar8,param_3);\n        uVar8 = uVar8 + param_3;\n        uVar5 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar8 <= uVar6 && uVar6 - uVar8 != 0)) {\n          uVar5 = uVar10 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar10 = (uVar8 - uVar6) / uVar7;\n      uVar7 = param_1 & 0xffff | ((uVar8 - uVar6) - uVar7 * uVar10) * 0x10000;\n      uVar11 = uVar11 * uVar10;\n      uVar6 = uVar10;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar11;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar7 >> (uVar12 & 0xff);\n      param_5[1] = 0;\n      return CONCAT44(puVar4,puVar2);\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar4 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar4 = (uint *)count_leading_zeroes(param_4);\n    if (puVar4 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar4;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar4 & 0xff);\n      uVar9 = uVar5 >> 0x10;\n      uVar12 = param_2 >> (uVar8 & 0xff);\n      uVar11 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar4 & 0xff);\n      uVar10 = uVar12 / uVar9;\n      uVar7 = uVar11 >> 0x10 | (uVar12 - uVar9 * uVar10) * 0x10000;\n      uVar6 = uVar10 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar4 & 0xff);\n      param_1 = param_1 << ((uint)puVar4 & 0xff);\n      uVar12 = uVar10;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar12 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar12 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar10 = (uVar7 - uVar6) / uVar9;\n      uVar7 = uVar11 & 0xffff | ((uVar7 - uVar6) - uVar9 * uVar10) * 0x10000;\n      uVar9 = uVar10 * (uVar5 & 0xffff);\n      uVar6 = uVar10;\n      if (uVar7 <= uVar9 && uVar9 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar9 && uVar9 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar12 << 0x10;\n      uVar1 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar7 - uVar9,param_1) < uVar1) {\n        uVar1 = uVar1 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar12 = ((uVar7 - uVar9) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n        *param_5 = uVar12 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar4 & 0xff);\n        param_5[1] = uVar12 >> ((uint)puVar4 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar4, param_3 <= param_1)) {\n      bVar13 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar13;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return ZEXT48(puVar2);\n    }\n  }\n  return CONCAT44(puVar4,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000300",
            "calling": [
                "FUN_080002d0"
            ],
            "imported": true,
            "current_name": "FUNC_08000300"
        },
        "FUN_08002848": {
            "renaming": {
                "*(uint *)(param_1 + 0x20)": "*data",
                "param_1": "data",
                "~(1 << (param_2 & 0xff))": "~mask",
                "FUN_08002848": "set_bit_08002848",
                "1 << (param_2 & 0xff)": "mask",
                "param_2": "bit_position",
                "param_3": "bit_value"
            },
            "code": "void set_bit_08002848(uint32_t *data, uint8_t bit_position, uint8_t bit_value) {\n  uint32_t mask = 1 << (bit_position & 0xff);\n  *data = (*data & ~mask) | (bit_value << (bit_position & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_08002864"
            ],
            "imported": true,
            "current_name": "set_bit_08002848"
        },
        "FUN_0800312c": {
            "renaming": {
                "*(byte *)(param_1 + 0x39)": "byte_at_offset_39",
                "param_1": "input_address",
                "FUN_0800312c": "combine_bytes_at_offsets_0800312c",
                "*(byte *)(param_1 + 0x3a)": "byte_at_offset_3a"
            },
            "code": "byte combine_bytes_at_offsets_0800312c(int input_address)\n{\n  byte byte_at_offset_3a = *(byte *)(input_address + 0x3a);\n  byte byte_at_offset_39 = *(byte *)(input_address + 0x39);\n  return byte_at_offset_3a | byte_at_offset_39;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800312c",
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "imported": true,
            "current_name": "combine_bytes_at_offsets_0800312c"
        },
        "FUN_080028f0": {
            "renaming": {
                "param_1": "data",
                "param_2": "flag",
                "puVar1": "data_ptr",
                "FUN_080028f0": "set_flag_and_clear_bit_080028f0"
            },
            "code": "uint set_flag_and_clear_bit_080028f0(uint **data, uint flag) {\n  uint *data_ptr = *data;\n  FUN_080028d4(data_ptr, flag, 0);\n  if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\n    data_ptr[0x11] &= 0xffff7fff;\n  }\n  data_ptr = *data;\n  if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\n    *data_ptr &= 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080028d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028f0",
            "calling": [
                "FUN_08003414"
            ],
            "imported": true,
            "current_name": "set_flag_and_clear_bit_080028f0"
        },
        "FUN_08000e30": {
            "renaming": {
                "undefined4": "uint32_t",
                "PTR_DAT_08000e38": "pointer_to_data",
                "FUN_08000e30": "get_value_from_pointer_08000e30",
                "*(undefined4 *)PTR_DAT_08000e38": "*pointer_to_data"
            },
            "code": "uint32_t get_value_from_pointer_08000e30() {\n    uint32_t* PTR_DAT_08000e38 = (uint32_t*)PTR_DAT_08000e38;\n    return *(undefined4 *)PTR_DAT_08000e38;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e30",
            "calling": [
                "FUN_08002488",
                "FUN_0800346c",
                "FUN_08001f9c",
                "FUN_08003d18",
                "FUN_0800201c",
                "FUN_08002dd0",
                "FUN_08002d0c"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_08000e30"
        },
        "FUN_08000f56": {
            "renaming": {
                "param_1": "value",
                "*(undefined4 *)(param_1 + 0x10)": "*(undefined4 *)(value + 0x10)",
                "*(undefined *)(param_1 + 5)": "*(undefined *)(value + 5)",
                "*(undefined *)(param_1 + 4)": "*(undefined *)(value + 4)",
                "FUN_08000f56": "set_value_and_reset_08000f56",
                "FUN_080033c8": "call_some_function"
            },
            "code": "int set_value_and_reset_08000f56(int value)\n{\n  if (value != 0) {\n    *(undefined *)(value + 4) = 2;\n    call_some_function();\n    *(undefined4 *)(value + 0x10) = 0;\n    *(undefined *)(value + 4) = 0;\n    *(undefined *)(value + 5) = 0;\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_080033c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f56",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": true,
            "current_name": "set_value_and_reset_08000f56"
        },
        "FUN_0800295c": {
            "renaming": {
                "sVar1": "remaining_messages",
                "param_1": "message_ptr",
                "pbVar2": "data_byte_ptr",
                "message_char": "message_type",
                "data_ptr": "data_ptr",
                "FUN_0800295c": "decode_message_0800295c"
            },
            "code": "int decode_message_0800295c(int *message_ptr) {\n  char message_char = *(char *)((int)message_ptr + 0x39);\n  if (message_char != '!') {\n    return 2;\n  }\n  int message_type = message_ptr[2];\n  int *data_ptr = (int *)(*message_ptr + 4);\n  if (message_type == 0x1000) {\n    *data_ptr = *(unsigned short *)message_ptr[8] & 0x1ff;\n    if (message_ptr[4] == 0) {\n      message_ptr[8] = message_ptr[8] + 2;\n    }\n    else {\n      message_ptr[8] = message_ptr[8] + 1;\n    }\n  }\n  else {\n    unsigned char *data_byte_ptr = (unsigned char *)message_ptr[8];\n    message_ptr[8] = (int)(data_byte_ptr + 1);\n    *data_ptr = (unsigned int)*data_byte_ptr;\n  }\n  short remaining_messages = *(short *)((int)message_ptr + 0x26) - 1;\n  *(short *)((int)message_ptr + 0x26) = remaining_messages;\n  if (remaining_messages == 0) {\n    *data_ptr = (*data_ptr & 0xffffff7f) | 0x40;\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800295c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": true,
            "current_name": "decode_message_0800295c"
        },
        "FUN_08003380": {
            "renaming": {
                "FUN_08003380": "check_value_is_two_08003380",
                "iVar1": "result",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "code": "int check_value_is_two_08003380(uint32_t value1, uint32_t value2, uint32_t value3, uint32_t value4)\n{\n  int result = calculate_value(value1, PTR_DAT_08003398, value3, value4, value4);\n  if ((result << 12) >> 27 != 2) {\n    return 0;\n  }\n  return 0x10;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003380",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": true,
            "current_name": "check_value_is_two_08003380"
        },
        "FUN_08004110": {
            "renaming": {
                "iVar1": "result",
                "iVar3": "index",
                "FUN_08004110": "process_data_08004110",
                "puVar2": "buffer_ptr",
                "param_1": "data_index",
                "check1": "check_result1",
                "check2": "check_result2",
                "param_2": "mode",
                "param_3": "flag",
                "param_4": "data_buffer"
            },
            "code": "void process_data_08004110(uint data_index, uint mode, uint flag, undefined *data_buffer) {\n  int index = -1;\n  undefined *buffer_ptr = PTR_DAT_080041a8;\n  if (data_index < 0x60) {\n    index = (int)*(short *)(buffer_ptr + data_index * 2);\n  }\n  else {\n    index = -1;\n    buffer_ptr = data_buffer;\n  }\n  if (index != -1) {\n    int result = FUN_08003138(index,PTR_DAT_080041ac,flag,buffer_ptr,data_buffer);\n    if (result != 0) {\n      int check1 = FUN_0800355e(index,PTR_DAT_080041b0);\n      if (check1 == 0) {\n        int check2 = FUN_0800355e(index,PTR_DAT_080041b4);\n        if (check2 != 0) {\n          FUN_08003414(index);\n        }\n      }\n      else {\n        FUN_080033d8(index);\n      }\n      FUN_0800316c(index,PTR_DAT_080041ac);\n    }\n    switch(mode) {\n    case 0:\n      FUN_08003486(index,0);\n      break;\n    case 1:\n      FUN_08003486(index,1,0);\n      break;\n    case 2:\n      FUN_08003486(index,0,1);\n      break;\n    case 3:\n      FUN_08003486(index,0,2);\n    }\n    FUN_0800314e(index,PTR_DAT_080041b8);\n  }\n  return;\n}",
            "called": [
                "FUN_080033d8",
                "FUN_0800355e",
                "FUN_0800314e",
                "FUN_08003486",
                "FUN_08003414",
                "FUN_0800316c",
                "FUN_08003138"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_08000600"
            ],
            "imported": true,
            "current_name": "process_data_08004110"
        },
        "FUN_08000ee0": {
            "renaming": {
                "FUN_08000ee0": "validate_input_and_set_globals_08000ee0",
                "param_1": "input",
                "DAT_08000f04": "globals",
                "puVar1": "globals",
                "DAT_08000f08": "ptr"
            },
            "code": "int validate_input_and_set_globals_08000ee0(int input) {\n  int *DAT_08000f04 = DAT_08000f04;\n  if (input - 1U < 0x1000000) {\n    DAT_08000f04[1] = input - 1U;\n    *(undefined *)(DAT_08000f08 + 0x23) = 0xf0;\n    DAT_08000f04[2] = 0;\n    *DAT_08000f04 = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ee0",
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "imported": true,
            "current_name": "validate_input_and_set_globals_08000ee0"
        },
        "FUN_080015ba": {
            "renaming": {
                "FUN_080015ba": "do_nothing_080015ba"
            },
            "code": "\nvoid do_nothing_080015ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015ba",
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "imported": true,
            "current_name": "do_nothing_080015ba"
        },
        "FUN_080015bc": {
            "renaming": {
                "param_1": "params",
                "FUN_080015bc": "decode_string_080015bc",
                "pbVar2": "string_ptr",
                "cVar1": "last_char"
            },
            "code": "int decode_string_080015bc(int *params) {\n  char last_char = *(char *)((int)params + 0x3d);\n  if (*(short *)((int)params + 0x2a) != 0) {\n    byte *string_ptr = (byte *)params[9];\n    params[9] = (int)(string_ptr + 1);\n    *(uint *)(*params + 0x10) = (uint)*string_ptr;\n    *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n    if ((*(short *)((int)params + 0x2a) == 0) && (last_char == ')')) {\n      *(uint *)(*params + 4) = *(uint *)(*params + 4) & 0xfffffbff;\n      params[0xc] = 0x21;\n      *(undefined *)((int)params + 0x3d) = 0x28;\n      do_nothing();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015bc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "decode_string_080015bc"
        },
        "FUN_08000f4c": {
            "renaming": {
                "FUN_08000f4c": "do_nothing_08000f4c"
            },
            "code": "\nvoid do_nothing_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4c",
            "calling": [
                "FUN_08000f4e"
            ],
            "imported": true,
            "current_name": "do_nothing_08000f4c"
        },
        "FUN_08000f4e": {
            "renaming": {
                "do_nothing_08000f4c": "do_nothing",
                "FUN_08000f4e": "do_nothing_and_return_08000f4e"
            },
            "code": "void do_nothing_and_return_08000f4e(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4e",
            "calling": [
                "FUN_08003476"
            ],
            "imported": true,
            "current_name": "do_nothing_and_return_08000f4e"
        },
        "FUN_0800066c": {
            "renaming": {
                "*(undefined2 *)(param_1 + 0x56)": "*(short *)(data_address + 86)",
                "param_1": "data_address",
                "*(undefined *)(param_1 + 6)": "*(char *)(data_address + 6)",
                "*(undefined *)(param_1 + 4)": "*(char *)(data_address + 4)",
                "param_2": "data_value",
                "param_3": "data_length",
                "param_4": "data_type",
                "*(char *)(param_1 + 5)": "*(char *)(data_address + 5)",
                "FUN_0800066c": "update_data_0800066c"
            },
            "code": "void update_data_0800066c(int data_address, char data_value, int data_length, char data_type) {\n  *(char *)(data_address + 4) = data_value;\n  if (data_length > 3) {\n    data_length = 0;\n  }\n  *(char *)(data_address + 5) = (char)data_length;\n  *(char *)(data_address + 6) = data_type;\n  *(short *)(data_address + 86) = 1000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800066c",
            "calling": [
                "FUN_08000682"
            ],
            "imported": true,
            "current_name": "update_data_0800066c"
        },
        "FUN_080042e8": {
            "renaming": {
                "bVar2": "masked_counter_byte",
                "bVar1": "counter_byte",
                "FUN_08003df4": "function_1",
                "iVar3": "counter",
                "param_1": "memory_address",
                "param_2": "value",
                "FUN_080042e8": "set_flag_and_store_080042e8",
                "FUN_08003eac": "function_2"
            },
            "code": "int set_flag_and_store_080042e8(int memory_address, uint8_t value) {\n  uint16_t counter = *(uint16_t *)(memory_address + 0x140) + 1;\n  uint8_t counter_byte = (uint8_t)counter;\n  uint8_t masked_counter_byte = counter_byte & 0x7f;\n  if (counter == 0) {\n    masked_counter_byte = -(-counter_byte & 0x7f);\n  }\n  while (*(uint16_t *)(memory_address + 0x142) == (uint16_t)masked_counter_byte);\n  *(uint8_t *)(*(int *)(memory_address + 0x13c) + (uint16_t)*(uint16_t *)(memory_address + 0x140)) = value;\n  *(uint16_t *)(memory_address + 0x140) = (uint16_t)masked_counter_byte;\n  int result = function_1(memory_address + 0xd4);\n  if (result == 0) {\n    function_2(memory_address + 0xd4,PTR_LAB_0800420c_1_08004334);\n  }\n  *(uint8_t *)(memory_address + 0x10) = 1;\n  return 1;\n}",
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e8",
            "calling": [],
            "imported": true,
            "current_name": "set_flag_and_store_080042e8"
        },
        "FUN_080038d0": {
            "renaming": {
                "*(char *)(iVar1 + 0x5e)": "flag",
                "iVar1": "function_pointer",
                "*(char *)(iVar1 + 0x2c)": "character",
                "*(code **)(iVar1 + 0x60)": "function_to_call",
                "(*function_to_call)": "*function_to_call",
                "param_1": "param_1",
                "execute_some_other_function": "execute_some_other_function",
                "FUN_080038d0": "check_and_call_function_if_valid_080038d0",
                "FUN_0800387c": "get_function_pointer"
            },
            "code": "void check_and_call_function_if_valid_080038d0(int param_1)\n{\n  int function_pointer = get_function_pointer();\n  code *function_to_call = *(code **)(function_pointer + 0x60);\n  char flag = *(char *)(function_pointer + 0x5e);\n  char character = *(char *)(function_pointer + 0x2c);\n  if ((function_to_call != (code *)0x0) && (flag == '\\x01') && (character != ' ')) {\n    (*function_to_call)(function_pointer + 0x68);\n  }\n  execute_some_other_function(param_1);\n  return;\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038d0",
            "calling": [
                "FUN_08001684",
                "FUN_08001ab0",
                "FUN_08001bfc"
            ],
            "imported": true,
            "current_name": "check_and_call_function_if_valid_080038d0"
        },
        "FUN_0800410c": {
            "renaming": {
                "FUN_0800410c": "always_returns_one_0800410c"
            },
            "code": "int always_returns_one_0800410c(void) {\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800410c",
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "imported": true,
            "current_name": "always_returns_one_0800410c"
        },
        "FUN_0800260c": {
            "renaming": {
                "uVar1": "shifted_value",
                "DAT_08002624": "array_of_values",
                "FUN_080025e0": "get_initial_value",
                "PTR_DAT_08002628": "array_of_shifts",
                "FUN_0800260c": "get_shifted_value_0800260c"
            },
            "code": "uint get_shifted_value_0800260c(void)\n{\n  uint shifted_value;\n  shifted_value = get_initial_value();\n  uint index = (uint)(*(int *)(DAT_08002624 + 8) << 0x10) >> 0x1d;\n  uint shifted_by = PTR_DAT_08002628[index];\n  return shifted_value >> shifted_by;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800260c",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": true,
            "current_name": "get_shifted_value_0800260c"
        },
        "FUN_08004240": {
            "renaming": {
                "FUN_08004240": "calculate_offset_08004240",
                "*(short *)(param_1 + 0x138)": "first_value",
                "param_1": "base_address",
                "result": "result",
                "*(short *)(param_1 + 0x13a)": "second_value"
            },
            "code": "ushort calculate_offset_08004240(int base_address)\n{\n    short first_value = *(short *)(base_address + 0x138);\n    short second_value = *(short *)(base_address + 0x13a);\n    short result = (first_value + 0x40) - second_value;\n    return result & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004240",
            "calling": [
                "FUN_08004338"
            ],
            "imported": true,
            "current_name": "calculate_offset_08004240"
        },
        "FUN_080026c8": {
            "renaming": {
                "FUN_080026c8": "do_nothing_080026c8"
            },
            "code": "\nvoid do_nothing_080026c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026c8",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": true,
            "current_name": "do_nothing_080026c8"
        },
        "FUN_080041bc": {
            "renaming": {
                "iVar1": "result",
                "PTR_DAT_080041fc": "array_start",
                "FUN_080041bc": "process_data_080041bc",
                "PTR_DAT_08004200": "helper_array",
                "puVar3": "array_ptr",
                "FUN_08003138": "process_data_helper",
                "param_1": "index",
                "FUN_0800318c": "get_value",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "data_array",
                "uVar2": "value3",
                "uVar4": "data",
                "FUN_080034b6": "set_bit"
            },
            "code": "void process_data_080041bc(uint index, undefined4 value1, undefined4 value2, undefined *data_array)\n{\n  int result;\n  uint data;\n  undefined *array_ptr;\n  \n  if (index < 0x60) {\n    data = (uint)*(short *)(PTR_DAT_080041fc + index * 2);\n    array_ptr = PTR_DAT_080041fc;\n  }\n  else {\n    data = 0xffffffff;\n    array_ptr = data_array;\n  }\n  if ((data != 0xffffffff) &&\n     (result = process_data_080041bc_helper(data,PTR_DAT_08004200,value2,array_ptr,data_array), result != 0)) {\n    undefined4 value3 = get_value(data);\n    set_bit(value3,1 << (data & 0xf) & 0xffff,value1);\n  }\n  return;\n}",
            "called": [
                "FUN_080034b6",
                "FUN_08003138",
                "FUN_0800318c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041bc",
            "calling": [
                "FUN_08000600",
                "FUN_080006b4",
                "FUN_0800076c"
            ],
            "imported": true,
            "current_name": "process_data_080041bc"
        },
        "FUN_08004364": {
            "renaming": {
                "*(int *)(param_1 + 0x134)": "*offset_0x134",
                "*(undefined2 *)(param_1 + 0x13a)": "*offset_0x13a",
                "FUN_08004364": "initialize_struct_08004364",
                "*(undefined2 *)(param_1 + 0x138)": "*offset_0x138",
                "param_1": "struct_address",
                "*(int *)(param_1 + 0x13c)": "*offset_0x13c",
                "*(undefined2 *)(param_1 + 0x140)": "*offset_0x140",
                "*(undefined2 *)(param_1 + 0x142)": "*offset_0x142"
            },
            "code": "void initialize_struct_08004364(int struct_address) {\n  int* offset_0x134 = (int*)(struct_address + 0x134);\n  *offset_0x134 = struct_address + 0x11;\n  short* offset_0x138 = (short*)(struct_address + 0x138);\n  *offset_0x138 = 0;\n  short* offset_0x13a = (short*)(struct_address + 0x13a);\n  *offset_0x13a = 0;\n  int* offset_0x13c = (int*)(struct_address + 0x13c);\n  *offset_0x13c = struct_address + 0x51;\n  short* offset_0x140 = (short*)(struct_address + 0x140);\n  *offset_0x140 = 0;\n  short* offset_0x142 = (short*)(struct_address + 0x142);\n  *offset_0x142 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004364",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": true,
            "current_name": "initialize_struct_08004364"
        },
        "FUN_08000682": {
            "renaming": {
                "FUN_08000682": "execute_function_08000682",
                "param_1": "input_param",
                "FUN_0800066c": "perform_initialization"
            },
            "code": "undefined4 execute_function_08000682(undefined4 input_param)\n{\n  perform_initialization();\n  return input_param;\n}",
            "called": [
                "FUN_0800066c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000682",
            "calling": [
                "FUN_08000690"
            ],
            "imported": true,
            "current_name": "execute_function_08000682"
        },
        "FUN_08000e3c": {
            "renaming": {
                "DAT_08000e5c": "ptr",
                "param_1": "value",
                "FUN_08000e3c": "updateValue_08000e3c",
                "PTR_08000e5c": "ptr"
            },
            "code": "void updateValue_08000e3c(uint value) {\n    uint* PTR_08000e5c = (uint*)(DAT_08000e5c + 0xc);\n    uint mask = 0xf8ff;\n    uint newValue = (value & 7) << 8 | (*PTR_08000e5c & mask) | 0x5fa0000;\n    *PTR_08000e5c = newValue;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e3c",
            "calling": [
                "FUN_08000de4",
                "FUN_08004648"
            ],
            "imported": true,
            "current_name": "updateValue_08000e3c"
        },
        "FUN_08002864": {
            "renaming": {
                "bVar1": "is_dat_080028d0",
                "puVar2": "ptr_data",
                "param_1": "ptr_param",
                "FUN_08002864": "check_and_update_flags_08002864",
                "param_2": "param_value"
            },
            "code": "uint32_t check_and_update_flags_08002864(uint32_t **ptr_param, uint32_t param_value)\n{\n  bool is_dat_080028d0 = false;\n  uint32_t *ptr_data = *ptr_param;\n  \n  FUN_08002848(*ptr_param, param_value, 0);\n  \n  if (ptr_data == DAT_080028d0 || ptr_data == DAT_080028d0 + 0x100) {\n    is_dat_080028d0 = true;\n  }\n  \n  bool flags_check = ((is_dat_080028d0) && ((ptr_data[8] & 0x1111) == 0) && ((ptr_data[8] & 0x444) == 0));\n  \n  if (flags_check) {\n    ptr_data[0x11] &= 0xffff7fff;\n  }\n  \n  if (((ptr_data[8] & 0x1111) == 0) && ((ptr_data[8] & 0x444) == 0)) {\n    *ptr_data &= 0xfffffffe;\n  }\n  \n  *(uint8_t *)((int)ptr_param + 0x39) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002864",
            "calling": [
                "FUN_08003414"
            ],
            "imported": true,
            "current_name": "check_and_update_flags_08002864"
        },
        "FUN_0800532c": {
            "renaming": {
                "param_1": "params",
                "FUN_0800532c": "initialize_params_0800532c",
                "param_2": "param_2",
                "param_3": "param_3",
                "puVar1": "pointer_to_func"
            },
            "code": "void initialize_params_0800532c(undefined4 *params, undefined2 param_2, undefined2 param_3)\n{\n  undefined *pointer_to_func;\n  params[0] = 0;\n  params[1] = 0;\n  params[2] = 0;\n  *(undefined2 *)(params + 3) = param_2;\n  params[0x19] = 0;\n  *(undefined2 *)((int)params + 0xe) = param_3;\n  params[4] = 0;\n  params[5] = 0;\n  params[6] = 0;\n  memset(params + 0x17, 0, 8);\n  params[9] = DAT_08005364;\n  params[10] = PTR_FUN_0800562a_1_08005368;\n  params[0xb] = PTR_FUN_08005662_1_0800536c;\n  pointer_to_func = PTR_LAB_08005686_1_08005370;\n  params[8] = params;\n  params[0xc] = pointer_to_func;\n  return;\n}",
            "called": [
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800532c",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": true,
            "current_name": "initialize_params_0800532c"
        },
        "FUN_0800314e": {
            "renaming": {
                "uVar1": "shifted_index",
                "param_1": "index",
                "param_2": "array",
                "PTR_": "",
                "FUN_0800314e": "set_bit_at_index_0800314e",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ set_bit_at_index_0800314e(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": true,
            "current_name": "set_bit_at_index_0800314e"
        },
        "FUN_0800447c": {
            "renaming": {
                "FUN_08004460": "function2",
                "PTR_PTR_FUN_080042e8_1_080044c8": "function_pointer",
                "uVar1": "var1",
                "FUN_08004364": "function4",
                "PTR_DAT_080044d4": "data_pointer3",
                "param_1": "parameters",
                "FUN_08004444": "function1",
                "*param_1": "*parameters",
                "*(undefined2*)(param_1 + 0x4b)": "*(undefined2*)(parameters + 0x4b)",
                "param_2": "param2",
                "param_3": "param3",
                "PTR_DAT_080044d0": "data_pointer2",
                "param_4": "param4",
                "*(undefined2*)((int)param_1 + 0x12e)": "*(undefined2*)((int)parameters + 0x12e)",
                "FUN_0800447c": "initialize_parameters_0800447c",
                "PTR_DAT_080044cc": "data_pointer1",
                "FUN_0800351e": "function3"
            },
            "code": "undefined4* initialize_parameters_0800447c(undefined4* parameters, undefined4 param2, undefined4 param3, undefined4 param4) {\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  *parameters = PTR_PTR_FUN_080042e8_1_080044c8;\n  if (parameters == (undefined4*)PTR_DAT_080044cc) {\n    function1(parameters, 0x4c, param3, PTR_DAT_080044cc, param4);\n    function2(parameters, 0x4d);\n  }\n  else {\n    undefined2 var1 = function3(param2, PTR_DAT_080044d0);\n    *(undefined2*)((int)parameters + 0x12e) = var1;\n    var1 = function3(param2, PTR_DAT_080044d4);\n    *(undefined2*)(parameters + 0x4b) = var1;\n  }\n  function4(parameters);\n  return parameters;\n}",
            "called": [
                "FUN_08004444",
                "FUN_08004460",
                "FUN_08004364",
                "FUN_0800351e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800447c",
            "calling": [
                "FUN_080044d8"
            ],
            "imported": true,
            "current_name": "initialize_parameters_0800447c"
        },
        "FUN_08004808": {
            "renaming": {
                "PTR_PTR_DAT_08004834": "function_table",
                "uVar1": "file_descriptor",
                "PTR_s_assertion___s__failed__file___s__0800483c": "message_header",
                "puVar2": "assertion_failed_message",
                "param_1": "line_number",
                "PTR_s__08004840": "message_string",
                "param_2": "column_number",
                "param_3": "message",
                "param_4": "message_length",
                "FUN_08004808": "assertion_failed_08004808",
                "uVar3": "current_time",
                "uVar4": "message_type",
                "PTR_s___function__08004838": "assertion_failed_string"
            },
            "code": "void assertion_failed_08004808(undefined4 line_number, undefined4 column_number, undefined *message, undefined4 message_length)\n{\n  undefined4 file_descriptor = *(undefined4 *)(*(int *)PTR_PTR_DAT_08004834 + 0xc);\n  undefined *assertion_failed_08004808_message = PTR_s___function__08004838;\n  undefined4 message_type = message_length;\n  if (message == (undefined *)0x0) goto LAB_0800482c;\n  do {\n    write_message_to_file(file_descriptor, assertion_failed_08004808_message, message_length, line_number, column_number, message_type, message, message_length);\n    undefined8 current_time = get_current_time();\n    column_number = (undefined4)((ulonglong)current_time >> 0x20);\n    file_descriptor = (undefined4)current_time;\nLAB_0800482c:\n    message = PTR_s__08004840;\n    assertion_failed_08004808_message = PTR_s__08004840;\n  } while(true);\n}",
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004808",
            "calling": [
                "FUN_08004388"
            ],
            "imported": true,
            "current_name": "assertion_failed_08004808"
        },
        "FUN_08000f72": {
            "renaming": {
                "**param_1": "**bit_array",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "FUN_08000f72": "clear_bit_in_uint32_08000f72",
                "*(undefined *)(param_1 + 1)": "*(uint8_t *)(bit_array + 1)"
            },
            "code": "uint32_t clear_bit_in_uint32_08000f72(uint32_t **bit_array, uint32_t bit_index) {\n  **bit_array = **bit_array & ~(1 << (bit_index & 0xff));\n  *(uint8_t *)(bit_array + 1) = 1;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f72",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": true,
            "current_name": "clear_bit_in_uint32_08000f72"
        },
        "FUN_08001d00": {
            "renaming": {
                "iVar1": "data",
                "FUN_0800160e": "process_data_10",
                "DAT_08001e50": "DAT_08001e50",
                "FUN_08001440": "process_data_11",
                "FUN_08001420": "process_data_13",
                "param_1": "data_ptr",
                "DAT_08001e5c": "DAT_08001e5c",
                "FUN_08001864": "process_data_7",
                "FUN_080015bc": "process_data_12",
                "FUN_08001904": "process_data_4",
                "uVar3": "var3",
                "FUN_0800165a": "process_data_8",
                "uVar2": "var1",
                "uVar4": "var2",
                "DAT_08001e64": "DAT_08001e64",
                "FUN_0800171a": "process_data_6",
                "DAT_08001e60": "DAT_08001e60",
                "DAT_08001e4c": "DAT_08001e4c",
                "FUN_08001256": "process_data_1",
                "FUN_080011c0": "process_data_3",
                "FUN_08001bfc": "process_data_9",
                "FUN_0800124a": "process_data_2",
                "FUN_08001d00": "analyze_data_08001d00",
                "DAT_08001e54": "DAT_08001e54",
                "FUN_080019a0": "process_data_5"
            },
            "code": "void analyze_data_08001d00(int *data_ptr)\n{\n  int data = *data_ptr;\n  uint var1 = *(uint *)(data + 0x18);\n  uint var2 = *(uint *)(data + 0x14);\n  uint var3 = *(uint *)(data + 4);\n  \n  if ((*(char *)((int)data_ptr + 0x3e) == '\\x10') || (*(char *)((int)data_ptr + 0x3e) == '@')) {\n    if (((var2 & 0x10001) == 0) || ((var3 & 0x200) == 0)) {\n      if (((DAT_08001e60 & var2) == 0) || ((var3 & 0x200) == 0)) {\n        if (((DAT_08001e4c & var2) != 0) && ((var3 & 0x200) != 0)) {\n          process_data_1(data_ptr);\n        }\n      }\n      else {\n        process_data_2(data_ptr);\n      }\n    }\n    else {\n      process_data_3(data_ptr);\n    }\n    if ((DAT_08001e54 & var1) == 0) {\n      if ((((DAT_08001e64 & var2) != 0) && ((var3 & 0x400) != 0)) && ((DAT_08001e5c & var2) == 0)\n         ) {\n        process_data_4(data_ptr);\n        return;\n      }\n      if (((DAT_08001e5c & var2) != 0) && ((var3 & 0x200) != 0)) {\n        process_data_5(data_ptr);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_08001e58 & var2) != 0) && ((var3 & 0x400) != 0)) && ((DAT_08001e5c & var2) == 0)\n         ) {\n        process_data_6(data_ptr);\n        return;\n      }\n      if (((DAT_08001e5c & var2) != 0) && ((var3 & 0x200) != 0)) {\n        process_data_7(data_ptr);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_08001e4c & var2) != 0) && ((var3 & 0x200) != 0)) {\n      process_data_8();\n      return;\n    }\n    if (((DAT_08001e50 & var2) != 0) && ((var3 & 0x200) != 0)) {\n      process_data_9(data_ptr);\n      return;\n    }\n    if ((DAT_08001e54 & var1) == 0) {\n      if ((((DAT_08001e64 & var2) != 0) && ((var3 & 0x400) != 0)) && ((DAT_08001e5c & var2) == 0)\n         ) {\n        process_data_10(data_ptr);\n        return;\n      }\n      if (((DAT_08001e5c & var2) != 0) && ((var3 & 0x200) != 0)) {\n        process_data_11(data_ptr);\n      }\n    }\n    else {\n      if ((((DAT_08001e58 & var2) != 0) && ((var3 & 0x400) != 0)) && ((DAT_08001e5c & var2) == 0)\n         ) {\n        process_data_12(data_ptr);\n        return;\n      }\n      if (((DAT_08001e5c & var2) != 0) && ((var3 & 0x200) != 0)) {\n        process_data_13(data_ptr);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080011c0",
                "FUN_0800124a",
                "FUN_0800171a",
                "FUN_08001bfc",
                "FUN_08001904",
                "FUN_080015bc",
                "FUN_08001256",
                "FUN_08001420",
                "FUN_08001440",
                "FUN_080019a0",
                "FUN_0800160e",
                "FUN_08001864",
                "FUN_0800165a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d00",
            "calling": [],
            "imported": true,
            "current_name": "analyze_data_08001d00"
        }
    },
    "used_tokens": 174651,
    "layers": [
        [
            "FUN_080006b4",
            "FUN_080034da",
            "FUN_080035fc",
            "FUN_08003dd0",
            "FUN_08000c8c",
            "FUN_08000a4e",
            "FUN_08004658",
            "FUN_080034f4",
            "FUN_0800355e",
            "FUN_0800573c",
            "FUN_08003e54",
            "FUN_08004fdc",
            "FUN_080056d4",
            "thunk_FUN_0800410c",
            "FUN_080033d8",
            "FUN_08002488",
            "FUN_08004544",
            "FUN_08003cc8",
            "FUN_08000fb4",
            "FUN_08001bfc",
            "FUN_08002d72",
            "FUN_080007f0",
            "FUN_0800562a",
            "FUN_080044d8",
            "FUN_08003df4",
            "FUN_08005400",
            "FUN_08003582",
            "FUN_08005760",
            "FUN_08004678",
            "FUN_08003900",
            "FUN_08000f0c",
            "FUN_08000998",
            "FUN_080055d0",
            "FUN_080056f8",
            "FUN_080054b4",
            "FUN_0800171a",
            "FUN_08004560",
            "FUN_08000a7a",
            "FUN_08004cb0",
            "FUN_08003594",
            "FUN_08002940",
            "FUN_08004204",
            "FUN_08003476",
            "FUN_08004444",
            "FUN_0800346c",
            "FUN_080053a0",
            "FUN_080028d4",
            "FUN_080040ec",
            "FUN_08001460",
            "FUN_08003880",
            "FUN_08002f4c",
            "FUN_080035bc",
            "FUN_080025ec",
            "FUN_08000c4c",
            "FUN_08004a60",
            "FUN_080050d0",
            "FUN_08004978",
            "FUN_08002d0c",
            "FUN_08001904",
            "FUN_08000c64",
            "FUN_08002ffc",
            "FUN_0800387c",
            "FUN_0800351e",
            "FUN_08002f66",
            "FUN_080034b6",
            "FUN_08003eac",
            "FUN_08003e18",
            "FUN_080040fc",
            "FUN_08002dd0",
            "FUN_08004860",
            "FUN_08004622",
            "FUN_08003414",
            "FUN_08005718",
            "FUN_080011c0",
            "FUN_08000b54",
            "FUN_0800376e",
            "FUN_08000d98",
            "FUN_08003f48",
            "FUN_0800340c",
            "FUN_0800352e",
            "FUN_08001ab0",
            "FUN_08001f9c",
            "FUN_08000d8e",
            "FUN_08004638",
            "FUN_080008cc",
            "FUN_08005608",
            "FUN_08002efa",
            "FUN_0800377c",
            "FUN_0800268e",
            "FUN_080008e2",
            "FUN_080045c8",
            "FUN_08003d18",
            "FUN_08004640",
            "FUN_080034ce",
            "FUN_080047fe",
            "FUN_08001256",
            "FUN_08004884",
            "FUN_08004648",
            "FUN_08000600",
            "FUN_080045be",
            "FUN_08000728",
            "FUN_0800354a",
            "FUN_0800124a",
            "FUN_08004094",
            "FUN_080033c8",
            "FUN_080031fc",
            "FUN_08000690",
            "FUN_080054fc",
            "FUN_08001420",
            "FUN_08000de4",
            "FUN_080026ce",
            "FUN_08000218",
            "FUN_0800339c",
            "FUN_08000e60",
            "FUN_0800165a",
            "FUN_08000b04",
            "FUN_0800262c",
            "FUN_08004388",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_08002eb2",
            "FUN_08000d3c",
            "FUN_0800316c",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_08004a34",
            "FUN_080002d0",
            "FUN_08003f00",
            "FUN_08001440",
            "FUN_08000230",
            "FUN_08001684",
            "FUN_08000f8c",
            "FUN_080001ac",
            "FUN_080040e0",
            "FUN_080048cc",
            "FUN_080040e4",
            "FUN_08003506",
            "FUN_080025e0",
            "FUN_080040e8",
            "FUN_08000a00",
            "FUN_080047c0",
            "FUN_08005374",
            "FUN_08003750",
            "FUN_080014ec",
            "FUN_080048dc",
            "FUN_08003754",
            "FUN_08001578",
            "FUN_08004844",
            "FUN_0800318c",
            "FUN_080047d0",
            "FUN_080040f8",
            "FUN_0800500c",
            "FUN_080023b4",
            "FUN_080011a4",
            "FUN_08001e68",
            "FUN_080019a0",
            "FUN_08003f24",
            "FUN_080046b4",
            "FUN_0800160e",
            "FUN_08000e18",
            "FUN_08003486",
            "FUN_08005662",
            "FUN_080042ac",
            "FUN_08001864",
            "FUN_08000f2c",
            "FUN_08000ec4",
            "FUN_08004338",
            "FUN_080005e0",
            "FUN_080005e4",
            "FUN_0800076c",
            "FUN_08004460",
            "FUN_08001198",
            "FUN_08003138",
            "FUN_08002848",
            "FUN_0800312c",
            "FUN_080028f0",
            "FUN_08000e30",
            "FUN_08000f56",
            "FUN_0800295c",
            "FUN_08003380",
            "FUN_08004110",
            "FUN_08000ee0",
            "FUN_080015bc",
            "FUN_08000f4e",
            "FUN_0800066c",
            "FUN_080042e8",
            "FUN_080038d0",
            "FUN_0800410c",
            "FUN_0800260c",
            "FUN_08004240",
            "FUN_080041bc",
            "FUN_08004364",
            "FUN_08000682",
            "FUN_08000e3c",
            "FUN_08002864",
            "FUN_0800532c",
            "FUN_0800314e",
            "FUN_0800447c",
            "FUN_08004808",
            "FUN_08000f72",
            "FUN_08001d00"
        ]
    ],
    "locked_functions": []
}