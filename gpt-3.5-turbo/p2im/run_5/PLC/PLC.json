{
    "functions": {
        "FUN_080006b4": {
            "renaming": {
                "FUN_080006b4": "decode_and_store_080006b4",
                "bVar1": "is_overflow",
                "bVar4": "stored_data_index",
                "iVar3": "result",
                "param_1": "input",
                "uVar2": "stored_byte"
            },
            "code": "int decode_and_store_080006b4(int **input)\n{\n  bool is_overflow = false;\n  undefined stored_data[64] = {0};\n  if (1 < *(byte *)((int)input + 6)) {\n    decode_value_080041bc(*(byte *)((int)input + 6),0);\n  }\n  if (*(byte *)((int)input + 5) < 4) {\n    while (true) {\n      int result = (**(code **)(**input + 8))();\n      if (result == 0) {\n        break;\n      }\n      stored_data[*((char *)input + 0x49) + 9] = (**(code **)(**input + 0xc))();\n      *((char *)input + 0x49) += 1;\n      if (*((char *)input + 0x49) > 0x3f) {\n        is_overflow = true;\n        break;\n      }\n    }\n  }\n  if (is_overflow) {\n    *(short *)(input + 0x15) += 1;\n    return -3;\n  }\n  *(short *)(input + 0x14) += 1;\n  return (int)*(char *)((int)input + 0x49);\n}",
            "called": [
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006b4",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "decode_and_store_080006b4"
        },
        "FUN_080034da": {
            "renaming": {
                "FUN_080034da": "find_value_in_array_080034da",
                "param_1": "value",
                "*param_2": "*array",
                "param_2": "array"
            },
            "code": "int find_value_in_array_080034da(int value, short *array)\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == value) break;\n    array = array + 6;\n  }\n  return *(int *)(array + 2);\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034da",
            "calling": [
                "FUN_080034da",
                "FUN_080034f4"
            ],
            "imported": true,
            "current_name": "find_value_in_array_080034da"
        },
        "FUN_080035fc": {
            "renaming": {
                "DAT_08003728": "DATA_E",
                "DAT_08003718": "DATA_A",
                "DAT_08003748": "DATA_M",
                "DAT_08003738": "DATA_I",
                "FUN_080035fc": "set_flags_based_on_value_080035fc",
                "DAT_08003720": "DATA_C",
                "DAT_08003740": "DATA_K",
                "param_1": "value",
                "DAT_08003730": "DATA_G",
                "DAT_08003724": "DATA_D",
                "DAT_08003744": "DATA_L",
                "DAT_08003734": "DATA_H",
                "DAT_0800374c": "PTR_FLAGS",
                "DAT_0800371c": "DATA_B",
                "DAT_0800373c": "DATA_J",
                "DAT_0800372c": "DATA_F"
            },
            "code": "void set_flags_based_on_value_080035fc(int *value){\n    uint *flag_40 = (uint *)(DAT_0800374c + 0x40);\n    uint *flag_44 = (uint *)(DAT_0800374c + 0x44);\n    switch (*value) {\n        case DAT_08003718:\n            *flag_44 &= 0xfffffffe;\n            break;\n        case 0x40000000:\n            *flag_40 &= 0xfffffffe;\n            break;\n        case DAT_0800371c:\n            *flag_40 &= 0xfffffffd;\n            break;\n        case DAT_08003720:\n            *flag_40 &= 0xfffffffb;\n            break;\n        case DAT_08003724:\n            *flag_40 &= 0xfffffff7;\n            break;\n        case DAT_08003728:\n            *flag_40 &= 0xffffffef;\n            break;\n        case DAT_0800372c:\n            *flag_40 &= 0xffffffdf;\n            break;\n        case DAT_08003730:\n            *flag_44 &= 0xfffffffd;\n            break;\n        case DAT_08003734:\n            *flag_44 &= 0xfffeffff;\n            break;\n        case DAT_08003738:\n            *flag_44 &= 0xfffdffff;\n            break;\n        case DAT_0800373c:\n            *flag_44 &= 0xfffbffff;\n            break;\n        case DAT_08003740:\n            *flag_40 &= 0xffffffbf;\n            break;\n        case DAT_08003744:\n            *flag_40 &= 0xffffff7f;\n            break;\n        case DAT_08003748:\n            *flag_40 &= 0xfffffeff;\n            break;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [
                "FUN_0800340c"
            ],
            "imported": true,
            "current_name": "set_flags_based_on_value_080035fc"
        },
        "FUN_08003dd0": {
            "renaming": {
                "PTR_DAT_08003df0": "address_table",
                "FUN_08003dd0": "is_valid_input_08003dd0",
                "uVar1": "combined_bytes",
                "byte": "address_index",
                "param_1": "input"
            },
            "code": "bool is_valid_input_08003dd0(int input)\n{\n  uint combined_bytes = combine_bytes(get_address_from_input(input));\n  return (combined_bytes & 0x22) == 0x22;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003dd0",
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "imported": true,
            "current_name": "is_valid_input_08003dd0"
        },
        "FUN_08000c8c": {
            "renaming": {
                "local_50": "value_1",
                "FUN_08000c8c": "initialize_data_and_flags_08000c8c",
                "local_1c": "zero_value",
                "local_2c": "value_6",
                "local_3c": "value_2",
                "local_18": "value_7",
                "local_28": "max_bits",
                "local_38": "value_3",
                "local_54": "max_bits",
                "DAT_08000d30": "PTR_DAT_08000d30",
                "local_20": "initial_value",
                "local_30": "value_5",
                "local_14": "value_8",
                "DAT_08000d34": "PTR_DAT_08000d34",
                "local_24": "initial_bits",
                "local_34": "value_4"
            },
            "code": "void initialize_data_and_flags_08000c8c()\n{\n  uint data_from_pointer;\n  uint param_value;\n  uint flag_value;\n  uint initial_bits = 0xf;\n  uint initial_value = 2;\n  uint zero_value = 0;\n  uint max_value = 0xffffffff;\n  uint shift_value = 0x26;\n  uint or_value_1 = 0x10000000;\n  uint or_value_2 = 0xc000;\n  uint set_flag = 4;\n  uint max_bits = 0;\n  uint value_1 = 0x50000;\n  uint value_2 = 0x400000;\n  uint value_3 = 8;\n  uint value_4 = 0x150;\n  uint value_5 = 2;\n  uint value_6 = 7;\n  uint value_7 = 0x1400;\n  uint value_8 = 0x1000;\n  \n  *(uint *)(DAT_08000d30 + 0x40) |= or_value_1;\n  *DAT_08000d34 |= or_value_2;\n  \n  FUNC_0800201c(&max_bits, &value_1, &value_2, &value_3, &value_4, &value_5, &value_6);\n  check_and_return_status_08001f9c();\n  \n  process_data_08002488(&initial_bits, 5, &initial_value, &zero_value, &value_7, &value_8);\n  data_from_pointer = get_data_from_pointer_080025e0();\n  param_value = (uint)((ulonglong)PTR_DAT_08000d38 * (ulonglong)data_from_pointer >> shift_value);\n  check_param_is_valid_08000ee0(param_value);\n  set_flag_08000f2c(set_flag);\n  decode_and_store_bits_08000e60(max_bits, zero_value, zero_value);\n}",
            "called": [
                "FUN_08000ee0",
                "FUN_08001f9c",
                "FUN_080025e0",
                "FUN_08002488",
                "FUN_0800201c",
                "FUN_08000f2c",
                "FUN_08000e60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c8c",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": true,
            "current_name": "initialize_data_and_flags_08000c8c"
        },
        "FUN_08000a4e": {
            "renaming": {
                "bVar1": "combined_value",
                "FUN_08000a4e": "set_value_at_index_08000a4e",
                "param_1": "source",
                "combine_values_08004640": "combine_values",
                "param_2": "destination",
                "calculate_crc_and_decode_0800076c": "calculate_crc_and_decode",
                "uVar2": "combined_value_2"
            },
            "code": "uint8_t set_value_at_index_08000a4e(uint8_t *source, uint8_t *destination) {\n    uint8_t combined_value = combine_values(*(source + 0xb), *(source + 0xc));\n    uint16_t combined_value_2 = combine_values(*(source + 0xd), *(source + 0xe));\n    *(uint16_t *)(destination + (uint16_t)combined_value * 2) = combined_value_2;\n    *(source + 0x49) = 6;\n    calculate_crc_and_decode(source);\n    return 8;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a4e",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "set_value_at_index_08000a4e"
        },
        "FUN_08004658": {
            "renaming": {
                "FUN_08004658": "process_interrupt_and_data_08004658",
                "check_and_calculate_offset_if_needed_08004338": "check_and_calculate_offset",
                "handle_software_interrupt_and_process_data_08000c4c": "handle_interrupt_and_process_data",
                "DAT_08004674": "data_flag",
                "process_data_08000c64": "process_data"
            },
            "code": "void process_interrupt_and_data_08004658(void)\n{\n  do_nothing();\n  handle_interrupt_and_process_data();\n  do {\n    do {\n      process_data();\n    } while (DAT_08004674 == 0);\n    check_and_calculate_offset();\n  } while(true);\n}",
            "called": [
                "FUN_08004338",
                "FUN_08004646",
                "FUN_08000c4c",
                "FUN_08000c64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004658",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": true,
            "current_name": "process_interrupt_and_data_08004658"
        },
        "FUN_080034f4": {
            "renaming": {
                "uVar1": "found_value",
                "param_1": "value_to_find",
                "find_value_in_array_080034da": "search_array",
                "FUN_080034f4": "find_value_080034f4"
            },
            "code": "int find_value_080034f4(int value_to_find) {\n  int found_value = 0;\n  if (value_to_find != -1) {\n    found_value = find_value_080034f4_in_array_080034da();\n  }\n  return found_value;\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034f4",
            "calling": [
                "FUN_08003414",
                "FUN_080033d8",
                "FUN_08003cc8",
                "FUN_08003d18",
                "FUN_08003978"
            ],
            "imported": true,
            "current_name": "find_value_080034f4"
        },
        "FUN_0800355e": {
            "renaming": {
                "param_1": "target",
                "*param_2": "*array",
                "param_2": "array",
                "FUN_0800355e": "find_short_in_array_0800355e"
            },
            "code": "int find_short_in_array_0800355e(int target, short *array)\n{\n  if (target == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (target == *array) break;\n    array = array + 6;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800355e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": true,
            "current_name": "find_short_in_array_0800355e"
        },
        "FUN_0800573c": {
            "renaming": {
                "iVar2": "returnVal",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "FUN_0800573c": "calculateResult_0800573c"
            },
            "code": "void calculateResult_0800573c(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *ptr = PTR_DAT_0800575c;\n  *(undefined4 *)PTR_DAT_0800575c = 0;\n  int returnVal = returnZero_080040e8(arg1, arg2, arg3, arg3, arg3);\n  if ((returnVal == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_08005608"
            ],
            "imported": true,
            "current_name": "calculateResult_0800573c"
        },
        "FUN_08003e54": {
            "renaming": {
                "iVar1": "valid_input",
                "param_1": "input",
                "param_2": "value",
                "param_3": "array",
                "param_4": "param",
                "uVar2": "index",
                "FUN_08003e54": "process_input_08003e54"
            },
            "code": "void process_input_08003e54(int input, uint32_t value, uint32_t* array, uint32_t param) {\n  if (input == 0) {\n    return;\n  }\n  int valid_input = is_input_valid();\n  if (valid_input == 0) {\n    uint32_t index = (uint32_t) *(uint8_t *)(input + 0x44);\n    array[index] = value;\n    *(uint32_t *)(PTR_DAT_08003ea4 + index * 4) = input;\n    decode_and_store_bits_08000e60((int)*(char *)(input + 0x5c),0,1,index,param);\n    set_bit_in_array_08000ec4((int)*(char *)(input + 0x5c));\n    set_param_values_08002efa(*(uint32_t *)(PTR_DAT_08003ea8 + index * 4),input + 0x45,1);\n  }\n  return;\n}",
            "called": [
                "FUN_08003dd0",
                "FUN_08000ec4",
                "FUN_08002efa",
                "FUN_08000e60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e54",
            "calling": [
                "FUN_08004388"
            ],
            "imported": true,
            "current_name": "process_input_08003e54"
        },
        "FUN_08004fdc": {
            "renaming": {
                "PTR_PTR_DAT_08005008": "PTR_PTR_DAT_08005008",
                "iVar1": "ptr_to_data",
                "FUNC_080053a0": "clean_up",
                "uStack_8": "temp_2",
                "param_1": "input_1",
                "uStack_4": "temp_3",
                "uStack_c": "temp_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar2": "input_1",
                "FUN_08004fdc": "execute_function_08004fdc",
                "FUNC_08004a84": "execute"
            },
            "code": "void execute_function_08004fdc(int param_1, int param_2, int param_3, int param_4)\n{\n  int ptr_to_data = *(int *)PTR_PTR_DAT_08005008;\n  if ((ptr_to_data != 0) && (*(int *)(ptr_to_data + 0x18) == 0)) {\n    clean_up(ptr_to_data);\n  }\n  FUNC_08004a84(ptr_to_data, *(int *)(ptr_to_data + 8), param_1, &param_2, param_1, &param_2);\n  return;\n}",
            "called": [
                "FUN_08004a84",
                "FUN_080053a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fdc",
            "calling": [
                "FUN_08003978"
            ],
            "imported": true,
            "current_name": "execute_function_08004fdc",
            "code_backup": "\nvoid FUN_08004fdc(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_08005008;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUNC_080053a0(iVar1);\n  }\n  FUNC_08004a84(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_080056d4": {
            "renaming": {
                "iVar2": "set_memory_result",
                "param_1": "result",
                "param_2": "start_address",
                "param_3": "size",
                "param_4": "protection",
                "puVar1": "pointer_to_result",
                "FUN_080056d4": "set_memory_protection_080056d4"
            },
            "code": "void set_memory_protection_080056d4(int *result, undefined4 start_address, undefined4 size, undefined4 protection, undefined4 unknown) {\n  undefined *pointer_to_result = PTR_DAT_080056f4;\n  *(undefined4 *)PTR_DAT_080056f4 = 0;\n  int set_memory_result = set_memory_protection_080056d4_080040d6(start_address, size, size, protection, unknown);\n  if (set_memory_result == -1 && *(int *)pointer_to_result != 0) {\n    *result = *(int *)pointer_to_result;\n  }\n  return;\n}",
            "called": [
                "FUN_080040d6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [
                "FUN_080054b4"
            ],
            "imported": true,
            "current_name": "set_memory_protection_080056d4"
        },
        "thunk_FUN_0800410c": {
            "renaming": {
                "thunk_FUN_0800410c": "calculate_result_thunk_0800410c"
            },
            "code": "int calculate_result_thunk_0800410c(void)\n{\n  return 1;\n}",
            "called": [
                "FUN_0800410c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": true,
            "current_name": "calculate_result_thunk_0800410c"
        },
        "FUN_080033d8": {
            "renaming": {
                "set_value_and_reset_08000f56": "set_value_and_reset",
                "check_value_08003380": "check_value",
                "find_value_080034f4": "find_value",
                "clear_bit_08000f72": "clear_bit",
                "param_1": "value",
                "local_1c": "bit_array",
                "PTR_DAT_08003408": "VALUE_ARRAY",
                "FUN_080033d8": "clear_bit_and_reset_values_080033d8"
            },
            "code": "void clear_bit_and_reset_values_080033d8(int value)\n{\n  int index;\n  int bit_array[5];\n  index = find_value(value,PTR_DAT_08003408);\n  if ((index != 0) && ((check_value(value) == 0) || (check_value(value) == 0x10))) {\n    clear_bit(bit_array,index);\n    set_value_and_reset(bit_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08000f72",
                "FUN_08003380",
                "FUN_080034f4",
                "FUN_08000f56"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033d8",
            "calling": [
                "FUN_08004110"
            ],
            "imported": true,
            "current_name": "clear_bit_and_reset_values_080033d8"
        },
        "FUN_080029c8": {
            "renaming": {
                "FUN_080029c8": "FUNC_080029c8"
            },
            "code": "\nvoid FUNC_080029c8(int *param_1)\n\n{\n  ulonglong uVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  \n  *(uint *)(*param_1 + 0x10) = *(uint *)(*param_1 + 0x10) & 0xffffcfff | param_1[3];\n  *(uint *)(*param_1 + 0xc) =\n       *(uint *)(*param_1 + 0xc) & 0xffff69f3 | param_1[2] | param_1[4] | param_1[5] | param_1[7];\n  *(uint *)(*param_1 + 0x14) = *(uint *)(*param_1 + 0x14) & 0xfffffcff | param_1[6];\n  if (param_1[7] == 0x8000) {\n    iVar12 = *param_1;\n    if ((iVar12 != 0x40011000) && (iVar12 != 0x40011400)) {\n      iVar3 = get_data_shifted_by_pointer_080025ec();\n      uVar2 = DAT_08002d08;\n      iVar8 = param_1[1];\n      uVar1 = (ulonglong)DAT_08002d08;\n      iVar4 = get_data_shifted_by_pointer_080025ec();\n      iVar9 = param_1[1];\n      iVar5 = get_data_shifted_by_pointer_080025ec();\n      iVar10 = param_1[1];\n      iVar6 = get_data_shifted_by_pointer_080025ec();\n      iVar11 = param_1[1];\n      iVar7 = get_data_shifted_by_pointer_080025ec();\n      *(uint *)(iVar12 + 8) =\n           ((uint)((int)((ulonglong)uVar2 *\n                         (ulonglong)\n                         (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                          (uint)((ulonglong)uVar2 *\n                                 ((ulonglong)(uint)(iVar7 * 0x19) /\n                                 (ulonglong)(uint)(param_1[1] << 1)) >> 0x25) * -100) * 8 + 0x32) >>\n                        0x20) << 0x18) >> 0x1d) +\n           ((uint)((ulonglong)uVar2 *\n                   (ulonglong)\n                   (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                    (uint)((ulonglong)uVar2 *\n                           ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >>\n                          0x25) * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n           (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25)\n           * 0x10;\n      return;\n    }\n    iVar3 = get_data_from_pointer_shifted_0800260c();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = get_data_from_pointer_shifted_0800260c();\n    iVar9 = param_1[1];\n    iVar5 = get_data_from_pointer_shifted_0800260c();\n    iVar10 = param_1[1];\n    iVar6 = get_data_from_pointer_shifted_0800260c();\n    iVar11 = param_1[1];\n    iVar7 = get_data_from_pointer_shifted_0800260c();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 1)\n                               ) >> 0x25) * -100) * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >> 0x25)\n                  * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar12 = *param_1;\n  if ((iVar12 != DAT_08002d04) && (iVar12 != DAT_08002d04 + 0x400)) {\n    iVar3 = get_data_shifted_by_pointer_080025ec();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = get_data_shifted_by_pointer_080025ec();\n    iVar9 = param_1[1];\n    iVar5 = get_data_shifted_by_pointer_080025ec();\n    iVar10 = param_1[1];\n    iVar6 = get_data_shifted_by_pointer_080025ec();\n    iVar11 = param_1[1];\n    iVar7 = get_data_shifted_by_pointer_080025ec();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)\n                               ) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25)\n                  * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar3 = get_data_from_pointer_shifted_0800260c();\n  uVar2 = DAT_08002d08;\n  iVar8 = param_1[1];\n  uVar1 = (ulonglong)DAT_08002d08;\n  iVar4 = get_data_from_pointer_shifted_0800260c();\n  iVar9 = param_1[1];\n  iVar5 = get_data_from_pointer_shifted_0800260c();\n  iVar10 = param_1[1];\n  iVar6 = get_data_from_pointer_shifted_0800260c();\n  iVar11 = param_1[1];\n  iVar7 = get_data_from_pointer_shifted_0800260c();\n  *(uint *)(iVar12 + 8) =\n       ((uint)((int)((ulonglong)uVar2 *\n                     (ulonglong)\n                     (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                      (uint)((ulonglong)uVar2 *\n                             ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2))\n                            >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n       ((uint)((ulonglong)uVar2 *\n               (ulonglong)\n               (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                (uint)((ulonglong)uVar2 *\n                       ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25) *\n                -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n       (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n       0x10;\n  return;\n}\n\n",
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080029c8",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": true,
            "current_name": "FUNC_080029c8"
        },
        "FUN_08002488": {
            "renaming": {
                "iVar2": "start_time",
                "iVar3": "current_time",
                "FUN_08002488": "process_data_08002488",
                "param_1": "data",
                "param_2": "data_len",
                "puVar1": "data_ptr",
                "uVar4": "divisor"
            },
            "code": "uint32_t process_data_08002488(uint32_t *data, uint32_t data_len)\n{\n  uint32_t *data_ptr = global_data_ptr;\n  if (data == NULL) {\n    return 1;\n  }\n  if ((*global_data_ptr & 0xf) < data_len) {\n    *(char *)global_data_ptr = (char)data_len;\n    if (data_len != (*data_ptr & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*data & 2) != 0) {\n    if ((*data & 4) != 0) {\n      global_data_ptr[2] |= 0x1c00;\n    }\n    if ((*data & 8) != 0) {\n      global_data_ptr[2] |= 0xe000;\n    }\n    global_data_ptr[2] = (global_data_ptr[2] & 0xffffff0f) | data[2];\n  }\n  if ((*data & 1) != 0) {\n    uint32_t value = data[1];\n    if (value == 1) {\n      if ((*global_data_ptr & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (value - 2 < 2) {\n      if ((*global_data_ptr & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((*global_data_ptr & 2) == 0) {\n      return 1;\n    }\n    global_data_ptr[2] = value | (global_data_ptr[2] & 0xfffffffc);\n    uint32_t start_time = get_start_time();\n    while ((global_data_ptr[2] & 0xc) != data[1] * 4) {\n      uint32_t current_time = get_current_time();\n      if (5000 < (current_time - start_time)) {\n        return 3;\n      }\n    }\n  }\n  data_ptr = global_data_ptr;\n  if (data_len < (*global_data_ptr & 0xf)) {\n    *(char *)global_data_ptr = (char)data_len;\n    if (data_len != (*data_ptr & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*data & 4) != 0) {\n    global_data_ptr[2] = (global_data_ptr[2] & 0xffffe3ff) | data[3];\n  }\n  if ((*data & 8) != 0) {\n    global_data_ptr[2] = (global_data_ptr[2] & 0xffff1fff) | (data[4] << 3);\n  }\n  uint32_t divisor = calculate_divisor();\n  *(uint32_t *)global_data_ptr = divisor >> global_data_ptr[(global_data_ptr[2] << 0x18) >> 0x1c];\n  check_and_store_data(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_08000d98",
                "FUN_080023b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002488",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": true,
            "current_name": "process_data_08002488"
        },
        "FUN_08004544": {
            "renaming": {
                "FUN_08004544": "set_data_at_address_08004544",
                "param_1": "data_address",
                "param_2": "byte_0",
                "param_3": "byte_1",
                "param_4": "byte_2",
                "param_5": "byte_3"
            },
            "code": "void set_data_at_address_08004544(undefined4 *data_address, undefined byte_0, undefined byte_1, undefined byte_2, undefined byte_3)\n{\n  *data_address = PTR_PTR_LAB_0800450a_1_0800455c;\n  *(undefined *)(data_address + 1) = byte_0;\n  *(undefined *)((int)data_address + 5) = byte_1;\n  *(undefined *)((int)data_address + 6) = byte_2;\n  *(undefined *)((int)data_address + 7) = byte_3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004544",
            "calling": [
                "FUN_08004560"
            ],
            "imported": true,
            "current_name": "set_data_at_address_08004544"
        },
        "FUN_08003cc8": {
            "renaming": {
                "sVar1": "current_value",
                "PTR_DAT_08003d08": "data_pointer_08003d08",
                "iVar4": "index",
                "puVar2": "ptr_data_14",
                "PTR_DAT_08003d10": "data_pointer_08003d10",
                "PTR_DAT_08003d14": "data_pointer_08003d14",
                "FUN_08003cc8": "update_values_08003cc8",
                "uVar3": "converted_value",
                "uVar5": "found_value",
                "FUNC_08003978": "update_data",
                "PTR_DAT_08003d0c": "data_pointer_08003d0c"
            },
            "code": "void update_values_08003cc8(void)\n{\n  short current_value;\n  undefined *ptr_data_14;\n  undefined2 converted_value;\n  int index;\n  undefined4 found_value;\n  current_value = *(short *)(PTR_DAT_08003d08 + 0x9a);\n  index = find_index(current_value,PTR_DAT_08003d0c);\n  if (index != 0) {\n    found_value = find_value_080034f4(index,PTR_DAT_08003d0c);\n    converted_value = find_converted_value(found_value,PTR_DAT_08003d10);\n    ptr_data_14 = PTR_DAT_08003d14;\n    *(undefined2 *)(PTR_DAT_08003d14 + 0x5a) = converted_value;\n    *(short *)(ptr_data_14 + 0x58) = current_value;\n    *(undefined4 *)(ptr_data_14 + 0x48) = 0x2580;\n    *(undefined4 *)(ptr_data_14 + 0x54) = 0;\n    *(undefined4 *)(ptr_data_14 + 0x4c) = 0;\n    *(undefined4 *)(ptr_data_14 + 0x50) = 0;\n    FUNC_08003978(ptr_data_14);\n  }\n  return;\n}",
            "called": [
                "FUN_0800351e",
                "FUN_08003978",
                "FUN_080034f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003cc8",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": true,
            "current_name": "update_values_08003cc8"
        },
        "FUN_08002d70": {
            "renaming": {
                "FUN_08002d70": "do_nothing_08002d70"
            },
            "code": "\nvoid do_nothing_08002d70(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d70",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": true,
            "current_name": "do_nothing_08002d70"
        },
        "FUN_08000fb4": {
            "renaming": {
                "DAT_0800118c": "PTR_DAT_0800118c",
                "puVar2": "register_ptr2",
                "DAT_08001188": "PTR_DAT_08001188",
                "iVar8": "i",
                "param_1": "register_values",
                "iVar10": "i",
                "FUN_08000fb4": "decode_and_update_registers_08000fb4",
                "param_2": "encoded_values",
                "DAT_08001184": "PTR_DAT_08001184",
                "puVar1": "register_ptr1",
                "uVar3": "current_bit",
                "uVar5": "bit_value",
                "uVar4": "bit_mask",
                "uVar7": "register_offset",
                "uVar6": "register_index",
                "uVar9": "register_value"
            },
            "code": "void decode_and_update_registers_08000fb4(uint *register_values, uint *encoded_values)\n{\n  uint *register_ptr1;\n  uint *register_ptr2;\n  uint current_bit;\n  uint bit_mask;\n  uint bit_value;\n  uint register_index;\n  uint register_offset;\n  uint register_mask;\n  uint register_value;\n  int i;\n  \n  for (current_bit = 0; current_bit < 16; current_bit++) {\n    bit_mask = 1 << (current_bit & 0xff);\n    if ((bit_mask & *encoded_values) == bit_mask) {\n      if ((encoded_values[1] == 2) || (encoded_values[1] == 0x12)) {\n        register_index = (current_bit >> 3) + 8;\n        register_offset = (current_bit & 7) << 2;\n        register_values[register_index] = register_values[register_index] & ~(0xf << register_offset) | encoded_values[4] << register_offset;\n      }\n      bit_value = (encoded_values[1] & 3) << (current_bit << 1);\n      register_mask = ~(3 << (current_bit & 0xff));\n      register_values[0] = register_values[0] & register_mask | bit_value;\n      register_value = encoded_values[1];\n      if (((register_value - 1 < 2) || (register_value == 0x11)) || (register_value == 0x12)) {\n        register_values[2] = register_values[2] & register_mask | encoded_values[3] << (current_bit << 1);\n        register_values[1] = register_values[1] & ~bit_mask | ((encoded_values[1] << 0x1b) >> 0x1f) << (current_bit & 0xff);\n      }\n      register_values[3] = register_mask & register_values[3] | encoded_values[2] << (current_bit << 1);\n      if ((encoded_values[1] & 0x10000000) != 0) {\n        *(uint *)(DAT_0800118c + 0x44) = *(uint *)(DAT_0800118c + 0x44) | 0x4000;\n        register_index = (current_bit & 3) << 2;\n        if (register_values == PTR_DAT_08001190) {\n          i = 0;\n        }\n        else if (register_values == PTR_DAT_08001194) {\n          i = 1;\n        }\n        else if (register_values == PTR_DAT_08001194 + 0x100) {\n          i = 2;\n        }\n        else if (register_values == PTR_DAT_08001194 + 0x200) {\n          i = 3;\n        }\n        else if (register_values == PTR_DAT_08001194 + 0x300) {\n          i = 4;\n        }\n        else if (register_values == PTR_DAT_08001194 + 0x400) {\n          i = 5;\n        }\n        else if (register_values == PTR_DAT_08001194 + 0x500) {\n          i = 6;\n        }\n        else if (register_values == PTR_DAT_08001194 + 0x600) {\n          i = 7;\n        }\n        else if (register_values == PTR_DAT_08001194 + 0x700) {\n          i = 8;\n        }\n        else if (register_values == PTR_DAT_08001194 + 0x800) {\n          i = 9;\n        }\n        else {\n          i = 10;\n        }\n        *(uint *)(DAT_08001184 + ((current_bit >> 2) + 2) * 4) = *(uint *)(DAT_08001184 + ((current_bit >> 2) + 2) * 4) & ~(0xf << register_index) | i << register_index;\n        register_ptr1 = DAT_08001188;\n        bit_mask = ~bit_mask;\n        bit_value = *DAT_08001188 & bit_mask;\n        if ((encoded_values[1] & 0x10000) != 0) {\n          bit_value = bit_mask | *DAT_08001188;\n        }\n        *DAT_08001188 = bit_value;\n        register_ptr2 = DAT_08001188;\n        bit_value = bit_mask & register_ptr1[1];\n        if ((encoded_values[1] & 0x20000) != 0) {\n          bit_value = bit_mask | register_ptr1[1];\n        }\n        DAT_08001188[1] = bit_value;\n        register_ptr1 = DAT_08001188;\n        bit_value = bit_mask & register_ptr2[2];\n        if ((encoded_values[1] & 0x100000) != 0) {\n          bit_value = bit_mask | register_ptr2[2];\n        }\n        DAT_08001188[2] = bit_value;\n        bit_mask = bit_mask & register_ptr1[3];\n        if ((encoded_values[1] & 0x200000) != 0) {\n          bit_mask = bit_mask | register_ptr1[3];\n        }\n        DAT_08001188[3] = bit_mask;\n      }\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fb4",
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "imported": true,
            "current_name": "decode_and_update_registers_08000fb4"
        },
        "FUN_08001718": {
            "renaming": {
                "FUN_08001718": "do_nothing_08001718"
            },
            "code": "\nvoid do_nothing_08001718(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001718",
            "calling": [
                "FUN_08001864",
                "FUN_0800171a"
            ],
            "imported": true,
            "current_name": "do_nothing_08001718"
        },
        "FUN_08001bfc": {
            "renaming": {
                "puVar2": "data_ptr1",
                "puVar3": "data_ptr2",
                "param_1": "input_data",
                "FUN_08001bfc": "process_input_08001bfc",
                "cVar1": "current_char"
            },
            "code": "uint32_t process_input_08001bfc(uint32_t **input_data)\n{\n  char current_char;\n  uint32_t *data_ptr1;\n  uint32_t *data_ptr2;\n  \n  current_char = *(char *)((int)input_data + 0x3d);\n  (*input_data)[1] &= 0xfffff8ff;\n  **input_data |= 1;\n  **input_data &= 0xfffffbff;\n  data_ptr1 = *input_data;\n  if ((data_ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)input_data + 0x3d) == '\"') || (*(char *)((int)input_data + 0x3d) == '*')) {\n      *(int16_t *)((int)input_data + 0x2a) = (int16_t)*(uint32_t *)(*input_data[0xe] + 4);\n    }\n    else {\n      *(int16_t *)((int)input_data + 0x2a) = (int16_t)*(uint32_t *)(*input_data[0xd] + 4);\n    }\n  }\n  if (*(int16_t *)((int)input_data + 0x2a) != 0) {\n    if ((data_ptr1[5] & 4) != 0) {\n      data_ptr2 = input_data[9];\n      input_data[9] = (uint32_t *)((int)data_ptr2 + 1);\n      *(char *)data_ptr2 = (char)data_ptr1[4];\n      *(int16_t *)((int)input_data + 0x2a) -= 1;\n    }\n    if (((*input_data)[5] & 0x40) != 0) {\n      data_ptr1 = input_data[9];\n      input_data[9] = (uint32_t *)((int)data_ptr1 + 1);\n      *(char *)data_ptr1 = (char)(*input_data)[4];\n      *(int16_t *)((int)input_data + 0x2a) -= 1;\n    }\n    input_data[0x10] = (uint32_t *)((uint32_t)input_data[0x10] | 4);\n  }\n  if (input_data[0x10] == (uint32_t *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      input_data[0xb] = PTR_DAT_08001cfc;\n      input_data[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      *(undefined *)((int)input_data + 0x3e) = 0;\n      execute_command_if_valid_080038d0();\n    }\n    else if ((input_data[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n      input_data[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      *(undefined *)((int)input_data + 0x3e) = 0;\n      do_nothing_0800160c();\n    }\n  }\n  else {\n    process_input_08001bfc_08001ab0();\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001ab0",
                "FUN_0800160c",
                "FUN_080038d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bfc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "process_input_08001bfc"
        },
        "FUN_08002d72": {
            "renaming": {
                "do_nothing_08002d70": "do_nothing",
                "param_1": "data",
                "FUN_08002d72": "process_data_08002d72"
            },
            "code": "int process_data_08002d72(int *data) {\n    if (data != NULL) {\n        if (*(char *)((int)data + 0x39) == '\\0') {\n            *(undefined *)(data + 0xe) = 0;\n            do_nothing_08002d70();\n        }\n        *(undefined *)((int)data + 0x39) = 0x24;\n        *(uint *)(*data + 0xc) &= 0xffffdfff;\n        perform_operation(data);\n        *(uint *)(*data + 0x10) &= 0xffffb7ff;\n        *(uint *)(*data + 0x14) &= 0xffffffd5;\n        *(uint *)(*data + 0xc) |= 0x2000;\n        data[0xf] = 0;\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)((int)data + 0x3a) = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08002d70",
                "FUN_080029c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d72",
            "calling": [
                "FUN_08003978"
            ],
            "imported": true,
            "current_name": "process_data_08002d72"
        },
        "FUN_080007f0": {
            "renaming": {
                "bVar2": "temp_value",
                "bVar1": "is_valid",
                "iVar5": "result",
                "iVar7": "temp_result",
                "param_1": "input_value",
                "cVar4": "value2",
                "param_2": "num_values",
                "cVar3": "value1",
                "param_3": "param_3",
                "param_4": "max_value",
                "FUN_080007f0": "validate_values_080007f0",
                "uVar6": "i"
            },
            "code": "int validate_values_080007f0(int input_value, int num_values, uint32_t param_3, int max_value) {\n  bool is_valid = false;\n  int i = 0;\n  while (i <= 7) {\n    if (num_values == *(byte *)(input_value + PTR_DAT_080008c8[i])) {\n      is_valid = true;\n      break;\n    }\n    i++;\n  }\n  if (!is_valid) {\n    *(short *)(input_value + 0x54) = *(short *)(input_value + 0x54) + 1;\n    return 1;\n  }\n  int result = 0;\n  int value1 = combine_values(*(uint8_t *)(input_value + 0xb), *(uint8_t *)(input_value + 0xc), param_3, max_value, *(uint32_t *)(input_value + 0x10));\n  switch(num_values) {\n    case 1:\n    case 2:\n    case 15:\n      result = value1;\n      break;\n    case 3:\n    case 4:\n    case 16:\n      int value2 = combine_values(*(uint8_t *)(input_value + 0xd), *(uint8_t *)(input_value + 0xe), param_3, max_value, *(uint32_t *)(input_value + 0x10));\n      result = (value1 >> 12 & 0xff) + (value2 >> 12 & 0xff);\n      break;\n    case 5:\n      result = combine_values(*(uint8_t *)(input_value + 0xb), *(uint8_t *)(input_value + 0xc), param_3, max_value, *(uint32_t *)(input_value + 0x10));\n      if (*(byte *)(input_value + 0x60) < (result << 0x14) >> 0x18) {\n        return 2;\n      }\n      break;\n    case 6:\n      result = combine_values(*(uint8_t *)(input_value + 0xb), *(uint8_t *)(input_value + 0xc), param_3, max_value, *(uint32_t *)(input_value + 0x10));\n      if (*(byte *)(input_value + 0x60) < result) {\n        return 2;\n      }\n      break;\n    default:\n      break;\n  }\n  return (result > *(byte *)(input_value + 0x60)) ? 2 : 0;\n}",
            "called": [
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080007f0",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "validate_values_080007f0"
        },
        "FUN_0800562a": {
            "renaming": {
                "sVar1": "input_value",
                "iVar3": "process_result",
                "puVar2": "PTR_DAT_080056b0",
                "param_1": "result",
                "unaff_r5": "arg_unused",
                "unaff_r4": "arg_unused",
                "param_2": "input_ptr",
                "param_3": "arg1",
                "param_4": "arg2",
                "FUN_0800562a": "process_input_0800562a",
                "in_lr": "arg_unused"
            },
            "code": "void process_input_0800562a(int *result, int input_ptr, undefined4 arg1, undefined4 arg2)\n{\n  short input_value = *(short *)(input_ptr + 0xe);\n  *(ushort *)(input_ptr + 0xc) &= 0xefff;\n  int process_result = process_input_0800562a_and_return_result(input_value, arg1, arg2, arg2, arg2, 0, 0, 0);\n  if (process_result == -1 && *result != 0)\n  {\n    *result = *PTR_DAT_080056b0;\n  }\n  else if ((int)((uint)*(ushort *)(input_ptr + 0xc) << 0x17) < 0)\n  {\n    execute_and_retrieve_result(input_value, 2, result);\n  }\n}\n",
            "called": [
                "FUN_08005718",
                "FUN_080040ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800562a",
            "calling": [],
            "imported": true,
            "current_name": "process_input_0800562a"
        },
        "FUN_080044d8": {
            "renaming": {
                "DAT_080044f4": "DAT",
                "param_1": "param1",
                "PTR_DAT_080044f8": "PTR_DAT",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "initialize_struct_0800447c": "initialize_struct",
                "FUN_080044d8": "initialize_struct_if_param1_is_1_080044d8"
            },
            "code": "void initialize_struct_if_param1_is_1_080044d8(int param1, int param2, undefined4 param3, undefined4 param4)\n{\n  if (param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    initialize_struct(PTR_DAT_080044f4_080044f8_080044f8, DAT_080044f4_080044f4, param3, 0xffff, param4);\n  }\n  return;\n}",
            "called": [
                "FUN_0800447c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044d8",
            "calling": [],
            "imported": true,
            "current_name": "initialize_struct_if_param1_is_1_080044d8"
        },
        "FUN_08003df4": {
            "renaming": {
                "FUN_08003df4": "is_valid_input_08003df4",
                "uVar1": "combined_bytes",
                "byte": "byte_offset",
                "param_1": "input_index",
                "PTR_DAT_08003e14": "byte_offset_ptr"
            },
            "code": "bool is_valid_input_08003df4(int input_index) {\n  uint32_t byte_offset = *(uint8_t*)(PTR_DAT_08003e14 + *(uint8_t*)(input_index + 0x44) * 4);\n  uint32_t combined_bytes = combine_bytes(byte_offset);\n  return (combined_bytes & 0x21) == 0x21;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003df4",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": true,
            "current_name": "is_valid_input_08003df4"
        },
        "FUN_08005400": {
            "renaming": {
                "FUN_08005400": "initialize_array_08005400",
                "iVar3": "array_start_address",
                "piVar2": "current_element",
                "param_1": "error_code",
                "piVar1": "i",
                "param_2": "array_size",
                "param_3": "unused_parameter",
                "param_4": "value_to_fill_array",
                "ppiVar4": "current_array"
            },
            "code": "int* initialize_array_08005400(int* error_code, int* parameter_1, int parameter_2, int parameter_3, int parameter_4)\n{\n  int *result;\n  int **current_array;\n  int *current_element;\n  int i;\n  int array_start_address;\n\n  array_start_address = *(int*)PTR_PTR_DAT_08005474;\n  if (*(int*)(array_start_address + 0x18) == 0) {\n    initialize_arrays_080053a0(array_start_address);\n  }\n  current_array = (int **)(array_start_address + 0x48);\n  do {\n    current_element = current_array[2];\n    current_array = current_array[1];\n    for (i = parameter_2; i > 0; i--) {\n      if (*(short*)(current_element + 3) == 0) {\n        *(undefined2*)((int)current_element + 0xe) = 0xffff;\n        *(undefined2*)(current_element + 3) = 1;\n        current_element[0x19] = 0;\n        *current_element = 0;\n        current_element[2] = 0;\n        current_element[1] = 0;\n        current_element[4] = 0;\n        current_element[5] = 0;\n        current_element[6] = 0;\n        fillArrayWithValue_080048cc(current_element + 0x17, 0, 8, 1, parameter_4);\n        current_element[0xd] = 0;\n        current_element[0xe] = 0;\n        current_element[0x12] = 0;\n        current_element[0x13] = 0;\n        return current_element;\n      }\n      current_element += 0x1a;\n    }\n    if (*current_array == (int *)0x0) {\n      current_element = (int *)allocate_and_initialize_array_08005400_08005374(parameter_1, 4);\n      *current_array = current_element;\n      if (current_element == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n  } while (true);\n}",
            "called": [
                "FUN_080048cc",
                "FUN_08005374",
                "FUN_080053a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005400",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": true,
            "current_name": "initialize_array_08005400",
            "code_backup": "\nint * FUN_08005400(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08005474;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUNC_080053a0(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        piVar2[0x19] = 0;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fillArrayWithValue_080048cc(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_array_08005374(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_08003582": {
            "renaming": {
                "FUN_08003582": "find_non_zero_08003582",
                "param_1": "num1",
                "param_2": "num2",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int find_non_zero_08003582(int num1, int num2){\n  if(num1 != num2){\n    if(num1 == 0){\n      return num2;\n    }\n    if(num2 == 0){\n      return num1;\n    }\n    num1 = 0;\n  }\n  return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003582",
            "calling": [
                "FUN_08003978"
            ],
            "imported": true,
            "current_name": "find_non_zero_08003582"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "process_input_and_wait_for_response_080051ac_and_call_08005760_afterwards_08005760",
                "UNRECOVERED_JUMPTABLE": "jump_table_ptr"
            },
            "code": "void process_input_and_wait_for_response_080051ac_and_call_08005760_afterwards_08005760(void)\n{\n  code *jump_table_ptr;\n  jump_table_ptr = process_input_and_wait_for_response_080051ac_and_call_08005760_afterwards_08005760;\n  if (*(int *)PTR_DAT_080057fc < 0) {\n    *(int *)PTR_DAT_080057fc = 1;\n  }\n  if (*(int *)PTR_DAT_08005800 < 0) {\n    *(int *)PTR_DAT_08005800 = 1;\n  }\n  if (*(int *)PTR_DAT_08005804 < 0) {\n    *(int *)PTR_DAT_08005804 = 1;\n  }\n  if (*(int *)PTR_DAT_08005808 < 0) {\n    *(int *)PTR_DAT_08005808 = 1;\n  }\n  if (*(int *)PTR_DAT_0800580c < 0) {\n    *(int *)PTR_DAT_0800580c = 1;\n  }\n  if (*(int *)PTR_DAT_08005810 < 0) {\n    *(int *)PTR_DAT_08005810 = 1;\n  }\n  if (*(int *)PTR_DAT_08005814 < 0) {\n    *(int *)PTR_DAT_08005814 = 1;\n  }\n  if (*(int *)PTR_DAT_08005818 < 0) {\n    *(int *)PTR_DAT_08005818 = 1;\n  }\n  if (*(int *)PTR_DAT_0800581c < 0) {\n    *(int *)PTR_DAT_0800581c = 1;\n  }\n  if (*(int *)PTR_DAT_08005820 < 0) {\n    *(int *)PTR_DAT_08005820 = 1;\n  }\n  if (*(int *)PTR_DAT_08005824 < 0) {\n    *(int *)PTR_DAT_08005824 = 1;\n  }\n  if (*(int *)PTR_DAT_08005828 < 0) {\n    *(int *)PTR_DAT_08005828 = 1;\n  }\n  (*jump_table_ptr)();\n  return;\n}",
            "called": [
                "FUN_080051ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_080047c0"
            ],
            "imported": true,
            "current_name": "process_input_and_wait_for_response_080051ac_and_call_08005760_afterwards_08005760"
        },
        "FUN_08004678": {
            "renaming": {
                "FUN_08004678": "get_bit_position_08004678",
                "param_1": "num",
                "cVar1": "bit_position"
            },
            "code": "int get_bit_position_08004678(uint num) {\n\tint bit_position = 0;\n\twhile (num != 1) {\n\t\tnum = num >> 1;\n\t\tbit_position++;\n\t}\n\treturn bit_position;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004678",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": true,
            "current_name": "get_bit_position_08004678"
        },
        "FUN_08003900": {
            "renaming": {
                "iVar1": "param_minus_four",
                "set_flags_08001578": "set_flags",
                "param_1": "param",
                "FUN_08003900": "check_and_set_flags_for_param_08003900",
                "subtract_four_from_param_0800387c": "subtract_four_from_param"
            },
            "code": "void check_and_set_flags_for_param_08003900(void* param) {\\n  int param_minus_four = subtract_four_from_param();\\n  if (*(char *)(param_minus_four + 0x5f) == \"\\0\") {\\n    set_flags(param);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_0800387c",
                "FUN_08001578"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003900",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": true,
            "current_name": "check_and_set_flags_for_param_08003900"
        },
        "FUN_08000f0c": {
            "renaming": {
                "param_1": "position",
                "FUN_08000f0c": "set_bit_at_position_08000f0c",
                "DAT_08000f28": "data_start"
            },
            "code": "void set_bit_at_position_08000f0c(uint position)\n{\n  if (position >= 0) {\n    int* data = (int*)(DAT_08000f28 + ((position >> 5) + 0x60) * 4);\n    *data = 1 << (position & 0x1f);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f0c",
            "calling": [],
            "imported": true,
            "current_name": "set_bit_at_position_08000f0c"
        },
        "FUN_08000998": {
            "renaming": {
                "bVar1": "count_1",
                "bVar4": "value_2",
                "bVar3": "value_1",
                "param_1": "data_address",
                "FUN_08000998": "process_data_08000998",
                "param_2": "output_address",
                "param_3": "param_1",
                "cVar2": "index_1",
                "param_4": "param_2",
                "uVar5": "index_2",
                "uVar6": "count_2"
            },
            "code": "int process_data_08000998(int data_address, int output_address, int param_1, int param_2)\n{\n  byte value_1;\n  char index_1;\n  byte value_2;\n  byte count_1;\n  uint index_2;\n  uint count_2;\n  \n  value_1 = combine_values(*(undefined *)(data_address + 0xb),*(undefined *)(data_address + 0xc),param_1,param_2,param_2);\n  value_2 = combine_values(*(undefined *)(data_address + 0xd),*(undefined *)(data_address + 0xe));\n  *(byte *)(data_address + 0xb) = value_2 << 1;\n  *(undefined *)(data_address + 0x49) = 3;\n  for (index_2 = (uint)value_1; index_2 < (uint)value_1 + (uint)value_2; index_2 = index_2 + 1 & 0xff) {\n    count_1 = *(byte *)(data_address + 0x49);\n    *(char *)(data_address + (uint)count_1 + 9) = (char)((ushort)*(undefined2 *)(output_address + index_2 * 2) >> 8);\n    count_2 = count_1 + 1 & 0xff;\n    index_1 = (char)count_2;\n    *(char *)(data_address + 0x49) = index_1;\n    *(undefined *)(data_address + count_2 + 9) = *(undefined *)(output_address + index_2 * 2);\n    *(char *)(data_address + 0x49) = index_1 + '\\x01';\n  }\n  index_1 = *(char *)(data_address + 0x49);\n  calculate_crc_and_decode(data_address);\n  return (int)(char)(index_1 + '\\x02');\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "process_data_08000998"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "do_nothing_08003f94"
            },
            "code": "\nvoid do_nothing_08003f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": true,
            "current_name": "do_nothing_08003f94"
        },
        "FUN_080055d0": {
            "renaming": {
                "initialize_pointer_value_080040fc": "initialize_pointer_value",
                "iVar4": "initialization_result",
                "PTR_PTR_DAT_080055dc": "PTR_PTR_DAT_080055dc",
                "param_1": "input_value",
                "piVar3": "function_pointer_array",
                "calculate_result_thunk_0800410c": "calculate_result",
                "puVar6": "function_pointer_array_ptr",
                "unaff_r5": "unaff_r5",
                "unaff_r4": "unaff_r4",
                "FUN_080055d0": "process_input_080055d0",
                "puVar1": "function_pointer_array_ptr",
                "uVar2": "calculated_result",
                "pcVar5": "function_to_execute",
                "in_lr": "in_lr",
                "PTR_DAT_08005600": "PTR_DAT_08005600"
            },
            "code": "int process_input_080055d0(uint input_value) {\n  int *function_pointer_array = *(int **)PTR_PTR_DAT_080055dc;\n  if (input_value > 31) {\n    *function_pointer_array = 22;\n    return -1;\n  }\n  int function_pointer = function_pointer_array[17];\n  if (function_pointer != 0) {\n    code *function_to_execute = *(code **)(function_pointer + input_value * 4);\n    if (function_to_execute != (code *)0x0) {\n      if (function_to_execute != (code *)0x1) {\n        if (function_to_execute == (code *)0xffffffff) {\n          *function_pointer_array = 22;\n          return 1;\n        }\n        *(int *)(function_pointer + input_value * 4) = 0;\n        (*function_to_execute)(input_value);\n      }\n      return 0;\n    }\n  }\n  undefined *function_pointer_array_ptr = PTR_PTR_DAT_080055dc;\n  int calculated_result = calculate_result_thunk_0800410c(function_pointer_array);\n  undefined *pointer_value = PTR_DAT_08005600;\n  *(int *)PTR_DAT_08005600 = 0;\n  int initialization_result = initialize_pointer_value(calculated_result,input_value,input_value,0,function_pointer_array_ptr,unaff_r4,unaff_r5,in_lr);\n  if ((initialization_result == -1) && (*(int *)pointer_value != 0)) {\n    *function_pointer_array = *(int *)pointer_value;\n  }\n  return initialization_result;\n}",
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055d0",
            "calling": [
                "FUN_080051ac"
            ],
            "imported": true,
            "current_name": "process_input_080055d0"
        },
        "FUN_080056f8": {
            "renaming": {
                "iVar2": "result",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "data_pointer",
                "FUN_080056f8": "return_if_error_080056f8"
            },
            "code": "void return_if_error_080056f8(int *output, undefined4 input)\n{\n  undefined *data_pointer = PTR_DAT_08005714;\n  *(undefined4 *)PTR_DAT_08005714 = 0;\n  int result = returnOne_080040e0(input);\n  if ((result == -1) && (*(int *)data_pointer != 0)) {\n    *output = *(int *)data_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": true,
            "current_name": "return_if_error_080056f8"
        },
        "FUN_080054b4": {
            "renaming": {
                "auStack_4c": "local_flags",
                "iVar1": "protection_result",
                "param_1": "address",
                "param_2": "size",
                "param_3": "result",
                "param_4": "flags",
                "uVar2": "flags_value",
                "FUN_080054b4": "check_memory_protection_080054b4"
            },
            "code": "int check_memory_protection_080054b4(void* address, int size, int* result, unsigned int* flags)\n{\n  int protection_result;\n  unsigned int local_flags;\n  if (*(short *)(size + 0xe) < 0 || (protection_result = set_memory_protection_080056d4(address, (int)*(short *)(size + 0xe), &local_flags)) < 0) {\n    *result = 0;\n    if ((int)((uint)*(ushort *)(size + 0xc) << 0x18) < 0) {\n      *flags = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *result = (int)((local_flags & 0xf000) == 0x2000);\n  }\n  *flags = 0x400;\nLAB_080054f4:\n  return 0;\n}",
            "called": [
                "FUN_080056d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b4",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": true,
            "current_name": "check_memory_protection_080054b4"
        },
        "FUN_0800171a": {
            "renaming": {
                "puVar2": "ptr_b",
                "param_1": "input",
                "cVar1": "current_char",
                "FUN_0800171a": "parse_input_0800171a"
            },
            "code": "uint parse_input_0800171a(uint **input)\n{\n  char current_char = *(char *)((int)input + 0x3d);\n  uint *ptr_b = input[0xb];\n  if ((*(short *)(input + 10) == 0) && (current_char == '!')) {\n    if ((ptr_b == (uint *)0x4) || ((ptr_b == (uint *)0x8 || (ptr_b == (uint *)0xffff0000)))) {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      **input = **input | 0x200;\n      input[0xc] = (uint *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      if (*(char *)((int)input + 0x3e) == '@') {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08001718();\n      }\n      else {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_080015b6();\n      }\n    }\n    else {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      input[0xc] = (uint *)0x11;\n      *(undefined *)((int)input + 0x3e) = 0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      do_nothing_080015b6();\n    }\n  }\n  else if ((current_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (current_char == '\"')))) {\n    if (*(short *)((int)input + 0x2a) == 0) {\n      (*input)[1] = (*input)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input + 0x3e) == '@') {\n      if (input[0x14] == (uint *)0x0) {\n        if (input[0x13] == (uint *)0x1) {\n          (*input)[4] = (uint)input[0x12] & 0xff;\n          input[0x14] = (uint *)((int)input[0x14] + 2);\n        }\n        else {\n          (*input)[4] = (uint)((int)input[0x12] << 0x10) >> 0x18;\n          input[0x14] = (uint *)((int)input[0x14] + 1);\n        }\n      }\n      else if (input[0x14] == (uint *)0x1) {\n        (*input)[4] = (uint)input[0x12] & 0xff;\n        input[0x14] = (uint *)((int)input[0x14] + 1);\n      }\n      else if (input[0x14] == (uint *)0x2) {\n        if (*(char *)((int)input + 0x3d) == '\"') {\n          **input = **input | 0x100;\n        }\n        else if (*(char *)((int)input + 0x3d) == '!') {\n          uint *ptr_9 = input[9];\n          input[9] = (uint *)((int)ptr_9 + 1);\n          (*input)[4] = (uint)*(byte *)ptr_9;\n          *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      uint *ptr_9 = input[9];\n      input[9] = (uint *)((int)ptr_9 + 1);\n      (*input)[4] = (uint)*(byte *)ptr_9;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800171a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "parse_input_0800171a"
        },
        "FUN_08004560": {
            "renaming": {
                "FUN_08004560": "clear_data_if_flag_set_08004560",
                "param_1": "flag",
                "param_2": "value",
                "PTR_DAT_08004588": "PTR_DATA_ADDRESS"
            },
            "code": "void clear_data_if_flag_set_08004560(int flag, int value){\n  if ((flag == 1) && (value == 0xffff)) {\n    set_data_at_address(PTR_DAT_08004588, 0, 0, 0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08004544"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004560",
            "calling": [],
            "imported": true,
            "current_name": "clear_data_if_flag_set_08004560"
        },
        "FUN_08000a7a": {
            "renaming": {
                "FUN_08000a7a": "set_bits_based_on_condition_08000a7a",
                "iVar1": "combined_value_1",
                "iVar2": "combined_value_2",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar3": "i",
                "uVar5": "bit_offset",
                "uVar4": "bit_index",
                "uVar7": "byte_index",
                "uVar6": "byte_offset"
            },
            "code": "int set_bits_based_on_condition_08000a7a(int input_1,int input_2,int input_3,int input_4)\n{\n  int combined_value_1 = combine_values(*(undefined *)(input_1 + 0xb),*(undefined *)(input_1 + 0xc),input_3,input_4,param_4);\n  int combined_value_2 = combine_values(*(undefined *)(input_1 + 0xd),*(undefined *)(input_1 + 0xe));\n  uint bit_index = 0;\n  uint byte_index = 7;\n  for (uint i = 0; (int)i < combined_value_2; i = (i + 1) & 0xffff) {\n    uint byte_offset = (i + combined_value_1) * 0x100000 >> 0x18;\n    uint bit_offset = i + combined_value_1 & 0xf;\n    if (((int)(uint)*(byte *)(input_1 + byte_index + 9) >> bit_index & 1U) == 0) {\n      *(ushort *)(input_2 + byte_offset * 2) = *(ushort *)(input_2 + byte_offset * 2) & ~(ushort)(1 << bit_offset);\n    }\n    else {\n      *(ushort *)(input_2 + byte_offset * 2) = (ushort)(1 << bit_offset) | *(ushort *)(input_2 + byte_offset * 2);\n    }\n    bit_index = (bit_index + 1) & 0xff;\n    if (7 < bit_index) {\n      byte_index = (byte_index + 1) & 0xff;\n      bit_index = 0;\n    }\n  }\n  *(undefined *)(input_1 + 0x49) = 6;\n  calculate_crc_and_decode(input_1);\n  return 8;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a7a",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "set_bits_based_on_condition_08000a7a"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "do_nothing_08003474"
            },
            "code": "\nvoid do_nothing_08003474(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08003476"
            ],
            "imported": true,
            "current_name": "do_nothing_08003474"
        },
        "FUN_08004cb0": {
            "renaming": {
                "padding": "remaining_length",
                "bVar4": "is_padding",
                "iVar1": "result",
                "FUN_08004cb0": "calculate_length_08004cb0",
                "is_padded": "is_padded",
                "param_1": "start_address",
                "param_2": "data",
                "param_3": "length",
                "param_4": "end_address",
                "param_5": "callback",
                "uVar3": "j",
                "uVar2": "max_length"
            },
            "code": "uint32_t calculate_length_08004cb0(uint32_t start_address, uint32_t* data, uint32_t* length, uint32_t end_address, code* callback)\n{\n  int32_t i;\n  uint32_t max_length = data[4];\n  if ((int32_t)data[4] < (int32_t)data[2]) {\n    max_length = data[2];\n  }\n  *length = max_length;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *length = max_length + 1;\n  }\n  if ((int32_t)(*data << 0x1a) < 0) {\n    *length = *length + 2;\n  }\n  uint32_t padding = *data & 6;\n  if (padding == 0) {\n    for (; (int32_t)padding < (int32_t)(data[3] - *length); padding++) {\n      int32_t result = (*callback)(start_address, end_address, (int32_t)data + 0x19, 1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uint32_t is_padded = (uint32_t)*(byte *)((int)data + 0x43);\n  if (is_padded != 0) {\n    is_padded = 1;\n  }\n  if ((int32_t)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + is_padded + 0x43) = 0x30;\n    *(undefined *)((int)data + is_padded + 0x44) = *(undefined *)((int)data + 0x45);\n    is_padded += 2;\n  }\n  int32_t result = (*callback)(start_address, end_address, (int32_t)data + 0x43, is_padded);\n  if (result != -1) {\n    uint32_t remaining_length = data[3];\n    bool is_padding = (*data & 6) == 4;\n    if (is_padding) {\n      remaining_length = remaining_length - *length;\n    }\n    if (is_padding) {\n      remaining_length &= ~((int32_t)remaining_length >> 0x1f);\n    }\n    else {\n      remaining_length = 0;\n    }\n    if ((int32_t)data[4] < (int32_t)data[2]) {\n      remaining_length += (data[2] - data[4]);\n    }\n    uint32_t j = 0;\n    while (true) {\n      if (remaining_length == j) {\n        return 0;\n      }\n      int32_t result = (*callback)(start_address, end_address, (int32_t)data + 0x1a, 1);\n      if (result == -1) {\n        break;\n      }\n      j++;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb0",
            "calling": [
                "FUN_08004d9c"
            ],
            "imported": true,
            "current_name": "calculate_length_08004cb0"
        },
        "FUN_08003594": {
            "renaming": {
                "PTR_DAT_080035a8": "function_argument_data",
                "code": "code_pointer",
                "NULL": "0",
                "FUN_08003594": "execute_function_if_not_null_08003594",
                "undefined4": "int",
                "PTR_DAT_080035a4": "function_pointer_data"
            },
            "code": "void execute_function_if_not_null_08003594(void)\n{\n  code* function_pointer = *(code**)PTR_DAT_080035a4;\n  if (function_pointer != NULL) {\n    function_pointer(*(int*)PTR_DAT_080035a8);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003594",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": true,
            "current_name": "execute_function_if_not_null_08003594"
        },
        "FUN_08002940": {
            "renaming": {
                "*(uint *)(*param_1 + 0x14)": "*flag2",
                "0xfffffedf": "0b11111111111111111111111011011111",
                "*(uint *)(*param_1 + 0xc)": "*flag1",
                "FUN_08002940": "clearFlags_08002940",
                "param_1": "flags",
                "0xfffffffe": "0b11111111111111111111111111111110",
                "*param_1": "*flags"
            },
            "code": "void clearFlags_08002940(int *flags)\n{\n  uint *flag1 = (uint *)(*flags + 0xc);\n  uint *flag2 = (uint *)(*flags + 0x14);\n  *flag1 = *flag1 & 0xfffffedf;\n  *flag2 = *flag2 & 0xfffffffe;\n  *(undefined *)((int)flags + 0x3a) = 0x20;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002940",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": true,
            "current_name": "clearFlags_08002940"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "get_value_and_return_08004204",
                "PTR_": "PTR_ (no change)",
                "get_value_and_return_0800346c": "get_input_value",
                "DAT_": "DAT_ (no change)"
            },
            "code": "void get_value_and_return_08004204(void)\n{\n  int value = get_input_value();\n  return_value(value);\n}",
            "called": [
                "FUN_0800346c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_08000b54",
                "FUN_0800076c"
            ],
            "imported": true,
            "current_name": "get_value_and_return_08004204"
        },
        "FUN_08003476": {
            "renaming": {
                "FUN_08003476": "addByteAndDoNothing_08003476",
                "do_nothing_and_return_08000f4e": "doNothingAndReturn",
                "addByteToUintAndStore_08000e18": "addByteToUintAndStore",
                "do_nothing_08003474": "doNothing"
            },
            "code": "void addByteAndDoNothing_08003476(void)\n{\n  addByteToUintAndStore();\n  do_nothing_08003474AndReturn();\n  do_nothing_08003474();\n  return;\n}",
            "called": [
                "FUN_08000f4e",
                "FUN_08003474",
                "FUN_08000e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003476",
            "calling": [],
            "imported": true,
            "current_name": "addByteAndDoNothing_08003476"
        },
        "FUN_08004444": {
            "renaming": {
                "uVar1": "value",
                "FUN_08004444": "set_value_at_index_08004444",
                "param_1": "memory",
                "UNRECOVERED_JUMPTABLE": "UNRECOVERED_JUMPTABLE",
                "param_2": "index"
            },
            "code": "void set_value_at_index_08004444(uint8_t* memory, uint index){\n  uint8_t value;\n  if (index < 0x60) {\n    value = *(uint8_t*)(PTR_DAT_0800445c + index);\n  }\n  else {\n    value = 0xff;\n  }\n  *(uint8_t*)(memory + 0x12e) = value;\n  code *UNRECOVERED_JUMPTABLE;\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004444",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": true,
            "current_name": "set_value_at_index_08004444"
        },
        "FUN_0800346c": {
            "renaming": {
                "get_value_from_pointer_08000e30": "get_value_from_pointer",
                "FUN_0800346c": "get_value_and_return_0800346c"
            },
            "code": "void get_value_and_return_0800346c(void)\n{\n  get_value_from_pointer();\n  return;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800346c",
            "calling": [
                "FUN_08004204"
            ],
            "imported": true,
            "current_name": "get_value_and_return_0800346c"
        },
        "FUN_080053a0": {
            "renaming": {
                "bVar3": "is_comparison_index",
                "iVar2": "comparison_index",
                "uVar1": "array_value",
                "param_1": "array_index",
                "FUN_080053a0": "initialize_arrays_080053a0"
            },
            "code": "void initialize_arrays_080053a0(int array_index)\n{\n  undefined4 array_value;\n  int comparison_index;\n  bool is_comparison_index;\n  \n  if (*(int *)(array_index + 0x18) == 0) {\n    *(undefined4 *)(array_index + 0x48) = 0;\n    *(undefined4 *)(array_index + 0x4c) = 0;\n    *(undefined4 *)(array_index + 0x50) = 0;\n    comparison_index = *(int *)PTR_PTR_DAT_080053f8;\n    *(undefined **)(array_index + 0x28) = PTR_LAB_08005320_1_080053fc;\n    is_comparison_index = array_index == comparison_index;\n    if (is_comparison_index) {\n      comparison_index = 1;\n    }\n    if (is_comparison_index) {\n      *(int *)(array_index + 0x18) = comparison_index;\n    }\n    array_value = initialize_array_08005400();\n    *(undefined4 *)(array_index + 4) = array_value;\n    array_value = initialize_array_08005400(array_index);\n    *(undefined4 *)(array_index + 8) = array_value;\n    array_value = initialize_array_08005400(array_index);\n    *(undefined4 *)(array_index + 0xc) = array_value;\n    initialize_array_with_values_0800532c(*(undefined4 *)(array_index + 4),4,0);\n    initialize_array_with_values_0800532c(*(undefined4 *)(array_index + 8),9,1);\n    initialize_array_with_values_0800532c(*(undefined4 *)(array_index + 0xc),0x12,2);\n    *(undefined4 *)(array_index + 0x18) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_08004a84",
                "FUN_08005400",
                "FUN_080050d0",
                "FUN_08004fdc",
                "FUN_080052cc",
                "FUN_08004a34"
            ],
            "imported": true,
            "current_name": "initialize_arrays_080053a0"
        },
        "FUN_0800201c": {
            "renaming": {
                "FUN_0800201c": "FUNC_0800201c"
            },
            "code": "\nundefined4 FUNC_0800201c(uint *param_1)\n\n{\n  uint *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  bool bVar5;\n  \n  puVar1 = DAT_080022d0;\n  if (param_1 == (uint *)0x0) {\n    return 1;\n  }\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 4) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) != 0)))) {\n      if (((*DAT_080022d0 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x10000;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x40000;\n        *puVar1 = *puVar1 | 0x10000;\n      }\n      else {\n        *DAT_080022d0 = *DAT_080022d0 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar2 = get_value_from_pointer_08000e30();\n        while ((*DAT_080022d0 & 0x20000) != 0) {\n          iVar3 = get_value_from_pointer_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar2 = get_value_from_pointer_08000e30();\n        while ((*DAT_080022d0 & 0x20000) == 0) {\n          iVar3 = get_value_from_pointer_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 0) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) == 0)))) {\n      if (((*DAT_080022d0 & 2) != 0) && (param_1[3] != 1)) {\n        return 1;\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n    else if (param_1[3] == 0) {\n      *DAT_080022d4 = 0;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((*DAT_080022d0 & 2) != 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d4 = 1;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((*DAT_080022d0 & 2) == 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[5] == 0) {\n      *DAT_080022d8 = 0;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) != 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d8 = 1;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) == 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar5 = (DAT_080022d0[0x10] & 0x10000000) == 0;\n    if (bVar5) {\n      DAT_080022d0[0x10] = DAT_080022d0[0x10] | 0x10000000;\n    }\n    if ((*DAT_080022dc & 0x100) == 0) {\n      *DAT_080022dc = *DAT_080022dc | 0x100;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((*DAT_080022dc & 0x100) == 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    puVar1 = DAT_080022d0;\n    if (param_1[2] == 1) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 1;\n    }\n    else if (param_1[2] == 5) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 4;\n      puVar1[0x1c] = puVar1[0x1c] | 1;\n    }\n    else {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] & 0xfffffffe;\n      puVar1[0x1c] = puVar1[0x1c] & 0xfffffffb;\n    }\n    if (param_1[2] == 0) {\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) != 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) == 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar5) {\n      DAT_080023ac[0x10] = DAT_080023ac[0x10] & 0xefffffff;\n    }\n  }\n  if (param_1[6] == 0) {\n    uVar4 = 0;\n  }\n  else if ((DAT_080023ac[2] & 0xc) == 8) {\n    uVar4 = 1;\n  }\n  else if (param_1[6] == 2) {\n    *DAT_080023b0 = 0;\n    iVar2 = get_value_from_pointer_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        DAT_080023ac[1] =\n             param_1[7] | param_1[8] | param_1[9] << 6 | ((param_1[10] >> 1) - 1) * 0x10000 |\n             param_1[0xb] << 0x18;\n        *DAT_080023b0 = 1;\n        iVar2 = get_value_from_pointer_08000e30();\n        do {\n          if ((*DAT_080023ac & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar3 = get_value_from_pointer_08000e30();\n        } while ((uint)(iVar3 - iVar2) < 3);\n        return 3;\n      }\n      iVar3 = get_value_from_pointer_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  else {\n    *DAT_080023b0 = 0;\n    iVar2 = get_value_from_pointer_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar3 = get_value_from_pointer_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  return uVar4;\n}\n\n",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800201c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": true,
            "current_name": "FUNC_0800201c"
        },
        "FUN_080028d4": {
            "renaming": {
                "param_1": "ptr_array",
                "param_2": "bit_position",
                "PTR_": "ptr_",
                "param_3": "value_to_set",
                "DAT_": "data_",
                "FUN_080028d4": "set_bits_at_position_080028d4"
            },
            "code": "void set_bits_at_position_080028d4(uint32_t* PTR_array, uint8_t bit_position, uint32_t value_to_set) {\n    uint32_t* PTR_element = PTR_array + 0x20;\n    uint8_t bit_mask = ~(4 << (bit_position & 0xff));\n    *PTR_element = *PTR_element & bit_mask;\n    *PTR_element = *PTR_element | value_to_set << (bit_position & 0xff);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d4",
            "calling": [
                "FUN_080028f0"
            ],
            "imported": true,
            "current_name": "set_bits_at_position_080028d4"
        },
        "FUN_0800293c": {
            "renaming": {
                "FUN_0800293c": "do_nothing_0800293c"
            },
            "code": "\nvoid do_nothing_0800293c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293c",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": true,
            "current_name": "do_nothing_0800293c"
        },
        "FUN_080040ec": {
            "renaming": {
                "FUN_080040ec": "process_input_and_return_080040ec",
                "param_1": "input_ptr",
                "process_input_08003d18": "process_input_08003d18",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void process_input_and_return_080040ec(undefined4 input_ptr, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  process_input_08003d18(input_ptr, param_2, param_3, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08003d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040ec",
            "calling": [
                "FUN_0800562a"
            ],
            "imported": true,
            "current_name": "process_input_and_return_080040ec"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "parse_input_08001460",
                "uVar1": "result",
                "puVar2": "ptr_input_flags",
                "param_1": "ptr_input_data",
                "param_2": "ptr_input_length",
                "param_3": "input_type",
                "param_4": "ptr_input_buffer"
            },
            "code": "int parse_input_08001460(uint **ptr_input_data, uint *ptr_input_length, int input_type, uint *ptr_input_buffer) {\n  int result;\n  uint *ptr_input_flags;\n\n  if (*((*ptr_input_data) + 0x3d) == '(') {\n    if (ptr_input_length == (uint *)0x0 || input_type == 0 || *(*ptr_input_data + 0xf) == 1) {\n      result = 1;\n    }\n    else {\n      *(*ptr_input_data + 0xf) = 1;\n      ptr_input_flags = *ptr_input_data;\n      if ((*ptr_input_flags & 1) == 0) {\n        *ptr_input_flags = *ptr_input_flags | 1;\n      }\n      **ptr_input_data = **ptr_input_data & 0xfffff7ff;\n      *(*ptr_input_data + 0x3d) = 0x29;\n      *(*ptr_input_data + 0x3e) = 0x20;\n      result = 0;\n      ptr_input_data[0x10] = (uint *)0x0;\n      ptr_input_data[9] = ptr_input_length;\n      *(short *)(*ptr_input_data + 0x2a) = (short)input_type;\n      ptr_input_data[0xb] = ptr_input_buffer;\n      *(short *)(ptr_input_data + 10) = *(short *)(*ptr_input_data + 0x2a);\n      *(*ptr_input_data + 0xf) = 0;\n      (*ptr_input_data)[1] = (*ptr_input_data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_08003880"
            ],
            "imported": true,
            "current_name": "parse_input_08001460"
        },
        "FUN_08003880": {
            "renaming": {
                "iVar1": "subtracted_value",
                "FUN_08003880": "process_input_08003880",
                "param_1": "input_address",
                "param_2": "flag",
                "param_3": "input_length",
                "param_4": "unknown_flag"
            },
            "code": "void process_input_08003880(int input_address, int flag, int input_length, int unknown_flag){\n  int subtracted_value = subtract_four_from_param();\n  if (input_length == *(int *)(input_address + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(subtracted_value + 0x88) = 0;\n      *(undefined *)(subtracted_value + 0x5e) = 0;\n      if (*(code **)(subtracted_value + 100) != (code *)0x0) {\n        (**(code **)(subtracted_value + 100))();\n      }\n      parse_input(input_address, subtracted_value + 0x68, *(undefined *)(subtracted_value + 0x88), 8);\n      return;\n    }\n    *(undefined *)(subtracted_value + 0x5e) = 1;\n    process_input_08003880(input_address, subtracted_value + 0x68, 0x20, 8, unknown_flag);\n  }\n  return;\n}",
            "called": [
                "FUN_08001460",
                "FUN_080014ec",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003880",
            "calling": [
                "FUN_0800165a"
            ],
            "imported": true,
            "current_name": "process_input_08003880"
        },
        "FUN_08002f4c": {
            "renaming": {
                "*(uint *)(*param_1 + 0xc)": "*ptr_input_c",
                "FUN_08002f4c": "process_input_and_validate_08002f4c",
                "param_1": "PTR_INPUT",
                "*(undefined *)((int)param_1 + 0x39)": "*ptr_char",
                "*param_1": "*PTR_INPUT",
                "0x20": "SPACE_CHARACTER",
                "process_input_and_validate_08003f48": "validate_input_08003f48"
            },
            "code": "void process_input_and_validate_08002f4c() {\n    uint32_t* ptr_input = PTR_INPUT;\n    uint32_t* ptr_input_c = ptr_input + 0xc;\n    *ptr_input_c = *ptr_input_c & 0xffffffbf;\n    char* ptr_char = (char*)PTR_INPUT + 0x39;\n    *ptr_char = 0x20;\n    validate_input_08003f48();\n    return;\n}",
            "called": [
                "FUN_08003f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f4c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": true,
            "current_name": "process_input_and_validate_08002f4c"
        },
        "FUN_080035bc": {
            "renaming": {
                "FUN_080035bc": "initializeData_080035bc",
                "puVar1": "dataPtr"
            },
            "code": "void initializeData_080035bc(void)\n{\n  uint *dataPtr;\n  dataPtr = DAT_080035f0;\n  *dataPtr |= 1;\n  dataPtr[2] = 0;\n  *dataPtr &= 0xfef6ffff;\n  dataPtr[1] = DAT_080035f4;\n  *dataPtr &= 0xfffbffff;\n  dataPtr[3] = 0;\n  *(undefined4 *)(DAT_080035f8 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035bc",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": true,
            "current_name": "initializeData_080035bc"
        },
        "FUN_080025ec": {
            "renaming": {
                "DAT_08002604": "data_08002604",
                "uVar1": "data",
                "FUN_080025ec": "get_data_shifted_by_pointer_080025ec",
                "get_data_from_pointer_080025e0": "get_data_from_pointer",
                "PTR_DAT_08002608": "pointer_data"
            },
            "code": "uint get_data_shifted_by_pointer_080025ec(void)\n{\n  uint data = get_data_from_pointer();\n  uint shift_amount = (uint)(*(int *)(PTR_DAT_08002608 + 8) << 0x13) >> 0x1d;\n  return data >> shift_amount;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ec",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": true,
            "current_name": "get_data_shifted_by_pointer_080025ec"
        },
        "FUN_08000c4c": {
            "renaming": {
                "FUN_08000c4c": "handle_software_interrupt_and_process_data_08000c4c",
                "PTR_DAT_08000c60": "data_pointer",
                "handle_software_interrupt_080005e4": "handle_software_interrupt",
                "process_data_and_decode_08000600": "process_data_and_decode"
            },
            "code": "void handle_software_interrupt_and_process_data_08000c4c(void)\n{\n  handle_software_interrupt(0);\n  process_data_and_decode(PTR_DAT_08000c60, 0x4b00);\n  return;\n}",
            "called": [
                "FUN_08000600",
                "FUN_080005e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c4c",
            "calling": [
                "FUN_08004658"
            ],
            "imported": true,
            "current_name": "handle_software_interrupt_and_process_data_08000c4c"
        },
        "FUN_08004a60": {
            "renaming": {
                "iVar1": "count",
                "iVar3": "count",
                "puVar2": "end_of_array",
                "param_1": "input_param_1",
                "FUN_08004a60": "process_and_count_input_08004a60",
                "process_input_08004a34": "process_input",
                "param_2": "input_param_2",
                "param_3": "input_char_array",
                "param_4": "input_array_length"
            },
            "code": "int process_and_count_input_08004a60(int input_param_1, int input_param_2, char *input_char_array, int input_array_length)\n{\n  int count = 0;\n  char *current_char = input_char_array;\n  char *end_of_array = input_char_array + input_array_length;\n  while (current_char != end_of_array) {\n    if (current_char == end_of_array) {\n      return count;\n    }\n    count = process_input(input_param_1, *current_char, input_param_2, input_array_length, count);\n    current_char++;\n  }\n  return count;\n}",
            "called": [
                "FUN_08004a34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a60",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": true,
            "current_name": "process_and_count_input_08004a60"
        },
        "FUN_080050d0": {
            "renaming": {
                "iVar3": "node_data_ptr",
                "uVar1": "node_status",
                "PTR_DAT_080051a4": "node_ptr_const2",
                "param_1": "status",
                "FUN_080050d0": "update_node_status_080050d0",
                "PTR_DAT_080051a8": "node_ptr_const3",
                "PTR_PTR_DAT_0800519c": "node_data_ptr_ptr",
                "param_2": "node",
                "PTR_DAT_080051a0": "node_ptr_const1",
                "uVar2": "node_flags"
            },
            "code": "uint update_node_status_080050d0(uint *status, uint *node){\n  uint node_status;\n  ushort node_flags;\n  int node_data_ptr;\n  node_data_ptr = *(int *)PTR_PTR_DAT_0800519c;\n  if ((node_data_ptr != 0) && (*(int *)(node_data_ptr + 0x18) == 0)) {\n    cleanup_node_data_080053a0(node_data_ptr);\n  }\n  if (node == (uint *)PTR_DAT_080051a0) {\n    node = *(uint **)(node_data_ptr + 4);\n  }\n  else if (node == (uint *)PTR_DAT_080051a4) {\n    node = *(uint **)(node_data_ptr + 8);\n  }\n  else if (node == (uint *)PTR_DAT_080051a8) {\n    node = *(uint **)(node_data_ptr + 0xc);\n  }\n  node_flags = *(ushort *)(node + 3);\n  node_status = (uint)node_flags;\n  if (-1 < (int)(node_status << 0x1c)) {\n    if (-1 < (int)(node_status << 0x1b)) {\n      *status = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(node_status << 0x1d) < 0) {\n      if ((uint *)node[0xd] != (uint *)0x0) {\n        if ((uint *)node[0xd] != node + 0x11) {\n          insert_new_node_080048dc(status);\n        }\n        node[0xd] = 0;\n      }\n      *(ushort *)(node + 3) = *(ushort *)(node + 3) & 0xffdb;\n      node[1] = 0;\n      *node = node[4];\n    }\n    *(ushort *)(node + 3) = *(ushort *)(node + 3) | 8;\n  }\n  if ((node[4] == 0) && ((*(ushort *)(node + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_block_080054fc(status,node);\n  }\n  node_flags = *(ushort *)(node + 3);\n  node_status = node_flags & 1;\n  if ((node_flags & 1) == 0) {\n    if (-1 < (int)((uint)node_flags << 0x1e)) {\n      node_status = node[5];\n    }\n    node[2] = node_status;\n  }\n  else {\n    node[2] = 0;\n    node[6] = -node[5];\n  }\n  if (node[4] == 0) {\n    node_flags = *(ushort *)(node + 3);\n    node_status = (int)(short)node_flags & 0x80;\n    if (node_status != 0) {\n      *(ushort *)(node + 3) = node_flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    node_status = 0;\n  }\n  return node_status;\n}",
            "called": [
                "FUN_080048dc",
                "FUN_080054fc",
                "FUN_080053a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050d0",
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "imported": true,
            "current_name": "update_node_status_080050d0",
            "code_backup": "\nuint FUN_080050d0(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_0800519c;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUNC_080053a0(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_080051a0) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_080051a4) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_080051a8) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          insert_new_node_080048dc(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_block_080054fc(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08005100:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08004978": {
            "renaming": {
                "iVar4": "block_size",
                "puVar3": "current_block_ptr",
                "param_1": "mem_block_ptr",
                "puVar6": "prev_block_ptr",
                "FUN_08004978": "allocate_memory_block_08004978",
                "puVar7": "current_block_ptr",
                "param_2": "requested_size",
                "puVar1": "prev_block_ptr",
                "uVar2": "new_offset",
                "uVar5": "block_size_diff",
                "uVar8": "aligned_requested_size"
            },
            "code": "uint allocate_memory_block_08004978(undefined4 *mem_block_ptr,uint requested_size)\n{\n  uint *prev_block_ptr;\n  uint *current_block_ptr;\n  uint block_size;\n  uint aligned_requested_size;\n\n  aligned_requested_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (aligned_requested_size < 0xc) {\n    aligned_requested_size = 0xc;\n  }\n  if (((int)aligned_requested_size < 0) || (aligned_requested_size < requested_size)) {\n    *mem_block_ptr = 0xc;\n  }\n  else {\n    do_nothing_0800557c();\n    prev_block_ptr = PTR_DAT_08004a30;\n    current_block_ptr = *(uint **)PTR_DAT_08004a2c;\n    while (current_block_ptr != (uint *)0x0) {\n      block_size = *current_block_ptr - aligned_requested_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (prev_block_ptr == current_block_ptr) {\n            aligned_requested_size = prev_block_ptr[1];\n          }\n          else {\n            aligned_requested_size = current_block_ptr[1];\n          }\n          if (prev_block_ptr == current_block_ptr) {\n            *(uint *)PTR_DAT_08004a2c = aligned_requested_size;\n            current_block_ptr = prev_block_ptr;\n          }\n          else {\n            prev_block_ptr[1] = aligned_requested_size;\n          }\n        }\n        else {\n          *current_block_ptr = block_size;\n          *(uint *)((int)current_block_ptr + block_size) = aligned_requested_size;\n          current_block_ptr = (uint *)((int)current_block_ptr + block_size);\n        }\n        do_nothing_0800557e(mem_block_ptr);\n        aligned_requested_size = (int)current_block_ptr + 0xbU & 0xfffffff8;\n        block_size = aligned_requested_size - (int)(current_block_ptr + 1);\n        if (block_size != 0) {\n          *(int *)((int)current_block_ptr + block_size) = -block_size;\n          return aligned_requested_size;\n        }\n        return aligned_requested_size;\n      }\n      prev_block_ptr = current_block_ptr;\n      current_block_ptr = (uint *)current_block_ptr[1];\n    }\n    if (*(int *)PTR_DAT_08004a30 == 0) {\n      uint new_offset = find_and_set_offset_0800500c(mem_block_ptr);\n      *(uint *)prev_block_ptr = new_offset;\n    }\n    current_block_ptr = (uint *)find_and_set_offset_0800500c(mem_block_ptr,aligned_requested_size);\n    if ((current_block_ptr != (uint *)0xffffffff) && ((current_block_ptr == (uint *)aligned_requested_size || (block_size = find_and_set_offset_0800500c(mem_block_ptr,(int)current_block_ptr - (int)prev_block_ptr), block_size != -1)))) {\n      *current_block_ptr = aligned_requested_size;\n      do_nothing_0800557e(mem_block_ptr);\n      aligned_requested_size = (int)current_block_ptr + 0xbU & 0xfffffff8;\n      block_size = aligned_requested_size - (int)(current_block_ptr + 1);\n      if (block_size != 0) {\n        *(int *)((int)current_block_ptr + block_size) = -block_size;\n        return aligned_requested_size;\n      }\n      return aligned_requested_size;\n    }\n    *mem_block_ptr = 0xc;\n    do_nothing_0800557e(mem_block_ptr);\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800500c",
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "FUN_080054fc",
                "FUN_08005374"
            ],
            "imported": true,
            "current_name": "allocate_memory_block_08004978"
        },
        "FUN_08002d0c": {
            "renaming": {
                "iVar1": "diff_value",
                "param_1": "params",
                "FUN_08002d0c": "check_params_08002d0c",
                "param_2": "num_params",
                "param_3": "expected_result",
                "param_4": "some_value",
                "param_5": "max_value"
            },
            "code": "uint check_params_08002d0c(uint **params, uint num_params, bool expected_result, int some_value, uint max_value)\n{\n  int diff_value;\n  while (true)\n  {\n    uint param_value = **params;\n    if (((num_params & ~param_value) == 0) != expected_result) {\n      return 0;\n    }\n    if ((max_value != 0xffffffff) && ((max_value != 0) && ((diff_value = get_value_from_pointer_08000e30() - some_value), (uint)diff_value <= max_value))) {\n      break;\n    }\n    (*params)[3] &= 0xfffffe5f;\n    (*params)[5] &= 0xfffffffe;\n    *(undefined *)((int)params + 0x39) = 0x20;\n    *(undefined *)((int)params + 0x3a) = 0x20;\n    *(undefined *)(params + 0xe) = 0;\n    return 3;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d0c",
            "calling": [
                "FUN_08002dd0"
            ],
            "imported": true,
            "current_name": "check_params_08002d0c"
        },
        "FUN_08001902": {
            "renaming": {
                "FUN_08001902": "do_nothing_08001902"
            },
            "code": "\nvoid do_nothing_08001902(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001902",
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "imported": true,
            "current_name": "do_nothing_08001902"
        },
        "FUN_08001904": {
            "renaming": {
                "**param_1": "(*input_array)",
                "*(undefined *)((int)param_1 + 0x3d)": "*(char *)((int)input_array + 0x3d)",
                "param_1[9]": "input_array[9]",
                "*(char *)puVar1": "*(char *)current_char",
                "param_1": "input_array",
                "(*param_1)[1]": "input_array[1]",
                "*(short *)((int)param_1 + 0x2a)": "*(uint16_t *)((int)input_array + 0x2a)",
                "param_1[0xc]": "input_array[0xc]",
                "FUN_08001904": "remove_quotes_08001904",
                "puVar1": "current_char"
            },
            "code": "uint32_t remove_quotes_08001904(uint32_t **input_array)\n{\n  uint32_t *current_char;\n  uint32_t *target_char;\n\n  if (*(char *)((int)input_array + 0x3d) == '\"') {\n    if (*(uint16_t *)((int)input_array + 0x2a) < 4) {\n      if (*(uint16_t *)((int)input_array + 0x2a) < 2) {\n        **input_array &= 0xfffffbff;\n        (*input_array)[1] &= 0xfffff8ff;\n        current_char = input_array[9];\n        input_array[9] = (uint32_t *)((int)current_char + 1);\n        *(char *)current_char = (char)(*input_array)[4];\n        *(uint16_t *)((int)input_array + 0x2a) -= 1;\n        *(char *)((int)input_array + 0x3d) = 0x20;\n        input_array[0xc] = (uint32_t *)0x0;\n        if (*(char *)((int)input_array + 0x3e) == '@') {\n          *(char *)((int)input_array + 0x3e) = 0;\n          do_nothing_08001902();\n        }\n        else {\n          *(char *)((int)input_array + 0x3e) = 0;\n          do_nothing_080015b8();\n        }\n      }\n    }\n    else {\n      current_char = input_array[9];\n      input_array[9] = (uint32_t *)((int)current_char + 1);\n      *(char *)current_char = (char)(*input_array)[4];\n      *(uint16_t *)((int)input_array + 0x2a) -= 1;\n      if (*(uint16_t *)((int)input_array + 0x2a) == 3) {\n        (*input_array)[1] &= 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001904",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "remove_quotes_08001904"
        },
        "FUN_08000c64": {
            "renaming": {
                "in_r3": "arg1",
                "PTR_DAT_08000c78": "data_pointer_1",
                "PTR_DAT_08000c74": "data_pointer_2",
                "FUN_08000c64": "process_data_08000c64"
            },
            "code": "void process_data_08000c64(void)\n{\n  undefined4 arg1;\n  undefined4 arg2;\n  int data_size = 0x10;\n  decode_and_process_data_08000c64(PTR_DAT_08000c78,PTR_DAT_08000c74,data_size,arg1,arg2);\n  return;\n}",
            "called": [
                "FUN_08000b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c64",
            "calling": [
                "FUN_08004658"
            ],
            "imported": true,
            "current_name": "process_data_08000c64"
        },
        "FUN_08002ffc": {
            "renaming": {
                "write_data_to_memory_08002f66": "write_data_to_memory",
                "process_input_and_validate_08002f4c": "process_input_and_validate",
                "puVar3": "message",
                "param_1": "message_data",
                "check_input_08000f8c": "check_input",
                "do_nothing_08003f94": "do_nothing",
                "PTR_LAB_0800311c_1_08003118": "PTR_LAB_0800311c_1_08003118",
                "uVar2": "message_flags2",
                "uVar5": "message_flags",
                "clearFlags_08002940": "clear_flags",
                "FUN_08002ffc": "process_message_08002ffc",
                "uVar4": "flag_check",
                "parse_message_0800295c": "parse_message"
            },
            "code": "void process_message_08002ffc(uint **message_data)\n{\n    uint *message = *message_data;\n    uint message_flags = *message;\n    uint message_flags2 = message[3];\n    \n    if ((message_flags & 0x20) != 0 && (message_flags & 0xf) == 0 && (message_flags2 & 0x20) != 0)\n    {\n        write_data_to_memory(message_data);\n        return;\n    }\n    \n    if ((message_flags & 0xf) == 0)\n    {\n        if ((message[5] & 0x120) == 0 && (message_flags2 & 0x20) == 0)\n        {\n            return;\n        }\n    }\n    else\n    {\n        if ((message_flags & 0x80) != 0 && (message_flags2 & 0x80) != 0)\n        {\n            parse_message(message_data);\n            return;\n        }\n        if ((message_flags & 0x40) != 0 && (message_flags2 & 0x40) != 0)\n        {\n            process_input_and_validate(message_data);\n        }\n        else\n        {\n            if ((message_flags & 1) != 0 && (message_flags2 & 0x100) != 0)\n            {\n                message_data[15] = (uint *)((uint)message_data[15] | 1);\n            }\n            if ((message_flags & 4) != 0 && (message[5] & 1) != 0)\n            {\n                message_data[15] = (uint *)((uint)message_data[15] | 2);\n            }\n            if ((message_flags & 2) != 0 && (message[5] & 1) != 0)\n            {\n                message_data[15] = (uint *)((uint)message_data[15] | 4);\n            }\n            if ((message_flags & 8) != 0 && (message[5] & 1) != 0)\n            {\n                message_data[15] = (uint *)((uint)message_data[15] | 8);\n            }\n            if (message_data[15] != (uint *)0x0)\n            {\n                if ((message_flags2 & 0x20) != 0 && (message_flags & 0x20) != 0)\n                {\n                    write_data_to_memory(message_data);\n                }\n                if ((message_data[15] & 8) == 0 && (message[5] & 0x40) == 0)\n                {\n                    do_nothing_08003f94(message_data);\n                    message_data[15] = (uint *)0x0;\n                    return;\n                }\n                clear_flags(message_data);\n                uint *message = *message_data;\n                if ((message[5] & 0x40) == 0)\n                {\n                    do_nothing_08003f94(message_data);\n                    return;\n                }\n                message[5] &= 0xffffffbf;\n                if (message_data[13] == (uint *)0x0)\n                {\n                    do_nothing_08003f94(message_data);\n                    return;\n                }\n                message_data[13][0x14] = (uint *)PTR_LAB_0800311c_1_08003118;\n                int input_check = check_input(message_data[13]);\n                if (input_check != 0)\n                {\n                    (*(code *)message_data[13][0x14])();\n                    return;\n                }\n            }\n        }\n    }\n}",
            "called": [
                "FUN_08002f66",
                "FUN_08003f94",
                "FUN_0800295c",
                "FUN_08002f4c",
                "FUN_08002940",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ffc",
            "calling": [],
            "imported": true,
            "current_name": "process_message_08002ffc"
        },
        "FUN_0800387c": {
            "renaming": {
                "param_1": "param",
                "FUN_0800387c": "subtract_four_from_param_0800387c"
            },
            "code": "int subtract_four_from_param_0800387c(int param){\n\treturn param - 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800387c",
            "calling": [
                "FUN_08003900",
                "FUN_080038d0",
                "FUN_08003880"
            ],
            "imported": true,
            "current_name": "subtract_four_from_param_0800387c"
        },
        "FUN_0800351e": {
            "renaming": {
                "0xffffffff": "-1",
                "uVar1": "result",
                "param_1": "value",
                "FUN_0800351e": "find_value_0800351e",
                "find_value_in_array_08003506": "find_value_in_array"
            },
            "code": "int find_value_0800351e(int value){\n  int result = 0;\n  if (value != 0) {\n    result = find_value_0800351e_in_array();\n    return result;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800351e",
            "calling": [
                "FUN_0800447c",
                "FUN_08003cc8"
            ],
            "imported": true,
            "current_name": "find_value_0800351e"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "do_nothing_080059f8"
            },
            "code": "\nvoid do_nothing_080059f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [
                "FUN_08004884",
                "FUN_080001ac"
            ],
            "imported": true,
            "current_name": "do_nothing_080059f8"
        },
        "FUN_08002f66": {
            "renaming": {
                "sVar2": "count",
                "data_start": "data_start",
                "puVar3": "dest_char",
                "param_1": "data",
                "pbVar1": "dest_byte",
                "FUN_08002f66": "write_data_to_memory_08002f66"
            },
            "code": "uint32_t write_data_to_memory_08002f66(int *data)\n{\n  char *data_start = (char *)(data + 0x3a);\n  if (*data_start != '\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(uint16_t *)data[10] = (uint16_t)((uint32_t)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] += 2;\n    }\n    else {\n      *(uint16_t *)data[10] = (uint16_t)*(uint32_t *)(*data + 4) & 0xff;\n      data[10]++;\n    }\n  }\n  else if (data[4] == 0) {\n    char *dest = (char *)data[10];\n    data[10]++;\n    *dest = (char)*(uint32_t *)(*data + 4);\n  }\n  else {\n    char *dest = (char *)data[10];\n    data[10]++;\n    *dest = (char)*(uint32_t *)(*data + 4) & 0x7f;\n  }\n  uint16_t count = *(uint16_t *)(data + 0x2e) - 1;\n  *(uint16_t *)(data + 0x2e) = count;\n  if (count != 0) {\n    return 0;\n  }\n  *(uint32_t *)(*data + 0xc) &= 0xfffffedf;\n  *(uint32_t *)(*data + 0x14) &= 0xfffffffe;\n  *data_start = ' ';\n  execute_integer_function_if_less_than_10_08003f24();\n  return 0;\n}",
            "called": [
                "FUN_08003f24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f66",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": true,
            "current_name": "write_data_to_memory_08002f66"
        },
        "FUN_080034b6": {
            "renaming": {
                "param_1": "value",
                "set_param_value_08001198": "set_param_value_08001198",
                "param_2": "type",
                "param_3": "check",
                "param_4": "param_4",
                "FUN_080034b6": "set_param_value_if_zero_080034b6_080034b6"
            },
            "code": "void set_param_value_if_zero_080034b6_080034b6(undefined4 value, undefined2 type, int check, undefined4 param_4)\n{\n  if (check == 0) {\n    set_param_value_08001198(value, type, 0, param_4, param_4);\n    return;\n  }\n  set_param_value_08001198(value, type, 1, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08001198"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034b6",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": true,
            "current_name": "set_param_value_if_zero_080034b6_080034b6"
        },
        "FUN_08003eac": {
            "renaming": {
                "bVar1": "input_index",
                "PTR_DAT_08003efc": "input_type_array",
                "validate_input_08002eb2": "validate_input",
                "param_1": "input_address",
                "set_bit_in_array_08000ec4": "set_bit_in_input_array",
                "param_2": "input_value",
                "decode_and_store_bits_08000e60": "decode_bits_and_store",
                "PTR_DAT_08003ef4": "input_storage_array",
                "PTR_DAT_08003ef8": "input_index_array",
                "FUN_08003eac": "store_input_and_validate_08003eac"
            },
            "code": "void store_input_and_validate_08003eac(int input_address, int input_value){\n\tif (input_address != 0) {\n\t\tint input_index = *(byte *)(input_address + 0x44);\n\t\tPTR_DAT_08003ef4[input_index] = input_value;\n\t\tPTR_DAT_08003ef8[input_index] = input_address;\n\t\tdecode_bits_and_store(input_address);\n\t\tset_bit_in_input_array(input_address);\n\t\tvalidate_input(PTR_DAT_08003efc[input_index], *(int *)(input_address + 0x68) + (uint)*(ushort *)(input_address + 0x6e),1);\n\t}\n}",
            "called": [
                "FUN_08000ec4",
                "FUN_08002eb2",
                "FUN_08000e60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": true,
            "current_name": "store_input_and_validate_08003eac"
        },
        "FUN_08003e18": {
            "renaming": {
                "FUN_08003e18": "validate_input_and_set_params_08003e18",
                "iVar1": "is_valid_input",
                "param_1": "input_length",
                "param_index": "param_index",
                "param_2": "input_buffer",
                "param_3": "param1",
                "param_4": "param2",
                "PTR_DAT_08003e50": "param_values",
                "input_ptr": "input_buffer_offset"
            },
            "code": "int validate_input_and_set_params_08003e18(int input_length, char* input_buffer, int param1, int param2)\n{\n  int is_valid_input = is_valid_input(input_buffer);\n  if (input_length == 0 || is_valid_input != 0) {\n    return -1;\n  }\n  char* input_ptr = input_buffer + 0x45;\n  int param_index = *(unsigned char*)(input_buffer + 0x44);\n  int* PTR_DAT_08003e50 = (int*)(PTR_DAT_08003e50 + param_index * 4);\n  *input_ptr = *(char*)(input_buffer + 0x45);\n  set_PTR_DAT_08003e50_08002efa(PTR_DAT_08003e50, input_ptr, 1, PTR_DAT_08003e50, param2);\n  return 0;\n}",
            "called": [
                "FUN_08003dd0",
                "FUN_08002efa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e18",
            "calling": [
                "FUN_080042ac"
            ],
            "imported": true,
            "current_name": "validate_input_and_set_params_08003e18"
        },
        "FUN_080040fc": {
            "renaming": {
                "FUN_080040fc": "initialize_pointer_value_080040fc",
                "PTR_DAT_08004108": "pointer_to_dat"
            },
            "code": "void initialize_pointer_value_080040fc(void)\n{\n    int new_value = 22;\n    int* PTR_DAT_08004108 = PTR_DAT_08004108;\n    *PTR_DAT_08004108 = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040fc",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": true,
            "current_name": "initialize_pointer_value_080040fc"
        },
        "FUN_08002dd0": {
            "renaming": {
                "FUN_08002dd0": "process_input_08002dd0",
                "iVar2": "return_value",
                "uVar1": "value_from_pointer",
                "param_1": "input_data",
                "param_2": "input_values",
                "param_3": "num_values",
                "param_4": "param_4"
            },
            "code": "int process_input_08002dd0(int *input_data, ushort *input_values, int num_values, undefined4 param_4) {\n  undefined4 value_from_pointer;\n  int return_value;\n  \n  if (*(char *)((int)input_data + 0x39) == ' ') {\n    if (input_values == (ushort *)0x0 || num_values == 0 || *(char *)(input_data + 0xe) == '\\x01') {\n      return_value = 1;\n    }\n    else {\n      *(undefined *)(input_data + 0xe) = 1;\n      input_data[0xf] = 0;\n      *(undefined *)((int)input_data + 0x39) = 0x21;\n      value_from_pointer = get_value_from_pointer();\n      *(short *)(input_data + 9) = (short)num_values;\n      *(short *)((int)input_data + 0x26) = (short)num_values;\n      while (*(short *)((int)input_data + 0x26) != 0) {\n        *(short *)((int)input_data + 0x26) = *(short *)((int)input_data + 0x26) + -1;\n        if (input_data[2] == 0x1000) {\n          return_value = check_parameters(input_data, 0x80, 0, value_from_pointer, param_4);\n          if (return_value != 0) {\n            return 3;\n          }\n          *(uint *)(*input_data + 4) = *input_values & 0x1ff;\n          if (input_data[4] == 0) {\n            input_values = input_values + 1;\n          }\n          else {\n            input_values = (ushort *)((int)input_values + 1);\n          }\n        }\n        else {\n          return_value = check_parameters(input_data, 0x80, 0, value_from_pointer, param_4);\n          if (return_value != 0) {\n            return 3;\n          }\n          *(uint *)(*input_data + 4) = (uint)*(byte *)input_values;\n          input_values = (ushort *)((int)input_values + 1);\n        }\n      }\n      return_value = check_parameters(input_data, 0x40, 0, value_from_pointer, param_4);\n      if (return_value == 0) {\n        *(undefined *)((int)input_data + 0x39) = 0x20;\n        *(undefined *)(input_data + 0xe) = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dd0",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": true,
            "current_name": "process_input_08002dd0"
        },
        "FUN_08004860": {
            "renaming": {
                "FUN_08004860": "process_data_and_update_results_08004860",
                "uStack_8": "intermediate_result1",
                "param_1": "data1",
                "uStack_4": "intermediate_result2",
                "param_2": "data2",
                "param_3": "result1",
                "param_4": "result2",
                "PTR_PTR_DAT_08004880": "PTR_PTR_DATA_STRUCTURE"
            },
            "code": "void process_data_and_update_results_08004860(int data1, int data2, int *result1, int *result2)\n{\n  int intermediate_result1;\n  int intermediate_result2;\n  \n  intermediate_result1 = data1;\n  intermediate_result2 = data2;\n  perform_calculation(*(int *)PTR_PTR_DAT_08004880, data1, data2, &intermediate_result1, &intermediate_result2);\n  *result1 = intermediate_result1;\n  *result2 = intermediate_result2;\n  return;\n}",
            "called": [
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004860",
            "calling": [
                "FUN_08004808"
            ],
            "imported": true,
            "current_name": "process_data_and_update_results_08004860"
        },
        "FUN_08004622": {
            "renaming": {
                "convert_base_080045c8": "convert_base",
                "FUN_08004622": "convert_base_if_not_zero_08004622",
                "param_1": "function_ptr",
                "*param_1": "*function_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void convert_base_if_not_zero_08004622(uint32_t *function_ptr, uint32_t param_2, uint32_t param_3, uint32_t param_4) {\n  if (param_3 != 0) {\n    convert_base(function_ptr, param_2, param_3 & 0xff);\n    return;\n  }\n  (**(code **)*function_ptr)(function_ptr, param_2 & 0xff, 0, *(code **)*function_ptr, param_4);\n  return;\n}",
            "called": [
                "FUN_080045c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004622",
            "calling": [
                "FUN_08004638"
            ],
            "imported": true,
            "current_name": "convert_base_if_not_zero_08004622"
        },
        "FUN_08003414": {
            "renaming": {
                "find_value_080034f4": "find_value",
                "find_value_0800354a": "find_value",
                "clear_flags_and_set_based_on_value_0800268e": "clear_flags_and_set_based_on_value",
                "local_4c": "values",
                "param_1": "value",
                "set_bit_and_clear_flags_080028f0": "set_bit_and_clear_flags",
                "FUN_08003414": "update_bits_based_on_value_08003414",
                "PTR_VALUE_LIST_2": "PTR_VALUE_LIST_2",
                "update_and_check_bits_08002864": "update_bits",
                "get_value_type_0800339c": "get_value_type",
                "PTR_DAT_08003468": "PTR_VALUE_LIST"
            },
            "code": "void update_bits_based_on_value_08003414(int value)\n{\n  int value_type;\n  uint value_flags;\n  int values[16];\n\n  values[0] = find_value(value, PTR_DAT_08003468);\n  if ((values[0] != 0) &&\n     ((((value_type = get_value_type(value), value_type == 0 || (value_type == 4)) || (value_type == 8)) ||\n      ((value_type == 0xc || (value_type == 0x18)))))) {\n    value_flags = find_value(value, PTR_DAT_08003468_2);\n    if ((value_flags & 0x100000) == 0) {\n      update_bits(values, value_type);\n    }\n    else {\n      set_bit_and_clear_flags(values, value_type);\n    }\n    clear_flags_and_set_based_on_value(values);\n  }\n  return;\n}",
            "called": [
                "FUN_080028f0",
                "FUN_0800268e",
                "FUN_08002864",
                "FUN_0800339c",
                "FUN_0800354a",
                "FUN_080034f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003414",
            "calling": [
                "FUN_08004110"
            ],
            "imported": true,
            "current_name": "update_bits_based_on_value_08003414"
        },
        "FUN_08005718": {
            "renaming": {
                "iVar2": "return_value",
                "param_1": "result",
                "FUN_08005718": "execute_and_retrieve_result_08005718",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptr"
            },
            "code": "void execute_and_retrieve_result_08005718(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *ptr = PTR_DAT_08005738;\n  *(undefined4 *)ptr = 0;\n  int return_value = returnZero_080040e4(param_2, param_3, param_4, param_4, param_4);\n  if ((return_value == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005718",
            "calling": [
                "FUN_0800562a",
                "FUN_08005662"
            ],
            "imported": true,
            "current_name": "execute_and_retrieve_result_08005718"
        },
        "FUN_080011c0": {
            "renaming": {
                "param_1[0x14]": "type",
                "param_1": "params",
                "*(char *)((int)param_1 + 0x3e)": "condition",
                "param_1[0x11]": "value",
                "FUN_080011c0": "set_flags_080011c0",
                "*(uint *)(*param_1 + 0x10)": "flag"
            },
            "code": "int set_flags_080011c0(int *params)\n{\n    int flag = 0;\n    int *ptr = (int*)*params;\n    int condition = (int)params + 0x3e;\n    int value = params[0x11];\n    int type = params[0x14];\n\n    if (*(char*)condition == '@') {\n        if (params[0x14] == 0) {\n            flag = value & 0xfe;\n        }\n        else {\n            flag = value & 0xffU | 1;\n        }\n    }\n    else if (params[4] == 0x4000) {\n        if (*(char*)((int)params + 0x3d) == '!') {\n            flag = value & 0xfe;\n        }\n        else {\n            flag = value & 0xffU | 1;\n        }\n    }\n    else if (type == 0) {\n        flag = (value << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (type == 1) {\n        flag = (value << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    *ptr = flag;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011c0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "set_flags_080011c0"
        },
        "FUN_08000b54": {
            "renaming": {
                "bVar1": "result",
                "iVar2": "crc_result",
                "iVar3": "validation_result",
                "decode_and_calculate_crc_080008e2": "decode_and_calculate_crc",
                "validate_values_080007f0": "validate_values",
                "param_1": "data",
                "get_value_and_return_08004204": "get_value_and_return_offset",
                "set_value_at_index_08000a4e": "set_value_at_index",
                "decode_and_store_080006b4": "decode_and_store_data",
                "unaff_r5": "byte_count",
                "set_bit_in_ushort_array_08000a00": "set_bit_in_ushort_array",
                "param_2": "values",
                "param_3": "value_count",
                "set_bits_based_on_condition_08000a7a": "set_bits_based_on_condition",
                "process_data_08000998": "process_data",
                "combine_values_and_store_08000b04": "combine_values_and_store",
                "FUN_08000b54": "decode_and_process_data_08000b54"
            },
            "code": "int decode_and_process_data_08000b54(int **data, int *values, int value_count)\n{\n  byte result;\n  int crc_result;\n  uint byte_count;\n  int validation_result;\n  \n  data[19] = values;\n  *(char *)(data + 24) = (char)value_count;\n  if (*(byte *)((int)data + 5) < 4) {\n    result = (**(code **)(**data + 8))();\n    byte_count = (uint)result;\n  }\n  if (byte_count == 0 || (int)byte_count < 8) {\n    crc_result = 0;\n  }\n  else {\n    crc_result = decode_and_store_data(data);\n    *(char *)(data + 2) = (char)crc_result;\n    if (*(char *)((int)data + 9) == *(char *)(data + 1)) {\n      validation_result = validate_values(data);\n      if (validation_result < 1) {\n        int offset = get_value_and_return_offset();\n        data[23] = (int *)((uint)*(ushort *)((int)data + 86) + offset);\n        *(undefined *)(data + 2) = 0;\n        switch(*(undefined *)((int)data + 10)) {\n        case 1:\n        case 2:\n          crc_result = decode_and_calculate_crc(data, values, value_count);\n          break;\n        case 3:\n        case 4:\n          crc_result = process_data(data, values, value_count);\n          break;\n        case 5:\n          crc_result = set_bit_in_ushort_array(data, values, value_count);\n          break;\n        case 6:\n          crc_result = set_value_at_index(data, values, value_count);\n          break;\n        case 15:\n          crc_result = set_bits_based_on_condition(data, values, value_count);\n          break;\n        case 16:\n          crc_result = combine_values_and_store(data, values, value_count);\n        }\n      }\n      else {\n        if (validation_result != 255) {\n          copy_data(data, validation_result);\n          calculate_crc_and_decode(data);\n        }\n        *(char *)(data + 2) = (char)validation_result;\n        crc_result = (int)(char)validation_result;\n      }\n    }\n    else {\n      crc_result = 0;\n    }\n  }\n  return crc_result;\n}",
            "called": [
                "FUN_080007f0",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_0800076c",
                "FUN_08004204",
                "FUN_080008e2",
                "FUN_08000b04",
                "FUN_080008cc",
                "FUN_080006b4",
                "FUN_08000998",
                "FUN_08000a00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b54",
            "calling": [
                "FUN_08000c64"
            ],
            "imported": true,
            "current_name": "decode_and_process_data_08000b54"
        },
        "FUN_08000d96": {
            "renaming": {
                "FUN_08000d96": "do_nothing_08000d96"
            },
            "code": "\nvoid do_nothing_08000d96(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d96",
            "calling": [
                "FUN_08000de4"
            ],
            "imported": true,
            "current_name": "do_nothing_08000d96"
        },
        "FUN_0800376e": {
            "renaming": {
                "function_to_execute": "code_pointer_to_execute",
                "iVar1": "input_subtracted",
                "code": "code_pointer",
                "subtract_four_from_input_08003750": "subtract_four_from_input",
                "FUN_0800376e": "execute_function_if_exists_0800376e"
            },
            "code": "void execute_function_if_exists_0800376e(void)\n{\n  int input_subtracted = subtract_four_from_input();\n  code* function_to_execute = *(code **)(input_subtracted + 0x44);\n  if (function_to_execute != (code *)0x0) {\n    (*function_to_execute)();\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": true,
            "current_name": "execute_function_if_exists_0800376e"
        },
        "FUN_08000d98": {
            "renaming": {
                "iVar1": "is_valid",
                "param_1": "data",
                "FUN_08000d98": "check_and_store_data_08000d98"
            },
            "code": "int check_and_store_data_08000d98(uint data)\n{\n  int is_valid = check_data_validity(*(uint *)PTR_DAT_08000ddc / (1000 / (byte)*PTR_DAT_08000dd8));\n  if (is_valid != 0) {\n    return 1;\n  }\n  if (data > 0xf) {\n    return 1;\n  }\n  decode_and_store_bits_08000e60(0xffffffff, data, 0);\n  *(uint *)PTR_DAT_08000de0 = data;\n  return 0;\n}",
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d98",
            "calling": [
                "FUN_08000de4",
                "FUN_08002488"
            ],
            "imported": true,
            "current_name": "check_and_store_data_08000d98"
        },
        "FUN_08003f48": {
            "renaming": {
                "iVar2": "validation_result",
                "iVar3": "data_ptr",
                "uVar1": "index",
                "PTR_DAT_08003f8c": "validation_functions_ptr",
                "PTR_DAT_08003f88": "data_array_ptr",
                "find_integer_index_08003f00": "find_integer_index",
                "PTR_DAT_08003f90": "input_data_ptr",
                "FUN_08003f48": "process_input_and_validate_08003f48"
            },
            "code": "void process_input_and_validate_08003f48(void)\n{\n  uinteger_t index = find_integer_index();\n  int32_t data_ptr = *(int32_t *)(PTR_DAT_08003f88 + index * 4);\n  if ((index < 10) && (data_ptr != -1)) {\n    int32_t input_type = *(int32_t *)(PTR_DAT_08003f90 + (uint32_t)*(byte *)(data_ptr + 0x44) * 4);\n    int32_t input_value = *(int32_t *)(data_ptr + 0x68) + (uint32_t)*(ushort *)(data_ptr + 0x6e);\n    validate_input(input_type, input_value, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f48",
            "calling": [
                "FUN_08002f4c"
            ],
            "imported": true,
            "current_name": "process_input_and_validate_08003f48"
        },
        "FUN_0800340c": {
            "renaming": {
                "FUN_0800340c": "set_flags_based_on_value_0800340c"
            },
            "code": "void set_flags_based_on_value_0800340c() {\n  set_flags_based_on_value_0800340c_080035fc();\n  return;\n}",
            "called": [
                "FUN_080035fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800340c",
            "calling": [
                "FUN_0800268e"
            ],
            "imported": true,
            "current_name": "set_flags_based_on_value_0800340c"
        },
        "FUN_0800352e": {
            "renaming": {
                "0xffffffff": "UINT32_MAX",
                "*(undefined4 *)(param_2 + 4)": "*(uint32_t *)(array + 4)",
                "param_1": "value",
                "*param_2": "*array",
                "param_2": "array",
                "FUN_0800352e": "find_value_in_array_0800352e"
            },
            "code": "uint32_t find_value_in_array_0800352e(int value, short* array)\n{\n  while( true ) {\n    if (*array == -1) {\n      return UINT32_MAX;\n    }\n    if (*array == value) break;\n    array += 6;\n  }\n  return *(uint32_t *)(array + 4);\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800352e",
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "imported": true,
            "current_name": "find_value_in_array_0800352e"
        },
        "FUN_08001ab0": {
            "renaming": {
                "iVar1": "flags",
                "FUN_08001ab0": "process_input_08001ab0",
                "PTR_LAB_08001f3c_1_08001bf4": "PTR_LAB_08001f3c_1_08001bf4",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "DAT_08001bf8": "DAT_08001bf8",
                "param_1": "input",
                "check_input_08000f8c": "check_input",
                "do_nothing_08001aac": "do_nothing",
                "execute_command_if_valid_080038d0": "execute_command_if_valid",
                "check_and_set_flags_for_param_08003900": "check_and_set_flags"
            },
            "code": "void process_input_08001ab0(uint **input)\n{\n  int flags;\n  uint *ptr1;\n  uint *ptr2;\n  char current_char = (char)(*input)[61];\n  if (current_char - 0x29 < 2) {\n    input[12] = NULL;\n    (*input)[61] = 0x28;\n  }\n  else {\n    if ((current_char != '`') && (((*input)[1] & 0x800) == 0)) {\n      (*input)[61] = 0x20;\n    }\n    input[12] = NULL;\n    (*input)[62] = 0;\n  }\n  **input = **input & 0xfffff7ff;\n  ptr2 = *input;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (current_char == '`') {\n      (*input)[61] = 0x20;\n      input[16] = NULL;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = input[9];\n        input[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      **input = **input & 0xfffffffe;\n      do_nothing_08001aac(input);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = input[9];\n        input[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      check_and_set_flags(input);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)(input[13] + 53) == '\\x01') {\n      input[14][20] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      flags = check_input(input[14]);\n      if (flags != 0) {\n        if (((*input)[5] & 0x40) != 0) {\n          ptr2 = input[9];\n          input[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*input)[4];\n        }\n        **input = **input & 0xfffffffe;\n        (*input)[61] = 0x20;\n        (*(code *)input[14][20])();\n      }\n    }\n    else {\n      input[13][20] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      flags = check_input(input[13]);\n      if (flags != 0) {\n        **input = **input & 0xfffffffe;\n        (*input)[61] = 0x20;\n        (*(code *)input[13][20])();\n      }\n    }\n  }\n  if ((current_char == '(') && (((uint)input[16] & 4) != 0)) {\n    input[11] = DAT_08001bf8;\n    input[12] = NULL;\n    (*input)[61] = 0x20;\n    (*input)[62] = 0;\n    execute_command_if_valid(input);\n  }\n  return;\n}",
            "called": [
                "FUN_08003900",
                "FUN_08001aac",
                "FUN_080038d0",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001bfc",
                "FUN_08001e68"
            ],
            "imported": true,
            "current_name": "process_input_08001ab0"
        },
        "FUN_08001f9c": {
            "renaming": {
                "get_value_from_pointer_08000e30": "get_current_value",
                "iVar1": "previous_value",
                "iVar2": "new_value",
                "FUN_08001f9c": "check_and_return_status_08001f9c",
                "DAT_08002014": "global_variable_2",
                "DAT_08002018": "global_variable_flag_2",
                "DAT_08002010": "global_variable_flag",
                "DAT_0800200c": "global_variable"
            },
            "code": "int check_and_return_status_08001f9c(void)\n{\n  int previous_value = get_current_value();\n  *(uint *)(DAT_0800200c + 0x40) |= 0x10000000;\n  *DAT_08002010 = 1;\n  do {\n    if ((*(uint *)(DAT_08002014 + 4) & 0x10000) != 0) {\n      *DAT_08002018 = 1;\n      int current_value = get_current_value();\n      do {\n        if ((*(uint *)(DAT_08002014 + 4) & 0x20000) != 0) {\n          return 0;\n        }\n        int new_value = get_current_value();\n      } while ((uint)(new_value - current_value) < 0x3e9);\n      return 3;\n    }\n    int new_value = get_current_value();\n  } while ((uint)(new_value - previous_value) < 0x3e9);\n  return 3;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f9c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": true,
            "current_name": "check_and_return_status_08001f9c"
        },
        "FUN_08000d8e": {
            "renaming": {
                "FUN_08000d8e": "initialize_system_and_data_08000d8e"
            },
            "code": "void initialize_system_and_data_08000d8e(void)\n{\n    // code to initialize system and data\n    return;\n}",
            "called": [
                "FUN_080034ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8e",
            "calling": [
                "FUN_08004648"
            ],
            "imported": true,
            "current_name": "initialize_system_and_data_08000d8e"
        },
        "FUN_08004638": {
            "renaming": {
                "FUN_08004638": "convert_base_if_not_zero_and_return_08004638",
                "convert_base_if_not_zero_08004622": "convert_base_if_not_zero"
            },
            "code": "void convert_base_if_not_zero_and_return_08004638(void)\n{\n  // Improved code here\n  convert_base_if_not_zero();\n  return;\n}",
            "called": [
                "FUN_08004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004638",
            "calling": [],
            "imported": true,
            "current_name": "convert_base_if_not_zero_and_return_08004638"
        },
        "FUN_080008cc": {
            "renaming": {
                "*(undefined *)(param_1 + 0x49)": "*(undefined *)(dest_address + 0x49)",
                "*(byte *)(param_1 + 10)": "*(byte *)(dest_address + 10)",
                "*(undefined *)(param_1 + 0xb)": "*(undefined *)(dest_address + 0xb)",
                "param_1": "dest_address",
                "FUN_080008cc": "copy_data_080008cc",
                "*(undefined *)(param_1 + 4)": "*(undefined *)(dest_address + 4)",
                "param_2": "source_data",
                "*(undefined *)(param_1 + 9)": "*(undefined *)(dest_address + 9)"
            },
            "code": "void copy_data_080008cc(int dest_address, undefined source_data) {\n  *(undefined *)(dest_address + 9) = *(undefined *)(dest_address + 4);\n  *(byte *)(dest_address + 10) = *(byte *)(dest_address + 10) ^ 0x80;\n  *(undefined *)(dest_address + 0xb) = source_data;\n  *(undefined *)(dest_address + 0x49) = 3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008cc",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "copy_data_080008cc"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "FUNC_08004a84"
            },
            "code": "\nint FUNC_08004a84(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    initialize_arrays_080053a0();\n  }\n  if (param_2 == PTR_DAT_08004c90) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08004c98) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08004c9c) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = update_node_status_080050d0(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_08004ac6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = process_and_count_input_08004a60(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08004c70;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = find_byte_sequence_08000230(PTR_s___0__08004c94,*pbVar5);\n    puVar1 = PTR_DAT_08004ca0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__08004c94 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08004ba0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08004ba0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      param_3 = param_3 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar4 = false;\n      local_84 = 0;\n      iVar7 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = find_byte_sequence_08000230(PTR_DAT_08004ca0,*param_3,3);\n  if (iVar7 != 0) {\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n    param_3 = param_3 + 1;\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = find_byte_sequence_08000230(PTR_s_efgEFG_08004ca4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08004d9c(param_1,&local_88,param_2,DAT_08004cac,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_08004ca8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08004c22;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08004c70;\nLAB_08004c22:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_08004ac6;\n}\n\n",
            "called": [
                "FUN_08004a60",
                "FUN_08004d9c",
                "FUN_080050d0",
                "FUN_08000230",
                "FUN_080053a0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_08004860",
                "FUN_08004fdc"
            ],
            "imported": true,
            "current_name": "FUNC_08004a84"
        },
        "FUN_08005608": {
            "renaming": {
                "iVar1": "calculationResult",
                "bVar3": "isResultPositive",
                "param_1": "paramValue",
                "FUN_08005608": "calculateAndUpdateResult_08005608",
                "param_2": "resultPtr",
                "uVar2": "updatedResult"
            },
            "code": "void calculateAndUpdateResult_08005608(uint32_t paramValue,int32_t* resultPtr)\n{\n  int32_t calculationResult = calculateResult(paramValue,(int32_t)*(int16_t *)(resultPtr + 0xe));\n  bool isResultPositive = calculationResult >= 0;\n  uint32_t updatedResult;\n  if (isResultPositive) {\n    updatedResult = *(uint32_t *)(resultPtr + 0x54) + calculationResult;\n  }\n  else {\n    updatedResult = *(uint16_t *)(resultPtr + 0xc) & 0xffffefff;\n  }\n  if (isResultPositive) {\n    *(uint32_t *)(resultPtr + 0x54) = updatedResult;\n  }\n  if (!isResultPositive) {\n    *(int16_t *)(resultPtr + 0xc) = (int16_t)updatedResult;\n  }\n  return;\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005608",
            "calling": [],
            "imported": true,
            "current_name": "calculateAndUpdateResult_08005608"
        },
        "FUN_08002efa": {
            "renaming": {
                "*(char *)((int)param_1 + 0x3a)": "*(char *)((int)params + 0x3a)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*params + 0x14)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*params + 0xc)",
                "*(undefined *)((int)param_1 + 0x3a)": "*(undefined *)((int)params + 0x3a)",
                "param_1": "params",
                "*(short *)((int)param_1 + 0x2e)": "*(short *)((int)params + 0x2e)",
                "param_1[10]": "params[10]",
                "param_1[0xf]": "params[0xf]",
                "FUN_08002efa": "set_param_values_08002efa",
                "param_2": "value_1",
                "param_3": "value_2",
                "*(short *)(param_1 + 0xb)": "*(short *)(params + 0xb)",
                "*(char *)(param_1 + 0xe)": "*(char *)(params + 0xe)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(params + 0xe)"
            },
            "code": "int set_param_values_08002efa(int *params, int value_1, int value_2){\n    if (*(char *)((int)params + 0x3a) != ' ') {\n        return 2;\n    }\n    if (value_1 == 0) {\n        return 1;\n    }\n    if (value_2 == 0) {\n        return 1;\n    }\n    if (*(char *)(params + 0xe) != '\\x01') {\n        params[10] = value_1;\n        *(short *)(params + 0xb) = (short)value_2;\n        *(short *)((int)params + 0x2e) = (short)value_2;\n        params[0xf] = 0;\n        *(undefined *)((int)params + 0x3a) = 0x22;\n        *(undefined *)(params + 0xe) = 0;\n        *(uint *)(*params + 0x14) = *(uint *)(*params + 0x14) | 1;\n        *(uint *)(*params + 0xc) = *(uint *)(*params + 0xc) | 0x120;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efa",
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "imported": true,
            "current_name": "set_param_values_08002efa"
        },
        "FUN_0800268c": {
            "renaming": {
                "FUN_0800268c": "do_nothing_0800268c"
            },
            "code": "\nvoid do_nothing_0800268c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268c",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": true,
            "current_name": "do_nothing_0800268c"
        },
        "FUN_08001aac": {
            "renaming": {
                "FUN_08001aac": "do_nothing_08001aac"
            },
            "code": "\nvoid do_nothing_08001aac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001aac",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": true,
            "current_name": "do_nothing_08001aac"
        },
        "FUN_0800377c": {
            "renaming": {
                "*(PTR_DAT_08003794 + 0x24)": "second_flag",
                "FUN_0800377c": "check_flags_and_process_0800377c",
                "*PTR_DAT_08003794": "first_flag"
            },
            "code": "void check_flags_and_process_0800377c(void)\n{\n  int* *PTR_DAT_08003794 = (int*)PTR_DAT_08003794;\n  int* *(PTR_DAT_08003794 + 0x24) = (int*)(PTR_DAT_08003794 + 0x24);\n\n  if (**PTR_DAT_08003794 != 0) {\n    process_flags_080026ce();\n  }\n  if (**(PTR_DAT_08003794 + 0x24) != 0) {\n    process_flags_080026ce();\n  }\n  return;\n}",
            "called": [
                "FUN_080026ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800377c",
            "calling": [],
            "imported": true,
            "current_name": "check_flags_and_process_0800377c"
        },
        "FUN_0800268e": {
            "renaming": {
                "param_1": "param_list",
                "puVar1": "param_ptr",
                "FUN_0800268e": "clear_flags_and_set_based_on_value_0800268e"
            },
            "code": "void clear_flags_and_set_based_on_value_0800268e(uint **param_list)\n{\n  uint *param_ptr;\n  (*param_list)[9] = 2;\n  param_ptr = *param_list;\n  if ((param_ptr[8] & 0x1111) == 0) {\n    if ((param_ptr[8] & 0x444) == 0) {\n      *param_ptr = *param_ptr & 0xfffffffe;\n    }\n  }\n  set_flags_based_on_value(param_list);\n  (*param_list)[9] = 0;\n  (*param_list + 0xe) = 0;\n  return;\n}",
            "called": [
                "FUN_0800340c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268e",
            "calling": [
                "FUN_08003414"
            ],
            "imported": true,
            "current_name": "clear_flags_and_set_based_on_value_0800268e"
        },
        "FUN_080008e2": {
            "renaming": {
                "iVar1": "combined_value",
                "iVar6": "byte_ptr",
                "cVar5": "bit_char",
                "param_1": "data_ptr",
                "param_2": "crc_data_ptr",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar3": "i",
                "uVar2": "num_bits",
                "uVar4": "bit_idx",
                "FUN_080008e2": "decode_and_calculate_crc_080008e2"
            },
            "code": "int decode_and_calculate_crc_080008e2(int data_ptr,int crc_data_ptr,undefined4 param_3,undefined4 param_4)\n{\n  int combined_value = combine_values(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),param_3,param_4,param_4);\n  uint num_bits = combine_values(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n  char bit_char = (char)((num_bits << 0x15) >> 0x18);\n  if ((num_bits & 7) != 0) {\n    bit_char++;\n  }\n  *(char *)(data_ptr + 0xb) = bit_char;\n  *(undefined *)(data_ptr + 0x49) = 3;\n  uint bit_idx = 0;\n  for (uint i = 0; (int)i < (int)num_bits; i = (i + 1) & 0xffff) {\n    if (((int)(uint)*(ushort *)(crc_data_ptr + ((i + combined_value) * 0x100000 >> 0x18) * 2) >> (i + combined_value & 0xf) & 1U) == 0) {\n      int byte_ptr = (uint)*(byte *)(data_ptr + 0x49) + data_ptr;\n      *(byte *)(byte_ptr + 9) = *(byte *)(byte_ptr + 9) & ~(byte)(1 << bit_idx);\n    }\n    else {\n      int byte_ptr = (uint)*(byte *)(data_ptr + 0x49) + data_ptr;\n      *(byte *)(byte_ptr + 9) = *(byte *)(byte_ptr + 9) | (byte)(1 << bit_idx);\n    }\n    bit_idx = (bit_idx + 1) & 0xff;\n    if (7 < bit_idx) {\n      *(char *)(data_ptr + 0x49)++;\n      bit_idx = 0;\n    }\n  }\n  if ((num_bits & 7) != 0) {\n    *(char *)(data_ptr + 0x49)++;\n  }\n  bit_char = *(char *)(data_ptr + 0x49);\n  calculate_crc_and_decode(data_ptr);\n  return (int)(char)(bit_char + 2);\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008e2",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "decode_and_calculate_crc_080008e2"
        },
        "FUN_080045c8": {
            "renaming": {
                "param_1": "ptr_input_number",
                "local_15": "reversed_output",
                "param_2": "input_base",
                "param_3": "output_base",
                "cVar1": "current_digit",
                "uVar3": "remainder",
                "uVar2": "result",
                "uVar4": "quotient",
                "pcVar5": "ptr_current_digit",
                "FUN_080045c8": "convert_base_080045c8"
            },
            "code": "undefined4 convert_base_080045c8(int *ptr_input_number, uint input_base, uint output_base)\n{\n  char current_digit;\n  undefined4 result;\n  uint quotient;\n  uint remainder;\n  char reversed_output[9];\n  reversed_output[0] = 0;\n  if ((int)output_base < 2) {\n    output_base = 10;\n  }\n  char *ptr_current_digit = reversed_output + 1;\n  do {\n    quotient = input_base / output_base;\n    remainder = (input_base & 0xff) - ((int)(short)quotient * (int)(short)output_base & 0xffU) & 0xff;\n    ptr_current_digit--;\n    current_digit = (char)remainder;\n    if (remainder < 10) {\n      current_digit += '0';\n    }\n    else {\n      current_digit += '7';\n    }\n    *ptr_current_digit = current_digit;\n    input_base = quotient;\n  } while (quotient != 0);\n  if (ptr_current_digit == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = find_end_of_string_08000218(ptr_current_digit);\n    result = (**(code **)(*ptr_input_number + 4))(ptr_input_number,ptr_current_digit,result);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000218"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c8",
            "calling": [
                "FUN_08004622"
            ],
            "imported": true,
            "current_name": "convert_base_080045c8"
        },
        "FUN_08003d18": {
            "renaming": {
                "sVar1": "short_value",
                "FUN_08003d18": "process_input_08003d18",
                "iVar2": "pointer_value",
                "iVar3": "found_value",
                "param_1": "input_value",
                "param_2": "param_value",
                "uVar4": "index"
            },
            "code": "uint process_input_08003d18(uint input_value, uint param_value)\n{\n  int pointer_value = get_value_from_pointer();\n  short short_value = *(short *)(PTR_DAT_08003dc0 + 0x9a);\n  int found_value = find_value(short_value, PTR_DAT_08003dc4);\n  if (found_value == 0) {\n    return 0;\n  }\n  uint index = 0;\n  while ((index < 10 && ((*(int *)(PTR_DAT_08003dc8 + index * 4) == 0 || (found_value = find_value(short_value, PTR_DAT_08003dc4), **(int **)(PTR_DAT_08003dc8 + index * 4) != found_value))))) {\n    index = index + 1 & 0xff;\n  }\n  if (9 < index) {\n    if ((9 < (byte)PTR_DAT_08003dcc[0x44]) && (update_values(), 9 < (byte)PTR_DAT_08003dcc[0x44])) {\n      return 0;\n    }\n    index = (uint)(byte)PTR_DAT_08003dcc[0x44];\n  }\n  do {\n    found_value = process_input_08003d18_08002dd0(*(undefined4 *)(PTR_DAT_08003dc8 + index * 4), input_value, param_value & 0xffff,1000);\n    if (found_value == 0) {\n      return param_value;\n    }\n    found_value = get_value_from_pointer();\n  } while ((uint)(found_value - pointer_value) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_08003cc8",
                "FUN_08002dd0",
                "FUN_080034f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d18",
            "calling": [
                "FUN_080040ec"
            ],
            "imported": true,
            "current_name": "process_input_08003d18"
        },
        "FUN_08004640": {
            "renaming": {
                "FUN_08004640": "combine_values_08004640",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "uint combine_values_08004640(int value1, uint value2) {\n    return value2 | value1 << 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004640",
            "calling": [
                "FUN_080007f0",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000b04",
                "FUN_08000998",
                "FUN_08000a00"
            ],
            "imported": true,
            "current_name": "combine_values_08004640"
        },
        "FUN_080034ce": {
            "renaming": {
                "FUN_080034ce": "initialize_system_and_data_080034ce",
                "initialize_data_and_flags_08000c8c": "initialize_data_and_flags",
                "initialize_system_08000de4": "initialize_system"
            },
            "code": "void initialize_system_and_data_080034ce(void)\n{\n  initialize_system();\n  initialize_data_and_flags();\n  return;\n}",
            "called": [
                "FUN_08000de4",
                "FUN_08000c8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034ce",
            "calling": [
                "FUN_08000d8e"
            ],
            "imported": true,
            "current_name": "initialize_system_and_data_080034ce"
        },
        "FUN_080047fe": {
            "renaming": {
                "FUN_080047fe": "calculate_result_and_swap_parameters_080047fe",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "code": "void calculate_result_and_swap_parameters_080047fe(undefined4 first_param, undefined4 second_param)\n{\n  calculate_result_08004844(second_param, first_param);\n  return;\n}",
            "called": [
                "FUN_08004844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047fe",
            "calling": [
                "FUN_080046b4"
            ],
            "imported": true,
            "current_name": "calculate_result_and_swap_parameters_080047fe"
        },
        "FUN_08001256": {
            "renaming": {
                "FUN_08001256": "set_flags_08001256",
                "param_1": "params",
                "uint": "uint32_t",
                "PTR_": "params[",
                "puVar1": "flag_ptr",
                "DAT_": "data_"
            },
            "code": "uint32_t set_flags_08001256(uint32_t **params)\n{\n  uint32_t *flag_ptr;\n  flag_ptr = PTR_11];\n  if ((*(char *)((int)params + 61) == '\"') && ((PTR_20] != (uint32_t *)0x0 || (*(char *)((int)params + 62) != '@')))) {\n    if ((PTR_20] == (uint32_t *)0x0) && (PTR_4] == (uint32_t *)0xc000)) {\n      **params = **params | 0x100;\n      PTR_20] = (uint32_t *)((int)PTR_20] + 1);\n    }\n    else {\n      if (*(int16_t *)((int)params + 42) == 0) {\n        **params = **params | 0x200;\n      }\n      else if (*(int16_t *)((int)params + 42) == 1) {\n        if (flag_ptr == (uint32_t *)0xffff0000) {\n          **params = **params & 0xfffffbff;\n          flag_ptr = *params;\n          if ((flag_ptr[1] & 0x800) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (PTR_12] == (uint32_t *)0x12)) {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x200;\n        }\n        else if (PTR_11] == (uint32_t *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n      }\n      else if (*(int16_t *)((int)params + 42) == 2) {\n        if (PTR_11] == (uint32_t *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x800;\n        }\n        flag_ptr = *params;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **params = **params | 0x400;\n        flag_ptr = *params;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      PTR_20] = (uint32_t *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001256",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "set_flags_08001256"
        },
        "FUN_08004884": {
            "renaming": {
                "iVar4": "function_ptrs_count",
                "iVar5": "i",
                "puVar2": "second_ptrs_start",
                "puVar3": "second_ptrs_end",
                "FUN_08004884": "execute_functions_08004884",
                "puVar1": "function_ptrs_start"
            },
            "code": "void execute_functions_08004884(void)\n{\n  undefined *function_ptrs_start = PTR_DAT_080048bc;\n  undefined *function_ptrs_end = PTR_DAT_080048c0;\n  undefined *second_ptrs_start = PTR_DAT_080048c4;\n  undefined *second_ptrs_end = PTR_DAT_080048c8;\n  int function_ptrs_count = (int)function_ptrs_end - (int)function_ptrs_start;\n  int second_ptrs_count = (int)second_ptrs_end - (int)second_ptrs_start;\n  for (int i = 0; i < function_ptrs_count / 4; i++) {\n    (**(code **)(function_ptrs_start + i * 4))();\n  }\n  do_nothing_080059f8();\n  for (int i = 0; i < second_ptrs_count / 4; i++) {\n    (**(code **)(second_ptrs_start + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_08004648",
                "FUN_080059f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": true,
            "current_name": "execute_functions_08004884"
        },
        "FUN_08004648": {
            "renaming": {
                "FUN_08004648": "initialize_system_and_data_08004648",
                "initialize_system_and_data_08000d8e": "initialize_system",
                "set_param_bits_08000e3c": "set_parameter_bits"
            },
            "code": "void initialize_system_and_data_08004648() {\n  set_parameter_bits(3);\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_08000d8e",
                "FUN_08000e3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004648",
            "calling": [
                "FUN_08004884"
            ],
            "imported": true,
            "current_name": "initialize_system_and_data_08004648"
        },
        "FUN_08000600": {
            "renaming": {
                "iVar2": "result",
                "param_1": "data",
                "FUN_08000600": "process_data_and_decode_08000600",
                "param_2": "size",
                "cVar1": "data_type",
                "PTR_DAT_08000668": "ptr"
            },
            "code": "void process_data_and_decode_08000600(int **data, unsigned int size)\n{\n  char data_type = *(char *)((int)data + 5);\n  int *PTR_DAT_08000668 = (int *)PTR_DAT_08000668;\n  if (data_type == '\\x02' || data_type == '\\x03' || data_type == '\\x01') {\n    *data = PTR_DAT_08000668;\n  }\n  else {\n    *data = PTR_DAT_08000668;\n  }\n  process_data_08004388(*data, size, 6);\n  if (1 < *(byte *)((int)data + 6)) {\n    process_data_08004110(*(byte *)((int)data + 6), 1);\n    decode_value_080041bc(*(undefined *)((int)data + 6), 0);\n  }\n  do {\n    int result = (**(code **)(**data + 0xc))();\n  } while (result >= 0);\n  *(undefined *)((int)data + 0x49) = 0;\n  *(undefined *)((int)data + 0x4a) = 0;\n  *(undefined2 *)(data + 0x15) = 0;\n  *(undefined2 *)((int)data + 0x52) = 0;\n  *(undefined2 *)(data + 0x14) = 0;\n  return;\n}",
            "called": [
                "FUN_08004388",
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000600",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": true,
            "current_name": "process_data_and_decode_08000600"
        },
        "FUN_080045be": {
            "renaming": {
                "param_1": "function_pointer",
                "FUN_080045be": "call_function_pointer_080045be"
            },
            "code": "void call_function_pointer_080045be(void* function_pointer) {\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045be",
            "calling": [],
            "imported": true,
            "current_name": "call_function_pointer_080045be"
        },
        "FUN_08004646": {
            "renaming": {
                "FUN_08004646": "do_nothing_08004646"
            },
            "code": "\nvoid do_nothing_08004646(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004646",
            "calling": [
                "FUN_08004658"
            ],
            "imported": true,
            "current_name": "do_nothing_08004646"
        },
        "FUN_08000728": {
            "renaming": {
                "bVar1": "j",
                "param_1": "buffer_start",
                "FUN_08000728": "calculate_crc16_08000728",
                "param_2": "buffer_size",
                "uVar3": "lsb",
                "uVar2": "crc",
                "uVar4": "i"
            },
            "code": "uint calculate_crc16_08000728(uint buffer_start,int buffer_size)\n{\n  uint crc = 0xffff;\n  for (uint i = 0; i < buffer_size; i++) {\n    crc ^= *(byte *)(buffer_start + i + 9);\n    for (uint j = 1; j < 9; j++) {\n      uint lsb = crc & 1;\n      crc >>= 1;\n      if (lsb != 0) {\n        crc ^= 0xa001;\n      }\n    }\n  }\n  return (crc & 0xff) << 8 | crc >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000728",
            "calling": [
                "FUN_0800076c"
            ],
            "imported": true,
            "current_name": "calculate_crc16_08000728"
        },
        "FUN_0800354a": {
            "renaming": {
                "uVar1": "value",
                "find_value_in_array_0800352e": "search_array",
                "param_1": "input",
                "FUN_0800354a": "find_value_0800354a"
            },
            "code": "int find_value_0800354a(int input)\n{\n  int value;\n  if (input == -1) {\n    return -1;\n  }\n  value = search_array();\n  return value;\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800354a",
            "calling": [
                "FUN_08003414",
                "FUN_0800339c",
                "FUN_08003380",
                "FUN_08003978"
            ],
            "imported": true,
            "current_name": "find_value_0800354a"
        },
        "FUN_0800124a": {
            "renaming": {
                "param_1": "param_array",
                "FUN_0800124a": "set_param_value_0800124a"
            },
            "code": "void set_param_value_0800124a(int *param_array){\n    uint *param_ptr = (uint *)(param_array + 0x10);\n    uint param_value = param_array[0x11] & 0xff;\n    *param_ptr = param_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800124a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "set_param_value_0800124a"
        },
        "FUN_08004094": {
            "renaming": {
                "iVar1": "current_offset",
                "puVar2": "address",
                "param_1": "offset",
                "FUN_08004094": "find_offset_08004094"
            },
            "code": "int find_offset_08004094(int offset)\n{\n  int current_offset = *(int *)PTR_DAT_080040c4;\n  undefined *address = (undefined *)(offset + current_offset);\n  if (address <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_080040c4 = address;\n    return current_offset;\n  }\n  *(undefined4 *)PTR_DAT_080040cc = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004094",
            "calling": [
                "FUN_0800500c"
            ],
            "imported": true,
            "current_name": "find_offset_08004094"
        },
        "FUN_080033c8": {
            "renaming": {
                "DAT_080033d4": "address_base",
                "PTR_080033d4": "pointer_to_address_base",
                "FUN_080033c8": "clear_bit_in_address_080033c8"
            },
            "code": "void clear_bit_in_address_080033c8(void)\n{\n  uint32_t* address = (uint32_t*)(DAT_080033d4 + 0x40);\n  uint32_t mask = 0xdfffffff;\n  *address = *address & mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033c8",
            "calling": [
                "FUN_08000f56"
            ],
            "imported": true,
            "current_name": "clear_bit_in_address_080033c8"
        },
        "FUN_080031fc": {
            "renaming": {
                "FUN_080031fc": "set_bit_080031fc",
                "DAT_0800336c": "bit_6_return_value",
                "DAT_0800337c": "bit_10_return_value",
                "uVar1": "return_value",
                "DAT_0800335c": "bit_2_return_value",
                "DAT_08003378": "bit_9_return_value",
                "DAT_08003358": "bit_1_return_value",
                "param_1": "bit_index",
                "DAT_08003368": "bit_5_return_value",
                "DAT_08003370": "bit_7_return_value",
                "DAT_08003350": "data_ptr",
                "DAT_08003360": "bit_3_return_value",
                "DAT_08003374": "bit_8_return_value",
                "DAT_08003354": "bit_0_return_value",
                "DAT_08003364": "bit_4_return_value"
            },
            "code": "uint32_t set_bit_080031fc(uint32_t bit_index)\n{\n  uint32_t* DAT_08003350 = (uint32_t*)DAT_08003350;\n  uint32_t bit_mask = 1 << bit_index;\n  *DAT_08003350 |= bit_mask;\n  switch(bit_index) {\n  case 0:\n    return DAT_08003354;\n  case 1:\n    return DAT_08003358;\n  case 2:\n    return DAT_0800335c;\n  case 3:\n    return DAT_08003360;\n  case 4:\n    return DAT_08003364;\n  case 5:\n    return DAT_08003368;\n  case 6:\n    return DAT_0800336c;\n  case 7:\n    return DAT_08003370;\n  case 8:\n    return DAT_08003374;\n  case 9:\n    return DAT_08003378;\n  case 10:\n    return DAT_0800337c;\n  default:\n    return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031fc",
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "imported": true,
            "current_name": "set_bit_080031fc"
        },
        "FUN_08000690": {
            "renaming": {
                "FUN_08000690": "checkParamAndSetData_08000690",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "void checkParamAndSetData_08000690(int param1, int param2, undefined4 param3, undefined4 param4) {\n  if (param1 == 1) {\n    if (param2 == 0xffff) {\n      set_data_and_return_value_08000682(PTR_DAT_080006b0, 1, 0, 0, param4);\n    }\n  }\n}",
            "called": [
                "FUN_08000682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000690",
            "calling": [],
            "imported": true,
            "current_name": "checkParamAndSetData_08000690"
        },
        "FUN_080054fc": {
            "renaming": {
                "iVar2": "allocated_block",
                "uVar1": "memory_protection_flag",
                "FUN_080054fc": "allocate_and_initialize_block_080054fc",
                "param_1": "process_id",
                "local_18": "block_size",
                "param_2": "block_info",
                "local_14": "original_block_info"
            },
            "code": "void allocate_and_initialize_block_080054fc(int process_id, int *block_info){\n  ushort memory_protection_flag;\n  int block_size;\n  int *original_block_info;\n  \n  if (-1 < (int)((uint)*(ushort *)(block_info + 3) << 0x1e))) {\n    original_block_info = block_info;\n    memory_protection_flag = check_memory_protection(process_id, block_info, &block_size, &original_block_info);\n    int allocated_block = allocate_memory_block(process_id, block_size);\n    if (allocated_block != 0) {\n      *(undefined **)(process_id + 0x28) = PTR_LAB_08005320_1_08005578;\n      *block_info = allocated_block;\n      *(ushort *)(block_info + 3) = *(ushort *)(block_info + 3) | 0x80;\n      block_info[5] = block_size;\n      block_info[4] = allocated_block;\n      if ((original_block_info != (int *)0x0) && (return_if_error(process_id, (int)*(short *)((int)block_info + 0xe)) != 0)) {\n        *(ushort *)(block_info + 3) = *(ushort *)(block_info + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(block_info + 3) = memory_protection_flag | *(ushort *)(block_info + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(block_info + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(block_info + 3) = *(ushort *)(block_info + 3) & 0xfffc | 2;\n  }\n  *block_info = (int)block_info + 0x47;\n  block_info[4] = (int)block_info + 0x47;\n  block_info[5] = 1;\n  return;\n}",
            "called": [
                "FUN_080054b4",
                "FUN_08004978",
                "FUN_080056f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054fc",
            "calling": [
                "FUN_080050d0"
            ],
            "imported": true,
            "current_name": "allocate_and_initialize_block_080054fc"
        },
        "FUN_08001420": {
            "renaming": {
                "FUN_08001420": "increment_and_store_byte_08001420",
                "param_1": "data",
                "counter": "counter",
                "target": "target",
                "pbVar1": "byte_data",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ increment_and_store_byte_08001420(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_9DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_9DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_-DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001420",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "increment_and_store_byte_08001420"
        },
        "FUN_080026ca": {
            "renaming": {
                "FUN_080026ca": "do_nothing_080026ca"
            },
            "code": "\nvoid do_nothing_080026ca(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ca",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": true,
            "current_name": "do_nothing_080026ca"
        },
        "FUN_08000de4": {
            "renaming": {
                "*puVar1": "*system_status_register",
                "FUN_08000de4": "initialize_system_08000de4",
                "*DAT_08000e14": "*PTR_SYSTEM_STATUS_REGISTER",
                "check_and_store_data_08000d98": "check_and_store_data",
                "do_nothing_08000d96": "do_nothing",
                "DAT_08000e14": "PTR_SYSTEM_STATUS_REGISTER",
                "puVar1": "system_status_register",
                "set_param_bits_08000e3c": "set_parameter_bits"
            },
            "code": "int initialize_system_08000de4(void)\n{\n  uint32_t *system_status_register;\n  system_status_register = PTR_DAT_08000e14;\n  *PTR_DAT_08000e14 |= SYSTEM_STATUS_REGISTER_BIT_9;\n  *system_status_register |= SYSTEM_STATUS_REGISTER_BIT_10;\n  *system_status_register |= SYSTEM_STATUS_REGISTER_BIT_8;\n  set_parameter_bits(PARAMETER_3_BIT);\n  check_and_store_data(DATA_MASK);\n  do_nothing_08000d96();\n  return 0;\n}",
            "called": [
                "FUN_08000e3c",
                "FUN_08000d96",
                "FUN_08000d98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000de4",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": true,
            "current_name": "initialize_system_08000de4"
        },
        "FUN_080026ce": {
            "renaming": {
                "iVar1": "flags_ptr",
                "param_1": "param_flags",
                "FUN_080026ce": "process_flags_080026ce"
            },
            "code": "void process_flags_080026ce(int *param_flags)\n{\n  int flags_ptr = *param_flags;\n  \n  if (((*(uint *)(flags_ptr + 0x10) & 2) != 0) && ((*(uint *)(flags_ptr + 0xc) & 2) != 0)) {\n    *(undefined4 *)(flags_ptr + 0x10) = 0xfffffffd;\n    *(undefined *)(param_flags + 6) = 1;\n    if ((*(uint *)(*param_flags + 0x18) & 3) == 0) {\n      execute_callback_08003754();\n      do_nothing_080026ca(param_flags);\n    }\n    else {\n      do_nothing_080026c8();\n    }\n    *(undefined *)(param_flags + 6) = 0;\n  }\n  flags_ptr = *param_flags;\n  if (((*(uint *)(flags_ptr + 0x10) & 4) != 0) && ((*(uint *)(flags_ptr + 0xc) & 4) != 0)) {\n    *(undefined4 *)(flags_ptr + 0x10) = 0xfffffffb;\n    *(undefined *)(param_flags + 6) = 2;\n    if ((*(uint *)(*param_flags + 0x18) & 0x300) == 0) {\n      execute_callback_08003754(param_flags);\n      do_nothing_080026ca(param_flags);\n    }\n    else {\n      do_nothing_080026c8(param_flags);\n    }\n    *(undefined *)(param_flags + 6) = 0;\n  }\n  flags_ptr = *param_flags;\n  if (((*(uint *)(flags_ptr + 0x10) & 8) != 0) && ((*(uint *)(flags_ptr + 0xc) & 8) != 0)) {\n    *(undefined4 *)(flags_ptr + 0x10) = 0xfffffff7;\n    *(undefined *)(param_flags + 6) = 4;\n    if ((*(uint *)(*param_flags + 0x1c) & 3) == 0) {\n      execute_callback_08003754(param_flags);\n      do_nothing_080026ca(param_flags);\n    }\n    else {\n      do_nothing_080026c8(param_flags);\n    }\n    *(undefined *)(param_flags + 6) = 0;\n  }\n  flags_ptr = *param_flags;\n  if (((*(uint *)(flags_ptr + 0x10) & 0x10) != 0) && ((*(uint *)(flags_ptr + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(flags_ptr + 0x10) = 0xffffffef;\n    *(undefined *)(param_flags + 6) = 8;\n    if ((*(uint *)(*param_flags + 0x1c) & 0x300) == 0) {\n      execute_callback_08003754(param_flags);\n      do_nothing_080026ca(param_flags);\n    }\n    else {\n      do_nothing_080026c8(param_flags);\n    }\n    *(undefined *)(param_flags + 6) = 0;\n  }\n  flags_ptr = *param_flags;\n  if (((*(uint *)(flags_ptr + 0x10) & 1) != 0) && ((*(uint *)(flags_ptr + 0xc) & 1) != 0)) {\n    *(undefined4 *)(flags_ptr + 0x10) = 0xfffffffe;\n    execute_function_if_exists_0800376e(param_flags);\n  }\n  flags_ptr = *param_flags;\n  if (((*(uint *)(flags_ptr + 0x10) & 0x80) != 0) && ((*(uint *)(flags_ptr + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(flags_ptr + 0x10) = 0xffffff7f;\n    do_nothing_0800293e(param_flags);\n  }\n  flags_ptr = *param_flags;\n  if (((*(uint *)(flags_ptr + 0x10) & 0x40) != 0) && ((*(uint *)(flags_ptr + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(flags_ptr + 0x10) = 0xffffffbf;\n    do_nothing_080026cc(param_flags);\n  }\n  flags_ptr = *param_flags;\n  if (((*(uint *)(flags_ptr + 0x10) & 0x20) != 0) && ((*(uint *)(flags_ptr + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(flags_ptr + 0x10) = 0xffffffdf;\n    do_nothing_0800293c(param_flags);\n  }\n  return;\n}",
            "called": [
                "FUN_080026c8",
                "FUN_080026cc",
                "FUN_0800293c",
                "FUN_080026ca",
                "FUN_0800293e",
                "FUN_08003754",
                "FUN_0800376e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ce",
            "calling": [
                "FUN_0800377c"
            ],
            "imported": true,
            "current_name": "process_flags_080026ce"
        },
        "FUN_080026cc": {
            "renaming": {
                "FUN_080026cc": "do_nothing_080026cc"
            },
            "code": "\nvoid do_nothing_080026cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026cc",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": true,
            "current_name": "do_nothing_080026cc"
        },
        "FUN_08000218": {
            "renaming": {
                "pcVar2": "current_char",
                "pcVar3": "current_char_pointer",
                "param_1": "string",
                "FUN_08000218": "find_end_of_string_08000218",
                "cVar1": "current_char_value"
            },
            "code": "char* find_end_of_string_08000218(char* string) {\n  char* current_char = string;\n  while (*current_char != '\\0') {\n    current_char++;\n  }\n  return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000218",
            "calling": [
                "FUN_080045c8"
            ],
            "imported": true,
            "current_name": "find_end_of_string_08000218"
        },
        "FUN_0800339c": {
            "renaming": {
                "iVar1": "value_index",
                "param_1": "value",
                "FUN_0800339c": "get_value_type_0800339c",
                "param_2": "data_ptr",
                "param_3": "num_values",
                "param_4": "min_value",
                "uVar2": "value_type"
            },
            "code": "int get_value_type_0800339c(uint32_t value, const uint32_t* data_ptr, uint32_t num_values, uint32_t min_value, uint32_t max_value) {\n  int value_index = find_value_index(value, data_ptr, num_values, min_value, max_value);\n  uint32_t value_type = (uint32_t)(value_index << 12) >> 27;\n  if (value_type == 3) {\n    return 8;\n  }\n  if (value_type != 4) {\n    if (value_type != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 12;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800339c",
            "calling": [
                "FUN_08003414"
            ],
            "imported": true,
            "current_name": "get_value_type_0800339c"
        },
        "FUN_0800557e": {
            "renaming": {
                "FUN_0800557e": "do_nothing_0800557e"
            },
            "code": "\nvoid do_nothing_0800557e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557e",
            "calling": [
                "FUN_08004978",
                "FUN_080048dc"
            ],
            "imported": true,
            "current_name": "do_nothing_0800557e"
        },
        "FUN_08000e60": {
            "renaming": {
                "uVar1": "shift_amount",
                "param_1": "bit_offset",
                "DAT_08000ec0": "data_pointer_2",
                "masked_data": "masked_data",
                "param_2": "bit_mask",
                "param_3": "data",
                "FUN_08000e60": "decode_and_store_bits_08000e60",
                "uVar2": "bits_to_use",
                "DAT_08000ebc": "data_pointer_1"
            },
            "code": "void decode_and_store_bits_08000e60(uint bit_offset, uint bit_mask, uint data){\n  uint shift_amount = (uint)(*(int *)(DAT_08000ebc + 0xc) << 0x15) >> 0x1d;\n  uint bits_to_use = 7 - shift_amount;\n  if (bits_to_use > 3) {\n    bits_to_use = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  uint masked_data = (bit_mask & (1 << (bits_to_use & 0xff)) - 1U) << (shift_amount & 0xff) |\n          (1 << (shift_amount & 0xff)) - 1U & data;\n  if ((int)bit_offset < 0) {\n    *(char *)(DAT_08000ec0 + (bit_offset & 0xf)) = (char)(masked_data << 4);\n  }\n  else {\n    *(char *)(bit_offset + 0xe000e400) = (char)(masked_data << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e60",
            "calling": [
                "FUN_08003eac",
                "FUN_08000c8c",
                "FUN_08000d98",
                "FUN_08003e54"
            ],
            "imported": true,
            "current_name": "decode_and_store_bits_08000e60"
        },
        "FUN_0800557c": {
            "renaming": {
                "FUN_0800557c": "do_nothing_0800557c"
            },
            "code": "\nvoid do_nothing_0800557c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557c",
            "calling": [
                "FUN_08004978",
                "FUN_080048dc"
            ],
            "imported": true,
            "current_name": "do_nothing_0800557c"
        },
        "FUN_0800165a": {
            "renaming": {
                "uVar1": "input_value",
                "param_1": "input_data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "FUN_0800165a": "process_input_0800165a",
                "uVar2": "input_flags"
            },
            "code": "int process_input_0800165a(int *input_data, int param2, int param3, int param4)\n{\n  int input_flags = *(uint *)(*input_data + 0x18);\n  int input_value;\n  if ((input_flags & 0x80) == 0) {\n    input_value = *(int *)(input_data + 3);\n  }\n  else {\n    input_value = *(int *)(input_data + 6);\n  }\n  process_input_0800165a_08003880(input_data, (input_flags & 4) == 0, input_value, input_flags, param4);\n  return 0;\n}",
            "called": [
                "FUN_08003880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800165a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "process_input_0800165a"
        },
        "FUN_08000b04": {
            "renaming": {
                "bVar2": "num_bytes",
                "bVar1": "num_values",
                "param_1": "input_address",
                "param_2": "output_address",
                "cVar3": "num",
                "uVar5": "i",
                "uVar4": "combined_value",
                "FUN_08000b04": "combine_values_and_store_08000b04"
            },
            "code": "int combine_values_and_store_08000b04(int input_address, int output_address)\n{\n  byte num_values = *(byte *)(input_address + 0xc);\n  byte num_bytes = *(byte *)(input_address + 0xe);\n  *(undefined *)(input_address + 0xd) = 0;\n  *(byte *)(input_address + 0xe) = num_bytes;\n  *(undefined *)(input_address + 0x49) = 6;\n  for (uint i = 0; i < num_bytes; i++) {\n    undefined2 combined_value = combine_values_08004640(*(undefined *)(i * 2 + input_address + 0x10),\n                         *(undefined *)(input_address + (i + 4) * 2 + 9));\n    *(undefined2 *)(output_address + (num_values + i) * 2) = combined_value;\n  }\n  char num = *(char *)(input_address + 0x49);\n  calculate_crc_and_decode_0800076c(input_address);\n  return (int)(char)(num + '\\x02');\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b04",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "combine_values_and_store_08000b04"
        },
        "FUN_0800262c": {
            "renaming": {
                "param_1": "ptr_param1",
                "do_nothing_0800268c": "do_nothing_0800268c",
                "PTR_08002688": "DAT_08002688",
                "execute_function_if_not_null_08003594": "execute_function_if_not_null_08003594",
                "FUN_0800262c": "check_and_execute_actions_0800262c"
            },
            "code": "void check_and_execute_actions_0800262c(int *ptr_param1) {\n  uint ptr_param1_plus_0xc = *(uint *)(*ptr_param1 + 0xc);\n  uint ptr_param1_plus_0x8 = *(uint *)(*ptr_param1 + 0x8);\n\n  if ((ptr_param1_plus_0xc & 0x100) && (ptr_param1_plus_0x8 & 0x1000)) {\n    execute_function_if_not_null_08003594();\n    *(uint *)(*ptr_param1 + 0xc) = (ptr_param1_plus_0xc & 0xff) | 0xfffffe7f;\n  }\n\n  if ((ptr_param1_plus_0xc & 0x200) && (ptr_param1_plus_0x8 & 0x2000)) {\n    do_nothing_0800268c(ptr_param1);\n    *(uint *)(*ptr_param1 + 0xc) = (ptr_param1_plus_0xc & 0xff) | 0xfffffd7f;\n  }\n\n  *(undefined4 *)(PTR_08002688 + 0x14) = 0x20000;\n  *(undefined *)((int)ptr_param1 + 0x1d) = 1;\n}\n",
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800262c",
            "calling": [],
            "imported": true,
            "current_name": "check_and_execute_actions_0800262c"
        },
        "FUN_08004388": {
            "renaming": {
                "ptr_1": "ptr_data_size",
                "bVar1": "flag_bits",
                "ptr_2": "ptr_flags",
                "ptr_3": "ptr_input_data",
                "ptr_4": "ptr_jump_table_size",
                "FUN_08004388": "process_data_08004388",
                "iVar2": "num_bits_set",
                "i": "jump_table_index",
                "param_1": "data",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "param_2": "data_size",
                "param_3": "flags"
            },
            "code": "void process_data_08004388(int data, int data_size, byte flags) {\n  int num_bits_set = 0;\n  int jump_table_index = 0;\n  uint jump_table_size = 0x8004432;\n  int i = 0;\n  int* ptr_1 = (int*)(data + 0x11c);\n  byte* ptr_2 = (byte*)(data + 0x144);\n  *ptr_1 = data_size;\n  *ptr_2 = flags;\n  byte flag_bits = flags & 7;\n  if (flag_bits == 4) {\n    num_bits_set = 7;\n  }\n  else if (flag_bits == 6) {\n    num_bits_set = 8;\n  }\n  else if (flag_bits == 2) {\n    num_bits_set = 6;\n  }\n  if ((flags & 0x30) == 0x30) {\n    *(int*)(data + 0x128) = 0x600;\n    num_bits_set++;\n  }\n  else if ((flags & 0x20) == 0) {\n    *(int*)(data + 0x128) = 0;\n  }\n  else {\n    *(int*)(data + 0x128) = 0x400;\n    num_bits_set++;\n  }\n  if ((flags & 8) == 0) {\n    *(int*)(data + 0x124) = 0;\n  }\n  else {\n    *(int*)(data + 0x124) = 0x2000;\n  }\n  if (num_bits_set == 8) {\n    *(int*)(data + 0x120) = 0;\n  }\n  else if (num_bits_set == 9) {\n    *(int*)(data + 0x120) = 0x1000;\n  }\n  else {\n    num_bits_set = 0;\n  }\n  if (num_bits_set != 0) {\n    void* ptr_3 = (void*)(data + 0xd4);\n    FUNC_08003978(ptr_3);\n    process_input_08003e54(ptr_3, uRam08004434);\n    return;\n  }\n  process_data_08004388_and_update_results_08004808(uRam08004440, 299, uRam0800443c);\n  if (jump_table_size < 0x60) {\n    int* ptr_4 = (int*)(PTR_DAT_0800445c + jump_table_size * 2);\n    jump_table_index = *ptr_4;\n  }\n  else {\n    jump_table_index = 0xffff;\n  }\n  code* jump_table = (code*)jump_table_index;\n  jump_table();\n}",
            "called": [
                "FUN_08004808",
                "FUN_08003978",
                "FUN_08003e54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004388",
            "calling": [
                "FUN_08000600"
            ],
            "imported": true,
            "current_name": "process_data_08004388"
        },
        "FUN_080051ac": {
            "renaming": {
                "uVar10": "input_flags",
                "bVar11": "is_node_inserted",
                "uVar12": "wait_result",
                "iVar2": "response_size",
                "FUN_080051ac": "process_input_and_wait_for_response_080051ac",
                "piVar4": "node_ptr",
                "iVar7": "node_size",
                "piVar3": "input_data_ptr",
                "iVar9": "callback_arg",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "puVar1": "response_ptr",
                "uVar5": "response_code",
                "uVar6": "response_flags",
                "pcVar8": "callback_func_ptr"
            },
            "code": "void process_input_and_wait_for_response_080051ac(){\n  uint *response_ptr;\n  int response_size;\n  int *input_data_ptr;\n  int *node_ptr;\n  uint response_code;\n  ushort response_flags;\n  int node_size;\n  code *callback_func_ptr;\n  int callback_arg;\n  uint input_flags;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool is_node_inserted;\n  undefined8 wait_result;\n  \n  process_input_080055d0(6);\n  UNRECOVERED_JUMPTABLE_00 = (code *)0x80051bb;\n  wait_result = wait_forever_080040f8(1);\n  input_data_ptr = (int *)((ulonglong)wait_result >> 0x20);\n  response_ptr = (uint *)wait_result;\n  response_flags = *(ushort *)(input_data_ptr + 3);\n  response_code = (uint)response_flags;\n  if ((int)(response_code << 0x1c) < 0) {\n    response_size = input_data_ptr[4];\n    if (response_size != 0) {\n      node_size = response_code << 0x1e;\n      is_node_inserted = node_size == 0;\n      callback_arg = *input_data_ptr;\n      if (is_node_inserted) {\n        node_size = input_data_ptr[5];\n      }\n      *input_data_ptr = response_size;\n      if (!is_node_inserted) {\n        node_size = 0;\n      }\n      input_data_ptr[2] = node_size;\n      for (callback_arg = callback_arg - response_size; 0 < callback_arg; callback_arg = callback_arg - node_size) {\n        node_size = (*(code *)input_data_ptr[10])(response_ptr,input_data_ptr[8],response_size,callback_arg);\n        if (node_size < 1) {\n          response_flags = *(ushort *)(input_data_ptr + 3);\n          goto LAB_080052b2;\n        }\n        response_size = response_size + node_size;\n      }\n    }\n  }\n  else if (((0 < input_data_ptr[1]) || (0 < input_data_ptr[0x10])) &&\n          (callback_func_ptr = (code *)input_data_ptr[0xb], callback_func_ptr != (code *)0x0)) {\n    input_flags = *response_ptr;\n    *response_ptr = 0;\n    if ((response_flags & 0x1000) == 0) {\n      response_size = (*callback_func_ptr)(response_ptr,input_data_ptr[8],response_code & 0x1000,1);\n      if ((response_size == -1) && (response_code = *response_ptr, response_code != 0)) {\n        if ((response_code != 0x1d) && (response_code != 0x16)) {\n          *(ushort *)(input_data_ptr + 3) = *(ushort *)(input_data_ptr + 3) | 0x40;\n          (*UNRECOVERED_JUMPTABLE_00)();\n          return;\n        }\n        *response_ptr = input_flags;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      response_size = input_data_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(input_data_ptr + 3) << 0x1d) < 0) &&\n       (response_size = response_size - input_data_ptr[1], input_data_ptr[0xd] != 0)) {\n      response_size = response_size - input_data_ptr[0x10];\n    }\n    response_size = (*(code *)input_data_ptr[0xb])(response_ptr,input_data_ptr[8],response_size,0);\n    response_flags = *(ushort *)(input_data_ptr + 3);\n    if ((response_size == -1) &&\n       ((0x1d < *response_ptr || (-1 < (int)((DAT_080052c8 >> (*response_ptr & 0xff)) << 0x1f)))) {\n      *(ushort *)(input_data_ptr + 3) = response_flags | 0x40;\n      (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    input_data_ptr[1] = 0;\n    *input_data_ptr = input_data_ptr[4];\n    if (((int)((uint)response_flags << 0x13) < 0) && ((response_size != -1 || (*response_ptr == 0)))) {\n      input_data_ptr[0x15] = response_size;\n    }\n    node_ptr = (int *)input_data_ptr[0xd];\n    *response_ptr = input_flags;\n    if (node_ptr != (int *)0x0) {\n      if (node_ptr != input_data_ptr + 0x11) {\n        insert_new_node_080048dc(response_ptr);\n      }\n      input_data_ptr[0xd] = 0;\n      (*UNRECOVERED_JUMPTABLE_00)();\n      return;\n    }\n  }\nLAB_080051d6:\n  (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}",
            "called": [
                "FUN_080048dc",
                "FUN_080040f8",
                "FUN_080055d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051ac",
            "calling": [
                "FUN_08005760",
                "FUN_08004808"
            ],
            "imported": true,
            "current_name": "process_input_and_wait_for_response_080051ac"
        },
        "FUN_080052cc": {
            "renaming": {
                "bVar10": "is_flag_set",
                "iVar2": "current_param",
                "FUN_080052cc": "decode_and_process_080052cc",
                "uVar1": "result",
                "iVar6": "bytes_processed",
                "iVar8": "bytes_left",
                "param_1": "buffer",
                "piVar3": "jump_table_entry",
                "UNRECOVERED_JUMPTABLE_00": "jump_table_entry",
                "unaff_r5": "process_function",
                "unaff_r4": "step_size",
                "param_2": "params",
                "pcVar7": "error_function",
                "uVar5": "flags",
                "uVar4": "current_param_unsigned"
            },
            "code": "uint32_t decode_and_process_080052cc(uint32_t *buffer, int32_t *params) {\n  uint32_t result;\n  int32_t current_param;\n  uint32_t current_param_unsigned;\n  uint16_t flags;\n  bool is_flag_set;\n  int32_t bytes_processed;\n  int32_t bytes_left;\n  int32_t step_size;\n  void (*process_function)(uint32_t *, int32_t, int32_t, int32_t, uint32_t, uint32_t);\n  void (*error_function)(uint32_t);\n  void *jump_table_entry;\n  \n  if (params[4] != 0) {\n    if ((buffer != NULL) && (buffer[6] == 0)) {\n      setup_buffer(buffer);\n    }\n    if (params == (int32_t *)PARAM_1) {\n      params = (int32_t *)buffer[1];\n    }\n    else if (params == (int32_t *)PARAM_2) {\n      params = (int32_t *)buffer[2];\n    }\n    else if (params == (int32_t *)PARAM_3) {\n      params = (int32_t *)buffer[3];\n    }\n    flags = *(uint16_t *)(params + 3);\n    if (flags != 0) {\n      is_flag_set = (flags & 0x8000) != 0;\n      if (is_flag_set) {\n        current_param = params[21];\n      }\n      else {\n        current_param_unsigned = (uint32_t)flags;\n        if ((int32_t)(current_param_unsigned << 0x1c) < 0) {\n          bytes_processed = params[4];\n          if (bytes_processed != 0) {\n            step_size = is_flag_set ? params[22] : params[5];\n            params[0] = bytes_processed;\n            params[2] = is_flag_set ? 0 : params[22];\n            bytes_left = buffer[0] - bytes_processed;\n            while (bytes_left > 0) {\n              process_function = (void (*)(uint32_t *, int32_t, int32_t, int32_t, uint32_t, uint32_t))(params[10]);\n              bytes_processed = process_function(buffer, params[8], params[4], bytes_left, PARAM_4, PARAM_5);\n              if (bytes_processed < 1) {\n                flags = *(uint16_t *)(params + 3);\n                goto LAB_080052b2;\n              }\n              bytes_left -= bytes_processed;\n              params[4] += bytes_processed;\n            }\n          }\n        }\n        else if (((params[1] > 0) || (params[16] > 0)) && ((jump_table_entry = (void *)(params[11])), (jump_table_entry != NULL))) {\n          buffer[0] = 0;\n          if ((flags & 0x1000) == 0) {\n            process_function = (void (*)(uint32_t *, int32_t, int32_t, int32_t, uint32_t, uint32_t))(jump_table_entry);\n            bytes_processed = process_function(buffer, params[8], flags & 0x1000, 1, 0, 0);\n            if ((bytes_processed == -1) && (buffer[0] != 0)) {\n              current_param = buffer[0];\n              if ((current_param != 0x1d) && (current_param != 0x16)) {\n                flags = *(uint16_t *)(params + 3);\n                goto LAB_080052bc;\n              }\n              buffer[0] = current_param_unsigned;\n              goto LAB_080051d6;\n            }\n          }\n          else {\n            current_param = params[21];\n          }\n          if (((int32_t)(current_param_unsigned << 0x1d) < 0) && ((bytes_processed = current_param - params[1]), (params[13] != 0))) {\n            bytes_processed -= params[16];\n          }\n          process_function = (void (*)(uint32_t *, int32_t, int32_t, int32_t, uint32_t, uint32_t))(jump_table_entry);\n          bytes_processed = process_function(buffer, params[8], bytes_processed, 0, 0, 0);\n          flags = *(uint16_t *)(params + 3);\n          if ((bytes_processed == -1) && ((buffer[0] > 0x1d) || (buffer[0] == 0 && (error_function = (void (*)(uint32_t))(params[14])) != NULL))) {\n            goto LAB_080052b2;\n          }\n          params[1] = 0;\n          params[0] = params[4];\n          if (((int32_t)(flags << 0x13) < 0) && ((bytes_processed != -1) || (buffer[0] == 0))) {\n            params[21] = bytes_processed;\n          }\n          error_function = (void (*)(uint32_t))(params[13]);\n          buffer[0] = current_param_unsigned;\n          if (error_function != NULL) {\n            if (error_function != (void (*)(uint32_t))(&params[17])) {\n              insert_new_node(buffer);\n            }\n            params[13] = 0;\n            jump_table_entry = (void *)params[12];\n            if (jump_table_entry != NULL) {\n              jump_table_entry();\n            }\n            return 0;\n          }\n        }\n      }\nLAB_080051d6:\n      jump_table_entry = (void *)params[9];\n      if (jump_table_entry != NULL) {\n        jump_table_entry(0);\n      }\n      return 0;\n    }\n  }\n  return 0;\n}\n",
            "called": [
                "FUN_080053a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052cc",
            "calling": [
                "FUN_08004a34"
            ],
            "imported": true,
            "current_name": "decode_and_process_080052cc",
            "code_backup": "\nundefined4 FUN_080052cc(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_080053a0();\n    }\n    if (param_2 == (int *)PTR_DAT_08005314) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08005318) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_0800531c) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 == 0;\n          iVar8 = *param_2;\n          if (bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          if (!bVar10) {\n            iVar6 = 0;\n          }\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_080052b2;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_080052c8 >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            insert_new_node_080048dc(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08002eb2": {
            "renaming": {
                "*(short *)(param_1 + 9)": "input_array[9]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)",
                "param_1[8]": "input_array[8]",
                "FUN_08002eb2": "validate_input_08002eb2",
                "param_1": "input_array",
                "*(undefined *)((int)param_1 + 0x39)": "input_array[9]",
                "param_1[0xf]": "input_array[15]",
                "param_2": "array_length",
                "param_3": "array_sum",
                "*(char *)((int)param_1 + 0x39)": "input_array[9]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(short *)((int)param_1 + 0x26)": "input_array[11]"
            },
            "code": "int validate_input_08002eb2(int *input_array, int array_length, int array_sum)\n{\n    if (input_array[9] != ' ')\n    {\n        return 2;\n    }\n    if (array_length == 0)\n    {\n        return 1;\n    }\n    if (array_sum == 0)\n    {\n        return 1;\n    }\n    if (input_array[14] != 1)\n    {\n        input_array[8] = array_length;\n        input_array[9] = (short)array_sum;\n        input_array[11] = (short)array_sum;\n        input_array[15] = 0;\n        input_array[9] = 0x21;\n        input_array[14] = 0;\n        *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002eb2",
            "calling": [
                "FUN_08003eac",
                "FUN_08003f48"
            ],
            "imported": true,
            "current_name": "validate_input_08002eb2"
        },
        "FUN_08000d3c": {
            "renaming": {
                "iVar1": "index",
                "puVar2": "data_ptr",
                "FUN_08000d3c": "initialize_and_execute_08000d3c",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void initialize_and_execute_08000d3c(void)\n{\n  int index;\n  undefined4 *data_ptr;\n  code *jump_table;\n  for (index = 0; PTR_DAT_08000d7c + index < PTR_DAT_08000d80; index += 4) {\n    *(undefined4 *)(PTR_DAT_08000d7c + index) = *(undefined4 *)(DAT_08000d78 + index);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_08000d84; data_ptr < PTR_DAT_08000d88; data_ptr++) {\n    *data_ptr = 0;\n  }\n  initialize_data();\n  execute_functions();\n  jump_table = (code *)0x8000d72;\n  process_interrupt_and_data();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08004658",
                "FUN_08004884",
                "FUN_080035bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d3c",
            "calling": [],
            "imported": true,
            "current_name": "initialize_and_execute_08000d3c"
        },
        "FUN_08003978": {
            "renaming": {
                "FUN_08003978": "FUNC_08003978"
            },
            "code": "\nvoid FUNC_08003978(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  undefined4 uVar10;\n  uint uVar11;\n  uint local_2c;\n  uint local_28;\n  uint local_24;\n  undefined4 local_20;\n  uint local_1c;\n  \n  if (param_1 != (int *)0x0) {\n    iVar7 = find_value_080034f4((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n    iVar8 = find_value_080034f4((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n    if ((iVar8 == 0) || (iVar7 == 0)) {\n      execute_function_08004fdc(PTR_s_ERROR__at_least_one_UART_pin_has_08003c84,iVar8);\n    }\n    else {\n      iVar9 = find_non_zero_08003582(iVar7);\n      *param_1 = iVar9;\n      iVar6 = DAT_08003c7c;\n      iVar5 = DAT_08003c78;\n      iVar4 = DAT_08003c74;\n      iVar3 = DAT_08003c70;\n      iVar2 = DAT_08003c6c;\n      iVar1 = DAT_08003c68;\n      iVar8 = DAT_08003c64;\n      iVar7 = DAT_08003c60;\n      if (iVar9 == 0) {\n        execute_function_08004fdc(PTR_s_ERROR__U_S_ART_pins_mismatch_08003c88);\n      }\n      else {\n        if (iVar9 == DAT_08003c60) {\n          *(uint *)(DAT_08003c60 + 0x12824) = *(uint *)(DAT_08003c60 + 0x12824) | 0x10;\n          *(uint *)(iVar7 + 0x12824) = *(uint *)(iVar7 + 0x12824) & 0xffffffef;\n          *(uint *)(iVar7 + 0x12844) = *(uint *)(iVar7 + 0x12844) | 0x10;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)(param_1 + 0x17) = 0x25;\n        }\n        else if (iVar9 == DAT_08003c64) {\n          *(uint *)(DAT_08003c64 + 0x1f420) = *(uint *)(DAT_08003c64 + 0x1f420) | 0x20000;\n          *(uint *)(iVar8 + 0x1f420) = *(uint *)(iVar8 + 0x1f420) & 0xfffdffff;\n          *(uint *)(iVar8 + 0x1f440) = *(uint *)(iVar8 + 0x1f440) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)(param_1 + 0x17) = 0x26;\n        }\n        else if (iVar9 == DAT_08003c68) {\n          *(uint *)(DAT_08003c68 + 0x1f020) = *(uint *)(DAT_08003c68 + 0x1f020) | 0x40000;\n          *(uint *)(iVar1 + 0x1f020) = *(uint *)(iVar1 + 0x1f020) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1f040) = *(uint *)(iVar1 + 0x1f040) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)(param_1 + 0x17) = 0x27;\n        }\n        else if (iVar9 == DAT_08003c6c) {\n          *(uint *)(DAT_08003c6c + 0x1ec20) = *(uint *)(DAT_08003c6c + 0x1ec20) | 0x80000;\n          *(uint *)(iVar2 + 0x1ec20) = *(uint *)(iVar2 + 0x1ec20) & 0xfff7ffff;\n          *(uint *)(iVar2 + 0x1ec40) = *(uint *)(iVar2 + 0x1ec40) | 0x80000;\n          *(undefined *)(param_1 + 0x11) = 3;\n          *(undefined *)(param_1 + 0x17) = 0x34;\n        }\n        else if (iVar9 == DAT_08003c70) {\n          *(uint *)(DAT_08003c70 + 0x1e820) = *(uint *)(DAT_08003c70 + 0x1e820) | 0x100000;\n          *(uint *)(iVar3 + 0x1e820) = *(uint *)(iVar3 + 0x1e820) & 0xffefffff;\n          *(uint *)(iVar3 + 0x1e840) = *(uint *)(iVar3 + 0x1e840) | 0x100000;\n          *(undefined *)(param_1 + 0x11) = 4;\n          *(undefined *)(param_1 + 0x17) = 0x35;\n        }\n        else if (iVar9 == DAT_08003c74) {\n          *(uint *)(DAT_08003c74 + 0x12424) = *(uint *)(DAT_08003c74 + 0x12424) | 0x20;\n          *(uint *)(iVar4 + 0x12424) = *(uint *)(iVar4 + 0x12424) & 0xffffffdf;\n          *(uint *)(iVar4 + 0x12444) = *(uint *)(iVar4 + 0x12444) | 0x20;\n          *(undefined *)(param_1 + 0x11) = 5;\n          *(undefined *)(param_1 + 0x17) = 0x47;\n        }\n        else if (iVar9 == DAT_08003c78) {\n          *(uint *)(DAT_08003c78 + 0x1c020) = *(uint *)(DAT_08003c78 + 0x1c020) | 0x40000000;\n          *(uint *)(iVar5 + 0x1c020) = *(uint *)(iVar5 + 0x1c020) & 0xbfffffff;\n          *(uint *)(iVar5 + 0x1c040) = *(uint *)(iVar5 + 0x1c040) | 0x40000000;\n          *(undefined *)(param_1 + 0x11) = 6;\n          *(undefined *)(param_1 + 0x17) = 0x52;\n        }\n        else if (iVar9 == DAT_08003c7c) {\n          *(uint *)(DAT_08003c7c + 0x1bc20) = *(uint *)(DAT_08003c7c + 0x1bc20) | 0x80000000;\n          *(uint *)(iVar6 + 0x1bc20) = *(uint *)(iVar6 + 0x1bc20) & 0x7fffffff;\n          *(uint *)(iVar6 + 0x1bc40) = *(uint *)(iVar6 + 0x1bc40) | 0x80000000;\n          *(undefined *)(param_1 + 0x11) = 7;\n          *(undefined *)(param_1 + 0x17) = 0x53;\n        }\n        uVar10 = set_bit_080031fc((uint)((int)*(short *)((int)param_1 + 0x5a) << 0x18) >> 0x1c);\n        uVar11 = find_value_0800354a((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n        local_2c = 1 << (*(ushort *)((int)param_1 + 0x5a) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        local_1c = (uVar11 << 0x11) >> 0x19;\n        local_20 = 3;\n        decode_and_update_registers_08000fb4(uVar10,&local_2c);\n        uVar10 = set_bit_080031fc((uint)((int)*(short *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar11 = find_value_0800354a((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n        local_2c = 1 << (*(ushort *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        decode_and_update_registers_08000fb4(uVar10,&local_2c);\n        *(int **)(PTR_DAT_08003c80 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        process_data_08002d72(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002d72",
                "FUN_0800354a",
                "FUN_08004fdc",
                "FUN_08000fb4",
                "FUN_08003582",
                "FUN_080031fc",
                "FUN_080034f4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003978",
            "calling": [
                "FUN_08004388",
                "FUN_08003cc8"
            ],
            "imported": true,
            "current_name": "FUNC_08003978"
        },
        "FUN_0800316c": {
            "renaming": {
                "uVar1": "shifted_index",
                "param_1": "index",
                "FUN_0800316c": "update_bit_in_array_at_index_0800316c",
                "param_2": "array",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ update_bit_in_array_at_index_0800316c(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_~DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08004110"
            ],
            "imported": true,
            "current_name": "update_bit_in_array_at_index_0800316c"
        },
        "FUN_080040d0": {
            "renaming": {
                "FUN_080040d0": "return_error_080040d0"
            },
            "code": "int32_t return_error_080040d0(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d0",
            "calling": [],
            "imported": true,
            "current_name": "return_error_080040d0"
        },
        "FUN_080040d6": {
            "renaming": {
                "param_1": "address",
                "param_2": "protection_level",
                "FUN_080040d6": "set_memory_protection_080040d6"
            },
            "code": "void set_memory_protection_080040d6(int* address, int protection_level) {\n  *(address + 1) = 0x2000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d6",
            "calling": [
                "FUN_080056d4"
            ],
            "imported": true,
            "current_name": "set_memory_protection_080040d6"
        },
        "FUN_08004a34": {
            "renaming": {
                "initialize_arrays_080053a0": "initialize_arrays",
                "iVar1": "node_value",
                "param_1": "input_length",
                "decode_and_process_080052cc": "decode_and_process",
                "update_node_status_080050d0": "update_node_status",
                "pbVar2": "current_byte",
                "pbVar3": "node",
                "param_2": "input_byte",
                "FUN_08004a34": "process_input_08004a34",
                "param_3": "input_array",
                "uVar4": "input_byte_uint"
            },
            "code": "uint process_input_08004a34(int input_length, byte input_byte, byte **input_array){\n  int array_length = (int)input_array[2] - 1;\n  input_array[2] = (byte *)array_length;\n  if ((array_length >= -1) && ((int)input_array[6] <= array_length || input_byte != 10)){\n    byte *current_byte = *input_array;\n    *input_array = current_byte + 1;\n    *current_byte = input_byte;\n    return (uint)input_byte;\n  }\n  if ((input_length != 0) && (*(int *)(input_length + 0x18) == 0)) {\n    initialize_arrays();\n  }\n  if (input_array == (byte **)PTR_DAT_080050c4) {\n    input_array = *(byte ***)(input_length + 4);\n  }\n  else if (input_array == (byte **)PTR_DAT_080050c8) {\n    input_array = *(byte ***)(input_length + 8);\n  }\n  else if (input_array == (byte **)PTR_DAT_080050cc) {\n    input_array = *(byte ***)(input_length + 0xc);\n  }\n  input_array[2] = input_array[6];\n  byte *node = (byte *)(uint)*(ushort *)(input_array + 3);\n  int node_value = (int)node << 0x1c;\n  if (((node_value < 0) && (node = input_array[4], node != (byte *)0x0)) || (node_value = update_node_status(input_length, input_array, node_value, node, current_byte), node_value == 0)) {\n    node_value = (int)*input_array - (int)input_array[4];\n    uint input_byte_uint = (uint)input_byte;\n    if ((node_value < (int)input_array[5]) || (node_value = decode_and_process(input_length, input_array), node_value == 0)) {\n      input_array[2] = (byte *)((int)input_array[2] - 1);\n      byte *current_byte = *input_array;\n      *input_array = current_byte + 1;\n      *current_byte = input_byte;\n      if ((byte *)(node_value + 1) != input_array[5]) {\n        if (-2147483648 == ((uint)*(ushort *)(input_array + 3) << 0x1f)) {\n          return input_byte_uint;\n        }\n        if (input_byte_uint != 10) {\n          return input_byte_uint;\n        }\n      }\n      node_value = decode_and_process(input_length, input_array);\n      if (node_value == 0) {\n        return input_byte_uint;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_080050d0",
                "FUN_080052cc",
                "FUN_080053a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a34",
            "calling": [
                "FUN_08004a60"
            ],
            "imported": true,
            "current_name": "process_input_08004a34"
        },
        "FUN_080002d0": {
            "renaming": {
                "uVar1": "concatenated_values",
                "param_1": "first_value",
                "param_2": "second_value",
                "param_3": "third_value",
                "param_4": "fourth_value",
                "FUN_080002d0": "get_concatenated_values_080002d0"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t get_concatenated_values_080002d0(int first_value, int second_value, int third_value, int fourth_value)\n{\n  if(fourth_value == 0 && third_value == 0)\n  {\n    if(first_value != 0 || second_value != 0)\n    {\n      first_value = -1;\n      second_value = -1;\n    }\n    return ((uint64_t)second_value << 32) | (uint64_t)first_value;\n  }\n  else\n  {\n    return FUNC_08000300();\n  }\n}",
            "called": [
                "FUN_08000300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002d0",
            "calling": [
                "FUN_080023b4"
            ],
            "imported": true,
            "current_name": "get_concatenated_values_080002d0"
        },
        "FUN_08003f00": {
            "renaming": {
                "uVar1": "index",
                "param_1": "target",
                "FUN_08003f00": "find_integer_index_08003f00"
            },
            "code": "uint find_integer_index_08003f00(int target) {\n  uint index;\n  if (target == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while (true) {\n      if (index > 9) {\n        return index;\n      }\n      if (target == *(int *)(PTR_DAT_08003f20 + index * 4)) {\n        break;\n      }\n      index = (index + 1) & 0xff;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f00",
            "calling": [
                "FUN_08003f48",
                "FUN_08003f24"
            ],
            "imported": true,
            "current_name": "find_integer_index_08003f00"
        },
        "FUN_08005a04": {
            "renaming": {
                "FUN_08005a04": "do_nothing_08005a04"
            },
            "code": "\nvoid do_nothing_08005a04(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a04",
            "calling": [],
            "imported": true,
            "current_name": "do_nothing_08005a04"
        },
        "FUN_08001440": {
            "renaming": {
                "*puVar1": "*buffer",
                "DAT_08004b88": "0x2a",
                "FUN_08001440": "update_data_08001440",
                "param_1": "data",
                "*(short *)((int)param_1 + 0x2a)": "*count",
                "DAT_08004b8c": "9",
                "puVar1": "buffer",
                "PTR_00101010": "count",
                "*(undefined4 *)(*param_1 + 0x10)": "*(int*)(data + 0x10)"
            },
            "code": "int update_data_08001440(int* data)\n{\n  short* PTR_00101010 = (short*)(data + DAT_08004b88);\n  if (*PTR_00101010 != 0)\n  {\n    char* buffer = (char*)(data[DAT_08004b8c]);\n    data[DAT_08004b8c] = (int)(buffer + 1);\n    *buffer = (char)*(int*)(data + 0x10);\n    *PTR_00101010 = *PTR_00101010 - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001440",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "update_data_08001440"
        },
        "FUN_08000230": {
            "renaming": {
                "bVar1": "data_byte",
                "uVar10": "data_length_aligned",
                "uVar11": "data_value_1",
                "uVar12": "data_value_2",
                "bVar13": "data_value_2_bit_0",
                "FUN_08000230": "find_byte_sequence_08000230",
                "cVar5": "bit_24",
                "param_1": "data",
                "cVar4": "bit_16",
                "bVar14": "data_value_2_bit_8",
                "pbVar6": "result_ptr",
                "puVar7": "data_ptr",
                "bVar15": "data_value_2_bit_16",
                "bVar16": "data_value_2_bit_24",
                "pbVar8": "result",
                "param_2": "search_byte",
                "cVar3": "bit_8",
                "param_3": "data_length",
                "cVar2": "bit_0",
                "uVar9": "data_ptr_offset"
            },
            "code": "byte* find_byte_sequence_08000230(uint* data, uint search_byte, uint data_length) {\n    byte* result = NULL;\n    uint search_pattern = (search_byte | (search_byte << 8) | (search_byte << 16) | (search_byte << 24));\n    uint* data_ptr = data;\n    uint data_length_aligned = data_length & 0xFFFFFFF8;\n    while (data_length_aligned != 0) {\n        uint data_value_1 = *data_ptr++ ^ search_pattern;\n        uint data_value_2 = *data_ptr++ ^ search_pattern;\n        if (data_value_1 || data_value_2) {\n            if (data_value_1 == 0) {\n                result = (byte*)(data_ptr - 1) + 4;\n            }\n            else {\n                result = (byte*)(data_ptr - 1);\n            }\n            if (!(data_value_1 & 0xFF)) {\n                result++;\n                if (!(data_value_1 & 0xFF00)) {\n                    result++;\n                    if (!(data_value_1 & 0xFF0000)) {\n                        result++;\n                    }\n                }\n            }\n            return result;\n        }\n        data_length_aligned -= 8;\n    }\n    data_length &= 7;\n    while (data_length != 0) {\n        if (*(byte*)data_ptr == search_byte) {\n            return (byte*)data_ptr;\n        }\n        data_ptr = (uint*)((byte*)data_ptr + 1);\n        data_length--;\n    }\n    return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000230",
            "calling": [
                "FUN_08004a84",
                "FUN_08004d9c"
            ],
            "imported": true,
            "current_name": "find_byte_sequence_08000230"
        },
        "FUN_08001684": {
            "renaming": {
                "FUN_08001684": "execute_command_08001684",
                "param_1": "command_ptr",
                "uint": "unsigned int",
                "PTR_DAT_08001714_1": "default_ptr1",
                "PTR_DAT_08001714_2": "default_ptr2",
                "execute_command_if_valid_080038d0": "execute_command_if_valid",
                "PTR_DAT_00000021": "exclamation_ptr",
                "PTR_DAT_00000000": "null_ptr",
                "do_nothing_080015ba": "do_nothing"
            },
            "code": "int execute_command_08001684(uint **command_ptr){\n    uint *command = *command_ptr;\n    if ((command[11] == PTR_DAT_08001714_1 || command[11] == PTR_DAT_08001714_2) && (*(char *)((int)command_ptr + 0x3d) == '(')) {\n        command[11] = PTR_DAT_08001714_1;\n        command[1] &= 0xfffff8ff;\n        command[5] = 0xfffffbff;\n        *command &= 0xfffffbff;\n        command[12] = PTR_DAT_00000000;\n        *(undefined *)((int)command_ptr + 0x3d) = 0x20;\n        *(undefined *)((int)command_ptr + 0x3e) = 0;\n        execute_command_08001684_if_valid();\n    }\n    else if (*(char *)((int)command_ptr + 0x3d) == '!') {\n        command[11] = PTR_DAT_08001714_1;\n        command[12] = PTR_DAT_00000021;\n        *(undefined *)((int)command_ptr + 0x3d) = 0x20;\n        *(undefined *)((int)command_ptr + 0x3e) = 0;\n        command[1] &= 0xfffff8ff;\n        command[5] = 0xfffffbff;\n        *command &= 0xfffffbff;\n        do_nothing_080015ba();\n    }\n    else {\n        command[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001684",
            "calling": [
                "FUN_08001e68"
            ],
            "imported": true,
            "current_name": "execute_command_08001684"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "check_input_08000f8c",
                "param_1": "input_array",
                "uint": "unsigned int",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ check_input_08000f8c(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_5DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_5DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_5DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_5DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "imported": true,
            "current_name": "check_input_08000f8c"
        },
        "FUN_080001ac": {
            "renaming": {
                "PTR_FUN_080001cc": "some_function_pointer",
                "*PTR_DAT_080001c4": "*initialized_flag",
                "FUN_080001ac": "check_and_set_initialized_flag_if_not_set_080001ac",
                "param_1": "param",
                "DAT_080001c8": "some_value"
            },
            "code": "undefined* check_and_set_initialized_flag_if_not_set_080001ac(undefined* param){\\n  if (*PTR_DAT_080001c4 == \"\\0\") {\\n    if (DAT_080001c8 != 0) {\\n      param = PTR_FUN_080001cc;\\n    }\\n    *PTR_DAT_080001c4 = 1;\\n  }\\n  return param;\\n}",
            "called": [
                "FUN_080059f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [],
            "imported": true,
            "current_name": "check_and_set_initialized_flag_if_not_set_080001ac"
        },
        "FUN_080040e0": {
            "renaming": {
                "undefined4": "int",
                "FUN_080040e0": "returnOne_080040e0"
            },
            "code": "int returnOne_080040e0(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e0",
            "calling": [
                "FUN_080056f8"
            ],
            "imported": true,
            "current_name": "returnOne_080040e0"
        },
        "FUN_080048cc": {
            "renaming": {
                "param_1": "arrayStart",
                "FUN_080048cc": "fillArrayWithValue_080048cc",
                "*param_1": "*arrayStart",
                "param_2": "value",
                "param_3": "arrayLength",
                "puVar1": "arrayEnd"
            },
            "code": "void fillArrayWithValue_080048cc(void* arrayStart, int value, int arrayLength)\n{\n  void* arrayEnd = arrayStart + arrayLength;\n  for (; arrayStart != arrayEnd; arrayStart++) {\n    *arrayStart = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048cc",
            "calling": [
                "FUN_0800532c",
                "FUN_08005400",
                "FUN_08005374"
            ],
            "imported": true,
            "current_name": "fillArrayWithValue_080048cc"
        },
        "FUN_080040e4": {
            "renaming": {
                "FUN_080040e4": "returnZero_080040e4"
            },
            "code": "int32_t returnZero_080040e4(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e4",
            "calling": [
                "FUN_08005718"
            ],
            "imported": true,
            "current_name": "returnZero_080040e4"
        },
        "FUN_08003506": {
            "renaming": {
                "param_1": "target_value",
                "FUN_08003506": "find_value_in_array_08003506",
                "*param_2": "*array",
                "param_2": "array"
            },
            "code": "int find_value_in_array_08003506(int target_value, short* array) {\n  while(true) {\n    if (*(int*)(array + 2) == 0) {\n      return -1;\n    }\n    if (*(int*)(array + 2) == target_value) {\n      break;\n    }\n    array += 6;\n  }\n  return (int)*array;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003506",
            "calling": [
                "FUN_0800351e",
                "FUN_08003506"
            ],
            "imported": true,
            "current_name": "find_value_in_array_08003506"
        },
        "FUN_080025e0": {
            "renaming": {
                "PTR_DAT_080025e8": "pointer_data",
                "FUN_080025e0": "get_data_from_pointer_080025e0"
            },
            "code": "get_data_from_pointer_080025e0() {\n  return *(undefined4 *)PTR_DAT_080025e8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e0",
            "calling": [
                "FUN_080025ec",
                "FUN_08000c8c",
                "FUN_0800260c"
            ],
            "imported": true,
            "current_name": "get_data_from_pointer_080025e0"
        },
        "FUN_080040e8": {
            "renaming": {
                "undefined4": "int",
                "FUN_080040e8": "returnZero_080040e8"
            },
            "code": "int returnZero_080040e8(void) {\n  int result = 0;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_0800573c"
            ],
            "imported": true,
            "current_name": "returnZero_080040e8"
        },
        "FUN_08000a00": {
            "renaming": {
                "uVar1": "combined_value",
                "param_1": "data_offset",
                "param_2": "array_offset",
                "param_3": "bit_index",
                "param_4": "bit_value",
                "FUN_08000a00": "set_bit_in_ushort_array_08000a00",
                "uVar2": "array_index"
            },
            "code": "int set_bit_in_ushort_array_08000a00(int data_offset, int array_offset, int bit_index, int bit_value) {\n  uint combined_value = combine_values(*(uint8_t *)(data_offset + 0xb), *(uint8_t *)(data_offset + 0xc), bit_value, bit_value, bit_value);\n  uint array_index = (combined_value << 0x14) >> 0x18;\n  if (*(char *)(data_offset + 0xd) == -1) {\n    *(uint16_t *)(array_offset + array_index * 2) = (uint16_t)(1 << (combined_value & 0xf)) | *(uint16_t *)(array_offset + array_index * 2);\n  }\n  else {\n    *(uint16_t *)(array_offset + array_index * 2) = *(uint16_t *)(array_offset + array_index * 2) & ~(uint16_t)(1 << (combined_value & 0xf));\n  }\n  *(uint8_t *)(data_offset + 0x49) = 6;\n  calculate_crc_and_decode(data_offset);\n  return 8;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a00",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": true,
            "current_name": "set_bit_in_ushort_array_08000a00"
        },
        "FUN_080047c0": {
            "renaming": {
                "iVar1": "bit_position",
                "param_1": "input",
                "FUN_080047c0": "process_input_and_wait_for_response_080047c0"
            },
            "code": "void process_input_and_wait_for_response_080047c0(int input)\n{\n  int bit_position;\n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  process_input_and_wait_for_response_080047c0();\n  bit_position = get_bit_position();\n  if (*(int *)(PTR_DAT_080047ec + bit_position * 0x14 + 0xc) != 0) {\n    process_input_and_wait_for_response_080047c0();\n  }\n  return;\n}",
            "called": [
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047c0",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": true,
            "current_name": "process_input_and_wait_for_response_080047c0"
        },
        "FUN_08005374": {
            "renaming": {
                "FUN_08005374": "allocate_and_initialize_array_08005374",
                "iVar2": "array_size_in_bytes",
                "param_1": "memory_block",
                "allocate_memory_block_08004978": "allocate_memory_block",
                "param_2": "array_size",
                "puVar1": "array_start",
                "fillArrayWithValue_080048cc": "fill_array_with_value"
            },
            "code": "undefined4 * allocate_and_initialize_array_08005374(undefined4 memory_block, int array_size) {\n  undefined4 *array_start;\n  int array_size_in_bytes = (array_size - 1) * 0x68;\n  array_start = (undefined4 *) allocate_memory_block_08004978(memory_block, array_size_in_bytes + 0x74);\n  if (array_start != (undefined4 *)0x0) {\n    *array_start = 0;\n    array_start[1] = array_size;\n    array_start[2] = array_start + 3;\n    fill_array_with_value(array_start + 3, 0, array_size_in_bytes + 0x68);\n  }\n  return array_start;\n}",
            "called": [
                "FUN_08004978",
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005374",
            "calling": [
                "FUN_08005400"
            ],
            "imported": true,
            "current_name": "allocate_and_initialize_array_08005374"
        },
        "FUN_08004d9c": {
            "renaming": {
                "FUN_08004d9c": "FUNC_08004d9c"
            },
            "code": "\nuint FUNC_08004d9c(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08004f56;\n          if (bVar1 != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\nLAB_08004ee6:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08004dcc;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08004dec;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08004dec:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_08004ec2;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08004e2c:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08004e52:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08004e60;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08004e60:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            puVar5 = PTR_s_0123456789abcdef_08004fd4;\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08004e52;\n          if (bVar1 == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08004e2c;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_byte_sequence_08000230(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08004f42:\n    *puVar3 = uVar6;\n  }\nLAB_08004f56:\n  param_2[4] = 0;\nLAB_08004ec2:\n  iVar2 = calculate_length_08004cb0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_08004ed6:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_08004ed6;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08004cb0",
                "FUN_08000230"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004d9c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": true,
            "current_name": "FUNC_08004d9c"
        },
        "FUN_08003750": {
            "renaming": {
                "FUN_08003750": "subtract_four_from_input_08003750",
                "param_1": "input",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int subtract_four_from_input_08003750(int input){\n    int result = input - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003750",
            "calling": [
                "FUN_08003754",
                "FUN_0800376e"
            ],
            "imported": true,
            "current_name": "subtract_four_from_input_08003750"
        },
        "FUN_080014ec": {
            "renaming": {
                "uVar1": "result",
                "FUN_080014ec": "process_input_080014ec",
                "puVar2": "ptr",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_size",
                "param_4": "output_data"
            },
            "code": "int process_input_080014ec(uint **input_ptr, uint *input_data, int input_size, uint *output_data)\n{\n  int result;\n  uint *ptr;\n  \n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (input_data == NULL) {\n      result = 1;\n    }\n    else if (input_size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      ptr = *input_ptr;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_ptr = **input_ptr & 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = '*';\n      *(undefined *)((int)input_ptr + 0x3e) = ' ';\n      result = 0;\n      input_ptr[0x10] = NULL;\n      input_ptr[9] = input_data;\n      *(short *)((int)input_ptr + 0x2a) = (short)input_size;\n      input_ptr[0xb] = output_data;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "FUN_08003880"
            ],
            "imported": true,
            "current_name": "process_input_080014ec"
        },
        "FUN_080048dc": {
            "renaming": {
                "FUN_080048dc": "insert_new_node_080048dc",
                "piVar2": "temp_pointer",
                "param_1": "head",
                "ppiVar6": "current_node",
                "ppiVar7": "current_node",
                "param_2": "key",
                "param_3": "value",
                "param_4": "size",
                "puVar1": "pointer",
                "extraout_r1": "next_node",
                "ppiVar3": "prev_node_data",
                "ppiVar4": "prev_node",
                "ppiVar5": "next_node"
            },
            "code": "void insert_new_node_080048dc(int *head, int key, int value, int size)\n{\n  int **current_node = (int **)(size + -4);\n  if (*head == 0) {\n    current_node[1] = (int *)0x0;\n    *(int ***)PTR_DAT_08004974 = current_node;\n    int **next_node = (int **)extraout_r1;\n    int **prev_node = (int **)PTR_DAT_08004974;\n  }\n  else if (current_node < *(int ***)PTR_DAT_08004974) {\n    int **next_node = *(int ***)PTR_DAT_08004974;\n    int **prev_node = PTR_DAT_08004974;\n    bool is_next_equal = next_node == (int **)((int)current_node + (int)*current_node);\n    if (is_next_equal) {\n      next_node = (int **)*next_node;\n      *(int ***)PTR_DAT_08004974 = current_node;\n    }\n    current_node[1] = (int *)next_node;\n    if (is_next_equal) {\n      current_node = (int **)((int)current_node + (int)*current_node);\n      *current_node = (int *)next_node;\n    }\n    *(int ***)PTR_DAT_08004974 = current_node;\n  }\n  else {\n    int **prev_node = *(int ***)PTR_DAT_08004974;\n    int **next_node = prev_node[1];\n    while (next_node != (int **)0x0 && next_node <= current_node) {\n      prev_node = next_node;\n      next_node = next_node[1];\n    }\n    int **prev_node_data = (int **)*prev_node;\n    if ((int **)((int)prev_node + (int)prev_node_data) == current_node) {\n      prev_node_data = (int **)((int)prev_node_data + (int)*current_node);\n      *prev_node = (int *)prev_node_data;\n      if (next_node == (int **)((int)prev_node + (int)prev_node_data)) {\n        int *next_node_data = *next_node;\n        next_node = (int **)next_node[1];\n        prev_node[1] = (int *)next_node;\n        prev_node_data = (int **)((int)prev_node_data + (int)next_node_data);\n        *prev_node = (int *)prev_node_data;\n      }\n    }\n    else if (current_node < (int **)((int)prev_node + (int)prev_node_data)) {\n      *head = 0xc;\n    }\n    else {\n      int **next_node_data = (int **)((int)current_node + (int)*current_node);\n      bool is_next_equal = next_node == next_node_data;\n      if (is_next_equal) {\n        next_node_data = (int **)*next_node;\n        next_node = (int **)next_node[1];\n      }\n      current_node[1] = (int *)next_node;\n      if (is_next_equal) {\n        next_node_data = (int **)((int)next_node_data + (int)*current_node);\n        *current_node = (int *)next_node_data;\n      }\n      prev_node[1] = (int *)current_node;\n    }\n  }\n}\n",
            "called": [
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048dc",
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "imported": true,
            "current_name": "insert_new_node_080048dc"
        },
        "FUN_08003754": {
            "renaming": {
                "iVar1": "callback_address",
                "FUN_08003754": "execute_callback_08003754",
                "param_1": "input",
                "subtract_four_from_input_08003750": "subtract_four_from_input"
            },
            "code": "void execute_callback_08003754(int input){\n  int callback_address = subtract_four_from_input();\n  if((*(code **)(callback_address + 0x48) != (code *)0x0) && (*(char *)(input + 0x18) == '\\x01')){\n    (**(code **)(callback_address + 0x48))(callback_address,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003754",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": true,
            "current_name": "execute_callback_08003754"
        },
        "FUN_08001578": {
            "renaming": {
                "param_1": "pointer_to_pointer",
                "FUN_08001578": "set_flags_08001578",
                "puVar1": "pointer"
            },
            "code": "int set_flags_08001578(uint **pointer_to_pointer) {\n  uint *pointer = *pointer_to_pointer;\n  if (*(char *)((int)pointer_to_pointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)pointer_to_pointer + 0x3d) = 0x28;\n  if ((*pointer & 1) == 0) {\n    *pointer |= 1;\n  }\n  **pointer_to_pointer |= 0x400;\n  (*pointer_to_pointer)[1] |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001578",
            "calling": [
                "FUN_08003900",
                "FUN_080038d0"
            ],
            "imported": true,
            "current_name": "set_flags_08001578"
        },
        "FUN_08004844": {
            "renaming": {
                "param_1": "unused_parameter",
                "FUN_08004844": "calculate_result_08004844",
                "param_2": "input_value",
                "DAT_0800485c": "global_variable"
            },
            "code": "unsigned long long calculate_result_08004844(unsigned int input_value) {\n  if (DAT_0800485c != 0) {\n    return CONCAT44(2, input_value);\n  }\n  return (unsigned long long)input_value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004844",
            "calling": [
                "FUN_080047fe"
            ],
            "imported": true,
            "current_name": "calculate_result_08004844"
        },
        "FUN_0800318c": {
            "renaming": {
                "DAT_080031e0": "data_6",
                "DAT_080031f0": "data_10",
                "DAT_080031d0": "data_1",
                "DAT_080031e4": "data_7",
                "DAT_080031f4": "data_11",
                "DAT_080031d4": "data_3",
                "param_1": "index",
                "FUN_0800318c": "get_data_by_index_0800318c",
                "DAT_080031dc": "data_5",
                "DAT_080031ec": "data_9",
                "DAT_080031e8": "data_8",
                "DAT_080031f8": "data_2",
                "DAT_080031d8": "data_4"
            },
            "code": "int get_data_by_index_0800318c(int index) {\n  switch(index) {\n    case 0:\n      return DAT_080031d0;\n    case 1:\n      return DAT_080031f8;\n    case 2:\n      return DAT_080031d4;\n    case 3:\n      return DAT_080031d8;\n    case 4:\n      return DAT_080031dc;\n    case 5:\n      return DAT_080031e0;\n    case 6:\n      return DAT_080031e4;\n    case 7:\n      return DAT_080031e8;\n    case 8:\n      return DAT_080031ec;\n    case 9:\n      return DAT_080031f0;\n    case 10:\n      return DAT_080031f4;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800318c",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": true,
            "current_name": "get_data_by_index_0800318c"
        },
        "FUN_080047d0": {
            "renaming": {
                "iVar1": "bitPosition",
                "process_input_and_wait_for_response_080047c0": "processInputAndWait",
                "*ptr": "inputPtr",
                "FUN_080047d0": "checkAndProcessInput_080047d0",
                "PTR_DAT_080047ec": "PTR_DAT",
                "get_bit_position_08004678": "getBitPosition"
            },
            "code": "void checkAndProcessInput_080047d0(void)\n{\n  int bitPosition = get_bit_position_08004678();\n  int* ptr = PTR_DAT_080047ec_080047ec + bitPosition * 0x14 + 0xc;\n  if (*ptr != 0) {\n    processInputAndWait();\n  }\n  return;\n}",
            "called": [
                "FUN_08004678",
                "FUN_080047c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d0",
            "calling": [
                "FUN_080011a4"
            ],
            "imported": true,
            "current_name": "checkAndProcessInput_080047d0"
        },
        "FUN_080040f8": {
            "renaming": {
                "FUN_080040f8": "wait_forever_080040f8"
            },
            "code": "void wait_forever_080040f8(void)\n{\n  while(true) {\n    // Do nothing, just wait forever\n  }\n}",
            "called": [
                "FUN_080040f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040f8",
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "imported": true,
            "current_name": "wait_forever_080040f8"
        },
        "FUN_0800500c": {
            "renaming": {
                "iVar2": "found_offset",
                "param_1": "output_offset",
                "param_2": "input_offset",
                "FUN_0800500c": "find_and_set_offset_0800500c",
                "puVar1": "offset_ptr"
            },
            "code": "void find_and_set_offset_0800500c(int *output_offset, undefined4 input_offset) {\n  undefined *offset_ptr;\n  int found_offset;\n  offset_ptr = PTR_DAT_08005028;\n  *(undefined4 *)PTR_DAT_08005028 = 0;\n  found_offset = find_offset_08004094(input_offset);\n  if ((found_offset == -1) && (*(int *)offset_ptr != 0)) {\n    *output_offset = *(int *)offset_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08004094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800500c",
            "calling": [
                "FUN_08004978"
            ],
            "imported": true,
            "current_name": "find_and_set_offset_0800500c"
        },
        "FUN_080023b4": {
            "renaming": {
                "in_r3": "parameter_1",
                "uVar1": "flags",
                "divisor": "final_divisor",
                "FUN_080023b4": "calculate_divisor_080023b4",
                "uVar2": "multiplied_value",
                "concatenated_values": "result",
                "value": "original_value"
            },
            "code": "uint calculate_divisor_080023b4(void)\n{\n  uint concatenated_values;\n  uint divisor;\n  uint flags = *(uint *)(DAT_0800247c + 8) & 0xc;\n  if (flags == 4) {\n    return DAT_08002484;\n  }\n  if (flags != 8) {\n    return DAT_08002480;\n  }\n  uint value = *(uint *)(DAT_0800247c + 4) & 0x3f;\n  if ((*(uint *)(DAT_0800247c + 4) & 0x400000) == 0) {\n    uint multiplied_value = (uint)(*(int *)(DAT_0800247c + 4) << 0x11) >> 0x17;\n    concatenated_values = get_concatenated_values_080002d0(multiplied_value * 16000000, (((uint)(multiplied_value * 0x20 < multiplied_value) * -0x3f - (uint)(multiplied_value * 0x7c0 < multiplied_value * 0x1f)) * 8 + (uint)CARRY4(multiplied_value * 0x3d08,multiplied_value)) * 0x400 | multiplied_value * 0x3d09 >> 0x16, value, 0, in_r3);\n  }\n  else {\n    uint multiplied_value = (uint)(*(int *)(DAT_0800247c + 4) << 0x11) >> 0x17;\n    concatenated_values = get_concatenated_values_080002d0(multiplied_value * 8000000, (((uint)(multiplied_value * 0x20 < multiplied_value) * -0x3f - (uint)(multiplied_value * 0x7c0 < multiplied_value * 0x1f)) * 8 + (uint)CARRY4(multiplied_value * 0x3d08,multiplied_value)) * 0x200, value, 0, in_r3);\n  }\n  divisor = ((((uint)(*(int *)(DAT_0800247c + 4) << 0xe) >> 0x1e) + 1) * 2);\n  return concatenated_values / divisor;\n}\n",
            "called": [
                "FUN_080002d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023b4",
            "calling": [
                "FUN_08002488"
            ],
            "imported": true,
            "current_name": "calculate_divisor_080023b4"
        },
        "FUN_080011a4": {
            "renaming": {
                "DAT_080011bc": "data",
                "param_1": "input",
                "FUN_080011a4": "updateInput_080011a4"
            },
            "code": "void updateInput_080011a4(uint input) {\n  uint* DAT_080011bc = (uint*)(DAT_080011bc + 0x14);\n  if ((*DAT_080011bc & input) != 0) {\n    *DAT_080011bc = input;\n    checkAndProcessInput();\n  }\n  return;\n}",
            "called": [
                "FUN_080047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011a4",
            "calling": [],
            "imported": true,
            "current_name": "updateInput_080011a4"
        },
        "FUN_08001e68": {
            "renaming": {
                "puVar2": "data_ptr",
                "0x10800": "FLAG_5_MASK",
                "param_1": "input_data",
                "process_input_08001ab0": "process_input",
                "0x100": "FLAG_2_MASK",
                "0x10200": "FLAG_3_MASK",
                "DAT_08001f38": "FLAG_1_MASK",
                "0x10400": "FLAG_4_MASK",
                "cVar1": "current_char",
                "execute_command_08001684": "execute_command",
                "uVar3": "flag_1",
                "uVar4": "flag_2",
                "FUN_08001e68": "process_input_if_flags_set_08001e68"
            },
            "code": "void process_input_if_flags_set_08001e68(uint **input_data){\n  char current_char;\n  uint *data_ptr;\n  uint flag_1;\n  uint flag_2;\n  data_ptr = *input_data;\n  flag_1 = data_ptr[5];\n  flag_2 = data_ptr[1];\n  if (((flag_1 & DAT_08001f38) != 0) && ((flag_2 & FLAG_2_MASK) != 0)) {\n    input_data[16] = (uint *)((uint)input_data[16] | 1);\n    data_ptr[5] = 0xfffffeff;\n  }\n  if (((flag_1 & FLAG_3_MASK) != 0) && ((flag_2 & FLAG_2_MASK) != 0)) {\n    input_data[16] = (uint *)((uint)input_data[16] | 2);\n    (*input_data)[5] = 0xfffffdff;\n  }\n  if (((flag_1 & FLAG_4_MASK) != 0) && ((flag_2 & FLAG_2_MASK) != 0)) {\n    current_char = *(char *)((int)input_data + 0x3d);\n    if (((*(char *)((int)input_data + 0x3e) == ' ') && (*(short *)((int)input_data + 0x2a) == 0)) && (((current_char == '!' || (current_char == ')')) || ((current_char == '(' && (input_data[0xc] == (uint *)0x21)))))) {\n      execute_command(input_data);\n    }\n    else {\n      input_data[16] = (uint *)((uint)input_data[16] | 4);\n      if (*(char *)((int)input_data + 0x3e) == '\\x10') {\n        **input_data = **input_data | 0x200;\n      }\n      (*input_data)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag_1 & FLAG_5_MASK) != 0) && ((flag_2 & FLAG_2_MASK) != 0)) {\n    input_data[16] = (uint *)((uint)input_data[16] | 8);\n    (*input_data)[5] = 0xfffff7ff;\n  }\n  if (input_data[16] != (uint *)0x0) {\n    process_input(input_data);\n  }\n  return;\n}",
            "called": [
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e68",
            "calling": [],
            "imported": true,
            "current_name": "process_input_if_flags_set_08001e68"
        },
        "FUN_080019a0": {
            "renaming": {
                "*(undefined *)((int)param_1 + 0x3d)": "*(uint8_t *)((int)data + 0x3d)",
                "*(char *)puVar1": "*(char *)data_ptr",
                "param_1": "data",
                "*(char *)((int)param_1 + 0x3e)": "*(char *)((int)data + 0x3e)",
                "(*param_1)[4]": "data[4]",
                "(*param_1)[1]": "data[1]",
                "0x200": "0b1000000000",
                "*(short *)((int)param_1 + 0x2a)": "data_length",
                "0x100": "0b100000000",
                "puVar1": "data_ptr",
                "*(short *)((int)param_1 + 0x2a) + -1": "*(uint16_t *)((int)data + 0x2a) -= 1",
                "FUN_080019a0": "process_data_080019a0"
            },
            "code": "uint32_t process_data_080019a0(uint32_t **data)\n{\n  uint32_t *data_ptr;\n  uint16_t data_length = *(uint16_t *)((int)data + 0x2a);\n  \n  if (data_length == 4) {\n    (*data)[1] &= 0xfffffbff;\n    data_ptr = data[9];\n    data[9] = (uint32_t *)((int)data_ptr + 1);\n    *(char *)data_ptr = (char)(*data)[4];\n    *(uint16_t *)((int)data + 0x2a) -= 1;\n  }\n  else if (data_length == 3) {\n    (*data)[1] &= 0xfffffbff;\n    **data &= 0xfffffbff;\n    data_ptr = data[9];\n    data[9] = (uint32_t *)((int)data_ptr + 1);\n    *(char *)data_ptr = (char)(*data)[4];\n    *(uint16_t *)((int)data + 0x2a) -= 1;\n  }\n  else if (data_length == 2) {\n    if ((int)data[0xb] - 1U < 2) {\n      **data &= 0xfffffbff;\n      **data |= 0x100;\n    }\n    else {\n      **data |= 0x200;\n    }\n    data_ptr = data[9];\n    data[9] = (uint32_t *)((int)data_ptr + 1);\n    *(char *)data_ptr = (char)(*data)[4];\n    *(uint16_t *)((int)data + 0x2a) -= 1;\n    data_ptr = data[9];\n    data[9] = (uint32_t *)((int)data_ptr + 1);\n    *(char *)data_ptr = (char)(*data)[4];\n    *(uint16_t *)((int)data + 0x2a) -= 1;\n    (*data)[1] &= 0xfffffcff;\n    *(uint8_t *)((int)data + 0x3d) = 0x20;\n    data[0xc] = (uint32_t *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(uint8_t *)((int)data + 0x3e) = 0;\n      do_nothing_08001902();\n    }\n    else {\n      *(uint8_t *)((int)data + 0x3e) = 0;\n      do_nothing_080015b8();\n    }\n  }\n  else {\n    data_ptr = data[9];\n    data[9] = (uint32_t *)((int)data_ptr + 1);\n    *(char *)data_ptr = (char)(*data)[4];\n    *(uint16_t *)((int)data + 0x2a) -= 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019a0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "process_data_080019a0"
        },
        "FUN_08003f24": {
            "renaming": {
                "code": "function_pointer",
                "uVar1": "integer_index",
                "**(code **)(PTR_DAT_08003f40 + uVar1 * 4)": "*(void (**)(uint))(PTR_DAT_08003f40 + integer_index * 4)",
                "PTR_DAT_08003f40": "PTR_DAT_08003f40",
                "undefined4": "uint",
                "PTR_DAT_08003f44": "PTR_DAT_08003f44",
                "find_integer_index_08003f00": "find_integer_index",
                "*(undefined4 *)(PTR_DAT_08003f44 + uVar1 * 4)": "*(uint *)(PTR_DAT_08003f44 + integer_index * 4)",
                "FUN_08003f24": "execute_integer_function_if_less_than_10_08003f24"
            },
            "code": "void execute_integer_function_if_less_than_10_08003f24(void)\n{\n  uint integer_index = find_integer_index();\n  if (integer_index < 10) {\n    void (*function_pointer)(uint) = **(code **)(PTR_DAT_08003f40 + uVar1 * 4);\n    uint integer_parameter = *(undefined4 *)(PTR_DAT_08003f44 + uVar1 * 4);\n    function_pointer(integer_parameter);\n  }\n  return;\n}",
            "called": [
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f24",
            "calling": [
                "FUN_08002f66"
            ],
            "imported": true,
            "current_name": "execute_integer_function_if_less_than_10_08003f24"
        },
        "FUN_080046b4": {
            "renaming": {
                "param_1": "function_mode",
                "param_2": "parameter_mode",
                "param_3": "undefined_parameter_1",
                "param_4": "undefined_parameter_2",
                "puVar1": "parameters",
                "FUN_080046b4": "initialize_parameters_if_needed_080046b4"
            },
            "code": "void initialize_parameters_if_needed_080046b4(int param_1, int param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *parameters = PTR_DAT_08004754;\n  \n  if (param_1 != 1) {\n    return;\n  }\n  \n  if (param_2 == 0xffff) {\n    parameters[0] = 6;\n    *(undefined4 *)(parameters + 0xc) = 0;\n    parameters[0x14] = 7;\n    *(undefined4 *)(parameters + 0x20) = 0;\n    parameters[0x28] = 8;\n    *(undefined4 *)(parameters + 0x34) = 0;\n    parameters[0x3c] = 9;\n    *(undefined4 *)(parameters + 0x48) = 0;\n    parameters[0x50] = 10;\n    *(undefined4 *)(parameters + 0x5c) = 0;\n    parameters[100] = 0x17;\n    *(undefined4 *)(parameters + 0x70) = 0;\n    parameters[0x78] = 0x17;\n    *(undefined4 *)(parameters + 0x84) = 0;\n    parameters[0x8c] = 0x17;\n    *(undefined4 *)(parameters + 0x98) = 0;\n    parameters[0xa0] = 0x17;\n    *(undefined4 *)(parameters + 0xac) = 0;\n    parameters[0xb4] = 0x17;\n    *(undefined4 *)(parameters + 0xc0) = 0;\n    parameters[200] = 0x28;\n    *(undefined4 *)(parameters + 0xd4) = 0;\n    parameters[0xdc] = 0x28;\n    *(undefined4 *)(parameters + 0xe8) = 0;\n    parameters[0xf0] = 0x28;\n    *(undefined4 *)(parameters + 0xfc) = 0;\n    parameters[0x104] = 0x28;\n    *(undefined4 *)(parameters + 0x110) = 0;\n    parameters[0x118] = 0x28;\n    *(undefined4 *)(parameters + 0x124) = 0;\n    parameters[300] = 0x28;\n    *(undefined4 *)(parameters + 0x138) = 0;\n    calculate_result_and_swap_parameters_080047fe(0, PTR_LAB_0800468c_1_0800475c, PTR_DAT_08004758, parameters, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_080047fe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b4",
            "calling": [],
            "imported": true,
            "current_name": "initialize_parameters_if_needed_080046b4"
        },
        "FUN_0800160c": {
            "renaming": {
                "FUN_0800160c": "do_nothing_0800160c"
            },
            "code": "\nvoid do_nothing_0800160c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160c",
            "calling": [
                "FUN_08001bfc",
                "FUN_0800160e"
            ],
            "imported": true,
            "current_name": "do_nothing_0800160c"
        },
        "FUN_0800160e": {
            "renaming": {
                "FUN_0800160e": "add_character_to_string_0800160e",
                "puVar2": "current_ptr",
                "param_1": "string_ptr",
                "cVar1": "current_char"
            },
            "code": "int add_character_to_string_0800160e(int *string_ptr)\n{\n  char current_char = *(char *)((int)string_ptr + 0x3d);\n  if (*(short *)((int)string_ptr + 0x2a) != 0) {\n    undefined *current_ptr = (undefined *)string_ptr[9];\n    string_ptr[9] = (int)(current_ptr + 1);\n    *current_ptr = (char)*(undefined4 *)(*string_ptr + 0x10);\n    *(short *)((int)string_ptr + 0x2a) = *(short *)((int)string_ptr + 0x2a) + -1;\n    if ((*(short *)((int)string_ptr + 0x2a) == 0) && (current_char == '*')) {\n      *(uint *)(*string_ptr + 4) = *(uint *)(*string_ptr + 4) & 0xfffffbff;\n      string_ptr[0xc] = 0x22;\n      *(undefined *)((int)string_ptr + 0x3d) = 0x28;\n      do_nothing_0800160c();\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160e",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "add_character_to_string_0800160e"
        },
        "FUN_0800293e": {
            "renaming": {
                "FUN_0800293e": "do_nothing_0800293e"
            },
            "code": "\nvoid do_nothing_0800293e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": true,
            "current_name": "do_nothing_0800293e"
        },
        "FUN_08000e18": {
            "renaming": {
                "FUN_08000e18": "addByteToUintAndStore_08000e18",
                "byte": "byteValue",
                "PTR_DAT_08000e28": "ptr",
                "uint": "uintValue",
                "PTR_DAT_08000e2c": "bytePtr"
            },
            "code": "void addByteToUintAndStore_08000e18(void)\n{\n    uint* PTR_DAT_08000e28 = (uint*)PTR_DAT_08000e28;\n    byte* PTR_DAT_08000e2c = (byte*)PTR_DAT_08000e2c;\n    uint uintValue = *PTR_DAT_08000e28;\n    byte byteValue = *PTR_DAT_08000e2c;\n    uint result = uintValue + byteValue;\n    *PTR_DAT_08000e28 = result;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e18",
            "calling": [
                "FUN_08003476"
            ],
            "imported": true,
            "current_name": "addByteToUintAndStore_08000e18"
        },
        "FUN_08003486": {
            "renaming": {
                "FUN_08003486": "decode_and_update_registers_08003486",
                "decode_and_update_registers_08000fb4": "update_registers",
                "uVar1": "bit_mask",
                "param_1": "register_value",
                "local_1c": "parameter_5",
                "local_18": "constant",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "local_20": "parameter_4",
                "set_bit_080031fc": "set_bit",
                "local_24": "bit_position"
            },
            "code": "void decode_and_update_registers_08003486(uint32_t register_value, uint32_t parameter_2, uint32_t parameter_3)\n{\n  uint32_t bit_mask = set_bit(register_value);\n  uint32_t bit_position = 1 << (register_value & 0xf) & 0xffff;\n  uint32_t constant = 2;\n  uint32_t parameter_4 = parameter_2;\n  uint32_t parameter_5 = parameter_3;\n  update_registers(bit_mask, &bit_position);\n  return;\n}",
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003486",
            "calling": [
                "FUN_08004110"
            ],
            "imported": true,
            "current_name": "decode_and_update_registers_08003486"
        },
        "FUN_08005662": {
            "renaming": {
                "iVar1": "result_value",
                "bVar3": "is_result_invalid",
                "FUN_08005662": "execute_and_retrieve_result_08005662",
                "param_1": "command",
                "param_2": "result",
                "uVar2": "modified_result"
            },
            "code": "void execute_and_retrieve_result_08005662(int command, int result) {\n  int result_value = execute_and_retrieve_result_08005662_08005718(command, (int)*(short *)(result + 0xe));\n  bool is_result_invalid = result_value == -1;\n  ushort modified_result = *(ushort *)(result + 0xc);\n  if (is_result_invalid) {\n    modified_result &= 0xefff;\n  }\n  else {\n    *(int *)(result + 0x54) = result_value;\n    modified_result |= 0x1000;\n  }\n  *(ushort *)(result + 0xc) = modified_result;\n}",
            "called": [
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005662",
            "calling": [],
            "imported": true,
            "current_name": "execute_and_retrieve_result_08005662"
        },
        "FUN_080042ac": {
            "renaming": {
                "iVar1": "validation_result",
                "FUN_080042ac": "update_data_080042ac",
                "param_1": "data_ptr",
                "local_9": "new_data",
                "uVar2": "new_index"
            },
            "code": "void update_data_080042ac(int data_ptr){\n  int validation_result;\n  ushort new_index;\n  undefined new_data;\n\n  validation_result = validate_input_and_set_params_08003e18(data_ptr,&new_data);\n  if ((validation_result == 0) &&\n     (new_index = *(short *)(data_ptr + 100) + 1U & 0x3f, new_index != *(ushort *)(data_ptr + 0x66))) {\n    *(undefined *)(*(int *)(data_ptr + 0x60) + (uint)*(ushort *)(data_ptr + 100)) = new_data;\n    *(ushort *)(data_ptr + 100) = new_index;\n  }\n  return;\n}",
            "called": [
                "FUN_08003e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042ac",
            "calling": [],
            "imported": true,
            "current_name": "update_data_080042ac"
        },
        "FUN_08001864": {
            "renaming": {
                "param_1": "input",
                "FUN_08001864": "handle_input_08001864",
                "puVar1": "command"
            },
            "code": "uint32_t handle_input_08001864(uint32_t **input)\n{\n  uint32_t *command = input[0xb];\n  if (*(char *)((int)input + 0x3d) == '!') {\n    if (*(uint16_t *)((int)input + 0x2a) == 0) {\n      if (((command == (uint32_t *)0x4) || (command == (uint32_t *)0x8)) || (command == (uint32_t *)0xffff0000)) {\n        (*input)[1] &= 0xfffff8ff;\n        **input |= 0x200;\n        input[0xc] = (uint32_t *)0x0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08001718();\n        }\n        else {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_080015b6();\n        }\n      }\n      else {\n        (*input)[1] &= 0xfffff8ff;\n        input[0xc] = (uint32_t *)0x11;\n        *(char *)((int)input + 0x3e) = 0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        do_nothing_080015b6();\n      }\n    }\n    else {\n      command = input[9];\n      input[9] = (uint32_t *)((int)command + 1);\n      (*input)[4] = (uint32_t)*(char *)command;\n      *(uint16_t *)((int)input + 0x2a) -= 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001864",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "handle_input_08001864"
        },
        "FUN_08000f2c": {
            "renaming": {
                "param_1": "flag_value",
                "FUN_08000f2c": "set_flag_08000f2c",
                "DAT_08000f48": "flag_ptr"
            },
            "code": "void set_flag_08000f2c(int flag_value) {\n  if (flag_value != 4) {\n    *DAT_08000f48 = *DAT_08000f48 & 0xfffffffb;\n    return;\n  }\n  *DAT_08000f48 = *DAT_08000f48 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f2c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": true,
            "current_name": "set_flag_08000f2c"
        },
        "FUN_08000ec4": {
            "renaming": {
                "PTR_DAT_08000edc": "array_ptr",
                "param_1": "bit_index",
                "FUN_08000ec4": "set_bit_in_array_08000ec4",
                "DAT_08000edc": "array_base_address"
            },
            "code": "void set_bit_in_array_08000ec4(uint bit_index)\n{\n  if (bit_index >= 0) {\n    uint array_index = bit_index >> 5;\n    uint bit_offset = bit_index & 0x1f;\n    uint* PTR_DAT_08000edc = (uint*)(DAT_08000edc + array_index * 4);\n    uint bit_mask = 1 << bit_offset;\n    *PTR_DAT_08000edc = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ec4",
            "calling": [
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "imported": true,
            "current_name": "set_bit_in_array_08000ec4"
        },
        "FUN_08004338": {
            "renaming": {
                "PTR_DAT_08004360": "offset_pointer",
                "DAT_0800435c": "is_offset_calculated",
                "FUN_08004338": "check_and_calculate_offset_if_needed_08004338",
                "calculate_offset_08004240": "calculate_offset"
            },
            "code": "void check_and_calculate_offset_if_needed_08004338(void)\n{\n  if (DAT_0800435c != 0) {\n    calculate_offset(PTR_DAT_08004360);\n  }\n  return;\n}",
            "called": [
                "FUN_08004240"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004338",
            "calling": [
                "FUN_08004658"
            ],
            "imported": true,
            "current_name": "check_and_calculate_offset_if_needed_08004338"
        },
        "FUN_080005e0": {
            "renaming": {
                "PTR_": "",
                "DAT_": "",
                "FUN_080005e0": "trigger_software_interrupt_080005e0"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ trigger_software_interrupt_080005e0(DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_SDAT_PDAT_TDAT_RDAT__DAT_ODAT_PDAT_TDAT_RDAT__DAT_FDAT_PDAT_TDAT_RDAT__DAT_TDAT_PDAT_TDAT_RDAT__DAT_WDAT_PDAT_TDAT_RDAT__DAT_ADAT_PDAT_TDAT_RDAT__DAT_RDAT_PDAT_TDAT_RDAT__DAT_EDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_IDAT_PDAT_TDAT_RDAT__DAT_NDAT_PDAT_TDAT_RDAT__DAT_TDAT_PDAT_TDAT_RDAT__DAT_EDAT_PDAT_TDAT_RDAT__DAT_RDAT_PDAT_TDAT_RDAT__DAT_RDAT_PDAT_TDAT_RDAT__DAT_UDAT_PDAT_TDAT_RDAT__DAT_PDAT_PDAT_TDAT_RDAT__DAT_TDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_CDAT_PDAT_TDAT_RDAT__DAT_ODAT_PDAT_TDAT_RDAT__DAT_DDAT_PDAT_TDAT_RDAT__DAT_EDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_080005e4"
            ],
            "imported": true,
            "current_name": "trigger_software_interrupt_080005e0"
        },
        "FUN_080005e4": {
            "renaming": {
                "uVar1": "result",
                "param_1": "interrupt_param_1",
                "param_2": "interrupt_param_2",
                "param_3": "interrupt_param_3",
                "PTR_DAT_080005fc": "interrupt_flag",
                "param_4": "interrupt_param_4",
                "FUN_080005e4": "handle_software_interrupt_080005e4"
            },
            "code": "int handle_software_interrupt_080005e4(int interrupt_number, int param_1, int param_2, int param_3, int param_4) {\n  int PTR_DAT_080005fc = *(int *)PTR_DAT_080005fc;\n  if (PTR_DAT_080005fc != 0) {\n    return 0;\n  }\n  int result = trigger_software_interrupt_080005e0(interrupt_number, param_1, param_2, param_3, param_4);\n  return result;\n}",
            "called": [
                "FUN_080005e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e4",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": true,
            "current_name": "handle_software_interrupt_080005e4"
        },
        "FUN_0800076c": {
            "renaming": {
                "iVar2": "current_byte_index",
                "uVar1": "crc",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "decode_flag",
                "param_4": "decode_type",
                "uVar3": "byte_index",
                "FUN_0800076c": "calculate_crc_and_decode_0800076c"
            },
            "code": "void calculate_crc_and_decode_0800076c(int **data, int data_length, int decode_flag, int decode_type)\n{\n  int current_byte_index = data_length - 1;\n  int crc = calculate_crc16(data, current_byte_index);\n  data[0][current_byte_index + 9] = (char)(crc >> 8);\n  data[0][current_byte_index + 10] = (char)crc;\n  data[0][0x49] = current_byte_index + 2;\n  if (decode_flag > 1) {\n    decode_value(decode_flag, 1);\n  }\n  if (data[0][5] < 4) {\n    (*(void (**)(int **, int, char))(***data + 4))(data, (int)data + 9, data[0][0x49]);\n  }\n  if (decode_flag > 1) {\n    decode_value(decode_flag, 0);\n  }\n  if (data[0][5] < 4) {\n    while ((*(int (**)(void))(***data + 0xc))() >= 0) {}\n  }\n  data[0][0x49] = 0;\n  int value = get_value_and_return();\n  data[0][0x56] = (short)(value & 0xffff);\n  data[0][0x57] = (short)((value >> 16) & 0xffff);\n  data[0][0x52]++;\n}\n",
            "called": [
                "FUN_08000728",
                "FUN_08004204",
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800076c",
            "calling": [
                "FUN_08000b54",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000b04",
                "FUN_08000998",
                "FUN_08000a00"
            ],
            "imported": true,
            "current_name": "calculate_crc_and_decode_0800076c"
        },
        "FUN_080015b6": {
            "renaming": {
                "FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "\nvoid do_nothing_080015b6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b6",
            "calling": [
                "FUN_08001864",
                "FUN_0800171a"
            ],
            "imported": true,
            "current_name": "do_nothing_080015b6"
        },
        "FUN_08004460": {
            "renaming": {
                "FUN_08004460": "set_value_at_offset_08004460",
                "uVar1": "value",
                "param_1": "base_address",
                "param_2": "offset"
            },
            "code": "void set_value_at_offset_08004460(int base_address, uint offset) {\n  undefined2 value;\n  if (offset < 0x60) {\n    value = *(undefined2 *)(PTR_DAT_08004478 + offset * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(base_address + 300) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004460",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": true,
            "current_name": "set_value_at_offset_08004460"
        },
        "FUN_080015b8": {
            "renaming": {
                "FUN_080015b8": "do_nothing_080015b8"
            },
            "code": "\nvoid do_nothing_080015b8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b8",
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "imported": true,
            "current_name": "do_nothing_080015b8"
        },
        "FUN_08001198": {
            "renaming": {
                "FUN_08001198": "set_param_value_08001198",
                "param_1": "param_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "code": "void set_param_value_08001198(int param_address, int value, int is_shifted)\n{\n  if (is_shifted == 0) {\n    *(int *)(param_address + 0x18) = value << 0x10;\n    return;\n  }\n  *(int *)(param_address + 0x18) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001198",
            "calling": [
                "FUN_080034b6"
            ],
            "imported": true,
            "current_name": "set_param_value_08001198"
        },
        "FUN_08003138": {
            "renaming": {
                "FUN_08003138": "get_bit_08003138",
                "array_value": "",
                "*": "",
                "param_1": "bit_index",
                "uint": "",
                "param_2": "data_array",
                "PTR_": "",
                "bit_value": "",
                "DAT_": "",
                "bit_offset": "",
                "array_index": "",
                "array_ptr": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ get_bit_08003138(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_>DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003138",
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "imported": true,
            "current_name": "get_bit_08003138"
        },
        "FUN_08000300": {
            "renaming": {
                "FUN_08000300": "FUNC_08000300"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong FUNC_08000300(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  ulonglong uVar1;\n  uint *puVar2;\n  uint uVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 != 0) {\n        param_3 = param_3 << (uVar12 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        param_1 = param_1 << (uVar12 & 0xff);\n      }\n      uVar10 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar10;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar10 * uVar8) * 0x10000;\n      uVar6 = uVar8 * (param_3 & 0xffff);\n      uVar5 = uVar8;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar8 = (uVar7 - uVar6) / uVar10;\n      uVar7 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar10 * uVar8) * 0x10000;\n      uVar10 = uVar8 * (param_3 & 0xffff);\n      uVar6 = uVar8;\n      if (uVar7 <= uVar10 && uVar10 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar10 && uVar10 - uVar7 != 0)) {\n          uVar6 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar10;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n      puVar4 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 == 0) {\n        param_2 = param_2 - param_3;\n        uVar7 = param_3 >> 0x10;\n        uVar11 = param_3 & 0xffff;\n        puVar4 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar12 & 0xff);\n        uVar7 = param_3 >> 0x10;\n        uVar5 = param_2 >> (0x20 - uVar12 & 0xff);\n        uVar9 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        uVar6 = uVar5 / uVar7;\n        uVar11 = param_3 & 0xffff;\n        uVar10 = uVar9 >> 0x10 | (uVar5 - uVar7 * uVar6) * 0x10000;\n        uVar8 = uVar6 * uVar11;\n        param_1 = param_1 << (uVar12 & 0xff);\n        uVar5 = uVar6;\n        if (uVar10 <= uVar8 && uVar8 - uVar10 != 0) {\n          bVar13 = CARRY4(uVar10,param_3);\n          uVar10 = uVar10 + param_3;\n          uVar5 = uVar6 - 1;\n          if ((bVar13 == false) && (uVar10 <= uVar8 && uVar8 - uVar10 != 0)) {\n            uVar5 = uVar6 - 2;\n            uVar10 = uVar10 + param_3;\n          }\n        }\n        uVar3 = (uVar10 - uVar8) / uVar7;\n        param_2 = uVar9 & 0xffff | ((uVar10 - uVar8) - uVar7 * uVar3) * 0x10000;\n        uVar8 = uVar3 * uVar11;\n        uVar6 = uVar3;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar6 = uVar3 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar6 = uVar3 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        puVar4 = (uint *)(uVar6 | uVar5 << 0x10);\n      }\n      uVar10 = param_2 / uVar7;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar10) * 0x10000;\n      uVar6 = uVar11 * uVar10;\n      uVar5 = uVar10;\n      if (uVar8 <= uVar6 && uVar6 - uVar8 != 0) {\n        bVar13 = CARRY4(uVar8,param_3);\n        uVar8 = uVar8 + param_3;\n        uVar5 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar8 <= uVar6 && uVar6 - uVar8 != 0)) {\n          uVar5 = uVar10 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar10 = (uVar8 - uVar6) / uVar7;\n      uVar7 = param_1 & 0xffff | ((uVar8 - uVar6) - uVar7 * uVar10) * 0x10000;\n      uVar11 = uVar11 * uVar10;\n      uVar6 = uVar10;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar11;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar7 >> (uVar12 & 0xff);\n      param_5[1] = 0;\n      return CONCAT44(puVar4,puVar2);\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar4 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar4 = (uint *)count_leading_zeroes(param_4);\n    if (puVar4 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar4;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar4 & 0xff);\n      uVar9 = uVar5 >> 0x10;\n      uVar12 = param_2 >> (uVar8 & 0xff);\n      uVar11 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar4 & 0xff);\n      uVar10 = uVar12 / uVar9;\n      uVar7 = uVar11 >> 0x10 | (uVar12 - uVar9 * uVar10) * 0x10000;\n      uVar6 = uVar10 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar4 & 0xff);\n      param_1 = param_1 << ((uint)puVar4 & 0xff);\n      uVar12 = uVar10;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar12 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar12 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar10 = (uVar7 - uVar6) / uVar9;\n      uVar7 = uVar11 & 0xffff | ((uVar7 - uVar6) - uVar9 * uVar10) * 0x10000;\n      uVar9 = uVar10 * (uVar5 & 0xffff);\n      uVar6 = uVar10;\n      if (uVar7 <= uVar9 && uVar9 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar9 && uVar9 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar12 << 0x10;\n      uVar1 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar7 - uVar9,param_1) < uVar1) {\n        uVar1 = uVar1 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar12 = ((uVar7 - uVar9) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n        *param_5 = uVar12 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar4 & 0xff);\n        param_5[1] = uVar12 >> ((uint)puVar4 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar4, param_3 <= param_1)) {\n      bVar13 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar13;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return ZEXT48(puVar2);\n    }\n  }\n  return CONCAT44(puVar4,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000300",
            "calling": [
                "FUN_080002d0"
            ],
            "imported": true,
            "current_name": "FUNC_08000300"
        },
        "FUN_08002848": {
            "renaming": {
                "<<": "",
                ">>": "",
                " ": "_",
                "&": "",
                "(": "",
                ")": "",
                "*": "",
                "param_1": "data",
                "+": "",
                "uint": "uint32_t",
                "FUN_08002848": "update_bit_08002848",
                "1": "1u",
                "param_2": "bit_index",
                "PTR_": "",
                "param_3": "bit_value",
                "DAT_": "",
                "|": "",
                "=": "",
                "~": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ update_bit_08002848(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_~DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_mDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_<DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_&DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_08002864"
            ],
            "imported": true,
            "current_name": "update_bit_08002848"
        },
        "FUN_0800312c": {
            "renaming": {
                "*(byte *)(param_1 + 0x39)": "byte2",
                "param_1": "address",
                "FUN_0800312c": "combineBytes_0800312c",
                "*(byte *)(param_1 + 0x3a)": "byte1"
            },
            "code": "byte combineBytes_0800312c(int address){\n    byte byte1 = *(byte *)(address + 0x3a);\n    byte byte2 = *(byte *)(address + 0x39);\n    return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800312c",
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "imported": true,
            "current_name": "combineBytes_0800312c"
        },
        "FUN_080028f0": {
            "renaming": {
                "param_1": "bits",
                "param_2": "bit_position",
                "puVar1": "bit_array",
                "FUN_080028f0": "set_bit_and_clear_flags_080028f0"
            },
            "code": "uint set_bit_and_clear_flags_080028f0(uint **bits, uint bit_position)\n{\n  uint *bit_array = *bits;\n  set_bits_at_position(bit_array, bit_position, 0);\n  if (((bit_array[8] & 0x1111) == 0) && ((bit_array[8] & 0x444) == 0)) {\n    bit_array[17] &= 0xffff7fff;\n  }\n  bit_array = *bits;\n  if (((bit_array[8] & 0x1111) == 0) && ((bit_array[8] & 0x444) == 0)) {\n    *bit_array &= 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080028d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028f0",
            "calling": [
                "FUN_08003414"
            ],
            "imported": true,
            "current_name": "set_bit_and_clear_flags_080028f0"
        },
        "FUN_08000e30": {
            "renaming": {
                "PTR_DAT_08000e38": "pointer_to_value",
                "FUN_08000e30": "get_value_from_pointer_08000e30"
            },
            "code": "get_value_from_pointer_08000e30() {\n  return *(undefined4 *)PTR_DAT_08000e38;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e30",
            "calling": [
                "FUN_0800346c",
                "FUN_08001f9c",
                "FUN_08002488",
                "FUN_08002d0c",
                "FUN_08003d18",
                "FUN_0800201c",
                "FUN_08002dd0"
            ],
            "imported": true,
            "current_name": "get_value_from_pointer_08000e30"
        },
        "FUN_08000f56": {
            "renaming": {
                "param_1": "value_ptr",
                "*(undefined4 *)(param_1 + 0x10)": "*(int *)(value_ptr + 0x10)",
                "*(undefined *)(param_1 + 5)": "*(char *)(value_ptr + 5)",
                "*(undefined *)(param_1 + 4)": "*(char *)(value_ptr + 4)",
                "FUN_08000f56": "set_value_and_reset_08000f56"
            },
            "code": "int set_value_and_reset_08000f56(int value_ptr)\n{\n  if (value_ptr != 0) {\n    *(char *)(value_ptr + 4) = 2;\n    clear_bit_in_address_080033c8();\n    *(int *)(value_ptr + 0x10) = 0;\n    *(char *)(value_ptr + 4) = 0;\n    *(char *)(value_ptr + 5) = 0;\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_080033c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f56",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": true,
            "current_name": "set_value_and_reset_08000f56"
        },
        "FUN_0800295c": {
            "renaming": {
                "sVar1": "message_remaining",
                "param_1": "message_data",
                "pbVar2": "payload_byte",
                "FUN_0800295c": "parse_message_0800295c"
            },
            "code": "int parse_message_0800295c(int *message_data)\n{\n  char message_start = *(char *)(message_data + 0x39);\n  if (message_start != '!') {\n    return 2;\n  }\n  int message_type = message_data[2];\n  int *message_payload = (int *)(*message_data + 4);\n  if (message_type == 0x1000) {\n    *message_payload = *(unsigned short *)message_data[8] & 0x1ff;\n    if (message_data[4] == 0) {\n      message_data[8] = message_data[8] + 2;\n    }\n    else {\n      message_data[8] = message_data[8] + 1;\n    }\n  }\n  else {\n    char *payload_byte = (char *)message_data[8];\n    message_data[8] = (int)(payload_byte + 1);\n    *message_payload = (unsigned int)*payload_byte;\n  }\n  short message_remaining = *(short *)(message_data + 0x26) + -1;\n  *(short *)(message_data + 0x26) = message_remaining;\n  if (message_remaining == 0) {\n    *message_payload = (*message_payload & 0xffffff7f) | 0x40;\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800295c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": true,
            "current_name": "parse_message_0800295c"
        },
        "FUN_08003380": {
            "renaming": {
                "FUN_08003380": "check_value_08003380",
                "iVar1": "index",
                "param_1": "value",
                "param_2": "data_ptr",
                "param_3": "size",
                "param_4": "arg1"
            },
            "code": "int check_value_08003380(uint32_t value, uint32_t *data_ptr, uint32_t size, uint32_t arg1, uint32_t arg2) {\n  int index = find_value(value, data_ptr, size, arg1, arg2);\n  if ((index << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003380",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": true,
            "current_name": "check_value_08003380"
        },
        "FUN_08004110": {
            "renaming": {
                "iVar1": "result",
                "iVar3": "array_index",
                "FUN_08004110": "process_data_08004110",
                "puVar2": "array_pointer",
                "param_1": "index",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "data_array"
            },
            "code": "void process_data_08004110(uint index, undefined4 value1, undefined4 value2, undefined *data_array)\n{\n  int array_index;\n  undefined *array_pointer;\n  int result;\n  \n  if (index < 0x60) {\n    array_index = (int)*(short *)(PTR_DAT_080041a8 + index * 2);\n    array_pointer = PTR_DAT_080041a8;\n  }\n  else {\n    array_index = -1;\n    array_pointer = data_array;\n  }\n  if (array_index != -1) {\n    result = get_bit_value(array_index,PTR_DAT_080041ac,value2,array_pointer,data_array);\n    if (result != 0) {\n      result = find_value_in_array(array_index,PTR_DAT_080041b0);\n      if (result == 0) {\n        result = find_value_in_array(array_index,PTR_DAT_080041b4);\n        if (result != 0) {\n          update_bits_based_on_value(array_index);\n        }\n      }\n      else {\n        clear_bit_and_reset_values(array_index);\n      }\n      update_bit_in_array_at_index(array_index,PTR_DAT_080041ac);\n    }\n    switch(value1) {\n    case 0:\n      decode_and_update_registers(array_index,0);\n      break;\n    case 1:\n      decode_and_update_registers(array_index,1,0);\n      break;\n    case 2:\n      decode_and_update_registers(array_index,0,1);\n      break;\n    case 3:\n      decode_and_update_registers(array_index,0,2);\n    }\n    set_bit_at_index(array_index,PTR_DAT_080041b8);\n  }\n  return;\n}",
            "called": [
                "FUN_0800316c",
                "FUN_0800314e",
                "FUN_08003486",
                "FUN_08003414",
                "FUN_080033d8",
                "FUN_08003138",
                "FUN_0800355e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_08000600"
            ],
            "imported": true,
            "current_name": "process_data_08004110"
        },
        "FUN_08000ee0": {
            "renaming": {
                "FUN_08000ee0": "check_param_is_valid_08000ee0",
                "param_1": "param_value",
                "puVar1": "data_ptr"
            },
            "code": "int check_param_is_valid_08000ee0(int param_value) {\n  undefined4 *data_ptr;\n  data_ptr = DAT_08000f04;\n  if (param_value - 1U < 0x1000000) {\n    DAT_08000f04[1] = param_value - 1U;\n    *(undefined *)(DAT_08000f08 + 0x23) = 0xf0;\n    data_ptr[2] = 0;\n    *data_ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ee0",
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "imported": true,
            "current_name": "check_param_is_valid_08000ee0"
        },
        "FUN_080015ba": {
            "renaming": {
                "FUN_080015ba": "do_nothing_080015ba"
            },
            "code": "\nvoid do_nothing_080015ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015ba",
            "calling": [
                "FUN_08001684",
                "FUN_080015bc"
            ],
            "imported": true,
            "current_name": "do_nothing_080015ba"
        },
        "FUN_080015bc": {
            "renaming": {
                "param_1": "input_array",
                "FUN_080015bc": "process_input_080015bc",
                "pbVar2": "input_ptr",
                "cVar1": "current_char"
            },
            "code": "int process_input_080015bc(int *input_array)\n{\n  char current_char = *(char *)((int)input_array + 0x3d);\n  if (*(short *)((int)input_array + 0x2a) != 0) {\n    byte *input_ptr = (byte *)input_array[9];\n    input_array[9] = (int)(input_ptr + 1);\n    uint8_t input_value = (uint8_t)*input_ptr;\n    *(uint *)(*input_array + 0x10) = (uint)input_value;\n    *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n    if ((*(short *)((int)input_array + 0x2a) == 0) && (current_char == ')')) {\n      *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n      input_array[0xc] = 0x21;\n      *(undefined *)((int)input_array + 0x3d) = 0x28;\n      do_nothing();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015bc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": true,
            "current_name": "process_input_080015bc"
        },
        "FUN_08000f4c": {
            "renaming": {
                "FUN_08000f4c": "do_nothing_08000f4c"
            },
            "code": "\nvoid do_nothing_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4c",
            "calling": [
                "FUN_08000f4e"
            ],
            "imported": true,
            "current_name": "do_nothing_08000f4c"
        },
        "FUN_08000f4e": {
            "renaming": {
                "FUN_08000f4e": "do_nothing_and_return_08000f4e"
            },
            "code": "void do_nothing_and_return_08000f4e(void)\n{\n  do_nothing_08000f4c();\n  return;\n}",
            "called": [
                "FUN_08000f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4e",
            "calling": [
                "FUN_08003476"
            ],
            "imported": true,
            "current_name": "do_nothing_and_return_08000f4e"
        },
        "FUN_0800066c": {
            "renaming": {
                "*(undefined2 *)(param_1 + 0x56)": "*(short *)(data_address + 0x56)",
                "param_1": "data_address",
                "*(undefined *)(param_1 + 6)": "*(char *)(data_address + 6)",
                "*(undefined *)(param_1 + 4)": "*(char *)(data_address + 4)",
                "param_2": "data_value",
                "param_3": "data_limit",
                "param_4": "data_limit_value",
                "*(char *)(param_1 + 5)": "*(char *)(data_address + 5)",
                "FUN_0800066c": "set_data_0800066c"
            },
            "code": "void set_data_0800066c(int data_address, char data_value, int data_limit, char data_limit_value)\n{\n  *(char *)(data_address + 4) = data_value;\n  if (data_limit > 3) {\n    data_limit = 0;\n  }\n  *(char *)(data_address + 5) = (char)data_limit;\n  *(char *)(data_address + 6) = data_limit_value;\n  *(short *)(data_address + 0x56) = 1000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800066c",
            "calling": [
                "FUN_08000682"
            ],
            "imported": true,
            "current_name": "set_data_0800066c"
        },
        "FUN_080042e8": {
            "renaming": {
                "bVar2": "input_byte_masked",
                "bVar1": "input_counter_byte",
                "iVar3": "input_counter",
                "param_1": "input_index",
                "param_2": "input_char",
                "PTR_LAB_0800420c_1_08004334": "VALIDATION_FUNC_PTR",
                "FUN_080042e8": "process_input_080042e8"
            },
            "code": "int process_input_080042e8(int input_index, char input_char) {\n  *(char *)(input_index + 0x10) = 1;\n  int input_counter = *(unsigned short *)(input_index + 0x140) + 1;\n  char input_byte = (char)input_counter;\n  char input_byte_masked = input_byte & 0x7f;\n  if (input_counter == 0) {\n    input_byte_masked = -(-input_byte & 0x7f);\n  }\n  do {\n  } while (*(unsigned short *)(input_index + 0x142) == (unsigned short)input_byte_masked);\n  *(char *)(*(int *)(input_index + 0x13c) + (unsigned int)*(unsigned short *)(input_index + 0x140)) = input_char;\n  *(unsigned short *)(input_index + 0x140) = (unsigned short)input_byte_masked;\n  int is_input_valid = is_valid_input(input_index + 0xd4);\n  if (is_input_valid == 0) {\n    store_input_and_validate(input_index + 0xd4, PTR_LAB_0800420c_1_08004334);\n  }\n  return 1;\n}",
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e8",
            "calling": [],
            "imported": true,
            "current_name": "process_input_080042e8"
        },
        "FUN_080038d0": {
            "renaming": {
                "*(char *)(iVar1 + 0x5e)": "*(char *)(command_struct_ptr + COMMAND_FLAG_OFFSET)",
                "iVar1": "command_struct_ptr",
                "*(char *)(iVar1 + 0x2c)": "*(char *)(command_struct_ptr + COMMAND_PARAM_OFFSET)",
                "set_flags_08001578": "set_flags",
                "*(code **)(iVar1 + 0x60)": "*(code **)(command_struct_ptr + COMMAND_FUNCTION_OFFSET)",
                "param_1": "command_param",
                "subtract_four_from_param_0800387c": "get_command_struct_ptr",
                "iVar1 + 0x68": "command_struct_ptr + COMMAND_ARGUMENT_OFFSET",
                "FUN_080038d0": "execute_command_if_valid_080038d0",
                "**(code **)(iVar1 + 0x60)": "**(code **)(command_struct_ptr + COMMAND_FUNCTION_OFFSET)"
            },
            "code": "void execute_command_if_valid_080038d0(int command_param)\n{\n  int command_struct_ptr;\n  command_struct_ptr = get_command_struct_ptr();\n  if (((*(code **)(command_struct_ptr + COMMAND_FUNCTION_OFFSET) != (code *)0x0) && (*(char *)(command_struct_ptr + COMMAND_FLAG_OFFSET) == '\\x01')) && (*(char *)(command_struct_ptr + COMMAND_PARAM_OFFSET) != ' ')) {\n    (**(code **)(command_struct_ptr + COMMAND_FUNCTION_OFFSET))(command_struct_ptr + COMMAND_ARGUMENT_OFFSET);\n  }\n  set_flags(command_param);\n  return;\n}",
            "called": [
                "FUN_0800387c",
                "FUN_08001578"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038d0",
            "calling": [
                "FUN_08001bfc",
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "imported": true,
            "current_name": "execute_command_if_valid_080038d0"
        },
        "FUN_0800410c": {
            "renaming": {
                "FUN_0800410c": "return_one_0800410c"
            },
            "code": "int return_one_0800410c(void)\n{\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800410c",
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "imported": true,
            "current_name": "return_one_0800410c"
        },
        "FUN_0800260c": {
            "renaming": {
                "uVar1": "data",
                "DAT_08002624": "shift_data",
                "PTR_DAT_08002628": "shift_array",
                "FUN_0800260c": "get_data_from_pointer_shifted_0800260c"
            },
            "code": "uint get_data_from_pointer_shifted_0800260c(void)\n{\n  uint data = get_data_from_pointer_080025e0();\n  uint shift = *(int *)(DAT_08002624 + 8) << 0x10;\n  uint index = shift >> 0x1d;\n  uint shifted_data = data >> PTR_DAT_08002628[index];\n  return shifted_data;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800260c",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": true,
            "current_name": "get_data_from_pointer_shifted_0800260c"
        },
        "FUN_08004240": {
            "renaming": {
                "FUN_08004240": "calculate_offset_08004240",
                "*(short *)(param_1 + 0x138)": "first_value",
                "param_1": "base_address",
                "result": "result",
                "*(short *)(param_1 + 0x13a)": "second_value"
            },
            "code": "ushort calculate_offset_08004240(int base_address)\n{\n  ushort first_value = *(ushort *)(base_address + 0x138);\n  ushort second_value = *(ushort *)(base_address + 0x13a);\n  ushort result = (first_value + 0x40) - second_value;\n  return result & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004240",
            "calling": [
                "FUN_08004338"
            ],
            "imported": true,
            "current_name": "calculate_offset_08004240"
        },
        "FUN_080026c8": {
            "renaming": {
                "FUN_080026c8": "do_nothing_080026c8"
            },
            "code": "\nvoid do_nothing_080026c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026c8",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": true,
            "current_name": "do_nothing_080026c8"
        },
        "FUN_080041bc": {
            "renaming": {
                "iVar1": "bit_index",
                "FUN_080041bc": "decode_value_080041bc",
                "puVar3": "bit_mask",
                "param_1": "index",
                "param_2": "value",
                "param_3": "bit_count",
                "param_4": "data_buffer",
                "uVar2": "value_data",
                "uVar4": "value_index"
            },
            "code": "void decode_value_080041bc(uint index, undefined4 value, undefined4 bit_count, undefined *data_buffer){\n  int bit_index;\n  uint bit_mask;\n  uint value_index;\n  if (index < 0x60) {\n    value_index = (uint)*(short *)(PTR_DAT_080041fc + index * 2);\n    bit_mask = PTR_DAT_08004200;\n  }\n  else {\n    value_index = 0xffffffff;\n    bit_mask = 0;\n  }\n  if ((value_index != 0xffffffff) && (bit_index = get_bit_index(bit_mask, bit_count, data_buffer, value_index), bit_index != 0)) {\n    uint value_data = get_data_by_index((value_index << 0x18) >> 0x1c);\n    set_param_value_if_zero(value_data, 1 << (value_index & 0xf) & 0xffff, value);\n  }\n  return;\n}",
            "called": [
                "FUN_08003138",
                "FUN_080034b6",
                "FUN_0800318c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041bc",
            "calling": [
                "FUN_0800076c",
                "FUN_08000600",
                "FUN_080006b4"
            ],
            "imported": true,
            "current_name": "decode_value_080041bc"
        },
        "FUN_08004364": {
            "renaming": {
                "FUN_08004364": "initialize_struct_08004364",
                "*": "",
                "param_1": "struct_address",
                "int": "",
                "PTR_": "",
                "DAT_": "",
                "short": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ initialize_struct_08004364(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_8DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_5DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_5DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_5DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_6DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_6DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004364",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": true,
            "current_name": "initialize_struct_08004364"
        },
        "FUN_08000682": {
            "renaming": {
                "FUN_08000682": "set_data_and_return_value_08000682",
                "param_1": "value"
            },
            "code": "undefined4 set_data_and_return_value_08000682(undefined4 value)\n{\n  set_data();\n  return value;\n}",
            "called": [
                "FUN_0800066c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000682",
            "calling": [
                "FUN_08000690"
            ],
            "imported": true,
            "current_name": "set_data_and_return_value_08000682"
        },
        "FUN_08000e3c": {
            "renaming": {
                "DAT_08000e5c": "dat_e5c",
                "param_1": "param_value",
                "FUN_08000e3c": "set_param_bits_08000e3c",
                "PTR_DAT_08000e5c": "ptr_dat_e5c"
            },
            "code": "void set_param_bits_08000e3c(uint param_value)\n{\n  uint* PTR_DAT_08000e5c = (uint*) (DAT_08000e5c + 0xc);\n  uint current_value = *PTR_DAT_08000e5c;\n  uint masked_value = current_value & 0xf8ff;\n  uint new_value = (param_value & 7) << 8 | masked_value | 0x5fa0000;\n  *PTR_DAT_08000e5c = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e3c",
            "calling": [
                "FUN_08000de4",
                "FUN_08004648"
            ],
            "imported": true,
            "current_name": "set_param_bits_08000e3c"
        },
        "FUN_08002864": {
            "renaming": {
                "bVar1": "is_dat_080028d0",
                "puVar2": "bits_ptr",
                "param_1": "bits",
                "FUN_08002864": "update_and_check_bits_08002864",
                "param_2": "bit_position",
                "DAT_080028d0": "PTR_DAT_080028d0"
            },
            "code": "uint32_t update_and_check_bits_08002864(uint32_t **bits, uint32_t bit_position) {\n  bool is_dat_080028d0 = false;\n  uint32_t *bits_ptr = *bits;\n  if (bits_ptr == DAT_080028d0 || bits_ptr == DAT_080028d0 + 0x100) {\n    is_dat_080028d0 = true;\n  }\n  bool is_1111_zero = (bits_ptr[8] & 0x1111) == 0;\n  bool is_444_zero = (bits_ptr[8] & 0x444) == 0;\n  if (is_dat_080028d0 && is_1111_zero && is_444_zero) {\n    bits_ptr[0x11] &= 0xffff7fff;\n  }\n  if (is_1111_zero && is_444_zero) {\n    *bits_ptr &= 0xfffffffe;\n  }\n  *(uint8_t *)((int)bits + 0x39) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002864",
            "calling": [
                "FUN_08003414"
            ],
            "imported": true,
            "current_name": "update_and_check_bits_08002864"
        },
        "FUN_0800532c": {
            "renaming": {
                "param_1": "array",
                "FUN_0800532c": "initialize_array_with_values_0800532c",
                "param_2": "value1",
                "param_3": "value2",
                "puVar1": "fill_array_with_value"
            },
            "code": "void initialize_array_with_values_0800532c(undefined4 *array, undefined2 value1, undefined2 value2) {\n  array[0] = 0;\n  array[1] = 0;\n  array[2] = 0;\n  *(undefined2 *)(array + 3) = value1;\n  array[0x19] = 0;\n  *(undefined2 *)((int)array + 0xe) = value2;\n  array[4] = 0;\n  array[5] = 0;\n  array[6] = 0;\n  fill_array_with_value(array + 0x17, 0, 8);\n  array[9] = DAT_08005364;\n  array[10] = PTR_process_input_0800562a_1_08005368;\n  array[0xb] = PTR_execute_and_retrieve_result_08005662_1_0800536c;\n  array[8] = array;\n  array[0xc] = PTR_LAB_08005686_1_08005370;\n  return;\n}",
            "called": [
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800532c",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": true,
            "current_name": "initialize_array_with_values_0800532c"
        },
        "FUN_0800314e": {
            "renaming": {
                "uVar1": "shifted_index",
                "1 << (param_1 & 0xf)": "bit_mask",
                "param_1": "index",
                "param_2": "array",
                "FUN_0800314e": "set_bit_at_index_0800314e",
                "*(uint *)(param_2 + uVar1 * 4)": "element"
            },
            "code": "void set_bit_at_index_0800314e(uint index, int* array){\n  uint shifted_index = (index << 0x18) >> 0x1c;\n  uint* element = (uint*)(array + shifted_index * 4);\n  *element = *element | 1 << (index & 0xf);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": true,
            "current_name": "set_bit_at_index_0800314e"
        },
        "FUN_0800447c": {
            "renaming": {
                "uVar1": "value1",
                "param_1": "struct_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_0800447c": "initialize_struct_0800447c"
            },
            "code": "undefined4* initialize_struct_0800447c(undefined4 *struct_ptr, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined2 value1;\n  struct_ptr[1] = 0;\n  struct_ptr[2] = 1000;\n  *struct_ptr = PTR_PTR_FUN_080042e8_1_080044c8;\n  if (struct_ptr == (undefined4 *)PTR_DAT_080044cc) {\n    set_value_at_index(struct_ptr, 0x4c, param_3, PTR_DAT_080044cc, param_4);\n    set_value_at_offset(struct_ptr, 0x4d);\n  }\n  else {\n    value1 = find_value(param_2, PTR_DAT_080044d0);\n    *(undefined2 *)((int)struct_ptr + 0x12e) = value1;\n    value1 = find_value(param_2, PTR_DAT_080044d4);\n    *(undefined2 *)(struct_ptr + 0x4b) = value1;\n  }\n  initialize_struct_0800447c_08004364(struct_ptr);\n  return struct_ptr;\n}",
            "called": [
                "FUN_0800351e",
                "FUN_08004460",
                "FUN_08004364",
                "FUN_08004444"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800447c",
            "calling": [
                "FUN_080044d8"
            ],
            "imported": true,
            "current_name": "initialize_struct_0800447c"
        },
        "FUN_08004808": {
            "renaming": {
                "uVar1": "current_value",
                "puVar2": "assertion_failed_string",
                "param_1": "data",
                "param_2": "assertion_number",
                "param_3": "assertion_string",
                "param_4": "response",
                "FUN_08004808": "process_data_and_update_results_08004808",
                "uVar3": "response_and_value",
                "uVar4": "response_copy"
            },
            "code": "void process_data_and_update_results_08004808(const int data, const char* assertion_file, const int line_number, const int assertion_number, const int assertion_type, const char* assertion_string, const char* assertion_value, const int response) {\n  int current_value = *(int *)(*(int *)PTR_PTR_DAT_08004834 + 0xc);\n  const char* assertion_failed_string = PTR_s_assertion___s__failed__file___s__0800483c;\n  int response_copy = response;\n  if (assertion_value == (char *)0x0) goto LAB_0800482c;\n  do {\n    process_data_and_update_results_08004808_08004860(current_value, assertion_failed_string, response_copy, data, assertion_number, assertion_type, assertion_string, assertion_value);\n    long long response_and_value = process_input_and_wait_for_response_080051ac();\n    assertion_type = (int)(response_and_value >> 0x20);\n    current_value = (int)response_and_value;\nLAB_0800482c:\n    assertion_value = PTR_s__08004840;\n    assertion_string = PTR_s__08004840;\n  } while(true);\n}",
            "called": [
                "FUN_08004860",
                "FUN_080051ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004808",
            "calling": [
                "FUN_08004388"
            ],
            "imported": true,
            "current_name": "process_data_and_update_results_08004808"
        },
        "FUN_08000f72": {
            "renaming": {
                "**param_1": "**bits",
                "param_1": "bits",
                "param_2": "bit_position",
                "FUN_08000f72": "clear_bit_08000f72",
                "*(undefined *)(param_1 + 1)": "*(undefined *)(bits + 1)"
            },
            "code": "int clear_bit_08000f72(uint **bits, uint bit_position) {\n  **bits = **bits & ~(1 << (bit_position & 0xff));\n  *(undefined *)(bits + 1) = 1;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f72",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": true,
            "current_name": "clear_bit_08000f72"
        },
        "FUN_08001d00": {
            "renaming": {
                "update_data_08001440": "update_data",
                "iVar1": "data_pointer",
                "process_data_080019a0": "process_data",
                "add_character_to_string_0800160e": "add_character_to_string",
                "handle_input_08001864": "handle_input",
                "param_1": "input_data",
                "DAT_08001e5c": "DATA_FLAG_4",
                "uVar3": "data_type",
                "set_flags_08001256": "set_flags",
                "uVar2": "flags",
                "uVar4": "data_value",
                "DAT_08001e64": "DATA_FLAG_3",
                "set_param_value_0800124a": "set_parameter_value",
                "parse_input_0800171a": "parse_input",
                "process_input_08001bfc": "process_input_2",
                "DAT_08001e60": "DATA_FLAG_1",
                "increment_and_store_byte_08001420": "increment_and_store_byte",
                "DAT_08001e4c": "DATA_FLAG_2",
                "set_flags_080011c0": "set_flags_2",
                "remove_quotes_08001904": "remove_quotes",
                "process_input_080015bc": "process_input_3",
                "FUN_08001d00": "process_data_08001d00",
                "process_input_0800165a": "process_input_1",
                "DAT_08001e54": "DATA_VALUE_1",
                "DAT_08001e58": "DATA_FLAG_5"
            },
            "code": "void process_data_08001d00(int *input_data)\n{\n  int data_pointer = *input_data;\n  uint flags = *(uint *)(data_pointer + 0x14);\n  uint data_type = *(uint *)(data_pointer + 4);\n  uint data_value = *(uint *)(data_pointer + 0x18);\n  char input_char = *(char *)((int)input_data + 0x3e);\n  \n  if (input_char == '\\x10' || input_char == '@') {\n    if ((flags & 0x10001) == 0 || (data_type & 0x200) == 0) {\n      if ((flags & DAT_08001e60) == 0 || (data_type & 0x200) == 0) {\n        if ((flags & DAT_08001e4c) != 0 && (data_type & 0x200) != 0) {\n          set_flags(input_data);\n        }\n      }\n      else {\n        set_parameter_value(input_data);\n      }\n    }\n    else {\n      set_flags_2(input_data);\n    }\n    if ((data_value & DAT_08001e54) == 0) {\n      if ((DAT_08001e64 & flags) != 0 && (data_type & 0x400) != 0 && (DAT_08001e5c & flags) == 0) {\n        remove_quotes(input_data);\n        return;\n      }\n      if ((DAT_08001e5c & flags) != 0 && (data_type & 0x200) != 0) {\n        process_data_08001d00(input_data);\n        return;\n      }\n    }\n    else {\n      if ((DAT_08001e64 & flags) != 0 && (data_type & 0x400) != 0 && (DAT_08001e5c & flags) == 0) {\n        parse_input(input_data);\n        return;\n      }\n      if ((DAT_08001e5c & flags) != 0 && (data_type & 0x200) != 0) {\n        handle_input(input_data);\n        return;\n      }\n    }\n  }\n  else {\n    if ((DAT_08001e4c & flags) != 0 && (data_type & 0x200) != 0) {\n      process_input_1();\n      return;\n    }\n    if ((DAT_08001e58 & flags) != 0 && (data_type & 0x200) != 0) {\n      process_input_2(input_data);\n      return;\n    }\n    if ((data_value & DAT_08001e54) == 0) {\n      if ((DAT_08001e64 & flags) != 0 && (data_type & 0x400) != 0 && (DAT_08001e5c & flags) == 0) {\n        add_character_to_string(input_data);\n        return;\n      }\n      if ((DAT_08001e5c & flags) != 0 && (data_type & 0x200) != 0) {\n        update_data(input_data);\n      }\n    }\n    else {\n      if ((DAT_08001e64 & flags) != 0 && (data_type & 0x400) != 0 && (DAT_08001e5c & flags) == 0) {\n        process_input_3(input_data);\n        return;\n      }\n      if ((DAT_08001e5c & flags) != 0 && (data_type & 0x200) != 0) {\n        increment_and_store_byte(input_data);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08001904",
                "FUN_0800160e",
                "FUN_080015bc",
                "FUN_0800124a",
                "FUN_08001440",
                "FUN_08001420",
                "FUN_080019a0",
                "FUN_0800171a",
                "FUN_08001bfc",
                "FUN_080011c0",
                "FUN_08001864",
                "FUN_0800165a",
                "FUN_08001256"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d00",
            "calling": [],
            "imported": true,
            "current_name": "process_data_08001d00"
        }
    },
    "used_tokens": 181194,
    "layers": [
        [
            "FUN_080035fc",
            "FUN_080034f4",
            "FUN_08000fb4",
            "FUN_08002d72",
            "FUN_0800171a",
            "FUN_08004560",
            "FUN_08004cb0",
            "FUN_08003594",
            "FUN_08002940",
            "FUN_08004444",
            "FUN_080028d4",
            "FUN_08001460",
            "FUN_080035bc",
            "FUN_08001904",
            "FUN_0800387c",
            "FUN_080040fc",
            "FUN_08004860",
            "FUN_080011c0",
            "FUN_0800352e",
            "FUN_080008cc",
            "FUN_08002efa",
            "FUN_08004640",
            "FUN_08001256",
            "FUN_08004884",
            "FUN_080045be",
            "FUN_08000728",
            "FUN_0800124a",
            "FUN_08004094",
            "FUN_080033c8",
            "FUN_080031fc",
            "FUN_08001420",
            "FUN_08000218",
            "FUN_08000e60",
            "FUN_08002eb2",
            "FUN_0800316c",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080002d0",
            "FUN_08003f00",
            "FUN_08001440",
            "FUN_08000230",
            "FUN_08000f8c",
            "FUN_080001ac",
            "FUN_080040e0",
            "FUN_080048cc",
            "FUN_080040e4",
            "FUN_08003506",
            "FUN_080025e0",
            "FUN_080040e8",
            "FUN_08003750",
            "FUN_080014ec",
            "FUN_080048dc",
            "FUN_08001578",
            "FUN_08004844",
            "FUN_0800318c",
            "FUN_080040f8",
            "FUN_080019a0",
            "FUN_0800160e",
            "FUN_08000e18",
            "FUN_08001864",
            "FUN_08000f2c",
            "FUN_08000ec4",
            "FUN_080005e0",
            "FUN_08004460",
            "FUN_08001198",
            "FUN_08003138",
            "FUN_08002848",
            "FUN_0800312c",
            "FUN_08000e30",
            "FUN_0800295c",
            "FUN_08000ee0",
            "FUN_080015bc",
            "FUN_08000f4e",
            "FUN_0800066c",
            "FUN_0800410c",
            "FUN_08004240",
            "FUN_08004364",
            "FUN_08000e3c",
            "FUN_0800314e",
            "FUN_08000f72"
        ],
        [
            "FUN_08003dd0",
            "FUN_0800573c",
            "FUN_080056d4",
            "FUN_080007f0",
            "FUN_08003df4",
            "FUN_08003900",
            "FUN_080055d0",
            "FUN_080056f8",
            "FUN_08003476",
            "FUN_0800346c",
            "FUN_08003880",
            "FUN_080025ec",
            "FUN_08002d0c",
            "FUN_0800351e",
            "FUN_080034b6",
            "FUN_08003eac",
            "FUN_08005718",
            "FUN_0800376e",
            "FUN_08000d98",
            "FUN_08003f48",
            "FUN_0800340c",
            "FUN_08001f9c",
            "FUN_080045c8",
            "FUN_080047fe",
            "FUN_0800354a",
            "FUN_0800262c",
            "FUN_08003754",
            "FUN_0800500c",
            "FUN_080023b4",
            "FUN_08003f24",
            "FUN_08003486",
            "FUN_08004338",
            "FUN_080005e4",
            "FUN_080028f0",
            "FUN_08000f56",
            "FUN_080038d0",
            "FUN_0800260c",
            "FUN_08000682",
            "FUN_08002864",
            "FUN_0800532c"
        ],
        [
            "FUN_08003e54",
            "FUN_08002488",
            "FUN_08003cc8",
            "FUN_080054b4",
            "FUN_08004204",
            "FUN_08002f4c",
            "FUN_08004978",
            "FUN_08002f66",
            "FUN_08003e18",
            "FUN_08002dd0",
            "FUN_08004622",
            "FUN_08001ab0",
            "FUN_08005608",
            "FUN_0800268e",
            "FUN_08000690",
            "FUN_08000de4",
            "FUN_080026ce",
            "FUN_0800339c",
            "FUN_0800165a",
            "FUN_080051ac",
            "FUN_08001684",
            "FUN_080046b4",
            "FUN_08005662",
            "FUN_08003380",
            "FUN_080042e8",
            "FUN_080041bc",
            "FUN_0800447c"
        ],
        [
            "FUN_080006b4",
            "FUN_08000c8c",
            "FUN_080033d8",
            "FUN_08001bfc",
            "FUN_080044d8",
            "FUN_08002ffc",
            "FUN_08003414",
            "FUN_08004638",
            "FUN_0800377c",
            "FUN_08003d18",
            "FUN_080054fc",
            "FUN_08005374",
            "FUN_08001e68",
            "FUN_080042ac",
            "FUN_0800076c",
            "FUN_08004808"
        ],
        [
            "FUN_08000a4e",
            "FUN_08000998",
            "FUN_08000a7a",
            "FUN_080040ec",
            "FUN_080008e2",
            "FUN_080034ce",
            "FUN_08000b04",
            "FUN_08004388",
            "FUN_08000a00",
            "FUN_08004110",
            "FUN_08001d00"
        ],
        [
            "FUN_0800562a",
            "FUN_08000b54",
            "FUN_08000d8e",
            "FUN_08000600"
        ],
        [
            "FUN_08000c4c",
            "FUN_08000c64",
            "FUN_08004648"
        ],
        [
            "FUN_08004658"
        ],
        [
            "FUN_08000d3c"
        ],
        [
            "FUN_08005760"
        ],
        [
            "FUN_080047c0"
        ],
        [
            "FUN_080047d0"
        ],
        [
            "FUN_080011a4"
        ],
        [
            "FUN_08004fdc",
            "FUN_08005400",
            "FUN_080050d0",
            "FUN_080052cc"
        ],
        [
            "FUN_080053a0"
        ],
        [
            "FUN_08004a34"
        ],
        [
            "FUN_08004a60"
        ]
    ],
    "locked_functions": []
}