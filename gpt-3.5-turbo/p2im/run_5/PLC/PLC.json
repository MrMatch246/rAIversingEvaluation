{
    "functions": {
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "initialize_flag_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b8) */\n\nundefined4 initializeFlag_080001ac(undefined4 input)\n\n{\n  if ((char)DAT_20000104 == '\\0') {\n    DAT_20000104._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_080001ac": "initialize_flag_080001ac",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000230": {
            "entrypoint": "0x08000230",
            "current_name": "find_first_occurrence_08000230",
            "code": "\nbyte * find_first_occurrence_08000230(uint *array,uint value,uint length)\n\n{\n  byte byte_value;\n  char bit_0;\n  char bit_8;\n  char bit_16;\n  char bit_24;\n  byte *iterator;\n  uint *current_ptr;\n  byte *result_ptr;\n  uint alignment_offset;\n  uint aligned_length;\n  uint xor_result_lower;\n  uint xor_result_upper;\n  bool zero_byte_check;\n  bool bit_8_check;\n  bool bit_16_check;\n  bool bit_24_check;\n  \n  value = value & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x08000290:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      current_ptr = (uint *)((int)array + 1);\n      byte_value = *(byte *)array;\n      length = length - 1;\n      array = current_ptr;\n    } while (byte_value != value);\n  }\n  else {\n    alignment_offset = (uint)array & 7;\n    while( true ) {\n      if (alignment_offset == 0) {\n        alignment_offset = value | value << 8;\n        alignment_offset = alignment_offset | alignment_offset << 0x10;\n        aligned_length = length & 0xfffffff8;\n        do {\n          current_ptr = array + 2;\n          aligned_length = aligned_length - 8;\n          xor_result_lower = *array ^ alignment_offset;\n          xor_result_upper = array[1] ^ alignment_offset;\n          bit_0 = -((char)xor_result_lower == '\\0');\n          bit_8 = -((char)(xor_result_lower >> 8) == '\\0');\n          bit_16 = -((char)(xor_result_lower >> 0x10) == '\\0');\n          bit_24 = -((char)(xor_result_lower >> 0x18) == '\\0');\n          xor_result_lower = CONCAT13(bit_24,CONCAT12(bit_16,CONCAT11(bit_8,bit_0)));\n          zero_byte_check = (char)xor_result_upper != '\\0';\n          bit_8_check = (char)(xor_result_upper >> 8) != '\\0';\n          bit_16_check = (char)(xor_result_upper >> 0x10) != '\\0';\n          bit_24_check = (char)(xor_result_upper >> 0x18) != '\\0';\n          xor_result_upper = CONCAT13(bit_24_check * bit_24 - !bit_24_check,\n                            CONCAT12(bit_16_check * bit_16 - !bit_16_check,\n                                     CONCAT11(bit_8_check * bit_8 - !bit_8_check,zero_byte_check * bit_0 - !zero_byte_check)));\n          if (xor_result_upper != 0) {\n            if (xor_result_lower == 0) {\n              result_ptr = (byte *)((int)array + 5);\n              xor_result_lower = xor_result_upper;\n            }\n            else {\n              result_ptr = (byte *)((int)array + 1);\n            }\n            if ((xor_result_lower & 1) == 0) {\n              zero_byte_check = (xor_result_lower & 0x100) == 0;\n              iterator = result_ptr + 1;\n              if (zero_byte_check) {\n                zero_byte_check = (xor_result_lower & 0x18000) == 0;\n                iterator = result_ptr + 2;\n              }\n              result_ptr = iterator;\n              if (zero_byte_check) {\n                result_ptr = result_ptr + 1;\n              }\n            }\n            return result_ptr + -1;\n          }\n          array = current_ptr;\n        } while (aligned_length != 0);\n        length = length & 7;\n        goto joined_r0x08000290;\n      }\n      current_ptr = (uint *)((int)array + 1);\n      length = length - 1;\n      if (*(byte *)array == value) break;\n      alignment_offset = (uint)current_ptr & 7;\n      array = current_ptr;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_08000230": "find_first_occurrence_08000230",
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "bVar1": "byte_value",
                "cVar2": "bit_0",
                "cVar3": "bit_8",
                "cVar4": "bit_16",
                "cVar5": "bit_24",
                "pbVar6": "iterator",
                "puVar7": "current_ptr",
                "pbVar8": "result_ptr",
                "uVar9": "alignment_offset",
                "uVar10": "aligned_length",
                "uVar11": "xor_result_lower",
                "uVar12": "xor_result_upper",
                "bVar13": "zero_byte_check",
                "bVar14": "bit_8_check",
                "bVar15": "bit_16_check",
                "bVar16": "bit_24_check"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002d0": {
            "entrypoint": "0x080002d0",
            "current_name": "calculate_result_080002d0",
            "code": "\nundefined8 calculate_result_080002d0(int input_1,int input_2,int flag_1,int flag_2)\n\n{\n  undefined8 result;\n  \n  if ((flag_2 == 0) && (flag_1 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_2 = -1;\n      input_1 = -1;\n    }\n    return CONCAT44(input_2,input_1);\n  }\n  result = divide_with_remainder_08000300();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080002d0": "calculate_result_080002d0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "flag_1",
                "param_4": "flag_2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080023b4"
            ],
            "called": [
                "FUN_08000300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000300": {
            "entrypoint": "0x08000300",
            "current_name": "divide_with_remainder_08000300",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong divide_with_remainder_08000300(uint dividend,uint dividend_low,uint divisor,uint divisor_low,uint *quotient_and_remainder)\n\n{\n  ulonglong quotient;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  int shift_amount;\n  bool carry_check;\n  \n  if (divisor_low == 0) {\n    if (dividend_low < divisor) {\n      shift_amount = leading_zero_count(divisor);\n      if (shift_amount != 0) {\n        divisor = divisor << shift_amount;\n        dividend_low = dividend >> (0x20U - shift_amount & 0xff) | dividend_low << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      temp7 = divisor >> 0x10;\n      temp5 = dividend_low / temp7;\n      temp4 = dividend >> 0x10 | (dividend_low - temp7 * temp5) * 0x10000;\n      temp3 = temp5 * (divisor & 0xffff);\n      temp2 = temp5;\n      if (temp4 <= temp3 && temp3 - temp4 != 0) {\n        carry_check = check_carry(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp2 = temp5 - 1;\n        if ((carry_check == false) && (temp4 <= temp3 && temp3 - temp4 != 0)) {\n          temp2 = temp5 - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp5 = (temp4 - temp3) / temp7;\n      temp4 = dividend & 0xffff | ((temp4 - temp3) - temp7 * temp5) * 0x10000;\n      temp7 = temp5 * (divisor & 0xffff);\n      temp3 = temp5;\n      if (temp4 <= temp7 && temp7 - temp4 != 0) {\n        carry_check = check_carry(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp3 = temp5 - 1;\n        if ((carry_check == false) && (temp4 <= temp7 && temp7 - temp4 != 0)) {\n          temp3 = temp5 - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp4 = temp4 - temp7;\n      temp3 = temp3 | temp2 << 0x10;\n      temp2 = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = leading_zero_count(divisor);\n      if (shift_amount == 0) {\n        dividend_low = dividend_low - divisor;\n        temp4 = divisor >> 0x10;\n        temp8 = divisor & 0xffff;\n        temp2 = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        temp4 = divisor >> 0x10;\n        temp3 = dividend_low >> (0x20U - shift_amount & 0xff);\n        temp6 = dividend >> (0x20U - shift_amount & 0xff) | dividend_low << shift_amount;\n        temp2 = temp3 / temp4;\n        temp8 = divisor & 0xffff;\n        temp7 = temp6 >> 0x10 | (temp3 - temp4 * temp2) * 0x10000;\n        temp5 = temp2 * temp8;\n        dividend = dividend << shift_amount;\n        temp3 = temp2;\n        if (temp7 <= temp5 && temp5 - temp7 != 0) {\n          carry_check = check_carry(temp7,divisor);\n          temp7 = temp7 + divisor;\n          temp3 = temp2 - 1;\n          if ((carry_check == false) && (temp7 <= temp5 && temp5 - temp7 != 0)) {\n            temp3 = temp2 - 2;\n            temp7 = temp7 + divisor;\n          }\n        }\n        temp1 = (temp7 - temp5) / temp4;\n        dividend_low = temp6 & 0xffff | ((temp7 - temp5) - temp4 * temp1) * 0x10000;\n        temp5 = temp1 * temp8;\n        temp2 = temp1;\n        if (dividend_low <= temp5 && temp5 - dividend_low != 0) {\n          carry_check = check_carry(dividend_low,divisor);\n          dividend_low = dividend_low + divisor;\n          temp2 = temp1 - 1;\n          if ((carry_check == false) && (dividend_low <= temp5 && temp5 - dividend_low != 0)) {\n            temp2 = temp1 - 2;\n            dividend_low = dividend_low + divisor;\n          }\n        }\n        dividend_low = dividend_low - temp5;\n        temp2 = temp2 | temp3 << 0x10;\n      }\n      temp6 = dividend_low / temp4;\n      temp7 = dividend >> 0x10 | (dividend_low - temp4 * temp6) * 0x10000;\n      temp3 = temp8 * temp6;\n      temp5 = temp6;\n      if (temp7 <= temp3 && temp3 - temp7 != 0) {\n        carry_check = check_carry(temp7,divisor);\n        temp7 = temp7 + divisor;\n        temp5 = temp6 - 1;\n        if ((carry_check == false) && (temp7 <= temp3 && temp3 - temp7 != 0)) {\n          temp5 = temp6 - 2;\n          temp7 = temp7 + divisor;\n        }\n      }\n      temp6 = (temp7 - temp3) / temp4;\n      temp4 = dividend & 0xffff | ((temp7 - temp3) - temp4 * temp6) * 0x10000;\n      temp8 = temp8 * temp6;\n      temp3 = temp6;\n      if (temp4 <= temp8 && temp8 - temp4 != 0) {\n        carry_check = check_carry(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp3 = temp6 - 1;\n        if ((carry_check == false) && (temp4 <= temp8 && temp8 - temp4 != 0)) {\n          temp3 = temp6 - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp4 = temp4 - temp8;\n      temp3 = temp3 | temp5 << 0x10;\n    }\n    if (quotient_and_remainder != (uint *)0x0) {\n      *quotient_and_remainder = temp4 >> shift_amount;\n      quotient_and_remainder[1] = 0;\n      return CONCAT44(temp2,temp3);\n    }\n  }\n  else if (dividend_low < divisor_low) {\n    if (quotient_and_remainder != (uint *)0x0) {\n      *quotient_and_remainder = dividend;\n      quotient_and_remainder[1] = dividend_low;\n      return 0;\n    }\n    temp3 = 0;\n    temp2 = 0;\n  }\n  else {\n    shift_amount = leading_zero_count(divisor_low);\n    if (shift_amount != 0) {\n      temp7 = 0x20 - shift_amount;\n      temp2 = divisor >> (temp7 & 0xff) | divisor_low << shift_amount;\n      temp8 = temp2 >> 0x10;\n      temp3 = dividend_low >> (temp7 & 0xff);\n      temp1 = dividend >> (temp7 & 0xff) | dividend_low << shift_amount;\n      temp6 = temp3 / temp8;\n      temp5 = temp1 >> 0x10 | (temp3 - temp8 * temp6) * 0x10000;\n      temp4 = temp6 * (temp2 & 0xffff);\n      dividend = dividend << shift_amount;\n      temp3 = temp6;\n      if (temp5 <= temp4 && temp4 - temp5 != 0) {\n        carry_check = check_carry(temp5,temp2);\n        temp5 = temp5 + temp2;\n        temp3 = temp6 - 1;\n        if ((carry_check == false) && (temp5 <= temp4 && temp4 - temp5 != 0)) {\n          temp3 = temp6 - 2;\n          temp5 = temp5 + temp2;\n        }\n      }\n      temp6 = (temp5 - temp4) / temp8;\n      temp5 = temp1 & 0xffff | ((temp5 - temp4) - temp8 * temp6) * 0x10000;\n      temp8 = temp6 * (temp2 & 0xffff);\n      temp4 = temp6;\n      if (temp5 <= temp8 && temp8 - temp5 != 0) {\n        carry_check = check_carry(temp5,temp2);\n        temp5 = temp5 + temp2;\n        temp4 = temp6 - 1;\n        if ((carry_check == false) && (temp5 <= temp8 && temp8 - temp5 != 0)) {\n          temp4 = temp6 - 2;\n          temp5 = temp5 + temp2;\n        }\n      }\n      temp4 = temp4 | temp3 << 0x10;\n      quotient = (ulonglong)temp4 * (ulonglong)(divisor << shift_amount);\n      if (CONCAT44(temp5 - temp8,dividend) < quotient) {\n        quotient = quotient - CONCAT44(temp2,divisor << shift_amount);\n        temp4 = temp4 - 1;\n      }\n      if (quotient_and_remainder != (uint *)0x0) {\n        temp3 = ((temp5 - temp8) - (int)(quotient >> 0x20)) - (uint)(dividend < (uint)quotient);\n        *quotient_and_remainder = temp3 << (temp7 & 0xff) | dividend - (uint)quotient >> shift_amount;\n        quotient_and_remainder[1] = temp3 >> shift_amount;\n      }\n      return (ulonglong)temp4;\n    }\n    if ((divisor_low < dividend_low) || (divisor <= dividend)) {\n      carry_check = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_low = (dividend_low - divisor_low) - (uint)carry_check;\n      temp3 = 1;\n    }\n    else {\n      temp3 = 0;\n    }\n    temp2 = 0;\n    if (quotient_and_remainder != (uint *)0x0) {\n      *quotient_and_remainder = dividend;\n      quotient_and_remainder[1] = dividend_low;\n      return (ulonglong)temp3;\n    }\n  }\n  return CONCAT44(temp2,temp3);\n}\n\n",
            "renaming": {
                "FUN_08000300": "divide_with_remainder_08000300",
                "param_1": "dividend",
                "param_2": "dividend_low",
                "param_3": "divisor",
                "param_4": "divisor_low",
                "param_5": "quotient_and_remainder",
                "uVar1": "quotient",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "temp8",
                "iVar10": "shift_amount",
                "bVar11": "carry_check",
                "CARRY4": "check_carry",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "FUN_080002d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "perform_system_call_080005e0",
            "code": "\nvoid performSystemCall_080005e0(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "perform_system_call_080005e0"
            },
            "calling": [
                "FUN_080005e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e4": {
            "entrypoint": "0x080005e4",
            "current_name": "perform_system_call_080005e4",
            "code": "\nundefined4 perform_system_call_080005e4(undefined4 input,undefined4 unused1,undefined4 unused2,undefined4 output)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000120 != 0) {\n    return 0;\n  }\n  result = perform_system_call_080005e4_080005e0(1,input,0,0,output);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080005e4": "perform_system_call_080005e4",
                "param_1": "input",
                "param_2": "unused1",
                "param_3": "unused2",
                "param_4": "output",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000600": {
            "entrypoint": "0x08000600",
            "current_name": "initialize_and_process_parameters_08000600",
            "code": "\nvoid initialize_and_process_parameters_08000600(int **parameter_list,undefined4 serial_port_parameter)\n\n{\n  char parameter_value;\n  int result;\n  \n  parameter_value = *(char *)((int)parameter_list + 5);\n  if (parameter_value == '\\x02') {\n    *parameter_list = &DAT_20000338;\n  }\n  else if (parameter_value == '\\x03') {\n    *parameter_list = &DAT_20000338;\n  }\n  else if (parameter_value == '\\x01') {\n    *parameter_list = &DAT_20000338;\n  }\n  else {\n    *parameter_list = &DAT_20000338;\n  }\n  initialize_serial_port(*parameter_list,serial_port_parameter,6);\n  if (1 < *(byte *)((int)parameter_list + 6)) {\n    process_parameter(*(byte *)((int)parameter_list + 6),1);\n    update_param_value(*(undefined *)((int)parameter_list + 6),0);\n  }\n  do {\n    result = (**(code **)(**parameter_list + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)parameter_list + 0x49) = 0;\n  *(undefined *)((int)parameter_list + 0x4a) = 0;\n  *(undefined2 *)(parameter_list + 0x15) = 0;\n  *(undefined2 *)((int)parameter_list + 0x52) = 0;\n  *(undefined2 *)(parameter_list + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000600": "initialize_and_process_parameters_08000600",
                "param_1": "parameter_list",
                "param_2": "serial_port_parameter",
                "cVar1": "parameter_value",
                "iVar2": "result",
                "initialize_serial_port_08004388": "initialize_serial_port",
                "process_parameter_08004110": "process_parameter",
                "update_param_value_080041bc": "update_param_value"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08004110",
                "FUN_08004388"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800066c": {
            "entrypoint": "0x0800066c",
            "current_name": "initialize_data_0800066c",
            "code": "\nvoid initializeData_0800066c(int dataAddress,undefined value1,int value2,undefined value3)\n\n{\n  *(undefined *)(dataAddress + 4) = value1;\n  if (3 < value2) {\n    value2 = 0;\n  }\n  *(char *)(dataAddress + 5) = (char)value2;\n  *(undefined *)(dataAddress + 6) = value3;\n  *(undefined2 *)(dataAddress + 0x56) = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800066c": "initialize_data_0800066c",
                "param_1": "dataAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08000682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000682": {
            "entrypoint": "0x08000682",
            "current_name": "initialize_and_return_08000682",
            "code": "\nundefined4 initialize_and_return_08000682(undefined4 input_param)\n\n{\n  initialize_data();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08000682": "initialize_and_return_08000682",
                "param_1": "input_param",
                "initialize_data_0800066c": "initialize_data"
            },
            "calling": [
                "FUN_08000690"
            ],
            "called": [
                "FUN_0800066c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000690": {
            "entrypoint": "0x08000690",
            "current_name": "check_and_initialize_08000690",
            "code": "\nvoid check_and_initialize_08000690(int input_condition,int input_value,undefined4 param_3,undefined4 param_4)\n\n{\n  if (input_condition != 1) {\n    return;\n  }\n  if (input_value == 0xffff) {\n    initialize_and_return_08000682(&DAT_20000124,1,0,0,param_4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000690": "check_and_initialize_08000690",
                "param_1": "input_condition",
                "param_2": "input_value"
            },
            "calling": [],
            "called": [
                "FUN_08000682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006b4": {
            "entrypoint": "0x080006b4",
            "current_name": "process_param_080006b4",
            "code": "\nint processParam_080006b4(int **param)\n\n{\n  bool isOverflow;\n  undefined paramValue;\n  int result;\n  byte count;\n  \n  if (1 < *(byte *)((int)param + 6)) {\n    updateParamValue(*(byte *)((int)param + 6),0);\n  }\n  *(undefined *)((int)param + 0x49) = 0;\n  if (*(byte *)((int)param + 5) < 4) {\n    isOverflow = false;\n    while (result = (**(code **)(**param + 8))(), result != 0) {\n      count = *(byte *)((int)param + 0x49);\n      paramValue = (**(code **)(**param + 0xc))();\n      *(undefined *)((int)param + count + 9) = paramValue;\n      count = *(char *)((int)param + 0x49) + 1;\n      *(byte *)((int)param + 0x49) = count;\n      if (0x3f < count) {\n        isOverflow = true;\n      }\n    }\n  }\n  else {\n    isOverflow = false;\n  }\n  *(short *)(param + 0x14) = *(short *)(param + 0x14) + 1;\n  if (isOverflow) {\n    *(short *)(param + 0x15) = *(short *)(param + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)param + 0x49);\n}\n\n",
            "renaming": {
                "FUN_080006b4": "process_param_080006b4",
                "param_1": "param",
                "bVar1": "isOverflow",
                "uVar2": "paramValue",
                "iVar3": "result",
                "bVar4": "count",
                "update_param_value_080041bc": "updateParamValue"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000728": {
            "entrypoint": "0x08000728",
            "current_name": "calculate_checksum_08000728",
            "code": "\nuint calculate_checksum_08000728(int data_start,int data_length)\n\n{\n  byte bit_index;\n  uint checksum;\n  uint lsb;\n  uint i;\n  \n  checksum = 0xffff;\n  for (i = 0; (int)i < data_length; i = i + 1 & 0xff) {\n    checksum = checksum ^ *(byte *)(data_start + i + 9);\n    for (bit_index = 1; bit_index < 9; bit_index = bit_index + 1) {\n      lsb = checksum & 1;\n      checksum = checksum >> 1;\n      if (lsb != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n    }\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_08000728": "calculate_checksum_08000728",
                "param_1": "data_start",
                "param_2": "data_length",
                "bVar1": "bit_index",
                "uVar2": "checksum",
                "uVar3": "lsb",
                "uVar4": "i"
            },
            "calling": [
                "FUN_0800076c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800076c": {
            "entrypoint": "0x0800076c",
            "current_name": "update_checksum_and_values_0800076c",
            "code": "\nvoid updateChecksumAndValues_0800076c(int **data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 checksum;\n  int value;\n  uint index;\n  \n  index = (uint)*(byte *)((int)data + 0x49);\n  checksum = calculate_checksum_08000728(data,index,param3,param4,param4);\n  *(char *)((int)data + index + 9) = (char)((ushort)checksum >> 8);\n  index = index + 1 & 0xff;\n  *(char *)((int)data + index + 9) = (char)checksum;\n  *(char *)((int)data + 0x49) = (char)index + '\\x01';\n  if (1 < *(byte *)((int)data + 6)) {\n    update_param_value_080041bc(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    update_param_value_080041bc(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      value = (**(code **)(**data + 0xc))();\n    } while (-1 < value);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  value = initialize_data_08004204();\n  data[0x17] = (int *)(value + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800076c": "update_checksum_and_values_0800076c",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "checksum",
                "iVar2": "value",
                "uVar3": "index"
            },
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_08000b54",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08000728",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080007f0": {
            "entrypoint": "0x080007f0",
            "current_name": "check_condition_080007f0",
            "code": "\nundefined4 check_condition_080007f0(int input,undefined4 flag,uint value,undefined4 param)\n\n{\n  bool isMatch;\n  byte combinedByte;\n  char result1;\n  char result2;\n  int combinedValue1;\n  uint iteration;\n  int combinedValue2;\n  \n  iteration = 0;\n  do {\n    if (7 < iteration) {\n      isMatch = false;\nLAB_0800080a:\n      if (!isMatch) {\n        *(short *)(input + 0x54) = *(short *)(input + 0x54) + 1;\n        return 1;\n      }\n      combinedValue2 = *(byte *)(input + 10) - 1;\n      switch(*(byte *)(input + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        result1 = combine_bits_08004640(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),value,\n                             combinedValue2,param);\n        result2 = combine_bits_08004640(*(undefined *)(input + 0xd),*(undefined *)(input + 0xe));\n        if (*(byte *)(input + 0x60) < (byte)(result2 + result1)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        combinedValue2 = combine_bits_08004640(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),value,\n                             combinedValue2,param);\n        if ((uint)*(byte *)(input + 0x60) < (uint)(combinedValue2 << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        combinedByte = combine_bits_08004640(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),value,\n                             combinedValue2,param);\n        if (*(byte *)(input + 0x60) < combinedByte) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    value = (uint)*(byte *)(input + 10);\n    if ((byte)(&DAT_08005a10)[iteration] == value) {\n      isMatch = true;\n      goto LAB_0800080a;\n    }\n    iteration = iteration + 1 & 0xff;\n  } while( true );\nswitchD_08000816_caseD_1:\n  combinedValue2 = combine_bits_08004640(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),value,combinedValue2,\n                       param);\n  combinedValue1 = combine_bits_08004640(*(undefined *)(input + 0xd),*(undefined *)(input + 0xe));\n  if ((uint)*(byte *)(input + 0x60) <\n      (((uint)(combinedValue2 << 0xc) >> 0x10) + ((uint)(combinedValue1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080007f0": "check_condition_080007f0",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "param",
                "bVar1": "isMatch",
                "bVar2": "combinedByte",
                "cVar3": "result1",
                "cVar4": "result2",
                "iVar5": "combinedValue1",
                "uVar6": "iteration",
                "iVar7": "combinedValue2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008cc": {
            "entrypoint": "0x080008cc",
            "current_name": "copy_and_modify_data_080008cc",
            "code": "\nvoid copyAndModifyData_080008cc(int arrayPtr,undefined newData)\n\n{\n  *(undefined *)(arrayPtr + 9) = *(undefined *)(arrayPtr + 4);\n  *(byte *)(arrayPtr + 10) = *(byte *)(arrayPtr + 10) ^ 0x80;\n  *(undefined *)(arrayPtr + 0xb) = newData;\n  *(undefined *)(arrayPtr + 0x49) = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080008cc": "copy_and_modify_data_080008cc",
                "param_1": "arrayPtr",
                "param_2": "newData"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008e2": {
            "entrypoint": "0x080008e2",
            "current_name": "process_data_080008e2",
            "code": "\nint processData_080008e2(int data,int source,undefined4 param1,undefined4 param2)\n\n{\n  int combinedBits;\n  uint bitValue;\n  uint loopIndex;\n  uint bitIndex;\n  char tempChar;\n  int tempVar;\n  \n  combinedBits = combine_bits_08004640(*(undefined *)(data + 0xb),*(undefined *)(data + 0xc),param1,param2,\n                       param2);\n  bitValue = combine_bits_08004640(*(undefined *)(data + 0xd),*(undefined *)(data + 0xe));\n  tempChar = (char)((bitValue << 0x15) >> 0x18);\n  if ((bitValue & 7) != 0) {\n    tempChar = tempChar + '\\x01';\n  }\n  *(char *)(data + 0xb) = tempChar;\n  *(undefined *)(data + 0x49) = 3;\n  bitIndex = 0;\n  for (loopIndex = 0; (int)loopIndex < (int)bitValue; loopIndex = loopIndex + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(source + ((loopIndex + combinedBits) * 0x100000 >> 0x18) * 2) >>\n         (loopIndex + combinedBits & 0xf) & 1U) == 0) {\n      tempVar = (uint)*(byte *)(data + 0x49) + data;\n      *(byte *)(tempVar + 9) = *(byte *)(tempVar + 9) & ~(byte)(1 << bitIndex);\n    }\n    else {\n      tempVar = (uint)*(byte *)(data + 0x49) + data;\n      *(byte *)(tempVar + 9) = *(byte *)(tempVar + 9) | (byte)(1 << bitIndex);\n    }\n    bitIndex = bitIndex + 1 & 0xff;\n    if (7 < bitIndex) {\n      *(char *)(data + 0x49) = *(char *)(data + 0x49) + '\\x01';\n      bitIndex = 0;\n    }\n  }\n  if ((bitValue & 7) != 0) {\n    *(char *)(data + 0x49) = *(char *)(data + 0x49) + '\\x01';\n  }\n  tempChar = *(char *)(data + 0x49);\n  update_checksum_and_values_0800076c(data);\n  return (int)(char)(tempChar + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_080008e2": "process_data_080008e2",
                "param_1": "data",
                "param_2": "source",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "combinedBits",
                "uVar2": "bitValue",
                "uVar3": "loopIndex",
                "uVar4": "bitIndex",
                "cVar5": "tempChar",
                "iVar6": "tempVar"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "combine_and_shift_bits_08000998",
            "code": "\nint combineAndShiftBits_08000998(int inputBufferAddress,int dataBufferAddress,undefined4 param3,undefined4 param4)\n\n{\n  byte byteVar1;\n  char charVar1;\n  byte byteVar2;\n  byte byteVar3;\n  uint loopIndex;\n  uint updatedLoopIndex;\n  \n  byteVar2 = combine_bits_08004640(*(undefined *)(inputBufferAddress + 0xb),*(undefined *)(inputBufferAddress + 0xc),param3,param4,\n                       param4);\n  byteVar3 = combine_bits_08004640(*(undefined *)(inputBufferAddress + 0xd),*(undefined *)(inputBufferAddress + 0xe));\n  *(byte *)(inputBufferAddress + 0xb) = byteVar3 << 1;\n  *(undefined *)(inputBufferAddress + 0x49) = 3;\n  for (loopIndex = (uint)byteVar2; loopIndex < (uint)byteVar2 + (uint)byteVar3; loopIndex = loopIndex + 1 & 0xff) {\n    byteVar1 = *(byte *)(inputBufferAddress + 0x49);\n    *(char *)(inputBufferAddress + (uint)byteVar1 + 9) = (char)((ushort)*(undefined2 *)(dataBufferAddress + loopIndex * 2) >> 8)\n    ;\n    updatedLoopIndex = byteVar1 + 1 & 0xff;\n    charVar1 = (char)updatedLoopIndex;\n    *(char *)(inputBufferAddress + 0x49) = charVar1;\n    *(undefined *)(inputBufferAddress + updatedLoopIndex + 9) = *(undefined *)(dataBufferAddress + loopIndex * 2);\n    *(char *)(inputBufferAddress + 0x49) = charVar1 + '\\x01';\n  }\n  charVar1 = *(char *)(inputBufferAddress + 0x49);\n  update_checksum_and_values_0800076c(inputBufferAddress);\n  return (int)(char)(charVar1 + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000998": "combine_and_shift_bits_08000998",
                "param_1": "inputBufferAddress",
                "param_2": "dataBufferAddress",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteVar1",
                "cVar2": "charVar1",
                "bVar3": "byteVar2",
                "bVar4": "byteVar3",
                "uVar5": "loopIndex",
                "uVar6": "updatedLoopIndex"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a00": {
            "entrypoint": "0x08000a00",
            "current_name": "update_bits_08000a00",
            "code": "\nundefined4 update_bits_08000a00(int data_addr,int output_addr,undefined4 input_val1,undefined4 input_val2)\n\n{\n  uint combined_bits;\n  uint shifted_bits;\n  \n  combined_bits = combine_bits_08004640(*(undefined *)(data_addr + 0xb),*(undefined *)(data_addr + 0xc),input_val1,input_val2,\n                       input_val2);\n  shifted_bits = (combined_bits << 0x14) >> 0x18;\n  if (*(char *)(data_addr + 0xd) == -1) {\n    *(ushort *)(output_addr + shifted_bits * 2) =\n         (ushort)(1 << (combined_bits & 0xf)) | *(ushort *)(output_addr + shifted_bits * 2);\n  }\n  else {\n    *(ushort *)(output_addr + shifted_bits * 2) =\n         *(ushort *)(output_addr + shifted_bits * 2) & ~(ushort)(1 << (combined_bits & 0xf));\n  }\n  *(undefined *)(data_addr + 0x49) = 6;\n  update_checksum_and_values(data_addr);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a00": "update_bits_08000a00",
                "param_1": "data_addr",
                "param_2": "output_addr",
                "param_3": "input_val1",
                "param_4": "input_val2",
                "uVar1": "combined_bits",
                "uVar2": "shifted_bits",
                "update_checksum_and_values_0800076c": "update_checksum_and_values"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a4e": {
            "entrypoint": "0x08000a4e",
            "current_name": "update_values_and_checksum_08000a4e",
            "code": "\nundefined4 updateValuesAndChecksum_08000a4e(int sourceAddress,int destinationAddress)\n\n{\n  byte combinedBits1;\n  undefined2 combinedBits2;\n  \n  combinedBits1 = combine_bits_08004640(*(undefined *)(sourceAddress + 0xb),*(undefined *)(sourceAddress + 0xc));\n  combinedBits2 = combine_bits_08004640(*(undefined *)(sourceAddress + 0xd),*(undefined *)(sourceAddress + 0xe));\n  *(undefined2 *)(destinationAddress + (uint)combinedBits1 * 2) = combinedBits2;\n  *(undefined *)(sourceAddress + 0x49) = 6;\n  update_checksum_and_values_0800076c(sourceAddress);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a4e": "update_values_and_checksum_08000a4e",
                "param_1": "sourceAddress",
                "param_2": "destinationAddress",
                "bVar1": "combinedBits1",
                "uVar2": "combinedBits2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a7a": {
            "entrypoint": "0x08000a7a",
            "current_name": "update_bitmask_and_values_08000a7a",
            "code": "\nundefined4 update_bitmask_and_values_08000a7a(int input_address,int output_address,undefined4 param_3,undefined4 param_4)\n\n{\n  int combined_param1_param2;\n  int combined_param3_param4;\n  uint loop_counter;\n  uint bit_shift_counter;\n  uint bitmask_offset;\n  uint bitmask_index;\n  uint bitmask_byte_offset;\n  \n  combined_param1_param2 = combine_bits_08004640(*(undefined *)(input_address + 0xb),*(undefined *)(input_address + 0xc),param_3,param_4,\n                       param_4);\n  combined_param3_param4 = combine_bits_08004640(*(undefined *)(input_address + 0xd),*(undefined *)(input_address + 0xe));\n  bit_shift_counter = 0;\n  bitmask_byte_offset = 7;\n  for (loop_counter = 0; (int)loop_counter < combined_param3_param4; loop_counter = loop_counter + 1 & 0xffff) {\n    bitmask_index = (loop_counter + combined_param1_param2) * 0x100000 >> 0x18;\n    bitmask_offset = loop_counter + combined_param1_param2 & 0xf;\n    if (((int)(uint)*(byte *)(input_address + bitmask_byte_offset + 9) >> bit_shift_counter & 1U) == 0) {\n      *(ushort *)(output_address + bitmask_index * 2) = *(ushort *)(output_address + bitmask_index * 2) & ~(ushort)(1 << bitmask_offset);\n    }\n    else {\n      *(ushort *)(output_address + bitmask_index * 2) = (ushort)(1 << bitmask_offset) | *(ushort *)(output_address + bitmask_index * 2);\n    }\n    bit_shift_counter = bit_shift_counter + 1 & 0xff;\n    if (7 < bit_shift_counter) {\n      bitmask_byte_offset = bitmask_byte_offset + 1 & 0xff;\n      bit_shift_counter = 0;\n    }\n  }\n  *(undefined *)(input_address + 0x49) = 6;\n  update_checksum_and_values_0800076c(input_address);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a7a": "update_bitmask_and_values_08000a7a",
                "param_1": "input_address",
                "param_2": "output_address",
                "iVar1": "combined_param1_param2",
                "iVar2": "combined_param3_param4",
                "uVar3": "loop_counter",
                "uVar4": "bit_shift_counter",
                "uVar5": "bitmask_offset",
                "uVar6": "bitmask_index",
                "uVar7": "bitmask_byte_offset"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b04": {
            "entrypoint": "0x08000b04",
            "current_name": "combine_bits_and_update_checksum_08000b04",
            "code": "\nint combine_bits_and_update_checksum_08000b04(int data_pointer,int output_pointer)\n\n{\n  byte byte1;\n  byte byte2;\n  char checksum;\n  undefined2 combined_bits;\n  uint index;\n  \n  byte1 = *(byte *)(data_pointer + 0xc);\n  byte2 = *(byte *)(data_pointer + 0xe);\n  *(undefined *)(data_pointer + 0xd) = 0;\n  *(byte *)(data_pointer + 0xe) = byte2;\n  *(undefined *)(data_pointer + 0x49) = 6;\n  for (index = 0; index < byte2; index = index + 1 & 0xff) {\n    combined_bits = combine_bits_08004640(*(undefined *)(index * 2 + data_pointer + 0x10),\n                         *(undefined *)(data_pointer + (index + 4) * 2 + 9));\n    *(undefined2 *)(output_pointer + (byte1 + index) * 2) = combined_bits;\n  }\n  checksum = *(char *)(data_pointer + 0x49);\n  update_checksum_and_values_0800076c(data_pointer);\n  return (int)(char)(checksum + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000b04": "combine_bits_and_update_checksum_08000b04",
                "param_1": "data_pointer",
                "param_2": "output_pointer",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "cVar3": "checksum",
                "uVar4": "combined_bits",
                "uVar5": "index"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b54": {
            "entrypoint": "0x08000b54",
            "current_name": "process_param_08000b54",
            "code": "\nint processParam_08000b54(int **paramArray,int *data,undefined4 param)\n\n{\n  byte byteVar;\n  int intVar1;\n  uint unsignedVar;\n  int result;\n  \n  paramArray[0x13] = data;\n  *(char *)(paramArray + 0x18) = (char)param;\n  if (*(byte *)((int)paramArray + 5) < 4) {\n    byteVar = (**(code **)(**paramArray + 8))();\n    unsignedVar = (uint)byteVar;\n  }\n  if (unsignedVar == 0) {\n    result = 0;\n  }\n  else if ((int)unsignedVar < 8) {\n    result = 0;\n  }\n  else {\n    result = process_param_080006b4(paramArray);\n    *(char *)(paramArray + 2) = (char)result;\n    if (*(char *)((int)paramArray + 9) == *(char *)(paramArray + 1)) {\n      intVar1 = check_condition_080007f0(paramArray);\n      if (intVar1 < 1) {\n        intVar1 = initialize_data_08004204();\n        paramArray[0x17] = (int *)((uint)*(ushort *)((int)paramArray + 0x56) + intVar1);\n        *(undefined *)(paramArray + 2) = 0;\n        switch(*(undefined *)((int)paramArray + 10)) {\n        case 1:\n        case 2:\n          result = process_data_080008e2(paramArray,data,param);\n          break;\n        case 3:\n        case 4:\n          result = combine_and_shift_bits_08000998(paramArray,data,param);\n          break;\n        case 5:\n          result = update_bits_08000a00(paramArray,data,param);\n          break;\n        case 6:\n          result = update_values_and_checksum_08000a4e(paramArray,data,param);\n          break;\n        case 0xf:\n          result = update_bitmask_and_values_08000a7a(paramArray,data,param);\n          break;\n        case 0x10:\n          result = combine_bits_and_update_checksum_08000b04(paramArray,data,param);\n        }\n      }\n      else {\n        if (intVar1 != 0xff) {\n          copy_and_modify_data_080008cc(paramArray,intVar1);\n          update_checksum_and_values_0800076c(paramArray);\n        }\n        *(char *)(paramArray + 2) = (char)intVar1;\n        result = (int)(char)intVar1;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000b54": "process_param_08000b54",
                "param_1": "paramArray",
                "param_2": "data",
                "param_3": "param",
                "bVar1": "byteVar",
                "iVar2": "intVar1",
                "unaff_r5": "unsignedVar",
                "iVar3": "result"
            },
            "calling": [
                "FUN_08000c64"
            ],
            "called": [
                "FUN_08000a7a",
                "FUN_0800076c",
                "FUN_080008cc",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_080007f0",
                "FUN_080006b4",
                "FUN_080008e2",
                "FUN_08000a00",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c4c": {
            "entrypoint": "0x08000c4c",
            "current_name": "initialize_and_process_system_call_08000c4c",
            "code": "\nvoid initialize_and_process_system_call_08000c4c(void)\n\n{\n  execute_system_call(0);\n  setup_and_handle_parameters(&DAT_20000124,0x4b00);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c4c": "initialize_and_process_system_call_08000c4c",
                "perform_system_call_080005e4": "execute_system_call",
                "initialize_and_process_parameters_08000600": "setup_and_handle_parameters"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_080005e4",
                "FUN_08000600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c64": {
            "entrypoint": "0x08000c64",
            "current_name": "process_data_08000c64",
            "code": "\nvoid processData_08000c64(void)\n\n{\n  undefined4 param1;\n  \n  process_param_08000b54(&DAT_20000124,&DAT_20000004,0x10,param1,param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c64": "process_data_08000c64",
                "in_r3": "param1"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c8c": {
            "entrypoint": "0x08000c8c",
            "current_name": "initialize_system_08000c8c",
            "code": "\n\n\nvoid initialize_system_08000c8c(void)\n\n{\n  uint data_value;\n  undefined4 enable_flag;\n  undefined4 address_1;\n  undefined4 constant_1;\n  undefined4 address_2;\n  undefined4 constant_2;\n  undefined4 value_1;\n  undefined4 constant_3;\n  undefined4 value_2;\n  undefined4 mask;\n  undefined4 constant_4;\n  undefined4 counter;\n  undefined4 size_1;\n  undefined4 size_2;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  enable_flag = 1;\n  address_1 = 0x50000;\n  constant_1 = 2;\n  address_2 = 0x400000;\n  constant_2 = 8;\n  value_1 = 0x150;\n  constant_3 = 2;\n  value_2 = 7;\n  check_and_control_system_0800201c(&enable_flag);\n  check_data_availability_08001f9c();\n  mask = 0xf;\n  constant_4 = 2;\n  counter = 0;\n  size_1 = 0x1400;\n  size_2 = 0x1000;\n  configure_device_08002488(&mask,5);\n  data_value = get_data_080025e0();\n  initialize_values_08000ee0(data_value / 1000);\n  update_data_state_08000f2c(4);\n  update_character_08000e60(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "local_54": "enable_flag",
                "local_50": "address_1",
                "local_3c": "constant_1",
                "local_38": "address_2",
                "local_34": "constant_2",
                "local_30": "value_1",
                "local_2c": "constant_3",
                "local_28": "value_2",
                "local_24": "mask",
                "local_20": "constant_4",
                "local_1c": "counter",
                "local_18": "size_1",
                "local_14": "size_2",
                "uVar1": "data_value"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_080025e0",
                "FUN_08002488",
                "FUN_08000f2c",
                "FUN_08000ee0",
                "FUN_0800201c",
                "FUN_08001f9c",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08000d3c",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000104; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8006034);\n  }\n  for (puVar2 = &DAT_20000104; puVar2 < &DAT_20000678; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_system_080035bc();\n  execute_functions_08004884();\n  UNRECOVERED_JUMPTABLE = (code *)0x8000d72;\n  system_call_processing_loop_08004658();\n                    /* WARNING: Could not recover jumptable at 0x08000d72. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004658",
                "FUN_08004884",
                "FUN_080035bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d8e": {
            "entrypoint": "0x08000d8e",
            "current_name": "initialize_system_08000d8e",
            "code": "\nvoid initialize_system_08000d8e(void)\n\n{\n  initialize_system_08000d8e();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d8e": "initialize_system_08000d8e",
                "initialize_system_080034ce": "initialize_system"
            },
            "calling": [
                "FUN_08004648"
            ],
            "called": [
                "FUN_080034ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d96": {
            "entrypoint": "0x08000d96",
            "current_name": "FUNC_08000d96",
            "code": "\nvoid FUNC_08000d96(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d96": "FUNC_08000d96"
            },
            "calling": [
                "FUN_08000de4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000d98": {
            "entrypoint": "0x08000d98",
            "current_name": "validate_and_update_character_08000d98",
            "code": "\nundefined4 validateAndUpdateCharacter_08000d98(uint characterValue)\n\n{\n  int result;\n  \n  result = initialize_values_08000ee0(DAT_2000002c / (1000 / DAT_20000024));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < characterValue) {\n    return 1;\n  }\n  updateCharacter(0xffffffff,characterValue,0);\n  DAT_20000028 = characterValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000d98": "validate_and_update_character_08000d98",
                "param_1": "characterValue",
                "iVar1": "result",
                "update_character_08000e60": "updateCharacter"
            },
            "calling": [
                "FUN_08002488",
                "FUN_08000de4"
            ],
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000de4": {
            "entrypoint": "0x08000de4",
            "current_name": "initialize_system_08000de4",
            "code": "\n\n\nundefined4 initialize_system_08000de4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  set_data_register(3);\n  validate_and_update_character(0xf);\n  FUNC_08000d96();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000de4": "initialize_system_08000de4",
                "update_data_register_08000e3c": "set_data_register",
                "validate_and_update_character_08000d98": "validate_and_update_character"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000d98",
                "FUN_08000d96",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e18": {
            "entrypoint": "0x08000e18",
            "current_name": "update_sum_08000e18",
            "code": "\nvoid updateSum_08000e18(void)\n\n{\n  DAT_20000670 = (uint)DAT_20000024 + DAT_20000670;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e18": "update_sum_08000e18"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e30": {
            "entrypoint": "0x08000e30",
            "current_name": "get_data_08000e30",
            "code": "\nundefined4 get_data_08000e30(void)\n\n{\n  return DAT_20000670;\n}\n\n",
            "renaming": {
                "FUN_08000e30": "get_data_08000e30"
            },
            "calling": [
                "FUN_08002d0c",
                "FUN_08002488",
                "FUN_0800346c",
                "FUN_0800201c",
                "FUN_08003d18",
                "FUN_08002dd0",
                "FUN_08001f9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e3c": {
            "entrypoint": "0x08000e3c",
            "current_name": "update_data_register_08000e3c",
            "code": "\n\n\nvoid updateDataRegister_08000e3c(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e3c": "update_data_register_08000e3c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08004648",
                "FUN_08000de4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e60": {
            "entrypoint": "0x08000e60",
            "current_name": "update_character_08000e60",
            "code": "\n\n\nvoid updateCharacter_08000e60(uint characterIndex,uint bitmask1,uint bitmask2)\n\n{\n  uint maskedValue;\n  uint reversedShiftCount;\n  \n  maskedValue = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  reversedShiftCount = 7 - maskedValue;\n  if (3 < reversedShiftCount) {\n    reversedShiftCount = 4;\n  }\n  if (maskedValue + 4 < 7) {\n    maskedValue = 0;\n  }\n  else {\n    maskedValue = maskedValue - 3;\n  }\n  maskedValue = (bitmask1 & (1 << (reversedShiftCount & 0xff)) - 1U) << (maskedValue & 0xff) |\n          (1 << (maskedValue & 0xff)) - 1U & bitmask2;\n  if ((int)characterIndex < 0) {\n    *(char *)((characterIndex & 0xf) + 0xe000ed14) = (char)(maskedValue << 4);\n  }\n  else {\n    *(char *)(characterIndex + 0xe000e400) = (char)(maskedValue << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e60": "update_character_08000e60",
                "param_1": "characterIndex",
                "param_2": "bitmask1",
                "param_3": "bitmask2",
                "uVar1": "maskedValue",
                "uVar2": "reversedShiftCount"
            },
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98",
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ec4": {
            "entrypoint": "0x08000ec4",
            "current_name": "set_bit_08000ec4",
            "code": "\nvoid setBit_08000ec4(uint bitPosition)\n\n{\n  if (-1 < (int)bitPosition) {\n    *(int *)((bitPosition >> 5) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ec4": "set_bit_08000ec4",
                "param_1": "bitPosition"
            },
            "calling": [
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ee0": {
            "entrypoint": "0x08000ee0",
            "current_name": "initialize_values_08000ee0",
            "code": "\n\n\nundefined4 initialize_values_08000ee0(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000ee0": "initialize_values_08000ee0",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f0c": {
            "entrypoint": "0x08000f0c",
            "current_name": "set_bit_to1_08000f0c",
            "code": "\nvowordOffsetd setBitTo1_08000f0c(uwordOffsetnt bitIndex)\n\n{\n  wordOffsetf (-1 < (wordOffsetnt)bitIndex) {\n    *(wordOffsetnt *)(((bitIndex >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f0c": "set_bit_to1_08000f0c",
                "param_1": "bitIndex",
                "i": "wordOffset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f2c": {
            "entrypoint": "0x08000f2c",
            "current_name": "update_data_state_08000f2c",
            "code": "\n\n\nvoid updateDataState_08000f2c(int input)\n\n{\n  if (input != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f2c": "update_data_state_08000f2c",
                "param_1": "input"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4c": {
            "entrypoint": "0x08000f4c",
            "current_name": "FUNC_08000f4c",
            "code": "\nvoid FUNC_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4c": "FUNC_08000f4c"
            },
            "calling": [
                "FUN_08000f4e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4e": {
            "entrypoint": "0x08000f4e",
            "current_name": "execute_initial_setup_08000f4e",
            "code": "\nvoid executeInitialSetup_08000f4e(void)\n\n{\n  FUNC_08000f4c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4e": "execute_initial_setup_08000f4e"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [
                "FUN_08000f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f56": {
            "entrypoint": "0x08000f56",
            "current_name": "set_memory_reset_08000f56",
            "code": "\nundefined4 setMemoryReset_08000f56(int inputValue)\n\n{\n  if (inputValue != 0) {\n    *(undefined *)(inputValue + 4) = 2;\n    clearMemoryBits();\n    *(undefined4 *)(inputValue + 0x10) = 0;\n    *(undefined *)(inputValue + 4) = 0;\n    *(undefined *)(inputValue + 5) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000f56": "set_memory_reset_08000f56",
                "param_1": "inputValue",
                "clear_memory_bits_080033c8": "clearMemoryBits"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_080033c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f72": {
            "entrypoint": "0x08000f72",
            "current_name": "clear_bit_and_set_flag_08000f72",
            "code": "\nundefined4 clearBitAndSetFlag_08000f72(uint **ptrToPointer,uint inputBit)\n\n{\n  **ptrToPointer = **ptrToPointer & ~(1 << (inputBit & 0xff));\n  *(undefined *)(ptrToPointer + 1) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f72": "clear_bit_and_set_flag_08000f72",
                "param_1": "ptrToPointer",
                "param_2": "inputBit"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f8c": {
            "entrypoint": "0x08000f8c",
            "current_name": "update_param_value_08000f8c",
            "code": "\nundefined4 updateParamValue_08000f8c(uint **paramList)\n\n{\n  if (*(char *)((int)paramList + 0x35) != '\\x02') {\n    result = (uint *)0x80;\n    return 1;\n  }\n  *(undefined *)((int)paramList + 0x35) = 5;\n  **paramList = **paramList & 0xfffffffe;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f8c": "update_param_value_08000f8c",
                "param_1": "paramList",
                "param_1[0x15]": "result"
            },
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fb4": {
            "entrypoint": "0x08000fb4",
            "current_name": "update_registers_08000fb4",
            "code": "\n\n\nvoid updateRegisters_08000fb4(uint *registerArray,uint *inputArray)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  uint loopIndex;\n  uint tempVar4;\n  uint tempVar5;\n  int index1;\n  uint tempVar7;\n  int index2;\n  \n  for (loopIndex = 0; loopIndex < 0x10; loopIndex = loopIndex + 1) {\n    tempVar2 = 1 << (loopIndex & 0xff);\n    tempVar4 = tempVar2 & *inputArray;\n    tempVar1 = _DAT_40013c0c;\n    if (tempVar2 == tempVar4) {\n      if ((inputArray[1] == 2) || (inputArray[1] == 0x12)) {\n        index1 = (loopIndex >> 3) + 8;\n        index2 = (loopIndex & 7) << 2;\n        registerArray[index1] = registerArray[index1] & ~(0xf << index2) | inputArray[4] << index2;\n      }\n      tempVar7 = loopIndex << 1;\n      tempVar1 = ~(3 << (tempVar7 & 0xff));\n      *registerArray = *registerArray & tempVar1 | (inputArray[1] & 3) << (tempVar7 & 0xff);\n      tempVar5 = inputArray[1];\n      if (((tempVar5 - 1 < 2) || (tempVar5 == 0x11)) || (tempVar5 == 0x12)) {\n        registerArray[2] = registerArray[2] & tempVar1 | inputArray[3] << (tempVar7 & 0xff);\n        registerArray[1] = registerArray[1] & ~tempVar2 | ((inputArray[1] << 0x1b) >> 0x1f) << (loopIndex & 0xff);\n      }\n      registerArray[3] = tempVar1 & registerArray[3] | inputArray[2] << (tempVar7 & 0xff);\n      tempVar1 = _DAT_40013c0c;\n      if ((inputArray[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        index2 = (loopIndex & 3) << 2;\n        if (registerArray == (uint *)0x40020000) {\n          index1 = 0;\n        }\n        else if (registerArray == (uint *)0x40020400) {\n          index1 = 1;\n        }\n        else if (registerArray == (uint *)0x40020800) {\n          index1 = 2;\n        }\n        else if (registerArray == (uint *)0x40020c00) {\n          index1 = 3;\n        }\n        else if (registerArray == (uint *)0x40021000) {\n          index1 = 4;\n        }\n        else if (registerArray == (uint *)0x40021400) {\n          index1 = 5;\n        }\n        else if (registerArray == (uint *)0x40021800) {\n          index1 = 6;\n        }\n        else if (registerArray == (uint *)0x40021c00) {\n          index1 = 7;\n        }\n        else if (registerArray == (uint *)0x40022000) {\n          index1 = 8;\n        }\n        else if (registerArray == (uint *)0x40022400) {\n          index1 = 9;\n        }\n        else {\n          index1 = 10;\n        }\n        *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800) =\n             *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800) & ~(0xf << index2) | index1 << index2;\n        tempVar1 = ~tempVar4;\n        tempVar2 = _DAT_40013c00 & tempVar1;\n        if ((inputArray[1] & 0x10000) != 0) {\n          tempVar2 = tempVar4 | _DAT_40013c00;\n        }\n        tempVar5 = tempVar1 & _DAT_40013c04;\n        if ((inputArray[1] & 0x20000) != 0) {\n          tempVar5 = tempVar4 | _DAT_40013c04;\n        }\n        tempVar7 = tempVar1 & _DAT_40013c08;\n        if ((inputArray[1] & 0x100000) != 0) {\n          tempVar7 = tempVar4 | _DAT_40013c08;\n        }\n        _DAT_40013c00 = tempVar2;\n        _DAT_40013c04 = tempVar5;\n        _DAT_40013c08 = tempVar7;\n        tempVar1 = tempVar1 & _DAT_40013c0c;\n        if ((inputArray[1] & 0x200000) != 0) {\n          tempVar1 = tempVar4 | _DAT_40013c0c;\n        }\n      }\n    }\n    _DAT_40013c0c = tempVar1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fb4": "update_registers_08000fb4",
                "param_1": "registerArray",
                "param_2": "inputArray",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "loopIndex",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "iVar6": "index1",
                "uVar7": "tempVar7",
                "iVar8": "index2"
            },
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001198": {
            "entrypoint": "0x08001198",
            "current_name": "update_param_value_08001198",
            "code": "\nvoid updateParamValue_08001198(int baseAddress,int newValue,int shiftValue)\n\n{\n  if (shiftValue == 0) {\n    *(int *)(baseAddress + 0x18) = newValue << 0x10;\n    return;\n  }\n  *(int *)(baseAddress + 0x18) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001198": "update_param_value_08001198",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "param_3": "shiftValue"
            },
            "calling": [
                "FUN_080034b6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011a4": {
            "entrypoint": "0x080011a4",
            "current_name": "handle_data_if_flag_set_080011a4",
            "code": "\n\n\nvoid handle_data_if_flag_set_080011a4(uint flag)\n\n{\n  if ((_DAT_40013c14 & flag) != 0) {\n    _DAT_40013c14 = flag;\n    execute_handle_data_check();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011a4": "handle_data_if_flag_set_080011a4",
                "param_1": "flag",
                "check_and_execute_handle_data_080047d0": "execute_handle_data_check"
            },
            "calling": [],
            "called": [
                "FUN_080047d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011c0": {
            "entrypoint": "0x080011c0",
            "current_name": "update_status_080011c0",
            "code": "\nundefined4 updateStatus_080011c0(int *data)\n\n{\n  if (*(char *)((int)data + 0x3e) == '@') {\n    if (data[0x14] == 0) {\n      *(uint *)(*data + 0x10) = data[0x11] & 0xfe;\n    }\n    else {\n      *(uint *)(*data + 0x10) = data[0x11] & 0xffU | 1;\n    }\n  }\n  else if (data[4] == 0x4000) {\n    if (*(char *)((int)data + 0x3d) == '!') {\n      *(uint *)(*data + 0x10) = data[0x11] & 0xfe;\n    }\n    else {\n      *(uint *)(*data + 0x10) = data[0x11] & 0xffU | 1;\n    }\n  }\n  else if (data[0x14] == 0) {\n    *(uint *)(*data + 0x10) = (uint)(data[0x11] << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (data[0x14] == 1) {\n    *(uint *)(*data + 0x10) = (uint)(data[0x11] << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080011c0": "update_status_080011c0",
                "param_1": "data",
                "param_1[0x14]": "data[0x14]",
                "param_1[0x11]": "data[0x11]",
                "param_1[4]": "data[4]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800124a": {
            "entrypoint": "0x0800124a",
            "current_name": "update_value_in_memory_0800124a",
            "code": "\nundefined4 updateValueInMemory_0800124a(int *inputArray)\n\n{\n  *(uint *)(*inputArray + 0x10) = inputArray[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800124a": "update_value_in_memory_0800124a",
                "param_1": "inputArray"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001256": {
            "entrypoint": "0x08001256",
            "current_name": "process_flags_08001256",
            "code": "\nundefined4 processFlags_08001256(uint **parameters)\n\n{\n  uint *currentValue;\n  \n  currentValue = parameters[0xb];\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((flag1 != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((flag1 == (uint *)0x0) && (flag2 == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      flag1 = (uint *)((int)flag1 + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (currentValue == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          currentValue = *parameters;\n          if ((currentValue[1] & 0x800) == 0) {\n            *currentValue = *currentValue | 0x200;\n          }\n          else {\n            *currentValue = *currentValue & 0xfffffbff;\n          }\n        }\n        else if (((currentValue == (uint *)0x4) || (currentValue == (uint *)0x8)) ||\n                (parameters[0xc] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        currentValue = *parameters;\n        if ((currentValue[1] & 0x800) != 0) {\n          currentValue[1] = currentValue[1] | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        currentValue = *parameters;\n        if ((currentValue[1] & 0x800) != 0) {\n          currentValue[1] = currentValue[1] | 0x1000;\n        }\n      }\n      flag1 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001256": "process_flags_08001256",
                "param_1": "parameters",
                "puVar1": "currentValue",
                "param_1[0x14]": "flag1",
                "param_1[4]": "flag2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001420": {
            "entrypoint": "0x08001420",
            "current_name": "update_data_08001420",
            "code": "\nundefined4 updateData_08001420(int *data)\n\n{\n  byte *byteData;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    byteData = (byte *)data[9];\n    data[9] = (int)(byteData + 1);\n    *(uint *)(*data + 0x10) = (uint)*byteData;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001420": "update_data_08001420",
                "param_1": "data",
                "pbVar1": "byteData"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001440": {
            "entrypoint": "0x08001440",
            "current_name": "update_array_value_08001440",
            "code": "\nundefined4 updateArrayValue_08001440(int *array)\n\n{\n  undefined *arrayElementPtr;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    arrayElementPtr = (undefined *)array[9];\n    array[9] = (int)(arrayElementPtr + 1);\n    *arrayElementPtr = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001440": "update_array_value_08001440",
                "param_1": "array",
                "puVar1": "arrayElementPtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "validate_input_08001460",
            "code": "\nundefined4 validateInput_08001460(uint **inputArray,uint *param2,int param3,uint *param4)\n\n{\n  undefined4 result;\n  uint *ptrVar;\n  \n  if (*(char *)((int)inputArray + 0x3d) == '(') {\n    if (param2 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (param3 == 0) {\n      result = 1;\n    }\n    else if (*(char *)(inputArray + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(inputArray + 0xf) = 1;\n      ptrVar = *inputArray;\n      if ((*ptrVar & 1) == 0) {\n        *ptrVar = *ptrVar | 1;\n      }\n      **inputArray = **inputArray & 0xfffff7ff;\n      *(undefined *)((int)inputArray + 0x3d) = 0x29;\n      *(undefined *)((int)inputArray + 0x3e) = 0x20;\n      result = 0;\n      inputArray[0x10] = (uint *)0x0;\n      inputArray[9] = param2;\n      *(short *)((int)inputArray + 0x2a) = (short)param3;\n      inputArray[0xb] = param4;\n      *(undefined2 *)(inputArray + 10) = *(undefined2 *)((int)inputArray + 0x2a);\n      *(undefined *)(inputArray + 0xf) = 0;\n      (*inputArray)[1] = (*inputArray)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001460": "validate_input_08001460",
                "param_1": "inputArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "puVar2": "ptrVar"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ec": {
            "entrypoint": "0x080014ec",
            "current_name": "process_parameters_080014ec",
            "code": "\nundefined4 processParameters_080014ec(uint **arrayPointer,uint *param2,int param3,uint *param4)\n\n{\n  undefined4 returnValue;\n  uint *pointerVar;\n  \n  if (*(char *)((int)arrayPointer + 0x3d) == '(') {\n    if (param2 == (uint *)0x0) {\n      returnValue = 1;\n    }\n    else if (param3 == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(arrayPointer + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(arrayPointer + 0xf) = 1;\n      pointerVar = *arrayPointer;\n      if ((*pointerVar & 1) == 0) {\n        *pointerVar = *pointerVar | 1;\n      }\n      **arrayPointer = **arrayPointer & 0xfffff7ff;\n      *(undefined *)((int)arrayPointer + 0x3d) = 0x2a;\n      *(undefined *)((int)arrayPointer + 0x3e) = 0x20;\n      returnValue = 0;\n      arrayPointer2 = (uint *)0x0;\n      param2 = param2;\n      *(short *)((int)arrayPointer + 0x2a) = (short)param3;\n      param4 = param4;\n      *(undefined2 *)(arrayPointer + 10) = *(undefined2 *)((int)arrayPointer + 0x2a);\n      *(undefined *)(arrayPointer + 0xf) = 0;\n      (*arrayPointer)[1] = (*arrayPointer)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080014ec": "process_parameters_080014ec",
                "param_1": "arrayPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "returnValue",
                "puVar2": "pointerVar",
                "param_1[0x10]": "arrayPointer2",
                "param_1[9]": "param2",
                "param_1[0xb]": "param4"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001578": {
            "entrypoint": "0x08001578",
            "current_name": "initialize_parameters_08001578",
            "code": "\nundefined4 initializeParameters_08001578(uint **parameters)\n\n{\n  uint *pointer;\n  \n  if (*(char *)((int)parameters + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)parameters + 0x3d) = 0x28;\n  pointer = *parameters;\n  if ((*pointer & 1) == 0) {\n    *pointer = *pointer | 1;\n  }\n  **parameters = **parameters | 0x400;\n  (*parameters)[1] = (*parameters)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001578": "initialize_parameters_08001578",
                "param_1": "parameters",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b6": {
            "entrypoint": "0x080015b6",
            "current_name": "FUNC_080015b6",
            "code": "\nvoid FUNC_080015b6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b6": "FUNC_080015b6"
            },
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015b8": {
            "entrypoint": "0x080015b8",
            "current_name": "FUNC_080015b8",
            "code": "\nvoid FUNC_080015b8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b8": "FUNC_080015b8"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015ba": {
            "entrypoint": "0x080015ba",
            "current_name": "FUNC_080015ba",
            "code": "\nvoid FUNC_080015ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015ba": "FUNC_080015ba"
            },
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015bc": {
            "entrypoint": "0x080015bc",
            "current_name": "process_data_080015bc",
            "code": "\nundefined4 process_data_080015bc(int *data_array)\n\n{\n  char char1;\n  byte *byte_ptr;\n  \n  char1 = *(char *)((int)data_array + 0x3d);\n  if (*(short *)((int)data_array + 0x2a) != 0) {\n    byte_ptr = (byte *)byte_array;\n    byte_array = (int)(byte_ptr + 1);\n    *(uint *)(*data_array + 0x10) = (uint)*byte_ptr;\n    *(short *)((int)data_array + 0x2a) = *(short *)((int)data_array + 0x2a) + -1;\n    if ((*(short *)((int)data_array + 0x2a) == 0) && (char1 == ')')) {\n      *(uint *)(*data_array + 4) = *(uint *)(*data_array + 4) & 0xfffffbff;\n      value_in_data_array = 0x21;\n      *(undefined *)((int)data_array + 0x3d) = 0x28;\n      FUNC_080015ba();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080015bc": "process_data_080015bc",
                "param_1": "data_array",
                "cVar1": "char1",
                "pbVar2": "byte_ptr",
                "param_1[9]": "byte_array",
                "param_1[0xc]": "value_in_data_array"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800160c": {
            "entrypoint": "0x0800160c",
            "current_name": "FUNC_0800160c",
            "code": "\nvoid FUNC_0800160c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800160c": "FUNC_0800160c"
            },
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800160e": {
            "entrypoint": "0x0800160e",
            "current_name": "process_data_0800160e",
            "code": "\nundefined4 processData_0800160e(int *data)\n\n{\n  char charValue;\n  undefined *ptr;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)data[9];\n    data[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_0800160c();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800160e": "process_data_0800160e",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "ptr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_0800160c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800165a": {
            "entrypoint": "0x0800165a",
            "current_name": "process_parameters_0800165a",
            "code": "\nundefined4 processParameters_0800165a(int *inputArray,undefined4 paramA,undefined4 paramB,undefined4 paramC)\n\n{\n  undefined2 selectedValue;\n  uint flagValue;\n  \n  flagValue = *(uint *)(*inputArray + 0x18);\n  if ((flagValue & 0x80) == 0) {\n    selectedValue = *(undefined2 *)(inputArray + 3);\n  }\n  else {\n    selectedValue = *(undefined2 *)(inputArray + 6);\n  }\n  validate_and_process_parameters_08003880(inputArray,(*(uint *)(*inputArray + 0x18) & 4) == 0,selectedValue,flagValue,paramC);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800165a": "process_parameters_0800165a",
                "param_1": "inputArray",
                "param_2": "paramA",
                "param_3": "paramB",
                "param_4": "paramC",
                "uVar1": "selectedValue",
                "uVar2": "flagValue"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08003880"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001684": {
            "entrypoint": "0x08001684",
            "current_name": "initialize_flags_08001684",
            "code": "\nundefined4 initializeFlags_08001684(uint **parameters)\n\n{\n  if (((flagPointer == (uint *)0x4) || (flagPointer == (uint *)0x8)) &&\n     (*(char *)((int)parameters + 0x3d) == '(')) {\n    flagPointer = (uint *)0xffff0000;\n    (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n    (*parameters)[5] = 0xfffffbff;\n    **parameters = **parameters & 0xfffffbff;\n    offset = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n    executeCondition();\n  }\n  else if (*(char *)((int)parameters + 0x3d) == '!') {\n    flagPointer = (uint *)0xffff0000;\n    offset = (uint *)0x21;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n    (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n    (*parameters)[5] = 0xfffffbff;\n    **parameters = **parameters & 0xfffffbff;\n    FUNC_080015ba();\n  }\n  else {\n    (*parameters)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001684": "initialize_flags_08001684",
                "param_1": "parameters",
                "param_1[0xb]": "flagPointer",
                "param_1[0xc]": "offset",
                "execute_conditional_function_080038d0": "executeCondition"
            },
            "calling": [
                "FUN_08001e68"
            ],
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001718": {
            "entrypoint": "0x08001718",
            "current_name": "FUNC_08001718",
            "code": "\nvoid FUNC_08001718(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001718": "FUNC_08001718"
            },
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800171a": {
            "entrypoint": "0x0800171a",
            "current_name": "process_data_0800171a",
            "code": "\nundefined4 process_data_0800171a(uint **data_ptr)\n\n{\n  char char_val;\n  uint *ptr_val;\n  \n  char_val = *(char *)((int)data_ptr + 0x3d);\n  ptr_val = data_ptr[0xb];\n  if ((*(short *)(data_ptr + 10) == 0) && (char_val == '!')) {\n    if ((ptr_val == (uint *)0x4) || ((ptr_val == (uint *)0x8 || (ptr_val == (uint *)0xffff0000)))) {\n      (*data_ptr)[1] = (*data_ptr)[1] & 0xfffff8ff;\n      **data_ptr = **data_ptr | 0x200;\n      data_ptr[0xc] = (uint *)0x0;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n      if (*(char *)((int)data_ptr + 0x3e) == '@') {\n        *(undefined *)((int)data_ptr + 0x3e) = 0;\n        FUNC_08001718();\n      }\n      else {\n        *(undefined *)((int)data_ptr + 0x3e) = 0;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      (*data_ptr)[1] = (*data_ptr)[1] & 0xfffff8ff;\n      data_ptr[0xc] = (uint *)0x11;\n      *(undefined *)((int)data_ptr + 0x3e) = 0;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n      FUNC_080015b6();\n    }\n  }\n  else if ((char_val == '!') || ((*(char *)((int)data_ptr + 0x3e) == '@' && (char_val == '\\\"')))) {\n    if (*(short *)((int)data_ptr + 0x2a) == 0) {\n      (*data_ptr)[1] = (*data_ptr)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data_ptr + 0x3e) == '@') {\n      if (data_ptr[0x14] == (uint *)0x0) {\n        if (data_ptr[0x13] == (uint *)0x1) {\n          (*data_ptr)[4] = (uint)data_ptr[0x12] & 0xff;\n          data_ptr[0x14] = (uint *)((int)data_ptr[0x14] + 2);\n        }\n        else {\n          (*data_ptr)[4] = (uint)((int)data_ptr[0x12] << 0x10) >> 0x18;\n          data_ptr[0x14] = (uint *)((int)data_ptr[0x14] + 1);\n        }\n      }\n      else if (data_ptr[0x14] == (uint *)0x1) {\n        (*data_ptr)[4] = (uint)data_ptr[0x12] & 0xff;\n        data_ptr[0x14] = (uint *)((int)data_ptr[0x14] + 1);\n      }\n      else if (data_ptr[0x14] == (uint *)0x2) {\n        if (*(char *)((int)data_ptr + 0x3d) == '\\\"') {\n          **data_ptr = **data_ptr | 0x100;\n        }\n        else if (*(char *)((int)data_ptr + 0x3d) == '!') {\n          ptr_val = data_ptr[9];\n          data_ptr[9] = (uint *)((int)ptr_val + 1);\n          (*data_ptr)[4] = (uint)*(byte *)ptr_val;\n          *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptr_val = data_ptr[9];\n      data_ptr[9] = (uint *)((int)ptr_val + 1);\n      (*data_ptr)[4] = (uint)*(byte *)ptr_val;\n      *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800171a": "process_data_0800171a",
                "param_1": "data_ptr",
                "cVar1": "char_val",
                "puVar2": "ptr_val"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001864": {
            "entrypoint": "0x08001864",
            "current_name": "process_param_08001864",
            "code": "\nundefined4 processParam_08001864(uint **param)\n\n{\n  uint *ptrValue;\n  \n  ptrValue = param[0xb];\n  if (*(char *)((int)param + 0x3d) == '!') {\n    if (*(short *)((int)param + 0x2a) == 0) {\n      if (((ptrValue == (uint *)0x4) || (ptrValue == (uint *)0x8)) || (ptrValue == (uint *)0xffff0000)) {\n        (*param)[1] = (*param)[1] & 0xfffff8ff;\n        **param = **param | 0x200;\n        param[0xc] = (uint *)0x0;\n        *(undefined *)((int)param + 0x3d) = 0x20;\n        if (*(char *)((int)param + 0x3e) == '@') {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_08001718();\n        }\n        else {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_080015b6();\n        }\n      }\n      else {\n        (*param)[1] = (*param)[1] & 0xfffff8ff;\n        param[0xc] = (uint *)0x11;\n        *(undefined *)((int)param + 0x3e) = 0;\n        *(undefined *)((int)param + 0x3d) = 0x20;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      ptrValue = param[9];\n      param[9] = (uint *)((int)ptrValue + 1);\n      (*param)[4] = (uint)*(byte *)ptrValue;\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001864": "process_param_08001864",
                "param_1": "param",
                "puVar1": "ptrValue"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001902": {
            "entrypoint": "0x08001902",
            "current_name": "FUNC_08001902",
            "code": "\nvoid FUNC_08001902(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001902": "FUNC_08001902"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001904": {
            "entrypoint": "0x08001904",
            "current_name": "modify_param_values_08001904",
            "code": "\nundefined4 modifyParamValues_08001904(uint **param)\n\n{\n  uint *tempPtr;\n  \n  if (*(char *)((int)param + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)param + 0x2a) < 4) {\n      if (*(ushort *)((int)param + 0x2a) < 2) {\n        **param = **param & 0xfffffbff;\n        (*param)[1] = (*param)[1] & 0xfffff8ff;\n        tempPtr = param[9];\n        param[9] = (uint *)((int)tempPtr + 1);\n        *(char *)tempPtr = (char)(*param)[4];\n        *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n        *(undefined *)((int)param + 0x3d) = 0x20;\n        param[0xc] = (uint *)0x0;\n        if (*(char *)((int)param + 0x3e) == '@') {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_08001902();\n        }\n        else {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_080015b8();\n        }\n      }\n    }\n    else {\n      tempPtr = param[9];\n      param[9] = (uint *)((int)tempPtr + 1);\n      *(char *)tempPtr = (char)(*param)[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n      if (*(short *)((int)param + 0x2a) == 3) {\n        (*param)[1] = (*param)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001904": "modify_param_values_08001904",
                "param_1": "param",
                "puVar1": "tempPtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019a0": {
            "entrypoint": "0x080019a0",
            "current_name": "process_data_080019a0",
            "code": "\nundefined4 processData_080019a0(uint **data)\n\n{\n  uint *tempPtr;\n  \n  if (*(short *)((int)data + 0x2a) == 4) {\n    (*data)[1] = (*data)[1] & 0xfffffbff;\n    tempPtr = data[9];\n    data[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 3) {\n    (*data)[1] = (*data)[1] & 0xfffffbff;\n    **data = **data & 0xfffffbff;\n    tempPtr = data[9];\n    data[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 2) {\n    if ((int)data[0xb] - 1U < 2) {\n      **data = **data & 0xfffffbff;\n      **data = **data | 0x100;\n    }\n    else {\n      **data = **data | 0x200;\n    }\n    tempPtr = data[9];\n    data[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    tempPtr = data[9];\n    data[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    (*data)[1] = (*data)[1] & 0xfffffcff;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    data[0xc] = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08001902();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_080015b8();\n    }\n  }\n  else {\n    tempPtr = data[9];\n    data[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080019a0": "process_data_080019a0",
                "param_1": "data",
                "puVar1": "tempPtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001aac": {
            "entrypoint": "0x08001aac",
            "current_name": "FUNC_08001aac",
            "code": "\nvoid FUNC_08001aac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001aac": "FUNC_08001aac"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "process_input_08001ab0",
            "code": "\nvoid processInput_08001ab0(uint **input)\n\n{\n  int result;\n  uint *ptr1;\n  uint *ptr2;\n  \n  if (*(byte *)((int)input + 0x3d) - 0x29 < 2) {\n    input[0xc] = (uint *)0x0;\n    *(undefined *)((int)input + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)input + 0x3d) != '`') && (((*input)[1] & 0x800) == 0)) {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n    }\n    input[0xc] = (uint *)0x0;\n    *(undefined *)((int)input + 0x3e) = 0;\n  }\n  **input = **input & 0xfffff7ff;\n  ptr2 = *input;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)input + 0x3d) == '`') {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      input[0x10] = (uint *)0x0;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = input[9];\n        input[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      **input = **input & 0xfffffffe;\n      FUNC_08001aac(input);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = input[9];\n        input[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      initialize_if_not_zero_08003900(input);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)input[0xd] + 0x35) == '\\x01') {\n      input[0xe][0x14] = (uint)&LAB_08001f3c_1;\n      result = update_param_value_08000f8c(input[0xe]);\n      if (result != 0) {\n        if (((*input)[5] & 0x40) != 0) {\n          ptr2 = input[9];\n          input[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*input)[4];\n        }\n        **input = **input & 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)input[0xe][0x14])();\n      }\n    }\n    else {\n      input[0xd][0x14] = (uint)&LAB_08001f3c_1;\n      result = update_param_value_08000f8c(input[0xd]);\n      if (result != 0) {\n        **input = **input & 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)input[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)input + 0x3d) == '(') && (((uint)input[0x10] & 4) != 0)) {\n    input[0xb] = (uint *)0xffff0000;\n    input[0xc] = (uint *)0x0;\n    *(undefined *)((int)input + 0x3d) = 0x20;\n    *(undefined *)((int)input + 0x3e) = 0;\n    execute_conditional_function_080038d0(input);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "process_input_08001ab0",
                "param_1": "input",
                "iVar1": "result",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08000f8c",
                "FUN_080038d0",
                "FUN_08001aac",
                "FUN_08003900"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bfc": {
            "entrypoint": "0x08001bfc",
            "current_name": "process_input_08001bfc",
            "code": "\nundefined4 process_input_08001bfc(uint **input)\n\n{\n  char charValue;\n  uint *pointerVar1;\n  uint *pointerVar2;\n  \n  charValue = *(char *)((int)input + 0x3d);\n  (*input)[1] = (*input)[1] & 0xfffff8ff;\n  **input = **input | 1;\n  **input = **input & 0xfffffbff;\n  pointerVar1 = *input;\n  if ((pointerVar1[1] & 0x800) != 0) {\n    if ((*(char *)((int)input + 0x3d) == '\\\"') || (*(char *)((int)input + 0x3d) == '*')) {\n      *(short *)((int)input + 0x2a) = (short)*(undefined4 *)(*input[0xe] + 4);\n    }\n    else {\n      *(short *)((int)input + 0x2a) = (short)*(undefined4 *)(*input[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)input + 0x2a) != 0) {\n    if ((pointerVar1[5] & 4) != 0) {\n      pointerVar2 = input[9];\n      input[9] = (uint *)((int)pointerVar2 + 1);\n      *(char *)pointerVar2 = (char)pointerVar1[4];\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n    if (((*input)[5] & 0x40) != 0) {\n      pointerVar1 = input[9];\n      input[9] = (uint *)((int)pointerVar1 + 1);\n      *(char *)pointerVar1 = (char)(*input)[4];\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n    input[0x10] = (uint *)((uint)input[0x10] | 4);\n  }\n  if (input[0x10] == (uint *)0x0) {\n    if (((charValue == '(') || (charValue == '*')) || (charValue == ')')) {\n      input[0xb] = (uint *)0xffff0000;\n      input[0xc] = (uint *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      execute_conditional_function_080038d0();\n    }\n    else if ((input[0xc] == (uint *)0x22) || (charValue == '\\\"')) {\n      input[0xc] = (uint *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      FUNC_0800160c();\n    }\n  }\n  else {\n    process_input_08001bfc_08001ab0();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001bfc": "process_input_08001bfc",
                "param_1": "input",
                "cVar1": "charValue",
                "puVar2": "pointerVar1",
                "puVar3": "pointerVar2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_0800160c",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d00": {
            "entrypoint": "0x08001d00",
            "current_name": "process_function_08001d00",
            "code": "\nvoid process_function_08001d00(int *input_param)\n\n{\n  int data_variable;\n  uint flags_variable;\n  uint status_variable;\n  uint value_variable;\n  \n  data_variable = *input_param;\n  value_variable = *(uint *)(data_variable + 0x18);\n  flags_variable = *(uint *)(data_variable + 0x14);\n  status_variable = *(uint *)(data_variable + 4);\n  if ((*(char *)((int)input_param + 0x3e) == '\\x10') || (*(char *)((int)input_param + 0x3e) == '@')) {\n    if (((flags_variable & 0x10001) == 0) || ((status_variable & 0x200) == 0)) {\n      if (((flags_variable & 0x10008) == 0) || ((status_variable & 0x200) == 0)) {\n        if (((flags_variable & 0x10002) != 0) && ((status_variable & 0x200) != 0)) {\n          process_flags_08001256(input_param);\n        }\n      }\n      else {\n        update_value_in_memory_0800124a(input_param);\n      }\n    }\n    else {\n      update_status_080011c0(input_param);\n    }\n    if ((value_variable & 0x100004) == 0) {\n      if ((((flags_variable & 0x10040) != 0) && ((status_variable & 0x400) != 0)) && ((flags_variable & 0x10004) == 0)) {\n        modify_param_values_08001904(input_param);\n        return;\n      }\n      if (((flags_variable & 0x10004) != 0) && ((status_variable & 0x200) != 0)) {\n        process_data_080019a0(input_param);\n        return;\n      }\n    }\n    else {\n      if ((((flags_variable & 0x10080) != 0) && ((status_variable & 0x400) != 0)) && ((flags_variable & 0x10004) == 0)) {\n        process_data_0800171a(input_param);\n        return;\n      }\n      if (((flags_variable & 0x10004) != 0) && ((status_variable & 0x200) != 0)) {\n        process_param_08001864(input_param);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flags_variable & 0x10002) != 0) && ((status_variable & 0x200) != 0)) {\n      process_parameters_0800165a();\n      return;\n    }\n    if (((flags_variable & 0x10010) != 0) && ((status_variable & 0x200) != 0)) {\n      process_input_08001bfc(input_param);\n      return;\n    }\n    if ((value_variable & 0x100004) == 0) {\n      if ((((flags_variable & 0x10040) != 0) && ((status_variable & 0x400) != 0)) && ((flags_variable & 0x10004) == 0)) {\n        process_data_0800160e(input_param);\n        return;\n      }\n      if (((flags_variable & 0x10004) != 0) && ((status_variable & 0x200) != 0)) {\n        update_array_value_08001440(input_param);\n      }\n    }\n    else {\n      if ((((flags_variable & 0x10080) != 0) && ((status_variable & 0x400) != 0)) && ((flags_variable & 0x10004) == 0)) {\n        process_data_080015bc(input_param);\n        return;\n      }\n      if (((flags_variable & 0x10004) != 0) && ((status_variable & 0x200) != 0)) {\n        update_data_08001420(input_param);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d00": "process_function_08001d00",
                "param_1": "input_param",
                "iVar1": "data_variable",
                "uVar2": "flags_variable",
                "uVar3": "status_variable",
                "uVar4": "value_variable"
            },
            "calling": [],
            "called": [
                "FUN_08001440",
                "FUN_080019a0",
                "FUN_080015bc",
                "FUN_0800165a",
                "FUN_0800160e",
                "FUN_0800171a",
                "FUN_08001256",
                "FUN_08001420",
                "FUN_08001904",
                "FUN_0800124a",
                "FUN_080011c0",
                "FUN_08001bfc",
                "FUN_08001864"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e68": {
            "entrypoint": "0x08001e68",
            "current_name": "process_flags_08001e68",
            "code": "\nvoid process_flags_08001e68(uint **ptr_array)\n\n{\n  char char_var;\n  uint *ptr_var;\n  uint uint_var_1;\n  uint uint_var_2;\n  \n  ptr_var = *ptr_array;\n  uint_var_1 = ptr_var[5];\n  uint_var_2 = ptr_var[1];\n  if (((uint_var_1 & 0x10100) != 0) && ((uint_var_2 & 0x100) != 0)) {\n    ptr_array[0x10] = (uint *)((uint)ptr_array[0x10] | 1);\n    ptr_var[5] = 0xfffffeff;\n  }\n  if (((uint_var_1 & 0x10200) != 0) && ((uint_var_2 & 0x100) != 0)) {\n    ptr_array[0x10] = (uint *)((uint)ptr_array[0x10] | 2);\n    (*ptr_array)[5] = 0xfffffdff;\n  }\n  if (((uint_var_1 & 0x10400) != 0) && ((uint_var_2 & 0x100) != 0)) {\n    char_var = *(char *)((int)ptr_array + 0x3d);\n    if (((*(char *)((int)ptr_array + 0x3e) == ' ') && (*(short *)((int)ptr_array + 0x2a) == 0)) &&\n       (((char_var == '!' || (char_var == ')')) || ((char_var == '(' && (ptr_array[0xc] == (uint *)0x21)))))) {\n      initialize_flags_08001684(ptr_array);\n    }\n    else {\n      ptr_array[0x10] = (uint *)((uint)ptr_array[0x10] | 4);\n      if (*(char *)((int)ptr_array + 0x3e) == '\\x10') {\n        **ptr_array = **ptr_array | 0x200;\n      }\n      (*ptr_array)[5] = 0xfffffbff;\n    }\n  }\n  if (((uint_var_1 & 0x10800) != 0) && ((uint_var_2 & 0x100) != 0)) {\n    ptr_array[0x10] = (uint *)((uint)ptr_array[0x10] | 8);\n    (*ptr_array)[5] = 0xfffff7ff;\n  }\n  if (ptr_array[0x10] != (uint *)0x0) {\n    process_input_08001ab0(ptr_array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e68": "process_flags_08001e68",
                "param_1": "ptr_array",
                "cVar1": "char_var",
                "puVar2": "ptr_var",
                "uVar3": "uint_var_1",
                "uVar4": "uint_var_2"
            },
            "calling": [],
            "called": [
                "FUN_08001ab0",
                "FUN_08001684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f9c": {
            "entrypoint": "0x08001f9c",
            "current_name": "check_data_availability_08001f9c",
            "code": "\n\n\nundefined4 check_data_availability_08001f9c(void)\n\n{\n  int start_time;\n  int end_time;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_420e0040 = 1;\n  start_time = get_data_08000e30();\n  do {\n    if ((_DAT_40007004 & 0x10000) != 0) {\n      _DAT_420e0044 = 1;\n      start_time = get_data_08000e30();\n      do {\n        if ((_DAT_40007004 & 0x20000) != 0) {\n          return 0;\n        }\n        end_time = get_data_08000e30();\n      } while ((uint)(end_time - start_time) < 0x3e9);\n      return 3;\n    }\n    end_time = get_data_08000e30();\n  } while ((uint)(end_time - start_time) < 0x3e9);\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001f9c": "check_data_availability_08001f9c",
                "iVar1": "start_time",
                "iVar2": "end_time"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800201c": {
            "entrypoint": "0x0800201c",
            "current_name": "check_and_control_system_0800201c",
            "code": "\n\n\nundefined4 checkAndControlSystem_0800201c(uint *controlData)\n\n{\n  int startValue;\n  int currentValue;\n  undefined4 result;\n  bool isFlagSet;\n  \n  if (controlData == (uint *)0x0) {\n    return 1;\n  }\n  if ((*controlData & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) != 0)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (controlData[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (controlData[1] == 0x10000) {\n        _DAT_40023800 = _DAT_40023800 | 0x10000;\n      }\n      else if (controlData[1] == 0x50000) {\n        _DAT_40023800 = _DAT_40023800 | 0x50000;\n      }\n      else {\n        _DAT_40023800 = _DAT_40023800 & 0xfffaffff;\n      }\n      if (controlData[1] == 0) {\n        startValue = get_data_08000e30();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          currentValue = get_data_08000e30();\n          if (100 < (uint)(currentValue - startValue)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startValue = get_data_08000e30();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          currentValue = get_data_08000e30();\n          if (100 < (uint)(currentValue - startValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*controlData & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (controlData[3] != 1)) {\n        return 1;\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | controlData[4] << 3;\n    }\n    else if (controlData[3] == 0) {\n      _DAT_42470000 = 0;\n      startValue = get_data_08000e30();\n      while ((_DAT_40023800 & 2) != 0) {\n        currentValue = get_data_08000e30();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      startValue = get_data_08000e30();\n      while ((_DAT_40023800 & 2) == 0) {\n        currentValue = get_data_08000e30();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | controlData[4] << 3;\n    }\n  }\n  if ((*controlData & 8) != 0) {\n    if (controlData[5] == 0) {\n      _DAT_42470e80 = 0;\n      startValue = get_data_08000e30();\n      while ((_DAT_40023874 & 2) != 0) {\n        currentValue = get_data_08000e30();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      startValue = get_data_08000e30();\n      while ((_DAT_40023874 & 2) == 0) {\n        currentValue = get_data_08000e30();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*controlData & 4) != 0) {\n    isFlagSet = (_DAT_40023840 & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startValue = get_data_08000e30();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_data_08000e30();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    if (controlData[2] == 1) {\n      _DAT_40023870 = _DAT_40023870 | 1;\n    }\n    else if (controlData[2] == 5) {\n      _DAT_40023870 = _DAT_40023870 | 5;\n    }\n    else {\n      _DAT_40023870 = _DAT_40023870 & 0xfffffffa;\n    }\n    if (controlData[2] == 0) {\n      startValue = get_data_08000e30();\n      while ((_DAT_40023870 & 2) != 0) {\n        currentValue = get_data_08000e30();\n        if (5000 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startValue = get_data_08000e30();\n      while ((_DAT_40023870 & 2) == 0) {\n        currentValue = get_data_08000e30();\n        if (5000 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    if (isFlagSet) {\n      _DAT_40023840 = _DAT_40023840 & 0xefffffff;\n    }\n  }\n  if (controlData[6] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40023808 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (controlData[6] == 2) {\n    _DAT_42470060 = 0;\n    startValue = get_data_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        _DAT_40023804 =\n             controlData[7] | controlData[8] | controlData[9] << 6 | ((controlData[10] >> 1) - 1) * 0x10000 |\n             controlData[0xb] << 0x18;\n        _DAT_42470060 = 1;\n        startValue = get_data_08000e30();\n        do {\n          if ((_DAT_40023800 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentValue = get_data_08000e30();\n        } while ((uint)(currentValue - startValue) < 3);\n        return 3;\n      }\n      currentValue = get_data_08000e30();\n    } while ((uint)(currentValue - startValue) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42470060 = 0;\n    startValue = get_data_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentValue = get_data_08000e30();\n    } while ((uint)(currentValue - startValue) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800201c": "check_and_control_system_0800201c",
                "param_1": "controlData",
                "iVar1": "startValue",
                "iVar2": "currentValue",
                "uVar3": "result",
                "bVar4": "isFlagSet"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023b4": {
            "entrypoint": "0x080023b4",
            "current_name": "calculate_execution_time_080023b4",
            "code": "\n\n\nuint calculate_execution_time_080023b4(void)\n\n{\n  undefined4 input_arg;\n  uint result;\n  \n  if ((_DAT_40023808 & 0xc) == 4) {\n    return 8000000;\n  }\n  if ((_DAT_40023808 & 0xc) != 8) {\n    return 16000000;\n  }\n  if ((_DAT_40023804 & 0x400000) == 0) {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = calculate_result(result * 16000000,\n                         (((uint)(result * 0x20 < result) * -0x3f -\n                          (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                         (uint)carry_operation(result * 0x3d08,result)) * 0x400 | result * 0x3d09 >> 0x16,\n                         _DAT_40023804 & 0x3f,0,input_arg);\n  }\n  else {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = calculate_result(result * 8000000,\n                         (((uint)(result * 0x20 < result) * -0x3f -\n                          (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                         (uint)carry_operation(result * 0x3d08,result)) * 0x200,_DAT_40023804 & 0x3f,0,input_arg);\n  }\n  return result / ((((_DAT_40023804 << 0xe) >> 0x1e) + 1) * 2);\n}\n\n",
            "renaming": {
                "FUN_080023b4": "calculate_execution_time_080023b4",
                "in_r3": "input_arg",
                "uVar1": "result",
                "CARRY4": "carry_operation",
                "calculate_result_080002d0": "calculate_result"
            },
            "calling": [
                "FUN_08002488"
            ],
            "called": [
                "FUN_080002d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002488": {
            "entrypoint": "0x08002488",
            "current_name": "configure_device_08002488",
            "code": "\n\n\nundefined4 configureDevice_08002488(uint *configData,uint configSize)\n\n{\n  int initialTime;\n  int currentTime;\n  uint executionTime;\n  \n  if (configData == (uint *)0x0) {\n    return 1;\n  }\n  if ((_DAT_40023c00 & 0xf) < configSize) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)configSize);\n    if (configSize != (configSize & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*configData & 2) != 0) {\n    if ((*configData & 4) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0x1c00;\n    }\n    if ((*configData & 8) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0xe000;\n    }\n    _DAT_40023808 = _DAT_40023808 & 0xffffff0f | configData[2];\n  }\n  if ((*configData & 1) != 0) {\n    executionTime = configData[1];\n    if (executionTime == 1) {\n      if ((_DAT_40023800 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (executionTime - 2 < 2) {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((_DAT_40023800 & 2) == 0) {\n      return 1;\n    }\n    _DAT_40023808 = executionTime | _DAT_40023808 & 0xfffffffc;\n    initialTime = getData();\n    while( true ) {\n      if ((_DAT_40023808 & 0xc) == configData[1] * 4) break;\n      currentTime = getData();\n      if (5000 < (uint)(currentTime - initialTime)) {\n        return 3;\n      }\n    }\n  }\n  if (configSize < (_DAT_40023c00 & 0xf)) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)configSize);\n    if (configSize != (configSize & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*configData & 4) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffffe3ff | configData[3];\n  }\n  if ((*configData & 8) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffff1fff | configData[4] << 3;\n  }\n  executionTime = calculateExecutionTime();\n  DAT_2000002c = executionTime >> (&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c];\n  validateAndUpdateCharacter(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002488": "configure_device_08002488",
                "param_1": "configData",
                "param_2": "configSize",
                "iVar1": "initialTime",
                "iVar2": "currentTime",
                "uVar3": "executionTime",
                "get_data_08000e30": "getData",
                "validate_and_update_character_08000d98": "validateAndUpdateCharacter",
                "calculate_execution_time_080023b4": "calculateExecutionTime"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30",
                "FUN_08000d98",
                "FUN_080023b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e0": {
            "entrypoint": "0x080025e0",
            "current_name": "get_data_080025e0",
            "code": "\nundefined4 get_data_080025e0(void)\n\n{\n  return DAT_2000002c;\n}\n\n",
            "renaming": {
                "FUN_080025e0": "get_data_080025e0"
            },
            "calling": [
                "FUN_0800260c",
                "FUN_080025ec",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ec": {
            "entrypoint": "0x080025ec",
            "current_name": "process_data_080025ec",
            "code": "\n\n\nuint process_data_080025ec(void)\n\n{\n  uint data;\n  \n  data = get_data();\n  return data >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x13) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_080025ec": "process_data_080025ec",
                "uVar1": "data",
                "get_data_080025e0": "get_data"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800260c": {
            "entrypoint": "0x0800260c",
            "current_name": "get_shifted_data_0800260c",
            "code": "\n\n\nuint get_shifted_data_0800260c(void)\n\n{\n  uint data;\n  \n  data = get_data();\n  return data >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x10) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_0800260c": "get_shifted_data_0800260c",
                "uVar1": "data",
                "get_data_080025e0": "get_data"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800262c": {
            "entrypoint": "0x0800262c",
            "current_name": "initialize_flags_0800262c",
            "code": "\n\n\nvoid initialize_flags_0800262c(int *param_1)\n\n{\n  if (((*(uint *)(*param_1 + 0xc) & 0x100) != 0) && ((*(uint *)(*param_1 + 8) & 0x1000) != 0)) {\n    execute_function1;\n    *(uint *)(*param_1 + 0xc) = *(uint *)(*param_1 + 0xc) & 0xff | 0xfffffe7f;\n  }\n  if (((*(uint *)(*param_1 + 0xc) & 0x200) != 0) && ((*(uint *)(*param_1 + 8) & 0x2000) != 0)) {\n    FUNC_0800268c(param_1);\n    *(uint *)(*param_1 + 0xc) = *(uint *)(*param_1 + 0xc) & 0xff | 0xfffffd7f;\n  }\n  _DAT_40013c14 = 0x20000;\n  *(undefined *)((int)param_1 + 0x1d) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800262c": "initialize_flags_0800262c",
                "call_function_if_not_null_08003594()": "execute_function1"
            },
            "calling": [],
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800268c": {
            "entrypoint": "0x0800268c",
            "current_name": "FUNC_0800268c",
            "code": "\nvoid FUNC_0800268c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268c": "FUNC_0800268c"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800268e": {
            "entrypoint": "0x0800268e",
            "current_name": "initialize_and_check_settings_0800268e",
            "code": "\nvoid initialize_and_check_settings_0800268e(uint **settings_pointer)\n\n{\n  uint *settings_value;\n  \n  *(undefined *)((int)settings_pointer + 0x39) = 2;\n  settings_value = *settings_pointer;\n  if ((settings_value[8] & 0x1111) == 0) {\n    if ((settings_value[8] & 0x444) == 0) {\n      *settings_value = *settings_value & 0xfffffffe;\n    }\n  }\n  initialize_settings(settings_pointer);\n  *(undefined *)((int)settings_pointer + 0x39) = 0;\n  *(undefined *)(settings_pointer + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268e": "initialize_and_check_settings_0800268e",
                "param_1": "settings_pointer",
                "puVar1": "settings_value",
                "initialize_settings_0800340c": "initialize_settings"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800340c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026c8": {
            "entrypoint": "0x080026c8",
            "current_name": "FUNC_080026c8",
            "code": "\nvoid FUNC_080026c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026c8": "FUNC_080026c8"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ca": {
            "entrypoint": "0x080026ca",
            "current_name": "FUNC_080026ca",
            "code": "\nvoid FUNC_080026ca(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ca": "FUNC_080026ca"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026cc": {
            "entrypoint": "0x080026cc",
            "current_name": "FUNC_080026cc",
            "code": "\nvoid FUNC_080026cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026cc": "FUNC_080026cc"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ce": {
            "entrypoint": "0x080026ce",
            "current_name": "execute_condition_checks_080026ce",
            "code": "\nvoid execute_condition_checks_080026ce(int *func_params)\n\n{\n  int value;\n  \n  value = *func_params;\n  if (((*(uint *)(value + 0x10) & 2) != 0) && ((*(uint *)(value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffd;\n    *(undefined *)(func_params + 6) = 1;\n    if ((*(uint *)(*func_params + 0x18) & 3) == 0) {\n      execute_function_if_condition_met();\n      FUNC_080026ca(func_params);\n    }\n    else {\n      FUNC_080026c8();\n    }\n    *(undefined *)(func_params + 6) = 0;\n  }\n  value = *func_params;\n  if (((*(uint *)(value + 0x10) & 4) != 0) && ((*(uint *)(value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffb;\n    *(undefined *)(func_params + 6) = 2;\n    if ((*(uint *)(*func_params + 0x18) & 0x300) == 0) {\n      execute_function_if_condition_met(func_params);\n      FUNC_080026ca(func_params);\n    }\n    else {\n      FUNC_080026c8(func_params);\n    }\n    *(undefined *)(func_params + 6) = 0;\n  }\n  value = *func_params;\n  if (((*(uint *)(value + 0x10) & 8) != 0) && ((*(uint *)(value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffff7;\n    *(undefined *)(func_params + 6) = 4;\n    if ((*(uint *)(*func_params + 0x1c) & 3) == 0) {\n      execute_function_if_condition_met(func_params);\n      FUNC_080026ca(func_params);\n    }\n    else {\n      FUNC_080026c8(func_params);\n    }\n    *(undefined *)(func_params + 6) = 0;\n  }\n  value = *func_params;\n  if (((*(uint *)(value + 0x10) & 0x10) != 0) && ((*(uint *)(value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffef;\n    *(undefined *)(func_params + 6) = 8;\n    if ((*(uint *)(*func_params + 0x1c) & 0x300) == 0) {\n      execute_function_if_condition_met(func_params);\n      FUNC_080026ca(func_params);\n    }\n    else {\n      FUNC_080026c8(func_params);\n    }\n    *(undefined *)(func_params + 6) = 0;\n  }\n  value = *func_params;\n  if (((*(uint *)(value + 0x10) & 1) != 0) && ((*(uint *)(value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffe;\n    execute_subtracted_function;\n  }\n  value = *func_params;\n  if (((*(uint *)(value + 0x10) & 0x80) != 0) && ((*(uint *)(value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffff7f;\n    FUNC_0800293e(func_params);\n  }\n  value = *func_params;\n  if (((*(uint *)(value + 0x10) & 0x40) != 0) && ((*(uint *)(value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffbf;\n    FUNC_080026cc(func_params);\n  }\n  value = *func_params;\n  if (((*(uint *)(value + 0x10) & 0x20) != 0) && ((*(uint *)(value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffdf;\n    FUNC_0800293c(func_params);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ce": "execute_condition_checks_080026ce",
                "param_1": "func_params",
                "iVar1": "value",
                "execute_function_if_condition_met_08003754": "execute_function_if_condition_met",
                "execute_function_if_condition_met_08003754(param_1)": "execute_function_if_condition_met(func_params)",
                "execute_subtracted_function_0800376e(param_1)": "execute_subtracted_function"
            },
            "calling": [
                "FUN_0800377c"
            ],
            "called": [
                "FUN_0800376e",
                "FUN_0800293c",
                "FUN_080026cc",
                "FUN_08003754",
                "FUN_080026c8",
                "FUN_080026ca",
                "FUN_0800293e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_bit_08002848",
            "code": "\nvoid updateBit_08002848(int data,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_bit_08002848",
                "param_1": "data",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_08002864"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002864": {
            "entrypoint": "0x08002864",
            "current_name": "update_and_check_flags_08002864",
            "code": "\nundefined4 update_and_check_flags_08002864(uint **bit_array,undefined4 flag)\n\n{\n  bool is_special_range;\n  uint *bit_array_ptr;\n  \n  update_bit_08002848(*bit_array,flag,0);\n  bit_array_ptr = *bit_array;\n  if (bit_array_ptr == (uint *)0x40010000) {\n    is_special_range = true;\n  }\n  else if (bit_array_ptr == (uint *)0x40010400) {\n    is_special_range = true;\n  }\n  else {\n    is_special_range = false;\n  }\n  if (((is_special_range) && ((bit_array_ptr[8] & 0x1111) == 0)) && ((bit_array_ptr[8] & 0x444) == 0)) {\n    bit_array_ptr[0x11] = bit_array_ptr[0x11] & 0xffff7fff;\n  }\n  bit_array_ptr = *bit_array;\n  if (((bit_array_ptr[8] & 0x1111) == 0) && ((bit_array_ptr[8] & 0x444) == 0)) {\n    *bit_array_ptr = *bit_array_ptr & 0xfffffffe;\n  }\n  *(undefined *)((int)bit_array + 0x39) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002864": "update_and_check_flags_08002864",
                "param_1": "bit_array",
                "param_2": "flag",
                "bVar1": "is_special_range",
                "puVar2": "bit_array_ptr"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_08002848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d4": {
            "entrypoint": "0x080028d4",
            "current_name": "update_bitwise_operations_080028d4",
            "code": "\nvoid updateBitwiseOperations_080028d4(int data,uint position,int value)\n\n{\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & ~(4 << (position & 0xff));\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) | value << (position & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080028d4": "update_bitwise_operations_080028d4",
                "param_1": "data",
                "param_2": "position",
                "param_3": "value"
            },
            "calling": [
                "FUN_080028f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028f0": {
            "entrypoint": "0x080028f0",
            "current_name": "update_bitwise_operations_080028f0",
            "code": "\nundefined4 updateBitwiseOperations_080028f0(uint **bitArray,undefined4 bitMask)\n\n{\n  uint *arrayPointer;\n  \n  update_bitwise_operations_080028d4(*bitArray,bitMask,0);\n  arrayPointer = *bitArray;\n  if (((arrayPointer[8] & 0x1111) == 0) && ((arrayPointer[8] & 0x444) == 0)) {\n    arrayPointer[0x11] = arrayPointer[0x11] & 0xffff7fff;\n  }\n  arrayPointer = *bitArray;\n  if (((arrayPointer[8] & 0x1111) == 0) && ((arrayPointer[8] & 0x444) == 0)) {\n    *arrayPointer = *arrayPointer & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028f0": "update_bitwise_operations_080028f0",
                "param_1": "bitArray",
                "param_2": "bitMask",
                "puVar1": "arrayPointer"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_080028d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800293c": {
            "entrypoint": "0x0800293c",
            "current_name": "FUNC_0800293c",
            "code": "\nvoid FUNC_0800293c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293c": "FUNC_0800293c"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800293e": {
            "entrypoint": "0x0800293e",
            "current_name": "FUNC_0800293e",
            "code": "\nvoid FUNC_0800293e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293e": "FUNC_0800293e"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002940": {
            "entrypoint": "0x08002940",
            "current_name": "update_memory_values_08002940",
            "code": "\nvoid updateMemoryValues_08002940(int *memoryPointer)\n\n{\n  *(uint *)(*memoryPointer + 0xc) = *(uint *)(*memoryPointer + 0xc) & 0xfffffedf;\n  *(uint *)(*memoryPointer + 0x14) = *(uint *)(*memoryPointer + 0x14) & 0xfffffffe;\n  *(undefined *)(pointerOffset + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002940": "update_memory_values_08002940",
                "param_1": "memoryPointer",
                "(int)param_1": "pointerOffset"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800295c": {
            "entrypoint": "0x0800295c",
            "current_name": "process_data_0800295c",
            "code": "\nundefined4 processData_0800295c(int *data)\n\n{\n  short previousValue;\n  byte *currentByte;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    currentByte = (byte *)data[8];\n    data[8] = (int)(currentByte + 1);\n    *(uint *)(*data + 4) = (uint)*currentByte;\n  }\n  previousValue = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = previousValue;\n  if (previousValue == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "data",
                "sVar1": "previousValue",
                "pbVar2": "currentByte"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029c8": {
            "entrypoint": "0x080029c8",
            "current_name": "process_data_080029c8",
            "code": "\nvoid process_data_080029c8(int *input_data)\n\n{\n  int result1;\n  int result2;\n  int result3;\n  int result4;\n  int result5;\n  int result6;\n  int result7;\n  int result8;\n  int result9;\n  int input_ptr;\n  \n  *(uint *)(*input_data + 0x10) = *(uint *)(*input_data + 0x10) & 0xffffcfff | input_data[3];\n  *(uint *)(*input_data + 0xc) =\n       *(uint *)(*input_data + 0xc) & 0xffff69f3 | input_data[2] | input_data[4] | input_data[5] | input_data[7];\n  *(uint *)(*input_data + 0x14) = *(uint *)(*input_data + 0x14) & 0xfffffcff | input_data[6];\n  if (input_data[7] == 0x8000) {\n    input_ptr = *input_data;\n    if ((input_ptr != 0x40011000) && (input_ptr != 0x40011400)) {\n      result1 = process_data_080029c8_080025ec();\n      result6 = input_data[1];\n      result2 = process_data_080029c8_080025ec();\n      result7 = input_data[1];\n      result3 = process_data_080029c8_080025ec();\n      result8 = input_data[1];\n      result4 = process_data_080029c8_080025ec();\n      result9 = input_data[1];\n      result5 = process_data_080029c8_080025ec();\n      *(uint *)(input_ptr + 8) =\n           ((uint)((int)((ulonglong)\n                         (((uint)(result4 * 0x19) / (uint)(result9 << 1) +\n                          (int)(((ulonglong)(uint)(result5 * 0x19) /\n                                (ulonglong)(uint)(input_data[1] << 1)) / 100) * -100) * 8 + 0x32) *\n                         0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n           ((((uint)(result2 * 0x19) / (uint)(result7 << 1) +\n             (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 1)) / 100) * -100)\n             * 8 + 0x32) / 100 & 0xf8) * 2 +\n           (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 1)) / 100) * 0x10;\n      return;\n    }\n    result1 = get_shifted_data_0800260c();\n    result6 = input_data[1];\n    result2 = get_shifted_data_0800260c();\n    result7 = input_data[1];\n    result3 = get_shifted_data_0800260c();\n    result8 = input_data[1];\n    result4 = get_shifted_data_0800260c();\n    result9 = input_data[1];\n    result5 = get_shifted_data_0800260c();\n    *(uint *)(input_ptr + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(result4 * 0x19) / (uint)(result9 << 1) +\n                        (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(input_data[1] << 1))\n                             / 100) * -100) * 8 + 0x32) * 0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n         ((((uint)(result2 * 0x19) / (uint)(result7 << 1) +\n           (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 1)) / 100) * -100) *\n           8 + 0x32) / 100 & 0xf8) * 2 +\n         (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 1)) / 100) * 0x10;\n    return;\n  }\n  input_ptr = *input_data;\n  if ((input_ptr != 0x40011000) && (input_ptr != 0x40011400)) {\n    result1 = process_data_080029c8_080025ec();\n    result6 = input_data[1];\n    result2 = process_data_080029c8_080025ec();\n    result7 = input_data[1];\n    result3 = process_data_080029c8_080025ec();\n    result8 = input_data[1];\n    result4 = process_data_080029c8_080025ec();\n    result9 = input_data[1];\n    result5 = process_data_080029c8_080025ec();\n    *(uint *)(input_ptr + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(result4 * 0x19) / (uint)(result9 << 2) +\n                        (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(input_data[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(result2 * 0x19) / (uint)(result7 << 2) +\n           (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 2)) / 100) * 0x10;\n    return;\n  }\n  result1 = get_shifted_data_0800260c();\n  result6 = input_data[1];\n  result2 = get_shifted_data_0800260c();\n  result7 = input_data[1];\n  result3 = get_shifted_data_0800260c();\n  result8 = input_data[1];\n  result4 = get_shifted_data_0800260c();\n  result9 = input_data[1];\n  result5 = get_shifted_data_0800260c();\n  *(uint *)(input_ptr + 8) =\n       ((uint)((int)((ulonglong)\n                     (((uint)(result4 * 0x19) / (uint)(result9 << 2) +\n                      (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(input_data[1] << 2)) /\n                           100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n       ((((uint)(result2 * 0x19) / (uint)(result7 << 2) +\n         (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 2)) / 100) * -100) *\n         0x10 + 0x32) / 100 & 0xf0) +\n       (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029c8": "process_data_080029c8",
                "param_1": "input_data",
                "iVar1": "result1",
                "iVar2": "result2",
                "iVar3": "result3",
                "iVar4": "result4",
                "iVar5": "result5",
                "iVar6": "result6",
                "iVar7": "result7",
                "iVar8": "result8",
                "iVar9": "result9",
                "iVar10": "input_ptr"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [
                "FUN_0800260c",
                "FUN_080025ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d0c": {
            "entrypoint": "0x08002d0c",
            "current_name": "verify_condition_and_update_08002d0c",
            "code": "\nundefined4 verify_condition_and_update_08002d0c(uint **input_array,uint bit_mask,uint expected_condition,int offset,uint maximum_difference)\n\n{\n  int data_difference;\n  \n  do {\n    if (((bit_mask & ~**input_array) == 0) != expected_condition) {\n      return 0;\n    }\n  } while ((maximum_difference == 0xffffffff) ||\n          ((maximum_difference != 0 && (data_difference = get_data_difference(), (uint)(data_difference - offset) <= maximum_difference))));\n  (*input_array)[3] = (*input_array)[3] & 0xfffffe5f;\n  (*input_array)[5] = (*input_array)[5] & 0xfffffffe;\n  *(undefined *)((int)input_array + 0x39) = 0x20;\n  *(undefined *)((int)input_array + 0x3a) = 0x20;\n  *(undefined *)(input_array + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002d0c": "verify_condition_and_update_08002d0c",
                "param_1": "input_array",
                "param_2": "bit_mask",
                "param_3": "expected_condition",
                "param_4": "offset",
                "param_5": "maximum_difference",
                "iVar1": "data_difference",
                "get_data_08000e30": "get_data_difference"
            },
            "calling": [
                "FUN_08002dd0"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d70": {
            "entrypoint": "0x08002d70",
            "current_name": "FUNC_08002d70",
            "code": "\nvoid FUNC_08002d70(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d70": "FUNC_08002d70"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d72": {
            "entrypoint": "0x08002d72",
            "current_name": "process_data_08002d72",
            "code": "\nundefined4 process_data_08002d72(int *data_ptr)\n\n{\n  if (data_ptr != (int *)0x0) {\n    if (*(char *)((int)data_ptr + 0x39) == '\\0') {\n      *(undefined *)(data_ptr + 0xe) = 0;\n      FUNC_08002d70();\n    }\n    *(undefined *)((int)data_ptr + 0x39) = 0x24;\n    *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) & 0xffffdfff;\n    process_data_08002d72_function(data_ptr);\n    *(uint *)(*data_ptr + 0x10) = *(uint *)(*data_ptr + 0x10) & 0xffffb7ff;\n    *(uint *)(*data_ptr + 0x14) = *(uint *)(*data_ptr + 0x14) & 0xffffffd5;\n    *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) | 0x2000;\n    counter = 0;\n    *(undefined *)((int)data_ptr + 0x39) = 0x20;\n    *(undefined *)((int)data_ptr + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002d72": "process_data_08002d72",
                "param_1": "data_ptr",
                "process_data_080029c8": "process_data_function",
                "param_1[0xf]": "counter"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080029c8",
                "FUN_08002d70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dd0": {
            "entrypoint": "0x08002dd0",
            "current_name": "process_data_08002dd0",
            "code": "\nundefined4 processData_08002dd0(int *data,ushort *buffer,int bufferLength,undefined4 param)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if (buffer == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (bufferLength == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = 0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      returnValue = get_data_08000e30();\n      *(short *)(data + 9) = (short)bufferLength;\n      *(short *)((int)data + 0x26) = (short)bufferLength;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == 0x1000) {\n          result = verify_condition_and_update_08002d0c(data,0x80,0,returnValue,param);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data + 4) = *buffer & 0x1ff;\n          if (data[4] == 0) {\n            buffer = buffer + 1;\n          }\n          else {\n            buffer = (ushort *)((int)buffer + 1);\n          }\n        }\n        else {\n          result = verify_condition_and_update_08002d0c(data,0x80,0,returnValue,param);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data + 4) = (uint)*(byte *)buffer;\n          buffer = (ushort *)((int)buffer + 1);\n        }\n      }\n      result = verify_condition_and_update_08002d0c(data,0x40,0,returnValue,param);\n      if (result == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "data",
                "param_2": "buffer",
                "param_3": "bufferLength",
                "param_4": "param",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08002d0c",
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002eb2": {
            "entrypoint": "0x08002eb2",
            "current_name": "validate_input_08002eb2",
            "code": "\nundefined4 validate_input_08002eb2(int *input_array,int value_1,int value_2)\n\n{\n  if (*(char *)((int)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    result_1 = value_1;\n    *(short *)(input_array + 9) = (short)value_2;\n    *(short *)((int)input_array + 0x26) = (short)value_2;\n    result_4 = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x21;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002eb2": "validate_input_08002eb2",
                "param_1": "input_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[8]": "result_1",
                "param_1[0xf]": "result_4"
            },
            "calling": [
                "FUN_08003f48",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efa": {
            "entrypoint": "0x08002efa",
            "current_name": "validate_input_08002efa",
            "code": "\nundefined4 validateInput_08002efa(int *inputArray,int value1,int value2)\n\n{\n  if (*(char *)((int)inputArray + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(inputArray + 0xe) != '\\x01') {\n    inputArray[10] = value1;\n    *(short *)(inputArray + 0xb) = (short)value2;\n    *(short *)((int)inputArray + 0x2e) = (short)value2;\n    inputArray[0xF] = 0;\n    *(undefined *)((int)inputArray + 0x3a) = 0x22;\n    *(undefined *)(inputArray + 0xe) = 0;\n    *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) | 1;\n    *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002efa": "validate_input_08002efa",
                "param_1": "inputArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "inputArray[10]",
                "param_1[0xf]": "inputArray[0xF]"
            },
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f4c": {
            "entrypoint": "0x08002f4c",
            "current_name": "set_flag_and_execute_08002f4c",
            "code": "\nundefined4 setFlagAndExecute_08002f4c(int *inputPointer)\n\n{\n  *(uint *)(*inputPointer + 0xc) = *(uint *)(*inputPointer + 0xc) & 0xffffffbf;\n  *(undefined *)((int)inputPointer + 0x39) = 0x20;\n  executeMatchingFunction();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f4c": "set_flag_and_execute_08002f4c",
                "param_1": "inputPointer",
                "execute_matching_function_08003f48": "executeMatchingFunction"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f66": {
            "entrypoint": "0x08002f66",
            "current_name": "process_binary_data_08002f66",
            "code": "\nundefined4 processBinaryData_08002f66(int *dataPointer)\n\n{\n  byte *bytePointer;\n  short counter;\n  undefined *undefinedPointer;\n  \n  if (*(char *)((int)dataPointer + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (dataPointer[2] == 0x1000) {\n    if (dataPointer[4] == 0) {\n      *(ushort *)dataPointer[10] = (ushort)((uint)(*(int *)(*dataPointer + 4) << 0x17) >> 0x17);\n      dataPointer[10] = dataPointer[10] + 2;\n    }\n    else {\n      *(ushort *)dataPointer[10] = (ushort)*(undefined4 *)(*dataPointer + 4) & 0xff;\n      dataPointer[10] = dataPointer[10] + 1;\n    }\n  }\n  else if (dataPointer[4] == 0) {\n    undefinedPointer = (undefined *)dataPointer[10];\n    dataPointer[10] = (int)(undefinedPointer + 1);\n    *undefinedPointer = (char)*(undefined4 *)(*dataPointer + 4);\n  }\n  else {\n    bytePointer = (byte *)dataPointer[10];\n    dataPointer[10] = (int)(bytePointer + 1);\n    *bytePointer = (byte)*(undefined4 *)(*dataPointer + 4) & 0x7f;\n  }\n  counter = *(short *)((int)dataPointer + 0x2e) + -1;\n  *(short *)((int)dataPointer + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xfffffedf;\n  *(uint *)(*dataPointer + 0x14) = *(uint *)(*dataPointer + 0x14) & 0xfffffffe;\n  *(undefined *)((int)dataPointer + 0x3a) = 0x20;\n  execute_matching_function_08003f24();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f66": "process_binary_data_08002f66",
                "param_1": "dataPointer",
                "pbVar1": "bytePointer",
                "sVar2": "counter",
                "puVar3": "undefinedPointer"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ffc": {
            "entrypoint": "0x08002ffc",
            "current_name": "process_data_08002ffc",
            "code": "\nvoid process_data_08002ffc(uint **data)\n\n{\n  int result;\n  uint value2;\n  uint *ptr;\n  uint flag;\n  uint value1;\n  \n  ptr = *data;\n  value1 = *ptr;\n  value2 = ptr[3];\n  if ((((value1 & 0xf) == 0) && ((value1 & 0x20) != 0)) && ((value2 & 0x20) != 0)) {\n    process_binary_data_08002f66(data);\n    return;\n  }\n  if (((value1 & 0xf) == 0) || ((flag = ptr[5] & 1, flag == 0 && ((value2 & 0x120) == 0)))) {\n    if (((value1 & 0x80) != 0) && ((value2 & 0x80) != 0)) {\n      process_data_08002ffc_0800295c(data);\n      return;\n    }\n    if (((value1 & 0x40) != 0) && ((value2 & 0x40) != 0)) {\n      set_flag_and_execute_08002f4c(data);\n    }\n  }\n  else {\n    if (((value1 & 1) != 0) && ((value2 & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((value1 & 4) != 0) && (flag != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((value1 & 2) != 0) && (flag != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((value1 & 8) != 0) && (flag != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((value1 & 0x20) != 0) && ((value2 & 0x20) != 0)) {\n        process_binary_data_08002f66(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        FUNC_08003f94(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      update_memory_values_08002940(data);\n      ptr = *data;\n      if ((ptr[5] & 0x40) == 0) {\n        FUNC_08003f94(data);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        FUNC_08003f94(data);\n        return;\n      }\n      data[0xd][0x14] = (uint)&LAB_0800311c_1;\n      result = update_param_value_08000f8c(data[0xd]);\n      if (result != 0) {\n        (*(code *)data[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ffc": "process_data_08002ffc",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "value2",
                "uVar4": "flag",
                "uVar5": "value1",
                "puVar3": "ptr"
            },
            "calling": [],
            "called": [
                "FUN_08002940",
                "FUN_08000f8c",
                "FUN_08002f4c",
                "FUN_08003f94",
                "FUN_0800295c",
                "FUN_08002f66"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800312c": {
            "entrypoint": "0x0800312c",
            "current_name": "combine_bytes_0800312c",
            "code": "\nbyte combineBytes_0800312c(int inputValue)\n\n{\n  return *(byte *)(inputValue + 0x3a) | *(byte *)(inputValue + 0x39);\n}\n\n",
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003138": {
            "entrypoint": "0x08003138",
            "current_name": "get_bit_value_08003138",
            "code": "\nuint getBitValue_08003138(uint value,int address)\n\n{\n  return *(uint *)(address + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08003138": "get_bit_value_08003138",
                "param_1": "value",
                "param_2": "address"
            },
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "update_bit_0800314e",
            "code": "\nvoid updateBit_0800314e(uint value,int array)\n\n{\n  uint index;\n  \n  index = (value << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) | 1 << (value & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "update_bit_0800314e",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "update_bit_value_0800316c",
            "code": "\nvoid updateBitValue_0800316c(uint inputValue,int arrayAddress)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (inputValue << 0x18) >> 0x1c;\n  *(uint *)(arrayAddress + shiftedIndex * 4) = *(uint *)(arrayAddress + shiftedIndex * 4) & ~(1 << (inputValue & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "update_bit_value_0800316c",
                "param_1": "inputValue",
                "param_2": "arrayAddress",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800318c": {
            "entrypoint": "0x0800318c",
            "current_name": "get_memory_address_0800318c",
            "code": "\nundefined4 getMemoryAddress_0800318c(undefined4 input_value)\n\n{\n  switch(input_value) {\n  case 0:\n    return 0x40020000;\n  case 1:\n    return 0x40020400;\n  case 2:\n    return 0x40020800;\n  case 3:\n    return 0x40020c00;\n  case 4:\n    return 0x40021000;\n  case 5:\n    return 0x40021400;\n  case 6:\n    return 0x40021800;\n  case 7:\n    return 0x40021c00;\n  case 8:\n    return 0x40022000;\n  case 9:\n    return 0x40022400;\n  case 10:\n    return 0x40022800;\n  default_address:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_0800318c": "get_memory_address_0800318c",
                "param_1": "input_value",
                "default": "default_address"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031fc": {
            "entrypoint": "0x080031fc",
            "current_name": "set_flag_and_return_address_080031fc",
            "code": "\n\n\nundefined4 setFlagAndReturnAddress_080031fc(undefined4 flagIndex)\n\n{\n  undefined4 returnAddress;\n  \n  switch(flagIndex) {\n  case 0:\n    _DAT_40023830 = _DAT_40023830 | 1;\n    returnAddress = 0x40020000;\n    break;\n  case 1:\n    _DAT_40023830 = _DAT_40023830 | 2;\n    returnAddress = 0x40020400;\n    break;\n  case 2:\n    _DAT_40023830 = _DAT_40023830 | 4;\n    returnAddress = 0x40020800;\n    break;\n  case 3:\n    _DAT_40023830 = _DAT_40023830 | 8;\n    returnAddress = 0x40020c00;\n    break;\n  case 4:\n    _DAT_40023830 = _DAT_40023830 | 0x10;\n    returnAddress = 0x40021000;\n    break;\n  case 5:\n    _DAT_40023830 = _DAT_40023830 | 0x20;\n    returnAddress = 0x40021400;\n    break;\n  case 6:\n    _DAT_40023830 = _DAT_40023830 | 0x40;\n    returnAddress = 0x40021800;\n    break;\n  case 7:\n    _DAT_40023830 = _DAT_40023830 | 0x80;\n    returnAddress = 0x40021c00;\n    break;\n  case 8:\n    _DAT_40023830 = _DAT_40023830 | 0x100;\n    returnAddress = 0x40022000;\n    break;\n  case 9:\n    _DAT_40023830 = _DAT_40023830 | 0x200;\n    returnAddress = 0x40022400;\n    break;\n  case 10:\n    _DAT_40023830 = _DAT_40023830 | 0x400;\n    returnAddress = 0x40022800;\n    break;\n  default:\n    returnAddress = 0;\n  }\n  return returnAddress;\n}\n\n",
            "renaming": {
                "FUN_080031fc": "set_flag_and_return_address_080031fc",
                "param_1": "flagIndex",
                "uVar1": "returnAddress"
            },
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003380": {
            "entrypoint": "0x08003380",
            "current_name": "check_validity_and_return_value_08003380",
            "code": "\nundefined4 check_validity_and_return_value_08003380(undefined4 input_param,undefined4 unused_param,undefined4 array_param,undefined4 size_param)\n\n{\n  int index;\n  \n  index = get_valid_index(input_param,&DAT_08005a18,array_param,size_param,size_param);\n  if ((uint)(index << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n\n",
            "renaming": {
                "FUN_08003380": "check_validity_and_return_value_08003380",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "array_param",
                "param_4": "size_param",
                "iVar1": "index",
                "get_index_if_valid_0800354a": "get_valid_index"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800339c": {
            "entrypoint": "0x0800339c",
            "current_name": "get_result_based_on_index_0800339c",
            "code": "\nundefined4 get_result_based_on_index_0800339c(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int index;\n  uint shifted_index;\n  \n  index = get_index_if_valid_0800354a(input_1,&DAT_08005a3c,input_3,input_4,input_4);\n  shifted_index = (uint)(index << 0xc) >> 0x1b;\n  if (shifted_index == 3) {\n    return 8;\n  }\n  if (shifted_index != 4) {\n    if (shifted_index != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_0800339c": "get_result_based_on_index_0800339c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "index",
                "uVar2": "shifted_index"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033c8": {
            "entrypoint": "0x080033c8",
            "current_name": "clear_memory_bits_080033c8",
            "code": "\n\n\nvoid clearMemoryBits_080033c8(void)\n\n{\n  _DAT_40023840 = _DAT_40023840 & 0xdfffffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033c8": "clear_memory_bits_080033c8"
            },
            "calling": [
                "FUN_08000f56"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033d8": {
            "entrypoint": "0x080033d8",
            "current_name": "process_data_080033d8",
            "code": "\nvoid processData_080033d8(undefined4 inputData)\n\n{\n  int validityCheckResult;\n  int valueArray [5];\n  \n  valueArray[0] = get_valid_value_080034f4(inputData,&DAT_08005a18);\n  if ((valueArray[0] != 0) && ((validityCheckResult = check_validity_and_return_value_08003380(inputData), validityCheckResult == 0 || (validityCheckResult == 0x10)))) {\n    clear_bit_and_set_flag_08000f72(valueArray,validityCheckResult);\n    set_memory_reset_08000f56(valueArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033d8": "process_data_080033d8",
                "param_1": "inputData",
                "iVar1": "validityCheckResult",
                "local_1c": "valueArray"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000f72",
                "FUN_08003380",
                "FUN_08000f56",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800340c": {
            "entrypoint": "0x0800340c",
            "current_name": "initialize_settings_0800340c",
            "code": "\nvoid initialize_settings_0800340c(void)\n\n{\n  apply_settings();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800340c": "initialize_settings_0800340c",
                "apply_settings_080035fc": "apply_settings"
            },
            "calling": [
                "FUN_0800268e"
            ],
            "called": [
                "FUN_080035fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003414": {
            "entrypoint": "0x08003414",
            "current_name": "process_parameter_08003414",
            "code": "\nvoid processParameter_08003414(undefined4 inputParameter)\n\n{\n  int result;\n  uint index;\n  int values [16];\n  \n  values[0] = get_valid_value_080034f4(inputParameter,&DAT_08005a3c);\n  if ((values[0] != 0) &&\n     ((((result = get_result_based_on_index_0800339c(inputParameter), result == 0 || (result == 4)) || (result == 8)) ||\n      ((result == 0xc || (result == 0x18)))))) {\n    index = get_index_if_valid_0800354a(inputParameter,&DAT_08005a3c);\n    if ((index & 0x100000) == 0) {\n      update_and_check_flags_08002864(values,result);\n    }\n    else {\n      update_bitwise_operations_080028f0(values,result);\n    }\n    initialize_and_check_settings_0800268e(values);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003414": "process_parameter_08003414",
                "param_1": "inputParameter",
                "iVar1": "result",
                "uVar2": "index",
                "local_4c": "values"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_0800339c",
                "FUN_0800268e",
                "FUN_08002864",
                "FUN_080028f0",
                "FUN_080034f4",
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800346c": {
            "entrypoint": "0x0800346c",
            "current_name": "initialize_data_0800346c",
            "code": "\nvoid initializeData_0800346c(void)\n\n{\n  fetchData();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800346c": "initialize_data_0800346c",
                "get_data_08000e30": "fetchData"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "FUNC_08003474",
            "code": "\nvoid FUNC_08003474(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "FUNC_08003474"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003476": {
            "entrypoint": "0x08003476",
            "current_name": "execute_program_08003476",
            "code": "\nvoid execute_program_08003476(void)\n\n{\n  calculate_sum();\n  initialize_program();\n  FUNC_08003474();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003476": "execute_program_08003476",
                "update_sum_08000e18": "calculate_sum",
                "execute_initial_setup_08000f4e": "initialize_program"
            },
            "calling": [],
            "called": [
                "FUN_08000f4e",
                "FUN_08003474",
                "FUN_08000e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003486": {
            "entrypoint": "0x08003486",
            "current_name": "update_registers_08003486",
            "code": "\nvoid update_registers_08003486(uint input,undefined4 address,undefined4 value)\n\n{\n  undefined4 flag_address;\n  uint bit_mask;\n  undefined4 address_param;\n  undefined4 value_param;\n  undefined4 constant;\n  \n  flag_address = set_flag_and_return_address_080031fc((input << 0x18) >> 0x1c);\n  bit_mask = 1 << (input & 0xf) & 0xffff;\n  constant = 2;\n  address_param = address;\n  value_param = value;\n  update_registers_08003486_08000fb4(flag_address,&bit_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003486": "update_registers_08003486",
                "param_1": "input",
                "param_2": "address",
                "param_3": "value",
                "uVar1": "flag_address",
                "local_24": "bit_mask",
                "local_20": "address_param",
                "local_1c": "value_param",
                "local_18": "constant"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034b6": {
            "entrypoint": "0x080034b6",
            "current_name": "update_param_value_080034b6",
            "code": "\nvoid update_param_value_080034b6(undefined4 param_value_1,undefined2 param_value_2,int status,undefined4 param_value_3)\n\n{\n  if (status == 0) {\n    update_param_value_080034b6_08001198(param_value_1,param_value_2,0,param_value_3,param_value_3);\n    return;\n  }\n  update_param_value_080034b6_08001198(param_value_1,param_value_2,1,param_value_3,param_value_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034b6": "update_param_value_080034b6",
                "param_1": "param_value_1",
                "param_2": "param_value_2",
                "param_3": "status",
                "param_4": "param_value_3"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [
                "FUN_08001198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034ce": {
            "entrypoint": "0x080034ce",
            "current_name": "initialize_system_080034ce",
            "code": "\nvoid initialize_system_080034ce(void)\n\n{\n  initialize_module_1();\n  initialize_module_2();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034ce": "initialize_system_080034ce",
                "initialize_system_08000de4": "initialize_module_1",
                "initialize_system_08000c8c": "initialize_module_2"
            },
            "calling": [
                "FUN_08000d8e"
            ],
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034da": {
            "entrypoint": "0x080034da",
            "current_name": "find_value_080034da",
            "code": "\nundefined4 find_value_080034da(int target_value,short *values_list)\n\n{\n  while( true ) {\n    if (*values_list == -1) {\n      return 0;\n    }\n    if (*values_list == target_value) break;\n    values_list = values_list + 6;\n  }\n  return *(undefined4 *)(values_list + 2);\n}\n\n",
            "renaming": {
                "FUN_080034da": "find_value_080034da",
                "param_1": "target_value",
                "param_2": "values_list"
            },
            "calling": [
                "FUN_080034da",
                "FUN_080034f4"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034f4": {
            "entrypoint": "0x080034f4",
            "current_name": "get_valid_value_080034f4",
            "code": "\nundefined4 getValidValue_080034f4(int input)\n\n{\n  undefined4 output;\n  \n  if (input != -1) {\n    output = find_value_080034da();\n    return output;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080034f4": "get_valid_value_080034f4",
                "param_1": "input",
                "uVar1": "output"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_08003414",
                "FUN_080033d8",
                "FUN_08003978",
                "FUN_08003d18"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003506": {
            "entrypoint": "0x08003506",
            "current_name": "find_value_index_08003506",
            "code": "\nint find_value_index_08003506(int value,short *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 2) == value) break;\n    array = array + 6;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08003506": "find_value_index_08003506",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800351e": {
            "entrypoint": "0x0800351e",
            "current_name": "find_value_index_or_default_0800351e",
            "code": "\nundefined4 find_value_index_or_default_0800351e(int input_value)\n\n{\n  undefined4 value_index;\n  \n  if (input_value != 0) {\n    value_index = find_value_index_08003506();\n    return value_index;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800351e": "find_value_index_or_default_0800351e",
                "param_1": "input_value",
                "uVar1": "value_index"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_0800447c"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800352e": {
            "entrypoint": "0x0800352e",
            "current_name": "find_value_index_0800352e",
            "code": "\nundefined4 find_value_index_0800352e(int target_value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == target_value) break;\n    array = array + 6;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_0800352e": "find_value_index_0800352e",
                "param_1": "target_value",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800354a": {
            "entrypoint": "0x0800354a",
            "current_name": "get_index_if_valid_0800354a",
            "code": "\nundefined4 getIndexIfValid_0800354a(int index)\n\n{\n  undefined4 valueIndex;\n  \n  if (index == -1) {\n    return 0xffffffff;\n  }\n  valueIndex = find_value_index_0800352e();\n  return valueIndex;\n}\n\n",
            "renaming": {
                "FUN_0800354a": "get_index_if_valid_0800354a",
                "param_1": "index",
                "uVar1": "valueIndex"
            },
            "calling": [
                "FUN_08003414",
                "FUN_0800339c",
                "FUN_08003978",
                "FUN_08003380"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800355e": {
            "entrypoint": "0x0800355e",
            "current_name": "find_value_0800355e",
            "code": "\nundefined4 find_value_0800355e(int value_to_find,short *array_of_values)\n\n{\n  if (value_to_find == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array_of_values == -1) {\n      return 0;\n    }\n    if (value_to_find == *array_of_values) break;\n    array_of_values = array_of_values + 6;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800355e": "find_value_0800355e",
                "param_1": "value_to_find",
                "param_2": "array_of_values"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003582": {
            "entrypoint": "0x08003582",
            "current_name": "compare_and_return_non_zero_08003582",
            "code": "\nint compareAndReturnNonZero_08003582(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08003582": "compare_and_return_non_zero_08003582",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003594": {
            "entrypoint": "0x08003594",
            "current_name": "call_function_if_not_null_08003594",
            "code": "\nvoid callFunctionIfNotNull_08003594(void)\n\n{\n  if (DAT_20000188 != (code *)0x0) {\n    (*DAT_20000188)(DAT_200001ac);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003594": "call_function_if_not_null_08003594"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035bc": {
            "entrypoint": "0x080035bc",
            "current_name": "initialize_system_080035bc",
            "code": "\n\n\nvoid initializeSystem_080035bc(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035bc": "initialize_system_080035bc"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fc": {
            "entrypoint": "0x080035fc",
            "current_name": "apply_settings_080035fc",
            "code": "\n\n\nvoid applySettings_080035fc(int *setting)\n\n{\n  if (*setting == 0x40010000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffe;\n  }\n  if (*setting == 0x40000000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffe;\n  }\n  if (*setting == 0x40000400) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffd;\n  }\n  if (*setting == 0x40000800) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffb;\n  }\n  if (*setting == 0x40000c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffff7;\n  }\n  if (*setting == 0x40001000) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffef;\n  }\n  if (*setting == 0x40001400) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffdf;\n  }\n  if (*setting == 0x40010400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffd;\n  }\n  if (*setting == 0x40014000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffeffff;\n  }\n  if (*setting == 0x40014400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffdffff;\n  }\n  if (*setting == 0x40014800) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffbffff;\n  }\n  if (*setting == 0x40001800) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffbf;\n  }\n  if (*setting == 0x40001c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffff7f;\n  }\n  if (*setting == 0x40002000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffeff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fc": "apply_settings_080035fc",
                "param_1": "setting"
            },
            "calling": [
                "FUN_0800340c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003750": {
            "entrypoint": "0x08003750",
            "current_name": "subtract_four_08003750",
            "code": "\nint subtractFour_08003750(int inputNumber)\n\n{\n  return inputNumber + -4;\n}\n\n",
            "renaming": {
                "FUN_08003750": "subtract_four_08003750",
                "param_1": "inputNumber"
            },
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003754": {
            "entrypoint": "0x08003754",
            "current_name": "execute_function_if_condition_met_08003754",
            "code": "\nvoid executeFunctionIfConditionMet_08003754(int inputParameter)\n\n{\n  int result;\n  \n  result = getFunctionAddress();\n  if ((*(functionPointer **)(result + 0x48) != (functionPointer *)0x0) && (*(char *)(inputParameter + 0x18) == '\\x01')) {\n    (**(functionPointer **)(result + 0x48))(result,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003754": "execute_function_if_condition_met_08003754",
                "param_1": "inputParameter",
                "iVar1": "result",
                "subtract_four_08003750": "getFunctionAddress",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376e": {
            "entrypoint": "0x0800376e",
            "current_name": "execute_subtracted_function_0800376e",
            "code": "\nvoid executeSubtractedFunction_0800376e(void)\n\n{\n  int subtractedValue;\n  \n  subtractedValue = subtractFour();\n  if (*(code **)(subtractedValue + 0x44) != (code *)0x0) {\n    (**(code **)(subtractedValue + 0x44))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800376e": "execute_subtracted_function_0800376e",
                "iVar1": "subtractedValue",
                "subtract_four_08003750": "subtractFour"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800377c": {
            "entrypoint": "0x0800377c",
            "current_name": "execute_condition_checks_if_enabled_0800377c",
            "code": "\nvoid execute_condition_checks_if_enabled_0800377c(void)\n\n{\n  if (DAT_200001b0 != 0) {\n    execute_condition_checks_080026ce();\n  }\n  if (DAT_200001d4 != 0) {\n    execute_condition_checks_080026ce();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800377c": "execute_condition_checks_if_enabled_0800377c"
            },
            "calling": [],
            "called": [
                "FUN_080026ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800387c": {
            "entrypoint": "0x0800387c",
            "current_name": "subtract_four_0800387c",
            "code": "\nint subtract_four_0800387c(int input_num)\n\n{\n  return input_num + -4;\n}\n\n",
            "renaming": {
                "FUN_0800387c": "subtract_four_0800387c",
                "param_1": "input_num"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003880",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003880": {
            "entrypoint": "0x08003880",
            "current_name": "validate_and_process_parameters_08003880",
            "code": "\nvoid validate_and_process_parameters_08003880(int binary_address,int flag,int parameter,undefined4 function_address)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (parameter == *(int *)(binary_address + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5e) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      validate_input(binary_address,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5e) = 1;\n    process_parameters(binary_address,result + 0x68,0x20,8,function_address);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003880": "validate_and_process_parameters_08003880",
                "param_1": "binary_address",
                "param_2": "flag",
                "param_3": "parameter",
                "param_4": "function_address",
                "iVar1": "result",
                "subtract_four_0800387c": "subtract_four",
                "validate_input_08001460": "validate_input",
                "process_parameters_080014ec": "process_parameters"
            },
            "calling": [
                "FUN_0800165a"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_08001460",
                "FUN_080014ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038d0": {
            "entrypoint": "0x080038d0",
            "current_name": "execute_conditional_function_080038d0",
            "code": "\nvoid executeConditionalFunction_080038d0(undefined4 inputParam)\n\n{\n  int result;\n  \n  result = getFunctionPointer();\n  if (((*(functionPointer **)(result + 0x60) != (functionPointer *)0x0) && (*(char *)(result + 0x5e) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(functionPointer **)(result + 0x60))(result + 0x68);\n  }\n  initializeParameters(inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080038d0": "execute_conditional_function_080038d0",
                "param_1": "inputParam",
                "iVar1": "result",
                "subtract_four_0800387c": "getFunctionPointer",
                "code": "functionPointer",
                "initialize_parameters_08001578": "initializeParameters"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08001684",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003900": {
            "entrypoint": "0x08003900",
            "current_name": "initialize_if_not_zero_08003900",
            "code": "\nvoid initialize_if_not_zero_08003900(undefined4 input_param)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (*(char *)(result + 0x5f) == '\\0') {\n    initialize_parameters(input_param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003900": "initialize_if_not_zero_08003900",
                "param_1": "input_param",
                "iVar1": "result",
                "subtract_four_0800387c": "subtract_four",
                "initialize_parameters_08001578": "initialize_parameters"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003978": {
            "entrypoint": "0x08003978",
            "current_name": "configure_uart_pins_08003978",
            "code": "\n\n\nvoid configureUartPins_08003978(int *pins)\n\n{\n  int uartPin1;\n  int uartPin2;\n  undefined4 uartPin1Address;\n  uint uartPin2Index;\n  uint uartPin1Mask;\n  uint uartPin2Bits;\n  uint uartPin2Shifted;\n  undefined4 registerValue;\n  uint registerValueShifted;\n  \n  if (pins != (int *)0x0) {\n    uartPin1 = get_valid_value_080034f4((int)*(short *)(pins + 0x16),&DAT_08005ca0);\n    uartPin2 = get_valid_value_080034f4((int)*(short *)((int)pins + 0x5a),&DAT_08005c10);\n    if ((uartPin2 == 0) || (uartPin1 == 0)) {\n      printError(\"ERROR: at least one UART pin has no peripheral\\n\",uartPin2);\n    }\n    else {\n      uartPin1 = compareRegisters(uartPin1);\n      *pins = uartPin1;\n      if (uartPin1 == 0) {\n        printError(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPin1 == 0x40011000) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffef;\n          _DAT_40023844 = _DAT_40023844 | 0x10;\n          *(undefined *)(pins + 0x11) = 0;\n          *(undefined *)(pins + 0x17) = 0x25;\n        }\n        else if (uartPin1 == 0x40004400) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffdffff;\n          _DAT_40023840 = _DAT_40023840 | 0x20000;\n          *(undefined *)(pins + 0x11) = 1;\n          *(undefined *)(pins + 0x17) = 0x26;\n        }\n        else if (uartPin1 == 0x40004800) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffbffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000;\n          *(undefined *)(pins + 0x11) = 2;\n          *(undefined *)(pins + 0x17) = 0x27;\n        }\n        else if (uartPin1 == 0x40004c00) {\n          _DAT_40023820 = _DAT_40023820 & 0xfff7ffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000;\n          *(undefined *)(pins + 0x11) = 3;\n          *(undefined *)(pins + 0x17) = 0x34;\n        }\n        else if (uartPin1 == 0x40005000) {\n          _DAT_40023820 = _DAT_40023820 & 0xffefffff;\n          _DAT_40023840 = _DAT_40023840 | 0x100000;\n          *(undefined *)(pins + 0x11) = 4;\n          *(undefined *)(pins + 0x17) = 0x35;\n        }\n        else if (uartPin1 == 0x40011400) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffdf;\n          _DAT_40023844 = _DAT_40023844 | 0x20;\n          *(undefined *)(pins + 0x11) = 5;\n          *(undefined *)(pins + 0x17) = 0x47;\n        }\n        else if (uartPin1 == 0x40007800) {\n          _DAT_40023820 = _DAT_40023820 & 0xbfffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000000;\n          *(undefined *)(pins + 0x11) = 6;\n          *(undefined *)(pins + 0x17) = 0x52;\n        }\n        else if (uartPin1 == 0x40007c00) {\n          _DAT_40023820 = _DAT_40023820 & 0x7fffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000000;\n          *(undefined *)(pins + 0x11) = 7;\n          *(undefined *)(pins + 0x17) = 0x53;\n        }\n        uartPin1Address = getPeripheralAddress((uint)((int)*(short *)((int)pins + 0x5a) << 0x18) >> 0x1c);\n        uartPin2Index = getPeripheralIndex((int)*(short *)((int)pins + 0x5a),&DAT_08005c10);\n        uartPin1Mask = 1 << (*(ushort *)((int)pins + 0x5a) & 0xf) & 0xffff;\n        uartPin2Bits = (uartPin2Index >> 3 & 1) << 4 | uartPin2Index & 7;\n        uartPin2Shifted = (uartPin2Index << 0x1a) >> 0x1e;\n        registerValueShifted = (uartPin2Index << 0x11) >> 0x19;\n        registerValue = 3;\n        updateRegisters(uartPin1Address,&uartPin1Mask);\n        uartPin1Address = getPeripheralAddress((uint)((int)*(short *)(pins + 0x16) << 0x18) >> 0x1c);\n        uartPin2Index = getPeripheralIndex((int)*(short *)(pins + 0x16),&DAT_08005ca0);\n        uartPin1Mask = 1 << (*(ushort *)(pins + 0x16) & 0xf) & 0xffff;\n        uartPin2Bits = (uartPin2Index >> 3 & 1) << 4 | uartPin2Index & 7;\n        uartPin2Shifted = (uartPin2Index << 0x1a) >> 0x1e;\n        updateRegisters(uartPin1Address,&uartPin1Mask);\n        (&DAT_200002b4)[*(byte *)(pins + 0x11)] = pins + 1;\n        pins[1] = *pins;\n        pins[2] = pins[0x12];\n        pins[3] = pins[0x13];\n        pins[4] = pins[0x14];\n        pins[5] = pins[0x15];\n        pins[6] = 0xc;\n        pins[7] = 0;\n        pins[8] = 0;\n        processData(pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003978": "configure_uart_pins_08003978",
                "param_1": "pins",
                "iVar1": "uartPin1",
                "iVar2": "uartPin2",
                "uVar3": "uartPin1Address",
                "uVar4": "uartPin2Index",
                "local_2c": "uartPin1Mask",
                "local_28": "uartPin2Bits",
                "local_24": "uartPin2Shifted",
                "local_20": "registerValue",
                "local_1c": "registerValueShifted",
                "set_flag_and_return_address_080031fc": "getPeripheralAddress",
                "get_index_if_valid_0800354a": "getPeripheralIndex",
                "validate_and_process_input_08004fdc": "printError",
                "compare_and_return_non_zero_08003582": "compareRegisters",
                "update_registers_08000fb4": "updateRegisters",
                "process_data_08002d72": "processData"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_08004388"
            ],
            "called": [
                "FUN_08003582",
                "FUN_08004fdc",
                "FUN_080031fc",
                "FUN_08000fb4",
                "FUN_080034f4",
                "FUN_0800354a",
                "FUN_08002d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003cc8": {
            "entrypoint": "0x08003cc8",
            "current_name": "initialize_uart_08003cc8",
            "code": "\nvoid initializeUART_08003cc8(void)\n\n{\n  int validValue1;\n  undefined4 validValue2;\n  \n  validValue1 = get_valid_value_080034f4(0x38,&DAT_08005ca0);\n  if (validValue1 != 0) {\n    validValue2 = get_valid_value_080034f4(0x38,&DAT_08005ca0);\n    DAT_2000008a = find_value_index_or_default_0800351e(validValue2,&DAT_08005c10);\n    DAT_20000088 = 0x38;\n    DAT_20000078 = 0x2580;\n    DAT_20000084 = 0;\n    DAT_2000007c = 0;\n    DAT_20000080 = 0;\n    configureUARTPins(&DAT_20000030);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003cc8": "initialize_uart_08003cc8",
                "iVar1": "validValue1",
                "uVar2": "validValue2",
                "configure_uart_pins_08003978": "configureUARTPins"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08003978",
                "FUN_0800351e",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d18": {
            "entrypoint": "0x08003d18",
            "current_name": "process_data_08003d18",
            "code": "\nuint process_data_08003d18(undefined4 status,uint value)\n\n{\n  int initialData;\n  int validValue;\n  uint index;\n  \n  initialData = getData();\n  validValue = getValidValue(0x38,&DAT_08005ca0);\n  if (validValue == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 10 &&\n      (((&DAT_200002b4)[index] == 0 ||\n       (validValue = getValidValue(0x38,&DAT_08005ca0), *(int *)(&DAT_200002b4)[index] != validValue))));\n      index = index + 1 & 0xff) {\n  }\n  if (9 < index) {\n    if ((9 < DAT_20000074) && (initializeUart(), 9 < DAT_20000074)) {\n      return 0;\n    }\n    index = (uint)DAT_20000074;\n  }\n  do {\n    validValue = processData((&DAT_200002b4)[index],status,value & 0xffff,1000);\n    if (validValue == 0) {\n      return value;\n    }\n    validValue = getData();\n  } while ((uint)(validValue - initialData) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003d18": "process_data_08003d18",
                "param_1": "status",
                "param_2": "value",
                "iVar1": "initialData",
                "iVar2": "validValue",
                "uVar3": "index",
                "process_data_08002dd0": "processData",
                "get_data_08000e30": "getData",
                "get_valid_value_080034f4": "getValidValue",
                "initialize_uart_08003cc8": "initializeUart"
            },
            "calling": [
                "FUN_080040ec"
            ],
            "called": [
                "FUN_08003cc8",
                "FUN_08000e30",
                "FUN_08002dd0",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003dd0": {
            "entrypoint": "0x08003dd0",
            "current_name": "is_bit_set_08003dd0",
            "code": "\nbool is_bit_set_08003dd0(int input_value)\n\n{\n  uint combined_byte;\n  \n  combined_byte = combine_bytes((&DAT_200002b4)[*(byte *)(input_value + 0x44)]);\n  return (combined_byte & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_08003dd0": "is_bit_set_08003dd0",
                "param_1": "input_value",
                "uVar1": "combined_byte",
                "combine_bytes_0800312c": "combine_bytes"
            },
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003df4": {
            "entrypoint": "0x08003df4",
            "current_name": "is_flag_set_08003df4",
            "code": "\nbool isFlagSet_08003df4(int input)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combineBytes((&DAT_200002b4)[*(byte *)(input + 0x44)]);\n  return (combinedBytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_08003df4": "is_flag_set_08003df4",
                "param_1": "input",
                "uVar1": "combinedBytes",
                "combine_bytes_0800312c": "combineBytes"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e18": {
            "entrypoint": "0x08003e18",
            "current_name": "extract_and_validate_08003e18",
            "code": "\nundefined4 extract_and_validate_08003e18(int input_ptr,undefined *output_ptr,undefined4 context_1,undefined4 context_2)\n\n{\n  int bit_set;\n  \n  if (input_ptr == 0) {\n    return 0xffffffff;\n  }\n  bit_set = is_bit_set();\n  if (bit_set == 0) {\n    *output_ptr = *(undefined *)(input_ptr + 0x45);\n    validate_input((&DAT_200002b4)[*(byte *)(input_ptr + 0x44)],input_ptr + 0x45,1,&DAT_200002b4,context_2);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08003e18": "extract_and_validate_08003e18",
                "param_1": "input_ptr",
                "param_2": "output_ptr",
                "param_3": "context_1",
                "param_4": "context_2",
                "iVar1": "bit_set",
                "is_bit_set_08003dd0": "is_bit_set",
                "validate_input_08002efa": "validate_input"
            },
            "calling": [
                "FUN_080042ac"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e54": {
            "entrypoint": "0x08003e54",
            "current_name": "update_character_data_08003e54",
            "code": "\nvoid updateCharacterData_08003e54(int characterData,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int isBitSetResult;\n  uint bitIndex;\n  \n  if (characterData != 0) {\n    isBitSetResult = is_bit_set_08003dd0();\n    if (isBitSetResult == 0) {\n      bitIndex = (uint)*(byte *)(characterData + 0x44);\n      *(undefined4 *)(&DAT_20000214 + bitIndex * 4) = param2;\n      *(int *)(&DAT_2000023c + bitIndex * 4) = characterData;\n      update_character_08000e60((int)*(char *)(characterData + 0x5c),0,1,bitIndex,param4);\n      set_bit_08000ec4((int)*(char *)(characterData + 0x5c));\n      validate_input_08002efa((&DAT_200002b4)[*(byte *)(characterData + 0x44)],characterData + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e54": "update_character_data_08003e54",
                "param_1": "characterData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "isBitSetResult",
                "uVar2": "bitIndex"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eac": {
            "entrypoint": "0x08003eac",
            "current_name": "update_character_data_08003eac",
            "code": "\nvoid updateCharacterData_08003eac(int characterData,undefined4 dataValue)\n\n{\n  byte byteValue;\n  \n  if (characterData != 0) {\n    byteValue = *(byte *)(characterData + 0x44);\n    *(undefined4 *)(&DAT_20000264 + (uint)byteValue * 4) = dataValue;\n    *(int *)(&DAT_2000028c + (uint)byteValue * 4) = characterData;\n    update_character_08000e60((int)*(char *)(characterData + 0x5c),0,2);\n    set_bit_08000ec4((int)*(char *)(characterData + 0x5c));\n    validate_input_08002eb2((&DAT_200002b4)[*(byte *)(characterData + 0x44)],\n                 *(int *)(characterData + 0x68) + (uint)*(ushort *)(characterData + 0x6e),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003eac": "update_character_data_08003eac",
                "param_1": "characterData",
                "param_2": "dataValue",
                "bVar1": "byteValue"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_08002eb2",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f00": {
            "entrypoint": "0x08003f00",
            "current_name": "find_matching_index_08003f00",
            "code": "\nuint find_matching_index_08003f00(int input_value)\n\n{\n  uint matching_index;\n  \n  if (input_value == 0) {\n    matching_index = 10;\n  }\n  else {\n    matching_index = 0;\n    while( true ) {\n      if (9 < matching_index) {\n        return matching_index;\n      }\n      if (input_value == (&DAT_200002b4)[matching_index]) break;\n      matching_index = matching_index + 1 & 0xff;\n    }\n  }\n  return matching_index;\n}\n\n",
            "renaming": {
                "FUN_08003f00": "find_matching_index_08003f00",
                "param_1": "input_value",
                "uVar1": "matching_index"
            },
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f24": {
            "entrypoint": "0x08003f24",
            "current_name": "execute_matching_function_08003f24",
            "code": "\nvoid executeMatchingFunction_08003f24(void)\n\n{\n  uint matchingIndex;\n  \n  matchingIndex = findMatchingIndex();\n  if (matchingIndex < 10) {\n    (**(code **)(&DAT_20000214 + matchingIndex * 4))(*(undefined4 *)(&DAT_2000023c + matchingIndex * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f24": "execute_matching_function_08003f24",
                "uVar1": "matchingIndex",
                "find_matching_index_08003f00": "findMatchingIndex"
            },
            "calling": [
                "FUN_08002f66"
            ],
            "called": [
                "FUN_08003f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f48": {
            "entrypoint": "0x08003f48",
            "current_name": "execute_matching_function_08003f48",
            "code": "\nvoid executeMatchingFunction_08003f48(void)\n\n{\n  uint matchingIndex;\n  int returnValue;\n  int memoryAddress;\n  \n  matchingIndex = findMatchingIndex();\n  memoryAddress = *(int *)(&DAT_2000028c + matchingIndex * 4);\n  if ((matchingIndex < 10) && (returnValue = (**(code **)(&DAT_20000264 + matchingIndex * 4))(memoryAddress), returnValue != -1)) {\n    validateInput((&DAT_200002b4)[*(byte *)(memoryAddress + 0x44)],\n                 *(int *)(memoryAddress + 0x68) + (uint)*(ushort *)(memoryAddress + 0x6e),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f48": "execute_matching_function_08003f48",
                "uVar1": "matchingIndex",
                "iVar2": "returnValue",
                "iVar3": "memoryAddress",
                "find_matching_index_08003f00": "findMatchingIndex",
                "validate_input_08002eb2": "validateInput"
            },
            "calling": [
                "FUN_08002f4c"
            ],
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "FUNC_08003f94",
            "code": "\nvoid FUNC_08003f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "FUNC_08003f94"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004094": {
            "entrypoint": "0x08004094",
            "current_name": "allocate_memory_08004094",
            "code": "\nundefined * allocate_memory_08004094(int size)\n\n{\n  undefined *allocated_ptr;\n  \n  if (DAT_200002dc == (undefined *)0x0) {\n    DAT_200002dc = &DAT_20000678;\n  }\n  allocated_ptr = DAT_200002dc;\n  if (DAT_200002dc + size <= &stack0x00000000) {\n    DAT_200002dc = DAT_200002dc + size;\n    return allocated_ptr;\n  }\n  DAT_20000674 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "param_1": "size",
                "puVar1": "allocated_ptr"
            },
            "calling": [
                "FUN_0800500c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d0": {
            "entrypoint": "0x080040d0",
            "current_name": "initialize_return_value_080040d0",
            "code": "\nundefined4 initializeReturnValue_080040d0(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040d0": "initialize_return_value_080040d0"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d6": {
            "entrypoint": "0x080040d6",
            "current_name": "set_memory_permission_080040d6",
            "code": "\nundefined4 setMemoryPermission_080040d6(undefined4 baseAddress,int offset)\n\n{\n  *(undefined4 *)(offset + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040d6": "set_memory_permission_080040d6",
                "param_1": "baseAddress",
                "param_2": "offset"
            },
            "calling": [
                "FUN_080056d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e0": {
            "entrypoint": "0x080040e0",
            "current_name": "initialize_080040e0",
            "code": "\nvoid initialize_080040e0(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080040e0": "initialize_080040e0",
                "undefined4": "void"
            },
            "calling": [
                "FUN_080056f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e4": {
            "entrypoint": "0x080040e4",
            "current_name": "initialize_return_value_080040e4",
            "code": "\nundefined4 initializeReturnValue_080040e4(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e4": "initialize_return_value_080040e4"
            },
            "calling": [
                "FUN_08005718"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "initialize_080040e8",
            "code": "\nundefined4 initialize_080040e8(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "initialize_080040e8"
            },
            "calling": [
                "FUN_0800573c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040ec": {
            "entrypoint": "0x080040ec",
            "current_name": "process_and_forward_data_080040ec",
            "code": "\nvoid process_and_forward_data_080040ec(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  process_data_08003d18(input_param_2,input_param_3,input_param_3,input_param_4,input_param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040ec": "process_and_forward_data_080040ec",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_0800562a"
            ],
            "called": [
                "FUN_08003d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040f8": {
            "entrypoint": "0x080040f8",
            "current_name": "continuous_loop_080040f8",
            "code": "\nvoid continuous_loop_080040f8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040f8": "continuous_loop_080040f8"
            },
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "called": [
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040fc": {
            "entrypoint": "0x080040fc",
            "current_name": "initialize_data_080040fc",
            "code": "\nundefined4 initializeData_080040fc(void)\n\n{\n  DAT_20000674 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040fc": "initialize_data_080040fc"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800410c": {
            "entrypoint": "0x0800410c",
            "current_name": "initialize_something_0800410c",
            "code": "\nundefined4 initializeSomething_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800410c": "initialize_something_0800410c"
            },
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "process_parameter_08004110",
            "code": "\nvoid process_parameter_08004110(uint index,undefined4 mode,undefined4 data_size,undefined *data_ptr)\n\n{\n  int bit_value;\n  undefined *bit_array_ptr;\n  int bit_array_index;\n  \n  if (index < 0x60) {\n    bit_array_index = (int)*(short *)(&DAT_08005d3c + index * 2);\n    bit_array_ptr = &DAT_08005d3c;\n  }\n  else {\n    bit_array_index = -1;\n    bit_array_ptr = data_ptr;\n  }\n  if (bit_array_index != -1) {\n    bit_value = get_bit_value_08003138(bit_array_index,&DAT_200002e0,data_size,bit_array_ptr,data_ptr);\n    if (bit_value != 0) {\n      bit_value = find_value_0800355e(bit_array_index,&DAT_08005a18);\n      if (bit_value == 0) {\n        bit_value = find_value_0800355e(bit_array_index,&DAT_08005a3c);\n        if (bit_value != 0) {\n          process_parameter_08004110_08003414(bit_array_index);\n        }\n      }\n      else {\n        process_data_080033d8(bit_array_index);\n      }\n      update_bit_value_0800316c(bit_array_index,&DAT_200002e0);\n    }\n    switch(mode) {\n    case 0:\n      update_registers_08003486(bit_array_index,0);\n      break;\n    case 1:\n      update_registers_08003486(bit_array_index,1,0);\n      break;\n    case 2:\n      update_registers_08003486(bit_array_index,0,1);\n      break;\n    case 3:\n      update_registers_08003486(bit_array_index,0,2);\n    }\n    update_bit_0800314e(bit_array_index,&DAT_2000030c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "process_parameter_08004110",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "data_size",
                "param_4": "data_ptr",
                "iVar1": "bit_value",
                "puVar2": "bit_array_ptr",
                "iVar3": "bit_array_index"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08003138",
                "FUN_0800316c",
                "FUN_0800314e",
                "FUN_08003414",
                "FUN_08003486",
                "FUN_080033d8",
                "FUN_0800355e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041bc": {
            "entrypoint": "0x080041bc",
            "current_name": "update_param_value_080041bc",
            "code": "\nvoid updateParamValue_080041bc(uint index,undefined4 value,undefined4 param3,undefined *data)\n\n{\n  int bitValue;\n  undefined4 memAddress;\n  undefined *ptr;\n  uint bit;\n  \n  if (index < 0x60) {\n    bit = (uint)*(short *)(&DAT_08005d3c + index * 2);\n    ptr = &DAT_08005d3c;\n  }\n  else {\n    bit = 0xffffffff;\n    ptr = data;\n  }\n  if ((bit != 0xffffffff) &&\n     (bitValue = getBitValue(bit,&DAT_2000030c,param3,ptr,data), bitValue != 0)) {\n    memAddress = getMemAddress((bit << 0x18) >> 0x1c);\n    updateParamValue_080041bc(memAddress,1 << (bit & 0xf) & 0xffff,value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041bc": "update_param_value_080041bc",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "data",
                "iVar1": "bitValue",
                "uVar2": "memAddress",
                "puVar3": "ptr",
                "uVar4": "bit",
                "get_bit_value_08003138": "getBitValue",
                "get_memory_address_0800318c": "getMemAddress",
                "update_param_value_080034b6": "updateParamValue"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000600",
                "FUN_080006b4"
            ],
            "called": [
                "FUN_08003138",
                "FUN_080034b6",
                "FUN_0800318c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "initialize_data_08004204",
            "code": "\nvoid initialize_data_08004204(void)\n\n{\n  initialize_data_08004204_0800346c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "initialize_data_08004204"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800346c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004240": {
            "entrypoint": "0x08004240",
            "current_name": "calculate_modified_value_08004240",
            "code": "\nushort calculateModifiedValue_08004240(int inputValue)\n\n{\n  return (*(short *)(inputValue + 0x138) + 0x40) - *(short *)(inputValue + 0x13a) bitwiseAnd 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08004240": "calculate_modified_value_08004240",
                "param_1": "inputValue",
                "&": "bitwiseAnd"
            },
            "calling": [
                "FUN_08004338"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042ac": {
            "entrypoint": "0x080042ac",
            "current_name": "update_data_080042ac",
            "code": "\nvoid updateData_080042ac(int data)\n\n{\n  int result;\n  ushort newIndex;\n  undefined newValue;\n  \n  result = extract_and_validate_08003e18(data,&newValue);\n  if ((result == 0) &&\n     (newIndex = *(short *)(data + 100) + 1U & 0x3f, newIndex != *(ushort *)(data + 0x66))) {\n    *(undefined *)(*(int *)(data + 0x60) + (uint)*(ushort *)(data + 100)) = newValue;\n    *(ushort *)(data + 100) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042ac": "update_data_080042ac",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "newIndex",
                "local_9": "newValue"
            },
            "calling": [],
            "called": [
                "FUN_08003e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e8": {
            "entrypoint": "0x080042e8",
            "current_name": "update_data_080042e8",
            "code": "\nundefined4 updateData_080042e8(int dataPointer,undefined newValue)\n\n{\n  byte byteValue;\n  byte maskedByteValue;\n  int flagStatus;\n  \n  *(undefined *)(dataPointer + 0x10) = 1;\n  flagStatus = *(ushort *)(dataPointer + 0x140) + 1;\n  byteValue = (byte)flagStatus;\n  maskedByteValue = byteValue & 0x7f;\n  if (flagStatus == 0) {\n    maskedByteValue = -(-byteValue & 0x7f);\n  }\n  do {\n  } while (*(ushort *)(dataPointer + 0x142) == (ushort)maskedByteValue);\n  *(undefined *)(*(int *)(dataPointer + 0x13c) + (uint)*(ushort *)(dataPointer + 0x140)) = newValue;\n  *(ushort *)(dataPointer + 0x140) = (ushort)maskedByteValue;\n  flagStatus = isFlagSet(dataPointer + 0xd4);\n  if (flagStatus == 0) {\n    updateCharacterData(dataPointer + 0xd4,&LAB_0800420c_1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042e8": "update_data_080042e8",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "bVar1": "byteValue",
                "bVar2": "maskedByteValue",
                "iVar3": "flagStatus",
                "is_flag_set_08003df4": "isFlagSet",
                "update_character_data_08003eac": "updateCharacterData"
            },
            "calling": [],
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004338": {
            "entrypoint": "0x08004338",
            "current_name": "FUNC_08004338",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800433e) */\n/* WARNING: Removing unreachable block (ram,0x08004350) */\n/* WARNING: Removing unreachable block (ram,0x08004346) */\n/* WARNING: Removing unreachable block (ram,0x08004358) */\n\nvoid FUNC_08004338(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004338": "FUNC_08004338"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08004240"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004364": {
            "entrypoint": "0x08004364",
            "current_name": "initialize_memory_08004364",
            "code": "\nvoid initializeMemory_08004364(int memoryAddress)\n\n{\n  *(int *)(memoryAddress + 0x134) = memoryAddress + 0x11;\n  *(undefined2 *)(memoryAddress + 0x138) = 0;\n  *(undefined2 *)(memoryAddress + 0x13a) = 0;\n  *(int *)(memoryAddress + 0x13c) = memoryAddress + 0x51;\n  *(undefined2 *)(memoryAddress + 0x140) = 0;\n  *(undefined2 *)(memoryAddress + 0x142) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004364": "initialize_memory_08004364",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004388": {
            "entrypoint": "0x08004388",
            "current_name": "initialize_serial_port_08004388",
            "code": "\nvoid initializeSerialPort_08004388(int serialPortPtr,undefined4 baudRate,byte configuration)\n\n{\n  uint extraValue;\n  byte configType;\n  int uartCount;\n  code *jumpTablePtr;\n  \n  *(undefined4 *)(serialPortPtr + 0x11c) = baudRate;\n  *(byte *)(serialPortPtr + 0x144) = configuration;\n  configType = configuration & 7;\n  if (configType == 4) {\n    uartCount = 7;\n  }\n  else if (configType == 6) {\n    uartCount = 8;\n  }\n  else if (configType == 2) {\n    uartCount = 6;\n  }\n  else {\n    uartCount = 0;\n  }\n  if ((configuration & 0x30) == 0x30) {\n    *(undefined4 *)(serialPortPtr + 0x128) = 0x600;\n    uartCount = uartCount + 1;\n  }\n  else if ((configuration & 0x20) == 0) {\n    *(undefined4 *)(serialPortPtr + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortPtr + 0x128) = 0x400;\n    uartCount = uartCount + 1;\n  }\n  if ((configuration & 8) == 0) {\n    *(undefined4 *)(serialPortPtr + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortPtr + 0x124) = 0x2000;\n  }\n  if (uartCount == 8) {\n    *(undefined4 *)(serialPortPtr + 0x120) = 0;\n  }\n  else if (uartCount == 9) {\n    *(undefined4 *)(serialPortPtr + 0x120) = 0x1000;\n  }\n  else {\n    uartCount = 0;\n  }\n  if (uartCount != 0) {\n    configure_uart_pins_08003978(serialPortPtr + 0xd4);\n    update_character_data_08003e54(serialPortPtr + 0xd4,0x80042ad);\n    return;\n  }\n  jumpTablePtr = (code *)0x8004432;\n  assertion_failed_08004808(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\");\n  if (extraValue < 0x60) {\n    uRam0000012e = *(undefined2 *)(&DAT_08005d3c + extraValue * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTablePtr)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004388": "initialize_serial_port_08004388",
                "param_1": "serialPortPtr",
                "param_2": "baudRate",
                "param_3": "configuration",
                "extraout_r1": "extraValue",
                "bVar1": "configType",
                "iVar2": "uartCount",
                "UNRECOVERED_JUMPTABLE": "jumpTablePtr"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08004808",
                "FUN_08003978",
                "FUN_08003e54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004444": {
            "entrypoint": "0x08004444",
            "current_name": "set_parameter_value_08004444",
            "code": "\nvoid setParameterValue_08004444(int objectAddress,uint valueIndex)\n\n{\n  undefined2 parameterValue;\n  code *jumpTable;\n  \n  if (valueIndex < 0x60) {\n    parameterValue = *(undefined2 *)(&DAT_08005d3c + valueIndex * 2);\n  }\n  else {\n    parameterValue = 0xffff;\n  }\n  *(undefined2 *)(objectAddress + 0x12e) = parameterValue;\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004444": "set_parameter_value_08004444",
                "param_1": "objectAddress",
                "param_2": "valueIndex",
                "uVar1": "parameterValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004460": {
            "entrypoint": "0x08004460",
            "current_name": "set_initial_value_08004460",
            "code": "\nvoid setInitialValue_08004460(int baseAddress,uint offset)\n\n{\n  undefined2 newValue;\n  \n  if (offset < 0x60) {\n    newValue = *(undefined2 *)(&DAT_08005d3c + offset * 2);\n  }\n  else {\n    newValue = 0xffff;\n  }\n  *(undefined2 *)(baseAddress + 300) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004460": "set_initial_value_08004460",
                "param_1": "baseAddress",
                "param_2": "offset",
                "uVar1": "newValue"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800447c": {
            "entrypoint": "0x0800447c",
            "current_name": "initialize_parameters_0800447c",
            "code": "\nundefined4 *\ninitializeParameters_0800447c(undefined4 *parameterArray,undefined4 valueParameter,undefined4 specialValue,undefined4 anotherParameter)\n\n{\n  undefined2 valueIndex;\n  \n  parameterArray[1] = 0;\n  parameterArray[2] = 1000;\n  *parameterArray = &PTR_FUN_080042e8_1_08005ed4;\n  if (parameterArray == &DAT_20000338) {\n    setParameterValue(&DAT_20000338,0x4c,specialValue,&DAT_20000338,anotherParameter);\n    setInitialValue(&DAT_20000338,0x4d);\n  }\n  else {\n    valueIndex = findValueIndexOrDefault(valueParameter,&DAT_08005c10);\n    *(undefined2 *)((int)parameterArray + 0x12e) = valueIndex;\n    valueIndex = findValueIndexOrDefault(valueParameter,&DAT_08005ca0);\n    *(undefined2 *)(parameterArray + 0x4b) = valueIndex;\n  }\n  initializeMemory(parameterArray);\n  return parameterArray;\n}\n\n",
            "renaming": {
                "FUN_0800447c": "initialize_parameters_0800447c",
                "param_1": "parameterArray",
                "param_2": "valueParameter",
                "param_3": "specialValue",
                "param_4": "anotherParameter",
                "uVar1": "valueIndex",
                "set_parameter_value_08004444": "setParameterValue",
                "set_initial_value_08004460": "setInitialValue",
                "find_value_index_or_default_0800351e": "findValueIndexOrDefault",
                "initialize_memory_08004364": "initializeMemory"
            },
            "calling": [
                "FUN_080044d8"
            ],
            "called": [
                "FUN_08004460",
                "FUN_08004444",
                "FUN_0800351e",
                "FUN_08004364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044d8": {
            "entrypoint": "0x080044d8",
            "current_name": "initialize_if_param1_is_1_080044d8",
            "code": "\nvoid initialize_if_param1_is_1_080044d8(int is_param1,int param2_value,undefined4 param3_value,undefined4 param4_value)\n\n{\n  if (is_param1 != 1) {\n    return;\n  }\n  if (param2_value == 0xffff) {\n    initialize_parameters(&DAT_20000338,0x40004800,param3_value,0xffff,param4_value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044d8": "initialize_if_param1_is_1_080044d8",
                "param_1": "is_param1",
                "param_2": "param2_value",
                "param_3": "param3_value",
                "param_4": "param4_value",
                "initialize_parameters_0800447c": "initialize_parameters"
            },
            "calling": [],
            "called": [
                "FUN_0800447c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004544": {
            "entrypoint": "0x08004544",
            "current_name": "initialize_param_08004544",
            "code": "\nvoid initializeParam_08004544(undefined4 *outputPointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *outputPointer = &DAT_08005f28;\n  *(undefined *)(outputPointer + 1) = value1;\n  *(undefined *)((int)outputPointer + 5) = value2;\n  *(undefined *)((int)outputPointer + 6) = value3;\n  *(undefined *)((int)outputPointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004544": "initialize_param_08004544",
                "param_1": "outputPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08004560"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004560": {
            "entrypoint": "0x08004560",
            "current_name": "initialize_param_08004560",
            "code": "\nvoid initialize_param_08004560(int status_flag,int magic_number)\n\n{\n  if ((status_flag == 1) && (magic_number == 0xffff)) {\n    initialize_param_08004560_08004544(&DAT_20000480,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004560": "initialize_param_08004560",
                "param_1": "status_flag",
                "param_2": "magic_number"
            },
            "calling": [],
            "called": [
                "FUN_08004544"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004640": {
            "entrypoint": "0x08004640",
            "current_name": "combine_bits_08004640",
            "code": "\nuint combineBits_08004640(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_08004640": "combine_bits_08004640",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004646": {
            "entrypoint": "0x08004646",
            "current_name": "FUNC_08004646",
            "code": "\nvoid FUNC_08004646(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004646": "FUNC_08004646"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004648": {
            "entrypoint": "0x08004648",
            "current_name": "initialize_and_update_system_08004648",
            "code": "\nvoid initialize_and_update_system_08004648(void)\n\n{\n  update_data_register(3);\n  initialize_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004648": "initialize_and_update_system_08004648",
                "update_data_register_08000e3c": "update_data_register",
                "initialize_system_08000d8e": "initialize_system"
            },
            "calling": [
                "FUN_08004884"
            ],
            "called": [
                "FUN_08000d8e",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004658": {
            "entrypoint": "0x08004658",
            "current_name": "system_call_processing_loop_08004658",
            "code": "\nvoid system_call_processing_loop_08004658(void)\n\n{\n  FUNC_08004646();\n  initialize_and_process_system_call();\n  do {\n    process_data();\n    FUNC_08004338();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004658": "system_call_processing_loop_08004658",
                "initialize_and_process_system_call_08000c4c": "initialize_and_process_system_call",
                "process_data_08000c64": "process_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000c4c",
                "FUN_08004646",
                "FUN_08004338",
                "FUN_08000c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004678": {
            "entrypoint": "0x08004678",
            "current_name": "count_bits_08004678",
            "code": "\nchar countBits_08004678(uint number)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08004678": "count_bits_08004678",
                "param_1": "number",
                "cVar1": "bitCount"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b4": {
            "entrypoint": "0x080046b4",
            "current_name": "initialize_data_080046b4",
            "code": "\nvoid initializeData_080046b4(int flag,int value,undefined4 param3,undefined4 param4)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_20000488 = 6;\n    DAT_20000494 = 0;\n    DAT_2000049c = 7;\n    DAT_200004a8 = 0;\n    DAT_200004b0 = 8;\n    DAT_200004bc = 0;\n    DAT_200004c4 = 9;\n    DAT_200004d0 = 0;\n    DAT_200004d8 = 10;\n    DAT_200004e4 = 0;\n    DAT_200004ec = 0x17;\n    DAT_200004f8 = 0;\n    DAT_20000500 = 0x17;\n    DAT_2000050c = 0;\n    DAT_20000514 = 0x17;\n    DAT_20000520 = 0;\n    DAT_20000528 = 0x17;\n    DAT_20000534 = 0;\n    DAT_2000053c = 0x17;\n    DAT_20000548 = 0;\n    DAT_20000550 = 0x28;\n    DAT_2000055c = 0;\n    DAT_20000564 = 0x28;\n    DAT_20000570 = 0;\n    DAT_20000578 = 0x28;\n    DAT_20000584 = 0;\n    DAT_2000058c = 0x28;\n    DAT_20000598 = 0;\n    DAT_200005a0 = 0x28;\n    DAT_200005ac = 0;\n    DAT_200005b4 = 0x28;\n    DAT_200005c0 = 0;\n    shiftLeftBy32(0,&LAB_0800468c_1,&DAT_20000000,&DAT_20000488,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b4": "initialize_data_080046b4",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "shift_left_by32_080047fe": "shiftLeftBy32"
            },
            "calling": [],
            "called": [
                "FUN_080047fe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047c0": {
            "entrypoint": "0x080047c0",
            "current_name": "execute_handle_data_080047c0",
            "code": "\nvoid executeHandleData_080047c0(int data)\n\n{\n  int bitCount;\n  \n  if (*(int *)(data + 8) != 0) {\n    (**(code **)(data + 0xc))();\n    return;\n  }\n  handle_data_and_execute_08005760();\n  bitCount = count_bits_08004678();\n  if ((&DAT_20000494)[bitCount * 5] != 0) {\n    executeHandleData_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047c0": "execute_handle_data_080047c0",
                "param_1": "data",
                "iVar1": "bitCount"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [
                "FUN_08005760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047d0": {
            "entrypoint": "0x080047d0",
            "current_name": "check_and_execute_handle_data_080047d0",
            "code": "\nvoid checkAndExecuteHandleData_080047d0(void)\n\n{\n  int bitsCount;\n  \n  bitsCount = count_bits_08004678();\n  if ((&DAT_20000494)[bitsCount * 5] != 0) {\n    execute_handle_data_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047d0": "check_and_execute_handle_data_080047d0",
                "iVar1": "bitsCount"
            },
            "calling": [
                "FUN_080011a4"
            ],
            "called": [
                "FUN_080047c0",
                "FUN_08004678"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047fe": {
            "entrypoint": "0x080047fe",
            "current_name": "shift_left_by32_080047fe",
            "code": "\nvoid shiftLeftBy32_080047fe(undefined4 input1,undefined4 input2)\n\n{\n  shift_left_by32_08004844(input2,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047fe": "shift_left_by32_080047fe",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_080046b4"
            ],
            "called": [
                "FUN_08004844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004808": {
            "entrypoint": "0x08004808",
            "current_name": "assertion_failed_08004808",
            "code": "\nvoid assertionFailed_08004808(undefined4 message,undefined4 lineNumber,char *fileName,undefined4 assertionText)\n\n{\n  undefined4 ptrData;\n  char *delimiter;\n  undefined8 handledData;\n  undefined4 assertionTextCopy;\n  \n  ptrData = *(undefined4 *)(DAT_200000a0 + 0xc);\n  assertionTextCopy = assertionText;\n  if (fileName == (char *)0x0) goto LAB_0800482c;\n  delimiter = \", function: \";\n  do {\n    process_and_validate_input_08004860(ptrData,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",assertionText,message,lineNumber\n                 ,delimiter,fileName,assertionTextCopy);\n    handledData = process_and_handle_data_080051ac();\n    lineNumber = (undefined4)((ulonglong)handledData >> 0x20);\n    ptrData = (undefined4)handledData;\nLAB_0800482c:\n    fileName = \"\";\n    delimiter = fileName;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004808": "assertion_failed_08004808",
                "param_1": "message",
                "param_2": "lineNumber",
                "param_3": "fileName",
                "param_4": "assertionText",
                "uVar1": "ptrData",
                "pcVar2": "delimiter",
                "uVar3": "handledData",
                "uVar4": "assertionTextCopy"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004844": {
            "entrypoint": "0x08004844",
            "current_name": "shift_left_by32_08004844",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800484c) */\n\nlonglong shiftLeftBy32_08004844(undefined4 inputValue,uint shiftAmount)\n\n{\n  return (unsignedLongLong)shiftAmount << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08004844": "shift_left_by32_08004844",
                "param_1": "inputValue",
                "param_2": "shiftAmount",
                "ulonglong": "unsignedLongLong"
            },
            "calling": [
                "FUN_080047fe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004860": {
            "entrypoint": "0x08004860",
            "current_name": "process_and_validate_input_08004860",
            "code": "\nvoid processAndValidateInput_08004860(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  \n  tempVar1 = input3;\n  tempVar2 = input4;\n  process_and_validate_input_08004a84(DAT_200000a0,input1,input2,&tempVar1,input1,&tempVar1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004860": "process_and_validate_input_08004860",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uStack_8": "tempVar1",
                "uStack_4": "tempVar2"
            },
            "calling": [
                "FUN_08004808"
            ],
            "called": [
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "execute_functions_08004884",
            "code": "\nvoid executeFunctions_08004884(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  FUNC_080059f8();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08004648",
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048cc": {
            "entrypoint": "0x080048cc",
            "current_name": "memset_080048cc",
            "code": "\nvoid memset_080048cc(undefined *dest,undefined value,int size)\n\n{\n  undefined *end;\n  \n  end = dest + size;\n  for (; dest != end; dest = dest + 1) {\n    *dest = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048cc": "memset_080048cc",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end"
            },
            "calling": [
                "FUN_0800532c",
                "FUN_08005374",
                "FUN_08005400"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048dc": {
            "entrypoint": "0x080048dc",
            "current_name": "update_pointer_list_080048dc",
            "code": "\nvoid updatePointerList_080048dc(undefined4 *list,int size,undefined4 var1,undefined4 var2)\n\n{\n  int *temp;\n  int **temp1;\n  int **currentPtr;\n  int **nextPtr;\n  int **prevPtr;\n  int **newPtr;\n  bool isEqual;\n  \n  if (size == 0) {\n    return;\n  }\n  newPtr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    newPtr = (int **)((int)newPtr + *(int *)(size + -4));\n  }\n  FUNC_0800557c();\n  nextPtr = (int **)&DAT_200005c8;\n  if (DAT_200005c8 == (int **)0x0) {\n    newPtr[1] = (int *)0x0;\n    currentPtr = temp1;\n    DAT_200005c8 = newPtr;\n  }\n  else {\n    nextPtr = DAT_200005c8;\n    if (newPtr < DAT_200005c8) {\n      currentPtr = (int **)*newPtr;\n      nextPtr = (int **)((int)newPtr + (int)currentPtr);\n      isEqual = DAT_200005c8 == nextPtr;\n      if (isEqual) {\n        nextPtr = (int **)*DAT_200005c8;\n        DAT_200005c8 = (int **)DAT_200005c8[1];\n      }\n      newPtr[1] = (int *)DAT_200005c8;\n      DAT_200005c8 = newPtr;\n      if (isEqual) {\n        nextPtr = (int **)((int)nextPtr + (int)currentPtr);\n        *newPtr = (int *)nextPtr;\n      }\n    }\n    else {\n      do {\n        prevPtr = nextPtr;\n        nextPtr = (int **)prevPtr[1];\n        if (nextPtr == (int **)0x0) break;\n      } while (nextPtr <= newPtr);\n      currentPtr = (int **)*prevPtr;\n      if ((int **)((int)prevPtr + (int)currentPtr) == newPtr) {\n        currentPtr = (int **)((int)currentPtr + (int)*newPtr);\n        *prevPtr = (int *)currentPtr;\n        if (nextPtr == (int **)((int)prevPtr + (int)currentPtr)) {\n          temp = *nextPtr;\n          nextPtr = (int **)nextPtr[1];\n          prevPtr[1] = (int *)nextPtr;\n          currentPtr = (int **)((int)currentPtr + (int)temp);\n          *prevPtr = (int *)currentPtr;\n        }\n      }\n      else if (newPtr < (int **)((int)prevPtr + (int)currentPtr)) {\n        *list = 0xc;\n      }\n      else {\n        currentPtr = (int **)((int)newPtr + (int)*newPtr);\n        isEqual = nextPtr == currentPtr;\n        if (isEqual) {\n          currentPtr = (int **)*nextPtr;\n          nextPtr = (int **)nextPtr[1];\n        }\n        newPtr[1] = (int *)nextPtr;\n        if (isEqual) {\n          currentPtr = (int **)((int)currentPtr + (int)*newPtr);\n          *newPtr = (int *)currentPtr;\n        }\n        prevPtr[1] = (int *)newPtr;\n      }\n    }\n  }\n  FUNC_0800557e(list,currentPtr,nextPtr,var2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048dc": "update_pointer_list_080048dc",
                "param_1": "list",
                "param_2": "size",
                "param_3": "var1",
                "param_4": "var2",
                "piVar1": "temp",
                "extraout_r1": "temp1",
                "ppiVar2": "currentPtr",
                "ppiVar3": "nextPtr",
                "ppiVar4": "prevPtr",
                "ppiVar5": "newPtr",
                "bVar6": "isEqual"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "called": [
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004978": {
            "entrypoint": "0x08004978",
            "current_name": "allocate_memory_08004978",
            "code": "\nuint allocate_memory_08004978(undefined4 *result,uint size)\n\n{\n  uint *current_block;\n  int remaining_size;\n  uint *previous_block;\n  uint difference;\n  uint *insert_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_0800557c();\n    current_block = DAT_200005c8;\n    insert_block = DAT_200005c8;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (insert_block == previous_block) {\n            current_block = (uint *)insert_block[1];\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (insert_block != previous_block) {\n            insert_block[1] = (uint)current_block;\n            insert_block = previous_block;\n            current_block = DAT_200005c8;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = allocated_size;\n          insert_block = (uint *)((int)previous_block + difference);\n          current_block = DAT_200005c8;\n        }\n        goto LAB_080049dc;\n      }\n      insert_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200005cc == 0) {\n      DAT_200005cc = initialize_memory_0800500c(result);\n    }\n    current_block = (uint *)initialize_memory_0800500c(result,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((insert_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == insert_block ||\n        (remaining_size = initialize_memory_0800500c(result,(int)insert_block - (int)current_block), remaining_size != -1)))) {\n      *insert_block = allocated_size;\n      current_block = DAT_200005c8;\nLAB_080049dc:\n      DAT_200005c8 = current_block;\n      FUNC_0800557e(result);\n      allocated_size = (int)insert_block + 0xbU & 0xfffffff8;\n      remaining_size = allocated_size - (int)(insert_block + 1);\n      if (remaining_size != 0) {\n        *(int *)((int)insert_block + remaining_size) = -remaining_size;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *result = 0xc;\n    FUNC_0800557e(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004978": "allocate_memory_08004978",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "remaining_size",
                "puVar3": "previous_block",
                "uVar4": "difference",
                "puVar5": "insert_block",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_08005374",
                "FUN_080054fc"
            ],
            "called": [
                "FUN_0800500c",
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a34": {
            "entrypoint": "0x08004a34",
            "current_name": "process_input_08004a34",
            "code": "\nuint process_input_08004a34(int input_ptr,byte byte_value,byte **byte_ptr_ptr)\n\n{\n  int temp_value;\n  byte *data_ptr;\n  byte *temp_data_ptr;\n  uint return_value;\n  \n  data_ptr = byte_ptr_ptr[2] + -1;\n  byte_ptr_ptr[2] = data_ptr;\n  if ((-1 < (int)data_ptr) ||\n     (((int)byte_ptr_ptr[6] <= (int)data_ptr && (data_ptr = (byte *)(uint)byte_value, data_ptr != (byte *)0xa))))\n  {\n    data_ptr = *byte_ptr_ptr;\n    *byte_ptr_ptr = data_ptr + 1;\n    *data_ptr = byte_value;\n    return (uint)byte_value;\n  }\n  if ((input_ptr != 0) && (*(int *)(input_ptr + 0x18) == 0)) {\n    initialize_memory_structure_080053a0();\n  }\n  if (byte_ptr_ptr == (byte **)&DAT_08005fc0) {\n    byte_ptr_ptr = *(byte ***)(input_ptr + 4);\n  }\n  else if (byte_ptr_ptr == (byte **)&DAT_08005fe0) {\n    byte_ptr_ptr = *(byte ***)(input_ptr + 8);\n  }\n  else if (byte_ptr_ptr == (byte **)&DAT_08005fa0) {\n    byte_ptr_ptr = *(byte ***)(input_ptr + 0xc);\n  }\n  byte_ptr_ptr[2] = byte_ptr_ptr[6];\n  temp_data_ptr = (byte *)(uint)*(ushort *)(byte_ptr_ptr + 3);\n  temp_value = (int)temp_data_ptr << 0x1c;\n  if (((temp_value < 0) && (temp_data_ptr = byte_ptr_ptr[4], temp_data_ptr != (byte *)0x0)) ||\n     (temp_value = process_data_080050d0(input_ptr,byte_ptr_ptr,temp_value,temp_data_ptr,data_ptr), temp_value == 0)) {\n    temp_value = (int)*byte_ptr_ptr - (int)byte_ptr_ptr[4];\n    return_value = (uint)byte_value;\n    if ((temp_value < (int)byte_ptr_ptr[5]) || (temp_value = process_data_080052cc(input_ptr,byte_ptr_ptr), temp_value == 0)) {\n      byte_ptr_ptr[2] = byte_ptr_ptr[2] + -1;\n      data_ptr = *byte_ptr_ptr;\n      *byte_ptr_ptr = data_ptr + 1;\n      *data_ptr = byte_value;\n      if ((byte *)(temp_value + 1) != byte_ptr_ptr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(byte_ptr_ptr + 3) << 0x1f)) {\n          return return_value;\n        }\n        if (return_value != 10) {\n          return return_value;\n        }\n      }\n      temp_value = process_data_080052cc(input_ptr,byte_ptr_ptr);\n      if (temp_value == 0) {\n        return return_value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004a34": "process_input_08004a34",
                "param_1": "input_ptr",
                "param_2": "byte_value",
                "param_3": "byte_ptr_ptr",
                "iVar1": "temp_value",
                "pbVar2": "data_ptr",
                "pbVar3": "temp_data_ptr",
                "uVar4": "return_value"
            },
            "calling": [
                "FUN_08004a60"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_080052cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a60": {
            "entrypoint": "0x08004a60",
            "current_name": "process_input_data_08004a60",
            "code": "\nint process_input_data_08004a60(undefined4 input_1,undefined4 input_2,undefined *input_array,int array_length)\n\n{\n  int result;\n  undefined *array_end;\n  int iterator;\n  \n  array_end = input_array + array_length;\n  iterator = array_length;\n  do {\n    if (input_array == array_end) {\n      return 0;\n    }\n    result = process_input_08004a34(input_1,*input_array,input_2,array_length,iterator);\n    array_length = result + 1;\n    input_array = input_array + 1;\n  } while (array_length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004a60": "process_input_data_08004a60",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_array",
                "param_4": "array_length",
                "iVar1": "result",
                "puVar2": "array_end",
                "iVar3": "iterator"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004a34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "process_and_validate_input_08004a84",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08004c58) */\n\nint process_and_validate_input_08004a84(int data_ptr,undefined4 *config_ptr,byte *input_data,int *progress_ptr)\n\n{\n  int result;\n  int *ptr;\n  bool is_digit;\n  byte *ptr_2;\n  byte *ptr_3;\n  int unaff_r9;\n  int value;\n  int *progress;\n  uint flags;\n  int precision;\n  undefined4 temp;\n  int width;\n  int total_bytes;\n  byte format_char;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined hash_flag;\n  undefined4 dot_flag;\n  \n  progress = progress_ptr;\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    initialize_memory_structure_080053a0();\n  }\n  if (config_ptr == &DAT_08005fc0) {\n    config_ptr = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (config_ptr == (undefined4 *)&DAT_08005fe0) {\n    config_ptr = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (config_ptr == (undefined4 *)&DAT_08005fa0) {\n    config_ptr = *(undefined4 **)(data_ptr + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(config_ptr + 3) << 0x1c)) || (config_ptr[4] == 0)) &&\n     (value = process_data_080050d0(data_ptr,config_ptr), value != 0)) {\n    return -1;\n  }\n  total_bytes = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  ptr_2 = input_data;\nLAB_08004ac6:\n  ptr_3 = ptr_2;\n  if (*ptr_3 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  ptr_2 = ptr_3 + 1;\n  if (*ptr_3 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  value = (int)ptr_3 - (int)input_data;\n  if (value != 0) {\n    result = process_input_data_08004a60(data_ptr,config_ptr,input_data,value);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(config_ptr + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_bytes;\n    }\n    total_bytes = total_bytes + value;\n  }\n  if (*ptr_3 == 0) goto LAB_08004c70;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  temp = 0;\n  hash_flag = 0;\n  dot_flag = 0;\n  ptr_2 = ptr_3 + 1;\n  while( true ) {\n    value = find_first_occurrence_08000230(\"#-0+ \",*ptr_2);\n    input_data = ptr_2 + 1;\n    if (value == 0) break;\n    flags = 1 << (value + 0xf7ffa094U & 0xff) | flags;\n    ptr_2 = input_data;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    hash_flag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    hash_flag = 0x2b;\n  }\n  if (*ptr_2 == 0x2a) {\n    ptr = progress + 1;\n    value = *progress;\n    progress = ptr;\n    if (value < 0) {\n      width = -value;\n      flags = flags | 2;\n      goto LAB_08004bae;\n    }\n  }\n  else {\n    is_digit = false;\n    value = width;\n    input_data = ptr_2;\n    while( true ) {\n      if (9 < *input_data - 0x30) break;\n      value = value * 10 + (*input_data - 0x30);\n      is_digit = true;\n      input_data = input_data + 1;\n    }\n    if (!is_digit) goto LAB_08004bae;\n  }\n  width = value;\nLAB_08004bae:\n  if (*input_data == 0x2e) {\n    if (input_data[1] == 0x2a) {\n      precision = *progress;\n      if (precision < 0) {\n        precision = -1;\n      }\n      input_data = input_data + 2;\n      progress = progress + 1;\n    }\n    else {\n      is_digit = false;\n      precision = 0;\n      value = 0;\n      while( true ) {\n        input_data = input_data + 1;\n        if (9 < *input_data - 0x30) break;\n        value = value * 10 + (*input_data - 0x30);\n        is_digit = true;\n      }\n      if (is_digit) {\n        precision = value;\n      }\n    }\n  }\n  value = find_first_occurrence_08000230(&DAT_08005f72,*input_data,3);\n  if (value != 0) {\n    flags = flags | 0x40 << (value + 0xf7ffa08eU & 0xff);\n    input_data = input_data + 1;\n  }\n  format_char = *input_data;\n  input_data = input_data + 1;\n  value = find_first_occurrence_08000230(\"efgEFG\",format_char,6);\n  if (value == 0) {\n    unaff_r9 = process_and_validate_data_08004d9c(data_ptr,&flags,config_ptr,0x8004a61,&progress);\n    if (unaff_r9 == -1) goto LAB_08004c70;\n  }\n  else {\n    progress = (int *)(((int)progress + 7U & 0xfffffff8) + 8);\n  }\n  total_bytes = total_bytes + unaff_r9;\n  ptr_2 = input_data;\n  goto LAB_08004ac6;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "process_and_validate_input_08004a84",
                "param_1": "data_ptr",
                "param_2": "config_ptr",
                "param_3": "input_data",
                "param_4": "progress_ptr",
                "iVar1": "result",
                "piVar2": "ptr",
                "bVar3": "is_digit",
                "pbVar4": "ptr_2",
                "pbVar5": "ptr_3",
                "iVar6": "value",
                "local_8c": "progress",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "temp",
                "local_7c": "width",
                "local_74": "total_bytes",
                "local_70": "format_char",
                "local_6f": "space_flag",
                "local_6e": "plus_flag",
                "local_45": "hash_flag",
                "local_30": "dot_flag"
            },
            "calling": [
                "FUN_08004860",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_08000230",
                "FUN_08004a60",
                "FUN_08004d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb0": {
            "entrypoint": "0x08004cb0",
            "current_name": "process_data_08004cb0",
            "code": "\nundefined4\nprocessData_08004cb0(undefined4 input,uint *data,uint *output,undefined4 param,code *callback)\n\n{\n  int index;\n  int returnValue;\n  uint maxData;\n  uint currIndex;\n  bool isConditionMet;\n  \n  maxData = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxData = data[2];\n  }\n  *output = maxData;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = maxData + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output); index = index + 1) {\n      returnValue = (*callback)(input,param,(int)data + 0x19,1);\n      if (returnValue == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxData = (uint)*(byte *)((int)data + 0x43);\n  if (maxData != 0) {\n    maxData = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxData + 0x43) = 0x30;\n    *(undefined *)((int)data + maxData + 0x44) = *(undefined *)((int)data + 0x45);\n    maxData = maxData + 2;\n  }\n  index = (*callback)(input,param,(int)data + 0x43,maxData);\n  if (index != -1) {\n    maxData = data[3];\n    isConditionMet = (*data & 6) == 4;\n    if (isConditionMet) {\n      maxData = maxData - *output;\n    }\n    if (isConditionMet) {\n      maxData = maxData & ~((int)maxData >> 0x1f);\n    }\n    else {\n      maxData = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxData = maxData + (data[2] - data[4]);\n    }\n    currIndex = 0;\n    while( true ) {\n      if (maxData == currIndex) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      currIndex = currIndex + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004cb0": "process_data_08004cb0",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "returnValue",
                "uVar3": "maxData",
                "uVar4": "currIndex",
                "bVar5": "isConditionMet"
            },
            "calling": [
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d9c": {
            "entrypoint": "0x08004d9c",
            "current_name": "process_and_validate_data_08004d9c",
            "code": "\nuint processAndValidateData_08004d9c(undefined4 input_flag,uint *input_data,undefined4 input_param,code *callback_function,uint **output_data)\n\n{\n  byte first_byte;\n  int index;\n  uint *ptr;\n  int result;\n  char *hex_table;\n  uint temp;\n  uint **pptr;\n  char **ppcptr;\n  uint val1;\n  uint val2;\n  char *output;\n  char *output_start;\n  uint local_vars [2];\n  \n  first_byte = *(byte *)(input_data + 6);\n  output_start = (char *)((int)input_data + 0x43);\n  if (first_byte != 0x6e) {\n    if (first_byte < 0x6f) {\n      if (first_byte != 99) {\n        if (first_byte < 100) {\n          if (first_byte == 0) goto LAB_08004f56;\n          if (first_byte != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)input_data + 0x45) = 0x58;\n          hex_table = \"0123456789ABCDEF\";\nLAB_08004ee6:\n          temp = *input_data;\n          ptr = *output_data;\n          *output_data = ptr + 1;\n          if (((temp & 0x80) == 0) && ((int)(temp << 0x19) < 0)) {\n            val1 = (uint)*(ushort *)ptr;\n          }\n          else {\n            val1 = *ptr;\n          }\n          if ((int)(temp << 0x1f) < 0) {\n            *input_data = temp | 0x20;\n          }\n          if (val1 == 0) {\n            *input_data = *input_data & 0xffffffdf;\n          }\n          temp = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)input_data + 0x43) = 0;\n        }\n        else {\n          if ((first_byte != 100) && (first_byte != 0x69)) goto LAB_08004dcc;\n          val1 = *input_data;\n          ptr = *output_data;\n          if ((val1 & 0x80) == 0) {\n            *output_data = ptr + 1;\n            if ((val1 & 0x40) == 0) goto LAB_08004dec;\n            val1 = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *output_data = ptr + 1;\nLAB_08004dec:\n            val1 = *ptr;\n          }\n          if ((int)val1 < 0) {\n            val1 = -val1;\n            *(undefined *)((int)input_data + 0x43) = 0x2d;\n          }\n          hex_table = \"0123456789ABCDEF\";\n          temp = 10;\n        }\n        val2 = input_data[1];\n        input_data[2] = val2;\n        output = output_start;\n        if ((int)val2 < 0) {\n          if (val1 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(char *)((int)input_data + 0x42) = *hex_table;\n          output = (char *)((int)input_data + 0x42);\n        }\n        else {\n          *input_data = *input_data & 0xfffffffb;\n          if (val1 == 0) {\n            if (val2 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              val2 = val1 / temp;\n              output = output + -1;\n              *output = hex_table[val1 - temp * val2];\n              val1 = val2;\n            } while (val2 != 0);\n          }\n        }\n        if (((temp == 8) && ((int)(*input_data << 0x1f) < 0)) && ((int)input_data[1] <= (int)input_data[4]))\n        {\n          output[-1] = '0';\n          output = output + -1;\n        }\n        input_data[4] = (int)output_start - (int)output;\n        output_start = output;\n        goto LAB_08004ec2;\n      }\n      ptr = *output_data;\n      *output_data = ptr + 1;\n      *(char *)((int)input_data + 0x42) = (char)*ptr;\nLAB_08004e2c:\n      output_start = (char *)((int)input_data + 0x42);\n      val1 = 1;\n    }\n    else {\n      if (first_byte != 0x73) {\n        if (first_byte < 0x74) {\n          if (first_byte == 0x6f) {\nLAB_08004e52:\n            val1 = *input_data;\n            ptr = *output_data;\n            if ((val1 & 0x80) == 0) {\n              *output_data = ptr + 1;\n              if ((val1 & 0x40) == 0) goto LAB_08004e60;\n              val1 = (uint)*(ushort *)ptr;\n            }\n            else {\n              *output_data = ptr + 1;\nLAB_08004e60:\n              val1 = *ptr;\n            }\n            hex_table = \"0123456789ABCDEF\";\n            if (first_byte == 0x6f) {\n              temp = 8;\n            }\n            else {\n              temp = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (first_byte == 0x70) {\n            *input_data = *input_data | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)input_data + 0x45) = 0x78;\n            hex_table = \"0123456789abcdef\";\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (first_byte == 0x75) goto LAB_08004e52;\n          if (first_byte == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)input_data + 0x42) = first_byte;\n        goto LAB_08004e2c;\n      }\n      ppcptr = (char **)*output_data;\n      *output_data = (uint *)(ppcptr + 1);\n      output_start = *ppcptr;\n      index = find_first_occurrence_08000230(output_start,0,input_data[1]);\n      if (index != 0) {\n        input_data[1] = index - (int)output_start;\n      }\n      val1 = input_data[1];\n    }\n    input_data[4] = val1;\n    *(undefined *)((int)input_data + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  val1 = *input_data;\n  pptr = (uint **)*output_data;\n  temp = input_data[5];\n  if ((val1 & 0x80) == 0) {\n    *output_data = (uint *)(pptr + 1);\n    ptr = *pptr;\n    if ((val1 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)ptr = (short)temp;\n  }\n  else {\n    *output_data = (uint *)(pptr + 1);\n    ptr = *pptr;\nLAB_08004f42:\n    *ptr = temp;\n  }\nLAB_08004f56:\n  input_data[4] = 0;\nLAB_08004ec2:\n  index = process_data_08004cb0(input_flag,input_data,local_vars,input_param,callback_function);\n  if ((index == -1) || (index = (*callback_function)(input_flag,input_param,output_start,input_data[4]), index == -1)) {\nLAB_08004ed6:\n    val1 = 0xffffffff;\n  }\n  else {\n    if ((int)(*input_data << 0x1e) < 0) {\n      for (index = 0; index < (int)(input_data[3] - local_vars[0]); index = index + 1) {\n        result = (*callback_function)(input_flag,input_param,(int)input_data + 0x19,1);\n        if (result == -1) goto LAB_08004ed6;\n      }\n    }\n    val1 = input_data[3];\n    if ((int)input_data[3] < (int)local_vars[0]) {\n      val1 = local_vars[0];\n    }\n  }\n  return val1;\n}\n\n",
            "renaming": {
                "FUN_08004d9c": "process_and_validate_data_08004d9c",
                "param_1": "input_flag",
                "param_2": "input_data",
                "param_3": "input_param",
                "param_4": "callback_function",
                "param_5": "output_data",
                "bVar1": "first_byte",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "result",
                "pcVar5": "hex_table",
                "uVar6": "temp",
                "uVar9": "val1",
                "uVar10": "val2",
                "pcVar11": "output",
                "pcVar12": "output_start",
                "ppuVar7": "pptr",
                "ppcVar8": "ppcptr",
                "local_24": "local_vars"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000230",
                "FUN_08004cb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fdc": {
            "entrypoint": "0x08004fdc",
            "current_name": "validate_and_process_input_08004fdc",
            "code": "\nvoid validate_and_process_input_08004fdc(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  int memory_structure_address;\n  undefined4 input_param_copy;\n  undefined4 stack_var_1;\n  undefined4 stack_var_2;\n  undefined4 stack_var_3;\n  \n  memory_structure_address = DAT_200000a0;\n  input_param_copy = input_param_1;\n  stack_var_1 = input_param_2;\n  stack_var_2 = input_param_3;\n  stack_var_3 = input_param_4;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_memory_structure_080053a0(DAT_200000a0);\n  }\n  process_and_validate_input_08004a84(memory_structure_address,*(undefined4 *)(memory_structure_address + 8),input_param_1,&stack_var_1,input_param_copy,&stack_var_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fdc": "validate_and_process_input_08004fdc",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "iVar1": "memory_structure_address",
                "uVar2": "input_param_copy",
                "uStack_c": "stack_var_1",
                "uStack_8": "stack_var_2",
                "uStack_4": "stack_var_3"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800500c": {
            "entrypoint": "0x0800500c",
            "current_name": "initialize_memory_0800500c",
            "code": "\nvoid initializeMemory_0800500c(int *resultPointer,undefined4 size)\n\n{\n  int allocationResult;\n  \n  DAT_20000674 = 0;\n  allocationResult = allocate_memory_08004094(size);\n  if ((allocationResult == -1) && (DAT_20000674 != 0)) {\n    *resultPointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800500c": "initialize_memory_0800500c",
                "param_1": "resultPointer",
                "param_2": "size",
                "iVar1": "allocationResult"
            },
            "calling": [
                "FUN_08004978"
            ],
            "called": [
                "FUN_08004094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050d0": {
            "entrypoint": "0x080050d0",
            "current_name": "process_data_080050d0",
            "code": "\nuint process_data_080050d0(undefined4 *output_code,undefined4 *input_data)\n\n{\n  int data_ptr;\n  uint result;\n  ushort data_value;\n  \n  data_ptr = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_memory_structure_080053a0(DAT_200000a0);\n  }\n  if (input_data == &DAT_08005fc0) {\n    input_data = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (input_data == (undefined4 *)&DAT_08005fe0) {\n    input_data = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (input_data == (undefined4 *)&DAT_08005fa0) {\n    input_data = *(undefined4 **)(data_ptr + 0xc);\n  }\n  data_value = *(ushort *)(input_data + 3);\n  result = (uint)data_value;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output_code = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input_data[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_data[0xd] != input_data + 0x11) {\n          update_pointer_list(output_code);\n        }\n        input_data[0xd] = 0;\n      }\n      *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) & 0xffdb;\n      input_data[1] = 0;\n      *input_data = input_data[4];\n    }\n    *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) | 8;\n  }\n  if ((input_data[4] == 0) && ((*(ushort *)(input_data + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_memory(output_code,input_data);\n  }\n  data_value = *(ushort *)(input_data + 3);\n  result = data_value & 1;\n  if ((data_value & 1) == 0) {\n    if (-1 < (int)((uint)data_value << 0x1e)) {\n      result = input_data[5];\n    }\n    input_data[2] = result;\n  }\n  else {\n    input_data[2] = 0;\n    input_data[6] = -input_data[5];\n  }\n  if (input_data[4] == 0) {\n    data_value = *(ushort *)(input_data + 3);\n    result = (int)(short)data_value & 0x80;\n    if (result != 0) {\nLAB_08005100:\n      *(ushort *)(input_data + 3) = data_value | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080050d0": "process_data_080050d0",
                "param_1": "output_code",
                "param_2": "input_data",
                "iVar1": "data_ptr",
                "uVar2": "result",
                "uVar3": "data_value",
                "update_pointer_list_080048dc": "update_pointer_list",
                "allocate_and_initialize_memory_080054fc": "allocate_and_initialize_memory"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080053a0",
                "FUN_080054fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_080050d0(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUNC_080053a0(DAT_200000a0);\n  }\n  if (param_2 == &DAT_08005fc0) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fe0) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fa0) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_pointer_list_080048dc(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_memory_080054fc(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08005100:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_080051ac": {
            "entrypoint": "0x080051ac",
            "current_name": "process_and_handle_data_080051ac",
            "code": "\nvoid processAndHandleData_080051ac(void)\n\n{\n  uint *dataPointer;\n  int offset;\n  int *functionPointer;\n  int *pointerList;\n  uint ushortValue;\n  ushort ushortMask;\n  int tempOffset;\n  code *codePointer;\n  int remainingLength;\n  uint originalValue;\n  code *unrecoveredJumpTable;\n  bool isZero;\n  undefined8 returnValue;\n  \n  process_data_080055d0(6);\n  unrecoveredJumpTable = (code *)0x80051bb;\n  returnValue = continuous_loop_080040f8(1);\n  functionPointer = (int *)((ulonglong)returnValue >> 0x20);\n  dataPointer = (uint *)returnValue;\n  ushortMask = *(ushort *)(functionPointer + 3);\n  ushortValue = (uint)ushortMask;\n  if ((int)(ushortValue << 0x1c) < 0) {\n    offset = functionPointer[4];\n    if (offset != 0) {\n      tempOffset = ushortValue << 0x1e;\n      isZero = tempOffset == 0;\n      remainingLength = *functionPointer;\n      if (isZero) {\n        tempOffset = functionPointer[5];\n      }\n      *functionPointer = offset;\n      if (!isZero) {\n        tempOffset = 0;\n      }\n      functionPointer[2] = tempOffset;\n      for (remainingLength = remainingLength - offset; 0 < remainingLength; remainingLength = remainingLength - tempOffset) {\n        tempOffset = (*(code *)functionPointer[10])(dataPointer,functionPointer[8],offset,remainingLength);\n        if (tempOffset < 1) {\n          ushortMask = *(ushort *)(functionPointer + 3);\n          goto LAB_080052b2;\n        }\n        offset = offset + tempOffset;\n      }\n    }\n  }\n  else if (((0 < functionPointer[1]) || (0 < functionPointer[0x10])) &&\n          (codePointer = (code *)functionPointer[0xb], codePointer != (code *)0x0)) {\n    originalValue = *dataPointer;\n    *dataPointer = 0;\n    if ((ushortMask & 0x1000) == 0) {\n      offset = (*codePointer)(dataPointer,functionPointer[8],ushortValue & 0x1000,1);\n      if ((offset == -1) && (ushortValue = *dataPointer, ushortValue != 0)) {\n        if ((ushortValue != 0x1d) && (ushortValue != 0x16)) {\n          *(ushort *)(functionPointer + 3) = *(ushort *)(functionPointer + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*unrecoveredJumpTable)();\n          return;\n        }\n        *dataPointer = originalValue;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      offset = functionPointer[0x15];\n    }\n    if (((int)((uint)*(ushort *)(functionPointer + 3) << 0x1d) < 0) &&\n       (offset = offset - functionPointer[1], functionPointer[0xd] != 0)) {\n      offset = offset - functionPointer[0x10];\n    }\n    offset = (*(code *)functionPointer[0xb])(dataPointer,functionPointer[8],offset,0);\n    ushortMask = *(ushort *)(functionPointer + 3);\n    if ((offset == -1) &&\n       ((0x1d < *dataPointer || (-1 < (int)((0x20400001U >> (*dataPointer & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(functionPointer + 3) = ushortMask | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecoveredJumpTable)(0xffffffff);\n      return;\n    }\n    functionPointer[1] = 0;\n    *functionPointer = functionPointer[4];\n    if (((int)((uint)ushortMask << 0x13) < 0) && ((offset != -1 || (*dataPointer == 0)))) {\n      functionPointer[0x15] = offset;\n    }\n    pointerList = (int *)functionPointer[0xd];\n    *dataPointer = originalValue;\n    if (pointerList != (int *)0x0) {\n      if (pointerList != functionPointer + 0x11) {\n        update_pointer_list_080048dc(dataPointer);\n      }\n      functionPointer[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecoveredJumpTable)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecoveredJumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051ac": "process_and_handle_data_080051ac",
                "puVar1": "dataPointer",
                "iVar2": "offset",
                "piVar3": "functionPointer",
                "piVar4": "pointerList",
                "uVar5": "ushortValue",
                "uVar6": "ushortMask",
                "iVar7": "tempOffset",
                "pcVar8": "codePointer",
                "iVar9": "remainingLength",
                "uVar10": "originalValue",
                "UNRECOVERED_JUMPTABLE_00": "unrecoveredJumpTable",
                "bVar11": "isZero",
                "uVar12": "returnValue"
            },
            "calling": [
                "FUN_08005760",
                "FUN_08004808"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080055d0",
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052cc": {
            "entrypoint": "0x080052cc",
            "current_name": "process_data_080052cc",
            "code": "\nundefined4 processData_080052cc(uint *inputData,int *outputData)\n\n{\n  undefined4 returnValue;\n  int size;\n  int *pointer;\n  uint ushortValue;\n  ushort ushortFlag;\n  int tempSize;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *functionPointer;\n  int counter;\n  uint tempValue;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool boolValue;\n  \n  if (outputData[4] != 0) {\n    if ((inputData != (uint *)0x0) && (inputData[6] == 0)) {\n      initialize_memory_structure_080053a0();\n    }\n    if (outputData == &DAT_08005fc0) {\n      outputData = (int *)inputData[1];\n    }\n    else if (outputData == (int *)&DAT_08005fe0) {\n      outputData = (int *)inputData[2];\n    }\n    else if (outputData == (int *)&DAT_08005fa0) {\n      outputData = (int *)inputData[3];\n    }\n    if (*(short *)(outputData + 3) != 0) {\n      ushortFlag = *(ushort *)(outputData + 3);\n      ushortValue = (uint)ushortFlag;\n      if ((int)(ushortValue << 0x1c) < 0) {\n        size = outputData[4];\n        if (size != 0) {\n          tempSize = ushortValue << 0x1e;\n          boolValue = tempSize == 0;\n          counter = *outputData;\n          if (boolValue) {\n            tempSize = outputData[5];\n          }\n          *outputData = size;\n          if (!boolValue) {\n            tempSize = 0;\n          }\n          outputData[2] = tempSize;\n          for (counter = counter - size; 0 < counter; counter = counter - tempSize) {\n            tempSize = (*(code *)outputData[10])(inputData,outputData[8],size,counter,unaff_r4,unaff_r5);\n            if (tempSize < 1) {\n              ushortFlag = *(ushort *)(outputData + 3);\n              goto LAB_080052b2;\n            }\n            size = size + tempSize;\n          }\n        }\n      }\n      else if (((0 < outputData[1]) || (0 < outputData[0x10])) &&\n              (functionPointer = (code *)outputData[0xb], functionPointer != (code *)0x0)) {\n        tempValue = *inputData;\n        *inputData = 0;\n        if ((ushortFlag & 0x1000) == 0) {\n          size = (*functionPointer)(inputData,outputData[8],ushortValue & 0x1000,1);\n          if ((size == -1) && (ushortValue = *inputData, ushortValue != 0)) {\n            if ((ushortValue != 0x1d) && (ushortValue != 0x16)) {\n              *(ushort *)(outputData + 3) = *(ushort *)(outputData + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*UNRECOVERED_JUMPTABLE_00)();\n              return returnValue;\n            }\n            *inputData = tempValue;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          size = outputData[0x15];\n        }\n        if (((int)((uint)*(ushort *)(outputData + 3) << 0x1d) < 0) &&\n           (size = size - outputData[1], outputData[0xd] != 0)) {\n          size = size - outputData[0x10];\n        }\n        size = (*(code *)outputData[0xb])(inputData,outputData[8],size,0);\n        ushortFlag = *(ushort *)(outputData + 3);\n        if ((size == -1) &&\n           ((0x1d < *inputData || (-1 < (int)((0x20400001U >> (*inputData & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(outputData + 3) = ushortFlag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return returnValue;\n        }\n        outputData[1] = 0;\n        *outputData = outputData[4];\n        if (((int)((uint)ushortFlag << 0x13) < 0) && ((size != -1 || (*inputData == 0)))) {\n          outputData[0x15] = size;\n        }\n        pointer = (int *)outputData[0xd];\n        *inputData = tempValue;\n        if (pointer != (int *)0x0) {\n          if (pointer != outputData + 0x11) {\n            update_pointer_list_080048dc(inputData);\n          }\n          outputData[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*UNRECOVERED_JUMPTABLE_00)();\n          return returnValue;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080052cc": "process_data_080052cc",
                "param_1": "inputData",
                "param_2": "outputData",
                "uVar1": "returnValue",
                "iVar2": "size",
                "piVar3": "pointer",
                "uVar4": "ushortValue",
                "uVar5": "ushortFlag",
                "iVar6": "tempSize",
                "pcVar7": "functionPointer",
                "iVar8": "counter",
                "uVar9": "tempValue",
                "bVar10": "boolValue"
            },
            "calling": [
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_080052cc(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_080053a0();\n    }\n    if (param_2 == &DAT_08005fc0) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08005fe0) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_08005fa0) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 == 0;\n          iVar8 = *param_2;\n          if (bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          if (!bVar10) {\n            iVar6 = 0;\n          }\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_080052b2;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            update_pointer_list_080048dc(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0800532c": {
            "entrypoint": "0x0800532c",
            "current_name": "initialize_data_structure_0800532c",
            "code": "\nvoid initializeDataStructure_0800532c(undefined4 *dataStructure,undefined2 value1,undefined2 value2)\n\n{\n  *dataStructure = 0;\n  dataStructure[1] = 0;\n  dataStructure[2] = 0;\n  *(undefined2 *)(dataStructure + 3) = value1;\n  dataStructure[0x19] = 0;\n  *(undefined2 *)((int)dataStructure + 0xe) = value2;\n  dataStructure[4] = 0;\n  dataStructure[5] = 0;\n  dataStructure[6] = 0;\n  clearMemory(dataStructure + 0x17,0,8);\n  dataStructure[9] = 0x8005609;\n  dataStructure[10] = 0x800562b;\n  dataStructure[0xb] = 0x8005663;\n  dataStructure[8] = dataStructure;\n  dataStructure[0xc] = &someLabel;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800532c": "initialize_data_structure_0800532c",
                "param_1": "dataStructure",
                "param_2": "value1",
                "param_3": "value2",
                "memset_080048cc": "clearMemory",
                "LAB_08005686_1": "someLabel"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080048cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005374": {
            "entrypoint": "0x08005374",
            "current_name": "allocate_and_initialize_memory_08005374",
            "code": "\nundefined4 * allocate_and_initialize_memory_08005374(undefined4 size_of_allocated_memory,int number_of_elements)\n\n{\n  undefined4 *allocated_memory_ptr;\n  int offset;\n  \n  offset = (number_of_elements + -1) * 0x68;\n  allocated_memory_ptr = (undefined4 *)allocate_memory(size_of_allocated_memory,offset + 0x74);\n  if (allocated_memory_ptr != (undefined4 *)0x0) {\n    *allocated_memory_ptr = 0;\n    allocated_memory_ptr[1] = number_of_elements;\n    allocated_memory_ptr[2] = allocated_memory_ptr + 3;\n    initialize_memory(allocated_memory_ptr + 3,0,offset + 0x68);\n  }\n  return allocated_memory_ptr;\n}\n\n",
            "renaming": {
                "FUN_08005374": "allocate_and_initialize_memory_08005374",
                "param_1": "size_of_allocated_memory",
                "param_2": "number_of_elements",
                "puVar1": "allocated_memory_ptr",
                "iVar2": "offset",
                "allocate_memory_08004978": "allocate_memory",
                "memset_080048cc": "initialize_memory"
            },
            "calling": [
                "FUN_08005400"
            ],
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "initialize_memory_structure_080053a0",
            "code": "\nvoid initializeMemoryStructure_080053a0(undefined4 *memoryStructure)\n\n{\n  undefined4 initializedValue;\n  undefined4 *puVar2;\n  \n  if (memoryStructure[6] == 0) {\n    memoryStructure[0x12] = 0;\n    memoryStructure[0x13] = 0;\n    memoryStructure[0x14] = 0;\n    puVar2 = &DAT_200000a4;\n    memoryStructure[10] = &LAB_08005320_1;\n    if (memoryStructure == &DAT_200000a4) {\n      puVar2 = (undefined4 *)0x1;\n    }\n    if (memoryStructure == &DAT_200000a4) {\n      memoryStructure[6] = puVar2;\n    }\n    initializedValue = initialize_memory_08005400();\n    memoryStructure[1] = initializedValue;\n    initializedValue = initialize_memory_08005400(memoryStructure);\n    memoryStructure[2] = initializedValue;\n    initializedValue = initialize_memory_08005400(memoryStructure);\n    memoryStructure[3] = initializedValue;\n    initialize_data_structure_0800532c(memoryStructure[1],4,0);\n    initialize_data_structure_0800532c(memoryStructure[2],9,1);\n    initialize_data_structure_0800532c(memoryStructure[3],0x12,2);\n    memoryStructure[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "initialize_memory_structure_080053a0",
                "param_1": "memoryStructure",
                "uVar1": "initializedValue"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_08004fdc",
                "FUN_08004a84",
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_0800532c",
                "FUN_08005400"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005400": {
            "entrypoint": "0x08005400",
            "current_name": "initialize_memory_08005400",
            "code": "\nint * initialize_memory_08005400(undefined4 *result,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *ptr1;\n  int *ptr2;\n  int **ptr3;\n  \n  if (DAT_200000bc == 0) {\n    initialize_memory_structure_080053a0(&DAT_200000a4);\n  }\n  ptr3 = (int **)&DAT_200000ec;\n  do {\n    ptr2 = ptr3[2];\n    ptr1 = ptr3[1];\n    while (ptr1 = (int *)((int)ptr1 + -1), -1 < (int)ptr1) {\n      if (*(short *)(ptr2 + 3) == 0) {\n        *(undefined2 *)((int)ptr2 + 0xe) = 0xffff;\n        *(undefined2 *)(ptr2 + 3) = 1;\n        ptr2[0x19] = 0;\n        *ptr2 = 0;\n        ptr2[2] = 0;\n        ptr2[1] = 0;\n        ptr2[4] = 0;\n        ptr2[5] = 0;\n        ptr2[6] = 0;\n        memset_080048cc(ptr2 + 0x17,0,8,1,param_4);\n        ptr2[0xd] = 0;\n        ptr2[0xe] = 0;\n        ptr2[0x12] = 0;\n        ptr2[0x13] = 0;\n        return ptr2;\n      }\n      ptr2 = ptr2 + 0x1a;\n    }\n    if (*ptr3 == (int *)0x0) {\n      ptr1 = (int *)allocate_and_initialize_memory_08005400_08005374(result,4);\n      *ptr3 = ptr1;\n      if (ptr1 == (int *)0x0) {\n        *result = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ptr3 = (int **)*ptr3;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005400": "initialize_memory_08005400",
                "param_1": "result",
                "piVar1": "ptr1",
                "piVar2": "ptr2",
                "ppiVar3": "ptr3"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080053a0",
                "FUN_080048cc",
                "FUN_08005374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08005400(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000bc == 0) {\n    FUNC_080053a0(&DAT_200000a4);\n  }\n  ppiVar3 = (int **)&DAT_200000ec;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        piVar2[0x19] = 0;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        memset_080048cc(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_08005374(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_080054b4": {
            "entrypoint": "0x080054b4",
            "current_name": "check_memory_permissions_080054b4",
            "code": "\nundefined4 checkMemoryPermissions_080054b4(undefined4 arg1,int arg2,undefined4 *resultParam,uint *flagParam)\n\n{\n  int isMemoryPermissionSet;\n  undefined4 permissionType;\n  undefined localBuffer [4];\n  uint permissionBits;\n  \n  if ((*(short *)(arg2 + 0xe) < 0) ||\n     (isMemoryPermissionSet = set_memory_permission_080056d4(arg1,(int)*(short *)(arg2 + 0xe),localBuffer), isMemoryPermissionSet < 0)) {\n    *flagParam = 0;\n    if ((int)((uint)*(ushort *)(arg2 + 0xc) << 0x18) < 0) {\n      permissionType = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *flagParam = (uint)((permissionBits & 0xf000) == 0x2000);\n  }\n  permissionType = 0x400;\nLAB_080054f4:\n  *resultParam = permissionType;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080054b4": "check_memory_permissions_080054b4",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "resultParam",
                "param_4": "flagParam",
                "iVar1": "isMemoryPermissionSet",
                "uVar2": "permissionType",
                "auStack_4c": "localBuffer",
                "local_48": "permissionBits"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080056d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054fc": {
            "entrypoint": "0x080054fc",
            "current_name": "allocate_and_initialize_memory_080054fc",
            "code": "\nvoid allocateAndInitializeMemory_080054fc(int functionPointer,int *memoryBlock)\n\n{\n  ushort permissions;\n  int allocatedMemory;\n  int size;\n  int *tempBlock;\n  \n  if (-1 < (int)((uint)*(ushort *)(memoryBlock + 3) << 0x1e)) {\n    size = functionPointer;\n    tempBlock = memoryBlock;\n    permissions = check_memory_permissions_080054b4(functionPointer,memoryBlock,&size,&tempBlock);\n    allocatedMemory = allocate_memory_08004978(functionPointer,size);\n    if (allocatedMemory != 0) {\n      *(undefined **)(functionPointer + 0x28) = &LAB_08005320_1;\n      *memoryBlock = allocatedMemory;\n      *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) | 0x80;\n      memoryBlock[5] = size;\n      memoryBlock[4] = allocatedMemory;\n      if ((tempBlock != (int *)0x0) &&\n         (allocatedMemory = initialize_and_check_result_080056f8(functionPointer,(int)*(short *)((int)memoryBlock + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memoryBlock + 3) = permissions | *(ushort *)(memoryBlock + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memoryBlock + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) & 0xfffc | 2;\n  }\n  *memoryBlock = (int)memoryBlock + 0x47;\n  memoryBlock[4] = (int)memoryBlock + 0x47;\n  memoryBlock[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080054fc": "allocate_and_initialize_memory_080054fc",
                "param_1": "functionPointer",
                "param_2": "memoryBlock",
                "uVar1": "permissions",
                "iVar2": "allocatedMemory",
                "local_18": "size",
                "local_14": "tempBlock"
            },
            "calling": [
                "FUN_080050d0"
            ],
            "called": [
                "FUN_080056f8",
                "FUN_080054b4",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800557c": {
            "entrypoint": "0x0800557c",
            "current_name": "FUNC_0800557c",
            "code": "\nvoid FUNC_0800557c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557c": "FUNC_0800557c"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800557e": {
            "entrypoint": "0x0800557e",
            "current_name": "FUNC_0800557e",
            "code": "\nvoid FUNC_0800557e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557e": "FUNC_0800557e"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080055d0": {
            "entrypoint": "0x080055d0",
            "current_name": "process_data_080055d0",
            "code": "\nint processData_080055d0(uint input)\n\n{\n  int *dataPointer;\n  undefined4 returnValue;\n  int tempVar;\n  code *functionPointer;\n  undefined4 register4;\n  undefined4 register5;\n  undefined4 linkRegister;\n  undefined4 *dataPointerPtr;\n  \n  dataPointer = DAT_200000a0;\n  dataPointerPtr = &DAT_200000a0;\n  if (0x1f < input) {\n    *DAT_200000a0 = 0x16;\n    return -1;\n  }\n  tempVar = DAT_200000a0[0x11];\n  if ((tempVar != 0) && (functionPointer = *(code **)(tempVar + input * 4), functionPointer != (code *)0x0)) {\n    if (functionPointer != (code *)0x1) {\n      if (functionPointer == (code *)0xffffffff) {\n        *DAT_200000a0 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(tempVar + input * 4) = 0;\n      (*functionPointer)(input);\n    }\n    return 0;\n  }\n  returnValue = thunk_initialize_something_0800410c(DAT_200000a0);\n  DAT_20000674 = 0;\n  tempVar = initialize_data_080040fc(returnValue,input,input,0,dataPointerPtr,register4,register5,linkRegister);\n  if ((tempVar == -1) && (DAT_20000674 != 0)) {\n    *dataPointer = DAT_20000674;\n  }\n  return tempVar;\n}\n\n",
            "renaming": {
                "FUN_080055d0": "process_data_080055d0",
                "param_1": "input",
                "piVar1": "dataPointer",
                "uVar2": "returnValue",
                "iVar3": "tempVar",
                "pcVar4": "functionPointer",
                "unaff_r4": "register4",
                "unaff_r5": "register5",
                "in_lr": "linkRegister",
                "puVar5": "dataPointerPtr"
            },
            "calling": [
                "FUN_080051ac"
            ],
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800410c": {
            "entrypoint": "0x08005604",
            "current_name": "initialize_program_thunk_0800410c",
            "code": "\nprogram_status initialize_program_thunk_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800410c": "initialize_program_thunk_0800410c",
                "undefined4": "program_status"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [
                "FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005608": {
            "entrypoint": "0x08005608",
            "current_name": "calculate_error_and_update_08005608",
            "code": "\nvoid calculateErrorAndUpdate_08005608(undefined4 errorMessages,int binaryData)\n\n{\n  int errorCode;\n  uint updatedValue;\n  bool isErrorPositive;\n  \n  errorCode = initialize_and_store_error_0800573c(errorMessages,(int)*(short *)(binaryData + 0xe));\n  isErrorPositive = -1 < errorCode;\n  if (isErrorPositive) {\n    updatedValue = *(int *)(binaryData + 0x54) + errorCode;\n  }\n  else {\n    updatedValue = *(ushort *)(binaryData + 0xc) & 0xffffefff;\n  }\n  if (isErrorPositive) {\n    *(uint *)(binaryData + 0x54) = updatedValue;\n  }\n  if (!isErrorPositive) {\n    *(short *)(binaryData + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005608": "calculate_error_and_update_08005608",
                "param_1": "errorMessages",
                "param_2": "binaryData",
                "iVar1": "errorCode",
                "uVar2": "updatedValue",
                "bVar3": "isErrorPositive"
            },
            "calling": [],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800562a": {
            "entrypoint": "0x0800562a",
            "current_name": "process_data_0800562a",
            "code": "\nvoid processData_0800562a(int *output,int input,undefined4 paramA,undefined4 paramB)\n\n{\n  int result;\n  undefined4 unusedParam1;\n  undefined4 unusedParam2;\n  undefined4 unusedParam3;\n  \n  if ((int)((uint)*(ushort *)(input + 0xc) << 0x17) < 0) {\n    initialize_and_check_result_08005718(output,(int)*(short *)(input + 0xe),0,2);\n  }\n  *(ushort *)(input + 0xc) = *(ushort *)(input + 0xc) & 0xefff;\n  DAT_20000674 = 0;\n  result = process_and_forward_data_080040ec((int)*(short *)(input + 0xe),paramA,paramB,paramB,paramB,unusedParam1,\n                       unusedParam2,unusedParam3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *output = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800562a": "process_data_0800562a",
                "param_1": "output",
                "param_2": "input",
                "param_3": "paramA",
                "param_4": "paramB",
                "iVar1": "result",
                "unaff_r4": "unusedParam1",
                "unaff_r5": "unusedParam2",
                "in_lr": "unusedParam3"
            },
            "calling": [],
            "called": [
                "FUN_080040ec",
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005662": {
            "entrypoint": "0x08005662",
            "current_name": "initialize_check_results_08005662",
            "code": "\nvoid initialize_check_results_08005662(undefined4 param_a,int param_b)\n\n{\n  int result;\n  ushort new_value;\n  bool is_error;\n  \n  result = initialize_and_check_result_08005718(param_a,(int)*(short *)(param_b + 0xe));\n  is_error = result == -1;\n  if (is_error) {\n    new_value = *(ushort *)(param_b + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param_b + 0x54) = result;\n    new_value = *(ushort *)(param_b + 0xc) | 0x1000;\n  }\n  if (is_error) {\n    *(ushort *)(param_b + 0xc) = new_value;\n  }\n  if (!is_error) {\n    *(ushort *)(param_b + 0xc) = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005662": "initialize_check_results_08005662",
                "param_1": "param_a",
                "param_2": "param_b",
                "iVar1": "result",
                "uVar2": "new_value",
                "bVar3": "is_error"
            },
            "calling": [],
            "called": [
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056d4": {
            "entrypoint": "0x080056d4",
            "current_name": "set_memory_permission_080056d4",
            "code": "\nvoid setMemoryPermission_080056d4(int *resultPointer,undefined4 startAddress,undefined4 endAddress,undefined4 permissionType)\n\n{\n  int memoryPermissionResult;\n  \n  DAT_20000674 = 0;\n  memoryPermissionResult = set_memory_permission_080040d6(startAddress,endAddress,endAddress,0,permissionType);\n  if ((memoryPermissionResult == -1) && (DAT_20000674 != 0)) {\n    *resultPointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056d4": "set_memory_permission_080056d4",
                "param_1": "resultPointer",
                "param_2": "startAddress",
                "param_3": "endAddress",
                "param_4": "permissionType",
                "iVar1": "memoryPermissionResult"
            },
            "calling": [
                "FUN_080054b4"
            ],
            "called": [
                "FUN_080040d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056f8": {
            "entrypoint": "0x080056f8",
            "current_name": "initialize_and_check_result_080056f8",
            "code": "\nvoid initializeAndCheckResult_080056f8(int *resultPointer,undefined4 inputParameter)\n\n{\n  int returnValue;\n  \n  DAT_20000674 = 0;\n  returnValue = initialize_080040e0(inputParameter);\n  if ((returnValue == -1) && (DAT_20000674 != 0)) {\n    *resultPointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056f8": "initialize_and_check_result_080056f8",
                "param_1": "resultPointer",
                "param_2": "inputParameter",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080040e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005718": {
            "entrypoint": "0x08005718",
            "current_name": "initialize_and_check_result_08005718",
            "code": "\nvoid initialize_and_check_result_08005718(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int iVar1;\n  \n  DAT_20000674 = 0;\n  iVar1 = initialize_and_get_return_value(arg1,arg2,arg3,arg3,arg3);\n  if ((iVar1 == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005718": "initialize_and_check_result_08005718",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "initialize_return_value_080040e4": "initialize_and_get_return_value"
            },
            "calling": [
                "FUN_0800562a",
                "FUN_08005662"
            ],
            "called": [
                "FUN_080040e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "initialize_and_store_error_0800573c",
            "code": "\nvoid initialize_and_store_error_0800573c(int *error_value_ptr,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  \n  DAT_20000674 = 0;\n  iVar1 = initialize(param_2,param_3,param_4,param_4,param_4);\n  if ((iVar1 == -1) && (DAT_20000674 != 0)) {\n    *error_value_ptr = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800573c": "initialize_and_store_error_0800573c",
                "param_1": "error_value_ptr",
                "initialize_080040e8": "initialize"
            },
            "calling": [
                "FUN_08005608"
            ],
            "called": [
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "handle_data_and_execute_08005760",
            "code": "\nvoid handle_data_and_execute_08005760(void)\n\n{\n  code *handle_data_and_execute_08005760_ptr;\n  \n  handle_data_and_execute_08005760_ptr = handle_data_and_execute_08005760;\n  process_and_handle_data_080051ac();\n  if (-1 < DAT_200005fc << 0x1f) {\n    DAT_200005fc = 1;\n  }\n  if (-1 < DAT_200005f8 << 0x1f) {\n    DAT_200005f8 = 1;\n  }\n  if (-1 < DAT_200005f4 << 0x1f) {\n    DAT_200005f4 = 1;\n  }\n  if (-1 < DAT_200005f0 << 0x1f) {\n    DAT_200005f0 = 1;\n  }\n  if (-1 < DAT_200005ec << 0x1f) {\n    DAT_200005ec = 1;\n  }\n  if (-1 < DAT_200005e8 << 0x1f) {\n    DAT_200005e8 = 1;\n  }\n  if (-1 < DAT_200005e4 << 0x1f) {\n    DAT_200005e4 = 1;\n  }\n  if (-1 < DAT_200005e0 << 0x1f) {\n    DAT_200005e0 = 1;\n  }\n  if (-1 < DAT_200005dc << 0x1f) {\n    DAT_200005dc = 1;\n  }\n  if (-1 < DAT_200005d8 << 0x1f) {\n    DAT_200005d8 = 1;\n  }\n  if (-1 < DAT_200005d4 << 0x1f) {\n    DAT_200005d4 = 1;\n  }\n  if (-1 < DAT_200005d0 << 0x1f) {\n    DAT_200005d0 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080057f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*handle_data_and_execute_08005760_ptr)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "handle_data_and_execute_08005760",
                "UNRECOVERED_JUMPTABLE": "handle_data_and_execute_ptr"
            },
            "calling": [
                "FUN_080047c0"
            ],
            "called": [
                "FUN_080051ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "FUNC_080059f8",
            "code": "\nvoid FUNC_080059f8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a04": {
            "entrypoint": "0x08005a04",
            "current_name": "FUNC_08005a04",
            "code": "\nvoid FUNC_08005a04(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a04": "FUNC_08005a04"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 119151,
    "layers": [
        [
            "FUN_080001ac",
            "FUN_08000230",
            "FUN_08000300",
            "FUN_080005e0",
            "FUN_0800066c",
            "FUN_08000728",
            "FUN_080008cc",
            "FUN_08000e18",
            "FUN_08000e30",
            "FUN_08000e3c",
            "FUN_08000e60",
            "FUN_08000ec4",
            "FUN_08000ee0",
            "FUN_08000f0c",
            "FUN_08000f2c",
            "FUN_08000f4e",
            "FUN_08000f72",
            "FUN_08000f8c",
            "FUN_08000fb4",
            "FUN_08001198",
            "FUN_080011c0",
            "FUN_0800124a",
            "FUN_08001256",
            "FUN_08001420",
            "FUN_08001440",
            "FUN_08001460",
            "FUN_080014ec",
            "FUN_08001578",
            "FUN_080015bc",
            "FUN_0800160e",
            "FUN_0800171a",
            "FUN_08001864",
            "FUN_08001904",
            "FUN_080019a0",
            "FUN_080025e0",
            "FUN_08002848",
            "FUN_080028d4",
            "FUN_08002940",
            "FUN_0800295c",
            "FUN_08002eb2",
            "FUN_08002efa",
            "FUN_0800312c",
            "FUN_08003138",
            "FUN_0800314e",
            "FUN_0800316c",
            "FUN_0800318c",
            "FUN_080031fc",
            "FUN_080033c8",
            "FUN_080034da",
            "FUN_08003506",
            "FUN_0800352e",
            "FUN_0800355e",
            "FUN_08003582",
            "FUN_08003594",
            "FUN_080035bc",
            "FUN_080035fc",
            "FUN_08003750",
            "FUN_0800387c",
            "FUN_08003f00",
            "FUN_08004094",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080040e0",
            "FUN_080040e4",
            "FUN_080040e8",
            "FUN_080040f8",
            "FUN_080040fc",
            "FUN_0800410c",
            "FUN_08004240",
            "FUN_08004364",
            "FUN_08004444",
            "FUN_08004460",
            "FUN_08004544",
            "FUN_08004640",
            "FUN_08004678",
            "FUN_08004844",
            "FUN_08004884",
            "FUN_080048cc",
            "FUN_080048dc",
            "FUN_08004cb0",
            "thunk_FUN_0800410c"
        ],
        [
            "FUN_080002d0",
            "FUN_080005e4",
            "FUN_08000682",
            "FUN_080007f0",
            "FUN_08000d98",
            "FUN_08000f56",
            "FUN_08001f9c",
            "FUN_0800201c",
            "FUN_080025ec",
            "FUN_0800260c",
            "FUN_0800262c",
            "FUN_08002864",
            "FUN_080028f0",
            "FUN_08002d0c",
            "FUN_0800340c",
            "FUN_0800346c",
            "FUN_08003476",
            "FUN_08003486",
            "FUN_080034b6",
            "FUN_080034f4",
            "FUN_0800351e",
            "FUN_0800354a",
            "FUN_08003754",
            "FUN_0800376e",
            "FUN_08003880",
            "FUN_080038d0",
            "FUN_08003900",
            "FUN_08003dd0",
            "FUN_08003df4",
            "FUN_08003eac",
            "FUN_08003f24",
            "FUN_08003f48",
            "FUN_08004560",
            "FUN_080047fe",
            "FUN_08004d9c",
            "FUN_0800500c",
            "FUN_0800532c",
            "FUN_080055d0",
            "FUN_080056d4",
            "FUN_080056f8",
            "FUN_08005718",
            "FUN_0800573c"
        ],
        [
            "FUN_08000690",
            "FUN_08000de4",
            "FUN_0800165a",
            "FUN_08001684",
            "FUN_08001ab0",
            "FUN_080023b4",
            "FUN_0800268e",
            "FUN_080026ce",
            "FUN_080029c8",
            "FUN_08002dd0",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08003380",
            "FUN_0800339c",
            "FUN_08003e18",
            "FUN_08003e54",
            "FUN_080041bc",
            "FUN_08004204",
            "FUN_080042e8",
            "FUN_0800447c",
            "FUN_080046b4",
            "FUN_08004978",
            "FUN_080051ac",
            "FUN_080054b4",
            "FUN_08005608",
            "FUN_08005662"
        ],
        [
            "FUN_080006b4",
            "FUN_0800076c",
            "FUN_08001bfc",
            "FUN_08001e68",
            "FUN_08002488",
            "FUN_08002d72",
            "FUN_08002ffc",
            "FUN_080033d8",
            "FUN_08003414",
            "FUN_0800377c",
            "FUN_080042ac",
            "FUN_080044d8",
            "FUN_08005374",
            "FUN_080054fc"
        ],
        [
            "FUN_080008e2",
            "FUN_08000998",
            "FUN_08000a00",
            "FUN_08000a4e",
            "FUN_08000a7a",
            "FUN_08000b04",
            "FUN_08000c8c",
            "FUN_08001d00",
            "FUN_08004110"
        ],
        [
            "FUN_08000b54",
            "FUN_080034ce"
        ],
        [
            "FUN_08000c64",
            "FUN_08000d8e"
        ],
        [
            "FUN_08004648"
        ],
        [
            "FUN_08005760"
        ],
        [
            "FUN_080047c0"
        ],
        [
            "FUN_080047d0"
        ],
        [
            "FUN_080011a4"
        ],
        [
            "FUN_080050d0",
            "FUN_080052cc",
            "FUN_08005400"
        ],
        [
            "FUN_080053a0"
        ],
        [
            "FUN_08004a34"
        ],
        [
            "FUN_08004a60"
        ],
        [
            "FUN_08004a84"
        ],
        [
            "FUN_08004860",
            "FUN_08004fdc"
        ],
        [
            "FUN_08003978",
            "FUN_08004808"
        ],
        [
            "FUN_08003cc8",
            "FUN_08004388"
        ],
        [
            "FUN_08000600",
            "FUN_08003d18"
        ],
        [
            "FUN_08000c4c",
            "FUN_080040ec"
        ],
        [
            "FUN_08004658",
            "FUN_0800562a"
        ]
    ],
    "locked_functions": []
}